
mini-projet-442.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016598  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e6d8  08016768  08016768  00017768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024e40  08024e40  000260f4  2**0
                  CONTENTS
  4 .ARM          00000008  08024e40  08024e40  00025e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024e48  08024e48  000260f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024e48  08024e48  00025e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024e4c  08024e4c  00025e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  08024e50  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005288  200000f4  08024f44  000260f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000537c  08024f44  0002637c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000260f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003590f  00000000  00000000  00026124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007fe2  00000000  00000000  0005ba33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d08  00000000  00000000  00063a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000022b3  00000000  00000000  00066720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032f4d  00000000  00000000  000689d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003a0f2  00000000  00000000  0009b920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a042  00000000  00000000  000d5a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001efa54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c644  00000000  00000000  001efa98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001fc0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000f4 	.word	0x200000f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016750 	.word	0x08016750

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000f8 	.word	0x200000f8
 800020c:	08016750 	.word	0x08016750

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000aa0:	f000 b96a 	b.w	8000d78 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14e      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	458c      	cmp	ip, r1
 8000acc:	4686      	mov	lr, r0
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	d962      	bls.n	8000b9a <__udivmoddi4+0xde>
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	4091      	lsls	r1, r2
 8000adc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f f68c 	uxth.w	r6, ip
 8000af2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	fb07 1114 	mls	r1, r7, r4, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb04 f106 	mul.w	r1, r4, r6
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b12:	f080 8112 	bcs.w	8000d3a <__udivmoddi4+0x27e>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 810f 	bls.w	8000d3a <__udivmoddi4+0x27e>
 8000b1c:	3c02      	subs	r4, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	fa1f f38e 	uxth.w	r3, lr
 8000b26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb00 f606 	mul.w	r6, r0, r6
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x94>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b42:	f080 80fc 	bcs.w	8000d3e <__udivmoddi4+0x282>
 8000b46:	429e      	cmp	r6, r3
 8000b48:	f240 80f9 	bls.w	8000d3e <__udivmoddi4+0x282>
 8000b4c:	4463      	add	r3, ip
 8000b4e:	3802      	subs	r0, #2
 8000b50:	1b9b      	subs	r3, r3, r6
 8000b52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b56:	2100      	movs	r1, #0
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa6>
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xba>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb4>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x150>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xcc>
 8000b82:	4290      	cmp	r0, r2
 8000b84:	f0c0 80f0 	bcc.w	8000d68 <__udivmoddi4+0x2ac>
 8000b88:	1a86      	subs	r6, r0, r2
 8000b8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0e6      	beq.n	8000b62 <__udivmoddi4+0xa6>
 8000b94:	e9c5 6300 	strd	r6, r3, [r5]
 8000b98:	e7e3      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	f040 8090 	bne.w	8000cc0 <__udivmoddi4+0x204>
 8000ba0:	eba1 040c 	sub.w	r4, r1, ip
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa1f f78c 	uxth.w	r7, ip
 8000bac:	2101      	movs	r1, #1
 8000bae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	fb07 f006 	mul.w	r0, r7, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x11c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x11a>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000bd6:	4626      	mov	r6, r4
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000be2:	fb08 4410 	mls	r4, r8, r0, r4
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	fb00 f707 	mul.w	r7, r0, r7
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x148>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x146>
 8000bfc:	429f      	cmp	r7, r3
 8000bfe:	f200 80b0 	bhi.w	8000d62 <__udivmoddi4+0x2a6>
 8000c02:	4620      	mov	r0, r4
 8000c04:	1bdb      	subs	r3, r3, r7
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x9c>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c20:	ea43 030c 	orr.w	r3, r3, ip
 8000c24:	40f4      	lsrs	r4, r6
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	0c38      	lsrs	r0, r7, #16
 8000c2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c30:	fbb4 fef0 	udiv	lr, r4, r0
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	fb00 441e 	mls	r4, r0, lr, r4
 8000c3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c40:	fb0e f90c 	mul.w	r9, lr, ip
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x1a6>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c52:	f080 8084 	bcs.w	8000d5e <__udivmoddi4+0x2a2>
 8000c56:	45a1      	cmp	r9, r4
 8000c58:	f240 8081 	bls.w	8000d5e <__udivmoddi4+0x2a2>
 8000c5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	eba4 0409 	sub.w	r4, r4, r9
 8000c66:	fa1f f983 	uxth.w	r9, r3
 8000c6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x1d2>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c84:	d267      	bcs.n	8000d56 <__udivmoddi4+0x29a>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d965      	bls.n	8000d56 <__udivmoddi4+0x29a>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	443c      	add	r4, r7
 8000c8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c92:	fba0 9302 	umull	r9, r3, r0, r2
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	46ce      	mov	lr, r9
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	d351      	bcc.n	8000d46 <__udivmoddi4+0x28a>
 8000ca2:	d04e      	beq.n	8000d42 <__udivmoddi4+0x286>
 8000ca4:	b155      	cbz	r5, 8000cbc <__udivmoddi4+0x200>
 8000ca6:	ebb8 030e 	subs.w	r3, r8, lr
 8000caa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e750      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	430c      	orrs	r4, r1
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce8:	0c23      	lsrs	r3, r4, #16
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f107 	mul.w	r1, r0, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x24c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cfe:	d22c      	bcs.n	8000d5a <__udivmoddi4+0x29e>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d92a      	bls.n	8000d5a <__udivmoddi4+0x29e>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d10:	fb08 3311 	mls	r3, r8, r1, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb01 f307 	mul.w	r3, r1, r7
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x276>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d28:	d213      	bcs.n	8000d52 <__udivmoddi4+0x296>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d911      	bls.n	8000d52 <__udivmoddi4+0x296>
 8000d2e:	3902      	subs	r1, #2
 8000d30:	4464      	add	r4, ip
 8000d32:	1ae4      	subs	r4, r4, r3
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	e739      	b.n	8000bae <__udivmoddi4+0xf2>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	e6f0      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e706      	b.n	8000b50 <__udivmoddi4+0x94>
 8000d42:	45c8      	cmp	r8, r9
 8000d44:	d2ae      	bcs.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d4e:	3801      	subs	r0, #1
 8000d50:	e7a8      	b.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d52:	4631      	mov	r1, r6
 8000d54:	e7ed      	b.n	8000d32 <__udivmoddi4+0x276>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e799      	b.n	8000c8e <__udivmoddi4+0x1d2>
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	e7d4      	b.n	8000d08 <__udivmoddi4+0x24c>
 8000d5e:	46d6      	mov	lr, sl
 8000d60:	e77f      	b.n	8000c62 <__udivmoddi4+0x1a6>
 8000d62:	4463      	add	r3, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	e74d      	b.n	8000c04 <__udivmoddi4+0x148>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e70f      	b.n	8000b90 <__udivmoddi4+0xd4>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	e730      	b.n	8000bd8 <__udivmoddi4+0x11c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d82:	463b      	mov	r3, r7
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d8e:	4b21      	ldr	r3, [pc, #132]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d90:	4a21      	ldr	r2, [pc, #132]	@ (8000e18 <MX_ADC1_Init+0x9c>)
 8000d92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d94:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d96:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000da2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dae:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000db6:	4b17      	ldr	r3, [pc, #92]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dbe:	4a17      	ldr	r2, [pc, #92]	@ (8000e1c <MX_ADC1_Init+0xa0>)
 8000dc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ddc:	480d      	ldr	r0, [pc, #52]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dde:	f006 ffd3 	bl	8007d88 <HAL_ADC_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000de8:	f002 fc98 	bl	800371c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000df0:	2301      	movs	r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df8:	463b      	mov	r3, r7
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dfe:	f007 f96d 	bl	80080dc <HAL_ADC_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e08:	f002 fc88 	bl	800371c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000110 	.word	0x20000110
 8000e18:	40012000 	.word	0x40012000
 8000e1c:	0f000001 	.word	0x0f000001

08000e20 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e26:	463b      	mov	r3, r7
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000e32:	4b21      	ldr	r3, [pc, #132]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e34:	4a21      	ldr	r2, [pc, #132]	@ (8000ebc <MX_ADC3_Init+0x9c>)
 8000e36:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e38:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e3e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e46:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e52:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e5a:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e60:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e62:	4a17      	ldr	r2, [pc, #92]	@ (8000ec0 <MX_ADC3_Init+0xa0>)
 8000e64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e66:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e72:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e80:	480d      	ldr	r0, [pc, #52]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e82:	f006 ff81 	bl	8007d88 <HAL_ADC_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000e8c:	f002 fc46 	bl	800371c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e90:	2306      	movs	r3, #6
 8000e92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000ea2:	f007 f91b 	bl	80080dc <HAL_ADC_ConfigChannel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000eac:	f002 fc36 	bl	800371c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000158 	.word	0x20000158
 8000ebc:	40012200 	.word	0x40012200
 8000ec0:	0f000001 	.word	0x0f000001

08000ec4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08c      	sub	sp, #48	@ 0x30
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8000f8c <HAL_ADC_MspInit+0xc8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d124      	bne.n	8000f30 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	4a29      	ldr	r2, [pc, #164]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef2:	4b27      	ldr	r3, [pc, #156]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b24      	ldr	r3, [pc, #144]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a23      	ldr	r2, [pc, #140]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b21      	ldr	r3, [pc, #132]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f16:	2301      	movs	r3, #1
 8000f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	481a      	ldr	r0, [pc, #104]	@ (8000f94 <HAL_ADC_MspInit+0xd0>)
 8000f2a:	f008 fb87 	bl	800963c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000f2e:	e029      	b.n	8000f84 <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a18      	ldr	r2, [pc, #96]	@ (8000f98 <HAL_ADC_MspInit+0xd4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d124      	bne.n	8000f84 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000f3a:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3e:	4a14      	ldr	r2, [pc, #80]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f46:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f52:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a0e      	ldr	r2, [pc, #56]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f58:	f043 0320 	orr.w	r3, r3, #32
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0320 	and.w	r3, r3, #32
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8000f6a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f70:	2303      	movs	r3, #3
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <HAL_ADC_MspInit+0xd8>)
 8000f80:	f008 fb5c 	bl	800963c <HAL_GPIO_Init>
}
 8000f84:	bf00      	nop
 8000f86:	3730      	adds	r7, #48	@ 0x30
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40012000 	.word	0x40012000
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40012200 	.word	0x40012200
 8000f9c:	40021400 	.word	0x40021400

08000fa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fa6:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <MX_DMA_Init+0x68>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	4a17      	ldr	r2, [pc, #92]	@ (8001008 <MX_DMA_Init+0x68>)
 8000fac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb2:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <MX_DMA_Init+0x68>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2105      	movs	r1, #5
 8000fc2:	203b      	movs	r0, #59	@ 0x3b
 8000fc4:	f007 fb92 	bl	80086ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000fc8:	203b      	movs	r0, #59	@ 0x3b
 8000fca:	f007 fbab 	bl	8008724 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2105      	movs	r1, #5
 8000fd2:	203c      	movs	r0, #60	@ 0x3c
 8000fd4:	f007 fb8a 	bl	80086ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000fd8:	203c      	movs	r0, #60	@ 0x3c
 8000fda:	f007 fba3 	bl	8008724 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2105      	movs	r1, #5
 8000fe2:	2045      	movs	r0, #69	@ 0x45
 8000fe4:	f007 fb82 	bl	80086ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000fe8:	2045      	movs	r0, #69	@ 0x45
 8000fea:	f007 fb9b 	bl	8008724 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2105      	movs	r1, #5
 8000ff2:	2046      	movs	r0, #70	@ 0x46
 8000ff4:	f007 fb7a 	bl	80086ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000ff8:	2046      	movs	r0, #70	@ 0x46
 8000ffa:	f007 fb93 	bl	8008724 <HAL_NVIC_EnableIRQ>

}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800

0800100c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001010:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001012:	4a16      	ldr	r2, [pc, #88]	@ (800106c <MX_DMA2D_Init+0x60>)
 8001014:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001016:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001018:	2200      	movs	r2, #0
 800101a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800101c:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001028:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 800102a:	2200      	movs	r2, #0
 800102c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001030:	2200      	movs	r2, #0
 8001032:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001034:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001036:	2200      	movs	r2, #0
 8001038:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800103a:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 800103c:	2200      	movs	r2, #0
 800103e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001040:	4809      	ldr	r0, [pc, #36]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001042:	f007 ff5f 	bl	8008f04 <HAL_DMA2D_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800104c:	f002 fb66 	bl	800371c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001050:	2101      	movs	r1, #1
 8001052:	4805      	ldr	r0, [pc, #20]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001054:	f008 f9c4 	bl	80093e0 <HAL_DMA2D_ConfigLayer>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800105e:	f002 fb5d 	bl	800371c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200001a0 	.word	0x200001a0
 800106c:	4002b000 	.word	0x4002b000

08001070 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0d      	ldr	r2, [pc, #52]	@ (80010b4 <HAL_DMA2D_MspInit+0x44>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d113      	bne.n	80010aa <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001082:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <HAL_DMA2D_MspInit+0x48>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a0c      	ldr	r2, [pc, #48]	@ (80010b8 <HAL_DMA2D_MspInit+0x48>)
 8001088:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <HAL_DMA2D_MspInit+0x48>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2105      	movs	r1, #5
 800109e:	205a      	movs	r0, #90	@ 0x5a
 80010a0:	f007 fb24 	bl	80086ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80010a4:	205a      	movs	r0, #90	@ 0x5a
 80010a6:	f007 fb3d 	bl	8008724 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	4002b000 	.word	0x4002b000
 80010b8:	40023800 	.word	0x40023800

080010bc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
 80010d0:	615a      	str	r2, [r3, #20]
 80010d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80010d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001154 <MX_FMC_Init+0x98>)
 80010d6:	4a20      	ldr	r2, [pc, #128]	@ (8001158 <MX_FMC_Init+0x9c>)
 80010d8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80010da:	4b1e      	ldr	r3, [pc, #120]	@ (8001154 <MX_FMC_Init+0x98>)
 80010dc:	2200      	movs	r2, #0
 80010de:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80010e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001154 <MX_FMC_Init+0x98>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <MX_FMC_Init+0x98>)
 80010e8:	2204      	movs	r2, #4
 80010ea:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <MX_FMC_Init+0x98>)
 80010ee:	2210      	movs	r2, #16
 80010f0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80010f2:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <MX_FMC_Init+0x98>)
 80010f4:	2240      	movs	r2, #64	@ 0x40
 80010f6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80010f8:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <MX_FMC_Init+0x98>)
 80010fa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80010fe:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001100:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <MX_FMC_Init+0x98>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001106:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <MX_FMC_Init+0x98>)
 8001108:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800110c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800110e:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <MX_FMC_Init+0x98>)
 8001110:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001114:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001116:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_FMC_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800111c:	2302      	movs	r3, #2
 800111e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001120:	2307      	movs	r3, #7
 8001122:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001124:	2304      	movs	r3, #4
 8001126:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001128:	2307      	movs	r3, #7
 800112a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800112c:	2303      	movs	r3, #3
 800112e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001130:	2302      	movs	r3, #2
 8001132:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001134:	2302      	movs	r3, #2
 8001136:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	@ (8001154 <MX_FMC_Init+0x98>)
 800113e:	f00c fbd1 	bl	800d8e4 <HAL_SDRAM_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001148:	f002 fae8 	bl	800371c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800114c:	bf00      	nop
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200001e0 	.word	0x200001e0
 8001158:	a0000140 	.word	0xa0000140

0800115c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001170:	4b3a      	ldr	r3, [pc, #232]	@ (800125c <HAL_FMC_MspInit+0x100>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d16d      	bne.n	8001254 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001178:	4b38      	ldr	r3, [pc, #224]	@ (800125c <HAL_FMC_MspInit+0x100>)
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800117e:	4b38      	ldr	r3, [pc, #224]	@ (8001260 <HAL_FMC_MspInit+0x104>)
 8001180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001182:	4a37      	ldr	r2, [pc, #220]	@ (8001260 <HAL_FMC_MspInit+0x104>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6393      	str	r3, [r2, #56]	@ 0x38
 800118a:	4b35      	ldr	r3, [pc, #212]	@ (8001260 <HAL_FMC_MspInit+0x104>)
 800118c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001196:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800119a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011a8:	230c      	movs	r3, #12
 80011aa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	4619      	mov	r1, r3
 80011b0:	482c      	ldr	r0, [pc, #176]	@ (8001264 <HAL_FMC_MspInit+0x108>)
 80011b2:	f008 fa43 	bl	800963c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80011b6:	f248 1333 	movw	r3, #33075	@ 0x8133
 80011ba:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011c8:	230c      	movs	r3, #12
 80011ca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	4619      	mov	r1, r3
 80011d0:	4825      	ldr	r0, [pc, #148]	@ (8001268 <HAL_FMC_MspInit+0x10c>)
 80011d2:	f008 fa33 	bl	800963c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80011d6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80011da:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011e8:	230c      	movs	r3, #12
 80011ea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4619      	mov	r1, r3
 80011f0:	481e      	ldr	r0, [pc, #120]	@ (800126c <HAL_FMC_MspInit+0x110>)
 80011f2:	f008 fa23 	bl	800963c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80011f6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80011fa:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001208:	230c      	movs	r3, #12
 800120a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	4619      	mov	r1, r3
 8001210:	4817      	ldr	r0, [pc, #92]	@ (8001270 <HAL_FMC_MspInit+0x114>)
 8001212:	f008 fa13 	bl	800963c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001216:	2328      	movs	r3, #40	@ 0x28
 8001218:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001226:	230c      	movs	r3, #12
 8001228:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	4619      	mov	r1, r3
 800122e:	4811      	ldr	r0, [pc, #68]	@ (8001274 <HAL_FMC_MspInit+0x118>)
 8001230:	f008 fa04 	bl	800963c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001234:	2308      	movs	r3, #8
 8001236:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001244:	230c      	movs	r3, #12
 8001246:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	4619      	mov	r1, r3
 800124c:	480a      	ldr	r0, [pc, #40]	@ (8001278 <HAL_FMC_MspInit+0x11c>)
 800124e:	f008 f9f5 	bl	800963c <HAL_GPIO_Init>
 8001252:	e000      	b.n	8001256 <HAL_FMC_MspInit+0xfa>
    return;
 8001254:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000214 	.word	0x20000214
 8001260:	40023800 	.word	0x40023800
 8001264:	40021000 	.word	0x40021000
 8001268:	40021800 	.word	0x40021800
 800126c:	40020c00 	.word	0x40020c00
 8001270:	40021400 	.word	0x40021400
 8001274:	40021c00 	.word	0x40021c00
 8001278:	40020800 	.word	0x40020800

0800127c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001284:	f7ff ff6a 	bl	800115c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4a07      	ldr	r2, [pc, #28]	@ (80012bc <vApplicationGetIdleTaskMemory+0x2c>)
 80012a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	4a06      	ldr	r2, [pc, #24]	@ (80012c0 <vApplicationGetIdleTaskMemory+0x30>)
 80012a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2280      	movs	r2, #128	@ 0x80
 80012ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012ae:	bf00      	nop
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	2000040c 	.word	0x2000040c
 80012c0:	200004ac 	.word	0x200004ac

080012c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012c4:	b5b0      	push	{r4, r5, r7, lr}
 80012c6:	b0b0      	sub	sp, #192	@ 0xc0
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of displayMutex */
  osMutexDef(displayMutex);
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  displayMutexHandle = osMutexCreate(osMutex(displayMutex));
 80012d6:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80012da:	4618      	mov	r0, r3
 80012dc:	f011 f89c 	bl	8012418 <osMutexCreate>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4a42      	ldr	r2, [pc, #264]	@ (80013ec <MX_FREERTOS_Init+0x128>)
 80012e4:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of WakeUp */
  osMessageQDef(WakeUp, 1, uint8_t);
 80012e6:	4b42      	ldr	r3, [pc, #264]	@ (80013f0 <MX_FREERTOS_Init+0x12c>)
 80012e8:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 80012ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  WakeUpHandle = osMessageCreate(osMessageQ(WakeUp), NULL);
 80012f2:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f011 f96e 	bl	80125da <osMessageCreate>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a3c      	ldr	r2, [pc, #240]	@ (80013f4 <MX_FREERTOS_Init+0x130>)
 8001302:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001304:	4b3c      	ldr	r3, [pc, #240]	@ (80013f8 <MX_FREERTOS_Init+0x134>)
 8001306:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800130a:	461d      	mov	r5, r3
 800130c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800130e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001310:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001314:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001318:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f011 f81a 	bl	8012358 <osThreadCreate>
 8001324:	4603      	mov	r3, r0
 8001326:	4a35      	ldr	r2, [pc, #212]	@ (80013fc <MX_FREERTOS_Init+0x138>)
 8001328:	6013      	str	r3, [r2, #0]

  /* definition and creation of displayTask */
  osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 1024);
 800132a:	4b35      	ldr	r3, [pc, #212]	@ (8001400 <MX_FREERTOS_Init+0x13c>)
 800132c:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8001330:	461d      	mov	r5, r3
 8001332:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001336:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800133a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 800133e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f011 f807 	bl	8012358 <osThreadCreate>
 800134a:	4603      	mov	r3, r0
 800134c:	4a2d      	ldr	r2, [pc, #180]	@ (8001404 <MX_FREERTOS_Init+0x140>)
 800134e:	6013      	str	r3, [r2, #0]

  /* definition and creation of joystickTask */
  osThreadDef(joystickTask, StartJoystickTask, osPriorityAboveNormal, 0, 128);
 8001350:	4b2d      	ldr	r3, [pc, #180]	@ (8001408 <MX_FREERTOS_Init+0x144>)
 8001352:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001356:	461d      	mov	r5, r3
 8001358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800135a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001360:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  joystickTaskHandle = osThreadCreate(osThread(joystickTask), NULL);
 8001364:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f010 fff4 	bl	8012358 <osThreadCreate>
 8001370:	4603      	mov	r3, r0
 8001372:	4a26      	ldr	r2, [pc, #152]	@ (800140c <MX_FREERTOS_Init+0x148>)
 8001374:	6013      	str	r3, [r2, #0]

  /* definition and creation of manageBodyParts */
  osThreadDef(manageBodyParts, StartManageBodyParts, osPriorityAboveNormal, 0, 128);
 8001376:	4b26      	ldr	r3, [pc, #152]	@ (8001410 <MX_FREERTOS_Init+0x14c>)
 8001378:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800137c:	461d      	mov	r5, r3
 800137e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001382:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001386:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  manageBodyPartsHandle = osThreadCreate(osThread(manageBodyParts), NULL);
 800138a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f010 ffe1 	bl	8012358 <osThreadCreate>
 8001396:	4603      	mov	r3, r0
 8001398:	4a1e      	ldr	r2, [pc, #120]	@ (8001414 <MX_FREERTOS_Init+0x150>)
 800139a:	6013      	str	r3, [r2, #0]

  /* definition and creation of tsHandlerTask */
  osThreadDef(tsHandlerTask, StartTsHandlerTask, osPriorityHigh, 0, 512);
 800139c:	4b1e      	ldr	r3, [pc, #120]	@ (8001418 <MX_FREERTOS_Init+0x154>)
 800139e:	f107 041c 	add.w	r4, r7, #28
 80013a2:	461d      	mov	r5, r3
 80013a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tsHandlerTaskHandle = osThreadCreate(osThread(tsHandlerTask), NULL);
 80013b0:	f107 031c 	add.w	r3, r7, #28
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f010 ffce 	bl	8012358 <osThreadCreate>
 80013bc:	4603      	mov	r3, r0
 80013be:	4a17      	ldr	r2, [pc, #92]	@ (800141c <MX_FREERTOS_Init+0x158>)
 80013c0:	6013      	str	r3, [r2, #0]

  /* definition and creation of playSongTask */
  osThreadDef(playSongTask, StartPlaySongTask, osPriorityHigh, 0, 256);
 80013c2:	4b17      	ldr	r3, [pc, #92]	@ (8001420 <MX_FREERTOS_Init+0x15c>)
 80013c4:	463c      	mov	r4, r7
 80013c6:	461d      	mov	r5, r3
 80013c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  playSongTaskHandle = osThreadCreate(osThread(playSongTask), NULL);
 80013d4:	463b      	mov	r3, r7
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f010 ffbd 	bl	8012358 <osThreadCreate>
 80013de:	4603      	mov	r3, r0
 80013e0:	4a10      	ldr	r2, [pc, #64]	@ (8001424 <MX_FREERTOS_Init+0x160>)
 80013e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80013e4:	bf00      	nop
 80013e6:	37c0      	adds	r7, #192	@ 0xc0
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bdb0      	pop	{r4, r5, r7, pc}
 80013ec:	20000408 	.word	0x20000408
 80013f0:	08016768 	.word	0x08016768
 80013f4:	20000404 	.word	0x20000404
 80013f8:	08016784 	.word	0x08016784
 80013fc:	200003ec 	.word	0x200003ec
 8001400:	080167ac 	.word	0x080167ac
 8001404:	200003f0 	.word	0x200003f0
 8001408:	080167d8 	.word	0x080167d8
 800140c:	200003f4 	.word	0x200003f4
 8001410:	08016804 	.word	0x08016804
 8001414:	200003f8 	.word	0x200003f8
 8001418:	08016830 	.word	0x08016830
 800141c:	200003fc 	.word	0x200003fc
 8001420:	0801685c 	.word	0x0801685c
 8001424:	20000400 	.word	0x20000400

08001428 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001430:	2001      	movs	r0, #1
 8001432:	f010 ffdd 	bl	80123f0 <osDelay>
 8001436:	e7fb      	b.n	8001430 <StartDefaultTask+0x8>

08001438 <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void const * argument)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b0d0      	sub	sp, #320	@ 0x140
 800143c:	af00      	add	r7, sp, #0
 800143e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001442:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001446:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDisplayTask */
  /* Infinite loop */
  for(;;)
  {
    if ((gameOver || gamePaused || !gameStarted) && !lastMove) {
 8001448:	4bc0      	ldr	r3, [pc, #768]	@ (800174c <StartDisplayTask+0x314>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d107      	bne.n	8001460 <StartDisplayTask+0x28>
 8001450:	4bbf      	ldr	r3, [pc, #764]	@ (8001750 <StartDisplayTask+0x318>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d103      	bne.n	8001460 <StartDisplayTask+0x28>
 8001458:	4bbe      	ldr	r3, [pc, #760]	@ (8001754 <StartDisplayTask+0x31c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d114      	bne.n	800148a <StartDisplayTask+0x52>
 8001460:	4bbd      	ldr	r3, [pc, #756]	@ (8001758 <StartDisplayTask+0x320>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d110      	bne.n	800148a <StartDisplayTask+0x52>
      xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8001468:	4bbc      	ldr	r3, [pc, #752]	@ (800175c <StartDisplayTask+0x324>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001470:	4618      	mov	r0, r3
 8001472:	f011 ff13 	bl	801329c <xQueueSemaphoreTake>
      displayGameStatus();
 8001476:	f000 fff5 	bl	8002464 <displayGameStatus>
      xSemaphoreGive(displayMutexHandle);
 800147a:	4bb8      	ldr	r3, [pc, #736]	@ (800175c <StartDisplayTask+0x324>)
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	2300      	movs	r3, #0
 8001480:	2200      	movs	r2, #0
 8001482:	2100      	movs	r1, #0
 8001484:	f011 fbdc 	bl	8012c40 <xQueueGenericSend>
 8001488:	e223      	b.n	80018d2 <StartDisplayTask+0x49a>
    }
    else {
      // On convertit la direction en texte
      char directionText[100];
      switch (direction) {
 800148a:	4bb5      	ldr	r3, [pc, #724]	@ (8001760 <StartDisplayTask+0x328>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b03      	cmp	r3, #3
 8001490:	d826      	bhi.n	80014e0 <StartDisplayTask+0xa8>
 8001492:	a201      	add	r2, pc, #4	@ (adr r2, 8001498 <StartDisplayTask+0x60>)
 8001494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001498:	080014a9 	.word	0x080014a9
 800149c:	080014b7 	.word	0x080014b7
 80014a0:	080014c5 	.word	0x080014c5
 80014a4:	080014d3 	.word	0x080014d3
        case Up:
          sprintf(directionText, (char *)"Direction: Up   ");
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	49ad      	ldr	r1, [pc, #692]	@ (8001764 <StartDisplayTask+0x32c>)
 80014ae:	4618      	mov	r0, r3
 80014b0:	f014 f844 	bl	801553c <siprintf>
          break;
 80014b4:	e014      	b.n	80014e0 <StartDisplayTask+0xa8>
        case Down:
          sprintf(directionText, (char *)"Direction: Down ");
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	49ab      	ldr	r1, [pc, #684]	@ (8001768 <StartDisplayTask+0x330>)
 80014bc:	4618      	mov	r0, r3
 80014be:	f014 f83d 	bl	801553c <siprintf>
          break;
 80014c2:	e00d      	b.n	80014e0 <StartDisplayTask+0xa8>
        case Left:
          sprintf(directionText, (char *)"Direction: Left ");
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	49a8      	ldr	r1, [pc, #672]	@ (800176c <StartDisplayTask+0x334>)
 80014ca:	4618      	mov	r0, r3
 80014cc:	f014 f836 	bl	801553c <siprintf>
          break;
 80014d0:	e006      	b.n	80014e0 <StartDisplayTask+0xa8>
        case Right:
          sprintf(directionText, (char *)"Direction: Right");
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	49a6      	ldr	r1, [pc, #664]	@ (8001770 <StartDisplayTask+0x338>)
 80014d8:	4618      	mov	r0, r3
 80014da:	f014 f82f 	bl	801553c <siprintf>
          break;
 80014de:	bf00      	nop
      }
      // On convertit le score en texte
      char scoreText[100];
      sprintf(scoreText, (char *)"Score: %d", snakeSize);
 80014e0:	4ba4      	ldr	r3, [pc, #656]	@ (8001774 <StartDisplayTask+0x33c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80014ea:	49a3      	ldr	r1, [pc, #652]	@ (8001778 <StartDisplayTask+0x340>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	f014 f825 	bl	801553c <siprintf>

      // On convertit la vitesse en texte
      char speedText[100];
      sprintf(speedText, (char *)"Speed: %d Hz", speed);
 80014f2:	4ba2      	ldr	r3, [pc, #648]	@ (800177c <StartDisplayTask+0x344>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014fc:	49a0      	ldr	r1, [pc, #640]	@ (8001780 <StartDisplayTask+0x348>)
 80014fe:	4618      	mov	r0, r3
 8001500:	f014 f81c 	bl	801553c <siprintf>

      xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8001504:	4b95      	ldr	r3, [pc, #596]	@ (800175c <StartDisplayTask+0x324>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800150c:	4618      	mov	r0, r3
 800150e:	f011 fec5 	bl	801329c <xQueueSemaphoreTake>
      BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8001512:	489c      	ldr	r0, [pc, #624]	@ (8001784 <StartDisplayTask+0x34c>)
 8001514:	f003 fae2 	bl	8004adc <BSP_LCD_SetTextColor>
      BSP_LCD_DrawHLine(0, 8*32, BSP_LCD_GetXSize());
 8001518:	f003 fa48 	bl	80049ac <BSP_LCD_GetXSize>
 800151c:	4603      	mov	r3, r0
 800151e:	b29b      	uxth	r3, r3
 8001520:	461a      	mov	r2, r3
 8001522:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001526:	2000      	movs	r0, #0
 8001528:	f003 fc58 	bl	8004ddc <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(0, 8*32 + 1, BSP_LCD_GetXSize());
 800152c:	f003 fa3e 	bl	80049ac <BSP_LCD_GetXSize>
 8001530:	4603      	mov	r3, r0
 8001532:	b29b      	uxth	r3, r3
 8001534:	461a      	mov	r2, r3
 8001536:	f240 1101 	movw	r1, #257	@ 0x101
 800153a:	2000      	movs	r0, #0
 800153c:	f003 fc4e 	bl	8004ddc <BSP_LCD_DrawHLine>

      // On affiche la direction, le score et la vitesse
      BSP_LCD_DisplayStringAt(0, 8*32 + 2, (uint8_t *)directionText, LEFT_MODE);
 8001540:	f107 020c 	add.w	r2, r7, #12
 8001544:	2303      	movs	r3, #3
 8001546:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800154a:	2000      	movs	r0, #0
 800154c:	f003 fb7e 	bl	8004c4c <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(200, 8*32 + 2, (uint8_t *)scoreText, LEFT_MODE);
 8001550:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8001554:	2303      	movs	r3, #3
 8001556:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800155a:	20c8      	movs	r0, #200	@ 0xc8
 800155c:	f003 fb76 	bl	8004c4c <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(350, 8*32 + 2, (uint8_t *)speedText, LEFT_MODE);
 8001560:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8001564:	2303      	movs	r3, #3
 8001566:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800156a:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 800156e:	f003 fb6d 	bl	8004c4c <BSP_LCD_DisplayStringAt>

      // On affiche la tête du snake
      if (!lastMove)
 8001572:	4b79      	ldr	r3, [pc, #484]	@ (8001758 <StartDisplayTask+0x320>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d13e      	bne.n	80015f8 <StartDisplayTask+0x1c0>
        switch (headPart) {
 800157a:	4b83      	ldr	r3, [pc, #524]	@ (8001788 <StartDisplayTask+0x350>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b03      	cmp	r3, #3
 8001580:	d83a      	bhi.n	80015f8 <StartDisplayTask+0x1c0>
 8001582:	a201      	add	r2, pc, #4	@ (adr r2, 8001588 <StartDisplayTask+0x150>)
 8001584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001588:	080015b1 	.word	0x080015b1
 800158c:	08001599 	.word	0x08001599
 8001590:	080015c9 	.word	0x080015c9
 8001594:	080015e1 	.word	0x080015e1
          case HeadBottom:
            BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_bottom_81CD4B_bmp);
 8001598:	4b7c      	ldr	r3, [pc, #496]	@ (800178c <StartDisplayTask+0x354>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	015b      	lsls	r3, r3, #5
 800159e:	4618      	mov	r0, r3
 80015a0:	4b7a      	ldr	r3, [pc, #488]	@ (800178c <StartDisplayTask+0x354>)
 80015a2:	785b      	ldrb	r3, [r3, #1]
 80015a4:	015b      	lsls	r3, r3, #5
 80015a6:	4a7a      	ldr	r2, [pc, #488]	@ (8001790 <StartDisplayTask+0x358>)
 80015a8:	4619      	mov	r1, r3
 80015aa:	f003 fcbd 	bl	8004f28 <BSP_LCD_DrawBitmap>
            break;
 80015ae:	e023      	b.n	80015f8 <StartDisplayTask+0x1c0>
          case HeadTop:
            BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_top_81CD4B_bmp);
 80015b0:	4b76      	ldr	r3, [pc, #472]	@ (800178c <StartDisplayTask+0x354>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	015b      	lsls	r3, r3, #5
 80015b6:	4618      	mov	r0, r3
 80015b8:	4b74      	ldr	r3, [pc, #464]	@ (800178c <StartDisplayTask+0x354>)
 80015ba:	785b      	ldrb	r3, [r3, #1]
 80015bc:	015b      	lsls	r3, r3, #5
 80015be:	4a75      	ldr	r2, [pc, #468]	@ (8001794 <StartDisplayTask+0x35c>)
 80015c0:	4619      	mov	r1, r3
 80015c2:	f003 fcb1 	bl	8004f28 <BSP_LCD_DrawBitmap>
            break;
 80015c6:	e017      	b.n	80015f8 <StartDisplayTask+0x1c0>
          case HeadLeft:
            BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_left_81CD4B_bmp);
 80015c8:	4b70      	ldr	r3, [pc, #448]	@ (800178c <StartDisplayTask+0x354>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	015b      	lsls	r3, r3, #5
 80015ce:	4618      	mov	r0, r3
 80015d0:	4b6e      	ldr	r3, [pc, #440]	@ (800178c <StartDisplayTask+0x354>)
 80015d2:	785b      	ldrb	r3, [r3, #1]
 80015d4:	015b      	lsls	r3, r3, #5
 80015d6:	4a70      	ldr	r2, [pc, #448]	@ (8001798 <StartDisplayTask+0x360>)
 80015d8:	4619      	mov	r1, r3
 80015da:	f003 fca5 	bl	8004f28 <BSP_LCD_DrawBitmap>
            break;
 80015de:	e00b      	b.n	80015f8 <StartDisplayTask+0x1c0>
          case HeadRight:
            BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_right_81CD4B_bmp);
 80015e0:	4b6a      	ldr	r3, [pc, #424]	@ (800178c <StartDisplayTask+0x354>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	015b      	lsls	r3, r3, #5
 80015e6:	4618      	mov	r0, r3
 80015e8:	4b68      	ldr	r3, [pc, #416]	@ (800178c <StartDisplayTask+0x354>)
 80015ea:	785b      	ldrb	r3, [r3, #1]
 80015ec:	015b      	lsls	r3, r3, #5
 80015ee:	4a6b      	ldr	r2, [pc, #428]	@ (800179c <StartDisplayTask+0x364>)
 80015f0:	4619      	mov	r1, r3
 80015f2:	f003 fc99 	bl	8004f28 <BSP_LCD_DrawBitmap>
            break;
 80015f6:	bf00      	nop
        }

      // On affiche le corps du snake
      for (int i = 0; i < snakeSize; i++) {
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80015fe:	e08e      	b.n	800171e <StartDisplayTask+0x2e6>
        switch (snakeBodyParts[i]) {
 8001600:	4a67      	ldr	r2, [pc, #412]	@ (80017a0 <StartDisplayTask+0x368>)
 8001602:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001606:	4413      	add	r3, r2
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b05      	cmp	r3, #5
 800160c:	f200 8082 	bhi.w	8001714 <StartDisplayTask+0x2dc>
 8001610:	a201      	add	r2, pc, #4	@ (adr r2, 8001618 <StartDisplayTask+0x1e0>)
 8001612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001616:	bf00      	nop
 8001618:	08001631 	.word	0x08001631
 800161c:	08001657 	.word	0x08001657
 8001620:	0800167d 	.word	0x0800167d
 8001624:	080016a3 	.word	0x080016a3
 8001628:	080016c9 	.word	0x080016c9
 800162c:	080016ef 	.word	0x080016ef
          case BottomLeft:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_left_81CD4B_bmp);
 8001630:	4a5c      	ldr	r2, [pc, #368]	@ (80017a4 <StartDisplayTask+0x36c>)
 8001632:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001636:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800163a:	015b      	lsls	r3, r3, #5
 800163c:	4618      	mov	r0, r3
 800163e:	4a59      	ldr	r2, [pc, #356]	@ (80017a4 <StartDisplayTask+0x36c>)
 8001640:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4413      	add	r3, r2
 8001648:	785b      	ldrb	r3, [r3, #1]
 800164a:	015b      	lsls	r3, r3, #5
 800164c:	4a56      	ldr	r2, [pc, #344]	@ (80017a8 <StartDisplayTask+0x370>)
 800164e:	4619      	mov	r1, r3
 8001650:	f003 fc6a 	bl	8004f28 <BSP_LCD_DrawBitmap>
            break;
 8001654:	e05e      	b.n	8001714 <StartDisplayTask+0x2dc>
          case BottomRight:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_right_81CD4B_bmp);
 8001656:	4a53      	ldr	r2, [pc, #332]	@ (80017a4 <StartDisplayTask+0x36c>)
 8001658:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800165c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001660:	015b      	lsls	r3, r3, #5
 8001662:	4618      	mov	r0, r3
 8001664:	4a4f      	ldr	r2, [pc, #316]	@ (80017a4 <StartDisplayTask+0x36c>)
 8001666:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4413      	add	r3, r2
 800166e:	785b      	ldrb	r3, [r3, #1]
 8001670:	015b      	lsls	r3, r3, #5
 8001672:	4a4e      	ldr	r2, [pc, #312]	@ (80017ac <StartDisplayTask+0x374>)
 8001674:	4619      	mov	r1, r3
 8001676:	f003 fc57 	bl	8004f28 <BSP_LCD_DrawBitmap>
            break;
 800167a:	e04b      	b.n	8001714 <StartDisplayTask+0x2dc>
          case BottomTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_top_81CD4B_bmp);
 800167c:	4a49      	ldr	r2, [pc, #292]	@ (80017a4 <StartDisplayTask+0x36c>)
 800167e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001682:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001686:	015b      	lsls	r3, r3, #5
 8001688:	4618      	mov	r0, r3
 800168a:	4a46      	ldr	r2, [pc, #280]	@ (80017a4 <StartDisplayTask+0x36c>)
 800168c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4413      	add	r3, r2
 8001694:	785b      	ldrb	r3, [r3, #1]
 8001696:	015b      	lsls	r3, r3, #5
 8001698:	4a45      	ldr	r2, [pc, #276]	@ (80017b0 <StartDisplayTask+0x378>)
 800169a:	4619      	mov	r1, r3
 800169c:	f003 fc44 	bl	8004f28 <BSP_LCD_DrawBitmap>
            break;
 80016a0:	e038      	b.n	8001714 <StartDisplayTask+0x2dc>
          case LeftRight:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_left_right_81CD4B_bmp);
 80016a2:	4a40      	ldr	r2, [pc, #256]	@ (80017a4 <StartDisplayTask+0x36c>)
 80016a4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016a8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80016ac:	015b      	lsls	r3, r3, #5
 80016ae:	4618      	mov	r0, r3
 80016b0:	4a3c      	ldr	r2, [pc, #240]	@ (80017a4 <StartDisplayTask+0x36c>)
 80016b2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	4413      	add	r3, r2
 80016ba:	785b      	ldrb	r3, [r3, #1]
 80016bc:	015b      	lsls	r3, r3, #5
 80016be:	4a3d      	ldr	r2, [pc, #244]	@ (80017b4 <StartDisplayTask+0x37c>)
 80016c0:	4619      	mov	r1, r3
 80016c2:	f003 fc31 	bl	8004f28 <BSP_LCD_DrawBitmap>
            break;
 80016c6:	e025      	b.n	8001714 <StartDisplayTask+0x2dc>
          case LeftTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_left_top_81CD4B_bmp);
 80016c8:	4a36      	ldr	r2, [pc, #216]	@ (80017a4 <StartDisplayTask+0x36c>)
 80016ca:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016ce:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80016d2:	015b      	lsls	r3, r3, #5
 80016d4:	4618      	mov	r0, r3
 80016d6:	4a33      	ldr	r2, [pc, #204]	@ (80017a4 <StartDisplayTask+0x36c>)
 80016d8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4413      	add	r3, r2
 80016e0:	785b      	ldrb	r3, [r3, #1]
 80016e2:	015b      	lsls	r3, r3, #5
 80016e4:	4a34      	ldr	r2, [pc, #208]	@ (80017b8 <StartDisplayTask+0x380>)
 80016e6:	4619      	mov	r1, r3
 80016e8:	f003 fc1e 	bl	8004f28 <BSP_LCD_DrawBitmap>
            break;
 80016ec:	e012      	b.n	8001714 <StartDisplayTask+0x2dc>
          case RightTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_right_top_81CD4B_bmp);
 80016ee:	4a2d      	ldr	r2, [pc, #180]	@ (80017a4 <StartDisplayTask+0x36c>)
 80016f0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016f4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80016f8:	015b      	lsls	r3, r3, #5
 80016fa:	4618      	mov	r0, r3
 80016fc:	4a29      	ldr	r2, [pc, #164]	@ (80017a4 <StartDisplayTask+0x36c>)
 80016fe:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4413      	add	r3, r2
 8001706:	785b      	ldrb	r3, [r3, #1]
 8001708:	015b      	lsls	r3, r3, #5
 800170a:	4a2c      	ldr	r2, [pc, #176]	@ (80017bc <StartDisplayTask+0x384>)
 800170c:	4619      	mov	r1, r3
 800170e:	f003 fc0b 	bl	8004f28 <BSP_LCD_DrawBitmap>
            break;
 8001712:	bf00      	nop
      for (int i = 0; i < snakeSize; i++) {
 8001714:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001718:	3301      	adds	r3, #1
 800171a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800171e:	4b15      	ldr	r3, [pc, #84]	@ (8001774 <StartDisplayTask+0x33c>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001728:	4293      	cmp	r3, r2
 800172a:	f6ff af69 	blt.w	8001600 <StartDisplayTask+0x1c8>
        }
      }

      // On affiche la queue du snake
      switch (tailPart) {
 800172e:	4b24      	ldr	r3, [pc, #144]	@ (80017c0 <StartDisplayTask+0x388>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b03      	cmp	r3, #3
 8001734:	d876      	bhi.n	8001824 <StartDisplayTask+0x3ec>
 8001736:	a201      	add	r2, pc, #4	@ (adr r2, 800173c <StartDisplayTask+0x304>)
 8001738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173c:	080017c5 	.word	0x080017c5
 8001740:	080017dd 	.word	0x080017dd
 8001744:	080017f5 	.word	0x080017f5
 8001748:	0800180d 	.word	0x0800180d
 800174c:	200002e8 	.word	0x200002e8
 8001750:	200002e4 	.word	0x200002e4
 8001754:	200002e0 	.word	0x200002e0
 8001758:	200002ec 	.word	0x200002ec
 800175c:	20000408 	.word	0x20000408
 8001760:	2000025c 	.word	0x2000025c
 8001764:	08016878 	.word	0x08016878
 8001768:	0801688c 	.word	0x0801688c
 800176c:	080168a0 	.word	0x080168a0
 8001770:	080168b4 	.word	0x080168b4
 8001774:	200002d8 	.word	0x200002d8
 8001778:	080168c8 	.word	0x080168c8
 800177c:	20000004 	.word	0x20000004
 8001780:	080168d4 	.word	0x080168d4
 8001784:	ffa52a2a 	.word	0xffa52a2a
 8001788:	2000025d 	.word	0x2000025d
 800178c:	20000008 	.word	0x20000008
 8001790:	08019c10 	.word	0x08019c10
 8001794:	0801a89c 	.word	0x0801a89c
 8001798:	0801b528 	.word	0x0801b528
 800179c:	0801c1b4 	.word	0x0801c1b4
 80017a0:	20000260 	.word	0x20000260
 80017a4:	200002f0 	.word	0x200002f0
 80017a8:	0801766c 	.word	0x0801766c
 80017ac:	080182f8 	.word	0x080182f8
 80017b0:	08018f84 	.word	0x08018f84
 80017b4:	0801ce40 	.word	0x0801ce40
 80017b8:	0801dacc 	.word	0x0801dacc
 80017bc:	0801e758 	.word	0x0801e758
 80017c0:	20000005 	.word	0x20000005
        case TailBottom:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_bottom_81CD4B_bmp);
 80017c4:	4b45      	ldr	r3, [pc, #276]	@ (80018dc <StartDisplayTask+0x4a4>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	015b      	lsls	r3, r3, #5
 80017ca:	4618      	mov	r0, r3
 80017cc:	4b43      	ldr	r3, [pc, #268]	@ (80018dc <StartDisplayTask+0x4a4>)
 80017ce:	785b      	ldrb	r3, [r3, #1]
 80017d0:	015b      	lsls	r3, r3, #5
 80017d2:	4a43      	ldr	r2, [pc, #268]	@ (80018e0 <StartDisplayTask+0x4a8>)
 80017d4:	4619      	mov	r1, r3
 80017d6:	f003 fba7 	bl	8004f28 <BSP_LCD_DrawBitmap>
          break;
 80017da:	e023      	b.n	8001824 <StartDisplayTask+0x3ec>
        case TailTop:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_top_81CD4B_bmp);
 80017dc:	4b3f      	ldr	r3, [pc, #252]	@ (80018dc <StartDisplayTask+0x4a4>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	015b      	lsls	r3, r3, #5
 80017e2:	4618      	mov	r0, r3
 80017e4:	4b3d      	ldr	r3, [pc, #244]	@ (80018dc <StartDisplayTask+0x4a4>)
 80017e6:	785b      	ldrb	r3, [r3, #1]
 80017e8:	015b      	lsls	r3, r3, #5
 80017ea:	4a3e      	ldr	r2, [pc, #248]	@ (80018e4 <StartDisplayTask+0x4ac>)
 80017ec:	4619      	mov	r1, r3
 80017ee:	f003 fb9b 	bl	8004f28 <BSP_LCD_DrawBitmap>
          break;
 80017f2:	e017      	b.n	8001824 <StartDisplayTask+0x3ec>
        case TailLeft:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_left_81CD4B_bmp);
 80017f4:	4b39      	ldr	r3, [pc, #228]	@ (80018dc <StartDisplayTask+0x4a4>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	015b      	lsls	r3, r3, #5
 80017fa:	4618      	mov	r0, r3
 80017fc:	4b37      	ldr	r3, [pc, #220]	@ (80018dc <StartDisplayTask+0x4a4>)
 80017fe:	785b      	ldrb	r3, [r3, #1]
 8001800:	015b      	lsls	r3, r3, #5
 8001802:	4a39      	ldr	r2, [pc, #228]	@ (80018e8 <StartDisplayTask+0x4b0>)
 8001804:	4619      	mov	r1, r3
 8001806:	f003 fb8f 	bl	8004f28 <BSP_LCD_DrawBitmap>
          break;
 800180a:	e00b      	b.n	8001824 <StartDisplayTask+0x3ec>
        case TailRight:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_right_81CD4B_bmp);
 800180c:	4b33      	ldr	r3, [pc, #204]	@ (80018dc <StartDisplayTask+0x4a4>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	015b      	lsls	r3, r3, #5
 8001812:	4618      	mov	r0, r3
 8001814:	4b31      	ldr	r3, [pc, #196]	@ (80018dc <StartDisplayTask+0x4a4>)
 8001816:	785b      	ldrb	r3, [r3, #1]
 8001818:	015b      	lsls	r3, r3, #5
 800181a:	4a34      	ldr	r2, [pc, #208]	@ (80018ec <StartDisplayTask+0x4b4>)
 800181c:	4619      	mov	r1, r3
 800181e:	f003 fb83 	bl	8004f28 <BSP_LCD_DrawBitmap>
          break;
 8001822:	bf00      	nop
      }

      // On efface l'ancienne queue avec un carré vert
      if (!appleEaten && (snakeHeadPosition[0] != oldTailPosition[0] || snakeHeadPosition[1] != oldTailPosition[1])) {
 8001824:	4b32      	ldr	r3, [pc, #200]	@ (80018f0 <StartDisplayTask+0x4b8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d11a      	bne.n	8001862 <StartDisplayTask+0x42a>
 800182c:	4b31      	ldr	r3, [pc, #196]	@ (80018f4 <StartDisplayTask+0x4bc>)
 800182e:	781a      	ldrb	r2, [r3, #0]
 8001830:	4b31      	ldr	r3, [pc, #196]	@ (80018f8 <StartDisplayTask+0x4c0>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d105      	bne.n	8001844 <StartDisplayTask+0x40c>
 8001838:	4b2e      	ldr	r3, [pc, #184]	@ (80018f4 <StartDisplayTask+0x4bc>)
 800183a:	785a      	ldrb	r2, [r3, #1]
 800183c:	4b2e      	ldr	r3, [pc, #184]	@ (80018f8 <StartDisplayTask+0x4c0>)
 800183e:	785b      	ldrb	r3, [r3, #1]
 8001840:	429a      	cmp	r2, r3
 8001842:	d00e      	beq.n	8001862 <StartDisplayTask+0x42a>
        // On efface l'ancienne queue si:
        //    - le snake a avancé (la queue n'est pas restée à la même position)
        // ou
        //    - la tête n'est pas à la position de l'ancienne queue (le snake suit sa queue)
        BSP_LCD_SetTextColor((uint32_t)0xFF81CD4B); // 0xFF81CD4B
 8001844:	482d      	ldr	r0, [pc, #180]	@ (80018fc <StartDisplayTask+0x4c4>)
 8001846:	f003 f949 	bl	8004adc <BSP_LCD_SetTextColor>
        BSP_LCD_FillRect(oldTailPosition[0]*32, oldTailPosition[1]*32, 32, 32);
 800184a:	4b2b      	ldr	r3, [pc, #172]	@ (80018f8 <StartDisplayTask+0x4c0>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	015b      	lsls	r3, r3, #5
 8001850:	b298      	uxth	r0, r3
 8001852:	4b29      	ldr	r3, [pc, #164]	@ (80018f8 <StartDisplayTask+0x4c0>)
 8001854:	785b      	ldrb	r3, [r3, #1]
 8001856:	015b      	lsls	r3, r3, #5
 8001858:	b299      	uxth	r1, r3
 800185a:	2320      	movs	r3, #32
 800185c:	2220      	movs	r2, #32
 800185e:	f003 fc15 	bl	800508c <BSP_LCD_FillRect>
      }

      // On affiche les pommes
      for (int i = 0; i < NBApple; i++)
 8001862:	2300      	movs	r3, #0
 8001864:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001868:	e01f      	b.n	80018aa <StartDisplayTask+0x472>
        if (applePosition[i][0] != -1)
 800186a:	4a25      	ldr	r2, [pc, #148]	@ (8001900 <StartDisplayTask+0x4c8>)
 800186c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001870:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001878:	d012      	beq.n	80018a0 <StartDisplayTask+0x468>
          BSP_LCD_DrawBitmap(applePosition[i][0]*32, applePosition[i][1]*32, (uint8_t*)images_bmp_color_apple_81CD4B_bmp);
 800187a:	4a21      	ldr	r2, [pc, #132]	@ (8001900 <StartDisplayTask+0x4c8>)
 800187c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001880:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001884:	015b      	lsls	r3, r3, #5
 8001886:	4618      	mov	r0, r3
 8001888:	4a1d      	ldr	r2, [pc, #116]	@ (8001900 <StartDisplayTask+0x4c8>)
 800188a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001896:	015b      	lsls	r3, r3, #5
 8001898:	4a1a      	ldr	r2, [pc, #104]	@ (8001904 <StartDisplayTask+0x4cc>)
 800189a:	4619      	mov	r1, r3
 800189c:	f003 fb44 	bl	8004f28 <BSP_LCD_DrawBitmap>
      for (int i = 0; i < NBApple; i++)
 80018a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80018a4:	3301      	adds	r3, #1
 80018a6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80018aa:	2304      	movs	r3, #4
 80018ac:	461a      	mov	r2, r3
 80018ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80018b2:	4293      	cmp	r3, r2
 80018b4:	dbd9      	blt.n	800186a <StartDisplayTask+0x432>
      xSemaphoreGive(displayMutexHandle);
 80018b6:	4b14      	ldr	r3, [pc, #80]	@ (8001908 <StartDisplayTask+0x4d0>)
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	2300      	movs	r3, #0
 80018bc:	2200      	movs	r2, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	f011 f9be 	bl	8012c40 <xQueueGenericSend>

      if (lastMove)
 80018c4:	4b11      	ldr	r3, [pc, #68]	@ (800190c <StartDisplayTask+0x4d4>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d002      	beq.n	80018d2 <StartDisplayTask+0x49a>
        lastMove = 0;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <StartDisplayTask+0x4d4>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
    }

    osDelay(100);
 80018d2:	2064      	movs	r0, #100	@ 0x64
 80018d4:	f010 fd8c 	bl	80123f0 <osDelay>
    if ((gameOver || gamePaused || !gameStarted) && !lastMove) {
 80018d8:	e5b6      	b.n	8001448 <StartDisplayTask+0x10>
 80018da:	bf00      	nop
 80018dc:	2000000c 	.word	0x2000000c
 80018e0:	0801f3e4 	.word	0x0801f3e4
 80018e4:	08020070 	.word	0x08020070
 80018e8:	08020cfc 	.word	0x08020cfc
 80018ec:	08021988 	.word	0x08021988
 80018f0:	200002dc 	.word	0x200002dc
 80018f4:	20000008 	.word	0x20000008
 80018f8:	200003e0 	.word	0x200003e0
 80018fc:	ff81cd4b 	.word	0xff81cd4b
 8001900:	200003e4 	.word	0x200003e4
 8001904:	080169e0 	.word	0x080169e0
 8001908:	20000408 	.word	0x20000408
 800190c:	200002ec 	.word	0x200002ec

08001910 <StartJoystickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartJoystickTask */
void StartJoystickTask(void const * argument)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartJoystickTask */
  /* Infinite loop */
  for(;;)
  {
    sConfig.Channel = ADC_CHANNEL_8;
 8001918:	4b30      	ldr	r3, [pc, #192]	@ (80019dc <StartJoystickTask+0xcc>)
 800191a:	2208      	movs	r2, #8
 800191c:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800191e:	492f      	ldr	r1, [pc, #188]	@ (80019dc <StartJoystickTask+0xcc>)
 8001920:	482f      	ldr	r0, [pc, #188]	@ (80019e0 <StartJoystickTask+0xd0>)
 8001922:	f006 fbdb 	bl	80080dc <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc3);
 8001926:	482e      	ldr	r0, [pc, #184]	@ (80019e0 <StartJoystickTask+0xd0>)
 8001928:	f006 fa72 	bl	8007e10 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 800192c:	bf00      	nop
 800192e:	2164      	movs	r1, #100	@ 0x64
 8001930:	482b      	ldr	r0, [pc, #172]	@ (80019e0 <StartJoystickTask+0xd0>)
 8001932:	f006 fb3b 	bl	8007fac <HAL_ADC_PollForConversion>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1f8      	bne.n	800192e <StartJoystickTask+0x1e>
	joystick_v = HAL_ADC_GetValue(&hadc3);
 800193c:	4828      	ldr	r0, [pc, #160]	@ (80019e0 <StartJoystickTask+0xd0>)
 800193e:	f006 fbc0 	bl	80080c2 <HAL_ADC_GetValue>
 8001942:	4603      	mov	r3, r0
 8001944:	4a27      	ldr	r2, [pc, #156]	@ (80019e4 <StartJoystickTask+0xd4>)
 8001946:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start(&hadc1);
 8001948:	4827      	ldr	r0, [pc, #156]	@ (80019e8 <StartJoystickTask+0xd8>)
 800194a:	f006 fa61 	bl	8007e10 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 800194e:	bf00      	nop
 8001950:	2164      	movs	r1, #100	@ 0x64
 8001952:	4825      	ldr	r0, [pc, #148]	@ (80019e8 <StartJoystickTask+0xd8>)
 8001954:	f006 fb2a 	bl	8007fac <HAL_ADC_PollForConversion>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f8      	bne.n	8001950 <StartJoystickTask+0x40>
	joystick_h = HAL_ADC_GetValue(&hadc1);
 800195e:	4822      	ldr	r0, [pc, #136]	@ (80019e8 <StartJoystickTask+0xd8>)
 8001960:	f006 fbaf 	bl	80080c2 <HAL_ADC_GetValue>
 8001964:	4603      	mov	r3, r0
 8001966:	4a21      	ldr	r2, [pc, #132]	@ (80019ec <StartJoystickTask+0xdc>)
 8001968:	6013      	str	r3, [r2, #0]

    // max range of joystick is 0 to 4095

    if (joystick_v < 1000 && headPart != HeadTop) {
 800196a:	4b1e      	ldr	r3, [pc, #120]	@ (80019e4 <StartJoystickTask+0xd4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001972:	d207      	bcs.n	8001984 <StartJoystickTask+0x74>
 8001974:	4b1e      	ldr	r3, [pc, #120]	@ (80019f0 <StartJoystickTask+0xe0>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <StartJoystickTask+0x74>
      direction = Down;
 800197c:	4b1d      	ldr	r3, [pc, #116]	@ (80019f4 <StartJoystickTask+0xe4>)
 800197e:	2201      	movs	r2, #1
 8001980:	701a      	strb	r2, [r3, #0]
 8001982:	e027      	b.n	80019d4 <StartJoystickTask+0xc4>
    } else if (joystick_v > 3000 && headPart != HeadBottom) {
 8001984:	4b17      	ldr	r3, [pc, #92]	@ (80019e4 <StartJoystickTask+0xd4>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800198c:	4293      	cmp	r3, r2
 800198e:	d907      	bls.n	80019a0 <StartJoystickTask+0x90>
 8001990:	4b17      	ldr	r3, [pc, #92]	@ (80019f0 <StartJoystickTask+0xe0>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d003      	beq.n	80019a0 <StartJoystickTask+0x90>
      direction = Up;
 8001998:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <StartJoystickTask+0xe4>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
 800199e:	e019      	b.n	80019d4 <StartJoystickTask+0xc4>
    } else if (joystick_h < 1000 && headPart != HeadLeft) {
 80019a0:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <StartJoystickTask+0xdc>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019a8:	d207      	bcs.n	80019ba <StartJoystickTask+0xaa>
 80019aa:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <StartJoystickTask+0xe0>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d003      	beq.n	80019ba <StartJoystickTask+0xaa>
      direction = Right;
 80019b2:	4b10      	ldr	r3, [pc, #64]	@ (80019f4 <StartJoystickTask+0xe4>)
 80019b4:	2203      	movs	r2, #3
 80019b6:	701a      	strb	r2, [r3, #0]
 80019b8:	e00c      	b.n	80019d4 <StartJoystickTask+0xc4>
    } else if (joystick_h > 3000 && headPart != HeadRight) {
 80019ba:	4b0c      	ldr	r3, [pc, #48]	@ (80019ec <StartJoystickTask+0xdc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d906      	bls.n	80019d4 <StartJoystickTask+0xc4>
 80019c6:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <StartJoystickTask+0xe0>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d002      	beq.n	80019d4 <StartJoystickTask+0xc4>
      direction = Left;
 80019ce:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <StartJoystickTask+0xe4>)
 80019d0:	2202      	movs	r2, #2
 80019d2:	701a      	strb	r2, [r3, #0]
    }
    osDelay(10);
 80019d4:	200a      	movs	r0, #10
 80019d6:	f010 fd0b 	bl	80123f0 <osDelay>
    sConfig.Channel = ADC_CHANNEL_8;
 80019da:	e79d      	b.n	8001918 <StartJoystickTask+0x8>
 80019dc:	20000760 	.word	0x20000760
 80019e0:	20000158 	.word	0x20000158
 80019e4:	20000254 	.word	0x20000254
 80019e8:	20000110 	.word	0x20000110
 80019ec:	20000258 	.word	0x20000258
 80019f0:	2000025d 	.word	0x2000025d
 80019f4:	2000025c 	.word	0x2000025c

080019f8 <StartManageBodyParts>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManageBodyParts */
void StartManageBodyParts(void const * argument)
{
 80019f8:	b5b0      	push	{r4, r5, r7, lr}
 80019fa:	b08e      	sub	sp, #56	@ 0x38
 80019fc:	af02      	add	r7, sp, #8
 80019fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManageBodyParts */
  TickType_t xLastWakeTime = xTaskGetTickCount();
 8001a00:	f012 faf6 	bl	8013ff0 <xTaskGetTickCount>
 8001a04:	4603      	mov	r3, r0
 8001a06:	613b      	str	r3, [r7, #16]
  const TickType_t delay = pdMS_TO_TICKS(1000. / speed);
 8001a08:	4b7f      	ldr	r3, [pc, #508]	@ (8001c08 <StartManageBodyParts+0x210>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fda1 	bl	8000554 <__aeabi_i2d>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	f04f 0000 	mov.w	r0, #0
 8001a1a:	497c      	ldr	r1, [pc, #496]	@ (8001c0c <StartManageBodyParts+0x214>)
 8001a1c:	f7fe ff2e 	bl	800087c <__aeabi_ddiv>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	f7ff f810 	bl	8000a4c <__aeabi_d2uiz>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a32:	fb02 f303 	mul.w	r3, r2, r3
 8001a36:	4a76      	ldr	r2, [pc, #472]	@ (8001c10 <StartManageBodyParts+0x218>)
 8001a38:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3c:	099b      	lsrs	r3, r3, #6
 8001a3e:	61bb      	str	r3, [r7, #24]

  /* Infinite loop */
  for(;;)
  {
    if (!gameOver && !gamePaused && gameStarted) {
 8001a40:	4b74      	ldr	r3, [pc, #464]	@ (8001c14 <StartManageBodyParts+0x21c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f040 82ad 	bne.w	8001fa4 <StartManageBodyParts+0x5ac>
 8001a4a:	4b73      	ldr	r3, [pc, #460]	@ (8001c18 <StartManageBodyParts+0x220>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f040 82a8 	bne.w	8001fa4 <StartManageBodyParts+0x5ac>
 8001a54:	4b71      	ldr	r3, [pc, #452]	@ (8001c1c <StartManageBodyParts+0x224>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 82a3 	beq.w	8001fa4 <StartManageBodyParts+0x5ac>
      // Le jeu est en cours

      // On sauvegarde la position de la queue et de la tête
      oldTailPosition[0] = snakeTailPosition[0];
 8001a5e:	4b70      	ldr	r3, [pc, #448]	@ (8001c20 <StartManageBodyParts+0x228>)
 8001a60:	781a      	ldrb	r2, [r3, #0]
 8001a62:	4b70      	ldr	r3, [pc, #448]	@ (8001c24 <StartManageBodyParts+0x22c>)
 8001a64:	701a      	strb	r2, [r3, #0]
      oldTailPosition[1] = snakeTailPosition[1];
 8001a66:	4b6e      	ldr	r3, [pc, #440]	@ (8001c20 <StartManageBodyParts+0x228>)
 8001a68:	785a      	ldrb	r2, [r3, #1]
 8001a6a:	4b6e      	ldr	r3, [pc, #440]	@ (8001c24 <StartManageBodyParts+0x22c>)
 8001a6c:	705a      	strb	r2, [r3, #1]

      uint8_t oldHeadPosition[2];
      oldHeadPosition[0] = snakeHeadPosition[0];
 8001a6e:	4b6e      	ldr	r3, [pc, #440]	@ (8001c28 <StartManageBodyParts+0x230>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	733b      	strb	r3, [r7, #12]
      oldHeadPosition[1] = snakeHeadPosition[1];
 8001a74:	4b6c      	ldr	r3, [pc, #432]	@ (8001c28 <StartManageBodyParts+0x230>)
 8001a76:	785b      	ldrb	r3, [r3, #1]
 8001a78:	737b      	strb	r3, [r7, #13]


      // On met a jour la position de la tête en fonction de la direction
      switch (direction) {
 8001a7a:	4b6c      	ldr	r3, [pc, #432]	@ (8001c2c <StartManageBodyParts+0x234>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d832      	bhi.n	8001ae8 <StartManageBodyParts+0xf0>
 8001a82:	a201      	add	r2, pc, #4	@ (adr r2, 8001a88 <StartManageBodyParts+0x90>)
 8001a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a88:	08001a99 	.word	0x08001a99
 8001a8c:	08001aad 	.word	0x08001aad
 8001a90:	08001ac1 	.word	0x08001ac1
 8001a94:	08001ad5 	.word	0x08001ad5
        case Up:
          headPart = HeadTop;
 8001a98:	4b65      	ldr	r3, [pc, #404]	@ (8001c30 <StartManageBodyParts+0x238>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[1]--;
 8001a9e:	4b62      	ldr	r3, [pc, #392]	@ (8001c28 <StartManageBodyParts+0x230>)
 8001aa0:	785b      	ldrb	r3, [r3, #1]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b60      	ldr	r3, [pc, #384]	@ (8001c28 <StartManageBodyParts+0x230>)
 8001aa8:	705a      	strb	r2, [r3, #1]
          break;
 8001aaa:	e01d      	b.n	8001ae8 <StartManageBodyParts+0xf0>
        case Down:
          headPart = HeadBottom;
 8001aac:	4b60      	ldr	r3, [pc, #384]	@ (8001c30 <StartManageBodyParts+0x238>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[1]++;
 8001ab2:	4b5d      	ldr	r3, [pc, #372]	@ (8001c28 <StartManageBodyParts+0x230>)
 8001ab4:	785b      	ldrb	r3, [r3, #1]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	4b5b      	ldr	r3, [pc, #364]	@ (8001c28 <StartManageBodyParts+0x230>)
 8001abc:	705a      	strb	r2, [r3, #1]
          break;
 8001abe:	e013      	b.n	8001ae8 <StartManageBodyParts+0xf0>
        case Left:
          headPart = HeadLeft;
 8001ac0:	4b5b      	ldr	r3, [pc, #364]	@ (8001c30 <StartManageBodyParts+0x238>)
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[0]--;
 8001ac6:	4b58      	ldr	r3, [pc, #352]	@ (8001c28 <StartManageBodyParts+0x230>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4b56      	ldr	r3, [pc, #344]	@ (8001c28 <StartManageBodyParts+0x230>)
 8001ad0:	701a      	strb	r2, [r3, #0]
          break;
 8001ad2:	e009      	b.n	8001ae8 <StartManageBodyParts+0xf0>
        case Right:
          headPart = HeadRight;
 8001ad4:	4b56      	ldr	r3, [pc, #344]	@ (8001c30 <StartManageBodyParts+0x238>)
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[0]++;
 8001ada:	4b53      	ldr	r3, [pc, #332]	@ (8001c28 <StartManageBodyParts+0x230>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4b51      	ldr	r3, [pc, #324]	@ (8001c28 <StartManageBodyParts+0x230>)
 8001ae4:	701a      	strb	r2, [r3, #0]
          break;
 8001ae6:	bf00      	nop
      }

      // on vérifie si on est mort
      if (snakeHeadPosition[0] >= gridSizeX || snakeHeadPosition[1] >= gridSizeY || snakeHeadPosition[0] < 0 || snakeHeadPosition[1] < 0) {
 8001ae8:	4b4f      	ldr	r3, [pc, #316]	@ (8001c28 <StartManageBodyParts+0x230>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	220f      	movs	r2, #15
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d204      	bcs.n	8001afc <StartManageBodyParts+0x104>
 8001af2:	4b4d      	ldr	r3, [pc, #308]	@ (8001c28 <StartManageBodyParts+0x230>)
 8001af4:	785b      	ldrb	r3, [r3, #1]
 8001af6:	2208      	movs	r2, #8
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d306      	bcc.n	8001b0a <StartManageBodyParts+0x112>
        // On a touché un mur
        gameOver = 1;
 8001afc:	4b45      	ldr	r3, [pc, #276]	@ (8001c14 <StartManageBodyParts+0x21c>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]
        lastMove = 1;
 8001b02:	4b4c      	ldr	r3, [pc, #304]	@ (8001c34 <StartManageBodyParts+0x23c>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	e022      	b.n	8001b50 <StartManageBodyParts+0x158>
      }
      else  {
        for (int i = 0; i < snakeSize; i++) {
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b0e:	e019      	b.n	8001b44 <StartManageBodyParts+0x14c>
          if (snakeHeadPosition[0] == snakeBodyPosition[i][0] && snakeHeadPosition[1] == snakeBodyPosition[i][1]) {
 8001b10:	4b45      	ldr	r3, [pc, #276]	@ (8001c28 <StartManageBodyParts+0x230>)
 8001b12:	781a      	ldrb	r2, [r3, #0]
 8001b14:	4948      	ldr	r1, [pc, #288]	@ (8001c38 <StartManageBodyParts+0x240>)
 8001b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b18:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d10e      	bne.n	8001b3e <StartManageBodyParts+0x146>
 8001b20:	4b41      	ldr	r3, [pc, #260]	@ (8001c28 <StartManageBodyParts+0x230>)
 8001b22:	785a      	ldrb	r2, [r3, #1]
 8001b24:	4944      	ldr	r1, [pc, #272]	@ (8001c38 <StartManageBodyParts+0x240>)
 8001b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	440b      	add	r3, r1
 8001b2c:	785b      	ldrb	r3, [r3, #1]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d105      	bne.n	8001b3e <StartManageBodyParts+0x146>
            // On a touché notre corps
            gameOver = 1;
 8001b32:	4b38      	ldr	r3, [pc, #224]	@ (8001c14 <StartManageBodyParts+0x21c>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	601a      	str	r2, [r3, #0]
            lastMove = 1;
 8001b38:	4b3e      	ldr	r3, [pc, #248]	@ (8001c34 <StartManageBodyParts+0x23c>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < snakeSize; i++) {
 8001b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b40:	3301      	adds	r3, #1
 8001b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b44:	4b3d      	ldr	r3, [pc, #244]	@ (8001c3c <StartManageBodyParts+0x244>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	dbdf      	blt.n	8001b10 <StartManageBodyParts+0x118>
      }
      // Note: Inutile de vérifier si on a touché la queue. Celle ci n'a pas encore avancé.

      
      // On vérifie si on a mangé la pomme avant de bouger le corps et la queue
      appleEaten = 0;
 8001b50:	4b3b      	ldr	r3, [pc, #236]	@ (8001c40 <StartManageBodyParts+0x248>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < NBApple; i++) {
 8001b56:	2300      	movs	r3, #0
 8001b58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b5a:	e0fc      	b.n	8001d56 <StartManageBodyParts+0x35e>
        if (snakeHeadPosition[0] == applePosition[i][0] && snakeHeadPosition[1] == applePosition[i][1]) {
 8001b5c:	4b32      	ldr	r3, [pc, #200]	@ (8001c28 <StartManageBodyParts+0x230>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	4619      	mov	r1, r3
 8001b62:	4a38      	ldr	r2, [pc, #224]	@ (8001c44 <StartManageBodyParts+0x24c>)
 8001b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b66:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001b6a:	4299      	cmp	r1, r3
 8001b6c:	f040 80f0 	bne.w	8001d50 <StartManageBodyParts+0x358>
 8001b70:	4b2d      	ldr	r3, [pc, #180]	@ (8001c28 <StartManageBodyParts+0x230>)
 8001b72:	785b      	ldrb	r3, [r3, #1]
 8001b74:	4619      	mov	r1, r3
 8001b76:	4a33      	ldr	r2, [pc, #204]	@ (8001c44 <StartManageBodyParts+0x24c>)
 8001b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001b82:	4299      	cmp	r1, r3
 8001b84:	f040 80e4 	bne.w	8001d50 <StartManageBodyParts+0x358>
          snakeSize++;
 8001b88:	4b2c      	ldr	r3, [pc, #176]	@ (8001c3c <StartManageBodyParts+0x244>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	4b2a      	ldr	r3, [pc, #168]	@ (8001c3c <StartManageBodyParts+0x244>)
 8001b92:	701a      	strb	r2, [r3, #0]
          appleEaten = 1;
 8001b94:	4b2a      	ldr	r3, [pc, #168]	@ (8001c40 <StartManageBodyParts+0x248>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	601a      	str	r2, [r3, #0]

          // On ajoute un bodyPart à la queue
          for (int i = snakeSize - 1; i > 0; i--) {
 8001b9a:	4b28      	ldr	r3, [pc, #160]	@ (8001c3c <StartManageBodyParts+0x244>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ba2:	e020      	b.n	8001be6 <StartManageBodyParts+0x1ee>
            snakeBodyParts[i] = snakeBodyParts[i - 1];
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	4a27      	ldr	r2, [pc, #156]	@ (8001c48 <StartManageBodyParts+0x250>)
 8001baa:	5cd1      	ldrb	r1, [r2, r3]
 8001bac:	4a26      	ldr	r2, [pc, #152]	@ (8001c48 <StartManageBodyParts+0x250>)
 8001bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb0:	4413      	add	r3, r2
 8001bb2:	460a      	mov	r2, r1
 8001bb4:	701a      	strb	r2, [r3, #0]
            snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	4a1f      	ldr	r2, [pc, #124]	@ (8001c38 <StartManageBodyParts+0x240>)
 8001bbc:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c38 <StartManageBodyParts+0x240>)
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc4:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
            snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8001c38 <StartManageBodyParts+0x240>)
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	7859      	ldrb	r1, [r3, #1]
 8001bd4:	4a18      	ldr	r2, [pc, #96]	@ (8001c38 <StartManageBodyParts+0x240>)
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4413      	add	r3, r2
 8001bdc:	460a      	mov	r2, r1
 8001bde:	705a      	strb	r2, [r3, #1]
          for (int i = snakeSize - 1; i > 0; i--) {
 8001be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be2:	3b01      	subs	r3, #1
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	dcdb      	bgt.n	8001ba4 <StartManageBodyParts+0x1ac>

          // On met a jour le premier bodyPart
          uint8_t backX;
          uint8_t backY;

          if (snakeSize > 1) {
 8001bec:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <StartManageBodyParts+0x244>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d92b      	bls.n	8001c4c <StartManageBodyParts+0x254>
            backX = snakeBodyPosition[0][0];
 8001bf4:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <StartManageBodyParts+0x240>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            backY = snakeBodyPosition[0][1];
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <StartManageBodyParts+0x240>)
 8001bfe:	785b      	ldrb	r3, [r3, #1]
 8001c00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001c04:	e02a      	b.n	8001c5c <StartManageBodyParts+0x264>
 8001c06:	bf00      	nop
 8001c08:	20000004 	.word	0x20000004
 8001c0c:	408f4000 	.word	0x408f4000
 8001c10:	10624dd3 	.word	0x10624dd3
 8001c14:	200002e8 	.word	0x200002e8
 8001c18:	200002e4 	.word	0x200002e4
 8001c1c:	200002e0 	.word	0x200002e0
 8001c20:	2000000c 	.word	0x2000000c
 8001c24:	200003e0 	.word	0x200003e0
 8001c28:	20000008 	.word	0x20000008
 8001c2c:	2000025c 	.word	0x2000025c
 8001c30:	2000025d 	.word	0x2000025d
 8001c34:	200002ec 	.word	0x200002ec
 8001c38:	200002f0 	.word	0x200002f0
 8001c3c:	200002d8 	.word	0x200002d8
 8001c40:	200002dc 	.word	0x200002dc
 8001c44:	200003e4 	.word	0x200003e4
 8001c48:	20000260 	.word	0x20000260
          }
          else {
            backX = snakeTailPosition[0];
 8001c4c:	4ba8      	ldr	r3, [pc, #672]	@ (8001ef0 <StartManageBodyParts+0x4f8>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            backY = snakeTailPosition[1];
 8001c54:	4ba6      	ldr	r3, [pc, #664]	@ (8001ef0 <StartManageBodyParts+0x4f8>)
 8001c56:	785b      	ldrb	r3, [r3, #1]
 8001c58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
          }

          // Trouve le type de bodyPart à mettre
          snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], backX, backY, oldHeadPosition[0], oldHeadPosition[1]);
 8001c5c:	4ba5      	ldr	r3, [pc, #660]	@ (8001ef4 <StartManageBodyParts+0x4fc>)
 8001c5e:	7818      	ldrb	r0, [r3, #0]
 8001c60:	4ba4      	ldr	r3, [pc, #656]	@ (8001ef4 <StartManageBodyParts+0x4fc>)
 8001c62:	7859      	ldrb	r1, [r3, #1]
 8001c64:	7b3b      	ldrb	r3, [r7, #12]
 8001c66:	7b7a      	ldrb	r2, [r7, #13]
 8001c68:	f897 5022 	ldrb.w	r5, [r7, #34]	@ 0x22
 8001c6c:	f897 4023 	ldrb.w	r4, [r7, #35]	@ 0x23
 8001c70:	9201      	str	r2, [sp, #4]
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	462b      	mov	r3, r5
 8001c76:	4622      	mov	r2, r4
 8001c78:	f000 fa86 	bl	8002188 <whatBodyPart>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4b9d      	ldr	r3, [pc, #628]	@ (8001ef8 <StartManageBodyParts+0x500>)
 8001c82:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][0] = oldHeadPosition[0];
 8001c84:	7b3a      	ldrb	r2, [r7, #12]
 8001c86:	4b9d      	ldr	r3, [pc, #628]	@ (8001efc <StartManageBodyParts+0x504>)
 8001c88:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][1] = oldHeadPosition[1];
 8001c8a:	7b7a      	ldrb	r2, [r7, #13]
 8001c8c:	4b9b      	ldr	r3, [pc, #620]	@ (8001efc <StartManageBodyParts+0x504>)
 8001c8e:	705a      	strb	r2, [r3, #1]

          // Si on a de la place pour une nouvelle pomme
          uint8_t NBFreeCells = gridSizeX * gridSizeY - snakeSize - 1;
 8001c90:	220f      	movs	r2, #15
 8001c92:	2308      	movs	r3, #8
 8001c94:	fb12 f303 	smulbb	r3, r2, r3
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4b99      	ldr	r3, [pc, #612]	@ (8001f00 <StartManageBodyParts+0x508>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	75fb      	strb	r3, [r7, #23]
          if (NBFreeCells > NBApple) {
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	7dfb      	ldrb	r3, [r7, #23]
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d945      	bls.n	8001d3a <StartManageBodyParts+0x342>
            // On génère une nouvelle pomme à une position aléatoire qui n'est pas sur le snake ou une autre pomme
            do {
              applePosition[i][0] = rand() % gridSizeX;
 8001cae:	f013 fb45 	bl	801533c <rand>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	220f      	movs	r2, #15
 8001cb6:	fb93 f1f2 	sdiv	r1, r3, r2
 8001cba:	fb01 f202 	mul.w	r2, r1, r2
 8001cbe:	1a9b      	subs	r3, r3, r2
 8001cc0:	b259      	sxtb	r1, r3
 8001cc2:	4a90      	ldr	r2, [pc, #576]	@ (8001f04 <StartManageBodyParts+0x50c>)
 8001cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cc6:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
              applePosition[i][1] = rand() % gridSizeY;
 8001cca:	f013 fb37 	bl	801533c <rand>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2208      	movs	r2, #8
 8001cd2:	fb93 f1f2 	sdiv	r1, r3, r2
 8001cd6:	fb01 f202 	mul.w	r2, r1, r2
 8001cda:	1a9b      	subs	r3, r3, r2
 8001cdc:	b259      	sxtb	r1, r3
 8001cde:	4a89      	ldr	r2, [pc, #548]	@ (8001f04 <StartManageBodyParts+0x50c>)
 8001ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	460a      	mov	r2, r1
 8001ce8:	705a      	strb	r2, [r3, #1]
            } while (isSnakePosition(applePosition[i][0], applePosition[i][1]) 
 8001cea:	4a86      	ldr	r2, [pc, #536]	@ (8001f04 <StartManageBodyParts+0x50c>)
 8001cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cee:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	4983      	ldr	r1, [pc, #524]	@ (8001f04 <StartManageBodyParts+0x50c>)
 8001cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	4619      	mov	r1, r3
 8001d04:	4610      	mov	r0, r2
 8001d06:	f000 faa1 	bl	800224c <isSnakePosition>
 8001d0a:	4603      	mov	r3, r0
                  || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1ce      	bne.n	8001cae <StartManageBodyParts+0x2b6>
 8001d10:	4a7c      	ldr	r2, [pc, #496]	@ (8001f04 <StartManageBodyParts+0x50c>)
 8001d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d14:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001d18:	b2d8      	uxtb	r0, r3
 8001d1a:	4a7a      	ldr	r2, [pc, #488]	@ (8001f04 <StartManageBodyParts+0x50c>)
 8001d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f000 fad9 	bl	80022e4 <isApplePosition>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1ba      	bne.n	8001cae <StartManageBodyParts+0x2b6>
 8001d38:	e00a      	b.n	8001d50 <StartManageBodyParts+0x358>
          }
          else {
            applePosition[i][0] = -1;
 8001d3a:	4a72      	ldr	r2, [pc, #456]	@ (8001f04 <StartManageBodyParts+0x50c>)
 8001d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d3e:	21ff      	movs	r1, #255	@ 0xff
 8001d40:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
            applePosition[i][1] = -1;
 8001d44:	4a6f      	ldr	r2, [pc, #444]	@ (8001f04 <StartManageBodyParts+0x50c>)
 8001d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	22ff      	movs	r2, #255	@ 0xff
 8001d4e:	705a      	strb	r2, [r3, #1]
      for (int i = 0; i < NBApple; i++) {
 8001d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d52:	3301      	adds	r3, #1
 8001d54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d56:	2304      	movs	r3, #4
 8001d58:	461a      	mov	r2, r3
 8001d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	f6ff aefd 	blt.w	8001b5c <StartManageBodyParts+0x164>
        }
      }


      // On n'a pas mangé de pomme on avance le corps et la queue sans ajouter de bodyPart
      if (!appleEaten) {
 8001d62:	4b69      	ldr	r3, [pc, #420]	@ (8001f08 <StartManageBodyParts+0x510>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f040 811c 	bne.w	8001fa4 <StartManageBodyParts+0x5ac>
        // on met a jour la position de la queue
        if (snakeSize > 0) {
 8001d6c:	4b64      	ldr	r3, [pc, #400]	@ (8001f00 <StartManageBodyParts+0x508>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d011      	beq.n	8001d98 <StartManageBodyParts+0x3a0>
          snakeTailPosition[0] = snakeBodyPosition[snakeSize - 1][0];
 8001d74:	4b62      	ldr	r3, [pc, #392]	@ (8001f00 <StartManageBodyParts+0x508>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	4a60      	ldr	r2, [pc, #384]	@ (8001efc <StartManageBodyParts+0x504>)
 8001d7c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001d80:	4b5b      	ldr	r3, [pc, #364]	@ (8001ef0 <StartManageBodyParts+0x4f8>)
 8001d82:	701a      	strb	r2, [r3, #0]
          snakeTailPosition[1] = snakeBodyPosition[snakeSize - 1][1];
 8001d84:	4b5e      	ldr	r3, [pc, #376]	@ (8001f00 <StartManageBodyParts+0x508>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	4a5c      	ldr	r2, [pc, #368]	@ (8001efc <StartManageBodyParts+0x504>)
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4413      	add	r3, r2
 8001d90:	785a      	ldrb	r2, [r3, #1]
 8001d92:	4b57      	ldr	r3, [pc, #348]	@ (8001ef0 <StartManageBodyParts+0x4f8>)
 8001d94:	705a      	strb	r2, [r3, #1]
 8001d96:	e005      	b.n	8001da4 <StartManageBodyParts+0x3ac>
        }
        else {
          snakeTailPosition[0] = oldHeadPosition[0];
 8001d98:	7b3a      	ldrb	r2, [r7, #12]
 8001d9a:	4b55      	ldr	r3, [pc, #340]	@ (8001ef0 <StartManageBodyParts+0x4f8>)
 8001d9c:	701a      	strb	r2, [r3, #0]
          snakeTailPosition[1] = oldHeadPosition[1];
 8001d9e:	7b7a      	ldrb	r2, [r7, #13]
 8001da0:	4b53      	ldr	r3, [pc, #332]	@ (8001ef0 <StartManageBodyParts+0x4f8>)
 8001da2:	705a      	strb	r2, [r3, #1]
        }


        // On avance le corps
        for (int i = snakeSize - 1; i > 0; i--) {
 8001da4:	4b56      	ldr	r3, [pc, #344]	@ (8001f00 <StartManageBodyParts+0x508>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	3b01      	subs	r3, #1
 8001daa:	61fb      	str	r3, [r7, #28]
 8001dac:	e020      	b.n	8001df0 <StartManageBodyParts+0x3f8>
          snakeBodyParts[i] = snakeBodyParts[i - 1];
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3b01      	subs	r3, #1
 8001db2:	4a51      	ldr	r2, [pc, #324]	@ (8001ef8 <StartManageBodyParts+0x500>)
 8001db4:	5cd1      	ldrb	r1, [r2, r3]
 8001db6:	4a50      	ldr	r2, [pc, #320]	@ (8001ef8 <StartManageBodyParts+0x500>)
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	4413      	add	r3, r2
 8001dbc:	460a      	mov	r2, r1
 8001dbe:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	4a4d      	ldr	r2, [pc, #308]	@ (8001efc <StartManageBodyParts+0x504>)
 8001dc6:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001dca:	4a4c      	ldr	r2, [pc, #304]	@ (8001efc <StartManageBodyParts+0x504>)
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
          snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	4a49      	ldr	r2, [pc, #292]	@ (8001efc <StartManageBodyParts+0x504>)
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4413      	add	r3, r2
 8001ddc:	7859      	ldrb	r1, [r3, #1]
 8001dde:	4a47      	ldr	r2, [pc, #284]	@ (8001efc <StartManageBodyParts+0x504>)
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4413      	add	r3, r2
 8001de6:	460a      	mov	r2, r1
 8001de8:	705a      	strb	r2, [r3, #1]
        for (int i = snakeSize - 1; i > 0; i--) {
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3b01      	subs	r3, #1
 8001dee:	61fb      	str	r3, [r7, #28]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	dcdb      	bgt.n	8001dae <StartManageBodyParts+0x3b6>
        }


        // On met a jour le corps
        if (snakeSize > 0) {
 8001df6:	4b42      	ldr	r3, [pc, #264]	@ (8001f00 <StartManageBodyParts+0x508>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 80b2 	beq.w	8001f64 <StartManageBodyParts+0x56c>
          // On trouve le type de bodyPart à mettre juste derrière la tête
          snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], snakeBodyPosition[0][0], snakeBodyPosition[0][1], oldHeadPosition[0], oldHeadPosition[1]);
 8001e00:	4b3c      	ldr	r3, [pc, #240]	@ (8001ef4 <StartManageBodyParts+0x4fc>)
 8001e02:	7818      	ldrb	r0, [r3, #0]
 8001e04:	4b3b      	ldr	r3, [pc, #236]	@ (8001ef4 <StartManageBodyParts+0x4fc>)
 8001e06:	7859      	ldrb	r1, [r3, #1]
 8001e08:	4b3c      	ldr	r3, [pc, #240]	@ (8001efc <StartManageBodyParts+0x504>)
 8001e0a:	781c      	ldrb	r4, [r3, #0]
 8001e0c:	4b3b      	ldr	r3, [pc, #236]	@ (8001efc <StartManageBodyParts+0x504>)
 8001e0e:	785d      	ldrb	r5, [r3, #1]
 8001e10:	7b3b      	ldrb	r3, [r7, #12]
 8001e12:	7b7a      	ldrb	r2, [r7, #13]
 8001e14:	9201      	str	r2, [sp, #4]
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	462b      	mov	r3, r5
 8001e1a:	4622      	mov	r2, r4
 8001e1c:	f000 f9b4 	bl	8002188 <whatBodyPart>
 8001e20:	4603      	mov	r3, r0
 8001e22:	461a      	mov	r2, r3
 8001e24:	4b34      	ldr	r3, [pc, #208]	@ (8001ef8 <StartManageBodyParts+0x500>)
 8001e26:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][0] = oldHeadPosition[0];
 8001e28:	7b3a      	ldrb	r2, [r7, #12]
 8001e2a:	4b34      	ldr	r3, [pc, #208]	@ (8001efc <StartManageBodyParts+0x504>)
 8001e2c:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][1] = oldHeadPosition[1];
 8001e2e:	7b7a      	ldrb	r2, [r7, #13]
 8001e30:	4b32      	ldr	r3, [pc, #200]	@ (8001efc <StartManageBodyParts+0x504>)
 8001e32:	705a      	strb	r2, [r3, #1]

          // On met a jour le l'orientation de la queue
          switch (snakeBodyParts[snakeSize - 1]) {
 8001e34:	4b32      	ldr	r3, [pc, #200]	@ (8001f00 <StartManageBodyParts+0x508>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	4a2f      	ldr	r2, [pc, #188]	@ (8001ef8 <StartManageBodyParts+0x500>)
 8001e3c:	5cd3      	ldrb	r3, [r2, r3]
 8001e3e:	2b05      	cmp	r3, #5
 8001e40:	f200 80b0 	bhi.w	8001fa4 <StartManageBodyParts+0x5ac>
 8001e44:	a201      	add	r2, pc, #4	@ (adr r2, 8001e4c <StartManageBodyParts+0x454>)
 8001e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4a:	bf00      	nop
 8001e4c:	08001e65 	.word	0x08001e65
 8001e50:	08001e89 	.word	0x08001e89
 8001e54:	08001ead 	.word	0x08001ead
 8001e58:	08001ed3 	.word	0x08001ed3
 8001e5c:	08001f19 	.word	0x08001f19
 8001e60:	08001f3f 	.word	0x08001f3f
            case BottomLeft:
              // TailTop ou TailRight
              if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0]) {
 8001e64:	4b26      	ldr	r3, [pc, #152]	@ (8001f00 <StartManageBodyParts+0x508>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	4a24      	ldr	r2, [pc, #144]	@ (8001efc <StartManageBodyParts+0x504>)
 8001e6c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001e70:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef0 <StartManageBodyParts+0x4f8>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d103      	bne.n	8001e80 <StartManageBodyParts+0x488>
                tailPart = TailTop;
 8001e78:	4b24      	ldr	r3, [pc, #144]	@ (8001f0c <StartManageBodyParts+0x514>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailRight;
              }
              break;
 8001e7e:	e091      	b.n	8001fa4 <StartManageBodyParts+0x5ac>
                tailPart = TailRight;
 8001e80:	4b22      	ldr	r3, [pc, #136]	@ (8001f0c <StartManageBodyParts+0x514>)
 8001e82:	2203      	movs	r2, #3
 8001e84:	701a      	strb	r2, [r3, #0]
              break;
 8001e86:	e08d      	b.n	8001fa4 <StartManageBodyParts+0x5ac>
            case BottomRight:
              // TailBottom ou TailLeft
              if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0]) {
 8001e88:	4b1d      	ldr	r3, [pc, #116]	@ (8001f00 <StartManageBodyParts+0x508>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	4a1b      	ldr	r2, [pc, #108]	@ (8001efc <StartManageBodyParts+0x504>)
 8001e90:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001e94:	4b16      	ldr	r3, [pc, #88]	@ (8001ef0 <StartManageBodyParts+0x4f8>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d103      	bne.n	8001ea4 <StartManageBodyParts+0x4ac>
                tailPart = TailTop;
 8001e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f0c <StartManageBodyParts+0x514>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailLeft;
              }
              break;
 8001ea2:	e07f      	b.n	8001fa4 <StartManageBodyParts+0x5ac>
                tailPart = TailLeft;
 8001ea4:	4b19      	ldr	r3, [pc, #100]	@ (8001f0c <StartManageBodyParts+0x514>)
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	701a      	strb	r2, [r3, #0]
              break;
 8001eaa:	e07b      	b.n	8001fa4 <StartManageBodyParts+0x5ac>
            case BottomTop:
              // TailTop ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] < snakeTailPosition[1]) {
 8001eac:	4b14      	ldr	r3, [pc, #80]	@ (8001f00 <StartManageBodyParts+0x508>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	4a12      	ldr	r2, [pc, #72]	@ (8001efc <StartManageBodyParts+0x504>)
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	785a      	ldrb	r2, [r3, #1]
 8001eba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef0 <StartManageBodyParts+0x4f8>)
 8001ebc:	785b      	ldrb	r3, [r3, #1]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d203      	bcs.n	8001eca <StartManageBodyParts+0x4d2>
                tailPart = TailTop;
 8001ec2:	4b12      	ldr	r3, [pc, #72]	@ (8001f0c <StartManageBodyParts+0x514>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001ec8:	e06c      	b.n	8001fa4 <StartManageBodyParts+0x5ac>
                tailPart = TailBottom;
 8001eca:	4b10      	ldr	r3, [pc, #64]	@ (8001f0c <StartManageBodyParts+0x514>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
              break;
 8001ed0:	e068      	b.n	8001fa4 <StartManageBodyParts+0x5ac>
            case LeftRight:
              // TailRight ou TailLeft
              if (snakeBodyPosition[snakeSize - 1][0] < snakeTailPosition[0]) {
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <StartManageBodyParts+0x508>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	4a08      	ldr	r2, [pc, #32]	@ (8001efc <StartManageBodyParts+0x504>)
 8001eda:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001ede:	4b04      	ldr	r3, [pc, #16]	@ (8001ef0 <StartManageBodyParts+0x4f8>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d214      	bcs.n	8001f10 <StartManageBodyParts+0x518>
                tailPart = TailLeft;
 8001ee6:	4b09      	ldr	r3, [pc, #36]	@ (8001f0c <StartManageBodyParts+0x514>)
 8001ee8:	2202      	movs	r2, #2
 8001eea:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailRight;
              }
              break;
 8001eec:	e05a      	b.n	8001fa4 <StartManageBodyParts+0x5ac>
 8001eee:	bf00      	nop
 8001ef0:	2000000c 	.word	0x2000000c
 8001ef4:	20000008 	.word	0x20000008
 8001ef8:	20000260 	.word	0x20000260
 8001efc:	200002f0 	.word	0x200002f0
 8001f00:	200002d8 	.word	0x200002d8
 8001f04:	200003e4 	.word	0x200003e4
 8001f08:	200002dc 	.word	0x200002dc
 8001f0c:	20000005 	.word	0x20000005
                tailPart = TailRight;
 8001f10:	4b28      	ldr	r3, [pc, #160]	@ (8001fb4 <StartManageBodyParts+0x5bc>)
 8001f12:	2203      	movs	r2, #3
 8001f14:	701a      	strb	r2, [r3, #0]
              break;
 8001f16:	e045      	b.n	8001fa4 <StartManageBodyParts+0x5ac>
            case LeftTop:
              // TailRight ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1]) {
 8001f18:	4b27      	ldr	r3, [pc, #156]	@ (8001fb8 <StartManageBodyParts+0x5c0>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	4a27      	ldr	r2, [pc, #156]	@ (8001fbc <StartManageBodyParts+0x5c4>)
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	785a      	ldrb	r2, [r3, #1]
 8001f26:	4b26      	ldr	r3, [pc, #152]	@ (8001fc0 <StartManageBodyParts+0x5c8>)
 8001f28:	785b      	ldrb	r3, [r3, #1]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d103      	bne.n	8001f36 <StartManageBodyParts+0x53e>
                tailPart = TailRight;
 8001f2e:	4b21      	ldr	r3, [pc, #132]	@ (8001fb4 <StartManageBodyParts+0x5bc>)
 8001f30:	2203      	movs	r2, #3
 8001f32:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001f34:	e036      	b.n	8001fa4 <StartManageBodyParts+0x5ac>
                tailPart = TailBottom;
 8001f36:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb4 <StartManageBodyParts+0x5bc>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]
              break;
 8001f3c:	e032      	b.n	8001fa4 <StartManageBodyParts+0x5ac>
            case RightTop:
              // TailLeft ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1]) {
 8001f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb8 <StartManageBodyParts+0x5c0>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	4a1d      	ldr	r2, [pc, #116]	@ (8001fbc <StartManageBodyParts+0x5c4>)
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4413      	add	r3, r2
 8001f4a:	785a      	ldrb	r2, [r3, #1]
 8001f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc0 <StartManageBodyParts+0x5c8>)
 8001f4e:	785b      	ldrb	r3, [r3, #1]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d103      	bne.n	8001f5c <StartManageBodyParts+0x564>
                tailPart = TailLeft;
 8001f54:	4b17      	ldr	r3, [pc, #92]	@ (8001fb4 <StartManageBodyParts+0x5bc>)
 8001f56:	2202      	movs	r2, #2
 8001f58:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001f5a:	e023      	b.n	8001fa4 <StartManageBodyParts+0x5ac>
                tailPart = TailBottom;
 8001f5c:	4b15      	ldr	r3, [pc, #84]	@ (8001fb4 <StartManageBodyParts+0x5bc>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
              break;
 8001f62:	e01f      	b.n	8001fa4 <StartManageBodyParts+0x5ac>
          }
        }
        else {
          switch (headPart) {
 8001f64:	4b17      	ldr	r3, [pc, #92]	@ (8001fc4 <StartManageBodyParts+0x5cc>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d81b      	bhi.n	8001fa4 <StartManageBodyParts+0x5ac>
 8001f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f74 <StartManageBodyParts+0x57c>)
 8001f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f72:	bf00      	nop
 8001f74:	08001f85 	.word	0x08001f85
 8001f78:	08001f8d 	.word	0x08001f8d
 8001f7c:	08001f95 	.word	0x08001f95
 8001f80:	08001f9d 	.word	0x08001f9d
            case HeadTop:
              tailPart = TailTop;
 8001f84:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb4 <StartManageBodyParts+0x5bc>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	701a      	strb	r2, [r3, #0]
              break;
 8001f8a:	e00b      	b.n	8001fa4 <StartManageBodyParts+0x5ac>
            case HeadBottom:
              tailPart = TailBottom;
 8001f8c:	4b09      	ldr	r3, [pc, #36]	@ (8001fb4 <StartManageBodyParts+0x5bc>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	701a      	strb	r2, [r3, #0]
              break;
 8001f92:	e007      	b.n	8001fa4 <StartManageBodyParts+0x5ac>
            case HeadLeft:
              tailPart = TailLeft;
 8001f94:	4b07      	ldr	r3, [pc, #28]	@ (8001fb4 <StartManageBodyParts+0x5bc>)
 8001f96:	2202      	movs	r2, #2
 8001f98:	701a      	strb	r2, [r3, #0]
              break;
 8001f9a:	e003      	b.n	8001fa4 <StartManageBodyParts+0x5ac>
            case HeadRight:
              tailPart = TailRight;
 8001f9c:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <StartManageBodyParts+0x5bc>)
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	701a      	strb	r2, [r3, #0]
              break;
 8001fa2:	bf00      	nop
          }
        }
      }
    }

    vTaskDelayUntil(&xLastWakeTime, delay);
 8001fa4:	f107 0310 	add.w	r3, r7, #16
 8001fa8:	69b9      	ldr	r1, [r7, #24]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f011 fe46 	bl	8013c3c <vTaskDelayUntil>
    if (!gameOver && !gamePaused && gameStarted) {
 8001fb0:	e546      	b.n	8001a40 <StartManageBodyParts+0x48>
 8001fb2:	bf00      	nop
 8001fb4:	20000005 	.word	0x20000005
 8001fb8:	200002d8 	.word	0x200002d8
 8001fbc:	200002f0 	.word	0x200002f0
 8001fc0:	2000000c 	.word	0x2000000c
 8001fc4:	2000025d 	.word	0x2000025d

08001fc8 <StartTsHandlerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTsHandlerTask */
void StartTsHandlerTask(void const * argument)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTsHandlerTask */
  /* Infinite loop */
  for(;;)
  {
    if (!gameStarted)
 8001fd0:	4b29      	ldr	r3, [pc, #164]	@ (8002078 <StartTsHandlerTask+0xb0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <StartTsHandlerTask+0x14>
      rand();
 8001fd8:	f013 f9b0 	bl	801533c <rand>
    

    BSP_TS_GetState(&TS_State);
 8001fdc:	4827      	ldr	r0, [pc, #156]	@ (800207c <StartTsHandlerTask+0xb4>)
 8001fde:	f003 fd21 	bl	8005a24 <BSP_TS_GetState>

    if (!TS_State.touchDetected && screenPressed) {
 8001fe2:	4b26      	ldr	r3, [pc, #152]	@ (800207c <StartTsHandlerTask+0xb4>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d136      	bne.n	8002058 <StartTsHandlerTask+0x90>
 8001fea:	4b25      	ldr	r3, [pc, #148]	@ (8002080 <StartTsHandlerTask+0xb8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d032      	beq.n	8002058 <StartTsHandlerTask+0x90>
      if (gameOver) {
 8001ff2:	4b24      	ldr	r3, [pc, #144]	@ (8002084 <StartTsHandlerTask+0xbc>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d005      	beq.n	8002006 <StartTsHandlerTask+0x3e>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8001ffa:	4823      	ldr	r0, [pc, #140]	@ (8002088 <StartTsHandlerTask+0xc0>)
 8001ffc:	f002 fdba 	bl	8004b74 <BSP_LCD_Clear>
        restartGame();
 8002000:	f000 f9a4 	bl	800234c <restartGame>
 8002004:	e028      	b.n	8002058 <StartTsHandlerTask+0x90>
      }
      else if (gamePaused) {
 8002006:	4b21      	ldr	r3, [pc, #132]	@ (800208c <StartTsHandlerTask+0xc4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d014      	beq.n	8002038 <StartTsHandlerTask+0x70>
        xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 800200e:	4b20      	ldr	r3, [pc, #128]	@ (8002090 <StartTsHandlerTask+0xc8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002016:	4618      	mov	r0, r3
 8002018:	f011 f940 	bl	801329c <xQueueSemaphoreTake>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 800201c:	481a      	ldr	r0, [pc, #104]	@ (8002088 <StartTsHandlerTask+0xc0>)
 800201e:	f002 fda9 	bl	8004b74 <BSP_LCD_Clear>
        xSemaphoreGive(displayMutexHandle);
 8002022:	4b1b      	ldr	r3, [pc, #108]	@ (8002090 <StartTsHandlerTask+0xc8>)
 8002024:	6818      	ldr	r0, [r3, #0]
 8002026:	2300      	movs	r3, #0
 8002028:	2200      	movs	r2, #0
 800202a:	2100      	movs	r1, #0
 800202c:	f010 fe08 	bl	8012c40 <xQueueGenericSend>
        gamePaused = 0;
 8002030:	4b16      	ldr	r3, [pc, #88]	@ (800208c <StartTsHandlerTask+0xc4>)
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	e00f      	b.n	8002058 <StartTsHandlerTask+0x90>
      }
      else if (!gameStarted) {
 8002038:	4b0f      	ldr	r3, [pc, #60]	@ (8002078 <StartTsHandlerTask+0xb0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d108      	bne.n	8002052 <StartTsHandlerTask+0x8a>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8002040:	4811      	ldr	r0, [pc, #68]	@ (8002088 <StartTsHandlerTask+0xc0>)
 8002042:	f002 fd97 	bl	8004b74 <BSP_LCD_Clear>
        restartGame();
 8002046:	f000 f981 	bl	800234c <restartGame>
        gameStarted = 1;
 800204a:	4b0b      	ldr	r3, [pc, #44]	@ (8002078 <StartTsHandlerTask+0xb0>)
 800204c:	2201      	movs	r2, #1
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	e002      	b.n	8002058 <StartTsHandlerTask+0x90>
      }
      else {
        gamePaused = 1;
 8002052:	4b0e      	ldr	r3, [pc, #56]	@ (800208c <StartTsHandlerTask+0xc4>)
 8002054:	2201      	movs	r2, #1
 8002056:	601a      	str	r2, [r3, #0]
      }
    }

    if (TS_State.touchDetected) {
 8002058:	4b08      	ldr	r3, [pc, #32]	@ (800207c <StartTsHandlerTask+0xb4>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <StartTsHandlerTask+0xa0>
      screenPressed = 1;
 8002060:	4b07      	ldr	r3, [pc, #28]	@ (8002080 <StartTsHandlerTask+0xb8>)
 8002062:	2201      	movs	r2, #1
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	e002      	b.n	800206e <StartTsHandlerTask+0xa6>
    }
    else {
      screenPressed = 0;
 8002068:	4b05      	ldr	r3, [pc, #20]	@ (8002080 <StartTsHandlerTask+0xb8>)
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
    }

    osDelay(10);
 800206e:	200a      	movs	r0, #10
 8002070:	f010 f9be 	bl	80123f0 <osDelay>
    if (!gameStarted)
 8002074:	e7ac      	b.n	8001fd0 <StartTsHandlerTask+0x8>
 8002076:	bf00      	nop
 8002078:	200002e0 	.word	0x200002e0
 800207c:	20000224 	.word	0x20000224
 8002080:	20000250 	.word	0x20000250
 8002084:	200002e8 	.word	0x200002e8
 8002088:	ff81cd4b 	.word	0xff81cd4b
 800208c:	200002e4 	.word	0x200002e4
 8002090:	20000408 	.word	0x20000408

08002094 <StartPlaySongTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPlaySongTask */
void StartPlaySongTask(void const * argument)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	uint32_t bytesRead;
	uint32_t tailleOctet;
  /* Infinite loop */
  for(;;)
  {
    xQueueReceive(WakeUpHandle, &i, portMAX_DELAY);
 800209c:	4b32      	ldr	r3, [pc, #200]	@ (8002168 <StartPlaySongTask+0xd4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f107 0113 	add.w	r1, r7, #19
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020a8:	4618      	mov	r0, r3
 80020aa:	f011 f80f 	bl	80130cc <xQueueReceive>
    if (!i) {
 80020ae:	7cfb      	ldrb	r3, [r7, #19]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d12c      	bne.n	800210e <StartPlaySongTask+0x7a>
    	if (Bloc_Cursor++ == Nb_Bloc - 1) {
 80020b4:	4b2d      	ldr	r3, [pc, #180]	@ (800216c <StartPlaySongTask+0xd8>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	492c      	ldr	r1, [pc, #176]	@ (800216c <StartPlaySongTask+0xd8>)
 80020bc:	600a      	str	r2, [r1, #0]
 80020be:	4a2c      	ldr	r2, [pc, #176]	@ (8002170 <StartPlaySongTask+0xdc>)
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	3a01      	subs	r2, #1
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d115      	bne.n	80020f4 <StartPlaySongTask+0x60>
    		f_close(&SDFile);
 80020c8:	482a      	ldr	r0, [pc, #168]	@ (8002174 <StartPlaySongTask+0xe0>)
 80020ca:	f00f fdcf 	bl	8011c6c <f_close>
    		f_open(&SDFile, "Mus1.WAV", FA_READ);
 80020ce:	2201      	movs	r2, #1
 80020d0:	4929      	ldr	r1, [pc, #164]	@ (8002178 <StartPlaySongTask+0xe4>)
 80020d2:	4828      	ldr	r0, [pc, #160]	@ (8002174 <StartPlaySongTask+0xe0>)
 80020d4:	f00f fa12 	bl	80114fc <f_open>
    		readHeader();
 80020d8:	f000 faaa 	bl	8002630 <readHeader>
    		initAudio(freqAudio);
 80020dc:	4b27      	ldr	r3, [pc, #156]	@ (800217c <StartPlaySongTask+0xe8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f000 fa4d 	bl	8002580 <initAudio>
    		f_lseek(&SDFile, 44);
 80020e6:	212c      	movs	r1, #44	@ 0x2c
 80020e8:	4822      	ldr	r0, [pc, #136]	@ (8002174 <StartPlaySongTask+0xe0>)
 80020ea:	f00f fdee 	bl	8011cca <f_lseek>
    		Bloc_Cursor = 0;
 80020ee:	4b1f      	ldr	r3, [pc, #124]	@ (800216c <StartPlaySongTask+0xd8>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
    	}
    	f_read(&SDFile, (uint8_t*)AUDIO_BUFFER_OUT, AUDIO_BLOCK_SIZE, (void*)&bytesRead);
 80020f4:	f107 030c 	add.w	r3, r7, #12
 80020f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020fc:	4920      	ldr	r1, [pc, #128]	@ (8002180 <StartPlaySongTask+0xec>)
 80020fe:	481d      	ldr	r0, [pc, #116]	@ (8002174 <StartPlaySongTask+0xe0>)
 8002100:	f00f fbbd 	bl	801187e <f_read>

    	tailleOctet = 512 * Bloc_Cursor;
 8002104:	4b19      	ldr	r3, [pc, #100]	@ (800216c <StartPlaySongTask+0xd8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	025b      	lsls	r3, r3, #9
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	e7c6      	b.n	800209c <StartPlaySongTask+0x8>
    }
    else {
    	if (Bloc_Cursor++ == Nb_Bloc - 1) {
 800210e:	4b17      	ldr	r3, [pc, #92]	@ (800216c <StartPlaySongTask+0xd8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	4915      	ldr	r1, [pc, #84]	@ (800216c <StartPlaySongTask+0xd8>)
 8002116:	600a      	str	r2, [r1, #0]
 8002118:	4a15      	ldr	r2, [pc, #84]	@ (8002170 <StartPlaySongTask+0xdc>)
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	3a01      	subs	r2, #1
 800211e:	4293      	cmp	r3, r2
 8002120:	d115      	bne.n	800214e <StartPlaySongTask+0xba>
    		f_close(&SDFile);
 8002122:	4814      	ldr	r0, [pc, #80]	@ (8002174 <StartPlaySongTask+0xe0>)
 8002124:	f00f fda2 	bl	8011c6c <f_close>
    		f_open(&SDFile, "Mus1.WAV", FA_READ);
 8002128:	2201      	movs	r2, #1
 800212a:	4913      	ldr	r1, [pc, #76]	@ (8002178 <StartPlaySongTask+0xe4>)
 800212c:	4811      	ldr	r0, [pc, #68]	@ (8002174 <StartPlaySongTask+0xe0>)
 800212e:	f00f f9e5 	bl	80114fc <f_open>
    		readHeader();
 8002132:	f000 fa7d 	bl	8002630 <readHeader>
    		initAudio(freqAudio);
 8002136:	4b11      	ldr	r3, [pc, #68]	@ (800217c <StartPlaySongTask+0xe8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f000 fa20 	bl	8002580 <initAudio>
    		f_lseek(&SDFile, 44);
 8002140:	212c      	movs	r1, #44	@ 0x2c
 8002142:	480c      	ldr	r0, [pc, #48]	@ (8002174 <StartPlaySongTask+0xe0>)
 8002144:	f00f fdc1 	bl	8011cca <f_lseek>
    		Bloc_Cursor = 0;
 8002148:	4b08      	ldr	r3, [pc, #32]	@ (800216c <StartPlaySongTask+0xd8>)
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
    	}
    	f_read(&SDFile, (uint8_t*)AUDIO_BUFFER_OUT + AUDIO_BLOCK_SIZE, AUDIO_BLOCK_SIZE, (void*)&bytesRead);
 800214e:	f107 030c 	add.w	r3, r7, #12
 8002152:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002156:	490b      	ldr	r1, [pc, #44]	@ (8002184 <StartPlaySongTask+0xf0>)
 8002158:	4806      	ldr	r0, [pc, #24]	@ (8002174 <StartPlaySongTask+0xe0>)
 800215a:	f00f fb90 	bl	801187e <f_read>

    	tailleOctet = 512 * Bloc_Cursor;
 800215e:	4b03      	ldr	r3, [pc, #12]	@ (800216c <StartPlaySongTask+0xd8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	025b      	lsls	r3, r3, #9
 8002164:	617b      	str	r3, [r7, #20]
    xQueueReceive(WakeUpHandle, &i, portMAX_DELAY);
 8002166:	e799      	b.n	800209c <StartPlaySongTask+0x8>
 8002168:	20000404 	.word	0x20000404
 800216c:	20000218 	.word	0x20000218
 8002170:	20000220 	.word	0x20000220
 8002174:	2000123c 	.word	0x2000123c
 8002178:	080168e4 	.word	0x080168e4
 800217c:	2000021c 	.word	0x2000021c
 8002180:	c007fc00 	.word	0xc007fc00
 8002184:	c007fe00 	.word	0xc007fe00

08002188 <whatBodyPart>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
enum BodyPart whatBodyPart(uint8_t frontX, uint8_t frontY, uint8_t backX, uint8_t backY, uint8_t missingX, uint8_t missingY)
{
 8002188:	b490      	push	{r4, r7}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	4604      	mov	r4, r0
 8002190:	4608      	mov	r0, r1
 8002192:	4611      	mov	r1, r2
 8002194:	461a      	mov	r2, r3
 8002196:	4623      	mov	r3, r4
 8002198:	71fb      	strb	r3, [r7, #7]
 800219a:	4603      	mov	r3, r0
 800219c:	71bb      	strb	r3, [r7, #6]
 800219e:	460b      	mov	r3, r1
 80021a0:	717b      	strb	r3, [r7, #5]
 80021a2:	4613      	mov	r3, r2
 80021a4:	713b      	strb	r3, [r7, #4]
  /*
    . F .
    . X .
    . B .
  */
  if (frontX == backX)
 80021a6:	79fa      	ldrb	r2, [r7, #7]
 80021a8:	797b      	ldrb	r3, [r7, #5]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d101      	bne.n	80021b2 <whatBodyPart+0x2a>
    return BottomTop;
 80021ae:	2302      	movs	r3, #2
 80021b0:	e046      	b.n	8002240 <whatBodyPart+0xb8>
  /*
    . . .
    F X B
    . . .
  */
  if (frontY == backY)
 80021b2:	79ba      	ldrb	r2, [r7, #6]
 80021b4:	793b      	ldrb	r3, [r7, #4]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d101      	bne.n	80021be <whatBodyPart+0x36>
    return LeftRight;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e040      	b.n	8002240 <whatBodyPart+0xb8>
  /*
    . B .       . . .
    F X .       . X B
    . . .       . F .
  */
  if (frontX < backX && frontY > backY) {
 80021be:	79fa      	ldrb	r2, [r7, #7]
 80021c0:	797b      	ldrb	r3, [r7, #5]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d20b      	bcs.n	80021de <whatBodyPart+0x56>
 80021c6:	79ba      	ldrb	r2, [r7, #6]
 80021c8:	793b      	ldrb	r3, [r7, #4]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d907      	bls.n	80021de <whatBodyPart+0x56>
    if (missingX == frontX)
 80021ce:	7c3a      	ldrb	r2, [r7, #16]
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d101      	bne.n	80021da <whatBodyPart+0x52>
      return BottomRight;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e032      	b.n	8002240 <whatBodyPart+0xb8>
    else
      return LeftTop;
 80021da:	2304      	movs	r3, #4
 80021dc:	e030      	b.n	8002240 <whatBodyPart+0xb8>
  /*
    . . .       . F .
    F X .       . X B
    . B .       . . .
  */
  if (frontX < backX && frontY < backY) {
 80021de:	79fa      	ldrb	r2, [r7, #7]
 80021e0:	797b      	ldrb	r3, [r7, #5]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d20b      	bcs.n	80021fe <whatBodyPart+0x76>
 80021e6:	79ba      	ldrb	r2, [r7, #6]
 80021e8:	793b      	ldrb	r3, [r7, #4]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d207      	bcs.n	80021fe <whatBodyPart+0x76>
    if (missingX == frontX)
 80021ee:	7c3a      	ldrb	r2, [r7, #16]
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d101      	bne.n	80021fa <whatBodyPart+0x72>
      return RightTop;
 80021f6:	2305      	movs	r3, #5
 80021f8:	e022      	b.n	8002240 <whatBodyPart+0xb8>
    else
      return BottomLeft;
 80021fa:	2300      	movs	r3, #0
 80021fc:	e020      	b.n	8002240 <whatBodyPart+0xb8>
  /*
    . . .       . F .
    . X F       B X .
    . B .       . . .
  */
  if (frontX > backX && frontY < backY) {
 80021fe:	79fa      	ldrb	r2, [r7, #7]
 8002200:	797b      	ldrb	r3, [r7, #5]
 8002202:	429a      	cmp	r2, r3
 8002204:	d90b      	bls.n	800221e <whatBodyPart+0x96>
 8002206:	79ba      	ldrb	r2, [r7, #6]
 8002208:	793b      	ldrb	r3, [r7, #4]
 800220a:	429a      	cmp	r2, r3
 800220c:	d207      	bcs.n	800221e <whatBodyPart+0x96>
    if (missingX == frontX)
 800220e:	7c3a      	ldrb	r2, [r7, #16]
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	429a      	cmp	r2, r3
 8002214:	d101      	bne.n	800221a <whatBodyPart+0x92>
      return LeftTop;
 8002216:	2304      	movs	r3, #4
 8002218:	e012      	b.n	8002240 <whatBodyPart+0xb8>
    else
      return BottomRight;
 800221a:	2301      	movs	r3, #1
 800221c:	e010      	b.n	8002240 <whatBodyPart+0xb8>
  /*
    . B .       . . .
    . X F       B X .
    . . .       . F .
  */
  if (frontX > backX && frontY > backY) {
 800221e:	79fa      	ldrb	r2, [r7, #7]
 8002220:	797b      	ldrb	r3, [r7, #5]
 8002222:	429a      	cmp	r2, r3
 8002224:	d90b      	bls.n	800223e <whatBodyPart+0xb6>
 8002226:	79ba      	ldrb	r2, [r7, #6]
 8002228:	793b      	ldrb	r3, [r7, #4]
 800222a:	429a      	cmp	r2, r3
 800222c:	d907      	bls.n	800223e <whatBodyPart+0xb6>
    if (missingX == frontX)
 800222e:	7c3a      	ldrb	r2, [r7, #16]
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	429a      	cmp	r2, r3
 8002234:	d101      	bne.n	800223a <whatBodyPart+0xb2>
      return BottomLeft;
 8002236:	2300      	movs	r3, #0
 8002238:	e002      	b.n	8002240 <whatBodyPart+0xb8>
    else
      return RightTop;
 800223a:	2305      	movs	r3, #5
 800223c:	e000      	b.n	8002240 <whatBodyPart+0xb8>
  }

  return BottomTop; // should never happen
 800223e:	2302      	movs	r3, #2
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bc90      	pop	{r4, r7}
 8002248:	4770      	bx	lr
	...

0800224c <isSnakePosition>:

uint8_t isSnakePosition(uint8_t x, uint8_t y)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	460a      	mov	r2, r1
 8002256:	71fb      	strb	r3, [r7, #7]
 8002258:	4613      	mov	r3, r2
 800225a:	71bb      	strb	r3, [r7, #6]
  if (x == snakeHeadPosition[0] && y == snakeHeadPosition[1])
 800225c:	4b1d      	ldr	r3, [pc, #116]	@ (80022d4 <isSnakePosition+0x88>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	79fa      	ldrb	r2, [r7, #7]
 8002262:	429a      	cmp	r2, r3
 8002264:	d106      	bne.n	8002274 <isSnakePosition+0x28>
 8002266:	4b1b      	ldr	r3, [pc, #108]	@ (80022d4 <isSnakePosition+0x88>)
 8002268:	785b      	ldrb	r3, [r3, #1]
 800226a:	79ba      	ldrb	r2, [r7, #6]
 800226c:	429a      	cmp	r2, r3
 800226e:	d101      	bne.n	8002274 <isSnakePosition+0x28>
    return 1;
 8002270:	2301      	movs	r3, #1
 8002272:	e029      	b.n	80022c8 <isSnakePosition+0x7c>

  for (int i = 0; i < snakeSize; i++) {
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	e013      	b.n	80022a2 <isSnakePosition+0x56>
    if (x == snakeBodyPosition[i][0] && y == snakeBodyPosition[i][1])
 800227a:	4a17      	ldr	r2, [pc, #92]	@ (80022d8 <isSnakePosition+0x8c>)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002282:	79fa      	ldrb	r2, [r7, #7]
 8002284:	429a      	cmp	r2, r3
 8002286:	d109      	bne.n	800229c <isSnakePosition+0x50>
 8002288:	4a13      	ldr	r2, [pc, #76]	@ (80022d8 <isSnakePosition+0x8c>)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4413      	add	r3, r2
 8002290:	785b      	ldrb	r3, [r3, #1]
 8002292:	79ba      	ldrb	r2, [r7, #6]
 8002294:	429a      	cmp	r2, r3
 8002296:	d101      	bne.n	800229c <isSnakePosition+0x50>
      return 1;
 8002298:	2301      	movs	r3, #1
 800229a:	e015      	b.n	80022c8 <isSnakePosition+0x7c>
  for (int i = 0; i < snakeSize; i++) {
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	3301      	adds	r3, #1
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	4b0e      	ldr	r3, [pc, #56]	@ (80022dc <isSnakePosition+0x90>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4293      	cmp	r3, r2
 80022ac:	dbe5      	blt.n	800227a <isSnakePosition+0x2e>
  }

  if (x == snakeTailPosition[0] && y == snakeTailPosition[1])
 80022ae:	4b0c      	ldr	r3, [pc, #48]	@ (80022e0 <isSnakePosition+0x94>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	79fa      	ldrb	r2, [r7, #7]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d106      	bne.n	80022c6 <isSnakePosition+0x7a>
 80022b8:	4b09      	ldr	r3, [pc, #36]	@ (80022e0 <isSnakePosition+0x94>)
 80022ba:	785b      	ldrb	r3, [r3, #1]
 80022bc:	79ba      	ldrb	r2, [r7, #6]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d101      	bne.n	80022c6 <isSnakePosition+0x7a>
    return 1;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <isSnakePosition+0x7c>

  return 0;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	20000008 	.word	0x20000008
 80022d8:	200002f0 	.word	0x200002f0
 80022dc:	200002d8 	.word	0x200002d8
 80022e0:	2000000c 	.word	0x2000000c

080022e4 <isApplePosition>:

uint8_t isApplePosition(uint8_t x, uint8_t y, uint8_t appleIndex)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
 80022ee:	460b      	mov	r3, r1
 80022f0:	71bb      	strb	r3, [r7, #6]
 80022f2:	4613      	mov	r3, r2
 80022f4:	717b      	strb	r3, [r7, #5]
  for (int i = 0; i < NBApple; i++) {
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	e019      	b.n	8002330 <isApplePosition+0x4c>
    if (i == appleIndex)
 80022fc:	797b      	ldrb	r3, [r7, #5]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	429a      	cmp	r2, r3
 8002302:	d011      	beq.n	8002328 <isApplePosition+0x44>
      continue;

    if (x == applePosition[i][0] && y == applePosition[i][1])
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	4910      	ldr	r1, [pc, #64]	@ (8002348 <isApplePosition+0x64>)
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	f911 2012 	ldrsb.w	r2, [r1, r2, lsl #1]
 800230e:	4293      	cmp	r3, r2
 8002310:	d10b      	bne.n	800232a <isApplePosition+0x46>
 8002312:	79ba      	ldrb	r2, [r7, #6]
 8002314:	490c      	ldr	r1, [pc, #48]	@ (8002348 <isApplePosition+0x64>)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	440b      	add	r3, r1
 800231c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002320:	429a      	cmp	r2, r3
 8002322:	d102      	bne.n	800232a <isApplePosition+0x46>
      return 1;
 8002324:	2301      	movs	r3, #1
 8002326:	e009      	b.n	800233c <isApplePosition+0x58>
      continue;
 8002328:	bf00      	nop
  for (int i = 0; i < NBApple; i++) {
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	3301      	adds	r3, #1
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	2304      	movs	r3, #4
 8002332:	461a      	mov	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4293      	cmp	r3, r2
 8002338:	dbe0      	blt.n	80022fc <isApplePosition+0x18>
  }

  return 0;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	200003e4 	.word	0x200003e4

0800234c <restartGame>:

void restartGame()
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
  gameOver = 0;
 8002352:	4b3a      	ldr	r3, [pc, #232]	@ (800243c <restartGame+0xf0>)
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
  lastMove = 0;
 8002358:	4b39      	ldr	r3, [pc, #228]	@ (8002440 <restartGame+0xf4>)
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
  snakeSize = 0;
 800235e:	4b39      	ldr	r3, [pc, #228]	@ (8002444 <restartGame+0xf8>)
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
  snakeHeadPosition[0] = 7;
 8002364:	4b38      	ldr	r3, [pc, #224]	@ (8002448 <restartGame+0xfc>)
 8002366:	2207      	movs	r2, #7
 8002368:	701a      	strb	r2, [r3, #0]
  snakeHeadPosition[1] = 6;
 800236a:	4b37      	ldr	r3, [pc, #220]	@ (8002448 <restartGame+0xfc>)
 800236c:	2206      	movs	r2, #6
 800236e:	705a      	strb	r2, [r3, #1]
  snakeTailPosition[0] = 7;
 8002370:	4b36      	ldr	r3, [pc, #216]	@ (800244c <restartGame+0x100>)
 8002372:	2207      	movs	r2, #7
 8002374:	701a      	strb	r2, [r3, #0]
  snakeTailPosition[1] = 7;
 8002376:	4b35      	ldr	r3, [pc, #212]	@ (800244c <restartGame+0x100>)
 8002378:	2207      	movs	r2, #7
 800237a:	705a      	strb	r2, [r3, #1]
  direction = Up;
 800237c:	4b34      	ldr	r3, [pc, #208]	@ (8002450 <restartGame+0x104>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
  headPart = HeadTop;
 8002382:	4b34      	ldr	r3, [pc, #208]	@ (8002454 <restartGame+0x108>)
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
  tailPart = TailTop;
 8002388:	4b33      	ldr	r3, [pc, #204]	@ (8002458 <restartGame+0x10c>)
 800238a:	2201      	movs	r2, #1
 800238c:	701a      	strb	r2, [r3, #0]

  for (int i = 0; i < NBApple; i++) {
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	e047      	b.n	8002424 <restartGame+0xd8>
    do {
      applePosition[i][0] = rand() % gridSizeX;
 8002394:	f012 ffd2 	bl	801533c <rand>
 8002398:	4603      	mov	r3, r0
 800239a:	220f      	movs	r2, #15
 800239c:	fb93 f1f2 	sdiv	r1, r3, r2
 80023a0:	fb01 f202 	mul.w	r2, r1, r2
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	b259      	sxtb	r1, r3
 80023a8:	4a2c      	ldr	r2, [pc, #176]	@ (800245c <restartGame+0x110>)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
      applePosition[i][1] = rand() % gridSizeY;
 80023b0:	f012 ffc4 	bl	801533c <rand>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2208      	movs	r2, #8
 80023b8:	fb93 f1f2 	sdiv	r1, r3, r2
 80023bc:	fb01 f202 	mul.w	r2, r1, r2
 80023c0:	1a9b      	subs	r3, r3, r2
 80023c2:	b259      	sxtb	r1, r3
 80023c4:	4a25      	ldr	r2, [pc, #148]	@ (800245c <restartGame+0x110>)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	4413      	add	r3, r2
 80023cc:	460a      	mov	r2, r1
 80023ce:	705a      	strb	r2, [r3, #1]
    } while (isSnakePosition(applePosition[i][0], applePosition[i][1]) || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 80023d0:	4a22      	ldr	r2, [pc, #136]	@ (800245c <restartGame+0x110>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4920      	ldr	r1, [pc, #128]	@ (800245c <restartGame+0x110>)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	440b      	add	r3, r1
 80023e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	4619      	mov	r1, r3
 80023ea:	4610      	mov	r0, r2
 80023ec:	f7ff ff2e 	bl	800224c <isSnakePosition>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1ce      	bne.n	8002394 <restartGame+0x48>
 80023f6:	4a19      	ldr	r2, [pc, #100]	@ (800245c <restartGame+0x110>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 80023fe:	b2d8      	uxtb	r0, r3
 8002400:	4a16      	ldr	r2, [pc, #88]	@ (800245c <restartGame+0x110>)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	4413      	add	r3, r2
 8002408:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	4619      	mov	r1, r3
 8002414:	f7ff ff66 	bl	80022e4 <isApplePosition>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1ba      	bne.n	8002394 <restartGame+0x48>
  for (int i = 0; i < NBApple; i++) {
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3301      	adds	r3, #1
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	2304      	movs	r3, #4
 8002426:	461a      	mov	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4293      	cmp	r3, r2
 800242c:	dbb2      	blt.n	8002394 <restartGame+0x48>
  }

  BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 800242e:	480c      	ldr	r0, [pc, #48]	@ (8002460 <restartGame+0x114>)
 8002430:	f002 fba0 	bl	8004b74 <BSP_LCD_Clear>
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	200002e8 	.word	0x200002e8
 8002440:	200002ec 	.word	0x200002ec
 8002444:	200002d8 	.word	0x200002d8
 8002448:	20000008 	.word	0x20000008
 800244c:	2000000c 	.word	0x2000000c
 8002450:	2000025c 	.word	0x2000025c
 8002454:	2000025d 	.word	0x2000025d
 8002458:	20000005 	.word	0x20000005
 800245c:	200003e4 	.word	0x200003e4
 8002460:	ff81cd4b 	.word	0xff81cd4b

08002464 <displayGameStatus>:

void displayGameStatus()
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  if (gameOver) {
 8002468:	4b27      	ldr	r3, [pc, #156]	@ (8002508 <displayGameStatus+0xa4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d015      	beq.n	800249c <displayGameStatus+0x38>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8002470:	4826      	ldr	r0, [pc, #152]	@ (800250c <displayGameStatus+0xa8>)
 8002472:	f002 fb33 	bl	8004adc <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 8002476:	4826      	ldr	r0, [pc, #152]	@ (8002510 <displayGameStatus+0xac>)
 8002478:	f002 fb62 	bl	8004b40 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Over", CENTER_MODE);
 800247c:	2301      	movs	r3, #1
 800247e:	4a25      	ldr	r2, [pc, #148]	@ (8002514 <displayGameStatus+0xb0>)
 8002480:	2164      	movs	r1, #100	@ 0x64
 8002482:	2000      	movs	r0, #0
 8002484:	f002 fbe2 	bl	8004c4c <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 8002488:	4823      	ldr	r0, [pc, #140]	@ (8002518 <displayGameStatus+0xb4>)
 800248a:	f002 fb59 	bl	8004b40 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to restart", CENTER_MODE);
 800248e:	2301      	movs	r3, #1
 8002490:	4a22      	ldr	r2, [pc, #136]	@ (800251c <displayGameStatus+0xb8>)
 8002492:	2182      	movs	r1, #130	@ 0x82
 8002494:	2000      	movs	r0, #0
 8002496:	f002 fbd9 	bl	8004c4c <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font24);
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
    BSP_LCD_SetFont(&Font16);
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
  }
}
 800249a:	e032      	b.n	8002502 <displayGameStatus+0x9e>
  else if (gamePaused) {
 800249c:	4b20      	ldr	r3, [pc, #128]	@ (8002520 <displayGameStatus+0xbc>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d015      	beq.n	80024d0 <displayGameStatus+0x6c>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 80024a4:	4819      	ldr	r0, [pc, #100]	@ (800250c <displayGameStatus+0xa8>)
 80024a6:	f002 fb19 	bl	8004adc <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 80024aa:	4819      	ldr	r0, [pc, #100]	@ (8002510 <displayGameStatus+0xac>)
 80024ac:	f002 fb48 	bl	8004b40 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Paused", CENTER_MODE);
 80024b0:	2301      	movs	r3, #1
 80024b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002524 <displayGameStatus+0xc0>)
 80024b4:	2164      	movs	r1, #100	@ 0x64
 80024b6:	2000      	movs	r0, #0
 80024b8:	f002 fbc8 	bl	8004c4c <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 80024bc:	4816      	ldr	r0, [pc, #88]	@ (8002518 <displayGameStatus+0xb4>)
 80024be:	f002 fb3f 	bl	8004b40 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to resume", CENTER_MODE);
 80024c2:	2301      	movs	r3, #1
 80024c4:	4a18      	ldr	r2, [pc, #96]	@ (8002528 <displayGameStatus+0xc4>)
 80024c6:	2182      	movs	r1, #130	@ 0x82
 80024c8:	2000      	movs	r0, #0
 80024ca:	f002 fbbf 	bl	8004c4c <BSP_LCD_DisplayStringAt>
}
 80024ce:	e018      	b.n	8002502 <displayGameStatus+0x9e>
  else if (!gameStarted) {
 80024d0:	4b16      	ldr	r3, [pc, #88]	@ (800252c <displayGameStatus+0xc8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d114      	bne.n	8002502 <displayGameStatus+0x9e>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 80024d8:	480c      	ldr	r0, [pc, #48]	@ (800250c <displayGameStatus+0xa8>)
 80024da:	f002 faff 	bl	8004adc <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 80024de:	480c      	ldr	r0, [pc, #48]	@ (8002510 <displayGameStatus+0xac>)
 80024e0:	f002 fb2e 	bl	8004b40 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
 80024e4:	2301      	movs	r3, #1
 80024e6:	4a12      	ldr	r2, [pc, #72]	@ (8002530 <displayGameStatus+0xcc>)
 80024e8:	2164      	movs	r1, #100	@ 0x64
 80024ea:	2000      	movs	r0, #0
 80024ec:	f002 fbae 	bl	8004c4c <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 80024f0:	4809      	ldr	r0, [pc, #36]	@ (8002518 <displayGameStatus+0xb4>)
 80024f2:	f002 fb25 	bl	8004b40 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
 80024f6:	2301      	movs	r3, #1
 80024f8:	4a0e      	ldr	r2, [pc, #56]	@ (8002534 <displayGameStatus+0xd0>)
 80024fa:	2182      	movs	r1, #130	@ 0x82
 80024fc:	2000      	movs	r0, #0
 80024fe:	f002 fba5 	bl	8004c4c <BSP_LCD_DisplayStringAt>
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	200002e8 	.word	0x200002e8
 800250c:	ffa52a2a 	.word	0xffa52a2a
 8002510:	20000038 	.word	0x20000038
 8002514:	080168f0 	.word	0x080168f0
 8002518:	20000040 	.word	0x20000040
 800251c:	080168fc 	.word	0x080168fc
 8002520:	200002e4 	.word	0x200002e4
 8002524:	08016918 	.word	0x08016918
 8002528:	08016924 	.word	0x08016924
 800252c:	200002e0 	.word	0x200002e0
 8002530:	08016940 	.word	0x08016940
 8002534:	0801694c 	.word	0x0801694c

08002538 <initSD>:

void initSD()
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
	if (f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK) {
 800253c:	2200      	movs	r2, #0
 800253e:	490c      	ldr	r1, [pc, #48]	@ (8002570 <initSD+0x38>)
 8002540:	480c      	ldr	r0, [pc, #48]	@ (8002574 <initSD+0x3c>)
 8002542:	f00e ff77 	bl	8011434 <f_mount>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <initSD+0x26>
		BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"SD not mounted", CENTER_MODE);
 800254c:	2301      	movs	r3, #1
 800254e:	4a0a      	ldr	r2, [pc, #40]	@ (8002578 <initSD+0x40>)
 8002550:	2100      	movs	r1, #0
 8002552:	2000      	movs	r0, #0
 8002554:	f002 fb7a 	bl	8004c4c <BSP_LCD_DisplayStringAt>
		Error_Handler();
 8002558:	f001 f8e0 	bl	800371c <Error_Handler>
	}
	else {
		BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"SD mounted", CENTER_MODE);
	}
}
 800255c:	e005      	b.n	800256a <initSD+0x32>
		BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"SD mounted", CENTER_MODE);
 800255e:	2301      	movs	r3, #1
 8002560:	4a06      	ldr	r2, [pc, #24]	@ (800257c <initSD+0x44>)
 8002562:	2100      	movs	r1, #0
 8002564:	2000      	movs	r0, #0
 8002566:	f002 fb71 	bl	8004c4c <BSP_LCD_DisplayStringAt>
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20001004 	.word	0x20001004
 8002574:	20001008 	.word	0x20001008
 8002578:	08016968 	.word	0x08016968
 800257c:	08016978 	.word	0x08016978

08002580 <initAudio>:

void initAudio(uint32_t freq)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af02      	add	r7, sp, #8
 8002586:	6078      	str	r0, [r7, #4]

	// Block ici va savoir pourquoi
	// verifier les paramettres
	//temporaire
	// freq = 44100;
	if (BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_INPUT_LINE_1, OUTPUT_DEVICE_HEADPHONE, freq,
 8002588:	2302      	movs	r3, #2
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2310      	movs	r3, #16
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	2102      	movs	r1, #2
 8002592:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8002596:	f001 ff95 	bl	80044c4 <BSP_AUDIO_IN_OUT_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <initAudio+0x24>
			DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) != AUDIO_OK) {
		Error_Handler();
 80025a0:	f001 f8bc 	bl	800371c <Error_Handler>
	}

	memset((uint16_t*) AUDIO_BUFFER_OUT, 0, AUDIO_BLOCK_SIZE*2);
 80025a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025a8:	2100      	movs	r1, #0
 80025aa:	480e      	ldr	r0, [pc, #56]	@ (80025e4 <initAudio+0x64>)
 80025ac:	f013 f829 	bl	8015602 <memset>

	BSP_AUDIO_OUT_SetVolume(60);
 80025b0:	203c      	movs	r0, #60	@ 0x3c
 80025b2:	f001 fddd 	bl	8004170 <BSP_AUDIO_OUT_SetVolume>
	BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 80025b6:	2005      	movs	r0, #5
 80025b8:	f001 fdf2 	bl	80041a0 <BSP_AUDIO_OUT_SetAudioFrameSlot>
	if (BSP_AUDIO_OUT_Play((uint16_t*) AUDIO_BUFFER_OUT, AUDIO_BLOCK_SIZE*2) == AUDIO_OK) {
 80025bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80025c0:	4808      	ldr	r0, [pc, #32]	@ (80025e4 <initAudio+0x64>)
 80025c2:	f001 fdab 	bl	800411c <BSP_AUDIO_OUT_Play>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d106      	bne.n	80025da <initAudio+0x5a>
		if (!init)
 80025cc:	4b06      	ldr	r3, [pc, #24]	@ (80025e8 <initAudio+0x68>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d102      	bne.n	80025da <initAudio+0x5a>
			init = 1;
 80025d4:	4b04      	ldr	r3, [pc, #16]	@ (80025e8 <initAudio+0x68>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	601a      	str	r2, [r3, #0]
	}
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	c007fc00 	.word	0xc007fc00
 80025e8:	200006ac 	.word	0x200006ac

080025ec <loadSong>:

void loadSong()
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
	f_close(&SDFile);
 80025f0:	480b      	ldr	r0, [pc, #44]	@ (8002620 <loadSong+0x34>)
 80025f2:	f00f fb3b 	bl	8011c6c <f_close>
	f_open(&SDFile, (const TCHAR*)"Mus1.WAV", FA_READ);
 80025f6:	2201      	movs	r2, #1
 80025f8:	490a      	ldr	r1, [pc, #40]	@ (8002624 <loadSong+0x38>)
 80025fa:	4809      	ldr	r0, [pc, #36]	@ (8002620 <loadSong+0x34>)
 80025fc:	f00e ff7e 	bl	80114fc <f_open>
	readHeader();
 8002600:	f000 f816 	bl	8002630 <readHeader>
	initAudio(freqAudio);
 8002604:	4b08      	ldr	r3, [pc, #32]	@ (8002628 <loadSong+0x3c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ffb9 	bl	8002580 <initAudio>
	f_lseek(&SDFile, 44);
 800260e:	212c      	movs	r1, #44	@ 0x2c
 8002610:	4803      	ldr	r0, [pc, #12]	@ (8002620 <loadSong+0x34>)
 8002612:	f00f fb5a 	bl	8011cca <f_lseek>
	Bloc_Cursor = 0;
 8002616:	4b05      	ldr	r3, [pc, #20]	@ (800262c <loadSong+0x40>)
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
}
 800261c:	bf00      	nop
 800261e:	bd80      	pop	{r7, pc}
 8002620:	2000123c 	.word	0x2000123c
 8002624:	080168e4 	.word	0x080168e4
 8002628:	2000021c 	.word	0x2000021c
 800262c:	20000218 	.word	0x20000218

08002630 <readHeader>:

void readHeader()
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
	uint32_t data=0;
 8002636:	2300      	movs	r3, #0
 8002638:	607b      	str	r3, [r7, #4]
	uint32_t bytesread;
	uint32_t taille_octet;


	//Lecture du nombre d'octets
	f_lseek(&SDFile,04);
 800263a:	2104      	movs	r1, #4
 800263c:	4818      	ldr	r0, [pc, #96]	@ (80026a0 <readHeader+0x70>)
 800263e:	f00f fb44 	bl	8011cca <f_lseek>
	f_read(&SDFile, &data, 4, (void*) &bytesread);
 8002642:	463b      	mov	r3, r7
 8002644:	1d39      	adds	r1, r7, #4
 8002646:	2204      	movs	r2, #4
 8002648:	4815      	ldr	r0, [pc, #84]	@ (80026a0 <readHeader+0x70>)
 800264a:	f00f f918 	bl	801187e <f_read>
//	taille_fichier=((data|MASK_32_TO_8_0)<<24)|((data|MASK_32_TO_8_1)<<8)|((data|MASK_32_TO_8_2)>>8)|((data|MASK_32_TO_8_3)>>24);
	taille_octet=data;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	60fb      	str	r3, [r7, #12]
	nb_bl=data/512;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	0a5b      	lsrs	r3, r3, #9
 8002656:	60bb      	str	r3, [r7, #8]
	Nb_Bloc=(uint32_t)nb_bl;
 8002658:	4a12      	ldr	r2, [pc, #72]	@ (80026a4 <readHeader+0x74>)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	6013      	str	r3, [r2, #0]
	data=0;
 800265e:	2300      	movs	r3, #0
 8002660:	607b      	str	r3, [r7, #4]

	//Lecture de la fréquence d'échantillonnage
	f_lseek(&SDFile,24);
 8002662:	2118      	movs	r1, #24
 8002664:	480e      	ldr	r0, [pc, #56]	@ (80026a0 <readHeader+0x70>)
 8002666:	f00f fb30 	bl	8011cca <f_lseek>
	f_read(&SDFile, &data, 4 , (void*) &bytesread);
 800266a:	463b      	mov	r3, r7
 800266c:	1d39      	adds	r1, r7, #4
 800266e:	2204      	movs	r2, #4
 8002670:	480b      	ldr	r0, [pc, #44]	@ (80026a0 <readHeader+0x70>)
 8002672:	f00f f904 	bl	801187e <f_read>
//	freq=((data2|MASK_32_TO_8_0)<<24)|((data2|MASK_32_TO_8_1)<<8)|((data2|MASK_32_TO_8_2)>>8)|((data2|MASK_32_TO_8_3)>>24);
	freqAudio=data;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a0b      	ldr	r2, [pc, #44]	@ (80026a8 <readHeader+0x78>)
 800267a:	6013      	str	r3, [r2, #0]

	//Nombre d'octets par secondes
	f_lseek(&SDFile,28);
 800267c:	211c      	movs	r1, #28
 800267e:	4808      	ldr	r0, [pc, #32]	@ (80026a0 <readHeader+0x70>)
 8002680:	f00f fb23 	bl	8011cca <f_lseek>
	f_read(&SDFile, (uint8_t*)&data, 4, (void*) &bytesread);
 8002684:	463b      	mov	r3, r7
 8002686:	1d39      	adds	r1, r7, #4
 8002688:	2204      	movs	r2, #4
 800268a:	4805      	ldr	r0, [pc, #20]	@ (80026a0 <readHeader+0x70>)
 800268c:	f00f f8f7 	bl	801187e <f_read>
	Nb_octets_seconde=data;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a06      	ldr	r2, [pc, #24]	@ (80026ac <readHeader+0x7c>)
 8002694:	6013      	str	r3, [r2, #0]
}
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	2000123c 	.word	0x2000123c
 80026a4:	20000220 	.word	0x20000220
 80026a8:	2000021c 	.word	0x2000021c
 80026ac:	20000000 	.word	0x20000000

080026b0 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

void BSP_AUDIO_OUT_TransferComplete_CallBack(void) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
	char i = 1;
 80026b6:	2301      	movs	r3, #1
 80026b8:	71fb      	strb	r3, [r7, #7]
	xQueueSendFromISR(WakeUpHandle, &i, 0);
 80026ba:	4b05      	ldr	r3, [pc, #20]	@ (80026d0 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x20>)
 80026bc:	6818      	ldr	r0, [r3, #0]
 80026be:	1df9      	adds	r1, r7, #7
 80026c0:	2300      	movs	r3, #0
 80026c2:	2200      	movs	r2, #0
 80026c4:	f010 fbc6 	bl	8012e54 <xQueueGenericSendFromISR>
}
 80026c8:	bf00      	nop
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	20000404 	.word	0x20000404

080026d4 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:

void BSP_AUDIO_OUT_HalfTransfer_CallBack(void) {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
	char i = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	71fb      	strb	r3, [r7, #7]
	xQueueSendFromISR(WakeUpHandle, &i, 0);
 80026de:	4b05      	ldr	r3, [pc, #20]	@ (80026f4 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	1df9      	adds	r1, r7, #7
 80026e4:	2300      	movs	r3, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	f010 fbb4 	bl	8012e54 <xQueueGenericSendFromISR>
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20000404 	.word	0x20000404

080026f8 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8002702:	20c8      	movs	r0, #200	@ 0xc8
 8002704:	f001 fcfe 	bl	8004104 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002708:	f000 fa7a 	bl	8002c00 <ft5336_I2C_InitializeIfRequired>
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	4603      	mov	r3, r0
 8002732:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800273c:	2300      	movs	r3, #0
 800273e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002740:	f000 fa5e 	bl	8002c00 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]
 8002748:	e010      	b.n	800276c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800274a:	88fb      	ldrh	r3, [r7, #6]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	21a8      	movs	r1, #168	@ 0xa8
 8002750:	4618      	mov	r0, r3
 8002752:	f001 fcb9 	bl	80040c8 <TS_IO_Read>
 8002756:	4603      	mov	r3, r0
 8002758:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800275a:	7b7b      	ldrb	r3, [r7, #13]
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b51      	cmp	r3, #81	@ 0x51
 8002760:	d101      	bne.n	8002766 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8002762:	2301      	movs	r3, #1
 8002764:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	3301      	adds	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d802      	bhi.n	8002778 <ft5336_ReadID+0x4e>
 8002772:	7bbb      	ldrb	r3, [r7, #14]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0e8      	beq.n	800274a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8002778:	7b7b      	ldrb	r3, [r7, #13]
 800277a:	b2db      	uxtb	r3, r3
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	4618      	mov	r0, r3
 8002792:	f000 fa45 	bl	8002c20 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	4618      	mov	r0, r3
 800279a:	f000 f933 	bl	8002a04 <ft5336_TS_DisableIT>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2102      	movs	r1, #2
 80027bc:	4618      	mov	r0, r3
 80027be:	f001 fc83 	bl	80040c8 <TS_IO_Read>
 80027c2:	4603      	mov	r3, r0
 80027c4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b05      	cmp	r3, #5
 80027d8:	d901      	bls.n	80027de <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80027de:	7bfb      	ldrb	r3, [r7, #15]
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	4b05      	ldr	r3, [pc, #20]	@ (80027f8 <ft5336_TS_DetectTouch+0x50>)
 80027e4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80027e6:	4b04      	ldr	r3, [pc, #16]	@ (80027f8 <ft5336_TS_DetectTouch+0x50>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	b2db      	uxtb	r3, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	200006b0 	.word	0x200006b0

080027fc <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8002812:	2300      	movs	r3, #0
 8002814:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800281e:	4b6d      	ldr	r3, [pc, #436]	@ (80029d4 <ft5336_TS_GetXY+0x1d8>)
 8002820:	789a      	ldrb	r2, [r3, #2]
 8002822:	4b6c      	ldr	r3, [pc, #432]	@ (80029d4 <ft5336_TS_GetXY+0x1d8>)
 8002824:	785b      	ldrb	r3, [r3, #1]
 8002826:	429a      	cmp	r2, r3
 8002828:	f080 80cf 	bcs.w	80029ca <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800282c:	4b69      	ldr	r3, [pc, #420]	@ (80029d4 <ft5336_TS_GetXY+0x1d8>)
 800282e:	789b      	ldrb	r3, [r3, #2]
 8002830:	2b09      	cmp	r3, #9
 8002832:	d871      	bhi.n	8002918 <ft5336_TS_GetXY+0x11c>
 8002834:	a201      	add	r2, pc, #4	@ (adr r2, 800283c <ft5336_TS_GetXY+0x40>)
 8002836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283a:	bf00      	nop
 800283c:	08002865 	.word	0x08002865
 8002840:	08002877 	.word	0x08002877
 8002844:	08002889 	.word	0x08002889
 8002848:	0800289b 	.word	0x0800289b
 800284c:	080028ad 	.word	0x080028ad
 8002850:	080028bf 	.word	0x080028bf
 8002854:	080028d1 	.word	0x080028d1
 8002858:	080028e3 	.word	0x080028e3
 800285c:	080028f5 	.word	0x080028f5
 8002860:	08002907 	.word	0x08002907
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8002864:	2304      	movs	r3, #4
 8002866:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8002868:	2303      	movs	r3, #3
 800286a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800286c:	2306      	movs	r3, #6
 800286e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8002870:	2305      	movs	r3, #5
 8002872:	753b      	strb	r3, [r7, #20]
      break;
 8002874:	e051      	b.n	800291a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8002876:	230a      	movs	r3, #10
 8002878:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800287a:	2309      	movs	r3, #9
 800287c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800287e:	230c      	movs	r3, #12
 8002880:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8002882:	230b      	movs	r3, #11
 8002884:	753b      	strb	r3, [r7, #20]
      break;
 8002886:	e048      	b.n	800291a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8002888:	2310      	movs	r3, #16
 800288a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 800288c:	230f      	movs	r3, #15
 800288e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8002890:	2312      	movs	r3, #18
 8002892:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8002894:	2311      	movs	r3, #17
 8002896:	753b      	strb	r3, [r7, #20]
      break;
 8002898:	e03f      	b.n	800291a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800289a:	2316      	movs	r3, #22
 800289c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 800289e:	2315      	movs	r3, #21
 80028a0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80028a2:	2318      	movs	r3, #24
 80028a4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80028a6:	2317      	movs	r3, #23
 80028a8:	753b      	strb	r3, [r7, #20]
      break;
 80028aa:	e036      	b.n	800291a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80028ac:	231c      	movs	r3, #28
 80028ae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80028b0:	231b      	movs	r3, #27
 80028b2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80028b4:	231e      	movs	r3, #30
 80028b6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80028b8:	231d      	movs	r3, #29
 80028ba:	753b      	strb	r3, [r7, #20]
      break;
 80028bc:	e02d      	b.n	800291a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80028be:	2322      	movs	r3, #34	@ 0x22
 80028c0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80028c2:	2321      	movs	r3, #33	@ 0x21
 80028c4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80028c6:	2324      	movs	r3, #36	@ 0x24
 80028c8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80028ca:	2323      	movs	r3, #35	@ 0x23
 80028cc:	753b      	strb	r3, [r7, #20]
      break;
 80028ce:	e024      	b.n	800291a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80028d0:	2328      	movs	r3, #40	@ 0x28
 80028d2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80028d4:	2327      	movs	r3, #39	@ 0x27
 80028d6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80028d8:	232a      	movs	r3, #42	@ 0x2a
 80028da:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80028dc:	2329      	movs	r3, #41	@ 0x29
 80028de:	753b      	strb	r3, [r7, #20]
      break;
 80028e0:	e01b      	b.n	800291a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80028e2:	232e      	movs	r3, #46	@ 0x2e
 80028e4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80028e6:	232d      	movs	r3, #45	@ 0x2d
 80028e8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80028ea:	2330      	movs	r3, #48	@ 0x30
 80028ec:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80028ee:	232f      	movs	r3, #47	@ 0x2f
 80028f0:	753b      	strb	r3, [r7, #20]
      break;
 80028f2:	e012      	b.n	800291a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80028f4:	2334      	movs	r3, #52	@ 0x34
 80028f6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80028f8:	2333      	movs	r3, #51	@ 0x33
 80028fa:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80028fc:	2336      	movs	r3, #54	@ 0x36
 80028fe:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8002900:	2335      	movs	r3, #53	@ 0x35
 8002902:	753b      	strb	r3, [r7, #20]
      break;
 8002904:	e009      	b.n	800291a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8002906:	233a      	movs	r3, #58	@ 0x3a
 8002908:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800290a:	2339      	movs	r3, #57	@ 0x39
 800290c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800290e:	233c      	movs	r3, #60	@ 0x3c
 8002910:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8002912:	233b      	movs	r3, #59	@ 0x3b
 8002914:	753b      	strb	r3, [r7, #20]
      break;
 8002916:	e000      	b.n	800291a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8002918:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800291a:	89fb      	ldrh	r3, [r7, #14]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	7dfa      	ldrb	r2, [r7, #23]
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f001 fbd0 	bl	80040c8 <TS_IO_Read>
 8002928:	4603      	mov	r3, r0
 800292a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800292c:	7cfb      	ldrb	r3, [r7, #19]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	461a      	mov	r2, r3
 8002932:	4b29      	ldr	r3, [pc, #164]	@ (80029d8 <ft5336_TS_GetXY+0x1dc>)
 8002934:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8002936:	89fb      	ldrh	r3, [r7, #14]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	7dba      	ldrb	r2, [r7, #22]
 800293c:	4611      	mov	r1, r2
 800293e:	4618      	mov	r0, r3
 8002940:	f001 fbc2 	bl	80040c8 <TS_IO_Read>
 8002944:	4603      	mov	r3, r0
 8002946:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8002948:	7cfb      	ldrb	r3, [r7, #19]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002952:	b21a      	sxth	r2, r3
 8002954:	4b20      	ldr	r3, [pc, #128]	@ (80029d8 <ft5336_TS_GetXY+0x1dc>)
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	b21b      	sxth	r3, r3
 800295a:	4313      	orrs	r3, r2
 800295c:	b21b      	sxth	r3, r3
 800295e:	b29a      	uxth	r2, r3
 8002960:	4b1d      	ldr	r3, [pc, #116]	@ (80029d8 <ft5336_TS_GetXY+0x1dc>)
 8002962:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8002964:	4b1c      	ldr	r3, [pc, #112]	@ (80029d8 <ft5336_TS_GetXY+0x1dc>)
 8002966:	881a      	ldrh	r2, [r3, #0]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800296c:	89fb      	ldrh	r3, [r7, #14]
 800296e:	b2db      	uxtb	r3, r3
 8002970:	7d7a      	ldrb	r2, [r7, #21]
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f001 fba7 	bl	80040c8 <TS_IO_Read>
 800297a:	4603      	mov	r3, r0
 800297c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800297e:	7cfb      	ldrb	r3, [r7, #19]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	461a      	mov	r2, r3
 8002984:	4b14      	ldr	r3, [pc, #80]	@ (80029d8 <ft5336_TS_GetXY+0x1dc>)
 8002986:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8002988:	89fb      	ldrh	r3, [r7, #14]
 800298a:	b2db      	uxtb	r3, r3
 800298c:	7d3a      	ldrb	r2, [r7, #20]
 800298e:	4611      	mov	r1, r2
 8002990:	4618      	mov	r0, r3
 8002992:	f001 fb99 	bl	80040c8 <TS_IO_Read>
 8002996:	4603      	mov	r3, r0
 8002998:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800299a:	7cfb      	ldrb	r3, [r7, #19]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80029a4:	b21a      	sxth	r2, r3
 80029a6:	4b0c      	ldr	r3, [pc, #48]	@ (80029d8 <ft5336_TS_GetXY+0x1dc>)
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	b21b      	sxth	r3, r3
 80029ac:	4313      	orrs	r3, r2
 80029ae:	b21b      	sxth	r3, r3
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	4b09      	ldr	r3, [pc, #36]	@ (80029d8 <ft5336_TS_GetXY+0x1dc>)
 80029b4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80029b6:	4b08      	ldr	r3, [pc, #32]	@ (80029d8 <ft5336_TS_GetXY+0x1dc>)
 80029b8:	881a      	ldrh	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80029be:	4b05      	ldr	r3, [pc, #20]	@ (80029d4 <ft5336_TS_GetXY+0x1d8>)
 80029c0:	789b      	ldrb	r3, [r3, #2]
 80029c2:	3301      	adds	r3, #1
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	4b03      	ldr	r3, [pc, #12]	@ (80029d4 <ft5336_TS_GetXY+0x1d8>)
 80029c8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80029ca:	bf00      	nop
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	200006b0 	.word	0x200006b0
 80029d8:	200006b4 	.word	0x200006b4

080029dc <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80029ea:	2301      	movs	r3, #1
 80029ec:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80029ee:	88fb      	ldrh	r3, [r7, #6]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	7bfa      	ldrb	r2, [r7, #15]
 80029f4:	21a4      	movs	r1, #164	@ 0xa4
 80029f6:	4618      	mov	r0, r3
 80029f8:	f001 fb4c 	bl	8004094 <TS_IO_Write>
}
 80029fc:	bf00      	nop
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8002a12:	2300      	movs	r3, #0
 8002a14:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8002a16:	88fb      	ldrh	r3, [r7, #6]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	7bfa      	ldrb	r2, [r7, #15]
 8002a1c:	21a4      	movs	r1, #164	@ 0xa4
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f001 fb38 	bl	8004094 <TS_IO_Write>
}
 8002a24:	bf00      	nop
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b084      	sub	sp, #16
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	4603      	mov	r3, r0
 8002a62:	6039      	str	r1, [r7, #0]
 8002a64:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8002a6a:	88fb      	ldrh	r3, [r7, #6]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2101      	movs	r1, #1
 8002a70:	4618      	mov	r0, r3
 8002a72:	f001 fb29 	bl	80040c8 <TS_IO_Read>
 8002a76:	4603      	mov	r3, r0
 8002a78:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	601a      	str	r2, [r3, #0]
}
 8002a84:	bf00      	nop
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	4603      	mov	r3, r0
 8002a9a:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8002aac:	4b4d      	ldr	r3, [pc, #308]	@ (8002be4 <ft5336_TS_GetTouchInfo+0x158>)
 8002aae:	785b      	ldrb	r3, [r3, #1]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	f080 8090 	bcs.w	8002bda <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b09      	cmp	r3, #9
 8002abe:	d85d      	bhi.n	8002b7c <ft5336_TS_GetTouchInfo+0xf0>
 8002ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ac8 <ft5336_TS_GetTouchInfo+0x3c>)
 8002ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac6:	bf00      	nop
 8002ac8:	08002af1 	.word	0x08002af1
 8002acc:	08002aff 	.word	0x08002aff
 8002ad0:	08002b0d 	.word	0x08002b0d
 8002ad4:	08002b1b 	.word	0x08002b1b
 8002ad8:	08002b29 	.word	0x08002b29
 8002adc:	08002b37 	.word	0x08002b37
 8002ae0:	08002b45 	.word	0x08002b45
 8002ae4:	08002b53 	.word	0x08002b53
 8002ae8:	08002b61 	.word	0x08002b61
 8002aec:	08002b6f 	.word	0x08002b6f
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8002af0:	2303      	movs	r3, #3
 8002af2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8002af4:	2307      	movs	r3, #7
 8002af6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8002af8:	2308      	movs	r3, #8
 8002afa:	757b      	strb	r3, [r7, #21]
      break;
 8002afc:	e03f      	b.n	8002b7e <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8002afe:	2309      	movs	r3, #9
 8002b00:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8002b02:	230d      	movs	r3, #13
 8002b04:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8002b06:	230e      	movs	r3, #14
 8002b08:	757b      	strb	r3, [r7, #21]
      break;
 8002b0a:	e038      	b.n	8002b7e <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8002b0c:	230f      	movs	r3, #15
 8002b0e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8002b10:	2313      	movs	r3, #19
 8002b12:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8002b14:	2314      	movs	r3, #20
 8002b16:	757b      	strb	r3, [r7, #21]
      break;
 8002b18:	e031      	b.n	8002b7e <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8002b1a:	2315      	movs	r3, #21
 8002b1c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8002b1e:	2319      	movs	r3, #25
 8002b20:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8002b22:	231a      	movs	r3, #26
 8002b24:	757b      	strb	r3, [r7, #21]
      break;
 8002b26:	e02a      	b.n	8002b7e <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8002b28:	231b      	movs	r3, #27
 8002b2a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8002b2c:	231f      	movs	r3, #31
 8002b2e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8002b30:	2320      	movs	r3, #32
 8002b32:	757b      	strb	r3, [r7, #21]
      break;
 8002b34:	e023      	b.n	8002b7e <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8002b36:	2321      	movs	r3, #33	@ 0x21
 8002b38:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8002b3a:	2325      	movs	r3, #37	@ 0x25
 8002b3c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8002b3e:	2326      	movs	r3, #38	@ 0x26
 8002b40:	757b      	strb	r3, [r7, #21]
      break;
 8002b42:	e01c      	b.n	8002b7e <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8002b44:	2327      	movs	r3, #39	@ 0x27
 8002b46:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8002b48:	232b      	movs	r3, #43	@ 0x2b
 8002b4a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8002b4c:	232c      	movs	r3, #44	@ 0x2c
 8002b4e:	757b      	strb	r3, [r7, #21]
      break;
 8002b50:	e015      	b.n	8002b7e <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8002b52:	232d      	movs	r3, #45	@ 0x2d
 8002b54:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8002b56:	2331      	movs	r3, #49	@ 0x31
 8002b58:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8002b5a:	2332      	movs	r3, #50	@ 0x32
 8002b5c:	757b      	strb	r3, [r7, #21]
      break;
 8002b5e:	e00e      	b.n	8002b7e <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8002b60:	2333      	movs	r3, #51	@ 0x33
 8002b62:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8002b64:	2337      	movs	r3, #55	@ 0x37
 8002b66:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8002b68:	2338      	movs	r3, #56	@ 0x38
 8002b6a:	757b      	strb	r3, [r7, #21]
      break;
 8002b6c:	e007      	b.n	8002b7e <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8002b6e:	2339      	movs	r3, #57	@ 0x39
 8002b70:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8002b72:	233d      	movs	r3, #61	@ 0x3d
 8002b74:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8002b76:	233e      	movs	r3, #62	@ 0x3e
 8002b78:	757b      	strb	r3, [r7, #21]
      break;
 8002b7a:	e000      	b.n	8002b7e <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8002b7c:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8002b7e:	89fb      	ldrh	r3, [r7, #14]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	7dfa      	ldrb	r2, [r7, #23]
 8002b84:	4611      	mov	r1, r2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f001 fa9e 	bl	80040c8 <TS_IO_Read>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8002b90:	7d3b      	ldrb	r3, [r7, #20]
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	119b      	asrs	r3, r3, #6
 8002b96:	f003 0203 	and.w	r2, r3, #3
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8002b9e:	89fb      	ldrh	r3, [r7, #14]
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	7dba      	ldrb	r2, [r7, #22]
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f001 fa8e 	bl	80040c8 <TS_IO_Read>
 8002bac:	4603      	mov	r3, r0
 8002bae:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8002bb0:	7d3b      	ldrb	r3, [r7, #20]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8002bba:	89fb      	ldrh	r3, [r7, #14]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	7d7a      	ldrb	r2, [r7, #21]
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f001 fa80 	bl	80040c8 <TS_IO_Read>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8002bcc:	7d3b      	ldrb	r3, [r7, #20]
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	111b      	asrs	r3, r3, #4
 8002bd2:	f003 0204 	and.w	r2, r3, #4
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8002bda:	bf00      	nop
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	200006b0 	.word	0x200006b0

08002be8 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8002bec:	4b03      	ldr	r3, [pc, #12]	@ (8002bfc <ft5336_Get_I2C_InitializedStatus+0x14>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	200006b0 	.word	0x200006b0

08002c00 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8002c04:	f7ff fff0 	bl	8002be8 <ft5336_Get_I2C_InitializedStatus>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d104      	bne.n	8002c18 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8002c0e:	f001 fa37 	bl	8004080 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8002c12:	4b02      	ldr	r3, [pc, #8]	@ (8002c1c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8002c14:	2201      	movs	r2, #1
 8002c16:	701a      	strb	r2, [r3, #0]
  }
}
 8002c18:	bf00      	nop
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	200006b0 	.word	0x200006b0

08002c20 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b090      	sub	sp, #64	@ 0x40
 8002c40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	605a      	str	r2, [r3, #4]
 8002c4c:	609a      	str	r2, [r3, #8]
 8002c4e:	60da      	str	r2, [r3, #12]
 8002c50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c52:	4baf      	ldr	r3, [pc, #700]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	4aae      	ldr	r2, [pc, #696]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002c58:	f043 0310 	orr.w	r3, r3, #16
 8002c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c5e:	4bac      	ldr	r3, [pc, #688]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c6a:	4ba9      	ldr	r3, [pc, #676]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6e:	4aa8      	ldr	r2, [pc, #672]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002c70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c76:	4ba6      	ldr	r3, [pc, #664]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c82:	4ba3      	ldr	r3, [pc, #652]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c86:	4aa2      	ldr	r2, [pc, #648]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002c88:	f043 0302 	orr.w	r3, r3, #2
 8002c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c8e:	4ba0      	ldr	r3, [pc, #640]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	623b      	str	r3, [r7, #32]
 8002c98:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c9a:	4b9d      	ldr	r3, [pc, #628]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9e:	4a9c      	ldr	r2, [pc, #624]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002ca0:	f043 0308 	orr.w	r3, r3, #8
 8002ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ca6:	4b9a      	ldr	r3, [pc, #616]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	61fb      	str	r3, [r7, #28]
 8002cb0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cb2:	4b97      	ldr	r3, [pc, #604]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb6:	4a96      	ldr	r2, [pc, #600]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002cb8:	f043 0304 	orr.w	r3, r3, #4
 8002cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cbe:	4b94      	ldr	r3, [pc, #592]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	61bb      	str	r3, [r7, #24]
 8002cc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cca:	4b91      	ldr	r3, [pc, #580]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cce:	4a90      	ldr	r2, [pc, #576]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cd6:	4b8e      	ldr	r3, [pc, #568]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002ce2:	4b8b      	ldr	r3, [pc, #556]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce6:	4a8a      	ldr	r2, [pc, #552]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002ce8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cee:	4b88      	ldr	r3, [pc, #544]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002cfa:	4b85      	ldr	r3, [pc, #532]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfe:	4a84      	ldr	r2, [pc, #528]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d06:	4b82      	ldr	r3, [pc, #520]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002d12:	4b7f      	ldr	r3, [pc, #508]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d16:	4a7e      	ldr	r2, [pc, #504]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002d18:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d1e:	4b7c      	ldr	r3, [pc, #496]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d2a:	4b79      	ldr	r3, [pc, #484]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2e:	4a78      	ldr	r2, [pc, #480]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002d30:	f043 0320 	orr.w	r3, r3, #32
 8002d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d36:	4b76      	ldr	r3, [pc, #472]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	607b      	str	r3, [r7, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d42:	4b73      	ldr	r3, [pc, #460]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d46:	4a72      	ldr	r2, [pc, #456]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d4e:	4b70      	ldr	r3, [pc, #448]	@ (8002f10 <MX_GPIO_Init+0x2d4>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2160      	movs	r1, #96	@ 0x60
 8002d5e:	486d      	ldr	r0, [pc, #436]	@ (8002f14 <MX_GPIO_Init+0x2d8>)
 8002d60:	f006 ff3c 	bl	8009bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002d64:	2201      	movs	r2, #1
 8002d66:	2120      	movs	r1, #32
 8002d68:	486b      	ldr	r0, [pc, #428]	@ (8002f18 <MX_GPIO_Init+0x2dc>)
 8002d6a:	f006 ff37 	bl	8009bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2108      	movs	r1, #8
 8002d72:	4869      	ldr	r0, [pc, #420]	@ (8002f18 <MX_GPIO_Init+0x2dc>)
 8002d74:	f006 ff32 	bl	8009bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002d78:	2201      	movs	r2, #1
 8002d7a:	2108      	movs	r1, #8
 8002d7c:	4867      	ldr	r0, [pc, #412]	@ (8002f1c <MX_GPIO_Init+0x2e0>)
 8002d7e:	f006 ff2d 	bl	8009bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002d82:	2201      	movs	r2, #1
 8002d84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d88:	4865      	ldr	r0, [pc, #404]	@ (8002f20 <MX_GPIO_Init+0x2e4>)
 8002d8a:	f006 ff27 	bl	8009bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f645 6140 	movw	r1, #24128	@ 0x5e40
 8002d94:	4863      	ldr	r0, [pc, #396]	@ (8002f24 <MX_GPIO_Init+0x2e8>)
 8002d96:	f006 ff21 	bl	8009bdc <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	21c8      	movs	r1, #200	@ 0xc8
 8002d9e:	4862      	ldr	r0, [pc, #392]	@ (8002f28 <MX_GPIO_Init+0x2ec>)
 8002da0:	f006 ff1c 	bl	8009bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002da4:	2308      	movs	r3, #8
 8002da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002da8:	2300      	movs	r3, #0
 8002daa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002db0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002db4:	4619      	mov	r1, r3
 8002db6:	4857      	ldr	r0, [pc, #348]	@ (8002f14 <MX_GPIO_Init+0x2d8>)
 8002db8:	f006 fc40 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002dcc:	2309      	movs	r3, #9
 8002dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002dd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	484f      	ldr	r0, [pc, #316]	@ (8002f14 <MX_GPIO_Init+0x2d8>)
 8002dd8:	f006 fc30 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002ddc:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8002de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de2:	2302      	movs	r3, #2
 8002de4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dea:	2303      	movs	r3, #3
 8002dec:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002dee:	230b      	movs	r3, #11
 8002df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002df2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002df6:	4619      	mov	r1, r3
 8002df8:	484b      	ldr	r0, [pc, #300]	@ (8002f28 <MX_GPIO_Init+0x2ec>)
 8002dfa:	f006 fc1f 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002dfe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e04:	2312      	movs	r3, #18
 8002e06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e10:	2304      	movs	r3, #4
 8002e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4844      	ldr	r0, [pc, #272]	@ (8002f2c <MX_GPIO_Init+0x2f0>)
 8002e1c:	f006 fc0e 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8002e20:	f643 0323 	movw	r3, #14371	@ 0x3823
 8002e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e26:	2302      	movs	r3, #2
 8002e28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002e32:	230a      	movs	r3, #10
 8002e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	483b      	ldr	r0, [pc, #236]	@ (8002f2c <MX_GPIO_Init+0x2f0>)
 8002e3e:	f006 fbfd 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002e42:	2380      	movs	r3, #128	@ 0x80
 8002e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002e52:	2308      	movs	r3, #8
 8002e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002e56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	482e      	ldr	r0, [pc, #184]	@ (8002f18 <MX_GPIO_Init+0x2dc>)
 8002e5e:	f006 fbed 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 8002e62:	f248 1340 	movw	r3, #33088	@ 0x8140
 8002e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e74:	4619      	mov	r1, r3
 8002e76:	482e      	ldr	r0, [pc, #184]	@ (8002f30 <MX_GPIO_Init+0x2f4>)
 8002e78:	f006 fbe0 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8002e7c:	2360      	movs	r3, #96	@ 0x60
 8002e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e80:	2301      	movs	r3, #1
 8002e82:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e90:	4619      	mov	r1, r3
 8002e92:	4820      	ldr	r0, [pc, #128]	@ (8002f14 <MX_GPIO_Init+0x2d8>)
 8002e94:	f006 fbd2 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002e98:	2340      	movs	r3, #64	@ 0x40
 8002e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002ea8:	230a      	movs	r3, #10
 8002eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002eac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	481e      	ldr	r0, [pc, #120]	@ (8002f2c <MX_GPIO_Init+0x2f0>)
 8002eb4:	f006 fbc2 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002eb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002ec6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4819      	ldr	r0, [pc, #100]	@ (8002f34 <MX_GPIO_Init+0x2f8>)
 8002ece:	f006 fbb5 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002ed2:	2340      	movs	r3, #64	@ 0x40
 8002ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002ed6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002eda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002edc:	2300      	movs	r3, #0
 8002ede:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002ee0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	480c      	ldr	r0, [pc, #48]	@ (8002f18 <MX_GPIO_Init+0x2dc>)
 8002ee8:	f006 fba8 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8002eec:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efa:	2303      	movs	r3, #3
 8002efc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002efe:	230a      	movs	r3, #10
 8002f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f06:	4619      	mov	r1, r3
 8002f08:	4809      	ldr	r0, [pc, #36]	@ (8002f30 <MX_GPIO_Init+0x2f4>)
 8002f0a:	f006 fb97 	bl	800963c <HAL_GPIO_Init>
 8002f0e:	e013      	b.n	8002f38 <MX_GPIO_Init+0x2fc>
 8002f10:	40023800 	.word	0x40023800
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40020c00 	.word	0x40020c00
 8002f1c:	40022800 	.word	0x40022800
 8002f20:	40022000 	.word	0x40022000
 8002f24:	40021c00 	.word	0x40021c00
 8002f28:	40021800 	.word	0x40021800
 8002f2c:	40020400 	.word	0x40020400
 8002f30:	40020000 	.word	0x40020000
 8002f34:	40022400 	.word	0x40022400

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8002f38:	2328      	movs	r3, #40	@ 0x28
 8002f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f44:	2300      	movs	r3, #0
 8002f46:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	48b0      	ldr	r0, [pc, #704]	@ (8003210 <MX_GPIO_Init+0x5d4>)
 8002f50:	f006 fb74 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pin : PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f54:	2304      	movs	r3, #4
 8002f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f60:	2300      	movs	r3, #0
 8002f62:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002f64:	2303      	movs	r3, #3
 8002f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002f68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	48a9      	ldr	r0, [pc, #676]	@ (8003214 <MX_GPIO_Init+0x5d8>)
 8002f70:	f006 fb64 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002f74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002f82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f86:	4619      	mov	r1, r3
 8002f88:	48a3      	ldr	r0, [pc, #652]	@ (8003218 <MX_GPIO_Init+0x5dc>)
 8002f8a:	f006 fb57 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002f8e:	2308      	movs	r3, #8
 8002f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f92:	2301      	movs	r3, #1
 8002f94:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002f9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	489d      	ldr	r0, [pc, #628]	@ (800321c <MX_GPIO_Init+0x5e0>)
 8002fa6:	f006 fb49 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8002faa:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4898      	ldr	r0, [pc, #608]	@ (8003220 <MX_GPIO_Init+0x5e4>)
 8002fc0:	f006 fb3c 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002fc4:	2310      	movs	r3, #16
 8002fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002fd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	488e      	ldr	r0, [pc, #568]	@ (8003210 <MX_GPIO_Init+0x5d4>)
 8002fd8:	f006 fb30 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PH13 PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8002fdc:	f24a 0304 	movw	r3, #40964	@ 0xa004
 8002fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002fea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fee:	4619      	mov	r1, r3
 8002ff0:	488c      	ldr	r0, [pc, #560]	@ (8003224 <MX_GPIO_Init+0x5e8>)
 8002ff2:	f006 fb23 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003002:	2303      	movs	r3, #3
 8003004:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003006:	2305      	movs	r3, #5
 8003008:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800300a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800300e:	4619      	mov	r1, r3
 8003010:	4880      	ldr	r0, [pc, #512]	@ (8003214 <MX_GPIO_Init+0x5d8>)
 8003012:	f006 fb13 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8003016:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800301a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800301c:	2301      	movs	r3, #1
 800301e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003020:	2300      	movs	r3, #0
 8003022:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003024:	2300      	movs	r3, #0
 8003026:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8003028:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800302c:	4619      	mov	r1, r3
 800302e:	4879      	ldr	r0, [pc, #484]	@ (8003214 <MX_GPIO_Init+0x5d8>)
 8003030:	f006 fb04 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8003034:	f645 6340 	movw	r3, #24128	@ 0x5e40
 8003038:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800303a:	2301      	movs	r3, #1
 800303c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303e:	2300      	movs	r3, #0
 8003040:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003042:	2300      	movs	r3, #0
 8003044:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003046:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800304a:	4619      	mov	r1, r3
 800304c:	4875      	ldr	r0, [pc, #468]	@ (8003224 <MX_GPIO_Init+0x5e8>)
 800304e:	f006 faf5 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8003052:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003058:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800305c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8003062:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003066:	4619      	mov	r1, r3
 8003068:	486a      	ldr	r0, [pc, #424]	@ (8003214 <MX_GPIO_Init+0x5d8>)
 800306a:	f006 fae7 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800306e:	23c0      	movs	r3, #192	@ 0xc0
 8003070:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003072:	2302      	movs	r3, #2
 8003074:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003076:	2300      	movs	r3, #0
 8003078:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800307a:	2303      	movs	r3, #3
 800307c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800307e:	2308      	movs	r3, #8
 8003080:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003082:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003086:	4619      	mov	r1, r3
 8003088:	4863      	ldr	r0, [pc, #396]	@ (8003218 <MX_GPIO_Init+0x5dc>)
 800308a:	f006 fad7 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800308e:	2310      	movs	r3, #16
 8003090:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003092:	2302      	movs	r3, #2
 8003094:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003096:	2300      	movs	r3, #0
 8003098:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800309a:	2303      	movs	r3, #3
 800309c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800309e:	230a      	movs	r3, #10
 80030a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80030a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030a6:	4619      	mov	r1, r3
 80030a8:	485e      	ldr	r0, [pc, #376]	@ (8003224 <MX_GPIO_Init+0x5e8>)
 80030aa:	f006 fac7 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80030ae:	23c8      	movs	r3, #200	@ 0xc8
 80030b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030b2:	2301      	movs	r3, #1
 80030b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ba:	2300      	movs	r3, #0
 80030bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030c2:	4619      	mov	r1, r3
 80030c4:	4856      	ldr	r0, [pc, #344]	@ (8003220 <MX_GPIO_Init+0x5e4>)
 80030c6:	f006 fab9 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80030ca:	23c0      	movs	r3, #192	@ 0xc0
 80030cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ce:	2302      	movs	r3, #2
 80030d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d6:	2303      	movs	r3, #3
 80030d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80030da:	2308      	movs	r3, #8
 80030dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80030de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030e2:	4619      	mov	r1, r3
 80030e4:	4850      	ldr	r0, [pc, #320]	@ (8003228 <MX_GPIO_Init+0x5ec>)
 80030e6:	f006 faa9 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80030ea:	2305      	movs	r3, #5
 80030ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ee:	2302      	movs	r3, #2
 80030f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f6:	2303      	movs	r3, #3
 80030f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80030fa:	230a      	movs	r3, #10
 80030fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003102:	4619      	mov	r1, r3
 8003104:	4844      	ldr	r0, [pc, #272]	@ (8003218 <MX_GPIO_Init+0x5dc>)
 8003106:	f006 fa99 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800310a:	2332      	movs	r3, #50	@ 0x32
 800310c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310e:	2302      	movs	r3, #2
 8003110:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003112:	2300      	movs	r3, #0
 8003114:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003116:	2303      	movs	r3, #3
 8003118:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800311a:	230b      	movs	r3, #11
 800311c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800311e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003122:	4619      	mov	r1, r3
 8003124:	483c      	ldr	r0, [pc, #240]	@ (8003218 <MX_GPIO_Init+0x5dc>)
 8003126:	f006 fa89 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800312a:	2304      	movs	r3, #4
 800312c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312e:	2302      	movs	r3, #2
 8003130:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003132:	2300      	movs	r3, #0
 8003134:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003136:	2303      	movs	r3, #3
 8003138:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800313a:	2309      	movs	r3, #9
 800313c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800313e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003142:	4619      	mov	r1, r3
 8003144:	4839      	ldr	r0, [pc, #228]	@ (800322c <MX_GPIO_Init+0x5f0>)
 8003146:	f006 fa79 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800314a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800314e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003150:	2302      	movs	r3, #2
 8003152:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003154:	2300      	movs	r3, #0
 8003156:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003158:	2303      	movs	r3, #3
 800315a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800315c:	2309      	movs	r3, #9
 800315e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003160:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003164:	4619      	mov	r1, r3
 8003166:	482a      	ldr	r0, [pc, #168]	@ (8003210 <MX_GPIO_Init+0x5d4>)
 8003168:	f006 fa68 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800316c:	2386      	movs	r3, #134	@ 0x86
 800316e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003170:	2302      	movs	r3, #2
 8003172:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003178:	2303      	movs	r3, #3
 800317a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800317c:	230b      	movs	r3, #11
 800317e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003180:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003184:	4619      	mov	r1, r3
 8003186:	482a      	ldr	r0, [pc, #168]	@ (8003230 <MX_GPIO_Init+0x5f4>)
 8003188:	f006 fa58 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800318c:	2310      	movs	r3, #16
 800318e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003190:	2303      	movs	r3, #3
 8003192:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003194:	2300      	movs	r3, #0
 8003196:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003198:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800319c:	4619      	mov	r1, r3
 800319e:	4824      	ldr	r0, [pc, #144]	@ (8003230 <MX_GPIO_Init+0x5f4>)
 80031a0:	f006 fa4c 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80031a4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80031a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031aa:	2312      	movs	r3, #18
 80031ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031ae:	2301      	movs	r3, #1
 80031b0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b2:	2303      	movs	r3, #3
 80031b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80031b6:	2304      	movs	r3, #4
 80031b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80031ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80031be:	4619      	mov	r1, r3
 80031c0:	4818      	ldr	r0, [pc, #96]	@ (8003224 <MX_GPIO_Init+0x5e8>)
 80031c2:	f006 fa3b 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80031c6:	2328      	movs	r3, #40	@ 0x28
 80031c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ca:	2302      	movs	r3, #2
 80031cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d2:	2303      	movs	r3, #3
 80031d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80031d6:	230a      	movs	r3, #10
 80031d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80031de:	4619      	mov	r1, r3
 80031e0:	4813      	ldr	r0, [pc, #76]	@ (8003230 <MX_GPIO_Init+0x5f4>)
 80031e2:	f006 fa2b 	bl	800963c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80031e6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80031ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ec:	2302      	movs	r3, #2
 80031ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f4:	2300      	movs	r3, #0
 80031f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031f8:	2305      	movs	r3, #5
 80031fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003200:	4619      	mov	r1, r3
 8003202:	480a      	ldr	r0, [pc, #40]	@ (800322c <MX_GPIO_Init+0x5f0>)
 8003204:	f006 fa1a 	bl	800963c <HAL_GPIO_Init>

}
 8003208:	bf00      	nop
 800320a:	3740      	adds	r7, #64	@ 0x40
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40020c00 	.word	0x40020c00
 8003214:	40022000 	.word	0x40022000
 8003218:	40020800 	.word	0x40020800
 800321c:	40022800 	.word	0x40022800
 8003220:	40021800 	.word	0x40021800
 8003224:	40021c00 	.word	0x40021c00
 8003228:	40021400 	.word	0x40021400
 800322c:	40020400 	.word	0x40020400
 8003230:	40020000 	.word	0x40020000

08003234 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08e      	sub	sp, #56	@ 0x38
 8003238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800323a:	1d3b      	adds	r3, r7, #4
 800323c:	2234      	movs	r2, #52	@ 0x34
 800323e:	2100      	movs	r1, #0
 8003240:	4618      	mov	r0, r3
 8003242:	f012 f9de 	bl	8015602 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8003246:	4b3a      	ldr	r3, [pc, #232]	@ (8003330 <MX_LTDC_Init+0xfc>)
 8003248:	4a3a      	ldr	r2, [pc, #232]	@ (8003334 <MX_LTDC_Init+0x100>)
 800324a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800324c:	4b38      	ldr	r3, [pc, #224]	@ (8003330 <MX_LTDC_Init+0xfc>)
 800324e:	2200      	movs	r2, #0
 8003250:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003252:	4b37      	ldr	r3, [pc, #220]	@ (8003330 <MX_LTDC_Init+0xfc>)
 8003254:	2200      	movs	r2, #0
 8003256:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003258:	4b35      	ldr	r3, [pc, #212]	@ (8003330 <MX_LTDC_Init+0xfc>)
 800325a:	2200      	movs	r2, #0
 800325c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800325e:	4b34      	ldr	r3, [pc, #208]	@ (8003330 <MX_LTDC_Init+0xfc>)
 8003260:	2200      	movs	r2, #0
 8003262:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8003264:	4b32      	ldr	r3, [pc, #200]	@ (8003330 <MX_LTDC_Init+0xfc>)
 8003266:	2228      	movs	r2, #40	@ 0x28
 8003268:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800326a:	4b31      	ldr	r3, [pc, #196]	@ (8003330 <MX_LTDC_Init+0xfc>)
 800326c:	2209      	movs	r2, #9
 800326e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8003270:	4b2f      	ldr	r3, [pc, #188]	@ (8003330 <MX_LTDC_Init+0xfc>)
 8003272:	2235      	movs	r2, #53	@ 0x35
 8003274:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8003276:	4b2e      	ldr	r3, [pc, #184]	@ (8003330 <MX_LTDC_Init+0xfc>)
 8003278:	220b      	movs	r2, #11
 800327a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800327c:	4b2c      	ldr	r3, [pc, #176]	@ (8003330 <MX_LTDC_Init+0xfc>)
 800327e:	f240 2215 	movw	r2, #533	@ 0x215
 8003282:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8003284:	4b2a      	ldr	r3, [pc, #168]	@ (8003330 <MX_LTDC_Init+0xfc>)
 8003286:	f240 121b 	movw	r2, #283	@ 0x11b
 800328a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 800328c:	4b28      	ldr	r3, [pc, #160]	@ (8003330 <MX_LTDC_Init+0xfc>)
 800328e:	f240 2235 	movw	r2, #565	@ 0x235
 8003292:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8003294:	4b26      	ldr	r3, [pc, #152]	@ (8003330 <MX_LTDC_Init+0xfc>)
 8003296:	f240 121d 	movw	r2, #285	@ 0x11d
 800329a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800329c:	4b24      	ldr	r3, [pc, #144]	@ (8003330 <MX_LTDC_Init+0xfc>)
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80032a4:	4b22      	ldr	r3, [pc, #136]	@ (8003330 <MX_LTDC_Init+0xfc>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80032ac:	4b20      	ldr	r3, [pc, #128]	@ (8003330 <MX_LTDC_Init+0xfc>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80032b4:	481e      	ldr	r0, [pc, #120]	@ (8003330 <MX_LTDC_Init+0xfc>)
 80032b6:	f007 fa55 	bl	800a764 <HAL_LTDC_Init>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80032c0:	f000 fa2c 	bl	800371c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80032c8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80032cc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80032d2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80032d6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80032d8:	2302      	movs	r3, #2
 80032da:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80032dc:	23ff      	movs	r3, #255	@ 0xff
 80032de:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80032e4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80032e8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80032ea:	2307      	movs	r3, #7
 80032ec:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80032ee:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80032f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 80032f4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80032f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 80032fa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80032fe:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8003306:	2300      	movs	r3, #0
 8003308:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800330c:	2300      	movs	r3, #0
 800330e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003312:	1d3b      	adds	r3, r7, #4
 8003314:	2200      	movs	r2, #0
 8003316:	4619      	mov	r1, r3
 8003318:	4805      	ldr	r0, [pc, #20]	@ (8003330 <MX_LTDC_Init+0xfc>)
 800331a:	f007 fbb5 	bl	800aa88 <HAL_LTDC_ConfigLayer>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8003324:	f000 f9fa 	bl	800371c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003328:	bf00      	nop
 800332a:	3738      	adds	r7, #56	@ 0x38
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	200006b8 	.word	0x200006b8
 8003334:	40016800 	.word	0x40016800

08003338 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08e      	sub	sp, #56	@ 0x38
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003340:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	605a      	str	r2, [r3, #4]
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	60da      	str	r2, [r3, #12]
 800334e:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a55      	ldr	r2, [pc, #340]	@ (80034ac <HAL_LTDC_MspInit+0x174>)
 8003356:	4293      	cmp	r3, r2
 8003358:	f040 80a3 	bne.w	80034a2 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800335c:	4b54      	ldr	r3, [pc, #336]	@ (80034b0 <HAL_LTDC_MspInit+0x178>)
 800335e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003360:	4a53      	ldr	r2, [pc, #332]	@ (80034b0 <HAL_LTDC_MspInit+0x178>)
 8003362:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003366:	6453      	str	r3, [r2, #68]	@ 0x44
 8003368:	4b51      	ldr	r3, [pc, #324]	@ (80034b0 <HAL_LTDC_MspInit+0x178>)
 800336a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003370:	623b      	str	r3, [r7, #32]
 8003372:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003374:	4b4e      	ldr	r3, [pc, #312]	@ (80034b0 <HAL_LTDC_MspInit+0x178>)
 8003376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003378:	4a4d      	ldr	r2, [pc, #308]	@ (80034b0 <HAL_LTDC_MspInit+0x178>)
 800337a:	f043 0310 	orr.w	r3, r3, #16
 800337e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003380:	4b4b      	ldr	r3, [pc, #300]	@ (80034b0 <HAL_LTDC_MspInit+0x178>)
 8003382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800338c:	4b48      	ldr	r3, [pc, #288]	@ (80034b0 <HAL_LTDC_MspInit+0x178>)
 800338e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003390:	4a47      	ldr	r2, [pc, #284]	@ (80034b0 <HAL_LTDC_MspInit+0x178>)
 8003392:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003396:	6313      	str	r3, [r2, #48]	@ 0x30
 8003398:	4b45      	ldr	r3, [pc, #276]	@ (80034b0 <HAL_LTDC_MspInit+0x178>)
 800339a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80033a4:	4b42      	ldr	r3, [pc, #264]	@ (80034b0 <HAL_LTDC_MspInit+0x178>)
 80033a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a8:	4a41      	ldr	r2, [pc, #260]	@ (80034b0 <HAL_LTDC_MspInit+0x178>)
 80033aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80033b0:	4b3f      	ldr	r3, [pc, #252]	@ (80034b0 <HAL_LTDC_MspInit+0x178>)
 80033b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80033bc:	4b3c      	ldr	r3, [pc, #240]	@ (80034b0 <HAL_LTDC_MspInit+0x178>)
 80033be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c0:	4a3b      	ldr	r2, [pc, #236]	@ (80034b0 <HAL_LTDC_MspInit+0x178>)
 80033c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80033c8:	4b39      	ldr	r3, [pc, #228]	@ (80034b0 <HAL_LTDC_MspInit+0x178>)
 80033ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80033d4:	4b36      	ldr	r3, [pc, #216]	@ (80034b0 <HAL_LTDC_MspInit+0x178>)
 80033d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d8:	4a35      	ldr	r2, [pc, #212]	@ (80034b0 <HAL_LTDC_MspInit+0x178>)
 80033da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033de:	6313      	str	r3, [r2, #48]	@ 0x30
 80033e0:	4b33      	ldr	r3, [pc, #204]	@ (80034b0 <HAL_LTDC_MspInit+0x178>)
 80033e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80033ec:	2310      	movs	r3, #16
 80033ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f0:	2302      	movs	r3, #2
 80033f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f8:	2300      	movs	r3, #0
 80033fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033fc:	230e      	movs	r3, #14
 80033fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003400:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003404:	4619      	mov	r1, r3
 8003406:	482b      	ldr	r0, [pc, #172]	@ (80034b4 <HAL_LTDC_MspInit+0x17c>)
 8003408:	f006 f918 	bl	800963c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800340c:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8003410:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003412:	2302      	movs	r3, #2
 8003414:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003416:	2300      	movs	r3, #0
 8003418:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341a:	2300      	movs	r3, #0
 800341c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800341e:	230e      	movs	r3, #14
 8003420:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003426:	4619      	mov	r1, r3
 8003428:	4823      	ldr	r0, [pc, #140]	@ (80034b8 <HAL_LTDC_MspInit+0x180>)
 800342a:	f006 f907 	bl	800963c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800342e:	23f7      	movs	r3, #247	@ 0xf7
 8003430:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003432:	2302      	movs	r3, #2
 8003434:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003436:	2300      	movs	r3, #0
 8003438:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343a:	2300      	movs	r3, #0
 800343c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800343e:	230e      	movs	r3, #14
 8003440:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003442:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003446:	4619      	mov	r1, r3
 8003448:	481c      	ldr	r0, [pc, #112]	@ (80034bc <HAL_LTDC_MspInit+0x184>)
 800344a:	f006 f8f7 	bl	800963c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800344e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003452:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003454:	2302      	movs	r3, #2
 8003456:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345c:	2300      	movs	r3, #0
 800345e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003460:	2309      	movs	r3, #9
 8003462:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003468:	4619      	mov	r1, r3
 800346a:	4815      	ldr	r0, [pc, #84]	@ (80034c0 <HAL_LTDC_MspInit+0x188>)
 800346c:	f006 f8e6 	bl	800963c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003470:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8003474:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003476:	2302      	movs	r3, #2
 8003478:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347a:	2300      	movs	r3, #0
 800347c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347e:	2300      	movs	r3, #0
 8003480:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003482:	230e      	movs	r3, #14
 8003484:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003486:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800348a:	4619      	mov	r1, r3
 800348c:	480d      	ldr	r0, [pc, #52]	@ (80034c4 <HAL_LTDC_MspInit+0x18c>)
 800348e:	f006 f8d5 	bl	800963c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003492:	2200      	movs	r2, #0
 8003494:	2105      	movs	r1, #5
 8003496:	2058      	movs	r0, #88	@ 0x58
 8003498:	f005 f928 	bl	80086ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800349c:	2058      	movs	r0, #88	@ 0x58
 800349e:	f005 f941 	bl	8008724 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80034a2:	bf00      	nop
 80034a4:	3738      	adds	r7, #56	@ 0x38
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40016800 	.word	0x40016800
 80034b0:	40023800 	.word	0x40023800
 80034b4:	40021000 	.word	0x40021000
 80034b8:	40022400 	.word	0x40022400
 80034bc:	40022800 	.word	0x40022800
 80034c0:	40021800 	.word	0x40021800
 80034c4:	40022000 	.word	0x40022000

080034c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80034cc:	4b16      	ldr	r3, [pc, #88]	@ (8003528 <main+0x60>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80034d2:	4b15      	ldr	r3, [pc, #84]	@ (8003528 <main+0x60>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034d8:	f004 fc05 	bl	8007ce6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034dc:	f000 f826 	bl	800352c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80034e0:	f000 f894 	bl	800360c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034e4:	f7ff fbaa 	bl	8002c3c <MX_GPIO_Init>
  MX_DMA_Init();
 80034e8:	f7fd fd5a 	bl	8000fa0 <MX_DMA_Init>
  MX_DMA2D_Init();
 80034ec:	f7fd fd8e 	bl	800100c <MX_DMA2D_Init>
  MX_FMC_Init();
 80034f0:	f7fd fde4 	bl	80010bc <MX_FMC_Init>
  MX_LTDC_Init();
 80034f4:	f7ff fe9e 	bl	8003234 <MX_LTDC_Init>
  MX_USART1_UART_Init();
 80034f8:	f002 feae 	bl	8006258 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80034fc:	f7fd fc3e 	bl	8000d7c <MX_ADC1_Init>
  MX_SAI2_Init();
 8003500:	f000 f912 	bl	8003728 <MX_SAI2_Init>
  MX_ADC3_Init();
 8003504:	f7fd fc8c 	bl	8000e20 <MX_ADC3_Init>
  MX_SDMMC1_SD_Init();
 8003508:	f000 faee 	bl	8003ae8 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800350c:	f00b ffc2 	bl	800f494 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  initDisplay();
 8003510:	f000 f8ae 	bl	8003670 <initDisplay>
  initSD();
 8003514:	f7ff f810 	bl	8002538 <initSD>
  loadSong();
 8003518:	f7ff f868 	bl	80025ec <loadSong>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800351c:	f7fd fed2 	bl	80012c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003520:	f00e fef7 	bl	8012312 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003524:	bf00      	nop
 8003526:	e7fd      	b.n	8003524 <main+0x5c>
 8003528:	20000760 	.word	0x20000760

0800352c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b094      	sub	sp, #80	@ 0x50
 8003530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003532:	f107 0320 	add.w	r3, r7, #32
 8003536:	2230      	movs	r2, #48	@ 0x30
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f012 f861 	bl	8015602 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003540:	f107 030c 	add.w	r3, r7, #12
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003550:	f007 fc80 	bl	800ae54 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003554:	4b2b      	ldr	r3, [pc, #172]	@ (8003604 <SystemClock_Config+0xd8>)
 8003556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003558:	4a2a      	ldr	r2, [pc, #168]	@ (8003604 <SystemClock_Config+0xd8>)
 800355a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800355e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003560:	4b28      	ldr	r3, [pc, #160]	@ (8003604 <SystemClock_Config+0xd8>)
 8003562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800356c:	4b26      	ldr	r3, [pc, #152]	@ (8003608 <SystemClock_Config+0xdc>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a25      	ldr	r2, [pc, #148]	@ (8003608 <SystemClock_Config+0xdc>)
 8003572:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	4b23      	ldr	r3, [pc, #140]	@ (8003608 <SystemClock_Config+0xdc>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003580:	607b      	str	r3, [r7, #4]
 8003582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003584:	2301      	movs	r3, #1
 8003586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003588:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800358c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800358e:	2302      	movs	r3, #2
 8003590:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003592:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003596:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003598:	2319      	movs	r3, #25
 800359a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 800359c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80035a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80035a2:	2302      	movs	r3, #2
 80035a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80035a6:	2309      	movs	r3, #9
 80035a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035aa:	f107 0320 	add.w	r3, r7, #32
 80035ae:	4618      	mov	r0, r3
 80035b0:	f007 fcb0 	bl	800af14 <HAL_RCC_OscConfig>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <SystemClock_Config+0x92>
  {
    Error_Handler();
 80035ba:	f000 f8af 	bl	800371c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80035be:	f007 fc59 	bl	800ae74 <HAL_PWREx_EnableOverDrive>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80035c8:	f000 f8a8 	bl	800371c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035cc:	230f      	movs	r3, #15
 80035ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035d0:	2302      	movs	r3, #2
 80035d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80035d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80035dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80035de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80035e4:	f107 030c 	add.w	r3, r7, #12
 80035e8:	2106      	movs	r1, #6
 80035ea:	4618      	mov	r0, r3
 80035ec:	f007 ff36 	bl	800b45c <HAL_RCC_ClockConfig>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <SystemClock_Config+0xce>
  {
    Error_Handler();
 80035f6:	f000 f891 	bl	800371c <Error_Handler>
  }
}
 80035fa:	bf00      	nop
 80035fc:	3750      	adds	r7, #80	@ 0x50
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40023800 	.word	0x40023800
 8003608:	40007000 	.word	0x40007000

0800360c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b0a2      	sub	sp, #136	@ 0x88
 8003610:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003612:	1d3b      	adds	r3, r7, #4
 8003614:	2284      	movs	r2, #132	@ 0x84
 8003616:	2100      	movs	r1, #0
 8003618:	4618      	mov	r0, r3
 800361a:	f011 fff2 	bl	8015602 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 800361e:	4b13      	ldr	r3, [pc, #76]	@ (800366c <PeriphCommonClock_Config+0x60>)
 8003620:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8003622:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003626:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8003628:	2305      	movs	r3, #5
 800362a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800362c:	2302      	movs	r3, #2
 800362e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8003630:	2303      	movs	r3, #3
 8003632:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003634:	2301      	movs	r3, #1
 8003636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003638:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800363c:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800363e:	2300      	movs	r3, #0
 8003640:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8003642:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003646:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800364a:	2300      	movs	r3, #0
 800364c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003650:	1d3b      	adds	r3, r7, #4
 8003652:	4618      	mov	r0, r3
 8003654:	f008 f91a 	bl	800b88c <HAL_RCCEx_PeriphCLKConfig>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800365e:	f000 f85d 	bl	800371c <Error_Handler>
  }
}
 8003662:	bf00      	nop
 8003664:	3788      	adds	r7, #136	@ 0x88
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	00b00008 	.word	0x00b00008

08003670 <initDisplay>:

/* USER CODE BEGIN 4 */
void initDisplay()
{
 8003670:	b598      	push	{r3, r4, r7, lr}
 8003672:	af00      	add	r7, sp, #0
  BSP_LCD_Init();
 8003674:	f001 f92a 	bl	80048cc <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8003678:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 800367c:	2000      	movs	r0, #0
 800367e:	f001 f9bd 	bl	80049fc <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8003682:	f001 f993 	bl	80049ac <BSP_LCD_GetXSize>
 8003686:	4604      	mov	r4, r0
 8003688:	f001 f9a4 	bl	80049d4 <BSP_LCD_GetYSize>
 800368c:	4603      	mov	r3, r0
 800368e:	fb04 f303 	mul.w	r3, r4, r3
 8003692:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4619      	mov	r1, r3
 800369a:	2001      	movs	r0, #1
 800369c:	f001 f9ae 	bl	80049fc <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 80036a0:	f001 fd6e 	bl	8005180 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 80036a4:	2000      	movs	r0, #0
 80036a6:	f001 fa09 	bl	8004abc <BSP_LCD_SelectLayer>
  BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 80036aa:	4810      	ldr	r0, [pc, #64]	@ (80036ec <initDisplay+0x7c>)
 80036ac:	f001 fa62 	bl	8004b74 <BSP_LCD_Clear>
  BSP_LCD_SelectLayer(1);
 80036b0:	2001      	movs	r0, #1
 80036b2:	f001 fa03 	bl	8004abc <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(00);
 80036b6:	2000      	movs	r0, #0
 80036b8:	f001 fa5c 	bl	8004b74 <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font16);
 80036bc:	480c      	ldr	r0, [pc, #48]	@ (80036f0 <initDisplay+0x80>)
 80036be:	f001 fa3f 	bl	8004b40 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 80036c2:	480c      	ldr	r0, [pc, #48]	@ (80036f4 <initDisplay+0x84>)
 80036c4:	f001 fa0a 	bl	8004adc <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(00);
 80036c8:	2000      	movs	r0, #0
 80036ca:	f001 fa1f 	bl	8004b0c <BSP_LCD_SetBackColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80036ce:	f001 f96d 	bl	80049ac <BSP_LCD_GetXSize>
 80036d2:	4603      	mov	r3, r0
 80036d4:	b29c      	uxth	r4, r3
 80036d6:	f001 f97d 	bl	80049d4 <BSP_LCD_GetYSize>
 80036da:	4603      	mov	r3, r0
 80036dc:	b29b      	uxth	r3, r3
 80036de:	4619      	mov	r1, r3
 80036e0:	4620      	mov	r0, r4
 80036e2:	f002 f95f 	bl	80059a4 <BSP_TS_Init>
}
 80036e6:	bf00      	nop
 80036e8:	bd98      	pop	{r3, r4, r7, pc}
 80036ea:	bf00      	nop
 80036ec:	ff81cd4b 	.word	0xff81cd4b
 80036f0:	20000040 	.word	0x20000040
 80036f4:	ffa52a2a 	.word	0xffa52a2a

080036f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a04      	ldr	r2, [pc, #16]	@ (8003718 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d101      	bne.n	800370e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800370a:	f004 faf9 	bl	8007d00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40001000 	.word	0x40001000

0800371c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003720:	b672      	cpsid	i
}
 8003722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003724:	bf00      	nop
 8003726:	e7fd      	b.n	8003724 <Error_Handler+0x8>

08003728 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 800372c:	4b4e      	ldr	r3, [pc, #312]	@ (8003868 <MX_SAI2_Init+0x140>)
 800372e:	4a4f      	ldr	r2, [pc, #316]	@ (800386c <MX_SAI2_Init+0x144>)
 8003730:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8003732:	4b4d      	ldr	r3, [pc, #308]	@ (8003868 <MX_SAI2_Init+0x140>)
 8003734:	2200      	movs	r2, #0
 8003736:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8003738:	4b4b      	ldr	r3, [pc, #300]	@ (8003868 <MX_SAI2_Init+0x140>)
 800373a:	2200      	movs	r2, #0
 800373c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800373e:	4b4a      	ldr	r3, [pc, #296]	@ (8003868 <MX_SAI2_Init+0x140>)
 8003740:	2240      	movs	r2, #64	@ 0x40
 8003742:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003744:	4b48      	ldr	r3, [pc, #288]	@ (8003868 <MX_SAI2_Init+0x140>)
 8003746:	2200      	movs	r2, #0
 8003748:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800374a:	4b47      	ldr	r3, [pc, #284]	@ (8003868 <MX_SAI2_Init+0x140>)
 800374c:	2200      	movs	r2, #0
 800374e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8003750:	4b45      	ldr	r3, [pc, #276]	@ (8003868 <MX_SAI2_Init+0x140>)
 8003752:	2200      	movs	r2, #0
 8003754:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8003756:	4b44      	ldr	r3, [pc, #272]	@ (8003868 <MX_SAI2_Init+0x140>)
 8003758:	2200      	movs	r2, #0
 800375a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800375c:	4b42      	ldr	r3, [pc, #264]	@ (8003868 <MX_SAI2_Init+0x140>)
 800375e:	2200      	movs	r2, #0
 8003760:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8003762:	4b41      	ldr	r3, [pc, #260]	@ (8003868 <MX_SAI2_Init+0x140>)
 8003764:	2200      	movs	r2, #0
 8003766:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8003768:	4b3f      	ldr	r3, [pc, #252]	@ (8003868 <MX_SAI2_Init+0x140>)
 800376a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800376e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003770:	4b3d      	ldr	r3, [pc, #244]	@ (8003868 <MX_SAI2_Init+0x140>)
 8003772:	2200      	movs	r2, #0
 8003774:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8003776:	4b3c      	ldr	r3, [pc, #240]	@ (8003868 <MX_SAI2_Init+0x140>)
 8003778:	2200      	movs	r2, #0
 800377a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800377c:	4b3a      	ldr	r3, [pc, #232]	@ (8003868 <MX_SAI2_Init+0x140>)
 800377e:	2200      	movs	r2, #0
 8003780:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003782:	4b39      	ldr	r3, [pc, #228]	@ (8003868 <MX_SAI2_Init+0x140>)
 8003784:	2200      	movs	r2, #0
 8003786:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8003788:	4b37      	ldr	r3, [pc, #220]	@ (8003868 <MX_SAI2_Init+0x140>)
 800378a:	2208      	movs	r2, #8
 800378c:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800378e:	4b36      	ldr	r3, [pc, #216]	@ (8003868 <MX_SAI2_Init+0x140>)
 8003790:	2201      	movs	r2, #1
 8003792:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8003794:	4b34      	ldr	r3, [pc, #208]	@ (8003868 <MX_SAI2_Init+0x140>)
 8003796:	2200      	movs	r2, #0
 8003798:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800379a:	4b33      	ldr	r3, [pc, #204]	@ (8003868 <MX_SAI2_Init+0x140>)
 800379c:	2200      	movs	r2, #0
 800379e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80037a0:	4b31      	ldr	r3, [pc, #196]	@ (8003868 <MX_SAI2_Init+0x140>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80037a6:	4b30      	ldr	r3, [pc, #192]	@ (8003868 <MX_SAI2_Init+0x140>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80037ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003868 <MX_SAI2_Init+0x140>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80037b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003868 <MX_SAI2_Init+0x140>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80037b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003868 <MX_SAI2_Init+0x140>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80037be:	482a      	ldr	r0, [pc, #168]	@ (8003868 <MX_SAI2_Init+0x140>)
 80037c0:	f008 fea0 	bl	800c504 <HAL_SAI_Init>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <MX_SAI2_Init+0xa6>
  {
    Error_Handler();
 80037ca:	f7ff ffa7 	bl	800371c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80037ce:	4b28      	ldr	r3, [pc, #160]	@ (8003870 <MX_SAI2_Init+0x148>)
 80037d0:	4a28      	ldr	r2, [pc, #160]	@ (8003874 <MX_SAI2_Init+0x14c>)
 80037d2:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80037d4:	4b26      	ldr	r3, [pc, #152]	@ (8003870 <MX_SAI2_Init+0x148>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80037da:	4b25      	ldr	r3, [pc, #148]	@ (8003870 <MX_SAI2_Init+0x148>)
 80037dc:	2203      	movs	r2, #3
 80037de:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80037e0:	4b23      	ldr	r3, [pc, #140]	@ (8003870 <MX_SAI2_Init+0x148>)
 80037e2:	2240      	movs	r2, #64	@ 0x40
 80037e4:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80037e6:	4b22      	ldr	r3, [pc, #136]	@ (8003870 <MX_SAI2_Init+0x148>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80037ec:	4b20      	ldr	r3, [pc, #128]	@ (8003870 <MX_SAI2_Init+0x148>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80037f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003870 <MX_SAI2_Init+0x148>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80037f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003870 <MX_SAI2_Init+0x148>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80037fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003870 <MX_SAI2_Init+0x148>)
 8003800:	2200      	movs	r2, #0
 8003802:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003804:	4b1a      	ldr	r3, [pc, #104]	@ (8003870 <MX_SAI2_Init+0x148>)
 8003806:	2200      	movs	r2, #0
 8003808:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800380a:	4b19      	ldr	r3, [pc, #100]	@ (8003870 <MX_SAI2_Init+0x148>)
 800380c:	2200      	movs	r2, #0
 800380e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8003810:	4b17      	ldr	r3, [pc, #92]	@ (8003870 <MX_SAI2_Init+0x148>)
 8003812:	2200      	movs	r2, #0
 8003814:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003816:	4b16      	ldr	r3, [pc, #88]	@ (8003870 <MX_SAI2_Init+0x148>)
 8003818:	2200      	movs	r2, #0
 800381a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800381c:	4b14      	ldr	r3, [pc, #80]	@ (8003870 <MX_SAI2_Init+0x148>)
 800381e:	2208      	movs	r2, #8
 8003820:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8003822:	4b13      	ldr	r3, [pc, #76]	@ (8003870 <MX_SAI2_Init+0x148>)
 8003824:	2201      	movs	r2, #1
 8003826:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8003828:	4b11      	ldr	r3, [pc, #68]	@ (8003870 <MX_SAI2_Init+0x148>)
 800382a:	2200      	movs	r2, #0
 800382c:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800382e:	4b10      	ldr	r3, [pc, #64]	@ (8003870 <MX_SAI2_Init+0x148>)
 8003830:	2200      	movs	r2, #0
 8003832:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8003834:	4b0e      	ldr	r3, [pc, #56]	@ (8003870 <MX_SAI2_Init+0x148>)
 8003836:	2200      	movs	r2, #0
 8003838:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800383a:	4b0d      	ldr	r3, [pc, #52]	@ (8003870 <MX_SAI2_Init+0x148>)
 800383c:	2200      	movs	r2, #0
 800383e:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003840:	4b0b      	ldr	r3, [pc, #44]	@ (8003870 <MX_SAI2_Init+0x148>)
 8003842:	2200      	movs	r2, #0
 8003844:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8003846:	4b0a      	ldr	r3, [pc, #40]	@ (8003870 <MX_SAI2_Init+0x148>)
 8003848:	2201      	movs	r2, #1
 800384a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800384c:	4b08      	ldr	r3, [pc, #32]	@ (8003870 <MX_SAI2_Init+0x148>)
 800384e:	2200      	movs	r2, #0
 8003850:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8003852:	4807      	ldr	r0, [pc, #28]	@ (8003870 <MX_SAI2_Init+0x148>)
 8003854:	f008 fe56 	bl	800c504 <HAL_SAI_Init>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <MX_SAI2_Init+0x13a>
  {
    Error_Handler();
 800385e:	f7ff ff5d 	bl	800371c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20000770 	.word	0x20000770
 800386c:	40015c04 	.word	0x40015c04
 8003870:	200007f4 	.word	0x200007f4
 8003874:	40015c24 	.word	0x40015c24

08003878 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08a      	sub	sp, #40	@ 0x28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a61      	ldr	r2, [pc, #388]	@ (8003a0c <HAL_SAI_MspInit+0x194>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d15b      	bne.n	8003942 <HAL_SAI_MspInit+0xca>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 800388a:	4b61      	ldr	r3, [pc, #388]	@ (8003a10 <HAL_SAI_MspInit+0x198>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10b      	bne.n	80038aa <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003892:	4b60      	ldr	r3, [pc, #384]	@ (8003a14 <HAL_SAI_MspInit+0x19c>)
 8003894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003896:	4a5f      	ldr	r2, [pc, #380]	@ (8003a14 <HAL_SAI_MspInit+0x19c>)
 8003898:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800389c:	6453      	str	r3, [r2, #68]	@ 0x44
 800389e:	4b5d      	ldr	r3, [pc, #372]	@ (8003a14 <HAL_SAI_MspInit+0x19c>)
 80038a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80038aa:	4b59      	ldr	r3, [pc, #356]	@ (8003a10 <HAL_SAI_MspInit+0x198>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3301      	adds	r3, #1
 80038b0:	4a57      	ldr	r2, [pc, #348]	@ (8003a10 <HAL_SAI_MspInit+0x198>)
 80038b2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80038b4:	23f0      	movs	r3, #240	@ 0xf0
 80038b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b8:	2302      	movs	r3, #2
 80038ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038bc:	2300      	movs	r3, #0
 80038be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c0:	2300      	movs	r3, #0
 80038c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80038c4:	230a      	movs	r3, #10
 80038c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80038c8:	f107 0314 	add.w	r3, r7, #20
 80038cc:	4619      	mov	r1, r3
 80038ce:	4852      	ldr	r0, [pc, #328]	@ (8003a18 <HAL_SAI_MspInit+0x1a0>)
 80038d0:	f005 feb4 	bl	800963c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 80038d4:	4b51      	ldr	r3, [pc, #324]	@ (8003a1c <HAL_SAI_MspInit+0x1a4>)
 80038d6:	4a52      	ldr	r2, [pc, #328]	@ (8003a20 <HAL_SAI_MspInit+0x1a8>)
 80038d8:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 80038da:	4b50      	ldr	r3, [pc, #320]	@ (8003a1c <HAL_SAI_MspInit+0x1a4>)
 80038dc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80038e0:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038e2:	4b4e      	ldr	r3, [pc, #312]	@ (8003a1c <HAL_SAI_MspInit+0x1a4>)
 80038e4:	2240      	movs	r2, #64	@ 0x40
 80038e6:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80038e8:	4b4c      	ldr	r3, [pc, #304]	@ (8003a1c <HAL_SAI_MspInit+0x1a4>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 80038ee:	4b4b      	ldr	r3, [pc, #300]	@ (8003a1c <HAL_SAI_MspInit+0x1a4>)
 80038f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038f4:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80038f6:	4b49      	ldr	r3, [pc, #292]	@ (8003a1c <HAL_SAI_MspInit+0x1a4>)
 80038f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038fc:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80038fe:	4b47      	ldr	r3, [pc, #284]	@ (8003a1c <HAL_SAI_MspInit+0x1a4>)
 8003900:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003904:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8003906:	4b45      	ldr	r3, [pc, #276]	@ (8003a1c <HAL_SAI_MspInit+0x1a4>)
 8003908:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800390c:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 800390e:	4b43      	ldr	r3, [pc, #268]	@ (8003a1c <HAL_SAI_MspInit+0x1a4>)
 8003910:	2200      	movs	r2, #0
 8003912:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003914:	4b41      	ldr	r3, [pc, #260]	@ (8003a1c <HAL_SAI_MspInit+0x1a4>)
 8003916:	2200      	movs	r2, #0
 8003918:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 800391a:	4840      	ldr	r0, [pc, #256]	@ (8003a1c <HAL_SAI_MspInit+0x1a4>)
 800391c:	f004 ff10 	bl	8008740 <HAL_DMA_Init>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_SAI_MspInit+0xb2>
    {
      Error_Handler();
 8003926:	f7ff fef9 	bl	800371c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a3b      	ldr	r2, [pc, #236]	@ (8003a1c <HAL_SAI_MspInit+0x1a4>)
 800392e:	671a      	str	r2, [r3, #112]	@ 0x70
 8003930:	4a3a      	ldr	r2, [pc, #232]	@ (8003a1c <HAL_SAI_MspInit+0x1a4>)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a38      	ldr	r2, [pc, #224]	@ (8003a1c <HAL_SAI_MspInit+0x1a4>)
 800393a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800393c:	4a37      	ldr	r2, [pc, #220]	@ (8003a1c <HAL_SAI_MspInit+0x1a4>)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6393      	str	r3, [r2, #56]	@ 0x38
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a37      	ldr	r2, [pc, #220]	@ (8003a24 <HAL_SAI_MspInit+0x1ac>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d15b      	bne.n	8003a04 <HAL_SAI_MspInit+0x18c>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 800394c:	4b30      	ldr	r3, [pc, #192]	@ (8003a10 <HAL_SAI_MspInit+0x198>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10b      	bne.n	800396c <HAL_SAI_MspInit+0xf4>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003954:	4b2f      	ldr	r3, [pc, #188]	@ (8003a14 <HAL_SAI_MspInit+0x19c>)
 8003956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003958:	4a2e      	ldr	r2, [pc, #184]	@ (8003a14 <HAL_SAI_MspInit+0x19c>)
 800395a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800395e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003960:	4b2c      	ldr	r3, [pc, #176]	@ (8003a14 <HAL_SAI_MspInit+0x19c>)
 8003962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003964:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800396c:	4b28      	ldr	r3, [pc, #160]	@ (8003a10 <HAL_SAI_MspInit+0x198>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3301      	adds	r3, #1
 8003972:	4a27      	ldr	r2, [pc, #156]	@ (8003a10 <HAL_SAI_MspInit+0x198>)
 8003974:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003976:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800397a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397c:	2302      	movs	r3, #2
 800397e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003980:	2300      	movs	r3, #0
 8003982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003984:	2300      	movs	r3, #0
 8003986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003988:	230a      	movs	r3, #10
 800398a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800398c:	f107 0314 	add.w	r3, r7, #20
 8003990:	4619      	mov	r1, r3
 8003992:	4825      	ldr	r0, [pc, #148]	@ (8003a28 <HAL_SAI_MspInit+0x1b0>)
 8003994:	f005 fe52 	bl	800963c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 8003998:	4b24      	ldr	r3, [pc, #144]	@ (8003a2c <HAL_SAI_MspInit+0x1b4>)
 800399a:	4a25      	ldr	r2, [pc, #148]	@ (8003a30 <HAL_SAI_MspInit+0x1b8>)
 800399c:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 800399e:	4b23      	ldr	r3, [pc, #140]	@ (8003a2c <HAL_SAI_MspInit+0x1b4>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039a4:	4b21      	ldr	r3, [pc, #132]	@ (8003a2c <HAL_SAI_MspInit+0x1b4>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80039aa:	4b20      	ldr	r3, [pc, #128]	@ (8003a2c <HAL_SAI_MspInit+0x1b4>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 80039b0:	4b1e      	ldr	r3, [pc, #120]	@ (8003a2c <HAL_SAI_MspInit+0x1b4>)
 80039b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039b6:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80039b8:	4b1c      	ldr	r3, [pc, #112]	@ (8003a2c <HAL_SAI_MspInit+0x1b4>)
 80039ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039be:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80039c0:	4b1a      	ldr	r3, [pc, #104]	@ (8003a2c <HAL_SAI_MspInit+0x1b4>)
 80039c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039c6:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 80039c8:	4b18      	ldr	r3, [pc, #96]	@ (8003a2c <HAL_SAI_MspInit+0x1b4>)
 80039ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039ce:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 80039d0:	4b16      	ldr	r3, [pc, #88]	@ (8003a2c <HAL_SAI_MspInit+0x1b4>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039d6:	4b15      	ldr	r3, [pc, #84]	@ (8003a2c <HAL_SAI_MspInit+0x1b4>)
 80039d8:	2200      	movs	r2, #0
 80039da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80039dc:	4813      	ldr	r0, [pc, #76]	@ (8003a2c <HAL_SAI_MspInit+0x1b4>)
 80039de:	f004 feaf 	bl	8008740 <HAL_DMA_Init>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_SAI_MspInit+0x174>
    {
      Error_Handler();
 80039e8:	f7ff fe98 	bl	800371c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a0f      	ldr	r2, [pc, #60]	@ (8003a2c <HAL_SAI_MspInit+0x1b4>)
 80039f0:	671a      	str	r2, [r3, #112]	@ 0x70
 80039f2:	4a0e      	ldr	r2, [pc, #56]	@ (8003a2c <HAL_SAI_MspInit+0x1b4>)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a0c      	ldr	r2, [pc, #48]	@ (8003a2c <HAL_SAI_MspInit+0x1b4>)
 80039fc:	66da      	str	r2, [r3, #108]	@ 0x6c
 80039fe:	4a0b      	ldr	r2, [pc, #44]	@ (8003a2c <HAL_SAI_MspInit+0x1b4>)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8003a04:	bf00      	nop
 8003a06:	3728      	adds	r7, #40	@ 0x28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40015c04 	.word	0x40015c04
 8003a10:	20000938 	.word	0x20000938
 8003a14:	40023800 	.word	0x40023800
 8003a18:	40022000 	.word	0x40022000
 8003a1c:	20000878 	.word	0x20000878
 8003a20:	40026470 	.word	0x40026470
 8003a24:	40015c24 	.word	0x40015c24
 8003a28:	40021800 	.word	0x40021800
 8003a2c:	200008d8 	.word	0x200008d8
 8003a30:	400264b8 	.word	0x400264b8

08003a34 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* saiHandle)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]

/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a23      	ldr	r2, [pc, #140]	@ (8003ad0 <HAL_SAI_MspDeInit+0x9c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d11c      	bne.n	8003a80 <HAL_SAI_MspDeInit+0x4c>
    {
    SAI2_client --;
 8003a46:	4b23      	ldr	r3, [pc, #140]	@ (8003ad4 <HAL_SAI_MspDeInit+0xa0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	4a21      	ldr	r2, [pc, #132]	@ (8003ad4 <HAL_SAI_MspDeInit+0xa0>)
 8003a4e:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 8003a50:	4b20      	ldr	r3, [pc, #128]	@ (8003ad4 <HAL_SAI_MspDeInit+0xa0>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d105      	bne.n	8003a64 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 8003a58:	4b1f      	ldr	r3, [pc, #124]	@ (8003ad8 <HAL_SAI_MspDeInit+0xa4>)
 8003a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ad8 <HAL_SAI_MspDeInit+0xa4>)
 8003a5e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003a62:	6453      	str	r3, [r2, #68]	@ 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 8003a64:	21f0      	movs	r1, #240	@ 0xf0
 8003a66:	481d      	ldr	r0, [pc, #116]	@ (8003adc <HAL_SAI_MspDeInit+0xa8>)
 8003a68:	f005 ff94 	bl	8009994 <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(saiHandle->hdmarx);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a70:	4618      	mov	r0, r3
 8003a72:	f004 ff13 	bl	800889c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(saiHandle->hdmatx);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f004 ff0e 	bl	800889c <HAL_DMA_DeInit>
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a16      	ldr	r2, [pc, #88]	@ (8003ae0 <HAL_SAI_MspDeInit+0xac>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d11d      	bne.n	8003ac6 <HAL_SAI_MspDeInit+0x92>
    {
    SAI2_client --;
 8003a8a:	4b12      	ldr	r3, [pc, #72]	@ (8003ad4 <HAL_SAI_MspDeInit+0xa0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	4a10      	ldr	r2, [pc, #64]	@ (8003ad4 <HAL_SAI_MspDeInit+0xa0>)
 8003a92:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 8003a94:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad4 <HAL_SAI_MspDeInit+0xa0>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d105      	bne.n	8003aa8 <HAL_SAI_MspDeInit+0x74>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 8003a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ad8 <HAL_SAI_MspDeInit+0xa4>)
 8003a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8003ad8 <HAL_SAI_MspDeInit+0xa4>)
 8003aa2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003aa6:	6453      	str	r3, [r2, #68]	@ 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 8003aa8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003aac:	480d      	ldr	r0, [pc, #52]	@ (8003ae4 <HAL_SAI_MspDeInit+0xb0>)
 8003aae:	f005 ff71 	bl	8009994 <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(saiHandle->hdmarx);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f004 fef0 	bl	800889c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(saiHandle->hdmatx);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f004 feeb 	bl	800889c <HAL_DMA_DeInit>
    }
}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40015c04 	.word	0x40015c04
 8003ad4:	20000938 	.word	0x20000938
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	40022000 	.word	0x40022000
 8003ae0:	40015c24 	.word	0x40015c24
 8003ae4:	40021800 	.word	0x40021800

08003ae8 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003aec:	4b0c      	ldr	r3, [pc, #48]	@ (8003b20 <MX_SDMMC1_SD_Init+0x38>)
 8003aee:	4a0d      	ldr	r2, [pc, #52]	@ (8003b24 <MX_SDMMC1_SD_Init+0x3c>)
 8003af0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003af2:	4b0b      	ldr	r3, [pc, #44]	@ (8003b20 <MX_SDMMC1_SD_Init+0x38>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8003af8:	4b09      	ldr	r3, [pc, #36]	@ (8003b20 <MX_SDMMC1_SD_Init+0x38>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003afe:	4b08      	ldr	r3, [pc, #32]	@ (8003b20 <MX_SDMMC1_SD_Init+0x38>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8003b04:	4b06      	ldr	r3, [pc, #24]	@ (8003b20 <MX_SDMMC1_SD_Init+0x38>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003b0a:	4b05      	ldr	r3, [pc, #20]	@ (8003b20 <MX_SDMMC1_SD_Init+0x38>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8003b10:	4b03      	ldr	r3, [pc, #12]	@ (8003b20 <MX_SDMMC1_SD_Init+0x38>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8003b16:	bf00      	nop
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	2000093c 	.word	0x2000093c
 8003b24:	40012c00 	.word	0x40012c00

08003b28 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08a      	sub	sp, #40	@ 0x28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b30:	f107 0314 	add.w	r3, r7, #20
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	605a      	str	r2, [r3, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	60da      	str	r2, [r3, #12]
 8003b3e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a61      	ldr	r2, [pc, #388]	@ (8003ccc <HAL_SD_MspInit+0x1a4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	f040 80bb 	bne.w	8003cc2 <HAL_SD_MspInit+0x19a>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003b4c:	4b60      	ldr	r3, [pc, #384]	@ (8003cd0 <HAL_SD_MspInit+0x1a8>)
 8003b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b50:	4a5f      	ldr	r2, [pc, #380]	@ (8003cd0 <HAL_SD_MspInit+0x1a8>)
 8003b52:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b56:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b58:	4b5d      	ldr	r3, [pc, #372]	@ (8003cd0 <HAL_SD_MspInit+0x1a8>)
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b64:	4b5a      	ldr	r3, [pc, #360]	@ (8003cd0 <HAL_SD_MspInit+0x1a8>)
 8003b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b68:	4a59      	ldr	r2, [pc, #356]	@ (8003cd0 <HAL_SD_MspInit+0x1a8>)
 8003b6a:	f043 0304 	orr.w	r3, r3, #4
 8003b6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b70:	4b57      	ldr	r3, [pc, #348]	@ (8003cd0 <HAL_SD_MspInit+0x1a8>)
 8003b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b7c:	4b54      	ldr	r3, [pc, #336]	@ (8003cd0 <HAL_SD_MspInit+0x1a8>)
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b80:	4a53      	ldr	r2, [pc, #332]	@ (8003cd0 <HAL_SD_MspInit+0x1a8>)
 8003b82:	f043 0308 	orr.w	r3, r3, #8
 8003b86:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b88:	4b51      	ldr	r3, [pc, #324]	@ (8003cd0 <HAL_SD_MspInit+0x1a8>)
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003b94:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003b98:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003ba6:	230c      	movs	r3, #12
 8003ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003baa:	f107 0314 	add.w	r3, r7, #20
 8003bae:	4619      	mov	r1, r3
 8003bb0:	4848      	ldr	r0, [pc, #288]	@ (8003cd4 <HAL_SD_MspInit+0x1ac>)
 8003bb2:	f005 fd43 	bl	800963c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003bb6:	2304      	movs	r3, #4
 8003bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003bc6:	230c      	movs	r3, #12
 8003bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003bca:	f107 0314 	add.w	r3, r7, #20
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4841      	ldr	r0, [pc, #260]	@ (8003cd8 <HAL_SD_MspInit+0x1b0>)
 8003bd2:	f005 fd33 	bl	800963c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8003bd6:	4b41      	ldr	r3, [pc, #260]	@ (8003cdc <HAL_SD_MspInit+0x1b4>)
 8003bd8:	4a41      	ldr	r2, [pc, #260]	@ (8003ce0 <HAL_SD_MspInit+0x1b8>)
 8003bda:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8003bdc:	4b3f      	ldr	r3, [pc, #252]	@ (8003cdc <HAL_SD_MspInit+0x1b4>)
 8003bde:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003be2:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003be4:	4b3d      	ldr	r3, [pc, #244]	@ (8003cdc <HAL_SD_MspInit+0x1b4>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bea:	4b3c      	ldr	r3, [pc, #240]	@ (8003cdc <HAL_SD_MspInit+0x1b4>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003bf0:	4b3a      	ldr	r3, [pc, #232]	@ (8003cdc <HAL_SD_MspInit+0x1b4>)
 8003bf2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bf6:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003bf8:	4b38      	ldr	r3, [pc, #224]	@ (8003cdc <HAL_SD_MspInit+0x1b4>)
 8003bfa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003bfe:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003c00:	4b36      	ldr	r3, [pc, #216]	@ (8003cdc <HAL_SD_MspInit+0x1b4>)
 8003c02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003c06:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8003c08:	4b34      	ldr	r3, [pc, #208]	@ (8003cdc <HAL_SD_MspInit+0x1b4>)
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c0e:	4b33      	ldr	r3, [pc, #204]	@ (8003cdc <HAL_SD_MspInit+0x1b4>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003c14:	4b31      	ldr	r3, [pc, #196]	@ (8003cdc <HAL_SD_MspInit+0x1b4>)
 8003c16:	2204      	movs	r2, #4
 8003c18:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003c1a:	4b30      	ldr	r3, [pc, #192]	@ (8003cdc <HAL_SD_MspInit+0x1b4>)
 8003c1c:	2203      	movs	r2, #3
 8003c1e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003c20:	4b2e      	ldr	r3, [pc, #184]	@ (8003cdc <HAL_SD_MspInit+0x1b4>)
 8003c22:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003c26:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003c28:	4b2c      	ldr	r3, [pc, #176]	@ (8003cdc <HAL_SD_MspInit+0x1b4>)
 8003c2a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003c2e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8003c30:	482a      	ldr	r0, [pc, #168]	@ (8003cdc <HAL_SD_MspInit+0x1b4>)
 8003c32:	f004 fd85 	bl	8008740 <HAL_DMA_Init>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8003c3c:	f7ff fd6e 	bl	800371c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a26      	ldr	r2, [pc, #152]	@ (8003cdc <HAL_SD_MspInit+0x1b4>)
 8003c44:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c46:	4a25      	ldr	r2, [pc, #148]	@ (8003cdc <HAL_SD_MspInit+0x1b4>)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8003c4c:	4b25      	ldr	r3, [pc, #148]	@ (8003ce4 <HAL_SD_MspInit+0x1bc>)
 8003c4e:	4a26      	ldr	r2, [pc, #152]	@ (8003ce8 <HAL_SD_MspInit+0x1c0>)
 8003c50:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8003c52:	4b24      	ldr	r3, [pc, #144]	@ (8003ce4 <HAL_SD_MspInit+0x1bc>)
 8003c54:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003c58:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c5a:	4b22      	ldr	r3, [pc, #136]	@ (8003ce4 <HAL_SD_MspInit+0x1bc>)
 8003c5c:	2240      	movs	r2, #64	@ 0x40
 8003c5e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c60:	4b20      	ldr	r3, [pc, #128]	@ (8003ce4 <HAL_SD_MspInit+0x1bc>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c66:	4b1f      	ldr	r3, [pc, #124]	@ (8003ce4 <HAL_SD_MspInit+0x1bc>)
 8003c68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c6c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce4 <HAL_SD_MspInit+0x1bc>)
 8003c70:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003c74:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003c76:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce4 <HAL_SD_MspInit+0x1bc>)
 8003c78:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003c7c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8003c7e:	4b19      	ldr	r3, [pc, #100]	@ (8003ce4 <HAL_SD_MspInit+0x1bc>)
 8003c80:	2220      	movs	r2, #32
 8003c82:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c84:	4b17      	ldr	r3, [pc, #92]	@ (8003ce4 <HAL_SD_MspInit+0x1bc>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003c8a:	4b16      	ldr	r3, [pc, #88]	@ (8003ce4 <HAL_SD_MspInit+0x1bc>)
 8003c8c:	2204      	movs	r2, #4
 8003c8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003c90:	4b14      	ldr	r3, [pc, #80]	@ (8003ce4 <HAL_SD_MspInit+0x1bc>)
 8003c92:	2203      	movs	r2, #3
 8003c94:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003c96:	4b13      	ldr	r3, [pc, #76]	@ (8003ce4 <HAL_SD_MspInit+0x1bc>)
 8003c98:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003c9e:	4b11      	ldr	r3, [pc, #68]	@ (8003ce4 <HAL_SD_MspInit+0x1bc>)
 8003ca0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003ca4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8003ca6:	480f      	ldr	r0, [pc, #60]	@ (8003ce4 <HAL_SD_MspInit+0x1bc>)
 8003ca8:	f004 fd4a 	bl	8008740 <HAL_DMA_Init>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 8003cb2:	f7ff fd33 	bl	800371c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8003ce4 <HAL_SD_MspInit+0x1bc>)
 8003cba:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003cbc:	4a09      	ldr	r2, [pc, #36]	@ (8003ce4 <HAL_SD_MspInit+0x1bc>)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	3728      	adds	r7, #40	@ 0x28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40012c00 	.word	0x40012c00
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	40020800 	.word	0x40020800
 8003cd8:	40020c00 	.word	0x40020c00
 8003cdc:	200009c0 	.word	0x200009c0
 8003ce0:	40026458 	.word	0x40026458
 8003ce4:	20000a20 	.word	0x20000a20
 8003ce8:	400264a0 	.word	0x400264a0

08003cec <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08c      	sub	sp, #48	@ 0x30
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a51      	ldr	r2, [pc, #324]	@ (8003e3c <I2Cx_MspInit+0x150>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d14d      	bne.n	8003d98 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003cfc:	4b50      	ldr	r3, [pc, #320]	@ (8003e40 <I2Cx_MspInit+0x154>)
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d00:	4a4f      	ldr	r2, [pc, #316]	@ (8003e40 <I2Cx_MspInit+0x154>)
 8003d02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d06:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d08:	4b4d      	ldr	r3, [pc, #308]	@ (8003e40 <I2Cx_MspInit+0x154>)
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003d14:	2380      	movs	r3, #128	@ 0x80
 8003d16:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003d18:	2312      	movs	r3, #18
 8003d1a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003d20:	2302      	movs	r3, #2
 8003d22:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8003d24:	2304      	movs	r3, #4
 8003d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003d28:	f107 031c 	add.w	r3, r7, #28
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4845      	ldr	r0, [pc, #276]	@ (8003e44 <I2Cx_MspInit+0x158>)
 8003d30:	f005 fc84 	bl	800963c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003d34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003d3a:	f107 031c 	add.w	r3, r7, #28
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4840      	ldr	r0, [pc, #256]	@ (8003e44 <I2Cx_MspInit+0x158>)
 8003d42:	f005 fc7b 	bl	800963c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8003d46:	4b3e      	ldr	r3, [pc, #248]	@ (8003e40 <I2Cx_MspInit+0x154>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4a:	4a3d      	ldr	r2, [pc, #244]	@ (8003e40 <I2Cx_MspInit+0x154>)
 8003d4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d52:	4b3b      	ldr	r3, [pc, #236]	@ (8003e40 <I2Cx_MspInit+0x154>)
 8003d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003d5e:	4b38      	ldr	r3, [pc, #224]	@ (8003e40 <I2Cx_MspInit+0x154>)
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	4a37      	ldr	r2, [pc, #220]	@ (8003e40 <I2Cx_MspInit+0x154>)
 8003d64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003d68:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003d6a:	4b35      	ldr	r3, [pc, #212]	@ (8003e40 <I2Cx_MspInit+0x154>)
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	4a34      	ldr	r2, [pc, #208]	@ (8003e40 <I2Cx_MspInit+0x154>)
 8003d70:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003d74:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003d76:	2200      	movs	r2, #0
 8003d78:	210f      	movs	r1, #15
 8003d7a:	2048      	movs	r0, #72	@ 0x48
 8003d7c:	f004 fcb6 	bl	80086ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003d80:	2048      	movs	r0, #72	@ 0x48
 8003d82:	f004 fccf 	bl	8008724 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003d86:	2200      	movs	r2, #0
 8003d88:	210f      	movs	r1, #15
 8003d8a:	2049      	movs	r0, #73	@ 0x49
 8003d8c:	f004 fcae 	bl	80086ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003d90:	2049      	movs	r0, #73	@ 0x49
 8003d92:	f004 fcc7 	bl	8008724 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003d96:	e04d      	b.n	8003e34 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003d98:	4b29      	ldr	r3, [pc, #164]	@ (8003e40 <I2Cx_MspInit+0x154>)
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9c:	4a28      	ldr	r2, [pc, #160]	@ (8003e40 <I2Cx_MspInit+0x154>)
 8003d9e:	f043 0302 	orr.w	r3, r3, #2
 8003da2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003da4:	4b26      	ldr	r3, [pc, #152]	@ (8003e40 <I2Cx_MspInit+0x154>)
 8003da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003db0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003db4:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003db6:	2312      	movs	r3, #18
 8003db8:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003dc2:	2304      	movs	r3, #4
 8003dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003dc6:	f107 031c 	add.w	r3, r7, #28
 8003dca:	4619      	mov	r1, r3
 8003dcc:	481e      	ldr	r0, [pc, #120]	@ (8003e48 <I2Cx_MspInit+0x15c>)
 8003dce:	f005 fc35 	bl	800963c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003dd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003dd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003dd8:	f107 031c 	add.w	r3, r7, #28
 8003ddc:	4619      	mov	r1, r3
 8003dde:	481a      	ldr	r0, [pc, #104]	@ (8003e48 <I2Cx_MspInit+0x15c>)
 8003de0:	f005 fc2c 	bl	800963c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003de4:	4b16      	ldr	r3, [pc, #88]	@ (8003e40 <I2Cx_MspInit+0x154>)
 8003de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de8:	4a15      	ldr	r2, [pc, #84]	@ (8003e40 <I2Cx_MspInit+0x154>)
 8003dea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003dee:	6413      	str	r3, [r2, #64]	@ 0x40
 8003df0:	4b13      	ldr	r3, [pc, #76]	@ (8003e40 <I2Cx_MspInit+0x154>)
 8003df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003dfc:	4b10      	ldr	r3, [pc, #64]	@ (8003e40 <I2Cx_MspInit+0x154>)
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	4a0f      	ldr	r2, [pc, #60]	@ (8003e40 <I2Cx_MspInit+0x154>)
 8003e02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e06:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003e08:	4b0d      	ldr	r3, [pc, #52]	@ (8003e40 <I2Cx_MspInit+0x154>)
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	4a0c      	ldr	r2, [pc, #48]	@ (8003e40 <I2Cx_MspInit+0x154>)
 8003e0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e12:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003e14:	2200      	movs	r2, #0
 8003e16:	210f      	movs	r1, #15
 8003e18:	201f      	movs	r0, #31
 8003e1a:	f004 fc67 	bl	80086ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003e1e:	201f      	movs	r0, #31
 8003e20:	f004 fc80 	bl	8008724 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003e24:	2200      	movs	r2, #0
 8003e26:	210f      	movs	r1, #15
 8003e28:	2020      	movs	r0, #32
 8003e2a:	f004 fc5f 	bl	80086ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003e2e:	2020      	movs	r0, #32
 8003e30:	f004 fc78 	bl	8008724 <HAL_NVIC_EnableIRQ>
}
 8003e34:	bf00      	nop
 8003e36:	3730      	adds	r7, #48	@ 0x30
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	20000a80 	.word	0x20000a80
 8003e40:	40023800 	.word	0x40023800
 8003e44:	40021c00 	.word	0x40021c00
 8003e48:	40020400 	.word	0x40020400

08003e4c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f006 f9dd 	bl	800a214 <HAL_I2C_GetState>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d125      	bne.n	8003eac <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a14      	ldr	r2, [pc, #80]	@ (8003eb4 <I2Cx_Init+0x68>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d103      	bne.n	8003e70 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a13      	ldr	r2, [pc, #76]	@ (8003eb8 <I2Cx_Init+0x6c>)
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	e002      	b.n	8003e76 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a12      	ldr	r2, [pc, #72]	@ (8003ebc <I2Cx_Init+0x70>)
 8003e74:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a11      	ldr	r2, [pc, #68]	@ (8003ec0 <I2Cx_Init+0x74>)
 8003e7a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7ff ff23 	bl	8003cec <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f005 feb2 	bl	8009c10 <HAL_I2C_Init>
  }
}
 8003eac:	bf00      	nop
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	20000a80 	.word	0x20000a80
 8003eb8:	40005c00 	.word	0x40005c00
 8003ebc:	40005400 	.word	0x40005400
 8003ec0:	40912732 	.word	0x40912732

08003ec4 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08a      	sub	sp, #40	@ 0x28
 8003ec8:	af04      	add	r7, sp, #16
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	4608      	mov	r0, r1
 8003ece:	4611      	mov	r1, r2
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	72fb      	strb	r3, [r7, #11]
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	813b      	strh	r3, [r7, #8]
 8003eda:	4613      	mov	r3, r2
 8003edc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003ee2:	7afb      	ldrb	r3, [r7, #11]
 8003ee4:	b299      	uxth	r1, r3
 8003ee6:	88f8      	ldrh	r0, [r7, #6]
 8003ee8:	893a      	ldrh	r2, [r7, #8]
 8003eea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003eee:	9302      	str	r3, [sp, #8]
 8003ef0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ef2:	9301      	str	r3, [sp, #4]
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	4603      	mov	r3, r0
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f006 f870 	bl	8009fe0 <HAL_I2C_Mem_Read>
 8003f00:	4603      	mov	r3, r0
 8003f02:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d004      	beq.n	8003f14 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003f0a:	7afb      	ldrb	r3, [r7, #11]
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 f832 	bl	8003f78 <I2Cx_Error>
  }
  return status;    
 8003f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b08a      	sub	sp, #40	@ 0x28
 8003f22:	af04      	add	r7, sp, #16
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	4608      	mov	r0, r1
 8003f28:	4611      	mov	r1, r2
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	72fb      	strb	r3, [r7, #11]
 8003f30:	460b      	mov	r3, r1
 8003f32:	813b      	strh	r3, [r7, #8]
 8003f34:	4613      	mov	r3, r2
 8003f36:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003f3c:	7afb      	ldrb	r3, [r7, #11]
 8003f3e:	b299      	uxth	r1, r3
 8003f40:	88f8      	ldrh	r0, [r7, #6]
 8003f42:	893a      	ldrh	r2, [r7, #8]
 8003f44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f48:	9302      	str	r3, [sp, #8]
 8003f4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003f4c:	9301      	str	r3, [sp, #4]
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	4603      	mov	r3, r0
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f005 ff2f 	bl	8009db8 <HAL_I2C_Mem_Write>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d004      	beq.n	8003f6e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003f64:	7afb      	ldrb	r3, [r7, #11]
 8003f66:	4619      	mov	r1, r3
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f805 	bl	8003f78 <I2Cx_Error>
  }
  return status;
 8003f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	460b      	mov	r3, r1
 8003f82:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f005 fed3 	bl	8009d30 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff ff5e 	bl	8003e4c <I2Cx_Init>
}
 8003f90:	bf00      	nop
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003f9c:	4802      	ldr	r0, [pc, #8]	@ (8003fa8 <AUDIO_IO_Init+0x10>)
 8003f9e:	f7ff ff55 	bl	8003e4c <I2Cx_Init>
}
 8003fa2:	bf00      	nop
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000a80 	.word	0x20000a80

08003fac <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
}
 8003fb0:	bf00      	nop
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
	...

08003fbc <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af02      	add	r7, sp, #8
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	71fb      	strb	r3, [r7, #7]
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	80bb      	strh	r3, [r7, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8003fce:	887b      	ldrh	r3, [r7, #2]
 8003fd0:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8003fd2:	89fb      	ldrh	r3, [r7, #14]
 8003fd4:	0a1b      	lsrs	r3, r3, #8
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8003fda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003fde:	021b      	lsls	r3, r3, #8
 8003fe0:	b21a      	sxth	r2, r3
 8003fe2:	887b      	ldrh	r3, [r7, #2]
 8003fe4:	b21b      	sxth	r3, r3
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	b21b      	sxth	r3, r3
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8003fee:	88ba      	ldrh	r2, [r7, #4]
 8003ff0:	79f9      	ldrb	r1, [r7, #7]
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	9301      	str	r3, [sp, #4]
 8003ff6:	1cbb      	adds	r3, r7, #2
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	4803      	ldr	r0, [pc, #12]	@ (800400c <AUDIO_IO_Write+0x50>)
 8003ffe:	f7ff ff8e 	bl	8003f1e <I2Cx_WriteMultiple>
}
 8004002:	bf00      	nop
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	20000a80 	.word	0x20000a80

08004010 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af02      	add	r7, sp, #8
 8004016:	4603      	mov	r3, r0
 8004018:	460a      	mov	r2, r1
 800401a:	71fb      	strb	r3, [r7, #7]
 800401c:	4613      	mov	r3, r2
 800401e:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8004020:	2300      	movs	r3, #0
 8004022:	81bb      	strh	r3, [r7, #12]
 8004024:	2300      	movs	r3, #0
 8004026:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8004028:	88ba      	ldrh	r2, [r7, #4]
 800402a:	79f9      	ldrb	r1, [r7, #7]
 800402c:	2302      	movs	r3, #2
 800402e:	9301      	str	r3, [sp, #4]
 8004030:	f107 030c 	add.w	r3, r7, #12
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	2302      	movs	r3, #2
 8004038:	480a      	ldr	r0, [pc, #40]	@ (8004064 <AUDIO_IO_Read+0x54>)
 800403a:	f7ff ff43 	bl	8003ec4 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 800403e:	89bb      	ldrh	r3, [r7, #12]
 8004040:	0a1b      	lsrs	r3, r3, #8
 8004042:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8004044:	89bb      	ldrh	r3, [r7, #12]
 8004046:	b21b      	sxth	r3, r3
 8004048:	021b      	lsls	r3, r3, #8
 800404a:	b21a      	sxth	r2, r3
 800404c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004050:	4313      	orrs	r3, r2
 8004052:	b21b      	sxth	r3, r3
 8004054:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8004056:	89fb      	ldrh	r3, [r7, #14]
 8004058:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 800405a:	89bb      	ldrh	r3, [r7, #12]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20000a80 	.word	0x20000a80

08004068 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f003 fe65 	bl	8007d40 <HAL_Delay>
}
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8004084:	4802      	ldr	r0, [pc, #8]	@ (8004090 <TS_IO_Init+0x10>)
 8004086:	f7ff fee1 	bl	8003e4c <I2Cx_Init>
}
 800408a:	bf00      	nop
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20000a80 	.word	0x20000a80

08004094 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af02      	add	r7, sp, #8
 800409a:	4603      	mov	r3, r0
 800409c:	71fb      	strb	r3, [r7, #7]
 800409e:	460b      	mov	r3, r1
 80040a0:	71bb      	strb	r3, [r7, #6]
 80040a2:	4613      	mov	r3, r2
 80040a4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80040a6:	79bb      	ldrb	r3, [r7, #6]
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	79f9      	ldrb	r1, [r7, #7]
 80040ac:	2301      	movs	r3, #1
 80040ae:	9301      	str	r3, [sp, #4]
 80040b0:	1d7b      	adds	r3, r7, #5
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	2301      	movs	r3, #1
 80040b6:	4803      	ldr	r0, [pc, #12]	@ (80040c4 <TS_IO_Write+0x30>)
 80040b8:	f7ff ff31 	bl	8003f1e <I2Cx_WriteMultiple>
}
 80040bc:	bf00      	nop
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20000a80 	.word	0x20000a80

080040c8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	4603      	mov	r3, r0
 80040d0:	460a      	mov	r2, r1
 80040d2:	71fb      	strb	r3, [r7, #7]
 80040d4:	4613      	mov	r3, r2
 80040d6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80040dc:	79bb      	ldrb	r3, [r7, #6]
 80040de:	b29a      	uxth	r2, r3
 80040e0:	79f9      	ldrb	r1, [r7, #7]
 80040e2:	2301      	movs	r3, #1
 80040e4:	9301      	str	r3, [sp, #4]
 80040e6:	f107 030f 	add.w	r3, r7, #15
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	2301      	movs	r3, #1
 80040ee:	4804      	ldr	r0, [pc, #16]	@ (8004100 <TS_IO_Read+0x38>)
 80040f0:	f7ff fee8 	bl	8003ec4 <I2Cx_ReadMultiple>

  return read_value;
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20000a80 	.word	0x20000a80

08004104 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f003 fe17 	bl	8007d40 <HAL_Delay>
}
 8004112:	bf00      	nop
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <BSP_AUDIO_OUT_Play>:
 * @param  pBuffer: Pointer to the buffer
 * @param  Size: Number of audio data in BYTES unit.
 *         In memory, first element is for left channel, second element is for right channel
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_Play(uint16_t *pBuffer, uint32_t Size) {
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
	/* Call the audio Codec Play function */
	if (audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0) {
 8004126:	4b10      	ldr	r3, [pc, #64]	@ (8004168 <BSP_AUDIO_OUT_Play+0x4c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	b292      	uxth	r2, r2
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	2034      	movs	r0, #52	@ 0x34
 8004134:	4798      	blx	r3
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <BSP_AUDIO_OUT_Play+0x24>
		return AUDIO_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e00f      	b.n	8004160 <BSP_AUDIO_OUT_Play+0x44>
	} else {
		/* Update the Media layer and enable it for play */
		HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer,
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004146:	d203      	bcs.n	8004150 <BSP_AUDIO_OUT_Play+0x34>
				DMA_MAX(Size / AUDIODATA_SIZE));
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	085b      	lsrs	r3, r3, #1
		HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer,
 800414c:	b29b      	uxth	r3, r3
 800414e:	e001      	b.n	8004154 <BSP_AUDIO_OUT_Play+0x38>
 8004150:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004154:	461a      	mov	r2, r3
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4804      	ldr	r0, [pc, #16]	@ (800416c <BSP_AUDIO_OUT_Play+0x50>)
 800415a:	f008 fb87 	bl	800c86c <HAL_SAI_Transmit_DMA>

		return AUDIO_OK;
 800415e:	2300      	movs	r3, #0
	}
}
 8004160:	4618      	mov	r0, r3
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	20000ad4 	.word	0x20000ad4
 800416c:	20000ad8 	.word	0x20000ad8

08004170 <BSP_AUDIO_OUT_SetVolume>:
 * @brief  Controls the current audio volume level.
 * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for
 *         Mute and 100 for Max volume level).
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_SetVolume(uint8_t Volume) {
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	4603      	mov	r3, r0
 8004178:	71fb      	strb	r3, [r7, #7]
	/* Call the codec volume control function with converted volume value */
	if (audio_drv->SetVolumeOut(AUDIO_I2C_ADDRESS, Volume) != 0) {
 800417a:	4b08      	ldr	r3, [pc, #32]	@ (800419c <BSP_AUDIO_OUT_SetVolume+0x2c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004180:	79fa      	ldrb	r2, [r7, #7]
 8004182:	4611      	mov	r1, r2
 8004184:	2034      	movs	r0, #52	@ 0x34
 8004186:	4798      	blx	r3
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <BSP_AUDIO_OUT_SetVolume+0x22>
		return AUDIO_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <BSP_AUDIO_OUT_SetVolume+0x24>
	} else {
		/* Return AUDIO_OK when all operations are correctly done */
		return AUDIO_OK;
 8004192:	2300      	movs	r3, #0
	}
}
 8004194:	4618      	mov	r0, r3
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	20000ad4 	.word	0x20000ad4

080041a0 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
 *            @arg CODEC_AUDIOFRAME_SLOT_13
 * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
 *         audio frame slot.
 * @retval None
 */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot) {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 80041a8:	4b0c      	ldr	r3, [pc, #48]	@ (80041dc <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	4b0b      	ldr	r3, [pc, #44]	@ (80041dc <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80041b6:	601a      	str	r2, [r3, #0]

	/* Update the SAI audio frame slot configuration */
	haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 80041b8:	4a08      	ldr	r2, [pc, #32]	@ (80041dc <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6613      	str	r3, [r2, #96]	@ 0x60
	HAL_SAI_Init(&haudio_out_sai);
 80041be:	4807      	ldr	r0, [pc, #28]	@ (80041dc <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80041c0:	f008 f9a0 	bl	800c504 <HAL_SAI_Init>

	/* Enable SAI peripheral to generate MCLK */
	__HAL_SAI_ENABLE(&haudio_out_sai);
 80041c4:	4b05      	ldr	r3, [pc, #20]	@ (80041dc <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	4b04      	ldr	r3, [pc, #16]	@ (80041dc <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80041d2:	601a      	str	r2, [r3, #0]
}
 80041d4:	bf00      	nop
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	20000ad8 	.word	0x20000ad8

080041e0 <HAL_SAI_TxCpltCallback>:
/**
 * @brief  Tx Transfer completed callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	/* Manage the remaining file size and new address offset: This function
	 should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
	BSP_AUDIO_OUT_TransferComplete_CallBack();
 80041e8:	f7fe fa62 	bl	80026b0 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_SAI_TxHalfCpltCallback>:
/**
 * @brief  Tx Half Transfer completed callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	/* Manage the remaining file size and new address offset: This function
	 should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
	BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80041fc:	f7fe fa6a 	bl	80026d4 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8004200:	bf00      	nop
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_SAI_ErrorCallback>:
/**
 * @brief  SAI error callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
	HAL_SAI_StateTypeDef audio_out_state;
	HAL_SAI_StateTypeDef audio_in_state;

	audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8004210:	480e      	ldr	r0, [pc, #56]	@ (800424c <HAL_SAI_ErrorCallback+0x44>)
 8004212:	f008 fbdb 	bl	800c9cc <HAL_SAI_GetState>
 8004216:	4603      	mov	r3, r0
 8004218:	73fb      	strb	r3, [r7, #15]
	audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 800421a:	480d      	ldr	r0, [pc, #52]	@ (8004250 <HAL_SAI_ErrorCallback+0x48>)
 800421c:	f008 fbd6 	bl	800c9cc <HAL_SAI_GetState>
 8004220:	4603      	mov	r3, r0
 8004222:	73bb      	strb	r3, [r7, #14]

	/* Determines if it is an audio out or audio in error */
	if ((audio_out_state == HAL_SAI_STATE_BUSY)
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d002      	beq.n	8004230 <HAL_SAI_ErrorCallback+0x28>
			|| (audio_out_state == HAL_SAI_STATE_BUSY_TX)) {
 800422a:	7bfb      	ldrb	r3, [r7, #15]
 800422c:	2b12      	cmp	r3, #18
 800422e:	d101      	bne.n	8004234 <HAL_SAI_ErrorCallback+0x2c>
		BSP_AUDIO_OUT_Error_CallBack();
 8004230:	f000 f810 	bl	8004254 <BSP_AUDIO_OUT_Error_CallBack>
	}

	if ((audio_in_state == HAL_SAI_STATE_BUSY)
 8004234:	7bbb      	ldrb	r3, [r7, #14]
 8004236:	2b02      	cmp	r3, #2
 8004238:	d002      	beq.n	8004240 <HAL_SAI_ErrorCallback+0x38>
			|| (audio_in_state == HAL_SAI_STATE_BUSY_RX)) {
 800423a:	7bbb      	ldrb	r3, [r7, #14]
 800423c:	2b22      	cmp	r3, #34	@ 0x22
 800423e:	d101      	bne.n	8004244 <HAL_SAI_ErrorCallback+0x3c>
		BSP_AUDIO_IN_Error_CallBack();
 8004240:	f000 f9be 	bl	80045c0 <BSP_AUDIO_IN_Error_CallBack>
	}
}
 8004244:	bf00      	nop
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20000ad8 	.word	0x20000ad8
 8004250:	20000b5c 	.word	0x20000b5c

08004254 <BSP_AUDIO_OUT_Error_CallBack>:

/**
 * @brief  Manages the DMA FIFO error event.
 * @retval None
 */
__weak void BSP_AUDIO_OUT_Error_CallBack(void) {
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
}
 8004258:	bf00      	nop
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
	...

08004264 <BSP_AUDIO_OUT_MspInit>:
 * @brief  Initializes BSP_AUDIO_OUT MSP.
 * @param  hsai: SAI handle
 * @param  Params
 * @retval None
 */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params) {
 8004264:	b580      	push	{r7, lr}
 8004266:	b08c      	sub	sp, #48	@ 0x30
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_sai_tx;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable SAI clock */
	AUDIO_OUT_SAIx_CLK_ENABLE();
 800426e:	4b63      	ldr	r3, [pc, #396]	@ (80043fc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004272:	4a62      	ldr	r2, [pc, #392]	@ (80043fc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004274:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004278:	6453      	str	r3, [r2, #68]	@ 0x44
 800427a:	4b60      	ldr	r3, [pc, #384]	@ (80043fc <BSP_AUDIO_OUT_MspInit+0x198>)
 800427c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004282:	61bb      	str	r3, [r7, #24]
 8004284:	69bb      	ldr	r3, [r7, #24]

	/* Enable GPIO clock */
	AUDIO_OUT_SAIx_MCLK_ENABLE();
 8004286:	4b5d      	ldr	r3, [pc, #372]	@ (80043fc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428a:	4a5c      	ldr	r2, [pc, #368]	@ (80043fc <BSP_AUDIO_OUT_MspInit+0x198>)
 800428c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004290:	6313      	str	r3, [r2, #48]	@ 0x30
 8004292:	4b5a      	ldr	r3, [pc, #360]	@ (80043fc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	697b      	ldr	r3, [r7, #20]
	AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 800429e:	4b57      	ldr	r3, [pc, #348]	@ (80043fc <BSP_AUDIO_OUT_MspInit+0x198>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a2:	4a56      	ldr	r2, [pc, #344]	@ (80043fc <BSP_AUDIO_OUT_MspInit+0x198>)
 80042a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80042aa:	4b54      	ldr	r3, [pc, #336]	@ (80043fc <BSP_AUDIO_OUT_MspInit+0x198>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b2:	613b      	str	r3, [r7, #16]
 80042b4:	693b      	ldr	r3, [r7, #16]
	AUDIO_OUT_SAIx_FS_ENABLE();
 80042b6:	4b51      	ldr	r3, [pc, #324]	@ (80043fc <BSP_AUDIO_OUT_MspInit+0x198>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ba:	4a50      	ldr	r2, [pc, #320]	@ (80043fc <BSP_AUDIO_OUT_MspInit+0x198>)
 80042bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80042c2:	4b4e      	ldr	r3, [pc, #312]	@ (80043fc <BSP_AUDIO_OUT_MspInit+0x198>)
 80042c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
	/* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
	gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 80042ce:	2380      	movs	r3, #128	@ 0x80
 80042d0:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80042d2:	2302      	movs	r3, #2
 80042d4:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 80042d6:	2300      	movs	r3, #0
 80042d8:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80042da:	2303      	movs	r3, #3
 80042dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80042de:	230a      	movs	r3, #10
 80042e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80042e2:	f107 031c 	add.w	r3, r7, #28
 80042e6:	4619      	mov	r1, r3
 80042e8:	4845      	ldr	r0, [pc, #276]	@ (8004400 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80042ea:	f005 f9a7 	bl	800963c <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80042ee:	2320      	movs	r3, #32
 80042f0:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80042f2:	2302      	movs	r3, #2
 80042f4:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80042fa:	2303      	movs	r3, #3
 80042fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80042fe:	230a      	movs	r3, #10
 8004300:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8004302:	f107 031c 	add.w	r3, r7, #28
 8004306:	4619      	mov	r1, r3
 8004308:	483d      	ldr	r0, [pc, #244]	@ (8004400 <BSP_AUDIO_OUT_MspInit+0x19c>)
 800430a:	f005 f997 	bl	800963c <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_SD_PIN;
 800430e:	2340      	movs	r3, #64	@ 0x40
 8004310:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004312:	2302      	movs	r3, #2
 8004314:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8004316:	2300      	movs	r3, #0
 8004318:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800431a:	2303      	movs	r3, #3
 800431c:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800431e:	230a      	movs	r3, #10
 8004320:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8004322:	f107 031c 	add.w	r3, r7, #28
 8004326:	4619      	mov	r1, r3
 8004328:	4835      	ldr	r0, [pc, #212]	@ (8004400 <BSP_AUDIO_OUT_MspInit+0x19c>)
 800432a:	f005 f987 	bl	800963c <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800432e:	2310      	movs	r3, #16
 8004330:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004332:	2302      	movs	r3, #2
 8004334:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8004336:	2300      	movs	r3, #0
 8004338:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800433a:	2303      	movs	r3, #3
 800433c:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800433e:	230a      	movs	r3, #10
 8004340:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8004342:	f107 031c 	add.w	r3, r7, #28
 8004346:	4619      	mov	r1, r3
 8004348:	482d      	ldr	r0, [pc, #180]	@ (8004400 <BSP_AUDIO_OUT_MspInit+0x19c>)
 800434a:	f005 f977 	bl	800963c <HAL_GPIO_Init>

	/* Enable the DMA clock */
	AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800434e:	4b2b      	ldr	r3, [pc, #172]	@ (80043fc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004352:	4a2a      	ldr	r2, [pc, #168]	@ (80043fc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004354:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004358:	6313      	str	r3, [r2, #48]	@ 0x30
 800435a:	4b28      	ldr	r3, [pc, #160]	@ (80043fc <BSP_AUDIO_OUT_MspInit+0x198>)
 800435c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004362:	60bb      	str	r3, [r7, #8]
 8004364:	68bb      	ldr	r3, [r7, #8]

	if (hsai->Instance == AUDIO_OUT_SAIx) {
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a26      	ldr	r2, [pc, #152]	@ (8004404 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d138      	bne.n	80043e2 <BSP_AUDIO_OUT_MspInit+0x17e>
		/* Configure the hdma_saiTx handle parameters */
		hdma_sai_tx.Init.Channel = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8004370:	4b25      	ldr	r3, [pc, #148]	@ (8004408 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004372:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8004376:	605a      	str	r2, [r3, #4]
		hdma_sai_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004378:	4b23      	ldr	r3, [pc, #140]	@ (8004408 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800437a:	2240      	movs	r2, #64	@ 0x40
 800437c:	609a      	str	r2, [r3, #8]
		hdma_sai_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800437e:	4b22      	ldr	r3, [pc, #136]	@ (8004408 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004380:	2200      	movs	r2, #0
 8004382:	60da      	str	r2, [r3, #12]
		hdma_sai_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004384:	4b20      	ldr	r3, [pc, #128]	@ (8004408 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004386:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800438a:	611a      	str	r2, [r3, #16]
		hdma_sai_tx.Init.PeriphDataAlignment =
 800438c:	4b1e      	ldr	r3, [pc, #120]	@ (8004408 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800438e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004392:	615a      	str	r2, [r3, #20]
				AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
		hdma_sai_tx.Init.MemDataAlignment = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8004394:	4b1c      	ldr	r3, [pc, #112]	@ (8004408 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004396:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800439a:	619a      	str	r2, [r3, #24]
		hdma_sai_tx.Init.Mode = DMA_CIRCULAR;
 800439c:	4b1a      	ldr	r3, [pc, #104]	@ (8004408 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800439e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80043a2:	61da      	str	r2, [r3, #28]
		hdma_sai_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80043a4:	4b18      	ldr	r3, [pc, #96]	@ (8004408 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80043a6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80043aa:	621a      	str	r2, [r3, #32]
		hdma_sai_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80043ac:	4b16      	ldr	r3, [pc, #88]	@ (8004408 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80043ae:	2204      	movs	r2, #4
 80043b0:	625a      	str	r2, [r3, #36]	@ 0x24
		hdma_sai_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80043b2:	4b15      	ldr	r3, [pc, #84]	@ (8004408 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80043b4:	2203      	movs	r2, #3
 80043b6:	629a      	str	r2, [r3, #40]	@ 0x28
		hdma_sai_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80043b8:	4b13      	ldr	r3, [pc, #76]	@ (8004408 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	62da      	str	r2, [r3, #44]	@ 0x2c
		hdma_sai_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80043be:	4b12      	ldr	r3, [pc, #72]	@ (8004408 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	631a      	str	r2, [r3, #48]	@ 0x30

		hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80043c4:	4b10      	ldr	r3, [pc, #64]	@ (8004408 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80043c6:	4a11      	ldr	r2, [pc, #68]	@ (800440c <BSP_AUDIO_OUT_MspInit+0x1a8>)
 80043c8:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a0e      	ldr	r2, [pc, #56]	@ (8004408 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80043ce:	66da      	str	r2, [r3, #108]	@ 0x6c
 80043d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004408 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6393      	str	r3, [r2, #56]	@ 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_sai_tx);
 80043d6:	480c      	ldr	r0, [pc, #48]	@ (8004408 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80043d8:	f004 fa60 	bl	800889c <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_sai_tx);
 80043dc:	480a      	ldr	r0, [pc, #40]	@ (8004408 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80043de:	f004 f9af 	bl	8008740 <HAL_DMA_Init>
	}

	/* SAI DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80043e2:	2200      	movs	r2, #0
 80043e4:	210e      	movs	r1, #14
 80043e6:	203c      	movs	r0, #60	@ 0x3c
 80043e8:	f004 f980 	bl	80086ec <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 80043ec:	203c      	movs	r0, #60	@ 0x3c
 80043ee:	f004 f999 	bl	8008724 <HAL_NVIC_EnableIRQ>
}
 80043f2:	bf00      	nop
 80043f4:	3730      	adds	r7, #48	@ 0x30
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40023800 	.word	0x40023800
 8004400:	40022000 	.word	0x40022000
 8004404:	40015c04 	.word	0x40015c04
 8004408:	20000be0 	.word	0x20000be0
 800440c:	40026470 	.word	0x40026470

08004410 <BSP_AUDIO_OUT_ClockConfig>:
 * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
 *         Being __weak it can be overwritten by the application
 * @retval None
 */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai,
		uint32_t AudioFreq, void *Params) {
 8004410:	b580      	push	{r7, lr}
 8004412:	b0a6      	sub	sp, #152	@ 0x98
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
	RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

	HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 800441c:	f107 0314 	add.w	r3, r7, #20
 8004420:	4618      	mov	r0, r3
 8004422:	f007 fe23 	bl	800c06c <HAL_RCCEx_GetPeriphCLKConfig>

	/* Set the PLL configuration according to the audio frequency */
	if ((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K)
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800442c:	4293      	cmp	r3, r2
 800442e:	d009      	beq.n	8004444 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f245 6222 	movw	r2, #22050	@ 0x5622
 8004436:	4293      	cmp	r3, r2
 8004438:	d004      	beq.n	8004444 <BSP_AUDIO_OUT_ClockConfig+0x34>
			|| (AudioFreq == AUDIO_FREQUENCY_44K)) {
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8004440:	4293      	cmp	r3, r2
 8004442:	d112      	bne.n	800446a <BSP_AUDIO_OUT_ClockConfig+0x5a>
		/* Configure PLLI2S prescalers */
		/* PLLI2S_VCO: VCO_429M
		 I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
		 I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
		rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8004444:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004448:	617b      	str	r3, [r7, #20]
		rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 800444a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800444e:	657b      	str	r3, [r7, #84]	@ 0x54
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8004450:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8004454:	61bb      	str	r3, [r7, #24]
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8004456:	2302      	movs	r3, #2
 8004458:	623b      	str	r3, [r7, #32]
		rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 800445a:	2313      	movs	r3, #19
 800445c:	63bb      	str	r3, [r7, #56]	@ 0x38

		HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800445e:	f107 0314 	add.w	r3, r7, #20
 8004462:	4618      	mov	r0, r3
 8004464:	f007 fa12 	bl	800b88c <HAL_RCCEx_PeriphCLKConfig>
 8004468:	e012      	b.n	8004490 <BSP_AUDIO_OUT_ClockConfig+0x80>
	{
		/* I2S clock config
		 PLLI2S_VCO: VCO_344M
		 I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
		 I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
		rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800446a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800446e:	617b      	str	r3, [r7, #20]
		rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8004470:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004474:	657b      	str	r3, [r7, #84]	@ 0x54
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8004476:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 800447a:	61bb      	str	r3, [r7, #24]
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 800447c:	2307      	movs	r3, #7
 800447e:	623b      	str	r3, [r7, #32]
		rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8004480:	2301      	movs	r3, #1
 8004482:	63bb      	str	r3, [r7, #56]	@ 0x38

		HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004484:	f107 0314 	add.w	r3, r7, #20
 8004488:	4618      	mov	r0, r3
 800448a:	f007 f9ff 	bl	800b88c <HAL_RCCEx_PeriphCLKConfig>
	}
}
 800448e:	bf00      	nop
 8004490:	bf00      	nop
 8004492:	3798      	adds	r7, #152	@ 0x98
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <SAIx_Out_DeInit>:

/**
 * @brief  Deinitializes the output Audio Codec audio interface (SAI).
 * @retval None
 */
static void SAIx_Out_DeInit(void) {
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
	/* Initialize the haudio_out_sai Instance parameter */
	haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800449c:	4b07      	ldr	r3, [pc, #28]	@ (80044bc <SAIx_Out_DeInit+0x24>)
 800449e:	4a08      	ldr	r2, [pc, #32]	@ (80044c0 <SAIx_Out_DeInit+0x28>)
 80044a0:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 80044a2:	4b06      	ldr	r3, [pc, #24]	@ (80044bc <SAIx_Out_DeInit+0x24>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	4b04      	ldr	r3, [pc, #16]	@ (80044bc <SAIx_Out_DeInit+0x24>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80044b0:	601a      	str	r2, [r3, #0]

	HAL_SAI_DeInit(&haudio_out_sai);
 80044b2:	4802      	ldr	r0, [pc, #8]	@ (80044bc <SAIx_Out_DeInit+0x24>)
 80044b4:	f008 f9a4 	bl	800c800 <HAL_SAI_DeInit>
}
 80044b8:	bf00      	nop
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	20000ad8 	.word	0x20000ad8
 80044c0:	40015c04 	.word	0x40015c04

080044c4 <BSP_AUDIO_IN_OUT_Init>:
 * @param  BitRes: Audio frequency to be configured.
 * @param  ChnlNbr: Channel number.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_OUT_Init(uint16_t InputDevice, uint16_t OutputDevice,
		uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr) {
 80044c4:	b590      	push	{r4, r7, lr}
 80044c6:	b089      	sub	sp, #36	@ 0x24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60ba      	str	r2, [r7, #8]
 80044cc:	607b      	str	r3, [r7, #4]
 80044ce:	4603      	mov	r3, r0
 80044d0:	81fb      	strh	r3, [r7, #14]
 80044d2:	460b      	mov	r3, r1
 80044d4:	81bb      	strh	r3, [r7, #12]
	uint8_t ret = AUDIO_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	77fb      	strb	r3, [r7, #31]
	uint32_t deviceid = 0x00;
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]
	uint32_t slot_active;

	if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1)
 80044de:	89fb      	ldrh	r3, [r7, #14]
 80044e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044e4:	d006      	beq.n	80044f4 <BSP_AUDIO_IN_OUT_Init+0x30>
			&& (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2)) /* Only MICROPHONE_2 input supported */
 80044e6:	89fb      	ldrh	r3, [r7, #14]
 80044e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ec:	d002      	beq.n	80044f4 <BSP_AUDIO_IN_OUT_Init+0x30>
			{
		ret = AUDIO_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	77fb      	strb	r3, [r7, #31]
 80044f2:	e054      	b.n	800459e <BSP_AUDIO_IN_OUT_Init+0xda>
	} else {
		/* Disable SAI */
		SAIx_In_DeInit();
 80044f4:	f000 f9d4 	bl	80048a0 <SAIx_In_DeInit>
		SAIx_Out_DeInit();
 80044f8:	f7ff ffce 	bl	8004498 <SAIx_Out_DeInit>

		/* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
		BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 80044fc:	2200      	movs	r2, #0
 80044fe:	68b9      	ldr	r1, [r7, #8]
 8004500:	4829      	ldr	r0, [pc, #164]	@ (80045a8 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8004502:	f7ff ff85 	bl	8004410 <BSP_AUDIO_OUT_ClockConfig>

		/* SAI data transfer preparation:
		 Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
		haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004506:	4b28      	ldr	r3, [pc, #160]	@ (80045a8 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8004508:	4a28      	ldr	r2, [pc, #160]	@ (80045ac <BSP_AUDIO_IN_OUT_Init+0xe8>)
 800450a:	601a      	str	r2, [r3, #0]
		if (HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET) {
 800450c:	4826      	ldr	r0, [pc, #152]	@ (80045a8 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 800450e:	f008 fa5d 	bl	800c9cc <HAL_SAI_GetState>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d103      	bne.n	8004520 <BSP_AUDIO_IN_OUT_Init+0x5c>
			/* Init the SAI MSP: this __weak function can be redefined by the application*/
			BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8004518:	2100      	movs	r1, #0
 800451a:	4823      	ldr	r0, [pc, #140]	@ (80045a8 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 800451c:	f000 f858 	bl	80045d0 <BSP_AUDIO_IN_MspInit>
		}

		/* SAI data transfer preparation:
		 Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
		haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8004520:	4b23      	ldr	r3, [pc, #140]	@ (80045b0 <BSP_AUDIO_IN_OUT_Init+0xec>)
 8004522:	4a24      	ldr	r2, [pc, #144]	@ (80045b4 <BSP_AUDIO_IN_OUT_Init+0xf0>)
 8004524:	601a      	str	r2, [r3, #0]
		if (HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET) {
 8004526:	4822      	ldr	r0, [pc, #136]	@ (80045b0 <BSP_AUDIO_IN_OUT_Init+0xec>)
 8004528:	f008 fa50 	bl	800c9cc <HAL_SAI_GetState>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d103      	bne.n	800453a <BSP_AUDIO_IN_OUT_Init+0x76>
			/* Init the SAI MSP: this __weak function can be redefined by the application*/
			BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8004532:	2100      	movs	r1, #0
 8004534:	481e      	ldr	r0, [pc, #120]	@ (80045b0 <BSP_AUDIO_IN_OUT_Init+0xec>)
 8004536:	f7ff fe95 	bl	8004264 <BSP_AUDIO_OUT_MspInit>

		/* Configure SAI in master mode :
		 *   - SAI2_block_A in master TX mode
		 *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
		 */
		if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2) {
 800453a:	89fb      	ldrh	r3, [r7, #14]
 800453c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004540:	d102      	bne.n	8004548 <BSP_AUDIO_IN_OUT_Init+0x84>
			slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8004542:	230a      	movs	r3, #10
 8004544:	61bb      	str	r3, [r7, #24]
 8004546:	e001      	b.n	800454c <BSP_AUDIO_IN_OUT_Init+0x88>
		} else {
			slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8004548:	2305      	movs	r3, #5
 800454a:	61bb      	str	r3, [r7, #24]
		}
		SAIx_In_Init(SAI_MODEMASTER_TX, slot_active, AudioFreq);
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	69b9      	ldr	r1, [r7, #24]
 8004550:	2000      	movs	r0, #0
 8004552:	f000 f8ef 	bl	8004734 <SAIx_In_Init>

		/* wm8994 codec initialization */
		deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8004556:	4b18      	ldr	r3, [pc, #96]	@ (80045b8 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	2034      	movs	r0, #52	@ 0x34
 800455c:	4798      	blx	r3
 800455e:	6178      	str	r0, [r7, #20]

		if ((deviceid) == WM8994_ID) {
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f648 1294 	movw	r2, #35220	@ 0x8994
 8004566:	4293      	cmp	r3, r2
 8004568:	d109      	bne.n	800457e <BSP_AUDIO_IN_OUT_Init+0xba>
			/* Reset the Codec Registers */
			wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800456a:	4b13      	ldr	r3, [pc, #76]	@ (80045b8 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 800456c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800456e:	2034      	movs	r0, #52	@ 0x34
 8004570:	4798      	blx	r3
			/* Initialize the audio driver structure */
			audio_drv = &wm8994_drv;
 8004572:	4b12      	ldr	r3, [pc, #72]	@ (80045bc <BSP_AUDIO_IN_OUT_Init+0xf8>)
 8004574:	4a10      	ldr	r2, [pc, #64]	@ (80045b8 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 8004576:	601a      	str	r2, [r3, #0]
			ret = AUDIO_OK;
 8004578:	2300      	movs	r3, #0
 800457a:	77fb      	strb	r3, [r7, #31]
 800457c:	e001      	b.n	8004582 <BSP_AUDIO_IN_OUT_Init+0xbe>
		} else {
			ret = AUDIO_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	77fb      	strb	r3, [r7, #31]
		}

		if (ret == AUDIO_OK) {
 8004582:	7ffb      	ldrb	r3, [r7, #31]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10a      	bne.n	800459e <BSP_AUDIO_IN_OUT_Init+0xda>
			/* Initialize the codec internal registers */
			audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice | OutputDevice, 100,
 8004588:	4b0c      	ldr	r3, [pc, #48]	@ (80045bc <BSP_AUDIO_IN_OUT_Init+0xf8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681c      	ldr	r4, [r3, #0]
 800458e:	89fa      	ldrh	r2, [r7, #14]
 8004590:	89bb      	ldrh	r3, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	b299      	uxth	r1, r3
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2264      	movs	r2, #100	@ 0x64
 800459a:	2034      	movs	r0, #52	@ 0x34
 800459c:	47a0      	blx	r4
					AudioFreq);
		}
	}
	return ret;
 800459e:	7ffb      	ldrb	r3, [r7, #31]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3724      	adds	r7, #36	@ 0x24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd90      	pop	{r4, r7, pc}
 80045a8:	20000b5c 	.word	0x20000b5c
 80045ac:	40015c24 	.word	0x40015c24
 80045b0:	20000ad8 	.word	0x20000ad8
 80045b4:	40015c04 	.word	0x40015c04
 80045b8:	20000050 	.word	0x20000050
 80045bc:	20000ad4 	.word	0x20000ad4

080045c0 <BSP_AUDIO_IN_Error_CallBack>:

/**
 * @brief  Audio IN Error callback function.
 * @retval None
 */
__weak void BSP_AUDIO_IN_Error_CallBack(void) {
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
	/* This function is called when an Interrupt due to transfer error on or peripheral
	 error occurs. */
}
 80045c4:	bf00      	nop
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
	...

080045d0 <BSP_AUDIO_IN_MspInit>:
 * @brief  Initializes BSP_AUDIO_IN MSP.
 * @param  hsai: SAI handle
 * @param  Params
 * @retval None
 */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params) {
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08c      	sub	sp, #48	@ 0x30
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_sai_rx;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable SAI clock */
	AUDIO_IN_SAIx_CLK_ENABLE();
 80045da:	4b50      	ldr	r3, [pc, #320]	@ (800471c <BSP_AUDIO_IN_MspInit+0x14c>)
 80045dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045de:	4a4f      	ldr	r2, [pc, #316]	@ (800471c <BSP_AUDIO_IN_MspInit+0x14c>)
 80045e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80045e6:	4b4d      	ldr	r3, [pc, #308]	@ (800471c <BSP_AUDIO_IN_MspInit+0x14c>)
 80045e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045ee:	61bb      	str	r3, [r7, #24]
 80045f0:	69bb      	ldr	r3, [r7, #24]

	/* Enable SD GPIO clock */
	AUDIO_IN_SAIx_SD_ENABLE();
 80045f2:	4b4a      	ldr	r3, [pc, #296]	@ (800471c <BSP_AUDIO_IN_MspInit+0x14c>)
 80045f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f6:	4a49      	ldr	r2, [pc, #292]	@ (800471c <BSP_AUDIO_IN_MspInit+0x14c>)
 80045f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80045fe:	4b47      	ldr	r3, [pc, #284]	@ (800471c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	697b      	ldr	r3, [r7, #20]
	/* CODEC_SAI pin configuration: SD pin */
	gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800460a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800460e:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004610:	2302      	movs	r3, #2
 8004612:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8004614:	2300      	movs	r3, #0
 8004616:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004618:	2302      	movs	r3, #2
 800461a:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 800461c:	230a      	movs	r3, #10
 800461e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8004620:	f107 031c 	add.w	r3, r7, #28
 8004624:	4619      	mov	r1, r3
 8004626:	483e      	ldr	r0, [pc, #248]	@ (8004720 <BSP_AUDIO_IN_MspInit+0x150>)
 8004628:	f005 f808 	bl	800963c <HAL_GPIO_Init>

	/* Enable Audio INT GPIO clock */
	AUDIO_IN_INT_GPIO_ENABLE();
 800462c:	4b3b      	ldr	r3, [pc, #236]	@ (800471c <BSP_AUDIO_IN_MspInit+0x14c>)
 800462e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004630:	4a3a      	ldr	r2, [pc, #232]	@ (800471c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004636:	6313      	str	r3, [r2, #48]	@ 0x30
 8004638:	4b38      	ldr	r3, [pc, #224]	@ (800471c <BSP_AUDIO_IN_MspInit+0x14c>)
 800463a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	693b      	ldr	r3, [r7, #16]
	/* Audio INT pin configuration: input */
	gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8004644:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004648:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800464a:	2300      	movs	r3, #0
 800464c:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800464e:	2300      	movs	r3, #0
 8004650:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004652:	2302      	movs	r3, #2
 8004654:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8004656:	f107 031c 	add.w	r3, r7, #28
 800465a:	4619      	mov	r1, r3
 800465c:	4831      	ldr	r0, [pc, #196]	@ (8004724 <BSP_AUDIO_IN_MspInit+0x154>)
 800465e:	f004 ffed 	bl	800963c <HAL_GPIO_Init>

	/* Enable the DMA clock */
	AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8004662:	4b2e      	ldr	r3, [pc, #184]	@ (800471c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004666:	4a2d      	ldr	r2, [pc, #180]	@ (800471c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004668:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800466c:	6313      	str	r3, [r2, #48]	@ 0x30
 800466e:	4b2b      	ldr	r3, [pc, #172]	@ (800471c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	68fb      	ldr	r3, [r7, #12]

	if (hsai->Instance == AUDIO_IN_SAIx) {
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a2a      	ldr	r2, [pc, #168]	@ (8004728 <BSP_AUDIO_IN_MspInit+0x158>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d137      	bne.n	80046f4 <BSP_AUDIO_IN_MspInit+0x124>
		/* Configure the hdma_sai_rx handle parameters */
		hdma_sai_rx.Init.Channel = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8004684:	4b29      	ldr	r3, [pc, #164]	@ (800472c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004686:	2200      	movs	r2, #0
 8004688:	605a      	str	r2, [r3, #4]
		hdma_sai_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800468a:	4b28      	ldr	r3, [pc, #160]	@ (800472c <BSP_AUDIO_IN_MspInit+0x15c>)
 800468c:	2200      	movs	r2, #0
 800468e:	609a      	str	r2, [r3, #8]
		hdma_sai_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004690:	4b26      	ldr	r3, [pc, #152]	@ (800472c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004692:	2200      	movs	r2, #0
 8004694:	60da      	str	r2, [r3, #12]
		hdma_sai_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004696:	4b25      	ldr	r3, [pc, #148]	@ (800472c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004698:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800469c:	611a      	str	r2, [r3, #16]
		hdma_sai_rx.Init.PeriphDataAlignment =
 800469e:	4b23      	ldr	r3, [pc, #140]	@ (800472c <BSP_AUDIO_IN_MspInit+0x15c>)
 80046a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80046a4:	615a      	str	r2, [r3, #20]
				AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
		hdma_sai_rx.Init.MemDataAlignment = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 80046a6:	4b21      	ldr	r3, [pc, #132]	@ (800472c <BSP_AUDIO_IN_MspInit+0x15c>)
 80046a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80046ac:	619a      	str	r2, [r3, #24]
		hdma_sai_rx.Init.Mode = DMA_CIRCULAR;
 80046ae:	4b1f      	ldr	r3, [pc, #124]	@ (800472c <BSP_AUDIO_IN_MspInit+0x15c>)
 80046b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046b4:	61da      	str	r2, [r3, #28]
		hdma_sai_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80046b6:	4b1d      	ldr	r3, [pc, #116]	@ (800472c <BSP_AUDIO_IN_MspInit+0x15c>)
 80046b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80046bc:	621a      	str	r2, [r3, #32]
		hdma_sai_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046be:	4b1b      	ldr	r3, [pc, #108]	@ (800472c <BSP_AUDIO_IN_MspInit+0x15c>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	625a      	str	r2, [r3, #36]	@ 0x24
		hdma_sai_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80046c4:	4b19      	ldr	r3, [pc, #100]	@ (800472c <BSP_AUDIO_IN_MspInit+0x15c>)
 80046c6:	2203      	movs	r2, #3
 80046c8:	629a      	str	r2, [r3, #40]	@ 0x28
		hdma_sai_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80046ca:	4b18      	ldr	r3, [pc, #96]	@ (800472c <BSP_AUDIO_IN_MspInit+0x15c>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	62da      	str	r2, [r3, #44]	@ 0x2c
		hdma_sai_rx.Init.PeriphBurst = DMA_MBURST_SINGLE;
 80046d0:	4b16      	ldr	r3, [pc, #88]	@ (800472c <BSP_AUDIO_IN_MspInit+0x15c>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	631a      	str	r2, [r3, #48]	@ 0x30

		hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 80046d6:	4b15      	ldr	r3, [pc, #84]	@ (800472c <BSP_AUDIO_IN_MspInit+0x15c>)
 80046d8:	4a15      	ldr	r2, [pc, #84]	@ (8004730 <BSP_AUDIO_IN_MspInit+0x160>)
 80046da:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a13      	ldr	r2, [pc, #76]	@ (800472c <BSP_AUDIO_IN_MspInit+0x15c>)
 80046e0:	671a      	str	r2, [r3, #112]	@ 0x70
 80046e2:	4a12      	ldr	r2, [pc, #72]	@ (800472c <BSP_AUDIO_IN_MspInit+0x15c>)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6393      	str	r3, [r2, #56]	@ 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_sai_rx);
 80046e8:	4810      	ldr	r0, [pc, #64]	@ (800472c <BSP_AUDIO_IN_MspInit+0x15c>)
 80046ea:	f004 f8d7 	bl	800889c <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_sai_rx);
 80046ee:	480f      	ldr	r0, [pc, #60]	@ (800472c <BSP_AUDIO_IN_MspInit+0x15c>)
 80046f0:	f004 f826 	bl	8008740 <HAL_DMA_Init>
	}

	/* SAI DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80046f4:	2200      	movs	r2, #0
 80046f6:	210f      	movs	r1, #15
 80046f8:	2046      	movs	r0, #70	@ 0x46
 80046fa:	f003 fff7 	bl	80086ec <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 80046fe:	2046      	movs	r0, #70	@ 0x46
 8004700:	f004 f810 	bl	8008724 <HAL_NVIC_EnableIRQ>

	/* Audio INT IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8004704:	2200      	movs	r2, #0
 8004706:	210f      	movs	r1, #15
 8004708:	2028      	movs	r0, #40	@ 0x28
 800470a:	f003 ffef 	bl	80086ec <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 800470e:	2028      	movs	r0, #40	@ 0x28
 8004710:	f004 f808 	bl	8008724 <HAL_NVIC_EnableIRQ>
}
 8004714:	bf00      	nop
 8004716:	3730      	adds	r7, #48	@ 0x30
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40023800 	.word	0x40023800
 8004720:	40021800 	.word	0x40021800
 8004724:	40021c00 	.word	0x40021c00
 8004728:	40015c24 	.word	0x40015c24
 800472c:	20000c40 	.word	0x20000c40
 8004730:	400264b8 	.word	0x400264b8

08004734 <SAIx_In_Init>:
 * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
 * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
 * @retval None
 */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive,
		uint32_t AudioFreq) {
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
	/* Initialize SAI2 block A in MASTER RX */
	/* Initialize the haudio_out_sai Instance parameter */
	haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8004740:	4b53      	ldr	r3, [pc, #332]	@ (8004890 <SAIx_In_Init+0x15c>)
 8004742:	4a54      	ldr	r2, [pc, #336]	@ (8004894 <SAIx_In_Init+0x160>)
 8004744:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 8004746:	4b52      	ldr	r3, [pc, #328]	@ (8004890 <SAIx_In_Init+0x15c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	4b50      	ldr	r3, [pc, #320]	@ (8004890 <SAIx_In_Init+0x15c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004754:	601a      	str	r2, [r3, #0]

	/* Configure SAI_Block_x
	 LSBFirst: Disabled
	 DataSize: 16 */
	haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8004756:	4a4e      	ldr	r2, [pc, #312]	@ (8004890 <SAIx_In_Init+0x15c>)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	61d3      	str	r3, [r2, #28]
	haudio_out_sai.Init.AudioMode = SaiOutMode;
 800475c:	4a4c      	ldr	r2, [pc, #304]	@ (8004890 <SAIx_In_Init+0x15c>)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6053      	str	r3, [r2, #4]
	haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8004762:	4b4b      	ldr	r3, [pc, #300]	@ (8004890 <SAIx_In_Init+0x15c>)
 8004764:	2200      	movs	r2, #0
 8004766:	615a      	str	r2, [r3, #20]
	haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8004768:	4b49      	ldr	r3, [pc, #292]	@ (8004890 <SAIx_In_Init+0x15c>)
 800476a:	2200      	movs	r2, #0
 800476c:	631a      	str	r2, [r3, #48]	@ 0x30
	haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 800476e:	4b48      	ldr	r3, [pc, #288]	@ (8004890 <SAIx_In_Init+0x15c>)
 8004770:	2280      	movs	r2, #128	@ 0x80
 8004772:	635a      	str	r2, [r3, #52]	@ 0x34
	haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004774:	4b46      	ldr	r3, [pc, #280]	@ (8004890 <SAIx_In_Init+0x15c>)
 8004776:	2200      	movs	r2, #0
 8004778:	639a      	str	r2, [r3, #56]	@ 0x38
	haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800477a:	4b45      	ldr	r3, [pc, #276]	@ (8004890 <SAIx_In_Init+0x15c>)
 800477c:	2201      	movs	r2, #1
 800477e:	63da      	str	r2, [r3, #60]	@ 0x3c
	haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8004780:	4b43      	ldr	r3, [pc, #268]	@ (8004890 <SAIx_In_Init+0x15c>)
 8004782:	2200      	movs	r2, #0
 8004784:	609a      	str	r2, [r3, #8]
	haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8004786:	4b42      	ldr	r3, [pc, #264]	@ (8004890 <SAIx_In_Init+0x15c>)
 8004788:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800478c:	611a      	str	r2, [r3, #16]
	haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800478e:	4b40      	ldr	r3, [pc, #256]	@ (8004890 <SAIx_In_Init+0x15c>)
 8004790:	2201      	movs	r2, #1
 8004792:	619a      	str	r2, [r3, #24]
	 Frame Length: 64
	 Frame active Length: 32
	 FS Definition: Start frame + Channel Side identification
	 FS Polarity: FS active Low
	 FS Offset: FS asserted one bit before the first bit of slot 0 */
	haudio_out_sai.FrameInit.FrameLength = 64;
 8004794:	4b3e      	ldr	r3, [pc, #248]	@ (8004890 <SAIx_In_Init+0x15c>)
 8004796:	2240      	movs	r2, #64	@ 0x40
 8004798:	641a      	str	r2, [r3, #64]	@ 0x40
	haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800479a:	4b3d      	ldr	r3, [pc, #244]	@ (8004890 <SAIx_In_Init+0x15c>)
 800479c:	2220      	movs	r2, #32
 800479e:	645a      	str	r2, [r3, #68]	@ 0x44
	haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80047a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004890 <SAIx_In_Init+0x15c>)
 80047a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80047a6:	649a      	str	r2, [r3, #72]	@ 0x48
	haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80047a8:	4b39      	ldr	r3, [pc, #228]	@ (8004890 <SAIx_In_Init+0x15c>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	64da      	str	r2, [r3, #76]	@ 0x4c
	haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80047ae:	4b38      	ldr	r3, [pc, #224]	@ (8004890 <SAIx_In_Init+0x15c>)
 80047b0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80047b4:	651a      	str	r2, [r3, #80]	@ 0x50
	/* Configure SAI Block_x Slot
	 Slot First Bit Offset: 0
	 Slot Size  : 16
	 Slot Number: 4
	 Slot Active: All slot actives */
	haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80047b6:	4b36      	ldr	r3, [pc, #216]	@ (8004890 <SAIx_In_Init+0x15c>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	655a      	str	r2, [r3, #84]	@ 0x54
	haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80047bc:	4b34      	ldr	r3, [pc, #208]	@ (8004890 <SAIx_In_Init+0x15c>)
 80047be:	2200      	movs	r2, #0
 80047c0:	659a      	str	r2, [r3, #88]	@ 0x58
	haudio_out_sai.SlotInit.SlotNumber = 4;
 80047c2:	4b33      	ldr	r3, [pc, #204]	@ (8004890 <SAIx_In_Init+0x15c>)
 80047c4:	2204      	movs	r2, #4
 80047c6:	65da      	str	r2, [r3, #92]	@ 0x5c
	haudio_out_sai.SlotInit.SlotActive = SlotActive;
 80047c8:	4a31      	ldr	r2, [pc, #196]	@ (8004890 <SAIx_In_Init+0x15c>)
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	6613      	str	r3, [r2, #96]	@ 0x60

	HAL_SAI_Init(&haudio_out_sai);
 80047ce:	4830      	ldr	r0, [pc, #192]	@ (8004890 <SAIx_In_Init+0x15c>)
 80047d0:	f007 fe98 	bl	800c504 <HAL_SAI_Init>

	/* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
	/* Initialize the haudio_in_sai Instance parameter */
	haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80047d4:	4b30      	ldr	r3, [pc, #192]	@ (8004898 <SAIx_In_Init+0x164>)
 80047d6:	4a31      	ldr	r2, [pc, #196]	@ (800489c <SAIx_In_Init+0x168>)
 80047d8:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_in_sai);
 80047da:	4b2f      	ldr	r3, [pc, #188]	@ (8004898 <SAIx_In_Init+0x164>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	4b2d      	ldr	r3, [pc, #180]	@ (8004898 <SAIx_In_Init+0x164>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80047e8:	601a      	str	r2, [r3, #0]

	/* Configure SAI_Block_x
	 LSBFirst: Disabled
	 DataSize: 16 */
	haudio_in_sai.Init.AudioFrequency = AudioFreq;
 80047ea:	4a2b      	ldr	r2, [pc, #172]	@ (8004898 <SAIx_In_Init+0x164>)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	61d3      	str	r3, [r2, #28]
	haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 80047f0:	4b29      	ldr	r3, [pc, #164]	@ (8004898 <SAIx_In_Init+0x164>)
 80047f2:	2203      	movs	r2, #3
 80047f4:	605a      	str	r2, [r3, #4]
	haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80047f6:	4b28      	ldr	r3, [pc, #160]	@ (8004898 <SAIx_In_Init+0x164>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	615a      	str	r2, [r3, #20]
	haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80047fc:	4b26      	ldr	r3, [pc, #152]	@ (8004898 <SAIx_In_Init+0x164>)
 80047fe:	2200      	movs	r2, #0
 8004800:	631a      	str	r2, [r3, #48]	@ 0x30
	haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8004802:	4b25      	ldr	r3, [pc, #148]	@ (8004898 <SAIx_In_Init+0x164>)
 8004804:	2280      	movs	r2, #128	@ 0x80
 8004806:	635a      	str	r2, [r3, #52]	@ 0x34
	haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004808:	4b23      	ldr	r3, [pc, #140]	@ (8004898 <SAIx_In_Init+0x164>)
 800480a:	2200      	movs	r2, #0
 800480c:	639a      	str	r2, [r3, #56]	@ 0x38
	haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800480e:	4b22      	ldr	r3, [pc, #136]	@ (8004898 <SAIx_In_Init+0x164>)
 8004810:	2201      	movs	r2, #1
 8004812:	63da      	str	r2, [r3, #60]	@ 0x3c
	haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8004814:	4b20      	ldr	r3, [pc, #128]	@ (8004898 <SAIx_In_Init+0x164>)
 8004816:	2201      	movs	r2, #1
 8004818:	609a      	str	r2, [r3, #8]
	haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 800481a:	4b1f      	ldr	r3, [pc, #124]	@ (8004898 <SAIx_In_Init+0x164>)
 800481c:	2200      	movs	r2, #0
 800481e:	611a      	str	r2, [r3, #16]
	haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8004820:	4b1d      	ldr	r3, [pc, #116]	@ (8004898 <SAIx_In_Init+0x164>)
 8004822:	2201      	movs	r2, #1
 8004824:	619a      	str	r2, [r3, #24]
	 Frame Length: 64
	 Frame active Length: 32
	 FS Definition: Start frame + Channel Side identification
	 FS Polarity: FS active Low
	 FS Offset: FS asserted one bit before the first bit of slot 0 */
	haudio_in_sai.FrameInit.FrameLength = 64;
 8004826:	4b1c      	ldr	r3, [pc, #112]	@ (8004898 <SAIx_In_Init+0x164>)
 8004828:	2240      	movs	r2, #64	@ 0x40
 800482a:	641a      	str	r2, [r3, #64]	@ 0x40
	haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 800482c:	4b1a      	ldr	r3, [pc, #104]	@ (8004898 <SAIx_In_Init+0x164>)
 800482e:	2220      	movs	r2, #32
 8004830:	645a      	str	r2, [r3, #68]	@ 0x44
	haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8004832:	4b19      	ldr	r3, [pc, #100]	@ (8004898 <SAIx_In_Init+0x164>)
 8004834:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004838:	649a      	str	r2, [r3, #72]	@ 0x48
	haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800483a:	4b17      	ldr	r3, [pc, #92]	@ (8004898 <SAIx_In_Init+0x164>)
 800483c:	2200      	movs	r2, #0
 800483e:	64da      	str	r2, [r3, #76]	@ 0x4c
	haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8004840:	4b15      	ldr	r3, [pc, #84]	@ (8004898 <SAIx_In_Init+0x164>)
 8004842:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004846:	651a      	str	r2, [r3, #80]	@ 0x50
	/* Configure SAI Block_x Slot
	 Slot First Bit Offset: 0
	 Slot Size  : 16
	 Slot Number: 4
	 Slot Active: All slot active */
	haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8004848:	4b13      	ldr	r3, [pc, #76]	@ (8004898 <SAIx_In_Init+0x164>)
 800484a:	2200      	movs	r2, #0
 800484c:	655a      	str	r2, [r3, #84]	@ 0x54
	haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800484e:	4b12      	ldr	r3, [pc, #72]	@ (8004898 <SAIx_In_Init+0x164>)
 8004850:	2200      	movs	r2, #0
 8004852:	659a      	str	r2, [r3, #88]	@ 0x58
	haudio_in_sai.SlotInit.SlotNumber = 4;
 8004854:	4b10      	ldr	r3, [pc, #64]	@ (8004898 <SAIx_In_Init+0x164>)
 8004856:	2204      	movs	r2, #4
 8004858:	65da      	str	r2, [r3, #92]	@ 0x5c
	haudio_in_sai.SlotInit.SlotActive = SlotActive;
 800485a:	4a0f      	ldr	r2, [pc, #60]	@ (8004898 <SAIx_In_Init+0x164>)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	6613      	str	r3, [r2, #96]	@ 0x60

	HAL_SAI_Init(&haudio_in_sai);
 8004860:	480d      	ldr	r0, [pc, #52]	@ (8004898 <SAIx_In_Init+0x164>)
 8004862:	f007 fe4f 	bl	800c504 <HAL_SAI_Init>

	/* Enable SAI peripheral to generate MCLK */
	__HAL_SAI_ENABLE(&haudio_out_sai);
 8004866:	4b0a      	ldr	r3, [pc, #40]	@ (8004890 <SAIx_In_Init+0x15c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	4b08      	ldr	r3, [pc, #32]	@ (8004890 <SAIx_In_Init+0x15c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004874:	601a      	str	r2, [r3, #0]

	/* Enable SAI peripheral */
	__HAL_SAI_ENABLE(&haudio_in_sai);
 8004876:	4b08      	ldr	r3, [pc, #32]	@ (8004898 <SAIx_In_Init+0x164>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	4b06      	ldr	r3, [pc, #24]	@ (8004898 <SAIx_In_Init+0x164>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004884:	601a      	str	r2, [r3, #0]
}
 8004886:	bf00      	nop
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	20000ad8 	.word	0x20000ad8
 8004894:	40015c04 	.word	0x40015c04
 8004898:	20000b5c 	.word	0x20000b5c
 800489c:	40015c24 	.word	0x40015c24

080048a0 <SAIx_In_DeInit>:

/**
 * @brief  Deinitializes the output Audio Codec audio interface (SAI).
 * @retval None
 */
static void SAIx_In_DeInit(void) {
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
	/* Initialize the haudio_in_sai Instance parameter */
	haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80048a4:	4b07      	ldr	r3, [pc, #28]	@ (80048c4 <SAIx_In_DeInit+0x24>)
 80048a6:	4a08      	ldr	r2, [pc, #32]	@ (80048c8 <SAIx_In_DeInit+0x28>)
 80048a8:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral */
	__HAL_SAI_DISABLE(&haudio_in_sai);
 80048aa:	4b06      	ldr	r3, [pc, #24]	@ (80048c4 <SAIx_In_DeInit+0x24>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	4b04      	ldr	r3, [pc, #16]	@ (80048c4 <SAIx_In_DeInit+0x24>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80048b8:	601a      	str	r2, [r3, #0]

	HAL_SAI_DeInit(&haudio_in_sai);
 80048ba:	4802      	ldr	r0, [pc, #8]	@ (80048c4 <SAIx_In_DeInit+0x24>)
 80048bc:	f007 ffa0 	bl	800c800 <HAL_SAI_DeInit>
}
 80048c0:	bf00      	nop
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	20000b5c 	.word	0x20000b5c
 80048c8:	40015c24 	.word	0x40015c24

080048cc <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80048d0:	4b31      	ldr	r3, [pc, #196]	@ (8004998 <BSP_LCD_Init+0xcc>)
 80048d2:	2228      	movs	r2, #40	@ 0x28
 80048d4:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80048d6:	4b30      	ldr	r3, [pc, #192]	@ (8004998 <BSP_LCD_Init+0xcc>)
 80048d8:	2209      	movs	r2, #9
 80048da:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80048dc:	4b2e      	ldr	r3, [pc, #184]	@ (8004998 <BSP_LCD_Init+0xcc>)
 80048de:	2235      	movs	r2, #53	@ 0x35
 80048e0:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80048e2:	4b2d      	ldr	r3, [pc, #180]	@ (8004998 <BSP_LCD_Init+0xcc>)
 80048e4:	220b      	movs	r2, #11
 80048e6:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80048e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004998 <BSP_LCD_Init+0xcc>)
 80048ea:	f240 121b 	movw	r2, #283	@ 0x11b
 80048ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80048f0:	4b29      	ldr	r3, [pc, #164]	@ (8004998 <BSP_LCD_Init+0xcc>)
 80048f2:	f240 2215 	movw	r2, #533	@ 0x215
 80048f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80048f8:	4b27      	ldr	r3, [pc, #156]	@ (8004998 <BSP_LCD_Init+0xcc>)
 80048fa:	f240 121d 	movw	r2, #285	@ 0x11d
 80048fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8004900:	4b25      	ldr	r3, [pc, #148]	@ (8004998 <BSP_LCD_Init+0xcc>)
 8004902:	f240 2235 	movw	r2, #565	@ 0x235
 8004906:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8004908:	2100      	movs	r1, #0
 800490a:	4823      	ldr	r0, [pc, #140]	@ (8004998 <BSP_LCD_Init+0xcc>)
 800490c:	f000 fd30 	bl	8005370 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8004910:	4b21      	ldr	r3, [pc, #132]	@ (8004998 <BSP_LCD_Init+0xcc>)
 8004912:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8004916:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8004918:	4b1f      	ldr	r3, [pc, #124]	@ (8004998 <BSP_LCD_Init+0xcc>)
 800491a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800491e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8004920:	4b1d      	ldr	r3, [pc, #116]	@ (8004998 <BSP_LCD_Init+0xcc>)
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8004928:	4b1b      	ldr	r3, [pc, #108]	@ (8004998 <BSP_LCD_Init+0xcc>)
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8004930:	4b19      	ldr	r3, [pc, #100]	@ (8004998 <BSP_LCD_Init+0xcc>)
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004938:	4b17      	ldr	r3, [pc, #92]	@ (8004998 <BSP_LCD_Init+0xcc>)
 800493a:	2200      	movs	r2, #0
 800493c:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800493e:	4b16      	ldr	r3, [pc, #88]	@ (8004998 <BSP_LCD_Init+0xcc>)
 8004940:	2200      	movs	r2, #0
 8004942:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8004944:	4b14      	ldr	r3, [pc, #80]	@ (8004998 <BSP_LCD_Init+0xcc>)
 8004946:	2200      	movs	r2, #0
 8004948:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800494a:	4b13      	ldr	r3, [pc, #76]	@ (8004998 <BSP_LCD_Init+0xcc>)
 800494c:	2200      	movs	r2, #0
 800494e:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8004950:	4b11      	ldr	r3, [pc, #68]	@ (8004998 <BSP_LCD_Init+0xcc>)
 8004952:	4a12      	ldr	r2, [pc, #72]	@ (800499c <BSP_LCD_Init+0xd0>)
 8004954:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8004956:	4810      	ldr	r0, [pc, #64]	@ (8004998 <BSP_LCD_Init+0xcc>)
 8004958:	f006 f8d4 	bl	800ab04 <HAL_LTDC_GetState>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d103      	bne.n	800496a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8004962:	2100      	movs	r1, #0
 8004964:	480c      	ldr	r0, [pc, #48]	@ (8004998 <BSP_LCD_Init+0xcc>)
 8004966:	f000 fc29 	bl	80051bc <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800496a:	480b      	ldr	r0, [pc, #44]	@ (8004998 <BSP_LCD_Init+0xcc>)
 800496c:	f005 fefa 	bl	800a764 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8004970:	2201      	movs	r2, #1
 8004972:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004976:	480a      	ldr	r0, [pc, #40]	@ (80049a0 <BSP_LCD_Init+0xd4>)
 8004978:	f005 f930 	bl	8009bdc <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800497c:	2201      	movs	r2, #1
 800497e:	2108      	movs	r1, #8
 8004980:	4808      	ldr	r0, [pc, #32]	@ (80049a4 <BSP_LCD_Init+0xd8>)
 8004982:	f005 f92b 	bl	8009bdc <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8004986:	f000 fe57 	bl	8005638 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800498a:	4807      	ldr	r0, [pc, #28]	@ (80049a8 <BSP_LCD_Init+0xdc>)
 800498c:	f000 f8d8 	bl	8004b40 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	20000ca0 	.word	0x20000ca0
 800499c:	40016800 	.word	0x40016800
 80049a0:	40022000 	.word	0x40022000
 80049a4:	40022800 	.word	0x40022800
 80049a8:	20000038 	.word	0x20000038

080049ac <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80049b0:	4b06      	ldr	r3, [pc, #24]	@ (80049cc <BSP_LCD_GetXSize+0x20>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a06      	ldr	r2, [pc, #24]	@ (80049d0 <BSP_LCD_GetXSize+0x24>)
 80049b6:	2134      	movs	r1, #52	@ 0x34
 80049b8:	fb01 f303 	mul.w	r3, r1, r3
 80049bc:	4413      	add	r3, r2
 80049be:	3360      	adds	r3, #96	@ 0x60
 80049c0:	681b      	ldr	r3, [r3, #0]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	20000d88 	.word	0x20000d88
 80049d0:	20000ca0 	.word	0x20000ca0

080049d4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80049d8:	4b06      	ldr	r3, [pc, #24]	@ (80049f4 <BSP_LCD_GetYSize+0x20>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a06      	ldr	r2, [pc, #24]	@ (80049f8 <BSP_LCD_GetYSize+0x24>)
 80049de:	2134      	movs	r1, #52	@ 0x34
 80049e0:	fb01 f303 	mul.w	r3, r1, r3
 80049e4:	4413      	add	r3, r2
 80049e6:	3364      	adds	r3, #100	@ 0x64
 80049e8:	681b      	ldr	r3, [r3, #0]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	20000d88 	.word	0x20000d88
 80049f8:	20000ca0 	.word	0x20000ca0

080049fc <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b090      	sub	sp, #64	@ 0x40
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	6039      	str	r1, [r7, #0]
 8004a06:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8004a0c:	f7ff ffce 	bl	80049ac <BSP_LCD_GetXSize>
 8004a10:	4603      	mov	r3, r0
 8004a12:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8004a14:	2300      	movs	r3, #0
 8004a16:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004a18:	f7ff ffdc 	bl	80049d4 <BSP_LCD_GetYSize>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8004a28:	23ff      	movs	r3, #255	@ 0xff
 8004a2a:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8004a30:	2300      	movs	r3, #0
 8004a32:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004a42:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004a46:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004a48:	2307      	movs	r3, #7
 8004a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8004a4c:	f7ff ffae 	bl	80049ac <BSP_LCD_GetXSize>
 8004a50:	4603      	mov	r3, r0
 8004a52:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8004a54:	f7ff ffbe 	bl	80049d4 <BSP_LCD_GetYSize>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8004a5c:	88fa      	ldrh	r2, [r7, #6]
 8004a5e:	f107 030c 	add.w	r3, r7, #12
 8004a62:	4619      	mov	r1, r3
 8004a64:	4812      	ldr	r0, [pc, #72]	@ (8004ab0 <BSP_LCD_LayerDefaultInit+0xb4>)
 8004a66:	f006 f80f 	bl	800aa88 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8004a6a:	88fa      	ldrh	r2, [r7, #6]
 8004a6c:	4911      	ldr	r1, [pc, #68]	@ (8004ab4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004a6e:	4613      	mov	r3, r2
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	4413      	add	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	440b      	add	r3, r1
 8004a78:	3304      	adds	r3, #4
 8004a7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a7e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8004a80:	88fa      	ldrh	r2, [r7, #6]
 8004a82:	490c      	ldr	r1, [pc, #48]	@ (8004ab4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004a84:	4613      	mov	r3, r2
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	4413      	add	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	3308      	adds	r3, #8
 8004a90:	4a09      	ldr	r2, [pc, #36]	@ (8004ab8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8004a92:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8004a94:	88fa      	ldrh	r2, [r7, #6]
 8004a96:	4907      	ldr	r1, [pc, #28]	@ (8004ab4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004a98:	4613      	mov	r3, r2
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	440b      	add	r3, r1
 8004aa2:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8004aa6:	601a      	str	r2, [r3, #0]
}
 8004aa8:	bf00      	nop
 8004aaa:	3740      	adds	r7, #64	@ 0x40
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	20000ca0 	.word	0x20000ca0
 8004ab4:	20000d8c 	.word	0x20000d8c
 8004ab8:	20000038 	.word	0x20000038

08004abc <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8004ac4:	4a04      	ldr	r2, [pc, #16]	@ (8004ad8 <BSP_LCD_SelectLayer+0x1c>)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6013      	str	r3, [r2, #0]
} 
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20000d88 	.word	0x20000d88

08004adc <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8004ae4:	4b07      	ldr	r3, [pc, #28]	@ (8004b04 <BSP_LCD_SetTextColor+0x28>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	4907      	ldr	r1, [pc, #28]	@ (8004b08 <BSP_LCD_SetTextColor+0x2c>)
 8004aea:	4613      	mov	r3, r2
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	4413      	add	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	440b      	add	r3, r1
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	601a      	str	r2, [r3, #0]
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	20000d88 	.word	0x20000d88
 8004b08:	20000d8c 	.word	0x20000d8c

08004b0c <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8004b14:	4b08      	ldr	r3, [pc, #32]	@ (8004b38 <BSP_LCD_SetBackColor+0x2c>)
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	4908      	ldr	r1, [pc, #32]	@ (8004b3c <BSP_LCD_SetBackColor+0x30>)
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	4413      	add	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	440b      	add	r3, r1
 8004b24:	3304      	adds	r3, #4
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	601a      	str	r2, [r3, #0]
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	20000d88 	.word	0x20000d88
 8004b3c:	20000d8c 	.word	0x20000d8c

08004b40 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8004b48:	4b08      	ldr	r3, [pc, #32]	@ (8004b6c <BSP_LCD_SetFont+0x2c>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	4908      	ldr	r1, [pc, #32]	@ (8004b70 <BSP_LCD_SetFont+0x30>)
 8004b4e:	4613      	mov	r3, r2
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	4413      	add	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	440b      	add	r3, r1
 8004b58:	3308      	adds	r3, #8
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	601a      	str	r2, [r3, #0]
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	20000d88 	.word	0x20000d88
 8004b70:	20000d8c 	.word	0x20000d8c

08004b74 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8004b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8004bbc <BSP_LCD_Clear+0x48>)
 8004b7e:	681c      	ldr	r4, [r3, #0]
 8004b80:	4b0e      	ldr	r3, [pc, #56]	@ (8004bbc <BSP_LCD_Clear+0x48>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a0e      	ldr	r2, [pc, #56]	@ (8004bc0 <BSP_LCD_Clear+0x4c>)
 8004b86:	2134      	movs	r1, #52	@ 0x34
 8004b88:	fb01 f303 	mul.w	r3, r1, r3
 8004b8c:	4413      	add	r3, r2
 8004b8e:	335c      	adds	r3, #92	@ 0x5c
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	461e      	mov	r6, r3
 8004b94:	f7ff ff0a 	bl	80049ac <BSP_LCD_GetXSize>
 8004b98:	4605      	mov	r5, r0
 8004b9a:	f7ff ff1b 	bl	80049d4 <BSP_LCD_GetYSize>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	9301      	str	r3, [sp, #4]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	462a      	mov	r2, r5
 8004bac:	4631      	mov	r1, r6
 8004bae:	4620      	mov	r0, r4
 8004bb0:	f000 fcb2 	bl	8005518 <LL_FillBuffer>
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bbc:	20000d88 	.word	0x20000d88
 8004bc0:	20000ca0 	.word	0x20000ca0

08004bc4 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8004bc4:	b590      	push	{r4, r7, lr}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	80fb      	strh	r3, [r7, #6]
 8004bce:	460b      	mov	r3, r1
 8004bd0:	80bb      	strh	r3, [r7, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8004c44 <BSP_LCD_DisplayChar+0x80>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	491b      	ldr	r1, [pc, #108]	@ (8004c48 <BSP_LCD_DisplayChar+0x84>)
 8004bdc:	4613      	mov	r3, r2
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	3308      	adds	r3, #8
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6819      	ldr	r1, [r3, #0]
 8004bec:	78fb      	ldrb	r3, [r7, #3]
 8004bee:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004bf2:	4b14      	ldr	r3, [pc, #80]	@ (8004c44 <BSP_LCD_DisplayChar+0x80>)
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	4c14      	ldr	r4, [pc, #80]	@ (8004c48 <BSP_LCD_DisplayChar+0x84>)
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4423      	add	r3, r4
 8004c02:	3308      	adds	r3, #8
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004c08:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c44 <BSP_LCD_DisplayChar+0x80>)
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	4c0d      	ldr	r4, [pc, #52]	@ (8004c48 <BSP_LCD_DisplayChar+0x84>)
 8004c12:	4613      	mov	r3, r2
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	4413      	add	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4423      	add	r3, r4
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	889b      	ldrh	r3, [r3, #4]
 8004c22:	3307      	adds	r3, #7
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	da00      	bge.n	8004c2a <BSP_LCD_DisplayChar+0x66>
 8004c28:	3307      	adds	r3, #7
 8004c2a:	10db      	asrs	r3, r3, #3
 8004c2c:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004c30:	18ca      	adds	r2, r1, r3
 8004c32:	88b9      	ldrh	r1, [r7, #4]
 8004c34:	88fb      	ldrh	r3, [r7, #6]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 fbb6 	bl	80053a8 <DrawChar>
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd90      	pop	{r4, r7, pc}
 8004c44:	20000d88 	.word	0x20000d88
 8004c48:	20000d8c 	.word	0x20000d8c

08004c4c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8004c4c:	b5b0      	push	{r4, r5, r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60ba      	str	r2, [r7, #8]
 8004c54:	461a      	mov	r2, r3
 8004c56:	4603      	mov	r3, r0
 8004c58:	81fb      	strh	r3, [r7, #14]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	81bb      	strh	r3, [r7, #12]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8004c62:	2301      	movs	r3, #1
 8004c64:	83fb      	strh	r3, [r7, #30]
 8004c66:	2300      	movs	r3, #0
 8004c68:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61bb      	str	r3, [r7, #24]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8004c76:	e002      	b.n	8004c7e <BSP_LCD_DisplayStringAt+0x32>
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	61bb      	str	r3, [r7, #24]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	1c5a      	adds	r2, r3, #1
 8004c82:	617a      	str	r2, [r7, #20]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f6      	bne.n	8004c78 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8004c8a:	f7ff fe8f 	bl	80049ac <BSP_LCD_GetXSize>
 8004c8e:	4601      	mov	r1, r0
 8004c90:	4b50      	ldr	r3, [pc, #320]	@ (8004dd4 <BSP_LCD_DisplayStringAt+0x188>)
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	4850      	ldr	r0, [pc, #320]	@ (8004dd8 <BSP_LCD_DisplayStringAt+0x18c>)
 8004c96:	4613      	mov	r3, r2
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	4413      	add	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4403      	add	r3, r0
 8004ca0:	3308      	adds	r3, #8
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	889b      	ldrh	r3, [r3, #4]
 8004ca6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004caa:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	d01c      	beq.n	8004cec <BSP_LCD_DisplayStringAt+0xa0>
 8004cb2:	2b03      	cmp	r3, #3
 8004cb4:	dc33      	bgt.n	8004d1e <BSP_LCD_DisplayStringAt+0xd2>
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d002      	beq.n	8004cc0 <BSP_LCD_DisplayStringAt+0x74>
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d019      	beq.n	8004cf2 <BSP_LCD_DisplayStringAt+0xa6>
 8004cbe:	e02e      	b.n	8004d1e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	1ad1      	subs	r1, r2, r3
 8004cc6:	4b43      	ldr	r3, [pc, #268]	@ (8004dd4 <BSP_LCD_DisplayStringAt+0x188>)
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	4843      	ldr	r0, [pc, #268]	@ (8004dd8 <BSP_LCD_DisplayStringAt+0x18c>)
 8004ccc:	4613      	mov	r3, r2
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	4413      	add	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4403      	add	r3, r0
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	889b      	ldrh	r3, [r3, #4]
 8004cdc:	fb01 f303 	mul.w	r3, r1, r3
 8004ce0:	085b      	lsrs	r3, r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	89fb      	ldrh	r3, [r7, #14]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	83fb      	strh	r3, [r7, #30]
      break;
 8004cea:	e01b      	b.n	8004d24 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8004cec:	89fb      	ldrh	r3, [r7, #14]
 8004cee:	83fb      	strh	r3, [r7, #30]
      break;
 8004cf0:	e018      	b.n	8004d24 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	b299      	uxth	r1, r3
 8004cfa:	4b36      	ldr	r3, [pc, #216]	@ (8004dd4 <BSP_LCD_DisplayStringAt+0x188>)
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	4836      	ldr	r0, [pc, #216]	@ (8004dd8 <BSP_LCD_DisplayStringAt+0x18c>)
 8004d00:	4613      	mov	r3, r2
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4403      	add	r3, r0
 8004d0a:	3308      	adds	r3, #8
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	889b      	ldrh	r3, [r3, #4]
 8004d10:	fb11 f303 	smulbb	r3, r1, r3
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	89fb      	ldrh	r3, [r7, #14]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	83fb      	strh	r3, [r7, #30]
      break;
 8004d1c:	e002      	b.n	8004d24 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8004d1e:	89fb      	ldrh	r3, [r7, #14]
 8004d20:	83fb      	strh	r3, [r7, #30]
      break;
 8004d22:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8004d24:	8bfb      	ldrh	r3, [r7, #30]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <BSP_LCD_DisplayStringAt+0xe6>
 8004d2a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	da1d      	bge.n	8004d6e <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8004d32:	2301      	movs	r3, #1
 8004d34:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004d36:	e01a      	b.n	8004d6e <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	781a      	ldrb	r2, [r3, #0]
 8004d3c:	89b9      	ldrh	r1, [r7, #12]
 8004d3e:	8bfb      	ldrh	r3, [r7, #30]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff ff3f 	bl	8004bc4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8004d46:	4b23      	ldr	r3, [pc, #140]	@ (8004dd4 <BSP_LCD_DisplayStringAt+0x188>)
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4923      	ldr	r1, [pc, #140]	@ (8004dd8 <BSP_LCD_DisplayStringAt+0x18c>)
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	4413      	add	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	3308      	adds	r3, #8
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	889a      	ldrh	r2, [r3, #4]
 8004d5c:	8bfb      	ldrh	r3, [r7, #30]
 8004d5e:	4413      	add	r3, r2
 8004d60:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	3301      	adds	r3, #1
 8004d66:	60bb      	str	r3, [r7, #8]
    i++;
 8004d68:	8bbb      	ldrh	r3, [r7, #28]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	bf14      	ite	ne
 8004d76:	2301      	movne	r3, #1
 8004d78:	2300      	moveq	r3, #0
 8004d7a:	b2dc      	uxtb	r4, r3
 8004d7c:	f7ff fe16 	bl	80049ac <BSP_LCD_GetXSize>
 8004d80:	8bb9      	ldrh	r1, [r7, #28]
 8004d82:	4b14      	ldr	r3, [pc, #80]	@ (8004dd4 <BSP_LCD_DisplayStringAt+0x188>)
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	4d14      	ldr	r5, [pc, #80]	@ (8004dd8 <BSP_LCD_DisplayStringAt+0x18c>)
 8004d88:	4613      	mov	r3, r2
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	4413      	add	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	442b      	add	r3, r5
 8004d92:	3308      	adds	r3, #8
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	889b      	ldrh	r3, [r3, #4]
 8004d98:	fb01 f303 	mul.w	r3, r1, r3
 8004d9c:	1ac3      	subs	r3, r0, r3
 8004d9e:	b299      	uxth	r1, r3
 8004da0:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd4 <BSP_LCD_DisplayStringAt+0x188>)
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	480c      	ldr	r0, [pc, #48]	@ (8004dd8 <BSP_LCD_DisplayStringAt+0x18c>)
 8004da6:	4613      	mov	r3, r2
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	4413      	add	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4403      	add	r3, r0
 8004db0:	3308      	adds	r3, #8
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	889b      	ldrh	r3, [r3, #4]
 8004db6:	4299      	cmp	r1, r3
 8004db8:	bf2c      	ite	cs
 8004dba:	2301      	movcs	r3, #1
 8004dbc:	2300      	movcc	r3, #0
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	4023      	ands	r3, r4
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1b7      	bne.n	8004d38 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8004dc8:	bf00      	nop
 8004dca:	bf00      	nop
 8004dcc:	3720      	adds	r7, #32
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20000d88 	.word	0x20000d88
 8004dd8:	20000d8c 	.word	0x20000d8c

08004ddc <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004ddc:	b5b0      	push	{r4, r5, r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	4603      	mov	r3, r0
 8004de4:	80fb      	strh	r3, [r7, #6]
 8004de6:	460b      	mov	r3, r1
 8004de8:	80bb      	strh	r3, [r7, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004df2:	4b26      	ldr	r3, [pc, #152]	@ (8004e8c <BSP_LCD_DrawHLine+0xb0>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a26      	ldr	r2, [pc, #152]	@ (8004e90 <BSP_LCD_DrawHLine+0xb4>)
 8004df8:	2134      	movs	r1, #52	@ 0x34
 8004dfa:	fb01 f303 	mul.w	r3, r1, r3
 8004dfe:	4413      	add	r3, r2
 8004e00:	3348      	adds	r3, #72	@ 0x48
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d114      	bne.n	8004e32 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004e08:	4b20      	ldr	r3, [pc, #128]	@ (8004e8c <BSP_LCD_DrawHLine+0xb0>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a20      	ldr	r2, [pc, #128]	@ (8004e90 <BSP_LCD_DrawHLine+0xb4>)
 8004e0e:	2134      	movs	r1, #52	@ 0x34
 8004e10:	fb01 f303 	mul.w	r3, r1, r3
 8004e14:	4413      	add	r3, r2
 8004e16:	335c      	adds	r3, #92	@ 0x5c
 8004e18:	681c      	ldr	r4, [r3, #0]
 8004e1a:	f7ff fdc7 	bl	80049ac <BSP_LCD_GetXSize>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	88bb      	ldrh	r3, [r7, #4]
 8004e22:	fb03 f202 	mul.w	r2, r3, r2
 8004e26:	88fb      	ldrh	r3, [r7, #6]
 8004e28:	4413      	add	r3, r2
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	4423      	add	r3, r4
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	e013      	b.n	8004e5a <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004e32:	4b16      	ldr	r3, [pc, #88]	@ (8004e8c <BSP_LCD_DrawHLine+0xb0>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a16      	ldr	r2, [pc, #88]	@ (8004e90 <BSP_LCD_DrawHLine+0xb4>)
 8004e38:	2134      	movs	r1, #52	@ 0x34
 8004e3a:	fb01 f303 	mul.w	r3, r1, r3
 8004e3e:	4413      	add	r3, r2
 8004e40:	335c      	adds	r3, #92	@ 0x5c
 8004e42:	681c      	ldr	r4, [r3, #0]
 8004e44:	f7ff fdb2 	bl	80049ac <BSP_LCD_GetXSize>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	88bb      	ldrh	r3, [r7, #4]
 8004e4c:	fb03 f202 	mul.w	r2, r3, r2
 8004e50:	88fb      	ldrh	r3, [r7, #6]
 8004e52:	4413      	add	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4423      	add	r3, r4
 8004e58:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8004e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8004e8c <BSP_LCD_DrawHLine+0xb0>)
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	68f9      	ldr	r1, [r7, #12]
 8004e60:	887c      	ldrh	r4, [r7, #2]
 8004e62:	4b0a      	ldr	r3, [pc, #40]	@ (8004e8c <BSP_LCD_DrawHLine+0xb0>)
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	4d0b      	ldr	r5, [pc, #44]	@ (8004e94 <BSP_LCD_DrawHLine+0xb8>)
 8004e68:	4613      	mov	r3, r2
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	442b      	add	r3, r5
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	9301      	str	r3, [sp, #4]
 8004e76:	2300      	movs	r3, #0
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	4622      	mov	r2, r4
 8004e7e:	f000 fb4b 	bl	8005518 <LL_FillBuffer>
}
 8004e82:	bf00      	nop
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bdb0      	pop	{r4, r5, r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20000d88 	.word	0x20000d88
 8004e90:	20000ca0 	.word	0x20000ca0
 8004e94:	20000d8c 	.word	0x20000d8c

08004e98 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004e98:	b5b0      	push	{r4, r5, r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	603a      	str	r2, [r7, #0]
 8004ea2:	80fb      	strh	r3, [r7, #6]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f20 <BSP_LCD_DrawPixel+0x88>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a1d      	ldr	r2, [pc, #116]	@ (8004f24 <BSP_LCD_DrawPixel+0x8c>)
 8004eae:	2134      	movs	r1, #52	@ 0x34
 8004eb0:	fb01 f303 	mul.w	r3, r1, r3
 8004eb4:	4413      	add	r3, r2
 8004eb6:	3348      	adds	r3, #72	@ 0x48
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d116      	bne.n	8004eec <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8004ebe:	4b18      	ldr	r3, [pc, #96]	@ (8004f20 <BSP_LCD_DrawPixel+0x88>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a18      	ldr	r2, [pc, #96]	@ (8004f24 <BSP_LCD_DrawPixel+0x8c>)
 8004ec4:	2134      	movs	r1, #52	@ 0x34
 8004ec6:	fb01 f303 	mul.w	r3, r1, r3
 8004eca:	4413      	add	r3, r2
 8004ecc:	335c      	adds	r3, #92	@ 0x5c
 8004ece:	681c      	ldr	r4, [r3, #0]
 8004ed0:	88bd      	ldrh	r5, [r7, #4]
 8004ed2:	f7ff fd6b 	bl	80049ac <BSP_LCD_GetXSize>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	fb03 f205 	mul.w	r2, r3, r5
 8004edc:	88fb      	ldrh	r3, [r7, #6]
 8004ede:	4413      	add	r3, r2
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	4423      	add	r3, r4
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	b292      	uxth	r2, r2
 8004ee8:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8004eea:	e015      	b.n	8004f18 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004eec:	4b0c      	ldr	r3, [pc, #48]	@ (8004f20 <BSP_LCD_DrawPixel+0x88>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a0c      	ldr	r2, [pc, #48]	@ (8004f24 <BSP_LCD_DrawPixel+0x8c>)
 8004ef2:	2134      	movs	r1, #52	@ 0x34
 8004ef4:	fb01 f303 	mul.w	r3, r1, r3
 8004ef8:	4413      	add	r3, r2
 8004efa:	335c      	adds	r3, #92	@ 0x5c
 8004efc:	681c      	ldr	r4, [r3, #0]
 8004efe:	88bd      	ldrh	r5, [r7, #4]
 8004f00:	f7ff fd54 	bl	80049ac <BSP_LCD_GetXSize>
 8004f04:	4603      	mov	r3, r0
 8004f06:	fb03 f205 	mul.w	r2, r3, r5
 8004f0a:	88fb      	ldrh	r3, [r7, #6]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4423      	add	r3, r4
 8004f12:	461a      	mov	r2, r3
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	6013      	str	r3, [r2, #0]
}
 8004f18:	bf00      	nop
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8004f20:	20000d88 	.word	0x20000d88
 8004f24:	20000ca0 	.word	0x20000ca0

08004f28 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8004f28:	b590      	push	{r4, r7, lr}
 8004f2a:	b08b      	sub	sp, #44	@ 0x2c
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f38:	2300      	movs	r3, #0
 8004f3a:	61bb      	str	r3, [r7, #24]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	2300      	movs	r3, #0
 8004f42:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8004f44:	2300      	movs	r3, #0
 8004f46:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	330a      	adds	r3, #10
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	330b      	adds	r3, #11
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	021b      	lsls	r3, r3, #8
 8004f58:	441a      	add	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	330c      	adds	r3, #12
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	041b      	lsls	r3, r3, #16
 8004f62:	441a      	add	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	330d      	adds	r3, #13
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	061b      	lsls	r3, r3, #24
 8004f6c:	4413      	add	r3, r2
 8004f6e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3312      	adds	r3, #18
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3313      	adds	r3, #19
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	021b      	lsls	r3, r3, #8
 8004f80:	441a      	add	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	3314      	adds	r3, #20
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	041b      	lsls	r3, r3, #16
 8004f8a:	441a      	add	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3315      	adds	r3, #21
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	061b      	lsls	r3, r3, #24
 8004f94:	4413      	add	r3, r2
 8004f96:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3316      	adds	r3, #22
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3317      	adds	r3, #23
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	021b      	lsls	r3, r3, #8
 8004fa8:	441a      	add	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	3318      	adds	r3, #24
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	041b      	lsls	r3, r3, #16
 8004fb2:	441a      	add	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3319      	adds	r3, #25
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	061b      	lsls	r3, r3, #24
 8004fbc:	4413      	add	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	331c      	adds	r3, #28
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	331d      	adds	r3, #29
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	4413      	add	r3, r2
 8004fd2:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8004fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8005084 <BSP_LCD_DrawBitmap+0x15c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a2b      	ldr	r2, [pc, #172]	@ (8005088 <BSP_LCD_DrawBitmap+0x160>)
 8004fda:	2134      	movs	r1, #52	@ 0x34
 8004fdc:	fb01 f303 	mul.w	r3, r1, r3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	335c      	adds	r3, #92	@ 0x5c
 8004fe4:	681c      	ldr	r4, [r3, #0]
 8004fe6:	f7ff fce1 	bl	80049ac <BSP_LCD_GetXSize>
 8004fea:	4602      	mov	r2, r0
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	fb03 f202 	mul.w	r2, r3, r2
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4423      	add	r3, r4
 8004ffa:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	3b20      	subs	r3, #32
 8005000:	2b07      	cmp	r3, #7
 8005002:	d802      	bhi.n	800500a <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8005004:	2300      	movs	r3, #0
 8005006:	61fb      	str	r3, [r7, #28]
 8005008:	e008      	b.n	800501c <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	3b10      	subs	r3, #16
 800500e:	2b07      	cmp	r3, #7
 8005010:	d802      	bhi.n	8005018 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8005012:	2302      	movs	r3, #2
 8005014:	61fb      	str	r3, [r7, #28]
 8005016:	e001      	b.n	800501c <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8005018:	2301      	movs	r3, #1
 800501a:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	3b01      	subs	r3, #1
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	fb02 f303 	mul.w	r3, r2, r3
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	08d2      	lsrs	r2, r2, #3
 800502a:	fb03 f202 	mul.w	r2, r3, r2
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	4413      	add	r3, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	4413      	add	r3, r2
 8005036:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8005038:	2300      	movs	r3, #0
 800503a:	627b      	str	r3, [r7, #36]	@ 0x24
 800503c:	e018      	b.n	8005070 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 800503e:	6a39      	ldr	r1, [r7, #32]
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 fab3 	bl	80055b0 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 800504a:	f7ff fcaf 	bl	80049ac <BSP_LCD_GetXSize>
 800504e:	4603      	mov	r3, r0
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	6a3a      	ldr	r2, [r7, #32]
 8005054:	4413      	add	r3, r2
 8005056:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	08db      	lsrs	r3, r3, #3
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	fb02 f303 	mul.w	r3, r2, r3
 8005062:	425b      	negs	r3, r3
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	4413      	add	r3, r2
 8005068:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 800506a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506c:	3301      	adds	r3, #1
 800506e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	429a      	cmp	r2, r3
 8005076:	d3e2      	bcc.n	800503e <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8005078:	bf00      	nop
 800507a:	bf00      	nop
 800507c:	372c      	adds	r7, #44	@ 0x2c
 800507e:	46bd      	mov	sp, r7
 8005080:	bd90      	pop	{r4, r7, pc}
 8005082:	bf00      	nop
 8005084:	20000d88 	.word	0x20000d88
 8005088:	20000ca0 	.word	0x20000ca0

0800508c <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800508c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005090:	b086      	sub	sp, #24
 8005092:	af02      	add	r7, sp, #8
 8005094:	4604      	mov	r4, r0
 8005096:	4608      	mov	r0, r1
 8005098:	4611      	mov	r1, r2
 800509a:	461a      	mov	r2, r3
 800509c:	4623      	mov	r3, r4
 800509e:	80fb      	strh	r3, [r7, #6]
 80050a0:	4603      	mov	r3, r0
 80050a2:	80bb      	strh	r3, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	807b      	strh	r3, [r7, #2]
 80050a8:	4613      	mov	r3, r2
 80050aa:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80050b0:	4b30      	ldr	r3, [pc, #192]	@ (8005174 <BSP_LCD_FillRect+0xe8>)
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	4930      	ldr	r1, [pc, #192]	@ (8005178 <BSP_LCD_FillRect+0xec>)
 80050b6:	4613      	mov	r3, r2
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	4413      	add	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	440b      	add	r3, r1
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7ff fd0a 	bl	8004adc <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80050c8:	4b2a      	ldr	r3, [pc, #168]	@ (8005174 <BSP_LCD_FillRect+0xe8>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a2b      	ldr	r2, [pc, #172]	@ (800517c <BSP_LCD_FillRect+0xf0>)
 80050ce:	2134      	movs	r1, #52	@ 0x34
 80050d0:	fb01 f303 	mul.w	r3, r1, r3
 80050d4:	4413      	add	r3, r2
 80050d6:	3348      	adds	r3, #72	@ 0x48
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d114      	bne.n	8005108 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80050de:	4b25      	ldr	r3, [pc, #148]	@ (8005174 <BSP_LCD_FillRect+0xe8>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a26      	ldr	r2, [pc, #152]	@ (800517c <BSP_LCD_FillRect+0xf0>)
 80050e4:	2134      	movs	r1, #52	@ 0x34
 80050e6:	fb01 f303 	mul.w	r3, r1, r3
 80050ea:	4413      	add	r3, r2
 80050ec:	335c      	adds	r3, #92	@ 0x5c
 80050ee:	681c      	ldr	r4, [r3, #0]
 80050f0:	f7ff fc5c 	bl	80049ac <BSP_LCD_GetXSize>
 80050f4:	4602      	mov	r2, r0
 80050f6:	88bb      	ldrh	r3, [r7, #4]
 80050f8:	fb03 f202 	mul.w	r2, r3, r2
 80050fc:	88fb      	ldrh	r3, [r7, #6]
 80050fe:	4413      	add	r3, r2
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	4423      	add	r3, r4
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	e013      	b.n	8005130 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8005108:	4b1a      	ldr	r3, [pc, #104]	@ (8005174 <BSP_LCD_FillRect+0xe8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a1b      	ldr	r2, [pc, #108]	@ (800517c <BSP_LCD_FillRect+0xf0>)
 800510e:	2134      	movs	r1, #52	@ 0x34
 8005110:	fb01 f303 	mul.w	r3, r1, r3
 8005114:	4413      	add	r3, r2
 8005116:	335c      	adds	r3, #92	@ 0x5c
 8005118:	681c      	ldr	r4, [r3, #0]
 800511a:	f7ff fc47 	bl	80049ac <BSP_LCD_GetXSize>
 800511e:	4602      	mov	r2, r0
 8005120:	88bb      	ldrh	r3, [r7, #4]
 8005122:	fb03 f202 	mul.w	r2, r3, r2
 8005126:	88fb      	ldrh	r3, [r7, #6]
 8005128:	4413      	add	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4423      	add	r3, r4
 800512e:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8005130:	4b10      	ldr	r3, [pc, #64]	@ (8005174 <BSP_LCD_FillRect+0xe8>)
 8005132:	681c      	ldr	r4, [r3, #0]
 8005134:	68fd      	ldr	r5, [r7, #12]
 8005136:	887e      	ldrh	r6, [r7, #2]
 8005138:	f8b7 8000 	ldrh.w	r8, [r7]
 800513c:	f7ff fc36 	bl	80049ac <BSP_LCD_GetXSize>
 8005140:	4602      	mov	r2, r0
 8005142:	887b      	ldrh	r3, [r7, #2]
 8005144:	1ad1      	subs	r1, r2, r3
 8005146:	4b0b      	ldr	r3, [pc, #44]	@ (8005174 <BSP_LCD_FillRect+0xe8>)
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	480b      	ldr	r0, [pc, #44]	@ (8005178 <BSP_LCD_FillRect+0xec>)
 800514c:	4613      	mov	r3, r2
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	4413      	add	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4403      	add	r3, r0
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	9301      	str	r3, [sp, #4]
 800515a:	9100      	str	r1, [sp, #0]
 800515c:	4643      	mov	r3, r8
 800515e:	4632      	mov	r2, r6
 8005160:	4629      	mov	r1, r5
 8005162:	4620      	mov	r0, r4
 8005164:	f000 f9d8 	bl	8005518 <LL_FillBuffer>
}
 8005168:	bf00      	nop
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005172:	bf00      	nop
 8005174:	20000d88 	.word	0x20000d88
 8005178:	20000d8c 	.word	0x20000d8c
 800517c:	20000ca0 	.word	0x20000ca0

08005180 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8005184:	4b0a      	ldr	r3, [pc, #40]	@ (80051b0 <BSP_LCD_DisplayOn+0x30>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699a      	ldr	r2, [r3, #24]
 800518a:	4b09      	ldr	r3, [pc, #36]	@ (80051b0 <BSP_LCD_DisplayOn+0x30>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0201 	orr.w	r2, r2, #1
 8005192:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8005194:	2201      	movs	r2, #1
 8005196:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800519a:	4806      	ldr	r0, [pc, #24]	@ (80051b4 <BSP_LCD_DisplayOn+0x34>)
 800519c:	f004 fd1e 	bl	8009bdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80051a0:	2201      	movs	r2, #1
 80051a2:	2108      	movs	r1, #8
 80051a4:	4804      	ldr	r0, [pc, #16]	@ (80051b8 <BSP_LCD_DisplayOn+0x38>)
 80051a6:	f004 fd19 	bl	8009bdc <HAL_GPIO_WritePin>
}
 80051aa:	bf00      	nop
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	20000ca0 	.word	0x20000ca0
 80051b4:	40022000 	.word	0x40022000
 80051b8:	40022800 	.word	0x40022800

080051bc <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b090      	sub	sp, #64	@ 0x40
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80051c6:	4b64      	ldr	r3, [pc, #400]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 80051c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ca:	4a63      	ldr	r2, [pc, #396]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 80051cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80051d2:	4b61      	ldr	r3, [pc, #388]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 80051d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80051da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80051de:	4b5e      	ldr	r3, [pc, #376]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 80051e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e2:	4a5d      	ldr	r2, [pc, #372]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 80051e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80051e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80051ea:	4b5b      	ldr	r3, [pc, #364]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 80051ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80051f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80051f6:	4b58      	ldr	r3, [pc, #352]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 80051f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fa:	4a57      	ldr	r2, [pc, #348]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 80051fc:	f043 0310 	orr.w	r3, r3, #16
 8005200:	6313      	str	r3, [r2, #48]	@ 0x30
 8005202:	4b55      	ldr	r3, [pc, #340]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 8005204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005206:	f003 0310 	and.w	r3, r3, #16
 800520a:	623b      	str	r3, [r7, #32]
 800520c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800520e:	4b52      	ldr	r3, [pc, #328]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 8005210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005212:	4a51      	ldr	r2, [pc, #324]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 8005214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005218:	6313      	str	r3, [r2, #48]	@ 0x30
 800521a:	4b4f      	ldr	r3, [pc, #316]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 800521c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800521e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005222:	61fb      	str	r3, [r7, #28]
 8005224:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005226:	4b4c      	ldr	r3, [pc, #304]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 8005228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522a:	4a4b      	ldr	r2, [pc, #300]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 800522c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005230:	6313      	str	r3, [r2, #48]	@ 0x30
 8005232:	4b49      	ldr	r3, [pc, #292]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 8005234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800523a:	61bb      	str	r3, [r7, #24]
 800523c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800523e:	4b46      	ldr	r3, [pc, #280]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 8005240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005242:	4a45      	ldr	r2, [pc, #276]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 8005244:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005248:	6313      	str	r3, [r2, #48]	@ 0x30
 800524a:	4b43      	ldr	r3, [pc, #268]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 800524c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800524e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8005256:	4b40      	ldr	r3, [pc, #256]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 8005258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800525a:	4a3f      	ldr	r2, [pc, #252]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 800525c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005260:	6313      	str	r3, [r2, #48]	@ 0x30
 8005262:	4b3d      	ldr	r3, [pc, #244]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 8005264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800526a:	613b      	str	r3, [r7, #16]
 800526c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800526e:	4b3a      	ldr	r3, [pc, #232]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 8005270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005272:	4a39      	ldr	r2, [pc, #228]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 8005274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005278:	6313      	str	r3, [r2, #48]	@ 0x30
 800527a:	4b37      	ldr	r3, [pc, #220]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 800527c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800527e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005286:	4b34      	ldr	r3, [pc, #208]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 8005288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800528a:	4a33      	ldr	r2, [pc, #204]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 800528c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005290:	6313      	str	r3, [r2, #48]	@ 0x30
 8005292:	4b31      	ldr	r3, [pc, #196]	@ (8005358 <BSP_LCD_MspInit+0x19c>)
 8005294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005296:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800529a:	60bb      	str	r3, [r7, #8]
 800529c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800529e:	2310      	movs	r3, #16
 80052a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80052a2:	2302      	movs	r3, #2
 80052a4:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80052aa:	2302      	movs	r3, #2
 80052ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80052ae:	230e      	movs	r3, #14
 80052b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80052b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80052b6:	4619      	mov	r1, r3
 80052b8:	4828      	ldr	r0, [pc, #160]	@ (800535c <BSP_LCD_MspInit+0x1a0>)
 80052ba:	f004 f9bf 	bl	800963c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80052be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80052c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80052c4:	2302      	movs	r3, #2
 80052c6:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80052c8:	2309      	movs	r3, #9
 80052ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80052cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80052d0:	4619      	mov	r1, r3
 80052d2:	4823      	ldr	r0, [pc, #140]	@ (8005360 <BSP_LCD_MspInit+0x1a4>)
 80052d4:	f004 f9b2 	bl	800963c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80052d8:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 80052dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80052de:	2302      	movs	r3, #2
 80052e0:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80052e2:	230e      	movs	r3, #14
 80052e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80052e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80052ea:	4619      	mov	r1, r3
 80052ec:	481d      	ldr	r0, [pc, #116]	@ (8005364 <BSP_LCD_MspInit+0x1a8>)
 80052ee:	f004 f9a5 	bl	800963c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80052f2:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80052f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80052f8:	2302      	movs	r3, #2
 80052fa:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80052fc:	230e      	movs	r3, #14
 80052fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8005300:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005304:	4619      	mov	r1, r3
 8005306:	4818      	ldr	r0, [pc, #96]	@ (8005368 <BSP_LCD_MspInit+0x1ac>)
 8005308:	f004 f998 	bl	800963c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800530c:	23f7      	movs	r3, #247	@ 0xf7
 800530e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005310:	2302      	movs	r3, #2
 8005312:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005314:	230e      	movs	r3, #14
 8005316:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8005318:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800531c:	4619      	mov	r1, r3
 800531e:	4813      	ldr	r0, [pc, #76]	@ (800536c <BSP_LCD_MspInit+0x1b0>)
 8005320:	f004 f98c 	bl	800963c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8005324:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005328:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800532a:	2301      	movs	r3, #1
 800532c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800532e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005332:	4619      	mov	r1, r3
 8005334:	480b      	ldr	r0, [pc, #44]	@ (8005364 <BSP_LCD_MspInit+0x1a8>)
 8005336:	f004 f981 	bl	800963c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800533a:	2308      	movs	r3, #8
 800533c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800533e:	2301      	movs	r3, #1
 8005340:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8005342:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005346:	4619      	mov	r1, r3
 8005348:	4808      	ldr	r0, [pc, #32]	@ (800536c <BSP_LCD_MspInit+0x1b0>)
 800534a:	f004 f977 	bl	800963c <HAL_GPIO_Init>
}
 800534e:	bf00      	nop
 8005350:	3740      	adds	r7, #64	@ 0x40
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	40023800 	.word	0x40023800
 800535c:	40021000 	.word	0x40021000
 8005360:	40021800 	.word	0x40021800
 8005364:	40022000 	.word	0x40022000
 8005368:	40022400 	.word	0x40022400
 800536c:	40022800 	.word	0x40022800

08005370 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800537a:	4b0a      	ldr	r3, [pc, #40]	@ (80053a4 <BSP_LCD_ClockConfig+0x34>)
 800537c:	2208      	movs	r2, #8
 800537e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8005380:	4b08      	ldr	r3, [pc, #32]	@ (80053a4 <BSP_LCD_ClockConfig+0x34>)
 8005382:	22c0      	movs	r2, #192	@ 0xc0
 8005384:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8005386:	4b07      	ldr	r3, [pc, #28]	@ (80053a4 <BSP_LCD_ClockConfig+0x34>)
 8005388:	2205      	movs	r2, #5
 800538a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800538c:	4b05      	ldr	r3, [pc, #20]	@ (80053a4 <BSP_LCD_ClockConfig+0x34>)
 800538e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005392:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8005394:	4803      	ldr	r0, [pc, #12]	@ (80053a4 <BSP_LCD_ClockConfig+0x34>)
 8005396:	f006 fa79 	bl	800b88c <HAL_RCCEx_PeriphCLKConfig>
}
 800539a:	bf00      	nop
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	20000da4 	.word	0x20000da4

080053a8 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b088      	sub	sp, #32
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	4603      	mov	r3, r0
 80053b0:	603a      	str	r2, [r7, #0]
 80053b2:	80fb      	strh	r3, [r7, #6]
 80053b4:	460b      	mov	r3, r1
 80053b6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	61fb      	str	r3, [r7, #28]
 80053bc:	2300      	movs	r3, #0
 80053be:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80053c0:	4b53      	ldr	r3, [pc, #332]	@ (8005510 <DrawChar+0x168>)
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	4953      	ldr	r1, [pc, #332]	@ (8005514 <DrawChar+0x16c>)
 80053c6:	4613      	mov	r3, r2
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	4413      	add	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	440b      	add	r3, r1
 80053d0:	3308      	adds	r3, #8
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	88db      	ldrh	r3, [r3, #6]
 80053d6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80053d8:	4b4d      	ldr	r3, [pc, #308]	@ (8005510 <DrawChar+0x168>)
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	494d      	ldr	r1, [pc, #308]	@ (8005514 <DrawChar+0x16c>)
 80053de:	4613      	mov	r3, r2
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	4413      	add	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	440b      	add	r3, r1
 80053e8:	3308      	adds	r3, #8
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	889b      	ldrh	r3, [r3, #4]
 80053ee:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80053f0:	8a3b      	ldrh	r3, [r7, #16]
 80053f2:	3307      	adds	r3, #7
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	da00      	bge.n	80053fa <DrawChar+0x52>
 80053f8:	3307      	adds	r3, #7
 80053fa:	10db      	asrs	r3, r3, #3
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	b2da      	uxtb	r2, r3
 8005402:	8a3b      	ldrh	r3, [r7, #16]
 8005404:	b2db      	uxtb	r3, r3
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800540a:	2300      	movs	r3, #0
 800540c:	61fb      	str	r3, [r7, #28]
 800540e:	e076      	b.n	80054fe <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8005410:	8a3b      	ldrh	r3, [r7, #16]
 8005412:	3307      	adds	r3, #7
 8005414:	2b00      	cmp	r3, #0
 8005416:	da00      	bge.n	800541a <DrawChar+0x72>
 8005418:	3307      	adds	r3, #7
 800541a:	10db      	asrs	r3, r3, #3
 800541c:	461a      	mov	r2, r3
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	fb02 f303 	mul.w	r3, r2, r3
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	4413      	add	r3, r2
 8005428:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800542a:	8a3b      	ldrh	r3, [r7, #16]
 800542c:	3307      	adds	r3, #7
 800542e:	2b00      	cmp	r3, #0
 8005430:	da00      	bge.n	8005434 <DrawChar+0x8c>
 8005432:	3307      	adds	r3, #7
 8005434:	10db      	asrs	r3, r3, #3
 8005436:	2b01      	cmp	r3, #1
 8005438:	d002      	beq.n	8005440 <DrawChar+0x98>
 800543a:	2b02      	cmp	r3, #2
 800543c:	d004      	beq.n	8005448 <DrawChar+0xa0>
 800543e:	e00c      	b.n	800545a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	617b      	str	r3, [r7, #20]
      break;
 8005446:	e016      	b.n	8005476 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	3201      	adds	r2, #1
 8005452:	7812      	ldrb	r2, [r2, #0]
 8005454:	4313      	orrs	r3, r2
 8005456:	617b      	str	r3, [r7, #20]
      break;
 8005458:	e00d      	b.n	8005476 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	041a      	lsls	r2, r3, #16
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	3301      	adds	r3, #1
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	021b      	lsls	r3, r3, #8
 8005468:	4313      	orrs	r3, r2
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	3202      	adds	r2, #2
 800546e:	7812      	ldrb	r2, [r2, #0]
 8005470:	4313      	orrs	r3, r2
 8005472:	617b      	str	r3, [r7, #20]
      break;
 8005474:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8005476:	2300      	movs	r3, #0
 8005478:	61bb      	str	r3, [r7, #24]
 800547a:	e036      	b.n	80054ea <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800547c:	8a3a      	ldrh	r2, [r7, #16]
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	1ad2      	subs	r2, r2, r3
 8005482:	7bfb      	ldrb	r3, [r7, #15]
 8005484:	4413      	add	r3, r2
 8005486:	3b01      	subs	r3, #1
 8005488:	2201      	movs	r2, #1
 800548a:	fa02 f303 	lsl.w	r3, r2, r3
 800548e:	461a      	mov	r2, r3
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	4013      	ands	r3, r2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d012      	beq.n	80054be <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	b29a      	uxth	r2, r3
 800549c:	88fb      	ldrh	r3, [r7, #6]
 800549e:	4413      	add	r3, r2
 80054a0:	b298      	uxth	r0, r3
 80054a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005510 <DrawChar+0x168>)
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	491b      	ldr	r1, [pc, #108]	@ (8005514 <DrawChar+0x16c>)
 80054a8:	4613      	mov	r3, r2
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	4413      	add	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	88bb      	ldrh	r3, [r7, #4]
 80054b6:	4619      	mov	r1, r3
 80054b8:	f7ff fcee 	bl	8004e98 <BSP_LCD_DrawPixel>
 80054bc:	e012      	b.n	80054e4 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	88fb      	ldrh	r3, [r7, #6]
 80054c4:	4413      	add	r3, r2
 80054c6:	b298      	uxth	r0, r3
 80054c8:	4b11      	ldr	r3, [pc, #68]	@ (8005510 <DrawChar+0x168>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	4911      	ldr	r1, [pc, #68]	@ (8005514 <DrawChar+0x16c>)
 80054ce:	4613      	mov	r3, r2
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	4413      	add	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	440b      	add	r3, r1
 80054d8:	3304      	adds	r3, #4
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	88bb      	ldrh	r3, [r7, #4]
 80054de:	4619      	mov	r1, r3
 80054e0:	f7ff fcda 	bl	8004e98 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	3301      	adds	r3, #1
 80054e8:	61bb      	str	r3, [r7, #24]
 80054ea:	8a3b      	ldrh	r3, [r7, #16]
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d3c4      	bcc.n	800547c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80054f2:	88bb      	ldrh	r3, [r7, #4]
 80054f4:	3301      	adds	r3, #1
 80054f6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	3301      	adds	r3, #1
 80054fc:	61fb      	str	r3, [r7, #28]
 80054fe:	8a7b      	ldrh	r3, [r7, #18]
 8005500:	69fa      	ldr	r2, [r7, #28]
 8005502:	429a      	cmp	r2, r3
 8005504:	d384      	bcc.n	8005410 <DrawChar+0x68>
  }
}
 8005506:	bf00      	nop
 8005508:	bf00      	nop
 800550a:	3720      	adds	r7, #32
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	20000d88 	.word	0x20000d88
 8005514:	20000d8c 	.word	0x20000d8c

08005518 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af02      	add	r7, sp, #8
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
 8005524:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8005526:	4b1e      	ldr	r3, [pc, #120]	@ (80055a0 <LL_FillBuffer+0x88>)
 8005528:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800552c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800552e:	4b1d      	ldr	r3, [pc, #116]	@ (80055a4 <LL_FillBuffer+0x8c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1d      	ldr	r2, [pc, #116]	@ (80055a8 <LL_FillBuffer+0x90>)
 8005534:	2134      	movs	r1, #52	@ 0x34
 8005536:	fb01 f303 	mul.w	r3, r1, r3
 800553a:	4413      	add	r3, r2
 800553c:	3348      	adds	r3, #72	@ 0x48
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b02      	cmp	r3, #2
 8005542:	d103      	bne.n	800554c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8005544:	4b16      	ldr	r3, [pc, #88]	@ (80055a0 <LL_FillBuffer+0x88>)
 8005546:	2202      	movs	r2, #2
 8005548:	609a      	str	r2, [r3, #8]
 800554a:	e002      	b.n	8005552 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800554c:	4b14      	ldr	r3, [pc, #80]	@ (80055a0 <LL_FillBuffer+0x88>)
 800554e:	2200      	movs	r2, #0
 8005550:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8005552:	4a13      	ldr	r2, [pc, #76]	@ (80055a0 <LL_FillBuffer+0x88>)
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8005558:	4b11      	ldr	r3, [pc, #68]	@ (80055a0 <LL_FillBuffer+0x88>)
 800555a:	4a14      	ldr	r2, [pc, #80]	@ (80055ac <LL_FillBuffer+0x94>)
 800555c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800555e:	4810      	ldr	r0, [pc, #64]	@ (80055a0 <LL_FillBuffer+0x88>)
 8005560:	f003 fcd0 	bl	8008f04 <HAL_DMA2D_Init>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d115      	bne.n	8005596 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800556a:	68f9      	ldr	r1, [r7, #12]
 800556c:	480c      	ldr	r0, [pc, #48]	@ (80055a0 <LL_FillBuffer+0x88>)
 800556e:	f003 ff37 	bl	80093e0 <HAL_DMA2D_ConfigLayer>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10e      	bne.n	8005596 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69f9      	ldr	r1, [r7, #28]
 8005582:	4807      	ldr	r0, [pc, #28]	@ (80055a0 <LL_FillBuffer+0x88>)
 8005584:	f003 fd08 	bl	8008f98 <HAL_DMA2D_Start>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d103      	bne.n	8005596 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800558e:	210a      	movs	r1, #10
 8005590:	4803      	ldr	r0, [pc, #12]	@ (80055a0 <LL_FillBuffer+0x88>)
 8005592:	f003 fd2c 	bl	8008fee <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8005596:	bf00      	nop
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	20000d48 	.word	0x20000d48
 80055a4:	20000d88 	.word	0x20000d88
 80055a8:	20000ca0 	.word	0x20000ca0
 80055ac:	4002b000 	.word	0x4002b000

080055b0 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af02      	add	r7, sp, #8
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 80055be:	4b1c      	ldr	r3, [pc, #112]	@ (8005630 <LL_ConvertLineToARGB8888+0x80>)
 80055c0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80055c4:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80055c6:	4b1a      	ldr	r3, [pc, #104]	@ (8005630 <LL_ConvertLineToARGB8888+0x80>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 80055cc:	4b18      	ldr	r3, [pc, #96]	@ (8005630 <LL_ConvertLineToARGB8888+0x80>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80055d2:	4b17      	ldr	r3, [pc, #92]	@ (8005630 <LL_ConvertLineToARGB8888+0x80>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80055d8:	4b15      	ldr	r3, [pc, #84]	@ (8005630 <LL_ConvertLineToARGB8888+0x80>)
 80055da:	22ff      	movs	r2, #255	@ 0xff
 80055dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 80055de:	4a14      	ldr	r2, [pc, #80]	@ (8005630 <LL_ConvertLineToARGB8888+0x80>)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 80055e4:	4b12      	ldr	r3, [pc, #72]	@ (8005630 <LL_ConvertLineToARGB8888+0x80>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 80055ea:	4b11      	ldr	r3, [pc, #68]	@ (8005630 <LL_ConvertLineToARGB8888+0x80>)
 80055ec:	4a11      	ldr	r2, [pc, #68]	@ (8005634 <LL_ConvertLineToARGB8888+0x84>)
 80055ee:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80055f0:	480f      	ldr	r0, [pc, #60]	@ (8005630 <LL_ConvertLineToARGB8888+0x80>)
 80055f2:	f003 fc87 	bl	8008f04 <HAL_DMA2D_Init>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d115      	bne.n	8005628 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 80055fc:	2101      	movs	r1, #1
 80055fe:	480c      	ldr	r0, [pc, #48]	@ (8005630 <LL_ConvertLineToARGB8888+0x80>)
 8005600:	f003 feee 	bl	80093e0 <HAL_DMA2D_ConfigLayer>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10e      	bne.n	8005628 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800560a:	68f9      	ldr	r1, [r7, #12]
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	2301      	movs	r3, #1
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4806      	ldr	r0, [pc, #24]	@ (8005630 <LL_ConvertLineToARGB8888+0x80>)
 8005616:	f003 fcbf 	bl	8008f98 <HAL_DMA2D_Start>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d103      	bne.n	8005628 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8005620:	210a      	movs	r1, #10
 8005622:	4803      	ldr	r0, [pc, #12]	@ (8005630 <LL_ConvertLineToARGB8888+0x80>)
 8005624:	f003 fce3 	bl	8008fee <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8005628:	bf00      	nop
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	20000d48 	.word	0x20000d48
 8005634:	4002b000 	.word	0x4002b000

08005638 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800563c:	4b29      	ldr	r3, [pc, #164]	@ (80056e4 <BSP_SDRAM_Init+0xac>)
 800563e:	4a2a      	ldr	r2, [pc, #168]	@ (80056e8 <BSP_SDRAM_Init+0xb0>)
 8005640:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8005642:	4b2a      	ldr	r3, [pc, #168]	@ (80056ec <BSP_SDRAM_Init+0xb4>)
 8005644:	2202      	movs	r2, #2
 8005646:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8005648:	4b28      	ldr	r3, [pc, #160]	@ (80056ec <BSP_SDRAM_Init+0xb4>)
 800564a:	2207      	movs	r2, #7
 800564c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800564e:	4b27      	ldr	r3, [pc, #156]	@ (80056ec <BSP_SDRAM_Init+0xb4>)
 8005650:	2204      	movs	r2, #4
 8005652:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8005654:	4b25      	ldr	r3, [pc, #148]	@ (80056ec <BSP_SDRAM_Init+0xb4>)
 8005656:	2207      	movs	r2, #7
 8005658:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800565a:	4b24      	ldr	r3, [pc, #144]	@ (80056ec <BSP_SDRAM_Init+0xb4>)
 800565c:	2202      	movs	r2, #2
 800565e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8005660:	4b22      	ldr	r3, [pc, #136]	@ (80056ec <BSP_SDRAM_Init+0xb4>)
 8005662:	2202      	movs	r2, #2
 8005664:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8005666:	4b21      	ldr	r3, [pc, #132]	@ (80056ec <BSP_SDRAM_Init+0xb4>)
 8005668:	2202      	movs	r2, #2
 800566a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800566c:	4b1d      	ldr	r3, [pc, #116]	@ (80056e4 <BSP_SDRAM_Init+0xac>)
 800566e:	2200      	movs	r2, #0
 8005670:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8005672:	4b1c      	ldr	r3, [pc, #112]	@ (80056e4 <BSP_SDRAM_Init+0xac>)
 8005674:	2200      	movs	r2, #0
 8005676:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8005678:	4b1a      	ldr	r3, [pc, #104]	@ (80056e4 <BSP_SDRAM_Init+0xac>)
 800567a:	2204      	movs	r2, #4
 800567c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800567e:	4b19      	ldr	r3, [pc, #100]	@ (80056e4 <BSP_SDRAM_Init+0xac>)
 8005680:	2210      	movs	r2, #16
 8005682:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005684:	4b17      	ldr	r3, [pc, #92]	@ (80056e4 <BSP_SDRAM_Init+0xac>)
 8005686:	2240      	movs	r2, #64	@ 0x40
 8005688:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800568a:	4b16      	ldr	r3, [pc, #88]	@ (80056e4 <BSP_SDRAM_Init+0xac>)
 800568c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005690:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005692:	4b14      	ldr	r3, [pc, #80]	@ (80056e4 <BSP_SDRAM_Init+0xac>)
 8005694:	2200      	movs	r2, #0
 8005696:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8005698:	4b12      	ldr	r3, [pc, #72]	@ (80056e4 <BSP_SDRAM_Init+0xac>)
 800569a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800569e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80056a0:	4b10      	ldr	r3, [pc, #64]	@ (80056e4 <BSP_SDRAM_Init+0xac>)
 80056a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80056a6:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80056a8:	4b0e      	ldr	r3, [pc, #56]	@ (80056e4 <BSP_SDRAM_Init+0xac>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80056ae:	2100      	movs	r1, #0
 80056b0:	480c      	ldr	r0, [pc, #48]	@ (80056e4 <BSP_SDRAM_Init+0xac>)
 80056b2:	f000 f87f 	bl	80057b4 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80056b6:	490d      	ldr	r1, [pc, #52]	@ (80056ec <BSP_SDRAM_Init+0xb4>)
 80056b8:	480a      	ldr	r0, [pc, #40]	@ (80056e4 <BSP_SDRAM_Init+0xac>)
 80056ba:	f008 f913 	bl	800d8e4 <HAL_SDRAM_Init>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80056c4:	4b0a      	ldr	r3, [pc, #40]	@ (80056f0 <BSP_SDRAM_Init+0xb8>)
 80056c6:	2201      	movs	r2, #1
 80056c8:	701a      	strb	r2, [r3, #0]
 80056ca:	e002      	b.n	80056d2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80056cc:	4b08      	ldr	r3, [pc, #32]	@ (80056f0 <BSP_SDRAM_Init+0xb8>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80056d2:	f240 6003 	movw	r0, #1539	@ 0x603
 80056d6:	f000 f80d 	bl	80056f4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80056da:	4b05      	ldr	r3, [pc, #20]	@ (80056f0 <BSP_SDRAM_Init+0xb8>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	20000e28 	.word	0x20000e28
 80056e8:	a0000140 	.word	0xa0000140
 80056ec:	20000e5c 	.word	0x20000e5c
 80056f0:	20000048 	.word	0x20000048

080056f4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80056fc:	2300      	movs	r3, #0
 80056fe:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8005700:	4b2a      	ldr	r3, [pc, #168]	@ (80057ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005702:	2201      	movs	r2, #1
 8005704:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005706:	4b29      	ldr	r3, [pc, #164]	@ (80057ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005708:	2210      	movs	r2, #16
 800570a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800570c:	4b27      	ldr	r3, [pc, #156]	@ (80057ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800570e:	2201      	movs	r2, #1
 8005710:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005712:	4b26      	ldr	r3, [pc, #152]	@ (80057ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005714:	2200      	movs	r2, #0
 8005716:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005718:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800571c:	4923      	ldr	r1, [pc, #140]	@ (80057ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800571e:	4824      	ldr	r0, [pc, #144]	@ (80057b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005720:	f008 f914 	bl	800d94c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8005724:	2001      	movs	r0, #1
 8005726:	f002 fb0b 	bl	8007d40 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800572a:	4b20      	ldr	r3, [pc, #128]	@ (80057ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800572c:	2202      	movs	r2, #2
 800572e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005730:	4b1e      	ldr	r3, [pc, #120]	@ (80057ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005732:	2210      	movs	r2, #16
 8005734:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005736:	4b1d      	ldr	r3, [pc, #116]	@ (80057ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005738:	2201      	movs	r2, #1
 800573a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800573c:	4b1b      	ldr	r3, [pc, #108]	@ (80057ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800573e:	2200      	movs	r2, #0
 8005740:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8005742:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005746:	4919      	ldr	r1, [pc, #100]	@ (80057ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005748:	4819      	ldr	r0, [pc, #100]	@ (80057b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800574a:	f008 f8ff 	bl	800d94c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800574e:	4b17      	ldr	r3, [pc, #92]	@ (80057ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005750:	2203      	movs	r2, #3
 8005752:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005754:	4b15      	ldr	r3, [pc, #84]	@ (80057ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005756:	2210      	movs	r2, #16
 8005758:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800575a:	4b14      	ldr	r3, [pc, #80]	@ (80057ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800575c:	2208      	movs	r2, #8
 800575e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005760:	4b12      	ldr	r3, [pc, #72]	@ (80057ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005762:	2200      	movs	r2, #0
 8005764:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005766:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800576a:	4910      	ldr	r1, [pc, #64]	@ (80057ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800576c:	4810      	ldr	r0, [pc, #64]	@ (80057b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800576e:	f008 f8ed 	bl	800d94c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8005772:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8005776:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8005778:	4b0c      	ldr	r3, [pc, #48]	@ (80057ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800577a:	2204      	movs	r2, #4
 800577c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800577e:	4b0b      	ldr	r3, [pc, #44]	@ (80057ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005780:	2210      	movs	r2, #16
 8005782:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005784:	4b09      	ldr	r3, [pc, #36]	@ (80057ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005786:	2201      	movs	r2, #1
 8005788:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4a07      	ldr	r2, [pc, #28]	@ (80057ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800578e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005790:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005794:	4905      	ldr	r1, [pc, #20]	@ (80057ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005796:	4806      	ldr	r0, [pc, #24]	@ (80057b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005798:	f008 f8d8 	bl	800d94c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800579c:	6879      	ldr	r1, [r7, #4]
 800579e:	4804      	ldr	r0, [pc, #16]	@ (80057b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80057a0:	f008 f909 	bl	800d9b6 <HAL_SDRAM_ProgramRefreshRate>
}
 80057a4:	bf00      	nop
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	20000e78 	.word	0x20000e78
 80057b0:	20000e28 	.word	0x20000e28

080057b4 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b090      	sub	sp, #64	@ 0x40
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80057be:	4b70      	ldr	r3, [pc, #448]	@ (8005980 <BSP_SDRAM_MspInit+0x1cc>)
 80057c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c2:	4a6f      	ldr	r2, [pc, #444]	@ (8005980 <BSP_SDRAM_MspInit+0x1cc>)
 80057c4:	f043 0301 	orr.w	r3, r3, #1
 80057c8:	6393      	str	r3, [r2, #56]	@ 0x38
 80057ca:	4b6d      	ldr	r3, [pc, #436]	@ (8005980 <BSP_SDRAM_MspInit+0x1cc>)
 80057cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80057d6:	4b6a      	ldr	r3, [pc, #424]	@ (8005980 <BSP_SDRAM_MspInit+0x1cc>)
 80057d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057da:	4a69      	ldr	r2, [pc, #420]	@ (8005980 <BSP_SDRAM_MspInit+0x1cc>)
 80057dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80057e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80057e2:	4b67      	ldr	r3, [pc, #412]	@ (8005980 <BSP_SDRAM_MspInit+0x1cc>)
 80057e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80057ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80057ee:	4b64      	ldr	r3, [pc, #400]	@ (8005980 <BSP_SDRAM_MspInit+0x1cc>)
 80057f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f2:	4a63      	ldr	r2, [pc, #396]	@ (8005980 <BSP_SDRAM_MspInit+0x1cc>)
 80057f4:	f043 0304 	orr.w	r3, r3, #4
 80057f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80057fa:	4b61      	ldr	r3, [pc, #388]	@ (8005980 <BSP_SDRAM_MspInit+0x1cc>)
 80057fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	623b      	str	r3, [r7, #32]
 8005804:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005806:	4b5e      	ldr	r3, [pc, #376]	@ (8005980 <BSP_SDRAM_MspInit+0x1cc>)
 8005808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580a:	4a5d      	ldr	r2, [pc, #372]	@ (8005980 <BSP_SDRAM_MspInit+0x1cc>)
 800580c:	f043 0308 	orr.w	r3, r3, #8
 8005810:	6313      	str	r3, [r2, #48]	@ 0x30
 8005812:	4b5b      	ldr	r3, [pc, #364]	@ (8005980 <BSP_SDRAM_MspInit+0x1cc>)
 8005814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	61fb      	str	r3, [r7, #28]
 800581c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800581e:	4b58      	ldr	r3, [pc, #352]	@ (8005980 <BSP_SDRAM_MspInit+0x1cc>)
 8005820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005822:	4a57      	ldr	r2, [pc, #348]	@ (8005980 <BSP_SDRAM_MspInit+0x1cc>)
 8005824:	f043 0310 	orr.w	r3, r3, #16
 8005828:	6313      	str	r3, [r2, #48]	@ 0x30
 800582a:	4b55      	ldr	r3, [pc, #340]	@ (8005980 <BSP_SDRAM_MspInit+0x1cc>)
 800582c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582e:	f003 0310 	and.w	r3, r3, #16
 8005832:	61bb      	str	r3, [r7, #24]
 8005834:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005836:	4b52      	ldr	r3, [pc, #328]	@ (8005980 <BSP_SDRAM_MspInit+0x1cc>)
 8005838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800583a:	4a51      	ldr	r2, [pc, #324]	@ (8005980 <BSP_SDRAM_MspInit+0x1cc>)
 800583c:	f043 0320 	orr.w	r3, r3, #32
 8005840:	6313      	str	r3, [r2, #48]	@ 0x30
 8005842:	4b4f      	ldr	r3, [pc, #316]	@ (8005980 <BSP_SDRAM_MspInit+0x1cc>)
 8005844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005846:	f003 0320 	and.w	r3, r3, #32
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800584e:	4b4c      	ldr	r3, [pc, #304]	@ (8005980 <BSP_SDRAM_MspInit+0x1cc>)
 8005850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005852:	4a4b      	ldr	r2, [pc, #300]	@ (8005980 <BSP_SDRAM_MspInit+0x1cc>)
 8005854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005858:	6313      	str	r3, [r2, #48]	@ 0x30
 800585a:	4b49      	ldr	r3, [pc, #292]	@ (8005980 <BSP_SDRAM_MspInit+0x1cc>)
 800585c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005862:	613b      	str	r3, [r7, #16]
 8005864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005866:	4b46      	ldr	r3, [pc, #280]	@ (8005980 <BSP_SDRAM_MspInit+0x1cc>)
 8005868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586a:	4a45      	ldr	r2, [pc, #276]	@ (8005980 <BSP_SDRAM_MspInit+0x1cc>)
 800586c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005870:	6313      	str	r3, [r2, #48]	@ 0x30
 8005872:	4b43      	ldr	r3, [pc, #268]	@ (8005980 <BSP_SDRAM_MspInit+0x1cc>)
 8005874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800587e:	2302      	movs	r3, #2
 8005880:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005882:	2301      	movs	r3, #1
 8005884:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8005886:	2302      	movs	r3, #2
 8005888:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800588a:	230c      	movs	r3, #12
 800588c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800588e:	2308      	movs	r3, #8
 8005890:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8005892:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005896:	4619      	mov	r1, r3
 8005898:	483a      	ldr	r0, [pc, #232]	@ (8005984 <BSP_SDRAM_MspInit+0x1d0>)
 800589a:	f003 fecf 	bl	800963c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800589e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80058a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80058a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80058a8:	4619      	mov	r1, r3
 80058aa:	4837      	ldr	r0, [pc, #220]	@ (8005988 <BSP_SDRAM_MspInit+0x1d4>)
 80058ac:	f003 fec6 	bl	800963c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80058b0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80058b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80058b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80058ba:	4619      	mov	r1, r3
 80058bc:	4833      	ldr	r0, [pc, #204]	@ (800598c <BSP_SDRAM_MspInit+0x1d8>)
 80058be:	f003 febd 	bl	800963c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80058c2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80058c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80058c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80058cc:	4619      	mov	r1, r3
 80058ce:	4830      	ldr	r0, [pc, #192]	@ (8005990 <BSP_SDRAM_MspInit+0x1dc>)
 80058d0:	f003 feb4 	bl	800963c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80058d4:	f248 1333 	movw	r3, #33075	@ 0x8133
 80058d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80058da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80058de:	4619      	mov	r1, r3
 80058e0:	482c      	ldr	r0, [pc, #176]	@ (8005994 <BSP_SDRAM_MspInit+0x1e0>)
 80058e2:	f003 feab 	bl	800963c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80058e6:	2328      	movs	r3, #40	@ 0x28
 80058e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80058ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80058ee:	4619      	mov	r1, r3
 80058f0:	4829      	ldr	r0, [pc, #164]	@ (8005998 <BSP_SDRAM_MspInit+0x1e4>)
 80058f2:	f003 fea3 	bl	800963c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80058f6:	4b29      	ldr	r3, [pc, #164]	@ (800599c <BSP_SDRAM_MspInit+0x1e8>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80058fc:	4b27      	ldr	r3, [pc, #156]	@ (800599c <BSP_SDRAM_MspInit+0x1e8>)
 80058fe:	2280      	movs	r2, #128	@ 0x80
 8005900:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8005902:	4b26      	ldr	r3, [pc, #152]	@ (800599c <BSP_SDRAM_MspInit+0x1e8>)
 8005904:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005908:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800590a:	4b24      	ldr	r3, [pc, #144]	@ (800599c <BSP_SDRAM_MspInit+0x1e8>)
 800590c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005910:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005912:	4b22      	ldr	r3, [pc, #136]	@ (800599c <BSP_SDRAM_MspInit+0x1e8>)
 8005914:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005918:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800591a:	4b20      	ldr	r3, [pc, #128]	@ (800599c <BSP_SDRAM_MspInit+0x1e8>)
 800591c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005920:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8005922:	4b1e      	ldr	r3, [pc, #120]	@ (800599c <BSP_SDRAM_MspInit+0x1e8>)
 8005924:	2200      	movs	r2, #0
 8005926:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8005928:	4b1c      	ldr	r3, [pc, #112]	@ (800599c <BSP_SDRAM_MspInit+0x1e8>)
 800592a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800592e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8005930:	4b1a      	ldr	r3, [pc, #104]	@ (800599c <BSP_SDRAM_MspInit+0x1e8>)
 8005932:	2200      	movs	r2, #0
 8005934:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005936:	4b19      	ldr	r3, [pc, #100]	@ (800599c <BSP_SDRAM_MspInit+0x1e8>)
 8005938:	2203      	movs	r2, #3
 800593a:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800593c:	4b17      	ldr	r3, [pc, #92]	@ (800599c <BSP_SDRAM_MspInit+0x1e8>)
 800593e:	2200      	movs	r2, #0
 8005940:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8005942:	4b16      	ldr	r3, [pc, #88]	@ (800599c <BSP_SDRAM_MspInit+0x1e8>)
 8005944:	2200      	movs	r2, #0
 8005946:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8005948:	4b14      	ldr	r3, [pc, #80]	@ (800599c <BSP_SDRAM_MspInit+0x1e8>)
 800594a:	4a15      	ldr	r2, [pc, #84]	@ (80059a0 <BSP_SDRAM_MspInit+0x1ec>)
 800594c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a12      	ldr	r2, [pc, #72]	@ (800599c <BSP_SDRAM_MspInit+0x1e8>)
 8005952:	631a      	str	r2, [r3, #48]	@ 0x30
 8005954:	4a11      	ldr	r2, [pc, #68]	@ (800599c <BSP_SDRAM_MspInit+0x1e8>)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800595a:	4810      	ldr	r0, [pc, #64]	@ (800599c <BSP_SDRAM_MspInit+0x1e8>)
 800595c:	f002 ff9e 	bl	800889c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8005960:	480e      	ldr	r0, [pc, #56]	@ (800599c <BSP_SDRAM_MspInit+0x1e8>)
 8005962:	f002 feed 	bl	8008740 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8005966:	2200      	movs	r2, #0
 8005968:	210f      	movs	r1, #15
 800596a:	2038      	movs	r0, #56	@ 0x38
 800596c:	f002 febe 	bl	80086ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8005970:	2038      	movs	r0, #56	@ 0x38
 8005972:	f002 fed7 	bl	8008724 <HAL_NVIC_EnableIRQ>
}
 8005976:	bf00      	nop
 8005978:	3740      	adds	r7, #64	@ 0x40
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	40023800 	.word	0x40023800
 8005984:	40020800 	.word	0x40020800
 8005988:	40020c00 	.word	0x40020c00
 800598c:	40021000 	.word	0x40021000
 8005990:	40021400 	.word	0x40021400
 8005994:	40021800 	.word	0x40021800
 8005998:	40021c00 	.word	0x40021c00
 800599c:	20000e88 	.word	0x20000e88
 80059a0:	40026410 	.word	0x40026410

080059a4 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	4603      	mov	r3, r0
 80059ac:	460a      	mov	r2, r1
 80059ae:	80fb      	strh	r3, [r7, #6]
 80059b0:	4613      	mov	r3, r2
 80059b2:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80059b4:	2300      	movs	r3, #0
 80059b6:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 80059b8:	4a14      	ldr	r2, [pc, #80]	@ (8005a0c <BSP_TS_Init+0x68>)
 80059ba:	88fb      	ldrh	r3, [r7, #6]
 80059bc:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 80059be:	4a14      	ldr	r2, [pc, #80]	@ (8005a10 <BSP_TS_Init+0x6c>)
 80059c0:	88bb      	ldrh	r3, [r7, #4]
 80059c2:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80059c4:	4b13      	ldr	r3, [pc, #76]	@ (8005a14 <BSP_TS_Init+0x70>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2070      	movs	r0, #112	@ 0x70
 80059ca:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80059cc:	4b11      	ldr	r3, [pc, #68]	@ (8005a14 <BSP_TS_Init+0x70>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2070      	movs	r0, #112	@ 0x70
 80059d2:	4798      	blx	r3
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b51      	cmp	r3, #81	@ 0x51
 80059d8:	d110      	bne.n	80059fc <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80059da:	4b0f      	ldr	r3, [pc, #60]	@ (8005a18 <BSP_TS_Init+0x74>)
 80059dc:	4a0d      	ldr	r2, [pc, #52]	@ (8005a14 <BSP_TS_Init+0x70>)
 80059de:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80059e0:	4b0e      	ldr	r3, [pc, #56]	@ (8005a1c <BSP_TS_Init+0x78>)
 80059e2:	2270      	movs	r2, #112	@ 0x70
 80059e4:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80059e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005a20 <BSP_TS_Init+0x7c>)
 80059e8:	2208      	movs	r2, #8
 80059ea:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80059ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005a18 <BSP_TS_Init+0x74>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	4a0a      	ldr	r2, [pc, #40]	@ (8005a1c <BSP_TS_Init+0x78>)
 80059f4:	7812      	ldrb	r2, [r2, #0]
 80059f6:	4610      	mov	r0, r2
 80059f8:	4798      	blx	r3
 80059fa:	e001      	b.n	8005a00 <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80059fc:	2303      	movs	r3, #3
 80059fe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	20000eec 	.word	0x20000eec
 8005a10:	20000eee 	.word	0x20000eee
 8005a14:	20000010 	.word	0x20000010
 8005a18:	20000ee8 	.word	0x20000ee8
 8005a1c:	20000ef1 	.word	0x20000ef1
 8005a20:	20000ef0 	.word	0x20000ef0

08005a24 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8005a24:	b590      	push	{r4, r7, lr}
 8005a26:	b097      	sub	sp, #92	@ 0x5c
 8005a28:	af02      	add	r7, sp, #8
 8005a2a:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8005a32:	2300      	movs	r3, #0
 8005a34:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8005a36:	2300      	movs	r3, #0
 8005a38:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8005a3e:	4bb8      	ldr	r3, [pc, #736]	@ (8005d20 <BSP_TS_GetState+0x2fc>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	4ab7      	ldr	r2, [pc, #732]	@ (8005d24 <BSP_TS_GetState+0x300>)
 8005a46:	7812      	ldrb	r2, [r2, #0]
 8005a48:	4610      	mov	r0, r2
 8005a4a:	4798      	blx	r3
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	461a      	mov	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 8198 	beq.w	8005d8e <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8005a5e:	2300      	movs	r3, #0
 8005a60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a62:	e187      	b.n	8005d74 <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8005a64:	4bae      	ldr	r3, [pc, #696]	@ (8005d20 <BSP_TS_GetState+0x2fc>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	4aae      	ldr	r2, [pc, #696]	@ (8005d24 <BSP_TS_GetState+0x300>)
 8005a6c:	7812      	ldrb	r2, [r2, #0]
 8005a6e:	4614      	mov	r4, r2
 8005a70:	f107 0120 	add.w	r1, r7, #32
 8005a74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a76:	0052      	lsls	r2, r2, #1
 8005a78:	1888      	adds	r0, r1, r2
 8005a7a:	f107 0114 	add.w	r1, r7, #20
 8005a7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a80:	0052      	lsls	r2, r2, #1
 8005a82:	440a      	add	r2, r1
 8005a84:	4601      	mov	r1, r0
 8005a86:	4620      	mov	r0, r4
 8005a88:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8005a8a:	4ba7      	ldr	r3, [pc, #668]	@ (8005d28 <BSP_TS_GetState+0x304>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d117      	bne.n	8005ac2 <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8005a92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	3350      	adds	r3, #80	@ 0x50
 8005a98:	443b      	add	r3, r7
 8005a9a:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005a9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	3350      	adds	r3, #80	@ 0x50
 8005aa4:	443b      	add	r3, r7
 8005aa6:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8005aaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	3350      	adds	r3, #80	@ 0x50
 8005ab0:	443b      	add	r3, r7
 8005ab2:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8005ab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	3350      	adds	r3, #80	@ 0x50
 8005abc:	443b      	add	r3, r7
 8005abe:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8005ac2:	4b99      	ldr	r3, [pc, #612]	@ (8005d28 <BSP_TS_GetState+0x304>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00e      	beq.n	8005aec <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8005ace:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	3350      	adds	r3, #80	@ 0x50
 8005ad4:	443b      	add	r3, r7
 8005ad6:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8005ada:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	3350      	adds	r3, #80	@ 0x50
 8005ae6:	443b      	add	r3, r7
 8005ae8:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8005aec:	4b8e      	ldr	r3, [pc, #568]	@ (8005d28 <BSP_TS_GetState+0x304>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00e      	beq.n	8005b16 <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8005af8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	3350      	adds	r3, #80	@ 0x50
 8005afe:	443b      	add	r3, r7
 8005b00:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8005b04:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	3350      	adds	r3, #80	@ 0x50
 8005b10:	443b      	add	r3, r7
 8005b12:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8005b16:	4b84      	ldr	r3, [pc, #528]	@ (8005d28 <BSP_TS_GetState+0x304>)
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	f003 0308 	and.w	r3, r3, #8
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d017      	beq.n	8005b52 <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8005b22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	3350      	adds	r3, #80	@ 0x50
 8005b28:	443b      	add	r3, r7
 8005b2a:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b30:	005b      	lsls	r3, r3, #1
 8005b32:	3350      	adds	r3, #80	@ 0x50
 8005b34:	443b      	add	r3, r7
 8005b36:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8005b3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	3350      	adds	r3, #80	@ 0x50
 8005b40:	443b      	add	r3, r7
 8005b42:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8005b46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	3350      	adds	r3, #80	@ 0x50
 8005b4c:	443b      	add	r3, r7
 8005b4e:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8005b52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	3350      	adds	r3, #80	@ 0x50
 8005b58:	443b      	add	r3, r7
 8005b5a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4a72      	ldr	r2, [pc, #456]	@ (8005d2c <BSP_TS_GetState+0x308>)
 8005b62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b68:	4299      	cmp	r1, r3
 8005b6a:	d90d      	bls.n	8005b88 <BSP_TS_GetState+0x164>
 8005b6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	3350      	adds	r3, #80	@ 0x50
 8005b72:	443b      	add	r3, r7
 8005b74:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8005b78:	496c      	ldr	r1, [pc, #432]	@ (8005d2c <BSP_TS_GetState+0x308>)
 8005b7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	e00c      	b.n	8005ba2 <BSP_TS_GetState+0x17e>
 8005b88:	4a68      	ldr	r2, [pc, #416]	@ (8005d2c <BSP_TS_GetState+0x308>)
 8005b8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	3350      	adds	r3, #80	@ 0x50
 8005b98:	443b      	add	r3, r7
 8005b9a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8005ba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	3350      	adds	r3, #80	@ 0x50
 8005bac:	443b      	add	r3, r7
 8005bae:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4a5e      	ldr	r2, [pc, #376]	@ (8005d30 <BSP_TS_GetState+0x30c>)
 8005bb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bbc:	4299      	cmp	r1, r3
 8005bbe:	d90d      	bls.n	8005bdc <BSP_TS_GetState+0x1b8>
 8005bc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	3350      	adds	r3, #80	@ 0x50
 8005bc6:	443b      	add	r3, r7
 8005bc8:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8005bcc:	4958      	ldr	r1, [pc, #352]	@ (8005d30 <BSP_TS_GetState+0x30c>)
 8005bce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	e00c      	b.n	8005bf6 <BSP_TS_GetState+0x1d2>
 8005bdc:	4a54      	ldr	r2, [pc, #336]	@ (8005d30 <BSP_TS_GetState+0x30c>)
 8005bde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005be8:	005b      	lsls	r3, r3, #1
 8005bea:	3350      	adds	r3, #80	@ 0x50
 8005bec:	443b      	add	r3, r7
 8005bee:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 8005bfa:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8005bfe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005c02:	4413      	add	r3, r2
 8005c04:	2b05      	cmp	r3, #5
 8005c06:	dd15      	ble.n	8005c34 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8005c08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	3350      	adds	r3, #80	@ 0x50
 8005c0e:	443b      	add	r3, r7
 8005c10:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005c14:	4619      	mov	r1, r3
 8005c16:	4a45      	ldr	r2, [pc, #276]	@ (8005d2c <BSP_TS_GetState+0x308>)
 8005c18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8005c1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	3350      	adds	r3, #80	@ 0x50
 8005c24:	443b      	add	r3, r7
 8005c26:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4a40      	ldr	r2, [pc, #256]	@ (8005d30 <BSP_TS_GetState+0x30c>)
 8005c2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8005c34:	4b3b      	ldr	r3, [pc, #236]	@ (8005d24 <BSP_TS_GetState+0x300>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b70      	cmp	r3, #112	@ 0x70
 8005c3a:	d119      	bne.n	8005c70 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8005c3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	3350      	adds	r3, #80	@ 0x50
 8005c42:	443b      	add	r3, r7
 8005c44:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	4413      	add	r3, r2
 8005c50:	460a      	mov	r2, r1
 8005c52:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8005c54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	3350      	adds	r3, #80	@ 0x50
 8005c5a:	443b      	add	r3, r7
 8005c5c:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c64:	3304      	adds	r3, #4
 8005c66:	005b      	lsls	r3, r3, #1
 8005c68:	4413      	add	r3, r2
 8005c6a:	460a      	mov	r2, r1
 8005c6c:	809a      	strh	r2, [r3, #4]
 8005c6e:	e022      	b.n	8005cb6 <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8005c70:	4b30      	ldr	r3, [pc, #192]	@ (8005d34 <BSP_TS_GetState+0x310>)
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	4619      	mov	r1, r3
 8005c76:	4a2d      	ldr	r2, [pc, #180]	@ (8005d2c <BSP_TS_GetState+0x308>)
 8005c78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c7e:	fb01 f303 	mul.w	r3, r1, r3
 8005c82:	0b1b      	lsrs	r3, r3, #12
 8005c84:	b299      	uxth	r1, r3
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c8a:	005b      	lsls	r3, r3, #1
 8005c8c:	4413      	add	r3, r2
 8005c8e:	460a      	mov	r2, r1
 8005c90:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8005c92:	4b29      	ldr	r3, [pc, #164]	@ (8005d38 <BSP_TS_GetState+0x314>)
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	4619      	mov	r1, r3
 8005c98:	4a25      	ldr	r2, [pc, #148]	@ (8005d30 <BSP_TS_GetState+0x30c>)
 8005c9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ca0:	fb01 f303 	mul.w	r3, r1, r3
 8005ca4:	0b1b      	lsrs	r3, r3, #12
 8005ca6:	b299      	uxth	r1, r3
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cac:	3304      	adds	r3, #4
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	4413      	add	r3, r2
 8005cb2:	460a      	mov	r2, r1
 8005cb4:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8005cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8005d24 <BSP_TS_GetState+0x300>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f107 010c 	add.w	r1, r7, #12
 8005cc0:	f107 0210 	add.w	r2, r7, #16
 8005cc4:	f107 0308 	add.w	r3, r7, #8
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	460b      	mov	r3, r1
 8005ccc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005cce:	f7fc fedd 	bl	8002a8c <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	b2d9      	uxtb	r1, r3
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cda:	4413      	add	r3, r2
 8005cdc:	3316      	adds	r3, #22
 8005cde:	460a      	mov	r2, r1
 8005ce0:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	b2d9      	uxtb	r1, r3
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cea:	4413      	add	r3, r2
 8005cec:	3320      	adds	r3, #32
 8005cee:	460a      	mov	r2, r1
 8005cf0:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d836      	bhi.n	8005d66 <BSP_TS_GetState+0x342>
 8005cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8005d00 <BSP_TS_GetState+0x2dc>)
 8005cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfe:	bf00      	nop
 8005d00:	08005d11 	.word	0x08005d11
 8005d04:	08005d3d 	.word	0x08005d3d
 8005d08:	08005d4b 	.word	0x08005d4b
 8005d0c:	08005d59 	.word	0x08005d59
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d14:	4413      	add	r3, r2
 8005d16:	331b      	adds	r3, #27
 8005d18:	2201      	movs	r2, #1
 8005d1a:	701a      	strb	r2, [r3, #0]
          break;
 8005d1c:	e027      	b.n	8005d6e <BSP_TS_GetState+0x34a>
 8005d1e:	bf00      	nop
 8005d20:	20000ee8 	.word	0x20000ee8
 8005d24:	20000ef1 	.word	0x20000ef1
 8005d28:	20000ef0 	.word	0x20000ef0
 8005d2c:	20000ef4 	.word	0x20000ef4
 8005d30:	20000f08 	.word	0x20000f08
 8005d34:	20000eec 	.word	0x20000eec
 8005d38:	20000eee 	.word	0x20000eee
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d40:	4413      	add	r3, r2
 8005d42:	331b      	adds	r3, #27
 8005d44:	2202      	movs	r2, #2
 8005d46:	701a      	strb	r2, [r3, #0]
          break;
 8005d48:	e011      	b.n	8005d6e <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d4e:	4413      	add	r3, r2
 8005d50:	331b      	adds	r3, #27
 8005d52:	2203      	movs	r2, #3
 8005d54:	701a      	strb	r2, [r3, #0]
          break;
 8005d56:	e00a      	b.n	8005d6e <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d5c:	4413      	add	r3, r2
 8005d5e:	331b      	adds	r3, #27
 8005d60:	2200      	movs	r2, #0
 8005d62:	701a      	strb	r2, [r3, #0]
          break;
 8005d64:	e003      	b.n	8005d6e <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 8005d6c:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8005d6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d70:	3301      	adds	r3, #1
 8005d72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	f4ff ae71 	bcc.w	8005a64 <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f80a 	bl	8005d9c <BSP_TS_Get_GestureId>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8005d8e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3754      	adds	r7, #84	@ 0x54
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd90      	pop	{r4, r7, pc}
 8005d9a:	bf00      	nop

08005d9c <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8005da4:	2300      	movs	r3, #0
 8005da6:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8005da8:	2300      	movs	r3, #0
 8005daa:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8005dac:	4b3b      	ldr	r3, [pc, #236]	@ (8005e9c <BSP_TS_Get_GestureId+0x100>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	461a      	mov	r2, r3
 8005db2:	f107 0308 	add.w	r3, r7, #8
 8005db6:	4619      	mov	r1, r3
 8005db8:	4610      	mov	r0, r2
 8005dba:	f7fc fe4e 	bl	8002a5a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2b49      	cmp	r3, #73	@ 0x49
 8005dc2:	d05e      	beq.n	8005e82 <BSP_TS_Get_GestureId+0xe6>
 8005dc4:	2b49      	cmp	r3, #73	@ 0x49
 8005dc6:	d860      	bhi.n	8005e8a <BSP_TS_Get_GestureId+0xee>
 8005dc8:	2b1c      	cmp	r3, #28
 8005dca:	d83f      	bhi.n	8005e4c <BSP_TS_Get_GestureId+0xb0>
 8005dcc:	2b1c      	cmp	r3, #28
 8005dce:	d85c      	bhi.n	8005e8a <BSP_TS_Get_GestureId+0xee>
 8005dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd8 <BSP_TS_Get_GestureId+0x3c>)
 8005dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd6:	bf00      	nop
 8005dd8:	08005e53 	.word	0x08005e53
 8005ddc:	08005e8b 	.word	0x08005e8b
 8005de0:	08005e8b 	.word	0x08005e8b
 8005de4:	08005e8b 	.word	0x08005e8b
 8005de8:	08005e8b 	.word	0x08005e8b
 8005dec:	08005e8b 	.word	0x08005e8b
 8005df0:	08005e8b 	.word	0x08005e8b
 8005df4:	08005e8b 	.word	0x08005e8b
 8005df8:	08005e8b 	.word	0x08005e8b
 8005dfc:	08005e8b 	.word	0x08005e8b
 8005e00:	08005e8b 	.word	0x08005e8b
 8005e04:	08005e8b 	.word	0x08005e8b
 8005e08:	08005e8b 	.word	0x08005e8b
 8005e0c:	08005e8b 	.word	0x08005e8b
 8005e10:	08005e8b 	.word	0x08005e8b
 8005e14:	08005e8b 	.word	0x08005e8b
 8005e18:	08005e5b 	.word	0x08005e5b
 8005e1c:	08005e8b 	.word	0x08005e8b
 8005e20:	08005e8b 	.word	0x08005e8b
 8005e24:	08005e8b 	.word	0x08005e8b
 8005e28:	08005e63 	.word	0x08005e63
 8005e2c:	08005e8b 	.word	0x08005e8b
 8005e30:	08005e8b 	.word	0x08005e8b
 8005e34:	08005e8b 	.word	0x08005e8b
 8005e38:	08005e6b 	.word	0x08005e6b
 8005e3c:	08005e8b 	.word	0x08005e8b
 8005e40:	08005e8b 	.word	0x08005e8b
 8005e44:	08005e8b 	.word	0x08005e8b
 8005e48:	08005e73 	.word	0x08005e73
 8005e4c:	2b40      	cmp	r3, #64	@ 0x40
 8005e4e:	d014      	beq.n	8005e7a <BSP_TS_Get_GestureId+0xde>
 8005e50:	e01b      	b.n	8005e8a <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005e58:	e01a      	b.n	8005e90 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005e60:	e016      	b.n	8005e90 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2202      	movs	r2, #2
 8005e66:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005e68:	e012      	b.n	8005e90 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2203      	movs	r2, #3
 8005e6e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005e70:	e00e      	b.n	8005e90 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2204      	movs	r2, #4
 8005e76:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005e78:	e00a      	b.n	8005e90 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2205      	movs	r2, #5
 8005e7e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005e80:	e006      	b.n	8005e90 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2206      	movs	r2, #6
 8005e86:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005e88:	e002      	b.n	8005e90 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e8e:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	20000ef1 	.word	0x20000ef1

08005ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005ea6:	4b11      	ldr	r3, [pc, #68]	@ (8005eec <HAL_MspInit+0x4c>)
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eaa:	4a10      	ldr	r2, [pc, #64]	@ (8005eec <HAL_MspInit+0x4c>)
 8005eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8005eec <HAL_MspInit+0x4c>)
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eba:	607b      	str	r3, [r7, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8005eec <HAL_MspInit+0x4c>)
 8005ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8005eec <HAL_MspInit+0x4c>)
 8005ec4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ec8:	6453      	str	r3, [r2, #68]	@ 0x44
 8005eca:	4b08      	ldr	r3, [pc, #32]	@ (8005eec <HAL_MspInit+0x4c>)
 8005ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ece:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	210f      	movs	r1, #15
 8005eda:	f06f 0001 	mvn.w	r0, #1
 8005ede:	f002 fc05 	bl	80086ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005ee2:	bf00      	nop
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	40023800 	.word	0x40023800

08005ef0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08e      	sub	sp, #56	@ 0x38
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005f00:	4b33      	ldr	r3, [pc, #204]	@ (8005fd0 <HAL_InitTick+0xe0>)
 8005f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f04:	4a32      	ldr	r2, [pc, #200]	@ (8005fd0 <HAL_InitTick+0xe0>)
 8005f06:	f043 0310 	orr.w	r3, r3, #16
 8005f0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f0c:	4b30      	ldr	r3, [pc, #192]	@ (8005fd0 <HAL_InitTick+0xe0>)
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f10:	f003 0310 	and.w	r3, r3, #16
 8005f14:	60fb      	str	r3, [r7, #12]
 8005f16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005f18:	f107 0210 	add.w	r2, r7, #16
 8005f1c:	f107 0314 	add.w	r3, r7, #20
 8005f20:	4611      	mov	r1, r2
 8005f22:	4618      	mov	r0, r3
 8005f24:	f005 fc80 	bl	800b828 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005f28:	6a3b      	ldr	r3, [r7, #32]
 8005f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d103      	bne.n	8005f3a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005f32:	f005 fc51 	bl	800b7d8 <HAL_RCC_GetPCLK1Freq>
 8005f36:	6378      	str	r0, [r7, #52]	@ 0x34
 8005f38:	e004      	b.n	8005f44 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005f3a:	f005 fc4d 	bl	800b7d8 <HAL_RCC_GetPCLK1Freq>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f46:	4a23      	ldr	r2, [pc, #140]	@ (8005fd4 <HAL_InitTick+0xe4>)
 8005f48:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4c:	0c9b      	lsrs	r3, r3, #18
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005f52:	4b21      	ldr	r3, [pc, #132]	@ (8005fd8 <HAL_InitTick+0xe8>)
 8005f54:	4a21      	ldr	r2, [pc, #132]	@ (8005fdc <HAL_InitTick+0xec>)
 8005f56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005f58:	4b1f      	ldr	r3, [pc, #124]	@ (8005fd8 <HAL_InitTick+0xe8>)
 8005f5a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005f5e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005f60:	4a1d      	ldr	r2, [pc, #116]	@ (8005fd8 <HAL_InitTick+0xe8>)
 8005f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f64:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005f66:	4b1c      	ldr	r3, [pc, #112]	@ (8005fd8 <HAL_InitTick+0xe8>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005fd8 <HAL_InitTick+0xe8>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f72:	4b19      	ldr	r3, [pc, #100]	@ (8005fd8 <HAL_InitTick+0xe8>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005f78:	4817      	ldr	r0, [pc, #92]	@ (8005fd8 <HAL_InitTick+0xe8>)
 8005f7a:	f007 fd44 	bl	800da06 <HAL_TIM_Base_Init>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8005f84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d11b      	bne.n	8005fc4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005f8c:	4812      	ldr	r0, [pc, #72]	@ (8005fd8 <HAL_InitTick+0xe8>)
 8005f8e:	f007 fd9b 	bl	800dac8 <HAL_TIM_Base_Start_IT>
 8005f92:	4603      	mov	r3, r0
 8005f94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8005f98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d111      	bne.n	8005fc4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005fa0:	2036      	movs	r0, #54	@ 0x36
 8005fa2:	f002 fbbf 	bl	8008724 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b0f      	cmp	r3, #15
 8005faa:	d808      	bhi.n	8005fbe <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005fac:	2200      	movs	r2, #0
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	2036      	movs	r0, #54	@ 0x36
 8005fb2:	f002 fb9b 	bl	80086ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8005fe0 <HAL_InitTick+0xf0>)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	e002      	b.n	8005fc4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005fc4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3738      	adds	r7, #56	@ 0x38
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40023800 	.word	0x40023800
 8005fd4:	431bde83 	.word	0x431bde83
 8005fd8:	20000f1c 	.word	0x20000f1c
 8005fdc:	40001000 	.word	0x40001000
 8005fe0:	2000008c 	.word	0x2000008c

08005fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005fe8:	bf00      	nop
 8005fea:	e7fd      	b.n	8005fe8 <NMI_Handler+0x4>

08005fec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ff0:	bf00      	nop
 8005ff2:	e7fd      	b.n	8005ff0 <HardFault_Handler+0x4>

08005ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ff8:	bf00      	nop
 8005ffa:	e7fd      	b.n	8005ff8 <MemManage_Handler+0x4>

08005ffc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006000:	bf00      	nop
 8006002:	e7fd      	b.n	8006000 <BusFault_Handler+0x4>

08006004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006008:	bf00      	nop
 800600a:	e7fd      	b.n	8006008 <UsageFault_Handler+0x4>

0800600c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800600c:	b480      	push	{r7}
 800600e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006010:	bf00      	nop
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
	...

0800601c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006020:	4802      	ldr	r0, [pc, #8]	@ (800602c <TIM6_DAC_IRQHandler+0x10>)
 8006022:	f007 fdc9 	bl	800dbb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006026:	bf00      	nop
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	20000f1c 	.word	0x20000f1c

08006030 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8006034:	4802      	ldr	r0, [pc, #8]	@ (8006040 <DMA2_Stream3_IRQHandler+0x10>)
 8006036:	f002 fcef 	bl	8008a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800603a:	bf00      	nop
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	200009c0 	.word	0x200009c0

08006044 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8006048:	4802      	ldr	r0, [pc, #8]	@ (8006054 <DMA2_Stream4_IRQHandler+0x10>)
 800604a:	f002 fce5 	bl	8008a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800604e:	bf00      	nop
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20000878 	.word	0x20000878

08006058 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 800605c:	4802      	ldr	r0, [pc, #8]	@ (8006068 <DMA2_Stream6_IRQHandler+0x10>)
 800605e:	f002 fcdb 	bl	8008a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8006062:	bf00      	nop
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20000a20 	.word	0x20000a20

0800606c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8006070:	4802      	ldr	r0, [pc, #8]	@ (800607c <DMA2_Stream7_IRQHandler+0x10>)
 8006072:	f002 fcd1 	bl	8008a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8006076:	bf00      	nop
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	200008d8 	.word	0x200008d8

08006080 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8006084:	4802      	ldr	r0, [pc, #8]	@ (8006090 <LTDC_IRQHandler+0x10>)
 8006086:	f004 fc3d 	bl	800a904 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800608a:	bf00      	nop
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	200006b8 	.word	0x200006b8

08006094 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8006098:	4802      	ldr	r0, [pc, #8]	@ (80060a4 <DMA2D_IRQHandler+0x10>)
 800609a:	f003 f891 	bl	80091c0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800609e:	bf00      	nop
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	200001a0 	.word	0x200001a0

080060a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80060a8:	b480      	push	{r7}
 80060aa:	af00      	add	r7, sp, #0
	return 1;
 80060ac:	2301      	movs	r3, #1
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <_kill>:

int _kill(int pid, int sig)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80060c2:	f00f fb43 	bl	801574c <__errno>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2216      	movs	r2, #22
 80060ca:	601a      	str	r2, [r3, #0]
	return -1;
 80060cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <_exit>:

void _exit (int status)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80060e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f7ff ffe7 	bl	80060b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80060ea:	bf00      	nop
 80060ec:	e7fd      	b.n	80060ea <_exit+0x12>

080060ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b086      	sub	sp, #24
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	60f8      	str	r0, [r7, #12]
 80060f6:	60b9      	str	r1, [r7, #8]
 80060f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060fa:	2300      	movs	r3, #0
 80060fc:	617b      	str	r3, [r7, #20]
 80060fe:	e00a      	b.n	8006116 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006100:	f3af 8000 	nop.w
 8006104:	4601      	mov	r1, r0
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	60ba      	str	r2, [r7, #8]
 800610c:	b2ca      	uxtb	r2, r1
 800610e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	3301      	adds	r3, #1
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	429a      	cmp	r2, r3
 800611c:	dbf0      	blt.n	8006100 <_read+0x12>
	}

return len;
 800611e:	687b      	ldr	r3, [r7, #4]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006134:	2300      	movs	r3, #0
 8006136:	617b      	str	r3, [r7, #20]
 8006138:	e009      	b.n	800614e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	1c5a      	adds	r2, r3, #1
 800613e:	60ba      	str	r2, [r7, #8]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	4618      	mov	r0, r3
 8006144:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	3301      	adds	r3, #1
 800614c:	617b      	str	r3, [r7, #20]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	429a      	cmp	r2, r3
 8006154:	dbf1      	blt.n	800613a <_write+0x12>
	}
	return len;
 8006156:	687b      	ldr	r3, [r7, #4]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3718      	adds	r7, #24
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <_close>:

int _close(int file)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
	return -1;
 8006168:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800616c:	4618      	mov	r0, r3
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006188:	605a      	str	r2, [r3, #4]
	return 0;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <_isatty>:

int _isatty(int file)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
	return 1;
 80061a0:	2301      	movs	r3, #1
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b085      	sub	sp, #20
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	607a      	str	r2, [r7, #4]
	return 0;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80061d0:	4a14      	ldr	r2, [pc, #80]	@ (8006224 <_sbrk+0x5c>)
 80061d2:	4b15      	ldr	r3, [pc, #84]	@ (8006228 <_sbrk+0x60>)
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80061dc:	4b13      	ldr	r3, [pc, #76]	@ (800622c <_sbrk+0x64>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d102      	bne.n	80061ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80061e4:	4b11      	ldr	r3, [pc, #68]	@ (800622c <_sbrk+0x64>)
 80061e6:	4a12      	ldr	r2, [pc, #72]	@ (8006230 <_sbrk+0x68>)
 80061e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80061ea:	4b10      	ldr	r3, [pc, #64]	@ (800622c <_sbrk+0x64>)
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4413      	add	r3, r2
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d207      	bcs.n	8006208 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80061f8:	f00f faa8 	bl	801574c <__errno>
 80061fc:	4603      	mov	r3, r0
 80061fe:	220c      	movs	r2, #12
 8006200:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006202:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006206:	e009      	b.n	800621c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006208:	4b08      	ldr	r3, [pc, #32]	@ (800622c <_sbrk+0x64>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800620e:	4b07      	ldr	r3, [pc, #28]	@ (800622c <_sbrk+0x64>)
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4413      	add	r3, r2
 8006216:	4a05      	ldr	r2, [pc, #20]	@ (800622c <_sbrk+0x64>)
 8006218:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800621a:	68fb      	ldr	r3, [r7, #12]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	20050000 	.word	0x20050000
 8006228:	00000400 	.word	0x00000400
 800622c:	20000f68 	.word	0x20000f68
 8006230:	20005380 	.word	0x20005380

08006234 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006234:	b480      	push	{r7}
 8006236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006238:	4b06      	ldr	r3, [pc, #24]	@ (8006254 <SystemInit+0x20>)
 800623a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800623e:	4a05      	ldr	r2, [pc, #20]	@ (8006254 <SystemInit+0x20>)
 8006240:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006244:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006248:	bf00      	nop
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	e000ed00 	.word	0xe000ed00

08006258 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800625c:	4b14      	ldr	r3, [pc, #80]	@ (80062b0 <MX_USART1_UART_Init+0x58>)
 800625e:	4a15      	ldr	r2, [pc, #84]	@ (80062b4 <MX_USART1_UART_Init+0x5c>)
 8006260:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006262:	4b13      	ldr	r3, [pc, #76]	@ (80062b0 <MX_USART1_UART_Init+0x58>)
 8006264:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006268:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800626a:	4b11      	ldr	r3, [pc, #68]	@ (80062b0 <MX_USART1_UART_Init+0x58>)
 800626c:	2200      	movs	r2, #0
 800626e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006270:	4b0f      	ldr	r3, [pc, #60]	@ (80062b0 <MX_USART1_UART_Init+0x58>)
 8006272:	2200      	movs	r2, #0
 8006274:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006276:	4b0e      	ldr	r3, [pc, #56]	@ (80062b0 <MX_USART1_UART_Init+0x58>)
 8006278:	2200      	movs	r2, #0
 800627a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800627c:	4b0c      	ldr	r3, [pc, #48]	@ (80062b0 <MX_USART1_UART_Init+0x58>)
 800627e:	220c      	movs	r2, #12
 8006280:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006282:	4b0b      	ldr	r3, [pc, #44]	@ (80062b0 <MX_USART1_UART_Init+0x58>)
 8006284:	2200      	movs	r2, #0
 8006286:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006288:	4b09      	ldr	r3, [pc, #36]	@ (80062b0 <MX_USART1_UART_Init+0x58>)
 800628a:	2200      	movs	r2, #0
 800628c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800628e:	4b08      	ldr	r3, [pc, #32]	@ (80062b0 <MX_USART1_UART_Init+0x58>)
 8006290:	2200      	movs	r2, #0
 8006292:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006294:	4b06      	ldr	r3, [pc, #24]	@ (80062b0 <MX_USART1_UART_Init+0x58>)
 8006296:	2200      	movs	r2, #0
 8006298:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800629a:	4805      	ldr	r0, [pc, #20]	@ (80062b0 <MX_USART1_UART_Init+0x58>)
 800629c:	f007 fe92 	bl	800dfc4 <HAL_UART_Init>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80062a6:	f7fd fa39 	bl	800371c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80062aa:	bf00      	nop
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	20000f6c 	.word	0x20000f6c
 80062b4:	40011000 	.word	0x40011000

080062b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b0ac      	sub	sp, #176	@ 0xb0
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80062c4:	2200      	movs	r2, #0
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	605a      	str	r2, [r3, #4]
 80062ca:	609a      	str	r2, [r3, #8]
 80062cc:	60da      	str	r2, [r3, #12]
 80062ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80062d0:	f107 0318 	add.w	r3, r7, #24
 80062d4:	2284      	movs	r2, #132	@ 0x84
 80062d6:	2100      	movs	r1, #0
 80062d8:	4618      	mov	r0, r3
 80062da:	f00f f992 	bl	8015602 <memset>
  if(uartHandle->Instance==USART1)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a32      	ldr	r2, [pc, #200]	@ (80063ac <HAL_UART_MspInit+0xf4>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d15c      	bne.n	80063a2 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80062e8:	2340      	movs	r3, #64	@ 0x40
 80062ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80062ec:	2300      	movs	r3, #0
 80062ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062f0:	f107 0318 	add.w	r3, r7, #24
 80062f4:	4618      	mov	r0, r3
 80062f6:	f005 fac9 	bl	800b88c <HAL_RCCEx_PeriphCLKConfig>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006300:	f7fd fa0c 	bl	800371c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006304:	4b2a      	ldr	r3, [pc, #168]	@ (80063b0 <HAL_UART_MspInit+0xf8>)
 8006306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006308:	4a29      	ldr	r2, [pc, #164]	@ (80063b0 <HAL_UART_MspInit+0xf8>)
 800630a:	f043 0310 	orr.w	r3, r3, #16
 800630e:	6453      	str	r3, [r2, #68]	@ 0x44
 8006310:	4b27      	ldr	r3, [pc, #156]	@ (80063b0 <HAL_UART_MspInit+0xf8>)
 8006312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006314:	f003 0310 	and.w	r3, r3, #16
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800631c:	4b24      	ldr	r3, [pc, #144]	@ (80063b0 <HAL_UART_MspInit+0xf8>)
 800631e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006320:	4a23      	ldr	r2, [pc, #140]	@ (80063b0 <HAL_UART_MspInit+0xf8>)
 8006322:	f043 0302 	orr.w	r3, r3, #2
 8006326:	6313      	str	r3, [r2, #48]	@ 0x30
 8006328:	4b21      	ldr	r3, [pc, #132]	@ (80063b0 <HAL_UART_MspInit+0xf8>)
 800632a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	613b      	str	r3, [r7, #16]
 8006332:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006334:	4b1e      	ldr	r3, [pc, #120]	@ (80063b0 <HAL_UART_MspInit+0xf8>)
 8006336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006338:	4a1d      	ldr	r2, [pc, #116]	@ (80063b0 <HAL_UART_MspInit+0xf8>)
 800633a:	f043 0301 	orr.w	r3, r3, #1
 800633e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006340:	4b1b      	ldr	r3, [pc, #108]	@ (80063b0 <HAL_UART_MspInit+0xf8>)
 8006342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800634c:	2380      	movs	r3, #128	@ 0x80
 800634e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006352:	2302      	movs	r3, #2
 8006354:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006358:	2300      	movs	r3, #0
 800635a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800635e:	2300      	movs	r3, #0
 8006360:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006364:	2307      	movs	r3, #7
 8006366:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800636a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800636e:	4619      	mov	r1, r3
 8006370:	4810      	ldr	r0, [pc, #64]	@ (80063b4 <HAL_UART_MspInit+0xfc>)
 8006372:	f003 f963 	bl	800963c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8006376:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800637a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800637e:	2302      	movs	r3, #2
 8006380:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006384:	2300      	movs	r3, #0
 8006386:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800638a:	2300      	movs	r3, #0
 800638c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006390:	2307      	movs	r3, #7
 8006392:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8006396:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800639a:	4619      	mov	r1, r3
 800639c:	4806      	ldr	r0, [pc, #24]	@ (80063b8 <HAL_UART_MspInit+0x100>)
 800639e:	f003 f94d 	bl	800963c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80063a2:	bf00      	nop
 80063a4:	37b0      	adds	r7, #176	@ 0xb0
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	40011000 	.word	0x40011000
 80063b0:	40023800 	.word	0x40023800
 80063b4:	40020400 	.word	0x40020400
 80063b8:	40020000 	.word	0x40020000

080063bc <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	607b      	str	r3, [r7, #4]
 80063c4:	4603      	mov	r3, r0
 80063c6:	81fb      	strh	r3, [r7, #14]
 80063c8:	460b      	mov	r3, r1
 80063ca:	81bb      	strh	r3, [r7, #12]
 80063cc:	4613      	mov	r3, r2
 80063ce:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80063d0:	2300      	movs	r3, #0
 80063d2:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 80063d4:	89bb      	ldrh	r3, [r7, #12]
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 80063da:	89bb      	ldrh	r3, [r7, #12]
 80063dc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80063e0:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 80063e2:	2300      	movs	r3, #0
 80063e4:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80063e6:	f7fd fdd7 	bl	8003f98 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 80063ea:	89fb      	ldrh	r3, [r7, #14]
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2203      	movs	r2, #3
 80063f0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80063f4:	4618      	mov	r0, r3
 80063f6:	f001 fc35 	bl	8007c64 <CODEC_IO_Write>
 80063fa:	4603      	mov	r3, r0
 80063fc:	461a      	mov	r2, r3
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	4413      	add	r3, r2
 8006402:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8006404:	89fb      	ldrh	r3, [r7, #14]
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2200      	movs	r2, #0
 800640a:	f640 0117 	movw	r1, #2071	@ 0x817
 800640e:	4618      	mov	r0, r3
 8006410:	f001 fc28 	bl	8007c64 <CODEC_IO_Write>
 8006414:	4603      	mov	r3, r0
 8006416:	461a      	mov	r2, r3
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	4413      	add	r3, r2
 800641c:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 800641e:	89fb      	ldrh	r3, [r7, #14]
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2200      	movs	r2, #0
 8006424:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8006428:	4618      	mov	r0, r3
 800642a:	f001 fc1b 	bl	8007c64 <CODEC_IO_Write>
 800642e:	4603      	mov	r3, r0
 8006430:	461a      	mov	r2, r3
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	4413      	add	r3, r2
 8006436:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8006438:	89fb      	ldrh	r3, [r7, #14]
 800643a:	b2db      	uxtb	r3, r3
 800643c:	226c      	movs	r2, #108	@ 0x6c
 800643e:	2139      	movs	r1, #57	@ 0x39
 8006440:	4618      	mov	r0, r3
 8006442:	f001 fc0f 	bl	8007c64 <CODEC_IO_Write>
 8006446:	4603      	mov	r3, r0
 8006448:	461a      	mov	r2, r3
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	4413      	add	r3, r2
 800644e:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8006450:	8afb      	ldrh	r3, [r7, #22]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00c      	beq.n	8006470 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8006456:	89fb      	ldrh	r3, [r7, #14]
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2213      	movs	r2, #19
 800645c:	2101      	movs	r1, #1
 800645e:	4618      	mov	r0, r3
 8006460:	f001 fc00 	bl	8007c64 <CODEC_IO_Write>
 8006464:	4603      	mov	r3, r0
 8006466:	461a      	mov	r2, r3
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	4413      	add	r3, r2
 800646c:	61fb      	str	r3, [r7, #28]
 800646e:	e00b      	b.n	8006488 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8006470:	89fb      	ldrh	r3, [r7, #14]
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2203      	movs	r2, #3
 8006476:	2101      	movs	r1, #1
 8006478:	4618      	mov	r0, r3
 800647a:	f001 fbf3 	bl	8007c64 <CODEC_IO_Write>
 800647e:	4603      	mov	r3, r0
 8006480:	461a      	mov	r2, r3
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	4413      	add	r3, r2
 8006486:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8006488:	2032      	movs	r0, #50	@ 0x32
 800648a:	f7fd fded 	bl	8004068 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 800648e:	8b3b      	ldrh	r3, [r7, #24]
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 815f 	beq.w	8006754 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8006496:	4bae      	ldr	r3, [pc, #696]	@ (8006750 <wm8994_Init+0x394>)
 8006498:	2201      	movs	r2, #1
 800649a:	601a      	str	r2, [r3, #0]

    switch (output_device)
 800649c:	8b3b      	ldrh	r3, [r7, #24]
 800649e:	2b03      	cmp	r3, #3
 80064a0:	f000 808c 	beq.w	80065bc <wm8994_Init+0x200>
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	f300 8111 	bgt.w	80066cc <wm8994_Init+0x310>
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d002      	beq.n	80064b4 <wm8994_Init+0xf8>
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d042      	beq.n	8006538 <wm8994_Init+0x17c>
 80064b2:	e10b      	b.n	80066cc <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80064b4:	89fb      	ldrh	r3, [r7, #14]
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	f640 420c 	movw	r2, #3084	@ 0xc0c
 80064bc:	2105      	movs	r1, #5
 80064be:	4618      	mov	r0, r3
 80064c0:	f001 fbd0 	bl	8007c64 <CODEC_IO_Write>
 80064c4:	4603      	mov	r3, r0
 80064c6:	461a      	mov	r2, r3
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	4413      	add	r3, r2
 80064cc:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80064ce:	89fb      	ldrh	r3, [r7, #14]
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2200      	movs	r2, #0
 80064d4:	f240 6101 	movw	r1, #1537	@ 0x601
 80064d8:	4618      	mov	r0, r3
 80064da:	f001 fbc3 	bl	8007c64 <CODEC_IO_Write>
 80064de:	4603      	mov	r3, r0
 80064e0:	461a      	mov	r2, r3
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	4413      	add	r3, r2
 80064e6:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80064e8:	89fb      	ldrh	r3, [r7, #14]
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2200      	movs	r2, #0
 80064ee:	f240 6102 	movw	r1, #1538	@ 0x602
 80064f2:	4618      	mov	r0, r3
 80064f4:	f001 fbb6 	bl	8007c64 <CODEC_IO_Write>
 80064f8:	4603      	mov	r3, r0
 80064fa:	461a      	mov	r2, r3
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	4413      	add	r3, r2
 8006500:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8006502:	89fb      	ldrh	r3, [r7, #14]
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2202      	movs	r2, #2
 8006508:	f240 6104 	movw	r1, #1540	@ 0x604
 800650c:	4618      	mov	r0, r3
 800650e:	f001 fba9 	bl	8007c64 <CODEC_IO_Write>
 8006512:	4603      	mov	r3, r0
 8006514:	461a      	mov	r2, r3
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	4413      	add	r3, r2
 800651a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800651c:	89fb      	ldrh	r3, [r7, #14]
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2202      	movs	r2, #2
 8006522:	f240 6105 	movw	r1, #1541	@ 0x605
 8006526:	4618      	mov	r0, r3
 8006528:	f001 fb9c 	bl	8007c64 <CODEC_IO_Write>
 800652c:	4603      	mov	r3, r0
 800652e:	461a      	mov	r2, r3
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	4413      	add	r3, r2
 8006534:	61fb      	str	r3, [r7, #28]
      break;
 8006536:	e110      	b.n	800675a <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8006538:	89fb      	ldrh	r3, [r7, #14]
 800653a:	b2db      	uxtb	r3, r3
 800653c:	f240 3203 	movw	r2, #771	@ 0x303
 8006540:	2105      	movs	r1, #5
 8006542:	4618      	mov	r0, r3
 8006544:	f001 fb8e 	bl	8007c64 <CODEC_IO_Write>
 8006548:	4603      	mov	r3, r0
 800654a:	461a      	mov	r2, r3
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	4413      	add	r3, r2
 8006550:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8006552:	89fb      	ldrh	r3, [r7, #14]
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2201      	movs	r2, #1
 8006558:	f240 6101 	movw	r1, #1537	@ 0x601
 800655c:	4618      	mov	r0, r3
 800655e:	f001 fb81 	bl	8007c64 <CODEC_IO_Write>
 8006562:	4603      	mov	r3, r0
 8006564:	461a      	mov	r2, r3
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	4413      	add	r3, r2
 800656a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800656c:	89fb      	ldrh	r3, [r7, #14]
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2201      	movs	r2, #1
 8006572:	f240 6102 	movw	r1, #1538	@ 0x602
 8006576:	4618      	mov	r0, r3
 8006578:	f001 fb74 	bl	8007c64 <CODEC_IO_Write>
 800657c:	4603      	mov	r3, r0
 800657e:	461a      	mov	r2, r3
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	4413      	add	r3, r2
 8006584:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8006586:	89fb      	ldrh	r3, [r7, #14]
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2200      	movs	r2, #0
 800658c:	f240 6104 	movw	r1, #1540	@ 0x604
 8006590:	4618      	mov	r0, r3
 8006592:	f001 fb67 	bl	8007c64 <CODEC_IO_Write>
 8006596:	4603      	mov	r3, r0
 8006598:	461a      	mov	r2, r3
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	4413      	add	r3, r2
 800659e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80065a0:	89fb      	ldrh	r3, [r7, #14]
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2200      	movs	r2, #0
 80065a6:	f240 6105 	movw	r1, #1541	@ 0x605
 80065aa:	4618      	mov	r0, r3
 80065ac:	f001 fb5a 	bl	8007c64 <CODEC_IO_Write>
 80065b0:	4603      	mov	r3, r0
 80065b2:	461a      	mov	r2, r3
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	4413      	add	r3, r2
 80065b8:	61fb      	str	r3, [r7, #28]
      break;
 80065ba:	e0ce      	b.n	800675a <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80065bc:	8afb      	ldrh	r3, [r7, #22]
 80065be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065c2:	d141      	bne.n	8006648 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80065c4:	89fb      	ldrh	r3, [r7, #14]
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80065cc:	2105      	movs	r1, #5
 80065ce:	4618      	mov	r0, r3
 80065d0:	f001 fb48 	bl	8007c64 <CODEC_IO_Write>
 80065d4:	4603      	mov	r3, r0
 80065d6:	461a      	mov	r2, r3
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	4413      	add	r3, r2
 80065dc:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 80065de:	89fb      	ldrh	r3, [r7, #14]
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2203      	movs	r2, #3
 80065e4:	f240 6101 	movw	r1, #1537	@ 0x601
 80065e8:	4618      	mov	r0, r3
 80065ea:	f001 fb3b 	bl	8007c64 <CODEC_IO_Write>
 80065ee:	4603      	mov	r3, r0
 80065f0:	461a      	mov	r2, r3
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	4413      	add	r3, r2
 80065f6:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80065f8:	89fb      	ldrh	r3, [r7, #14]
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2203      	movs	r2, #3
 80065fe:	f240 6102 	movw	r1, #1538	@ 0x602
 8006602:	4618      	mov	r0, r3
 8006604:	f001 fb2e 	bl	8007c64 <CODEC_IO_Write>
 8006608:	4603      	mov	r3, r0
 800660a:	461a      	mov	r2, r3
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	4413      	add	r3, r2
 8006610:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8006612:	89fb      	ldrh	r3, [r7, #14]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2203      	movs	r2, #3
 8006618:	f240 6104 	movw	r1, #1540	@ 0x604
 800661c:	4618      	mov	r0, r3
 800661e:	f001 fb21 	bl	8007c64 <CODEC_IO_Write>
 8006622:	4603      	mov	r3, r0
 8006624:	461a      	mov	r2, r3
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	4413      	add	r3, r2
 800662a:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 800662c:	89fb      	ldrh	r3, [r7, #14]
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2203      	movs	r2, #3
 8006632:	f240 6105 	movw	r1, #1541	@ 0x605
 8006636:	4618      	mov	r0, r3
 8006638:	f001 fb14 	bl	8007c64 <CODEC_IO_Write>
 800663c:	4603      	mov	r3, r0
 800663e:	461a      	mov	r2, r3
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	4413      	add	r3, r2
 8006644:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8006646:	e088      	b.n	800675a <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8006648:	89fb      	ldrh	r3, [r7, #14]
 800664a:	b2db      	uxtb	r3, r3
 800664c:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8006650:	2105      	movs	r1, #5
 8006652:	4618      	mov	r0, r3
 8006654:	f001 fb06 	bl	8007c64 <CODEC_IO_Write>
 8006658:	4603      	mov	r3, r0
 800665a:	461a      	mov	r2, r3
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	4413      	add	r3, r2
 8006660:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8006662:	89fb      	ldrh	r3, [r7, #14]
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2201      	movs	r2, #1
 8006668:	f240 6101 	movw	r1, #1537	@ 0x601
 800666c:	4618      	mov	r0, r3
 800666e:	f001 faf9 	bl	8007c64 <CODEC_IO_Write>
 8006672:	4603      	mov	r3, r0
 8006674:	461a      	mov	r2, r3
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	4413      	add	r3, r2
 800667a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800667c:	89fb      	ldrh	r3, [r7, #14]
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2201      	movs	r2, #1
 8006682:	f240 6102 	movw	r1, #1538	@ 0x602
 8006686:	4618      	mov	r0, r3
 8006688:	f001 faec 	bl	8007c64 <CODEC_IO_Write>
 800668c:	4603      	mov	r3, r0
 800668e:	461a      	mov	r2, r3
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	4413      	add	r3, r2
 8006694:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8006696:	89fb      	ldrh	r3, [r7, #14]
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2202      	movs	r2, #2
 800669c:	f240 6104 	movw	r1, #1540	@ 0x604
 80066a0:	4618      	mov	r0, r3
 80066a2:	f001 fadf 	bl	8007c64 <CODEC_IO_Write>
 80066a6:	4603      	mov	r3, r0
 80066a8:	461a      	mov	r2, r3
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	4413      	add	r3, r2
 80066ae:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 80066b0:	89fb      	ldrh	r3, [r7, #14]
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2202      	movs	r2, #2
 80066b6:	f240 6105 	movw	r1, #1541	@ 0x605
 80066ba:	4618      	mov	r0, r3
 80066bc:	f001 fad2 	bl	8007c64 <CODEC_IO_Write>
 80066c0:	4603      	mov	r3, r0
 80066c2:	461a      	mov	r2, r3
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	4413      	add	r3, r2
 80066c8:	61fb      	str	r3, [r7, #28]
      break;
 80066ca:	e046      	b.n	800675a <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80066cc:	89fb      	ldrh	r3, [r7, #14]
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	f240 3203 	movw	r2, #771	@ 0x303
 80066d4:	2105      	movs	r1, #5
 80066d6:	4618      	mov	r0, r3
 80066d8:	f001 fac4 	bl	8007c64 <CODEC_IO_Write>
 80066dc:	4603      	mov	r3, r0
 80066de:	461a      	mov	r2, r3
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	4413      	add	r3, r2
 80066e4:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80066e6:	89fb      	ldrh	r3, [r7, #14]
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2201      	movs	r2, #1
 80066ec:	f240 6101 	movw	r1, #1537	@ 0x601
 80066f0:	4618      	mov	r0, r3
 80066f2:	f001 fab7 	bl	8007c64 <CODEC_IO_Write>
 80066f6:	4603      	mov	r3, r0
 80066f8:	461a      	mov	r2, r3
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	4413      	add	r3, r2
 80066fe:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8006700:	89fb      	ldrh	r3, [r7, #14]
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2201      	movs	r2, #1
 8006706:	f240 6102 	movw	r1, #1538	@ 0x602
 800670a:	4618      	mov	r0, r3
 800670c:	f001 faaa 	bl	8007c64 <CODEC_IO_Write>
 8006710:	4603      	mov	r3, r0
 8006712:	461a      	mov	r2, r3
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	4413      	add	r3, r2
 8006718:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800671a:	89fb      	ldrh	r3, [r7, #14]
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2200      	movs	r2, #0
 8006720:	f240 6104 	movw	r1, #1540	@ 0x604
 8006724:	4618      	mov	r0, r3
 8006726:	f001 fa9d 	bl	8007c64 <CODEC_IO_Write>
 800672a:	4603      	mov	r3, r0
 800672c:	461a      	mov	r2, r3
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	4413      	add	r3, r2
 8006732:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8006734:	89fb      	ldrh	r3, [r7, #14]
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2200      	movs	r2, #0
 800673a:	f240 6105 	movw	r1, #1541	@ 0x605
 800673e:	4618      	mov	r0, r3
 8006740:	f001 fa90 	bl	8007c64 <CODEC_IO_Write>
 8006744:	4603      	mov	r3, r0
 8006746:	461a      	mov	r2, r3
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	4413      	add	r3, r2
 800674c:	61fb      	str	r3, [r7, #28]
      break;
 800674e:	e004      	b.n	800675a <wm8994_Init+0x39e>
 8006750:	20000ff4 	.word	0x20000ff4
    }
  }
  else
  {
    outputEnabled = 0;
 8006754:	4ba5      	ldr	r3, [pc, #660]	@ (80069ec <wm8994_Init+0x630>)
 8006756:	2200      	movs	r2, #0
 8006758:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 800675a:	8afb      	ldrh	r3, [r7, #22]
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 81c3 	beq.w	8006ae8 <wm8994_Init+0x72c>
  {
    inputEnabled = 1;
 8006762:	4ba3      	ldr	r3, [pc, #652]	@ (80069f0 <wm8994_Init+0x634>)
 8006764:	2201      	movs	r2, #1
 8006766:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8006768:	8afb      	ldrh	r3, [r7, #22]
 800676a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800676e:	f000 8141 	beq.w	80069f4 <wm8994_Init+0x638>
 8006772:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006776:	f300 81b3 	bgt.w	8006ae0 <wm8994_Init+0x724>
 800677a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800677e:	d05a      	beq.n	8006836 <wm8994_Init+0x47a>
 8006780:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006784:	f300 81ac 	bgt.w	8006ae0 <wm8994_Init+0x724>
 8006788:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800678c:	f000 80de 	beq.w	800694c <wm8994_Init+0x590>
 8006790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006794:	f040 81a4 	bne.w	8006ae0 <wm8994_Init+0x724>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8006798:	89fb      	ldrh	r3, [r7, #14]
 800679a:	b2db      	uxtb	r3, r3
 800679c:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 80067a0:	2104      	movs	r1, #4
 80067a2:	4618      	mov	r0, r3
 80067a4:	f001 fa5e 	bl	8007c64 <CODEC_IO_Write>
 80067a8:	4603      	mov	r3, r0
 80067aa:	461a      	mov	r2, r3
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	4413      	add	r3, r2
 80067b0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80067b2:	89fb      	ldrh	r3, [r7, #14]
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	22db      	movs	r2, #219	@ 0xdb
 80067b8:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80067bc:	4618      	mov	r0, r3
 80067be:	f001 fa51 	bl	8007c64 <CODEC_IO_Write>
 80067c2:	4603      	mov	r3, r0
 80067c4:	461a      	mov	r2, r3
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	4413      	add	r3, r2
 80067ca:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 80067cc:	89fb      	ldrh	r3, [r7, #14]
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 80067d4:	2102      	movs	r1, #2
 80067d6:	4618      	mov	r0, r3
 80067d8:	f001 fa44 	bl	8007c64 <CODEC_IO_Write>
 80067dc:	4603      	mov	r3, r0
 80067de:	461a      	mov	r2, r3
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	4413      	add	r3, r2
 80067e4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80067e6:	89fb      	ldrh	r3, [r7, #14]
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2202      	movs	r2, #2
 80067ec:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80067f0:	4618      	mov	r0, r3
 80067f2:	f001 fa37 	bl	8007c64 <CODEC_IO_Write>
 80067f6:	4603      	mov	r3, r0
 80067f8:	461a      	mov	r2, r3
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	4413      	add	r3, r2
 80067fe:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8006800:	89fb      	ldrh	r3, [r7, #14]
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2202      	movs	r2, #2
 8006806:	f240 6109 	movw	r1, #1545	@ 0x609
 800680a:	4618      	mov	r0, r3
 800680c:	f001 fa2a 	bl	8007c64 <CODEC_IO_Write>
 8006810:	4603      	mov	r3, r0
 8006812:	461a      	mov	r2, r3
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	4413      	add	r3, r2
 8006818:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 800681a:	89fb      	ldrh	r3, [r7, #14]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	220e      	movs	r2, #14
 8006820:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8006824:	4618      	mov	r0, r3
 8006826:	f001 fa1d 	bl	8007c64 <CODEC_IO_Write>
 800682a:	4603      	mov	r3, r0
 800682c:	461a      	mov	r2, r3
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	4413      	add	r3, r2
 8006832:	61fb      	str	r3, [r7, #28]
      break;
 8006834:	e15b      	b.n	8006aee <wm8994_Init+0x732>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8006836:	89fb      	ldrh	r3, [r7, #14]
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2211      	movs	r2, #17
 800683c:	2128      	movs	r1, #40	@ 0x28
 800683e:	4618      	mov	r0, r3
 8006840:	f001 fa10 	bl	8007c64 <CODEC_IO_Write>
 8006844:	4603      	mov	r3, r0
 8006846:	461a      	mov	r2, r3
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	4413      	add	r3, r2
 800684c:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +0dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 800684e:	89fb      	ldrh	r3, [r7, #14]
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2220      	movs	r2, #32
 8006854:	2129      	movs	r1, #41	@ 0x29
 8006856:	4618      	mov	r0, r3
 8006858:	f001 fa04 	bl	8007c64 <CODEC_IO_Write>
 800685c:	4603      	mov	r3, r0
 800685e:	461a      	mov	r2, r3
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	4413      	add	r3, r2
 8006864:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 8006866:	89fb      	ldrh	r3, [r7, #14]
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2220      	movs	r2, #32
 800686c:	212a      	movs	r1, #42	@ 0x2a
 800686e:	4618      	mov	r0, r3
 8006870:	f001 f9f8 	bl	8007c64 <CODEC_IO_Write>
 8006874:	4603      	mov	r3, r0
 8006876:	461a      	mov	r2, r3
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	4413      	add	r3, r2
 800687c:	61fb      	str	r3, [r7, #28]
      counter += CODEC_IO_Write(DeviceAddr, 0x2B, 0x0000);
 800687e:	89fb      	ldrh	r3, [r7, #14]
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2200      	movs	r2, #0
 8006884:	212b      	movs	r1, #43	@ 0x2b
 8006886:	4618      	mov	r0, r3
 8006888:	f001 f9ec 	bl	8007c64 <CODEC_IO_Write>
 800688c:	4603      	mov	r3, r0
 800688e:	461a      	mov	r2, r3
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	4413      	add	r3, r2
 8006894:	61fb      	str	r3, [r7, #28]
      counter += CODEC_IO_Write(DeviceAddr, 0x2C, 0x0000);
 8006896:	89fb      	ldrh	r3, [r7, #14]
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2200      	movs	r2, #0
 800689c:	212c      	movs	r1, #44	@ 0x2c
 800689e:	4618      	mov	r0, r3
 80068a0:	f001 f9e0 	bl	8007c64 <CODEC_IO_Write>
 80068a4:	4603      	mov	r3, r0
 80068a6:	461a      	mov	r2, r3
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	4413      	add	r3, r2
 80068ac:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 80068ae:	89fb      	ldrh	r3, [r7, #14]
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	f240 3203 	movw	r2, #771	@ 0x303
 80068b6:	2104      	movs	r1, #4
 80068b8:	4618      	mov	r0, r3
 80068ba:	f001 f9d3 	bl	8007c64 <CODEC_IO_Write>
 80068be:	4603      	mov	r3, r0
 80068c0:	461a      	mov	r2, r3
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	4413      	add	r3, r2
 80068c6:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80068c8:	89fb      	ldrh	r3, [r7, #14]
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	22db      	movs	r2, #219	@ 0xdb
 80068ce:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80068d2:	4618      	mov	r0, r3
 80068d4:	f001 f9c6 	bl	8007c64 <CODEC_IO_Write>
 80068d8:	4603      	mov	r3, r0
 80068da:	461a      	mov	r2, r3
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	4413      	add	r3, r2
 80068e0:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80068e2:	89fb      	ldrh	r3, [r7, #14]
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	f246 3250 	movw	r2, #25424	@ 0x6350
 80068ea:	2102      	movs	r1, #2
 80068ec:	4618      	mov	r0, r3
 80068ee:	f001 f9b9 	bl	8007c64 <CODEC_IO_Write>
 80068f2:	4603      	mov	r3, r0
 80068f4:	461a      	mov	r2, r3
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	4413      	add	r3, r2
 80068fa:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80068fc:	89fb      	ldrh	r3, [r7, #14]
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2202      	movs	r2, #2
 8006902:	f240 6106 	movw	r1, #1542	@ 0x606
 8006906:	4618      	mov	r0, r3
 8006908:	f001 f9ac 	bl	8007c64 <CODEC_IO_Write>
 800690c:	4603      	mov	r3, r0
 800690e:	461a      	mov	r2, r3
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	4413      	add	r3, r2
 8006914:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8006916:	89fb      	ldrh	r3, [r7, #14]
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2202      	movs	r2, #2
 800691c:	f240 6107 	movw	r1, #1543	@ 0x607
 8006920:	4618      	mov	r0, r3
 8006922:	f001 f99f 	bl	8007c64 <CODEC_IO_Write>
 8006926:	4603      	mov	r3, r0
 8006928:	461a      	mov	r2, r3
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	4413      	add	r3, r2
 800692e:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8006930:	89fb      	ldrh	r3, [r7, #14]
 8006932:	b2db      	uxtb	r3, r3
 8006934:	220d      	movs	r2, #13
 8006936:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800693a:	4618      	mov	r0, r3
 800693c:	f001 f992 	bl	8007c64 <CODEC_IO_Write>
 8006940:	4603      	mov	r3, r0
 8006942:	461a      	mov	r2, r3
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	4413      	add	r3, r2
 8006948:	61fb      	str	r3, [r7, #28]
      break;
 800694a:	e0d0      	b.n	8006aee <wm8994_Init+0x732>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 800694c:	89fb      	ldrh	r3, [r7, #14]
 800694e:	b2db      	uxtb	r3, r3
 8006950:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8006954:	2104      	movs	r1, #4
 8006956:	4618      	mov	r0, r3
 8006958:	f001 f984 	bl	8007c64 <CODEC_IO_Write>
 800695c:	4603      	mov	r3, r0
 800695e:	461a      	mov	r2, r3
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	4413      	add	r3, r2
 8006964:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8006966:	89fb      	ldrh	r3, [r7, #14]
 8006968:	b2db      	uxtb	r3, r3
 800696a:	22db      	movs	r2, #219	@ 0xdb
 800696c:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8006970:	4618      	mov	r0, r3
 8006972:	f001 f977 	bl	8007c64 <CODEC_IO_Write>
 8006976:	4603      	mov	r3, r0
 8006978:	461a      	mov	r2, r3
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	4413      	add	r3, r2
 800697e:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8006980:	89fb      	ldrh	r3, [r7, #14]
 8006982:	b2db      	uxtb	r3, r3
 8006984:	f246 3250 	movw	r2, #25424	@ 0x6350
 8006988:	2102      	movs	r1, #2
 800698a:	4618      	mov	r0, r3
 800698c:	f001 f96a 	bl	8007c64 <CODEC_IO_Write>
 8006990:	4603      	mov	r3, r0
 8006992:	461a      	mov	r2, r3
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	4413      	add	r3, r2
 8006998:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800699a:	89fb      	ldrh	r3, [r7, #14]
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2202      	movs	r2, #2
 80069a0:	f240 6106 	movw	r1, #1542	@ 0x606
 80069a4:	4618      	mov	r0, r3
 80069a6:	f001 f95d 	bl	8007c64 <CODEC_IO_Write>
 80069aa:	4603      	mov	r3, r0
 80069ac:	461a      	mov	r2, r3
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	4413      	add	r3, r2
 80069b2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80069b4:	89fb      	ldrh	r3, [r7, #14]
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2202      	movs	r2, #2
 80069ba:	f240 6107 	movw	r1, #1543	@ 0x607
 80069be:	4618      	mov	r0, r3
 80069c0:	f001 f950 	bl	8007c64 <CODEC_IO_Write>
 80069c4:	4603      	mov	r3, r0
 80069c6:	461a      	mov	r2, r3
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	4413      	add	r3, r2
 80069cc:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80069ce:	89fb      	ldrh	r3, [r7, #14]
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	220d      	movs	r2, #13
 80069d4:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80069d8:	4618      	mov	r0, r3
 80069da:	f001 f943 	bl	8007c64 <CODEC_IO_Write>
 80069de:	4603      	mov	r3, r0
 80069e0:	461a      	mov	r2, r3
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	4413      	add	r3, r2
 80069e6:	61fb      	str	r3, [r7, #28]
      break; 
 80069e8:	e081      	b.n	8006aee <wm8994_Init+0x732>
 80069ea:	bf00      	nop
 80069ec:	20000ff4 	.word	0x20000ff4
 80069f0:	20000ff8 	.word	0x20000ff8
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 80069f4:	89fb      	ldrh	r3, [r7, #14]
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	f640 723c 	movw	r2, #3900	@ 0xf3c
 80069fc:	2104      	movs	r1, #4
 80069fe:	4618      	mov	r0, r3
 8006a00:	f001 f930 	bl	8007c64 <CODEC_IO_Write>
 8006a04:	4603      	mov	r3, r0
 8006a06:	461a      	mov	r2, r3
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8006a0e:	89fb      	ldrh	r3, [r7, #14]
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	22db      	movs	r2, #219	@ 0xdb
 8006a14:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f001 f923 	bl	8007c64 <CODEC_IO_Write>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	461a      	mov	r2, r3
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	4413      	add	r3, r2
 8006a26:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8006a28:	89fb      	ldrh	r3, [r7, #14]
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	22db      	movs	r2, #219	@ 0xdb
 8006a2e:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8006a32:	4618      	mov	r0, r3
 8006a34:	f001 f916 	bl	8007c64 <CODEC_IO_Write>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	4413      	add	r3, r2
 8006a40:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8006a42:	89fb      	ldrh	r3, [r7, #14]
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 8006a4a:	2102      	movs	r1, #2
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f001 f909 	bl	8007c64 <CODEC_IO_Write>
 8006a52:	4603      	mov	r3, r0
 8006a54:	461a      	mov	r2, r3
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	4413      	add	r3, r2
 8006a5a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8006a5c:	89fb      	ldrh	r3, [r7, #14]
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2202      	movs	r2, #2
 8006a62:	f240 6106 	movw	r1, #1542	@ 0x606
 8006a66:	4618      	mov	r0, r3
 8006a68:	f001 f8fc 	bl	8007c64 <CODEC_IO_Write>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	461a      	mov	r2, r3
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	4413      	add	r3, r2
 8006a74:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8006a76:	89fb      	ldrh	r3, [r7, #14]
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	f240 6107 	movw	r1, #1543	@ 0x607
 8006a80:	4618      	mov	r0, r3
 8006a82:	f001 f8ef 	bl	8007c64 <CODEC_IO_Write>
 8006a86:	4603      	mov	r3, r0
 8006a88:	461a      	mov	r2, r3
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8006a90:	89fb      	ldrh	r3, [r7, #14]
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2202      	movs	r2, #2
 8006a96:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f001 f8e2 	bl	8007c64 <CODEC_IO_Write>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8006aaa:	89fb      	ldrh	r3, [r7, #14]
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2202      	movs	r2, #2
 8006ab0:	f240 6109 	movw	r1, #1545	@ 0x609
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f001 f8d5 	bl	8007c64 <CODEC_IO_Write>
 8006aba:	4603      	mov	r3, r0
 8006abc:	461a      	mov	r2, r3
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8006ac4:	89fb      	ldrh	r3, [r7, #14]
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	220d      	movs	r2, #13
 8006aca:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f001 f8c8 	bl	8007c64 <CODEC_IO_Write>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	4413      	add	r3, r2
 8006adc:	61fb      	str	r3, [r7, #28]
      break;    
 8006ade:	e006      	b.n	8006aee <wm8994_Init+0x732>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	61fb      	str	r3, [r7, #28]
      break;
 8006ae6:	e002      	b.n	8006aee <wm8994_Init+0x732>
    }
  }
  else
  {
    inputEnabled = 0;
 8006ae8:	4ba4      	ldr	r3, [pc, #656]	@ (8006d7c <wm8994_Init+0x9c0>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4aa3      	ldr	r2, [pc, #652]	@ (8006d80 <wm8994_Init+0x9c4>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d079      	beq.n	8006bea <wm8994_Init+0x82e>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4aa1      	ldr	r2, [pc, #644]	@ (8006d80 <wm8994_Init+0x9c4>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	f200 80ad 	bhi.w	8006c5a <wm8994_Init+0x89e>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d061      	beq.n	8006bce <wm8994_Init+0x812>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8006b10:	4293      	cmp	r3, r2
 8006b12:	f200 80a2 	bhi.w	8006c5a <wm8994_Init+0x89e>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	f000 808e 	beq.w	8006c3e <wm8994_Init+0x882>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	f200 8096 	bhi.w	8006c5a <wm8994_Init+0x89e>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8006b34:	d03d      	beq.n	8006bb2 <wm8994_Init+0x7f6>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8006b3c:	f200 808d 	bhi.w	8006c5a <wm8994_Init+0x89e>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f245 6222 	movw	r2, #22050	@ 0x5622
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d06b      	beq.n	8006c22 <wm8994_Init+0x866>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f245 6222 	movw	r2, #22050	@ 0x5622
 8006b50:	4293      	cmp	r3, r2
 8006b52:	f200 8082 	bhi.w	8006c5a <wm8994_Init+0x89e>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8006b5c:	d01b      	beq.n	8006b96 <wm8994_Init+0x7da>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8006b64:	d879      	bhi.n	8006c5a <wm8994_Init+0x89e>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8006b6c:	d005      	beq.n	8006b7a <wm8994_Init+0x7be>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d046      	beq.n	8006c06 <wm8994_Init+0x84a>
 8006b78:	e06f      	b.n	8006c5a <wm8994_Init+0x89e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8006b7a:	89fb      	ldrh	r3, [r7, #14]
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2203      	movs	r2, #3
 8006b80:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8006b84:	4618      	mov	r0, r3
 8006b86:	f001 f86d 	bl	8007c64 <CODEC_IO_Write>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	4413      	add	r3, r2
 8006b92:	61fb      	str	r3, [r7, #28]
    break;
 8006b94:	e06f      	b.n	8006c76 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8006b96:	89fb      	ldrh	r3, [r7, #14]
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2233      	movs	r2, #51	@ 0x33
 8006b9c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f001 f85f 	bl	8007c64 <CODEC_IO_Write>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	461a      	mov	r2, r3
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	4413      	add	r3, r2
 8006bae:	61fb      	str	r3, [r7, #28]
    break;
 8006bb0:	e061      	b.n	8006c76 <wm8994_Init+0x8ba>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8006bb2:	89fb      	ldrh	r3, [r7, #14]
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2263      	movs	r2, #99	@ 0x63
 8006bb8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f001 f851 	bl	8007c64 <CODEC_IO_Write>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	4413      	add	r3, r2
 8006bca:	61fb      	str	r3, [r7, #28]
    break;
 8006bcc:	e053      	b.n	8006c76 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8006bce:	89fb      	ldrh	r3, [r7, #14]
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2283      	movs	r2, #131	@ 0x83
 8006bd4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f001 f843 	bl	8007c64 <CODEC_IO_Write>
 8006bde:	4603      	mov	r3, r0
 8006be0:	461a      	mov	r2, r3
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	4413      	add	r3, r2
 8006be6:	61fb      	str	r3, [r7, #28]
    break;
 8006be8:	e045      	b.n	8006c76 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8006bea:	89fb      	ldrh	r3, [r7, #14]
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	22a3      	movs	r2, #163	@ 0xa3
 8006bf0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f001 f835 	bl	8007c64 <CODEC_IO_Write>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	4413      	add	r3, r2
 8006c02:	61fb      	str	r3, [r7, #28]
    break;
 8006c04:	e037      	b.n	8006c76 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8006c06:	89fb      	ldrh	r3, [r7, #14]
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2213      	movs	r2, #19
 8006c0c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8006c10:	4618      	mov	r0, r3
 8006c12:	f001 f827 	bl	8007c64 <CODEC_IO_Write>
 8006c16:	4603      	mov	r3, r0
 8006c18:	461a      	mov	r2, r3
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	61fb      	str	r3, [r7, #28]
    break;
 8006c20:	e029      	b.n	8006c76 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8006c22:	89fb      	ldrh	r3, [r7, #14]
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2243      	movs	r2, #67	@ 0x43
 8006c28:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f001 f819 	bl	8007c64 <CODEC_IO_Write>
 8006c32:	4603      	mov	r3, r0
 8006c34:	461a      	mov	r2, r3
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	4413      	add	r3, r2
 8006c3a:	61fb      	str	r3, [r7, #28]
    break;
 8006c3c:	e01b      	b.n	8006c76 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8006c3e:	89fb      	ldrh	r3, [r7, #14]
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2273      	movs	r2, #115	@ 0x73
 8006c44:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f001 f80b 	bl	8007c64 <CODEC_IO_Write>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	461a      	mov	r2, r3
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	4413      	add	r3, r2
 8006c56:	61fb      	str	r3, [r7, #28]
    break; 
 8006c58:	e00d      	b.n	8006c76 <wm8994_Init+0x8ba>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8006c5a:	89fb      	ldrh	r3, [r7, #14]
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2283      	movs	r2, #131	@ 0x83
 8006c60:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 fffd 	bl	8007c64 <CODEC_IO_Write>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	4413      	add	r3, r2
 8006c72:	61fb      	str	r3, [r7, #28]
    break; 
 8006c74:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8006c76:	8afb      	ldrh	r3, [r7, #22]
 8006c78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c7c:	d10e      	bne.n	8006c9c <wm8994_Init+0x8e0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8006c7e:	89fb      	ldrh	r3, [r7, #14]
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	f244 0218 	movw	r2, #16408	@ 0x4018
 8006c86:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 ffea 	bl	8007c64 <CODEC_IO_Write>
 8006c90:	4603      	mov	r3, r0
 8006c92:	461a      	mov	r2, r3
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	4413      	add	r3, r2
 8006c98:	61fb      	str	r3, [r7, #28]
 8006c9a:	e00d      	b.n	8006cb8 <wm8994_Init+0x8fc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8006c9c:	89fb      	ldrh	r3, [r7, #14]
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	f244 0210 	movw	r2, #16400	@ 0x4010
 8006ca4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f000 ffdb 	bl	8007c64 <CODEC_IO_Write>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8006cb8:	89fb      	ldrh	r3, [r7, #14]
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f240 3102 	movw	r1, #770	@ 0x302
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 ffce 	bl	8007c64 <CODEC_IO_Write>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	461a      	mov	r2, r3
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	4413      	add	r3, r2
 8006cd0:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8006cd2:	89fb      	ldrh	r3, [r7, #14]
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	220a      	movs	r2, #10
 8006cd8:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 ffc1 	bl	8007c64 <CODEC_IO_Write>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	4413      	add	r3, r2
 8006cea:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8006cec:	89fb      	ldrh	r3, [r7, #14]
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 ffb4 	bl	8007c64 <CODEC_IO_Write>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	461a      	mov	r2, r3
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	4413      	add	r3, r2
 8006d04:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8006d06:	8b3b      	ldrh	r3, [r7, #24]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 817b 	beq.w	8007004 <wm8994_Init+0xc48>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8006d0e:	8b3b      	ldrh	r3, [r7, #24]
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d157      	bne.n	8006dc4 <wm8994_Init+0xa08>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8006d14:	89fb      	ldrh	r3, [r7, #14]
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d1c:	212d      	movs	r1, #45	@ 0x2d
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 ffa0 	bl	8007c64 <CODEC_IO_Write>
 8006d24:	4603      	mov	r3, r0
 8006d26:	461a      	mov	r2, r3
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8006d2e:	89fb      	ldrh	r3, [r7, #14]
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d36:	212e      	movs	r1, #46	@ 0x2e
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 ff93 	bl	8007c64 <CODEC_IO_Write>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	461a      	mov	r2, r3
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	4413      	add	r3, r2
 8006d46:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8006d48:	4b0e      	ldr	r3, [pc, #56]	@ (8006d84 <wm8994_Init+0x9c8>)
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d01b      	beq.n	8006d88 <wm8994_Init+0x9cc>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8006d50:	89fb      	ldrh	r3, [r7, #14]
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 8006d58:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f000 ff81 	bl	8007c64 <CODEC_IO_Write>
 8006d62:	4603      	mov	r3, r0
 8006d64:	461a      	mov	r2, r3
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	4413      	add	r3, r2
 8006d6a:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8006d6c:	4b05      	ldr	r3, [pc, #20]	@ (8006d84 <wm8994_Init+0x9c8>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8006d72:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8006d76:	f7fd f977 	bl	8004068 <AUDIO_IO_Delay>
 8006d7a:	e016      	b.n	8006daa <wm8994_Init+0x9ee>
 8006d7c:	20000ff8 	.word	0x20000ff8
 8006d80:	00017700 	.word	0x00017700
 8006d84:	20000088 	.word	0x20000088
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8006d88:	89fb      	ldrh	r3, [r7, #14]
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	f248 1208 	movw	r2, #33032	@ 0x8108
 8006d90:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 ff65 	bl	8007c64 <CODEC_IO_Write>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	4413      	add	r3, r2
 8006da2:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8006da4:	2032      	movs	r0, #50	@ 0x32
 8006da6:	f7fd f95f 	bl	8004068 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8006daa:	89fb      	ldrh	r3, [r7, #14]
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2200      	movs	r2, #0
 8006db0:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 ff55 	bl	8007c64 <CODEC_IO_Write>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8006dc4:	89fb      	ldrh	r3, [r7, #14]
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8006dcc:	2103      	movs	r1, #3
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 ff48 	bl	8007c64 <CODEC_IO_Write>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	4413      	add	r3, r2
 8006ddc:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8006dde:	89fb      	ldrh	r3, [r7, #14]
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2200      	movs	r2, #0
 8006de4:	2122      	movs	r1, #34	@ 0x22
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 ff3c 	bl	8007c64 <CODEC_IO_Write>
 8006dec:	4603      	mov	r3, r0
 8006dee:	461a      	mov	r2, r3
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	4413      	add	r3, r2
 8006df4:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8006df6:	89fb      	ldrh	r3, [r7, #14]
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	2123      	movs	r1, #35	@ 0x23
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 ff30 	bl	8007c64 <CODEC_IO_Write>
 8006e04:	4603      	mov	r3, r0
 8006e06:	461a      	mov	r2, r3
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8006e0e:	89fb      	ldrh	r3, [r7, #14]
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8006e16:	2136      	movs	r1, #54	@ 0x36
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f000 ff23 	bl	8007c64 <CODEC_IO_Write>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	461a      	mov	r2, r3
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	4413      	add	r3, r2
 8006e26:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8006e28:	89fb      	ldrh	r3, [r7, #14]
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	f243 0203 	movw	r2, #12291	@ 0x3003
 8006e30:	2101      	movs	r1, #1
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 ff16 	bl	8007c64 <CODEC_IO_Write>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	4413      	add	r3, r2
 8006e40:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8006e42:	8afb      	ldrh	r3, [r7, #22]
 8006e44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e48:	d10d      	bne.n	8006e66 <wm8994_Init+0xaaa>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8006e4a:	89fb      	ldrh	r3, [r7, #14]
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	f240 2205 	movw	r2, #517	@ 0x205
 8006e52:	2151      	movs	r1, #81	@ 0x51
 8006e54:	4618      	mov	r0, r3
 8006e56:	f000 ff05 	bl	8007c64 <CODEC_IO_Write>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	4413      	add	r3, r2
 8006e62:	61fb      	str	r3, [r7, #28]
 8006e64:	e00b      	b.n	8006e7e <wm8994_Init+0xac2>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8006e66:	89fb      	ldrh	r3, [r7, #14]
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2205      	movs	r2, #5
 8006e6c:	2151      	movs	r1, #81	@ 0x51
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 fef8 	bl	8007c64 <CODEC_IO_Write>
 8006e74:	4603      	mov	r3, r0
 8006e76:	461a      	mov	r2, r3
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8006e7e:	8b7b      	ldrh	r3, [r7, #26]
 8006e80:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 8006e84:	f043 0303 	orr.w	r3, r3, #3
 8006e88:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8006e8a:	89fb      	ldrh	r3, [r7, #14]
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	8b7a      	ldrh	r2, [r7, #26]
 8006e90:	2101      	movs	r1, #1
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 fee6 	bl	8007c64 <CODEC_IO_Write>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8006ea2:	89fb      	ldrh	r3, [r7, #14]
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2222      	movs	r2, #34	@ 0x22
 8006ea8:	2160      	movs	r1, #96	@ 0x60
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 feda 	bl	8007c64 <CODEC_IO_Write>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8006eba:	89fb      	ldrh	r3, [r7, #14]
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8006ec2:	214c      	movs	r1, #76	@ 0x4c
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 fecd 	bl	8007c64 <CODEC_IO_Write>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	461a      	mov	r2, r3
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8006ed4:	200f      	movs	r0, #15
 8006ed6:	f7fd f8c7 	bl	8004068 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8006eda:	89fb      	ldrh	r3, [r7, #14]
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2201      	movs	r2, #1
 8006ee0:	212d      	movs	r1, #45	@ 0x2d
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f000 febe 	bl	8007c64 <CODEC_IO_Write>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	461a      	mov	r2, r3
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	4413      	add	r3, r2
 8006ef0:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8006ef2:	89fb      	ldrh	r3, [r7, #14]
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	212e      	movs	r1, #46	@ 0x2e
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 feb2 	bl	8007c64 <CODEC_IO_Write>
 8006f00:	4603      	mov	r3, r0
 8006f02:	461a      	mov	r2, r3
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	4413      	add	r3, r2
 8006f08:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8006f0a:	89fb      	ldrh	r3, [r7, #14]
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8006f12:	2103      	movs	r1, #3
 8006f14:	4618      	mov	r0, r3
 8006f16:	f000 fea5 	bl	8007c64 <CODEC_IO_Write>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	4413      	add	r3, r2
 8006f22:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8006f24:	89fb      	ldrh	r3, [r7, #14]
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2233      	movs	r2, #51	@ 0x33
 8006f2a:	2154      	movs	r1, #84	@ 0x54
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 fe99 	bl	8007c64 <CODEC_IO_Write>
 8006f32:	4603      	mov	r3, r0
 8006f34:	461a      	mov	r2, r3
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	4413      	add	r3, r2
 8006f3a:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8006f3c:	f240 1001 	movw	r0, #257	@ 0x101
 8006f40:	f7fd f892 	bl	8004068 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8006f44:	89fb      	ldrh	r3, [r7, #14]
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	22ee      	movs	r2, #238	@ 0xee
 8006f4a:	2160      	movs	r1, #96	@ 0x60
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 fe89 	bl	8007c64 <CODEC_IO_Write>
 8006f52:	4603      	mov	r3, r0
 8006f54:	461a      	mov	r2, r3
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	4413      	add	r3, r2
 8006f5a:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8006f5c:	89fb      	ldrh	r3, [r7, #14]
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	22c0      	movs	r2, #192	@ 0xc0
 8006f62:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 fe7c 	bl	8007c64 <CODEC_IO_Write>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	461a      	mov	r2, r3
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	4413      	add	r3, r2
 8006f74:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8006f76:	89fb      	ldrh	r3, [r7, #14]
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	22c0      	movs	r2, #192	@ 0xc0
 8006f7c:	f240 6111 	movw	r1, #1553	@ 0x611
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 fe6f 	bl	8007c64 <CODEC_IO_Write>
 8006f86:	4603      	mov	r3, r0
 8006f88:	461a      	mov	r2, r3
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8006f90:	89fb      	ldrh	r3, [r7, #14]
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2210      	movs	r2, #16
 8006f96:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f000 fe62 	bl	8007c64 <CODEC_IO_Write>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8006faa:	89fb      	ldrh	r3, [r7, #14]
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	22c0      	movs	r2, #192	@ 0xc0
 8006fb0:	f240 6112 	movw	r1, #1554	@ 0x612
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 fe55 	bl	8007c64 <CODEC_IO_Write>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8006fc4:	89fb      	ldrh	r3, [r7, #14]
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	22c0      	movs	r2, #192	@ 0xc0
 8006fca:	f240 6113 	movw	r1, #1555	@ 0x613
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 fe48 	bl	8007c64 <CODEC_IO_Write>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	4413      	add	r3, r2
 8006fdc:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8006fde:	89fb      	ldrh	r3, [r7, #14]
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2210      	movs	r2, #16
 8006fe4:	f240 4122 	movw	r1, #1058	@ 0x422
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fe3b 	bl	8007c64 <CODEC_IO_Write>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8006ff8:	7afa      	ldrb	r2, [r7, #11]
 8006ffa:	89fb      	ldrh	r3, [r7, #14]
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 f984 	bl	800730c <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8007004:	8afb      	ldrh	r3, [r7, #22]
 8007006:	2b00      	cmp	r3, #0
 8007008:	f000 80a6 	beq.w	8007158 <wm8994_Init+0xd9c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 800700c:	8afb      	ldrh	r3, [r7, #22]
 800700e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007012:	d003      	beq.n	800701c <wm8994_Init+0xc60>
 8007014:	8afb      	ldrh	r3, [r7, #22]
 8007016:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800701a:	d12b      	bne.n	8007074 <wm8994_Init+0xcb8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 800701c:	8b7b      	ldrh	r3, [r7, #26]
 800701e:	f043 0313 	orr.w	r3, r3, #19
 8007022:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8007024:	89fb      	ldrh	r3, [r7, #14]
 8007026:	b2db      	uxtb	r3, r3
 8007028:	8b7a      	ldrh	r2, [r7, #26]
 800702a:	2101      	movs	r1, #1
 800702c:	4618      	mov	r0, r3
 800702e:	f000 fe19 	bl	8007c64 <CODEC_IO_Write>
 8007032:	4603      	mov	r3, r0
 8007034:	461a      	mov	r2, r3
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	4413      	add	r3, r2
 800703a:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 800703c:	89fb      	ldrh	r3, [r7, #14]
 800703e:	b2db      	uxtb	r3, r3
 8007040:	2202      	movs	r2, #2
 8007042:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8007046:	4618      	mov	r0, r3
 8007048:	f000 fe0c 	bl	8007c64 <CODEC_IO_Write>
 800704c:	4603      	mov	r3, r0
 800704e:	461a      	mov	r2, r3
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	4413      	add	r3, r2
 8007054:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8007056:	89fb      	ldrh	r3, [r7, #14]
 8007058:	b2db      	uxtb	r3, r3
 800705a:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800705e:	f240 4111 	movw	r1, #1041	@ 0x411
 8007062:	4618      	mov	r0, r3
 8007064:	f000 fdfe 	bl	8007c64 <CODEC_IO_Write>
 8007068:	4603      	mov	r3, r0
 800706a:	461a      	mov	r2, r3
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	4413      	add	r3, r2
 8007070:	61fb      	str	r3, [r7, #28]
 8007072:	e06b      	b.n	800714c <wm8994_Init+0xd90>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8007074:	8afb      	ldrh	r3, [r7, #22]
 8007076:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800707a:	d139      	bne.n	80070f0 <wm8994_Init+0xd34>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 800707c:	8b7b      	ldrh	r3, [r7, #26]
 800707e:	f043 0313 	orr.w	r3, r3, #19
 8007082:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8007084:	89fb      	ldrh	r3, [r7, #14]
 8007086:	b2db      	uxtb	r3, r3
 8007088:	8b7a      	ldrh	r2, [r7, #26]
 800708a:	2101      	movs	r1, #1
 800708c:	4618      	mov	r0, r3
 800708e:	f000 fde9 	bl	8007c64 <CODEC_IO_Write>
 8007092:	4603      	mov	r3, r0
 8007094:	461a      	mov	r2, r3
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	4413      	add	r3, r2
 800709a:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 800709c:	89fb      	ldrh	r3, [r7, #14]
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2202      	movs	r2, #2
 80070a2:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 fddc 	bl	8007c64 <CODEC_IO_Write>
 80070ac:	4603      	mov	r3, r0
 80070ae:	461a      	mov	r2, r3
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	4413      	add	r3, r2
 80070b4:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80070b6:	89fb      	ldrh	r3, [r7, #14]
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80070be:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 fdce 	bl	8007c64 <CODEC_IO_Write>
 80070c8:	4603      	mov	r3, r0
 80070ca:	461a      	mov	r2, r3
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	4413      	add	r3, r2
 80070d0:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 80070d2:	89fb      	ldrh	r3, [r7, #14]
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80070da:	f240 4111 	movw	r1, #1041	@ 0x411
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 fdc0 	bl	8007c64 <CODEC_IO_Write>
 80070e4:	4603      	mov	r3, r0
 80070e6:	461a      	mov	r2, r3
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	4413      	add	r3, r2
 80070ec:	61fb      	str	r3, [r7, #28]
 80070ee:	e02d      	b.n	800714c <wm8994_Init+0xd90>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 80070f0:	8afb      	ldrh	r3, [r7, #22]
 80070f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070f6:	d003      	beq.n	8007100 <wm8994_Init+0xd44>
 80070f8:	8afb      	ldrh	r3, [r7, #22]
 80070fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070fe:	d125      	bne.n	800714c <wm8994_Init+0xd90>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x008B);
 8007100:	89fb      	ldrh	r3, [r7, #14]
 8007102:	b2db      	uxtb	r3, r3
 8007104:	228b      	movs	r2, #139	@ 0x8b
 8007106:	2118      	movs	r1, #24
 8007108:	4618      	mov	r0, r3
 800710a:	f000 fdab 	bl	8007c64 <CODEC_IO_Write>
 800710e:	4603      	mov	r3, r0
 8007110:	461a      	mov	r2, r3
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	4413      	add	r3, r2
 8007116:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x008B);
 8007118:	89fb      	ldrh	r3, [r7, #14]
 800711a:	b2db      	uxtb	r3, r3
 800711c:	228b      	movs	r2, #139	@ 0x8b
 800711e:	211a      	movs	r1, #26
 8007120:	4618      	mov	r0, r3
 8007122:	f000 fd9f 	bl	8007c64 <CODEC_IO_Write>
 8007126:	4603      	mov	r3, r0
 8007128:	461a      	mov	r2, r3
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	4413      	add	r3, r2
 800712e:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8007130:	89fb      	ldrh	r3, [r7, #14]
 8007132:	b2db      	uxtb	r3, r3
 8007134:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8007138:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800713c:	4618      	mov	r0, r3
 800713e:	f000 fd91 	bl	8007c64 <CODEC_IO_Write>
 8007142:	4603      	mov	r3, r0
 8007144:	461a      	mov	r2, r3
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	4413      	add	r3, r2
 800714a:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 800714c:	7afa      	ldrb	r2, [r7, #11]
 800714e:	89fb      	ldrh	r3, [r7, #14]
 8007150:	4611      	mov	r1, r2
 8007152:	4618      	mov	r0, r3
 8007154:	f000 f8da 	bl	800730c <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8007158:	69fb      	ldr	r3, [r7, #28]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3720      	adds	r7, #32
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop

08007164 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8007168:	f7fc ff20 	bl	8003fac <AUDIO_IO_DeInit>
}
 800716c:	bf00      	nop
 800716e:	bd80      	pop	{r7, pc}

08007170 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	4603      	mov	r3, r0
 8007178:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 800717a:	f7fc ff0d 	bl	8003f98 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 800717e:	88fb      	ldrh	r3, [r7, #6]
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2100      	movs	r1, #0
 8007184:	4618      	mov	r0, r3
 8007186:	f7fc ff43 	bl	8004010 <AUDIO_IO_Read>
 800718a:	4603      	mov	r3, r0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	4603      	mov	r3, r0
 800719c:	6039      	str	r1, [r7, #0]
 800719e:	80fb      	strh	r3, [r7, #6]
 80071a0:	4613      	mov	r3, r2
 80071a2:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80071a4:	2300      	movs	r3, #0
 80071a6:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80071a8:	88fb      	ldrh	r3, [r7, #6]
 80071aa:	2100      	movs	r1, #0
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 faf3 	bl	8007798 <wm8994_SetMute>
 80071b2:	4602      	mov	r2, r0
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	4413      	add	r3, r2
 80071b8:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80071ba:	68fb      	ldr	r3, [r7, #12]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	4603      	mov	r3, r0
 80071cc:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80071ce:	2300      	movs	r3, #0
 80071d0:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80071d2:	88fb      	ldrh	r3, [r7, #6]
 80071d4:	2101      	movs	r1, #1
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 fade 	bl	8007798 <wm8994_SetMute>
 80071dc:	4602      	mov	r2, r0
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	4413      	add	r3, r2
 80071e2:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 80071e4:	88fb      	ldrh	r3, [r7, #6]
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	2201      	movs	r2, #1
 80071ea:	2102      	movs	r1, #2
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 fd39 	bl	8007c64 <CODEC_IO_Write>
 80071f2:	4603      	mov	r3, r0
 80071f4:	461a      	mov	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	4413      	add	r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]
 
  return counter;
 80071fc:	68fb      	ldr	r3, [r7, #12]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b084      	sub	sp, #16
 800720a:	af00      	add	r7, sp, #0
 800720c:	4603      	mov	r3, r0
 800720e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8007210:	2300      	movs	r3, #0
 8007212:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8007214:	88fb      	ldrh	r3, [r7, #6]
 8007216:	2100      	movs	r1, #0
 8007218:	4618      	mov	r0, r3
 800721a:	f000 fabd 	bl	8007798 <wm8994_SetMute>
 800721e:	4602      	mov	r2, r0
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4413      	add	r3, r2
 8007224:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8007226:	68fb      	ldr	r3, [r7, #12]
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	4603      	mov	r3, r0
 8007238:	6039      	str	r1, [r7, #0]
 800723a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800723c:	2300      	movs	r3, #0
 800723e:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8007240:	4b31      	ldr	r3, [pc, #196]	@ (8007308 <wm8994_Stop+0xd8>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d05a      	beq.n	80072fe <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8007248:	88fb      	ldrh	r3, [r7, #6]
 800724a:	2101      	movs	r1, #1
 800724c:	4618      	mov	r0, r3
 800724e:	f000 faa3 	bl	8007798 <wm8994_SetMute>
 8007252:	4602      	mov	r2, r0
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4413      	add	r3, r2
 8007258:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2b02      	cmp	r3, #2
 800725e:	d04e      	beq.n	80072fe <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8007260:	88fb      	ldrh	r3, [r7, #6]
 8007262:	b2db      	uxtb	r3, r3
 8007264:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007268:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800726c:	4618      	mov	r0, r3
 800726e:	f000 fcf9 	bl	8007c64 <CODEC_IO_Write>
 8007272:	4603      	mov	r3, r0
 8007274:	461a      	mov	r2, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	4413      	add	r3, r2
 800727a:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 800727c:	88fb      	ldrh	r3, [r7, #6]
 800727e:	b2db      	uxtb	r3, r3
 8007280:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007284:	f240 4122 	movw	r1, #1058	@ 0x422
 8007288:	4618      	mov	r0, r3
 800728a:	f000 fceb 	bl	8007c64 <CODEC_IO_Write>
 800728e:	4603      	mov	r3, r0
 8007290:	461a      	mov	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4413      	add	r3, r2
 8007296:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8007298:	88fb      	ldrh	r3, [r7, #6]
 800729a:	b2db      	uxtb	r3, r3
 800729c:	2200      	movs	r2, #0
 800729e:	212d      	movs	r1, #45	@ 0x2d
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 fcdf 	bl	8007c64 <CODEC_IO_Write>
 80072a6:	4603      	mov	r3, r0
 80072a8:	461a      	mov	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	4413      	add	r3, r2
 80072ae:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 80072b0:	88fb      	ldrh	r3, [r7, #6]
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2200      	movs	r2, #0
 80072b6:	212e      	movs	r1, #46	@ 0x2e
 80072b8:	4618      	mov	r0, r3
 80072ba:	f000 fcd3 	bl	8007c64 <CODEC_IO_Write>
 80072be:	4603      	mov	r3, r0
 80072c0:	461a      	mov	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4413      	add	r3, r2
 80072c6:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 80072c8:	88fb      	ldrh	r3, [r7, #6]
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2200      	movs	r2, #0
 80072ce:	2105      	movs	r1, #5
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 fcc7 	bl	8007c64 <CODEC_IO_Write>
 80072d6:	4603      	mov	r3, r0
 80072d8:	461a      	mov	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	4413      	add	r3, r2
 80072de:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80072e0:	88fb      	ldrh	r3, [r7, #6]
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	2200      	movs	r2, #0
 80072e6:	2100      	movs	r1, #0
 80072e8:	4618      	mov	r0, r3
 80072ea:	f000 fcbb 	bl	8007c64 <CODEC_IO_Write>
 80072ee:	4603      	mov	r3, r0
 80072f0:	461a      	mov	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4413      	add	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 80072f8:	4b03      	ldr	r3, [pc, #12]	@ (8007308 <wm8994_Stop+0xd8>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 80072fe:	68fb      	ldr	r3, [r7, #12]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	20000ff4 	.word	0x20000ff4

0800730c <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	4603      	mov	r3, r0
 8007314:	460a      	mov	r2, r1
 8007316:	80fb      	strh	r3, [r7, #6]
 8007318:	4613      	mov	r3, r2
 800731a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 800731c:	2300      	movs	r3, #0
 800731e:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8007320:	797b      	ldrb	r3, [r7, #5]
 8007322:	2b64      	cmp	r3, #100	@ 0x64
 8007324:	d80b      	bhi.n	800733e <wm8994_SetVolume+0x32>
 8007326:	797a      	ldrb	r2, [r7, #5]
 8007328:	4613      	mov	r3, r2
 800732a:	019b      	lsls	r3, r3, #6
 800732c:	1a9b      	subs	r3, r3, r2
 800732e:	4a86      	ldr	r2, [pc, #536]	@ (8007548 <wm8994_SetVolume+0x23c>)
 8007330:	fb82 1203 	smull	r1, r2, r2, r3
 8007334:	1152      	asrs	r2, r2, #5
 8007336:	17db      	asrs	r3, r3, #31
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	b2db      	uxtb	r3, r3
 800733c:	e000      	b.n	8007340 <wm8994_SetVolume+0x34>
 800733e:	2364      	movs	r3, #100	@ 0x64
 8007340:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8007342:	4b82      	ldr	r3, [pc, #520]	@ (800754c <wm8994_SetVolume+0x240>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 809b 	beq.w	8007482 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 800734c:	7afb      	ldrb	r3, [r7, #11]
 800734e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007350:	d93d      	bls.n	80073ce <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8007352:	88fb      	ldrh	r3, [r7, #6]
 8007354:	2100      	movs	r1, #0
 8007356:	4618      	mov	r0, r3
 8007358:	f000 fa1e 	bl	8007798 <wm8994_SetMute>
 800735c:	4602      	mov	r2, r0
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	4413      	add	r3, r2
 8007362:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8007364:	88fb      	ldrh	r3, [r7, #6]
 8007366:	b2db      	uxtb	r3, r3
 8007368:	f240 127f 	movw	r2, #383	@ 0x17f
 800736c:	211c      	movs	r1, #28
 800736e:	4618      	mov	r0, r3
 8007370:	f000 fc78 	bl	8007c64 <CODEC_IO_Write>
 8007374:	4603      	mov	r3, r0
 8007376:	461a      	mov	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4413      	add	r3, r2
 800737c:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 800737e:	88fb      	ldrh	r3, [r7, #6]
 8007380:	b2db      	uxtb	r3, r3
 8007382:	f240 127f 	movw	r2, #383	@ 0x17f
 8007386:	211d      	movs	r1, #29
 8007388:	4618      	mov	r0, r3
 800738a:	f000 fc6b 	bl	8007c64 <CODEC_IO_Write>
 800738e:	4603      	mov	r3, r0
 8007390:	461a      	mov	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4413      	add	r3, r2
 8007396:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8007398:	88fb      	ldrh	r3, [r7, #6]
 800739a:	b2db      	uxtb	r3, r3
 800739c:	f240 127f 	movw	r2, #383	@ 0x17f
 80073a0:	2126      	movs	r1, #38	@ 0x26
 80073a2:	4618      	mov	r0, r3
 80073a4:	f000 fc5e 	bl	8007c64 <CODEC_IO_Write>
 80073a8:	4603      	mov	r3, r0
 80073aa:	461a      	mov	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4413      	add	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 80073b2:	88fb      	ldrh	r3, [r7, #6]
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	f240 127f 	movw	r2, #383	@ 0x17f
 80073ba:	2127      	movs	r1, #39	@ 0x27
 80073bc:	4618      	mov	r0, r3
 80073be:	f000 fc51 	bl	8007c64 <CODEC_IO_Write>
 80073c2:	4603      	mov	r3, r0
 80073c4:	461a      	mov	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	4413      	add	r3, r2
 80073ca:	60fb      	str	r3, [r7, #12]
 80073cc:	e059      	b.n	8007482 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 80073ce:	797b      	ldrb	r3, [r7, #5]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d109      	bne.n	80073e8 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80073d4:	88fb      	ldrh	r3, [r7, #6]
 80073d6:	2101      	movs	r1, #1
 80073d8:	4618      	mov	r0, r3
 80073da:	f000 f9dd 	bl	8007798 <wm8994_SetMute>
 80073de:	4602      	mov	r2, r0
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]
 80073e6:	e04c      	b.n	8007482 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80073e8:	88fb      	ldrh	r3, [r7, #6]
 80073ea:	2100      	movs	r1, #0
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 f9d3 	bl	8007798 <wm8994_SetMute>
 80073f2:	4602      	mov	r2, r0
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	4413      	add	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 80073fa:	88fb      	ldrh	r3, [r7, #6]
 80073fc:	b2d8      	uxtb	r0, r3
 80073fe:	7afb      	ldrb	r3, [r7, #11]
 8007400:	b21b      	sxth	r3, r3
 8007402:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8007406:	b21b      	sxth	r3, r3
 8007408:	b29b      	uxth	r3, r3
 800740a:	461a      	mov	r2, r3
 800740c:	211c      	movs	r1, #28
 800740e:	f000 fc29 	bl	8007c64 <CODEC_IO_Write>
 8007412:	4603      	mov	r3, r0
 8007414:	461a      	mov	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	4413      	add	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 800741c:	88fb      	ldrh	r3, [r7, #6]
 800741e:	b2d8      	uxtb	r0, r3
 8007420:	7afb      	ldrb	r3, [r7, #11]
 8007422:	b21b      	sxth	r3, r3
 8007424:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8007428:	b21b      	sxth	r3, r3
 800742a:	b29b      	uxth	r3, r3
 800742c:	461a      	mov	r2, r3
 800742e:	211d      	movs	r1, #29
 8007430:	f000 fc18 	bl	8007c64 <CODEC_IO_Write>
 8007434:	4603      	mov	r3, r0
 8007436:	461a      	mov	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	4413      	add	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 800743e:	88fb      	ldrh	r3, [r7, #6]
 8007440:	b2d8      	uxtb	r0, r3
 8007442:	7afb      	ldrb	r3, [r7, #11]
 8007444:	b21b      	sxth	r3, r3
 8007446:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800744a:	b21b      	sxth	r3, r3
 800744c:	b29b      	uxth	r3, r3
 800744e:	461a      	mov	r2, r3
 8007450:	2126      	movs	r1, #38	@ 0x26
 8007452:	f000 fc07 	bl	8007c64 <CODEC_IO_Write>
 8007456:	4603      	mov	r3, r0
 8007458:	461a      	mov	r2, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	4413      	add	r3, r2
 800745e:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8007460:	88fb      	ldrh	r3, [r7, #6]
 8007462:	b2d8      	uxtb	r0, r3
 8007464:	7afb      	ldrb	r3, [r7, #11]
 8007466:	b21b      	sxth	r3, r3
 8007468:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800746c:	b21b      	sxth	r3, r3
 800746e:	b29b      	uxth	r3, r3
 8007470:	461a      	mov	r2, r3
 8007472:	2127      	movs	r1, #39	@ 0x27
 8007474:	f000 fbf6 	bl	8007c64 <CODEC_IO_Write>
 8007478:	4603      	mov	r3, r0
 800747a:	461a      	mov	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	4413      	add	r3, r2
 8007480:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8007482:	4b33      	ldr	r3, [pc, #204]	@ (8007550 <wm8994_SetVolume+0x244>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d059      	beq.n	800753e <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 800748a:	797b      	ldrb	r3, [r7, #5]
 800748c:	2b63      	cmp	r3, #99	@ 0x63
 800748e:	d80c      	bhi.n	80074aa <wm8994_SetVolume+0x19e>
 8007490:	797a      	ldrb	r2, [r7, #5]
 8007492:	4613      	mov	r3, r2
 8007494:	011b      	lsls	r3, r3, #4
 8007496:	1a9b      	subs	r3, r3, r2
 8007498:	011b      	lsls	r3, r3, #4
 800749a:	4a2b      	ldr	r2, [pc, #172]	@ (8007548 <wm8994_SetVolume+0x23c>)
 800749c:	fb82 1203 	smull	r1, r2, r2, r3
 80074a0:	1152      	asrs	r2, r2, #5
 80074a2:	17db      	asrs	r3, r3, #31
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	e000      	b.n	80074ac <wm8994_SetVolume+0x1a0>
 80074aa:	23ef      	movs	r3, #239	@ 0xef
 80074ac:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80074ae:	88fb      	ldrh	r3, [r7, #6]
 80074b0:	b2d8      	uxtb	r0, r3
 80074b2:	7afb      	ldrb	r3, [r7, #11]
 80074b4:	b21b      	sxth	r3, r3
 80074b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074ba:	b21b      	sxth	r3, r3
 80074bc:	b29b      	uxth	r3, r3
 80074be:	461a      	mov	r2, r3
 80074c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80074c4:	f000 fbce 	bl	8007c64 <CODEC_IO_Write>
 80074c8:	4603      	mov	r3, r0
 80074ca:	461a      	mov	r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	4413      	add	r3, r2
 80074d0:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 80074d2:	88fb      	ldrh	r3, [r7, #6]
 80074d4:	b2d8      	uxtb	r0, r3
 80074d6:	7afb      	ldrb	r3, [r7, #11]
 80074d8:	b21b      	sxth	r3, r3
 80074da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074de:	b21b      	sxth	r3, r3
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	461a      	mov	r2, r3
 80074e4:	f240 4101 	movw	r1, #1025	@ 0x401
 80074e8:	f000 fbbc 	bl	8007c64 <CODEC_IO_Write>
 80074ec:	4603      	mov	r3, r0
 80074ee:	461a      	mov	r2, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4413      	add	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 80074f6:	88fb      	ldrh	r3, [r7, #6]
 80074f8:	b2d8      	uxtb	r0, r3
 80074fa:	7afb      	ldrb	r3, [r7, #11]
 80074fc:	b21b      	sxth	r3, r3
 80074fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007502:	b21b      	sxth	r3, r3
 8007504:	b29b      	uxth	r3, r3
 8007506:	461a      	mov	r2, r3
 8007508:	f240 4104 	movw	r1, #1028	@ 0x404
 800750c:	f000 fbaa 	bl	8007c64 <CODEC_IO_Write>
 8007510:	4603      	mov	r3, r0
 8007512:	461a      	mov	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	4413      	add	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 800751a:	88fb      	ldrh	r3, [r7, #6]
 800751c:	b2d8      	uxtb	r0, r3
 800751e:	7afb      	ldrb	r3, [r7, #11]
 8007520:	b21b      	sxth	r3, r3
 8007522:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007526:	b21b      	sxth	r3, r3
 8007528:	b29b      	uxth	r3, r3
 800752a:	461a      	mov	r2, r3
 800752c:	f240 4105 	movw	r1, #1029	@ 0x405
 8007530:	f000 fb98 	bl	8007c64 <CODEC_IO_Write>
 8007534:	4603      	mov	r3, r0
 8007536:	461a      	mov	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4413      	add	r3, r2
 800753c:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 800753e:	68fb      	ldr	r3, [r7, #12]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	51eb851f 	.word	0x51eb851f
 800754c:	20000ff4 	.word	0x20000ff4
 8007550:	20000ff8 	.word	0x20000ff8

08007554 <wm8994_SetVolumeOut>:
uint32_t wm8994_SetVolumeOut(uint16_t DeviceAddr, uint8_t Volume) {
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	4603      	mov	r3, r0
 800755c:	460a      	mov	r2, r1
 800755e:	80fb      	strh	r3, [r7, #6]
 8007560:	4613      	mov	r3, r2
 8007562:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 8007564:	2300      	movs	r3, #0
 8007566:	60fb      	str	r3, [r7, #12]
	uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8007568:	797b      	ldrb	r3, [r7, #5]
 800756a:	2b64      	cmp	r3, #100	@ 0x64
 800756c:	d80b      	bhi.n	8007586 <wm8994_SetVolumeOut+0x32>
 800756e:	797a      	ldrb	r2, [r7, #5]
 8007570:	4613      	mov	r3, r2
 8007572:	019b      	lsls	r3, r3, #6
 8007574:	1a9b      	subs	r3, r3, r2
 8007576:	4a57      	ldr	r2, [pc, #348]	@ (80076d4 <wm8994_SetVolumeOut+0x180>)
 8007578:	fb82 1203 	smull	r1, r2, r2, r3
 800757c:	1152      	asrs	r2, r2, #5
 800757e:	17db      	asrs	r3, r3, #31
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	b2db      	uxtb	r3, r3
 8007584:	e000      	b.n	8007588 <wm8994_SetVolumeOut+0x34>
 8007586:	2364      	movs	r3, #100	@ 0x64
 8007588:	72fb      	strb	r3, [r7, #11]

	/* Output volume */
	if (outputEnabled != 0) {
 800758a:	4b53      	ldr	r3, [pc, #332]	@ (80076d8 <wm8994_SetVolumeOut+0x184>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 809b 	beq.w	80076ca <wm8994_SetVolumeOut+0x176>
		if (convertedvol > 0x3E) {
 8007594:	7afb      	ldrb	r3, [r7, #11]
 8007596:	2b3e      	cmp	r3, #62	@ 0x3e
 8007598:	d93d      	bls.n	8007616 <wm8994_SetVolumeOut+0xc2>
			/* Unmute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800759a:	88fb      	ldrh	r3, [r7, #6]
 800759c:	2100      	movs	r1, #0
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 f8fa 	bl	8007798 <wm8994_SetMute>
 80075a4:	4602      	mov	r2, r0
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	4413      	add	r3, r2
 80075aa:	60fb      	str	r3, [r7, #12]

			/* Left Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80075ac:	88fb      	ldrh	r3, [r7, #6]
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	f240 127f 	movw	r2, #383	@ 0x17f
 80075b4:	211c      	movs	r1, #28
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 fb54 	bl	8007c64 <CODEC_IO_Write>
 80075bc:	4603      	mov	r3, r0
 80075be:	461a      	mov	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4413      	add	r3, r2
 80075c4:	60fb      	str	r3, [r7, #12]

			/* Right Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80075c6:	88fb      	ldrh	r3, [r7, #6]
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	f240 127f 	movw	r2, #383	@ 0x17f
 80075ce:	211d      	movs	r1, #29
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 fb47 	bl	8007c64 <CODEC_IO_Write>
 80075d6:	4603      	mov	r3, r0
 80075d8:	461a      	mov	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4413      	add	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]

			/* Left Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80075e0:	88fb      	ldrh	r3, [r7, #6]
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	f240 127f 	movw	r2, #383	@ 0x17f
 80075e8:	2126      	movs	r1, #38	@ 0x26
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fb3a 	bl	8007c64 <CODEC_IO_Write>
 80075f0:	4603      	mov	r3, r0
 80075f2:	461a      	mov	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4413      	add	r3, r2
 80075f8:	60fb      	str	r3, [r7, #12]

			/* Right Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 80075fa:	88fb      	ldrh	r3, [r7, #6]
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	f240 127f 	movw	r2, #383	@ 0x17f
 8007602:	2127      	movs	r1, #39	@ 0x27
 8007604:	4618      	mov	r0, r3
 8007606:	f000 fb2d 	bl	8007c64 <CODEC_IO_Write>
 800760a:	4603      	mov	r3, r0
 800760c:	461a      	mov	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	4413      	add	r3, r2
 8007612:	60fb      	str	r3, [r7, #12]
 8007614:	e059      	b.n	80076ca <wm8994_SetVolumeOut+0x176>
		} else if (Volume == 0) {
 8007616:	797b      	ldrb	r3, [r7, #5]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d109      	bne.n	8007630 <wm8994_SetVolumeOut+0xdc>
			/* Mute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800761c:	88fb      	ldrh	r3, [r7, #6]
 800761e:	2101      	movs	r1, #1
 8007620:	4618      	mov	r0, r3
 8007622:	f000 f8b9 	bl	8007798 <wm8994_SetMute>
 8007626:	4602      	mov	r2, r0
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4413      	add	r3, r2
 800762c:	60fb      	str	r3, [r7, #12]
 800762e:	e04c      	b.n	80076ca <wm8994_SetVolumeOut+0x176>
		} else {
			/* Unmute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8007630:	88fb      	ldrh	r3, [r7, #6]
 8007632:	2100      	movs	r1, #0
 8007634:	4618      	mov	r0, r3
 8007636:	f000 f8af 	bl	8007798 <wm8994_SetMute>
 800763a:	4602      	mov	r2, r0
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	4413      	add	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]

			/* Left Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8007642:	88fb      	ldrh	r3, [r7, #6]
 8007644:	b2d8      	uxtb	r0, r3
 8007646:	7afb      	ldrb	r3, [r7, #11]
 8007648:	b21b      	sxth	r3, r3
 800764a:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800764e:	b21b      	sxth	r3, r3
 8007650:	b29b      	uxth	r3, r3
 8007652:	461a      	mov	r2, r3
 8007654:	211c      	movs	r1, #28
 8007656:	f000 fb05 	bl	8007c64 <CODEC_IO_Write>
 800765a:	4603      	mov	r3, r0
 800765c:	461a      	mov	r2, r3
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	4413      	add	r3, r2
 8007662:	60fb      	str	r3, [r7, #12]

			/* Right Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8007664:	88fb      	ldrh	r3, [r7, #6]
 8007666:	b2d8      	uxtb	r0, r3
 8007668:	7afb      	ldrb	r3, [r7, #11]
 800766a:	b21b      	sxth	r3, r3
 800766c:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8007670:	b21b      	sxth	r3, r3
 8007672:	b29b      	uxth	r3, r3
 8007674:	461a      	mov	r2, r3
 8007676:	211d      	movs	r1, #29
 8007678:	f000 faf4 	bl	8007c64 <CODEC_IO_Write>
 800767c:	4603      	mov	r3, r0
 800767e:	461a      	mov	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4413      	add	r3, r2
 8007684:	60fb      	str	r3, [r7, #12]

			/* Left Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8007686:	88fb      	ldrh	r3, [r7, #6]
 8007688:	b2d8      	uxtb	r0, r3
 800768a:	7afb      	ldrb	r3, [r7, #11]
 800768c:	b21b      	sxth	r3, r3
 800768e:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8007692:	b21b      	sxth	r3, r3
 8007694:	b29b      	uxth	r3, r3
 8007696:	461a      	mov	r2, r3
 8007698:	2126      	movs	r1, #38	@ 0x26
 800769a:	f000 fae3 	bl	8007c64 <CODEC_IO_Write>
 800769e:	4603      	mov	r3, r0
 80076a0:	461a      	mov	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	4413      	add	r3, r2
 80076a6:	60fb      	str	r3, [r7, #12]

			/* Right Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 80076a8:	88fb      	ldrh	r3, [r7, #6]
 80076aa:	b2d8      	uxtb	r0, r3
 80076ac:	7afb      	ldrb	r3, [r7, #11]
 80076ae:	b21b      	sxth	r3, r3
 80076b0:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80076b4:	b21b      	sxth	r3, r3
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	461a      	mov	r2, r3
 80076ba:	2127      	movs	r1, #39	@ 0x27
 80076bc:	f000 fad2 	bl	8007c64 <CODEC_IO_Write>
 80076c0:	4603      	mov	r3, r0
 80076c2:	461a      	mov	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	4413      	add	r3, r2
 80076c8:	60fb      	str	r3, [r7, #12]
		}
	}
	return counter;
 80076ca:	68fb      	ldr	r3, [r7, #12]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	51eb851f 	.word	0x51eb851f
 80076d8:	20000ff4 	.word	0x20000ff4

080076dc <wm8994_SetVolumeIn>:
uint32_t wm8994_SetVolumeIn(uint16_t DeviceAddr, uint8_t Volume) {
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	4603      	mov	r3, r0
 80076e4:	460a      	mov	r2, r1
 80076e6:	80fb      	strh	r3, [r7, #6]
 80076e8:	4613      	mov	r3, r2
 80076ea:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 80076ec:	2300      	movs	r3, #0
 80076ee:	60fb      	str	r3, [r7, #12]
	if (inputEnabled != 0) {
 80076f0:	4b28      	ldr	r3, [pc, #160]	@ (8007794 <wm8994_SetVolumeIn+0xb8>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d047      	beq.n	8007788 <wm8994_SetVolumeIn+0xac>
		// B1 = 0dB
		/* Left AIF1 ADC1 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x400, Volume | 0x100);
 80076f8:	88fb      	ldrh	r3, [r7, #6]
 80076fa:	b2d8      	uxtb	r0, r3
 80076fc:	797b      	ldrb	r3, [r7, #5]
 80076fe:	b21b      	sxth	r3, r3
 8007700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007704:	b21b      	sxth	r3, r3
 8007706:	b29b      	uxth	r3, r3
 8007708:	461a      	mov	r2, r3
 800770a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800770e:	f000 faa9 	bl	8007c64 <CODEC_IO_Write>
 8007712:	4603      	mov	r3, r0
 8007714:	461a      	mov	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	4413      	add	r3, r2
 800771a:	60fb      	str	r3, [r7, #12]

		/* Right AIF1 ADC1 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x401, Volume | 0x100);
 800771c:	88fb      	ldrh	r3, [r7, #6]
 800771e:	b2d8      	uxtb	r0, r3
 8007720:	797b      	ldrb	r3, [r7, #5]
 8007722:	b21b      	sxth	r3, r3
 8007724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007728:	b21b      	sxth	r3, r3
 800772a:	b29b      	uxth	r3, r3
 800772c:	461a      	mov	r2, r3
 800772e:	f240 4101 	movw	r1, #1025	@ 0x401
 8007732:	f000 fa97 	bl	8007c64 <CODEC_IO_Write>
 8007736:	4603      	mov	r3, r0
 8007738:	461a      	mov	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	4413      	add	r3, r2
 800773e:	60fb      	str	r3, [r7, #12]

		/* Left AIF1 ADC2 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x404, Volume | 0x100);
 8007740:	88fb      	ldrh	r3, [r7, #6]
 8007742:	b2d8      	uxtb	r0, r3
 8007744:	797b      	ldrb	r3, [r7, #5]
 8007746:	b21b      	sxth	r3, r3
 8007748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800774c:	b21b      	sxth	r3, r3
 800774e:	b29b      	uxth	r3, r3
 8007750:	461a      	mov	r2, r3
 8007752:	f240 4104 	movw	r1, #1028	@ 0x404
 8007756:	f000 fa85 	bl	8007c64 <CODEC_IO_Write>
 800775a:	4603      	mov	r3, r0
 800775c:	461a      	mov	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	4413      	add	r3, r2
 8007762:	60fb      	str	r3, [r7, #12]

		/* Right AIF1 ADC2 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x405, Volume | 0x100);
 8007764:	88fb      	ldrh	r3, [r7, #6]
 8007766:	b2d8      	uxtb	r0, r3
 8007768:	797b      	ldrb	r3, [r7, #5]
 800776a:	b21b      	sxth	r3, r3
 800776c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007770:	b21b      	sxth	r3, r3
 8007772:	b29b      	uxth	r3, r3
 8007774:	461a      	mov	r2, r3
 8007776:	f240 4105 	movw	r1, #1029	@ 0x405
 800777a:	f000 fa73 	bl	8007c64 <CODEC_IO_Write>
 800777e:	4603      	mov	r3, r0
 8007780:	461a      	mov	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	4413      	add	r3, r2
 8007786:	60fb      	str	r3, [r7, #12]
	}
	return counter;
 8007788:	68fb      	ldr	r3, [r7, #12]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	20000ff8 	.word	0x20000ff8

08007798 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	4603      	mov	r3, r0
 80077a0:	6039      	str	r1, [r7, #0]
 80077a2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80077a4:	2300      	movs	r3, #0
 80077a6:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 80077a8:	4b21      	ldr	r3, [pc, #132]	@ (8007830 <wm8994_SetMute+0x98>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d039      	beq.n	8007824 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d11c      	bne.n	80077f0 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80077b6:	88fb      	ldrh	r3, [r7, #6]
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077be:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 fa4e 	bl	8007c64 <CODEC_IO_Write>
 80077c8:	4603      	mov	r3, r0
 80077ca:	461a      	mov	r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	4413      	add	r3, r2
 80077d0:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80077d2:	88fb      	ldrh	r3, [r7, #6]
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077da:	f240 4122 	movw	r1, #1058	@ 0x422
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 fa40 	bl	8007c64 <CODEC_IO_Write>
 80077e4:	4603      	mov	r3, r0
 80077e6:	461a      	mov	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	4413      	add	r3, r2
 80077ec:	60fb      	str	r3, [r7, #12]
 80077ee:	e019      	b.n	8007824 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80077f0:	88fb      	ldrh	r3, [r7, #6]
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	2210      	movs	r2, #16
 80077f6:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80077fa:	4618      	mov	r0, r3
 80077fc:	f000 fa32 	bl	8007c64 <CODEC_IO_Write>
 8007800:	4603      	mov	r3, r0
 8007802:	461a      	mov	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4413      	add	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800780a:	88fb      	ldrh	r3, [r7, #6]
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2210      	movs	r2, #16
 8007810:	f240 4122 	movw	r1, #1058	@ 0x422
 8007814:	4618      	mov	r0, r3
 8007816:	f000 fa25 	bl	8007c64 <CODEC_IO_Write>
 800781a:	4603      	mov	r3, r0
 800781c:	461a      	mov	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	4413      	add	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8007824:	68fb      	ldr	r3, [r7, #12]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	20000ff4 	.word	0x20000ff4

08007834 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	4603      	mov	r3, r0
 800783c:	460a      	mov	r2, r1
 800783e:	80fb      	strh	r3, [r7, #6]
 8007840:	4613      	mov	r3, r2
 8007842:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8007844:	2300      	movs	r3, #0
 8007846:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8007848:	797b      	ldrb	r3, [r7, #5]
 800784a:	2b03      	cmp	r3, #3
 800784c:	f000 808c 	beq.w	8007968 <wm8994_SetOutputMode+0x134>
 8007850:	2b03      	cmp	r3, #3
 8007852:	f300 80cb 	bgt.w	80079ec <wm8994_SetOutputMode+0x1b8>
 8007856:	2b01      	cmp	r3, #1
 8007858:	d002      	beq.n	8007860 <wm8994_SetOutputMode+0x2c>
 800785a:	2b02      	cmp	r3, #2
 800785c:	d042      	beq.n	80078e4 <wm8994_SetOutputMode+0xb0>
 800785e:	e0c5      	b.n	80079ec <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8007860:	88fb      	ldrh	r3, [r7, #6]
 8007862:	b2db      	uxtb	r3, r3
 8007864:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8007868:	2105      	movs	r1, #5
 800786a:	4618      	mov	r0, r3
 800786c:	f000 f9fa 	bl	8007c64 <CODEC_IO_Write>
 8007870:	4603      	mov	r3, r0
 8007872:	461a      	mov	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	4413      	add	r3, r2
 8007878:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800787a:	88fb      	ldrh	r3, [r7, #6]
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2200      	movs	r2, #0
 8007880:	f240 6101 	movw	r1, #1537	@ 0x601
 8007884:	4618      	mov	r0, r3
 8007886:	f000 f9ed 	bl	8007c64 <CODEC_IO_Write>
 800788a:	4603      	mov	r3, r0
 800788c:	461a      	mov	r2, r3
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	4413      	add	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8007894:	88fb      	ldrh	r3, [r7, #6]
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2200      	movs	r2, #0
 800789a:	f240 6102 	movw	r1, #1538	@ 0x602
 800789e:	4618      	mov	r0, r3
 80078a0:	f000 f9e0 	bl	8007c64 <CODEC_IO_Write>
 80078a4:	4603      	mov	r3, r0
 80078a6:	461a      	mov	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4413      	add	r3, r2
 80078ac:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80078ae:	88fb      	ldrh	r3, [r7, #6]
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2202      	movs	r2, #2
 80078b4:	f240 6104 	movw	r1, #1540	@ 0x604
 80078b8:	4618      	mov	r0, r3
 80078ba:	f000 f9d3 	bl	8007c64 <CODEC_IO_Write>
 80078be:	4603      	mov	r3, r0
 80078c0:	461a      	mov	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	4413      	add	r3, r2
 80078c6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80078c8:	88fb      	ldrh	r3, [r7, #6]
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	2202      	movs	r2, #2
 80078ce:	f240 6105 	movw	r1, #1541	@ 0x605
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 f9c6 	bl	8007c64 <CODEC_IO_Write>
 80078d8:	4603      	mov	r3, r0
 80078da:	461a      	mov	r2, r3
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	4413      	add	r3, r2
 80078e0:	60fb      	str	r3, [r7, #12]
    break;
 80078e2:	e0c5      	b.n	8007a70 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80078e4:	88fb      	ldrh	r3, [r7, #6]
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	f240 3203 	movw	r2, #771	@ 0x303
 80078ec:	2105      	movs	r1, #5
 80078ee:	4618      	mov	r0, r3
 80078f0:	f000 f9b8 	bl	8007c64 <CODEC_IO_Write>
 80078f4:	4603      	mov	r3, r0
 80078f6:	461a      	mov	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	4413      	add	r3, r2
 80078fc:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80078fe:	88fb      	ldrh	r3, [r7, #6]
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2201      	movs	r2, #1
 8007904:	f240 6101 	movw	r1, #1537	@ 0x601
 8007908:	4618      	mov	r0, r3
 800790a:	f000 f9ab 	bl	8007c64 <CODEC_IO_Write>
 800790e:	4603      	mov	r3, r0
 8007910:	461a      	mov	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	4413      	add	r3, r2
 8007916:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8007918:	88fb      	ldrh	r3, [r7, #6]
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2201      	movs	r2, #1
 800791e:	f240 6102 	movw	r1, #1538	@ 0x602
 8007922:	4618      	mov	r0, r3
 8007924:	f000 f99e 	bl	8007c64 <CODEC_IO_Write>
 8007928:	4603      	mov	r3, r0
 800792a:	461a      	mov	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	4413      	add	r3, r2
 8007930:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8007932:	88fb      	ldrh	r3, [r7, #6]
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2200      	movs	r2, #0
 8007938:	f240 6104 	movw	r1, #1540	@ 0x604
 800793c:	4618      	mov	r0, r3
 800793e:	f000 f991 	bl	8007c64 <CODEC_IO_Write>
 8007942:	4603      	mov	r3, r0
 8007944:	461a      	mov	r2, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	4413      	add	r3, r2
 800794a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800794c:	88fb      	ldrh	r3, [r7, #6]
 800794e:	b2db      	uxtb	r3, r3
 8007950:	2200      	movs	r2, #0
 8007952:	f240 6105 	movw	r1, #1541	@ 0x605
 8007956:	4618      	mov	r0, r3
 8007958:	f000 f984 	bl	8007c64 <CODEC_IO_Write>
 800795c:	4603      	mov	r3, r0
 800795e:	461a      	mov	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4413      	add	r3, r2
 8007964:	60fb      	str	r3, [r7, #12]
    break;
 8007966:	e083      	b.n	8007a70 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8007968:	88fb      	ldrh	r3, [r7, #6]
 800796a:	b2db      	uxtb	r3, r3
 800796c:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8007970:	2105      	movs	r1, #5
 8007972:	4618      	mov	r0, r3
 8007974:	f000 f976 	bl	8007c64 <CODEC_IO_Write>
 8007978:	4603      	mov	r3, r0
 800797a:	461a      	mov	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	4413      	add	r3, r2
 8007980:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8007982:	88fb      	ldrh	r3, [r7, #6]
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2201      	movs	r2, #1
 8007988:	f240 6101 	movw	r1, #1537	@ 0x601
 800798c:	4618      	mov	r0, r3
 800798e:	f000 f969 	bl	8007c64 <CODEC_IO_Write>
 8007992:	4603      	mov	r3, r0
 8007994:	461a      	mov	r2, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	4413      	add	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800799c:	88fb      	ldrh	r3, [r7, #6]
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2201      	movs	r2, #1
 80079a2:	f240 6102 	movw	r1, #1538	@ 0x602
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 f95c 	bl	8007c64 <CODEC_IO_Write>
 80079ac:	4603      	mov	r3, r0
 80079ae:	461a      	mov	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	4413      	add	r3, r2
 80079b4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80079b6:	88fb      	ldrh	r3, [r7, #6]
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2202      	movs	r2, #2
 80079bc:	f240 6104 	movw	r1, #1540	@ 0x604
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 f94f 	bl	8007c64 <CODEC_IO_Write>
 80079c6:	4603      	mov	r3, r0
 80079c8:	461a      	mov	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	4413      	add	r3, r2
 80079ce:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80079d0:	88fb      	ldrh	r3, [r7, #6]
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2202      	movs	r2, #2
 80079d6:	f240 6105 	movw	r1, #1541	@ 0x605
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 f942 	bl	8007c64 <CODEC_IO_Write>
 80079e0:	4603      	mov	r3, r0
 80079e2:	461a      	mov	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	4413      	add	r3, r2
 80079e8:	60fb      	str	r3, [r7, #12]
    break;
 80079ea:	e041      	b.n	8007a70 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80079ec:	88fb      	ldrh	r3, [r7, #6]
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	f240 3203 	movw	r2, #771	@ 0x303
 80079f4:	2105      	movs	r1, #5
 80079f6:	4618      	mov	r0, r3
 80079f8:	f000 f934 	bl	8007c64 <CODEC_IO_Write>
 80079fc:	4603      	mov	r3, r0
 80079fe:	461a      	mov	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	4413      	add	r3, r2
 8007a04:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8007a06:	88fb      	ldrh	r3, [r7, #6]
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f240 6101 	movw	r1, #1537	@ 0x601
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 f927 	bl	8007c64 <CODEC_IO_Write>
 8007a16:	4603      	mov	r3, r0
 8007a18:	461a      	mov	r2, r3
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8007a20:	88fb      	ldrh	r3, [r7, #6]
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2201      	movs	r2, #1
 8007a26:	f240 6102 	movw	r1, #1538	@ 0x602
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 f91a 	bl	8007c64 <CODEC_IO_Write>
 8007a30:	4603      	mov	r3, r0
 8007a32:	461a      	mov	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4413      	add	r3, r2
 8007a38:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8007a3a:	88fb      	ldrh	r3, [r7, #6]
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f240 6104 	movw	r1, #1540	@ 0x604
 8007a44:	4618      	mov	r0, r3
 8007a46:	f000 f90d 	bl	8007c64 <CODEC_IO_Write>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	4413      	add	r3, r2
 8007a52:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8007a54:	88fb      	ldrh	r3, [r7, #6]
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f240 6105 	movw	r1, #1541	@ 0x605
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 f900 	bl	8007c64 <CODEC_IO_Write>
 8007a64:	4603      	mov	r3, r0
 8007a66:	461a      	mov	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	60fb      	str	r3, [r7, #12]
    break;    
 8007a6e:	bf00      	nop
  }  
  return counter;
 8007a70:	68fb      	ldr	r3, [r7, #12]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
	...

08007a7c <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	4603      	mov	r3, r0
 8007a84:	6039      	str	r1, [r7, #0]
 8007a86:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	4a64      	ldr	r2, [pc, #400]	@ (8007c20 <wm8994_SetFrequency+0x1a4>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d079      	beq.n	8007b88 <wm8994_SetFrequency+0x10c>
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	4a62      	ldr	r2, [pc, #392]	@ (8007c20 <wm8994_SetFrequency+0x1a4>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	f200 80ad 	bhi.w	8007bf8 <wm8994_SetFrequency+0x17c>
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d061      	beq.n	8007b6c <wm8994_SetFrequency+0xf0>
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	f200 80a2 	bhi.w	8007bf8 <wm8994_SetFrequency+0x17c>
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8007aba:	4293      	cmp	r3, r2
 8007abc:	f000 808e 	beq.w	8007bdc <wm8994_SetFrequency+0x160>
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	f200 8096 	bhi.w	8007bf8 <wm8994_SetFrequency+0x17c>
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8007ad2:	d03d      	beq.n	8007b50 <wm8994_SetFrequency+0xd4>
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8007ada:	f200 808d 	bhi.w	8007bf8 <wm8994_SetFrequency+0x17c>
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	f245 6222 	movw	r2, #22050	@ 0x5622
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d06b      	beq.n	8007bc0 <wm8994_SetFrequency+0x144>
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	f245 6222 	movw	r2, #22050	@ 0x5622
 8007aee:	4293      	cmp	r3, r2
 8007af0:	f200 8082 	bhi.w	8007bf8 <wm8994_SetFrequency+0x17c>
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8007afa:	d01b      	beq.n	8007b34 <wm8994_SetFrequency+0xb8>
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8007b02:	d879      	bhi.n	8007bf8 <wm8994_SetFrequency+0x17c>
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8007b0a:	d005      	beq.n	8007b18 <wm8994_SetFrequency+0x9c>
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d046      	beq.n	8007ba4 <wm8994_SetFrequency+0x128>
 8007b16:	e06f      	b.n	8007bf8 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8007b18:	88fb      	ldrh	r3, [r7, #6]
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2203      	movs	r2, #3
 8007b1e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8007b22:	4618      	mov	r0, r3
 8007b24:	f000 f89e 	bl	8007c64 <CODEC_IO_Write>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	4413      	add	r3, r2
 8007b30:	60fb      	str	r3, [r7, #12]
    break;
 8007b32:	e06f      	b.n	8007c14 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8007b34:	88fb      	ldrh	r3, [r7, #6]
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2233      	movs	r2, #51	@ 0x33
 8007b3a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 f890 	bl	8007c64 <CODEC_IO_Write>
 8007b44:	4603      	mov	r3, r0
 8007b46:	461a      	mov	r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]
    break;
 8007b4e:	e061      	b.n	8007c14 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8007b50:	88fb      	ldrh	r3, [r7, #6]
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2263      	movs	r2, #99	@ 0x63
 8007b56:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f000 f882 	bl	8007c64 <CODEC_IO_Write>
 8007b60:	4603      	mov	r3, r0
 8007b62:	461a      	mov	r2, r3
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4413      	add	r3, r2
 8007b68:	60fb      	str	r3, [r7, #12]
    break;
 8007b6a:	e053      	b.n	8007c14 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8007b6c:	88fb      	ldrh	r3, [r7, #6]
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	2283      	movs	r2, #131	@ 0x83
 8007b72:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 f874 	bl	8007c64 <CODEC_IO_Write>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	461a      	mov	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	4413      	add	r3, r2
 8007b84:	60fb      	str	r3, [r7, #12]
    break;
 8007b86:	e045      	b.n	8007c14 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8007b88:	88fb      	ldrh	r3, [r7, #6]
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	22a3      	movs	r2, #163	@ 0xa3
 8007b8e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8007b92:	4618      	mov	r0, r3
 8007b94:	f000 f866 	bl	8007c64 <CODEC_IO_Write>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	60fb      	str	r3, [r7, #12]
    break;
 8007ba2:	e037      	b.n	8007c14 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8007ba4:	88fb      	ldrh	r3, [r7, #6]
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2213      	movs	r2, #19
 8007baa:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 f858 	bl	8007c64 <CODEC_IO_Write>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	4413      	add	r3, r2
 8007bbc:	60fb      	str	r3, [r7, #12]
    break;
 8007bbe:	e029      	b.n	8007c14 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8007bc0:	88fb      	ldrh	r3, [r7, #6]
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2243      	movs	r2, #67	@ 0x43
 8007bc6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f000 f84a 	bl	8007c64 <CODEC_IO_Write>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	60fb      	str	r3, [r7, #12]
    break;
 8007bda:	e01b      	b.n	8007c14 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8007bdc:	88fb      	ldrh	r3, [r7, #6]
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	2273      	movs	r2, #115	@ 0x73
 8007be2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 f83c 	bl	8007c64 <CODEC_IO_Write>
 8007bec:	4603      	mov	r3, r0
 8007bee:	461a      	mov	r2, r3
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]
    break; 
 8007bf6:	e00d      	b.n	8007c14 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8007bf8:	88fb      	ldrh	r3, [r7, #6]
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2283      	movs	r2, #131	@ 0x83
 8007bfe:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 f82e 	bl	8007c64 <CODEC_IO_Write>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4413      	add	r3, r2
 8007c10:	60fb      	str	r3, [r7, #12]
    break; 
 8007c12:	bf00      	nop
  }
  return counter;
 8007c14:	68fb      	ldr	r3, [r7, #12]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	00017700 	.word	0x00017700

08007c24 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8007c32:	88fb      	ldrh	r3, [r7, #6]
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	2200      	movs	r2, #0
 8007c38:	2100      	movs	r1, #0
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 f812 	bl	8007c64 <CODEC_IO_Write>
 8007c40:	4603      	mov	r3, r0
 8007c42:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8007c44:	4b05      	ldr	r3, [pc, #20]	@ (8007c5c <wm8994_Reset+0x38>)
 8007c46:	2200      	movs	r2, #0
 8007c48:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8007c4a:	4b05      	ldr	r3, [pc, #20]	@ (8007c60 <wm8994_Reset+0x3c>)
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	601a      	str	r2, [r3, #0]

  return counter;
 8007c50:	68fb      	ldr	r3, [r7, #12]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20000ff4 	.word	0x20000ff4
 8007c60:	20000ff8 	.word	0x20000ff8

08007c64 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	71fb      	strb	r3, [r7, #7]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	80bb      	strh	r3, [r7, #4]
 8007c72:	4613      	mov	r3, r2
 8007c74:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8007c76:	2300      	movs	r3, #0
 8007c78:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8007c7a:	887a      	ldrh	r2, [r7, #2]
 8007c7c:	88b9      	ldrh	r1, [r7, #4]
 8007c7e:	79fb      	ldrb	r3, [r7, #7]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fc f99b 	bl	8003fbc <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	b2db      	uxtb	r3, r3
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
	...

08007c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007c94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007ccc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007c98:	480d      	ldr	r0, [pc, #52]	@ (8007cd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007c9a:	490e      	ldr	r1, [pc, #56]	@ (8007cd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007c9c:	4a0e      	ldr	r2, [pc, #56]	@ (8007cd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007ca0:	e002      	b.n	8007ca8 <LoopCopyDataInit>

08007ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007ca6:	3304      	adds	r3, #4

08007ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007cac:	d3f9      	bcc.n	8007ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007cae:	4a0b      	ldr	r2, [pc, #44]	@ (8007cdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007cb0:	4c0b      	ldr	r4, [pc, #44]	@ (8007ce0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007cb4:	e001      	b.n	8007cba <LoopFillZerobss>

08007cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007cb8:	3204      	adds	r2, #4

08007cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007cbc:	d3fb      	bcc.n	8007cb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007cbe:	f7fe fab9 	bl	8006234 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007cc2:	f00d fd49 	bl	8015758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007cc6:	f7fb fbff 	bl	80034c8 <main>
  bx  lr    
 8007cca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007ccc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8007cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007cd4:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8007cd8:	08024e50 	.word	0x08024e50
  ldr r2, =_sbss
 8007cdc:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 8007ce0:	2000537c 	.word	0x2000537c

08007ce4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007ce4:	e7fe      	b.n	8007ce4 <ADC_IRQHandler>

08007ce6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007cea:	2003      	movs	r0, #3
 8007cec:	f000 fcf3 	bl	80086d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007cf0:	200f      	movs	r0, #15
 8007cf2:	f7fe f8fd 	bl	8005ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007cf6:	f7fe f8d3 	bl	8005ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007d00:	b480      	push	{r7}
 8007d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007d04:	4b06      	ldr	r3, [pc, #24]	@ (8007d20 <HAL_IncTick+0x20>)
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	461a      	mov	r2, r3
 8007d0a:	4b06      	ldr	r3, [pc, #24]	@ (8007d24 <HAL_IncTick+0x24>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4413      	add	r3, r2
 8007d10:	4a04      	ldr	r2, [pc, #16]	@ (8007d24 <HAL_IncTick+0x24>)
 8007d12:	6013      	str	r3, [r2, #0]
}
 8007d14:	bf00      	nop
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	20000090 	.word	0x20000090
 8007d24:	20000ffc 	.word	0x20000ffc

08007d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8007d2c:	4b03      	ldr	r3, [pc, #12]	@ (8007d3c <HAL_GetTick+0x14>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	20000ffc 	.word	0x20000ffc

08007d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007d48:	f7ff ffee 	bl	8007d28 <HAL_GetTick>
 8007d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d58:	d005      	beq.n	8007d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8007d84 <HAL_Delay+0x44>)
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	4413      	add	r3, r2
 8007d64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007d66:	bf00      	nop
 8007d68:	f7ff ffde 	bl	8007d28 <HAL_GetTick>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d8f7      	bhi.n	8007d68 <HAL_Delay+0x28>
  {
  }
}
 8007d78:	bf00      	nop
 8007d7a:	bf00      	nop
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20000090 	.word	0x20000090

08007d88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e031      	b.n	8007e02 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d109      	bne.n	8007dba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7f9 f88c 	bl	8000ec4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dbe:	f003 0310 	and.w	r3, r3, #16
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d116      	bne.n	8007df4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007dca:	4b10      	ldr	r3, [pc, #64]	@ (8007e0c <HAL_ADC_Init+0x84>)
 8007dcc:	4013      	ands	r3, r2
 8007dce:	f043 0202 	orr.w	r2, r3, #2
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fad6 	bl	8008388 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de6:	f023 0303 	bic.w	r3, r3, #3
 8007dea:	f043 0201 	orr.w	r2, r3, #1
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	641a      	str	r2, [r3, #64]	@ 0x40
 8007df2:	e001      	b.n	8007df8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	ffffeefd 	.word	0xffffeefd

08007e10 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d101      	bne.n	8007e2a <HAL_ADC_Start+0x1a>
 8007e26:	2302      	movs	r3, #2
 8007e28:	e0ad      	b.n	8007f86 <HAL_ADC_Start+0x176>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d018      	beq.n	8007e72 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	689a      	ldr	r2, [r3, #8]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f042 0201 	orr.w	r2, r2, #1
 8007e4e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007e50:	4b50      	ldr	r3, [pc, #320]	@ (8007f94 <HAL_ADC_Start+0x184>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a50      	ldr	r2, [pc, #320]	@ (8007f98 <HAL_ADC_Start+0x188>)
 8007e56:	fba2 2303 	umull	r2, r3, r2, r3
 8007e5a:	0c9a      	lsrs	r2, r3, #18
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	005b      	lsls	r3, r3, #1
 8007e60:	4413      	add	r3, r2
 8007e62:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8007e64:	e002      	b.n	8007e6c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1f9      	bne.n	8007e66 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d175      	bne.n	8007f6c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e84:	4b45      	ldr	r3, [pc, #276]	@ (8007f9c <HAL_ADC_Start+0x18c>)
 8007e86:	4013      	ands	r3, r2
 8007e88:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d007      	beq.n	8007eae <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007ea6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eba:	d106      	bne.n	8007eca <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ec0:	f023 0206 	bic.w	r2, r3, #6
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	645a      	str	r2, [r3, #68]	@ 0x44
 8007ec8:	e002      	b.n	8007ed0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8007ee0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8007ee2:	4b2f      	ldr	r3, [pc, #188]	@ (8007fa0 <HAL_ADC_Start+0x190>)
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f003 031f 	and.w	r3, r3, #31
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10f      	bne.n	8007f0e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d143      	bne.n	8007f84 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689a      	ldr	r2, [r3, #8]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007f0a:	609a      	str	r2, [r3, #8]
 8007f0c:	e03a      	b.n	8007f84 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a24      	ldr	r2, [pc, #144]	@ (8007fa4 <HAL_ADC_Start+0x194>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d10e      	bne.n	8007f36 <HAL_ADC_Start+0x126>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d107      	bne.n	8007f36 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	689a      	ldr	r2, [r3, #8]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007f34:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8007f36:	4b1a      	ldr	r3, [pc, #104]	@ (8007fa0 <HAL_ADC_Start+0x190>)
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f003 0310 	and.w	r3, r3, #16
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d120      	bne.n	8007f84 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a18      	ldr	r2, [pc, #96]	@ (8007fa8 <HAL_ADC_Start+0x198>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d11b      	bne.n	8007f84 <HAL_ADC_Start+0x174>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d114      	bne.n	8007f84 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	689a      	ldr	r2, [r3, #8]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007f68:	609a      	str	r2, [r3, #8]
 8007f6a:	e00b      	b.n	8007f84 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f70:	f043 0210 	orr.w	r2, r3, #16
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f7c:	f043 0201 	orr.w	r2, r3, #1
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	2000004c 	.word	0x2000004c
 8007f98:	431bde83 	.word	0x431bde83
 8007f9c:	fffff8fe 	.word	0xfffff8fe
 8007fa0:	40012300 	.word	0x40012300
 8007fa4:	40012000 	.word	0x40012000
 8007fa8:	40012200 	.word	0x40012200

08007fac <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fc8:	d113      	bne.n	8007ff2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fd8:	d10b      	bne.n	8007ff2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fde:	f043 0220 	orr.w	r2, r3, #32
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e063      	b.n	80080ba <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007ff2:	f7ff fe99 	bl	8007d28 <HAL_GetTick>
 8007ff6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007ff8:	e021      	b.n	800803e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008000:	d01d      	beq.n	800803e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d007      	beq.n	8008018 <HAL_ADC_PollForConversion+0x6c>
 8008008:	f7ff fe8e 	bl	8007d28 <HAL_GetTick>
 800800c:	4602      	mov	r2, r0
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	429a      	cmp	r2, r3
 8008016:	d212      	bcs.n	800803e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f003 0302 	and.w	r3, r3, #2
 8008022:	2b02      	cmp	r3, #2
 8008024:	d00b      	beq.n	800803e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800802a:	f043 0204 	orr.w	r2, r3, #4
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	e03d      	b.n	80080ba <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0302 	and.w	r3, r3, #2
 8008048:	2b02      	cmp	r3, #2
 800804a:	d1d6      	bne.n	8007ffa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f06f 0212 	mvn.w	r2, #18
 8008054:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800805a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800806c:	2b00      	cmp	r3, #0
 800806e:	d123      	bne.n	80080b8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008074:	2b00      	cmp	r3, #0
 8008076:	d11f      	bne.n	80080b8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800807e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008082:	2b00      	cmp	r3, #0
 8008084:	d006      	beq.n	8008094 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008090:	2b00      	cmp	r3, #0
 8008092:	d111      	bne.n	80080b8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008098:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d105      	bne.n	80080b8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080b0:	f043 0201 	orr.w	r2, r3, #1
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80080c2:	b480      	push	{r7}
 80080c4:	b083      	sub	sp, #12
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80080e6:	2300      	movs	r3, #0
 80080e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d101      	bne.n	80080f8 <HAL_ADC_ConfigChannel+0x1c>
 80080f4:	2302      	movs	r3, #2
 80080f6:	e136      	b.n	8008366 <HAL_ADC_ConfigChannel+0x28a>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2b09      	cmp	r3, #9
 8008106:	d93a      	bls.n	800817e <HAL_ADC_ConfigChannel+0xa2>
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008110:	d035      	beq.n	800817e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68d9      	ldr	r1, [r3, #12]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	b29b      	uxth	r3, r3
 800811e:	461a      	mov	r2, r3
 8008120:	4613      	mov	r3, r2
 8008122:	005b      	lsls	r3, r3, #1
 8008124:	4413      	add	r3, r2
 8008126:	3b1e      	subs	r3, #30
 8008128:	2207      	movs	r2, #7
 800812a:	fa02 f303 	lsl.w	r3, r2, r3
 800812e:	43da      	mvns	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	400a      	ands	r2, r1
 8008136:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a8d      	ldr	r2, [pc, #564]	@ (8008374 <HAL_ADC_ConfigChannel+0x298>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d10a      	bne.n	8008158 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68d9      	ldr	r1, [r3, #12]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	061a      	lsls	r2, r3, #24
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	430a      	orrs	r2, r1
 8008154:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008156:	e035      	b.n	80081c4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68d9      	ldr	r1, [r3, #12]
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	689a      	ldr	r2, [r3, #8]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	b29b      	uxth	r3, r3
 8008168:	4618      	mov	r0, r3
 800816a:	4603      	mov	r3, r0
 800816c:	005b      	lsls	r3, r3, #1
 800816e:	4403      	add	r3, r0
 8008170:	3b1e      	subs	r3, #30
 8008172:	409a      	lsls	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	430a      	orrs	r2, r1
 800817a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800817c:	e022      	b.n	80081c4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6919      	ldr	r1, [r3, #16]
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	b29b      	uxth	r3, r3
 800818a:	461a      	mov	r2, r3
 800818c:	4613      	mov	r3, r2
 800818e:	005b      	lsls	r3, r3, #1
 8008190:	4413      	add	r3, r2
 8008192:	2207      	movs	r2, #7
 8008194:	fa02 f303 	lsl.w	r3, r2, r3
 8008198:	43da      	mvns	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	400a      	ands	r2, r1
 80081a0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	6919      	ldr	r1, [r3, #16]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	689a      	ldr	r2, [r3, #8]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	4618      	mov	r0, r3
 80081b4:	4603      	mov	r3, r0
 80081b6:	005b      	lsls	r3, r3, #1
 80081b8:	4403      	add	r3, r0
 80081ba:	409a      	lsls	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	430a      	orrs	r2, r1
 80081c2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	2b06      	cmp	r3, #6
 80081ca:	d824      	bhi.n	8008216 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	685a      	ldr	r2, [r3, #4]
 80081d6:	4613      	mov	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	4413      	add	r3, r2
 80081dc:	3b05      	subs	r3, #5
 80081de:	221f      	movs	r2, #31
 80081e0:	fa02 f303 	lsl.w	r3, r2, r3
 80081e4:	43da      	mvns	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	400a      	ands	r2, r1
 80081ec:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	4618      	mov	r0, r3
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	685a      	ldr	r2, [r3, #4]
 8008200:	4613      	mov	r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4413      	add	r3, r2
 8008206:	3b05      	subs	r3, #5
 8008208:	fa00 f203 	lsl.w	r2, r0, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	430a      	orrs	r2, r1
 8008212:	635a      	str	r2, [r3, #52]	@ 0x34
 8008214:	e04c      	b.n	80082b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	2b0c      	cmp	r3, #12
 800821c:	d824      	bhi.n	8008268 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	685a      	ldr	r2, [r3, #4]
 8008228:	4613      	mov	r3, r2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4413      	add	r3, r2
 800822e:	3b23      	subs	r3, #35	@ 0x23
 8008230:	221f      	movs	r2, #31
 8008232:	fa02 f303 	lsl.w	r3, r2, r3
 8008236:	43da      	mvns	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	400a      	ands	r2, r1
 800823e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	b29b      	uxth	r3, r3
 800824c:	4618      	mov	r0, r3
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	685a      	ldr	r2, [r3, #4]
 8008252:	4613      	mov	r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	4413      	add	r3, r2
 8008258:	3b23      	subs	r3, #35	@ 0x23
 800825a:	fa00 f203 	lsl.w	r2, r0, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	430a      	orrs	r2, r1
 8008264:	631a      	str	r2, [r3, #48]	@ 0x30
 8008266:	e023      	b.n	80082b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	685a      	ldr	r2, [r3, #4]
 8008272:	4613      	mov	r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4413      	add	r3, r2
 8008278:	3b41      	subs	r3, #65	@ 0x41
 800827a:	221f      	movs	r2, #31
 800827c:	fa02 f303 	lsl.w	r3, r2, r3
 8008280:	43da      	mvns	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	400a      	ands	r2, r1
 8008288:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	b29b      	uxth	r3, r3
 8008296:	4618      	mov	r0, r3
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	685a      	ldr	r2, [r3, #4]
 800829c:	4613      	mov	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	3b41      	subs	r3, #65	@ 0x41
 80082a4:	fa00 f203 	lsl.w	r2, r0, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	430a      	orrs	r2, r1
 80082ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a30      	ldr	r2, [pc, #192]	@ (8008378 <HAL_ADC_ConfigChannel+0x29c>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d10a      	bne.n	80082d0 <HAL_ADC_ConfigChannel+0x1f4>
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082c2:	d105      	bne.n	80082d0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80082c4:	4b2d      	ldr	r3, [pc, #180]	@ (800837c <HAL_ADC_ConfigChannel+0x2a0>)
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	4a2c      	ldr	r2, [pc, #176]	@ (800837c <HAL_ADC_ConfigChannel+0x2a0>)
 80082ca:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80082ce:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a28      	ldr	r2, [pc, #160]	@ (8008378 <HAL_ADC_ConfigChannel+0x29c>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d10f      	bne.n	80082fa <HAL_ADC_ConfigChannel+0x21e>
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b12      	cmp	r3, #18
 80082e0:	d10b      	bne.n	80082fa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80082e2:	4b26      	ldr	r3, [pc, #152]	@ (800837c <HAL_ADC_ConfigChannel+0x2a0>)
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	4a25      	ldr	r2, [pc, #148]	@ (800837c <HAL_ADC_ConfigChannel+0x2a0>)
 80082e8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80082ec:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80082ee:	4b23      	ldr	r3, [pc, #140]	@ (800837c <HAL_ADC_ConfigChannel+0x2a0>)
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	4a22      	ldr	r2, [pc, #136]	@ (800837c <HAL_ADC_ConfigChannel+0x2a0>)
 80082f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80082f8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a1e      	ldr	r2, [pc, #120]	@ (8008378 <HAL_ADC_ConfigChannel+0x29c>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d12b      	bne.n	800835c <HAL_ADC_ConfigChannel+0x280>
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a1a      	ldr	r2, [pc, #104]	@ (8008374 <HAL_ADC_ConfigChannel+0x298>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d003      	beq.n	8008316 <HAL_ADC_ConfigChannel+0x23a>
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b11      	cmp	r3, #17
 8008314:	d122      	bne.n	800835c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8008316:	4b19      	ldr	r3, [pc, #100]	@ (800837c <HAL_ADC_ConfigChannel+0x2a0>)
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	4a18      	ldr	r2, [pc, #96]	@ (800837c <HAL_ADC_ConfigChannel+0x2a0>)
 800831c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8008320:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8008322:	4b16      	ldr	r3, [pc, #88]	@ (800837c <HAL_ADC_ConfigChannel+0x2a0>)
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	4a15      	ldr	r2, [pc, #84]	@ (800837c <HAL_ADC_ConfigChannel+0x2a0>)
 8008328:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800832c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a10      	ldr	r2, [pc, #64]	@ (8008374 <HAL_ADC_ConfigChannel+0x298>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d111      	bne.n	800835c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8008338:	4b11      	ldr	r3, [pc, #68]	@ (8008380 <HAL_ADC_ConfigChannel+0x2a4>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a11      	ldr	r2, [pc, #68]	@ (8008384 <HAL_ADC_ConfigChannel+0x2a8>)
 800833e:	fba2 2303 	umull	r2, r3, r2, r3
 8008342:	0c9a      	lsrs	r2, r3, #18
 8008344:	4613      	mov	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	005b      	lsls	r3, r3, #1
 800834c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800834e:	e002      	b.n	8008356 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	3b01      	subs	r3, #1
 8008354:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d1f9      	bne.n	8008350 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	10000012 	.word	0x10000012
 8008378:	40012000 	.word	0x40012000
 800837c:	40012300 	.word	0x40012300
 8008380:	2000004c 	.word	0x2000004c
 8008384:	431bde83 	.word	0x431bde83

08008388 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8008390:	4b78      	ldr	r3, [pc, #480]	@ (8008574 <ADC_Init+0x1ec>)
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	4a77      	ldr	r2, [pc, #476]	@ (8008574 <ADC_Init+0x1ec>)
 8008396:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800839a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800839c:	4b75      	ldr	r3, [pc, #468]	@ (8008574 <ADC_Init+0x1ec>)
 800839e:	685a      	ldr	r2, [r3, #4]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	4973      	ldr	r1, [pc, #460]	@ (8008574 <ADC_Init+0x1ec>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	685a      	ldr	r2, [r3, #4]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80083b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	6859      	ldr	r1, [r3, #4]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	021a      	lsls	r2, r3, #8
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	430a      	orrs	r2, r1
 80083cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80083dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	6859      	ldr	r1, [r3, #4]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	689a      	ldr	r2, [r3, #8]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	430a      	orrs	r2, r1
 80083ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	689a      	ldr	r2, [r3, #8]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80083fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6899      	ldr	r1, [r3, #8]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	68da      	ldr	r2, [r3, #12]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	430a      	orrs	r2, r1
 8008410:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008416:	4a58      	ldr	r2, [pc, #352]	@ (8008578 <ADC_Init+0x1f0>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d022      	beq.n	8008462 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689a      	ldr	r2, [r3, #8]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800842a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	6899      	ldr	r1, [r3, #8]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	430a      	orrs	r2, r1
 800843c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	689a      	ldr	r2, [r3, #8]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800844c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	6899      	ldr	r1, [r3, #8]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	430a      	orrs	r2, r1
 800845e:	609a      	str	r2, [r3, #8]
 8008460:	e00f      	b.n	8008482 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	689a      	ldr	r2, [r3, #8]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008470:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	689a      	ldr	r2, [r3, #8]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8008480:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	689a      	ldr	r2, [r3, #8]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f022 0202 	bic.w	r2, r2, #2
 8008490:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	6899      	ldr	r1, [r3, #8]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	005a      	lsls	r2, r3, #1
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	430a      	orrs	r2, r1
 80084a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d01b      	beq.n	80084e8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	685a      	ldr	r2, [r3, #4]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	685a      	ldr	r2, [r3, #4]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80084ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	6859      	ldr	r1, [r3, #4]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084da:	3b01      	subs	r3, #1
 80084dc:	035a      	lsls	r2, r3, #13
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	430a      	orrs	r2, r1
 80084e4:	605a      	str	r2, [r3, #4]
 80084e6:	e007      	b.n	80084f8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	685a      	ldr	r2, [r3, #4]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80084f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8008506:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	69db      	ldr	r3, [r3, #28]
 8008512:	3b01      	subs	r3, #1
 8008514:	051a      	lsls	r2, r3, #20
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	430a      	orrs	r2, r1
 800851c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	689a      	ldr	r2, [r3, #8]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800852c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	6899      	ldr	r1, [r3, #8]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800853a:	025a      	lsls	r2, r3, #9
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	430a      	orrs	r2, r1
 8008542:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	689a      	ldr	r2, [r3, #8]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008552:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6899      	ldr	r1, [r3, #8]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	029a      	lsls	r2, r3, #10
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	430a      	orrs	r2, r1
 8008566:	609a      	str	r2, [r3, #8]
}
 8008568:	bf00      	nop
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr
 8008574:	40012300 	.word	0x40012300
 8008578:	0f000001 	.word	0x0f000001

0800857c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f003 0307 	and.w	r3, r3, #7
 800858a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800858c:	4b0b      	ldr	r3, [pc, #44]	@ (80085bc <__NVIC_SetPriorityGrouping+0x40>)
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008598:	4013      	ands	r3, r2
 800859a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80085a4:	4b06      	ldr	r3, [pc, #24]	@ (80085c0 <__NVIC_SetPriorityGrouping+0x44>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80085aa:	4a04      	ldr	r2, [pc, #16]	@ (80085bc <__NVIC_SetPriorityGrouping+0x40>)
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	60d3      	str	r3, [r2, #12]
}
 80085b0:	bf00      	nop
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	e000ed00 	.word	0xe000ed00
 80085c0:	05fa0000 	.word	0x05fa0000

080085c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80085c4:	b480      	push	{r7}
 80085c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80085c8:	4b04      	ldr	r3, [pc, #16]	@ (80085dc <__NVIC_GetPriorityGrouping+0x18>)
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	0a1b      	lsrs	r3, r3, #8
 80085ce:	f003 0307 	and.w	r3, r3, #7
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	e000ed00 	.word	0xe000ed00

080085e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	4603      	mov	r3, r0
 80085e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	db0b      	blt.n	800860a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80085f2:	79fb      	ldrb	r3, [r7, #7]
 80085f4:	f003 021f 	and.w	r2, r3, #31
 80085f8:	4907      	ldr	r1, [pc, #28]	@ (8008618 <__NVIC_EnableIRQ+0x38>)
 80085fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085fe:	095b      	lsrs	r3, r3, #5
 8008600:	2001      	movs	r0, #1
 8008602:	fa00 f202 	lsl.w	r2, r0, r2
 8008606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800860a:	bf00      	nop
 800860c:	370c      	adds	r7, #12
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	e000e100 	.word	0xe000e100

0800861c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	4603      	mov	r3, r0
 8008624:	6039      	str	r1, [r7, #0]
 8008626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800862c:	2b00      	cmp	r3, #0
 800862e:	db0a      	blt.n	8008646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	b2da      	uxtb	r2, r3
 8008634:	490c      	ldr	r1, [pc, #48]	@ (8008668 <__NVIC_SetPriority+0x4c>)
 8008636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800863a:	0112      	lsls	r2, r2, #4
 800863c:	b2d2      	uxtb	r2, r2
 800863e:	440b      	add	r3, r1
 8008640:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008644:	e00a      	b.n	800865c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	b2da      	uxtb	r2, r3
 800864a:	4908      	ldr	r1, [pc, #32]	@ (800866c <__NVIC_SetPriority+0x50>)
 800864c:	79fb      	ldrb	r3, [r7, #7]
 800864e:	f003 030f 	and.w	r3, r3, #15
 8008652:	3b04      	subs	r3, #4
 8008654:	0112      	lsls	r2, r2, #4
 8008656:	b2d2      	uxtb	r2, r2
 8008658:	440b      	add	r3, r1
 800865a:	761a      	strb	r2, [r3, #24]
}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr
 8008668:	e000e100 	.word	0xe000e100
 800866c:	e000ed00 	.word	0xe000ed00

08008670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008670:	b480      	push	{r7}
 8008672:	b089      	sub	sp, #36	@ 0x24
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f003 0307 	and.w	r3, r3, #7
 8008682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	f1c3 0307 	rsb	r3, r3, #7
 800868a:	2b04      	cmp	r3, #4
 800868c:	bf28      	it	cs
 800868e:	2304      	movcs	r3, #4
 8008690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	3304      	adds	r3, #4
 8008696:	2b06      	cmp	r3, #6
 8008698:	d902      	bls.n	80086a0 <NVIC_EncodePriority+0x30>
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	3b03      	subs	r3, #3
 800869e:	e000      	b.n	80086a2 <NVIC_EncodePriority+0x32>
 80086a0:	2300      	movs	r3, #0
 80086a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	fa02 f303 	lsl.w	r3, r2, r3
 80086ae:	43da      	mvns	r2, r3
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	401a      	ands	r2, r3
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80086b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	fa01 f303 	lsl.w	r3, r1, r3
 80086c2:	43d9      	mvns	r1, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086c8:	4313      	orrs	r3, r2
         );
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3724      	adds	r7, #36	@ 0x24
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b082      	sub	sp, #8
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7ff ff4c 	bl	800857c <__NVIC_SetPriorityGrouping>
}
 80086e4:	bf00      	nop
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b086      	sub	sp, #24
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	4603      	mov	r3, r0
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
 80086f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80086fa:	2300      	movs	r3, #0
 80086fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80086fe:	f7ff ff61 	bl	80085c4 <__NVIC_GetPriorityGrouping>
 8008702:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	68b9      	ldr	r1, [r7, #8]
 8008708:	6978      	ldr	r0, [r7, #20]
 800870a:	f7ff ffb1 	bl	8008670 <NVIC_EncodePriority>
 800870e:	4602      	mov	r2, r0
 8008710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008714:	4611      	mov	r1, r2
 8008716:	4618      	mov	r0, r3
 8008718:	f7ff ff80 	bl	800861c <__NVIC_SetPriority>
}
 800871c:	bf00      	nop
 800871e:	3718      	adds	r7, #24
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	4603      	mov	r3, r0
 800872c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800872e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008732:	4618      	mov	r0, r3
 8008734:	f7ff ff54 	bl	80085e0 <__NVIC_EnableIRQ>
}
 8008738:	bf00      	nop
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008748:	2300      	movs	r3, #0
 800874a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800874c:	f7ff faec 	bl	8007d28 <HAL_GetTick>
 8008750:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d101      	bne.n	800875c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e099      	b.n	8008890 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2202      	movs	r2, #2
 8008760:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f022 0201 	bic.w	r2, r2, #1
 800877a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800877c:	e00f      	b.n	800879e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800877e:	f7ff fad3 	bl	8007d28 <HAL_GetTick>
 8008782:	4602      	mov	r2, r0
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	2b05      	cmp	r3, #5
 800878a:	d908      	bls.n	800879e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2220      	movs	r2, #32
 8008790:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2203      	movs	r2, #3
 8008796:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800879a:	2303      	movs	r3, #3
 800879c:	e078      	b.n	8008890 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 0301 	and.w	r3, r3, #1
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1e8      	bne.n	800877e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	4b38      	ldr	r3, [pc, #224]	@ (8008898 <HAL_DMA_Init+0x158>)
 80087b8:	4013      	ands	r3, r2
 80087ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685a      	ldr	r2, [r3, #4]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80087ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80087d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	699b      	ldr	r3, [r3, #24]
 80087dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a1b      	ldr	r3, [r3, #32]
 80087e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80087ea:	697a      	ldr	r2, [r7, #20]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f4:	2b04      	cmp	r3, #4
 80087f6:	d107      	bne.n	8008808 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008800:	4313      	orrs	r3, r2
 8008802:	697a      	ldr	r2, [r7, #20]
 8008804:	4313      	orrs	r3, r2
 8008806:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	697a      	ldr	r2, [r7, #20]
 800880e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	695b      	ldr	r3, [r3, #20]
 8008816:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	f023 0307 	bic.w	r3, r3, #7
 800881e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	4313      	orrs	r3, r2
 8008828:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800882e:	2b04      	cmp	r3, #4
 8008830:	d117      	bne.n	8008862 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	4313      	orrs	r3, r2
 800883a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00e      	beq.n	8008862 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 fae1 	bl	8008e0c <DMA_CheckFifoParam>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d008      	beq.n	8008862 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2240      	movs	r2, #64	@ 0x40
 8008854:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2201      	movs	r2, #1
 800885a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800885e:	2301      	movs	r3, #1
 8008860:	e016      	b.n	8008890 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 fa98 	bl	8008da0 <DMA_CalcBaseAndBitshift>
 8008870:	4603      	mov	r3, r0
 8008872:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008878:	223f      	movs	r2, #63	@ 0x3f
 800887a:	409a      	lsls	r2, r3
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3718      	adds	r7, #24
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	f010803f 	.word	0xf010803f

0800889c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d101      	bne.n	80088ae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e050      	b.n	8008950 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d101      	bne.n	80088be <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80088ba:	2302      	movs	r3, #2
 80088bc:	e048      	b.n	8008950 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f022 0201 	bic.w	r2, r2, #1
 80088cc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2200      	movs	r2, #0
 80088d4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2200      	movs	r2, #0
 80088dc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2200      	movs	r2, #0
 80088e4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2200      	movs	r2, #0
 80088ec:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2200      	movs	r2, #0
 80088f4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2221      	movs	r2, #33	@ 0x21
 80088fc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 fa4e 	bl	8008da0 <DMA_CalcBaseAndBitshift>
 8008904:	4603      	mov	r3, r0
 8008906:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800890c:	223f      	movs	r2, #63	@ 0x3f
 800890e:	409a      	lsls	r2, r3
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008966:	2300      	movs	r3, #0
 8008968:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800896e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008976:	2b01      	cmp	r3, #1
 8008978:	d101      	bne.n	800897e <HAL_DMA_Start_IT+0x26>
 800897a:	2302      	movs	r3, #2
 800897c:	e048      	b.n	8008a10 <HAL_DMA_Start_IT+0xb8>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800898c:	b2db      	uxtb	r3, r3
 800898e:	2b01      	cmp	r3, #1
 8008990:	d137      	bne.n	8008a02 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2202      	movs	r2, #2
 8008996:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	68b9      	ldr	r1, [r7, #8]
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f000 f9cc 	bl	8008d44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089b0:	223f      	movs	r2, #63	@ 0x3f
 80089b2:	409a      	lsls	r2, r3
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f042 0216 	orr.w	r2, r2, #22
 80089c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	695a      	ldr	r2, [r3, #20]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80089d6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d007      	beq.n	80089f0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f042 0208 	orr.w	r2, r2, #8
 80089ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f042 0201 	orr.w	r2, r2, #1
 80089fe:	601a      	str	r2, [r3, #0]
 8008a00:	e005      	b.n	8008a0e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008a0a:	2302      	movs	r3, #2
 8008a0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3718      	adds	r7, #24
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b086      	sub	sp, #24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8008a20:	2300      	movs	r3, #0
 8008a22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8008a24:	4b8e      	ldr	r3, [pc, #568]	@ (8008c60 <HAL_DMA_IRQHandler+0x248>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a8e      	ldr	r2, [pc, #568]	@ (8008c64 <HAL_DMA_IRQHandler+0x24c>)
 8008a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a2e:	0a9b      	lsrs	r3, r3, #10
 8008a30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a42:	2208      	movs	r2, #8
 8008a44:	409a      	lsls	r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	4013      	ands	r3, r2
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d01a      	beq.n	8008a84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0304 	and.w	r3, r3, #4
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d013      	beq.n	8008a84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f022 0204 	bic.w	r2, r2, #4
 8008a6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a70:	2208      	movs	r2, #8
 8008a72:	409a      	lsls	r2, r3
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a7c:	f043 0201 	orr.w	r2, r3, #1
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a88:	2201      	movs	r2, #1
 8008a8a:	409a      	lsls	r2, r3
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	4013      	ands	r3, r2
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d012      	beq.n	8008aba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00b      	beq.n	8008aba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	409a      	lsls	r2, r3
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ab2:	f043 0202 	orr.w	r2, r3, #2
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008abe:	2204      	movs	r2, #4
 8008ac0:	409a      	lsls	r2, r3
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d012      	beq.n	8008af0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 0302 	and.w	r3, r3, #2
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00b      	beq.n	8008af0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008adc:	2204      	movs	r2, #4
 8008ade:	409a      	lsls	r2, r3
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ae8:	f043 0204 	orr.w	r2, r3, #4
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008af4:	2210      	movs	r2, #16
 8008af6:	409a      	lsls	r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	4013      	ands	r3, r2
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d043      	beq.n	8008b88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 0308 	and.w	r3, r3, #8
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d03c      	beq.n	8008b88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b12:	2210      	movs	r2, #16
 8008b14:	409a      	lsls	r2, r3
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d018      	beq.n	8008b5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d108      	bne.n	8008b48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d024      	beq.n	8008b88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	4798      	blx	r3
 8008b46:	e01f      	b.n	8008b88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d01b      	beq.n	8008b88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	4798      	blx	r3
 8008b58:	e016      	b.n	8008b88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d107      	bne.n	8008b78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f022 0208 	bic.w	r2, r2, #8
 8008b76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d003      	beq.n	8008b88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b8c:	2220      	movs	r2, #32
 8008b8e:	409a      	lsls	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4013      	ands	r3, r2
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f000 808f 	beq.w	8008cb8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 0310 	and.w	r3, r3, #16
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	f000 8087 	beq.w	8008cb8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bae:	2220      	movs	r2, #32
 8008bb0:	409a      	lsls	r2, r3
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b05      	cmp	r3, #5
 8008bc0:	d136      	bne.n	8008c30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f022 0216 	bic.w	r2, r2, #22
 8008bd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	695a      	ldr	r2, [r3, #20]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008be0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d103      	bne.n	8008bf2 <HAL_DMA_IRQHandler+0x1da>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d007      	beq.n	8008c02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f022 0208 	bic.w	r2, r2, #8
 8008c00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c06:	223f      	movs	r2, #63	@ 0x3f
 8008c08:	409a      	lsls	r2, r3
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d07e      	beq.n	8008d24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	4798      	blx	r3
        }
        return;
 8008c2e:	e079      	b.n	8008d24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d01d      	beq.n	8008c7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d10d      	bne.n	8008c68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d031      	beq.n	8008cb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	4798      	blx	r3
 8008c5c:	e02c      	b.n	8008cb8 <HAL_DMA_IRQHandler+0x2a0>
 8008c5e:	bf00      	nop
 8008c60:	2000004c 	.word	0x2000004c
 8008c64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d023      	beq.n	8008cb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	4798      	blx	r3
 8008c78:	e01e      	b.n	8008cb8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10f      	bne.n	8008ca8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f022 0210 	bic.w	r2, r2, #16
 8008c96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d003      	beq.n	8008cb8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d032      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cc4:	f003 0301 	and.w	r3, r3, #1
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d022      	beq.n	8008d12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2205      	movs	r2, #5
 8008cd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f022 0201 	bic.w	r2, r2, #1
 8008ce2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	60bb      	str	r3, [r7, #8]
 8008cea:	697a      	ldr	r2, [r7, #20]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d307      	bcc.n	8008d00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 0301 	and.w	r3, r3, #1
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1f2      	bne.n	8008ce4 <HAL_DMA_IRQHandler+0x2cc>
 8008cfe:	e000      	b.n	8008d02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008d00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d005      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	4798      	blx	r3
 8008d22:	e000      	b.n	8008d26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008d24:	bf00      	nop
    }
  }
}
 8008d26:	3718      	adds	r7, #24
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
 8008d50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008d60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	683a      	ldr	r2, [r7, #0]
 8008d68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	2b40      	cmp	r3, #64	@ 0x40
 8008d70:	d108      	bne.n	8008d84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008d82:	e007      	b.n	8008d94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68ba      	ldr	r2, [r7, #8]
 8008d8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	60da      	str	r2, [r3, #12]
}
 8008d94:	bf00      	nop
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	3b10      	subs	r3, #16
 8008db0:	4a13      	ldr	r2, [pc, #76]	@ (8008e00 <DMA_CalcBaseAndBitshift+0x60>)
 8008db2:	fba2 2303 	umull	r2, r3, r2, r3
 8008db6:	091b      	lsrs	r3, r3, #4
 8008db8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008dba:	4a12      	ldr	r2, [pc, #72]	@ (8008e04 <DMA_CalcBaseAndBitshift+0x64>)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2b03      	cmp	r3, #3
 8008dcc:	d908      	bls.n	8008de0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8008e08 <DMA_CalcBaseAndBitshift+0x68>)
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	1d1a      	adds	r2, r3, #4
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	659a      	str	r2, [r3, #88]	@ 0x58
 8008dde:	e006      	b.n	8008dee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	461a      	mov	r2, r3
 8008de6:	4b08      	ldr	r3, [pc, #32]	@ (8008e08 <DMA_CalcBaseAndBitshift+0x68>)
 8008de8:	4013      	ands	r3, r2
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	aaaaaaab 	.word	0xaaaaaaab
 8008e04:	08024cc4 	.word	0x08024cc4
 8008e08:	fffffc00 	.word	0xfffffc00

08008e0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e14:	2300      	movs	r3, #0
 8008e16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	699b      	ldr	r3, [r3, #24]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d11f      	bne.n	8008e66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	2b03      	cmp	r3, #3
 8008e2a:	d856      	bhi.n	8008eda <DMA_CheckFifoParam+0xce>
 8008e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e34 <DMA_CheckFifoParam+0x28>)
 8008e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e32:	bf00      	nop
 8008e34:	08008e45 	.word	0x08008e45
 8008e38:	08008e57 	.word	0x08008e57
 8008e3c:	08008e45 	.word	0x08008e45
 8008e40:	08008edb 	.word	0x08008edb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d046      	beq.n	8008ede <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e54:	e043      	b.n	8008ede <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e5a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008e5e:	d140      	bne.n	8008ee2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e64:	e03d      	b.n	8008ee2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e6e:	d121      	bne.n	8008eb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	2b03      	cmp	r3, #3
 8008e74:	d837      	bhi.n	8008ee6 <DMA_CheckFifoParam+0xda>
 8008e76:	a201      	add	r2, pc, #4	@ (adr r2, 8008e7c <DMA_CheckFifoParam+0x70>)
 8008e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e7c:	08008e8d 	.word	0x08008e8d
 8008e80:	08008e93 	.word	0x08008e93
 8008e84:	08008e8d 	.word	0x08008e8d
 8008e88:	08008ea5 	.word	0x08008ea5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8008e90:	e030      	b.n	8008ef4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d025      	beq.n	8008eea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ea2:	e022      	b.n	8008eea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ea8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008eac:	d11f      	bne.n	8008eee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008eb2:	e01c      	b.n	8008eee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d903      	bls.n	8008ec2 <DMA_CheckFifoParam+0xb6>
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	2b03      	cmp	r3, #3
 8008ebe:	d003      	beq.n	8008ec8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008ec0:	e018      	b.n	8008ef4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ec6:	e015      	b.n	8008ef4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ecc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00e      	beq.n	8008ef2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ed8:	e00b      	b.n	8008ef2 <DMA_CheckFifoParam+0xe6>
      break;
 8008eda:	bf00      	nop
 8008edc:	e00a      	b.n	8008ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8008ede:	bf00      	nop
 8008ee0:	e008      	b.n	8008ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8008ee2:	bf00      	nop
 8008ee4:	e006      	b.n	8008ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8008ee6:	bf00      	nop
 8008ee8:	e004      	b.n	8008ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8008eea:	bf00      	nop
 8008eec:	e002      	b.n	8008ef4 <DMA_CheckFifoParam+0xe8>
      break;   
 8008eee:	bf00      	nop
 8008ef0:	e000      	b.n	8008ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8008ef2:	bf00      	nop
    }
  } 
  
  return status; 
 8008ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3714      	adds	r7, #20
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop

08008f04 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d101      	bne.n	8008f16 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	e039      	b.n	8008f8a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d106      	bne.n	8008f30 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7f8 f8a0 	bl	8001070 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2202      	movs	r2, #2
 8008f34:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	685a      	ldr	r2, [r3, #4]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	430a      	orrs	r2, r1
 8008f4c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f54:	f023 0107 	bic.w	r1, r3, #7
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	689a      	ldr	r2, [r3, #8]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	430a      	orrs	r2, r1
 8008f62:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8008f94 <HAL_DMA2D_Init+0x90>)
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	68d1      	ldr	r1, [r2, #12]
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	6812      	ldr	r2, [r2, #0]
 8008f76:	430b      	orrs	r3, r1
 8008f78:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3708      	adds	r7, #8
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	ffffc000 	.word	0xffffc000

08008f98 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af02      	add	r7, sp, #8
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
 8008fa4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d101      	bne.n	8008fb4 <HAL_DMA2D_Start+0x1c>
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	e018      	b.n	8008fe6 <HAL_DMA2D_Start+0x4e>
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2202      	movs	r2, #2
 8008fc0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	68b9      	ldr	r1, [r7, #8]
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f000 fa98 	bl	8009504 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f042 0201 	orr.w	r2, r2, #1
 8008fe2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b086      	sub	sp, #24
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 0301 	and.w	r3, r3, #1
 8009006:	2b00      	cmp	r3, #0
 8009008:	d056      	beq.n	80090b8 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800900a:	f7fe fe8d 	bl	8007d28 <HAL_GetTick>
 800900e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8009010:	e04b      	b.n	80090aa <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8009020:	2b00      	cmp	r3, #0
 8009022:	d023      	beq.n	800906c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f003 0320 	and.w	r3, r3, #32
 800902a:	2b00      	cmp	r3, #0
 800902c:	d005      	beq.n	800903a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009032:	f043 0202 	orr.w	r2, r3, #2
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f003 0301 	and.w	r3, r3, #1
 8009040:	2b00      	cmp	r3, #0
 8009042:	d005      	beq.n	8009050 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009048:	f043 0201 	orr.w	r2, r3, #1
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2221      	movs	r2, #33	@ 0x21
 8009056:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2204      	movs	r2, #4
 800905c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	e0a5      	b.n	80091b8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009072:	d01a      	beq.n	80090aa <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009074:	f7fe fe58 	bl	8007d28 <HAL_GetTick>
 8009078:	4602      	mov	r2, r0
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	429a      	cmp	r2, r3
 8009082:	d302      	bcc.n	800908a <HAL_DMA2D_PollForTransfer+0x9c>
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d10f      	bne.n	80090aa <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800908e:	f043 0220 	orr.w	r2, r3, #32
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2203      	movs	r2, #3
 800909a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e086      	b.n	80091b8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	f003 0302 	and.w	r3, r3, #2
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d0ac      	beq.n	8009012 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	69db      	ldr	r3, [r3, #28]
 80090be:	f003 0320 	and.w	r3, r3, #32
 80090c2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ca:	f003 0320 	and.w	r3, r3, #32
 80090ce:	693a      	ldr	r2, [r7, #16]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d061      	beq.n	800919e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80090da:	f7fe fe25 	bl	8007d28 <HAL_GetTick>
 80090de:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80090e0:	e056      	b.n	8009190 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d02e      	beq.n	8009152 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f003 0308 	and.w	r3, r3, #8
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d005      	beq.n	800910a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009102:	f043 0204 	orr.w	r2, r3, #4
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f003 0320 	and.w	r3, r3, #32
 8009110:	2b00      	cmp	r3, #0
 8009112:	d005      	beq.n	8009120 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009118:	f043 0202 	orr.w	r2, r3, #2
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f003 0301 	and.w	r3, r3, #1
 8009126:	2b00      	cmp	r3, #0
 8009128:	d005      	beq.n	8009136 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800912e:	f043 0201 	orr.w	r2, r3, #1
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2229      	movs	r2, #41	@ 0x29
 800913c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2204      	movs	r2, #4
 8009142:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	e032      	b.n	80091b8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009158:	d01a      	beq.n	8009190 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800915a:	f7fe fde5 	bl	8007d28 <HAL_GetTick>
 800915e:	4602      	mov	r2, r0
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	683a      	ldr	r2, [r7, #0]
 8009166:	429a      	cmp	r2, r3
 8009168:	d302      	bcc.n	8009170 <HAL_DMA2D_PollForTransfer+0x182>
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10f      	bne.n	8009190 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009174:	f043 0220 	orr.w	r2, r3, #32
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2203      	movs	r2, #3
 8009180:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800918c:	2303      	movs	r3, #3
 800918e:	e013      	b.n	80091b8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	f003 0310 	and.w	r3, r3, #16
 800919a:	2b00      	cmp	r3, #0
 800919c:	d0a1      	beq.n	80090e2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2212      	movs	r2, #18
 80091a4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3718      	adds	r7, #24
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f003 0301 	and.w	r3, r3, #1
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d026      	beq.n	8009230 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d021      	beq.n	8009230 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80091fa:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009200:	f043 0201 	orr.w	r2, r3, #1
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2201      	movs	r2, #1
 800920e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2204      	movs	r2, #4
 8009214:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	695b      	ldr	r3, [r3, #20]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d003      	beq.n	8009230 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	695b      	ldr	r3, [r3, #20]
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f003 0320 	and.w	r3, r3, #32
 8009236:	2b00      	cmp	r3, #0
 8009238:	d026      	beq.n	8009288 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d021      	beq.n	8009288 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009252:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	2220      	movs	r2, #32
 800925a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009260:	f043 0202 	orr.w	r2, r3, #2
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2204      	movs	r2, #4
 800926c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	695b      	ldr	r3, [r3, #20]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d003      	beq.n	8009288 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	695b      	ldr	r3, [r3, #20]
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f003 0308 	and.w	r3, r3, #8
 800928e:	2b00      	cmp	r3, #0
 8009290:	d026      	beq.n	80092e0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009298:	2b00      	cmp	r3, #0
 800929a:	d021      	beq.n	80092e0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80092aa:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2208      	movs	r2, #8
 80092b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092b8:	f043 0204 	orr.w	r2, r3, #4
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2204      	movs	r2, #4
 80092c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	695b      	ldr	r3, [r3, #20]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d003      	beq.n	80092e0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f003 0304 	and.w	r3, r3, #4
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d013      	beq.n	8009312 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00e      	beq.n	8009312 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009302:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2204      	movs	r2, #4
 800930a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f853 	bl	80093b8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f003 0302 	and.w	r3, r3, #2
 8009318:	2b00      	cmp	r3, #0
 800931a:	d024      	beq.n	8009366 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009322:	2b00      	cmp	r3, #0
 8009324:	d01f      	beq.n	8009366 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009334:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2202      	movs	r2, #2
 800933c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2201      	movs	r2, #1
 800934a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d003      	beq.n	8009366 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f003 0310 	and.w	r3, r3, #16
 800936c:	2b00      	cmp	r3, #0
 800936e:	d01f      	beq.n	80093b0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009376:	2b00      	cmp	r3, #0
 8009378:	d01a      	beq.n	80093b0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009388:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2210      	movs	r2, #16
 8009390:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2201      	movs	r2, #1
 800939e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f80e 	bl	80093cc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80093b0:	bf00      	nop
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b087      	sub	sp, #28
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d101      	bne.n	8009400 <HAL_DMA2D_ConfigLayer+0x20>
 80093fc:	2302      	movs	r3, #2
 80093fe:	e079      	b.n	80094f4 <HAL_DMA2D_ConfigLayer+0x114>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2202      	movs	r2, #2
 800940c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	011b      	lsls	r3, r3, #4
 8009414:	3318      	adds	r3, #24
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	4413      	add	r3, r2
 800941a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	685a      	ldr	r2, [r3, #4]
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	041b      	lsls	r3, r3, #16
 8009426:	4313      	orrs	r3, r2
 8009428:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800942a:	4b35      	ldr	r3, [pc, #212]	@ (8009500 <HAL_DMA2D_ConfigLayer+0x120>)
 800942c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	2b0a      	cmp	r3, #10
 8009434:	d003      	beq.n	800943e <HAL_DMA2D_ConfigLayer+0x5e>
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	2b09      	cmp	r3, #9
 800943c:	d107      	bne.n	800944e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8009446:	697a      	ldr	r2, [r7, #20]
 8009448:	4313      	orrs	r3, r2
 800944a:	617b      	str	r3, [r7, #20]
 800944c:	e005      	b.n	800945a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	061b      	lsls	r3, r3, #24
 8009454:	697a      	ldr	r2, [r7, #20]
 8009456:	4313      	orrs	r3, r2
 8009458:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d120      	bne.n	80094a2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	43db      	mvns	r3, r3
 800946a:	ea02 0103 	and.w	r1, r2, r3
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	697a      	ldr	r2, [r7, #20]
 8009474:	430a      	orrs	r2, r1
 8009476:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	6812      	ldr	r2, [r2, #0]
 8009480:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	2b0a      	cmp	r3, #10
 8009488:	d003      	beq.n	8009492 <HAL_DMA2D_ConfigLayer+0xb2>
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	2b09      	cmp	r3, #9
 8009490:	d127      	bne.n	80094e2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	68da      	ldr	r2, [r3, #12]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800949e:	629a      	str	r2, [r3, #40]	@ 0x28
 80094a0:	e01f      	b.n	80094e2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	69da      	ldr	r2, [r3, #28]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	43db      	mvns	r3, r3
 80094ac:	ea02 0103 	and.w	r1, r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	697a      	ldr	r2, [r7, #20]
 80094b6:	430a      	orrs	r2, r1
 80094b8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	693a      	ldr	r2, [r7, #16]
 80094c0:	6812      	ldr	r2, [r2, #0]
 80094c2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	2b0a      	cmp	r3, #10
 80094ca:	d003      	beq.n	80094d4 <HAL_DMA2D_ConfigLayer+0xf4>
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	2b09      	cmp	r3, #9
 80094d2:	d106      	bne.n	80094e2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	68da      	ldr	r2, [r3, #12]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80094e0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	371c      	adds	r7, #28
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	ff03000f 	.word	0xff03000f

08009504 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8009504:	b480      	push	{r7}
 8009506:	b08b      	sub	sp, #44	@ 0x2c
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
 8009510:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009518:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	041a      	lsls	r2, r3, #16
 8009520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009522:	431a      	orrs	r2, r3
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	430a      	orrs	r2, r1
 800952a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800953c:	d174      	bne.n	8009628 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8009544:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800954c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009554:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	b2db      	uxtb	r3, r3
 800955a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d108      	bne.n	8009576 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8009564:	69ba      	ldr	r2, [r7, #24]
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	431a      	orrs	r2, r3
 800956a:	6a3b      	ldr	r3, [r7, #32]
 800956c:	4313      	orrs	r3, r2
 800956e:	697a      	ldr	r2, [r7, #20]
 8009570:	4313      	orrs	r3, r2
 8009572:	627b      	str	r3, [r7, #36]	@ 0x24
 8009574:	e053      	b.n	800961e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	2b01      	cmp	r3, #1
 800957c:	d106      	bne.n	800958c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800957e:	69ba      	ldr	r2, [r7, #24]
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	4313      	orrs	r3, r2
 8009584:	697a      	ldr	r2, [r7, #20]
 8009586:	4313      	orrs	r3, r2
 8009588:	627b      	str	r3, [r7, #36]	@ 0x24
 800958a:	e048      	b.n	800961e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	2b02      	cmp	r3, #2
 8009592:	d111      	bne.n	80095b8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	0cdb      	lsrs	r3, r3, #19
 8009598:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	0a9b      	lsrs	r3, r3, #10
 800959e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	08db      	lsrs	r3, r3, #3
 80095a4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	015a      	lsls	r2, r3, #5
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	02db      	lsls	r3, r3, #11
 80095ae:	4313      	orrs	r3, r2
 80095b0:	697a      	ldr	r2, [r7, #20]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80095b6:	e032      	b.n	800961e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	2b03      	cmp	r3, #3
 80095be:	d117      	bne.n	80095f0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80095c0:	6a3b      	ldr	r3, [r7, #32]
 80095c2:	0fdb      	lsrs	r3, r3, #31
 80095c4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	0cdb      	lsrs	r3, r3, #19
 80095ca:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	0adb      	lsrs	r3, r3, #11
 80095d0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	08db      	lsrs	r3, r3, #3
 80095d6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	015a      	lsls	r2, r3, #5
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	029b      	lsls	r3, r3, #10
 80095e0:	431a      	orrs	r2, r3
 80095e2:	6a3b      	ldr	r3, [r7, #32]
 80095e4:	03db      	lsls	r3, r3, #15
 80095e6:	4313      	orrs	r3, r2
 80095e8:	697a      	ldr	r2, [r7, #20]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80095ee:	e016      	b.n	800961e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	0f1b      	lsrs	r3, r3, #28
 80095f4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	0d1b      	lsrs	r3, r3, #20
 80095fa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80095fc:	69bb      	ldr	r3, [r7, #24]
 80095fe:	0b1b      	lsrs	r3, r3, #12
 8009600:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	091b      	lsrs	r3, r3, #4
 8009606:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8009608:	69bb      	ldr	r3, [r7, #24]
 800960a:	011a      	lsls	r2, r3, #4
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	021b      	lsls	r3, r3, #8
 8009610:	431a      	orrs	r2, r3
 8009612:	6a3b      	ldr	r3, [r7, #32]
 8009614:	031b      	lsls	r3, r3, #12
 8009616:	4313      	orrs	r3, r2
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	4313      	orrs	r3, r2
 800961c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009624:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8009626:	e003      	b.n	8009630 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	60da      	str	r2, [r3, #12]
}
 8009630:	bf00      	nop
 8009632:	372c      	adds	r7, #44	@ 0x2c
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800963c:	b480      	push	{r7}
 800963e:	b089      	sub	sp, #36	@ 0x24
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8009646:	2300      	movs	r3, #0
 8009648:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800964a:	2300      	movs	r3, #0
 800964c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800964e:	2300      	movs	r3, #0
 8009650:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8009652:	2300      	movs	r3, #0
 8009654:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8009656:	2300      	movs	r3, #0
 8009658:	61fb      	str	r3, [r7, #28]
 800965a:	e175      	b.n	8009948 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800965c:	2201      	movs	r2, #1
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	fa02 f303 	lsl.w	r3, r2, r3
 8009664:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	697a      	ldr	r2, [r7, #20]
 800966c:	4013      	ands	r3, r2
 800966e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009670:	693a      	ldr	r2, [r7, #16]
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	429a      	cmp	r2, r3
 8009676:	f040 8164 	bne.w	8009942 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	f003 0303 	and.w	r3, r3, #3
 8009682:	2b01      	cmp	r3, #1
 8009684:	d005      	beq.n	8009692 <HAL_GPIO_Init+0x56>
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	f003 0303 	and.w	r3, r3, #3
 800968e:	2b02      	cmp	r3, #2
 8009690:	d130      	bne.n	80096f4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	005b      	lsls	r3, r3, #1
 800969c:	2203      	movs	r2, #3
 800969e:	fa02 f303 	lsl.w	r3, r2, r3
 80096a2:	43db      	mvns	r3, r3
 80096a4:	69ba      	ldr	r2, [r7, #24]
 80096a6:	4013      	ands	r3, r2
 80096a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	68da      	ldr	r2, [r3, #12]
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	005b      	lsls	r3, r3, #1
 80096b2:	fa02 f303 	lsl.w	r3, r2, r3
 80096b6:	69ba      	ldr	r2, [r7, #24]
 80096b8:	4313      	orrs	r3, r2
 80096ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	69ba      	ldr	r2, [r7, #24]
 80096c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80096c8:	2201      	movs	r2, #1
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	fa02 f303 	lsl.w	r3, r2, r3
 80096d0:	43db      	mvns	r3, r3
 80096d2:	69ba      	ldr	r2, [r7, #24]
 80096d4:	4013      	ands	r3, r2
 80096d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	091b      	lsrs	r3, r3, #4
 80096de:	f003 0201 	and.w	r2, r3, #1
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	fa02 f303 	lsl.w	r3, r2, r3
 80096e8:	69ba      	ldr	r2, [r7, #24]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	69ba      	ldr	r2, [r7, #24]
 80096f2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	f003 0303 	and.w	r3, r3, #3
 80096fc:	2b03      	cmp	r3, #3
 80096fe:	d017      	beq.n	8009730 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	005b      	lsls	r3, r3, #1
 800970a:	2203      	movs	r2, #3
 800970c:	fa02 f303 	lsl.w	r3, r2, r3
 8009710:	43db      	mvns	r3, r3
 8009712:	69ba      	ldr	r2, [r7, #24]
 8009714:	4013      	ands	r3, r2
 8009716:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	689a      	ldr	r2, [r3, #8]
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	005b      	lsls	r3, r3, #1
 8009720:	fa02 f303 	lsl.w	r3, r2, r3
 8009724:	69ba      	ldr	r2, [r7, #24]
 8009726:	4313      	orrs	r3, r2
 8009728:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	69ba      	ldr	r2, [r7, #24]
 800972e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	f003 0303 	and.w	r3, r3, #3
 8009738:	2b02      	cmp	r3, #2
 800973a:	d123      	bne.n	8009784 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	08da      	lsrs	r2, r3, #3
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	3208      	adds	r2, #8
 8009744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	f003 0307 	and.w	r3, r3, #7
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	220f      	movs	r2, #15
 8009754:	fa02 f303 	lsl.w	r3, r2, r3
 8009758:	43db      	mvns	r3, r3
 800975a:	69ba      	ldr	r2, [r7, #24]
 800975c:	4013      	ands	r3, r2
 800975e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	691a      	ldr	r2, [r3, #16]
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	f003 0307 	and.w	r3, r3, #7
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	fa02 f303 	lsl.w	r3, r2, r3
 8009770:	69ba      	ldr	r2, [r7, #24]
 8009772:	4313      	orrs	r3, r2
 8009774:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	08da      	lsrs	r2, r3, #3
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	3208      	adds	r2, #8
 800977e:	69b9      	ldr	r1, [r7, #24]
 8009780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	005b      	lsls	r3, r3, #1
 800978e:	2203      	movs	r2, #3
 8009790:	fa02 f303 	lsl.w	r3, r2, r3
 8009794:	43db      	mvns	r3, r3
 8009796:	69ba      	ldr	r2, [r7, #24]
 8009798:	4013      	ands	r3, r2
 800979a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	f003 0203 	and.w	r2, r3, #3
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	005b      	lsls	r3, r3, #1
 80097a8:	fa02 f303 	lsl.w	r3, r2, r3
 80097ac:	69ba      	ldr	r2, [r7, #24]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	69ba      	ldr	r2, [r7, #24]
 80097b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f000 80be 	beq.w	8009942 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80097c6:	4b66      	ldr	r3, [pc, #408]	@ (8009960 <HAL_GPIO_Init+0x324>)
 80097c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097ca:	4a65      	ldr	r2, [pc, #404]	@ (8009960 <HAL_GPIO_Init+0x324>)
 80097cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80097d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80097d2:	4b63      	ldr	r3, [pc, #396]	@ (8009960 <HAL_GPIO_Init+0x324>)
 80097d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80097da:	60fb      	str	r3, [r7, #12]
 80097dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80097de:	4a61      	ldr	r2, [pc, #388]	@ (8009964 <HAL_GPIO_Init+0x328>)
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	089b      	lsrs	r3, r3, #2
 80097e4:	3302      	adds	r3, #2
 80097e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	f003 0303 	and.w	r3, r3, #3
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	220f      	movs	r2, #15
 80097f6:	fa02 f303 	lsl.w	r3, r2, r3
 80097fa:	43db      	mvns	r3, r3
 80097fc:	69ba      	ldr	r2, [r7, #24]
 80097fe:	4013      	ands	r3, r2
 8009800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a58      	ldr	r2, [pc, #352]	@ (8009968 <HAL_GPIO_Init+0x32c>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d037      	beq.n	800987a <HAL_GPIO_Init+0x23e>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a57      	ldr	r2, [pc, #348]	@ (800996c <HAL_GPIO_Init+0x330>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d031      	beq.n	8009876 <HAL_GPIO_Init+0x23a>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a56      	ldr	r2, [pc, #344]	@ (8009970 <HAL_GPIO_Init+0x334>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d02b      	beq.n	8009872 <HAL_GPIO_Init+0x236>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4a55      	ldr	r2, [pc, #340]	@ (8009974 <HAL_GPIO_Init+0x338>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d025      	beq.n	800986e <HAL_GPIO_Init+0x232>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	4a54      	ldr	r2, [pc, #336]	@ (8009978 <HAL_GPIO_Init+0x33c>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d01f      	beq.n	800986a <HAL_GPIO_Init+0x22e>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4a53      	ldr	r2, [pc, #332]	@ (800997c <HAL_GPIO_Init+0x340>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d019      	beq.n	8009866 <HAL_GPIO_Init+0x22a>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4a52      	ldr	r2, [pc, #328]	@ (8009980 <HAL_GPIO_Init+0x344>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d013      	beq.n	8009862 <HAL_GPIO_Init+0x226>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a51      	ldr	r2, [pc, #324]	@ (8009984 <HAL_GPIO_Init+0x348>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d00d      	beq.n	800985e <HAL_GPIO_Init+0x222>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a50      	ldr	r2, [pc, #320]	@ (8009988 <HAL_GPIO_Init+0x34c>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d007      	beq.n	800985a <HAL_GPIO_Init+0x21e>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a4f      	ldr	r2, [pc, #316]	@ (800998c <HAL_GPIO_Init+0x350>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d101      	bne.n	8009856 <HAL_GPIO_Init+0x21a>
 8009852:	2309      	movs	r3, #9
 8009854:	e012      	b.n	800987c <HAL_GPIO_Init+0x240>
 8009856:	230a      	movs	r3, #10
 8009858:	e010      	b.n	800987c <HAL_GPIO_Init+0x240>
 800985a:	2308      	movs	r3, #8
 800985c:	e00e      	b.n	800987c <HAL_GPIO_Init+0x240>
 800985e:	2307      	movs	r3, #7
 8009860:	e00c      	b.n	800987c <HAL_GPIO_Init+0x240>
 8009862:	2306      	movs	r3, #6
 8009864:	e00a      	b.n	800987c <HAL_GPIO_Init+0x240>
 8009866:	2305      	movs	r3, #5
 8009868:	e008      	b.n	800987c <HAL_GPIO_Init+0x240>
 800986a:	2304      	movs	r3, #4
 800986c:	e006      	b.n	800987c <HAL_GPIO_Init+0x240>
 800986e:	2303      	movs	r3, #3
 8009870:	e004      	b.n	800987c <HAL_GPIO_Init+0x240>
 8009872:	2302      	movs	r3, #2
 8009874:	e002      	b.n	800987c <HAL_GPIO_Init+0x240>
 8009876:	2301      	movs	r3, #1
 8009878:	e000      	b.n	800987c <HAL_GPIO_Init+0x240>
 800987a:	2300      	movs	r3, #0
 800987c:	69fa      	ldr	r2, [r7, #28]
 800987e:	f002 0203 	and.w	r2, r2, #3
 8009882:	0092      	lsls	r2, r2, #2
 8009884:	4093      	lsls	r3, r2
 8009886:	69ba      	ldr	r2, [r7, #24]
 8009888:	4313      	orrs	r3, r2
 800988a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800988c:	4935      	ldr	r1, [pc, #212]	@ (8009964 <HAL_GPIO_Init+0x328>)
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	089b      	lsrs	r3, r3, #2
 8009892:	3302      	adds	r3, #2
 8009894:	69ba      	ldr	r2, [r7, #24]
 8009896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800989a:	4b3d      	ldr	r3, [pc, #244]	@ (8009990 <HAL_GPIO_Init+0x354>)
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	43db      	mvns	r3, r3
 80098a4:	69ba      	ldr	r2, [r7, #24]
 80098a6:	4013      	ands	r3, r2
 80098a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d003      	beq.n	80098be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80098b6:	69ba      	ldr	r2, [r7, #24]
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80098be:	4a34      	ldr	r2, [pc, #208]	@ (8009990 <HAL_GPIO_Init+0x354>)
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80098c4:	4b32      	ldr	r3, [pc, #200]	@ (8009990 <HAL_GPIO_Init+0x354>)
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	43db      	mvns	r3, r3
 80098ce:	69ba      	ldr	r2, [r7, #24]
 80098d0:	4013      	ands	r3, r2
 80098d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d003      	beq.n	80098e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80098e0:	69ba      	ldr	r2, [r7, #24]
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80098e8:	4a29      	ldr	r2, [pc, #164]	@ (8009990 <HAL_GPIO_Init+0x354>)
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80098ee:	4b28      	ldr	r3, [pc, #160]	@ (8009990 <HAL_GPIO_Init+0x354>)
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	43db      	mvns	r3, r3
 80098f8:	69ba      	ldr	r2, [r7, #24]
 80098fa:	4013      	ands	r3, r2
 80098fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009906:	2b00      	cmp	r3, #0
 8009908:	d003      	beq.n	8009912 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800990a:	69ba      	ldr	r2, [r7, #24]
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	4313      	orrs	r3, r2
 8009910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009912:	4a1f      	ldr	r2, [pc, #124]	@ (8009990 <HAL_GPIO_Init+0x354>)
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009918:	4b1d      	ldr	r3, [pc, #116]	@ (8009990 <HAL_GPIO_Init+0x354>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	43db      	mvns	r3, r3
 8009922:	69ba      	ldr	r2, [r7, #24]
 8009924:	4013      	ands	r3, r2
 8009926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009930:	2b00      	cmp	r3, #0
 8009932:	d003      	beq.n	800993c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009934:	69ba      	ldr	r2, [r7, #24]
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	4313      	orrs	r3, r2
 800993a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800993c:	4a14      	ldr	r2, [pc, #80]	@ (8009990 <HAL_GPIO_Init+0x354>)
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	3301      	adds	r3, #1
 8009946:	61fb      	str	r3, [r7, #28]
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	2b0f      	cmp	r3, #15
 800994c:	f67f ae86 	bls.w	800965c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8009950:	bf00      	nop
 8009952:	bf00      	nop
 8009954:	3724      	adds	r7, #36	@ 0x24
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	40023800 	.word	0x40023800
 8009964:	40013800 	.word	0x40013800
 8009968:	40020000 	.word	0x40020000
 800996c:	40020400 	.word	0x40020400
 8009970:	40020800 	.word	0x40020800
 8009974:	40020c00 	.word	0x40020c00
 8009978:	40021000 	.word	0x40021000
 800997c:	40021400 	.word	0x40021400
 8009980:	40021800 	.word	0x40021800
 8009984:	40021c00 	.word	0x40021c00
 8009988:	40022000 	.word	0x40022000
 800998c:	40022400 	.word	0x40022400
 8009990:	40013c00 	.word	0x40013c00

08009994 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009994:	b480      	push	{r7}
 8009996:	b087      	sub	sp, #28
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800999e:	2300      	movs	r3, #0
 80099a0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80099a2:	2300      	movs	r3, #0
 80099a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80099a6:	2300      	movs	r3, #0
 80099a8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80099aa:	2300      	movs	r3, #0
 80099ac:	617b      	str	r3, [r7, #20]
 80099ae:	e0d9      	b.n	8009b64 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80099b0:	2201      	movs	r2, #1
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	fa02 f303 	lsl.w	r3, r2, r3
 80099b8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80099ba:	683a      	ldr	r2, [r7, #0]
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	4013      	ands	r3, r2
 80099c0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	f040 80c9 	bne.w	8009b5e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80099cc:	4a6b      	ldr	r2, [pc, #428]	@ (8009b7c <HAL_GPIO_DeInit+0x1e8>)
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	089b      	lsrs	r3, r3, #2
 80099d2:	3302      	adds	r3, #2
 80099d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099d8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	f003 0303 	and.w	r3, r3, #3
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	220f      	movs	r2, #15
 80099e4:	fa02 f303 	lsl.w	r3, r2, r3
 80099e8:	68ba      	ldr	r2, [r7, #8]
 80099ea:	4013      	ands	r3, r2
 80099ec:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4a63      	ldr	r2, [pc, #396]	@ (8009b80 <HAL_GPIO_DeInit+0x1ec>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d037      	beq.n	8009a66 <HAL_GPIO_DeInit+0xd2>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4a62      	ldr	r2, [pc, #392]	@ (8009b84 <HAL_GPIO_DeInit+0x1f0>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d031      	beq.n	8009a62 <HAL_GPIO_DeInit+0xce>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4a61      	ldr	r2, [pc, #388]	@ (8009b88 <HAL_GPIO_DeInit+0x1f4>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d02b      	beq.n	8009a5e <HAL_GPIO_DeInit+0xca>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4a60      	ldr	r2, [pc, #384]	@ (8009b8c <HAL_GPIO_DeInit+0x1f8>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d025      	beq.n	8009a5a <HAL_GPIO_DeInit+0xc6>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4a5f      	ldr	r2, [pc, #380]	@ (8009b90 <HAL_GPIO_DeInit+0x1fc>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d01f      	beq.n	8009a56 <HAL_GPIO_DeInit+0xc2>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	4a5e      	ldr	r2, [pc, #376]	@ (8009b94 <HAL_GPIO_DeInit+0x200>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d019      	beq.n	8009a52 <HAL_GPIO_DeInit+0xbe>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	4a5d      	ldr	r2, [pc, #372]	@ (8009b98 <HAL_GPIO_DeInit+0x204>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d013      	beq.n	8009a4e <HAL_GPIO_DeInit+0xba>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4a5c      	ldr	r2, [pc, #368]	@ (8009b9c <HAL_GPIO_DeInit+0x208>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d00d      	beq.n	8009a4a <HAL_GPIO_DeInit+0xb6>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4a5b      	ldr	r2, [pc, #364]	@ (8009ba0 <HAL_GPIO_DeInit+0x20c>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d007      	beq.n	8009a46 <HAL_GPIO_DeInit+0xb2>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a5a      	ldr	r2, [pc, #360]	@ (8009ba4 <HAL_GPIO_DeInit+0x210>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d101      	bne.n	8009a42 <HAL_GPIO_DeInit+0xae>
 8009a3e:	2309      	movs	r3, #9
 8009a40:	e012      	b.n	8009a68 <HAL_GPIO_DeInit+0xd4>
 8009a42:	230a      	movs	r3, #10
 8009a44:	e010      	b.n	8009a68 <HAL_GPIO_DeInit+0xd4>
 8009a46:	2308      	movs	r3, #8
 8009a48:	e00e      	b.n	8009a68 <HAL_GPIO_DeInit+0xd4>
 8009a4a:	2307      	movs	r3, #7
 8009a4c:	e00c      	b.n	8009a68 <HAL_GPIO_DeInit+0xd4>
 8009a4e:	2306      	movs	r3, #6
 8009a50:	e00a      	b.n	8009a68 <HAL_GPIO_DeInit+0xd4>
 8009a52:	2305      	movs	r3, #5
 8009a54:	e008      	b.n	8009a68 <HAL_GPIO_DeInit+0xd4>
 8009a56:	2304      	movs	r3, #4
 8009a58:	e006      	b.n	8009a68 <HAL_GPIO_DeInit+0xd4>
 8009a5a:	2303      	movs	r3, #3
 8009a5c:	e004      	b.n	8009a68 <HAL_GPIO_DeInit+0xd4>
 8009a5e:	2302      	movs	r3, #2
 8009a60:	e002      	b.n	8009a68 <HAL_GPIO_DeInit+0xd4>
 8009a62:	2301      	movs	r3, #1
 8009a64:	e000      	b.n	8009a68 <HAL_GPIO_DeInit+0xd4>
 8009a66:	2300      	movs	r3, #0
 8009a68:	697a      	ldr	r2, [r7, #20]
 8009a6a:	f002 0203 	and.w	r2, r2, #3
 8009a6e:	0092      	lsls	r2, r2, #2
 8009a70:	4093      	lsls	r3, r2
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d132      	bne.n	8009ade <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009a78:	4b4b      	ldr	r3, [pc, #300]	@ (8009ba8 <HAL_GPIO_DeInit+0x214>)
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	43db      	mvns	r3, r3
 8009a80:	4949      	ldr	r1, [pc, #292]	@ (8009ba8 <HAL_GPIO_DeInit+0x214>)
 8009a82:	4013      	ands	r3, r2
 8009a84:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8009a86:	4b48      	ldr	r3, [pc, #288]	@ (8009ba8 <HAL_GPIO_DeInit+0x214>)
 8009a88:	685a      	ldr	r2, [r3, #4]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	43db      	mvns	r3, r3
 8009a8e:	4946      	ldr	r1, [pc, #280]	@ (8009ba8 <HAL_GPIO_DeInit+0x214>)
 8009a90:	4013      	ands	r3, r2
 8009a92:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009a94:	4b44      	ldr	r3, [pc, #272]	@ (8009ba8 <HAL_GPIO_DeInit+0x214>)
 8009a96:	68da      	ldr	r2, [r3, #12]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	43db      	mvns	r3, r3
 8009a9c:	4942      	ldr	r1, [pc, #264]	@ (8009ba8 <HAL_GPIO_DeInit+0x214>)
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009aa2:	4b41      	ldr	r3, [pc, #260]	@ (8009ba8 <HAL_GPIO_DeInit+0x214>)
 8009aa4:	689a      	ldr	r2, [r3, #8]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	43db      	mvns	r3, r3
 8009aaa:	493f      	ldr	r1, [pc, #252]	@ (8009ba8 <HAL_GPIO_DeInit+0x214>)
 8009aac:	4013      	ands	r3, r2
 8009aae:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	f003 0303 	and.w	r3, r3, #3
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	220f      	movs	r2, #15
 8009aba:	fa02 f303 	lsl.w	r3, r2, r3
 8009abe:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8009ac0:	4a2e      	ldr	r2, [pc, #184]	@ (8009b7c <HAL_GPIO_DeInit+0x1e8>)
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	089b      	lsrs	r3, r3, #2
 8009ac6:	3302      	adds	r3, #2
 8009ac8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	43da      	mvns	r2, r3
 8009ad0:	482a      	ldr	r0, [pc, #168]	@ (8009b7c <HAL_GPIO_DeInit+0x1e8>)
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	089b      	lsrs	r3, r3, #2
 8009ad6:	400a      	ands	r2, r1
 8009ad8:	3302      	adds	r3, #2
 8009ada:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	005b      	lsls	r3, r3, #1
 8009ae6:	2103      	movs	r1, #3
 8009ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8009aec:	43db      	mvns	r3, r3
 8009aee:	401a      	ands	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	08da      	lsrs	r2, r3, #3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	3208      	adds	r2, #8
 8009afc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	f003 0307 	and.w	r3, r3, #7
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	220f      	movs	r2, #15
 8009b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b0e:	43db      	mvns	r3, r3
 8009b10:	697a      	ldr	r2, [r7, #20]
 8009b12:	08d2      	lsrs	r2, r2, #3
 8009b14:	4019      	ands	r1, r3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	3208      	adds	r2, #8
 8009b1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	68da      	ldr	r2, [r3, #12]
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	005b      	lsls	r3, r3, #1
 8009b26:	2103      	movs	r1, #3
 8009b28:	fa01 f303 	lsl.w	r3, r1, r3
 8009b2c:	43db      	mvns	r3, r3
 8009b2e:	401a      	ands	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	685a      	ldr	r2, [r3, #4]
 8009b38:	2101      	movs	r1, #1
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8009b40:	43db      	mvns	r3, r3
 8009b42:	401a      	ands	r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	689a      	ldr	r2, [r3, #8]
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	005b      	lsls	r3, r3, #1
 8009b50:	2103      	movs	r1, #3
 8009b52:	fa01 f303 	lsl.w	r3, r1, r3
 8009b56:	43db      	mvns	r3, r3
 8009b58:	401a      	ands	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	3301      	adds	r3, #1
 8009b62:	617b      	str	r3, [r7, #20]
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	2b0f      	cmp	r3, #15
 8009b68:	f67f af22 	bls.w	80099b0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009b6c:	bf00      	nop
 8009b6e:	bf00      	nop
 8009b70:	371c      	adds	r7, #28
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop
 8009b7c:	40013800 	.word	0x40013800
 8009b80:	40020000 	.word	0x40020000
 8009b84:	40020400 	.word	0x40020400
 8009b88:	40020800 	.word	0x40020800
 8009b8c:	40020c00 	.word	0x40020c00
 8009b90:	40021000 	.word	0x40021000
 8009b94:	40021400 	.word	0x40021400
 8009b98:	40021800 	.word	0x40021800
 8009b9c:	40021c00 	.word	0x40021c00
 8009ba0:	40022000 	.word	0x40022000
 8009ba4:	40022400 	.word	0x40022400
 8009ba8:	40013c00 	.word	0x40013c00

08009bac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	691a      	ldr	r2, [r3, #16]
 8009bbc:	887b      	ldrh	r3, [r7, #2]
 8009bbe:	4013      	ands	r3, r2
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d002      	beq.n	8009bca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	73fb      	strb	r3, [r7, #15]
 8009bc8:	e001      	b.n	8009bce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3714      	adds	r7, #20
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	460b      	mov	r3, r1
 8009be6:	807b      	strh	r3, [r7, #2]
 8009be8:	4613      	mov	r3, r2
 8009bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009bec:	787b      	ldrb	r3, [r7, #1]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d003      	beq.n	8009bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009bf2:	887a      	ldrh	r2, [r7, #2]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8009bf8:	e003      	b.n	8009c02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009bfa:	887b      	ldrh	r3, [r7, #2]
 8009bfc:	041a      	lsls	r2, r3, #16
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	619a      	str	r2, [r3, #24]
}
 8009c02:	bf00      	nop
 8009c04:	370c      	adds	r7, #12
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
	...

08009c10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d101      	bne.n	8009c22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e07f      	b.n	8009d22 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d106      	bne.n	8009c3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 f8a9 	bl	8009d8e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2224      	movs	r2, #36	@ 0x24
 8009c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f022 0201 	bic.w	r2, r2, #1
 8009c52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	685a      	ldr	r2, [r3, #4]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009c60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	689a      	ldr	r2, [r3, #8]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009c70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d107      	bne.n	8009c8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	689a      	ldr	r2, [r3, #8]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009c86:	609a      	str	r2, [r3, #8]
 8009c88:	e006      	b.n	8009c98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	689a      	ldr	r2, [r3, #8]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009c96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	d104      	bne.n	8009caa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009ca8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	6859      	ldr	r1, [r3, #4]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8009d2c <HAL_I2C_Init+0x11c>)
 8009cb6:	430b      	orrs	r3, r1
 8009cb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	68da      	ldr	r2, [r3, #12]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009cc8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	691a      	ldr	r2, [r3, #16]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	430a      	orrs	r2, r1
 8009ce2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	69d9      	ldr	r1, [r3, #28]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a1a      	ldr	r2, [r3, #32]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	430a      	orrs	r2, r1
 8009cf2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f042 0201 	orr.w	r2, r2, #1
 8009d02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2220      	movs	r2, #32
 8009d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3708      	adds	r7, #8
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	02008000 	.word	0x02008000

08009d30 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d101      	bne.n	8009d42 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e021      	b.n	8009d86 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2224      	movs	r2, #36	@ 0x24
 8009d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f022 0201 	bic.w	r2, r2, #1
 8009d58:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 f821 	bl	8009da2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3708      	adds	r7, #8
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009d8e:	b480      	push	{r7}
 8009d90:	b083      	sub	sp, #12
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8009d96:	bf00      	nop
 8009d98:	370c      	adds	r7, #12
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr

08009da2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8009da2:	b480      	push	{r7}
 8009da4:	b083      	sub	sp, #12
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8009daa:	bf00      	nop
 8009dac:	370c      	adds	r7, #12
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
	...

08009db8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b088      	sub	sp, #32
 8009dbc:	af02      	add	r7, sp, #8
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	4608      	mov	r0, r1
 8009dc2:	4611      	mov	r1, r2
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	817b      	strh	r3, [r7, #10]
 8009dca:	460b      	mov	r3, r1
 8009dcc:	813b      	strh	r3, [r7, #8]
 8009dce:	4613      	mov	r3, r2
 8009dd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	2b20      	cmp	r3, #32
 8009ddc:	f040 80f9 	bne.w	8009fd2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009de0:	6a3b      	ldr	r3, [r7, #32]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d002      	beq.n	8009dec <HAL_I2C_Mem_Write+0x34>
 8009de6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d105      	bne.n	8009df8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009df2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009df4:	2301      	movs	r3, #1
 8009df6:	e0ed      	b.n	8009fd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d101      	bne.n	8009e06 <HAL_I2C_Mem_Write+0x4e>
 8009e02:	2302      	movs	r3, #2
 8009e04:	e0e6      	b.n	8009fd4 <HAL_I2C_Mem_Write+0x21c>
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009e0e:	f7fd ff8b 	bl	8007d28 <HAL_GetTick>
 8009e12:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	9300      	str	r3, [sp, #0]
 8009e18:	2319      	movs	r3, #25
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f000 fad1 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d001      	beq.n	8009e30 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e0d1      	b.n	8009fd4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2221      	movs	r2, #33	@ 0x21
 8009e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2240      	movs	r2, #64	@ 0x40
 8009e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2200      	movs	r2, #0
 8009e44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6a3a      	ldr	r2, [r7, #32]
 8009e4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009e50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2200      	movs	r2, #0
 8009e56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009e58:	88f8      	ldrh	r0, [r7, #6]
 8009e5a:	893a      	ldrh	r2, [r7, #8]
 8009e5c:	8979      	ldrh	r1, [r7, #10]
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	9301      	str	r3, [sp, #4]
 8009e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e64:	9300      	str	r3, [sp, #0]
 8009e66:	4603      	mov	r3, r0
 8009e68:	68f8      	ldr	r0, [r7, #12]
 8009e6a:	f000 f9e1 	bl	800a230 <I2C_RequestMemoryWrite>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d005      	beq.n	8009e80 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e0a9      	b.n	8009fd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	2bff      	cmp	r3, #255	@ 0xff
 8009e88:	d90e      	bls.n	8009ea8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	22ff      	movs	r2, #255	@ 0xff
 8009e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e94:	b2da      	uxtb	r2, r3
 8009e96:	8979      	ldrh	r1, [r7, #10]
 8009e98:	2300      	movs	r3, #0
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009ea0:	68f8      	ldr	r0, [r7, #12]
 8009ea2:	f000 fc2d 	bl	800a700 <I2C_TransferConfig>
 8009ea6:	e00f      	b.n	8009ec8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009eb6:	b2da      	uxtb	r2, r3
 8009eb8:	8979      	ldrh	r1, [r7, #10]
 8009eba:	2300      	movs	r3, #0
 8009ebc:	9300      	str	r3, [sp, #0]
 8009ebe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f000 fc1c 	bl	800a700 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ec8:	697a      	ldr	r2, [r7, #20]
 8009eca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f000 fabb 	bl	800a448 <I2C_WaitOnTXISFlagUntilTimeout>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d001      	beq.n	8009edc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e07b      	b.n	8009fd4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ee0:	781a      	ldrb	r2, [r3, #0]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eec:	1c5a      	adds	r2, r3, #1
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	3b01      	subs	r3, #1
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f04:	3b01      	subs	r3, #1
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d034      	beq.n	8009f80 <HAL_I2C_Mem_Write+0x1c8>
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d130      	bne.n	8009f80 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	9300      	str	r3, [sp, #0]
 8009f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f24:	2200      	movs	r2, #0
 8009f26:	2180      	movs	r1, #128	@ 0x80
 8009f28:	68f8      	ldr	r0, [r7, #12]
 8009f2a:	f000 fa4d 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d001      	beq.n	8009f38 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009f34:	2301      	movs	r3, #1
 8009f36:	e04d      	b.n	8009fd4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	2bff      	cmp	r3, #255	@ 0xff
 8009f40:	d90e      	bls.n	8009f60 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	22ff      	movs	r2, #255	@ 0xff
 8009f46:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f4c:	b2da      	uxtb	r2, r3
 8009f4e:	8979      	ldrh	r1, [r7, #10]
 8009f50:	2300      	movs	r3, #0
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009f58:	68f8      	ldr	r0, [r7, #12]
 8009f5a:	f000 fbd1 	bl	800a700 <I2C_TransferConfig>
 8009f5e:	e00f      	b.n	8009f80 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f6e:	b2da      	uxtb	r2, r3
 8009f70:	8979      	ldrh	r1, [r7, #10]
 8009f72:	2300      	movs	r3, #0
 8009f74:	9300      	str	r3, [sp, #0]
 8009f76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f000 fbc0 	bl	800a700 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d19e      	bne.n	8009ec8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f8a:	697a      	ldr	r2, [r7, #20]
 8009f8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f000 fa9a 	bl	800a4c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d001      	beq.n	8009f9e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	e01a      	b.n	8009fd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2220      	movs	r2, #32
 8009fa4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	6859      	ldr	r1, [r3, #4]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8009fdc <HAL_I2C_Mem_Write+0x224>)
 8009fb2:	400b      	ands	r3, r1
 8009fb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2220      	movs	r2, #32
 8009fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	e000      	b.n	8009fd4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009fd2:	2302      	movs	r3, #2
  }
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3718      	adds	r7, #24
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	fe00e800 	.word	0xfe00e800

08009fe0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b088      	sub	sp, #32
 8009fe4:	af02      	add	r7, sp, #8
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	4608      	mov	r0, r1
 8009fea:	4611      	mov	r1, r2
 8009fec:	461a      	mov	r2, r3
 8009fee:	4603      	mov	r3, r0
 8009ff0:	817b      	strh	r3, [r7, #10]
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	813b      	strh	r3, [r7, #8]
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a000:	b2db      	uxtb	r3, r3
 800a002:	2b20      	cmp	r3, #32
 800a004:	f040 80fd 	bne.w	800a202 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a008:	6a3b      	ldr	r3, [r7, #32]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d002      	beq.n	800a014 <HAL_I2C_Mem_Read+0x34>
 800a00e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a010:	2b00      	cmp	r3, #0
 800a012:	d105      	bne.n	800a020 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a01a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	e0f1      	b.n	800a204 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a026:	2b01      	cmp	r3, #1
 800a028:	d101      	bne.n	800a02e <HAL_I2C_Mem_Read+0x4e>
 800a02a:	2302      	movs	r3, #2
 800a02c:	e0ea      	b.n	800a204 <HAL_I2C_Mem_Read+0x224>
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2201      	movs	r2, #1
 800a032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a036:	f7fd fe77 	bl	8007d28 <HAL_GetTick>
 800a03a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	9300      	str	r3, [sp, #0]
 800a040:	2319      	movs	r3, #25
 800a042:	2201      	movs	r2, #1
 800a044:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f000 f9bd 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d001      	beq.n	800a058 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	e0d5      	b.n	800a204 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2222      	movs	r2, #34	@ 0x22
 800a05c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2240      	movs	r2, #64	@ 0x40
 800a064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2200      	movs	r2, #0
 800a06c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6a3a      	ldr	r2, [r7, #32]
 800a072:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a078:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2200      	movs	r2, #0
 800a07e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a080:	88f8      	ldrh	r0, [r7, #6]
 800a082:	893a      	ldrh	r2, [r7, #8]
 800a084:	8979      	ldrh	r1, [r7, #10]
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	9301      	str	r3, [sp, #4]
 800a08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a08c:	9300      	str	r3, [sp, #0]
 800a08e:	4603      	mov	r3, r0
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f000 f921 	bl	800a2d8 <I2C_RequestMemoryRead>
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d005      	beq.n	800a0a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e0ad      	b.n	800a204 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	2bff      	cmp	r3, #255	@ 0xff
 800a0b0:	d90e      	bls.n	800a0d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	22ff      	movs	r2, #255	@ 0xff
 800a0b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0bc:	b2da      	uxtb	r2, r3
 800a0be:	8979      	ldrh	r1, [r7, #10]
 800a0c0:	4b52      	ldr	r3, [pc, #328]	@ (800a20c <HAL_I2C_Mem_Read+0x22c>)
 800a0c2:	9300      	str	r3, [sp, #0]
 800a0c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a0c8:	68f8      	ldr	r0, [r7, #12]
 800a0ca:	f000 fb19 	bl	800a700 <I2C_TransferConfig>
 800a0ce:	e00f      	b.n	800a0f0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0de:	b2da      	uxtb	r2, r3
 800a0e0:	8979      	ldrh	r1, [r7, #10]
 800a0e2:	4b4a      	ldr	r3, [pc, #296]	@ (800a20c <HAL_I2C_Mem_Read+0x22c>)
 800a0e4:	9300      	str	r3, [sp, #0]
 800a0e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f000 fb08 	bl	800a700 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	9300      	str	r3, [sp, #0]
 800a0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	2104      	movs	r1, #4
 800a0fa:	68f8      	ldr	r0, [r7, #12]
 800a0fc:	f000 f964 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 800a100:	4603      	mov	r3, r0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d001      	beq.n	800a10a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	e07c      	b.n	800a204 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a114:	b2d2      	uxtb	r2, r2
 800a116:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a11c:	1c5a      	adds	r2, r3, #1
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a126:	3b01      	subs	r3, #1
 800a128:	b29a      	uxth	r2, r3
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a132:	b29b      	uxth	r3, r3
 800a134:	3b01      	subs	r3, #1
 800a136:	b29a      	uxth	r2, r3
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a140:	b29b      	uxth	r3, r3
 800a142:	2b00      	cmp	r3, #0
 800a144:	d034      	beq.n	800a1b0 <HAL_I2C_Mem_Read+0x1d0>
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d130      	bne.n	800a1b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a154:	2200      	movs	r2, #0
 800a156:	2180      	movs	r1, #128	@ 0x80
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f000 f935 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d001      	beq.n	800a168 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a164:	2301      	movs	r3, #1
 800a166:	e04d      	b.n	800a204 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	2bff      	cmp	r3, #255	@ 0xff
 800a170:	d90e      	bls.n	800a190 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	22ff      	movs	r2, #255	@ 0xff
 800a176:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a17c:	b2da      	uxtb	r2, r3
 800a17e:	8979      	ldrh	r1, [r7, #10]
 800a180:	2300      	movs	r3, #0
 800a182:	9300      	str	r3, [sp, #0]
 800a184:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a188:	68f8      	ldr	r0, [r7, #12]
 800a18a:	f000 fab9 	bl	800a700 <I2C_TransferConfig>
 800a18e:	e00f      	b.n	800a1b0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a194:	b29a      	uxth	r2, r3
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a19e:	b2da      	uxtb	r2, r3
 800a1a0:	8979      	ldrh	r1, [r7, #10]
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f000 faa8 	bl	800a700 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d19a      	bne.n	800a0f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a1ba:	697a      	ldr	r2, [r7, #20]
 800a1bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	f000 f982 	bl	800a4c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d001      	beq.n	800a1ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e01a      	b.n	800a204 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2220      	movs	r2, #32
 800a1d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	6859      	ldr	r1, [r3, #4]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	4b0b      	ldr	r3, [pc, #44]	@ (800a210 <HAL_I2C_Mem_Read+0x230>)
 800a1e2:	400b      	ands	r3, r1
 800a1e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2220      	movs	r2, #32
 800a1ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a1fe:	2300      	movs	r3, #0
 800a200:	e000      	b.n	800a204 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a202:	2302      	movs	r3, #2
  }
}
 800a204:	4618      	mov	r0, r3
 800a206:	3718      	adds	r7, #24
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	80002400 	.word	0x80002400
 800a210:	fe00e800 	.word	0xfe00e800

0800a214 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a222:	b2db      	uxtb	r3, r3
}
 800a224:	4618      	mov	r0, r3
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af02      	add	r7, sp, #8
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	4608      	mov	r0, r1
 800a23a:	4611      	mov	r1, r2
 800a23c:	461a      	mov	r2, r3
 800a23e:	4603      	mov	r3, r0
 800a240:	817b      	strh	r3, [r7, #10]
 800a242:	460b      	mov	r3, r1
 800a244:	813b      	strh	r3, [r7, #8]
 800a246:	4613      	mov	r3, r2
 800a248:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a24a:	88fb      	ldrh	r3, [r7, #6]
 800a24c:	b2da      	uxtb	r2, r3
 800a24e:	8979      	ldrh	r1, [r7, #10]
 800a250:	4b20      	ldr	r3, [pc, #128]	@ (800a2d4 <I2C_RequestMemoryWrite+0xa4>)
 800a252:	9300      	str	r3, [sp, #0]
 800a254:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f000 fa51 	bl	800a700 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a25e:	69fa      	ldr	r2, [r7, #28]
 800a260:	69b9      	ldr	r1, [r7, #24]
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f000 f8f0 	bl	800a448 <I2C_WaitOnTXISFlagUntilTimeout>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	e02c      	b.n	800a2cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a272:	88fb      	ldrh	r3, [r7, #6]
 800a274:	2b01      	cmp	r3, #1
 800a276:	d105      	bne.n	800a284 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a278:	893b      	ldrh	r3, [r7, #8]
 800a27a:	b2da      	uxtb	r2, r3
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	629a      	str	r2, [r3, #40]	@ 0x28
 800a282:	e015      	b.n	800a2b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a284:	893b      	ldrh	r3, [r7, #8]
 800a286:	0a1b      	lsrs	r3, r3, #8
 800a288:	b29b      	uxth	r3, r3
 800a28a:	b2da      	uxtb	r2, r3
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a292:	69fa      	ldr	r2, [r7, #28]
 800a294:	69b9      	ldr	r1, [r7, #24]
 800a296:	68f8      	ldr	r0, [r7, #12]
 800a298:	f000 f8d6 	bl	800a448 <I2C_WaitOnTXISFlagUntilTimeout>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d001      	beq.n	800a2a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e012      	b.n	800a2cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a2a6:	893b      	ldrh	r3, [r7, #8]
 800a2a8:	b2da      	uxtb	r2, r3
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	9300      	str	r3, [sp, #0]
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	2180      	movs	r1, #128	@ 0x80
 800a2ba:	68f8      	ldr	r0, [r7, #12]
 800a2bc:	f000 f884 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d001      	beq.n	800a2ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e000      	b.n	800a2cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a2ca:	2300      	movs	r3, #0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3710      	adds	r7, #16
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	80002000 	.word	0x80002000

0800a2d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af02      	add	r7, sp, #8
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	4608      	mov	r0, r1
 800a2e2:	4611      	mov	r1, r2
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	817b      	strh	r3, [r7, #10]
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	813b      	strh	r3, [r7, #8]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a2f2:	88fb      	ldrh	r3, [r7, #6]
 800a2f4:	b2da      	uxtb	r2, r3
 800a2f6:	8979      	ldrh	r1, [r7, #10]
 800a2f8:	4b20      	ldr	r3, [pc, #128]	@ (800a37c <I2C_RequestMemoryRead+0xa4>)
 800a2fa:	9300      	str	r3, [sp, #0]
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	68f8      	ldr	r0, [r7, #12]
 800a300:	f000 f9fe 	bl	800a700 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a304:	69fa      	ldr	r2, [r7, #28]
 800a306:	69b9      	ldr	r1, [r7, #24]
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f000 f89d 	bl	800a448 <I2C_WaitOnTXISFlagUntilTimeout>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d001      	beq.n	800a318 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	e02c      	b.n	800a372 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a318:	88fb      	ldrh	r3, [r7, #6]
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d105      	bne.n	800a32a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a31e:	893b      	ldrh	r3, [r7, #8]
 800a320:	b2da      	uxtb	r2, r3
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	629a      	str	r2, [r3, #40]	@ 0x28
 800a328:	e015      	b.n	800a356 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a32a:	893b      	ldrh	r3, [r7, #8]
 800a32c:	0a1b      	lsrs	r3, r3, #8
 800a32e:	b29b      	uxth	r3, r3
 800a330:	b2da      	uxtb	r2, r3
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a338:	69fa      	ldr	r2, [r7, #28]
 800a33a:	69b9      	ldr	r1, [r7, #24]
 800a33c:	68f8      	ldr	r0, [r7, #12]
 800a33e:	f000 f883 	bl	800a448 <I2C_WaitOnTXISFlagUntilTimeout>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d001      	beq.n	800a34c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	e012      	b.n	800a372 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a34c:	893b      	ldrh	r3, [r7, #8]
 800a34e:	b2da      	uxtb	r2, r3
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a356:	69fb      	ldr	r3, [r7, #28]
 800a358:	9300      	str	r3, [sp, #0]
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	2200      	movs	r2, #0
 800a35e:	2140      	movs	r1, #64	@ 0x40
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f000 f831 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d001      	beq.n	800a370 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a36c:	2301      	movs	r3, #1
 800a36e:	e000      	b.n	800a372 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	3710      	adds	r7, #16
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	80002000 	.word	0x80002000

0800a380 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	699b      	ldr	r3, [r3, #24]
 800a38e:	f003 0302 	and.w	r3, r3, #2
 800a392:	2b02      	cmp	r3, #2
 800a394:	d103      	bne.n	800a39e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2200      	movs	r2, #0
 800a39c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	699b      	ldr	r3, [r3, #24]
 800a3a4:	f003 0301 	and.w	r3, r3, #1
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d007      	beq.n	800a3bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	699a      	ldr	r2, [r3, #24]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f042 0201 	orr.w	r2, r2, #1
 800a3ba:	619a      	str	r2, [r3, #24]
  }
}
 800a3bc:	bf00      	nop
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	603b      	str	r3, [r7, #0]
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3d8:	e022      	b.n	800a420 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3e0:	d01e      	beq.n	800a420 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3e2:	f7fd fca1 	bl	8007d28 <HAL_GetTick>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	1ad3      	subs	r3, r2, r3
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d302      	bcc.n	800a3f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d113      	bne.n	800a420 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3fc:	f043 0220 	orr.w	r2, r3, #32
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2220      	movs	r2, #32
 800a408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e00f      	b.n	800a440 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	699a      	ldr	r2, [r3, #24]
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	4013      	ands	r3, r2
 800a42a:	68ba      	ldr	r2, [r7, #8]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	bf0c      	ite	eq
 800a430:	2301      	moveq	r3, #1
 800a432:	2300      	movne	r3, #0
 800a434:	b2db      	uxtb	r3, r3
 800a436:	461a      	mov	r2, r3
 800a438:	79fb      	ldrb	r3, [r7, #7]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d0cd      	beq.n	800a3da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a454:	e02c      	b.n	800a4b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	68b9      	ldr	r1, [r7, #8]
 800a45a:	68f8      	ldr	r0, [r7, #12]
 800a45c:	f000 f870 	bl	800a540 <I2C_IsErrorOccurred>
 800a460:	4603      	mov	r3, r0
 800a462:	2b00      	cmp	r3, #0
 800a464:	d001      	beq.n	800a46a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a466:	2301      	movs	r3, #1
 800a468:	e02a      	b.n	800a4c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a470:	d01e      	beq.n	800a4b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a472:	f7fd fc59 	bl	8007d28 <HAL_GetTick>
 800a476:	4602      	mov	r2, r0
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	1ad3      	subs	r3, r2, r3
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d302      	bcc.n	800a488 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d113      	bne.n	800a4b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a48c:	f043 0220 	orr.w	r2, r3, #32
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2220      	movs	r2, #32
 800a498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	e007      	b.n	800a4c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	699b      	ldr	r3, [r3, #24]
 800a4b6:	f003 0302 	and.w	r3, r3, #2
 800a4ba:	2b02      	cmp	r3, #2
 800a4bc:	d1cb      	bne.n	800a456 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3710      	adds	r7, #16
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a4d4:	e028      	b.n	800a528 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	68b9      	ldr	r1, [r7, #8]
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f000 f830 	bl	800a540 <I2C_IsErrorOccurred>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d001      	beq.n	800a4ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e026      	b.n	800a538 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4ea:	f7fd fc1d 	bl	8007d28 <HAL_GetTick>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	1ad3      	subs	r3, r2, r3
 800a4f4:	68ba      	ldr	r2, [r7, #8]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d302      	bcc.n	800a500 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d113      	bne.n	800a528 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a504:	f043 0220 	orr.w	r2, r3, #32
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2220      	movs	r2, #32
 800a510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2200      	movs	r2, #0
 800a518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800a524:	2301      	movs	r3, #1
 800a526:	e007      	b.n	800a538 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	699b      	ldr	r3, [r3, #24]
 800a52e:	f003 0320 	and.w	r3, r3, #32
 800a532:	2b20      	cmp	r3, #32
 800a534:	d1cf      	bne.n	800a4d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3710      	adds	r7, #16
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b08a      	sub	sp, #40	@ 0x28
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a54c:	2300      	movs	r3, #0
 800a54e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	699b      	ldr	r3, [r3, #24]
 800a558:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a55a:	2300      	movs	r3, #0
 800a55c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	f003 0310 	and.w	r3, r3, #16
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d068      	beq.n	800a63e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2210      	movs	r2, #16
 800a572:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a574:	e049      	b.n	800a60a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a57c:	d045      	beq.n	800a60a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a57e:	f7fd fbd3 	bl	8007d28 <HAL_GetTick>
 800a582:	4602      	mov	r2, r0
 800a584:	69fb      	ldr	r3, [r7, #28]
 800a586:	1ad3      	subs	r3, r2, r3
 800a588:	68ba      	ldr	r2, [r7, #8]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d302      	bcc.n	800a594 <I2C_IsErrorOccurred+0x54>
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d13a      	bne.n	800a60a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a59e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a5a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	699b      	ldr	r3, [r3, #24]
 800a5ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a5b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a5b6:	d121      	bne.n	800a5fc <I2C_IsErrorOccurred+0xbc>
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a5be:	d01d      	beq.n	800a5fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a5c0:	7cfb      	ldrb	r3, [r7, #19]
 800a5c2:	2b20      	cmp	r3, #32
 800a5c4:	d01a      	beq.n	800a5fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	685a      	ldr	r2, [r3, #4]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a5d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a5d6:	f7fd fba7 	bl	8007d28 <HAL_GetTick>
 800a5da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a5dc:	e00e      	b.n	800a5fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a5de:	f7fd fba3 	bl	8007d28 <HAL_GetTick>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	1ad3      	subs	r3, r2, r3
 800a5e8:	2b19      	cmp	r3, #25
 800a5ea:	d907      	bls.n	800a5fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800a5ec:	6a3b      	ldr	r3, [r7, #32]
 800a5ee:	f043 0320 	orr.w	r3, r3, #32
 800a5f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800a5fa:	e006      	b.n	800a60a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	699b      	ldr	r3, [r3, #24]
 800a602:	f003 0320 	and.w	r3, r3, #32
 800a606:	2b20      	cmp	r3, #32
 800a608:	d1e9      	bne.n	800a5de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	699b      	ldr	r3, [r3, #24]
 800a610:	f003 0320 	and.w	r3, r3, #32
 800a614:	2b20      	cmp	r3, #32
 800a616:	d003      	beq.n	800a620 <I2C_IsErrorOccurred+0xe0>
 800a618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d0aa      	beq.n	800a576 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a620:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a624:	2b00      	cmp	r3, #0
 800a626:	d103      	bne.n	800a630 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2220      	movs	r2, #32
 800a62e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a630:	6a3b      	ldr	r3, [r7, #32]
 800a632:	f043 0304 	orr.w	r3, r3, #4
 800a636:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a638:	2301      	movs	r3, #1
 800a63a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	699b      	ldr	r3, [r3, #24]
 800a644:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d00b      	beq.n	800a668 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a650:	6a3b      	ldr	r3, [r7, #32]
 800a652:	f043 0301 	orr.w	r3, r3, #1
 800a656:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a660:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a662:	2301      	movs	r3, #1
 800a664:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a668:	69bb      	ldr	r3, [r7, #24]
 800a66a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00b      	beq.n	800a68a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a672:	6a3b      	ldr	r3, [r7, #32]
 800a674:	f043 0308 	orr.w	r3, r3, #8
 800a678:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a682:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a690:	2b00      	cmp	r3, #0
 800a692:	d00b      	beq.n	800a6ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a694:	6a3b      	ldr	r3, [r7, #32]
 800a696:	f043 0302 	orr.w	r3, r3, #2
 800a69a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a6a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800a6ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d01c      	beq.n	800a6ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a6b4:	68f8      	ldr	r0, [r7, #12]
 800a6b6:	f7ff fe63 	bl	800a380 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	6859      	ldr	r1, [r3, #4]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	4b0d      	ldr	r3, [pc, #52]	@ (800a6fc <I2C_IsErrorOccurred+0x1bc>)
 800a6c6:	400b      	ands	r3, r1
 800a6c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6ce:	6a3b      	ldr	r3, [r7, #32]
 800a6d0:	431a      	orrs	r2, r3
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2220      	movs	r2, #32
 800a6da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800a6ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3728      	adds	r7, #40	@ 0x28
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	fe00e800 	.word	0xfe00e800

0800a700 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a700:	b480      	push	{r7}
 800a702:	b087      	sub	sp, #28
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	607b      	str	r3, [r7, #4]
 800a70a:	460b      	mov	r3, r1
 800a70c:	817b      	strh	r3, [r7, #10]
 800a70e:	4613      	mov	r3, r2
 800a710:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a712:	897b      	ldrh	r3, [r7, #10]
 800a714:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a718:	7a7b      	ldrb	r3, [r7, #9]
 800a71a:	041b      	lsls	r3, r3, #16
 800a71c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a720:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a726:	6a3b      	ldr	r3, [r7, #32]
 800a728:	4313      	orrs	r3, r2
 800a72a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a72e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	685a      	ldr	r2, [r3, #4]
 800a736:	6a3b      	ldr	r3, [r7, #32]
 800a738:	0d5b      	lsrs	r3, r3, #21
 800a73a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800a73e:	4b08      	ldr	r3, [pc, #32]	@ (800a760 <I2C_TransferConfig+0x60>)
 800a740:	430b      	orrs	r3, r1
 800a742:	43db      	mvns	r3, r3
 800a744:	ea02 0103 	and.w	r1, r2, r3
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	697a      	ldr	r2, [r7, #20]
 800a74e:	430a      	orrs	r2, r1
 800a750:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a752:	bf00      	nop
 800a754:	371c      	adds	r7, #28
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	03ff63ff 	.word	0x03ff63ff

0800a764 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d101      	bne.n	800a776 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a772:	2301      	movs	r3, #1
 800a774:	e0bf      	b.n	800a8f6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d106      	bne.n	800a790 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f7f8 fdd4 	bl	8003338 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2202      	movs	r2, #2
 800a794:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	699a      	ldr	r2, [r3, #24]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800a7a6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	6999      	ldr	r1, [r3, #24]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	685a      	ldr	r2, [r3, #4]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a7bc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	691b      	ldr	r3, [r3, #16]
 800a7c2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	430a      	orrs	r2, r1
 800a7ca:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	6899      	ldr	r1, [r3, #8]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	4b4a      	ldr	r3, [pc, #296]	@ (800a900 <HAL_LTDC_Init+0x19c>)
 800a7d8:	400b      	ands	r3, r1
 800a7da:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	695b      	ldr	r3, [r3, #20]
 800a7e0:	041b      	lsls	r3, r3, #16
 800a7e2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	6899      	ldr	r1, [r3, #8]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	699a      	ldr	r2, [r3, #24]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	431a      	orrs	r2, r3
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	430a      	orrs	r2, r1
 800a7f8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	68d9      	ldr	r1, [r3, #12]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	4b3e      	ldr	r3, [pc, #248]	@ (800a900 <HAL_LTDC_Init+0x19c>)
 800a806:	400b      	ands	r3, r1
 800a808:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	69db      	ldr	r3, [r3, #28]
 800a80e:	041b      	lsls	r3, r3, #16
 800a810:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	68d9      	ldr	r1, [r3, #12]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6a1a      	ldr	r2, [r3, #32]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	431a      	orrs	r2, r3
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	430a      	orrs	r2, r1
 800a826:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	6919      	ldr	r1, [r3, #16]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	4b33      	ldr	r3, [pc, #204]	@ (800a900 <HAL_LTDC_Init+0x19c>)
 800a834:	400b      	ands	r3, r1
 800a836:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a83c:	041b      	lsls	r3, r3, #16
 800a83e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	6919      	ldr	r1, [r3, #16]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	431a      	orrs	r2, r3
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	430a      	orrs	r2, r1
 800a854:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	6959      	ldr	r1, [r3, #20]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	4b27      	ldr	r3, [pc, #156]	@ (800a900 <HAL_LTDC_Init+0x19c>)
 800a862:	400b      	ands	r3, r1
 800a864:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a86a:	041b      	lsls	r3, r3, #16
 800a86c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	6959      	ldr	r1, [r3, #20]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	431a      	orrs	r2, r3
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	430a      	orrs	r2, r1
 800a882:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a88a:	021b      	lsls	r3, r3, #8
 800a88c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800a894:	041b      	lsls	r3, r3, #16
 800a896:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800a8a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a8ae:	68ba      	ldr	r2, [r7, #8]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800a8ba:	431a      	orrs	r2, r3
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	430a      	orrs	r2, r1
 800a8c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f042 0206 	orr.w	r2, r2, #6
 800a8d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	699a      	ldr	r2, [r3, #24]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f042 0201 	orr.w	r2, r2, #1
 800a8e2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3710      	adds	r7, #16
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	f000f800 	.word	0xf000f800

0800a904 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a912:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a91a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f003 0304 	and.w	r3, r3, #4
 800a922:	2b00      	cmp	r3, #0
 800a924:	d023      	beq.n	800a96e <HAL_LTDC_IRQHandler+0x6a>
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	f003 0304 	and.w	r3, r3, #4
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d01e      	beq.n	800a96e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f022 0204 	bic.w	r2, r2, #4
 800a93e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2204      	movs	r2, #4
 800a946:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a94e:	f043 0201 	orr.w	r2, r3, #1
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2204      	movs	r2, #4
 800a95c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 f86f 	bl	800aa4c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f003 0302 	and.w	r3, r3, #2
 800a974:	2b00      	cmp	r3, #0
 800a976:	d023      	beq.n	800a9c0 <HAL_LTDC_IRQHandler+0xbc>
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	f003 0302 	and.w	r3, r3, #2
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d01e      	beq.n	800a9c0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f022 0202 	bic.w	r2, r2, #2
 800a990:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2202      	movs	r2, #2
 800a998:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a9a0:	f043 0202 	orr.w	r2, r3, #2
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2204      	movs	r2, #4
 800a9ae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 f846 	bl	800aa4c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f003 0301 	and.w	r3, r3, #1
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d01b      	beq.n	800aa02 <HAL_LTDC_IRQHandler+0xfe>
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	f003 0301 	and.w	r3, r3, #1
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d016      	beq.n	800aa02 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f022 0201 	bic.w	r2, r2, #1
 800a9e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 f82f 	bl	800aa60 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f003 0308 	and.w	r3, r3, #8
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d01b      	beq.n	800aa44 <HAL_LTDC_IRQHandler+0x140>
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	f003 0308 	and.w	r3, r3, #8
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d016      	beq.n	800aa44 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f022 0208 	bic.w	r2, r2, #8
 800aa24:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2208      	movs	r2, #8
 800aa2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2201      	movs	r2, #1
 800aa32:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 f818 	bl	800aa74 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800aa44:	bf00      	nop
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800aa54:	bf00      	nop
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800aa68:	bf00      	nop
 800aa6a:	370c      	adds	r7, #12
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800aa7c:	bf00      	nop
 800aa7e:	370c      	adds	r7, #12
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800aa88:	b5b0      	push	{r4, r5, r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d101      	bne.n	800aaa2 <HAL_LTDC_ConfigLayer+0x1a>
 800aa9e:	2302      	movs	r3, #2
 800aaa0:	e02c      	b.n	800aafc <HAL_LTDC_ConfigLayer+0x74>
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2202      	movs	r2, #2
 800aaae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2134      	movs	r1, #52	@ 0x34
 800aab8:	fb01 f303 	mul.w	r3, r1, r3
 800aabc:	4413      	add	r3, r2
 800aabe:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	4614      	mov	r4, r2
 800aac6:	461d      	mov	r5, r3
 800aac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aaca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aacc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aad4:	682b      	ldr	r3, [r5, #0]
 800aad6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	68b9      	ldr	r1, [r7, #8]
 800aadc:	68f8      	ldr	r0, [r7, #12]
 800aade:	f000 f81f 	bl	800ab20 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2201      	movs	r2, #1
 800aae8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2201      	movs	r2, #1
 800aaee:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800aafa:	2300      	movs	r3, #0
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3710      	adds	r7, #16
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bdb0      	pop	{r4, r5, r7, pc}

0800ab04 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800ab12:	b2db      	uxtb	r3, r3
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b089      	sub	sp, #36	@ 0x24
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	685a      	ldr	r2, [r3, #4]
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	0c1b      	lsrs	r3, r3, #16
 800ab38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab3c:	4413      	add	r3, r2
 800ab3e:	041b      	lsls	r3, r3, #16
 800ab40:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	461a      	mov	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	01db      	lsls	r3, r3, #7
 800ab4c:	4413      	add	r3, r2
 800ab4e:	3384      	adds	r3, #132	@ 0x84
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	68fa      	ldr	r2, [r7, #12]
 800ab54:	6812      	ldr	r2, [r2, #0]
 800ab56:	4611      	mov	r1, r2
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	01d2      	lsls	r2, r2, #7
 800ab5c:	440a      	add	r2, r1
 800ab5e:	3284      	adds	r2, #132	@ 0x84
 800ab60:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800ab64:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	0c1b      	lsrs	r3, r3, #16
 800ab72:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ab76:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ab78:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	01db      	lsls	r3, r3, #7
 800ab84:	440b      	add	r3, r1
 800ab86:	3384      	adds	r3, #132	@ 0x84
 800ab88:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ab8e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	68da      	ldr	r2, [r3, #12]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	68db      	ldr	r3, [r3, #12]
 800ab9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ab9e:	4413      	add	r3, r2
 800aba0:	041b      	lsls	r3, r3, #16
 800aba2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	461a      	mov	r2, r3
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	01db      	lsls	r3, r3, #7
 800abae:	4413      	add	r3, r2
 800abb0:	3384      	adds	r3, #132	@ 0x84
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	68fa      	ldr	r2, [r7, #12]
 800abb6:	6812      	ldr	r2, [r2, #0]
 800abb8:	4611      	mov	r1, r2
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	01d2      	lsls	r2, r2, #7
 800abbe:	440a      	add	r2, r1
 800abc0:	3284      	adds	r2, #132	@ 0x84
 800abc2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800abc6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	689a      	ldr	r2, [r3, #8]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800abd6:	4413      	add	r3, r2
 800abd8:	1c5a      	adds	r2, r3, #1
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4619      	mov	r1, r3
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	01db      	lsls	r3, r3, #7
 800abe4:	440b      	add	r3, r1
 800abe6:	3384      	adds	r3, #132	@ 0x84
 800abe8:	4619      	mov	r1, r3
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	4313      	orrs	r3, r2
 800abee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	461a      	mov	r2, r3
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	01db      	lsls	r3, r3, #7
 800abfa:	4413      	add	r3, r2
 800abfc:	3384      	adds	r3, #132	@ 0x84
 800abfe:	691b      	ldr	r3, [r3, #16]
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	6812      	ldr	r2, [r2, #0]
 800ac04:	4611      	mov	r1, r2
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	01d2      	lsls	r2, r2, #7
 800ac0a:	440a      	add	r2, r1
 800ac0c:	3284      	adds	r2, #132	@ 0x84
 800ac0e:	f023 0307 	bic.w	r3, r3, #7
 800ac12:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	461a      	mov	r2, r3
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	01db      	lsls	r3, r3, #7
 800ac1e:	4413      	add	r3, r2
 800ac20:	3384      	adds	r3, #132	@ 0x84
 800ac22:	461a      	mov	r2, r3
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ac30:	021b      	lsls	r3, r3, #8
 800ac32:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800ac3a:	041b      	lsls	r3, r3, #16
 800ac3c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	699b      	ldr	r3, [r3, #24]
 800ac42:	061b      	lsls	r3, r3, #24
 800ac44:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	01db      	lsls	r3, r3, #7
 800ac50:	4413      	add	r3, r2
 800ac52:	3384      	adds	r3, #132	@ 0x84
 800ac54:	699b      	ldr	r3, [r3, #24]
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	01db      	lsls	r3, r3, #7
 800ac60:	4413      	add	r3, r2
 800ac62:	3384      	adds	r3, #132	@ 0x84
 800ac64:	461a      	mov	r2, r3
 800ac66:	2300      	movs	r3, #0
 800ac68:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ac70:	461a      	mov	r2, r3
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	431a      	orrs	r2, r3
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	431a      	orrs	r2, r3
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4619      	mov	r1, r3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	01db      	lsls	r3, r3, #7
 800ac84:	440b      	add	r3, r1
 800ac86:	3384      	adds	r3, #132	@ 0x84
 800ac88:	4619      	mov	r1, r3
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	461a      	mov	r2, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	01db      	lsls	r3, r3, #7
 800ac9a:	4413      	add	r3, r2
 800ac9c:	3384      	adds	r3, #132	@ 0x84
 800ac9e:	695b      	ldr	r3, [r3, #20]
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	6812      	ldr	r2, [r2, #0]
 800aca4:	4611      	mov	r1, r2
 800aca6:	687a      	ldr	r2, [r7, #4]
 800aca8:	01d2      	lsls	r2, r2, #7
 800acaa:	440a      	add	r2, r1
 800acac:	3284      	adds	r2, #132	@ 0x84
 800acae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800acb2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	461a      	mov	r2, r3
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	01db      	lsls	r3, r3, #7
 800acbe:	4413      	add	r3, r2
 800acc0:	3384      	adds	r3, #132	@ 0x84
 800acc2:	461a      	mov	r2, r3
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	695b      	ldr	r3, [r3, #20]
 800acc8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	461a      	mov	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	01db      	lsls	r3, r3, #7
 800acd4:	4413      	add	r3, r2
 800acd6:	3384      	adds	r3, #132	@ 0x84
 800acd8:	69da      	ldr	r2, [r3, #28]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4619      	mov	r1, r3
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	01db      	lsls	r3, r3, #7
 800ace4:	440b      	add	r3, r1
 800ace6:	3384      	adds	r3, #132	@ 0x84
 800ace8:	4619      	mov	r1, r3
 800acea:	4b58      	ldr	r3, [pc, #352]	@ (800ae4c <LTDC_SetConfig+0x32c>)
 800acec:	4013      	ands	r3, r2
 800acee:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	69da      	ldr	r2, [r3, #28]
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	6a1b      	ldr	r3, [r3, #32]
 800acf8:	68f9      	ldr	r1, [r7, #12]
 800acfa:	6809      	ldr	r1, [r1, #0]
 800acfc:	4608      	mov	r0, r1
 800acfe:	6879      	ldr	r1, [r7, #4]
 800ad00:	01c9      	lsls	r1, r1, #7
 800ad02:	4401      	add	r1, r0
 800ad04:	3184      	adds	r1, #132	@ 0x84
 800ad06:	4313      	orrs	r3, r2
 800ad08:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	461a      	mov	r2, r3
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	01db      	lsls	r3, r3, #7
 800ad14:	4413      	add	r3, r2
 800ad16:	3384      	adds	r3, #132	@ 0x84
 800ad18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	01db      	lsls	r3, r3, #7
 800ad24:	4413      	add	r3, r2
 800ad26:	3384      	adds	r3, #132	@ 0x84
 800ad28:	461a      	mov	r2, r3
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	461a      	mov	r2, r3
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	01db      	lsls	r3, r3, #7
 800ad38:	4413      	add	r3, r2
 800ad3a:	3384      	adds	r3, #132	@ 0x84
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad42:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d102      	bne.n	800ad52 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800ad4c:	2304      	movs	r3, #4
 800ad4e:	61fb      	str	r3, [r7, #28]
 800ad50:	e01b      	b.n	800ad8a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	691b      	ldr	r3, [r3, #16]
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d102      	bne.n	800ad60 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800ad5a:	2303      	movs	r3, #3
 800ad5c:	61fb      	str	r3, [r7, #28]
 800ad5e:	e014      	b.n	800ad8a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	691b      	ldr	r3, [r3, #16]
 800ad64:	2b04      	cmp	r3, #4
 800ad66:	d00b      	beq.n	800ad80 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	d007      	beq.n	800ad80 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ad74:	2b03      	cmp	r3, #3
 800ad76:	d003      	beq.n	800ad80 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800ad7c:	2b07      	cmp	r3, #7
 800ad7e:	d102      	bne.n	800ad86 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800ad80:	2302      	movs	r3, #2
 800ad82:	61fb      	str	r3, [r7, #28]
 800ad84:	e001      	b.n	800ad8a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800ad86:	2301      	movs	r3, #1
 800ad88:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	461a      	mov	r2, r3
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	01db      	lsls	r3, r3, #7
 800ad94:	4413      	add	r3, r2
 800ad96:	3384      	adds	r3, #132	@ 0x84
 800ad98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	6812      	ldr	r2, [r2, #0]
 800ad9e:	4611      	mov	r1, r2
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	01d2      	lsls	r2, r2, #7
 800ada4:	440a      	add	r2, r1
 800ada6:	3284      	adds	r2, #132	@ 0x84
 800ada8:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800adac:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adb2:	69fa      	ldr	r2, [r7, #28]
 800adb4:	fb02 f303 	mul.w	r3, r2, r3
 800adb8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	6859      	ldr	r1, [r3, #4]
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	1acb      	subs	r3, r1, r3
 800adc4:	69f9      	ldr	r1, [r7, #28]
 800adc6:	fb01 f303 	mul.w	r3, r1, r3
 800adca:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800adcc:	68f9      	ldr	r1, [r7, #12]
 800adce:	6809      	ldr	r1, [r1, #0]
 800add0:	4608      	mov	r0, r1
 800add2:	6879      	ldr	r1, [r7, #4]
 800add4:	01c9      	lsls	r1, r1, #7
 800add6:	4401      	add	r1, r0
 800add8:	3184      	adds	r1, #132	@ 0x84
 800adda:	4313      	orrs	r3, r2
 800addc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	461a      	mov	r2, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	01db      	lsls	r3, r3, #7
 800ade8:	4413      	add	r3, r2
 800adea:	3384      	adds	r3, #132	@ 0x84
 800adec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4619      	mov	r1, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	01db      	lsls	r3, r3, #7
 800adf8:	440b      	add	r3, r1
 800adfa:	3384      	adds	r3, #132	@ 0x84
 800adfc:	4619      	mov	r1, r3
 800adfe:	4b14      	ldr	r3, [pc, #80]	@ (800ae50 <LTDC_SetConfig+0x330>)
 800ae00:	4013      	ands	r3, r2
 800ae02:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	461a      	mov	r2, r3
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	01db      	lsls	r3, r3, #7
 800ae0e:	4413      	add	r3, r2
 800ae10:	3384      	adds	r3, #132	@ 0x84
 800ae12:	461a      	mov	r2, r3
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae18:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	461a      	mov	r2, r3
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	01db      	lsls	r3, r3, #7
 800ae24:	4413      	add	r3, r2
 800ae26:	3384      	adds	r3, #132	@ 0x84
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	6812      	ldr	r2, [r2, #0]
 800ae2e:	4611      	mov	r1, r2
 800ae30:	687a      	ldr	r2, [r7, #4]
 800ae32:	01d2      	lsls	r2, r2, #7
 800ae34:	440a      	add	r2, r1
 800ae36:	3284      	adds	r2, #132	@ 0x84
 800ae38:	f043 0301 	orr.w	r3, r3, #1
 800ae3c:	6013      	str	r3, [r2, #0]
}
 800ae3e:	bf00      	nop
 800ae40:	3724      	adds	r7, #36	@ 0x24
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop
 800ae4c:	fffff8f8 	.word	0xfffff8f8
 800ae50:	fffff800 	.word	0xfffff800

0800ae54 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ae54:	b480      	push	{r7}
 800ae56:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae58:	4b05      	ldr	r3, [pc, #20]	@ (800ae70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a04      	ldr	r2, [pc, #16]	@ (800ae70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ae5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ae62:	6013      	str	r3, [r2, #0]
}
 800ae64:	bf00      	nop
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr
 800ae6e:	bf00      	nop
 800ae70:	40007000 	.word	0x40007000

0800ae74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800ae7e:	4b23      	ldr	r3, [pc, #140]	@ (800af0c <HAL_PWREx_EnableOverDrive+0x98>)
 800ae80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae82:	4a22      	ldr	r2, [pc, #136]	@ (800af0c <HAL_PWREx_EnableOverDrive+0x98>)
 800ae84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae88:	6413      	str	r3, [r2, #64]	@ 0x40
 800ae8a:	4b20      	ldr	r3, [pc, #128]	@ (800af0c <HAL_PWREx_EnableOverDrive+0x98>)
 800ae8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ae92:	603b      	str	r3, [r7, #0]
 800ae94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800ae96:	4b1e      	ldr	r3, [pc, #120]	@ (800af10 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a1d      	ldr	r2, [pc, #116]	@ (800af10 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ae9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aea0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aea2:	f7fc ff41 	bl	8007d28 <HAL_GetTick>
 800aea6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800aea8:	e009      	b.n	800aebe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800aeaa:	f7fc ff3d 	bl	8007d28 <HAL_GetTick>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aeb8:	d901      	bls.n	800aebe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800aeba:	2303      	movs	r3, #3
 800aebc:	e022      	b.n	800af04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800aebe:	4b14      	ldr	r3, [pc, #80]	@ (800af10 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aec6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aeca:	d1ee      	bne.n	800aeaa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800aecc:	4b10      	ldr	r3, [pc, #64]	@ (800af10 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a0f      	ldr	r2, [pc, #60]	@ (800af10 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aed2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aed6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aed8:	f7fc ff26 	bl	8007d28 <HAL_GetTick>
 800aedc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800aede:	e009      	b.n	800aef4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800aee0:	f7fc ff22 	bl	8007d28 <HAL_GetTick>
 800aee4:	4602      	mov	r2, r0
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	1ad3      	subs	r3, r2, r3
 800aeea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aeee:	d901      	bls.n	800aef4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800aef0:	2303      	movs	r3, #3
 800aef2:	e007      	b.n	800af04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800aef4:	4b06      	ldr	r3, [pc, #24]	@ (800af10 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aefc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af00:	d1ee      	bne.n	800aee0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800af02:	2300      	movs	r3, #0
}
 800af04:	4618      	mov	r0, r3
 800af06:	3708      	adds	r7, #8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	40023800 	.word	0x40023800
 800af10:	40007000 	.word	0x40007000

0800af14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b086      	sub	sp, #24
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800af1c:	2300      	movs	r3, #0
 800af1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d101      	bne.n	800af2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800af26:	2301      	movs	r3, #1
 800af28:	e291      	b.n	800b44e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f003 0301 	and.w	r3, r3, #1
 800af32:	2b00      	cmp	r3, #0
 800af34:	f000 8087 	beq.w	800b046 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800af38:	4b96      	ldr	r3, [pc, #600]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	f003 030c 	and.w	r3, r3, #12
 800af40:	2b04      	cmp	r3, #4
 800af42:	d00c      	beq.n	800af5e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800af44:	4b93      	ldr	r3, [pc, #588]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	f003 030c 	and.w	r3, r3, #12
 800af4c:	2b08      	cmp	r3, #8
 800af4e:	d112      	bne.n	800af76 <HAL_RCC_OscConfig+0x62>
 800af50:	4b90      	ldr	r3, [pc, #576]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800af58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800af5c:	d10b      	bne.n	800af76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af5e:	4b8d      	ldr	r3, [pc, #564]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af66:	2b00      	cmp	r3, #0
 800af68:	d06c      	beq.n	800b044 <HAL_RCC_OscConfig+0x130>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d168      	bne.n	800b044 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	e26b      	b.n	800b44e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af7e:	d106      	bne.n	800af8e <HAL_RCC_OscConfig+0x7a>
 800af80:	4b84      	ldr	r3, [pc, #528]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a83      	ldr	r2, [pc, #524]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800af86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800af8a:	6013      	str	r3, [r2, #0]
 800af8c:	e02e      	b.n	800afec <HAL_RCC_OscConfig+0xd8>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10c      	bne.n	800afb0 <HAL_RCC_OscConfig+0x9c>
 800af96:	4b7f      	ldr	r3, [pc, #508]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4a7e      	ldr	r2, [pc, #504]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800af9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800afa0:	6013      	str	r3, [r2, #0]
 800afa2:	4b7c      	ldr	r3, [pc, #496]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4a7b      	ldr	r2, [pc, #492]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800afa8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800afac:	6013      	str	r3, [r2, #0]
 800afae:	e01d      	b.n	800afec <HAL_RCC_OscConfig+0xd8>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800afb8:	d10c      	bne.n	800afd4 <HAL_RCC_OscConfig+0xc0>
 800afba:	4b76      	ldr	r3, [pc, #472]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4a75      	ldr	r2, [pc, #468]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800afc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800afc4:	6013      	str	r3, [r2, #0]
 800afc6:	4b73      	ldr	r3, [pc, #460]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a72      	ldr	r2, [pc, #456]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800afcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800afd0:	6013      	str	r3, [r2, #0]
 800afd2:	e00b      	b.n	800afec <HAL_RCC_OscConfig+0xd8>
 800afd4:	4b6f      	ldr	r3, [pc, #444]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a6e      	ldr	r2, [pc, #440]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800afda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800afde:	6013      	str	r3, [r2, #0]
 800afe0:	4b6c      	ldr	r3, [pc, #432]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4a6b      	ldr	r2, [pc, #428]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800afe6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800afea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d013      	beq.n	800b01c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aff4:	f7fc fe98 	bl	8007d28 <HAL_GetTick>
 800aff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800affa:	e008      	b.n	800b00e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800affc:	f7fc fe94 	bl	8007d28 <HAL_GetTick>
 800b000:	4602      	mov	r2, r0
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	1ad3      	subs	r3, r2, r3
 800b006:	2b64      	cmp	r3, #100	@ 0x64
 800b008:	d901      	bls.n	800b00e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b00a:	2303      	movs	r3, #3
 800b00c:	e21f      	b.n	800b44e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b00e:	4b61      	ldr	r3, [pc, #388]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b016:	2b00      	cmp	r3, #0
 800b018:	d0f0      	beq.n	800affc <HAL_RCC_OscConfig+0xe8>
 800b01a:	e014      	b.n	800b046 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b01c:	f7fc fe84 	bl	8007d28 <HAL_GetTick>
 800b020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b022:	e008      	b.n	800b036 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b024:	f7fc fe80 	bl	8007d28 <HAL_GetTick>
 800b028:	4602      	mov	r2, r0
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	2b64      	cmp	r3, #100	@ 0x64
 800b030:	d901      	bls.n	800b036 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b032:	2303      	movs	r3, #3
 800b034:	e20b      	b.n	800b44e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b036:	4b57      	ldr	r3, [pc, #348]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d1f0      	bne.n	800b024 <HAL_RCC_OscConfig+0x110>
 800b042:	e000      	b.n	800b046 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f003 0302 	and.w	r3, r3, #2
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d069      	beq.n	800b126 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b052:	4b50      	ldr	r3, [pc, #320]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	f003 030c 	and.w	r3, r3, #12
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00b      	beq.n	800b076 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b05e:	4b4d      	ldr	r3, [pc, #308]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800b060:	689b      	ldr	r3, [r3, #8]
 800b062:	f003 030c 	and.w	r3, r3, #12
 800b066:	2b08      	cmp	r3, #8
 800b068:	d11c      	bne.n	800b0a4 <HAL_RCC_OscConfig+0x190>
 800b06a:	4b4a      	ldr	r3, [pc, #296]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b072:	2b00      	cmp	r3, #0
 800b074:	d116      	bne.n	800b0a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b076:	4b47      	ldr	r3, [pc, #284]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f003 0302 	and.w	r3, r3, #2
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d005      	beq.n	800b08e <HAL_RCC_OscConfig+0x17a>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	2b01      	cmp	r3, #1
 800b088:	d001      	beq.n	800b08e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b08a:	2301      	movs	r3, #1
 800b08c:	e1df      	b.n	800b44e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b08e:	4b41      	ldr	r3, [pc, #260]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	691b      	ldr	r3, [r3, #16]
 800b09a:	00db      	lsls	r3, r3, #3
 800b09c:	493d      	ldr	r1, [pc, #244]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b0a2:	e040      	b.n	800b126 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d023      	beq.n	800b0f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b0ac:	4b39      	ldr	r3, [pc, #228]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a38      	ldr	r2, [pc, #224]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800b0b2:	f043 0301 	orr.w	r3, r3, #1
 800b0b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0b8:	f7fc fe36 	bl	8007d28 <HAL_GetTick>
 800b0bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b0be:	e008      	b.n	800b0d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b0c0:	f7fc fe32 	bl	8007d28 <HAL_GetTick>
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	1ad3      	subs	r3, r2, r3
 800b0ca:	2b02      	cmp	r3, #2
 800b0cc:	d901      	bls.n	800b0d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b0ce:	2303      	movs	r3, #3
 800b0d0:	e1bd      	b.n	800b44e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b0d2:	4b30      	ldr	r3, [pc, #192]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f003 0302 	and.w	r3, r3, #2
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d0f0      	beq.n	800b0c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0de:	4b2d      	ldr	r3, [pc, #180]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	691b      	ldr	r3, [r3, #16]
 800b0ea:	00db      	lsls	r3, r3, #3
 800b0ec:	4929      	ldr	r1, [pc, #164]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	600b      	str	r3, [r1, #0]
 800b0f2:	e018      	b.n	800b126 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b0f4:	4b27      	ldr	r3, [pc, #156]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4a26      	ldr	r2, [pc, #152]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800b0fa:	f023 0301 	bic.w	r3, r3, #1
 800b0fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b100:	f7fc fe12 	bl	8007d28 <HAL_GetTick>
 800b104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b106:	e008      	b.n	800b11a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b108:	f7fc fe0e 	bl	8007d28 <HAL_GetTick>
 800b10c:	4602      	mov	r2, r0
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	1ad3      	subs	r3, r2, r3
 800b112:	2b02      	cmp	r3, #2
 800b114:	d901      	bls.n	800b11a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b116:	2303      	movs	r3, #3
 800b118:	e199      	b.n	800b44e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b11a:	4b1e      	ldr	r3, [pc, #120]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f003 0302 	and.w	r3, r3, #2
 800b122:	2b00      	cmp	r3, #0
 800b124:	d1f0      	bne.n	800b108 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f003 0308 	and.w	r3, r3, #8
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d038      	beq.n	800b1a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	695b      	ldr	r3, [r3, #20]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d019      	beq.n	800b16e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b13a:	4b16      	ldr	r3, [pc, #88]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800b13c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b13e:	4a15      	ldr	r2, [pc, #84]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800b140:	f043 0301 	orr.w	r3, r3, #1
 800b144:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b146:	f7fc fdef 	bl	8007d28 <HAL_GetTick>
 800b14a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b14c:	e008      	b.n	800b160 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b14e:	f7fc fdeb 	bl	8007d28 <HAL_GetTick>
 800b152:	4602      	mov	r2, r0
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	1ad3      	subs	r3, r2, r3
 800b158:	2b02      	cmp	r3, #2
 800b15a:	d901      	bls.n	800b160 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b15c:	2303      	movs	r3, #3
 800b15e:	e176      	b.n	800b44e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b160:	4b0c      	ldr	r3, [pc, #48]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800b162:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b164:	f003 0302 	and.w	r3, r3, #2
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d0f0      	beq.n	800b14e <HAL_RCC_OscConfig+0x23a>
 800b16c:	e01a      	b.n	800b1a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b16e:	4b09      	ldr	r3, [pc, #36]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800b170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b172:	4a08      	ldr	r2, [pc, #32]	@ (800b194 <HAL_RCC_OscConfig+0x280>)
 800b174:	f023 0301 	bic.w	r3, r3, #1
 800b178:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b17a:	f7fc fdd5 	bl	8007d28 <HAL_GetTick>
 800b17e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b180:	e00a      	b.n	800b198 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b182:	f7fc fdd1 	bl	8007d28 <HAL_GetTick>
 800b186:	4602      	mov	r2, r0
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	1ad3      	subs	r3, r2, r3
 800b18c:	2b02      	cmp	r3, #2
 800b18e:	d903      	bls.n	800b198 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b190:	2303      	movs	r3, #3
 800b192:	e15c      	b.n	800b44e <HAL_RCC_OscConfig+0x53a>
 800b194:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b198:	4b91      	ldr	r3, [pc, #580]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b19a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b19c:	f003 0302 	and.w	r3, r3, #2
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d1ee      	bne.n	800b182 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f003 0304 	and.w	r3, r3, #4
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	f000 80a4 	beq.w	800b2fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b1b2:	4b8b      	ldr	r3, [pc, #556]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b1b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d10d      	bne.n	800b1da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b1be:	4b88      	ldr	r3, [pc, #544]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b1c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1c2:	4a87      	ldr	r2, [pc, #540]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b1c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b1c8:	6413      	str	r3, [r2, #64]	@ 0x40
 800b1ca:	4b85      	ldr	r3, [pc, #532]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b1cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b1d2:	60bb      	str	r3, [r7, #8]
 800b1d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1da:	4b82      	ldr	r3, [pc, #520]	@ (800b3e4 <HAL_RCC_OscConfig+0x4d0>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d118      	bne.n	800b218 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b1e6:	4b7f      	ldr	r3, [pc, #508]	@ (800b3e4 <HAL_RCC_OscConfig+0x4d0>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a7e      	ldr	r2, [pc, #504]	@ (800b3e4 <HAL_RCC_OscConfig+0x4d0>)
 800b1ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b1f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b1f2:	f7fc fd99 	bl	8007d28 <HAL_GetTick>
 800b1f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1f8:	e008      	b.n	800b20c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1fa:	f7fc fd95 	bl	8007d28 <HAL_GetTick>
 800b1fe:	4602      	mov	r2, r0
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	1ad3      	subs	r3, r2, r3
 800b204:	2b64      	cmp	r3, #100	@ 0x64
 800b206:	d901      	bls.n	800b20c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b208:	2303      	movs	r3, #3
 800b20a:	e120      	b.n	800b44e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b20c:	4b75      	ldr	r3, [pc, #468]	@ (800b3e4 <HAL_RCC_OscConfig+0x4d0>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b214:	2b00      	cmp	r3, #0
 800b216:	d0f0      	beq.n	800b1fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d106      	bne.n	800b22e <HAL_RCC_OscConfig+0x31a>
 800b220:	4b6f      	ldr	r3, [pc, #444]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b224:	4a6e      	ldr	r2, [pc, #440]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b226:	f043 0301 	orr.w	r3, r3, #1
 800b22a:	6713      	str	r3, [r2, #112]	@ 0x70
 800b22c:	e02d      	b.n	800b28a <HAL_RCC_OscConfig+0x376>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d10c      	bne.n	800b250 <HAL_RCC_OscConfig+0x33c>
 800b236:	4b6a      	ldr	r3, [pc, #424]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b23a:	4a69      	ldr	r2, [pc, #420]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b23c:	f023 0301 	bic.w	r3, r3, #1
 800b240:	6713      	str	r3, [r2, #112]	@ 0x70
 800b242:	4b67      	ldr	r3, [pc, #412]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b246:	4a66      	ldr	r2, [pc, #408]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b248:	f023 0304 	bic.w	r3, r3, #4
 800b24c:	6713      	str	r3, [r2, #112]	@ 0x70
 800b24e:	e01c      	b.n	800b28a <HAL_RCC_OscConfig+0x376>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	2b05      	cmp	r3, #5
 800b256:	d10c      	bne.n	800b272 <HAL_RCC_OscConfig+0x35e>
 800b258:	4b61      	ldr	r3, [pc, #388]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b25a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b25c:	4a60      	ldr	r2, [pc, #384]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b25e:	f043 0304 	orr.w	r3, r3, #4
 800b262:	6713      	str	r3, [r2, #112]	@ 0x70
 800b264:	4b5e      	ldr	r3, [pc, #376]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b268:	4a5d      	ldr	r2, [pc, #372]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b26a:	f043 0301 	orr.w	r3, r3, #1
 800b26e:	6713      	str	r3, [r2, #112]	@ 0x70
 800b270:	e00b      	b.n	800b28a <HAL_RCC_OscConfig+0x376>
 800b272:	4b5b      	ldr	r3, [pc, #364]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b276:	4a5a      	ldr	r2, [pc, #360]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b278:	f023 0301 	bic.w	r3, r3, #1
 800b27c:	6713      	str	r3, [r2, #112]	@ 0x70
 800b27e:	4b58      	ldr	r3, [pc, #352]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b282:	4a57      	ldr	r2, [pc, #348]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b284:	f023 0304 	bic.w	r3, r3, #4
 800b288:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d015      	beq.n	800b2be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b292:	f7fc fd49 	bl	8007d28 <HAL_GetTick>
 800b296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b298:	e00a      	b.n	800b2b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b29a:	f7fc fd45 	bl	8007d28 <HAL_GetTick>
 800b29e:	4602      	mov	r2, r0
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	1ad3      	subs	r3, r2, r3
 800b2a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d901      	bls.n	800b2b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b2ac:	2303      	movs	r3, #3
 800b2ae:	e0ce      	b.n	800b44e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b2b0:	4b4b      	ldr	r3, [pc, #300]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b2b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2b4:	f003 0302 	and.w	r3, r3, #2
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d0ee      	beq.n	800b29a <HAL_RCC_OscConfig+0x386>
 800b2bc:	e014      	b.n	800b2e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2be:	f7fc fd33 	bl	8007d28 <HAL_GetTick>
 800b2c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b2c4:	e00a      	b.n	800b2dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2c6:	f7fc fd2f 	bl	8007d28 <HAL_GetTick>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	1ad3      	subs	r3, r2, r3
 800b2d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d901      	bls.n	800b2dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b2d8:	2303      	movs	r3, #3
 800b2da:	e0b8      	b.n	800b44e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b2dc:	4b40      	ldr	r3, [pc, #256]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b2de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2e0:	f003 0302 	and.w	r3, r3, #2
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d1ee      	bne.n	800b2c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b2e8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d105      	bne.n	800b2fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b2ee:	4b3c      	ldr	r3, [pc, #240]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b2f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2f2:	4a3b      	ldr	r2, [pc, #236]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b2f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b2f8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	699b      	ldr	r3, [r3, #24]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f000 80a4 	beq.w	800b44c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b304:	4b36      	ldr	r3, [pc, #216]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	f003 030c 	and.w	r3, r3, #12
 800b30c:	2b08      	cmp	r3, #8
 800b30e:	d06b      	beq.n	800b3e8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	699b      	ldr	r3, [r3, #24]
 800b314:	2b02      	cmp	r3, #2
 800b316:	d149      	bne.n	800b3ac <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b318:	4b31      	ldr	r3, [pc, #196]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a30      	ldr	r2, [pc, #192]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b31e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b324:	f7fc fd00 	bl	8007d28 <HAL_GetTick>
 800b328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b32a:	e008      	b.n	800b33e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b32c:	f7fc fcfc 	bl	8007d28 <HAL_GetTick>
 800b330:	4602      	mov	r2, r0
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	1ad3      	subs	r3, r2, r3
 800b336:	2b02      	cmp	r3, #2
 800b338:	d901      	bls.n	800b33e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b33a:	2303      	movs	r3, #3
 800b33c:	e087      	b.n	800b44e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b33e:	4b28      	ldr	r3, [pc, #160]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b346:	2b00      	cmp	r3, #0
 800b348:	d1f0      	bne.n	800b32c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	69da      	ldr	r2, [r3, #28]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6a1b      	ldr	r3, [r3, #32]
 800b352:	431a      	orrs	r2, r3
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b358:	019b      	lsls	r3, r3, #6
 800b35a:	431a      	orrs	r2, r3
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b360:	085b      	lsrs	r3, r3, #1
 800b362:	3b01      	subs	r3, #1
 800b364:	041b      	lsls	r3, r3, #16
 800b366:	431a      	orrs	r2, r3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b36c:	061b      	lsls	r3, r3, #24
 800b36e:	4313      	orrs	r3, r2
 800b370:	4a1b      	ldr	r2, [pc, #108]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b372:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b376:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b378:	4b19      	ldr	r3, [pc, #100]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a18      	ldr	r2, [pc, #96]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b37e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b384:	f7fc fcd0 	bl	8007d28 <HAL_GetTick>
 800b388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b38a:	e008      	b.n	800b39e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b38c:	f7fc fccc 	bl	8007d28 <HAL_GetTick>
 800b390:	4602      	mov	r2, r0
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	2b02      	cmp	r3, #2
 800b398:	d901      	bls.n	800b39e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800b39a:	2303      	movs	r3, #3
 800b39c:	e057      	b.n	800b44e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b39e:	4b10      	ldr	r3, [pc, #64]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d0f0      	beq.n	800b38c <HAL_RCC_OscConfig+0x478>
 800b3aa:	e04f      	b.n	800b44c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b3ac:	4b0c      	ldr	r3, [pc, #48]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a0b      	ldr	r2, [pc, #44]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b3b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b3b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3b8:	f7fc fcb6 	bl	8007d28 <HAL_GetTick>
 800b3bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b3be:	e008      	b.n	800b3d2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b3c0:	f7fc fcb2 	bl	8007d28 <HAL_GetTick>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	1ad3      	subs	r3, r2, r3
 800b3ca:	2b02      	cmp	r3, #2
 800b3cc:	d901      	bls.n	800b3d2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800b3ce:	2303      	movs	r3, #3
 800b3d0:	e03d      	b.n	800b44e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b3d2:	4b03      	ldr	r3, [pc, #12]	@ (800b3e0 <HAL_RCC_OscConfig+0x4cc>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1f0      	bne.n	800b3c0 <HAL_RCC_OscConfig+0x4ac>
 800b3de:	e035      	b.n	800b44c <HAL_RCC_OscConfig+0x538>
 800b3e0:	40023800 	.word	0x40023800
 800b3e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b3e8:	4b1b      	ldr	r3, [pc, #108]	@ (800b458 <HAL_RCC_OscConfig+0x544>)
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	699b      	ldr	r3, [r3, #24]
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d028      	beq.n	800b448 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b400:	429a      	cmp	r2, r3
 800b402:	d121      	bne.n	800b448 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b40e:	429a      	cmp	r2, r3
 800b410:	d11a      	bne.n	800b448 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b412:	68fa      	ldr	r2, [r7, #12]
 800b414:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b418:	4013      	ands	r3, r2
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b41e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b420:	4293      	cmp	r3, r2
 800b422:	d111      	bne.n	800b448 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b42e:	085b      	lsrs	r3, r3, #1
 800b430:	3b01      	subs	r3, #1
 800b432:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b434:	429a      	cmp	r2, r3
 800b436:	d107      	bne.n	800b448 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b442:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b444:	429a      	cmp	r2, r3
 800b446:	d001      	beq.n	800b44c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800b448:	2301      	movs	r3, #1
 800b44a:	e000      	b.n	800b44e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3718      	adds	r7, #24
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	40023800 	.word	0x40023800

0800b45c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b084      	sub	sp, #16
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b466:	2300      	movs	r3, #0
 800b468:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d101      	bne.n	800b474 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b470:	2301      	movs	r3, #1
 800b472:	e0d0      	b.n	800b616 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b474:	4b6a      	ldr	r3, [pc, #424]	@ (800b620 <HAL_RCC_ClockConfig+0x1c4>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f003 030f 	and.w	r3, r3, #15
 800b47c:	683a      	ldr	r2, [r7, #0]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d910      	bls.n	800b4a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b482:	4b67      	ldr	r3, [pc, #412]	@ (800b620 <HAL_RCC_ClockConfig+0x1c4>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f023 020f 	bic.w	r2, r3, #15
 800b48a:	4965      	ldr	r1, [pc, #404]	@ (800b620 <HAL_RCC_ClockConfig+0x1c4>)
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	4313      	orrs	r3, r2
 800b490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b492:	4b63      	ldr	r3, [pc, #396]	@ (800b620 <HAL_RCC_ClockConfig+0x1c4>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f003 030f 	and.w	r3, r3, #15
 800b49a:	683a      	ldr	r2, [r7, #0]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d001      	beq.n	800b4a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e0b8      	b.n	800b616 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f003 0302 	and.w	r3, r3, #2
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d020      	beq.n	800b4f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f003 0304 	and.w	r3, r3, #4
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d005      	beq.n	800b4c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b4bc:	4b59      	ldr	r3, [pc, #356]	@ (800b624 <HAL_RCC_ClockConfig+0x1c8>)
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	4a58      	ldr	r2, [pc, #352]	@ (800b624 <HAL_RCC_ClockConfig+0x1c8>)
 800b4c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b4c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f003 0308 	and.w	r3, r3, #8
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d005      	beq.n	800b4e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b4d4:	4b53      	ldr	r3, [pc, #332]	@ (800b624 <HAL_RCC_ClockConfig+0x1c8>)
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	4a52      	ldr	r2, [pc, #328]	@ (800b624 <HAL_RCC_ClockConfig+0x1c8>)
 800b4da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b4de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b4e0:	4b50      	ldr	r3, [pc, #320]	@ (800b624 <HAL_RCC_ClockConfig+0x1c8>)
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	494d      	ldr	r1, [pc, #308]	@ (800b624 <HAL_RCC_ClockConfig+0x1c8>)
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f003 0301 	and.w	r3, r3, #1
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d040      	beq.n	800b580 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	2b01      	cmp	r3, #1
 800b504:	d107      	bne.n	800b516 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b506:	4b47      	ldr	r3, [pc, #284]	@ (800b624 <HAL_RCC_ClockConfig+0x1c8>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d115      	bne.n	800b53e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b512:	2301      	movs	r3, #1
 800b514:	e07f      	b.n	800b616 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	2b02      	cmp	r3, #2
 800b51c:	d107      	bne.n	800b52e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b51e:	4b41      	ldr	r3, [pc, #260]	@ (800b624 <HAL_RCC_ClockConfig+0x1c8>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b526:	2b00      	cmp	r3, #0
 800b528:	d109      	bne.n	800b53e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b52a:	2301      	movs	r3, #1
 800b52c:	e073      	b.n	800b616 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b52e:	4b3d      	ldr	r3, [pc, #244]	@ (800b624 <HAL_RCC_ClockConfig+0x1c8>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f003 0302 	and.w	r3, r3, #2
 800b536:	2b00      	cmp	r3, #0
 800b538:	d101      	bne.n	800b53e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b53a:	2301      	movs	r3, #1
 800b53c:	e06b      	b.n	800b616 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b53e:	4b39      	ldr	r3, [pc, #228]	@ (800b624 <HAL_RCC_ClockConfig+0x1c8>)
 800b540:	689b      	ldr	r3, [r3, #8]
 800b542:	f023 0203 	bic.w	r2, r3, #3
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	4936      	ldr	r1, [pc, #216]	@ (800b624 <HAL_RCC_ClockConfig+0x1c8>)
 800b54c:	4313      	orrs	r3, r2
 800b54e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b550:	f7fc fbea 	bl	8007d28 <HAL_GetTick>
 800b554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b556:	e00a      	b.n	800b56e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b558:	f7fc fbe6 	bl	8007d28 <HAL_GetTick>
 800b55c:	4602      	mov	r2, r0
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	1ad3      	subs	r3, r2, r3
 800b562:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b566:	4293      	cmp	r3, r2
 800b568:	d901      	bls.n	800b56e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b56a:	2303      	movs	r3, #3
 800b56c:	e053      	b.n	800b616 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b56e:	4b2d      	ldr	r3, [pc, #180]	@ (800b624 <HAL_RCC_ClockConfig+0x1c8>)
 800b570:	689b      	ldr	r3, [r3, #8]
 800b572:	f003 020c 	and.w	r2, r3, #12
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	009b      	lsls	r3, r3, #2
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d1eb      	bne.n	800b558 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b580:	4b27      	ldr	r3, [pc, #156]	@ (800b620 <HAL_RCC_ClockConfig+0x1c4>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f003 030f 	and.w	r3, r3, #15
 800b588:	683a      	ldr	r2, [r7, #0]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d210      	bcs.n	800b5b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b58e:	4b24      	ldr	r3, [pc, #144]	@ (800b620 <HAL_RCC_ClockConfig+0x1c4>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f023 020f 	bic.w	r2, r3, #15
 800b596:	4922      	ldr	r1, [pc, #136]	@ (800b620 <HAL_RCC_ClockConfig+0x1c4>)
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	4313      	orrs	r3, r2
 800b59c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b59e:	4b20      	ldr	r3, [pc, #128]	@ (800b620 <HAL_RCC_ClockConfig+0x1c4>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f003 030f 	and.w	r3, r3, #15
 800b5a6:	683a      	ldr	r2, [r7, #0]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d001      	beq.n	800b5b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e032      	b.n	800b616 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f003 0304 	and.w	r3, r3, #4
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d008      	beq.n	800b5ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b5bc:	4b19      	ldr	r3, [pc, #100]	@ (800b624 <HAL_RCC_ClockConfig+0x1c8>)
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	4916      	ldr	r1, [pc, #88]	@ (800b624 <HAL_RCC_ClockConfig+0x1c8>)
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f003 0308 	and.w	r3, r3, #8
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d009      	beq.n	800b5ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b5da:	4b12      	ldr	r3, [pc, #72]	@ (800b624 <HAL_RCC_ClockConfig+0x1c8>)
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	691b      	ldr	r3, [r3, #16]
 800b5e6:	00db      	lsls	r3, r3, #3
 800b5e8:	490e      	ldr	r1, [pc, #56]	@ (800b624 <HAL_RCC_ClockConfig+0x1c8>)
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b5ee:	f000 f821 	bl	800b634 <HAL_RCC_GetSysClockFreq>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	4b0b      	ldr	r3, [pc, #44]	@ (800b624 <HAL_RCC_ClockConfig+0x1c8>)
 800b5f6:	689b      	ldr	r3, [r3, #8]
 800b5f8:	091b      	lsrs	r3, r3, #4
 800b5fa:	f003 030f 	and.w	r3, r3, #15
 800b5fe:	490a      	ldr	r1, [pc, #40]	@ (800b628 <HAL_RCC_ClockConfig+0x1cc>)
 800b600:	5ccb      	ldrb	r3, [r1, r3]
 800b602:	fa22 f303 	lsr.w	r3, r2, r3
 800b606:	4a09      	ldr	r2, [pc, #36]	@ (800b62c <HAL_RCC_ClockConfig+0x1d0>)
 800b608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b60a:	4b09      	ldr	r3, [pc, #36]	@ (800b630 <HAL_RCC_ClockConfig+0x1d4>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4618      	mov	r0, r3
 800b610:	f7fa fc6e 	bl	8005ef0 <HAL_InitTick>

  return HAL_OK;
 800b614:	2300      	movs	r3, #0
}
 800b616:	4618      	mov	r0, r3
 800b618:	3710      	adds	r7, #16
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	40023c00 	.word	0x40023c00
 800b624:	40023800 	.word	0x40023800
 800b628:	08024cac 	.word	0x08024cac
 800b62c:	2000004c 	.word	0x2000004c
 800b630:	2000008c 	.word	0x2000008c

0800b634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b638:	b090      	sub	sp, #64	@ 0x40
 800b63a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b63c:	2300      	movs	r3, #0
 800b63e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b640:	2300      	movs	r3, #0
 800b642:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b644:	2300      	movs	r3, #0
 800b646:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800b648:	2300      	movs	r3, #0
 800b64a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b64c:	4b59      	ldr	r3, [pc, #356]	@ (800b7b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	f003 030c 	and.w	r3, r3, #12
 800b654:	2b08      	cmp	r3, #8
 800b656:	d00d      	beq.n	800b674 <HAL_RCC_GetSysClockFreq+0x40>
 800b658:	2b08      	cmp	r3, #8
 800b65a:	f200 80a1 	bhi.w	800b7a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d002      	beq.n	800b668 <HAL_RCC_GetSysClockFreq+0x34>
 800b662:	2b04      	cmp	r3, #4
 800b664:	d003      	beq.n	800b66e <HAL_RCC_GetSysClockFreq+0x3a>
 800b666:	e09b      	b.n	800b7a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b668:	4b53      	ldr	r3, [pc, #332]	@ (800b7b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800b66a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b66c:	e09b      	b.n	800b7a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b66e:	4b53      	ldr	r3, [pc, #332]	@ (800b7bc <HAL_RCC_GetSysClockFreq+0x188>)
 800b670:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b672:	e098      	b.n	800b7a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b674:	4b4f      	ldr	r3, [pc, #316]	@ (800b7b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b67c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b67e:	4b4d      	ldr	r3, [pc, #308]	@ (800b7b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b686:	2b00      	cmp	r3, #0
 800b688:	d028      	beq.n	800b6dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b68a:	4b4a      	ldr	r3, [pc, #296]	@ (800b7b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	099b      	lsrs	r3, r3, #6
 800b690:	2200      	movs	r2, #0
 800b692:	623b      	str	r3, [r7, #32]
 800b694:	627a      	str	r2, [r7, #36]	@ 0x24
 800b696:	6a3b      	ldr	r3, [r7, #32]
 800b698:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800b69c:	2100      	movs	r1, #0
 800b69e:	4b47      	ldr	r3, [pc, #284]	@ (800b7bc <HAL_RCC_GetSysClockFreq+0x188>)
 800b6a0:	fb03 f201 	mul.w	r2, r3, r1
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	fb00 f303 	mul.w	r3, r0, r3
 800b6aa:	4413      	add	r3, r2
 800b6ac:	4a43      	ldr	r2, [pc, #268]	@ (800b7bc <HAL_RCC_GetSysClockFreq+0x188>)
 800b6ae:	fba0 1202 	umull	r1, r2, r0, r2
 800b6b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b6b4:	460a      	mov	r2, r1
 800b6b6:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b6b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6ba:	4413      	add	r3, r2
 800b6bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b6be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	61bb      	str	r3, [r7, #24]
 800b6c4:	61fa      	str	r2, [r7, #28]
 800b6c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b6ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800b6ce:	f7f5 f9dd 	bl	8000a8c <__aeabi_uldivmod>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6da:	e053      	b.n	800b784 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b6dc:	4b35      	ldr	r3, [pc, #212]	@ (800b7b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	099b      	lsrs	r3, r3, #6
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	613b      	str	r3, [r7, #16]
 800b6e6:	617a      	str	r2, [r7, #20]
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800b6ee:	f04f 0b00 	mov.w	fp, #0
 800b6f2:	4652      	mov	r2, sl
 800b6f4:	465b      	mov	r3, fp
 800b6f6:	f04f 0000 	mov.w	r0, #0
 800b6fa:	f04f 0100 	mov.w	r1, #0
 800b6fe:	0159      	lsls	r1, r3, #5
 800b700:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b704:	0150      	lsls	r0, r2, #5
 800b706:	4602      	mov	r2, r0
 800b708:	460b      	mov	r3, r1
 800b70a:	ebb2 080a 	subs.w	r8, r2, sl
 800b70e:	eb63 090b 	sbc.w	r9, r3, fp
 800b712:	f04f 0200 	mov.w	r2, #0
 800b716:	f04f 0300 	mov.w	r3, #0
 800b71a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800b71e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800b722:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800b726:	ebb2 0408 	subs.w	r4, r2, r8
 800b72a:	eb63 0509 	sbc.w	r5, r3, r9
 800b72e:	f04f 0200 	mov.w	r2, #0
 800b732:	f04f 0300 	mov.w	r3, #0
 800b736:	00eb      	lsls	r3, r5, #3
 800b738:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b73c:	00e2      	lsls	r2, r4, #3
 800b73e:	4614      	mov	r4, r2
 800b740:	461d      	mov	r5, r3
 800b742:	eb14 030a 	adds.w	r3, r4, sl
 800b746:	603b      	str	r3, [r7, #0]
 800b748:	eb45 030b 	adc.w	r3, r5, fp
 800b74c:	607b      	str	r3, [r7, #4]
 800b74e:	f04f 0200 	mov.w	r2, #0
 800b752:	f04f 0300 	mov.w	r3, #0
 800b756:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b75a:	4629      	mov	r1, r5
 800b75c:	028b      	lsls	r3, r1, #10
 800b75e:	4621      	mov	r1, r4
 800b760:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b764:	4621      	mov	r1, r4
 800b766:	028a      	lsls	r2, r1, #10
 800b768:	4610      	mov	r0, r2
 800b76a:	4619      	mov	r1, r3
 800b76c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b76e:	2200      	movs	r2, #0
 800b770:	60bb      	str	r3, [r7, #8]
 800b772:	60fa      	str	r2, [r7, #12]
 800b774:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b778:	f7f5 f988 	bl	8000a8c <__aeabi_uldivmod>
 800b77c:	4602      	mov	r2, r0
 800b77e:	460b      	mov	r3, r1
 800b780:	4613      	mov	r3, r2
 800b782:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b784:	4b0b      	ldr	r3, [pc, #44]	@ (800b7b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	0c1b      	lsrs	r3, r3, #16
 800b78a:	f003 0303 	and.w	r3, r3, #3
 800b78e:	3301      	adds	r3, #1
 800b790:	005b      	lsls	r3, r3, #1
 800b792:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800b794:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b798:	fbb2 f3f3 	udiv	r3, r2, r3
 800b79c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b79e:	e002      	b.n	800b7a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b7a0:	4b05      	ldr	r3, [pc, #20]	@ (800b7b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800b7a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b7a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b7a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3740      	adds	r7, #64	@ 0x40
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b7b2:	bf00      	nop
 800b7b4:	40023800 	.word	0x40023800
 800b7b8:	00f42400 	.word	0x00f42400
 800b7bc:	017d7840 	.word	0x017d7840

0800b7c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b7c4:	4b03      	ldr	r3, [pc, #12]	@ (800b7d4 <HAL_RCC_GetHCLKFreq+0x14>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr
 800b7d2:	bf00      	nop
 800b7d4:	2000004c 	.word	0x2000004c

0800b7d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b7dc:	f7ff fff0 	bl	800b7c0 <HAL_RCC_GetHCLKFreq>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	4b05      	ldr	r3, [pc, #20]	@ (800b7f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b7e4:	689b      	ldr	r3, [r3, #8]
 800b7e6:	0a9b      	lsrs	r3, r3, #10
 800b7e8:	f003 0307 	and.w	r3, r3, #7
 800b7ec:	4903      	ldr	r1, [pc, #12]	@ (800b7fc <HAL_RCC_GetPCLK1Freq+0x24>)
 800b7ee:	5ccb      	ldrb	r3, [r1, r3]
 800b7f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	bd80      	pop	{r7, pc}
 800b7f8:	40023800 	.word	0x40023800
 800b7fc:	08024cbc 	.word	0x08024cbc

0800b800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b804:	f7ff ffdc 	bl	800b7c0 <HAL_RCC_GetHCLKFreq>
 800b808:	4602      	mov	r2, r0
 800b80a:	4b05      	ldr	r3, [pc, #20]	@ (800b820 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	0b5b      	lsrs	r3, r3, #13
 800b810:	f003 0307 	and.w	r3, r3, #7
 800b814:	4903      	ldr	r1, [pc, #12]	@ (800b824 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b816:	5ccb      	ldrb	r3, [r1, r3]
 800b818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	bd80      	pop	{r7, pc}
 800b820:	40023800 	.word	0x40023800
 800b824:	08024cbc 	.word	0x08024cbc

0800b828 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	220f      	movs	r2, #15
 800b836:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b838:	4b12      	ldr	r3, [pc, #72]	@ (800b884 <HAL_RCC_GetClockConfig+0x5c>)
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	f003 0203 	and.w	r2, r3, #3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b844:	4b0f      	ldr	r3, [pc, #60]	@ (800b884 <HAL_RCC_GetClockConfig+0x5c>)
 800b846:	689b      	ldr	r3, [r3, #8]
 800b848:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b850:	4b0c      	ldr	r3, [pc, #48]	@ (800b884 <HAL_RCC_GetClockConfig+0x5c>)
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b85c:	4b09      	ldr	r3, [pc, #36]	@ (800b884 <HAL_RCC_GetClockConfig+0x5c>)
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	08db      	lsrs	r3, r3, #3
 800b862:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b86a:	4b07      	ldr	r3, [pc, #28]	@ (800b888 <HAL_RCC_GetClockConfig+0x60>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f003 020f 	and.w	r2, r3, #15
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	601a      	str	r2, [r3, #0]
}
 800b876:	bf00      	nop
 800b878:	370c      	adds	r7, #12
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr
 800b882:	bf00      	nop
 800b884:	40023800 	.word	0x40023800
 800b888:	40023c00 	.word	0x40023c00

0800b88c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b088      	sub	sp, #32
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b894:	2300      	movs	r3, #0
 800b896:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800b898:	2300      	movs	r3, #0
 800b89a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800b89c:	2300      	movs	r3, #0
 800b89e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f003 0301 	and.w	r3, r3, #1
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d012      	beq.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b8b4:	4b69      	ldr	r3, [pc, #420]	@ (800ba5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	4a68      	ldr	r2, [pc, #416]	@ (800ba5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b8ba:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b8be:	6093      	str	r3, [r2, #8]
 800b8c0:	4b66      	ldr	r3, [pc, #408]	@ (800ba5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b8c2:	689a      	ldr	r2, [r3, #8]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8c8:	4964      	ldr	r1, [pc, #400]	@ (800ba5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d101      	bne.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d017      	beq.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b8e6:	4b5d      	ldr	r3, [pc, #372]	@ (800ba5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b8e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b8ec:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8f4:	4959      	ldr	r1, [pc, #356]	@ (800ba5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b900:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b904:	d101      	bne.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800b906:	2301      	movs	r3, #1
 800b908:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d101      	bne.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800b912:	2301      	movs	r3, #1
 800b914:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d017      	beq.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b922:	4b4e      	ldr	r3, [pc, #312]	@ (800ba5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b924:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b928:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b930:	494a      	ldr	r1, [pc, #296]	@ (800ba5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b932:	4313      	orrs	r3, r2
 800b934:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b93c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b940:	d101      	bne.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800b942:	2301      	movs	r3, #1
 800b944:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d101      	bne.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800b94e:	2301      	movs	r3, #1
 800b950:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d001      	beq.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800b95e:	2301      	movs	r3, #1
 800b960:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f003 0320 	and.w	r3, r3, #32
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	f000 808b 	beq.w	800ba86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b970:	4b3a      	ldr	r3, [pc, #232]	@ (800ba5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b974:	4a39      	ldr	r2, [pc, #228]	@ (800ba5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b976:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b97a:	6413      	str	r3, [r2, #64]	@ 0x40
 800b97c:	4b37      	ldr	r3, [pc, #220]	@ (800ba5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b97e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b980:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b984:	60bb      	str	r3, [r7, #8]
 800b986:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b988:	4b35      	ldr	r3, [pc, #212]	@ (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4a34      	ldr	r2, [pc, #208]	@ (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b98e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b992:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b994:	f7fc f9c8 	bl	8007d28 <HAL_GetTick>
 800b998:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b99a:	e008      	b.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b99c:	f7fc f9c4 	bl	8007d28 <HAL_GetTick>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	1ad3      	subs	r3, r2, r3
 800b9a6:	2b64      	cmp	r3, #100	@ 0x64
 800b9a8:	d901      	bls.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800b9aa:	2303      	movs	r3, #3
 800b9ac:	e357      	b.n	800c05e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b9ae:	4b2c      	ldr	r3, [pc, #176]	@ (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d0f0      	beq.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b9ba:	4b28      	ldr	r3, [pc, #160]	@ (800ba5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b9c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d035      	beq.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b9d2:	693a      	ldr	r2, [r7, #16]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d02e      	beq.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b9d8:	4b20      	ldr	r3, [pc, #128]	@ (800ba5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b9e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b9e2:	4b1e      	ldr	r3, [pc, #120]	@ (800ba5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9e6:	4a1d      	ldr	r2, [pc, #116]	@ (800ba5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b9ec:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b9ee:	4b1b      	ldr	r3, [pc, #108]	@ (800ba5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9f2:	4a1a      	ldr	r2, [pc, #104]	@ (800ba5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b9f8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800b9fa:	4a18      	ldr	r2, [pc, #96]	@ (800ba5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ba00:	4b16      	ldr	r3, [pc, #88]	@ (800ba5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba04:	f003 0301 	and.w	r3, r3, #1
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d114      	bne.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba0c:	f7fc f98c 	bl	8007d28 <HAL_GetTick>
 800ba10:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba12:	e00a      	b.n	800ba2a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ba14:	f7fc f988 	bl	8007d28 <HAL_GetTick>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	1ad3      	subs	r3, r2, r3
 800ba1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d901      	bls.n	800ba2a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800ba26:	2303      	movs	r3, #3
 800ba28:	e319      	b.n	800c05e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba2a:	4b0c      	ldr	r3, [pc, #48]	@ (800ba5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba2e:	f003 0302 	and.w	r3, r3, #2
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d0ee      	beq.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba42:	d111      	bne.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800ba44:	4b05      	ldr	r3, [pc, #20]	@ (800ba5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba46:	689b      	ldr	r3, [r3, #8]
 800ba48:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800ba50:	4b04      	ldr	r3, [pc, #16]	@ (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800ba52:	400b      	ands	r3, r1
 800ba54:	4901      	ldr	r1, [pc, #4]	@ (800ba5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba56:	4313      	orrs	r3, r2
 800ba58:	608b      	str	r3, [r1, #8]
 800ba5a:	e00b      	b.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800ba5c:	40023800 	.word	0x40023800
 800ba60:	40007000 	.word	0x40007000
 800ba64:	0ffffcff 	.word	0x0ffffcff
 800ba68:	4baa      	ldr	r3, [pc, #680]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	4aa9      	ldr	r2, [pc, #676]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba6e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800ba72:	6093      	str	r3, [r2, #8]
 800ba74:	4ba7      	ldr	r3, [pc, #668]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba76:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba80:	49a4      	ldr	r1, [pc, #656]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba82:	4313      	orrs	r3, r2
 800ba84:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f003 0310 	and.w	r3, r3, #16
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d010      	beq.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ba92:	4ba0      	ldr	r3, [pc, #640]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ba98:	4a9e      	ldr	r2, [pc, #632]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ba9e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800baa2:	4b9c      	ldr	r3, [pc, #624]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800baa4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baac:	4999      	ldr	r1, [pc, #612]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800baae:	4313      	orrs	r3, r2
 800bab0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800babc:	2b00      	cmp	r3, #0
 800babe:	d00a      	beq.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bac0:	4b94      	ldr	r3, [pc, #592]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bac6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bace:	4991      	ldr	r1, [pc, #580]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bad0:	4313      	orrs	r3, r2
 800bad2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00a      	beq.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bae2:	4b8c      	ldr	r3, [pc, #560]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bae8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800baf0:	4988      	ldr	r1, [pc, #544]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800baf2:	4313      	orrs	r3, r2
 800baf4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d00a      	beq.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bb04:	4b83      	ldr	r3, [pc, #524]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bb06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb12:	4980      	ldr	r1, [pc, #512]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bb14:	4313      	orrs	r3, r2
 800bb16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d00a      	beq.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bb26:	4b7b      	ldr	r3, [pc, #492]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bb28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb2c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb34:	4977      	ldr	r1, [pc, #476]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bb36:	4313      	orrs	r3, r2
 800bb38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d00a      	beq.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bb48:	4b72      	ldr	r3, [pc, #456]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bb4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb4e:	f023 0203 	bic.w	r2, r3, #3
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb56:	496f      	ldr	r1, [pc, #444]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d00a      	beq.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bb6a:	4b6a      	ldr	r3, [pc, #424]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bb6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb70:	f023 020c 	bic.w	r2, r3, #12
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb78:	4966      	ldr	r1, [pc, #408]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d00a      	beq.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bb8c:	4b61      	ldr	r3, [pc, #388]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bb8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb92:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb9a:	495e      	ldr	r1, [pc, #376]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d00a      	beq.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bbae:	4b59      	ldr	r3, [pc, #356]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bbb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbb4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbbc:	4955      	ldr	r1, [pc, #340]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d00a      	beq.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bbd0:	4b50      	ldr	r3, [pc, #320]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bbd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbd6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbde:	494d      	ldr	r1, [pc, #308]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d00a      	beq.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800bbf2:	4b48      	ldr	r3, [pc, #288]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bbf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbf8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc00:	4944      	ldr	r1, [pc, #272]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bc02:	4313      	orrs	r3, r2
 800bc04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d00a      	beq.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800bc14:	4b3f      	ldr	r3, [pc, #252]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bc16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc1a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc22:	493c      	ldr	r1, [pc, #240]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bc24:	4313      	orrs	r3, r2
 800bc26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d00a      	beq.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800bc36:	4b37      	ldr	r3, [pc, #220]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bc38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc3c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc44:	4933      	ldr	r1, [pc, #204]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bc46:	4313      	orrs	r3, r2
 800bc48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d00a      	beq.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bc58:	4b2e      	ldr	r3, [pc, #184]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bc5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc5e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bc66:	492b      	ldr	r1, [pc, #172]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d011      	beq.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bc7a:	4b26      	ldr	r3, [pc, #152]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bc7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc80:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bc88:	4922      	ldr	r1, [pc, #136]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bc94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bc98:	d101      	bne.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f003 0308 	and.w	r3, r3, #8
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d001      	beq.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d00a      	beq.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bcba:	4b16      	ldr	r3, [pc, #88]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bcbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcc0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bcc8:	4912      	ldr	r1, [pc, #72]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bcca:	4313      	orrs	r3, r2
 800bccc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d00b      	beq.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800bcdc:	4b0d      	ldr	r3, [pc, #52]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bcde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bce2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcec:	4909      	ldr	r1, [pc, #36]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800bcf4:	69fb      	ldr	r3, [r7, #28]
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	d006      	beq.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	f000 80d9 	beq.w	800beba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bd08:	4b02      	ldr	r3, [pc, #8]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a01      	ldr	r2, [pc, #4]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bd0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bd12:	e001      	b.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800bd14:	40023800 	.word	0x40023800
 800bd18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd1a:	f7fc f805 	bl	8007d28 <HAL_GetTick>
 800bd1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bd20:	e008      	b.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bd22:	f7fc f801 	bl	8007d28 <HAL_GetTick>
 800bd26:	4602      	mov	r2, r0
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	1ad3      	subs	r3, r2, r3
 800bd2c:	2b64      	cmp	r3, #100	@ 0x64
 800bd2e:	d901      	bls.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bd30:	2303      	movs	r3, #3
 800bd32:	e194      	b.n	800c05e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bd34:	4b6c      	ldr	r3, [pc, #432]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d1f0      	bne.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f003 0301 	and.w	r3, r3, #1
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d021      	beq.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d11d      	bne.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bd54:	4b64      	ldr	r3, [pc, #400]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bd56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd5a:	0c1b      	lsrs	r3, r3, #16
 800bd5c:	f003 0303 	and.w	r3, r3, #3
 800bd60:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bd62:	4b61      	ldr	r3, [pc, #388]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bd64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd68:	0e1b      	lsrs	r3, r3, #24
 800bd6a:	f003 030f 	and.w	r3, r3, #15
 800bd6e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	019a      	lsls	r2, r3, #6
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	041b      	lsls	r3, r3, #16
 800bd7a:	431a      	orrs	r2, r3
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	061b      	lsls	r3, r3, #24
 800bd80:	431a      	orrs	r2, r3
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	689b      	ldr	r3, [r3, #8]
 800bd86:	071b      	lsls	r3, r3, #28
 800bd88:	4957      	ldr	r1, [pc, #348]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d004      	beq.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bda0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bda4:	d00a      	beq.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d02e      	beq.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bdba:	d129      	bne.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bdbc:	4b4a      	ldr	r3, [pc, #296]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bdbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bdc2:	0c1b      	lsrs	r3, r3, #16
 800bdc4:	f003 0303 	and.w	r3, r3, #3
 800bdc8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bdca:	4b47      	ldr	r3, [pc, #284]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bdcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bdd0:	0f1b      	lsrs	r3, r3, #28
 800bdd2:	f003 0307 	and.w	r3, r3, #7
 800bdd6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	019a      	lsls	r2, r3, #6
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	041b      	lsls	r3, r3, #16
 800bde2:	431a      	orrs	r2, r3
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	68db      	ldr	r3, [r3, #12]
 800bde8:	061b      	lsls	r3, r3, #24
 800bdea:	431a      	orrs	r2, r3
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	071b      	lsls	r3, r3, #28
 800bdf0:	493d      	ldr	r1, [pc, #244]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bdf8:	4b3b      	ldr	r3, [pc, #236]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bdfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bdfe:	f023 021f 	bic.w	r2, r3, #31
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be06:	3b01      	subs	r3, #1
 800be08:	4937      	ldr	r1, [pc, #220]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800be0a:	4313      	orrs	r3, r2
 800be0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d01d      	beq.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800be1c:	4b32      	ldr	r3, [pc, #200]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800be1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be22:	0e1b      	lsrs	r3, r3, #24
 800be24:	f003 030f 	and.w	r3, r3, #15
 800be28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800be2a:	4b2f      	ldr	r3, [pc, #188]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800be2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be30:	0f1b      	lsrs	r3, r3, #28
 800be32:	f003 0307 	and.w	r3, r3, #7
 800be36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	019a      	lsls	r2, r3, #6
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	691b      	ldr	r3, [r3, #16]
 800be42:	041b      	lsls	r3, r3, #16
 800be44:	431a      	orrs	r2, r3
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	061b      	lsls	r3, r3, #24
 800be4a:	431a      	orrs	r2, r3
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	071b      	lsls	r3, r3, #28
 800be50:	4925      	ldr	r1, [pc, #148]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800be52:	4313      	orrs	r3, r2
 800be54:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be60:	2b00      	cmp	r3, #0
 800be62:	d011      	beq.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	019a      	lsls	r2, r3, #6
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	691b      	ldr	r3, [r3, #16]
 800be6e:	041b      	lsls	r3, r3, #16
 800be70:	431a      	orrs	r2, r3
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	061b      	lsls	r3, r3, #24
 800be78:	431a      	orrs	r2, r3
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	071b      	lsls	r3, r3, #28
 800be80:	4919      	ldr	r1, [pc, #100]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800be82:	4313      	orrs	r3, r2
 800be84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800be88:	4b17      	ldr	r3, [pc, #92]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a16      	ldr	r2, [pc, #88]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800be8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800be92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be94:	f7fb ff48 	bl	8007d28 <HAL_GetTick>
 800be98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800be9a:	e008      	b.n	800beae <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800be9c:	f7fb ff44 	bl	8007d28 <HAL_GetTick>
 800bea0:	4602      	mov	r2, r0
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	1ad3      	subs	r3, r2, r3
 800bea6:	2b64      	cmp	r3, #100	@ 0x64
 800bea8:	d901      	bls.n	800beae <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800beaa:	2303      	movs	r3, #3
 800beac:	e0d7      	b.n	800c05e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800beae:	4b0e      	ldr	r3, [pc, #56]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d0f0      	beq.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800beba:	69bb      	ldr	r3, [r7, #24]
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	f040 80cd 	bne.w	800c05c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800bec2:	4b09      	ldr	r3, [pc, #36]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a08      	ldr	r2, [pc, #32]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bec8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800becc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bece:	f7fb ff2b 	bl	8007d28 <HAL_GetTick>
 800bed2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bed4:	e00a      	b.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bed6:	f7fb ff27 	bl	8007d28 <HAL_GetTick>
 800beda:	4602      	mov	r2, r0
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	1ad3      	subs	r3, r2, r3
 800bee0:	2b64      	cmp	r3, #100	@ 0x64
 800bee2:	d903      	bls.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bee4:	2303      	movs	r3, #3
 800bee6:	e0ba      	b.n	800c05e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800bee8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800beec:	4b5e      	ldr	r3, [pc, #376]	@ (800c068 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bef8:	d0ed      	beq.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d003      	beq.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0x682>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d009      	beq.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d02e      	beq.n	800bf78 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d12a      	bne.n	800bf78 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bf22:	4b51      	ldr	r3, [pc, #324]	@ (800c068 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bf24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf28:	0c1b      	lsrs	r3, r3, #16
 800bf2a:	f003 0303 	and.w	r3, r3, #3
 800bf2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bf30:	4b4d      	ldr	r3, [pc, #308]	@ (800c068 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bf32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf36:	0f1b      	lsrs	r3, r3, #28
 800bf38:	f003 0307 	and.w	r3, r3, #7
 800bf3c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	695b      	ldr	r3, [r3, #20]
 800bf42:	019a      	lsls	r2, r3, #6
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	041b      	lsls	r3, r3, #16
 800bf48:	431a      	orrs	r2, r3
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	699b      	ldr	r3, [r3, #24]
 800bf4e:	061b      	lsls	r3, r3, #24
 800bf50:	431a      	orrs	r2, r3
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	071b      	lsls	r3, r3, #28
 800bf56:	4944      	ldr	r1, [pc, #272]	@ (800c068 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800bf5e:	4b42      	ldr	r3, [pc, #264]	@ (800c068 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bf60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf64:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf6c:	3b01      	subs	r3, #1
 800bf6e:	021b      	lsls	r3, r3, #8
 800bf70:	493d      	ldr	r1, [pc, #244]	@ (800c068 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bf72:	4313      	orrs	r3, r2
 800bf74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d022      	beq.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bf88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf8c:	d11d      	bne.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bf8e:	4b36      	ldr	r3, [pc, #216]	@ (800c068 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bf90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf94:	0e1b      	lsrs	r3, r3, #24
 800bf96:	f003 030f 	and.w	r3, r3, #15
 800bf9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bf9c:	4b32      	ldr	r3, [pc, #200]	@ (800c068 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bf9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfa2:	0f1b      	lsrs	r3, r3, #28
 800bfa4:	f003 0307 	and.w	r3, r3, #7
 800bfa8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	695b      	ldr	r3, [r3, #20]
 800bfae:	019a      	lsls	r2, r3, #6
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6a1b      	ldr	r3, [r3, #32]
 800bfb4:	041b      	lsls	r3, r3, #16
 800bfb6:	431a      	orrs	r2, r3
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	061b      	lsls	r3, r3, #24
 800bfbc:	431a      	orrs	r2, r3
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	071b      	lsls	r3, r3, #28
 800bfc2:	4929      	ldr	r1, [pc, #164]	@ (800c068 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f003 0308 	and.w	r3, r3, #8
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d028      	beq.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bfd6:	4b24      	ldr	r3, [pc, #144]	@ (800c068 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bfd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfdc:	0e1b      	lsrs	r3, r3, #24
 800bfde:	f003 030f 	and.w	r3, r3, #15
 800bfe2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bfe4:	4b20      	ldr	r3, [pc, #128]	@ (800c068 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bfe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfea:	0c1b      	lsrs	r3, r3, #16
 800bfec:	f003 0303 	and.w	r3, r3, #3
 800bff0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	695b      	ldr	r3, [r3, #20]
 800bff6:	019a      	lsls	r2, r3, #6
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	041b      	lsls	r3, r3, #16
 800bffc:	431a      	orrs	r2, r3
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	061b      	lsls	r3, r3, #24
 800c002:	431a      	orrs	r2, r3
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	69db      	ldr	r3, [r3, #28]
 800c008:	071b      	lsls	r3, r3, #28
 800c00a:	4917      	ldr	r1, [pc, #92]	@ (800c068 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c00c:	4313      	orrs	r3, r2
 800c00e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c012:	4b15      	ldr	r3, [pc, #84]	@ (800c068 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c014:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c018:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c020:	4911      	ldr	r1, [pc, #68]	@ (800c068 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c022:	4313      	orrs	r3, r2
 800c024:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c028:	4b0f      	ldr	r3, [pc, #60]	@ (800c068 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4a0e      	ldr	r2, [pc, #56]	@ (800c068 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c02e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c032:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c034:	f7fb fe78 	bl	8007d28 <HAL_GetTick>
 800c038:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c03a:	e008      	b.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c03c:	f7fb fe74 	bl	8007d28 <HAL_GetTick>
 800c040:	4602      	mov	r2, r0
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	1ad3      	subs	r3, r2, r3
 800c046:	2b64      	cmp	r3, #100	@ 0x64
 800c048:	d901      	bls.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c04a:	2303      	movs	r3, #3
 800c04c:	e007      	b.n	800c05e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c04e:	4b06      	ldr	r3, [pc, #24]	@ (800c068 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c056:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c05a:	d1ef      	bne.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800c05c:	2300      	movs	r3, #0
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3720      	adds	r7, #32
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	40023800 	.word	0x40023800

0800c06c <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b085      	sub	sp, #20
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800c074:	2300      	movs	r3, #0
 800c076:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	4a80      	ldr	r2, [pc, #512]	@ (800c27c <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 800c07c:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800c07e:	4b80      	ldr	r3, [pc, #512]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c080:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c084:	099b      	lsrs	r3, r3, #6
 800c086:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c08e:	4b7c      	ldr	r3, [pc, #496]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c090:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c094:	0c1b      	lsrs	r3, r3, #16
 800c096:	f003 0203 	and.w	r2, r3, #3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c09e:	4b78      	ldr	r3, [pc, #480]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c0a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c0a4:	0e1b      	lsrs	r3, r3, #24
 800c0a6:	f003 020f 	and.w	r2, r3, #15
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c0ae:	4b74      	ldr	r3, [pc, #464]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c0b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c0b4:	0f1b      	lsrs	r3, r3, #28
 800c0b6:	f003 0207 	and.w	r2, r3, #7
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800c0be:	4b70      	ldr	r3, [pc, #448]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c0c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0c4:	099b      	lsrs	r3, r3, #6
 800c0c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c0ce:	4b6c      	ldr	r3, [pc, #432]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c0d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0d4:	0c1b      	lsrs	r3, r3, #16
 800c0d6:	f003 0203 	and.w	r2, r3, #3
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c0de:	4b68      	ldr	r3, [pc, #416]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c0e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0e4:	0e1b      	lsrs	r3, r3, #24
 800c0e6:	f003 020f 	and.w	r2, r3, #15
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c0ee:	4b64      	ldr	r3, [pc, #400]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c0f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0f4:	0f1b      	lsrs	r3, r3, #28
 800c0f6:	f003 0207 	and.w	r2, r3, #7
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800c0fe:	4b60      	ldr	r3, [pc, #384]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c100:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c104:	f003 021f 	and.w	r2, r3, #31
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800c10c:	4b5c      	ldr	r3, [pc, #368]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c10e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c112:	0a1b      	lsrs	r3, r3, #8
 800c114:	f003 021f 	and.w	r2, r3, #31
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800c11c:	4b58      	ldr	r3, [pc, #352]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c11e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c122:	0c1b      	lsrs	r3, r3, #16
 800c124:	f003 0203 	and.w	r2, r3, #3
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800c12c:	4b54      	ldr	r3, [pc, #336]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c12e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c132:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800c13a:	4b51      	ldr	r3, [pc, #324]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c13c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c140:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800c148:	4b4d      	ldr	r3, [pc, #308]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800c154:	4b4a      	ldr	r3, [pc, #296]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c15a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800c162:	4b47      	ldr	r3, [pc, #284]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c168:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800c170:	4b43      	ldr	r3, [pc, #268]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c176:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800c17e:	4b40      	ldr	r3, [pc, #256]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c184:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800c18c:	4b3c      	ldr	r3, [pc, #240]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c18e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c192:	f003 0203 	and.w	r2, r3, #3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800c19a:	4b39      	ldr	r3, [pc, #228]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c19c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1a0:	f003 020c 	and.w	r2, r3, #12
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800c1a8:	4b35      	ldr	r3, [pc, #212]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c1aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1ae:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800c1b6:	4b32      	ldr	r3, [pc, #200]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c1b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1bc:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800c1c4:	4b2e      	ldr	r3, [pc, #184]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c1c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1ca:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800c1d2:	4b2b      	ldr	r3, [pc, #172]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c1d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1d8:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800c1e0:	4b27      	ldr	r3, [pc, #156]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c1e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1e6:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800c1ee:	4b24      	ldr	r3, [pc, #144]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c1f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1f4:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800c1fc:	4b20      	ldr	r3, [pc, #128]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c1fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c202:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800c20a:	4b1d      	ldr	r3, [pc, #116]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c20c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c210:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800c218:	4b19      	ldr	r3, [pc, #100]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c21a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c21e:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800c226:	4b16      	ldr	r3, [pc, #88]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c22c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800c236:	4b12      	ldr	r3, [pc, #72]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c238:	689b      	ldr	r3, [r3, #8]
 800c23a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c23e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800c240:	4b0f      	ldr	r3, [pc, #60]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c244:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	431a      	orrs	r2, r3
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800c250:	4b0b      	ldr	r3, [pc, #44]	@ (800c280 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c252:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c256:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d103      	bne.n	800c266 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2200      	movs	r2, #0
 800c262:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800c264:	e003      	b.n	800c26e <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c26c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800c26e:	bf00      	nop
 800c270:	3714      	adds	r7, #20
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop
 800c27c:	00fffff1 	.word	0x00fffff1
 800c280:	40023800 	.word	0x40023800

0800c284 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c284:	b480      	push	{r7}
 800c286:	b087      	sub	sp, #28
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c28c:	2300      	movs	r3, #0
 800c28e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800c290:	2300      	movs	r3, #0
 800c292:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800c294:	2300      	movs	r3, #0
 800c296:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800c298:	2300      	movs	r3, #0
 800c29a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c2a2:	f040 808d 	bne.w	800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c2a6:	4b93      	ldr	r3, [pc, #588]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c2a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c2ac:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800c2b4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c2bc:	d07c      	beq.n	800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c2c4:	d87b      	bhi.n	800c3be <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d004      	beq.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c2d2:	d039      	beq.n	800c348 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c2d4:	e073      	b.n	800c3be <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c2d6:	4b87      	ldr	r3, [pc, #540]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d108      	bne.n	800c2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c2e2:	4b84      	ldr	r3, [pc, #528]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c2ea:	4a83      	ldr	r2, [pc, #524]	@ (800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800c2ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2f0:	613b      	str	r3, [r7, #16]
 800c2f2:	e007      	b.n	800c304 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c2f4:	4b7f      	ldr	r3, [pc, #508]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c2fc:	4a7f      	ldr	r2, [pc, #508]	@ (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c2fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800c302:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c304:	4b7b      	ldr	r3, [pc, #492]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c30a:	0e1b      	lsrs	r3, r3, #24
 800c30c:	f003 030f 	and.w	r3, r3, #15
 800c310:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c312:	4b78      	ldr	r3, [pc, #480]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c318:	099b      	lsrs	r3, r3, #6
 800c31a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c31e:	693a      	ldr	r2, [r7, #16]
 800c320:	fb03 f202 	mul.w	r2, r3, r2
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	fbb2 f3f3 	udiv	r3, r2, r3
 800c32a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c32c:	4b71      	ldr	r3, [pc, #452]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c32e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c332:	0a1b      	lsrs	r3, r3, #8
 800c334:	f003 031f 	and.w	r3, r3, #31
 800c338:	3301      	adds	r3, #1
 800c33a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c33c:	697a      	ldr	r2, [r7, #20]
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	fbb2 f3f3 	udiv	r3, r2, r3
 800c344:	617b      	str	r3, [r7, #20]
        break;
 800c346:	e03b      	b.n	800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c348:	4b6a      	ldr	r3, [pc, #424]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c350:	2b00      	cmp	r3, #0
 800c352:	d108      	bne.n	800c366 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c354:	4b67      	ldr	r3, [pc, #412]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c35c:	4a66      	ldr	r2, [pc, #408]	@ (800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800c35e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c362:	613b      	str	r3, [r7, #16]
 800c364:	e007      	b.n	800c376 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c366:	4b63      	ldr	r3, [pc, #396]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c36e:	4a63      	ldr	r2, [pc, #396]	@ (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c370:	fbb2 f3f3 	udiv	r3, r2, r3
 800c374:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c376:	4b5f      	ldr	r3, [pc, #380]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c378:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c37c:	0e1b      	lsrs	r3, r3, #24
 800c37e:	f003 030f 	and.w	r3, r3, #15
 800c382:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c384:	4b5b      	ldr	r3, [pc, #364]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c386:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c38a:	099b      	lsrs	r3, r3, #6
 800c38c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c390:	693a      	ldr	r2, [r7, #16]
 800c392:	fb03 f202 	mul.w	r2, r3, r2
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	fbb2 f3f3 	udiv	r3, r2, r3
 800c39c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c39e:	4b55      	ldr	r3, [pc, #340]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c3a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c3a4:	f003 031f 	and.w	r3, r3, #31
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c3ac:	697a      	ldr	r2, [r7, #20]
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3b4:	617b      	str	r3, [r7, #20]
        break;
 800c3b6:	e003      	b.n	800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c3b8:	4b51      	ldr	r3, [pc, #324]	@ (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c3ba:	617b      	str	r3, [r7, #20]
        break;
 800c3bc:	e000      	b.n	800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800c3be:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c3c6:	f040 808d 	bne.w	800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c3ca:	4b4a      	ldr	r3, [pc, #296]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c3cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c3d0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800c3d8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c3e0:	d07c      	beq.n	800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c3e8:	d87b      	bhi.n	800c4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d004      	beq.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c3f6:	d039      	beq.n	800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c3f8:	e073      	b.n	800c4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c3fa:	4b3e      	ldr	r3, [pc, #248]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c402:	2b00      	cmp	r3, #0
 800c404:	d108      	bne.n	800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c406:	4b3b      	ldr	r3, [pc, #236]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c40e:	4a3a      	ldr	r2, [pc, #232]	@ (800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800c410:	fbb2 f3f3 	udiv	r3, r2, r3
 800c414:	613b      	str	r3, [r7, #16]
 800c416:	e007      	b.n	800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c418:	4b36      	ldr	r3, [pc, #216]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c420:	4a36      	ldr	r2, [pc, #216]	@ (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c422:	fbb2 f3f3 	udiv	r3, r2, r3
 800c426:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c428:	4b32      	ldr	r3, [pc, #200]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c42a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c42e:	0e1b      	lsrs	r3, r3, #24
 800c430:	f003 030f 	and.w	r3, r3, #15
 800c434:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c436:	4b2f      	ldr	r3, [pc, #188]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c43c:	099b      	lsrs	r3, r3, #6
 800c43e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c442:	693a      	ldr	r2, [r7, #16]
 800c444:	fb03 f202 	mul.w	r2, r3, r2
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c44e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c450:	4b28      	ldr	r3, [pc, #160]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c452:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c456:	0a1b      	lsrs	r3, r3, #8
 800c458:	f003 031f 	and.w	r3, r3, #31
 800c45c:	3301      	adds	r3, #1
 800c45e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c460:	697a      	ldr	r2, [r7, #20]
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	fbb2 f3f3 	udiv	r3, r2, r3
 800c468:	617b      	str	r3, [r7, #20]
        break;
 800c46a:	e03b      	b.n	800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c46c:	4b21      	ldr	r3, [pc, #132]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c474:	2b00      	cmp	r3, #0
 800c476:	d108      	bne.n	800c48a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c478:	4b1e      	ldr	r3, [pc, #120]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c480:	4a1d      	ldr	r2, [pc, #116]	@ (800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800c482:	fbb2 f3f3 	udiv	r3, r2, r3
 800c486:	613b      	str	r3, [r7, #16]
 800c488:	e007      	b.n	800c49a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c48a:	4b1a      	ldr	r3, [pc, #104]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c48c:	685b      	ldr	r3, [r3, #4]
 800c48e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c492:	4a1a      	ldr	r2, [pc, #104]	@ (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c494:	fbb2 f3f3 	udiv	r3, r2, r3
 800c498:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c49a:	4b16      	ldr	r3, [pc, #88]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c49c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c4a0:	0e1b      	lsrs	r3, r3, #24
 800c4a2:	f003 030f 	and.w	r3, r3, #15
 800c4a6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c4a8:	4b12      	ldr	r3, [pc, #72]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c4aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c4ae:	099b      	lsrs	r3, r3, #6
 800c4b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4b4:	693a      	ldr	r2, [r7, #16]
 800c4b6:	fb03 f202 	mul.w	r2, r3, r2
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4c0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c4c2:	4b0c      	ldr	r3, [pc, #48]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c4c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c4c8:	f003 031f 	and.w	r3, r3, #31
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c4d0:	697a      	ldr	r2, [r7, #20]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4d8:	617b      	str	r3, [r7, #20]
        break;
 800c4da:	e003      	b.n	800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c4dc:	4b08      	ldr	r3, [pc, #32]	@ (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c4de:	617b      	str	r3, [r7, #20]
        break;
 800c4e0:	e000      	b.n	800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800c4e2:	bf00      	nop
      }
    }
  }

  return frequency;
 800c4e4:	697b      	ldr	r3, [r7, #20]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	371c      	adds	r7, #28
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr
 800c4f2:	bf00      	nop
 800c4f4:	40023800 	.word	0x40023800
 800c4f8:	00f42400 	.word	0x00f42400
 800c4fc:	017d7840 	.word	0x017d7840
 800c500:	00bb8000 	.word	0x00bb8000

0800c504 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b088      	sub	sp, #32
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800c50c:	2300      	movs	r3, #0
 800c50e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800c510:	2300      	movs	r3, #0
 800c512:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800c514:	2300      	movs	r3, #0
 800c516:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d101      	bne.n	800c522 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800c51e:	2301      	movs	r3, #1
 800c520:	e156      	b.n	800c7d0 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c528:	b2db      	uxtb	r3, r3
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d106      	bne.n	800c53c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2200      	movs	r2, #0
 800c532:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f7f7 f99e 	bl	8003878 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2202      	movs	r2, #2
 800c540:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f000 fa85 	bl	800ca54 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	2b02      	cmp	r3, #2
 800c550:	d00c      	beq.n	800c56c <HAL_SAI_Init+0x68>
 800c552:	2b02      	cmp	r3, #2
 800c554:	d80d      	bhi.n	800c572 <HAL_SAI_Init+0x6e>
 800c556:	2b00      	cmp	r3, #0
 800c558:	d002      	beq.n	800c560 <HAL_SAI_Init+0x5c>
 800c55a:	2b01      	cmp	r3, #1
 800c55c:	d003      	beq.n	800c566 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800c55e:	e008      	b.n	800c572 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800c560:	2300      	movs	r3, #0
 800c562:	61fb      	str	r3, [r7, #28]
      break;
 800c564:	e006      	b.n	800c574 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800c566:	2310      	movs	r3, #16
 800c568:	61fb      	str	r3, [r7, #28]
      break;
 800c56a:	e003      	b.n	800c574 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800c56c:	2320      	movs	r3, #32
 800c56e:	61fb      	str	r3, [r7, #28]
      break;
 800c570:	e000      	b.n	800c574 <HAL_SAI_Init+0x70>
      break;
 800c572:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	689b      	ldr	r3, [r3, #8]
 800c578:	2b03      	cmp	r3, #3
 800c57a:	d81e      	bhi.n	800c5ba <HAL_SAI_Init+0xb6>
 800c57c:	a201      	add	r2, pc, #4	@ (adr r2, 800c584 <HAL_SAI_Init+0x80>)
 800c57e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c582:	bf00      	nop
 800c584:	0800c595 	.word	0x0800c595
 800c588:	0800c59b 	.word	0x0800c59b
 800c58c:	0800c5a3 	.word	0x0800c5a3
 800c590:	0800c5ab 	.word	0x0800c5ab
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800c594:	2300      	movs	r3, #0
 800c596:	617b      	str	r3, [r7, #20]
    }
    break;
 800c598:	e010      	b.n	800c5bc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800c59a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c59e:	617b      	str	r3, [r7, #20]
    }
    break;
 800c5a0:	e00c      	b.n	800c5bc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c5a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c5a6:	617b      	str	r3, [r7, #20]
    }
    break;
 800c5a8:	e008      	b.n	800c5bc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c5aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c5ae:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800c5b0:	69fb      	ldr	r3, [r7, #28]
 800c5b2:	f043 0301 	orr.w	r3, r3, #1
 800c5b6:	61fb      	str	r3, [r7, #28]
    }
    break;
 800c5b8:	e000      	b.n	800c5bc <HAL_SAI_Init+0xb8>
    default:
      break;
 800c5ba:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4a85      	ldr	r2, [pc, #532]	@ (800c7d8 <HAL_SAI_Init+0x2d4>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d004      	beq.n	800c5d0 <HAL_SAI_Init+0xcc>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4a84      	ldr	r2, [pc, #528]	@ (800c7dc <HAL_SAI_Init+0x2d8>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d103      	bne.n	800c5d8 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800c5d0:	4a83      	ldr	r2, [pc, #524]	@ (800c7e0 <HAL_SAI_Init+0x2dc>)
 800c5d2:	69fb      	ldr	r3, [r7, #28]
 800c5d4:	6013      	str	r3, [r2, #0]
 800c5d6:	e002      	b.n	800c5de <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800c5d8:	4a82      	ldr	r2, [pc, #520]	@ (800c7e4 <HAL_SAI_Init+0x2e0>)
 800c5da:	69fb      	ldr	r3, [r7, #28]
 800c5dc:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	69db      	ldr	r3, [r3, #28]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d04c      	beq.n	800c680 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	4a7a      	ldr	r2, [pc, #488]	@ (800c7d8 <HAL_SAI_Init+0x2d4>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d004      	beq.n	800c5fe <HAL_SAI_Init+0xfa>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4a78      	ldr	r2, [pc, #480]	@ (800c7dc <HAL_SAI_Init+0x2d8>)
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d104      	bne.n	800c608 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800c5fe:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800c602:	f7ff fe3f 	bl	800c284 <HAL_RCCEx_GetPeriphCLKFreq>
 800c606:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4a76      	ldr	r2, [pc, #472]	@ (800c7e8 <HAL_SAI_Init+0x2e4>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d004      	beq.n	800c61c <HAL_SAI_Init+0x118>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	4a75      	ldr	r2, [pc, #468]	@ (800c7ec <HAL_SAI_Init+0x2e8>)
 800c618:	4293      	cmp	r3, r2
 800c61a:	d104      	bne.n	800c626 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800c61c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c620:	f7ff fe30 	bl	800c284 <HAL_RCCEx_GetPeriphCLKFreq>
 800c624:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800c626:	693a      	ldr	r2, [r7, #16]
 800c628:	4613      	mov	r3, r2
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	4413      	add	r3, r2
 800c62e:	005b      	lsls	r3, r3, #1
 800c630:	461a      	mov	r2, r3
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	69db      	ldr	r3, [r3, #28]
 800c636:	025b      	lsls	r3, r3, #9
 800c638:	fbb2 f3f3 	udiv	r3, r2, r3
 800c63c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	4a6b      	ldr	r2, [pc, #428]	@ (800c7f0 <HAL_SAI_Init+0x2ec>)
 800c642:	fba2 2303 	umull	r2, r3, r2, r3
 800c646:	08da      	lsrs	r2, r3, #3
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800c64c:	68f9      	ldr	r1, [r7, #12]
 800c64e:	4b68      	ldr	r3, [pc, #416]	@ (800c7f0 <HAL_SAI_Init+0x2ec>)
 800c650:	fba3 2301 	umull	r2, r3, r3, r1
 800c654:	08da      	lsrs	r2, r3, #3
 800c656:	4613      	mov	r3, r2
 800c658:	009b      	lsls	r3, r3, #2
 800c65a:	4413      	add	r3, r2
 800c65c:	005b      	lsls	r3, r3, #1
 800c65e:	1aca      	subs	r2, r1, r3
 800c660:	2a08      	cmp	r2, #8
 800c662:	d904      	bls.n	800c66e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6a1b      	ldr	r3, [r3, #32]
 800c668:	1c5a      	adds	r2, r3, #1
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c672:	2b04      	cmp	r3, #4
 800c674:	d104      	bne.n	800c680 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6a1b      	ldr	r3, [r3, #32]
 800c67a:	085a      	lsrs	r2, r3, #1
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d003      	beq.n	800c690 <HAL_SAI_Init+0x18c>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	2b02      	cmp	r3, #2
 800c68e:	d109      	bne.n	800c6a4 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c694:	2b01      	cmp	r3, #1
 800c696:	d101      	bne.n	800c69c <HAL_SAI_Init+0x198>
 800c698:	2300      	movs	r3, #0
 800c69a:	e001      	b.n	800c6a0 <HAL_SAI_Init+0x19c>
 800c69c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c6a0:	61bb      	str	r3, [r7, #24]
 800c6a2:	e008      	b.n	800c6b6 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6a8:	2b01      	cmp	r3, #1
 800c6aa:	d102      	bne.n	800c6b2 <HAL_SAI_Init+0x1ae>
 800c6ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c6b0:	e000      	b.n	800c6b4 <HAL_SAI_Init+0x1b0>
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	6819      	ldr	r1, [r3, #0]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681a      	ldr	r2, [r3, #0]
 800c6c0:	4b4c      	ldr	r3, [pc, #304]	@ (800c7f4 <HAL_SAI_Init+0x2f0>)
 800c6c2:	400b      	ands	r3, r1
 800c6c4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	6819      	ldr	r1, [r3, #0]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	685a      	ldr	r2, [r3, #4]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6d4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c6da:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6e0:	431a      	orrs	r2, r3
 800c6e2:	69bb      	ldr	r3, [r7, #24]
 800c6e4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800c6ee:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	691b      	ldr	r3, [r3, #16]
 800c6f4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c6fa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6a1b      	ldr	r3, [r3, #32]
 800c700:	051b      	lsls	r3, r3, #20
 800c702:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	430a      	orrs	r2, r1
 800c70a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	6859      	ldr	r1, [r3, #4]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681a      	ldr	r2, [r3, #0]
 800c716:	4b38      	ldr	r3, [pc, #224]	@ (800c7f8 <HAL_SAI_Init+0x2f4>)
 800c718:	400b      	ands	r3, r1
 800c71a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	6859      	ldr	r1, [r3, #4]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	699a      	ldr	r2, [r3, #24]
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c72a:	431a      	orrs	r2, r3
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c730:	431a      	orrs	r2, r3
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	430a      	orrs	r2, r1
 800c738:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	6899      	ldr	r1, [r3, #8]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681a      	ldr	r2, [r3, #0]
 800c744:	4b2d      	ldr	r3, [pc, #180]	@ (800c7fc <HAL_SAI_Init+0x2f8>)
 800c746:	400b      	ands	r3, r1
 800c748:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	6899      	ldr	r1, [r3, #8]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c754:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c75a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800c760:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800c766:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c76c:	3b01      	subs	r3, #1
 800c76e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800c770:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	430a      	orrs	r2, r1
 800c778:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	68d9      	ldr	r1, [r3, #12]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800c788:	400b      	ands	r3, r1
 800c78a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	68d9      	ldr	r1, [r3, #12]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c79a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c7a0:	041b      	lsls	r3, r3, #16
 800c7a2:	431a      	orrs	r2, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c7a8:	3b01      	subs	r3, #1
 800c7aa:	021b      	lsls	r3, r3, #8
 800c7ac:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	430a      	orrs	r2, r1
 800c7b4:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800c7ce:	2300      	movs	r3, #0
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3720      	adds	r7, #32
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	40015804 	.word	0x40015804
 800c7dc:	40015824 	.word	0x40015824
 800c7e0:	40015800 	.word	0x40015800
 800c7e4:	40015c00 	.word	0x40015c00
 800c7e8:	40015c04 	.word	0x40015c04
 800c7ec:	40015c24 	.word	0x40015c24
 800c7f0:	cccccccd 	.word	0xcccccccd
 800c7f4:	ff05c010 	.word	0xff05c010
 800c7f8:	ffff1ff0 	.word	0xffff1ff0
 800c7fc:	fff88000 	.word	0xfff88000

0800c800 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d101      	bne.n	800c812 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800c80e:	2301      	movs	r3, #1
 800c810:	e027      	b.n	800c862 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2202      	movs	r2, #2
 800c816:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	2200      	movs	r2, #0
 800c820:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c82a:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f000 f911 	bl	800ca54 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	685a      	ldr	r2, [r3, #4]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f042 0208 	orr.w	r2, r2, #8
 800c840:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f7f7 f8f6 	bl	8003a34 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2200      	movs	r2, #0
 800c84c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2200      	movs	r2, #0
 800c854:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2200      	movs	r2, #0
 800c85c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800c860:	2300      	movs	r3, #0
}
 800c862:	4618      	mov	r0, r3
 800c864:	3708      	adds	r7, #8
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
	...

0800c86c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b086      	sub	sp, #24
 800c870:	af00      	add	r7, sp, #0
 800c872:	60f8      	str	r0, [r7, #12]
 800c874:	60b9      	str	r1, [r7, #8]
 800c876:	4613      	mov	r3, r2
 800c878:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800c87a:	f7fb fa55 	bl	8007d28 <HAL_GetTick>
 800c87e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d002      	beq.n	800c88c <HAL_SAI_Transmit_DMA+0x20>
 800c886:	88fb      	ldrh	r3, [r7, #6]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d101      	bne.n	800c890 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800c88c:	2301      	movs	r3, #1
 800c88e:	e093      	b.n	800c9b8 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c896:	b2db      	uxtb	r3, r3
 800c898:	2b01      	cmp	r3, #1
 800c89a:	f040 808c 	bne.w	800c9b6 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d101      	bne.n	800c8ac <HAL_SAI_Transmit_DMA+0x40>
 800c8a8:	2302      	movs	r3, #2
 800c8aa:	e085      	b.n	800c9b8 <HAL_SAI_Transmit_DMA+0x14c>
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	68ba      	ldr	r2, [r7, #8]
 800c8b8:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	88fa      	ldrh	r2, [r7, #6]
 800c8be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	88fa      	ldrh	r2, [r7, #6]
 800c8c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	2212      	movs	r2, #18
 800c8d6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8de:	4a38      	ldr	r2, [pc, #224]	@ (800c9c0 <HAL_SAI_Transmit_DMA+0x154>)
 800c8e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8e6:	4a37      	ldr	r2, [pc, #220]	@ (800c9c4 <HAL_SAI_Transmit_DMA+0x158>)
 800c8e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8ee:	4a36      	ldr	r2, [pc, #216]	@ (800c9c8 <HAL_SAI_Transmit_DMA+0x15c>)
 800c8f0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c902:	4619      	mov	r1, r3
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	331c      	adds	r3, #28
 800c90a:	461a      	mov	r2, r3
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c912:	f7fc f821 	bl	8008958 <HAL_DMA_Start_IT>
 800c916:	4603      	mov	r3, r0
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d005      	beq.n	800c928 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2200      	movs	r2, #0
 800c920:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 800c924:	2301      	movs	r3, #1
 800c926:	e047      	b.n	800c9b8 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c928:	2100      	movs	r1, #0
 800c92a:	68f8      	ldr	r0, [r7, #12]
 800c92c:	f000 f85c 	bl	800c9e8 <SAI_InterruptFlag>
 800c930:	4601      	mov	r1, r0
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	691a      	ldr	r2, [r3, #16]
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	430a      	orrs	r2, r1
 800c93e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c94e:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800c950:	e015      	b.n	800c97e <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800c952:	f7fb f9e9 	bl	8007d28 <HAL_GetTick>
 800c956:	4602      	mov	r2, r0
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	1ad3      	subs	r3, r2, r3
 800c95c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c960:	d90d      	bls.n	800c97e <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c968:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2200      	movs	r2, #0
 800c976:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800c97a:	2303      	movs	r3, #3
 800c97c:	e01c      	b.n	800c9b8 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	695b      	ldr	r3, [r3, #20]
 800c984:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d0e2      	beq.n	800c952 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c996:	2b00      	cmp	r3, #0
 800c998:	d107      	bne.n	800c9aa <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	681a      	ldr	r2, [r3, #0]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800c9a8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	e000      	b.n	800c9b8 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800c9b6:	2302      	movs	r3, #2
  }
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3718      	adds	r7, #24
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	0800cb25 	.word	0x0800cb25
 800c9c4:	0800cac5 	.word	0x0800cac5
 800c9c8:	0800cb41 	.word	0x0800cb41

0800c9cc <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c9da:	b2db      	uxtb	r3, r3
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b085      	sub	sp, #20
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d103      	bne.n	800ca04 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f043 0308 	orr.w	r3, r3, #8
 800ca02:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca08:	2b08      	cmp	r3, #8
 800ca0a:	d10b      	bne.n	800ca24 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ca10:	2b03      	cmp	r3, #3
 800ca12:	d003      	beq.n	800ca1c <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	685b      	ldr	r3, [r3, #4]
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d103      	bne.n	800ca24 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	f043 0310 	orr.w	r3, r3, #16
 800ca22:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	2b03      	cmp	r3, #3
 800ca2a:	d003      	beq.n	800ca34 <SAI_InterruptFlag+0x4c>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	2b02      	cmp	r3, #2
 800ca32:	d104      	bne.n	800ca3e <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ca3a:	60fb      	str	r3, [r7, #12]
 800ca3c:	e003      	b.n	800ca46 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f043 0304 	orr.w	r3, r3, #4
 800ca44:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ca46:	68fb      	ldr	r3, [r7, #12]
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3714      	adds	r7, #20
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr

0800ca54 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b085      	sub	sp, #20
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800ca5c:	4b17      	ldr	r3, [pc, #92]	@ (800cabc <SAI_Disable+0x68>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4a17      	ldr	r2, [pc, #92]	@ (800cac0 <SAI_Disable+0x6c>)
 800ca62:	fba2 2303 	umull	r2, r3, r2, r3
 800ca66:	0b1b      	lsrs	r3, r3, #12
 800ca68:	009b      	lsls	r3, r3, #2
 800ca6a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	681a      	ldr	r2, [r3, #0]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ca7e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	1e5a      	subs	r2, r3, #1
 800ca84:	60fa      	str	r2, [r7, #12]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d10a      	bne.n	800caa0 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca90:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800ca9a:	2303      	movs	r3, #3
 800ca9c:	72fb      	strb	r3, [r7, #11]
      break;
 800ca9e:	e006      	b.n	800caae <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d1e8      	bne.n	800ca80 <SAI_Disable+0x2c>

  return status;
 800caae:	7afb      	ldrb	r3, [r7, #11]
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3714      	adds	r7, #20
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr
 800cabc:	2000004c 	.word	0x2000004c
 800cac0:	95cbec1b 	.word	0x95cbec1b

0800cac4 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cad0:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	69db      	ldr	r3, [r3, #28]
 800cad6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cada:	d01c      	beq.n	800cb16 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2200      	movs	r2, #0
 800cae0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	681a      	ldr	r2, [r3, #0]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800caf2:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800caf4:	2100      	movs	r1, #0
 800caf6:	68f8      	ldr	r0, [r7, #12]
 800caf8:	f7ff ff76 	bl	800c9e8 <SAI_InterruptFlag>
 800cafc:	4603      	mov	r3, r0
 800cafe:	43d9      	mvns	r1, r3
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	691a      	ldr	r2, [r3, #16]
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	400a      	ands	r2, r1
 800cb0c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	2201      	movs	r2, #1
 800cb12:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800cb16:	68f8      	ldr	r0, [r7, #12]
 800cb18:	f7f7 fb62 	bl	80041e0 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800cb1c:	bf00      	nop
 800cb1e:	3710      	adds	r7, #16
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b084      	sub	sp, #16
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb30:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800cb32:	68f8      	ldr	r0, [r7, #12]
 800cb34:	f7f7 fb5e 	bl	80041f4 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800cb38:	bf00      	nop
 800cb3a:	3710      	adds	r7, #16
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}

0800cb40 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb4c:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb54:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	d004      	beq.n	800cb72 <SAI_DMAError+0x32>
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cb6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb6e:	2b01      	cmp	r3, #1
 800cb70:	d112      	bne.n	800cb98 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	681a      	ldr	r2, [r3, #0]
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800cb80:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800cb82:	68f8      	ldr	r0, [r7, #12]
 800cb84:	f7ff ff66 	bl	800ca54 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2200      	movs	r2, #0
 800cb94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800cb98:	68f8      	ldr	r0, [r7, #12]
 800cb9a:	f7f7 fb35 	bl	8004208 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800cb9e:	bf00      	nop
 800cba0:	3710      	adds	r7, #16
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}

0800cba6 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cba6:	b580      	push	{r7, lr}
 800cba8:	b082      	sub	sp, #8
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d101      	bne.n	800cbb8 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	e022      	b.n	800cbfe <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cbbe:	b2db      	uxtb	r3, r3
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d105      	bne.n	800cbd0 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f7f6 ffac 	bl	8003b28 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2203      	movs	r2, #3
 800cbd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f000 f815 	bl	800cc08 <HAL_SD_InitCard>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d001      	beq.n	800cbe8 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	e00a      	b.n	800cbfe <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2200      	movs	r2, #0
 800cbec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800cbfc:	2300      	movs	r3, #0
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3708      	adds	r7, #8
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
	...

0800cc08 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cc08:	b5b0      	push	{r4, r5, r7, lr}
 800cc0a:	b08e      	sub	sp, #56	@ 0x38
 800cc0c:	af04      	add	r7, sp, #16
 800cc0e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800cc10:	2300      	movs	r3, #0
 800cc12:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800cc14:	2300      	movs	r3, #0
 800cc16:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800cc20:	2300      	movs	r3, #0
 800cc22:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800cc24:	2376      	movs	r3, #118	@ 0x76
 800cc26:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681d      	ldr	r5, [r3, #0]
 800cc2c:	466c      	mov	r4, sp
 800cc2e:	f107 0314 	add.w	r3, r7, #20
 800cc32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cc36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cc3a:	f107 0308 	add.w	r3, r7, #8
 800cc3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cc40:	4628      	mov	r0, r5
 800cc42:	f001 ff13 	bl	800ea6c <SDMMC_Init>
 800cc46:	4603      	mov	r3, r0
 800cc48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800cc4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d001      	beq.n	800cc58 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800cc54:	2301      	movs	r3, #1
 800cc56:	e059      	b.n	800cd0c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	685a      	ldr	r2, [r3, #4]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cc66:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f001 ff29 	bl	800eac4 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	685a      	ldr	r2, [r3, #4]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cc80:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800cc82:	2002      	movs	r0, #2
 800cc84:	f7fb f85c 	bl	8007d40 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f000 fd75 	bl	800d778 <SD_PowerON>
 800cc8e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc90:	6a3b      	ldr	r3, [r7, #32]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d00b      	beq.n	800ccae <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2201      	movs	r2, #1
 800cc9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cca2:	6a3b      	ldr	r3, [r7, #32]
 800cca4:	431a      	orrs	r2, r3
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ccaa:	2301      	movs	r3, #1
 800ccac:	e02e      	b.n	800cd0c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f000 fc94 	bl	800d5dc <SD_InitCard>
 800ccb4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ccb6:	6a3b      	ldr	r3, [r7, #32]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d00b      	beq.n	800ccd4 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ccc8:	6a3b      	ldr	r3, [r7, #32]
 800ccca:	431a      	orrs	r2, r3
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	e01b      	b.n	800cd0c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f001 ff83 	bl	800ebe8 <SDMMC_CmdBlockLength>
 800cce2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cce4:	6a3b      	ldr	r3, [r7, #32]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d00f      	beq.n	800cd0a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	4a09      	ldr	r2, [pc, #36]	@ (800cd14 <HAL_SD_InitCard+0x10c>)
 800ccf0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ccf6:	6a3b      	ldr	r3, [r7, #32]
 800ccf8:	431a      	orrs	r2, r3
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2201      	movs	r2, #1
 800cd02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800cd06:	2301      	movs	r3, #1
 800cd08:	e000      	b.n	800cd0c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800cd0a:	2300      	movs	r3, #0
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3728      	adds	r7, #40	@ 0x28
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bdb0      	pop	{r4, r5, r7, pc}
 800cd14:	004005ff 	.word	0x004005ff

0800cd18 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b08c      	sub	sp, #48	@ 0x30
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	607a      	str	r2, [r7, #4]
 800cd24:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d107      	bne.n	800cd40 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd34:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	e0c3      	b.n	800cec8 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cd46:	b2db      	uxtb	r3, r3
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	f040 80bc 	bne.w	800cec6 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2200      	movs	r2, #0
 800cd52:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cd54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	441a      	add	r2, r3
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d907      	bls.n	800cd72 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd66:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	e0aa      	b.n	800cec8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2203      	movs	r2, #3
 800cd76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800cd90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd96:	4a4e      	ldr	r2, [pc, #312]	@ (800ced0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800cd98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd9e:	4a4d      	ldr	r2, [pc, #308]	@ (800ced4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800cda0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cda6:	2200      	movs	r2, #0
 800cda8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdae:	2200      	movs	r2, #0
 800cdb0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdc2:	689a      	ldr	r2, [r3, #8]
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	430a      	orrs	r2, r1
 800cdcc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	3380      	adds	r3, #128	@ 0x80
 800cdd8:	4619      	mov	r1, r3
 800cdda:	68ba      	ldr	r2, [r7, #8]
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	025b      	lsls	r3, r3, #9
 800cde0:	089b      	lsrs	r3, r3, #2
 800cde2:	f7fb fdb9 	bl	8008958 <HAL_DMA_Start_IT>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d017      	beq.n	800ce1c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800cdfa:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a35      	ldr	r2, [pc, #212]	@ (800ced8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800ce02:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce08:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2201      	movs	r2, #1
 800ce14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800ce18:	2301      	movs	r3, #1
 800ce1a:	e055      	b.n	800cec8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f042 0208 	orr.w	r2, r2, #8
 800ce2a:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce30:	2b01      	cmp	r3, #1
 800ce32:	d002      	beq.n	800ce3a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800ce34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce36:	025b      	lsls	r3, r3, #9
 800ce38:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ce3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ce3e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	025b      	lsls	r3, r3, #9
 800ce44:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ce46:	2390      	movs	r3, #144	@ 0x90
 800ce48:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ce4a:	2302      	movs	r3, #2
 800ce4c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800ce52:	2301      	movs	r3, #1
 800ce54:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f107 0210 	add.w	r2, r7, #16
 800ce5e:	4611      	mov	r1, r2
 800ce60:	4618      	mov	r0, r3
 800ce62:	f001 fe95 	bl	800eb90 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	2b01      	cmp	r3, #1
 800ce6a:	d90a      	bls.n	800ce82 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2282      	movs	r2, #130	@ 0x82
 800ce70:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f001 fef9 	bl	800ec70 <SDMMC_CmdReadMultiBlock>
 800ce7e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800ce80:	e009      	b.n	800ce96 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	2281      	movs	r2, #129	@ 0x81
 800ce86:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f001 fecc 	bl	800ec2c <SDMMC_CmdReadSingleBlock>
 800ce94:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800ce96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d012      	beq.n	800cec2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4a0d      	ldr	r2, [pc, #52]	@ (800ced8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800cea2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceaa:	431a      	orrs	r2, r3
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	2200      	movs	r2, #0
 800cebc:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800cebe:	2301      	movs	r3, #1
 800cec0:	e002      	b.n	800cec8 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800cec2:	2300      	movs	r3, #0
 800cec4:	e000      	b.n	800cec8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800cec6:	2302      	movs	r3, #2
  }
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3730      	adds	r7, #48	@ 0x30
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}
 800ced0:	0800d4c7 	.word	0x0800d4c7
 800ced4:	0800d539 	.word	0x0800d539
 800ced8:	004005ff 	.word	0x004005ff

0800cedc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b08c      	sub	sp, #48	@ 0x30
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	60b9      	str	r1, [r7, #8]
 800cee6:	607a      	str	r2, [r7, #4]
 800cee8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d107      	bne.n	800cf04 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cef8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cf00:	2301      	movs	r3, #1
 800cf02:	e0c6      	b.n	800d092 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cf0a:	b2db      	uxtb	r3, r3
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	f040 80bf 	bne.w	800d090 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	2200      	movs	r2, #0
 800cf16:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cf18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	441a      	add	r2, r3
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d907      	bls.n	800cf36 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf2a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800cf32:	2301      	movs	r3, #1
 800cf34:	e0ad      	b.n	800d092 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	2203      	movs	r2, #3
 800cf3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	2200      	movs	r2, #0
 800cf44:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f042 021a 	orr.w	r2, r2, #26
 800cf54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf5a:	4a50      	ldr	r2, [pc, #320]	@ (800d09c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800cf5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf62:	4a4f      	ldr	r2, [pc, #316]	@ (800d0a0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800cf64:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	d002      	beq.n	800cf7c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800cf76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf78:	025b      	lsls	r3, r3, #9
 800cf7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d90a      	bls.n	800cf98 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	22a0      	movs	r2, #160	@ 0xa0
 800cf86:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f001 feb2 	bl	800ecf8 <SDMMC_CmdWriteMultiBlock>
 800cf94:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800cf96:	e009      	b.n	800cfac <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2290      	movs	r2, #144	@ 0x90
 800cf9c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f001 fe85 	bl	800ecb4 <SDMMC_CmdWriteSingleBlock>
 800cfaa:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cfac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d012      	beq.n	800cfd8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	4a3b      	ldr	r2, [pc, #236]	@ (800d0a4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800cfb8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cfbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfc0:	431a      	orrs	r2, r3
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2201      	movs	r2, #1
 800cfca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	e05c      	b.n	800d092 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f042 0208 	orr.w	r2, r2, #8
 800cfe6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfec:	2240      	movs	r2, #64	@ 0x40
 800cfee:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d000:	689a      	ldr	r2, [r3, #8]
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	430a      	orrs	r2, r1
 800d00a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d010:	68b9      	ldr	r1, [r7, #8]
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	3380      	adds	r3, #128	@ 0x80
 800d018:	461a      	mov	r2, r3
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	025b      	lsls	r3, r3, #9
 800d01e:	089b      	lsrs	r3, r3, #2
 800d020:	f7fb fc9a 	bl	8008958 <HAL_DMA_Start_IT>
 800d024:	4603      	mov	r3, r0
 800d026:	2b00      	cmp	r3, #0
 800d028:	d01a      	beq.n	800d060 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	f022 021a 	bic.w	r2, r2, #26
 800d038:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	4a19      	ldr	r2, [pc, #100]	@ (800d0a4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d040:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d046:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2201      	movs	r2, #1
 800d052:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2200      	movs	r2, #0
 800d05a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d05c:	2301      	movs	r3, #1
 800d05e:	e018      	b.n	800d092 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d060:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d064:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	025b      	lsls	r3, r3, #9
 800d06a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d06c:	2390      	movs	r3, #144	@ 0x90
 800d06e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d070:	2300      	movs	r3, #0
 800d072:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d074:	2300      	movs	r3, #0
 800d076:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800d078:	2301      	movs	r3, #1
 800d07a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f107 0210 	add.w	r2, r7, #16
 800d084:	4611      	mov	r1, r2
 800d086:	4618      	mov	r0, r3
 800d088:	f001 fd82 	bl	800eb90 <SDMMC_ConfigData>

      return HAL_OK;
 800d08c:	2300      	movs	r3, #0
 800d08e:	e000      	b.n	800d092 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800d090:	2302      	movs	r3, #2
  }
}
 800d092:	4618      	mov	r0, r3
 800d094:	3730      	adds	r7, #48	@ 0x30
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
 800d09a:	bf00      	nop
 800d09c:	0800d49d 	.word	0x0800d49d
 800d0a0:	0800d539 	.word	0x0800d539
 800d0a4:	004005ff 	.word	0x004005ff

0800d0a8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b083      	sub	sp, #12
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d0b0:	bf00      	nop
 800d0b2:	370c      	adds	r7, #12
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr

0800d0bc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b083      	sub	sp, #12
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0ca:	0f9b      	lsrs	r3, r3, #30
 800d0cc:	b2da      	uxtb	r2, r3
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0d6:	0e9b      	lsrs	r3, r3, #26
 800d0d8:	b2db      	uxtb	r3, r3
 800d0da:	f003 030f 	and.w	r3, r3, #15
 800d0de:	b2da      	uxtb	r2, r3
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0e8:	0e1b      	lsrs	r3, r3, #24
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	f003 0303 	and.w	r3, r3, #3
 800d0f0:	b2da      	uxtb	r2, r3
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0fa:	0c1b      	lsrs	r3, r3, #16
 800d0fc:	b2da      	uxtb	r2, r3
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d106:	0a1b      	lsrs	r3, r3, #8
 800d108:	b2da      	uxtb	r2, r3
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d112:	b2da      	uxtb	r2, r3
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d11c:	0d1b      	lsrs	r3, r3, #20
 800d11e:	b29a      	uxth	r2, r3
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d128:	0c1b      	lsrs	r3, r3, #16
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	f003 030f 	and.w	r3, r3, #15
 800d130:	b2da      	uxtb	r2, r3
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d13a:	0bdb      	lsrs	r3, r3, #15
 800d13c:	b2db      	uxtb	r3, r3
 800d13e:	f003 0301 	and.w	r3, r3, #1
 800d142:	b2da      	uxtb	r2, r3
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d14c:	0b9b      	lsrs	r3, r3, #14
 800d14e:	b2db      	uxtb	r3, r3
 800d150:	f003 0301 	and.w	r3, r3, #1
 800d154:	b2da      	uxtb	r2, r3
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d15e:	0b5b      	lsrs	r3, r3, #13
 800d160:	b2db      	uxtb	r3, r3
 800d162:	f003 0301 	and.w	r3, r3, #1
 800d166:	b2da      	uxtb	r2, r3
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d170:	0b1b      	lsrs	r3, r3, #12
 800d172:	b2db      	uxtb	r3, r3
 800d174:	f003 0301 	and.w	r3, r3, #1
 800d178:	b2da      	uxtb	r2, r3
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	2200      	movs	r2, #0
 800d182:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d163      	bne.n	800d254 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d190:	009a      	lsls	r2, r3, #2
 800d192:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800d196:	4013      	ands	r3, r2
 800d198:	687a      	ldr	r2, [r7, #4]
 800d19a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800d19c:	0f92      	lsrs	r2, r2, #30
 800d19e:	431a      	orrs	r2, r3
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1a8:	0edb      	lsrs	r3, r3, #27
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	f003 0307 	and.w	r3, r3, #7
 800d1b0:	b2da      	uxtb	r2, r3
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1ba:	0e1b      	lsrs	r3, r3, #24
 800d1bc:	b2db      	uxtb	r3, r3
 800d1be:	f003 0307 	and.w	r3, r3, #7
 800d1c2:	b2da      	uxtb	r2, r3
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1cc:	0d5b      	lsrs	r3, r3, #21
 800d1ce:	b2db      	uxtb	r3, r3
 800d1d0:	f003 0307 	and.w	r3, r3, #7
 800d1d4:	b2da      	uxtb	r2, r3
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1de:	0c9b      	lsrs	r3, r3, #18
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	f003 0307 	and.w	r3, r3, #7
 800d1e6:	b2da      	uxtb	r2, r3
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1f0:	0bdb      	lsrs	r3, r3, #15
 800d1f2:	b2db      	uxtb	r3, r3
 800d1f4:	f003 0307 	and.w	r3, r3, #7
 800d1f8:	b2da      	uxtb	r2, r3
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	691b      	ldr	r3, [r3, #16]
 800d202:	1c5a      	adds	r2, r3, #1
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	7e1b      	ldrb	r3, [r3, #24]
 800d20c:	b2db      	uxtb	r3, r3
 800d20e:	f003 0307 	and.w	r3, r3, #7
 800d212:	3302      	adds	r3, #2
 800d214:	2201      	movs	r2, #1
 800d216:	fa02 f303 	lsl.w	r3, r2, r3
 800d21a:	687a      	ldr	r2, [r7, #4]
 800d21c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800d21e:	fb03 f202 	mul.w	r2, r3, r2
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	7a1b      	ldrb	r3, [r3, #8]
 800d22a:	b2db      	uxtb	r3, r3
 800d22c:	f003 030f 	and.w	r3, r3, #15
 800d230:	2201      	movs	r2, #1
 800d232:	409a      	lsls	r2, r3
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d23c:	687a      	ldr	r2, [r7, #4]
 800d23e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800d240:	0a52      	lsrs	r2, r2, #9
 800d242:	fb03 f202 	mul.w	r2, r3, r2
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d250:	661a      	str	r2, [r3, #96]	@ 0x60
 800d252:	e031      	b.n	800d2b8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d11d      	bne.n	800d298 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d260:	041b      	lsls	r3, r3, #16
 800d262:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d26a:	0c1b      	lsrs	r3, r3, #16
 800d26c:	431a      	orrs	r2, r3
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	691b      	ldr	r3, [r3, #16]
 800d276:	3301      	adds	r3, #1
 800d278:	029a      	lsls	r2, r3, #10
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d28c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	661a      	str	r2, [r3, #96]	@ 0x60
 800d296:	e00f      	b.n	800d2b8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a58      	ldr	r2, [pc, #352]	@ (800d400 <HAL_SD_GetCardCSD+0x344>)
 800d29e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	e09d      	b.n	800d3f4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2bc:	0b9b      	lsrs	r3, r3, #14
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	f003 0301 	and.w	r3, r3, #1
 800d2c4:	b2da      	uxtb	r2, r3
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2ce:	09db      	lsrs	r3, r3, #7
 800d2d0:	b2db      	uxtb	r3, r3
 800d2d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d2d6:	b2da      	uxtb	r2, r3
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d2e6:	b2da      	uxtb	r2, r3
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d2f0:	0fdb      	lsrs	r3, r3, #31
 800d2f2:	b2da      	uxtb	r2, r3
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d2fc:	0f5b      	lsrs	r3, r3, #29
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	f003 0303 	and.w	r3, r3, #3
 800d304:	b2da      	uxtb	r2, r3
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d30e:	0e9b      	lsrs	r3, r3, #26
 800d310:	b2db      	uxtb	r3, r3
 800d312:	f003 0307 	and.w	r3, r3, #7
 800d316:	b2da      	uxtb	r2, r3
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d320:	0d9b      	lsrs	r3, r3, #22
 800d322:	b2db      	uxtb	r3, r3
 800d324:	f003 030f 	and.w	r3, r3, #15
 800d328:	b2da      	uxtb	r2, r3
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d332:	0d5b      	lsrs	r3, r3, #21
 800d334:	b2db      	uxtb	r3, r3
 800d336:	f003 0301 	and.w	r3, r3, #1
 800d33a:	b2da      	uxtb	r2, r3
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	2200      	movs	r2, #0
 800d346:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d34e:	0c1b      	lsrs	r3, r3, #16
 800d350:	b2db      	uxtb	r3, r3
 800d352:	f003 0301 	and.w	r3, r3, #1
 800d356:	b2da      	uxtb	r2, r3
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d362:	0bdb      	lsrs	r3, r3, #15
 800d364:	b2db      	uxtb	r3, r3
 800d366:	f003 0301 	and.w	r3, r3, #1
 800d36a:	b2da      	uxtb	r2, r3
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d376:	0b9b      	lsrs	r3, r3, #14
 800d378:	b2db      	uxtb	r3, r3
 800d37a:	f003 0301 	and.w	r3, r3, #1
 800d37e:	b2da      	uxtb	r2, r3
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d38a:	0b5b      	lsrs	r3, r3, #13
 800d38c:	b2db      	uxtb	r3, r3
 800d38e:	f003 0301 	and.w	r3, r3, #1
 800d392:	b2da      	uxtb	r2, r3
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d39e:	0b1b      	lsrs	r3, r3, #12
 800d3a0:	b2db      	uxtb	r3, r3
 800d3a2:	f003 0301 	and.w	r3, r3, #1
 800d3a6:	b2da      	uxtb	r2, r3
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3b2:	0a9b      	lsrs	r3, r3, #10
 800d3b4:	b2db      	uxtb	r3, r3
 800d3b6:	f003 0303 	and.w	r3, r3, #3
 800d3ba:	b2da      	uxtb	r2, r3
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3c6:	0a1b      	lsrs	r3, r3, #8
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	f003 0303 	and.w	r3, r3, #3
 800d3ce:	b2da      	uxtb	r2, r3
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3da:	085b      	lsrs	r3, r3, #1
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3e2:	b2da      	uxtb	r2, r3
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800d3f2:	2300      	movs	r3, #0
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	370c      	adds	r7, #12
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr
 800d400:	004005ff 	.word	0x004005ff

0800d404 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d404:	b480      	push	{r7}
 800d406:	b083      	sub	sp, #12
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d44e:	2300      	movs	r3, #0
}
 800d450:	4618      	mov	r0, r3
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b086      	sub	sp, #24
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d464:	2300      	movs	r3, #0
 800d466:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d468:	f107 030c 	add.w	r3, r7, #12
 800d46c:	4619      	mov	r1, r3
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f000 fa10 	bl	800d894 <SD_SendStatus>
 800d474:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d005      	beq.n	800d488 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	431a      	orrs	r2, r3
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	0a5b      	lsrs	r3, r3, #9
 800d48c:	f003 030f 	and.w	r3, r3, #15
 800d490:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d492:	693b      	ldr	r3, [r7, #16]
}
 800d494:	4618      	mov	r0, r3
 800d496:	3718      	adds	r7, #24
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b085      	sub	sp, #20
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4a8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d4b8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800d4ba:	bf00      	nop
 800d4bc:	3714      	adds	r7, #20
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c4:	4770      	bx	lr

0800d4c6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d4c6:	b580      	push	{r7, lr}
 800d4c8:	b084      	sub	sp, #16
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4d2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4d8:	2b82      	cmp	r3, #130	@ 0x82
 800d4da:	d111      	bne.n	800d500 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f001 fc2b 	bl	800ed3c <SDMMC_CmdStopTransfer>
 800d4e6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d008      	beq.n	800d500 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	431a      	orrs	r2, r3
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d4fa:	68f8      	ldr	r0, [r7, #12]
 800d4fc:	f7ff fdd4 	bl	800d0a8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	f022 0208 	bic.w	r2, r2, #8
 800d50e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d518:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	2201      	movs	r2, #1
 800d51e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	2200      	movs	r2, #0
 800d526:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d528:	68f8      	ldr	r0, [r7, #12]
 800d52a:	f002 f837 	bl	800f59c <HAL_SD_RxCpltCallback>
#endif
}
 800d52e:	bf00      	nop
 800d530:	3710      	adds	r7, #16
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
	...

0800d538 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b086      	sub	sp, #24
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d544:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f7fb fbf0 	bl	8008d2c <HAL_DMA_GetError>
 800d54c:	4603      	mov	r3, r0
 800d54e:	2b02      	cmp	r3, #2
 800d550:	d03e      	beq.n	800d5d0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d558:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d55e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d560:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	2b01      	cmp	r3, #1
 800d566:	d002      	beq.n	800d56e <SD_DMAError+0x36>
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2b01      	cmp	r3, #1
 800d56c:	d12d      	bne.n	800d5ca <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	4a19      	ldr	r2, [pc, #100]	@ (800d5d8 <SD_DMAError+0xa0>)
 800d574:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800d584:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d58a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d592:	6978      	ldr	r0, [r7, #20]
 800d594:	f7ff ff62 	bl	800d45c <HAL_SD_GetCardState>
 800d598:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	2b06      	cmp	r3, #6
 800d59e:	d002      	beq.n	800d5a6 <SD_DMAError+0x6e>
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	2b05      	cmp	r3, #5
 800d5a4:	d10a      	bne.n	800d5bc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f001 fbc6 	bl	800ed3c <SDMMC_CmdStopTransfer>
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5b6:	431a      	orrs	r2, r3
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	2201      	movs	r2, #1
 800d5c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d5ca:	6978      	ldr	r0, [r7, #20]
 800d5cc:	f7ff fd6c 	bl	800d0a8 <HAL_SD_ErrorCallback>
#endif
  }
}
 800d5d0:	bf00      	nop
 800d5d2:	3718      	adds	r7, #24
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	004005ff 	.word	0x004005ff

0800d5dc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d5dc:	b5b0      	push	{r4, r5, r7, lr}
 800d5de:	b094      	sub	sp, #80	@ 0x50
 800d5e0:	af04      	add	r7, sp, #16
 800d5e2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f001 fa77 	bl	800eae0 <SDMMC_GetPowerState>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d102      	bne.n	800d5fe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d5f8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d5fc:	e0b8      	b.n	800d770 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d602:	2b03      	cmp	r3, #3
 800d604:	d02f      	beq.n	800d666 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4618      	mov	r0, r3
 800d60c:	f001 fc5e 	bl	800eecc <SDMMC_CmdSendCID>
 800d610:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d614:	2b00      	cmp	r3, #0
 800d616:	d001      	beq.n	800d61c <SD_InitCard+0x40>
    {
      return errorstate;
 800d618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d61a:	e0a9      	b.n	800d770 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	2100      	movs	r1, #0
 800d622:	4618      	mov	r0, r3
 800d624:	f001 faa1 	bl	800eb6a <SDMMC_GetResponse>
 800d628:	4602      	mov	r2, r0
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	2104      	movs	r1, #4
 800d634:	4618      	mov	r0, r3
 800d636:	f001 fa98 	bl	800eb6a <SDMMC_GetResponse>
 800d63a:	4602      	mov	r2, r0
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	2108      	movs	r1, #8
 800d646:	4618      	mov	r0, r3
 800d648:	f001 fa8f 	bl	800eb6a <SDMMC_GetResponse>
 800d64c:	4602      	mov	r2, r0
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	210c      	movs	r1, #12
 800d658:	4618      	mov	r0, r3
 800d65a:	f001 fa86 	bl	800eb6a <SDMMC_GetResponse>
 800d65e:	4602      	mov	r2, r0
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d66a:	2b03      	cmp	r3, #3
 800d66c:	d00d      	beq.n	800d68a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f107 020e 	add.w	r2, r7, #14
 800d676:	4611      	mov	r1, r2
 800d678:	4618      	mov	r0, r3
 800d67a:	f001 fc64 	bl	800ef46 <SDMMC_CmdSetRelAdd>
 800d67e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d682:	2b00      	cmp	r3, #0
 800d684:	d001      	beq.n	800d68a <SD_InitCard+0xae>
    {
      return errorstate;
 800d686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d688:	e072      	b.n	800d770 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d68e:	2b03      	cmp	r3, #3
 800d690:	d036      	beq.n	800d700 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d692:	89fb      	ldrh	r3, [r7, #14]
 800d694:	461a      	mov	r2, r3
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d6a2:	041b      	lsls	r3, r3, #16
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	4610      	mov	r0, r2
 800d6a8:	f001 fc2e 	bl	800ef08 <SDMMC_CmdSendCSD>
 800d6ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d6ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d001      	beq.n	800d6b8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d6b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6b6:	e05b      	b.n	800d770 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	2100      	movs	r1, #0
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f001 fa53 	bl	800eb6a <SDMMC_GetResponse>
 800d6c4:	4602      	mov	r2, r0
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	2104      	movs	r1, #4
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f001 fa4a 	bl	800eb6a <SDMMC_GetResponse>
 800d6d6:	4602      	mov	r2, r0
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	2108      	movs	r1, #8
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f001 fa41 	bl	800eb6a <SDMMC_GetResponse>
 800d6e8:	4602      	mov	r2, r0
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	210c      	movs	r1, #12
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f001 fa38 	bl	800eb6a <SDMMC_GetResponse>
 800d6fa:	4602      	mov	r2, r0
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	2104      	movs	r1, #4
 800d706:	4618      	mov	r0, r3
 800d708:	f001 fa2f 	bl	800eb6a <SDMMC_GetResponse>
 800d70c:	4603      	mov	r3, r0
 800d70e:	0d1a      	lsrs	r2, r3, #20
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d714:	f107 0310 	add.w	r3, r7, #16
 800d718:	4619      	mov	r1, r3
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f7ff fcce 	bl	800d0bc <HAL_SD_GetCardCSD>
 800d720:	4603      	mov	r3, r0
 800d722:	2b00      	cmp	r3, #0
 800d724:	d002      	beq.n	800d72c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d726:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d72a:	e021      	b.n	800d770 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6819      	ldr	r1, [r3, #0]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d734:	041b      	lsls	r3, r3, #16
 800d736:	2200      	movs	r2, #0
 800d738:	461c      	mov	r4, r3
 800d73a:	4615      	mov	r5, r2
 800d73c:	4622      	mov	r2, r4
 800d73e:	462b      	mov	r3, r5
 800d740:	4608      	mov	r0, r1
 800d742:	f001 fb1d 	bl	800ed80 <SDMMC_CmdSelDesel>
 800d746:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d001      	beq.n	800d752 <SD_InitCard+0x176>
  {
    return errorstate;
 800d74e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d750:	e00e      	b.n	800d770 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681d      	ldr	r5, [r3, #0]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	466c      	mov	r4, sp
 800d75a:	f103 0210 	add.w	r2, r3, #16
 800d75e:	ca07      	ldmia	r2, {r0, r1, r2}
 800d760:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d764:	3304      	adds	r3, #4
 800d766:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d768:	4628      	mov	r0, r5
 800d76a:	f001 f97f 	bl	800ea6c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d76e:	2300      	movs	r3, #0
}
 800d770:	4618      	mov	r0, r3
 800d772:	3740      	adds	r7, #64	@ 0x40
 800d774:	46bd      	mov	sp, r7
 800d776:	bdb0      	pop	{r4, r5, r7, pc}

0800d778 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b086      	sub	sp, #24
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d780:	2300      	movs	r3, #0
 800d782:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d784:	2300      	movs	r3, #0
 800d786:	617b      	str	r3, [r7, #20]
 800d788:	2300      	movs	r3, #0
 800d78a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	4618      	mov	r0, r3
 800d792:	f001 fb18 	bl	800edc6 <SDMMC_CmdGoIdleState>
 800d796:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d001      	beq.n	800d7a2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	e072      	b.n	800d888 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f001 fb2b 	bl	800ee02 <SDMMC_CmdOperCond>
 800d7ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d00d      	beq.n	800d7d0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f001 fb01 	bl	800edc6 <SDMMC_CmdGoIdleState>
 800d7c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d004      	beq.n	800d7d6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	e05b      	b.n	800d888 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d7da:	2b01      	cmp	r3, #1
 800d7dc:	d137      	bne.n	800d84e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	2100      	movs	r1, #0
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f001 fb2b 	bl	800ee40 <SDMMC_CmdAppCommand>
 800d7ea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d02d      	beq.n	800d84e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d7f2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d7f6:	e047      	b.n	800d888 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	2100      	movs	r1, #0
 800d7fe:	4618      	mov	r0, r3
 800d800:	f001 fb1e 	bl	800ee40 <SDMMC_CmdAppCommand>
 800d804:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d001      	beq.n	800d810 <SD_PowerON+0x98>
    {
      return errorstate;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	e03b      	b.n	800d888 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	491e      	ldr	r1, [pc, #120]	@ (800d890 <SD_PowerON+0x118>)
 800d816:	4618      	mov	r0, r3
 800d818:	f001 fb34 	bl	800ee84 <SDMMC_CmdAppOperCommand>
 800d81c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d002      	beq.n	800d82a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d824:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d828:	e02e      	b.n	800d888 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	2100      	movs	r1, #0
 800d830:	4618      	mov	r0, r3
 800d832:	f001 f99a 	bl	800eb6a <SDMMC_GetResponse>
 800d836:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	0fdb      	lsrs	r3, r3, #31
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d101      	bne.n	800d844 <SD_PowerON+0xcc>
 800d840:	2301      	movs	r3, #1
 800d842:	e000      	b.n	800d846 <SD_PowerON+0xce>
 800d844:	2300      	movs	r3, #0
 800d846:	613b      	str	r3, [r7, #16]

    count++;
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	3301      	adds	r3, #1
 800d84c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d854:	4293      	cmp	r3, r2
 800d856:	d802      	bhi.n	800d85e <SD_PowerON+0xe6>
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d0cc      	beq.n	800d7f8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d864:	4293      	cmp	r3, r2
 800d866:	d902      	bls.n	800d86e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d868:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d86c:	e00c      	b.n	800d888 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d874:	2b00      	cmp	r3, #0
 800d876:	d003      	beq.n	800d880 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2201      	movs	r2, #1
 800d87c:	645a      	str	r2, [r3, #68]	@ 0x44
 800d87e:	e002      	b.n	800d886 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2200      	movs	r2, #0
 800d884:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d886:	2300      	movs	r3, #0
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3718      	adds	r7, #24
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}
 800d890:	c1100000 	.word	0xc1100000

0800d894 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b084      	sub	sp, #16
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d102      	bne.n	800d8aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d8a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d8a8:	e018      	b.n	800d8dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681a      	ldr	r2, [r3, #0]
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d8b2:	041b      	lsls	r3, r3, #16
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	4610      	mov	r0, r2
 800d8b8:	f001 fb66 	bl	800ef88 <SDMMC_CmdSendStatus>
 800d8bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d001      	beq.n	800d8c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	e009      	b.n	800d8dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	2100      	movs	r1, #0
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f001 f94b 	bl	800eb6a <SDMMC_GetResponse>
 800d8d4:	4602      	mov	r2, r0
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d8da:	2300      	movs	r3, #0
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3710      	adds	r7, #16
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b082      	sub	sp, #8
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d101      	bne.n	800d8f8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	e025      	b.n	800d944 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d8fe:	b2db      	uxtb	r3, r3
 800d900:	2b00      	cmp	r3, #0
 800d902:	d106      	bne.n	800d912 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2200      	movs	r2, #0
 800d908:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f7f3 fcb5 	bl	800127c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2202      	movs	r2, #2
 800d916:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	3304      	adds	r3, #4
 800d922:	4619      	mov	r1, r3
 800d924:	4610      	mov	r0, r2
 800d926:	f000 ff9f 	bl	800e868 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6818      	ldr	r0, [r3, #0]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	685b      	ldr	r3, [r3, #4]
 800d932:	461a      	mov	r2, r3
 800d934:	6839      	ldr	r1, [r7, #0]
 800d936:	f000 fff3 	bl	800e920 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2201      	movs	r2, #1
 800d93e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d942:	2300      	movs	r3, #0
}
 800d944:	4618      	mov	r0, r3
 800d946:	3708      	adds	r7, #8
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}

0800d94c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b086      	sub	sp, #24
 800d950:	af00      	add	r7, sp, #0
 800d952:	60f8      	str	r0, [r7, #12]
 800d954:	60b9      	str	r1, [r7, #8]
 800d956:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d95e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d960:	7dfb      	ldrb	r3, [r7, #23]
 800d962:	2b02      	cmp	r3, #2
 800d964:	d101      	bne.n	800d96a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800d966:	2302      	movs	r3, #2
 800d968:	e021      	b.n	800d9ae <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d96a:	7dfb      	ldrb	r3, [r7, #23]
 800d96c:	2b01      	cmp	r3, #1
 800d96e:	d002      	beq.n	800d976 <HAL_SDRAM_SendCommand+0x2a>
 800d970:	7dfb      	ldrb	r3, [r7, #23]
 800d972:	2b05      	cmp	r3, #5
 800d974:	d118      	bne.n	800d9a8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2202      	movs	r2, #2
 800d97a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	687a      	ldr	r2, [r7, #4]
 800d984:	68b9      	ldr	r1, [r7, #8]
 800d986:	4618      	mov	r0, r3
 800d988:	f001 f834 	bl	800e9f4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	2b02      	cmp	r3, #2
 800d992:	d104      	bne.n	800d99e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	2205      	movs	r2, #5
 800d998:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d99c:	e006      	b.n	800d9ac <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d9a6:	e001      	b.n	800d9ac <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	e000      	b.n	800d9ae <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800d9ac:	2300      	movs	r3, #0
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3718      	adds	r7, #24
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}

0800d9b6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d9b6:	b580      	push	{r7, lr}
 800d9b8:	b082      	sub	sp, #8
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
 800d9be:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	2b02      	cmp	r3, #2
 800d9ca:	d101      	bne.n	800d9d0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800d9cc:	2302      	movs	r3, #2
 800d9ce:	e016      	b.n	800d9fe <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d9d6:	b2db      	uxtb	r3, r3
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d10f      	bne.n	800d9fc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2202      	movs	r2, #2
 800d9e0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	6839      	ldr	r1, [r7, #0]
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f001 f826 	bl	800ea3c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	e000      	b.n	800d9fe <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800d9fc:	2301      	movs	r3, #1
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3708      	adds	r7, #8
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}

0800da06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800da06:	b580      	push	{r7, lr}
 800da08:	b082      	sub	sp, #8
 800da0a:	af00      	add	r7, sp, #0
 800da0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d101      	bne.n	800da18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800da14:	2301      	movs	r3, #1
 800da16:	e049      	b.n	800daac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800da1e:	b2db      	uxtb	r3, r3
 800da20:	2b00      	cmp	r3, #0
 800da22:	d106      	bne.n	800da32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2200      	movs	r2, #0
 800da28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f000 f841 	bl	800dab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2202      	movs	r2, #2
 800da36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681a      	ldr	r2, [r3, #0]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	3304      	adds	r3, #4
 800da42:	4619      	mov	r1, r3
 800da44:	4610      	mov	r0, r2
 800da46:	f000 f9ff 	bl	800de48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2201      	movs	r2, #1
 800da4e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2201      	movs	r2, #1
 800da56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2201      	movs	r2, #1
 800da5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2201      	movs	r2, #1
 800da66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2201      	movs	r2, #1
 800da6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2201      	movs	r2, #1
 800da76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2201      	movs	r2, #1
 800da7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2201      	movs	r2, #1
 800da86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2201      	movs	r2, #1
 800da8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2201      	movs	r2, #1
 800da96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2201      	movs	r2, #1
 800da9e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2201      	movs	r2, #1
 800daa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800daaa:	2300      	movs	r3, #0
}
 800daac:	4618      	mov	r0, r3
 800daae:	3708      	adds	r7, #8
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b083      	sub	sp, #12
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800dabc:	bf00      	nop
 800dabe:	370c      	adds	r7, #12
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr

0800dac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dac8:	b480      	push	{r7}
 800daca:	b085      	sub	sp, #20
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dad6:	b2db      	uxtb	r3, r3
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d001      	beq.n	800dae0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dadc:	2301      	movs	r3, #1
 800dade:	e054      	b.n	800db8a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2202      	movs	r2, #2
 800dae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	68da      	ldr	r2, [r3, #12]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f042 0201 	orr.w	r2, r2, #1
 800daf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4a26      	ldr	r2, [pc, #152]	@ (800db98 <HAL_TIM_Base_Start_IT+0xd0>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	d022      	beq.n	800db48 <HAL_TIM_Base_Start_IT+0x80>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db0a:	d01d      	beq.n	800db48 <HAL_TIM_Base_Start_IT+0x80>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	4a22      	ldr	r2, [pc, #136]	@ (800db9c <HAL_TIM_Base_Start_IT+0xd4>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d018      	beq.n	800db48 <HAL_TIM_Base_Start_IT+0x80>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	4a21      	ldr	r2, [pc, #132]	@ (800dba0 <HAL_TIM_Base_Start_IT+0xd8>)
 800db1c:	4293      	cmp	r3, r2
 800db1e:	d013      	beq.n	800db48 <HAL_TIM_Base_Start_IT+0x80>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	4a1f      	ldr	r2, [pc, #124]	@ (800dba4 <HAL_TIM_Base_Start_IT+0xdc>)
 800db26:	4293      	cmp	r3, r2
 800db28:	d00e      	beq.n	800db48 <HAL_TIM_Base_Start_IT+0x80>
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	4a1e      	ldr	r2, [pc, #120]	@ (800dba8 <HAL_TIM_Base_Start_IT+0xe0>)
 800db30:	4293      	cmp	r3, r2
 800db32:	d009      	beq.n	800db48 <HAL_TIM_Base_Start_IT+0x80>
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4a1c      	ldr	r2, [pc, #112]	@ (800dbac <HAL_TIM_Base_Start_IT+0xe4>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d004      	beq.n	800db48 <HAL_TIM_Base_Start_IT+0x80>
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	4a1b      	ldr	r2, [pc, #108]	@ (800dbb0 <HAL_TIM_Base_Start_IT+0xe8>)
 800db44:	4293      	cmp	r3, r2
 800db46:	d115      	bne.n	800db74 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	689a      	ldr	r2, [r3, #8]
 800db4e:	4b19      	ldr	r3, [pc, #100]	@ (800dbb4 <HAL_TIM_Base_Start_IT+0xec>)
 800db50:	4013      	ands	r3, r2
 800db52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	2b06      	cmp	r3, #6
 800db58:	d015      	beq.n	800db86 <HAL_TIM_Base_Start_IT+0xbe>
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db60:	d011      	beq.n	800db86 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	681a      	ldr	r2, [r3, #0]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	f042 0201 	orr.w	r2, r2, #1
 800db70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db72:	e008      	b.n	800db86 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	681a      	ldr	r2, [r3, #0]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f042 0201 	orr.w	r2, r2, #1
 800db82:	601a      	str	r2, [r3, #0]
 800db84:	e000      	b.n	800db88 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800db88:	2300      	movs	r3, #0
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3714      	adds	r7, #20
 800db8e:	46bd      	mov	sp, r7
 800db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db94:	4770      	bx	lr
 800db96:	bf00      	nop
 800db98:	40010000 	.word	0x40010000
 800db9c:	40000400 	.word	0x40000400
 800dba0:	40000800 	.word	0x40000800
 800dba4:	40000c00 	.word	0x40000c00
 800dba8:	40010400 	.word	0x40010400
 800dbac:	40014000 	.word	0x40014000
 800dbb0:	40001800 	.word	0x40001800
 800dbb4:	00010007 	.word	0x00010007

0800dbb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	691b      	ldr	r3, [r3, #16]
 800dbc6:	f003 0302 	and.w	r3, r3, #2
 800dbca:	2b02      	cmp	r3, #2
 800dbcc:	d122      	bne.n	800dc14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	68db      	ldr	r3, [r3, #12]
 800dbd4:	f003 0302 	and.w	r3, r3, #2
 800dbd8:	2b02      	cmp	r3, #2
 800dbda:	d11b      	bne.n	800dc14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	f06f 0202 	mvn.w	r2, #2
 800dbe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2201      	movs	r2, #1
 800dbea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	699b      	ldr	r3, [r3, #24]
 800dbf2:	f003 0303 	and.w	r3, r3, #3
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d003      	beq.n	800dc02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f000 f905 	bl	800de0a <HAL_TIM_IC_CaptureCallback>
 800dc00:	e005      	b.n	800dc0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 f8f7 	bl	800ddf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f000 f908 	bl	800de1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2200      	movs	r2, #0
 800dc12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	691b      	ldr	r3, [r3, #16]
 800dc1a:	f003 0304 	and.w	r3, r3, #4
 800dc1e:	2b04      	cmp	r3, #4
 800dc20:	d122      	bne.n	800dc68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	f003 0304 	and.w	r3, r3, #4
 800dc2c:	2b04      	cmp	r3, #4
 800dc2e:	d11b      	bne.n	800dc68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f06f 0204 	mvn.w	r2, #4
 800dc38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2202      	movs	r2, #2
 800dc3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	699b      	ldr	r3, [r3, #24]
 800dc46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d003      	beq.n	800dc56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f000 f8db 	bl	800de0a <HAL_TIM_IC_CaptureCallback>
 800dc54:	e005      	b.n	800dc62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f000 f8cd 	bl	800ddf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f000 f8de 	bl	800de1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2200      	movs	r2, #0
 800dc66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	691b      	ldr	r3, [r3, #16]
 800dc6e:	f003 0308 	and.w	r3, r3, #8
 800dc72:	2b08      	cmp	r3, #8
 800dc74:	d122      	bne.n	800dcbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	68db      	ldr	r3, [r3, #12]
 800dc7c:	f003 0308 	and.w	r3, r3, #8
 800dc80:	2b08      	cmp	r3, #8
 800dc82:	d11b      	bne.n	800dcbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f06f 0208 	mvn.w	r2, #8
 800dc8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2204      	movs	r2, #4
 800dc92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	69db      	ldr	r3, [r3, #28]
 800dc9a:	f003 0303 	and.w	r3, r3, #3
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d003      	beq.n	800dcaa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 f8b1 	bl	800de0a <HAL_TIM_IC_CaptureCallback>
 800dca8:	e005      	b.n	800dcb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 f8a3 	bl	800ddf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f000 f8b4 	bl	800de1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	691b      	ldr	r3, [r3, #16]
 800dcc2:	f003 0310 	and.w	r3, r3, #16
 800dcc6:	2b10      	cmp	r3, #16
 800dcc8:	d122      	bne.n	800dd10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	68db      	ldr	r3, [r3, #12]
 800dcd0:	f003 0310 	and.w	r3, r3, #16
 800dcd4:	2b10      	cmp	r3, #16
 800dcd6:	d11b      	bne.n	800dd10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f06f 0210 	mvn.w	r2, #16
 800dce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2208      	movs	r2, #8
 800dce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	69db      	ldr	r3, [r3, #28]
 800dcee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d003      	beq.n	800dcfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f000 f887 	bl	800de0a <HAL_TIM_IC_CaptureCallback>
 800dcfc:	e005      	b.n	800dd0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 f879 	bl	800ddf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f000 f88a 	bl	800de1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	691b      	ldr	r3, [r3, #16]
 800dd16:	f003 0301 	and.w	r3, r3, #1
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	d10e      	bne.n	800dd3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	68db      	ldr	r3, [r3, #12]
 800dd24:	f003 0301 	and.w	r3, r3, #1
 800dd28:	2b01      	cmp	r3, #1
 800dd2a:	d107      	bne.n	800dd3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	f06f 0201 	mvn.w	r2, #1
 800dd34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f7f5 fcde 	bl	80036f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	691b      	ldr	r3, [r3, #16]
 800dd42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd46:	2b80      	cmp	r3, #128	@ 0x80
 800dd48:	d10e      	bne.n	800dd68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	68db      	ldr	r3, [r3, #12]
 800dd50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd54:	2b80      	cmp	r3, #128	@ 0x80
 800dd56:	d107      	bne.n	800dd68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800dd60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f000 f91a 	bl	800df9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	691b      	ldr	r3, [r3, #16]
 800dd6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dd76:	d10e      	bne.n	800dd96 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	68db      	ldr	r3, [r3, #12]
 800dd7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd82:	2b80      	cmp	r3, #128	@ 0x80
 800dd84:	d107      	bne.n	800dd96 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800dd8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f000 f90d 	bl	800dfb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	691b      	ldr	r3, [r3, #16]
 800dd9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dda0:	2b40      	cmp	r3, #64	@ 0x40
 800dda2:	d10e      	bne.n	800ddc2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	68db      	ldr	r3, [r3, #12]
 800ddaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ddae:	2b40      	cmp	r3, #64	@ 0x40
 800ddb0:	d107      	bne.n	800ddc2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ddba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f000 f838 	bl	800de32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	691b      	ldr	r3, [r3, #16]
 800ddc8:	f003 0320 	and.w	r3, r3, #32
 800ddcc:	2b20      	cmp	r3, #32
 800ddce:	d10e      	bne.n	800ddee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	68db      	ldr	r3, [r3, #12]
 800ddd6:	f003 0320 	and.w	r3, r3, #32
 800ddda:	2b20      	cmp	r3, #32
 800dddc:	d107      	bne.n	800ddee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f06f 0220 	mvn.w	r2, #32
 800dde6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f000 f8cd 	bl	800df88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ddee:	bf00      	nop
 800ddf0:	3708      	adds	r7, #8
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}

0800ddf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ddf6:	b480      	push	{r7}
 800ddf8:	b083      	sub	sp, #12
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ddfe:	bf00      	nop
 800de00:	370c      	adds	r7, #12
 800de02:	46bd      	mov	sp, r7
 800de04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de08:	4770      	bx	lr

0800de0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800de0a:	b480      	push	{r7}
 800de0c:	b083      	sub	sp, #12
 800de0e:	af00      	add	r7, sp, #0
 800de10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800de12:	bf00      	nop
 800de14:	370c      	adds	r7, #12
 800de16:	46bd      	mov	sp, r7
 800de18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1c:	4770      	bx	lr

0800de1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800de1e:	b480      	push	{r7}
 800de20:	b083      	sub	sp, #12
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800de26:	bf00      	nop
 800de28:	370c      	adds	r7, #12
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr

0800de32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800de32:	b480      	push	{r7}
 800de34:	b083      	sub	sp, #12
 800de36:	af00      	add	r7, sp, #0
 800de38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800de3a:	bf00      	nop
 800de3c:	370c      	adds	r7, #12
 800de3e:	46bd      	mov	sp, r7
 800de40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de44:	4770      	bx	lr
	...

0800de48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800de48:	b480      	push	{r7}
 800de4a:	b085      	sub	sp, #20
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	4a40      	ldr	r2, [pc, #256]	@ (800df5c <TIM_Base_SetConfig+0x114>)
 800de5c:	4293      	cmp	r3, r2
 800de5e:	d013      	beq.n	800de88 <TIM_Base_SetConfig+0x40>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de66:	d00f      	beq.n	800de88 <TIM_Base_SetConfig+0x40>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	4a3d      	ldr	r2, [pc, #244]	@ (800df60 <TIM_Base_SetConfig+0x118>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d00b      	beq.n	800de88 <TIM_Base_SetConfig+0x40>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	4a3c      	ldr	r2, [pc, #240]	@ (800df64 <TIM_Base_SetConfig+0x11c>)
 800de74:	4293      	cmp	r3, r2
 800de76:	d007      	beq.n	800de88 <TIM_Base_SetConfig+0x40>
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	4a3b      	ldr	r2, [pc, #236]	@ (800df68 <TIM_Base_SetConfig+0x120>)
 800de7c:	4293      	cmp	r3, r2
 800de7e:	d003      	beq.n	800de88 <TIM_Base_SetConfig+0x40>
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	4a3a      	ldr	r2, [pc, #232]	@ (800df6c <TIM_Base_SetConfig+0x124>)
 800de84:	4293      	cmp	r3, r2
 800de86:	d108      	bne.n	800de9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	685b      	ldr	r3, [r3, #4]
 800de94:	68fa      	ldr	r2, [r7, #12]
 800de96:	4313      	orrs	r3, r2
 800de98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	4a2f      	ldr	r2, [pc, #188]	@ (800df5c <TIM_Base_SetConfig+0x114>)
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d02b      	beq.n	800defa <TIM_Base_SetConfig+0xb2>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dea8:	d027      	beq.n	800defa <TIM_Base_SetConfig+0xb2>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	4a2c      	ldr	r2, [pc, #176]	@ (800df60 <TIM_Base_SetConfig+0x118>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d023      	beq.n	800defa <TIM_Base_SetConfig+0xb2>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	4a2b      	ldr	r2, [pc, #172]	@ (800df64 <TIM_Base_SetConfig+0x11c>)
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d01f      	beq.n	800defa <TIM_Base_SetConfig+0xb2>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	4a2a      	ldr	r2, [pc, #168]	@ (800df68 <TIM_Base_SetConfig+0x120>)
 800debe:	4293      	cmp	r3, r2
 800dec0:	d01b      	beq.n	800defa <TIM_Base_SetConfig+0xb2>
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	4a29      	ldr	r2, [pc, #164]	@ (800df6c <TIM_Base_SetConfig+0x124>)
 800dec6:	4293      	cmp	r3, r2
 800dec8:	d017      	beq.n	800defa <TIM_Base_SetConfig+0xb2>
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	4a28      	ldr	r2, [pc, #160]	@ (800df70 <TIM_Base_SetConfig+0x128>)
 800dece:	4293      	cmp	r3, r2
 800ded0:	d013      	beq.n	800defa <TIM_Base_SetConfig+0xb2>
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	4a27      	ldr	r2, [pc, #156]	@ (800df74 <TIM_Base_SetConfig+0x12c>)
 800ded6:	4293      	cmp	r3, r2
 800ded8:	d00f      	beq.n	800defa <TIM_Base_SetConfig+0xb2>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	4a26      	ldr	r2, [pc, #152]	@ (800df78 <TIM_Base_SetConfig+0x130>)
 800dede:	4293      	cmp	r3, r2
 800dee0:	d00b      	beq.n	800defa <TIM_Base_SetConfig+0xb2>
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	4a25      	ldr	r2, [pc, #148]	@ (800df7c <TIM_Base_SetConfig+0x134>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d007      	beq.n	800defa <TIM_Base_SetConfig+0xb2>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	4a24      	ldr	r2, [pc, #144]	@ (800df80 <TIM_Base_SetConfig+0x138>)
 800deee:	4293      	cmp	r3, r2
 800def0:	d003      	beq.n	800defa <TIM_Base_SetConfig+0xb2>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	4a23      	ldr	r2, [pc, #140]	@ (800df84 <TIM_Base_SetConfig+0x13c>)
 800def6:	4293      	cmp	r3, r2
 800def8:	d108      	bne.n	800df0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800df00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	68db      	ldr	r3, [r3, #12]
 800df06:	68fa      	ldr	r2, [r7, #12]
 800df08:	4313      	orrs	r3, r2
 800df0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	695b      	ldr	r3, [r3, #20]
 800df16:	4313      	orrs	r3, r2
 800df18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	68fa      	ldr	r2, [r7, #12]
 800df1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	689a      	ldr	r2, [r3, #8]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	681a      	ldr	r2, [r3, #0]
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	4a0a      	ldr	r2, [pc, #40]	@ (800df5c <TIM_Base_SetConfig+0x114>)
 800df34:	4293      	cmp	r3, r2
 800df36:	d003      	beq.n	800df40 <TIM_Base_SetConfig+0xf8>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	4a0c      	ldr	r2, [pc, #48]	@ (800df6c <TIM_Base_SetConfig+0x124>)
 800df3c:	4293      	cmp	r3, r2
 800df3e:	d103      	bne.n	800df48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	691a      	ldr	r2, [r3, #16]
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2201      	movs	r2, #1
 800df4c:	615a      	str	r2, [r3, #20]
}
 800df4e:	bf00      	nop
 800df50:	3714      	adds	r7, #20
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr
 800df5a:	bf00      	nop
 800df5c:	40010000 	.word	0x40010000
 800df60:	40000400 	.word	0x40000400
 800df64:	40000800 	.word	0x40000800
 800df68:	40000c00 	.word	0x40000c00
 800df6c:	40010400 	.word	0x40010400
 800df70:	40014000 	.word	0x40014000
 800df74:	40014400 	.word	0x40014400
 800df78:	40014800 	.word	0x40014800
 800df7c:	40001800 	.word	0x40001800
 800df80:	40001c00 	.word	0x40001c00
 800df84:	40002000 	.word	0x40002000

0800df88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800df88:	b480      	push	{r7}
 800df8a:	b083      	sub	sp, #12
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800df90:	bf00      	nop
 800df92:	370c      	adds	r7, #12
 800df94:	46bd      	mov	sp, r7
 800df96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9a:	4770      	bx	lr

0800df9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800df9c:	b480      	push	{r7}
 800df9e:	b083      	sub	sp, #12
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dfa4:	bf00      	nop
 800dfa6:	370c      	adds	r7, #12
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfae:	4770      	bx	lr

0800dfb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b083      	sub	sp, #12
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dfb8:	bf00      	nop
 800dfba:	370c      	adds	r7, #12
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc2:	4770      	bx	lr

0800dfc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b082      	sub	sp, #8
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d101      	bne.n	800dfd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	e040      	b.n	800e058 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d106      	bne.n	800dfec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f7f8 f966 	bl	80062b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2224      	movs	r2, #36	@ 0x24
 800dff0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	681a      	ldr	r2, [r3, #0]
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f022 0201 	bic.w	r2, r2, #1
 800e000:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 f82c 	bl	800e060 <UART_SetConfig>
 800e008:	4603      	mov	r3, r0
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	d101      	bne.n	800e012 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e00e:	2301      	movs	r3, #1
 800e010:	e022      	b.n	800e058 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e016:	2b00      	cmp	r3, #0
 800e018:	d002      	beq.n	800e020 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f000 fa84 	bl	800e528 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	685a      	ldr	r2, [r3, #4]
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e02e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	689a      	ldr	r2, [r3, #8]
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e03e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	681a      	ldr	r2, [r3, #0]
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f042 0201 	orr.w	r2, r2, #1
 800e04e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f000 fb0b 	bl	800e66c <UART_CheckIdleState>
 800e056:	4603      	mov	r3, r0
}
 800e058:	4618      	mov	r0, r3
 800e05a:	3708      	adds	r7, #8
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}

0800e060 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b088      	sub	sp, #32
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e068:	2300      	movs	r3, #0
 800e06a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	689a      	ldr	r2, [r3, #8]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	691b      	ldr	r3, [r3, #16]
 800e074:	431a      	orrs	r2, r3
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	695b      	ldr	r3, [r3, #20]
 800e07a:	431a      	orrs	r2, r3
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	69db      	ldr	r3, [r3, #28]
 800e080:	4313      	orrs	r3, r2
 800e082:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	681a      	ldr	r2, [r3, #0]
 800e08a:	4ba6      	ldr	r3, [pc, #664]	@ (800e324 <UART_SetConfig+0x2c4>)
 800e08c:	4013      	ands	r3, r2
 800e08e:	687a      	ldr	r2, [r7, #4]
 800e090:	6812      	ldr	r2, [r2, #0]
 800e092:	6979      	ldr	r1, [r7, #20]
 800e094:	430b      	orrs	r3, r1
 800e096:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	68da      	ldr	r2, [r3, #12]
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	430a      	orrs	r2, r1
 800e0ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	699b      	ldr	r3, [r3, #24]
 800e0b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6a1b      	ldr	r3, [r3, #32]
 800e0b8:	697a      	ldr	r2, [r7, #20]
 800e0ba:	4313      	orrs	r3, r2
 800e0bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	689b      	ldr	r3, [r3, #8]
 800e0c4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	697a      	ldr	r2, [r7, #20]
 800e0ce:	430a      	orrs	r2, r1
 800e0d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	4a94      	ldr	r2, [pc, #592]	@ (800e328 <UART_SetConfig+0x2c8>)
 800e0d8:	4293      	cmp	r3, r2
 800e0da:	d120      	bne.n	800e11e <UART_SetConfig+0xbe>
 800e0dc:	4b93      	ldr	r3, [pc, #588]	@ (800e32c <UART_SetConfig+0x2cc>)
 800e0de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e0e2:	f003 0303 	and.w	r3, r3, #3
 800e0e6:	2b03      	cmp	r3, #3
 800e0e8:	d816      	bhi.n	800e118 <UART_SetConfig+0xb8>
 800e0ea:	a201      	add	r2, pc, #4	@ (adr r2, 800e0f0 <UART_SetConfig+0x90>)
 800e0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0f0:	0800e101 	.word	0x0800e101
 800e0f4:	0800e10d 	.word	0x0800e10d
 800e0f8:	0800e107 	.word	0x0800e107
 800e0fc:	0800e113 	.word	0x0800e113
 800e100:	2301      	movs	r3, #1
 800e102:	77fb      	strb	r3, [r7, #31]
 800e104:	e150      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e106:	2302      	movs	r3, #2
 800e108:	77fb      	strb	r3, [r7, #31]
 800e10a:	e14d      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e10c:	2304      	movs	r3, #4
 800e10e:	77fb      	strb	r3, [r7, #31]
 800e110:	e14a      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e112:	2308      	movs	r3, #8
 800e114:	77fb      	strb	r3, [r7, #31]
 800e116:	e147      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e118:	2310      	movs	r3, #16
 800e11a:	77fb      	strb	r3, [r7, #31]
 800e11c:	e144      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	4a83      	ldr	r2, [pc, #524]	@ (800e330 <UART_SetConfig+0x2d0>)
 800e124:	4293      	cmp	r3, r2
 800e126:	d132      	bne.n	800e18e <UART_SetConfig+0x12e>
 800e128:	4b80      	ldr	r3, [pc, #512]	@ (800e32c <UART_SetConfig+0x2cc>)
 800e12a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e12e:	f003 030c 	and.w	r3, r3, #12
 800e132:	2b0c      	cmp	r3, #12
 800e134:	d828      	bhi.n	800e188 <UART_SetConfig+0x128>
 800e136:	a201      	add	r2, pc, #4	@ (adr r2, 800e13c <UART_SetConfig+0xdc>)
 800e138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e13c:	0800e171 	.word	0x0800e171
 800e140:	0800e189 	.word	0x0800e189
 800e144:	0800e189 	.word	0x0800e189
 800e148:	0800e189 	.word	0x0800e189
 800e14c:	0800e17d 	.word	0x0800e17d
 800e150:	0800e189 	.word	0x0800e189
 800e154:	0800e189 	.word	0x0800e189
 800e158:	0800e189 	.word	0x0800e189
 800e15c:	0800e177 	.word	0x0800e177
 800e160:	0800e189 	.word	0x0800e189
 800e164:	0800e189 	.word	0x0800e189
 800e168:	0800e189 	.word	0x0800e189
 800e16c:	0800e183 	.word	0x0800e183
 800e170:	2300      	movs	r3, #0
 800e172:	77fb      	strb	r3, [r7, #31]
 800e174:	e118      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e176:	2302      	movs	r3, #2
 800e178:	77fb      	strb	r3, [r7, #31]
 800e17a:	e115      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e17c:	2304      	movs	r3, #4
 800e17e:	77fb      	strb	r3, [r7, #31]
 800e180:	e112      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e182:	2308      	movs	r3, #8
 800e184:	77fb      	strb	r3, [r7, #31]
 800e186:	e10f      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e188:	2310      	movs	r3, #16
 800e18a:	77fb      	strb	r3, [r7, #31]
 800e18c:	e10c      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	4a68      	ldr	r2, [pc, #416]	@ (800e334 <UART_SetConfig+0x2d4>)
 800e194:	4293      	cmp	r3, r2
 800e196:	d120      	bne.n	800e1da <UART_SetConfig+0x17a>
 800e198:	4b64      	ldr	r3, [pc, #400]	@ (800e32c <UART_SetConfig+0x2cc>)
 800e19a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e19e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800e1a2:	2b30      	cmp	r3, #48	@ 0x30
 800e1a4:	d013      	beq.n	800e1ce <UART_SetConfig+0x16e>
 800e1a6:	2b30      	cmp	r3, #48	@ 0x30
 800e1a8:	d814      	bhi.n	800e1d4 <UART_SetConfig+0x174>
 800e1aa:	2b20      	cmp	r3, #32
 800e1ac:	d009      	beq.n	800e1c2 <UART_SetConfig+0x162>
 800e1ae:	2b20      	cmp	r3, #32
 800e1b0:	d810      	bhi.n	800e1d4 <UART_SetConfig+0x174>
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d002      	beq.n	800e1bc <UART_SetConfig+0x15c>
 800e1b6:	2b10      	cmp	r3, #16
 800e1b8:	d006      	beq.n	800e1c8 <UART_SetConfig+0x168>
 800e1ba:	e00b      	b.n	800e1d4 <UART_SetConfig+0x174>
 800e1bc:	2300      	movs	r3, #0
 800e1be:	77fb      	strb	r3, [r7, #31]
 800e1c0:	e0f2      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e1c2:	2302      	movs	r3, #2
 800e1c4:	77fb      	strb	r3, [r7, #31]
 800e1c6:	e0ef      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e1c8:	2304      	movs	r3, #4
 800e1ca:	77fb      	strb	r3, [r7, #31]
 800e1cc:	e0ec      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e1ce:	2308      	movs	r3, #8
 800e1d0:	77fb      	strb	r3, [r7, #31]
 800e1d2:	e0e9      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e1d4:	2310      	movs	r3, #16
 800e1d6:	77fb      	strb	r3, [r7, #31]
 800e1d8:	e0e6      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	4a56      	ldr	r2, [pc, #344]	@ (800e338 <UART_SetConfig+0x2d8>)
 800e1e0:	4293      	cmp	r3, r2
 800e1e2:	d120      	bne.n	800e226 <UART_SetConfig+0x1c6>
 800e1e4:	4b51      	ldr	r3, [pc, #324]	@ (800e32c <UART_SetConfig+0x2cc>)
 800e1e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800e1ee:	2bc0      	cmp	r3, #192	@ 0xc0
 800e1f0:	d013      	beq.n	800e21a <UART_SetConfig+0x1ba>
 800e1f2:	2bc0      	cmp	r3, #192	@ 0xc0
 800e1f4:	d814      	bhi.n	800e220 <UART_SetConfig+0x1c0>
 800e1f6:	2b80      	cmp	r3, #128	@ 0x80
 800e1f8:	d009      	beq.n	800e20e <UART_SetConfig+0x1ae>
 800e1fa:	2b80      	cmp	r3, #128	@ 0x80
 800e1fc:	d810      	bhi.n	800e220 <UART_SetConfig+0x1c0>
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d002      	beq.n	800e208 <UART_SetConfig+0x1a8>
 800e202:	2b40      	cmp	r3, #64	@ 0x40
 800e204:	d006      	beq.n	800e214 <UART_SetConfig+0x1b4>
 800e206:	e00b      	b.n	800e220 <UART_SetConfig+0x1c0>
 800e208:	2300      	movs	r3, #0
 800e20a:	77fb      	strb	r3, [r7, #31]
 800e20c:	e0cc      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e20e:	2302      	movs	r3, #2
 800e210:	77fb      	strb	r3, [r7, #31]
 800e212:	e0c9      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e214:	2304      	movs	r3, #4
 800e216:	77fb      	strb	r3, [r7, #31]
 800e218:	e0c6      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e21a:	2308      	movs	r3, #8
 800e21c:	77fb      	strb	r3, [r7, #31]
 800e21e:	e0c3      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e220:	2310      	movs	r3, #16
 800e222:	77fb      	strb	r3, [r7, #31]
 800e224:	e0c0      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4a44      	ldr	r2, [pc, #272]	@ (800e33c <UART_SetConfig+0x2dc>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d125      	bne.n	800e27c <UART_SetConfig+0x21c>
 800e230:	4b3e      	ldr	r3, [pc, #248]	@ (800e32c <UART_SetConfig+0x2cc>)
 800e232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e236:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e23a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e23e:	d017      	beq.n	800e270 <UART_SetConfig+0x210>
 800e240:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e244:	d817      	bhi.n	800e276 <UART_SetConfig+0x216>
 800e246:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e24a:	d00b      	beq.n	800e264 <UART_SetConfig+0x204>
 800e24c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e250:	d811      	bhi.n	800e276 <UART_SetConfig+0x216>
 800e252:	2b00      	cmp	r3, #0
 800e254:	d003      	beq.n	800e25e <UART_SetConfig+0x1fe>
 800e256:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e25a:	d006      	beq.n	800e26a <UART_SetConfig+0x20a>
 800e25c:	e00b      	b.n	800e276 <UART_SetConfig+0x216>
 800e25e:	2300      	movs	r3, #0
 800e260:	77fb      	strb	r3, [r7, #31]
 800e262:	e0a1      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e264:	2302      	movs	r3, #2
 800e266:	77fb      	strb	r3, [r7, #31]
 800e268:	e09e      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e26a:	2304      	movs	r3, #4
 800e26c:	77fb      	strb	r3, [r7, #31]
 800e26e:	e09b      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e270:	2308      	movs	r3, #8
 800e272:	77fb      	strb	r3, [r7, #31]
 800e274:	e098      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e276:	2310      	movs	r3, #16
 800e278:	77fb      	strb	r3, [r7, #31]
 800e27a:	e095      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	4a2f      	ldr	r2, [pc, #188]	@ (800e340 <UART_SetConfig+0x2e0>)
 800e282:	4293      	cmp	r3, r2
 800e284:	d125      	bne.n	800e2d2 <UART_SetConfig+0x272>
 800e286:	4b29      	ldr	r3, [pc, #164]	@ (800e32c <UART_SetConfig+0x2cc>)
 800e288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e28c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e290:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e294:	d017      	beq.n	800e2c6 <UART_SetConfig+0x266>
 800e296:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e29a:	d817      	bhi.n	800e2cc <UART_SetConfig+0x26c>
 800e29c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e2a0:	d00b      	beq.n	800e2ba <UART_SetConfig+0x25a>
 800e2a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e2a6:	d811      	bhi.n	800e2cc <UART_SetConfig+0x26c>
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d003      	beq.n	800e2b4 <UART_SetConfig+0x254>
 800e2ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e2b0:	d006      	beq.n	800e2c0 <UART_SetConfig+0x260>
 800e2b2:	e00b      	b.n	800e2cc <UART_SetConfig+0x26c>
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	77fb      	strb	r3, [r7, #31]
 800e2b8:	e076      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e2ba:	2302      	movs	r3, #2
 800e2bc:	77fb      	strb	r3, [r7, #31]
 800e2be:	e073      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e2c0:	2304      	movs	r3, #4
 800e2c2:	77fb      	strb	r3, [r7, #31]
 800e2c4:	e070      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e2c6:	2308      	movs	r3, #8
 800e2c8:	77fb      	strb	r3, [r7, #31]
 800e2ca:	e06d      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e2cc:	2310      	movs	r3, #16
 800e2ce:	77fb      	strb	r3, [r7, #31]
 800e2d0:	e06a      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	4a1b      	ldr	r2, [pc, #108]	@ (800e344 <UART_SetConfig+0x2e4>)
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	d138      	bne.n	800e34e <UART_SetConfig+0x2ee>
 800e2dc:	4b13      	ldr	r3, [pc, #76]	@ (800e32c <UART_SetConfig+0x2cc>)
 800e2de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e2e2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800e2e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e2ea:	d017      	beq.n	800e31c <UART_SetConfig+0x2bc>
 800e2ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e2f0:	d82a      	bhi.n	800e348 <UART_SetConfig+0x2e8>
 800e2f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e2f6:	d00b      	beq.n	800e310 <UART_SetConfig+0x2b0>
 800e2f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e2fc:	d824      	bhi.n	800e348 <UART_SetConfig+0x2e8>
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d003      	beq.n	800e30a <UART_SetConfig+0x2aa>
 800e302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e306:	d006      	beq.n	800e316 <UART_SetConfig+0x2b6>
 800e308:	e01e      	b.n	800e348 <UART_SetConfig+0x2e8>
 800e30a:	2300      	movs	r3, #0
 800e30c:	77fb      	strb	r3, [r7, #31]
 800e30e:	e04b      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e310:	2302      	movs	r3, #2
 800e312:	77fb      	strb	r3, [r7, #31]
 800e314:	e048      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e316:	2304      	movs	r3, #4
 800e318:	77fb      	strb	r3, [r7, #31]
 800e31a:	e045      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e31c:	2308      	movs	r3, #8
 800e31e:	77fb      	strb	r3, [r7, #31]
 800e320:	e042      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e322:	bf00      	nop
 800e324:	efff69f3 	.word	0xefff69f3
 800e328:	40011000 	.word	0x40011000
 800e32c:	40023800 	.word	0x40023800
 800e330:	40004400 	.word	0x40004400
 800e334:	40004800 	.word	0x40004800
 800e338:	40004c00 	.word	0x40004c00
 800e33c:	40005000 	.word	0x40005000
 800e340:	40011400 	.word	0x40011400
 800e344:	40007800 	.word	0x40007800
 800e348:	2310      	movs	r3, #16
 800e34a:	77fb      	strb	r3, [r7, #31]
 800e34c:	e02c      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	4a72      	ldr	r2, [pc, #456]	@ (800e51c <UART_SetConfig+0x4bc>)
 800e354:	4293      	cmp	r3, r2
 800e356:	d125      	bne.n	800e3a4 <UART_SetConfig+0x344>
 800e358:	4b71      	ldr	r3, [pc, #452]	@ (800e520 <UART_SetConfig+0x4c0>)
 800e35a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e35e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800e362:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e366:	d017      	beq.n	800e398 <UART_SetConfig+0x338>
 800e368:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e36c:	d817      	bhi.n	800e39e <UART_SetConfig+0x33e>
 800e36e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e372:	d00b      	beq.n	800e38c <UART_SetConfig+0x32c>
 800e374:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e378:	d811      	bhi.n	800e39e <UART_SetConfig+0x33e>
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d003      	beq.n	800e386 <UART_SetConfig+0x326>
 800e37e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e382:	d006      	beq.n	800e392 <UART_SetConfig+0x332>
 800e384:	e00b      	b.n	800e39e <UART_SetConfig+0x33e>
 800e386:	2300      	movs	r3, #0
 800e388:	77fb      	strb	r3, [r7, #31]
 800e38a:	e00d      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e38c:	2302      	movs	r3, #2
 800e38e:	77fb      	strb	r3, [r7, #31]
 800e390:	e00a      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e392:	2304      	movs	r3, #4
 800e394:	77fb      	strb	r3, [r7, #31]
 800e396:	e007      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e398:	2308      	movs	r3, #8
 800e39a:	77fb      	strb	r3, [r7, #31]
 800e39c:	e004      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e39e:	2310      	movs	r3, #16
 800e3a0:	77fb      	strb	r3, [r7, #31]
 800e3a2:	e001      	b.n	800e3a8 <UART_SetConfig+0x348>
 800e3a4:	2310      	movs	r3, #16
 800e3a6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	69db      	ldr	r3, [r3, #28]
 800e3ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e3b0:	d15b      	bne.n	800e46a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800e3b2:	7ffb      	ldrb	r3, [r7, #31]
 800e3b4:	2b08      	cmp	r3, #8
 800e3b6:	d828      	bhi.n	800e40a <UART_SetConfig+0x3aa>
 800e3b8:	a201      	add	r2, pc, #4	@ (adr r2, 800e3c0 <UART_SetConfig+0x360>)
 800e3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3be:	bf00      	nop
 800e3c0:	0800e3e5 	.word	0x0800e3e5
 800e3c4:	0800e3ed 	.word	0x0800e3ed
 800e3c8:	0800e3f5 	.word	0x0800e3f5
 800e3cc:	0800e40b 	.word	0x0800e40b
 800e3d0:	0800e3fb 	.word	0x0800e3fb
 800e3d4:	0800e40b 	.word	0x0800e40b
 800e3d8:	0800e40b 	.word	0x0800e40b
 800e3dc:	0800e40b 	.word	0x0800e40b
 800e3e0:	0800e403 	.word	0x0800e403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e3e4:	f7fd f9f8 	bl	800b7d8 <HAL_RCC_GetPCLK1Freq>
 800e3e8:	61b8      	str	r0, [r7, #24]
        break;
 800e3ea:	e013      	b.n	800e414 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e3ec:	f7fd fa08 	bl	800b800 <HAL_RCC_GetPCLK2Freq>
 800e3f0:	61b8      	str	r0, [r7, #24]
        break;
 800e3f2:	e00f      	b.n	800e414 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e3f4:	4b4b      	ldr	r3, [pc, #300]	@ (800e524 <UART_SetConfig+0x4c4>)
 800e3f6:	61bb      	str	r3, [r7, #24]
        break;
 800e3f8:	e00c      	b.n	800e414 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e3fa:	f7fd f91b 	bl	800b634 <HAL_RCC_GetSysClockFreq>
 800e3fe:	61b8      	str	r0, [r7, #24]
        break;
 800e400:	e008      	b.n	800e414 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e402:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e406:	61bb      	str	r3, [r7, #24]
        break;
 800e408:	e004      	b.n	800e414 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800e40a:	2300      	movs	r3, #0
 800e40c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e40e:	2301      	movs	r3, #1
 800e410:	77bb      	strb	r3, [r7, #30]
        break;
 800e412:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e414:	69bb      	ldr	r3, [r7, #24]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d074      	beq.n	800e504 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e41a:	69bb      	ldr	r3, [r7, #24]
 800e41c:	005a      	lsls	r2, r3, #1
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	685b      	ldr	r3, [r3, #4]
 800e422:	085b      	lsrs	r3, r3, #1
 800e424:	441a      	add	r2, r3
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	685b      	ldr	r3, [r3, #4]
 800e42a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e42e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e430:	693b      	ldr	r3, [r7, #16]
 800e432:	2b0f      	cmp	r3, #15
 800e434:	d916      	bls.n	800e464 <UART_SetConfig+0x404>
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e43c:	d212      	bcs.n	800e464 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	b29b      	uxth	r3, r3
 800e442:	f023 030f 	bic.w	r3, r3, #15
 800e446:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e448:	693b      	ldr	r3, [r7, #16]
 800e44a:	085b      	lsrs	r3, r3, #1
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	f003 0307 	and.w	r3, r3, #7
 800e452:	b29a      	uxth	r2, r3
 800e454:	89fb      	ldrh	r3, [r7, #14]
 800e456:	4313      	orrs	r3, r2
 800e458:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	89fa      	ldrh	r2, [r7, #14]
 800e460:	60da      	str	r2, [r3, #12]
 800e462:	e04f      	b.n	800e504 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e464:	2301      	movs	r3, #1
 800e466:	77bb      	strb	r3, [r7, #30]
 800e468:	e04c      	b.n	800e504 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e46a:	7ffb      	ldrb	r3, [r7, #31]
 800e46c:	2b08      	cmp	r3, #8
 800e46e:	d828      	bhi.n	800e4c2 <UART_SetConfig+0x462>
 800e470:	a201      	add	r2, pc, #4	@ (adr r2, 800e478 <UART_SetConfig+0x418>)
 800e472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e476:	bf00      	nop
 800e478:	0800e49d 	.word	0x0800e49d
 800e47c:	0800e4a5 	.word	0x0800e4a5
 800e480:	0800e4ad 	.word	0x0800e4ad
 800e484:	0800e4c3 	.word	0x0800e4c3
 800e488:	0800e4b3 	.word	0x0800e4b3
 800e48c:	0800e4c3 	.word	0x0800e4c3
 800e490:	0800e4c3 	.word	0x0800e4c3
 800e494:	0800e4c3 	.word	0x0800e4c3
 800e498:	0800e4bb 	.word	0x0800e4bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e49c:	f7fd f99c 	bl	800b7d8 <HAL_RCC_GetPCLK1Freq>
 800e4a0:	61b8      	str	r0, [r7, #24]
        break;
 800e4a2:	e013      	b.n	800e4cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e4a4:	f7fd f9ac 	bl	800b800 <HAL_RCC_GetPCLK2Freq>
 800e4a8:	61b8      	str	r0, [r7, #24]
        break;
 800e4aa:	e00f      	b.n	800e4cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e4ac:	4b1d      	ldr	r3, [pc, #116]	@ (800e524 <UART_SetConfig+0x4c4>)
 800e4ae:	61bb      	str	r3, [r7, #24]
        break;
 800e4b0:	e00c      	b.n	800e4cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e4b2:	f7fd f8bf 	bl	800b634 <HAL_RCC_GetSysClockFreq>
 800e4b6:	61b8      	str	r0, [r7, #24]
        break;
 800e4b8:	e008      	b.n	800e4cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e4ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e4be:	61bb      	str	r3, [r7, #24]
        break;
 800e4c0:	e004      	b.n	800e4cc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	77bb      	strb	r3, [r7, #30]
        break;
 800e4ca:	bf00      	nop
    }

    if (pclk != 0U)
 800e4cc:	69bb      	ldr	r3, [r7, #24]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d018      	beq.n	800e504 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	685b      	ldr	r3, [r3, #4]
 800e4d6:	085a      	lsrs	r2, r3, #1
 800e4d8:	69bb      	ldr	r3, [r7, #24]
 800e4da:	441a      	add	r2, r3
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	2b0f      	cmp	r3, #15
 800e4ea:	d909      	bls.n	800e500 <UART_SetConfig+0x4a0>
 800e4ec:	693b      	ldr	r3, [r7, #16]
 800e4ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e4f2:	d205      	bcs.n	800e500 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e4f4:	693b      	ldr	r3, [r7, #16]
 800e4f6:	b29a      	uxth	r2, r3
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	60da      	str	r2, [r3, #12]
 800e4fe:	e001      	b.n	800e504 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e500:	2301      	movs	r3, #1
 800e502:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2200      	movs	r2, #0
 800e508:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2200      	movs	r2, #0
 800e50e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800e510:	7fbb      	ldrb	r3, [r7, #30]
}
 800e512:	4618      	mov	r0, r3
 800e514:	3720      	adds	r7, #32
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}
 800e51a:	bf00      	nop
 800e51c:	40007c00 	.word	0x40007c00
 800e520:	40023800 	.word	0x40023800
 800e524:	00f42400 	.word	0x00f42400

0800e528 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e528:	b480      	push	{r7}
 800e52a:	b083      	sub	sp, #12
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e534:	f003 0301 	and.w	r3, r3, #1
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d00a      	beq.n	800e552 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	685b      	ldr	r3, [r3, #4]
 800e542:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	430a      	orrs	r2, r1
 800e550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e556:	f003 0302 	and.w	r3, r3, #2
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d00a      	beq.n	800e574 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	430a      	orrs	r2, r1
 800e572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e578:	f003 0304 	and.w	r3, r3, #4
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d00a      	beq.n	800e596 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	685b      	ldr	r3, [r3, #4]
 800e586:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	430a      	orrs	r2, r1
 800e594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e59a:	f003 0308 	and.w	r3, r3, #8
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d00a      	beq.n	800e5b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	685b      	ldr	r3, [r3, #4]
 800e5a8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	430a      	orrs	r2, r1
 800e5b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5bc:	f003 0310 	and.w	r3, r3, #16
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d00a      	beq.n	800e5da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	689b      	ldr	r3, [r3, #8]
 800e5ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	430a      	orrs	r2, r1
 800e5d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5de:	f003 0320 	and.w	r3, r3, #32
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d00a      	beq.n	800e5fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	689b      	ldr	r3, [r3, #8]
 800e5ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	430a      	orrs	r2, r1
 800e5fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e604:	2b00      	cmp	r3, #0
 800e606:	d01a      	beq.n	800e63e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	430a      	orrs	r2, r1
 800e61c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e622:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e626:	d10a      	bne.n	800e63e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	685b      	ldr	r3, [r3, #4]
 800e62e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	430a      	orrs	r2, r1
 800e63c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e646:	2b00      	cmp	r3, #0
 800e648:	d00a      	beq.n	800e660 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	685b      	ldr	r3, [r3, #4]
 800e650:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	430a      	orrs	r2, r1
 800e65e:	605a      	str	r2, [r3, #4]
  }
}
 800e660:	bf00      	nop
 800e662:	370c      	adds	r7, #12
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr

0800e66c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b086      	sub	sp, #24
 800e670:	af02      	add	r7, sp, #8
 800e672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2200      	movs	r2, #0
 800e678:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e67c:	f7f9 fb54 	bl	8007d28 <HAL_GetTick>
 800e680:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	f003 0308 	and.w	r3, r3, #8
 800e68c:	2b08      	cmp	r3, #8
 800e68e:	d10e      	bne.n	800e6ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e690:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e694:	9300      	str	r3, [sp, #0]
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	2200      	movs	r2, #0
 800e69a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f000 f81b 	bl	800e6da <UART_WaitOnFlagUntilTimeout>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d001      	beq.n	800e6ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e6aa:	2303      	movs	r3, #3
 800e6ac:	e011      	b.n	800e6d2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2220      	movs	r2, #32
 800e6b2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2220      	movs	r2, #32
 800e6b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800e6d0:	2300      	movs	r3, #0
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3710      	adds	r7, #16
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}

0800e6da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e6da:	b580      	push	{r7, lr}
 800e6dc:	b09c      	sub	sp, #112	@ 0x70
 800e6de:	af00      	add	r7, sp, #0
 800e6e0:	60f8      	str	r0, [r7, #12]
 800e6e2:	60b9      	str	r1, [r7, #8]
 800e6e4:	603b      	str	r3, [r7, #0]
 800e6e6:	4613      	mov	r3, r2
 800e6e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e6ea:	e0a7      	b.n	800e83c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e6ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e6ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e6f2:	f000 80a3 	beq.w	800e83c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e6f6:	f7f9 fb17 	bl	8007d28 <HAL_GetTick>
 800e6fa:	4602      	mov	r2, r0
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	1ad3      	subs	r3, r2, r3
 800e700:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800e702:	429a      	cmp	r2, r3
 800e704:	d302      	bcc.n	800e70c <UART_WaitOnFlagUntilTimeout+0x32>
 800e706:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d13f      	bne.n	800e78c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e712:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e714:	e853 3f00 	ldrex	r3, [r3]
 800e718:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e71a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e71c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800e720:	667b      	str	r3, [r7, #100]	@ 0x64
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	461a      	mov	r2, r3
 800e728:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e72a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e72c:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e72e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e730:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e732:	e841 2300 	strex	r3, r2, [r1]
 800e736:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800e738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d1e6      	bne.n	800e70c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	3308      	adds	r3, #8
 800e744:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e748:	e853 3f00 	ldrex	r3, [r3]
 800e74c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e750:	f023 0301 	bic.w	r3, r3, #1
 800e754:	663b      	str	r3, [r7, #96]	@ 0x60
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	3308      	adds	r3, #8
 800e75c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e75e:	64ba      	str	r2, [r7, #72]	@ 0x48
 800e760:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e762:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e764:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e766:	e841 2300 	strex	r3, r2, [r1]
 800e76a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e76c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d1e5      	bne.n	800e73e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	2220      	movs	r2, #32
 800e776:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	2220      	movs	r2, #32
 800e77c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2200      	movs	r2, #0
 800e784:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800e788:	2303      	movs	r3, #3
 800e78a:	e068      	b.n	800e85e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	f003 0304 	and.w	r3, r3, #4
 800e796:	2b00      	cmp	r3, #0
 800e798:	d050      	beq.n	800e83c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	69db      	ldr	r3, [r3, #28]
 800e7a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e7a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e7a8:	d148      	bne.n	800e83c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e7b2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7bc:	e853 3f00 	ldrex	r3, [r3]
 800e7c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7c4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800e7c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	461a      	mov	r2, r3
 800e7d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e7d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800e7d4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e7d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e7da:	e841 2300 	strex	r3, r2, [r1]
 800e7de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d1e6      	bne.n	800e7b4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	3308      	adds	r3, #8
 800e7ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	e853 3f00 	ldrex	r3, [r3]
 800e7f4:	613b      	str	r3, [r7, #16]
   return(result);
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	f023 0301 	bic.w	r3, r3, #1
 800e7fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	3308      	adds	r3, #8
 800e804:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e806:	623a      	str	r2, [r7, #32]
 800e808:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e80a:	69f9      	ldr	r1, [r7, #28]
 800e80c:	6a3a      	ldr	r2, [r7, #32]
 800e80e:	e841 2300 	strex	r3, r2, [r1]
 800e812:	61bb      	str	r3, [r7, #24]
   return(result);
 800e814:	69bb      	ldr	r3, [r7, #24]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d1e5      	bne.n	800e7e6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2220      	movs	r2, #32
 800e81e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	2220      	movs	r2, #32
 800e824:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	2220      	movs	r2, #32
 800e82c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	2200      	movs	r2, #0
 800e834:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800e838:	2303      	movs	r3, #3
 800e83a:	e010      	b.n	800e85e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	69da      	ldr	r2, [r3, #28]
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	4013      	ands	r3, r2
 800e846:	68ba      	ldr	r2, [r7, #8]
 800e848:	429a      	cmp	r2, r3
 800e84a:	bf0c      	ite	eq
 800e84c:	2301      	moveq	r3, #1
 800e84e:	2300      	movne	r3, #0
 800e850:	b2db      	uxtb	r3, r3
 800e852:	461a      	mov	r2, r3
 800e854:	79fb      	ldrb	r3, [r7, #7]
 800e856:	429a      	cmp	r2, r3
 800e858:	f43f af48 	beq.w	800e6ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e85c:	2300      	movs	r3, #0
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3770      	adds	r7, #112	@ 0x70
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
	...

0800e868 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800e868:	b480      	push	{r7}
 800e86a:	b083      	sub	sp, #12
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
 800e870:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d121      	bne.n	800e8be <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681a      	ldr	r2, [r3, #0]
 800e87e:	4b27      	ldr	r3, [pc, #156]	@ (800e91c <FMC_SDRAM_Init+0xb4>)
 800e880:	4013      	ands	r3, r2
 800e882:	683a      	ldr	r2, [r7, #0]
 800e884:	6851      	ldr	r1, [r2, #4]
 800e886:	683a      	ldr	r2, [r7, #0]
 800e888:	6892      	ldr	r2, [r2, #8]
 800e88a:	4311      	orrs	r1, r2
 800e88c:	683a      	ldr	r2, [r7, #0]
 800e88e:	68d2      	ldr	r2, [r2, #12]
 800e890:	4311      	orrs	r1, r2
 800e892:	683a      	ldr	r2, [r7, #0]
 800e894:	6912      	ldr	r2, [r2, #16]
 800e896:	4311      	orrs	r1, r2
 800e898:	683a      	ldr	r2, [r7, #0]
 800e89a:	6952      	ldr	r2, [r2, #20]
 800e89c:	4311      	orrs	r1, r2
 800e89e:	683a      	ldr	r2, [r7, #0]
 800e8a0:	6992      	ldr	r2, [r2, #24]
 800e8a2:	4311      	orrs	r1, r2
 800e8a4:	683a      	ldr	r2, [r7, #0]
 800e8a6:	69d2      	ldr	r2, [r2, #28]
 800e8a8:	4311      	orrs	r1, r2
 800e8aa:	683a      	ldr	r2, [r7, #0]
 800e8ac:	6a12      	ldr	r2, [r2, #32]
 800e8ae:	4311      	orrs	r1, r2
 800e8b0:	683a      	ldr	r2, [r7, #0]
 800e8b2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e8b4:	430a      	orrs	r2, r1
 800e8b6:	431a      	orrs	r2, r3
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	601a      	str	r2, [r3, #0]
 800e8bc:	e026      	b.n	800e90c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	69d9      	ldr	r1, [r3, #28]
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	6a1b      	ldr	r3, [r3, #32]
 800e8ce:	4319      	orrs	r1, r3
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8d4:	430b      	orrs	r3, r1
 800e8d6:	431a      	orrs	r2, r3
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	685a      	ldr	r2, [r3, #4]
 800e8e0:	4b0e      	ldr	r3, [pc, #56]	@ (800e91c <FMC_SDRAM_Init+0xb4>)
 800e8e2:	4013      	ands	r3, r2
 800e8e4:	683a      	ldr	r2, [r7, #0]
 800e8e6:	6851      	ldr	r1, [r2, #4]
 800e8e8:	683a      	ldr	r2, [r7, #0]
 800e8ea:	6892      	ldr	r2, [r2, #8]
 800e8ec:	4311      	orrs	r1, r2
 800e8ee:	683a      	ldr	r2, [r7, #0]
 800e8f0:	68d2      	ldr	r2, [r2, #12]
 800e8f2:	4311      	orrs	r1, r2
 800e8f4:	683a      	ldr	r2, [r7, #0]
 800e8f6:	6912      	ldr	r2, [r2, #16]
 800e8f8:	4311      	orrs	r1, r2
 800e8fa:	683a      	ldr	r2, [r7, #0]
 800e8fc:	6952      	ldr	r2, [r2, #20]
 800e8fe:	4311      	orrs	r1, r2
 800e900:	683a      	ldr	r2, [r7, #0]
 800e902:	6992      	ldr	r2, [r2, #24]
 800e904:	430a      	orrs	r2, r1
 800e906:	431a      	orrs	r2, r3
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800e90c:	2300      	movs	r3, #0
}
 800e90e:	4618      	mov	r0, r3
 800e910:	370c      	adds	r7, #12
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr
 800e91a:	bf00      	nop
 800e91c:	ffff8000 	.word	0xffff8000

0800e920 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e920:	b480      	push	{r7}
 800e922:	b085      	sub	sp, #20
 800e924:	af00      	add	r7, sp, #0
 800e926:	60f8      	str	r0, [r7, #12]
 800e928:	60b9      	str	r1, [r7, #8]
 800e92a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d128      	bne.n	800e984 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	689b      	ldr	r3, [r3, #8]
 800e936:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	1e59      	subs	r1, r3, #1
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	685b      	ldr	r3, [r3, #4]
 800e944:	3b01      	subs	r3, #1
 800e946:	011b      	lsls	r3, r3, #4
 800e948:	4319      	orrs	r1, r3
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	689b      	ldr	r3, [r3, #8]
 800e94e:	3b01      	subs	r3, #1
 800e950:	021b      	lsls	r3, r3, #8
 800e952:	4319      	orrs	r1, r3
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	68db      	ldr	r3, [r3, #12]
 800e958:	3b01      	subs	r3, #1
 800e95a:	031b      	lsls	r3, r3, #12
 800e95c:	4319      	orrs	r1, r3
 800e95e:	68bb      	ldr	r3, [r7, #8]
 800e960:	691b      	ldr	r3, [r3, #16]
 800e962:	3b01      	subs	r3, #1
 800e964:	041b      	lsls	r3, r3, #16
 800e966:	4319      	orrs	r1, r3
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	695b      	ldr	r3, [r3, #20]
 800e96c:	3b01      	subs	r3, #1
 800e96e:	051b      	lsls	r3, r3, #20
 800e970:	4319      	orrs	r1, r3
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	699b      	ldr	r3, [r3, #24]
 800e976:	3b01      	subs	r3, #1
 800e978:	061b      	lsls	r3, r3, #24
 800e97a:	430b      	orrs	r3, r1
 800e97c:	431a      	orrs	r2, r3
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	609a      	str	r2, [r3, #8]
 800e982:	e02d      	b.n	800e9e0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	689a      	ldr	r2, [r3, #8]
 800e988:	4b19      	ldr	r3, [pc, #100]	@ (800e9f0 <FMC_SDRAM_Timing_Init+0xd0>)
 800e98a:	4013      	ands	r3, r2
 800e98c:	68ba      	ldr	r2, [r7, #8]
 800e98e:	68d2      	ldr	r2, [r2, #12]
 800e990:	3a01      	subs	r2, #1
 800e992:	0311      	lsls	r1, r2, #12
 800e994:	68ba      	ldr	r2, [r7, #8]
 800e996:	6952      	ldr	r2, [r2, #20]
 800e998:	3a01      	subs	r2, #1
 800e99a:	0512      	lsls	r2, r2, #20
 800e99c:	430a      	orrs	r2, r1
 800e99e:	431a      	orrs	r2, r3
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	68db      	ldr	r3, [r3, #12]
 800e9a8:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	1e59      	subs	r1, r3, #1
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	685b      	ldr	r3, [r3, #4]
 800e9b6:	3b01      	subs	r3, #1
 800e9b8:	011b      	lsls	r3, r3, #4
 800e9ba:	4319      	orrs	r1, r3
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	689b      	ldr	r3, [r3, #8]
 800e9c0:	3b01      	subs	r3, #1
 800e9c2:	021b      	lsls	r3, r3, #8
 800e9c4:	4319      	orrs	r1, r3
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	691b      	ldr	r3, [r3, #16]
 800e9ca:	3b01      	subs	r3, #1
 800e9cc:	041b      	lsls	r3, r3, #16
 800e9ce:	4319      	orrs	r1, r3
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	699b      	ldr	r3, [r3, #24]
 800e9d4:	3b01      	subs	r3, #1
 800e9d6:	061b      	lsls	r3, r3, #24
 800e9d8:	430b      	orrs	r3, r1
 800e9da:	431a      	orrs	r2, r3
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800e9e0:	2300      	movs	r3, #0
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3714      	adds	r7, #20
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr
 800e9ee:	bf00      	nop
 800e9f0:	ff0f0fff 	.word	0xff0f0fff

0800e9f4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b085      	sub	sp, #20
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	60f8      	str	r0, [r7, #12]
 800e9fc:	60b9      	str	r1, [r7, #8]
 800e9fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	691a      	ldr	r2, [r3, #16]
 800ea04:	4b0c      	ldr	r3, [pc, #48]	@ (800ea38 <FMC_SDRAM_SendCommand+0x44>)
 800ea06:	4013      	ands	r3, r2
 800ea08:	68ba      	ldr	r2, [r7, #8]
 800ea0a:	6811      	ldr	r1, [r2, #0]
 800ea0c:	68ba      	ldr	r2, [r7, #8]
 800ea0e:	6852      	ldr	r2, [r2, #4]
 800ea10:	4311      	orrs	r1, r2
 800ea12:	68ba      	ldr	r2, [r7, #8]
 800ea14:	6892      	ldr	r2, [r2, #8]
 800ea16:	3a01      	subs	r2, #1
 800ea18:	0152      	lsls	r2, r2, #5
 800ea1a:	4311      	orrs	r1, r2
 800ea1c:	68ba      	ldr	r2, [r7, #8]
 800ea1e:	68d2      	ldr	r2, [r2, #12]
 800ea20:	0252      	lsls	r2, r2, #9
 800ea22:	430a      	orrs	r2, r1
 800ea24:	431a      	orrs	r2, r3
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800ea2a:	2300      	movs	r3, #0
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3714      	adds	r7, #20
 800ea30:	46bd      	mov	sp, r7
 800ea32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea36:	4770      	bx	lr
 800ea38:	ffc00000 	.word	0xffc00000

0800ea3c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	b083      	sub	sp, #12
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
 800ea44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	695a      	ldr	r2, [r3, #20]
 800ea4a:	4b07      	ldr	r3, [pc, #28]	@ (800ea68 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800ea4c:	4013      	ands	r3, r2
 800ea4e:	683a      	ldr	r2, [r7, #0]
 800ea50:	0052      	lsls	r2, r2, #1
 800ea52:	431a      	orrs	r2, r3
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800ea58:	2300      	movs	r3, #0
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	370c      	adds	r7, #12
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea64:	4770      	bx	lr
 800ea66:	bf00      	nop
 800ea68:	ffffc001 	.word	0xffffc001

0800ea6c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ea6c:	b084      	sub	sp, #16
 800ea6e:	b480      	push	{r7}
 800ea70:	b085      	sub	sp, #20
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	6078      	str	r0, [r7, #4]
 800ea76:	f107 001c 	add.w	r0, r7, #28
 800ea7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ea82:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ea84:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ea86:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ea88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800ea8a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ea8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800ea8e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ea90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800ea92:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ea94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800ea96:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ea98:	68fa      	ldr	r2, [r7, #12]
 800ea9a:	4313      	orrs	r3, r2
 800ea9c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	685a      	ldr	r2, [r3, #4]
 800eaa2:	4b07      	ldr	r3, [pc, #28]	@ (800eac0 <SDMMC_Init+0x54>)
 800eaa4:	4013      	ands	r3, r2
 800eaa6:	68fa      	ldr	r2, [r7, #12]
 800eaa8:	431a      	orrs	r2, r3
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800eaae:	2300      	movs	r3, #0
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	3714      	adds	r7, #20
 800eab4:	46bd      	mov	sp, r7
 800eab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaba:	b004      	add	sp, #16
 800eabc:	4770      	bx	lr
 800eabe:	bf00      	nop
 800eac0:	ffff8100 	.word	0xffff8100

0800eac4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800eac4:	b480      	push	{r7}
 800eac6:	b083      	sub	sp, #12
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2203      	movs	r2, #3
 800ead0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ead2:	2300      	movs	r3, #0
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	370c      	adds	r7, #12
 800ead8:	46bd      	mov	sp, r7
 800eada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eade:	4770      	bx	lr

0800eae0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800eae0:	b480      	push	{r7}
 800eae2:	b083      	sub	sp, #12
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	f003 0303 	and.w	r3, r3, #3
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	370c      	adds	r7, #12
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafa:	4770      	bx	lr

0800eafc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800eafc:	b480      	push	{r7}
 800eafe:	b085      	sub	sp, #20
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
 800eb04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800eb06:	2300      	movs	r3, #0
 800eb08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	681a      	ldr	r2, [r3, #0]
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800eb1a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800eb20:	431a      	orrs	r2, r3
                       Command->CPSM);
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800eb26:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800eb28:	68fa      	ldr	r2, [r7, #12]
 800eb2a:	4313      	orrs	r3, r2
 800eb2c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	68da      	ldr	r2, [r3, #12]
 800eb32:	4b06      	ldr	r3, [pc, #24]	@ (800eb4c <SDMMC_SendCommand+0x50>)
 800eb34:	4013      	ands	r3, r2
 800eb36:	68fa      	ldr	r2, [r7, #12]
 800eb38:	431a      	orrs	r2, r3
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800eb3e:	2300      	movs	r3, #0
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3714      	adds	r7, #20
 800eb44:	46bd      	mov	sp, r7
 800eb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4a:	4770      	bx	lr
 800eb4c:	fffff000 	.word	0xfffff000

0800eb50 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800eb50:	b480      	push	{r7}
 800eb52:	b083      	sub	sp, #12
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	691b      	ldr	r3, [r3, #16]
 800eb5c:	b2db      	uxtb	r3, r3
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	370c      	adds	r7, #12
 800eb62:	46bd      	mov	sp, r7
 800eb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb68:	4770      	bx	lr

0800eb6a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800eb6a:	b480      	push	{r7}
 800eb6c:	b085      	sub	sp, #20
 800eb6e:	af00      	add	r7, sp, #0
 800eb70:	6078      	str	r0, [r7, #4]
 800eb72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	3314      	adds	r3, #20
 800eb78:	461a      	mov	r2, r3
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	4413      	add	r3, r2
 800eb7e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	681b      	ldr	r3, [r3, #0]
}  
 800eb84:	4618      	mov	r0, r3
 800eb86:	3714      	adds	r7, #20
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8e:	4770      	bx	lr

0800eb90 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800eb90:	b480      	push	{r7}
 800eb92:	b085      	sub	sp, #20
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
 800eb98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	681a      	ldr	r2, [r3, #0]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	685a      	ldr	r2, [r3, #4]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ebb6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ebbc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ebc2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ebc4:	68fa      	ldr	r2, [r7, #12]
 800ebc6:	4313      	orrs	r3, r2
 800ebc8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebce:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	431a      	orrs	r2, r3
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800ebda:	2300      	movs	r3, #0

}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3714      	adds	r7, #20
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe6:	4770      	bx	lr

0800ebe8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b088      	sub	sp, #32
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ebf6:	2310      	movs	r3, #16
 800ebf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ebfa:	2340      	movs	r3, #64	@ 0x40
 800ebfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ec06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec08:	f107 0308 	add.w	r3, r7, #8
 800ec0c:	4619      	mov	r1, r3
 800ec0e:	6878      	ldr	r0, [r7, #4]
 800ec10:	f7ff ff74 	bl	800eafc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ec14:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec18:	2110      	movs	r1, #16
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	f000 f9d6 	bl	800efcc <SDMMC_GetCmdResp1>
 800ec20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec22:	69fb      	ldr	r3, [r7, #28]
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3720      	adds	r7, #32
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b088      	sub	sp, #32
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ec3a:	2311      	movs	r3, #17
 800ec3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec3e:	2340      	movs	r3, #64	@ 0x40
 800ec40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec42:	2300      	movs	r3, #0
 800ec44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ec4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec4c:	f107 0308 	add.w	r3, r7, #8
 800ec50:	4619      	mov	r1, r3
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f7ff ff52 	bl	800eafc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ec58:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec5c:	2111      	movs	r1, #17
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	f000 f9b4 	bl	800efcc <SDMMC_GetCmdResp1>
 800ec64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec66:	69fb      	ldr	r3, [r7, #28]
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3720      	adds	r7, #32
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}

0800ec70 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b088      	sub	sp, #32
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ec7e:	2312      	movs	r3, #18
 800ec80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec82:	2340      	movs	r3, #64	@ 0x40
 800ec84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec86:	2300      	movs	r3, #0
 800ec88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ec8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec90:	f107 0308 	add.w	r3, r7, #8
 800ec94:	4619      	mov	r1, r3
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f7ff ff30 	bl	800eafc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ec9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eca0:	2112      	movs	r1, #18
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f000 f992 	bl	800efcc <SDMMC_GetCmdResp1>
 800eca8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ecaa:	69fb      	ldr	r3, [r7, #28]
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3720      	adds	r7, #32
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b088      	sub	sp, #32
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ecc2:	2318      	movs	r3, #24
 800ecc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ecc6:	2340      	movs	r3, #64	@ 0x40
 800ecc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ecca:	2300      	movs	r3, #0
 800eccc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ecce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ecd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ecd4:	f107 0308 	add.w	r3, r7, #8
 800ecd8:	4619      	mov	r1, r3
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f7ff ff0e 	bl	800eafc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ece0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ece4:	2118      	movs	r1, #24
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f000 f970 	bl	800efcc <SDMMC_GetCmdResp1>
 800ecec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ecee:	69fb      	ldr	r3, [r7, #28]
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	3720      	adds	r7, #32
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}

0800ecf8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b088      	sub	sp, #32
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ed06:	2319      	movs	r3, #25
 800ed08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed0a:	2340      	movs	r3, #64	@ 0x40
 800ed0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed18:	f107 0308 	add.w	r3, r7, #8
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f7ff feec 	bl	800eafc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ed24:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ed28:	2119      	movs	r1, #25
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f000 f94e 	bl	800efcc <SDMMC_GetCmdResp1>
 800ed30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed32:	69fb      	ldr	r3, [r7, #28]
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3720      	adds	r7, #32
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}

0800ed3c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b088      	sub	sp, #32
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ed44:	2300      	movs	r3, #0
 800ed46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ed48:	230c      	movs	r3, #12
 800ed4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed4c:	2340      	movs	r3, #64	@ 0x40
 800ed4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed50:	2300      	movs	r3, #0
 800ed52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed5a:	f107 0308 	add.w	r3, r7, #8
 800ed5e:	4619      	mov	r1, r3
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f7ff fecb 	bl	800eafc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ed66:	4a05      	ldr	r2, [pc, #20]	@ (800ed7c <SDMMC_CmdStopTransfer+0x40>)
 800ed68:	210c      	movs	r1, #12
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f000 f92e 	bl	800efcc <SDMMC_GetCmdResp1>
 800ed70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed72:	69fb      	ldr	r3, [r7, #28]
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3720      	adds	r7, #32
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}
 800ed7c:	05f5e100 	.word	0x05f5e100

0800ed80 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b08a      	sub	sp, #40	@ 0x28
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	60f8      	str	r0, [r7, #12]
 800ed88:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ed90:	2307      	movs	r3, #7
 800ed92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed94:	2340      	movs	r3, #64	@ 0x40
 800ed96:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed98:	2300      	movs	r3, #0
 800ed9a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eda0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eda2:	f107 0310 	add.w	r3, r7, #16
 800eda6:	4619      	mov	r1, r3
 800eda8:	68f8      	ldr	r0, [r7, #12]
 800edaa:	f7ff fea7 	bl	800eafc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800edae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800edb2:	2107      	movs	r1, #7
 800edb4:	68f8      	ldr	r0, [r7, #12]
 800edb6:	f000 f909 	bl	800efcc <SDMMC_GetCmdResp1>
 800edba:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800edbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3728      	adds	r7, #40	@ 0x28
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}

0800edc6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800edc6:	b580      	push	{r7, lr}
 800edc8:	b088      	sub	sp, #32
 800edca:	af00      	add	r7, sp, #0
 800edcc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800edce:	2300      	movs	r3, #0
 800edd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800edd2:	2300      	movs	r3, #0
 800edd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800edd6:	2300      	movs	r3, #0
 800edd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800edda:	2300      	movs	r3, #0
 800eddc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800edde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ede2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ede4:	f107 0308 	add.w	r3, r7, #8
 800ede8:	4619      	mov	r1, r3
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f7ff fe86 	bl	800eafc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	f000 fb23 	bl	800f43c <SDMMC_GetCmdError>
 800edf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800edf8:	69fb      	ldr	r3, [r7, #28]
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	3720      	adds	r7, #32
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}

0800ee02 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ee02:	b580      	push	{r7, lr}
 800ee04:	b088      	sub	sp, #32
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ee0a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800ee0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ee10:	2308      	movs	r3, #8
 800ee12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ee14:	2340      	movs	r3, #64	@ 0x40
 800ee16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ee20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee22:	f107 0308 	add.w	r3, r7, #8
 800ee26:	4619      	mov	r1, r3
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f7ff fe67 	bl	800eafc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f000 fab6 	bl	800f3a0 <SDMMC_GetCmdResp7>
 800ee34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee36:	69fb      	ldr	r3, [r7, #28]
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3720      	adds	r7, #32
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b088      	sub	sp, #32
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ee4e:	2337      	movs	r3, #55	@ 0x37
 800ee50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ee52:	2340      	movs	r3, #64	@ 0x40
 800ee54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee56:	2300      	movs	r3, #0
 800ee58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ee5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee60:	f107 0308 	add.w	r3, r7, #8
 800ee64:	4619      	mov	r1, r3
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f7ff fe48 	bl	800eafc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ee6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ee70:	2137      	movs	r1, #55	@ 0x37
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f000 f8aa 	bl	800efcc <SDMMC_GetCmdResp1>
 800ee78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee7a:	69fb      	ldr	r3, [r7, #28]
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3720      	adds	r7, #32
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}

0800ee84 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b088      	sub	sp, #32
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ee8e:	683a      	ldr	r2, [r7, #0]
 800ee90:	4b0d      	ldr	r3, [pc, #52]	@ (800eec8 <SDMMC_CmdAppOperCommand+0x44>)
 800ee92:	4313      	orrs	r3, r2
 800ee94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ee96:	2329      	movs	r3, #41	@ 0x29
 800ee98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ee9a:	2340      	movs	r3, #64	@ 0x40
 800ee9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eea2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eea6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eea8:	f107 0308 	add.w	r3, r7, #8
 800eeac:	4619      	mov	r1, r3
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f7ff fe24 	bl	800eafc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f000 f9bf 	bl	800f238 <SDMMC_GetCmdResp3>
 800eeba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eebc:	69fb      	ldr	r3, [r7, #28]
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	3720      	adds	r7, #32
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}
 800eec6:	bf00      	nop
 800eec8:	80100000 	.word	0x80100000

0800eecc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b088      	sub	sp, #32
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800eed4:	2300      	movs	r3, #0
 800eed6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800eed8:	2302      	movs	r3, #2
 800eeda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800eedc:	23c0      	movs	r3, #192	@ 0xc0
 800eede:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eee0:	2300      	movs	r3, #0
 800eee2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eee4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eee8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eeea:	f107 0308 	add.w	r3, r7, #8
 800eeee:	4619      	mov	r1, r3
 800eef0:	6878      	ldr	r0, [r7, #4]
 800eef2:	f7ff fe03 	bl	800eafc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f000 f956 	bl	800f1a8 <SDMMC_GetCmdResp2>
 800eefc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eefe:	69fb      	ldr	r3, [r7, #28]
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3720      	adds	r7, #32
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}

0800ef08 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b088      	sub	sp, #32
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ef16:	2309      	movs	r3, #9
 800ef18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ef1a:	23c0      	movs	r3, #192	@ 0xc0
 800ef1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ef26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef28:	f107 0308 	add.w	r3, r7, #8
 800ef2c:	4619      	mov	r1, r3
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	f7ff fde4 	bl	800eafc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f000 f937 	bl	800f1a8 <SDMMC_GetCmdResp2>
 800ef3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef3c:	69fb      	ldr	r3, [r7, #28]
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3720      	adds	r7, #32
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}

0800ef46 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ef46:	b580      	push	{r7, lr}
 800ef48:	b088      	sub	sp, #32
 800ef4a:	af00      	add	r7, sp, #0
 800ef4c:	6078      	str	r0, [r7, #4]
 800ef4e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ef50:	2300      	movs	r3, #0
 800ef52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ef54:	2303      	movs	r3, #3
 800ef56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ef58:	2340      	movs	r3, #64	@ 0x40
 800ef5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ef64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef66:	f107 0308 	add.w	r3, r7, #8
 800ef6a:	4619      	mov	r1, r3
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f7ff fdc5 	bl	800eafc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ef72:	683a      	ldr	r2, [r7, #0]
 800ef74:	2103      	movs	r1, #3
 800ef76:	6878      	ldr	r0, [r7, #4]
 800ef78:	f000 f99c 	bl	800f2b4 <SDMMC_GetCmdResp6>
 800ef7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef7e:	69fb      	ldr	r3, [r7, #28]
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	3720      	adds	r7, #32
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}

0800ef88 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b088      	sub	sp, #32
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ef96:	230d      	movs	r3, #13
 800ef98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ef9a:	2340      	movs	r3, #64	@ 0x40
 800ef9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800efa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800efa6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800efa8:	f107 0308 	add.w	r3, r7, #8
 800efac:	4619      	mov	r1, r3
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f7ff fda4 	bl	800eafc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800efb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800efb8:	210d      	movs	r1, #13
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	f000 f806 	bl	800efcc <SDMMC_GetCmdResp1>
 800efc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800efc2:	69fb      	ldr	r3, [r7, #28]
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	3720      	adds	r7, #32
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}

0800efcc <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b088      	sub	sp, #32
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	60f8      	str	r0, [r7, #12]
 800efd4:	460b      	mov	r3, r1
 800efd6:	607a      	str	r2, [r7, #4]
 800efd8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800efda:	4b70      	ldr	r3, [pc, #448]	@ (800f19c <SDMMC_GetCmdResp1+0x1d0>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	4a70      	ldr	r2, [pc, #448]	@ (800f1a0 <SDMMC_GetCmdResp1+0x1d4>)
 800efe0:	fba2 2303 	umull	r2, r3, r2, r3
 800efe4:	0a5a      	lsrs	r2, r3, #9
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	fb02 f303 	mul.w	r3, r2, r3
 800efec:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800efee:	69fb      	ldr	r3, [r7, #28]
 800eff0:	1e5a      	subs	r2, r3, #1
 800eff2:	61fa      	str	r2, [r7, #28]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d102      	bne.n	800effe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eff8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800effc:	e0c9      	b.n	800f192 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f002:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f004:	69bb      	ldr	r3, [r7, #24]
 800f006:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d0ef      	beq.n	800efee <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f00e:	69bb      	ldr	r3, [r7, #24]
 800f010:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f014:	2b00      	cmp	r3, #0
 800f016:	d1ea      	bne.n	800efee <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f01c:	f003 0304 	and.w	r3, r3, #4
 800f020:	2b00      	cmp	r3, #0
 800f022:	d004      	beq.n	800f02e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	2204      	movs	r2, #4
 800f028:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f02a:	2304      	movs	r3, #4
 800f02c:	e0b1      	b.n	800f192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f032:	f003 0301 	and.w	r3, r3, #1
 800f036:	2b00      	cmp	r3, #0
 800f038:	d004      	beq.n	800f044 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	2201      	movs	r2, #1
 800f03e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f040:	2301      	movs	r3, #1
 800f042:	e0a6      	b.n	800f192 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	22c5      	movs	r2, #197	@ 0xc5
 800f048:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f04a:	68f8      	ldr	r0, [r7, #12]
 800f04c:	f7ff fd80 	bl	800eb50 <SDMMC_GetCommandResponse>
 800f050:	4603      	mov	r3, r0
 800f052:	461a      	mov	r2, r3
 800f054:	7afb      	ldrb	r3, [r7, #11]
 800f056:	4293      	cmp	r3, r2
 800f058:	d001      	beq.n	800f05e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f05a:	2301      	movs	r3, #1
 800f05c:	e099      	b.n	800f192 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f05e:	2100      	movs	r1, #0
 800f060:	68f8      	ldr	r0, [r7, #12]
 800f062:	f7ff fd82 	bl	800eb6a <SDMMC_GetResponse>
 800f066:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f068:	697a      	ldr	r2, [r7, #20]
 800f06a:	4b4e      	ldr	r3, [pc, #312]	@ (800f1a4 <SDMMC_GetCmdResp1+0x1d8>)
 800f06c:	4013      	ands	r3, r2
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d101      	bne.n	800f076 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f072:	2300      	movs	r3, #0
 800f074:	e08d      	b.n	800f192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	da02      	bge.n	800f082 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f07c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f080:	e087      	b.n	800f192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d001      	beq.n	800f090 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f08c:	2340      	movs	r3, #64	@ 0x40
 800f08e:	e080      	b.n	800f192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f096:	2b00      	cmp	r3, #0
 800f098:	d001      	beq.n	800f09e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f09a:	2380      	movs	r3, #128	@ 0x80
 800f09c:	e079      	b.n	800f192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d002      	beq.n	800f0ae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f0a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f0ac:	e071      	b.n	800f192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f0ae:	697b      	ldr	r3, [r7, #20]
 800f0b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d002      	beq.n	800f0be <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f0b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f0bc:	e069      	b.n	800f192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d002      	beq.n	800f0ce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f0c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f0cc:	e061      	b.n	800f192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d002      	beq.n	800f0de <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f0d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f0dc:	e059      	b.n	800f192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f0de:	697b      	ldr	r3, [r7, #20]
 800f0e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d002      	beq.n	800f0ee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f0e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f0ec:	e051      	b.n	800f192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d002      	beq.n	800f0fe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f0f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f0fc:	e049      	b.n	800f192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f104:	2b00      	cmp	r3, #0
 800f106:	d002      	beq.n	800f10e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f108:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800f10c:	e041      	b.n	800f192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f10e:	697b      	ldr	r3, [r7, #20]
 800f110:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f114:	2b00      	cmp	r3, #0
 800f116:	d002      	beq.n	800f11e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f118:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f11c:	e039      	b.n	800f192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f124:	2b00      	cmp	r3, #0
 800f126:	d002      	beq.n	800f12e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f128:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800f12c:	e031      	b.n	800f192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f134:	2b00      	cmp	r3, #0
 800f136:	d002      	beq.n	800f13e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f138:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800f13c:	e029      	b.n	800f192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f144:	2b00      	cmp	r3, #0
 800f146:	d002      	beq.n	800f14e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f148:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f14c:	e021      	b.n	800f192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f154:	2b00      	cmp	r3, #0
 800f156:	d002      	beq.n	800f15e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f158:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800f15c:	e019      	b.n	800f192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f164:	2b00      	cmp	r3, #0
 800f166:	d002      	beq.n	800f16e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f168:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800f16c:	e011      	b.n	800f192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f174:	2b00      	cmp	r3, #0
 800f176:	d002      	beq.n	800f17e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f178:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800f17c:	e009      	b.n	800f192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f17e:	697b      	ldr	r3, [r7, #20]
 800f180:	f003 0308 	and.w	r3, r3, #8
 800f184:	2b00      	cmp	r3, #0
 800f186:	d002      	beq.n	800f18e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f188:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800f18c:	e001      	b.n	800f192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f18e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800f192:	4618      	mov	r0, r3
 800f194:	3720      	adds	r7, #32
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
 800f19a:	bf00      	nop
 800f19c:	2000004c 	.word	0x2000004c
 800f1a0:	10624dd3 	.word	0x10624dd3
 800f1a4:	fdffe008 	.word	0xfdffe008

0800f1a8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b085      	sub	sp, #20
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f1b0:	4b1f      	ldr	r3, [pc, #124]	@ (800f230 <SDMMC_GetCmdResp2+0x88>)
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	4a1f      	ldr	r2, [pc, #124]	@ (800f234 <SDMMC_GetCmdResp2+0x8c>)
 800f1b6:	fba2 2303 	umull	r2, r3, r2, r3
 800f1ba:	0a5b      	lsrs	r3, r3, #9
 800f1bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f1c0:	fb02 f303 	mul.w	r3, r2, r3
 800f1c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	1e5a      	subs	r2, r3, #1
 800f1ca:	60fa      	str	r2, [r7, #12]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d102      	bne.n	800f1d6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f1d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f1d4:	e026      	b.n	800f224 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d0ef      	beq.n	800f1c6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d1ea      	bne.n	800f1c6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1f4:	f003 0304 	and.w	r3, r3, #4
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d004      	beq.n	800f206 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2204      	movs	r2, #4
 800f200:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f202:	2304      	movs	r3, #4
 800f204:	e00e      	b.n	800f224 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f20a:	f003 0301 	and.w	r3, r3, #1
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d004      	beq.n	800f21c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	2201      	movs	r2, #1
 800f216:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f218:	2301      	movs	r3, #1
 800f21a:	e003      	b.n	800f224 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	22c5      	movs	r2, #197	@ 0xc5
 800f220:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800f222:	2300      	movs	r3, #0
}
 800f224:	4618      	mov	r0, r3
 800f226:	3714      	adds	r7, #20
 800f228:	46bd      	mov	sp, r7
 800f22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22e:	4770      	bx	lr
 800f230:	2000004c 	.word	0x2000004c
 800f234:	10624dd3 	.word	0x10624dd3

0800f238 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800f238:	b480      	push	{r7}
 800f23a:	b085      	sub	sp, #20
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f240:	4b1a      	ldr	r3, [pc, #104]	@ (800f2ac <SDMMC_GetCmdResp3+0x74>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	4a1a      	ldr	r2, [pc, #104]	@ (800f2b0 <SDMMC_GetCmdResp3+0x78>)
 800f246:	fba2 2303 	umull	r2, r3, r2, r3
 800f24a:	0a5b      	lsrs	r3, r3, #9
 800f24c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f250:	fb02 f303 	mul.w	r3, r2, r3
 800f254:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	1e5a      	subs	r2, r3, #1
 800f25a:	60fa      	str	r2, [r7, #12]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d102      	bne.n	800f266 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f260:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f264:	e01b      	b.n	800f29e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f26a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f272:	2b00      	cmp	r3, #0
 800f274:	d0ef      	beq.n	800f256 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d1ea      	bne.n	800f256 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f284:	f003 0304 	and.w	r3, r3, #4
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d004      	beq.n	800f296 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2204      	movs	r2, #4
 800f290:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f292:	2304      	movs	r3, #4
 800f294:	e003      	b.n	800f29e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	22c5      	movs	r2, #197	@ 0xc5
 800f29a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f29c:	2300      	movs	r3, #0
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3714      	adds	r7, #20
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a8:	4770      	bx	lr
 800f2aa:	bf00      	nop
 800f2ac:	2000004c 	.word	0x2000004c
 800f2b0:	10624dd3 	.word	0x10624dd3

0800f2b4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b088      	sub	sp, #32
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	60f8      	str	r0, [r7, #12]
 800f2bc:	460b      	mov	r3, r1
 800f2be:	607a      	str	r2, [r7, #4]
 800f2c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f2c2:	4b35      	ldr	r3, [pc, #212]	@ (800f398 <SDMMC_GetCmdResp6+0xe4>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	4a35      	ldr	r2, [pc, #212]	@ (800f39c <SDMMC_GetCmdResp6+0xe8>)
 800f2c8:	fba2 2303 	umull	r2, r3, r2, r3
 800f2cc:	0a5b      	lsrs	r3, r3, #9
 800f2ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f2d2:	fb02 f303 	mul.w	r3, r2, r3
 800f2d6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800f2d8:	69fb      	ldr	r3, [r7, #28]
 800f2da:	1e5a      	subs	r2, r3, #1
 800f2dc:	61fa      	str	r2, [r7, #28]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d102      	bne.n	800f2e8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f2e2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f2e6:	e052      	b.n	800f38e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2ec:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f2ee:	69bb      	ldr	r3, [r7, #24]
 800f2f0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d0ef      	beq.n	800f2d8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f2f8:	69bb      	ldr	r3, [r7, #24]
 800f2fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d1ea      	bne.n	800f2d8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f306:	f003 0304 	and.w	r3, r3, #4
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d004      	beq.n	800f318 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	2204      	movs	r2, #4
 800f312:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f314:	2304      	movs	r3, #4
 800f316:	e03a      	b.n	800f38e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f31c:	f003 0301 	and.w	r3, r3, #1
 800f320:	2b00      	cmp	r3, #0
 800f322:	d004      	beq.n	800f32e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	2201      	movs	r2, #1
 800f328:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f32a:	2301      	movs	r3, #1
 800f32c:	e02f      	b.n	800f38e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f32e:	68f8      	ldr	r0, [r7, #12]
 800f330:	f7ff fc0e 	bl	800eb50 <SDMMC_GetCommandResponse>
 800f334:	4603      	mov	r3, r0
 800f336:	461a      	mov	r2, r3
 800f338:	7afb      	ldrb	r3, [r7, #11]
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d001      	beq.n	800f342 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f33e:	2301      	movs	r3, #1
 800f340:	e025      	b.n	800f38e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	22c5      	movs	r2, #197	@ 0xc5
 800f346:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f348:	2100      	movs	r1, #0
 800f34a:	68f8      	ldr	r0, [r7, #12]
 800f34c:	f7ff fc0d 	bl	800eb6a <SDMMC_GetResponse>
 800f350:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d106      	bne.n	800f36a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	0c1b      	lsrs	r3, r3, #16
 800f360:	b29a      	uxth	r2, r3
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800f366:	2300      	movs	r3, #0
 800f368:	e011      	b.n	800f38e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f370:	2b00      	cmp	r3, #0
 800f372:	d002      	beq.n	800f37a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f374:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f378:	e009      	b.n	800f38e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f37a:	697b      	ldr	r3, [r7, #20]
 800f37c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f380:	2b00      	cmp	r3, #0
 800f382:	d002      	beq.n	800f38a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f384:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f388:	e001      	b.n	800f38e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f38a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800f38e:	4618      	mov	r0, r3
 800f390:	3720      	adds	r7, #32
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}
 800f396:	bf00      	nop
 800f398:	2000004c 	.word	0x2000004c
 800f39c:	10624dd3 	.word	0x10624dd3

0800f3a0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	b085      	sub	sp, #20
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f3a8:	4b22      	ldr	r3, [pc, #136]	@ (800f434 <SDMMC_GetCmdResp7+0x94>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	4a22      	ldr	r2, [pc, #136]	@ (800f438 <SDMMC_GetCmdResp7+0x98>)
 800f3ae:	fba2 2303 	umull	r2, r3, r2, r3
 800f3b2:	0a5b      	lsrs	r3, r3, #9
 800f3b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f3b8:	fb02 f303 	mul.w	r3, r2, r3
 800f3bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	1e5a      	subs	r2, r3, #1
 800f3c2:	60fa      	str	r2, [r7, #12]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d102      	bne.n	800f3ce <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f3c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f3cc:	e02c      	b.n	800f428 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f3d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d0ef      	beq.n	800f3be <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d1ea      	bne.n	800f3be <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f3ec:	f003 0304 	and.w	r3, r3, #4
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d004      	beq.n	800f3fe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2204      	movs	r2, #4
 800f3f8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f3fa:	2304      	movs	r3, #4
 800f3fc:	e014      	b.n	800f428 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f402:	f003 0301 	and.w	r3, r3, #1
 800f406:	2b00      	cmp	r3, #0
 800f408:	d004      	beq.n	800f414 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2201      	movs	r2, #1
 800f40e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f410:	2301      	movs	r3, #1
 800f412:	e009      	b.n	800f428 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d002      	beq.n	800f426 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2240      	movs	r2, #64	@ 0x40
 800f424:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f426:	2300      	movs	r3, #0
  
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3714      	adds	r7, #20
 800f42c:	46bd      	mov	sp, r7
 800f42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f432:	4770      	bx	lr
 800f434:	2000004c 	.word	0x2000004c
 800f438:	10624dd3 	.word	0x10624dd3

0800f43c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f43c:	b480      	push	{r7}
 800f43e:	b085      	sub	sp, #20
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f444:	4b11      	ldr	r3, [pc, #68]	@ (800f48c <SDMMC_GetCmdError+0x50>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	4a11      	ldr	r2, [pc, #68]	@ (800f490 <SDMMC_GetCmdError+0x54>)
 800f44a:	fba2 2303 	umull	r2, r3, r2, r3
 800f44e:	0a5b      	lsrs	r3, r3, #9
 800f450:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f454:	fb02 f303 	mul.w	r3, r2, r3
 800f458:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	1e5a      	subs	r2, r3, #1
 800f45e:	60fa      	str	r2, [r7, #12]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d102      	bne.n	800f46a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f464:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f468:	e009      	b.n	800f47e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f46e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f472:	2b00      	cmp	r3, #0
 800f474:	d0f1      	beq.n	800f45a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	22c5      	movs	r2, #197	@ 0xc5
 800f47a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800f47c:	2300      	movs	r3, #0
}
 800f47e:	4618      	mov	r0, r3
 800f480:	3714      	adds	r7, #20
 800f482:	46bd      	mov	sp, r7
 800f484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f488:	4770      	bx	lr
 800f48a:	bf00      	nop
 800f48c:	2000004c 	.word	0x2000004c
 800f490:	10624dd3 	.word	0x10624dd3

0800f494 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f498:	4904      	ldr	r1, [pc, #16]	@ (800f4ac <MX_FATFS_Init+0x18>)
 800f49a:	4805      	ldr	r0, [pc, #20]	@ (800f4b0 <MX_FATFS_Init+0x1c>)
 800f49c:	f002 feb4 	bl	8012208 <FATFS_LinkDriver>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	461a      	mov	r2, r3
 800f4a4:	4b03      	ldr	r3, [pc, #12]	@ (800f4b4 <MX_FATFS_Init+0x20>)
 800f4a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f4a8:	bf00      	nop
 800f4aa:	bd80      	pop	{r7, pc}
 800f4ac:	20001004 	.word	0x20001004
 800f4b0:	08024ccc 	.word	0x08024ccc
 800f4b4:	20001000 	.word	0x20001000

0800f4b8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f4b8:	b480      	push	{r7}
 800f4ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f4bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr

0800f4c8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f4d2:	f000 f86d 	bl	800f5b0 <BSP_SD_IsDetected>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	2b01      	cmp	r3, #1
 800f4da:	d001      	beq.n	800f4e0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800f4dc:	2302      	movs	r3, #2
 800f4de:	e005      	b.n	800f4ec <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800f4e0:	4804      	ldr	r0, [pc, #16]	@ (800f4f4 <BSP_SD_Init+0x2c>)
 800f4e2:	f7fd fb60 	bl	800cba6 <HAL_SD_Init>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800f4ea:	79fb      	ldrb	r3, [r7, #7]
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3708      	adds	r7, #8
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}
 800f4f4:	2000093c 	.word	0x2000093c

0800f4f8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b086      	sub	sp, #24
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	60f8      	str	r0, [r7, #12]
 800f500:	60b9      	str	r1, [r7, #8]
 800f502:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f504:	2300      	movs	r3, #0
 800f506:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	68ba      	ldr	r2, [r7, #8]
 800f50c:	68f9      	ldr	r1, [r7, #12]
 800f50e:	4806      	ldr	r0, [pc, #24]	@ (800f528 <BSP_SD_ReadBlocks_DMA+0x30>)
 800f510:	f7fd fc02 	bl	800cd18 <HAL_SD_ReadBlocks_DMA>
 800f514:	4603      	mov	r3, r0
 800f516:	2b00      	cmp	r3, #0
 800f518:	d001      	beq.n	800f51e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f51a:	2301      	movs	r3, #1
 800f51c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f51e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f520:	4618      	mov	r0, r3
 800f522:	3718      	adds	r7, #24
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}
 800f528:	2000093c 	.word	0x2000093c

0800f52c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b086      	sub	sp, #24
 800f530:	af00      	add	r7, sp, #0
 800f532:	60f8      	str	r0, [r7, #12]
 800f534:	60b9      	str	r1, [r7, #8]
 800f536:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f538:	2300      	movs	r3, #0
 800f53a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	68ba      	ldr	r2, [r7, #8]
 800f540:	68f9      	ldr	r1, [r7, #12]
 800f542:	4806      	ldr	r0, [pc, #24]	@ (800f55c <BSP_SD_WriteBlocks_DMA+0x30>)
 800f544:	f7fd fcca 	bl	800cedc <HAL_SD_WriteBlocks_DMA>
 800f548:	4603      	mov	r3, r0
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d001      	beq.n	800f552 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f54e:	2301      	movs	r3, #1
 800f550:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f552:	7dfb      	ldrb	r3, [r7, #23]
}
 800f554:	4618      	mov	r0, r3
 800f556:	3718      	adds	r7, #24
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}
 800f55c:	2000093c 	.word	0x2000093c

0800f560 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f564:	4805      	ldr	r0, [pc, #20]	@ (800f57c <BSP_SD_GetCardState+0x1c>)
 800f566:	f7fd ff79 	bl	800d45c <HAL_SD_GetCardState>
 800f56a:	4603      	mov	r3, r0
 800f56c:	2b04      	cmp	r3, #4
 800f56e:	bf14      	ite	ne
 800f570:	2301      	movne	r3, #1
 800f572:	2300      	moveq	r3, #0
 800f574:	b2db      	uxtb	r3, r3
}
 800f576:	4618      	mov	r0, r3
 800f578:	bd80      	pop	{r7, pc}
 800f57a:	bf00      	nop
 800f57c:	2000093c 	.word	0x2000093c

0800f580 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b082      	sub	sp, #8
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f588:	6879      	ldr	r1, [r7, #4]
 800f58a:	4803      	ldr	r0, [pc, #12]	@ (800f598 <BSP_SD_GetCardInfo+0x18>)
 800f58c:	f7fd ff3a 	bl	800d404 <HAL_SD_GetCardInfo>
}
 800f590:	bf00      	nop
 800f592:	3708      	adds	r7, #8
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}
 800f598:	2000093c 	.word	0x2000093c

0800f59c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b082      	sub	sp, #8
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800f5a4:	f000 f9b2 	bl	800f90c <BSP_SD_ReadCpltCallback>
}
 800f5a8:	bf00      	nop
 800f5aa:	3708      	adds	r7, #8
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}

0800f5b0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b082      	sub	sp, #8
 800f5b4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f5ba:	f000 f80b 	bl	800f5d4 <BSP_PlatformIsDetected>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d101      	bne.n	800f5c8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f5c8:	79fb      	ldrb	r3, [r7, #7]
 800f5ca:	b2db      	uxtb	r3, r3
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3708      	adds	r7, #8
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}

0800f5d4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b082      	sub	sp, #8
 800f5d8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f5da:	2301      	movs	r3, #1
 800f5dc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f5de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f5e2:	4806      	ldr	r0, [pc, #24]	@ (800f5fc <BSP_PlatformIsDetected+0x28>)
 800f5e4:	f7fa fae2 	bl	8009bac <HAL_GPIO_ReadPin>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d001      	beq.n	800f5f2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f5f2:	79fb      	ldrb	r3, [r7, #7]
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3708      	adds	r7, #8
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}
 800f5fc:	40020800 	.word	0x40020800

0800f600 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b084      	sub	sp, #16
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800f608:	f002 fe96 	bl	8012338 <osKernelSysTick>
 800f60c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800f60e:	e006      	b.n	800f61e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f610:	f7ff ffa6 	bl	800f560 <BSP_SD_GetCardState>
 800f614:	4603      	mov	r3, r0
 800f616:	2b00      	cmp	r3, #0
 800f618:	d101      	bne.n	800f61e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800f61a:	2300      	movs	r3, #0
 800f61c:	e009      	b.n	800f632 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800f61e:	f002 fe8b 	bl	8012338 <osKernelSysTick>
 800f622:	4602      	mov	r2, r0
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	1ad3      	subs	r3, r2, r3
 800f628:	687a      	ldr	r2, [r7, #4]
 800f62a:	429a      	cmp	r2, r3
 800f62c:	d8f0      	bhi.n	800f610 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800f62e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800f632:	4618      	mov	r0, r3
 800f634:	3710      	adds	r7, #16
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}
	...

0800f63c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b082      	sub	sp, #8
 800f640:	af00      	add	r7, sp, #0
 800f642:	4603      	mov	r3, r0
 800f644:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f646:	4b0b      	ldr	r3, [pc, #44]	@ (800f674 <SD_CheckStatus+0x38>)
 800f648:	2201      	movs	r2, #1
 800f64a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f64c:	f7ff ff88 	bl	800f560 <BSP_SD_GetCardState>
 800f650:	4603      	mov	r3, r0
 800f652:	2b00      	cmp	r3, #0
 800f654:	d107      	bne.n	800f666 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f656:	4b07      	ldr	r3, [pc, #28]	@ (800f674 <SD_CheckStatus+0x38>)
 800f658:	781b      	ldrb	r3, [r3, #0]
 800f65a:	b2db      	uxtb	r3, r3
 800f65c:	f023 0301 	bic.w	r3, r3, #1
 800f660:	b2da      	uxtb	r2, r3
 800f662:	4b04      	ldr	r3, [pc, #16]	@ (800f674 <SD_CheckStatus+0x38>)
 800f664:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f666:	4b03      	ldr	r3, [pc, #12]	@ (800f674 <SD_CheckStatus+0x38>)
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	b2db      	uxtb	r3, r3
}
 800f66c:	4618      	mov	r0, r3
 800f66e:	3708      	adds	r7, #8
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}
 800f674:	20000091 	.word	0x20000091

0800f678 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f678:	b590      	push	{r4, r7, lr}
 800f67a:	b087      	sub	sp, #28
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	4603      	mov	r3, r0
 800f680:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f682:	4b20      	ldr	r3, [pc, #128]	@ (800f704 <SD_initialize+0x8c>)
 800f684:	2201      	movs	r2, #1
 800f686:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800f688:	f002 fe4a 	bl	8012320 <osKernelRunning>
 800f68c:	4603      	mov	r3, r0
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d030      	beq.n	800f6f4 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800f692:	f7ff ff19 	bl	800f4c8 <BSP_SD_Init>
 800f696:	4603      	mov	r3, r0
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d107      	bne.n	800f6ac <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800f69c:	79fb      	ldrb	r3, [r7, #7]
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7ff ffcc 	bl	800f63c <SD_CheckStatus>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	461a      	mov	r2, r3
 800f6a8:	4b16      	ldr	r3, [pc, #88]	@ (800f704 <SD_initialize+0x8c>)
 800f6aa:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800f6ac:	4b15      	ldr	r3, [pc, #84]	@ (800f704 <SD_initialize+0x8c>)
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	b2db      	uxtb	r3, r3
 800f6b2:	2b01      	cmp	r3, #1
 800f6b4:	d01e      	beq.n	800f6f4 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800f6b6:	4b14      	ldr	r3, [pc, #80]	@ (800f708 <SD_initialize+0x90>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d10e      	bne.n	800f6dc <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800f6be:	4b13      	ldr	r3, [pc, #76]	@ (800f70c <SD_initialize+0x94>)
 800f6c0:	f107 0408 	add.w	r4, r7, #8
 800f6c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f6c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800f6ca:	f107 0308 	add.w	r3, r7, #8
 800f6ce:	2100      	movs	r1, #0
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f002 ff82 	bl	80125da <osMessageCreate>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	4a0b      	ldr	r2, [pc, #44]	@ (800f708 <SD_initialize+0x90>)
 800f6da:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800f6dc:	4b0a      	ldr	r3, [pc, #40]	@ (800f708 <SD_initialize+0x90>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d107      	bne.n	800f6f4 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800f6e4:	4b07      	ldr	r3, [pc, #28]	@ (800f704 <SD_initialize+0x8c>)
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	b2db      	uxtb	r3, r3
 800f6ea:	f043 0301 	orr.w	r3, r3, #1
 800f6ee:	b2da      	uxtb	r2, r3
 800f6f0:	4b04      	ldr	r3, [pc, #16]	@ (800f704 <SD_initialize+0x8c>)
 800f6f2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800f6f4:	4b03      	ldr	r3, [pc, #12]	@ (800f704 <SD_initialize+0x8c>)
 800f6f6:	781b      	ldrb	r3, [r3, #0]
 800f6f8:	b2db      	uxtb	r3, r3
}
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	371c      	adds	r7, #28
 800f6fe:	46bd      	mov	sp, r7
 800f700:	bd90      	pop	{r4, r7, pc}
 800f702:	bf00      	nop
 800f704:	20000091 	.word	0x20000091
 800f708:	2000146c 	.word	0x2000146c
 800f70c:	08016984 	.word	0x08016984

0800f710 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b082      	sub	sp, #8
 800f714:	af00      	add	r7, sp, #0
 800f716:	4603      	mov	r3, r0
 800f718:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f71a:	79fb      	ldrb	r3, [r7, #7]
 800f71c:	4618      	mov	r0, r3
 800f71e:	f7ff ff8d 	bl	800f63c <SD_CheckStatus>
 800f722:	4603      	mov	r3, r0
}
 800f724:	4618      	mov	r0, r3
 800f726:	3708      	adds	r7, #8
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}

0800f72c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b08a      	sub	sp, #40	@ 0x28
 800f730:	af00      	add	r7, sp, #0
 800f732:	60b9      	str	r1, [r7, #8]
 800f734:	607a      	str	r2, [r7, #4]
 800f736:	603b      	str	r3, [r7, #0]
 800f738:	4603      	mov	r3, r0
 800f73a:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800f73c:	2301      	movs	r3, #1
 800f73e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f742:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f746:	f7ff ff5b 	bl	800f600 <SD_CheckStatusWithTimeout>
 800f74a:	4603      	mov	r3, r0
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	da02      	bge.n	800f756 <SD_read+0x2a>
  {
    return res;
 800f750:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f754:	e032      	b.n	800f7bc <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800f756:	683a      	ldr	r2, [r7, #0]
 800f758:	6879      	ldr	r1, [r7, #4]
 800f75a:	68b8      	ldr	r0, [r7, #8]
 800f75c:	f7ff fecc 	bl	800f4f8 <BSP_SD_ReadBlocks_DMA>
 800f760:	4603      	mov	r3, r0
 800f762:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800f766:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d124      	bne.n	800f7b8 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800f76e:	4b15      	ldr	r3, [pc, #84]	@ (800f7c4 <SD_read+0x98>)
 800f770:	6819      	ldr	r1, [r3, #0]
 800f772:	f107 0314 	add.w	r3, r7, #20
 800f776:	f247 5230 	movw	r2, #30000	@ 0x7530
 800f77a:	4618      	mov	r0, r3
 800f77c:	f002 ff96 	bl	80126ac <osMessageGet>

    if (event.status == osEventMessage)
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	2b10      	cmp	r3, #16
 800f784:	d118      	bne.n	800f7b8 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800f786:	69bb      	ldr	r3, [r7, #24]
 800f788:	2b01      	cmp	r3, #1
 800f78a:	d115      	bne.n	800f7b8 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800f78c:	f002 fdd4 	bl	8012338 <osKernelSysTick>
 800f790:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800f792:	e008      	b.n	800f7a6 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f794:	f7ff fee4 	bl	800f560 <BSP_SD_GetCardState>
 800f798:	4603      	mov	r3, r0
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d103      	bne.n	800f7a6 <SD_read+0x7a>
              {
                res = RES_OK;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800f7a4:	e008      	b.n	800f7b8 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800f7a6:	f002 fdc7 	bl	8012338 <osKernelSysTick>
 800f7aa:	4602      	mov	r2, r0
 800f7ac:	6a3b      	ldr	r3, [r7, #32]
 800f7ae:	1ad3      	subs	r3, r2, r3
 800f7b0:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d9ed      	bls.n	800f794 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800f7b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	3728      	adds	r7, #40	@ 0x28
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}
 800f7c4:	2000146c 	.word	0x2000146c

0800f7c8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b08a      	sub	sp, #40	@ 0x28
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	60b9      	str	r1, [r7, #8]
 800f7d0:	607a      	str	r2, [r7, #4]
 800f7d2:	603b      	str	r3, [r7, #0]
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f7d8:	2301      	movs	r3, #1
 800f7da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f7de:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f7e2:	f7ff ff0d 	bl	800f600 <SD_CheckStatusWithTimeout>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	da02      	bge.n	800f7f2 <SD_write+0x2a>
  {
    return res;
 800f7ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f7f0:	e02e      	b.n	800f850 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f7f2:	683a      	ldr	r2, [r7, #0]
 800f7f4:	6879      	ldr	r1, [r7, #4]
 800f7f6:	68b8      	ldr	r0, [r7, #8]
 800f7f8:	f7ff fe98 	bl	800f52c <BSP_SD_WriteBlocks_DMA>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d124      	bne.n	800f84c <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800f802:	4b15      	ldr	r3, [pc, #84]	@ (800f858 <SD_write+0x90>)
 800f804:	6819      	ldr	r1, [r3, #0]
 800f806:	f107 0314 	add.w	r3, r7, #20
 800f80a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800f80e:	4618      	mov	r0, r3
 800f810:	f002 ff4c 	bl	80126ac <osMessageGet>

    if (event.status == osEventMessage)
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	2b10      	cmp	r3, #16
 800f818:	d118      	bne.n	800f84c <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800f81a:	69bb      	ldr	r3, [r7, #24]
 800f81c:	2b02      	cmp	r3, #2
 800f81e:	d115      	bne.n	800f84c <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800f820:	f002 fd8a 	bl	8012338 <osKernelSysTick>
 800f824:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800f826:	e008      	b.n	800f83a <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f828:	f7ff fe9a 	bl	800f560 <BSP_SD_GetCardState>
 800f82c:	4603      	mov	r3, r0
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d103      	bne.n	800f83a <SD_write+0x72>
          {
            res = RES_OK;
 800f832:	2300      	movs	r3, #0
 800f834:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800f838:	e008      	b.n	800f84c <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800f83a:	f002 fd7d 	bl	8012338 <osKernelSysTick>
 800f83e:	4602      	mov	r2, r0
 800f840:	6a3b      	ldr	r3, [r7, #32]
 800f842:	1ad3      	subs	r3, r2, r3
 800f844:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f848:	4293      	cmp	r3, r2
 800f84a:	d9ed      	bls.n	800f828 <SD_write+0x60>
    }

  }
#endif

  return res;
 800f84c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f850:	4618      	mov	r0, r3
 800f852:	3728      	adds	r7, #40	@ 0x28
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}
 800f858:	2000146c 	.word	0x2000146c

0800f85c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b08c      	sub	sp, #48	@ 0x30
 800f860:	af00      	add	r7, sp, #0
 800f862:	4603      	mov	r3, r0
 800f864:	603a      	str	r2, [r7, #0]
 800f866:	71fb      	strb	r3, [r7, #7]
 800f868:	460b      	mov	r3, r1
 800f86a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f86c:	2301      	movs	r3, #1
 800f86e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f872:	4b25      	ldr	r3, [pc, #148]	@ (800f908 <SD_ioctl+0xac>)
 800f874:	781b      	ldrb	r3, [r3, #0]
 800f876:	b2db      	uxtb	r3, r3
 800f878:	f003 0301 	and.w	r3, r3, #1
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d001      	beq.n	800f884 <SD_ioctl+0x28>
 800f880:	2303      	movs	r3, #3
 800f882:	e03c      	b.n	800f8fe <SD_ioctl+0xa2>

  switch (cmd)
 800f884:	79bb      	ldrb	r3, [r7, #6]
 800f886:	2b03      	cmp	r3, #3
 800f888:	d834      	bhi.n	800f8f4 <SD_ioctl+0x98>
 800f88a:	a201      	add	r2, pc, #4	@ (adr r2, 800f890 <SD_ioctl+0x34>)
 800f88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f890:	0800f8a1 	.word	0x0800f8a1
 800f894:	0800f8a9 	.word	0x0800f8a9
 800f898:	0800f8c1 	.word	0x0800f8c1
 800f89c:	0800f8db 	.word	0x0800f8db
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f8a6:	e028      	b.n	800f8fa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f8a8:	f107 030c 	add.w	r3, r7, #12
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f7ff fe67 	bl	800f580 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f8b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f8be:	e01c      	b.n	800f8fa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f8c0:	f107 030c 	add.w	r3, r7, #12
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f7ff fe5b 	bl	800f580 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8cc:	b29a      	uxth	r2, r3
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f8d8:	e00f      	b.n	800f8fa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f8da:	f107 030c 	add.w	r3, r7, #12
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f7ff fe4e 	bl	800f580 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f8e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8e6:	0a5a      	lsrs	r2, r3, #9
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f8f2:	e002      	b.n	800f8fa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f8f4:	2304      	movs	r3, #4
 800f8f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800f8fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3730      	adds	r7, #48	@ 0x30
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}
 800f906:	bf00      	nop
 800f908:	20000091 	.word	0x20000091

0800f90c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800f910:	4b04      	ldr	r3, [pc, #16]	@ (800f924 <BSP_SD_ReadCpltCallback+0x18>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	2200      	movs	r2, #0
 800f916:	2101      	movs	r1, #1
 800f918:	4618      	mov	r0, r3
 800f91a:	f002 fe87 	bl	801262c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800f91e:	bf00      	nop
 800f920:	bd80      	pop	{r7, pc}
 800f922:	bf00      	nop
 800f924:	2000146c 	.word	0x2000146c

0800f928 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b084      	sub	sp, #16
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	4603      	mov	r3, r0
 800f930:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f932:	79fb      	ldrb	r3, [r7, #7]
 800f934:	4a08      	ldr	r2, [pc, #32]	@ (800f958 <disk_status+0x30>)
 800f936:	009b      	lsls	r3, r3, #2
 800f938:	4413      	add	r3, r2
 800f93a:	685b      	ldr	r3, [r3, #4]
 800f93c:	685b      	ldr	r3, [r3, #4]
 800f93e:	79fa      	ldrb	r2, [r7, #7]
 800f940:	4905      	ldr	r1, [pc, #20]	@ (800f958 <disk_status+0x30>)
 800f942:	440a      	add	r2, r1
 800f944:	7a12      	ldrb	r2, [r2, #8]
 800f946:	4610      	mov	r0, r2
 800f948:	4798      	blx	r3
 800f94a:	4603      	mov	r3, r0
 800f94c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f94e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f950:	4618      	mov	r0, r3
 800f952:	3710      	adds	r7, #16
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}
 800f958:	20001498 	.word	0x20001498

0800f95c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b084      	sub	sp, #16
 800f960:	af00      	add	r7, sp, #0
 800f962:	4603      	mov	r3, r0
 800f964:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f966:	2300      	movs	r3, #0
 800f968:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f96a:	79fb      	ldrb	r3, [r7, #7]
 800f96c:	4a0d      	ldr	r2, [pc, #52]	@ (800f9a4 <disk_initialize+0x48>)
 800f96e:	5cd3      	ldrb	r3, [r2, r3]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d111      	bne.n	800f998 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f974:	79fb      	ldrb	r3, [r7, #7]
 800f976:	4a0b      	ldr	r2, [pc, #44]	@ (800f9a4 <disk_initialize+0x48>)
 800f978:	2101      	movs	r1, #1
 800f97a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f97c:	79fb      	ldrb	r3, [r7, #7]
 800f97e:	4a09      	ldr	r2, [pc, #36]	@ (800f9a4 <disk_initialize+0x48>)
 800f980:	009b      	lsls	r3, r3, #2
 800f982:	4413      	add	r3, r2
 800f984:	685b      	ldr	r3, [r3, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	79fa      	ldrb	r2, [r7, #7]
 800f98a:	4906      	ldr	r1, [pc, #24]	@ (800f9a4 <disk_initialize+0x48>)
 800f98c:	440a      	add	r2, r1
 800f98e:	7a12      	ldrb	r2, [r2, #8]
 800f990:	4610      	mov	r0, r2
 800f992:	4798      	blx	r3
 800f994:	4603      	mov	r3, r0
 800f996:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f998:	7bfb      	ldrb	r3, [r7, #15]
}
 800f99a:	4618      	mov	r0, r3
 800f99c:	3710      	adds	r7, #16
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}
 800f9a2:	bf00      	nop
 800f9a4:	20001498 	.word	0x20001498

0800f9a8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f9a8:	b590      	push	{r4, r7, lr}
 800f9aa:	b087      	sub	sp, #28
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	60b9      	str	r1, [r7, #8]
 800f9b0:	607a      	str	r2, [r7, #4]
 800f9b2:	603b      	str	r3, [r7, #0]
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f9b8:	7bfb      	ldrb	r3, [r7, #15]
 800f9ba:	4a0a      	ldr	r2, [pc, #40]	@ (800f9e4 <disk_read+0x3c>)
 800f9bc:	009b      	lsls	r3, r3, #2
 800f9be:	4413      	add	r3, r2
 800f9c0:	685b      	ldr	r3, [r3, #4]
 800f9c2:	689c      	ldr	r4, [r3, #8]
 800f9c4:	7bfb      	ldrb	r3, [r7, #15]
 800f9c6:	4a07      	ldr	r2, [pc, #28]	@ (800f9e4 <disk_read+0x3c>)
 800f9c8:	4413      	add	r3, r2
 800f9ca:	7a18      	ldrb	r0, [r3, #8]
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	687a      	ldr	r2, [r7, #4]
 800f9d0:	68b9      	ldr	r1, [r7, #8]
 800f9d2:	47a0      	blx	r4
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	75fb      	strb	r3, [r7, #23]
  return res;
 800f9d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9da:	4618      	mov	r0, r3
 800f9dc:	371c      	adds	r7, #28
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd90      	pop	{r4, r7, pc}
 800f9e2:	bf00      	nop
 800f9e4:	20001498 	.word	0x20001498

0800f9e8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f9e8:	b590      	push	{r4, r7, lr}
 800f9ea:	b087      	sub	sp, #28
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	60b9      	str	r1, [r7, #8]
 800f9f0:	607a      	str	r2, [r7, #4]
 800f9f2:	603b      	str	r3, [r7, #0]
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f9f8:	7bfb      	ldrb	r3, [r7, #15]
 800f9fa:	4a0a      	ldr	r2, [pc, #40]	@ (800fa24 <disk_write+0x3c>)
 800f9fc:	009b      	lsls	r3, r3, #2
 800f9fe:	4413      	add	r3, r2
 800fa00:	685b      	ldr	r3, [r3, #4]
 800fa02:	68dc      	ldr	r4, [r3, #12]
 800fa04:	7bfb      	ldrb	r3, [r7, #15]
 800fa06:	4a07      	ldr	r2, [pc, #28]	@ (800fa24 <disk_write+0x3c>)
 800fa08:	4413      	add	r3, r2
 800fa0a:	7a18      	ldrb	r0, [r3, #8]
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	687a      	ldr	r2, [r7, #4]
 800fa10:	68b9      	ldr	r1, [r7, #8]
 800fa12:	47a0      	blx	r4
 800fa14:	4603      	mov	r3, r0
 800fa16:	75fb      	strb	r3, [r7, #23]
  return res;
 800fa18:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	371c      	adds	r7, #28
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd90      	pop	{r4, r7, pc}
 800fa22:	bf00      	nop
 800fa24:	20001498 	.word	0x20001498

0800fa28 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b084      	sub	sp, #16
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	4603      	mov	r3, r0
 800fa30:	603a      	str	r2, [r7, #0]
 800fa32:	71fb      	strb	r3, [r7, #7]
 800fa34:	460b      	mov	r3, r1
 800fa36:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800fa38:	79fb      	ldrb	r3, [r7, #7]
 800fa3a:	4a09      	ldr	r2, [pc, #36]	@ (800fa60 <disk_ioctl+0x38>)
 800fa3c:	009b      	lsls	r3, r3, #2
 800fa3e:	4413      	add	r3, r2
 800fa40:	685b      	ldr	r3, [r3, #4]
 800fa42:	691b      	ldr	r3, [r3, #16]
 800fa44:	79fa      	ldrb	r2, [r7, #7]
 800fa46:	4906      	ldr	r1, [pc, #24]	@ (800fa60 <disk_ioctl+0x38>)
 800fa48:	440a      	add	r2, r1
 800fa4a:	7a10      	ldrb	r0, [r2, #8]
 800fa4c:	79b9      	ldrb	r1, [r7, #6]
 800fa4e:	683a      	ldr	r2, [r7, #0]
 800fa50:	4798      	blx	r3
 800fa52:	4603      	mov	r3, r0
 800fa54:	73fb      	strb	r3, [r7, #15]
  return res;
 800fa56:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa58:	4618      	mov	r0, r3
 800fa5a:	3710      	adds	r7, #16
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}
 800fa60:	20001498 	.word	0x20001498

0800fa64 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800fa64:	b480      	push	{r7}
 800fa66:	b085      	sub	sp, #20
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	3301      	adds	r3, #1
 800fa70:	781b      	ldrb	r3, [r3, #0]
 800fa72:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800fa74:	89fb      	ldrh	r3, [r7, #14]
 800fa76:	021b      	lsls	r3, r3, #8
 800fa78:	b21a      	sxth	r2, r3
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	781b      	ldrb	r3, [r3, #0]
 800fa7e:	b21b      	sxth	r3, r3
 800fa80:	4313      	orrs	r3, r2
 800fa82:	b21b      	sxth	r3, r3
 800fa84:	81fb      	strh	r3, [r7, #14]
	return rv;
 800fa86:	89fb      	ldrh	r3, [r7, #14]
}
 800fa88:	4618      	mov	r0, r3
 800fa8a:	3714      	adds	r7, #20
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa92:	4770      	bx	lr

0800fa94 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800fa94:	b480      	push	{r7}
 800fa96:	b085      	sub	sp, #20
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	3303      	adds	r3, #3
 800faa0:	781b      	ldrb	r3, [r3, #0]
 800faa2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	021b      	lsls	r3, r3, #8
 800faa8:	687a      	ldr	r2, [r7, #4]
 800faaa:	3202      	adds	r2, #2
 800faac:	7812      	ldrb	r2, [r2, #0]
 800faae:	4313      	orrs	r3, r2
 800fab0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	021b      	lsls	r3, r3, #8
 800fab6:	687a      	ldr	r2, [r7, #4]
 800fab8:	3201      	adds	r2, #1
 800faba:	7812      	ldrb	r2, [r2, #0]
 800fabc:	4313      	orrs	r3, r2
 800fabe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	021b      	lsls	r3, r3, #8
 800fac4:	687a      	ldr	r2, [r7, #4]
 800fac6:	7812      	ldrb	r2, [r2, #0]
 800fac8:	4313      	orrs	r3, r2
 800faca:	60fb      	str	r3, [r7, #12]
	return rv;
 800facc:	68fb      	ldr	r3, [r7, #12]
}
 800face:	4618      	mov	r0, r3
 800fad0:	3714      	adds	r7, #20
 800fad2:	46bd      	mov	sp, r7
 800fad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad8:	4770      	bx	lr

0800fada <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800fada:	b480      	push	{r7}
 800fadc:	b083      	sub	sp, #12
 800fade:	af00      	add	r7, sp, #0
 800fae0:	6078      	str	r0, [r7, #4]
 800fae2:	460b      	mov	r3, r1
 800fae4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	1c5a      	adds	r2, r3, #1
 800faea:	607a      	str	r2, [r7, #4]
 800faec:	887a      	ldrh	r2, [r7, #2]
 800faee:	b2d2      	uxtb	r2, r2
 800faf0:	701a      	strb	r2, [r3, #0]
 800faf2:	887b      	ldrh	r3, [r7, #2]
 800faf4:	0a1b      	lsrs	r3, r3, #8
 800faf6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	1c5a      	adds	r2, r3, #1
 800fafc:	607a      	str	r2, [r7, #4]
 800fafe:	887a      	ldrh	r2, [r7, #2]
 800fb00:	b2d2      	uxtb	r2, r2
 800fb02:	701a      	strb	r2, [r3, #0]
}
 800fb04:	bf00      	nop
 800fb06:	370c      	adds	r7, #12
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0e:	4770      	bx	lr

0800fb10 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800fb10:	b480      	push	{r7}
 800fb12:	b083      	sub	sp, #12
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	1c5a      	adds	r2, r3, #1
 800fb1e:	607a      	str	r2, [r7, #4]
 800fb20:	683a      	ldr	r2, [r7, #0]
 800fb22:	b2d2      	uxtb	r2, r2
 800fb24:	701a      	strb	r2, [r3, #0]
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	0a1b      	lsrs	r3, r3, #8
 800fb2a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	1c5a      	adds	r2, r3, #1
 800fb30:	607a      	str	r2, [r7, #4]
 800fb32:	683a      	ldr	r2, [r7, #0]
 800fb34:	b2d2      	uxtb	r2, r2
 800fb36:	701a      	strb	r2, [r3, #0]
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	0a1b      	lsrs	r3, r3, #8
 800fb3c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	1c5a      	adds	r2, r3, #1
 800fb42:	607a      	str	r2, [r7, #4]
 800fb44:	683a      	ldr	r2, [r7, #0]
 800fb46:	b2d2      	uxtb	r2, r2
 800fb48:	701a      	strb	r2, [r3, #0]
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	0a1b      	lsrs	r3, r3, #8
 800fb4e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	1c5a      	adds	r2, r3, #1
 800fb54:	607a      	str	r2, [r7, #4]
 800fb56:	683a      	ldr	r2, [r7, #0]
 800fb58:	b2d2      	uxtb	r2, r2
 800fb5a:	701a      	strb	r2, [r3, #0]
}
 800fb5c:	bf00      	nop
 800fb5e:	370c      	adds	r7, #12
 800fb60:	46bd      	mov	sp, r7
 800fb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb66:	4770      	bx	lr

0800fb68 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800fb68:	b480      	push	{r7}
 800fb6a:	b087      	sub	sp, #28
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	60f8      	str	r0, [r7, #12]
 800fb70:	60b9      	str	r1, [r7, #8]
 800fb72:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d00d      	beq.n	800fb9e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800fb82:	693a      	ldr	r2, [r7, #16]
 800fb84:	1c53      	adds	r3, r2, #1
 800fb86:	613b      	str	r3, [r7, #16]
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	1c59      	adds	r1, r3, #1
 800fb8c:	6179      	str	r1, [r7, #20]
 800fb8e:	7812      	ldrb	r2, [r2, #0]
 800fb90:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	3b01      	subs	r3, #1
 800fb96:	607b      	str	r3, [r7, #4]
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d1f1      	bne.n	800fb82 <mem_cpy+0x1a>
	}
}
 800fb9e:	bf00      	nop
 800fba0:	371c      	adds	r7, #28
 800fba2:	46bd      	mov	sp, r7
 800fba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba8:	4770      	bx	lr

0800fbaa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800fbaa:	b480      	push	{r7}
 800fbac:	b087      	sub	sp, #28
 800fbae:	af00      	add	r7, sp, #0
 800fbb0:	60f8      	str	r0, [r7, #12]
 800fbb2:	60b9      	str	r1, [r7, #8]
 800fbb4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800fbba:	697b      	ldr	r3, [r7, #20]
 800fbbc:	1c5a      	adds	r2, r3, #1
 800fbbe:	617a      	str	r2, [r7, #20]
 800fbc0:	68ba      	ldr	r2, [r7, #8]
 800fbc2:	b2d2      	uxtb	r2, r2
 800fbc4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	3b01      	subs	r3, #1
 800fbca:	607b      	str	r3, [r7, #4]
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d1f3      	bne.n	800fbba <mem_set+0x10>
}
 800fbd2:	bf00      	nop
 800fbd4:	bf00      	nop
 800fbd6:	371c      	adds	r7, #28
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbde:	4770      	bx	lr

0800fbe0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800fbe0:	b480      	push	{r7}
 800fbe2:	b089      	sub	sp, #36	@ 0x24
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	60f8      	str	r0, [r7, #12]
 800fbe8:	60b9      	str	r1, [r7, #8]
 800fbea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	61fb      	str	r3, [r7, #28]
 800fbf0:	68bb      	ldr	r3, [r7, #8]
 800fbf2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800fbf8:	69fb      	ldr	r3, [r7, #28]
 800fbfa:	1c5a      	adds	r2, r3, #1
 800fbfc:	61fa      	str	r2, [r7, #28]
 800fbfe:	781b      	ldrb	r3, [r3, #0]
 800fc00:	4619      	mov	r1, r3
 800fc02:	69bb      	ldr	r3, [r7, #24]
 800fc04:	1c5a      	adds	r2, r3, #1
 800fc06:	61ba      	str	r2, [r7, #24]
 800fc08:	781b      	ldrb	r3, [r3, #0]
 800fc0a:	1acb      	subs	r3, r1, r3
 800fc0c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	3b01      	subs	r3, #1
 800fc12:	607b      	str	r3, [r7, #4]
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d002      	beq.n	800fc20 <mem_cmp+0x40>
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d0eb      	beq.n	800fbf8 <mem_cmp+0x18>

	return r;
 800fc20:	697b      	ldr	r3, [r7, #20]
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	3724      	adds	r7, #36	@ 0x24
 800fc26:	46bd      	mov	sp, r7
 800fc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2c:	4770      	bx	lr

0800fc2e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800fc2e:	b480      	push	{r7}
 800fc30:	b083      	sub	sp, #12
 800fc32:	af00      	add	r7, sp, #0
 800fc34:	6078      	str	r0, [r7, #4]
 800fc36:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800fc38:	e002      	b.n	800fc40 <chk_chr+0x12>
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	607b      	str	r3, [r7, #4]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d005      	beq.n	800fc54 <chk_chr+0x26>
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	781b      	ldrb	r3, [r3, #0]
 800fc4c:	461a      	mov	r2, r3
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	4293      	cmp	r3, r2
 800fc52:	d1f2      	bne.n	800fc3a <chk_chr+0xc>
	return *str;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	781b      	ldrb	r3, [r3, #0]
}
 800fc58:	4618      	mov	r0, r3
 800fc5a:	370c      	adds	r7, #12
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc62:	4770      	bx	lr

0800fc64 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b082      	sub	sp, #8
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d009      	beq.n	800fc86 <lock_fs+0x22>
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	68db      	ldr	r3, [r3, #12]
 800fc76:	4618      	mov	r0, r3
 800fc78:	f002 fb01 	bl	801227e <ff_req_grant>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d001      	beq.n	800fc86 <lock_fs+0x22>
 800fc82:	2301      	movs	r3, #1
 800fc84:	e000      	b.n	800fc88 <lock_fs+0x24>
 800fc86:	2300      	movs	r3, #0
}
 800fc88:	4618      	mov	r0, r3
 800fc8a:	3708      	adds	r7, #8
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}

0800fc90 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b082      	sub	sp, #8
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
 800fc98:	460b      	mov	r3, r1
 800fc9a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d00d      	beq.n	800fcbe <unlock_fs+0x2e>
 800fca2:	78fb      	ldrb	r3, [r7, #3]
 800fca4:	2b0c      	cmp	r3, #12
 800fca6:	d00a      	beq.n	800fcbe <unlock_fs+0x2e>
 800fca8:	78fb      	ldrb	r3, [r7, #3]
 800fcaa:	2b0b      	cmp	r3, #11
 800fcac:	d007      	beq.n	800fcbe <unlock_fs+0x2e>
 800fcae:	78fb      	ldrb	r3, [r7, #3]
 800fcb0:	2b0f      	cmp	r3, #15
 800fcb2:	d004      	beq.n	800fcbe <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	68db      	ldr	r3, [r3, #12]
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f002 faf5 	bl	80122a8 <ff_rel_grant>
	}
}
 800fcbe:	bf00      	nop
 800fcc0:	3708      	adds	r7, #8
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}
	...

0800fcc8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fcc8:	b480      	push	{r7}
 800fcca:	b085      	sub	sp, #20
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
 800fcd0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	60bb      	str	r3, [r7, #8]
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	60fb      	str	r3, [r7, #12]
 800fcda:	e029      	b.n	800fd30 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800fcdc:	4a27      	ldr	r2, [pc, #156]	@ (800fd7c <chk_lock+0xb4>)
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	011b      	lsls	r3, r3, #4
 800fce2:	4413      	add	r3, r2
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d01d      	beq.n	800fd26 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fcea:	4a24      	ldr	r2, [pc, #144]	@ (800fd7c <chk_lock+0xb4>)
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	011b      	lsls	r3, r3, #4
 800fcf0:	4413      	add	r3, r2
 800fcf2:	681a      	ldr	r2, [r3, #0]
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	d116      	bne.n	800fd2a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800fcfc:	4a1f      	ldr	r2, [pc, #124]	@ (800fd7c <chk_lock+0xb4>)
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	011b      	lsls	r3, r3, #4
 800fd02:	4413      	add	r3, r2
 800fd04:	3304      	adds	r3, #4
 800fd06:	681a      	ldr	r2, [r3, #0]
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	d10c      	bne.n	800fd2a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fd10:	4a1a      	ldr	r2, [pc, #104]	@ (800fd7c <chk_lock+0xb4>)
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	011b      	lsls	r3, r3, #4
 800fd16:	4413      	add	r3, r2
 800fd18:	3308      	adds	r3, #8
 800fd1a:	681a      	ldr	r2, [r3, #0]
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800fd20:	429a      	cmp	r2, r3
 800fd22:	d102      	bne.n	800fd2a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fd24:	e007      	b.n	800fd36 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800fd26:	2301      	movs	r3, #1
 800fd28:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	3301      	adds	r3, #1
 800fd2e:	60fb      	str	r3, [r7, #12]
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	2b01      	cmp	r3, #1
 800fd34:	d9d2      	bls.n	800fcdc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	2b02      	cmp	r3, #2
 800fd3a:	d109      	bne.n	800fd50 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d102      	bne.n	800fd48 <chk_lock+0x80>
 800fd42:	683b      	ldr	r3, [r7, #0]
 800fd44:	2b02      	cmp	r3, #2
 800fd46:	d101      	bne.n	800fd4c <chk_lock+0x84>
 800fd48:	2300      	movs	r3, #0
 800fd4a:	e010      	b.n	800fd6e <chk_lock+0xa6>
 800fd4c:	2312      	movs	r3, #18
 800fd4e:	e00e      	b.n	800fd6e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d108      	bne.n	800fd68 <chk_lock+0xa0>
 800fd56:	4a09      	ldr	r2, [pc, #36]	@ (800fd7c <chk_lock+0xb4>)
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	011b      	lsls	r3, r3, #4
 800fd5c:	4413      	add	r3, r2
 800fd5e:	330c      	adds	r3, #12
 800fd60:	881b      	ldrh	r3, [r3, #0]
 800fd62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fd66:	d101      	bne.n	800fd6c <chk_lock+0xa4>
 800fd68:	2310      	movs	r3, #16
 800fd6a:	e000      	b.n	800fd6e <chk_lock+0xa6>
 800fd6c:	2300      	movs	r3, #0
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	3714      	adds	r7, #20
 800fd72:	46bd      	mov	sp, r7
 800fd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd78:	4770      	bx	lr
 800fd7a:	bf00      	nop
 800fd7c:	20001478 	.word	0x20001478

0800fd80 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fd80:	b480      	push	{r7}
 800fd82:	b083      	sub	sp, #12
 800fd84:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fd86:	2300      	movs	r3, #0
 800fd88:	607b      	str	r3, [r7, #4]
 800fd8a:	e002      	b.n	800fd92 <enq_lock+0x12>
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	3301      	adds	r3, #1
 800fd90:	607b      	str	r3, [r7, #4]
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	2b01      	cmp	r3, #1
 800fd96:	d806      	bhi.n	800fda6 <enq_lock+0x26>
 800fd98:	4a09      	ldr	r2, [pc, #36]	@ (800fdc0 <enq_lock+0x40>)
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	011b      	lsls	r3, r3, #4
 800fd9e:	4413      	add	r3, r2
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d1f2      	bne.n	800fd8c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2b02      	cmp	r3, #2
 800fdaa:	bf14      	ite	ne
 800fdac:	2301      	movne	r3, #1
 800fdae:	2300      	moveq	r3, #0
 800fdb0:	b2db      	uxtb	r3, r3
}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	370c      	adds	r7, #12
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbc:	4770      	bx	lr
 800fdbe:	bf00      	nop
 800fdc0:	20001478 	.word	0x20001478

0800fdc4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b085      	sub	sp, #20
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
 800fdcc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fdce:	2300      	movs	r3, #0
 800fdd0:	60fb      	str	r3, [r7, #12]
 800fdd2:	e01f      	b.n	800fe14 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fdd4:	4a41      	ldr	r2, [pc, #260]	@ (800fedc <inc_lock+0x118>)
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	011b      	lsls	r3, r3, #4
 800fdda:	4413      	add	r3, r2
 800fddc:	681a      	ldr	r2, [r3, #0]
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	429a      	cmp	r2, r3
 800fde4:	d113      	bne.n	800fe0e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800fde6:	4a3d      	ldr	r2, [pc, #244]	@ (800fedc <inc_lock+0x118>)
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	011b      	lsls	r3, r3, #4
 800fdec:	4413      	add	r3, r2
 800fdee:	3304      	adds	r3, #4
 800fdf0:	681a      	ldr	r2, [r3, #0]
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	d109      	bne.n	800fe0e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800fdfa:	4a38      	ldr	r2, [pc, #224]	@ (800fedc <inc_lock+0x118>)
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	011b      	lsls	r3, r3, #4
 800fe00:	4413      	add	r3, r2
 800fe02:	3308      	adds	r3, #8
 800fe04:	681a      	ldr	r2, [r3, #0]
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800fe0a:	429a      	cmp	r2, r3
 800fe0c:	d006      	beq.n	800fe1c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	3301      	adds	r3, #1
 800fe12:	60fb      	str	r3, [r7, #12]
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2b01      	cmp	r3, #1
 800fe18:	d9dc      	bls.n	800fdd4 <inc_lock+0x10>
 800fe1a:	e000      	b.n	800fe1e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800fe1c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	2b02      	cmp	r3, #2
 800fe22:	d132      	bne.n	800fe8a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fe24:	2300      	movs	r3, #0
 800fe26:	60fb      	str	r3, [r7, #12]
 800fe28:	e002      	b.n	800fe30 <inc_lock+0x6c>
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	3301      	adds	r3, #1
 800fe2e:	60fb      	str	r3, [r7, #12]
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	2b01      	cmp	r3, #1
 800fe34:	d806      	bhi.n	800fe44 <inc_lock+0x80>
 800fe36:	4a29      	ldr	r2, [pc, #164]	@ (800fedc <inc_lock+0x118>)
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	011b      	lsls	r3, r3, #4
 800fe3c:	4413      	add	r3, r2
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d1f2      	bne.n	800fe2a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	2b02      	cmp	r3, #2
 800fe48:	d101      	bne.n	800fe4e <inc_lock+0x8a>
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	e040      	b.n	800fed0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681a      	ldr	r2, [r3, #0]
 800fe52:	4922      	ldr	r1, [pc, #136]	@ (800fedc <inc_lock+0x118>)
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	011b      	lsls	r3, r3, #4
 800fe58:	440b      	add	r3, r1
 800fe5a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	689a      	ldr	r2, [r3, #8]
 800fe60:	491e      	ldr	r1, [pc, #120]	@ (800fedc <inc_lock+0x118>)
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	011b      	lsls	r3, r3, #4
 800fe66:	440b      	add	r3, r1
 800fe68:	3304      	adds	r3, #4
 800fe6a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	695a      	ldr	r2, [r3, #20]
 800fe70:	491a      	ldr	r1, [pc, #104]	@ (800fedc <inc_lock+0x118>)
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	011b      	lsls	r3, r3, #4
 800fe76:	440b      	add	r3, r1
 800fe78:	3308      	adds	r3, #8
 800fe7a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800fe7c:	4a17      	ldr	r2, [pc, #92]	@ (800fedc <inc_lock+0x118>)
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	011b      	lsls	r3, r3, #4
 800fe82:	4413      	add	r3, r2
 800fe84:	330c      	adds	r3, #12
 800fe86:	2200      	movs	r2, #0
 800fe88:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d009      	beq.n	800fea4 <inc_lock+0xe0>
 800fe90:	4a12      	ldr	r2, [pc, #72]	@ (800fedc <inc_lock+0x118>)
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	011b      	lsls	r3, r3, #4
 800fe96:	4413      	add	r3, r2
 800fe98:	330c      	adds	r3, #12
 800fe9a:	881b      	ldrh	r3, [r3, #0]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d001      	beq.n	800fea4 <inc_lock+0xe0>
 800fea0:	2300      	movs	r3, #0
 800fea2:	e015      	b.n	800fed0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d108      	bne.n	800febc <inc_lock+0xf8>
 800feaa:	4a0c      	ldr	r2, [pc, #48]	@ (800fedc <inc_lock+0x118>)
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	011b      	lsls	r3, r3, #4
 800feb0:	4413      	add	r3, r2
 800feb2:	330c      	adds	r3, #12
 800feb4:	881b      	ldrh	r3, [r3, #0]
 800feb6:	3301      	adds	r3, #1
 800feb8:	b29a      	uxth	r2, r3
 800feba:	e001      	b.n	800fec0 <inc_lock+0xfc>
 800febc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fec0:	4906      	ldr	r1, [pc, #24]	@ (800fedc <inc_lock+0x118>)
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	011b      	lsls	r3, r3, #4
 800fec6:	440b      	add	r3, r1
 800fec8:	330c      	adds	r3, #12
 800feca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	3301      	adds	r3, #1
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	3714      	adds	r7, #20
 800fed4:	46bd      	mov	sp, r7
 800fed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feda:	4770      	bx	lr
 800fedc:	20001478 	.word	0x20001478

0800fee0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fee0:	b480      	push	{r7}
 800fee2:	b085      	sub	sp, #20
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	3b01      	subs	r3, #1
 800feec:	607b      	str	r3, [r7, #4]
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2b01      	cmp	r3, #1
 800fef2:	d825      	bhi.n	800ff40 <dec_lock+0x60>
		n = Files[i].ctr;
 800fef4:	4a17      	ldr	r2, [pc, #92]	@ (800ff54 <dec_lock+0x74>)
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	011b      	lsls	r3, r3, #4
 800fefa:	4413      	add	r3, r2
 800fefc:	330c      	adds	r3, #12
 800fefe:	881b      	ldrh	r3, [r3, #0]
 800ff00:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ff02:	89fb      	ldrh	r3, [r7, #14]
 800ff04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ff08:	d101      	bne.n	800ff0e <dec_lock+0x2e>
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ff0e:	89fb      	ldrh	r3, [r7, #14]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d002      	beq.n	800ff1a <dec_lock+0x3a>
 800ff14:	89fb      	ldrh	r3, [r7, #14]
 800ff16:	3b01      	subs	r3, #1
 800ff18:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ff1a:	4a0e      	ldr	r2, [pc, #56]	@ (800ff54 <dec_lock+0x74>)
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	011b      	lsls	r3, r3, #4
 800ff20:	4413      	add	r3, r2
 800ff22:	330c      	adds	r3, #12
 800ff24:	89fa      	ldrh	r2, [r7, #14]
 800ff26:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ff28:	89fb      	ldrh	r3, [r7, #14]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d105      	bne.n	800ff3a <dec_lock+0x5a>
 800ff2e:	4a09      	ldr	r2, [pc, #36]	@ (800ff54 <dec_lock+0x74>)
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	011b      	lsls	r3, r3, #4
 800ff34:	4413      	add	r3, r2
 800ff36:	2200      	movs	r2, #0
 800ff38:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	737b      	strb	r3, [r7, #13]
 800ff3e:	e001      	b.n	800ff44 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ff40:	2302      	movs	r3, #2
 800ff42:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ff44:	7b7b      	ldrb	r3, [r7, #13]
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	3714      	adds	r7, #20
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff50:	4770      	bx	lr
 800ff52:	bf00      	nop
 800ff54:	20001478 	.word	0x20001478

0800ff58 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ff58:	b480      	push	{r7}
 800ff5a:	b085      	sub	sp, #20
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ff60:	2300      	movs	r3, #0
 800ff62:	60fb      	str	r3, [r7, #12]
 800ff64:	e010      	b.n	800ff88 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ff66:	4a0d      	ldr	r2, [pc, #52]	@ (800ff9c <clear_lock+0x44>)
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	011b      	lsls	r3, r3, #4
 800ff6c:	4413      	add	r3, r2
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	687a      	ldr	r2, [r7, #4]
 800ff72:	429a      	cmp	r2, r3
 800ff74:	d105      	bne.n	800ff82 <clear_lock+0x2a>
 800ff76:	4a09      	ldr	r2, [pc, #36]	@ (800ff9c <clear_lock+0x44>)
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	011b      	lsls	r3, r3, #4
 800ff7c:	4413      	add	r3, r2
 800ff7e:	2200      	movs	r2, #0
 800ff80:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	3301      	adds	r3, #1
 800ff86:	60fb      	str	r3, [r7, #12]
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	2b01      	cmp	r3, #1
 800ff8c:	d9eb      	bls.n	800ff66 <clear_lock+0xe>
	}
}
 800ff8e:	bf00      	nop
 800ff90:	bf00      	nop
 800ff92:	3714      	adds	r7, #20
 800ff94:	46bd      	mov	sp, r7
 800ff96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9a:	4770      	bx	lr
 800ff9c:	20001478 	.word	0x20001478

0800ffa0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b086      	sub	sp, #24
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	78db      	ldrb	r3, [r3, #3]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d034      	beq.n	801001e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffb8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	7858      	ldrb	r0, [r3, #1]
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	697a      	ldr	r2, [r7, #20]
 800ffc8:	f7ff fd0e 	bl	800f9e8 <disk_write>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d002      	beq.n	800ffd8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	73fb      	strb	r3, [r7, #15]
 800ffd6:	e022      	b.n	801001e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2200      	movs	r2, #0
 800ffdc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffe2:	697a      	ldr	r2, [r7, #20]
 800ffe4:	1ad2      	subs	r2, r2, r3
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	69db      	ldr	r3, [r3, #28]
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d217      	bcs.n	801001e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	789b      	ldrb	r3, [r3, #2]
 800fff2:	613b      	str	r3, [r7, #16]
 800fff4:	e010      	b.n	8010018 <sync_window+0x78>
					wsect += fs->fsize;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	69db      	ldr	r3, [r3, #28]
 800fffa:	697a      	ldr	r2, [r7, #20]
 800fffc:	4413      	add	r3, r2
 800fffe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	7858      	ldrb	r0, [r3, #1]
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 801000a:	2301      	movs	r3, #1
 801000c:	697a      	ldr	r2, [r7, #20]
 801000e:	f7ff fceb 	bl	800f9e8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010012:	693b      	ldr	r3, [r7, #16]
 8010014:	3b01      	subs	r3, #1
 8010016:	613b      	str	r3, [r7, #16]
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	2b01      	cmp	r3, #1
 801001c:	d8eb      	bhi.n	800fff6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801001e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010020:	4618      	mov	r0, r3
 8010022:	3718      	adds	r7, #24
 8010024:	46bd      	mov	sp, r7
 8010026:	bd80      	pop	{r7, pc}

08010028 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b084      	sub	sp, #16
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
 8010030:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010032:	2300      	movs	r3, #0
 8010034:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801003a:	683a      	ldr	r2, [r7, #0]
 801003c:	429a      	cmp	r2, r3
 801003e:	d01b      	beq.n	8010078 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f7ff ffad 	bl	800ffa0 <sync_window>
 8010046:	4603      	mov	r3, r0
 8010048:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801004a:	7bfb      	ldrb	r3, [r7, #15]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d113      	bne.n	8010078 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	7858      	ldrb	r0, [r3, #1]
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 801005a:	2301      	movs	r3, #1
 801005c:	683a      	ldr	r2, [r7, #0]
 801005e:	f7ff fca3 	bl	800f9a8 <disk_read>
 8010062:	4603      	mov	r3, r0
 8010064:	2b00      	cmp	r3, #0
 8010066:	d004      	beq.n	8010072 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010068:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801006c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801006e:	2301      	movs	r3, #1
 8010070:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	683a      	ldr	r2, [r7, #0]
 8010076:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8010078:	7bfb      	ldrb	r3, [r7, #15]
}
 801007a:	4618      	mov	r0, r3
 801007c:	3710      	adds	r7, #16
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
	...

08010084 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b084      	sub	sp, #16
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	f7ff ff87 	bl	800ffa0 <sync_window>
 8010092:	4603      	mov	r3, r0
 8010094:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010096:	7bfb      	ldrb	r3, [r7, #15]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d158      	bne.n	801014e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	781b      	ldrb	r3, [r3, #0]
 80100a0:	2b03      	cmp	r3, #3
 80100a2:	d148      	bne.n	8010136 <sync_fs+0xb2>
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	791b      	ldrb	r3, [r3, #4]
 80100a8:	2b01      	cmp	r3, #1
 80100aa:	d144      	bne.n	8010136 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	3334      	adds	r3, #52	@ 0x34
 80100b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80100b4:	2100      	movs	r1, #0
 80100b6:	4618      	mov	r0, r3
 80100b8:	f7ff fd77 	bl	800fbaa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	3334      	adds	r3, #52	@ 0x34
 80100c0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80100c4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80100c8:	4618      	mov	r0, r3
 80100ca:	f7ff fd06 	bl	800fada <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	3334      	adds	r3, #52	@ 0x34
 80100d2:	4921      	ldr	r1, [pc, #132]	@ (8010158 <sync_fs+0xd4>)
 80100d4:	4618      	mov	r0, r3
 80100d6:	f7ff fd1b 	bl	800fb10 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	3334      	adds	r3, #52	@ 0x34
 80100de:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80100e2:	491e      	ldr	r1, [pc, #120]	@ (801015c <sync_fs+0xd8>)
 80100e4:	4618      	mov	r0, r3
 80100e6:	f7ff fd13 	bl	800fb10 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	3334      	adds	r3, #52	@ 0x34
 80100ee:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	695b      	ldr	r3, [r3, #20]
 80100f6:	4619      	mov	r1, r3
 80100f8:	4610      	mov	r0, r2
 80100fa:	f7ff fd09 	bl	800fb10 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	3334      	adds	r3, #52	@ 0x34
 8010102:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	691b      	ldr	r3, [r3, #16]
 801010a:	4619      	mov	r1, r3
 801010c:	4610      	mov	r0, r2
 801010e:	f7ff fcff 	bl	800fb10 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6a1b      	ldr	r3, [r3, #32]
 8010116:	1c5a      	adds	r2, r3, #1
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	7858      	ldrb	r0, [r3, #1]
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801012a:	2301      	movs	r3, #1
 801012c:	f7ff fc5c 	bl	800f9e8 <disk_write>
			fs->fsi_flag = 0;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2200      	movs	r2, #0
 8010134:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	785b      	ldrb	r3, [r3, #1]
 801013a:	2200      	movs	r2, #0
 801013c:	2100      	movs	r1, #0
 801013e:	4618      	mov	r0, r3
 8010140:	f7ff fc72 	bl	800fa28 <disk_ioctl>
 8010144:	4603      	mov	r3, r0
 8010146:	2b00      	cmp	r3, #0
 8010148:	d001      	beq.n	801014e <sync_fs+0xca>
 801014a:	2301      	movs	r3, #1
 801014c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801014e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010150:	4618      	mov	r0, r3
 8010152:	3710      	adds	r7, #16
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}
 8010158:	41615252 	.word	0x41615252
 801015c:	61417272 	.word	0x61417272

08010160 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010160:	b480      	push	{r7}
 8010162:	b083      	sub	sp, #12
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
 8010168:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801016a:	683b      	ldr	r3, [r7, #0]
 801016c:	3b02      	subs	r3, #2
 801016e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	699b      	ldr	r3, [r3, #24]
 8010174:	3b02      	subs	r3, #2
 8010176:	683a      	ldr	r2, [r7, #0]
 8010178:	429a      	cmp	r2, r3
 801017a:	d301      	bcc.n	8010180 <clust2sect+0x20>
 801017c:	2300      	movs	r3, #0
 801017e:	e008      	b.n	8010192 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	895b      	ldrh	r3, [r3, #10]
 8010184:	461a      	mov	r2, r3
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	fb03 f202 	mul.w	r2, r3, r2
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010190:	4413      	add	r3, r2
}
 8010192:	4618      	mov	r0, r3
 8010194:	370c      	adds	r7, #12
 8010196:	46bd      	mov	sp, r7
 8010198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019c:	4770      	bx	lr

0801019e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801019e:	b580      	push	{r7, lr}
 80101a0:	b086      	sub	sp, #24
 80101a2:	af00      	add	r7, sp, #0
 80101a4:	6078      	str	r0, [r7, #4]
 80101a6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	2b01      	cmp	r3, #1
 80101b2:	d904      	bls.n	80101be <get_fat+0x20>
 80101b4:	693b      	ldr	r3, [r7, #16]
 80101b6:	699b      	ldr	r3, [r3, #24]
 80101b8:	683a      	ldr	r2, [r7, #0]
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d302      	bcc.n	80101c4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80101be:	2301      	movs	r3, #1
 80101c0:	617b      	str	r3, [r7, #20]
 80101c2:	e08e      	b.n	80102e2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80101c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80101c8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80101ca:	693b      	ldr	r3, [r7, #16]
 80101cc:	781b      	ldrb	r3, [r3, #0]
 80101ce:	2b03      	cmp	r3, #3
 80101d0:	d061      	beq.n	8010296 <get_fat+0xf8>
 80101d2:	2b03      	cmp	r3, #3
 80101d4:	dc7b      	bgt.n	80102ce <get_fat+0x130>
 80101d6:	2b01      	cmp	r3, #1
 80101d8:	d002      	beq.n	80101e0 <get_fat+0x42>
 80101da:	2b02      	cmp	r3, #2
 80101dc:	d041      	beq.n	8010262 <get_fat+0xc4>
 80101de:	e076      	b.n	80102ce <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	60fb      	str	r3, [r7, #12]
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	085b      	lsrs	r3, r3, #1
 80101e8:	68fa      	ldr	r2, [r7, #12]
 80101ea:	4413      	add	r3, r2
 80101ec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80101ee:	693b      	ldr	r3, [r7, #16]
 80101f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	0a5b      	lsrs	r3, r3, #9
 80101f6:	4413      	add	r3, r2
 80101f8:	4619      	mov	r1, r3
 80101fa:	6938      	ldr	r0, [r7, #16]
 80101fc:	f7ff ff14 	bl	8010028 <move_window>
 8010200:	4603      	mov	r3, r0
 8010202:	2b00      	cmp	r3, #0
 8010204:	d166      	bne.n	80102d4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	1c5a      	adds	r2, r3, #1
 801020a:	60fa      	str	r2, [r7, #12]
 801020c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010210:	693a      	ldr	r2, [r7, #16]
 8010212:	4413      	add	r3, r2
 8010214:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010218:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801021a:	693b      	ldr	r3, [r7, #16]
 801021c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	0a5b      	lsrs	r3, r3, #9
 8010222:	4413      	add	r3, r2
 8010224:	4619      	mov	r1, r3
 8010226:	6938      	ldr	r0, [r7, #16]
 8010228:	f7ff fefe 	bl	8010028 <move_window>
 801022c:	4603      	mov	r3, r0
 801022e:	2b00      	cmp	r3, #0
 8010230:	d152      	bne.n	80102d8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010238:	693a      	ldr	r2, [r7, #16]
 801023a:	4413      	add	r3, r2
 801023c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010240:	021b      	lsls	r3, r3, #8
 8010242:	68ba      	ldr	r2, [r7, #8]
 8010244:	4313      	orrs	r3, r2
 8010246:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	f003 0301 	and.w	r3, r3, #1
 801024e:	2b00      	cmp	r3, #0
 8010250:	d002      	beq.n	8010258 <get_fat+0xba>
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	091b      	lsrs	r3, r3, #4
 8010256:	e002      	b.n	801025e <get_fat+0xc0>
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801025e:	617b      	str	r3, [r7, #20]
			break;
 8010260:	e03f      	b.n	80102e2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010262:	693b      	ldr	r3, [r7, #16]
 8010264:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	0a1b      	lsrs	r3, r3, #8
 801026a:	4413      	add	r3, r2
 801026c:	4619      	mov	r1, r3
 801026e:	6938      	ldr	r0, [r7, #16]
 8010270:	f7ff feda 	bl	8010028 <move_window>
 8010274:	4603      	mov	r3, r0
 8010276:	2b00      	cmp	r3, #0
 8010278:	d130      	bne.n	80102dc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801027a:	693b      	ldr	r3, [r7, #16]
 801027c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	005b      	lsls	r3, r3, #1
 8010284:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8010288:	4413      	add	r3, r2
 801028a:	4618      	mov	r0, r3
 801028c:	f7ff fbea 	bl	800fa64 <ld_word>
 8010290:	4603      	mov	r3, r0
 8010292:	617b      	str	r3, [r7, #20]
			break;
 8010294:	e025      	b.n	80102e2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010296:	693b      	ldr	r3, [r7, #16]
 8010298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	09db      	lsrs	r3, r3, #7
 801029e:	4413      	add	r3, r2
 80102a0:	4619      	mov	r1, r3
 80102a2:	6938      	ldr	r0, [r7, #16]
 80102a4:	f7ff fec0 	bl	8010028 <move_window>
 80102a8:	4603      	mov	r3, r0
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d118      	bne.n	80102e0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80102ae:	693b      	ldr	r3, [r7, #16]
 80102b0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	009b      	lsls	r3, r3, #2
 80102b8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80102bc:	4413      	add	r3, r2
 80102be:	4618      	mov	r0, r3
 80102c0:	f7ff fbe8 	bl	800fa94 <ld_dword>
 80102c4:	4603      	mov	r3, r0
 80102c6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80102ca:	617b      	str	r3, [r7, #20]
			break;
 80102cc:	e009      	b.n	80102e2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80102ce:	2301      	movs	r3, #1
 80102d0:	617b      	str	r3, [r7, #20]
 80102d2:	e006      	b.n	80102e2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80102d4:	bf00      	nop
 80102d6:	e004      	b.n	80102e2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80102d8:	bf00      	nop
 80102da:	e002      	b.n	80102e2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80102dc:	bf00      	nop
 80102de:	e000      	b.n	80102e2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80102e0:	bf00      	nop
		}
	}

	return val;
 80102e2:	697b      	ldr	r3, [r7, #20]
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3718      	adds	r7, #24
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd80      	pop	{r7, pc}

080102ec <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80102ec:	b590      	push	{r4, r7, lr}
 80102ee:	b089      	sub	sp, #36	@ 0x24
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	60f8      	str	r0, [r7, #12]
 80102f4:	60b9      	str	r1, [r7, #8]
 80102f6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80102f8:	2302      	movs	r3, #2
 80102fa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	2b01      	cmp	r3, #1
 8010300:	f240 80d9 	bls.w	80104b6 <put_fat+0x1ca>
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	699b      	ldr	r3, [r3, #24]
 8010308:	68ba      	ldr	r2, [r7, #8]
 801030a:	429a      	cmp	r2, r3
 801030c:	f080 80d3 	bcs.w	80104b6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	781b      	ldrb	r3, [r3, #0]
 8010314:	2b03      	cmp	r3, #3
 8010316:	f000 8096 	beq.w	8010446 <put_fat+0x15a>
 801031a:	2b03      	cmp	r3, #3
 801031c:	f300 80cb 	bgt.w	80104b6 <put_fat+0x1ca>
 8010320:	2b01      	cmp	r3, #1
 8010322:	d002      	beq.n	801032a <put_fat+0x3e>
 8010324:	2b02      	cmp	r3, #2
 8010326:	d06e      	beq.n	8010406 <put_fat+0x11a>
 8010328:	e0c5      	b.n	80104b6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	61bb      	str	r3, [r7, #24]
 801032e:	69bb      	ldr	r3, [r7, #24]
 8010330:	085b      	lsrs	r3, r3, #1
 8010332:	69ba      	ldr	r2, [r7, #24]
 8010334:	4413      	add	r3, r2
 8010336:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801033c:	69bb      	ldr	r3, [r7, #24]
 801033e:	0a5b      	lsrs	r3, r3, #9
 8010340:	4413      	add	r3, r2
 8010342:	4619      	mov	r1, r3
 8010344:	68f8      	ldr	r0, [r7, #12]
 8010346:	f7ff fe6f 	bl	8010028 <move_window>
 801034a:	4603      	mov	r3, r0
 801034c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801034e:	7ffb      	ldrb	r3, [r7, #31]
 8010350:	2b00      	cmp	r3, #0
 8010352:	f040 80a9 	bne.w	80104a8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801035c:	69bb      	ldr	r3, [r7, #24]
 801035e:	1c59      	adds	r1, r3, #1
 8010360:	61b9      	str	r1, [r7, #24]
 8010362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010366:	4413      	add	r3, r2
 8010368:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	f003 0301 	and.w	r3, r3, #1
 8010370:	2b00      	cmp	r3, #0
 8010372:	d00d      	beq.n	8010390 <put_fat+0xa4>
 8010374:	697b      	ldr	r3, [r7, #20]
 8010376:	781b      	ldrb	r3, [r3, #0]
 8010378:	b25b      	sxtb	r3, r3
 801037a:	f003 030f 	and.w	r3, r3, #15
 801037e:	b25a      	sxtb	r2, r3
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	b2db      	uxtb	r3, r3
 8010384:	011b      	lsls	r3, r3, #4
 8010386:	b25b      	sxtb	r3, r3
 8010388:	4313      	orrs	r3, r2
 801038a:	b25b      	sxtb	r3, r3
 801038c:	b2db      	uxtb	r3, r3
 801038e:	e001      	b.n	8010394 <put_fat+0xa8>
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	b2db      	uxtb	r3, r3
 8010394:	697a      	ldr	r2, [r7, #20]
 8010396:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	2201      	movs	r2, #1
 801039c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80103a2:	69bb      	ldr	r3, [r7, #24]
 80103a4:	0a5b      	lsrs	r3, r3, #9
 80103a6:	4413      	add	r3, r2
 80103a8:	4619      	mov	r1, r3
 80103aa:	68f8      	ldr	r0, [r7, #12]
 80103ac:	f7ff fe3c 	bl	8010028 <move_window>
 80103b0:	4603      	mov	r3, r0
 80103b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80103b4:	7ffb      	ldrb	r3, [r7, #31]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d178      	bne.n	80104ac <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80103c0:	69bb      	ldr	r3, [r7, #24]
 80103c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103c6:	4413      	add	r3, r2
 80103c8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	f003 0301 	and.w	r3, r3, #1
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d003      	beq.n	80103dc <put_fat+0xf0>
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	091b      	lsrs	r3, r3, #4
 80103d8:	b2db      	uxtb	r3, r3
 80103da:	e00e      	b.n	80103fa <put_fat+0x10e>
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	781b      	ldrb	r3, [r3, #0]
 80103e0:	b25b      	sxtb	r3, r3
 80103e2:	f023 030f 	bic.w	r3, r3, #15
 80103e6:	b25a      	sxtb	r2, r3
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	0a1b      	lsrs	r3, r3, #8
 80103ec:	b25b      	sxtb	r3, r3
 80103ee:	f003 030f 	and.w	r3, r3, #15
 80103f2:	b25b      	sxtb	r3, r3
 80103f4:	4313      	orrs	r3, r2
 80103f6:	b25b      	sxtb	r3, r3
 80103f8:	b2db      	uxtb	r3, r3
 80103fa:	697a      	ldr	r2, [r7, #20]
 80103fc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	2201      	movs	r2, #1
 8010402:	70da      	strb	r2, [r3, #3]
			break;
 8010404:	e057      	b.n	80104b6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	0a1b      	lsrs	r3, r3, #8
 801040e:	4413      	add	r3, r2
 8010410:	4619      	mov	r1, r3
 8010412:	68f8      	ldr	r0, [r7, #12]
 8010414:	f7ff fe08 	bl	8010028 <move_window>
 8010418:	4603      	mov	r3, r0
 801041a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801041c:	7ffb      	ldrb	r3, [r7, #31]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d146      	bne.n	80104b0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010428:	68bb      	ldr	r3, [r7, #8]
 801042a:	005b      	lsls	r3, r3, #1
 801042c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8010430:	4413      	add	r3, r2
 8010432:	687a      	ldr	r2, [r7, #4]
 8010434:	b292      	uxth	r2, r2
 8010436:	4611      	mov	r1, r2
 8010438:	4618      	mov	r0, r3
 801043a:	f7ff fb4e 	bl	800fada <st_word>
			fs->wflag = 1;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	2201      	movs	r2, #1
 8010442:	70da      	strb	r2, [r3, #3]
			break;
 8010444:	e037      	b.n	80104b6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	09db      	lsrs	r3, r3, #7
 801044e:	4413      	add	r3, r2
 8010450:	4619      	mov	r1, r3
 8010452:	68f8      	ldr	r0, [r7, #12]
 8010454:	f7ff fde8 	bl	8010028 <move_window>
 8010458:	4603      	mov	r3, r0
 801045a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801045c:	7ffb      	ldrb	r3, [r7, #31]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d128      	bne.n	80104b4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	009b      	lsls	r3, r3, #2
 8010472:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8010476:	4413      	add	r3, r2
 8010478:	4618      	mov	r0, r3
 801047a:	f7ff fb0b 	bl	800fa94 <ld_dword>
 801047e:	4603      	mov	r3, r0
 8010480:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8010484:	4323      	orrs	r3, r4
 8010486:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	009b      	lsls	r3, r3, #2
 8010492:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8010496:	4413      	add	r3, r2
 8010498:	6879      	ldr	r1, [r7, #4]
 801049a:	4618      	mov	r0, r3
 801049c:	f7ff fb38 	bl	800fb10 <st_dword>
			fs->wflag = 1;
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	2201      	movs	r2, #1
 80104a4:	70da      	strb	r2, [r3, #3]
			break;
 80104a6:	e006      	b.n	80104b6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80104a8:	bf00      	nop
 80104aa:	e004      	b.n	80104b6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80104ac:	bf00      	nop
 80104ae:	e002      	b.n	80104b6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80104b0:	bf00      	nop
 80104b2:	e000      	b.n	80104b6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80104b4:	bf00      	nop
		}
	}
	return res;
 80104b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	3724      	adds	r7, #36	@ 0x24
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd90      	pop	{r4, r7, pc}

080104c0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b088      	sub	sp, #32
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	60f8      	str	r0, [r7, #12]
 80104c8:	60b9      	str	r1, [r7, #8]
 80104ca:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80104cc:	2300      	movs	r3, #0
 80104ce:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	2b01      	cmp	r3, #1
 80104da:	d904      	bls.n	80104e6 <remove_chain+0x26>
 80104dc:	69bb      	ldr	r3, [r7, #24]
 80104de:	699b      	ldr	r3, [r3, #24]
 80104e0:	68ba      	ldr	r2, [r7, #8]
 80104e2:	429a      	cmp	r2, r3
 80104e4:	d301      	bcc.n	80104ea <remove_chain+0x2a>
 80104e6:	2302      	movs	r3, #2
 80104e8:	e04b      	b.n	8010582 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d00c      	beq.n	801050a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80104f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80104f4:	6879      	ldr	r1, [r7, #4]
 80104f6:	69b8      	ldr	r0, [r7, #24]
 80104f8:	f7ff fef8 	bl	80102ec <put_fat>
 80104fc:	4603      	mov	r3, r0
 80104fe:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010500:	7ffb      	ldrb	r3, [r7, #31]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d001      	beq.n	801050a <remove_chain+0x4a>
 8010506:	7ffb      	ldrb	r3, [r7, #31]
 8010508:	e03b      	b.n	8010582 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801050a:	68b9      	ldr	r1, [r7, #8]
 801050c:	68f8      	ldr	r0, [r7, #12]
 801050e:	f7ff fe46 	bl	801019e <get_fat>
 8010512:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010514:	697b      	ldr	r3, [r7, #20]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d031      	beq.n	801057e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	2b01      	cmp	r3, #1
 801051e:	d101      	bne.n	8010524 <remove_chain+0x64>
 8010520:	2302      	movs	r3, #2
 8010522:	e02e      	b.n	8010582 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010524:	697b      	ldr	r3, [r7, #20]
 8010526:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801052a:	d101      	bne.n	8010530 <remove_chain+0x70>
 801052c:	2301      	movs	r3, #1
 801052e:	e028      	b.n	8010582 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010530:	2200      	movs	r2, #0
 8010532:	68b9      	ldr	r1, [r7, #8]
 8010534:	69b8      	ldr	r0, [r7, #24]
 8010536:	f7ff fed9 	bl	80102ec <put_fat>
 801053a:	4603      	mov	r3, r0
 801053c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801053e:	7ffb      	ldrb	r3, [r7, #31]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d001      	beq.n	8010548 <remove_chain+0x88>
 8010544:	7ffb      	ldrb	r3, [r7, #31]
 8010546:	e01c      	b.n	8010582 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010548:	69bb      	ldr	r3, [r7, #24]
 801054a:	695a      	ldr	r2, [r3, #20]
 801054c:	69bb      	ldr	r3, [r7, #24]
 801054e:	699b      	ldr	r3, [r3, #24]
 8010550:	3b02      	subs	r3, #2
 8010552:	429a      	cmp	r2, r3
 8010554:	d20b      	bcs.n	801056e <remove_chain+0xae>
			fs->free_clst++;
 8010556:	69bb      	ldr	r3, [r7, #24]
 8010558:	695b      	ldr	r3, [r3, #20]
 801055a:	1c5a      	adds	r2, r3, #1
 801055c:	69bb      	ldr	r3, [r7, #24]
 801055e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8010560:	69bb      	ldr	r3, [r7, #24]
 8010562:	791b      	ldrb	r3, [r3, #4]
 8010564:	f043 0301 	orr.w	r3, r3, #1
 8010568:	b2da      	uxtb	r2, r3
 801056a:	69bb      	ldr	r3, [r7, #24]
 801056c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010572:	69bb      	ldr	r3, [r7, #24]
 8010574:	699b      	ldr	r3, [r3, #24]
 8010576:	68ba      	ldr	r2, [r7, #8]
 8010578:	429a      	cmp	r2, r3
 801057a:	d3c6      	bcc.n	801050a <remove_chain+0x4a>
 801057c:	e000      	b.n	8010580 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801057e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010580:	2300      	movs	r3, #0
}
 8010582:	4618      	mov	r0, r3
 8010584:	3720      	adds	r7, #32
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}

0801058a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801058a:	b580      	push	{r7, lr}
 801058c:	b088      	sub	sp, #32
 801058e:	af00      	add	r7, sp, #0
 8010590:	6078      	str	r0, [r7, #4]
 8010592:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d10d      	bne.n	80105bc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80105a0:	693b      	ldr	r3, [r7, #16]
 80105a2:	691b      	ldr	r3, [r3, #16]
 80105a4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80105a6:	69bb      	ldr	r3, [r7, #24]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d004      	beq.n	80105b6 <create_chain+0x2c>
 80105ac:	693b      	ldr	r3, [r7, #16]
 80105ae:	699b      	ldr	r3, [r3, #24]
 80105b0:	69ba      	ldr	r2, [r7, #24]
 80105b2:	429a      	cmp	r2, r3
 80105b4:	d31b      	bcc.n	80105ee <create_chain+0x64>
 80105b6:	2301      	movs	r3, #1
 80105b8:	61bb      	str	r3, [r7, #24]
 80105ba:	e018      	b.n	80105ee <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80105bc:	6839      	ldr	r1, [r7, #0]
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f7ff fded 	bl	801019e <get_fat>
 80105c4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	2b01      	cmp	r3, #1
 80105ca:	d801      	bhi.n	80105d0 <create_chain+0x46>
 80105cc:	2301      	movs	r3, #1
 80105ce:	e070      	b.n	80106b2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80105d6:	d101      	bne.n	80105dc <create_chain+0x52>
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	e06a      	b.n	80106b2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80105dc:	693b      	ldr	r3, [r7, #16]
 80105de:	699b      	ldr	r3, [r3, #24]
 80105e0:	68fa      	ldr	r2, [r7, #12]
 80105e2:	429a      	cmp	r2, r3
 80105e4:	d201      	bcs.n	80105ea <create_chain+0x60>
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	e063      	b.n	80106b2 <create_chain+0x128>
		scl = clst;
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80105ee:	69bb      	ldr	r3, [r7, #24]
 80105f0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80105f2:	69fb      	ldr	r3, [r7, #28]
 80105f4:	3301      	adds	r3, #1
 80105f6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	699b      	ldr	r3, [r3, #24]
 80105fc:	69fa      	ldr	r2, [r7, #28]
 80105fe:	429a      	cmp	r2, r3
 8010600:	d307      	bcc.n	8010612 <create_chain+0x88>
				ncl = 2;
 8010602:	2302      	movs	r3, #2
 8010604:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010606:	69fa      	ldr	r2, [r7, #28]
 8010608:	69bb      	ldr	r3, [r7, #24]
 801060a:	429a      	cmp	r2, r3
 801060c:	d901      	bls.n	8010612 <create_chain+0x88>
 801060e:	2300      	movs	r3, #0
 8010610:	e04f      	b.n	80106b2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010612:	69f9      	ldr	r1, [r7, #28]
 8010614:	6878      	ldr	r0, [r7, #4]
 8010616:	f7ff fdc2 	bl	801019e <get_fat>
 801061a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d00e      	beq.n	8010640 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	2b01      	cmp	r3, #1
 8010626:	d003      	beq.n	8010630 <create_chain+0xa6>
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801062e:	d101      	bne.n	8010634 <create_chain+0xaa>
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	e03e      	b.n	80106b2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010634:	69fa      	ldr	r2, [r7, #28]
 8010636:	69bb      	ldr	r3, [r7, #24]
 8010638:	429a      	cmp	r2, r3
 801063a:	d1da      	bne.n	80105f2 <create_chain+0x68>
 801063c:	2300      	movs	r3, #0
 801063e:	e038      	b.n	80106b2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010640:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010642:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010646:	69f9      	ldr	r1, [r7, #28]
 8010648:	6938      	ldr	r0, [r7, #16]
 801064a:	f7ff fe4f 	bl	80102ec <put_fat>
 801064e:	4603      	mov	r3, r0
 8010650:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010652:	7dfb      	ldrb	r3, [r7, #23]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d109      	bne.n	801066c <create_chain+0xe2>
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d006      	beq.n	801066c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801065e:	69fa      	ldr	r2, [r7, #28]
 8010660:	6839      	ldr	r1, [r7, #0]
 8010662:	6938      	ldr	r0, [r7, #16]
 8010664:	f7ff fe42 	bl	80102ec <put_fat>
 8010668:	4603      	mov	r3, r0
 801066a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801066c:	7dfb      	ldrb	r3, [r7, #23]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d116      	bne.n	80106a0 <create_chain+0x116>
		fs->last_clst = ncl;
 8010672:	693b      	ldr	r3, [r7, #16]
 8010674:	69fa      	ldr	r2, [r7, #28]
 8010676:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010678:	693b      	ldr	r3, [r7, #16]
 801067a:	695a      	ldr	r2, [r3, #20]
 801067c:	693b      	ldr	r3, [r7, #16]
 801067e:	699b      	ldr	r3, [r3, #24]
 8010680:	3b02      	subs	r3, #2
 8010682:	429a      	cmp	r2, r3
 8010684:	d804      	bhi.n	8010690 <create_chain+0x106>
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	695b      	ldr	r3, [r3, #20]
 801068a:	1e5a      	subs	r2, r3, #1
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8010690:	693b      	ldr	r3, [r7, #16]
 8010692:	791b      	ldrb	r3, [r3, #4]
 8010694:	f043 0301 	orr.w	r3, r3, #1
 8010698:	b2da      	uxtb	r2, r3
 801069a:	693b      	ldr	r3, [r7, #16]
 801069c:	711a      	strb	r2, [r3, #4]
 801069e:	e007      	b.n	80106b0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80106a0:	7dfb      	ldrb	r3, [r7, #23]
 80106a2:	2b01      	cmp	r3, #1
 80106a4:	d102      	bne.n	80106ac <create_chain+0x122>
 80106a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80106aa:	e000      	b.n	80106ae <create_chain+0x124>
 80106ac:	2301      	movs	r3, #1
 80106ae:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80106b0:	69fb      	ldr	r3, [r7, #28]
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	3720      	adds	r7, #32
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}

080106ba <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80106ba:	b480      	push	{r7}
 80106bc:	b087      	sub	sp, #28
 80106be:	af00      	add	r7, sp, #0
 80106c0:	6078      	str	r0, [r7, #4]
 80106c2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106ce:	3304      	adds	r3, #4
 80106d0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	0a5b      	lsrs	r3, r3, #9
 80106d6:	68fa      	ldr	r2, [r7, #12]
 80106d8:	8952      	ldrh	r2, [r2, #10]
 80106da:	fbb3 f3f2 	udiv	r3, r3, r2
 80106de:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80106e0:	693b      	ldr	r3, [r7, #16]
 80106e2:	1d1a      	adds	r2, r3, #4
 80106e4:	613a      	str	r2, [r7, #16]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80106ea:	68bb      	ldr	r3, [r7, #8]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d101      	bne.n	80106f4 <clmt_clust+0x3a>
 80106f0:	2300      	movs	r3, #0
 80106f2:	e010      	b.n	8010716 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80106f4:	697a      	ldr	r2, [r7, #20]
 80106f6:	68bb      	ldr	r3, [r7, #8]
 80106f8:	429a      	cmp	r2, r3
 80106fa:	d307      	bcc.n	801070c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80106fc:	697a      	ldr	r2, [r7, #20]
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	1ad3      	subs	r3, r2, r3
 8010702:	617b      	str	r3, [r7, #20]
 8010704:	693b      	ldr	r3, [r7, #16]
 8010706:	3304      	adds	r3, #4
 8010708:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801070a:	e7e9      	b.n	80106e0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801070c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801070e:	693b      	ldr	r3, [r7, #16]
 8010710:	681a      	ldr	r2, [r3, #0]
 8010712:	697b      	ldr	r3, [r7, #20]
 8010714:	4413      	add	r3, r2
}
 8010716:	4618      	mov	r0, r3
 8010718:	371c      	adds	r7, #28
 801071a:	46bd      	mov	sp, r7
 801071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010720:	4770      	bx	lr

08010722 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010722:	b580      	push	{r7, lr}
 8010724:	b086      	sub	sp, #24
 8010726:	af00      	add	r7, sp, #0
 8010728:	6078      	str	r0, [r7, #4]
 801072a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010738:	d204      	bcs.n	8010744 <dir_sdi+0x22>
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	f003 031f 	and.w	r3, r3, #31
 8010740:	2b00      	cmp	r3, #0
 8010742:	d001      	beq.n	8010748 <dir_sdi+0x26>
		return FR_INT_ERR;
 8010744:	2302      	movs	r3, #2
 8010746:	e063      	b.n	8010810 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	683a      	ldr	r2, [r7, #0]
 801074c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	689b      	ldr	r3, [r3, #8]
 8010752:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010754:	697b      	ldr	r3, [r7, #20]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d106      	bne.n	8010768 <dir_sdi+0x46>
 801075a:	693b      	ldr	r3, [r7, #16]
 801075c:	781b      	ldrb	r3, [r3, #0]
 801075e:	2b02      	cmp	r3, #2
 8010760:	d902      	bls.n	8010768 <dir_sdi+0x46>
		clst = fs->dirbase;
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010766:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010768:	697b      	ldr	r3, [r7, #20]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d10c      	bne.n	8010788 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	095b      	lsrs	r3, r3, #5
 8010772:	693a      	ldr	r2, [r7, #16]
 8010774:	8912      	ldrh	r2, [r2, #8]
 8010776:	4293      	cmp	r3, r2
 8010778:	d301      	bcc.n	801077e <dir_sdi+0x5c>
 801077a:	2302      	movs	r3, #2
 801077c:	e048      	b.n	8010810 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801077e:	693b      	ldr	r3, [r7, #16]
 8010780:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	61da      	str	r2, [r3, #28]
 8010786:	e029      	b.n	80107dc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010788:	693b      	ldr	r3, [r7, #16]
 801078a:	895b      	ldrh	r3, [r3, #10]
 801078c:	025b      	lsls	r3, r3, #9
 801078e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010790:	e019      	b.n	80107c6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	6979      	ldr	r1, [r7, #20]
 8010796:	4618      	mov	r0, r3
 8010798:	f7ff fd01 	bl	801019e <get_fat>
 801079c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80107a4:	d101      	bne.n	80107aa <dir_sdi+0x88>
 80107a6:	2301      	movs	r3, #1
 80107a8:	e032      	b.n	8010810 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80107aa:	697b      	ldr	r3, [r7, #20]
 80107ac:	2b01      	cmp	r3, #1
 80107ae:	d904      	bls.n	80107ba <dir_sdi+0x98>
 80107b0:	693b      	ldr	r3, [r7, #16]
 80107b2:	699b      	ldr	r3, [r3, #24]
 80107b4:	697a      	ldr	r2, [r7, #20]
 80107b6:	429a      	cmp	r2, r3
 80107b8:	d301      	bcc.n	80107be <dir_sdi+0x9c>
 80107ba:	2302      	movs	r3, #2
 80107bc:	e028      	b.n	8010810 <dir_sdi+0xee>
			ofs -= csz;
 80107be:	683a      	ldr	r2, [r7, #0]
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	1ad3      	subs	r3, r2, r3
 80107c4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80107c6:	683a      	ldr	r2, [r7, #0]
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d2e1      	bcs.n	8010792 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80107ce:	6979      	ldr	r1, [r7, #20]
 80107d0:	6938      	ldr	r0, [r7, #16]
 80107d2:	f7ff fcc5 	bl	8010160 <clust2sect>
 80107d6:	4602      	mov	r2, r0
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	697a      	ldr	r2, [r7, #20]
 80107e0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	69db      	ldr	r3, [r3, #28]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d101      	bne.n	80107ee <dir_sdi+0xcc>
 80107ea:	2302      	movs	r3, #2
 80107ec:	e010      	b.n	8010810 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	69da      	ldr	r2, [r3, #28]
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	0a5b      	lsrs	r3, r3, #9
 80107f6:	441a      	add	r2, r3
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80107fc:	693b      	ldr	r3, [r7, #16]
 80107fe:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010808:	441a      	add	r2, r3
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801080e:	2300      	movs	r3, #0
}
 8010810:	4618      	mov	r0, r3
 8010812:	3718      	adds	r7, #24
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}

08010818 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b086      	sub	sp, #24
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
 8010820:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	695b      	ldr	r3, [r3, #20]
 801082c:	3320      	adds	r3, #32
 801082e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	69db      	ldr	r3, [r3, #28]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d003      	beq.n	8010840 <dir_next+0x28>
 8010838:	68bb      	ldr	r3, [r7, #8]
 801083a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801083e:	d301      	bcc.n	8010844 <dir_next+0x2c>
 8010840:	2304      	movs	r3, #4
 8010842:	e0aa      	b.n	801099a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801084a:	2b00      	cmp	r3, #0
 801084c:	f040 8098 	bne.w	8010980 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	69db      	ldr	r3, [r3, #28]
 8010854:	1c5a      	adds	r2, r3, #1
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	699b      	ldr	r3, [r3, #24]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d10b      	bne.n	801087a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010862:	68bb      	ldr	r3, [r7, #8]
 8010864:	095b      	lsrs	r3, r3, #5
 8010866:	68fa      	ldr	r2, [r7, #12]
 8010868:	8912      	ldrh	r2, [r2, #8]
 801086a:	4293      	cmp	r3, r2
 801086c:	f0c0 8088 	bcc.w	8010980 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2200      	movs	r2, #0
 8010874:	61da      	str	r2, [r3, #28]
 8010876:	2304      	movs	r3, #4
 8010878:	e08f      	b.n	801099a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801087a:	68bb      	ldr	r3, [r7, #8]
 801087c:	0a5b      	lsrs	r3, r3, #9
 801087e:	68fa      	ldr	r2, [r7, #12]
 8010880:	8952      	ldrh	r2, [r2, #10]
 8010882:	3a01      	subs	r2, #1
 8010884:	4013      	ands	r3, r2
 8010886:	2b00      	cmp	r3, #0
 8010888:	d17a      	bne.n	8010980 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801088a:	687a      	ldr	r2, [r7, #4]
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	699b      	ldr	r3, [r3, #24]
 8010890:	4619      	mov	r1, r3
 8010892:	4610      	mov	r0, r2
 8010894:	f7ff fc83 	bl	801019e <get_fat>
 8010898:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801089a:	697b      	ldr	r3, [r7, #20]
 801089c:	2b01      	cmp	r3, #1
 801089e:	d801      	bhi.n	80108a4 <dir_next+0x8c>
 80108a0:	2302      	movs	r3, #2
 80108a2:	e07a      	b.n	801099a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80108a4:	697b      	ldr	r3, [r7, #20]
 80108a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80108aa:	d101      	bne.n	80108b0 <dir_next+0x98>
 80108ac:	2301      	movs	r3, #1
 80108ae:	e074      	b.n	801099a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	699b      	ldr	r3, [r3, #24]
 80108b4:	697a      	ldr	r2, [r7, #20]
 80108b6:	429a      	cmp	r2, r3
 80108b8:	d358      	bcc.n	801096c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d104      	bne.n	80108ca <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2200      	movs	r2, #0
 80108c4:	61da      	str	r2, [r3, #28]
 80108c6:	2304      	movs	r3, #4
 80108c8:	e067      	b.n	801099a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80108ca:	687a      	ldr	r2, [r7, #4]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	699b      	ldr	r3, [r3, #24]
 80108d0:	4619      	mov	r1, r3
 80108d2:	4610      	mov	r0, r2
 80108d4:	f7ff fe59 	bl	801058a <create_chain>
 80108d8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d101      	bne.n	80108e4 <dir_next+0xcc>
 80108e0:	2307      	movs	r3, #7
 80108e2:	e05a      	b.n	801099a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80108e4:	697b      	ldr	r3, [r7, #20]
 80108e6:	2b01      	cmp	r3, #1
 80108e8:	d101      	bne.n	80108ee <dir_next+0xd6>
 80108ea:	2302      	movs	r3, #2
 80108ec:	e055      	b.n	801099a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80108f4:	d101      	bne.n	80108fa <dir_next+0xe2>
 80108f6:	2301      	movs	r3, #1
 80108f8:	e04f      	b.n	801099a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80108fa:	68f8      	ldr	r0, [r7, #12]
 80108fc:	f7ff fb50 	bl	800ffa0 <sync_window>
 8010900:	4603      	mov	r3, r0
 8010902:	2b00      	cmp	r3, #0
 8010904:	d001      	beq.n	801090a <dir_next+0xf2>
 8010906:	2301      	movs	r3, #1
 8010908:	e047      	b.n	801099a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	3334      	adds	r3, #52	@ 0x34
 801090e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010912:	2100      	movs	r1, #0
 8010914:	4618      	mov	r0, r3
 8010916:	f7ff f948 	bl	800fbaa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801091a:	2300      	movs	r3, #0
 801091c:	613b      	str	r3, [r7, #16]
 801091e:	6979      	ldr	r1, [r7, #20]
 8010920:	68f8      	ldr	r0, [r7, #12]
 8010922:	f7ff fc1d 	bl	8010160 <clust2sect>
 8010926:	4602      	mov	r2, r0
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	631a      	str	r2, [r3, #48]	@ 0x30
 801092c:	e012      	b.n	8010954 <dir_next+0x13c>
						fs->wflag = 1;
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	2201      	movs	r2, #1
 8010932:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010934:	68f8      	ldr	r0, [r7, #12]
 8010936:	f7ff fb33 	bl	800ffa0 <sync_window>
 801093a:	4603      	mov	r3, r0
 801093c:	2b00      	cmp	r3, #0
 801093e:	d001      	beq.n	8010944 <dir_next+0x12c>
 8010940:	2301      	movs	r3, #1
 8010942:	e02a      	b.n	801099a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010944:	693b      	ldr	r3, [r7, #16]
 8010946:	3301      	adds	r3, #1
 8010948:	613b      	str	r3, [r7, #16]
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801094e:	1c5a      	adds	r2, r3, #1
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	631a      	str	r2, [r3, #48]	@ 0x30
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	895b      	ldrh	r3, [r3, #10]
 8010958:	461a      	mov	r2, r3
 801095a:	693b      	ldr	r3, [r7, #16]
 801095c:	4293      	cmp	r3, r2
 801095e:	d3e6      	bcc.n	801092e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010964:	693b      	ldr	r3, [r7, #16]
 8010966:	1ad2      	subs	r2, r2, r3
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	697a      	ldr	r2, [r7, #20]
 8010970:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010972:	6979      	ldr	r1, [r7, #20]
 8010974:	68f8      	ldr	r0, [r7, #12]
 8010976:	f7ff fbf3 	bl	8010160 <clust2sect>
 801097a:	4602      	mov	r2, r0
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	68ba      	ldr	r2, [r7, #8]
 8010984:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010992:	441a      	add	r2, r3
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010998:	2300      	movs	r3, #0
}
 801099a:	4618      	mov	r0, r3
 801099c:	3718      	adds	r7, #24
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}

080109a2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80109a2:	b580      	push	{r7, lr}
 80109a4:	b086      	sub	sp, #24
 80109a6:	af00      	add	r7, sp, #0
 80109a8:	6078      	str	r0, [r7, #4]
 80109aa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80109b2:	2100      	movs	r1, #0
 80109b4:	6878      	ldr	r0, [r7, #4]
 80109b6:	f7ff feb4 	bl	8010722 <dir_sdi>
 80109ba:	4603      	mov	r3, r0
 80109bc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80109be:	7dfb      	ldrb	r3, [r7, #23]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d12b      	bne.n	8010a1c <dir_alloc+0x7a>
		n = 0;
 80109c4:	2300      	movs	r3, #0
 80109c6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	69db      	ldr	r3, [r3, #28]
 80109cc:	4619      	mov	r1, r3
 80109ce:	68f8      	ldr	r0, [r7, #12]
 80109d0:	f7ff fb2a 	bl	8010028 <move_window>
 80109d4:	4603      	mov	r3, r0
 80109d6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80109d8:	7dfb      	ldrb	r3, [r7, #23]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d11d      	bne.n	8010a1a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6a1b      	ldr	r3, [r3, #32]
 80109e2:	781b      	ldrb	r3, [r3, #0]
 80109e4:	2be5      	cmp	r3, #229	@ 0xe5
 80109e6:	d004      	beq.n	80109f2 <dir_alloc+0x50>
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	6a1b      	ldr	r3, [r3, #32]
 80109ec:	781b      	ldrb	r3, [r3, #0]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d107      	bne.n	8010a02 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80109f2:	693b      	ldr	r3, [r7, #16]
 80109f4:	3301      	adds	r3, #1
 80109f6:	613b      	str	r3, [r7, #16]
 80109f8:	693a      	ldr	r2, [r7, #16]
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	429a      	cmp	r2, r3
 80109fe:	d102      	bne.n	8010a06 <dir_alloc+0x64>
 8010a00:	e00c      	b.n	8010a1c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010a02:	2300      	movs	r3, #0
 8010a04:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010a06:	2101      	movs	r1, #1
 8010a08:	6878      	ldr	r0, [r7, #4]
 8010a0a:	f7ff ff05 	bl	8010818 <dir_next>
 8010a0e:	4603      	mov	r3, r0
 8010a10:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010a12:	7dfb      	ldrb	r3, [r7, #23]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d0d7      	beq.n	80109c8 <dir_alloc+0x26>
 8010a18:	e000      	b.n	8010a1c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8010a1a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010a1c:	7dfb      	ldrb	r3, [r7, #23]
 8010a1e:	2b04      	cmp	r3, #4
 8010a20:	d101      	bne.n	8010a26 <dir_alloc+0x84>
 8010a22:	2307      	movs	r3, #7
 8010a24:	75fb      	strb	r3, [r7, #23]
	return res;
 8010a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3718      	adds	r7, #24
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}

08010a30 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b084      	sub	sp, #16
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
 8010a38:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	331a      	adds	r3, #26
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f7ff f810 	bl	800fa64 <ld_word>
 8010a44:	4603      	mov	r3, r0
 8010a46:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	2b03      	cmp	r3, #3
 8010a4e:	d109      	bne.n	8010a64 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	3314      	adds	r3, #20
 8010a54:	4618      	mov	r0, r3
 8010a56:	f7ff f805 	bl	800fa64 <ld_word>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	041b      	lsls	r3, r3, #16
 8010a5e:	68fa      	ldr	r2, [r7, #12]
 8010a60:	4313      	orrs	r3, r2
 8010a62:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010a64:	68fb      	ldr	r3, [r7, #12]
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	3710      	adds	r7, #16
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}

08010a6e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010a6e:	b580      	push	{r7, lr}
 8010a70:	b084      	sub	sp, #16
 8010a72:	af00      	add	r7, sp, #0
 8010a74:	60f8      	str	r0, [r7, #12]
 8010a76:	60b9      	str	r1, [r7, #8]
 8010a78:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	331a      	adds	r3, #26
 8010a7e:	687a      	ldr	r2, [r7, #4]
 8010a80:	b292      	uxth	r2, r2
 8010a82:	4611      	mov	r1, r2
 8010a84:	4618      	mov	r0, r3
 8010a86:	f7ff f828 	bl	800fada <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	781b      	ldrb	r3, [r3, #0]
 8010a8e:	2b03      	cmp	r3, #3
 8010a90:	d109      	bne.n	8010aa6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010a92:	68bb      	ldr	r3, [r7, #8]
 8010a94:	f103 0214 	add.w	r2, r3, #20
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	0c1b      	lsrs	r3, r3, #16
 8010a9c:	b29b      	uxth	r3, r3
 8010a9e:	4619      	mov	r1, r3
 8010aa0:	4610      	mov	r0, r2
 8010aa2:	f7ff f81a 	bl	800fada <st_word>
	}
}
 8010aa6:	bf00      	nop
 8010aa8:	3710      	adds	r7, #16
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}

08010aae <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010aae:	b580      	push	{r7, lr}
 8010ab0:	b086      	sub	sp, #24
 8010ab2:	af00      	add	r7, sp, #0
 8010ab4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010abc:	2100      	movs	r1, #0
 8010abe:	6878      	ldr	r0, [r7, #4]
 8010ac0:	f7ff fe2f 	bl	8010722 <dir_sdi>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010ac8:	7dfb      	ldrb	r3, [r7, #23]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d001      	beq.n	8010ad2 <dir_find+0x24>
 8010ace:	7dfb      	ldrb	r3, [r7, #23]
 8010ad0:	e03e      	b.n	8010b50 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	69db      	ldr	r3, [r3, #28]
 8010ad6:	4619      	mov	r1, r3
 8010ad8:	6938      	ldr	r0, [r7, #16]
 8010ada:	f7ff faa5 	bl	8010028 <move_window>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010ae2:	7dfb      	ldrb	r3, [r7, #23]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d12f      	bne.n	8010b48 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	6a1b      	ldr	r3, [r3, #32]
 8010aec:	781b      	ldrb	r3, [r3, #0]
 8010aee:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010af0:	7bfb      	ldrb	r3, [r7, #15]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d102      	bne.n	8010afc <dir_find+0x4e>
 8010af6:	2304      	movs	r3, #4
 8010af8:	75fb      	strb	r3, [r7, #23]
 8010afa:	e028      	b.n	8010b4e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	6a1b      	ldr	r3, [r3, #32]
 8010b00:	330b      	adds	r3, #11
 8010b02:	781b      	ldrb	r3, [r3, #0]
 8010b04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010b08:	b2da      	uxtb	r2, r3
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6a1b      	ldr	r3, [r3, #32]
 8010b12:	330b      	adds	r3, #11
 8010b14:	781b      	ldrb	r3, [r3, #0]
 8010b16:	f003 0308 	and.w	r3, r3, #8
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d10a      	bne.n	8010b34 <dir_find+0x86>
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	6a18      	ldr	r0, [r3, #32]
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	3324      	adds	r3, #36	@ 0x24
 8010b26:	220b      	movs	r2, #11
 8010b28:	4619      	mov	r1, r3
 8010b2a:	f7ff f859 	bl	800fbe0 <mem_cmp>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d00b      	beq.n	8010b4c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010b34:	2100      	movs	r1, #0
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f7ff fe6e 	bl	8010818 <dir_next>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010b40:	7dfb      	ldrb	r3, [r7, #23]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d0c5      	beq.n	8010ad2 <dir_find+0x24>
 8010b46:	e002      	b.n	8010b4e <dir_find+0xa0>
		if (res != FR_OK) break;
 8010b48:	bf00      	nop
 8010b4a:	e000      	b.n	8010b4e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010b4c:	bf00      	nop

	return res;
 8010b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b50:	4618      	mov	r0, r3
 8010b52:	3718      	adds	r7, #24
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}

08010b58 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b084      	sub	sp, #16
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010b66:	2101      	movs	r1, #1
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f7ff ff1a 	bl	80109a2 <dir_alloc>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010b72:	7bfb      	ldrb	r3, [r7, #15]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d11c      	bne.n	8010bb2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	69db      	ldr	r3, [r3, #28]
 8010b7c:	4619      	mov	r1, r3
 8010b7e:	68b8      	ldr	r0, [r7, #8]
 8010b80:	f7ff fa52 	bl	8010028 <move_window>
 8010b84:	4603      	mov	r3, r0
 8010b86:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010b88:	7bfb      	ldrb	r3, [r7, #15]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d111      	bne.n	8010bb2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6a1b      	ldr	r3, [r3, #32]
 8010b92:	2220      	movs	r2, #32
 8010b94:	2100      	movs	r1, #0
 8010b96:	4618      	mov	r0, r3
 8010b98:	f7ff f807 	bl	800fbaa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	6a18      	ldr	r0, [r3, #32]
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	3324      	adds	r3, #36	@ 0x24
 8010ba4:	220b      	movs	r2, #11
 8010ba6:	4619      	mov	r1, r3
 8010ba8:	f7fe ffde 	bl	800fb68 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010bac:	68bb      	ldr	r3, [r7, #8]
 8010bae:	2201      	movs	r2, #1
 8010bb0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	3710      	adds	r7, #16
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	bd80      	pop	{r7, pc}

08010bbc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b088      	sub	sp, #32
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
 8010bc4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	60fb      	str	r3, [r7, #12]
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	3324      	adds	r3, #36	@ 0x24
 8010bd0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010bd2:	220b      	movs	r2, #11
 8010bd4:	2120      	movs	r1, #32
 8010bd6:	68b8      	ldr	r0, [r7, #8]
 8010bd8:	f7fe ffe7 	bl	800fbaa <mem_set>
	si = i = 0; ni = 8;
 8010bdc:	2300      	movs	r3, #0
 8010bde:	613b      	str	r3, [r7, #16]
 8010be0:	693b      	ldr	r3, [r7, #16]
 8010be2:	61fb      	str	r3, [r7, #28]
 8010be4:	2308      	movs	r3, #8
 8010be6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010be8:	69fb      	ldr	r3, [r7, #28]
 8010bea:	1c5a      	adds	r2, r3, #1
 8010bec:	61fa      	str	r2, [r7, #28]
 8010bee:	68fa      	ldr	r2, [r7, #12]
 8010bf0:	4413      	add	r3, r2
 8010bf2:	781b      	ldrb	r3, [r3, #0]
 8010bf4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010bf6:	7efb      	ldrb	r3, [r7, #27]
 8010bf8:	2b20      	cmp	r3, #32
 8010bfa:	d94e      	bls.n	8010c9a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010bfc:	7efb      	ldrb	r3, [r7, #27]
 8010bfe:	2b2f      	cmp	r3, #47	@ 0x2f
 8010c00:	d006      	beq.n	8010c10 <create_name+0x54>
 8010c02:	7efb      	ldrb	r3, [r7, #27]
 8010c04:	2b5c      	cmp	r3, #92	@ 0x5c
 8010c06:	d110      	bne.n	8010c2a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010c08:	e002      	b.n	8010c10 <create_name+0x54>
 8010c0a:	69fb      	ldr	r3, [r7, #28]
 8010c0c:	3301      	adds	r3, #1
 8010c0e:	61fb      	str	r3, [r7, #28]
 8010c10:	68fa      	ldr	r2, [r7, #12]
 8010c12:	69fb      	ldr	r3, [r7, #28]
 8010c14:	4413      	add	r3, r2
 8010c16:	781b      	ldrb	r3, [r3, #0]
 8010c18:	2b2f      	cmp	r3, #47	@ 0x2f
 8010c1a:	d0f6      	beq.n	8010c0a <create_name+0x4e>
 8010c1c:	68fa      	ldr	r2, [r7, #12]
 8010c1e:	69fb      	ldr	r3, [r7, #28]
 8010c20:	4413      	add	r3, r2
 8010c22:	781b      	ldrb	r3, [r3, #0]
 8010c24:	2b5c      	cmp	r3, #92	@ 0x5c
 8010c26:	d0f0      	beq.n	8010c0a <create_name+0x4e>
			break;
 8010c28:	e038      	b.n	8010c9c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010c2a:	7efb      	ldrb	r3, [r7, #27]
 8010c2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8010c2e:	d003      	beq.n	8010c38 <create_name+0x7c>
 8010c30:	693a      	ldr	r2, [r7, #16]
 8010c32:	697b      	ldr	r3, [r7, #20]
 8010c34:	429a      	cmp	r2, r3
 8010c36:	d30c      	bcc.n	8010c52 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	2b0b      	cmp	r3, #11
 8010c3c:	d002      	beq.n	8010c44 <create_name+0x88>
 8010c3e:	7efb      	ldrb	r3, [r7, #27]
 8010c40:	2b2e      	cmp	r3, #46	@ 0x2e
 8010c42:	d001      	beq.n	8010c48 <create_name+0x8c>
 8010c44:	2306      	movs	r3, #6
 8010c46:	e044      	b.n	8010cd2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8010c48:	2308      	movs	r3, #8
 8010c4a:	613b      	str	r3, [r7, #16]
 8010c4c:	230b      	movs	r3, #11
 8010c4e:	617b      	str	r3, [r7, #20]
			continue;
 8010c50:	e022      	b.n	8010c98 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010c52:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	da04      	bge.n	8010c64 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010c5a:	7efb      	ldrb	r3, [r7, #27]
 8010c5c:	3b80      	subs	r3, #128	@ 0x80
 8010c5e:	4a1f      	ldr	r2, [pc, #124]	@ (8010cdc <create_name+0x120>)
 8010c60:	5cd3      	ldrb	r3, [r2, r3]
 8010c62:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010c64:	7efb      	ldrb	r3, [r7, #27]
 8010c66:	4619      	mov	r1, r3
 8010c68:	481d      	ldr	r0, [pc, #116]	@ (8010ce0 <create_name+0x124>)
 8010c6a:	f7fe ffe0 	bl	800fc2e <chk_chr>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d001      	beq.n	8010c78 <create_name+0xbc>
 8010c74:	2306      	movs	r3, #6
 8010c76:	e02c      	b.n	8010cd2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010c78:	7efb      	ldrb	r3, [r7, #27]
 8010c7a:	2b60      	cmp	r3, #96	@ 0x60
 8010c7c:	d905      	bls.n	8010c8a <create_name+0xce>
 8010c7e:	7efb      	ldrb	r3, [r7, #27]
 8010c80:	2b7a      	cmp	r3, #122	@ 0x7a
 8010c82:	d802      	bhi.n	8010c8a <create_name+0xce>
 8010c84:	7efb      	ldrb	r3, [r7, #27]
 8010c86:	3b20      	subs	r3, #32
 8010c88:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8010c8a:	693b      	ldr	r3, [r7, #16]
 8010c8c:	1c5a      	adds	r2, r3, #1
 8010c8e:	613a      	str	r2, [r7, #16]
 8010c90:	68ba      	ldr	r2, [r7, #8]
 8010c92:	4413      	add	r3, r2
 8010c94:	7efa      	ldrb	r2, [r7, #27]
 8010c96:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010c98:	e7a6      	b.n	8010be8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010c9a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010c9c:	68fa      	ldr	r2, [r7, #12]
 8010c9e:	69fb      	ldr	r3, [r7, #28]
 8010ca0:	441a      	add	r2, r3
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010ca6:	693b      	ldr	r3, [r7, #16]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d101      	bne.n	8010cb0 <create_name+0xf4>
 8010cac:	2306      	movs	r3, #6
 8010cae:	e010      	b.n	8010cd2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010cb0:	68bb      	ldr	r3, [r7, #8]
 8010cb2:	781b      	ldrb	r3, [r3, #0]
 8010cb4:	2be5      	cmp	r3, #229	@ 0xe5
 8010cb6:	d102      	bne.n	8010cbe <create_name+0x102>
 8010cb8:	68bb      	ldr	r3, [r7, #8]
 8010cba:	2205      	movs	r2, #5
 8010cbc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010cbe:	7efb      	ldrb	r3, [r7, #27]
 8010cc0:	2b20      	cmp	r3, #32
 8010cc2:	d801      	bhi.n	8010cc8 <create_name+0x10c>
 8010cc4:	2204      	movs	r2, #4
 8010cc6:	e000      	b.n	8010cca <create_name+0x10e>
 8010cc8:	2200      	movs	r2, #0
 8010cca:	68bb      	ldr	r3, [r7, #8]
 8010ccc:	330b      	adds	r3, #11
 8010cce:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010cd0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	3720      	adds	r7, #32
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bd80      	pop	{r7, pc}
 8010cda:	bf00      	nop
 8010cdc:	08024ce0 	.word	0x08024ce0
 8010ce0:	08016994 	.word	0x08016994

08010ce4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b086      	sub	sp, #24
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010cf2:	693b      	ldr	r3, [r7, #16]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010cf8:	e002      	b.n	8010d00 <follow_path+0x1c>
 8010cfa:	683b      	ldr	r3, [r7, #0]
 8010cfc:	3301      	adds	r3, #1
 8010cfe:	603b      	str	r3, [r7, #0]
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	781b      	ldrb	r3, [r3, #0]
 8010d04:	2b2f      	cmp	r3, #47	@ 0x2f
 8010d06:	d0f8      	beq.n	8010cfa <follow_path+0x16>
 8010d08:	683b      	ldr	r3, [r7, #0]
 8010d0a:	781b      	ldrb	r3, [r3, #0]
 8010d0c:	2b5c      	cmp	r3, #92	@ 0x5c
 8010d0e:	d0f4      	beq.n	8010cfa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010d10:	693b      	ldr	r3, [r7, #16]
 8010d12:	2200      	movs	r2, #0
 8010d14:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	781b      	ldrb	r3, [r3, #0]
 8010d1a:	2b1f      	cmp	r3, #31
 8010d1c:	d80a      	bhi.n	8010d34 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2280      	movs	r2, #128	@ 0x80
 8010d22:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8010d26:	2100      	movs	r1, #0
 8010d28:	6878      	ldr	r0, [r7, #4]
 8010d2a:	f7ff fcfa 	bl	8010722 <dir_sdi>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	75fb      	strb	r3, [r7, #23]
 8010d32:	e043      	b.n	8010dbc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010d34:	463b      	mov	r3, r7
 8010d36:	4619      	mov	r1, r3
 8010d38:	6878      	ldr	r0, [r7, #4]
 8010d3a:	f7ff ff3f 	bl	8010bbc <create_name>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010d42:	7dfb      	ldrb	r3, [r7, #23]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d134      	bne.n	8010db2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	f7ff feb0 	bl	8010aae <dir_find>
 8010d4e:	4603      	mov	r3, r0
 8010d50:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010d58:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010d5a:	7dfb      	ldrb	r3, [r7, #23]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d00a      	beq.n	8010d76 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010d60:	7dfb      	ldrb	r3, [r7, #23]
 8010d62:	2b04      	cmp	r3, #4
 8010d64:	d127      	bne.n	8010db6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010d66:	7afb      	ldrb	r3, [r7, #11]
 8010d68:	f003 0304 	and.w	r3, r3, #4
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d122      	bne.n	8010db6 <follow_path+0xd2>
 8010d70:	2305      	movs	r3, #5
 8010d72:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010d74:	e01f      	b.n	8010db6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010d76:	7afb      	ldrb	r3, [r7, #11]
 8010d78:	f003 0304 	and.w	r3, r3, #4
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d11c      	bne.n	8010dba <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010d80:	693b      	ldr	r3, [r7, #16]
 8010d82:	799b      	ldrb	r3, [r3, #6]
 8010d84:	f003 0310 	and.w	r3, r3, #16
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d102      	bne.n	8010d92 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010d8c:	2305      	movs	r3, #5
 8010d8e:	75fb      	strb	r3, [r7, #23]
 8010d90:	e014      	b.n	8010dbc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	695b      	ldr	r3, [r3, #20]
 8010d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010da0:	4413      	add	r3, r2
 8010da2:	4619      	mov	r1, r3
 8010da4:	68f8      	ldr	r0, [r7, #12]
 8010da6:	f7ff fe43 	bl	8010a30 <ld_clust>
 8010daa:	4602      	mov	r2, r0
 8010dac:	693b      	ldr	r3, [r7, #16]
 8010dae:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010db0:	e7c0      	b.n	8010d34 <follow_path+0x50>
			if (res != FR_OK) break;
 8010db2:	bf00      	nop
 8010db4:	e002      	b.n	8010dbc <follow_path+0xd8>
				break;
 8010db6:	bf00      	nop
 8010db8:	e000      	b.n	8010dbc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010dba:	bf00      	nop
			}
		}
	}

	return res;
 8010dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	3718      	adds	r7, #24
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}

08010dc6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010dc6:	b480      	push	{r7}
 8010dc8:	b087      	sub	sp, #28
 8010dca:	af00      	add	r7, sp, #0
 8010dcc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010dce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010dd2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d031      	beq.n	8010e40 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	617b      	str	r3, [r7, #20]
 8010de2:	e002      	b.n	8010dea <get_ldnumber+0x24>
 8010de4:	697b      	ldr	r3, [r7, #20]
 8010de6:	3301      	adds	r3, #1
 8010de8:	617b      	str	r3, [r7, #20]
 8010dea:	697b      	ldr	r3, [r7, #20]
 8010dec:	781b      	ldrb	r3, [r3, #0]
 8010dee:	2b20      	cmp	r3, #32
 8010df0:	d903      	bls.n	8010dfa <get_ldnumber+0x34>
 8010df2:	697b      	ldr	r3, [r7, #20]
 8010df4:	781b      	ldrb	r3, [r3, #0]
 8010df6:	2b3a      	cmp	r3, #58	@ 0x3a
 8010df8:	d1f4      	bne.n	8010de4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010dfa:	697b      	ldr	r3, [r7, #20]
 8010dfc:	781b      	ldrb	r3, [r3, #0]
 8010dfe:	2b3a      	cmp	r3, #58	@ 0x3a
 8010e00:	d11c      	bne.n	8010e3c <get_ldnumber+0x76>
			tp = *path;
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	1c5a      	adds	r2, r3, #1
 8010e0c:	60fa      	str	r2, [r7, #12]
 8010e0e:	781b      	ldrb	r3, [r3, #0]
 8010e10:	3b30      	subs	r3, #48	@ 0x30
 8010e12:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	2b09      	cmp	r3, #9
 8010e18:	d80e      	bhi.n	8010e38 <get_ldnumber+0x72>
 8010e1a:	68fa      	ldr	r2, [r7, #12]
 8010e1c:	697b      	ldr	r3, [r7, #20]
 8010e1e:	429a      	cmp	r2, r3
 8010e20:	d10a      	bne.n	8010e38 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010e22:	68bb      	ldr	r3, [r7, #8]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d107      	bne.n	8010e38 <get_ldnumber+0x72>
					vol = (int)i;
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010e2c:	697b      	ldr	r3, [r7, #20]
 8010e2e:	3301      	adds	r3, #1
 8010e30:	617b      	str	r3, [r7, #20]
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	697a      	ldr	r2, [r7, #20]
 8010e36:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010e38:	693b      	ldr	r3, [r7, #16]
 8010e3a:	e002      	b.n	8010e42 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010e40:	693b      	ldr	r3, [r7, #16]
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	371c      	adds	r7, #28
 8010e46:	46bd      	mov	sp, r7
 8010e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4c:	4770      	bx	lr
	...

08010e50 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b082      	sub	sp, #8
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
 8010e58:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	70da      	strb	r2, [r3, #3]
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010e66:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010e68:	6839      	ldr	r1, [r7, #0]
 8010e6a:	6878      	ldr	r0, [r7, #4]
 8010e6c:	f7ff f8dc 	bl	8010028 <move_window>
 8010e70:	4603      	mov	r3, r0
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d001      	beq.n	8010e7a <check_fs+0x2a>
 8010e76:	2304      	movs	r3, #4
 8010e78:	e038      	b.n	8010eec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	3334      	adds	r3, #52	@ 0x34
 8010e7e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010e82:	4618      	mov	r0, r3
 8010e84:	f7fe fdee 	bl	800fa64 <ld_word>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	461a      	mov	r2, r3
 8010e8c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010e90:	429a      	cmp	r2, r3
 8010e92:	d001      	beq.n	8010e98 <check_fs+0x48>
 8010e94:	2303      	movs	r3, #3
 8010e96:	e029      	b.n	8010eec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010e9e:	2be9      	cmp	r3, #233	@ 0xe9
 8010ea0:	d009      	beq.n	8010eb6 <check_fs+0x66>
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010ea8:	2beb      	cmp	r3, #235	@ 0xeb
 8010eaa:	d11e      	bne.n	8010eea <check_fs+0x9a>
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8010eb2:	2b90      	cmp	r3, #144	@ 0x90
 8010eb4:	d119      	bne.n	8010eea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	3334      	adds	r3, #52	@ 0x34
 8010eba:	3336      	adds	r3, #54	@ 0x36
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f7fe fde9 	bl	800fa94 <ld_dword>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8010ef4 <check_fs+0xa4>)
 8010eca:	4293      	cmp	r3, r2
 8010ecc:	d101      	bne.n	8010ed2 <check_fs+0x82>
 8010ece:	2300      	movs	r3, #0
 8010ed0:	e00c      	b.n	8010eec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	3334      	adds	r3, #52	@ 0x34
 8010ed6:	3352      	adds	r3, #82	@ 0x52
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f7fe fddb 	bl	800fa94 <ld_dword>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	4a05      	ldr	r2, [pc, #20]	@ (8010ef8 <check_fs+0xa8>)
 8010ee2:	4293      	cmp	r3, r2
 8010ee4:	d101      	bne.n	8010eea <check_fs+0x9a>
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	e000      	b.n	8010eec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010eea:	2302      	movs	r3, #2
}
 8010eec:	4618      	mov	r0, r3
 8010eee:	3708      	adds	r7, #8
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	bd80      	pop	{r7, pc}
 8010ef4:	00544146 	.word	0x00544146
 8010ef8:	33544146 	.word	0x33544146

08010efc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b096      	sub	sp, #88	@ 0x58
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	60f8      	str	r0, [r7, #12]
 8010f04:	60b9      	str	r1, [r7, #8]
 8010f06:	4613      	mov	r3, r2
 8010f08:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010f0a:	68bb      	ldr	r3, [r7, #8]
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010f10:	68f8      	ldr	r0, [r7, #12]
 8010f12:	f7ff ff58 	bl	8010dc6 <get_ldnumber>
 8010f16:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	da01      	bge.n	8010f22 <find_volume+0x26>
 8010f1e:	230b      	movs	r3, #11
 8010f20:	e235      	b.n	801138e <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010f22:	4aa5      	ldr	r2, [pc, #660]	@ (80111b8 <find_volume+0x2bc>)
 8010f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d101      	bne.n	8010f36 <find_volume+0x3a>
 8010f32:	230c      	movs	r3, #12
 8010f34:	e22b      	b.n	801138e <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8010f36:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010f38:	f7fe fe94 	bl	800fc64 <lock_fs>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d101      	bne.n	8010f46 <find_volume+0x4a>
 8010f42:	230f      	movs	r3, #15
 8010f44:	e223      	b.n	801138e <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8010f46:	68bb      	ldr	r3, [r7, #8]
 8010f48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010f4a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010f4c:	79fb      	ldrb	r3, [r7, #7]
 8010f4e:	f023 0301 	bic.w	r3, r3, #1
 8010f52:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f56:	781b      	ldrb	r3, [r3, #0]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d01a      	beq.n	8010f92 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8010f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f5e:	785b      	ldrb	r3, [r3, #1]
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7fe fce1 	bl	800f928 <disk_status>
 8010f66:	4603      	mov	r3, r0
 8010f68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010f6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010f70:	f003 0301 	and.w	r3, r3, #1
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d10c      	bne.n	8010f92 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010f78:	79fb      	ldrb	r3, [r7, #7]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d007      	beq.n	8010f8e <find_volume+0x92>
 8010f7e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010f82:	f003 0304 	and.w	r3, r3, #4
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d001      	beq.n	8010f8e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8010f8a:	230a      	movs	r3, #10
 8010f8c:	e1ff      	b.n	801138e <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8010f8e:	2300      	movs	r3, #0
 8010f90:	e1fd      	b.n	801138e <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f94:	2200      	movs	r2, #0
 8010f96:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f9a:	b2da      	uxtb	r2, r3
 8010f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f9e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fa2:	785b      	ldrb	r3, [r3, #1]
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7fe fcd9 	bl	800f95c <disk_initialize>
 8010faa:	4603      	mov	r3, r0
 8010fac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010fb0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010fb4:	f003 0301 	and.w	r3, r3, #1
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d001      	beq.n	8010fc0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010fbc:	2303      	movs	r3, #3
 8010fbe:	e1e6      	b.n	801138e <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010fc0:	79fb      	ldrb	r3, [r7, #7]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d007      	beq.n	8010fd6 <find_volume+0xda>
 8010fc6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010fca:	f003 0304 	and.w	r3, r3, #4
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d001      	beq.n	8010fd6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8010fd2:	230a      	movs	r3, #10
 8010fd4:	e1db      	b.n	801138e <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010fda:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010fdc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010fde:	f7ff ff37 	bl	8010e50 <check_fs>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010fe8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010fec:	2b02      	cmp	r3, #2
 8010fee:	d149      	bne.n	8011084 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	643b      	str	r3, [r7, #64]	@ 0x40
 8010ff4:	e01e      	b.n	8011034 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ff8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010ffc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ffe:	011b      	lsls	r3, r3, #4
 8011000:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8011004:	4413      	add	r3, r2
 8011006:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801100a:	3304      	adds	r3, #4
 801100c:	781b      	ldrb	r3, [r3, #0]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d006      	beq.n	8011020 <find_volume+0x124>
 8011012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011014:	3308      	adds	r3, #8
 8011016:	4618      	mov	r0, r3
 8011018:	f7fe fd3c 	bl	800fa94 <ld_dword>
 801101c:	4602      	mov	r2, r0
 801101e:	e000      	b.n	8011022 <find_volume+0x126>
 8011020:	2200      	movs	r2, #0
 8011022:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011024:	009b      	lsls	r3, r3, #2
 8011026:	3358      	adds	r3, #88	@ 0x58
 8011028:	443b      	add	r3, r7
 801102a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801102e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011030:	3301      	adds	r3, #1
 8011032:	643b      	str	r3, [r7, #64]	@ 0x40
 8011034:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011036:	2b03      	cmp	r3, #3
 8011038:	d9dd      	bls.n	8010ff6 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801103a:	2300      	movs	r3, #0
 801103c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801103e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011040:	2b00      	cmp	r3, #0
 8011042:	d002      	beq.n	801104a <find_volume+0x14e>
 8011044:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011046:	3b01      	subs	r3, #1
 8011048:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801104a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801104c:	009b      	lsls	r3, r3, #2
 801104e:	3358      	adds	r3, #88	@ 0x58
 8011050:	443b      	add	r3, r7
 8011052:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011056:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011058:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801105a:	2b00      	cmp	r3, #0
 801105c:	d005      	beq.n	801106a <find_volume+0x16e>
 801105e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011060:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011062:	f7ff fef5 	bl	8010e50 <check_fs>
 8011066:	4603      	mov	r3, r0
 8011068:	e000      	b.n	801106c <find_volume+0x170>
 801106a:	2303      	movs	r3, #3
 801106c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011070:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011074:	2b01      	cmp	r3, #1
 8011076:	d905      	bls.n	8011084 <find_volume+0x188>
 8011078:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801107a:	3301      	adds	r3, #1
 801107c:	643b      	str	r3, [r7, #64]	@ 0x40
 801107e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011080:	2b03      	cmp	r3, #3
 8011082:	d9e2      	bls.n	801104a <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011084:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011088:	2b04      	cmp	r3, #4
 801108a:	d101      	bne.n	8011090 <find_volume+0x194>
 801108c:	2301      	movs	r3, #1
 801108e:	e17e      	b.n	801138e <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011090:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011094:	2b01      	cmp	r3, #1
 8011096:	d901      	bls.n	801109c <find_volume+0x1a0>
 8011098:	230d      	movs	r3, #13
 801109a:	e178      	b.n	801138e <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801109c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801109e:	3334      	adds	r3, #52	@ 0x34
 80110a0:	330b      	adds	r3, #11
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7fe fcde 	bl	800fa64 <ld_word>
 80110a8:	4603      	mov	r3, r0
 80110aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80110ae:	d001      	beq.n	80110b4 <find_volume+0x1b8>
 80110b0:	230d      	movs	r3, #13
 80110b2:	e16c      	b.n	801138e <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80110b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110b6:	3334      	adds	r3, #52	@ 0x34
 80110b8:	3316      	adds	r3, #22
 80110ba:	4618      	mov	r0, r3
 80110bc:	f7fe fcd2 	bl	800fa64 <ld_word>
 80110c0:	4603      	mov	r3, r0
 80110c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80110c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d106      	bne.n	80110d8 <find_volume+0x1dc>
 80110ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110cc:	3334      	adds	r3, #52	@ 0x34
 80110ce:	3324      	adds	r3, #36	@ 0x24
 80110d0:	4618      	mov	r0, r3
 80110d2:	f7fe fcdf 	bl	800fa94 <ld_dword>
 80110d6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80110d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80110dc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80110de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110e0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80110e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110e6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80110e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110ea:	789b      	ldrb	r3, [r3, #2]
 80110ec:	2b01      	cmp	r3, #1
 80110ee:	d005      	beq.n	80110fc <find_volume+0x200>
 80110f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110f2:	789b      	ldrb	r3, [r3, #2]
 80110f4:	2b02      	cmp	r3, #2
 80110f6:	d001      	beq.n	80110fc <find_volume+0x200>
 80110f8:	230d      	movs	r3, #13
 80110fa:	e148      	b.n	801138e <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80110fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110fe:	789b      	ldrb	r3, [r3, #2]
 8011100:	461a      	mov	r2, r3
 8011102:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011104:	fb02 f303 	mul.w	r3, r2, r3
 8011108:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801110a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801110c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011110:	461a      	mov	r2, r3
 8011112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011114:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011118:	895b      	ldrh	r3, [r3, #10]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d008      	beq.n	8011130 <find_volume+0x234>
 801111e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011120:	895b      	ldrh	r3, [r3, #10]
 8011122:	461a      	mov	r2, r3
 8011124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011126:	895b      	ldrh	r3, [r3, #10]
 8011128:	3b01      	subs	r3, #1
 801112a:	4013      	ands	r3, r2
 801112c:	2b00      	cmp	r3, #0
 801112e:	d001      	beq.n	8011134 <find_volume+0x238>
 8011130:	230d      	movs	r3, #13
 8011132:	e12c      	b.n	801138e <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011136:	3334      	adds	r3, #52	@ 0x34
 8011138:	3311      	adds	r3, #17
 801113a:	4618      	mov	r0, r3
 801113c:	f7fe fc92 	bl	800fa64 <ld_word>
 8011140:	4603      	mov	r3, r0
 8011142:	461a      	mov	r2, r3
 8011144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011146:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801114a:	891b      	ldrh	r3, [r3, #8]
 801114c:	f003 030f 	and.w	r3, r3, #15
 8011150:	b29b      	uxth	r3, r3
 8011152:	2b00      	cmp	r3, #0
 8011154:	d001      	beq.n	801115a <find_volume+0x25e>
 8011156:	230d      	movs	r3, #13
 8011158:	e119      	b.n	801138e <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801115a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801115c:	3334      	adds	r3, #52	@ 0x34
 801115e:	3313      	adds	r3, #19
 8011160:	4618      	mov	r0, r3
 8011162:	f7fe fc7f 	bl	800fa64 <ld_word>
 8011166:	4603      	mov	r3, r0
 8011168:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801116a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801116c:	2b00      	cmp	r3, #0
 801116e:	d106      	bne.n	801117e <find_volume+0x282>
 8011170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011172:	3334      	adds	r3, #52	@ 0x34
 8011174:	3320      	adds	r3, #32
 8011176:	4618      	mov	r0, r3
 8011178:	f7fe fc8c 	bl	800fa94 <ld_dword>
 801117c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801117e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011180:	3334      	adds	r3, #52	@ 0x34
 8011182:	330e      	adds	r3, #14
 8011184:	4618      	mov	r0, r3
 8011186:	f7fe fc6d 	bl	800fa64 <ld_word>
 801118a:	4603      	mov	r3, r0
 801118c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801118e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011190:	2b00      	cmp	r3, #0
 8011192:	d101      	bne.n	8011198 <find_volume+0x29c>
 8011194:	230d      	movs	r3, #13
 8011196:	e0fa      	b.n	801138e <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011198:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801119a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801119c:	4413      	add	r3, r2
 801119e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80111a0:	8912      	ldrh	r2, [r2, #8]
 80111a2:	0912      	lsrs	r2, r2, #4
 80111a4:	b292      	uxth	r2, r2
 80111a6:	4413      	add	r3, r2
 80111a8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80111aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80111ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111ae:	429a      	cmp	r2, r3
 80111b0:	d204      	bcs.n	80111bc <find_volume+0x2c0>
 80111b2:	230d      	movs	r3, #13
 80111b4:	e0eb      	b.n	801138e <find_volume+0x492>
 80111b6:	bf00      	nop
 80111b8:	20001470 	.word	0x20001470
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80111bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80111be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111c0:	1ad3      	subs	r3, r2, r3
 80111c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80111c4:	8952      	ldrh	r2, [r2, #10]
 80111c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80111ca:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80111cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d101      	bne.n	80111d6 <find_volume+0x2da>
 80111d2:	230d      	movs	r3, #13
 80111d4:	e0db      	b.n	801138e <find_volume+0x492>
		fmt = FS_FAT32;
 80111d6:	2303      	movs	r3, #3
 80111d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80111dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111de:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80111e2:	4293      	cmp	r3, r2
 80111e4:	d802      	bhi.n	80111ec <find_volume+0x2f0>
 80111e6:	2302      	movs	r3, #2
 80111e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80111ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111ee:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80111f2:	4293      	cmp	r3, r2
 80111f4:	d802      	bhi.n	80111fc <find_volume+0x300>
 80111f6:	2301      	movs	r3, #1
 80111f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80111fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111fe:	1c9a      	adds	r2, r3, #2
 8011200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011202:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8011204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011206:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011208:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801120a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801120c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801120e:	441a      	add	r2, r3
 8011210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011212:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8011214:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011218:	441a      	add	r2, r3
 801121a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801121c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 801121e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011222:	2b03      	cmp	r3, #3
 8011224:	d11e      	bne.n	8011264 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011228:	3334      	adds	r3, #52	@ 0x34
 801122a:	332a      	adds	r3, #42	@ 0x2a
 801122c:	4618      	mov	r0, r3
 801122e:	f7fe fc19 	bl	800fa64 <ld_word>
 8011232:	4603      	mov	r3, r0
 8011234:	2b00      	cmp	r3, #0
 8011236:	d001      	beq.n	801123c <find_volume+0x340>
 8011238:	230d      	movs	r3, #13
 801123a:	e0a8      	b.n	801138e <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801123c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801123e:	891b      	ldrh	r3, [r3, #8]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d001      	beq.n	8011248 <find_volume+0x34c>
 8011244:	230d      	movs	r3, #13
 8011246:	e0a2      	b.n	801138e <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801124a:	3334      	adds	r3, #52	@ 0x34
 801124c:	332c      	adds	r3, #44	@ 0x2c
 801124e:	4618      	mov	r0, r3
 8011250:	f7fe fc20 	bl	800fa94 <ld_dword>
 8011254:	4602      	mov	r2, r0
 8011256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011258:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801125a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801125c:	699b      	ldr	r3, [r3, #24]
 801125e:	009b      	lsls	r3, r3, #2
 8011260:	647b      	str	r3, [r7, #68]	@ 0x44
 8011262:	e01f      	b.n	80112a4 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011266:	891b      	ldrh	r3, [r3, #8]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d101      	bne.n	8011270 <find_volume+0x374>
 801126c:	230d      	movs	r3, #13
 801126e:	e08e      	b.n	801138e <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011272:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011276:	441a      	add	r2, r3
 8011278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801127a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801127c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011280:	2b02      	cmp	r3, #2
 8011282:	d103      	bne.n	801128c <find_volume+0x390>
 8011284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011286:	699b      	ldr	r3, [r3, #24]
 8011288:	005b      	lsls	r3, r3, #1
 801128a:	e00a      	b.n	80112a2 <find_volume+0x3a6>
 801128c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801128e:	699a      	ldr	r2, [r3, #24]
 8011290:	4613      	mov	r3, r2
 8011292:	005b      	lsls	r3, r3, #1
 8011294:	4413      	add	r3, r2
 8011296:	085a      	lsrs	r2, r3, #1
 8011298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801129a:	699b      	ldr	r3, [r3, #24]
 801129c:	f003 0301 	and.w	r3, r3, #1
 80112a0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80112a2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80112a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112a6:	69da      	ldr	r2, [r3, #28]
 80112a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80112aa:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80112ae:	0a5b      	lsrs	r3, r3, #9
 80112b0:	429a      	cmp	r2, r3
 80112b2:	d201      	bcs.n	80112b8 <find_volume+0x3bc>
 80112b4:	230d      	movs	r3, #13
 80112b6:	e06a      	b.n	801138e <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80112b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80112be:	615a      	str	r2, [r3, #20]
 80112c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112c2:	695a      	ldr	r2, [r3, #20]
 80112c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112c6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80112c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112ca:	2280      	movs	r2, #128	@ 0x80
 80112cc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80112ce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80112d2:	2b03      	cmp	r3, #3
 80112d4:	d149      	bne.n	801136a <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80112d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112d8:	3334      	adds	r3, #52	@ 0x34
 80112da:	3330      	adds	r3, #48	@ 0x30
 80112dc:	4618      	mov	r0, r3
 80112de:	f7fe fbc1 	bl	800fa64 <ld_word>
 80112e2:	4603      	mov	r3, r0
 80112e4:	2b01      	cmp	r3, #1
 80112e6:	d140      	bne.n	801136a <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80112e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112ea:	3301      	adds	r3, #1
 80112ec:	4619      	mov	r1, r3
 80112ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80112f0:	f7fe fe9a 	bl	8010028 <move_window>
 80112f4:	4603      	mov	r3, r0
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d137      	bne.n	801136a <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 80112fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112fc:	2200      	movs	r2, #0
 80112fe:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011302:	3334      	adds	r3, #52	@ 0x34
 8011304:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011308:	4618      	mov	r0, r3
 801130a:	f7fe fbab 	bl	800fa64 <ld_word>
 801130e:	4603      	mov	r3, r0
 8011310:	461a      	mov	r2, r3
 8011312:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011316:	429a      	cmp	r2, r3
 8011318:	d127      	bne.n	801136a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801131a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801131c:	3334      	adds	r3, #52	@ 0x34
 801131e:	4618      	mov	r0, r3
 8011320:	f7fe fbb8 	bl	800fa94 <ld_dword>
 8011324:	4603      	mov	r3, r0
 8011326:	4a1c      	ldr	r2, [pc, #112]	@ (8011398 <find_volume+0x49c>)
 8011328:	4293      	cmp	r3, r2
 801132a:	d11e      	bne.n	801136a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801132c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801132e:	3334      	adds	r3, #52	@ 0x34
 8011330:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011334:	4618      	mov	r0, r3
 8011336:	f7fe fbad 	bl	800fa94 <ld_dword>
 801133a:	4603      	mov	r3, r0
 801133c:	4a17      	ldr	r2, [pc, #92]	@ (801139c <find_volume+0x4a0>)
 801133e:	4293      	cmp	r3, r2
 8011340:	d113      	bne.n	801136a <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011344:	3334      	adds	r3, #52	@ 0x34
 8011346:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801134a:	4618      	mov	r0, r3
 801134c:	f7fe fba2 	bl	800fa94 <ld_dword>
 8011350:	4602      	mov	r2, r0
 8011352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011354:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011358:	3334      	adds	r3, #52	@ 0x34
 801135a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801135e:	4618      	mov	r0, r3
 8011360:	f7fe fb98 	bl	800fa94 <ld_dword>
 8011364:	4602      	mov	r2, r0
 8011366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011368:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801136a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801136c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8011370:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011372:	4b0b      	ldr	r3, [pc, #44]	@ (80113a0 <find_volume+0x4a4>)
 8011374:	881b      	ldrh	r3, [r3, #0]
 8011376:	3301      	adds	r3, #1
 8011378:	b29a      	uxth	r2, r3
 801137a:	4b09      	ldr	r3, [pc, #36]	@ (80113a0 <find_volume+0x4a4>)
 801137c:	801a      	strh	r2, [r3, #0]
 801137e:	4b08      	ldr	r3, [pc, #32]	@ (80113a0 <find_volume+0x4a4>)
 8011380:	881a      	ldrh	r2, [r3, #0]
 8011382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011384:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011386:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011388:	f7fe fde6 	bl	800ff58 <clear_lock>
#endif
	return FR_OK;
 801138c:	2300      	movs	r3, #0
}
 801138e:	4618      	mov	r0, r3
 8011390:	3758      	adds	r7, #88	@ 0x58
 8011392:	46bd      	mov	sp, r7
 8011394:	bd80      	pop	{r7, pc}
 8011396:	bf00      	nop
 8011398:	41615252 	.word	0x41615252
 801139c:	61417272 	.word	0x61417272
 80113a0:	20001474 	.word	0x20001474

080113a4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b084      	sub	sp, #16
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
 80113ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80113ae:	2309      	movs	r3, #9
 80113b0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d02e      	beq.n	8011416 <validate+0x72>
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d02a      	beq.n	8011416 <validate+0x72>
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	781b      	ldrb	r3, [r3, #0]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d025      	beq.n	8011416 <validate+0x72>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	889a      	ldrh	r2, [r3, #4]
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	88db      	ldrh	r3, [r3, #6]
 80113d4:	429a      	cmp	r2, r3
 80113d6:	d11e      	bne.n	8011416 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	4618      	mov	r0, r3
 80113de:	f7fe fc41 	bl	800fc64 <lock_fs>
 80113e2:	4603      	mov	r3, r0
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d014      	beq.n	8011412 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	785b      	ldrb	r3, [r3, #1]
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7fe fa9a 	bl	800f928 <disk_status>
 80113f4:	4603      	mov	r3, r0
 80113f6:	f003 0301 	and.w	r3, r3, #1
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d102      	bne.n	8011404 <validate+0x60>
				res = FR_OK;
 80113fe:	2300      	movs	r3, #0
 8011400:	73fb      	strb	r3, [r7, #15]
 8011402:	e008      	b.n	8011416 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	2100      	movs	r1, #0
 801140a:	4618      	mov	r0, r3
 801140c:	f7fe fc40 	bl	800fc90 <unlock_fs>
 8011410:	e001      	b.n	8011416 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8011412:	230f      	movs	r3, #15
 8011414:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011416:	7bfb      	ldrb	r3, [r7, #15]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d102      	bne.n	8011422 <validate+0x7e>
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	e000      	b.n	8011424 <validate+0x80>
 8011422:	2300      	movs	r3, #0
 8011424:	683a      	ldr	r2, [r7, #0]
 8011426:	6013      	str	r3, [r2, #0]
	return res;
 8011428:	7bfb      	ldrb	r3, [r7, #15]
}
 801142a:	4618      	mov	r0, r3
 801142c:	3710      	adds	r7, #16
 801142e:	46bd      	mov	sp, r7
 8011430:	bd80      	pop	{r7, pc}
	...

08011434 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b088      	sub	sp, #32
 8011438:	af00      	add	r7, sp, #0
 801143a:	60f8      	str	r0, [r7, #12]
 801143c:	60b9      	str	r1, [r7, #8]
 801143e:	4613      	mov	r3, r2
 8011440:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011442:	68bb      	ldr	r3, [r7, #8]
 8011444:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011446:	f107 0310 	add.w	r3, r7, #16
 801144a:	4618      	mov	r0, r3
 801144c:	f7ff fcbb 	bl	8010dc6 <get_ldnumber>
 8011450:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011452:	69fb      	ldr	r3, [r7, #28]
 8011454:	2b00      	cmp	r3, #0
 8011456:	da01      	bge.n	801145c <f_mount+0x28>
 8011458:	230b      	movs	r3, #11
 801145a:	e048      	b.n	80114ee <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801145c:	4a26      	ldr	r2, [pc, #152]	@ (80114f8 <f_mount+0xc4>)
 801145e:	69fb      	ldr	r3, [r7, #28]
 8011460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011464:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011466:	69bb      	ldr	r3, [r7, #24]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d00f      	beq.n	801148c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801146c:	69b8      	ldr	r0, [r7, #24]
 801146e:	f7fe fd73 	bl	800ff58 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8011472:	69bb      	ldr	r3, [r7, #24]
 8011474:	68db      	ldr	r3, [r3, #12]
 8011476:	4618      	mov	r0, r3
 8011478:	f000 fef5 	bl	8012266 <ff_del_syncobj>
 801147c:	4603      	mov	r3, r0
 801147e:	2b00      	cmp	r3, #0
 8011480:	d101      	bne.n	8011486 <f_mount+0x52>
 8011482:	2302      	movs	r3, #2
 8011484:	e033      	b.n	80114ee <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011486:	69bb      	ldr	r3, [r7, #24]
 8011488:	2200      	movs	r2, #0
 801148a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d00f      	beq.n	80114b2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	2200      	movs	r2, #0
 8011496:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8011498:	69fb      	ldr	r3, [r7, #28]
 801149a:	b2da      	uxtb	r2, r3
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	330c      	adds	r3, #12
 80114a0:	4619      	mov	r1, r3
 80114a2:	4610      	mov	r0, r2
 80114a4:	f000 febf 	bl	8012226 <ff_cre_syncobj>
 80114a8:	4603      	mov	r3, r0
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d101      	bne.n	80114b2 <f_mount+0x7e>
 80114ae:	2302      	movs	r3, #2
 80114b0:	e01d      	b.n	80114ee <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80114b2:	68fa      	ldr	r2, [r7, #12]
 80114b4:	4910      	ldr	r1, [pc, #64]	@ (80114f8 <f_mount+0xc4>)
 80114b6:	69fb      	ldr	r3, [r7, #28]
 80114b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d002      	beq.n	80114c8 <f_mount+0x94>
 80114c2:	79fb      	ldrb	r3, [r7, #7]
 80114c4:	2b01      	cmp	r3, #1
 80114c6:	d001      	beq.n	80114cc <f_mount+0x98>
 80114c8:	2300      	movs	r3, #0
 80114ca:	e010      	b.n	80114ee <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80114cc:	f107 010c 	add.w	r1, r7, #12
 80114d0:	f107 0308 	add.w	r3, r7, #8
 80114d4:	2200      	movs	r2, #0
 80114d6:	4618      	mov	r0, r3
 80114d8:	f7ff fd10 	bl	8010efc <find_volume>
 80114dc:	4603      	mov	r3, r0
 80114de:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	7dfa      	ldrb	r2, [r7, #23]
 80114e4:	4611      	mov	r1, r2
 80114e6:	4618      	mov	r0, r3
 80114e8:	f7fe fbd2 	bl	800fc90 <unlock_fs>
 80114ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80114ee:	4618      	mov	r0, r3
 80114f0:	3720      	adds	r7, #32
 80114f2:	46bd      	mov	sp, r7
 80114f4:	bd80      	pop	{r7, pc}
 80114f6:	bf00      	nop
 80114f8:	20001470 	.word	0x20001470

080114fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b098      	sub	sp, #96	@ 0x60
 8011500:	af00      	add	r7, sp, #0
 8011502:	60f8      	str	r0, [r7, #12]
 8011504:	60b9      	str	r1, [r7, #8]
 8011506:	4613      	mov	r3, r2
 8011508:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d101      	bne.n	8011514 <f_open+0x18>
 8011510:	2309      	movs	r3, #9
 8011512:	e1b0      	b.n	8011876 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011514:	79fb      	ldrb	r3, [r7, #7]
 8011516:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801151a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801151c:	79fa      	ldrb	r2, [r7, #7]
 801151e:	f107 0110 	add.w	r1, r7, #16
 8011522:	f107 0308 	add.w	r3, r7, #8
 8011526:	4618      	mov	r0, r3
 8011528:	f7ff fce8 	bl	8010efc <find_volume>
 801152c:	4603      	mov	r3, r0
 801152e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8011532:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011536:	2b00      	cmp	r3, #0
 8011538:	f040 818d 	bne.w	8011856 <f_open+0x35a>
		dj.obj.fs = fs;
 801153c:	693b      	ldr	r3, [r7, #16]
 801153e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011540:	68ba      	ldr	r2, [r7, #8]
 8011542:	f107 0314 	add.w	r3, r7, #20
 8011546:	4611      	mov	r1, r2
 8011548:	4618      	mov	r0, r3
 801154a:	f7ff fbcb 	bl	8010ce4 <follow_path>
 801154e:	4603      	mov	r3, r0
 8011550:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011554:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011558:	2b00      	cmp	r3, #0
 801155a:	d118      	bne.n	801158e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801155c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011560:	b25b      	sxtb	r3, r3
 8011562:	2b00      	cmp	r3, #0
 8011564:	da03      	bge.n	801156e <f_open+0x72>
				res = FR_INVALID_NAME;
 8011566:	2306      	movs	r3, #6
 8011568:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801156c:	e00f      	b.n	801158e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801156e:	79fb      	ldrb	r3, [r7, #7]
 8011570:	2b01      	cmp	r3, #1
 8011572:	bf8c      	ite	hi
 8011574:	2301      	movhi	r3, #1
 8011576:	2300      	movls	r3, #0
 8011578:	b2db      	uxtb	r3, r3
 801157a:	461a      	mov	r2, r3
 801157c:	f107 0314 	add.w	r3, r7, #20
 8011580:	4611      	mov	r1, r2
 8011582:	4618      	mov	r0, r3
 8011584:	f7fe fba0 	bl	800fcc8 <chk_lock>
 8011588:	4603      	mov	r3, r0
 801158a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801158e:	79fb      	ldrb	r3, [r7, #7]
 8011590:	f003 031c 	and.w	r3, r3, #28
 8011594:	2b00      	cmp	r3, #0
 8011596:	d07f      	beq.n	8011698 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8011598:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801159c:	2b00      	cmp	r3, #0
 801159e:	d017      	beq.n	80115d0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80115a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80115a4:	2b04      	cmp	r3, #4
 80115a6:	d10e      	bne.n	80115c6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80115a8:	f7fe fbea 	bl	800fd80 <enq_lock>
 80115ac:	4603      	mov	r3, r0
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d006      	beq.n	80115c0 <f_open+0xc4>
 80115b2:	f107 0314 	add.w	r3, r7, #20
 80115b6:	4618      	mov	r0, r3
 80115b8:	f7ff face 	bl	8010b58 <dir_register>
 80115bc:	4603      	mov	r3, r0
 80115be:	e000      	b.n	80115c2 <f_open+0xc6>
 80115c0:	2312      	movs	r3, #18
 80115c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80115c6:	79fb      	ldrb	r3, [r7, #7]
 80115c8:	f043 0308 	orr.w	r3, r3, #8
 80115cc:	71fb      	strb	r3, [r7, #7]
 80115ce:	e010      	b.n	80115f2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80115d0:	7ebb      	ldrb	r3, [r7, #26]
 80115d2:	f003 0311 	and.w	r3, r3, #17
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d003      	beq.n	80115e2 <f_open+0xe6>
					res = FR_DENIED;
 80115da:	2307      	movs	r3, #7
 80115dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80115e0:	e007      	b.n	80115f2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80115e2:	79fb      	ldrb	r3, [r7, #7]
 80115e4:	f003 0304 	and.w	r3, r3, #4
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d002      	beq.n	80115f2 <f_open+0xf6>
 80115ec:	2308      	movs	r3, #8
 80115ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80115f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d168      	bne.n	80116cc <f_open+0x1d0>
 80115fa:	79fb      	ldrb	r3, [r7, #7]
 80115fc:	f003 0308 	and.w	r3, r3, #8
 8011600:	2b00      	cmp	r3, #0
 8011602:	d063      	beq.n	80116cc <f_open+0x1d0>
				dw = GET_FATTIME();
 8011604:	f7fd ff58 	bl	800f4b8 <get_fattime>
 8011608:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801160a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801160c:	330e      	adds	r3, #14
 801160e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011610:	4618      	mov	r0, r3
 8011612:	f7fe fa7d 	bl	800fb10 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011618:	3316      	adds	r3, #22
 801161a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801161c:	4618      	mov	r0, r3
 801161e:	f7fe fa77 	bl	800fb10 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011624:	330b      	adds	r3, #11
 8011626:	2220      	movs	r2, #32
 8011628:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801162a:	693b      	ldr	r3, [r7, #16]
 801162c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801162e:	4611      	mov	r1, r2
 8011630:	4618      	mov	r0, r3
 8011632:	f7ff f9fd 	bl	8010a30 <ld_clust>
 8011636:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011638:	693b      	ldr	r3, [r7, #16]
 801163a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801163c:	2200      	movs	r2, #0
 801163e:	4618      	mov	r0, r3
 8011640:	f7ff fa15 	bl	8010a6e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011646:	331c      	adds	r3, #28
 8011648:	2100      	movs	r1, #0
 801164a:	4618      	mov	r0, r3
 801164c:	f7fe fa60 	bl	800fb10 <st_dword>
					fs->wflag = 1;
 8011650:	693b      	ldr	r3, [r7, #16]
 8011652:	2201      	movs	r2, #1
 8011654:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011656:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011658:	2b00      	cmp	r3, #0
 801165a:	d037      	beq.n	80116cc <f_open+0x1d0>
						dw = fs->winsect;
 801165c:	693b      	ldr	r3, [r7, #16]
 801165e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011660:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8011662:	f107 0314 	add.w	r3, r7, #20
 8011666:	2200      	movs	r2, #0
 8011668:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801166a:	4618      	mov	r0, r3
 801166c:	f7fe ff28 	bl	80104c0 <remove_chain>
 8011670:	4603      	mov	r3, r0
 8011672:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8011676:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801167a:	2b00      	cmp	r3, #0
 801167c:	d126      	bne.n	80116cc <f_open+0x1d0>
							res = move_window(fs, dw);
 801167e:	693b      	ldr	r3, [r7, #16]
 8011680:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011682:	4618      	mov	r0, r3
 8011684:	f7fe fcd0 	bl	8010028 <move_window>
 8011688:	4603      	mov	r3, r0
 801168a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801168e:	693b      	ldr	r3, [r7, #16]
 8011690:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011692:	3a01      	subs	r2, #1
 8011694:	611a      	str	r2, [r3, #16]
 8011696:	e019      	b.n	80116cc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011698:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801169c:	2b00      	cmp	r3, #0
 801169e:	d115      	bne.n	80116cc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80116a0:	7ebb      	ldrb	r3, [r7, #26]
 80116a2:	f003 0310 	and.w	r3, r3, #16
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d003      	beq.n	80116b2 <f_open+0x1b6>
					res = FR_NO_FILE;
 80116aa:	2304      	movs	r3, #4
 80116ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80116b0:	e00c      	b.n	80116cc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80116b2:	79fb      	ldrb	r3, [r7, #7]
 80116b4:	f003 0302 	and.w	r3, r3, #2
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d007      	beq.n	80116cc <f_open+0x1d0>
 80116bc:	7ebb      	ldrb	r3, [r7, #26]
 80116be:	f003 0301 	and.w	r3, r3, #1
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d002      	beq.n	80116cc <f_open+0x1d0>
						res = FR_DENIED;
 80116c6:	2307      	movs	r3, #7
 80116c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80116cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d126      	bne.n	8011722 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80116d4:	79fb      	ldrb	r3, [r7, #7]
 80116d6:	f003 0308 	and.w	r3, r3, #8
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d003      	beq.n	80116e6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80116de:	79fb      	ldrb	r3, [r7, #7]
 80116e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80116e4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80116e6:	693b      	ldr	r3, [r7, #16]
 80116e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80116ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80116f4:	79fb      	ldrb	r3, [r7, #7]
 80116f6:	2b01      	cmp	r3, #1
 80116f8:	bf8c      	ite	hi
 80116fa:	2301      	movhi	r3, #1
 80116fc:	2300      	movls	r3, #0
 80116fe:	b2db      	uxtb	r3, r3
 8011700:	461a      	mov	r2, r3
 8011702:	f107 0314 	add.w	r3, r7, #20
 8011706:	4611      	mov	r1, r2
 8011708:	4618      	mov	r0, r3
 801170a:	f7fe fb5b 	bl	800fdc4 <inc_lock>
 801170e:	4602      	mov	r2, r0
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	691b      	ldr	r3, [r3, #16]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d102      	bne.n	8011722 <f_open+0x226>
 801171c:	2302      	movs	r3, #2
 801171e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011722:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011726:	2b00      	cmp	r3, #0
 8011728:	f040 8095 	bne.w	8011856 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801172c:	693b      	ldr	r3, [r7, #16]
 801172e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011730:	4611      	mov	r1, r2
 8011732:	4618      	mov	r0, r3
 8011734:	f7ff f97c 	bl	8010a30 <ld_clust>
 8011738:	4602      	mov	r2, r0
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801173e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011740:	331c      	adds	r3, #28
 8011742:	4618      	mov	r0, r3
 8011744:	f7fe f9a6 	bl	800fa94 <ld_dword>
 8011748:	4602      	mov	r2, r0
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	2200      	movs	r2, #0
 8011752:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011754:	693a      	ldr	r2, [r7, #16]
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801175a:	693b      	ldr	r3, [r7, #16]
 801175c:	88da      	ldrh	r2, [r3, #6]
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	79fa      	ldrb	r2, [r7, #7]
 8011766:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	2200      	movs	r2, #0
 801176c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	2200      	movs	r2, #0
 8011772:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	2200      	movs	r2, #0
 8011778:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	3330      	adds	r3, #48	@ 0x30
 801177e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011782:	2100      	movs	r1, #0
 8011784:	4618      	mov	r0, r3
 8011786:	f7fe fa10 	bl	800fbaa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801178a:	79fb      	ldrb	r3, [r7, #7]
 801178c:	f003 0320 	and.w	r3, r3, #32
 8011790:	2b00      	cmp	r3, #0
 8011792:	d060      	beq.n	8011856 <f_open+0x35a>
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	68db      	ldr	r3, [r3, #12]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d05c      	beq.n	8011856 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	68da      	ldr	r2, [r3, #12]
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80117a4:	693b      	ldr	r3, [r7, #16]
 80117a6:	895b      	ldrh	r3, [r3, #10]
 80117a8:	025b      	lsls	r3, r3, #9
 80117aa:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	689b      	ldr	r3, [r3, #8]
 80117b0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	68db      	ldr	r3, [r3, #12]
 80117b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80117b8:	e016      	b.n	80117e8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80117be:	4618      	mov	r0, r3
 80117c0:	f7fe fced 	bl	801019e <get_fat>
 80117c4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80117c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80117c8:	2b01      	cmp	r3, #1
 80117ca:	d802      	bhi.n	80117d2 <f_open+0x2d6>
 80117cc:	2302      	movs	r3, #2
 80117ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80117d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80117d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80117d8:	d102      	bne.n	80117e0 <f_open+0x2e4>
 80117da:	2301      	movs	r3, #1
 80117dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80117e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80117e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80117e4:	1ad3      	subs	r3, r2, r3
 80117e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80117e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d103      	bne.n	80117f8 <f_open+0x2fc>
 80117f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80117f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80117f4:	429a      	cmp	r2, r3
 80117f6:	d8e0      	bhi.n	80117ba <f_open+0x2be>
				}
				fp->clust = clst;
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80117fc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80117fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011802:	2b00      	cmp	r3, #0
 8011804:	d127      	bne.n	8011856 <f_open+0x35a>
 8011806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801180c:	2b00      	cmp	r3, #0
 801180e:	d022      	beq.n	8011856 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011810:	693b      	ldr	r3, [r7, #16]
 8011812:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011814:	4618      	mov	r0, r3
 8011816:	f7fe fca3 	bl	8010160 <clust2sect>
 801181a:	6478      	str	r0, [r7, #68]	@ 0x44
 801181c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801181e:	2b00      	cmp	r3, #0
 8011820:	d103      	bne.n	801182a <f_open+0x32e>
						res = FR_INT_ERR;
 8011822:	2302      	movs	r3, #2
 8011824:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011828:	e015      	b.n	8011856 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801182a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801182c:	0a5a      	lsrs	r2, r3, #9
 801182e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011830:	441a      	add	r2, r3
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011836:	693b      	ldr	r3, [r7, #16]
 8011838:	7858      	ldrb	r0, [r3, #1]
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	6a1a      	ldr	r2, [r3, #32]
 8011844:	2301      	movs	r3, #1
 8011846:	f7fe f8af 	bl	800f9a8 <disk_read>
 801184a:	4603      	mov	r3, r0
 801184c:	2b00      	cmp	r3, #0
 801184e:	d002      	beq.n	8011856 <f_open+0x35a>
 8011850:	2301      	movs	r3, #1
 8011852:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011856:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801185a:	2b00      	cmp	r3, #0
 801185c:	d002      	beq.n	8011864 <f_open+0x368>
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	2200      	movs	r2, #0
 8011862:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011864:	693b      	ldr	r3, [r7, #16]
 8011866:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801186a:	4611      	mov	r1, r2
 801186c:	4618      	mov	r0, r3
 801186e:	f7fe fa0f 	bl	800fc90 <unlock_fs>
 8011872:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8011876:	4618      	mov	r0, r3
 8011878:	3760      	adds	r7, #96	@ 0x60
 801187a:	46bd      	mov	sp, r7
 801187c:	bd80      	pop	{r7, pc}

0801187e <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801187e:	b580      	push	{r7, lr}
 8011880:	b08e      	sub	sp, #56	@ 0x38
 8011882:	af00      	add	r7, sp, #0
 8011884:	60f8      	str	r0, [r7, #12]
 8011886:	60b9      	str	r1, [r7, #8]
 8011888:	607a      	str	r2, [r7, #4]
 801188a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8011890:	683b      	ldr	r3, [r7, #0]
 8011892:	2200      	movs	r2, #0
 8011894:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	f107 0214 	add.w	r2, r7, #20
 801189c:	4611      	mov	r1, r2
 801189e:	4618      	mov	r0, r3
 80118a0:	f7ff fd80 	bl	80113a4 <validate>
 80118a4:	4603      	mov	r3, r0
 80118a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80118aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d107      	bne.n	80118c2 <f_read+0x44>
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	7d5b      	ldrb	r3, [r3, #21]
 80118b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80118ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d009      	beq.n	80118d6 <f_read+0x58>
 80118c2:	697b      	ldr	r3, [r7, #20]
 80118c4:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80118c8:	4611      	mov	r1, r2
 80118ca:	4618      	mov	r0, r3
 80118cc:	f7fe f9e0 	bl	800fc90 <unlock_fs>
 80118d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80118d4:	e13d      	b.n	8011b52 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	7d1b      	ldrb	r3, [r3, #20]
 80118da:	f003 0301 	and.w	r3, r3, #1
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d106      	bne.n	80118f0 <f_read+0x72>
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	2107      	movs	r1, #7
 80118e6:	4618      	mov	r0, r3
 80118e8:	f7fe f9d2 	bl	800fc90 <unlock_fs>
 80118ec:	2307      	movs	r3, #7
 80118ee:	e130      	b.n	8011b52 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	68da      	ldr	r2, [r3, #12]
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	699b      	ldr	r3, [r3, #24]
 80118f8:	1ad3      	subs	r3, r2, r3
 80118fa:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80118fc:	687a      	ldr	r2, [r7, #4]
 80118fe:	6a3b      	ldr	r3, [r7, #32]
 8011900:	429a      	cmp	r2, r3
 8011902:	f240 811c 	bls.w	8011b3e <f_read+0x2c0>
 8011906:	6a3b      	ldr	r3, [r7, #32]
 8011908:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801190a:	e118      	b.n	8011b3e <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	699b      	ldr	r3, [r3, #24]
 8011910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011914:	2b00      	cmp	r3, #0
 8011916:	f040 80e4 	bne.w	8011ae2 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	699b      	ldr	r3, [r3, #24]
 801191e:	0a5b      	lsrs	r3, r3, #9
 8011920:	697a      	ldr	r2, [r7, #20]
 8011922:	8952      	ldrh	r2, [r2, #10]
 8011924:	3a01      	subs	r2, #1
 8011926:	4013      	ands	r3, r2
 8011928:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801192a:	69fb      	ldr	r3, [r7, #28]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d139      	bne.n	80119a4 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	699b      	ldr	r3, [r3, #24]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d103      	bne.n	8011940 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	689b      	ldr	r3, [r3, #8]
 801193c:	633b      	str	r3, [r7, #48]	@ 0x30
 801193e:	e013      	b.n	8011968 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011944:	2b00      	cmp	r3, #0
 8011946:	d007      	beq.n	8011958 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	699b      	ldr	r3, [r3, #24]
 801194c:	4619      	mov	r1, r3
 801194e:	68f8      	ldr	r0, [r7, #12]
 8011950:	f7fe feb3 	bl	80106ba <clmt_clust>
 8011954:	6338      	str	r0, [r7, #48]	@ 0x30
 8011956:	e007      	b.n	8011968 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8011958:	68fa      	ldr	r2, [r7, #12]
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	69db      	ldr	r3, [r3, #28]
 801195e:	4619      	mov	r1, r3
 8011960:	4610      	mov	r0, r2
 8011962:	f7fe fc1c 	bl	801019e <get_fat>
 8011966:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801196a:	2b01      	cmp	r3, #1
 801196c:	d809      	bhi.n	8011982 <f_read+0x104>
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	2202      	movs	r2, #2
 8011972:	755a      	strb	r2, [r3, #21]
 8011974:	697b      	ldr	r3, [r7, #20]
 8011976:	2102      	movs	r1, #2
 8011978:	4618      	mov	r0, r3
 801197a:	f7fe f989 	bl	800fc90 <unlock_fs>
 801197e:	2302      	movs	r3, #2
 8011980:	e0e7      	b.n	8011b52 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011984:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011988:	d109      	bne.n	801199e <f_read+0x120>
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	2201      	movs	r2, #1
 801198e:	755a      	strb	r2, [r3, #21]
 8011990:	697b      	ldr	r3, [r7, #20]
 8011992:	2101      	movs	r1, #1
 8011994:	4618      	mov	r0, r3
 8011996:	f7fe f97b 	bl	800fc90 <unlock_fs>
 801199a:	2301      	movs	r3, #1
 801199c:	e0d9      	b.n	8011b52 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80119a2:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80119a4:	697a      	ldr	r2, [r7, #20]
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	69db      	ldr	r3, [r3, #28]
 80119aa:	4619      	mov	r1, r3
 80119ac:	4610      	mov	r0, r2
 80119ae:	f7fe fbd7 	bl	8010160 <clust2sect>
 80119b2:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80119b4:	69bb      	ldr	r3, [r7, #24]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d109      	bne.n	80119ce <f_read+0x150>
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	2202      	movs	r2, #2
 80119be:	755a      	strb	r2, [r3, #21]
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	2102      	movs	r1, #2
 80119c4:	4618      	mov	r0, r3
 80119c6:	f7fe f963 	bl	800fc90 <unlock_fs>
 80119ca:	2302      	movs	r3, #2
 80119cc:	e0c1      	b.n	8011b52 <f_read+0x2d4>
			sect += csect;
 80119ce:	69ba      	ldr	r2, [r7, #24]
 80119d0:	69fb      	ldr	r3, [r7, #28]
 80119d2:	4413      	add	r3, r2
 80119d4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	0a5b      	lsrs	r3, r3, #9
 80119da:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80119dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d03e      	beq.n	8011a60 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80119e2:	69fa      	ldr	r2, [r7, #28]
 80119e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119e6:	4413      	add	r3, r2
 80119e8:	697a      	ldr	r2, [r7, #20]
 80119ea:	8952      	ldrh	r2, [r2, #10]
 80119ec:	4293      	cmp	r3, r2
 80119ee:	d905      	bls.n	80119fc <f_read+0x17e>
					cc = fs->csize - csect;
 80119f0:	697b      	ldr	r3, [r7, #20]
 80119f2:	895b      	ldrh	r3, [r3, #10]
 80119f4:	461a      	mov	r2, r3
 80119f6:	69fb      	ldr	r3, [r7, #28]
 80119f8:	1ad3      	subs	r3, r2, r3
 80119fa:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80119fc:	697b      	ldr	r3, [r7, #20]
 80119fe:	7858      	ldrb	r0, [r3, #1]
 8011a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a02:	69ba      	ldr	r2, [r7, #24]
 8011a04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011a06:	f7fd ffcf 	bl	800f9a8 <disk_read>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d009      	beq.n	8011a24 <f_read+0x1a6>
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	2201      	movs	r2, #1
 8011a14:	755a      	strb	r2, [r3, #21]
 8011a16:	697b      	ldr	r3, [r7, #20]
 8011a18:	2101      	movs	r1, #1
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	f7fe f938 	bl	800fc90 <unlock_fs>
 8011a20:	2301      	movs	r3, #1
 8011a22:	e096      	b.n	8011b52 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	7d1b      	ldrb	r3, [r3, #20]
 8011a28:	b25b      	sxtb	r3, r3
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	da14      	bge.n	8011a58 <f_read+0x1da>
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	6a1a      	ldr	r2, [r3, #32]
 8011a32:	69bb      	ldr	r3, [r7, #24]
 8011a34:	1ad3      	subs	r3, r2, r3
 8011a36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	d90d      	bls.n	8011a58 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	6a1a      	ldr	r2, [r3, #32]
 8011a40:	69bb      	ldr	r3, [r7, #24]
 8011a42:	1ad3      	subs	r3, r2, r3
 8011a44:	025b      	lsls	r3, r3, #9
 8011a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a48:	18d0      	adds	r0, r2, r3
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	3330      	adds	r3, #48	@ 0x30
 8011a4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011a52:	4619      	mov	r1, r3
 8011a54:	f7fe f888 	bl	800fb68 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8011a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a5a:	025b      	lsls	r3, r3, #9
 8011a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8011a5e:	e05a      	b.n	8011b16 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	6a1b      	ldr	r3, [r3, #32]
 8011a64:	69ba      	ldr	r2, [r7, #24]
 8011a66:	429a      	cmp	r2, r3
 8011a68:	d038      	beq.n	8011adc <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	7d1b      	ldrb	r3, [r3, #20]
 8011a6e:	b25b      	sxtb	r3, r3
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	da1d      	bge.n	8011ab0 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011a74:	697b      	ldr	r3, [r7, #20]
 8011a76:	7858      	ldrb	r0, [r3, #1]
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	6a1a      	ldr	r2, [r3, #32]
 8011a82:	2301      	movs	r3, #1
 8011a84:	f7fd ffb0 	bl	800f9e8 <disk_write>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d009      	beq.n	8011aa2 <f_read+0x224>
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	2201      	movs	r2, #1
 8011a92:	755a      	strb	r2, [r3, #21]
 8011a94:	697b      	ldr	r3, [r7, #20]
 8011a96:	2101      	movs	r1, #1
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f7fe f8f9 	bl	800fc90 <unlock_fs>
 8011a9e:	2301      	movs	r3, #1
 8011aa0:	e057      	b.n	8011b52 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	7d1b      	ldrb	r3, [r3, #20]
 8011aa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011aaa:	b2da      	uxtb	r2, r3
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011ab0:	697b      	ldr	r3, [r7, #20]
 8011ab2:	7858      	ldrb	r0, [r3, #1]
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011aba:	2301      	movs	r3, #1
 8011abc:	69ba      	ldr	r2, [r7, #24]
 8011abe:	f7fd ff73 	bl	800f9a8 <disk_read>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d009      	beq.n	8011adc <f_read+0x25e>
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	2201      	movs	r2, #1
 8011acc:	755a      	strb	r2, [r3, #21]
 8011ace:	697b      	ldr	r3, [r7, #20]
 8011ad0:	2101      	movs	r1, #1
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f7fe f8dc 	bl	800fc90 <unlock_fs>
 8011ad8:	2301      	movs	r3, #1
 8011ada:	e03a      	b.n	8011b52 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	69ba      	ldr	r2, [r7, #24]
 8011ae0:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	699b      	ldr	r3, [r3, #24]
 8011ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011aea:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8011aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8011af0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	429a      	cmp	r2, r3
 8011af6:	d901      	bls.n	8011afc <f_read+0x27e>
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	699b      	ldr	r3, [r3, #24]
 8011b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b0a:	4413      	add	r3, r2
 8011b0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b0e:	4619      	mov	r1, r3
 8011b10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011b12:	f7fe f829 	bl	800fb68 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8011b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b1a:	4413      	add	r3, r2
 8011b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	699a      	ldr	r2, [r3, #24]
 8011b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b24:	441a      	add	r2, r3
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	619a      	str	r2, [r3, #24]
 8011b2a:	683b      	ldr	r3, [r7, #0]
 8011b2c:	681a      	ldr	r2, [r3, #0]
 8011b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b30:	441a      	add	r2, r3
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	601a      	str	r2, [r3, #0]
 8011b36:	687a      	ldr	r2, [r7, #4]
 8011b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b3a:	1ad3      	subs	r3, r2, r3
 8011b3c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	f47f aee3 	bne.w	801190c <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8011b46:	697b      	ldr	r3, [r7, #20]
 8011b48:	2100      	movs	r1, #0
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f7fe f8a0 	bl	800fc90 <unlock_fs>
 8011b50:	2300      	movs	r3, #0
}
 8011b52:	4618      	mov	r0, r3
 8011b54:	3738      	adds	r7, #56	@ 0x38
 8011b56:	46bd      	mov	sp, r7
 8011b58:	bd80      	pop	{r7, pc}

08011b5a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011b5a:	b580      	push	{r7, lr}
 8011b5c:	b086      	sub	sp, #24
 8011b5e:	af00      	add	r7, sp, #0
 8011b60:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	f107 0208 	add.w	r2, r7, #8
 8011b68:	4611      	mov	r1, r2
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f7ff fc1a 	bl	80113a4 <validate>
 8011b70:	4603      	mov	r3, r0
 8011b72:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011b74:	7dfb      	ldrb	r3, [r7, #23]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d16d      	bne.n	8011c56 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	7d1b      	ldrb	r3, [r3, #20]
 8011b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d067      	beq.n	8011c56 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	7d1b      	ldrb	r3, [r3, #20]
 8011b8a:	b25b      	sxtb	r3, r3
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	da1a      	bge.n	8011bc6 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011b90:	68bb      	ldr	r3, [r7, #8]
 8011b92:	7858      	ldrb	r0, [r3, #1]
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	6a1a      	ldr	r2, [r3, #32]
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	f7fd ff22 	bl	800f9e8 <disk_write>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d006      	beq.n	8011bb8 <f_sync+0x5e>
 8011baa:	68bb      	ldr	r3, [r7, #8]
 8011bac:	2101      	movs	r1, #1
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f7fe f86e 	bl	800fc90 <unlock_fs>
 8011bb4:	2301      	movs	r3, #1
 8011bb6:	e055      	b.n	8011c64 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	7d1b      	ldrb	r3, [r3, #20]
 8011bbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011bc0:	b2da      	uxtb	r2, r3
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011bc6:	f7fd fc77 	bl	800f4b8 <get_fattime>
 8011bca:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011bcc:	68ba      	ldr	r2, [r7, #8]
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bd2:	4619      	mov	r1, r3
 8011bd4:	4610      	mov	r0, r2
 8011bd6:	f7fe fa27 	bl	8010028 <move_window>
 8011bda:	4603      	mov	r3, r0
 8011bdc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011bde:	7dfb      	ldrb	r3, [r7, #23]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d138      	bne.n	8011c56 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011be8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	330b      	adds	r3, #11
 8011bee:	781a      	ldrb	r2, [r3, #0]
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	330b      	adds	r3, #11
 8011bf4:	f042 0220 	orr.w	r2, r2, #32
 8011bf8:	b2d2      	uxtb	r2, r2
 8011bfa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	6818      	ldr	r0, [r3, #0]
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	689b      	ldr	r3, [r3, #8]
 8011c04:	461a      	mov	r2, r3
 8011c06:	68f9      	ldr	r1, [r7, #12]
 8011c08:	f7fe ff31 	bl	8010a6e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	f103 021c 	add.w	r2, r3, #28
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	68db      	ldr	r3, [r3, #12]
 8011c16:	4619      	mov	r1, r3
 8011c18:	4610      	mov	r0, r2
 8011c1a:	f7fd ff79 	bl	800fb10 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	3316      	adds	r3, #22
 8011c22:	6939      	ldr	r1, [r7, #16]
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7fd ff73 	bl	800fb10 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	3312      	adds	r3, #18
 8011c2e:	2100      	movs	r1, #0
 8011c30:	4618      	mov	r0, r3
 8011c32:	f7fd ff52 	bl	800fada <st_word>
					fs->wflag = 1;
 8011c36:	68bb      	ldr	r3, [r7, #8]
 8011c38:	2201      	movs	r2, #1
 8011c3a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f7fe fa20 	bl	8010084 <sync_fs>
 8011c44:	4603      	mov	r3, r0
 8011c46:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	7d1b      	ldrb	r3, [r3, #20]
 8011c4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011c50:	b2da      	uxtb	r2, r3
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011c56:	68bb      	ldr	r3, [r7, #8]
 8011c58:	7dfa      	ldrb	r2, [r7, #23]
 8011c5a:	4611      	mov	r1, r2
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	f7fe f817 	bl	800fc90 <unlock_fs>
 8011c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c64:	4618      	mov	r0, r3
 8011c66:	3718      	adds	r7, #24
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}

08011c6c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b084      	sub	sp, #16
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011c74:	6878      	ldr	r0, [r7, #4]
 8011c76:	f7ff ff70 	bl	8011b5a <f_sync>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011c7e:	7bfb      	ldrb	r3, [r7, #15]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d11d      	bne.n	8011cc0 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	f107 0208 	add.w	r2, r7, #8
 8011c8a:	4611      	mov	r1, r2
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	f7ff fb89 	bl	80113a4 <validate>
 8011c92:	4603      	mov	r3, r0
 8011c94:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011c96:	7bfb      	ldrb	r3, [r7, #15]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d111      	bne.n	8011cc0 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	691b      	ldr	r3, [r3, #16]
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f7fe f91d 	bl	800fee0 <dec_lock>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011caa:	7bfb      	ldrb	r3, [r7, #15]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d102      	bne.n	8011cb6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	2100      	movs	r1, #0
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f7fd ffe8 	bl	800fc90 <unlock_fs>
#endif
		}
	}
	return res;
 8011cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	3710      	adds	r7, #16
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd80      	pop	{r7, pc}

08011cca <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011cca:	b580      	push	{r7, lr}
 8011ccc:	b090      	sub	sp, #64	@ 0x40
 8011cce:	af00      	add	r7, sp, #0
 8011cd0:	6078      	str	r0, [r7, #4]
 8011cd2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	f107 0208 	add.w	r2, r7, #8
 8011cda:	4611      	mov	r1, r2
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f7ff fb61 	bl	80113a4 <validate>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011ce8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d103      	bne.n	8011cf8 <f_lseek+0x2e>
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	7d5b      	ldrb	r3, [r3, #21]
 8011cf4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011cf8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d009      	beq.n	8011d14 <f_lseek+0x4a>
 8011d00:	68bb      	ldr	r3, [r7, #8]
 8011d02:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8011d06:	4611      	mov	r1, r2
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f7fd ffc1 	bl	800fc90 <unlock_fs>
 8011d0e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011d12:	e229      	b.n	8012168 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	f000 80ea 	beq.w	8011ef2 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011d1e:	683b      	ldr	r3, [r7, #0]
 8011d20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011d24:	d164      	bne.n	8011df0 <f_lseek+0x126>
			tbl = fp->cltbl;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d2a:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d2e:	1d1a      	adds	r2, r3, #4
 8011d30:	627a      	str	r2, [r7, #36]	@ 0x24
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	617b      	str	r3, [r7, #20]
 8011d36:	2302      	movs	r3, #2
 8011d38:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	689b      	ldr	r3, [r3, #8]
 8011d3e:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8011d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d044      	beq.n	8011dd0 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d48:	613b      	str	r3, [r7, #16]
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d50:	3302      	adds	r3, #2
 8011d52:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8011d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d56:	60fb      	str	r3, [r7, #12]
 8011d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d5a:	3301      	adds	r3, #1
 8011d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011d62:	4618      	mov	r0, r3
 8011d64:	f7fe fa1b 	bl	801019e <get_fat>
 8011d68:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8011d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d6c:	2b01      	cmp	r3, #1
 8011d6e:	d809      	bhi.n	8011d84 <f_lseek+0xba>
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2202      	movs	r2, #2
 8011d74:	755a      	strb	r2, [r3, #21]
 8011d76:	68bb      	ldr	r3, [r7, #8]
 8011d78:	2102      	movs	r1, #2
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f7fd ff88 	bl	800fc90 <unlock_fs>
 8011d80:	2302      	movs	r3, #2
 8011d82:	e1f1      	b.n	8012168 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011d8a:	d109      	bne.n	8011da0 <f_lseek+0xd6>
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	2201      	movs	r2, #1
 8011d90:	755a      	strb	r2, [r3, #21]
 8011d92:	68bb      	ldr	r3, [r7, #8]
 8011d94:	2101      	movs	r1, #1
 8011d96:	4618      	mov	r0, r3
 8011d98:	f7fd ff7a 	bl	800fc90 <unlock_fs>
 8011d9c:	2301      	movs	r3, #1
 8011d9e:	e1e3      	b.n	8012168 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	3301      	adds	r3, #1
 8011da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011da6:	429a      	cmp	r2, r3
 8011da8:	d0d4      	beq.n	8011d54 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011daa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011dac:	697b      	ldr	r3, [r7, #20]
 8011dae:	429a      	cmp	r2, r3
 8011db0:	d809      	bhi.n	8011dc6 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8011db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011db4:	1d1a      	adds	r2, r3, #4
 8011db6:	627a      	str	r2, [r7, #36]	@ 0x24
 8011db8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011dba:	601a      	str	r2, [r3, #0]
 8011dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dbe:	1d1a      	adds	r2, r3, #4
 8011dc0:	627a      	str	r2, [r7, #36]	@ 0x24
 8011dc2:	693a      	ldr	r2, [r7, #16]
 8011dc4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011dc6:	68bb      	ldr	r3, [r7, #8]
 8011dc8:	699b      	ldr	r3, [r3, #24]
 8011dca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011dcc:	429a      	cmp	r2, r3
 8011dce:	d3ba      	bcc.n	8011d46 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011dd6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011dd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011dda:	697b      	ldr	r3, [r7, #20]
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d803      	bhi.n	8011de8 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8011de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011de2:	2200      	movs	r2, #0
 8011de4:	601a      	str	r2, [r3, #0]
 8011de6:	e1b6      	b.n	8012156 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011de8:	2311      	movs	r3, #17
 8011dea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8011dee:	e1b2      	b.n	8012156 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	68db      	ldr	r3, [r3, #12]
 8011df4:	683a      	ldr	r2, [r7, #0]
 8011df6:	429a      	cmp	r2, r3
 8011df8:	d902      	bls.n	8011e00 <f_lseek+0x136>
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	68db      	ldr	r3, [r3, #12]
 8011dfe:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	683a      	ldr	r2, [r7, #0]
 8011e04:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	f000 81a4 	beq.w	8012156 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	3b01      	subs	r3, #1
 8011e12:	4619      	mov	r1, r3
 8011e14:	6878      	ldr	r0, [r7, #4]
 8011e16:	f7fe fc50 	bl	80106ba <clmt_clust>
 8011e1a:	4602      	mov	r2, r0
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011e20:	68ba      	ldr	r2, [r7, #8]
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	69db      	ldr	r3, [r3, #28]
 8011e26:	4619      	mov	r1, r3
 8011e28:	4610      	mov	r0, r2
 8011e2a:	f7fe f999 	bl	8010160 <clust2sect>
 8011e2e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011e30:	69bb      	ldr	r3, [r7, #24]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d109      	bne.n	8011e4a <f_lseek+0x180>
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	2202      	movs	r2, #2
 8011e3a:	755a      	strb	r2, [r3, #21]
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	2102      	movs	r1, #2
 8011e40:	4618      	mov	r0, r3
 8011e42:	f7fd ff25 	bl	800fc90 <unlock_fs>
 8011e46:	2302      	movs	r3, #2
 8011e48:	e18e      	b.n	8012168 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	3b01      	subs	r3, #1
 8011e4e:	0a5b      	lsrs	r3, r3, #9
 8011e50:	68ba      	ldr	r2, [r7, #8]
 8011e52:	8952      	ldrh	r2, [r2, #10]
 8011e54:	3a01      	subs	r2, #1
 8011e56:	4013      	ands	r3, r2
 8011e58:	69ba      	ldr	r2, [r7, #24]
 8011e5a:	4413      	add	r3, r2
 8011e5c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	699b      	ldr	r3, [r3, #24]
 8011e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	f000 8175 	beq.w	8012156 <f_lseek+0x48c>
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	6a1b      	ldr	r3, [r3, #32]
 8011e70:	69ba      	ldr	r2, [r7, #24]
 8011e72:	429a      	cmp	r2, r3
 8011e74:	f000 816f 	beq.w	8012156 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	7d1b      	ldrb	r3, [r3, #20]
 8011e7c:	b25b      	sxtb	r3, r3
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	da1d      	bge.n	8011ebe <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	7858      	ldrb	r0, [r3, #1]
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	6a1a      	ldr	r2, [r3, #32]
 8011e90:	2301      	movs	r3, #1
 8011e92:	f7fd fda9 	bl	800f9e8 <disk_write>
 8011e96:	4603      	mov	r3, r0
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d009      	beq.n	8011eb0 <f_lseek+0x1e6>
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	2201      	movs	r2, #1
 8011ea0:	755a      	strb	r2, [r3, #21]
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	2101      	movs	r1, #1
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	f7fd fef2 	bl	800fc90 <unlock_fs>
 8011eac:	2301      	movs	r3, #1
 8011eae:	e15b      	b.n	8012168 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	7d1b      	ldrb	r3, [r3, #20]
 8011eb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011eb8:	b2da      	uxtb	r2, r3
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	7858      	ldrb	r0, [r3, #1]
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011ec8:	2301      	movs	r3, #1
 8011eca:	69ba      	ldr	r2, [r7, #24]
 8011ecc:	f7fd fd6c 	bl	800f9a8 <disk_read>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d009      	beq.n	8011eea <f_lseek+0x220>
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	2201      	movs	r2, #1
 8011eda:	755a      	strb	r2, [r3, #21]
 8011edc:	68bb      	ldr	r3, [r7, #8]
 8011ede:	2101      	movs	r1, #1
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f7fd fed5 	bl	800fc90 <unlock_fs>
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	e13e      	b.n	8012168 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	69ba      	ldr	r2, [r7, #24]
 8011eee:	621a      	str	r2, [r3, #32]
 8011ef0:	e131      	b.n	8012156 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	68db      	ldr	r3, [r3, #12]
 8011ef6:	683a      	ldr	r2, [r7, #0]
 8011ef8:	429a      	cmp	r2, r3
 8011efa:	d908      	bls.n	8011f0e <f_lseek+0x244>
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	7d1b      	ldrb	r3, [r3, #20]
 8011f00:	f003 0302 	and.w	r3, r3, #2
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d102      	bne.n	8011f0e <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	68db      	ldr	r3, [r3, #12]
 8011f0c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	699b      	ldr	r3, [r3, #24]
 8011f12:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011f14:	2300      	movs	r3, #0
 8011f16:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011f1c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011f1e:	683b      	ldr	r3, [r7, #0]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	f000 80c0 	beq.w	80120a6 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011f26:	68bb      	ldr	r3, [r7, #8]
 8011f28:	895b      	ldrh	r3, [r3, #10]
 8011f2a:	025b      	lsls	r3, r3, #9
 8011f2c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011f2e:	6a3b      	ldr	r3, [r7, #32]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d01b      	beq.n	8011f6c <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	1e5a      	subs	r2, r3, #1
 8011f38:	69fb      	ldr	r3, [r7, #28]
 8011f3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8011f3e:	6a3b      	ldr	r3, [r7, #32]
 8011f40:	1e59      	subs	r1, r3, #1
 8011f42:	69fb      	ldr	r3, [r7, #28]
 8011f44:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011f48:	429a      	cmp	r2, r3
 8011f4a:	d30f      	bcc.n	8011f6c <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011f4c:	6a3b      	ldr	r3, [r7, #32]
 8011f4e:	1e5a      	subs	r2, r3, #1
 8011f50:	69fb      	ldr	r3, [r7, #28]
 8011f52:	425b      	negs	r3, r3
 8011f54:	401a      	ands	r2, r3
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	699b      	ldr	r3, [r3, #24]
 8011f5e:	683a      	ldr	r2, [r7, #0]
 8011f60:	1ad3      	subs	r3, r2, r3
 8011f62:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	69db      	ldr	r3, [r3, #28]
 8011f68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011f6a:	e02c      	b.n	8011fc6 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	689b      	ldr	r3, [r3, #8]
 8011f70:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d123      	bne.n	8011fc0 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2100      	movs	r1, #0
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f7fe fb04 	bl	801058a <create_chain>
 8011f82:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f86:	2b01      	cmp	r3, #1
 8011f88:	d109      	bne.n	8011f9e <f_lseek+0x2d4>
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	2202      	movs	r2, #2
 8011f8e:	755a      	strb	r2, [r3, #21]
 8011f90:	68bb      	ldr	r3, [r7, #8]
 8011f92:	2102      	movs	r1, #2
 8011f94:	4618      	mov	r0, r3
 8011f96:	f7fd fe7b 	bl	800fc90 <unlock_fs>
 8011f9a:	2302      	movs	r3, #2
 8011f9c:	e0e4      	b.n	8012168 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011fa4:	d109      	bne.n	8011fba <f_lseek+0x2f0>
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2201      	movs	r2, #1
 8011faa:	755a      	strb	r2, [r3, #21]
 8011fac:	68bb      	ldr	r3, [r7, #8]
 8011fae:	2101      	movs	r1, #1
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	f7fd fe6d 	bl	800fc90 <unlock_fs>
 8011fb6:	2301      	movs	r3, #1
 8011fb8:	e0d6      	b.n	8012168 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011fbe:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011fc4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d06c      	beq.n	80120a6 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8011fcc:	e044      	b.n	8012058 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8011fce:	683a      	ldr	r2, [r7, #0]
 8011fd0:	69fb      	ldr	r3, [r7, #28]
 8011fd2:	1ad3      	subs	r3, r2, r3
 8011fd4:	603b      	str	r3, [r7, #0]
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	699a      	ldr	r2, [r3, #24]
 8011fda:	69fb      	ldr	r3, [r7, #28]
 8011fdc:	441a      	add	r2, r3
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	7d1b      	ldrb	r3, [r3, #20]
 8011fe6:	f003 0302 	and.w	r3, r3, #2
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d00b      	beq.n	8012006 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f7fe fac9 	bl	801058a <create_chain>
 8011ff8:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d108      	bne.n	8012012 <f_lseek+0x348>
							ofs = 0; break;
 8012000:	2300      	movs	r3, #0
 8012002:	603b      	str	r3, [r7, #0]
 8012004:	e02c      	b.n	8012060 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801200a:	4618      	mov	r0, r3
 801200c:	f7fe f8c7 	bl	801019e <get_fat>
 8012010:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012014:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012018:	d109      	bne.n	801202e <f_lseek+0x364>
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	2201      	movs	r2, #1
 801201e:	755a      	strb	r2, [r3, #21]
 8012020:	68bb      	ldr	r3, [r7, #8]
 8012022:	2101      	movs	r1, #1
 8012024:	4618      	mov	r0, r3
 8012026:	f7fd fe33 	bl	800fc90 <unlock_fs>
 801202a:	2301      	movs	r3, #1
 801202c:	e09c      	b.n	8012168 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801202e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012030:	2b01      	cmp	r3, #1
 8012032:	d904      	bls.n	801203e <f_lseek+0x374>
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	699b      	ldr	r3, [r3, #24]
 8012038:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801203a:	429a      	cmp	r2, r3
 801203c:	d309      	bcc.n	8012052 <f_lseek+0x388>
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	2202      	movs	r2, #2
 8012042:	755a      	strb	r2, [r3, #21]
 8012044:	68bb      	ldr	r3, [r7, #8]
 8012046:	2102      	movs	r1, #2
 8012048:	4618      	mov	r0, r3
 801204a:	f7fd fe21 	bl	800fc90 <unlock_fs>
 801204e:	2302      	movs	r3, #2
 8012050:	e08a      	b.n	8012168 <f_lseek+0x49e>
					fp->clust = clst;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012056:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8012058:	683a      	ldr	r2, [r7, #0]
 801205a:	69fb      	ldr	r3, [r7, #28]
 801205c:	429a      	cmp	r2, r3
 801205e:	d8b6      	bhi.n	8011fce <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	699a      	ldr	r2, [r3, #24]
 8012064:	683b      	ldr	r3, [r7, #0]
 8012066:	441a      	add	r2, r3
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801206c:	683b      	ldr	r3, [r7, #0]
 801206e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012072:	2b00      	cmp	r3, #0
 8012074:	d017      	beq.n	80120a6 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8012076:	68bb      	ldr	r3, [r7, #8]
 8012078:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801207a:	4618      	mov	r0, r3
 801207c:	f7fe f870 	bl	8010160 <clust2sect>
 8012080:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8012082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012084:	2b00      	cmp	r3, #0
 8012086:	d109      	bne.n	801209c <f_lseek+0x3d2>
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2202      	movs	r2, #2
 801208c:	755a      	strb	r2, [r3, #21]
 801208e:	68bb      	ldr	r3, [r7, #8]
 8012090:	2102      	movs	r1, #2
 8012092:	4618      	mov	r0, r3
 8012094:	f7fd fdfc 	bl	800fc90 <unlock_fs>
 8012098:	2302      	movs	r3, #2
 801209a:	e065      	b.n	8012168 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	0a5b      	lsrs	r3, r3, #9
 80120a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80120a2:	4413      	add	r3, r2
 80120a4:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	699a      	ldr	r2, [r3, #24]
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	68db      	ldr	r3, [r3, #12]
 80120ae:	429a      	cmp	r2, r3
 80120b0:	d90a      	bls.n	80120c8 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	699a      	ldr	r2, [r3, #24]
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	7d1b      	ldrb	r3, [r3, #20]
 80120be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80120c2:	b2da      	uxtb	r2, r3
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	699b      	ldr	r3, [r3, #24]
 80120cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d040      	beq.n	8012156 <f_lseek+0x48c>
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	6a1b      	ldr	r3, [r3, #32]
 80120d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80120da:	429a      	cmp	r2, r3
 80120dc:	d03b      	beq.n	8012156 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	7d1b      	ldrb	r3, [r3, #20]
 80120e2:	b25b      	sxtb	r3, r3
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	da1d      	bge.n	8012124 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80120e8:	68bb      	ldr	r3, [r7, #8]
 80120ea:	7858      	ldrb	r0, [r3, #1]
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	6a1a      	ldr	r2, [r3, #32]
 80120f6:	2301      	movs	r3, #1
 80120f8:	f7fd fc76 	bl	800f9e8 <disk_write>
 80120fc:	4603      	mov	r3, r0
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d009      	beq.n	8012116 <f_lseek+0x44c>
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	2201      	movs	r2, #1
 8012106:	755a      	strb	r2, [r3, #21]
 8012108:	68bb      	ldr	r3, [r7, #8]
 801210a:	2101      	movs	r1, #1
 801210c:	4618      	mov	r0, r3
 801210e:	f7fd fdbf 	bl	800fc90 <unlock_fs>
 8012112:	2301      	movs	r3, #1
 8012114:	e028      	b.n	8012168 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	7d1b      	ldrb	r3, [r3, #20]
 801211a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801211e:	b2da      	uxtb	r2, r3
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012124:	68bb      	ldr	r3, [r7, #8]
 8012126:	7858      	ldrb	r0, [r3, #1]
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801212e:	2301      	movs	r3, #1
 8012130:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012132:	f7fd fc39 	bl	800f9a8 <disk_read>
 8012136:	4603      	mov	r3, r0
 8012138:	2b00      	cmp	r3, #0
 801213a:	d009      	beq.n	8012150 <f_lseek+0x486>
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	2201      	movs	r2, #1
 8012140:	755a      	strb	r2, [r3, #21]
 8012142:	68bb      	ldr	r3, [r7, #8]
 8012144:	2101      	movs	r1, #1
 8012146:	4618      	mov	r0, r3
 8012148:	f7fd fda2 	bl	800fc90 <unlock_fs>
 801214c:	2301      	movs	r3, #1
 801214e:	e00b      	b.n	8012168 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012154:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8012156:	68bb      	ldr	r3, [r7, #8]
 8012158:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801215c:	4611      	mov	r1, r2
 801215e:	4618      	mov	r0, r3
 8012160:	f7fd fd96 	bl	800fc90 <unlock_fs>
 8012164:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8012168:	4618      	mov	r0, r3
 801216a:	3740      	adds	r7, #64	@ 0x40
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}

08012170 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012170:	b480      	push	{r7}
 8012172:	b087      	sub	sp, #28
 8012174:	af00      	add	r7, sp, #0
 8012176:	60f8      	str	r0, [r7, #12]
 8012178:	60b9      	str	r1, [r7, #8]
 801217a:	4613      	mov	r3, r2
 801217c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801217e:	2301      	movs	r3, #1
 8012180:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012182:	2300      	movs	r3, #0
 8012184:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012186:	4b1f      	ldr	r3, [pc, #124]	@ (8012204 <FATFS_LinkDriverEx+0x94>)
 8012188:	7a5b      	ldrb	r3, [r3, #9]
 801218a:	b2db      	uxtb	r3, r3
 801218c:	2b00      	cmp	r3, #0
 801218e:	d131      	bne.n	80121f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012190:	4b1c      	ldr	r3, [pc, #112]	@ (8012204 <FATFS_LinkDriverEx+0x94>)
 8012192:	7a5b      	ldrb	r3, [r3, #9]
 8012194:	b2db      	uxtb	r3, r3
 8012196:	461a      	mov	r2, r3
 8012198:	4b1a      	ldr	r3, [pc, #104]	@ (8012204 <FATFS_LinkDriverEx+0x94>)
 801219a:	2100      	movs	r1, #0
 801219c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801219e:	4b19      	ldr	r3, [pc, #100]	@ (8012204 <FATFS_LinkDriverEx+0x94>)
 80121a0:	7a5b      	ldrb	r3, [r3, #9]
 80121a2:	b2db      	uxtb	r3, r3
 80121a4:	4a17      	ldr	r2, [pc, #92]	@ (8012204 <FATFS_LinkDriverEx+0x94>)
 80121a6:	009b      	lsls	r3, r3, #2
 80121a8:	4413      	add	r3, r2
 80121aa:	68fa      	ldr	r2, [r7, #12]
 80121ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80121ae:	4b15      	ldr	r3, [pc, #84]	@ (8012204 <FATFS_LinkDriverEx+0x94>)
 80121b0:	7a5b      	ldrb	r3, [r3, #9]
 80121b2:	b2db      	uxtb	r3, r3
 80121b4:	461a      	mov	r2, r3
 80121b6:	4b13      	ldr	r3, [pc, #76]	@ (8012204 <FATFS_LinkDriverEx+0x94>)
 80121b8:	4413      	add	r3, r2
 80121ba:	79fa      	ldrb	r2, [r7, #7]
 80121bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80121be:	4b11      	ldr	r3, [pc, #68]	@ (8012204 <FATFS_LinkDriverEx+0x94>)
 80121c0:	7a5b      	ldrb	r3, [r3, #9]
 80121c2:	b2db      	uxtb	r3, r3
 80121c4:	1c5a      	adds	r2, r3, #1
 80121c6:	b2d1      	uxtb	r1, r2
 80121c8:	4a0e      	ldr	r2, [pc, #56]	@ (8012204 <FATFS_LinkDriverEx+0x94>)
 80121ca:	7251      	strb	r1, [r2, #9]
 80121cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80121ce:	7dbb      	ldrb	r3, [r7, #22]
 80121d0:	3330      	adds	r3, #48	@ 0x30
 80121d2:	b2da      	uxtb	r2, r3
 80121d4:	68bb      	ldr	r3, [r7, #8]
 80121d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	3301      	adds	r3, #1
 80121dc:	223a      	movs	r2, #58	@ 0x3a
 80121de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80121e0:	68bb      	ldr	r3, [r7, #8]
 80121e2:	3302      	adds	r3, #2
 80121e4:	222f      	movs	r2, #47	@ 0x2f
 80121e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	3303      	adds	r3, #3
 80121ec:	2200      	movs	r2, #0
 80121ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80121f0:	2300      	movs	r3, #0
 80121f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80121f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80121f6:	4618      	mov	r0, r3
 80121f8:	371c      	adds	r7, #28
 80121fa:	46bd      	mov	sp, r7
 80121fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012200:	4770      	bx	lr
 8012202:	bf00      	nop
 8012204:	20001498 	.word	0x20001498

08012208 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b082      	sub	sp, #8
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
 8012210:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012212:	2200      	movs	r2, #0
 8012214:	6839      	ldr	r1, [r7, #0]
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	f7ff ffaa 	bl	8012170 <FATFS_LinkDriverEx>
 801221c:	4603      	mov	r3, r0
}
 801221e:	4618      	mov	r0, r3
 8012220:	3708      	adds	r7, #8
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}

08012226 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8012226:	b580      	push	{r7, lr}
 8012228:	b086      	sub	sp, #24
 801222a:	af00      	add	r7, sp, #0
 801222c:	4603      	mov	r3, r0
 801222e:	6039      	str	r1, [r7, #0]
 8012230:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8012232:	2300      	movs	r3, #0
 8012234:	60fb      	str	r3, [r7, #12]
 8012236:	2300      	movs	r3, #0
 8012238:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 801223a:	f107 030c 	add.w	r3, r7, #12
 801223e:	2101      	movs	r1, #1
 8012240:	4618      	mov	r0, r3
 8012242:	f000 f901 	bl	8012448 <osSemaphoreCreate>
 8012246:	4602      	mov	r2, r0
 8012248:	683b      	ldr	r3, [r7, #0]
 801224a:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 801224c:	683b      	ldr	r3, [r7, #0]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	2b00      	cmp	r3, #0
 8012252:	bf14      	ite	ne
 8012254:	2301      	movne	r3, #1
 8012256:	2300      	moveq	r3, #0
 8012258:	b2db      	uxtb	r3, r3
 801225a:	617b      	str	r3, [r7, #20]

    return ret;
 801225c:	697b      	ldr	r3, [r7, #20]
}
 801225e:	4618      	mov	r0, r3
 8012260:	3718      	adds	r7, #24
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}

08012266 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8012266:	b580      	push	{r7, lr}
 8012268:	b082      	sub	sp, #8
 801226a:	af00      	add	r7, sp, #0
 801226c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f000 f9a0 	bl	80125b4 <osSemaphoreDelete>
#endif
    return 1;
 8012274:	2301      	movs	r3, #1
}
 8012276:	4618      	mov	r0, r3
 8012278:	3708      	adds	r7, #8
 801227a:	46bd      	mov	sp, r7
 801227c:	bd80      	pop	{r7, pc}

0801227e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801227e:	b580      	push	{r7, lr}
 8012280:	b084      	sub	sp, #16
 8012282:	af00      	add	r7, sp, #0
 8012284:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8012286:	2300      	movs	r3, #0
 8012288:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 801228a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	f000 f90c 	bl	80124ac <osSemaphoreWait>
 8012294:	4603      	mov	r3, r0
 8012296:	2b00      	cmp	r3, #0
 8012298:	d101      	bne.n	801229e <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 801229a:	2301      	movs	r3, #1
 801229c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801229e:	68fb      	ldr	r3, [r7, #12]
}
 80122a0:	4618      	mov	r0, r3
 80122a2:	3710      	adds	r7, #16
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bd80      	pop	{r7, pc}

080122a8 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b082      	sub	sp, #8
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80122b0:	6878      	ldr	r0, [r7, #4]
 80122b2:	f000 f949 	bl	8012548 <osSemaphoreRelease>
#endif
}
 80122b6:	bf00      	nop
 80122b8:	3708      	adds	r7, #8
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}

080122be <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80122be:	b480      	push	{r7}
 80122c0:	b085      	sub	sp, #20
 80122c2:	af00      	add	r7, sp, #0
 80122c4:	4603      	mov	r3, r0
 80122c6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80122c8:	2300      	movs	r3, #0
 80122ca:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80122cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80122d0:	2b84      	cmp	r3, #132	@ 0x84
 80122d2:	d005      	beq.n	80122e0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80122d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	4413      	add	r3, r2
 80122dc:	3303      	adds	r3, #3
 80122de:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80122e0:	68fb      	ldr	r3, [r7, #12]
}
 80122e2:	4618      	mov	r0, r3
 80122e4:	3714      	adds	r7, #20
 80122e6:	46bd      	mov	sp, r7
 80122e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ec:	4770      	bx	lr

080122ee <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80122ee:	b480      	push	{r7}
 80122f0:	b083      	sub	sp, #12
 80122f2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80122f4:	f3ef 8305 	mrs	r3, IPSR
 80122f8:	607b      	str	r3, [r7, #4]
  return(result);
 80122fa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	bf14      	ite	ne
 8012300:	2301      	movne	r3, #1
 8012302:	2300      	moveq	r3, #0
 8012304:	b2db      	uxtb	r3, r3
}
 8012306:	4618      	mov	r0, r3
 8012308:	370c      	adds	r7, #12
 801230a:	46bd      	mov	sp, r7
 801230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012310:	4770      	bx	lr

08012312 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012312:	b580      	push	{r7, lr}
 8012314:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012316:	f001 fd4f 	bl	8013db8 <vTaskStartScheduler>
  
  return osOK;
 801231a:	2300      	movs	r3, #0
}
 801231c:	4618      	mov	r0, r3
 801231e:	bd80      	pop	{r7, pc}

08012320 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8012324:	f002 f99e 	bl	8014664 <xTaskGetSchedulerState>
 8012328:	4603      	mov	r3, r0
 801232a:	2b01      	cmp	r3, #1
 801232c:	d101      	bne.n	8012332 <osKernelRunning+0x12>
    return 0;
 801232e:	2300      	movs	r3, #0
 8012330:	e000      	b.n	8012334 <osKernelRunning+0x14>
  else
    return 1;
 8012332:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8012334:	4618      	mov	r0, r3
 8012336:	bd80      	pop	{r7, pc}

08012338 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 801233c:	f7ff ffd7 	bl	80122ee <inHandlerMode>
 8012340:	4603      	mov	r3, r0
 8012342:	2b00      	cmp	r3, #0
 8012344:	d003      	beq.n	801234e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8012346:	f001 fe63 	bl	8014010 <xTaskGetTickCountFromISR>
 801234a:	4603      	mov	r3, r0
 801234c:	e002      	b.n	8012354 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 801234e:	f001 fe4f 	bl	8013ff0 <xTaskGetTickCount>
 8012352:	4603      	mov	r3, r0
  }
}
 8012354:	4618      	mov	r0, r3
 8012356:	bd80      	pop	{r7, pc}

08012358 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012358:	b5f0      	push	{r4, r5, r6, r7, lr}
 801235a:	b089      	sub	sp, #36	@ 0x24
 801235c:	af04      	add	r7, sp, #16
 801235e:	6078      	str	r0, [r7, #4]
 8012360:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	695b      	ldr	r3, [r3, #20]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d020      	beq.n	80123ac <osThreadCreate+0x54>
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	699b      	ldr	r3, [r3, #24]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d01c      	beq.n	80123ac <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	685c      	ldr	r4, [r3, #4]
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	691e      	ldr	r6, [r3, #16]
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012384:	4618      	mov	r0, r3
 8012386:	f7ff ff9a 	bl	80122be <makeFreeRtosPriority>
 801238a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	695b      	ldr	r3, [r3, #20]
 8012390:	687a      	ldr	r2, [r7, #4]
 8012392:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012394:	9202      	str	r2, [sp, #8]
 8012396:	9301      	str	r3, [sp, #4]
 8012398:	9100      	str	r1, [sp, #0]
 801239a:	683b      	ldr	r3, [r7, #0]
 801239c:	4632      	mov	r2, r6
 801239e:	4629      	mov	r1, r5
 80123a0:	4620      	mov	r0, r4
 80123a2:	f001 fa93 	bl	80138cc <xTaskCreateStatic>
 80123a6:	4603      	mov	r3, r0
 80123a8:	60fb      	str	r3, [r7, #12]
 80123aa:	e01c      	b.n	80123e6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	685c      	ldr	r4, [r3, #4]
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80123b8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80123c0:	4618      	mov	r0, r3
 80123c2:	f7ff ff7c 	bl	80122be <makeFreeRtosPriority>
 80123c6:	4602      	mov	r2, r0
 80123c8:	f107 030c 	add.w	r3, r7, #12
 80123cc:	9301      	str	r3, [sp, #4]
 80123ce:	9200      	str	r2, [sp, #0]
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	4632      	mov	r2, r6
 80123d4:	4629      	mov	r1, r5
 80123d6:	4620      	mov	r0, r4
 80123d8:	f001 fade 	bl	8013998 <xTaskCreate>
 80123dc:	4603      	mov	r3, r0
 80123de:	2b01      	cmp	r3, #1
 80123e0:	d001      	beq.n	80123e6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80123e2:	2300      	movs	r3, #0
 80123e4:	e000      	b.n	80123e8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80123e6:	68fb      	ldr	r3, [r7, #12]
}
 80123e8:	4618      	mov	r0, r3
 80123ea:	3714      	adds	r7, #20
 80123ec:	46bd      	mov	sp, r7
 80123ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080123f0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b084      	sub	sp, #16
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d001      	beq.n	8012406 <osDelay+0x16>
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	e000      	b.n	8012408 <osDelay+0x18>
 8012406:	2301      	movs	r3, #1
 8012408:	4618      	mov	r0, r3
 801240a:	f001 fc9d 	bl	8013d48 <vTaskDelay>
  
  return osOK;
 801240e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012410:	4618      	mov	r0, r3
 8012412:	3710      	adds	r7, #16
 8012414:	46bd      	mov	sp, r7
 8012416:	bd80      	pop	{r7, pc}

08012418 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b082      	sub	sp, #8
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	685b      	ldr	r3, [r3, #4]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d007      	beq.n	8012438 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	685b      	ldr	r3, [r3, #4]
 801242c:	4619      	mov	r1, r3
 801242e:	2001      	movs	r0, #1
 8012430:	f000 fbeb 	bl	8012c0a <xQueueCreateMutexStatic>
 8012434:	4603      	mov	r3, r0
 8012436:	e003      	b.n	8012440 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012438:	2001      	movs	r0, #1
 801243a:	f000 fbce 	bl	8012bda <xQueueCreateMutex>
 801243e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012440:	4618      	mov	r0, r3
 8012442:	3708      	adds	r7, #8
 8012444:	46bd      	mov	sp, r7
 8012446:	bd80      	pop	{r7, pc}

08012448 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8012448:	b580      	push	{r7, lr}
 801244a:	b086      	sub	sp, #24
 801244c:	af02      	add	r7, sp, #8
 801244e:	6078      	str	r0, [r7, #4]
 8012450:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	685b      	ldr	r3, [r3, #4]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d00f      	beq.n	801247a <osSemaphoreCreate+0x32>
    if (count == 1) {
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	2b01      	cmp	r3, #1
 801245e:	d10a      	bne.n	8012476 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	685b      	ldr	r3, [r3, #4]
 8012464:	2203      	movs	r2, #3
 8012466:	9200      	str	r2, [sp, #0]
 8012468:	2200      	movs	r2, #0
 801246a:	2100      	movs	r1, #0
 801246c:	2001      	movs	r0, #1
 801246e:	f000 fab1 	bl	80129d4 <xQueueGenericCreateStatic>
 8012472:	4603      	mov	r3, r0
 8012474:	e016      	b.n	80124a4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8012476:	2300      	movs	r3, #0
 8012478:	e014      	b.n	80124a4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 801247a:	683b      	ldr	r3, [r7, #0]
 801247c:	2b01      	cmp	r3, #1
 801247e:	d110      	bne.n	80124a2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8012480:	2203      	movs	r2, #3
 8012482:	2100      	movs	r1, #0
 8012484:	2001      	movs	r0, #1
 8012486:	f000 fb2c 	bl	8012ae2 <xQueueGenericCreate>
 801248a:	60f8      	str	r0, [r7, #12]
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d005      	beq.n	801249e <osSemaphoreCreate+0x56>
 8012492:	2300      	movs	r3, #0
 8012494:	2200      	movs	r2, #0
 8012496:	2100      	movs	r1, #0
 8012498:	68f8      	ldr	r0, [r7, #12]
 801249a:	f000 fbd1 	bl	8012c40 <xQueueGenericSend>
      return sema;
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	e000      	b.n	80124a4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80124a2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80124a4:	4618      	mov	r0, r3
 80124a6:	3710      	adds	r7, #16
 80124a8:	46bd      	mov	sp, r7
 80124aa:	bd80      	pop	{r7, pc}

080124ac <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b084      	sub	sp, #16
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
 80124b4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80124b6:	2300      	movs	r3, #0
 80124b8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d101      	bne.n	80124c4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80124c0:	2380      	movs	r3, #128	@ 0x80
 80124c2:	e03a      	b.n	801253a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80124c4:	2300      	movs	r3, #0
 80124c6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80124c8:	683b      	ldr	r3, [r7, #0]
 80124ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80124ce:	d103      	bne.n	80124d8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80124d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80124d4:	60fb      	str	r3, [r7, #12]
 80124d6:	e009      	b.n	80124ec <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d006      	beq.n	80124ec <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80124de:	683b      	ldr	r3, [r7, #0]
 80124e0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d101      	bne.n	80124ec <osSemaphoreWait+0x40>
      ticks = 1;
 80124e8:	2301      	movs	r3, #1
 80124ea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80124ec:	f7ff feff 	bl	80122ee <inHandlerMode>
 80124f0:	4603      	mov	r3, r0
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d017      	beq.n	8012526 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80124f6:	f107 0308 	add.w	r3, r7, #8
 80124fa:	461a      	mov	r2, r3
 80124fc:	2100      	movs	r1, #0
 80124fe:	6878      	ldr	r0, [r7, #4]
 8012500:	f000 ffe4 	bl	80134cc <xQueueReceiveFromISR>
 8012504:	4603      	mov	r3, r0
 8012506:	2b01      	cmp	r3, #1
 8012508:	d001      	beq.n	801250e <osSemaphoreWait+0x62>
      return osErrorOS;
 801250a:	23ff      	movs	r3, #255	@ 0xff
 801250c:	e015      	b.n	801253a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801250e:	68bb      	ldr	r3, [r7, #8]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d011      	beq.n	8012538 <osSemaphoreWait+0x8c>
 8012514:	4b0b      	ldr	r3, [pc, #44]	@ (8012544 <osSemaphoreWait+0x98>)
 8012516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801251a:	601a      	str	r2, [r3, #0]
 801251c:	f3bf 8f4f 	dsb	sy
 8012520:	f3bf 8f6f 	isb	sy
 8012524:	e008      	b.n	8012538 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8012526:	68f9      	ldr	r1, [r7, #12]
 8012528:	6878      	ldr	r0, [r7, #4]
 801252a:	f000 feb7 	bl	801329c <xQueueSemaphoreTake>
 801252e:	4603      	mov	r3, r0
 8012530:	2b01      	cmp	r3, #1
 8012532:	d001      	beq.n	8012538 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8012534:	23ff      	movs	r3, #255	@ 0xff
 8012536:	e000      	b.n	801253a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8012538:	2300      	movs	r3, #0
}
 801253a:	4618      	mov	r0, r3
 801253c:	3710      	adds	r7, #16
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}
 8012542:	bf00      	nop
 8012544:	e000ed04 	.word	0xe000ed04

08012548 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b084      	sub	sp, #16
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8012550:	2300      	movs	r3, #0
 8012552:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8012554:	2300      	movs	r3, #0
 8012556:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8012558:	f7ff fec9 	bl	80122ee <inHandlerMode>
 801255c:	4603      	mov	r3, r0
 801255e:	2b00      	cmp	r3, #0
 8012560:	d016      	beq.n	8012590 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012562:	f107 0308 	add.w	r3, r7, #8
 8012566:	4619      	mov	r1, r3
 8012568:	6878      	ldr	r0, [r7, #4]
 801256a:	f000 fd16 	bl	8012f9a <xQueueGiveFromISR>
 801256e:	4603      	mov	r3, r0
 8012570:	2b01      	cmp	r3, #1
 8012572:	d001      	beq.n	8012578 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8012574:	23ff      	movs	r3, #255	@ 0xff
 8012576:	e017      	b.n	80125a8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012578:	68bb      	ldr	r3, [r7, #8]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d013      	beq.n	80125a6 <osSemaphoreRelease+0x5e>
 801257e:	4b0c      	ldr	r3, [pc, #48]	@ (80125b0 <osSemaphoreRelease+0x68>)
 8012580:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012584:	601a      	str	r2, [r3, #0]
 8012586:	f3bf 8f4f 	dsb	sy
 801258a:	f3bf 8f6f 	isb	sy
 801258e:	e00a      	b.n	80125a6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8012590:	2300      	movs	r3, #0
 8012592:	2200      	movs	r2, #0
 8012594:	2100      	movs	r1, #0
 8012596:	6878      	ldr	r0, [r7, #4]
 8012598:	f000 fb52 	bl	8012c40 <xQueueGenericSend>
 801259c:	4603      	mov	r3, r0
 801259e:	2b01      	cmp	r3, #1
 80125a0:	d001      	beq.n	80125a6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80125a2:	23ff      	movs	r3, #255	@ 0xff
 80125a4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80125a6:	68fb      	ldr	r3, [r7, #12]
}
 80125a8:	4618      	mov	r0, r3
 80125aa:	3710      	adds	r7, #16
 80125ac:	46bd      	mov	sp, r7
 80125ae:	bd80      	pop	{r7, pc}
 80125b0:	e000ed04 	.word	0xe000ed04

080125b4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80125b4:	b580      	push	{r7, lr}
 80125b6:	b082      	sub	sp, #8
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80125bc:	f7ff fe97 	bl	80122ee <inHandlerMode>
 80125c0:	4603      	mov	r3, r0
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d001      	beq.n	80125ca <osSemaphoreDelete+0x16>
    return osErrorISR;
 80125c6:	2382      	movs	r3, #130	@ 0x82
 80125c8:	e003      	b.n	80125d2 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80125ca:	6878      	ldr	r0, [r7, #4]
 80125cc:	f001 f806 	bl	80135dc <vQueueDelete>

  return osOK; 
 80125d0:	2300      	movs	r3, #0
}
 80125d2:	4618      	mov	r0, r3
 80125d4:	3708      	adds	r7, #8
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}

080125da <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80125da:	b590      	push	{r4, r7, lr}
 80125dc:	b085      	sub	sp, #20
 80125de:	af02      	add	r7, sp, #8
 80125e0:	6078      	str	r0, [r7, #4]
 80125e2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	689b      	ldr	r3, [r3, #8]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d011      	beq.n	8012610 <osMessageCreate+0x36>
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	68db      	ldr	r3, [r3, #12]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d00d      	beq.n	8012610 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	6818      	ldr	r0, [r3, #0]
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	6859      	ldr	r1, [r3, #4]
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	689a      	ldr	r2, [r3, #8]
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	68db      	ldr	r3, [r3, #12]
 8012604:	2400      	movs	r4, #0
 8012606:	9400      	str	r4, [sp, #0]
 8012608:	f000 f9e4 	bl	80129d4 <xQueueGenericCreateStatic>
 801260c:	4603      	mov	r3, r0
 801260e:	e008      	b.n	8012622 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	6818      	ldr	r0, [r3, #0]
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	685b      	ldr	r3, [r3, #4]
 8012618:	2200      	movs	r2, #0
 801261a:	4619      	mov	r1, r3
 801261c:	f000 fa61 	bl	8012ae2 <xQueueGenericCreate>
 8012620:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8012622:	4618      	mov	r0, r3
 8012624:	370c      	adds	r7, #12
 8012626:	46bd      	mov	sp, r7
 8012628:	bd90      	pop	{r4, r7, pc}
	...

0801262c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801262c:	b580      	push	{r7, lr}
 801262e:	b086      	sub	sp, #24
 8012630:	af00      	add	r7, sp, #0
 8012632:	60f8      	str	r0, [r7, #12]
 8012634:	60b9      	str	r1, [r7, #8]
 8012636:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8012638:	2300      	movs	r3, #0
 801263a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8012640:	697b      	ldr	r3, [r7, #20]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d101      	bne.n	801264a <osMessagePut+0x1e>
    ticks = 1;
 8012646:	2301      	movs	r3, #1
 8012648:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801264a:	f7ff fe50 	bl	80122ee <inHandlerMode>
 801264e:	4603      	mov	r3, r0
 8012650:	2b00      	cmp	r3, #0
 8012652:	d018      	beq.n	8012686 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8012654:	f107 0210 	add.w	r2, r7, #16
 8012658:	f107 0108 	add.w	r1, r7, #8
 801265c:	2300      	movs	r3, #0
 801265e:	68f8      	ldr	r0, [r7, #12]
 8012660:	f000 fbf8 	bl	8012e54 <xQueueGenericSendFromISR>
 8012664:	4603      	mov	r3, r0
 8012666:	2b01      	cmp	r3, #1
 8012668:	d001      	beq.n	801266e <osMessagePut+0x42>
      return osErrorOS;
 801266a:	23ff      	movs	r3, #255	@ 0xff
 801266c:	e018      	b.n	80126a0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801266e:	693b      	ldr	r3, [r7, #16]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d014      	beq.n	801269e <osMessagePut+0x72>
 8012674:	4b0c      	ldr	r3, [pc, #48]	@ (80126a8 <osMessagePut+0x7c>)
 8012676:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801267a:	601a      	str	r2, [r3, #0]
 801267c:	f3bf 8f4f 	dsb	sy
 8012680:	f3bf 8f6f 	isb	sy
 8012684:	e00b      	b.n	801269e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8012686:	f107 0108 	add.w	r1, r7, #8
 801268a:	2300      	movs	r3, #0
 801268c:	697a      	ldr	r2, [r7, #20]
 801268e:	68f8      	ldr	r0, [r7, #12]
 8012690:	f000 fad6 	bl	8012c40 <xQueueGenericSend>
 8012694:	4603      	mov	r3, r0
 8012696:	2b01      	cmp	r3, #1
 8012698:	d001      	beq.n	801269e <osMessagePut+0x72>
      return osErrorOS;
 801269a:	23ff      	movs	r3, #255	@ 0xff
 801269c:	e000      	b.n	80126a0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801269e:	2300      	movs	r3, #0
}
 80126a0:	4618      	mov	r0, r3
 80126a2:	3718      	adds	r7, #24
 80126a4:	46bd      	mov	sp, r7
 80126a6:	bd80      	pop	{r7, pc}
 80126a8:	e000ed04 	.word	0xe000ed04

080126ac <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80126ac:	b590      	push	{r4, r7, lr}
 80126ae:	b08b      	sub	sp, #44	@ 0x2c
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	60f8      	str	r0, [r7, #12]
 80126b4:	60b9      	str	r1, [r7, #8]
 80126b6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80126b8:	68bb      	ldr	r3, [r7, #8]
 80126ba:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80126bc:	2300      	movs	r3, #0
 80126be:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80126c0:	68bb      	ldr	r3, [r7, #8]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d10a      	bne.n	80126dc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80126c6:	2380      	movs	r3, #128	@ 0x80
 80126c8:	617b      	str	r3, [r7, #20]
    return event;
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	461c      	mov	r4, r3
 80126ce:	f107 0314 	add.w	r3, r7, #20
 80126d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80126d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80126da:	e054      	b.n	8012786 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80126dc:	2300      	movs	r3, #0
 80126de:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80126e0:	2300      	movs	r3, #0
 80126e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80126ea:	d103      	bne.n	80126f4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80126ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80126f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80126f2:	e009      	b.n	8012708 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d006      	beq.n	8012708 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80126fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012700:	2b00      	cmp	r3, #0
 8012702:	d101      	bne.n	8012708 <osMessageGet+0x5c>
      ticks = 1;
 8012704:	2301      	movs	r3, #1
 8012706:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012708:	f7ff fdf1 	bl	80122ee <inHandlerMode>
 801270c:	4603      	mov	r3, r0
 801270e:	2b00      	cmp	r3, #0
 8012710:	d01c      	beq.n	801274c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8012712:	f107 0220 	add.w	r2, r7, #32
 8012716:	f107 0314 	add.w	r3, r7, #20
 801271a:	3304      	adds	r3, #4
 801271c:	4619      	mov	r1, r3
 801271e:	68b8      	ldr	r0, [r7, #8]
 8012720:	f000 fed4 	bl	80134cc <xQueueReceiveFromISR>
 8012724:	4603      	mov	r3, r0
 8012726:	2b01      	cmp	r3, #1
 8012728:	d102      	bne.n	8012730 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801272a:	2310      	movs	r3, #16
 801272c:	617b      	str	r3, [r7, #20]
 801272e:	e001      	b.n	8012734 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8012730:	2300      	movs	r3, #0
 8012732:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012734:	6a3b      	ldr	r3, [r7, #32]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d01d      	beq.n	8012776 <osMessageGet+0xca>
 801273a:	4b15      	ldr	r3, [pc, #84]	@ (8012790 <osMessageGet+0xe4>)
 801273c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012740:	601a      	str	r2, [r3, #0]
 8012742:	f3bf 8f4f 	dsb	sy
 8012746:	f3bf 8f6f 	isb	sy
 801274a:	e014      	b.n	8012776 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801274c:	f107 0314 	add.w	r3, r7, #20
 8012750:	3304      	adds	r3, #4
 8012752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012754:	4619      	mov	r1, r3
 8012756:	68b8      	ldr	r0, [r7, #8]
 8012758:	f000 fcb8 	bl	80130cc <xQueueReceive>
 801275c:	4603      	mov	r3, r0
 801275e:	2b01      	cmp	r3, #1
 8012760:	d102      	bne.n	8012768 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8012762:	2310      	movs	r3, #16
 8012764:	617b      	str	r3, [r7, #20]
 8012766:	e006      	b.n	8012776 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801276a:	2b00      	cmp	r3, #0
 801276c:	d101      	bne.n	8012772 <osMessageGet+0xc6>
 801276e:	2300      	movs	r3, #0
 8012770:	e000      	b.n	8012774 <osMessageGet+0xc8>
 8012772:	2340      	movs	r3, #64	@ 0x40
 8012774:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	461c      	mov	r4, r3
 801277a:	f107 0314 	add.w	r3, r7, #20
 801277e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012782:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012786:	68f8      	ldr	r0, [r7, #12]
 8012788:	372c      	adds	r7, #44	@ 0x2c
 801278a:	46bd      	mov	sp, r7
 801278c:	bd90      	pop	{r4, r7, pc}
 801278e:	bf00      	nop
 8012790:	e000ed04 	.word	0xe000ed04

08012794 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012794:	b480      	push	{r7}
 8012796:	b083      	sub	sp, #12
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	f103 0208 	add.w	r2, r3, #8
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80127ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	f103 0208 	add.w	r2, r3, #8
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	f103 0208 	add.w	r2, r3, #8
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	2200      	movs	r2, #0
 80127c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80127c8:	bf00      	nop
 80127ca:	370c      	adds	r7, #12
 80127cc:	46bd      	mov	sp, r7
 80127ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d2:	4770      	bx	lr

080127d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80127d4:	b480      	push	{r7}
 80127d6:	b083      	sub	sp, #12
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	2200      	movs	r2, #0
 80127e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80127e2:	bf00      	nop
 80127e4:	370c      	adds	r7, #12
 80127e6:	46bd      	mov	sp, r7
 80127e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ec:	4770      	bx	lr

080127ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80127ee:	b480      	push	{r7}
 80127f0:	b085      	sub	sp, #20
 80127f2:	af00      	add	r7, sp, #0
 80127f4:	6078      	str	r0, [r7, #4]
 80127f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	685b      	ldr	r3, [r3, #4]
 80127fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80127fe:	683b      	ldr	r3, [r7, #0]
 8012800:	68fa      	ldr	r2, [r7, #12]
 8012802:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	689a      	ldr	r2, [r3, #8]
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	689b      	ldr	r3, [r3, #8]
 8012810:	683a      	ldr	r2, [r7, #0]
 8012812:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	683a      	ldr	r2, [r7, #0]
 8012818:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801281a:	683b      	ldr	r3, [r7, #0]
 801281c:	687a      	ldr	r2, [r7, #4]
 801281e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	1c5a      	adds	r2, r3, #1
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	601a      	str	r2, [r3, #0]
}
 801282a:	bf00      	nop
 801282c:	3714      	adds	r7, #20
 801282e:	46bd      	mov	sp, r7
 8012830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012834:	4770      	bx	lr

08012836 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012836:	b480      	push	{r7}
 8012838:	b085      	sub	sp, #20
 801283a:	af00      	add	r7, sp, #0
 801283c:	6078      	str	r0, [r7, #4]
 801283e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012840:	683b      	ldr	r3, [r7, #0]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012846:	68bb      	ldr	r3, [r7, #8]
 8012848:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801284c:	d103      	bne.n	8012856 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	691b      	ldr	r3, [r3, #16]
 8012852:	60fb      	str	r3, [r7, #12]
 8012854:	e00c      	b.n	8012870 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	3308      	adds	r3, #8
 801285a:	60fb      	str	r3, [r7, #12]
 801285c:	e002      	b.n	8012864 <vListInsert+0x2e>
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	685b      	ldr	r3, [r3, #4]
 8012862:	60fb      	str	r3, [r7, #12]
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	685b      	ldr	r3, [r3, #4]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	68ba      	ldr	r2, [r7, #8]
 801286c:	429a      	cmp	r2, r3
 801286e:	d2f6      	bcs.n	801285e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	685a      	ldr	r2, [r3, #4]
 8012874:	683b      	ldr	r3, [r7, #0]
 8012876:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012878:	683b      	ldr	r3, [r7, #0]
 801287a:	685b      	ldr	r3, [r3, #4]
 801287c:	683a      	ldr	r2, [r7, #0]
 801287e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012880:	683b      	ldr	r3, [r7, #0]
 8012882:	68fa      	ldr	r2, [r7, #12]
 8012884:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	683a      	ldr	r2, [r7, #0]
 801288a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801288c:	683b      	ldr	r3, [r7, #0]
 801288e:	687a      	ldr	r2, [r7, #4]
 8012890:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	1c5a      	adds	r2, r3, #1
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	601a      	str	r2, [r3, #0]
}
 801289c:	bf00      	nop
 801289e:	3714      	adds	r7, #20
 80128a0:	46bd      	mov	sp, r7
 80128a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a6:	4770      	bx	lr

080128a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80128a8:	b480      	push	{r7}
 80128aa:	b085      	sub	sp, #20
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	691b      	ldr	r3, [r3, #16]
 80128b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	685b      	ldr	r3, [r3, #4]
 80128ba:	687a      	ldr	r2, [r7, #4]
 80128bc:	6892      	ldr	r2, [r2, #8]
 80128be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	689b      	ldr	r3, [r3, #8]
 80128c4:	687a      	ldr	r2, [r7, #4]
 80128c6:	6852      	ldr	r2, [r2, #4]
 80128c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	685b      	ldr	r3, [r3, #4]
 80128ce:	687a      	ldr	r2, [r7, #4]
 80128d0:	429a      	cmp	r2, r3
 80128d2:	d103      	bne.n	80128dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	689a      	ldr	r2, [r3, #8]
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	2200      	movs	r2, #0
 80128e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	1e5a      	subs	r2, r3, #1
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	681b      	ldr	r3, [r3, #0]
}
 80128f0:	4618      	mov	r0, r3
 80128f2:	3714      	adds	r7, #20
 80128f4:	46bd      	mov	sp, r7
 80128f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fa:	4770      	bx	lr

080128fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b084      	sub	sp, #16
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
 8012904:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d10d      	bne.n	801292c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012914:	b672      	cpsid	i
 8012916:	f383 8811 	msr	BASEPRI, r3
 801291a:	f3bf 8f6f 	isb	sy
 801291e:	f3bf 8f4f 	dsb	sy
 8012922:	b662      	cpsie	i
 8012924:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012926:	bf00      	nop
 8012928:	bf00      	nop
 801292a:	e7fd      	b.n	8012928 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 801292c:	f002 f9ee 	bl	8014d0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	681a      	ldr	r2, [r3, #0]
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012938:	68f9      	ldr	r1, [r7, #12]
 801293a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801293c:	fb01 f303 	mul.w	r3, r1, r3
 8012940:	441a      	add	r2, r3
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	2200      	movs	r2, #0
 801294a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	681a      	ldr	r2, [r3, #0]
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	681a      	ldr	r2, [r3, #0]
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801295c:	3b01      	subs	r3, #1
 801295e:	68f9      	ldr	r1, [r7, #12]
 8012960:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012962:	fb01 f303 	mul.w	r3, r1, r3
 8012966:	441a      	add	r2, r3
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	22ff      	movs	r2, #255	@ 0xff
 8012970:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	22ff      	movs	r2, #255	@ 0xff
 8012978:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 801297c:	683b      	ldr	r3, [r7, #0]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d114      	bne.n	80129ac <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	691b      	ldr	r3, [r3, #16]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d01a      	beq.n	80129c0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	3310      	adds	r3, #16
 801298e:	4618      	mov	r0, r3
 8012990:	f001 fc9a 	bl	80142c8 <xTaskRemoveFromEventList>
 8012994:	4603      	mov	r3, r0
 8012996:	2b00      	cmp	r3, #0
 8012998:	d012      	beq.n	80129c0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801299a:	4b0d      	ldr	r3, [pc, #52]	@ (80129d0 <xQueueGenericReset+0xd4>)
 801299c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80129a0:	601a      	str	r2, [r3, #0]
 80129a2:	f3bf 8f4f 	dsb	sy
 80129a6:	f3bf 8f6f 	isb	sy
 80129aa:	e009      	b.n	80129c0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	3310      	adds	r3, #16
 80129b0:	4618      	mov	r0, r3
 80129b2:	f7ff feef 	bl	8012794 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	3324      	adds	r3, #36	@ 0x24
 80129ba:	4618      	mov	r0, r3
 80129bc:	f7ff feea 	bl	8012794 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80129c0:	f002 f9da 	bl	8014d78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80129c4:	2301      	movs	r3, #1
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	3710      	adds	r7, #16
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd80      	pop	{r7, pc}
 80129ce:	bf00      	nop
 80129d0:	e000ed04 	.word	0xe000ed04

080129d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b08e      	sub	sp, #56	@ 0x38
 80129d8:	af02      	add	r7, sp, #8
 80129da:	60f8      	str	r0, [r7, #12]
 80129dc:	60b9      	str	r1, [r7, #8]
 80129de:	607a      	str	r2, [r7, #4]
 80129e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d10d      	bne.n	8012a04 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80129e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129ec:	b672      	cpsid	i
 80129ee:	f383 8811 	msr	BASEPRI, r3
 80129f2:	f3bf 8f6f 	isb	sy
 80129f6:	f3bf 8f4f 	dsb	sy
 80129fa:	b662      	cpsie	i
 80129fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80129fe:	bf00      	nop
 8012a00:	bf00      	nop
 8012a02:	e7fd      	b.n	8012a00 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012a04:	683b      	ldr	r3, [r7, #0]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d10d      	bne.n	8012a26 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8012a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a0e:	b672      	cpsid	i
 8012a10:	f383 8811 	msr	BASEPRI, r3
 8012a14:	f3bf 8f6f 	isb	sy
 8012a18:	f3bf 8f4f 	dsb	sy
 8012a1c:	b662      	cpsie	i
 8012a1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012a20:	bf00      	nop
 8012a22:	bf00      	nop
 8012a24:	e7fd      	b.n	8012a22 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d002      	beq.n	8012a32 <xQueueGenericCreateStatic+0x5e>
 8012a2c:	68bb      	ldr	r3, [r7, #8]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d001      	beq.n	8012a36 <xQueueGenericCreateStatic+0x62>
 8012a32:	2301      	movs	r3, #1
 8012a34:	e000      	b.n	8012a38 <xQueueGenericCreateStatic+0x64>
 8012a36:	2300      	movs	r3, #0
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d10d      	bne.n	8012a58 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8012a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a40:	b672      	cpsid	i
 8012a42:	f383 8811 	msr	BASEPRI, r3
 8012a46:	f3bf 8f6f 	isb	sy
 8012a4a:	f3bf 8f4f 	dsb	sy
 8012a4e:	b662      	cpsie	i
 8012a50:	623b      	str	r3, [r7, #32]
}
 8012a52:	bf00      	nop
 8012a54:	bf00      	nop
 8012a56:	e7fd      	b.n	8012a54 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d102      	bne.n	8012a64 <xQueueGenericCreateStatic+0x90>
 8012a5e:	68bb      	ldr	r3, [r7, #8]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d101      	bne.n	8012a68 <xQueueGenericCreateStatic+0x94>
 8012a64:	2301      	movs	r3, #1
 8012a66:	e000      	b.n	8012a6a <xQueueGenericCreateStatic+0x96>
 8012a68:	2300      	movs	r3, #0
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d10d      	bne.n	8012a8a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8012a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a72:	b672      	cpsid	i
 8012a74:	f383 8811 	msr	BASEPRI, r3
 8012a78:	f3bf 8f6f 	isb	sy
 8012a7c:	f3bf 8f4f 	dsb	sy
 8012a80:	b662      	cpsie	i
 8012a82:	61fb      	str	r3, [r7, #28]
}
 8012a84:	bf00      	nop
 8012a86:	bf00      	nop
 8012a88:	e7fd      	b.n	8012a86 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012a8a:	2348      	movs	r3, #72	@ 0x48
 8012a8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012a8e:	697b      	ldr	r3, [r7, #20]
 8012a90:	2b48      	cmp	r3, #72	@ 0x48
 8012a92:	d00d      	beq.n	8012ab0 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8012a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a98:	b672      	cpsid	i
 8012a9a:	f383 8811 	msr	BASEPRI, r3
 8012a9e:	f3bf 8f6f 	isb	sy
 8012aa2:	f3bf 8f4f 	dsb	sy
 8012aa6:	b662      	cpsie	i
 8012aa8:	61bb      	str	r3, [r7, #24]
}
 8012aaa:	bf00      	nop
 8012aac:	bf00      	nop
 8012aae:	e7fd      	b.n	8012aac <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012ab0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012ab2:	683b      	ldr	r3, [r7, #0]
 8012ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8012ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d00d      	beq.n	8012ad8 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012abe:	2201      	movs	r2, #1
 8012ac0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012ac4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8012ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012aca:	9300      	str	r3, [sp, #0]
 8012acc:	4613      	mov	r3, r2
 8012ace:	687a      	ldr	r2, [r7, #4]
 8012ad0:	68b9      	ldr	r1, [r7, #8]
 8012ad2:	68f8      	ldr	r0, [r7, #12]
 8012ad4:	f000 f848 	bl	8012b68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8012ada:	4618      	mov	r0, r3
 8012adc:	3730      	adds	r7, #48	@ 0x30
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}

08012ae2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012ae2:	b580      	push	{r7, lr}
 8012ae4:	b08a      	sub	sp, #40	@ 0x28
 8012ae6:	af02      	add	r7, sp, #8
 8012ae8:	60f8      	str	r0, [r7, #12]
 8012aea:	60b9      	str	r1, [r7, #8]
 8012aec:	4613      	mov	r3, r2
 8012aee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d10d      	bne.n	8012b12 <xQueueGenericCreate+0x30>
	__asm volatile
 8012af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012afa:	b672      	cpsid	i
 8012afc:	f383 8811 	msr	BASEPRI, r3
 8012b00:	f3bf 8f6f 	isb	sy
 8012b04:	f3bf 8f4f 	dsb	sy
 8012b08:	b662      	cpsie	i
 8012b0a:	613b      	str	r3, [r7, #16]
}
 8012b0c:	bf00      	nop
 8012b0e:	bf00      	nop
 8012b10:	e7fd      	b.n	8012b0e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012b12:	68bb      	ldr	r3, [r7, #8]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d102      	bne.n	8012b1e <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012b18:	2300      	movs	r3, #0
 8012b1a:	61fb      	str	r3, [r7, #28]
 8012b1c:	e004      	b.n	8012b28 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	68ba      	ldr	r2, [r7, #8]
 8012b22:	fb02 f303 	mul.w	r3, r2, r3
 8012b26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012b28:	69fb      	ldr	r3, [r7, #28]
 8012b2a:	3348      	adds	r3, #72	@ 0x48
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f002 fa1b 	bl	8014f68 <pvPortMalloc>
 8012b32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012b34:	69bb      	ldr	r3, [r7, #24]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d011      	beq.n	8012b5e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012b3a:	69bb      	ldr	r3, [r7, #24]
 8012b3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012b3e:	697b      	ldr	r3, [r7, #20]
 8012b40:	3348      	adds	r3, #72	@ 0x48
 8012b42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012b44:	69bb      	ldr	r3, [r7, #24]
 8012b46:	2200      	movs	r2, #0
 8012b48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012b4c:	79fa      	ldrb	r2, [r7, #7]
 8012b4e:	69bb      	ldr	r3, [r7, #24]
 8012b50:	9300      	str	r3, [sp, #0]
 8012b52:	4613      	mov	r3, r2
 8012b54:	697a      	ldr	r2, [r7, #20]
 8012b56:	68b9      	ldr	r1, [r7, #8]
 8012b58:	68f8      	ldr	r0, [r7, #12]
 8012b5a:	f000 f805 	bl	8012b68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012b5e:	69bb      	ldr	r3, [r7, #24]
	}
 8012b60:	4618      	mov	r0, r3
 8012b62:	3720      	adds	r7, #32
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}

08012b68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b084      	sub	sp, #16
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	60f8      	str	r0, [r7, #12]
 8012b70:	60b9      	str	r1, [r7, #8]
 8012b72:	607a      	str	r2, [r7, #4]
 8012b74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012b76:	68bb      	ldr	r3, [r7, #8]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d103      	bne.n	8012b84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012b7c:	69bb      	ldr	r3, [r7, #24]
 8012b7e:	69ba      	ldr	r2, [r7, #24]
 8012b80:	601a      	str	r2, [r3, #0]
 8012b82:	e002      	b.n	8012b8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012b84:	69bb      	ldr	r3, [r7, #24]
 8012b86:	687a      	ldr	r2, [r7, #4]
 8012b88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012b8a:	69bb      	ldr	r3, [r7, #24]
 8012b8c:	68fa      	ldr	r2, [r7, #12]
 8012b8e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012b90:	69bb      	ldr	r3, [r7, #24]
 8012b92:	68ba      	ldr	r2, [r7, #8]
 8012b94:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012b96:	2101      	movs	r1, #1
 8012b98:	69b8      	ldr	r0, [r7, #24]
 8012b9a:	f7ff feaf 	bl	80128fc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012b9e:	bf00      	nop
 8012ba0:	3710      	adds	r7, #16
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	bd80      	pop	{r7, pc}

08012ba6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8012ba6:	b580      	push	{r7, lr}
 8012ba8:	b082      	sub	sp, #8
 8012baa:	af00      	add	r7, sp, #0
 8012bac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d00e      	beq.n	8012bd2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	2200      	movs	r2, #0
 8012bca:	2100      	movs	r1, #0
 8012bcc:	6878      	ldr	r0, [r7, #4]
 8012bce:	f000 f837 	bl	8012c40 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8012bd2:	bf00      	nop
 8012bd4:	3708      	adds	r7, #8
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}

08012bda <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8012bda:	b580      	push	{r7, lr}
 8012bdc:	b086      	sub	sp, #24
 8012bde:	af00      	add	r7, sp, #0
 8012be0:	4603      	mov	r3, r0
 8012be2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012be4:	2301      	movs	r3, #1
 8012be6:	617b      	str	r3, [r7, #20]
 8012be8:	2300      	movs	r3, #0
 8012bea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012bec:	79fb      	ldrb	r3, [r7, #7]
 8012bee:	461a      	mov	r2, r3
 8012bf0:	6939      	ldr	r1, [r7, #16]
 8012bf2:	6978      	ldr	r0, [r7, #20]
 8012bf4:	f7ff ff75 	bl	8012ae2 <xQueueGenericCreate>
 8012bf8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012bfa:	68f8      	ldr	r0, [r7, #12]
 8012bfc:	f7ff ffd3 	bl	8012ba6 <prvInitialiseMutex>

		return xNewQueue;
 8012c00:	68fb      	ldr	r3, [r7, #12]
	}
 8012c02:	4618      	mov	r0, r3
 8012c04:	3718      	adds	r7, #24
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd80      	pop	{r7, pc}

08012c0a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8012c0a:	b580      	push	{r7, lr}
 8012c0c:	b088      	sub	sp, #32
 8012c0e:	af02      	add	r7, sp, #8
 8012c10:	4603      	mov	r3, r0
 8012c12:	6039      	str	r1, [r7, #0]
 8012c14:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012c16:	2301      	movs	r3, #1
 8012c18:	617b      	str	r3, [r7, #20]
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8012c1e:	79fb      	ldrb	r3, [r7, #7]
 8012c20:	9300      	str	r3, [sp, #0]
 8012c22:	683b      	ldr	r3, [r7, #0]
 8012c24:	2200      	movs	r2, #0
 8012c26:	6939      	ldr	r1, [r7, #16]
 8012c28:	6978      	ldr	r0, [r7, #20]
 8012c2a:	f7ff fed3 	bl	80129d4 <xQueueGenericCreateStatic>
 8012c2e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012c30:	68f8      	ldr	r0, [r7, #12]
 8012c32:	f7ff ffb8 	bl	8012ba6 <prvInitialiseMutex>

		return xNewQueue;
 8012c36:	68fb      	ldr	r3, [r7, #12]
	}
 8012c38:	4618      	mov	r0, r3
 8012c3a:	3718      	adds	r7, #24
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bd80      	pop	{r7, pc}

08012c40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b08e      	sub	sp, #56	@ 0x38
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	60f8      	str	r0, [r7, #12]
 8012c48:	60b9      	str	r1, [r7, #8]
 8012c4a:	607a      	str	r2, [r7, #4]
 8012c4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012c4e:	2300      	movs	r3, #0
 8012c50:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8012c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d10d      	bne.n	8012c78 <xQueueGenericSend+0x38>
	__asm volatile
 8012c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c60:	b672      	cpsid	i
 8012c62:	f383 8811 	msr	BASEPRI, r3
 8012c66:	f3bf 8f6f 	isb	sy
 8012c6a:	f3bf 8f4f 	dsb	sy
 8012c6e:	b662      	cpsie	i
 8012c70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012c72:	bf00      	nop
 8012c74:	bf00      	nop
 8012c76:	e7fd      	b.n	8012c74 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012c78:	68bb      	ldr	r3, [r7, #8]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d103      	bne.n	8012c86 <xQueueGenericSend+0x46>
 8012c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d101      	bne.n	8012c8a <xQueueGenericSend+0x4a>
 8012c86:	2301      	movs	r3, #1
 8012c88:	e000      	b.n	8012c8c <xQueueGenericSend+0x4c>
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d10d      	bne.n	8012cac <xQueueGenericSend+0x6c>
	__asm volatile
 8012c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c94:	b672      	cpsid	i
 8012c96:	f383 8811 	msr	BASEPRI, r3
 8012c9a:	f3bf 8f6f 	isb	sy
 8012c9e:	f3bf 8f4f 	dsb	sy
 8012ca2:	b662      	cpsie	i
 8012ca4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012ca6:	bf00      	nop
 8012ca8:	bf00      	nop
 8012caa:	e7fd      	b.n	8012ca8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012cac:	683b      	ldr	r3, [r7, #0]
 8012cae:	2b02      	cmp	r3, #2
 8012cb0:	d103      	bne.n	8012cba <xQueueGenericSend+0x7a>
 8012cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012cb6:	2b01      	cmp	r3, #1
 8012cb8:	d101      	bne.n	8012cbe <xQueueGenericSend+0x7e>
 8012cba:	2301      	movs	r3, #1
 8012cbc:	e000      	b.n	8012cc0 <xQueueGenericSend+0x80>
 8012cbe:	2300      	movs	r3, #0
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d10d      	bne.n	8012ce0 <xQueueGenericSend+0xa0>
	__asm volatile
 8012cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cc8:	b672      	cpsid	i
 8012cca:	f383 8811 	msr	BASEPRI, r3
 8012cce:	f3bf 8f6f 	isb	sy
 8012cd2:	f3bf 8f4f 	dsb	sy
 8012cd6:	b662      	cpsie	i
 8012cd8:	623b      	str	r3, [r7, #32]
}
 8012cda:	bf00      	nop
 8012cdc:	bf00      	nop
 8012cde:	e7fd      	b.n	8012cdc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012ce0:	f001 fcc0 	bl	8014664 <xTaskGetSchedulerState>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d102      	bne.n	8012cf0 <xQueueGenericSend+0xb0>
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d101      	bne.n	8012cf4 <xQueueGenericSend+0xb4>
 8012cf0:	2301      	movs	r3, #1
 8012cf2:	e000      	b.n	8012cf6 <xQueueGenericSend+0xb6>
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d10d      	bne.n	8012d16 <xQueueGenericSend+0xd6>
	__asm volatile
 8012cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cfe:	b672      	cpsid	i
 8012d00:	f383 8811 	msr	BASEPRI, r3
 8012d04:	f3bf 8f6f 	isb	sy
 8012d08:	f3bf 8f4f 	dsb	sy
 8012d0c:	b662      	cpsie	i
 8012d0e:	61fb      	str	r3, [r7, #28]
}
 8012d10:	bf00      	nop
 8012d12:	bf00      	nop
 8012d14:	e7fd      	b.n	8012d12 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012d16:	f001 fff9 	bl	8014d0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d22:	429a      	cmp	r2, r3
 8012d24:	d302      	bcc.n	8012d2c <xQueueGenericSend+0xec>
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	2b02      	cmp	r3, #2
 8012d2a:	d129      	bne.n	8012d80 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012d2c:	683a      	ldr	r2, [r7, #0]
 8012d2e:	68b9      	ldr	r1, [r7, #8]
 8012d30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012d32:	f000 fc91 	bl	8013658 <prvCopyDataToQueue>
 8012d36:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d010      	beq.n	8012d62 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d42:	3324      	adds	r3, #36	@ 0x24
 8012d44:	4618      	mov	r0, r3
 8012d46:	f001 fabf 	bl	80142c8 <xTaskRemoveFromEventList>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d013      	beq.n	8012d78 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012d50:	4b3f      	ldr	r3, [pc, #252]	@ (8012e50 <xQueueGenericSend+0x210>)
 8012d52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012d56:	601a      	str	r2, [r3, #0]
 8012d58:	f3bf 8f4f 	dsb	sy
 8012d5c:	f3bf 8f6f 	isb	sy
 8012d60:	e00a      	b.n	8012d78 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d007      	beq.n	8012d78 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012d68:	4b39      	ldr	r3, [pc, #228]	@ (8012e50 <xQueueGenericSend+0x210>)
 8012d6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012d6e:	601a      	str	r2, [r3, #0]
 8012d70:	f3bf 8f4f 	dsb	sy
 8012d74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012d78:	f001 fffe 	bl	8014d78 <vPortExitCritical>
				return pdPASS;
 8012d7c:	2301      	movs	r3, #1
 8012d7e:	e063      	b.n	8012e48 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d103      	bne.n	8012d8e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012d86:	f001 fff7 	bl	8014d78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	e05c      	b.n	8012e48 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d106      	bne.n	8012da2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012d94:	f107 0314 	add.w	r3, r7, #20
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f001 fafb 	bl	8014394 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012d9e:	2301      	movs	r3, #1
 8012da0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012da2:	f001 ffe9 	bl	8014d78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012da6:	f001 f875 	bl	8013e94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012daa:	f001 ffaf 	bl	8014d0c <vPortEnterCritical>
 8012dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012db0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012db4:	b25b      	sxtb	r3, r3
 8012db6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012dba:	d103      	bne.n	8012dc4 <xQueueGenericSend+0x184>
 8012dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012dc6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012dca:	b25b      	sxtb	r3, r3
 8012dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012dd0:	d103      	bne.n	8012dda <xQueueGenericSend+0x19a>
 8012dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012dda:	f001 ffcd 	bl	8014d78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012dde:	1d3a      	adds	r2, r7, #4
 8012de0:	f107 0314 	add.w	r3, r7, #20
 8012de4:	4611      	mov	r1, r2
 8012de6:	4618      	mov	r0, r3
 8012de8:	f001 faea 	bl	80143c0 <xTaskCheckForTimeOut>
 8012dec:	4603      	mov	r3, r0
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d124      	bne.n	8012e3c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012df2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012df4:	f000 fd28 	bl	8013848 <prvIsQueueFull>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d018      	beq.n	8012e30 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e00:	3310      	adds	r3, #16
 8012e02:	687a      	ldr	r2, [r7, #4]
 8012e04:	4611      	mov	r1, r2
 8012e06:	4618      	mov	r0, r3
 8012e08:	f001 fa36 	bl	8014278 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012e0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012e0e:	f000 fcb3 	bl	8013778 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012e12:	f001 f84d 	bl	8013eb0 <xTaskResumeAll>
 8012e16:	4603      	mov	r3, r0
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	f47f af7c 	bne.w	8012d16 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8012e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8012e50 <xQueueGenericSend+0x210>)
 8012e20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012e24:	601a      	str	r2, [r3, #0]
 8012e26:	f3bf 8f4f 	dsb	sy
 8012e2a:	f3bf 8f6f 	isb	sy
 8012e2e:	e772      	b.n	8012d16 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012e30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012e32:	f000 fca1 	bl	8013778 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012e36:	f001 f83b 	bl	8013eb0 <xTaskResumeAll>
 8012e3a:	e76c      	b.n	8012d16 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012e3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012e3e:	f000 fc9b 	bl	8013778 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012e42:	f001 f835 	bl	8013eb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012e46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012e48:	4618      	mov	r0, r3
 8012e4a:	3738      	adds	r7, #56	@ 0x38
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	bd80      	pop	{r7, pc}
 8012e50:	e000ed04 	.word	0xe000ed04

08012e54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b08e      	sub	sp, #56	@ 0x38
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	60f8      	str	r0, [r7, #12]
 8012e5c:	60b9      	str	r1, [r7, #8]
 8012e5e:	607a      	str	r2, [r7, #4]
 8012e60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8012e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d10d      	bne.n	8012e88 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8012e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e70:	b672      	cpsid	i
 8012e72:	f383 8811 	msr	BASEPRI, r3
 8012e76:	f3bf 8f6f 	isb	sy
 8012e7a:	f3bf 8f4f 	dsb	sy
 8012e7e:	b662      	cpsie	i
 8012e80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012e82:	bf00      	nop
 8012e84:	bf00      	nop
 8012e86:	e7fd      	b.n	8012e84 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012e88:	68bb      	ldr	r3, [r7, #8]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d103      	bne.n	8012e96 <xQueueGenericSendFromISR+0x42>
 8012e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d101      	bne.n	8012e9a <xQueueGenericSendFromISR+0x46>
 8012e96:	2301      	movs	r3, #1
 8012e98:	e000      	b.n	8012e9c <xQueueGenericSendFromISR+0x48>
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d10d      	bne.n	8012ebc <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8012ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ea4:	b672      	cpsid	i
 8012ea6:	f383 8811 	msr	BASEPRI, r3
 8012eaa:	f3bf 8f6f 	isb	sy
 8012eae:	f3bf 8f4f 	dsb	sy
 8012eb2:	b662      	cpsie	i
 8012eb4:	623b      	str	r3, [r7, #32]
}
 8012eb6:	bf00      	nop
 8012eb8:	bf00      	nop
 8012eba:	e7fd      	b.n	8012eb8 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012ebc:	683b      	ldr	r3, [r7, #0]
 8012ebe:	2b02      	cmp	r3, #2
 8012ec0:	d103      	bne.n	8012eca <xQueueGenericSendFromISR+0x76>
 8012ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012ec6:	2b01      	cmp	r3, #1
 8012ec8:	d101      	bne.n	8012ece <xQueueGenericSendFromISR+0x7a>
 8012eca:	2301      	movs	r3, #1
 8012ecc:	e000      	b.n	8012ed0 <xQueueGenericSendFromISR+0x7c>
 8012ece:	2300      	movs	r3, #0
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d10d      	bne.n	8012ef0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8012ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ed8:	b672      	cpsid	i
 8012eda:	f383 8811 	msr	BASEPRI, r3
 8012ede:	f3bf 8f6f 	isb	sy
 8012ee2:	f3bf 8f4f 	dsb	sy
 8012ee6:	b662      	cpsie	i
 8012ee8:	61fb      	str	r3, [r7, #28]
}
 8012eea:	bf00      	nop
 8012eec:	bf00      	nop
 8012eee:	e7fd      	b.n	8012eec <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012ef0:	f001 fff4 	bl	8014edc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012ef4:	f3ef 8211 	mrs	r2, BASEPRI
 8012ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012efc:	b672      	cpsid	i
 8012efe:	f383 8811 	msr	BASEPRI, r3
 8012f02:	f3bf 8f6f 	isb	sy
 8012f06:	f3bf 8f4f 	dsb	sy
 8012f0a:	b662      	cpsie	i
 8012f0c:	61ba      	str	r2, [r7, #24]
 8012f0e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012f10:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012f1c:	429a      	cmp	r2, r3
 8012f1e:	d302      	bcc.n	8012f26 <xQueueGenericSendFromISR+0xd2>
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	2b02      	cmp	r3, #2
 8012f24:	d12c      	bne.n	8012f80 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012f2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012f30:	683a      	ldr	r2, [r7, #0]
 8012f32:	68b9      	ldr	r1, [r7, #8]
 8012f34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012f36:	f000 fb8f 	bl	8013658 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012f3a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8012f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012f42:	d112      	bne.n	8012f6a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d016      	beq.n	8012f7a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f4e:	3324      	adds	r3, #36	@ 0x24
 8012f50:	4618      	mov	r0, r3
 8012f52:	f001 f9b9 	bl	80142c8 <xTaskRemoveFromEventList>
 8012f56:	4603      	mov	r3, r0
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d00e      	beq.n	8012f7a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d00b      	beq.n	8012f7a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	2201      	movs	r2, #1
 8012f66:	601a      	str	r2, [r3, #0]
 8012f68:	e007      	b.n	8012f7a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012f6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8012f6e:	3301      	adds	r3, #1
 8012f70:	b2db      	uxtb	r3, r3
 8012f72:	b25a      	sxtb	r2, r3
 8012f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8012f7a:	2301      	movs	r3, #1
 8012f7c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8012f7e:	e001      	b.n	8012f84 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012f80:	2300      	movs	r3, #0
 8012f82:	637b      	str	r3, [r7, #52]	@ 0x34
 8012f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f86:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012f88:	693b      	ldr	r3, [r7, #16]
 8012f8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012f8e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8012f92:	4618      	mov	r0, r3
 8012f94:	3738      	adds	r7, #56	@ 0x38
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}

08012f9a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012f9a:	b580      	push	{r7, lr}
 8012f9c:	b08e      	sub	sp, #56	@ 0x38
 8012f9e:	af00      	add	r7, sp, #0
 8012fa0:	6078      	str	r0, [r7, #4]
 8012fa2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d10d      	bne.n	8012fca <xQueueGiveFromISR+0x30>
	__asm volatile
 8012fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fb2:	b672      	cpsid	i
 8012fb4:	f383 8811 	msr	BASEPRI, r3
 8012fb8:	f3bf 8f6f 	isb	sy
 8012fbc:	f3bf 8f4f 	dsb	sy
 8012fc0:	b662      	cpsie	i
 8012fc2:	623b      	str	r3, [r7, #32]
}
 8012fc4:	bf00      	nop
 8012fc6:	bf00      	nop
 8012fc8:	e7fd      	b.n	8012fc6 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d00d      	beq.n	8012fee <xQueueGiveFromISR+0x54>
	__asm volatile
 8012fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fd6:	b672      	cpsid	i
 8012fd8:	f383 8811 	msr	BASEPRI, r3
 8012fdc:	f3bf 8f6f 	isb	sy
 8012fe0:	f3bf 8f4f 	dsb	sy
 8012fe4:	b662      	cpsie	i
 8012fe6:	61fb      	str	r3, [r7, #28]
}
 8012fe8:	bf00      	nop
 8012fea:	bf00      	nop
 8012fec:	e7fd      	b.n	8012fea <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d103      	bne.n	8012ffe <xQueueGiveFromISR+0x64>
 8012ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ff8:	689b      	ldr	r3, [r3, #8]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d101      	bne.n	8013002 <xQueueGiveFromISR+0x68>
 8012ffe:	2301      	movs	r3, #1
 8013000:	e000      	b.n	8013004 <xQueueGiveFromISR+0x6a>
 8013002:	2300      	movs	r3, #0
 8013004:	2b00      	cmp	r3, #0
 8013006:	d10d      	bne.n	8013024 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8013008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801300c:	b672      	cpsid	i
 801300e:	f383 8811 	msr	BASEPRI, r3
 8013012:	f3bf 8f6f 	isb	sy
 8013016:	f3bf 8f4f 	dsb	sy
 801301a:	b662      	cpsie	i
 801301c:	61bb      	str	r3, [r7, #24]
}
 801301e:	bf00      	nop
 8013020:	bf00      	nop
 8013022:	e7fd      	b.n	8013020 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013024:	f001 ff5a 	bl	8014edc <vPortValidateInterruptPriority>
	__asm volatile
 8013028:	f3ef 8211 	mrs	r2, BASEPRI
 801302c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013030:	b672      	cpsid	i
 8013032:	f383 8811 	msr	BASEPRI, r3
 8013036:	f3bf 8f6f 	isb	sy
 801303a:	f3bf 8f4f 	dsb	sy
 801303e:	b662      	cpsie	i
 8013040:	617a      	str	r2, [r7, #20]
 8013042:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013044:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013046:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801304a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801304c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801304e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013052:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013054:	429a      	cmp	r2, r3
 8013056:	d22b      	bcs.n	80130b0 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801305a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801305e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013064:	1c5a      	adds	r2, r3, #1
 8013066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013068:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801306a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801306e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013072:	d112      	bne.n	801309a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013078:	2b00      	cmp	r3, #0
 801307a:	d016      	beq.n	80130aa <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801307c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801307e:	3324      	adds	r3, #36	@ 0x24
 8013080:	4618      	mov	r0, r3
 8013082:	f001 f921 	bl	80142c8 <xTaskRemoveFromEventList>
 8013086:	4603      	mov	r3, r0
 8013088:	2b00      	cmp	r3, #0
 801308a:	d00e      	beq.n	80130aa <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801308c:	683b      	ldr	r3, [r7, #0]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d00b      	beq.n	80130aa <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013092:	683b      	ldr	r3, [r7, #0]
 8013094:	2201      	movs	r2, #1
 8013096:	601a      	str	r2, [r3, #0]
 8013098:	e007      	b.n	80130aa <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801309a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801309e:	3301      	adds	r3, #1
 80130a0:	b2db      	uxtb	r3, r3
 80130a2:	b25a      	sxtb	r2, r3
 80130a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80130aa:	2301      	movs	r3, #1
 80130ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80130ae:	e001      	b.n	80130b4 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80130b0:	2300      	movs	r3, #0
 80130b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80130b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130b6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	f383 8811 	msr	BASEPRI, r3
}
 80130be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80130c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80130c2:	4618      	mov	r0, r3
 80130c4:	3738      	adds	r7, #56	@ 0x38
 80130c6:	46bd      	mov	sp, r7
 80130c8:	bd80      	pop	{r7, pc}
	...

080130cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b08c      	sub	sp, #48	@ 0x30
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	60f8      	str	r0, [r7, #12]
 80130d4:	60b9      	str	r1, [r7, #8]
 80130d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80130d8:	2300      	movs	r3, #0
 80130da:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80130e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d10d      	bne.n	8013102 <xQueueReceive+0x36>
	__asm volatile
 80130e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130ea:	b672      	cpsid	i
 80130ec:	f383 8811 	msr	BASEPRI, r3
 80130f0:	f3bf 8f6f 	isb	sy
 80130f4:	f3bf 8f4f 	dsb	sy
 80130f8:	b662      	cpsie	i
 80130fa:	623b      	str	r3, [r7, #32]
}
 80130fc:	bf00      	nop
 80130fe:	bf00      	nop
 8013100:	e7fd      	b.n	80130fe <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013102:	68bb      	ldr	r3, [r7, #8]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d103      	bne.n	8013110 <xQueueReceive+0x44>
 8013108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801310a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801310c:	2b00      	cmp	r3, #0
 801310e:	d101      	bne.n	8013114 <xQueueReceive+0x48>
 8013110:	2301      	movs	r3, #1
 8013112:	e000      	b.n	8013116 <xQueueReceive+0x4a>
 8013114:	2300      	movs	r3, #0
 8013116:	2b00      	cmp	r3, #0
 8013118:	d10d      	bne.n	8013136 <xQueueReceive+0x6a>
	__asm volatile
 801311a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801311e:	b672      	cpsid	i
 8013120:	f383 8811 	msr	BASEPRI, r3
 8013124:	f3bf 8f6f 	isb	sy
 8013128:	f3bf 8f4f 	dsb	sy
 801312c:	b662      	cpsie	i
 801312e:	61fb      	str	r3, [r7, #28]
}
 8013130:	bf00      	nop
 8013132:	bf00      	nop
 8013134:	e7fd      	b.n	8013132 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013136:	f001 fa95 	bl	8014664 <xTaskGetSchedulerState>
 801313a:	4603      	mov	r3, r0
 801313c:	2b00      	cmp	r3, #0
 801313e:	d102      	bne.n	8013146 <xQueueReceive+0x7a>
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d101      	bne.n	801314a <xQueueReceive+0x7e>
 8013146:	2301      	movs	r3, #1
 8013148:	e000      	b.n	801314c <xQueueReceive+0x80>
 801314a:	2300      	movs	r3, #0
 801314c:	2b00      	cmp	r3, #0
 801314e:	d10d      	bne.n	801316c <xQueueReceive+0xa0>
	__asm volatile
 8013150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013154:	b672      	cpsid	i
 8013156:	f383 8811 	msr	BASEPRI, r3
 801315a:	f3bf 8f6f 	isb	sy
 801315e:	f3bf 8f4f 	dsb	sy
 8013162:	b662      	cpsie	i
 8013164:	61bb      	str	r3, [r7, #24]
}
 8013166:	bf00      	nop
 8013168:	bf00      	nop
 801316a:	e7fd      	b.n	8013168 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801316c:	f001 fdce 	bl	8014d0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013174:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013178:	2b00      	cmp	r3, #0
 801317a:	d01f      	beq.n	80131bc <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801317c:	68b9      	ldr	r1, [r7, #8]
 801317e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013180:	f000 fad4 	bl	801372c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013186:	1e5a      	subs	r2, r3, #1
 8013188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801318a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801318c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801318e:	691b      	ldr	r3, [r3, #16]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d00f      	beq.n	80131b4 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013196:	3310      	adds	r3, #16
 8013198:	4618      	mov	r0, r3
 801319a:	f001 f895 	bl	80142c8 <xTaskRemoveFromEventList>
 801319e:	4603      	mov	r3, r0
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d007      	beq.n	80131b4 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80131a4:	4b3c      	ldr	r3, [pc, #240]	@ (8013298 <xQueueReceive+0x1cc>)
 80131a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80131aa:	601a      	str	r2, [r3, #0]
 80131ac:	f3bf 8f4f 	dsb	sy
 80131b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80131b4:	f001 fde0 	bl	8014d78 <vPortExitCritical>
				return pdPASS;
 80131b8:	2301      	movs	r3, #1
 80131ba:	e069      	b.n	8013290 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d103      	bne.n	80131ca <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80131c2:	f001 fdd9 	bl	8014d78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80131c6:	2300      	movs	r3, #0
 80131c8:	e062      	b.n	8013290 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80131ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d106      	bne.n	80131de <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80131d0:	f107 0310 	add.w	r3, r7, #16
 80131d4:	4618      	mov	r0, r3
 80131d6:	f001 f8dd 	bl	8014394 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80131da:	2301      	movs	r3, #1
 80131dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80131de:	f001 fdcb 	bl	8014d78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80131e2:	f000 fe57 	bl	8013e94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80131e6:	f001 fd91 	bl	8014d0c <vPortEnterCritical>
 80131ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80131f0:	b25b      	sxtb	r3, r3
 80131f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80131f6:	d103      	bne.n	8013200 <xQueueReceive+0x134>
 80131f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131fa:	2200      	movs	r2, #0
 80131fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013202:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013206:	b25b      	sxtb	r3, r3
 8013208:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801320c:	d103      	bne.n	8013216 <xQueueReceive+0x14a>
 801320e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013210:	2200      	movs	r2, #0
 8013212:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013216:	f001 fdaf 	bl	8014d78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801321a:	1d3a      	adds	r2, r7, #4
 801321c:	f107 0310 	add.w	r3, r7, #16
 8013220:	4611      	mov	r1, r2
 8013222:	4618      	mov	r0, r3
 8013224:	f001 f8cc 	bl	80143c0 <xTaskCheckForTimeOut>
 8013228:	4603      	mov	r3, r0
 801322a:	2b00      	cmp	r3, #0
 801322c:	d123      	bne.n	8013276 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801322e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013230:	f000 faf4 	bl	801381c <prvIsQueueEmpty>
 8013234:	4603      	mov	r3, r0
 8013236:	2b00      	cmp	r3, #0
 8013238:	d017      	beq.n	801326a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801323a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801323c:	3324      	adds	r3, #36	@ 0x24
 801323e:	687a      	ldr	r2, [r7, #4]
 8013240:	4611      	mov	r1, r2
 8013242:	4618      	mov	r0, r3
 8013244:	f001 f818 	bl	8014278 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013248:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801324a:	f000 fa95 	bl	8013778 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801324e:	f000 fe2f 	bl	8013eb0 <xTaskResumeAll>
 8013252:	4603      	mov	r3, r0
 8013254:	2b00      	cmp	r3, #0
 8013256:	d189      	bne.n	801316c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8013258:	4b0f      	ldr	r3, [pc, #60]	@ (8013298 <xQueueReceive+0x1cc>)
 801325a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801325e:	601a      	str	r2, [r3, #0]
 8013260:	f3bf 8f4f 	dsb	sy
 8013264:	f3bf 8f6f 	isb	sy
 8013268:	e780      	b.n	801316c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801326a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801326c:	f000 fa84 	bl	8013778 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013270:	f000 fe1e 	bl	8013eb0 <xTaskResumeAll>
 8013274:	e77a      	b.n	801316c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013276:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013278:	f000 fa7e 	bl	8013778 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801327c:	f000 fe18 	bl	8013eb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013280:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013282:	f000 facb 	bl	801381c <prvIsQueueEmpty>
 8013286:	4603      	mov	r3, r0
 8013288:	2b00      	cmp	r3, #0
 801328a:	f43f af6f 	beq.w	801316c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801328e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013290:	4618      	mov	r0, r3
 8013292:	3730      	adds	r7, #48	@ 0x30
 8013294:	46bd      	mov	sp, r7
 8013296:	bd80      	pop	{r7, pc}
 8013298:	e000ed04 	.word	0xe000ed04

0801329c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b08e      	sub	sp, #56	@ 0x38
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
 80132a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80132a6:	2300      	movs	r3, #0
 80132a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80132ae:	2300      	movs	r3, #0
 80132b0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80132b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d10d      	bne.n	80132d4 <xQueueSemaphoreTake+0x38>
	__asm volatile
 80132b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132bc:	b672      	cpsid	i
 80132be:	f383 8811 	msr	BASEPRI, r3
 80132c2:	f3bf 8f6f 	isb	sy
 80132c6:	f3bf 8f4f 	dsb	sy
 80132ca:	b662      	cpsie	i
 80132cc:	623b      	str	r3, [r7, #32]
}
 80132ce:	bf00      	nop
 80132d0:	bf00      	nop
 80132d2:	e7fd      	b.n	80132d0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80132d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d00d      	beq.n	80132f8 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80132dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132e0:	b672      	cpsid	i
 80132e2:	f383 8811 	msr	BASEPRI, r3
 80132e6:	f3bf 8f6f 	isb	sy
 80132ea:	f3bf 8f4f 	dsb	sy
 80132ee:	b662      	cpsie	i
 80132f0:	61fb      	str	r3, [r7, #28]
}
 80132f2:	bf00      	nop
 80132f4:	bf00      	nop
 80132f6:	e7fd      	b.n	80132f4 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80132f8:	f001 f9b4 	bl	8014664 <xTaskGetSchedulerState>
 80132fc:	4603      	mov	r3, r0
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d102      	bne.n	8013308 <xQueueSemaphoreTake+0x6c>
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d101      	bne.n	801330c <xQueueSemaphoreTake+0x70>
 8013308:	2301      	movs	r3, #1
 801330a:	e000      	b.n	801330e <xQueueSemaphoreTake+0x72>
 801330c:	2300      	movs	r3, #0
 801330e:	2b00      	cmp	r3, #0
 8013310:	d10d      	bne.n	801332e <xQueueSemaphoreTake+0x92>
	__asm volatile
 8013312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013316:	b672      	cpsid	i
 8013318:	f383 8811 	msr	BASEPRI, r3
 801331c:	f3bf 8f6f 	isb	sy
 8013320:	f3bf 8f4f 	dsb	sy
 8013324:	b662      	cpsie	i
 8013326:	61bb      	str	r3, [r7, #24]
}
 8013328:	bf00      	nop
 801332a:	bf00      	nop
 801332c:	e7fd      	b.n	801332a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801332e:	f001 fced 	bl	8014d0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013336:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801333a:	2b00      	cmp	r3, #0
 801333c:	d024      	beq.n	8013388 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801333e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013340:	1e5a      	subs	r2, r3, #1
 8013342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013344:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d104      	bne.n	8013358 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801334e:	f001 fb53 	bl	80149f8 <pvTaskIncrementMutexHeldCount>
 8013352:	4602      	mov	r2, r0
 8013354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013356:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801335a:	691b      	ldr	r3, [r3, #16]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d00f      	beq.n	8013380 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013362:	3310      	adds	r3, #16
 8013364:	4618      	mov	r0, r3
 8013366:	f000 ffaf 	bl	80142c8 <xTaskRemoveFromEventList>
 801336a:	4603      	mov	r3, r0
 801336c:	2b00      	cmp	r3, #0
 801336e:	d007      	beq.n	8013380 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013370:	4b55      	ldr	r3, [pc, #340]	@ (80134c8 <xQueueSemaphoreTake+0x22c>)
 8013372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013376:	601a      	str	r2, [r3, #0]
 8013378:	f3bf 8f4f 	dsb	sy
 801337c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013380:	f001 fcfa 	bl	8014d78 <vPortExitCritical>
				return pdPASS;
 8013384:	2301      	movs	r3, #1
 8013386:	e09a      	b.n	80134be <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013388:	683b      	ldr	r3, [r7, #0]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d114      	bne.n	80133b8 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801338e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013390:	2b00      	cmp	r3, #0
 8013392:	d00d      	beq.n	80133b0 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8013394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013398:	b672      	cpsid	i
 801339a:	f383 8811 	msr	BASEPRI, r3
 801339e:	f3bf 8f6f 	isb	sy
 80133a2:	f3bf 8f4f 	dsb	sy
 80133a6:	b662      	cpsie	i
 80133a8:	617b      	str	r3, [r7, #20]
}
 80133aa:	bf00      	nop
 80133ac:	bf00      	nop
 80133ae:	e7fd      	b.n	80133ac <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80133b0:	f001 fce2 	bl	8014d78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80133b4:	2300      	movs	r3, #0
 80133b6:	e082      	b.n	80134be <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 80133b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d106      	bne.n	80133cc <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80133be:	f107 030c 	add.w	r3, r7, #12
 80133c2:	4618      	mov	r0, r3
 80133c4:	f000 ffe6 	bl	8014394 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80133c8:	2301      	movs	r3, #1
 80133ca:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80133cc:	f001 fcd4 	bl	8014d78 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80133d0:	f000 fd60 	bl	8013e94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80133d4:	f001 fc9a 	bl	8014d0c <vPortEnterCritical>
 80133d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80133de:	b25b      	sxtb	r3, r3
 80133e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80133e4:	d103      	bne.n	80133ee <xQueueSemaphoreTake+0x152>
 80133e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133e8:	2200      	movs	r2, #0
 80133ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80133ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80133f4:	b25b      	sxtb	r3, r3
 80133f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80133fa:	d103      	bne.n	8013404 <xQueueSemaphoreTake+0x168>
 80133fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133fe:	2200      	movs	r2, #0
 8013400:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013404:	f001 fcb8 	bl	8014d78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013408:	463a      	mov	r2, r7
 801340a:	f107 030c 	add.w	r3, r7, #12
 801340e:	4611      	mov	r1, r2
 8013410:	4618      	mov	r0, r3
 8013412:	f000 ffd5 	bl	80143c0 <xTaskCheckForTimeOut>
 8013416:	4603      	mov	r3, r0
 8013418:	2b00      	cmp	r3, #0
 801341a:	d132      	bne.n	8013482 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801341c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801341e:	f000 f9fd 	bl	801381c <prvIsQueueEmpty>
 8013422:	4603      	mov	r3, r0
 8013424:	2b00      	cmp	r3, #0
 8013426:	d026      	beq.n	8013476 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d109      	bne.n	8013444 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8013430:	f001 fc6c 	bl	8014d0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013436:	689b      	ldr	r3, [r3, #8]
 8013438:	4618      	mov	r0, r3
 801343a:	f001 f931 	bl	80146a0 <xTaskPriorityInherit>
 801343e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8013440:	f001 fc9a 	bl	8014d78 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013446:	3324      	adds	r3, #36	@ 0x24
 8013448:	683a      	ldr	r2, [r7, #0]
 801344a:	4611      	mov	r1, r2
 801344c:	4618      	mov	r0, r3
 801344e:	f000 ff13 	bl	8014278 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013452:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013454:	f000 f990 	bl	8013778 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013458:	f000 fd2a 	bl	8013eb0 <xTaskResumeAll>
 801345c:	4603      	mov	r3, r0
 801345e:	2b00      	cmp	r3, #0
 8013460:	f47f af65 	bne.w	801332e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8013464:	4b18      	ldr	r3, [pc, #96]	@ (80134c8 <xQueueSemaphoreTake+0x22c>)
 8013466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801346a:	601a      	str	r2, [r3, #0]
 801346c:	f3bf 8f4f 	dsb	sy
 8013470:	f3bf 8f6f 	isb	sy
 8013474:	e75b      	b.n	801332e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013476:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013478:	f000 f97e 	bl	8013778 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801347c:	f000 fd18 	bl	8013eb0 <xTaskResumeAll>
 8013480:	e755      	b.n	801332e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013482:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013484:	f000 f978 	bl	8013778 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013488:	f000 fd12 	bl	8013eb0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801348c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801348e:	f000 f9c5 	bl	801381c <prvIsQueueEmpty>
 8013492:	4603      	mov	r3, r0
 8013494:	2b00      	cmp	r3, #0
 8013496:	f43f af4a 	beq.w	801332e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801349a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801349c:	2b00      	cmp	r3, #0
 801349e:	d00d      	beq.n	80134bc <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80134a0:	f001 fc34 	bl	8014d0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80134a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80134a6:	f000 f8bf 	bl	8013628 <prvGetDisinheritPriorityAfterTimeout>
 80134aa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80134ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134ae:	689b      	ldr	r3, [r3, #8]
 80134b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80134b2:	4618      	mov	r0, r3
 80134b4:	f001 fa00 	bl	80148b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80134b8:	f001 fc5e 	bl	8014d78 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80134bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80134be:	4618      	mov	r0, r3
 80134c0:	3738      	adds	r7, #56	@ 0x38
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bd80      	pop	{r7, pc}
 80134c6:	bf00      	nop
 80134c8:	e000ed04 	.word	0xe000ed04

080134cc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b08e      	sub	sp, #56	@ 0x38
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	60f8      	str	r0, [r7, #12]
 80134d4:	60b9      	str	r1, [r7, #8]
 80134d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80134dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d10d      	bne.n	80134fe <xQueueReceiveFromISR+0x32>
	__asm volatile
 80134e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134e6:	b672      	cpsid	i
 80134e8:	f383 8811 	msr	BASEPRI, r3
 80134ec:	f3bf 8f6f 	isb	sy
 80134f0:	f3bf 8f4f 	dsb	sy
 80134f4:	b662      	cpsie	i
 80134f6:	623b      	str	r3, [r7, #32]
}
 80134f8:	bf00      	nop
 80134fa:	bf00      	nop
 80134fc:	e7fd      	b.n	80134fa <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80134fe:	68bb      	ldr	r3, [r7, #8]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d103      	bne.n	801350c <xQueueReceiveFromISR+0x40>
 8013504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013508:	2b00      	cmp	r3, #0
 801350a:	d101      	bne.n	8013510 <xQueueReceiveFromISR+0x44>
 801350c:	2301      	movs	r3, #1
 801350e:	e000      	b.n	8013512 <xQueueReceiveFromISR+0x46>
 8013510:	2300      	movs	r3, #0
 8013512:	2b00      	cmp	r3, #0
 8013514:	d10d      	bne.n	8013532 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8013516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801351a:	b672      	cpsid	i
 801351c:	f383 8811 	msr	BASEPRI, r3
 8013520:	f3bf 8f6f 	isb	sy
 8013524:	f3bf 8f4f 	dsb	sy
 8013528:	b662      	cpsie	i
 801352a:	61fb      	str	r3, [r7, #28]
}
 801352c:	bf00      	nop
 801352e:	bf00      	nop
 8013530:	e7fd      	b.n	801352e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013532:	f001 fcd3 	bl	8014edc <vPortValidateInterruptPriority>
	__asm volatile
 8013536:	f3ef 8211 	mrs	r2, BASEPRI
 801353a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801353e:	b672      	cpsid	i
 8013540:	f383 8811 	msr	BASEPRI, r3
 8013544:	f3bf 8f6f 	isb	sy
 8013548:	f3bf 8f4f 	dsb	sy
 801354c:	b662      	cpsie	i
 801354e:	61ba      	str	r2, [r7, #24]
 8013550:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013552:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013554:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801355a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801355c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801355e:	2b00      	cmp	r3, #0
 8013560:	d02f      	beq.n	80135c2 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013564:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013568:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801356c:	68b9      	ldr	r1, [r7, #8]
 801356e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013570:	f000 f8dc 	bl	801372c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013576:	1e5a      	subs	r2, r3, #1
 8013578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801357a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801357c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013580:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013584:	d112      	bne.n	80135ac <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013588:	691b      	ldr	r3, [r3, #16]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d016      	beq.n	80135bc <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801358e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013590:	3310      	adds	r3, #16
 8013592:	4618      	mov	r0, r3
 8013594:	f000 fe98 	bl	80142c8 <xTaskRemoveFromEventList>
 8013598:	4603      	mov	r3, r0
 801359a:	2b00      	cmp	r3, #0
 801359c:	d00e      	beq.n	80135bc <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d00b      	beq.n	80135bc <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	2201      	movs	r2, #1
 80135a8:	601a      	str	r2, [r3, #0]
 80135aa:	e007      	b.n	80135bc <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80135ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80135b0:	3301      	adds	r3, #1
 80135b2:	b2db      	uxtb	r3, r3
 80135b4:	b25a      	sxtb	r2, r3
 80135b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80135bc:	2301      	movs	r3, #1
 80135be:	637b      	str	r3, [r7, #52]	@ 0x34
 80135c0:	e001      	b.n	80135c6 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 80135c2:	2300      	movs	r3, #0
 80135c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80135c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80135ca:	693b      	ldr	r3, [r7, #16]
 80135cc:	f383 8811 	msr	BASEPRI, r3
}
 80135d0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80135d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80135d4:	4618      	mov	r0, r3
 80135d6:	3738      	adds	r7, #56	@ 0x38
 80135d8:	46bd      	mov	sp, r7
 80135da:	bd80      	pop	{r7, pc}

080135dc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b084      	sub	sp, #16
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d10d      	bne.n	801360a <vQueueDelete+0x2e>
	__asm volatile
 80135ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135f2:	b672      	cpsid	i
 80135f4:	f383 8811 	msr	BASEPRI, r3
 80135f8:	f3bf 8f6f 	isb	sy
 80135fc:	f3bf 8f4f 	dsb	sy
 8013600:	b662      	cpsie	i
 8013602:	60bb      	str	r3, [r7, #8]
}
 8013604:	bf00      	nop
 8013606:	bf00      	nop
 8013608:	e7fd      	b.n	8013606 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801360a:	68f8      	ldr	r0, [r7, #12]
 801360c:	f000 f934 	bl	8013878 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8013616:	2b00      	cmp	r3, #0
 8013618:	d102      	bne.n	8013620 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 801361a:	68f8      	ldr	r0, [r7, #12]
 801361c:	f001 fd72 	bl	8015104 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013620:	bf00      	nop
 8013622:	3710      	adds	r7, #16
 8013624:	46bd      	mov	sp, r7
 8013626:	bd80      	pop	{r7, pc}

08013628 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013628:	b480      	push	{r7}
 801362a:	b085      	sub	sp, #20
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013634:	2b00      	cmp	r3, #0
 8013636:	d006      	beq.n	8013646 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	f1c3 0307 	rsb	r3, r3, #7
 8013642:	60fb      	str	r3, [r7, #12]
 8013644:	e001      	b.n	801364a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013646:	2300      	movs	r3, #0
 8013648:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801364a:	68fb      	ldr	r3, [r7, #12]
	}
 801364c:	4618      	mov	r0, r3
 801364e:	3714      	adds	r7, #20
 8013650:	46bd      	mov	sp, r7
 8013652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013656:	4770      	bx	lr

08013658 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013658:	b580      	push	{r7, lr}
 801365a:	b086      	sub	sp, #24
 801365c:	af00      	add	r7, sp, #0
 801365e:	60f8      	str	r0, [r7, #12]
 8013660:	60b9      	str	r1, [r7, #8]
 8013662:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013664:	2300      	movs	r3, #0
 8013666:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801366c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013672:	2b00      	cmp	r3, #0
 8013674:	d10d      	bne.n	8013692 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d14d      	bne.n	801371a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	689b      	ldr	r3, [r3, #8]
 8013682:	4618      	mov	r0, r3
 8013684:	f001 f88c 	bl	80147a0 <xTaskPriorityDisinherit>
 8013688:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	2200      	movs	r2, #0
 801368e:	609a      	str	r2, [r3, #8]
 8013690:	e043      	b.n	801371a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d119      	bne.n	80136cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	6858      	ldr	r0, [r3, #4]
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80136a0:	461a      	mov	r2, r3
 80136a2:	68b9      	ldr	r1, [r7, #8]
 80136a4:	f002 f87f 	bl	80157a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	685a      	ldr	r2, [r3, #4]
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80136b0:	441a      	add	r2, r3
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	685a      	ldr	r2, [r3, #4]
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	689b      	ldr	r3, [r3, #8]
 80136be:	429a      	cmp	r2, r3
 80136c0:	d32b      	bcc.n	801371a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	681a      	ldr	r2, [r3, #0]
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	605a      	str	r2, [r3, #4]
 80136ca:	e026      	b.n	801371a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	68d8      	ldr	r0, [r3, #12]
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80136d4:	461a      	mov	r2, r3
 80136d6:	68b9      	ldr	r1, [r7, #8]
 80136d8:	f002 f865 	bl	80157a6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	68da      	ldr	r2, [r3, #12]
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80136e4:	425b      	negs	r3, r3
 80136e6:	441a      	add	r2, r3
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	68da      	ldr	r2, [r3, #12]
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	429a      	cmp	r2, r3
 80136f6:	d207      	bcs.n	8013708 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	689a      	ldr	r2, [r3, #8]
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013700:	425b      	negs	r3, r3
 8013702:	441a      	add	r2, r3
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	2b02      	cmp	r3, #2
 801370c:	d105      	bne.n	801371a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801370e:	693b      	ldr	r3, [r7, #16]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d002      	beq.n	801371a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013714:	693b      	ldr	r3, [r7, #16]
 8013716:	3b01      	subs	r3, #1
 8013718:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801371a:	693b      	ldr	r3, [r7, #16]
 801371c:	1c5a      	adds	r2, r3, #1
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8013722:	697b      	ldr	r3, [r7, #20]
}
 8013724:	4618      	mov	r0, r3
 8013726:	3718      	adds	r7, #24
 8013728:	46bd      	mov	sp, r7
 801372a:	bd80      	pop	{r7, pc}

0801372c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801372c:	b580      	push	{r7, lr}
 801372e:	b082      	sub	sp, #8
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]
 8013734:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801373a:	2b00      	cmp	r3, #0
 801373c:	d018      	beq.n	8013770 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	68da      	ldr	r2, [r3, #12]
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013746:	441a      	add	r2, r3
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	68da      	ldr	r2, [r3, #12]
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	689b      	ldr	r3, [r3, #8]
 8013754:	429a      	cmp	r2, r3
 8013756:	d303      	bcc.n	8013760 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	681a      	ldr	r2, [r3, #0]
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	68d9      	ldr	r1, [r3, #12]
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013768:	461a      	mov	r2, r3
 801376a:	6838      	ldr	r0, [r7, #0]
 801376c:	f002 f81b 	bl	80157a6 <memcpy>
	}
}
 8013770:	bf00      	nop
 8013772:	3708      	adds	r7, #8
 8013774:	46bd      	mov	sp, r7
 8013776:	bd80      	pop	{r7, pc}

08013778 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b084      	sub	sp, #16
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013780:	f001 fac4 	bl	8014d0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801378a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801378c:	e011      	b.n	80137b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013792:	2b00      	cmp	r3, #0
 8013794:	d012      	beq.n	80137bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	3324      	adds	r3, #36	@ 0x24
 801379a:	4618      	mov	r0, r3
 801379c:	f000 fd94 	bl	80142c8 <xTaskRemoveFromEventList>
 80137a0:	4603      	mov	r3, r0
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d001      	beq.n	80137aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80137a6:	f000 fe73 	bl	8014490 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80137aa:	7bfb      	ldrb	r3, [r7, #15]
 80137ac:	3b01      	subs	r3, #1
 80137ae:	b2db      	uxtb	r3, r3
 80137b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80137b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	dce9      	bgt.n	801378e <prvUnlockQueue+0x16>
 80137ba:	e000      	b.n	80137be <prvUnlockQueue+0x46>
					break;
 80137bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	22ff      	movs	r2, #255	@ 0xff
 80137c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80137c6:	f001 fad7 	bl	8014d78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80137ca:	f001 fa9f 	bl	8014d0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80137d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80137d6:	e011      	b.n	80137fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	691b      	ldr	r3, [r3, #16]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d012      	beq.n	8013806 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	3310      	adds	r3, #16
 80137e4:	4618      	mov	r0, r3
 80137e6:	f000 fd6f 	bl	80142c8 <xTaskRemoveFromEventList>
 80137ea:	4603      	mov	r3, r0
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d001      	beq.n	80137f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80137f0:	f000 fe4e 	bl	8014490 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80137f4:	7bbb      	ldrb	r3, [r7, #14]
 80137f6:	3b01      	subs	r3, #1
 80137f8:	b2db      	uxtb	r3, r3
 80137fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80137fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013800:	2b00      	cmp	r3, #0
 8013802:	dce9      	bgt.n	80137d8 <prvUnlockQueue+0x60>
 8013804:	e000      	b.n	8013808 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013806:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	22ff      	movs	r2, #255	@ 0xff
 801380c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013810:	f001 fab2 	bl	8014d78 <vPortExitCritical>
}
 8013814:	bf00      	nop
 8013816:	3710      	adds	r7, #16
 8013818:	46bd      	mov	sp, r7
 801381a:	bd80      	pop	{r7, pc}

0801381c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801381c:	b580      	push	{r7, lr}
 801381e:	b084      	sub	sp, #16
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013824:	f001 fa72 	bl	8014d0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801382c:	2b00      	cmp	r3, #0
 801382e:	d102      	bne.n	8013836 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013830:	2301      	movs	r3, #1
 8013832:	60fb      	str	r3, [r7, #12]
 8013834:	e001      	b.n	801383a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013836:	2300      	movs	r3, #0
 8013838:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801383a:	f001 fa9d 	bl	8014d78 <vPortExitCritical>

	return xReturn;
 801383e:	68fb      	ldr	r3, [r7, #12]
}
 8013840:	4618      	mov	r0, r3
 8013842:	3710      	adds	r7, #16
 8013844:	46bd      	mov	sp, r7
 8013846:	bd80      	pop	{r7, pc}

08013848 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013848:	b580      	push	{r7, lr}
 801384a:	b084      	sub	sp, #16
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013850:	f001 fa5c 	bl	8014d0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801385c:	429a      	cmp	r2, r3
 801385e:	d102      	bne.n	8013866 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013860:	2301      	movs	r3, #1
 8013862:	60fb      	str	r3, [r7, #12]
 8013864:	e001      	b.n	801386a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013866:	2300      	movs	r3, #0
 8013868:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801386a:	f001 fa85 	bl	8014d78 <vPortExitCritical>

	return xReturn;
 801386e:	68fb      	ldr	r3, [r7, #12]
}
 8013870:	4618      	mov	r0, r3
 8013872:	3710      	adds	r7, #16
 8013874:	46bd      	mov	sp, r7
 8013876:	bd80      	pop	{r7, pc}

08013878 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013878:	b480      	push	{r7}
 801387a:	b085      	sub	sp, #20
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013880:	2300      	movs	r3, #0
 8013882:	60fb      	str	r3, [r7, #12]
 8013884:	e016      	b.n	80138b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013886:	4a10      	ldr	r2, [pc, #64]	@ (80138c8 <vQueueUnregisterQueue+0x50>)
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	00db      	lsls	r3, r3, #3
 801388c:	4413      	add	r3, r2
 801388e:	685b      	ldr	r3, [r3, #4]
 8013890:	687a      	ldr	r2, [r7, #4]
 8013892:	429a      	cmp	r2, r3
 8013894:	d10b      	bne.n	80138ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013896:	4a0c      	ldr	r2, [pc, #48]	@ (80138c8 <vQueueUnregisterQueue+0x50>)
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	2100      	movs	r1, #0
 801389c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80138a0:	4a09      	ldr	r2, [pc, #36]	@ (80138c8 <vQueueUnregisterQueue+0x50>)
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	00db      	lsls	r3, r3, #3
 80138a6:	4413      	add	r3, r2
 80138a8:	2200      	movs	r2, #0
 80138aa:	605a      	str	r2, [r3, #4]
				break;
 80138ac:	e006      	b.n	80138bc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	3301      	adds	r3, #1
 80138b2:	60fb      	str	r3, [r7, #12]
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	2b07      	cmp	r3, #7
 80138b8:	d9e5      	bls.n	8013886 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80138ba:	bf00      	nop
 80138bc:	bf00      	nop
 80138be:	3714      	adds	r7, #20
 80138c0:	46bd      	mov	sp, r7
 80138c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c6:	4770      	bx	lr
 80138c8:	200014a4 	.word	0x200014a4

080138cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80138cc:	b580      	push	{r7, lr}
 80138ce:	b08e      	sub	sp, #56	@ 0x38
 80138d0:	af04      	add	r7, sp, #16
 80138d2:	60f8      	str	r0, [r7, #12]
 80138d4:	60b9      	str	r1, [r7, #8]
 80138d6:	607a      	str	r2, [r7, #4]
 80138d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80138da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d10d      	bne.n	80138fc <xTaskCreateStatic+0x30>
	__asm volatile
 80138e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138e4:	b672      	cpsid	i
 80138e6:	f383 8811 	msr	BASEPRI, r3
 80138ea:	f3bf 8f6f 	isb	sy
 80138ee:	f3bf 8f4f 	dsb	sy
 80138f2:	b662      	cpsie	i
 80138f4:	623b      	str	r3, [r7, #32]
}
 80138f6:	bf00      	nop
 80138f8:	bf00      	nop
 80138fa:	e7fd      	b.n	80138f8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80138fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d10d      	bne.n	801391e <xTaskCreateStatic+0x52>
	__asm volatile
 8013902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013906:	b672      	cpsid	i
 8013908:	f383 8811 	msr	BASEPRI, r3
 801390c:	f3bf 8f6f 	isb	sy
 8013910:	f3bf 8f4f 	dsb	sy
 8013914:	b662      	cpsie	i
 8013916:	61fb      	str	r3, [r7, #28]
}
 8013918:	bf00      	nop
 801391a:	bf00      	nop
 801391c:	e7fd      	b.n	801391a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801391e:	23a0      	movs	r3, #160	@ 0xa0
 8013920:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013922:	693b      	ldr	r3, [r7, #16]
 8013924:	2ba0      	cmp	r3, #160	@ 0xa0
 8013926:	d00d      	beq.n	8013944 <xTaskCreateStatic+0x78>
	__asm volatile
 8013928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801392c:	b672      	cpsid	i
 801392e:	f383 8811 	msr	BASEPRI, r3
 8013932:	f3bf 8f6f 	isb	sy
 8013936:	f3bf 8f4f 	dsb	sy
 801393a:	b662      	cpsie	i
 801393c:	61bb      	str	r3, [r7, #24]
}
 801393e:	bf00      	nop
 8013940:	bf00      	nop
 8013942:	e7fd      	b.n	8013940 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013944:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013948:	2b00      	cmp	r3, #0
 801394a:	d01e      	beq.n	801398a <xTaskCreateStatic+0xbe>
 801394c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801394e:	2b00      	cmp	r3, #0
 8013950:	d01b      	beq.n	801398a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013954:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013958:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801395a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801395c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801395e:	2202      	movs	r2, #2
 8013960:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013964:	2300      	movs	r3, #0
 8013966:	9303      	str	r3, [sp, #12]
 8013968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801396a:	9302      	str	r3, [sp, #8]
 801396c:	f107 0314 	add.w	r3, r7, #20
 8013970:	9301      	str	r3, [sp, #4]
 8013972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013974:	9300      	str	r3, [sp, #0]
 8013976:	683b      	ldr	r3, [r7, #0]
 8013978:	687a      	ldr	r2, [r7, #4]
 801397a:	68b9      	ldr	r1, [r7, #8]
 801397c:	68f8      	ldr	r0, [r7, #12]
 801397e:	f000 f851 	bl	8013a24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013982:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013984:	f000 f8f0 	bl	8013b68 <prvAddNewTaskToReadyList>
 8013988:	e001      	b.n	801398e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 801398a:	2300      	movs	r3, #0
 801398c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801398e:	697b      	ldr	r3, [r7, #20]
	}
 8013990:	4618      	mov	r0, r3
 8013992:	3728      	adds	r7, #40	@ 0x28
 8013994:	46bd      	mov	sp, r7
 8013996:	bd80      	pop	{r7, pc}

08013998 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013998:	b580      	push	{r7, lr}
 801399a:	b08c      	sub	sp, #48	@ 0x30
 801399c:	af04      	add	r7, sp, #16
 801399e:	60f8      	str	r0, [r7, #12]
 80139a0:	60b9      	str	r1, [r7, #8]
 80139a2:	603b      	str	r3, [r7, #0]
 80139a4:	4613      	mov	r3, r2
 80139a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80139a8:	88fb      	ldrh	r3, [r7, #6]
 80139aa:	009b      	lsls	r3, r3, #2
 80139ac:	4618      	mov	r0, r3
 80139ae:	f001 fadb 	bl	8014f68 <pvPortMalloc>
 80139b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80139b4:	697b      	ldr	r3, [r7, #20]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d00e      	beq.n	80139d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80139ba:	20a0      	movs	r0, #160	@ 0xa0
 80139bc:	f001 fad4 	bl	8014f68 <pvPortMalloc>
 80139c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80139c2:	69fb      	ldr	r3, [r7, #28]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d003      	beq.n	80139d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80139c8:	69fb      	ldr	r3, [r7, #28]
 80139ca:	697a      	ldr	r2, [r7, #20]
 80139cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80139ce:	e005      	b.n	80139dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80139d0:	6978      	ldr	r0, [r7, #20]
 80139d2:	f001 fb97 	bl	8015104 <vPortFree>
 80139d6:	e001      	b.n	80139dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80139d8:	2300      	movs	r3, #0
 80139da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80139dc:	69fb      	ldr	r3, [r7, #28]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d017      	beq.n	8013a12 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80139e2:	69fb      	ldr	r3, [r7, #28]
 80139e4:	2200      	movs	r2, #0
 80139e6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80139ea:	88fa      	ldrh	r2, [r7, #6]
 80139ec:	2300      	movs	r3, #0
 80139ee:	9303      	str	r3, [sp, #12]
 80139f0:	69fb      	ldr	r3, [r7, #28]
 80139f2:	9302      	str	r3, [sp, #8]
 80139f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139f6:	9301      	str	r3, [sp, #4]
 80139f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139fa:	9300      	str	r3, [sp, #0]
 80139fc:	683b      	ldr	r3, [r7, #0]
 80139fe:	68b9      	ldr	r1, [r7, #8]
 8013a00:	68f8      	ldr	r0, [r7, #12]
 8013a02:	f000 f80f 	bl	8013a24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013a06:	69f8      	ldr	r0, [r7, #28]
 8013a08:	f000 f8ae 	bl	8013b68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013a0c:	2301      	movs	r3, #1
 8013a0e:	61bb      	str	r3, [r7, #24]
 8013a10:	e002      	b.n	8013a18 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013a12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013a16:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013a18:	69bb      	ldr	r3, [r7, #24]
	}
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	3720      	adds	r7, #32
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	bd80      	pop	{r7, pc}
	...

08013a24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013a24:	b580      	push	{r7, lr}
 8013a26:	b088      	sub	sp, #32
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	60f8      	str	r0, [r7, #12]
 8013a2c:	60b9      	str	r1, [r7, #8]
 8013a2e:	607a      	str	r2, [r7, #4]
 8013a30:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013a36:	6879      	ldr	r1, [r7, #4]
 8013a38:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8013a3c:	440b      	add	r3, r1
 8013a3e:	009b      	lsls	r3, r3, #2
 8013a40:	4413      	add	r3, r2
 8013a42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013a44:	69bb      	ldr	r3, [r7, #24]
 8013a46:	f023 0307 	bic.w	r3, r3, #7
 8013a4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013a4c:	69bb      	ldr	r3, [r7, #24]
 8013a4e:	f003 0307 	and.w	r3, r3, #7
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d00d      	beq.n	8013a72 <prvInitialiseNewTask+0x4e>
	__asm volatile
 8013a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a5a:	b672      	cpsid	i
 8013a5c:	f383 8811 	msr	BASEPRI, r3
 8013a60:	f3bf 8f6f 	isb	sy
 8013a64:	f3bf 8f4f 	dsb	sy
 8013a68:	b662      	cpsie	i
 8013a6a:	617b      	str	r3, [r7, #20]
}
 8013a6c:	bf00      	nop
 8013a6e:	bf00      	nop
 8013a70:	e7fd      	b.n	8013a6e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013a72:	68bb      	ldr	r3, [r7, #8]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d01f      	beq.n	8013ab8 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013a78:	2300      	movs	r3, #0
 8013a7a:	61fb      	str	r3, [r7, #28]
 8013a7c:	e012      	b.n	8013aa4 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013a7e:	68ba      	ldr	r2, [r7, #8]
 8013a80:	69fb      	ldr	r3, [r7, #28]
 8013a82:	4413      	add	r3, r2
 8013a84:	7819      	ldrb	r1, [r3, #0]
 8013a86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013a88:	69fb      	ldr	r3, [r7, #28]
 8013a8a:	4413      	add	r3, r2
 8013a8c:	3334      	adds	r3, #52	@ 0x34
 8013a8e:	460a      	mov	r2, r1
 8013a90:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013a92:	68ba      	ldr	r2, [r7, #8]
 8013a94:	69fb      	ldr	r3, [r7, #28]
 8013a96:	4413      	add	r3, r2
 8013a98:	781b      	ldrb	r3, [r3, #0]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d006      	beq.n	8013aac <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013a9e:	69fb      	ldr	r3, [r7, #28]
 8013aa0:	3301      	adds	r3, #1
 8013aa2:	61fb      	str	r3, [r7, #28]
 8013aa4:	69fb      	ldr	r3, [r7, #28]
 8013aa6:	2b0f      	cmp	r3, #15
 8013aa8:	d9e9      	bls.n	8013a7e <prvInitialiseNewTask+0x5a>
 8013aaa:	e000      	b.n	8013aae <prvInitialiseNewTask+0x8a>
			{
				break;
 8013aac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ab0:	2200      	movs	r2, #0
 8013ab2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013ab6:	e003      	b.n	8013ac0 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013aba:	2200      	movs	r2, #0
 8013abc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ac2:	2b06      	cmp	r3, #6
 8013ac4:	d901      	bls.n	8013aca <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013ac6:	2306      	movs	r3, #6
 8013ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013acc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013ace:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ad2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013ad4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ad8:	2200      	movs	r2, #0
 8013ada:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ade:	3304      	adds	r3, #4
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	f7fe fe77 	bl	80127d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ae8:	3318      	adds	r3, #24
 8013aea:	4618      	mov	r0, r3
 8013aec:	f7fe fe72 	bl	80127d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013af2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013af4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013af8:	f1c3 0207 	rsb	r2, r3, #7
 8013afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013afe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013b04:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b08:	2200      	movs	r2, #0
 8013b0a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b10:	2200      	movs	r2, #0
 8013b12:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8013b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b18:	334c      	adds	r3, #76	@ 0x4c
 8013b1a:	224c      	movs	r2, #76	@ 0x4c
 8013b1c:	2100      	movs	r1, #0
 8013b1e:	4618      	mov	r0, r3
 8013b20:	f001 fd6f 	bl	8015602 <memset>
 8013b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b26:	4a0d      	ldr	r2, [pc, #52]	@ (8013b5c <prvInitialiseNewTask+0x138>)
 8013b28:	651a      	str	r2, [r3, #80]	@ 0x50
 8013b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b2c:	4a0c      	ldr	r2, [pc, #48]	@ (8013b60 <prvInitialiseNewTask+0x13c>)
 8013b2e:	655a      	str	r2, [r3, #84]	@ 0x54
 8013b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b32:	4a0c      	ldr	r2, [pc, #48]	@ (8013b64 <prvInitialiseNewTask+0x140>)
 8013b34:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013b36:	683a      	ldr	r2, [r7, #0]
 8013b38:	68f9      	ldr	r1, [r7, #12]
 8013b3a:	69b8      	ldr	r0, [r7, #24]
 8013b3c:	f000 ffd6 	bl	8014aec <pxPortInitialiseStack>
 8013b40:	4602      	mov	r2, r0
 8013b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b44:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d002      	beq.n	8013b52 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013b50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013b52:	bf00      	nop
 8013b54:	3720      	adds	r7, #32
 8013b56:	46bd      	mov	sp, r7
 8013b58:	bd80      	pop	{r7, pc}
 8013b5a:	bf00      	nop
 8013b5c:	20005230 	.word	0x20005230
 8013b60:	20005298 	.word	0x20005298
 8013b64:	20005300 	.word	0x20005300

08013b68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b082      	sub	sp, #8
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013b70:	f001 f8cc 	bl	8014d0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013b74:	4b2a      	ldr	r3, [pc, #168]	@ (8013c20 <prvAddNewTaskToReadyList+0xb8>)
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	3301      	adds	r3, #1
 8013b7a:	4a29      	ldr	r2, [pc, #164]	@ (8013c20 <prvAddNewTaskToReadyList+0xb8>)
 8013b7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013b7e:	4b29      	ldr	r3, [pc, #164]	@ (8013c24 <prvAddNewTaskToReadyList+0xbc>)
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d109      	bne.n	8013b9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013b86:	4a27      	ldr	r2, [pc, #156]	@ (8013c24 <prvAddNewTaskToReadyList+0xbc>)
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013b8c:	4b24      	ldr	r3, [pc, #144]	@ (8013c20 <prvAddNewTaskToReadyList+0xb8>)
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	2b01      	cmp	r3, #1
 8013b92:	d110      	bne.n	8013bb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013b94:	f000 fca0 	bl	80144d8 <prvInitialiseTaskLists>
 8013b98:	e00d      	b.n	8013bb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013b9a:	4b23      	ldr	r3, [pc, #140]	@ (8013c28 <prvAddNewTaskToReadyList+0xc0>)
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d109      	bne.n	8013bb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013ba2:	4b20      	ldr	r3, [pc, #128]	@ (8013c24 <prvAddNewTaskToReadyList+0xbc>)
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bac:	429a      	cmp	r2, r3
 8013bae:	d802      	bhi.n	8013bb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8013c24 <prvAddNewTaskToReadyList+0xbc>)
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8013c2c <prvAddNewTaskToReadyList+0xc4>)
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	3301      	adds	r3, #1
 8013bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8013c2c <prvAddNewTaskToReadyList+0xc4>)
 8013bbe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bc4:	2201      	movs	r2, #1
 8013bc6:	409a      	lsls	r2, r3
 8013bc8:	4b19      	ldr	r3, [pc, #100]	@ (8013c30 <prvAddNewTaskToReadyList+0xc8>)
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	4313      	orrs	r3, r2
 8013bce:	4a18      	ldr	r2, [pc, #96]	@ (8013c30 <prvAddNewTaskToReadyList+0xc8>)
 8013bd0:	6013      	str	r3, [r2, #0]
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013bd6:	4613      	mov	r3, r2
 8013bd8:	009b      	lsls	r3, r3, #2
 8013bda:	4413      	add	r3, r2
 8013bdc:	009b      	lsls	r3, r3, #2
 8013bde:	4a15      	ldr	r2, [pc, #84]	@ (8013c34 <prvAddNewTaskToReadyList+0xcc>)
 8013be0:	441a      	add	r2, r3
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	3304      	adds	r3, #4
 8013be6:	4619      	mov	r1, r3
 8013be8:	4610      	mov	r0, r2
 8013bea:	f7fe fe00 	bl	80127ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013bee:	f001 f8c3 	bl	8014d78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8013c28 <prvAddNewTaskToReadyList+0xc0>)
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d00e      	beq.n	8013c18 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8013c24 <prvAddNewTaskToReadyList+0xbc>)
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c04:	429a      	cmp	r2, r3
 8013c06:	d207      	bcs.n	8013c18 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013c08:	4b0b      	ldr	r3, [pc, #44]	@ (8013c38 <prvAddNewTaskToReadyList+0xd0>)
 8013c0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013c0e:	601a      	str	r2, [r3, #0]
 8013c10:	f3bf 8f4f 	dsb	sy
 8013c14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013c18:	bf00      	nop
 8013c1a:	3708      	adds	r7, #8
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	bd80      	pop	{r7, pc}
 8013c20:	200015e4 	.word	0x200015e4
 8013c24:	200014e4 	.word	0x200014e4
 8013c28:	200015f0 	.word	0x200015f0
 8013c2c:	20001600 	.word	0x20001600
 8013c30:	200015ec 	.word	0x200015ec
 8013c34:	200014e8 	.word	0x200014e8
 8013c38:	e000ed04 	.word	0xe000ed04

08013c3c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b08a      	sub	sp, #40	@ 0x28
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
 8013c44:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8013c46:	2300      	movs	r3, #0
 8013c48:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d10d      	bne.n	8013c6c <vTaskDelayUntil+0x30>
	__asm volatile
 8013c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c54:	b672      	cpsid	i
 8013c56:	f383 8811 	msr	BASEPRI, r3
 8013c5a:	f3bf 8f6f 	isb	sy
 8013c5e:	f3bf 8f4f 	dsb	sy
 8013c62:	b662      	cpsie	i
 8013c64:	617b      	str	r3, [r7, #20]
}
 8013c66:	bf00      	nop
 8013c68:	bf00      	nop
 8013c6a:	e7fd      	b.n	8013c68 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8013c6c:	683b      	ldr	r3, [r7, #0]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d10d      	bne.n	8013c8e <vTaskDelayUntil+0x52>
	__asm volatile
 8013c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c76:	b672      	cpsid	i
 8013c78:	f383 8811 	msr	BASEPRI, r3
 8013c7c:	f3bf 8f6f 	isb	sy
 8013c80:	f3bf 8f4f 	dsb	sy
 8013c84:	b662      	cpsie	i
 8013c86:	613b      	str	r3, [r7, #16]
}
 8013c88:	bf00      	nop
 8013c8a:	bf00      	nop
 8013c8c:	e7fd      	b.n	8013c8a <vTaskDelayUntil+0x4e>
		configASSERT( uxSchedulerSuspended == 0 );
 8013c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8013d3c <vTaskDelayUntil+0x100>)
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d00d      	beq.n	8013cb2 <vTaskDelayUntil+0x76>
	__asm volatile
 8013c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c9a:	b672      	cpsid	i
 8013c9c:	f383 8811 	msr	BASEPRI, r3
 8013ca0:	f3bf 8f6f 	isb	sy
 8013ca4:	f3bf 8f4f 	dsb	sy
 8013ca8:	b662      	cpsie	i
 8013caa:	60fb      	str	r3, [r7, #12]
}
 8013cac:	bf00      	nop
 8013cae:	bf00      	nop
 8013cb0:	e7fd      	b.n	8013cae <vTaskDelayUntil+0x72>

		vTaskSuspendAll();
 8013cb2:	f000 f8ef 	bl	8013e94 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8013cb6:	4b22      	ldr	r3, [pc, #136]	@ (8013d40 <vTaskDelayUntil+0x104>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	683a      	ldr	r2, [r7, #0]
 8013cc2:	4413      	add	r3, r2
 8013cc4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	6a3a      	ldr	r2, [r7, #32]
 8013ccc:	429a      	cmp	r2, r3
 8013cce:	d20b      	bcs.n	8013ce8 <vTaskDelayUntil+0xac>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	69fa      	ldr	r2, [r7, #28]
 8013cd6:	429a      	cmp	r2, r3
 8013cd8:	d211      	bcs.n	8013cfe <vTaskDelayUntil+0xc2>
 8013cda:	69fa      	ldr	r2, [r7, #28]
 8013cdc:	6a3b      	ldr	r3, [r7, #32]
 8013cde:	429a      	cmp	r2, r3
 8013ce0:	d90d      	bls.n	8013cfe <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 8013ce2:	2301      	movs	r3, #1
 8013ce4:	627b      	str	r3, [r7, #36]	@ 0x24
 8013ce6:	e00a      	b.n	8013cfe <vTaskDelayUntil+0xc2>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	69fa      	ldr	r2, [r7, #28]
 8013cee:	429a      	cmp	r2, r3
 8013cf0:	d303      	bcc.n	8013cfa <vTaskDelayUntil+0xbe>
 8013cf2:	69fa      	ldr	r2, [r7, #28]
 8013cf4:	6a3b      	ldr	r3, [r7, #32]
 8013cf6:	429a      	cmp	r2, r3
 8013cf8:	d901      	bls.n	8013cfe <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 8013cfa:	2301      	movs	r3, #1
 8013cfc:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	69fa      	ldr	r2, [r7, #28]
 8013d02:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8013d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d006      	beq.n	8013d18 <vTaskDelayUntil+0xdc>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8013d0a:	69fa      	ldr	r2, [r7, #28]
 8013d0c:	6a3b      	ldr	r3, [r7, #32]
 8013d0e:	1ad3      	subs	r3, r2, r3
 8013d10:	2100      	movs	r1, #0
 8013d12:	4618      	mov	r0, r3
 8013d14:	f000 fe84 	bl	8014a20 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8013d18:	f000 f8ca 	bl	8013eb0 <xTaskResumeAll>
 8013d1c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013d1e:	69bb      	ldr	r3, [r7, #24]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d107      	bne.n	8013d34 <vTaskDelayUntil+0xf8>
		{
			portYIELD_WITHIN_API();
 8013d24:	4b07      	ldr	r3, [pc, #28]	@ (8013d44 <vTaskDelayUntil+0x108>)
 8013d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013d2a:	601a      	str	r2, [r3, #0]
 8013d2c:	f3bf 8f4f 	dsb	sy
 8013d30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013d34:	bf00      	nop
 8013d36:	3728      	adds	r7, #40	@ 0x28
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	bd80      	pop	{r7, pc}
 8013d3c:	2000160c 	.word	0x2000160c
 8013d40:	200015e8 	.word	0x200015e8
 8013d44:	e000ed04 	.word	0xe000ed04

08013d48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b084      	sub	sp, #16
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013d50:	2300      	movs	r3, #0
 8013d52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d01a      	beq.n	8013d90 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013d5a:	4b15      	ldr	r3, [pc, #84]	@ (8013db0 <vTaskDelay+0x68>)
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d00d      	beq.n	8013d7e <vTaskDelay+0x36>
	__asm volatile
 8013d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d66:	b672      	cpsid	i
 8013d68:	f383 8811 	msr	BASEPRI, r3
 8013d6c:	f3bf 8f6f 	isb	sy
 8013d70:	f3bf 8f4f 	dsb	sy
 8013d74:	b662      	cpsie	i
 8013d76:	60bb      	str	r3, [r7, #8]
}
 8013d78:	bf00      	nop
 8013d7a:	bf00      	nop
 8013d7c:	e7fd      	b.n	8013d7a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8013d7e:	f000 f889 	bl	8013e94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013d82:	2100      	movs	r1, #0
 8013d84:	6878      	ldr	r0, [r7, #4]
 8013d86:	f000 fe4b 	bl	8014a20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013d8a:	f000 f891 	bl	8013eb0 <xTaskResumeAll>
 8013d8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d107      	bne.n	8013da6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8013d96:	4b07      	ldr	r3, [pc, #28]	@ (8013db4 <vTaskDelay+0x6c>)
 8013d98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013d9c:	601a      	str	r2, [r3, #0]
 8013d9e:	f3bf 8f4f 	dsb	sy
 8013da2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013da6:	bf00      	nop
 8013da8:	3710      	adds	r7, #16
 8013daa:	46bd      	mov	sp, r7
 8013dac:	bd80      	pop	{r7, pc}
 8013dae:	bf00      	nop
 8013db0:	2000160c 	.word	0x2000160c
 8013db4:	e000ed04 	.word	0xe000ed04

08013db8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013db8:	b580      	push	{r7, lr}
 8013dba:	b08a      	sub	sp, #40	@ 0x28
 8013dbc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013dc6:	463a      	mov	r2, r7
 8013dc8:	1d39      	adds	r1, r7, #4
 8013dca:	f107 0308 	add.w	r3, r7, #8
 8013dce:	4618      	mov	r0, r3
 8013dd0:	f7ed fa5e 	bl	8001290 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013dd4:	6839      	ldr	r1, [r7, #0]
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	68ba      	ldr	r2, [r7, #8]
 8013dda:	9202      	str	r2, [sp, #8]
 8013ddc:	9301      	str	r3, [sp, #4]
 8013dde:	2300      	movs	r3, #0
 8013de0:	9300      	str	r3, [sp, #0]
 8013de2:	2300      	movs	r3, #0
 8013de4:	460a      	mov	r2, r1
 8013de6:	4923      	ldr	r1, [pc, #140]	@ (8013e74 <vTaskStartScheduler+0xbc>)
 8013de8:	4823      	ldr	r0, [pc, #140]	@ (8013e78 <vTaskStartScheduler+0xc0>)
 8013dea:	f7ff fd6f 	bl	80138cc <xTaskCreateStatic>
 8013dee:	4603      	mov	r3, r0
 8013df0:	4a22      	ldr	r2, [pc, #136]	@ (8013e7c <vTaskStartScheduler+0xc4>)
 8013df2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013df4:	4b21      	ldr	r3, [pc, #132]	@ (8013e7c <vTaskStartScheduler+0xc4>)
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d002      	beq.n	8013e02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013dfc:	2301      	movs	r3, #1
 8013dfe:	617b      	str	r3, [r7, #20]
 8013e00:	e001      	b.n	8013e06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013e02:	2300      	movs	r3, #0
 8013e04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013e06:	697b      	ldr	r3, [r7, #20]
 8013e08:	2b01      	cmp	r3, #1
 8013e0a:	d11d      	bne.n	8013e48 <vTaskStartScheduler+0x90>
	__asm volatile
 8013e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e10:	b672      	cpsid	i
 8013e12:	f383 8811 	msr	BASEPRI, r3
 8013e16:	f3bf 8f6f 	isb	sy
 8013e1a:	f3bf 8f4f 	dsb	sy
 8013e1e:	b662      	cpsie	i
 8013e20:	613b      	str	r3, [r7, #16]
}
 8013e22:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013e24:	4b16      	ldr	r3, [pc, #88]	@ (8013e80 <vTaskStartScheduler+0xc8>)
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	334c      	adds	r3, #76	@ 0x4c
 8013e2a:	4a16      	ldr	r2, [pc, #88]	@ (8013e84 <vTaskStartScheduler+0xcc>)
 8013e2c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013e2e:	4b16      	ldr	r3, [pc, #88]	@ (8013e88 <vTaskStartScheduler+0xd0>)
 8013e30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013e34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013e36:	4b15      	ldr	r3, [pc, #84]	@ (8013e8c <vTaskStartScheduler+0xd4>)
 8013e38:	2201      	movs	r2, #1
 8013e3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013e3c:	4b14      	ldr	r3, [pc, #80]	@ (8013e90 <vTaskStartScheduler+0xd8>)
 8013e3e:	2200      	movs	r2, #0
 8013e40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013e42:	f000 fee5 	bl	8014c10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013e46:	e011      	b.n	8013e6c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013e48:	697b      	ldr	r3, [r7, #20]
 8013e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013e4e:	d10d      	bne.n	8013e6c <vTaskStartScheduler+0xb4>
	__asm volatile
 8013e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e54:	b672      	cpsid	i
 8013e56:	f383 8811 	msr	BASEPRI, r3
 8013e5a:	f3bf 8f6f 	isb	sy
 8013e5e:	f3bf 8f4f 	dsb	sy
 8013e62:	b662      	cpsie	i
 8013e64:	60fb      	str	r3, [r7, #12]
}
 8013e66:	bf00      	nop
 8013e68:	bf00      	nop
 8013e6a:	e7fd      	b.n	8013e68 <vTaskStartScheduler+0xb0>
}
 8013e6c:	bf00      	nop
 8013e6e:	3718      	adds	r7, #24
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd80      	pop	{r7, pc}
 8013e74:	080169d8 	.word	0x080169d8
 8013e78:	080144a9 	.word	0x080144a9
 8013e7c:	20001608 	.word	0x20001608
 8013e80:	200014e4 	.word	0x200014e4
 8013e84:	200000a4 	.word	0x200000a4
 8013e88:	20001604 	.word	0x20001604
 8013e8c:	200015f0 	.word	0x200015f0
 8013e90:	200015e8 	.word	0x200015e8

08013e94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013e94:	b480      	push	{r7}
 8013e96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013e98:	4b04      	ldr	r3, [pc, #16]	@ (8013eac <vTaskSuspendAll+0x18>)
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	3301      	adds	r3, #1
 8013e9e:	4a03      	ldr	r2, [pc, #12]	@ (8013eac <vTaskSuspendAll+0x18>)
 8013ea0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013ea2:	bf00      	nop
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eaa:	4770      	bx	lr
 8013eac:	2000160c 	.word	0x2000160c

08013eb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013eb0:	b580      	push	{r7, lr}
 8013eb2:	b084      	sub	sp, #16
 8013eb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013eba:	2300      	movs	r3, #0
 8013ebc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013ebe:	4b43      	ldr	r3, [pc, #268]	@ (8013fcc <xTaskResumeAll+0x11c>)
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d10d      	bne.n	8013ee2 <xTaskResumeAll+0x32>
	__asm volatile
 8013ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013eca:	b672      	cpsid	i
 8013ecc:	f383 8811 	msr	BASEPRI, r3
 8013ed0:	f3bf 8f6f 	isb	sy
 8013ed4:	f3bf 8f4f 	dsb	sy
 8013ed8:	b662      	cpsie	i
 8013eda:	603b      	str	r3, [r7, #0]
}
 8013edc:	bf00      	nop
 8013ede:	bf00      	nop
 8013ee0:	e7fd      	b.n	8013ede <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013ee2:	f000 ff13 	bl	8014d0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013ee6:	4b39      	ldr	r3, [pc, #228]	@ (8013fcc <xTaskResumeAll+0x11c>)
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	3b01      	subs	r3, #1
 8013eec:	4a37      	ldr	r2, [pc, #220]	@ (8013fcc <xTaskResumeAll+0x11c>)
 8013eee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ef0:	4b36      	ldr	r3, [pc, #216]	@ (8013fcc <xTaskResumeAll+0x11c>)
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d161      	bne.n	8013fbc <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013ef8:	4b35      	ldr	r3, [pc, #212]	@ (8013fd0 <xTaskResumeAll+0x120>)
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d05d      	beq.n	8013fbc <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013f00:	e02e      	b.n	8013f60 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f02:	4b34      	ldr	r3, [pc, #208]	@ (8013fd4 <xTaskResumeAll+0x124>)
 8013f04:	68db      	ldr	r3, [r3, #12]
 8013f06:	68db      	ldr	r3, [r3, #12]
 8013f08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	3318      	adds	r3, #24
 8013f0e:	4618      	mov	r0, r3
 8013f10:	f7fe fcca 	bl	80128a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	3304      	adds	r3, #4
 8013f18:	4618      	mov	r0, r3
 8013f1a:	f7fe fcc5 	bl	80128a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f22:	2201      	movs	r2, #1
 8013f24:	409a      	lsls	r2, r3
 8013f26:	4b2c      	ldr	r3, [pc, #176]	@ (8013fd8 <xTaskResumeAll+0x128>)
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	4313      	orrs	r3, r2
 8013f2c:	4a2a      	ldr	r2, [pc, #168]	@ (8013fd8 <xTaskResumeAll+0x128>)
 8013f2e:	6013      	str	r3, [r2, #0]
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f34:	4613      	mov	r3, r2
 8013f36:	009b      	lsls	r3, r3, #2
 8013f38:	4413      	add	r3, r2
 8013f3a:	009b      	lsls	r3, r3, #2
 8013f3c:	4a27      	ldr	r2, [pc, #156]	@ (8013fdc <xTaskResumeAll+0x12c>)
 8013f3e:	441a      	add	r2, r3
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	3304      	adds	r3, #4
 8013f44:	4619      	mov	r1, r3
 8013f46:	4610      	mov	r0, r2
 8013f48:	f7fe fc51 	bl	80127ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f50:	4b23      	ldr	r3, [pc, #140]	@ (8013fe0 <xTaskResumeAll+0x130>)
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f56:	429a      	cmp	r2, r3
 8013f58:	d302      	bcc.n	8013f60 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8013f5a:	4b22      	ldr	r3, [pc, #136]	@ (8013fe4 <xTaskResumeAll+0x134>)
 8013f5c:	2201      	movs	r2, #1
 8013f5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013f60:	4b1c      	ldr	r3, [pc, #112]	@ (8013fd4 <xTaskResumeAll+0x124>)
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d1cc      	bne.n	8013f02 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d001      	beq.n	8013f72 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013f6e:	f000 fb59 	bl	8014624 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013f72:	4b1d      	ldr	r3, [pc, #116]	@ (8013fe8 <xTaskResumeAll+0x138>)
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d010      	beq.n	8013fa0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013f7e:	f000 f859 	bl	8014034 <xTaskIncrementTick>
 8013f82:	4603      	mov	r3, r0
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d002      	beq.n	8013f8e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8013f88:	4b16      	ldr	r3, [pc, #88]	@ (8013fe4 <xTaskResumeAll+0x134>)
 8013f8a:	2201      	movs	r2, #1
 8013f8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	3b01      	subs	r3, #1
 8013f92:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d1f1      	bne.n	8013f7e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8013f9a:	4b13      	ldr	r3, [pc, #76]	@ (8013fe8 <xTaskResumeAll+0x138>)
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013fa0:	4b10      	ldr	r3, [pc, #64]	@ (8013fe4 <xTaskResumeAll+0x134>)
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d009      	beq.n	8013fbc <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013fa8:	2301      	movs	r3, #1
 8013faa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013fac:	4b0f      	ldr	r3, [pc, #60]	@ (8013fec <xTaskResumeAll+0x13c>)
 8013fae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013fb2:	601a      	str	r2, [r3, #0]
 8013fb4:	f3bf 8f4f 	dsb	sy
 8013fb8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013fbc:	f000 fedc 	bl	8014d78 <vPortExitCritical>

	return xAlreadyYielded;
 8013fc0:	68bb      	ldr	r3, [r7, #8]
}
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	3710      	adds	r7, #16
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	bd80      	pop	{r7, pc}
 8013fca:	bf00      	nop
 8013fcc:	2000160c 	.word	0x2000160c
 8013fd0:	200015e4 	.word	0x200015e4
 8013fd4:	200015a4 	.word	0x200015a4
 8013fd8:	200015ec 	.word	0x200015ec
 8013fdc:	200014e8 	.word	0x200014e8
 8013fe0:	200014e4 	.word	0x200014e4
 8013fe4:	200015f8 	.word	0x200015f8
 8013fe8:	200015f4 	.word	0x200015f4
 8013fec:	e000ed04 	.word	0xe000ed04

08013ff0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013ff0:	b480      	push	{r7}
 8013ff2:	b083      	sub	sp, #12
 8013ff4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013ff6:	4b05      	ldr	r3, [pc, #20]	@ (801400c <xTaskGetTickCount+0x1c>)
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013ffc:	687b      	ldr	r3, [r7, #4]
}
 8013ffe:	4618      	mov	r0, r3
 8014000:	370c      	adds	r7, #12
 8014002:	46bd      	mov	sp, r7
 8014004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014008:	4770      	bx	lr
 801400a:	bf00      	nop
 801400c:	200015e8 	.word	0x200015e8

08014010 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b082      	sub	sp, #8
 8014014:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014016:	f000 ff61 	bl	8014edc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801401a:	2300      	movs	r3, #0
 801401c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801401e:	4b04      	ldr	r3, [pc, #16]	@ (8014030 <xTaskGetTickCountFromISR+0x20>)
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014024:	683b      	ldr	r3, [r7, #0]
}
 8014026:	4618      	mov	r0, r3
 8014028:	3708      	adds	r7, #8
 801402a:	46bd      	mov	sp, r7
 801402c:	bd80      	pop	{r7, pc}
 801402e:	bf00      	nop
 8014030:	200015e8 	.word	0x200015e8

08014034 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b086      	sub	sp, #24
 8014038:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801403a:	2300      	movs	r3, #0
 801403c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801403e:	4b50      	ldr	r3, [pc, #320]	@ (8014180 <xTaskIncrementTick+0x14c>)
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	2b00      	cmp	r3, #0
 8014044:	f040 808b 	bne.w	801415e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014048:	4b4e      	ldr	r3, [pc, #312]	@ (8014184 <xTaskIncrementTick+0x150>)
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	3301      	adds	r3, #1
 801404e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014050:	4a4c      	ldr	r2, [pc, #304]	@ (8014184 <xTaskIncrementTick+0x150>)
 8014052:	693b      	ldr	r3, [r7, #16]
 8014054:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014056:	693b      	ldr	r3, [r7, #16]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d123      	bne.n	80140a4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 801405c:	4b4a      	ldr	r3, [pc, #296]	@ (8014188 <xTaskIncrementTick+0x154>)
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d00d      	beq.n	8014082 <xTaskIncrementTick+0x4e>
	__asm volatile
 8014066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801406a:	b672      	cpsid	i
 801406c:	f383 8811 	msr	BASEPRI, r3
 8014070:	f3bf 8f6f 	isb	sy
 8014074:	f3bf 8f4f 	dsb	sy
 8014078:	b662      	cpsie	i
 801407a:	603b      	str	r3, [r7, #0]
}
 801407c:	bf00      	nop
 801407e:	bf00      	nop
 8014080:	e7fd      	b.n	801407e <xTaskIncrementTick+0x4a>
 8014082:	4b41      	ldr	r3, [pc, #260]	@ (8014188 <xTaskIncrementTick+0x154>)
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	60fb      	str	r3, [r7, #12]
 8014088:	4b40      	ldr	r3, [pc, #256]	@ (801418c <xTaskIncrementTick+0x158>)
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	4a3e      	ldr	r2, [pc, #248]	@ (8014188 <xTaskIncrementTick+0x154>)
 801408e:	6013      	str	r3, [r2, #0]
 8014090:	4a3e      	ldr	r2, [pc, #248]	@ (801418c <xTaskIncrementTick+0x158>)
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	6013      	str	r3, [r2, #0]
 8014096:	4b3e      	ldr	r3, [pc, #248]	@ (8014190 <xTaskIncrementTick+0x15c>)
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	3301      	adds	r3, #1
 801409c:	4a3c      	ldr	r2, [pc, #240]	@ (8014190 <xTaskIncrementTick+0x15c>)
 801409e:	6013      	str	r3, [r2, #0]
 80140a0:	f000 fac0 	bl	8014624 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80140a4:	4b3b      	ldr	r3, [pc, #236]	@ (8014194 <xTaskIncrementTick+0x160>)
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	693a      	ldr	r2, [r7, #16]
 80140aa:	429a      	cmp	r2, r3
 80140ac:	d348      	bcc.n	8014140 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80140ae:	4b36      	ldr	r3, [pc, #216]	@ (8014188 <xTaskIncrementTick+0x154>)
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d104      	bne.n	80140c2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80140b8:	4b36      	ldr	r3, [pc, #216]	@ (8014194 <xTaskIncrementTick+0x160>)
 80140ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80140be:	601a      	str	r2, [r3, #0]
					break;
 80140c0:	e03e      	b.n	8014140 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80140c2:	4b31      	ldr	r3, [pc, #196]	@ (8014188 <xTaskIncrementTick+0x154>)
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	68db      	ldr	r3, [r3, #12]
 80140c8:	68db      	ldr	r3, [r3, #12]
 80140ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	685b      	ldr	r3, [r3, #4]
 80140d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80140d2:	693a      	ldr	r2, [r7, #16]
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	429a      	cmp	r2, r3
 80140d8:	d203      	bcs.n	80140e2 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80140da:	4a2e      	ldr	r2, [pc, #184]	@ (8014194 <xTaskIncrementTick+0x160>)
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80140e0:	e02e      	b.n	8014140 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80140e2:	68bb      	ldr	r3, [r7, #8]
 80140e4:	3304      	adds	r3, #4
 80140e6:	4618      	mov	r0, r3
 80140e8:	f7fe fbde 	bl	80128a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80140ec:	68bb      	ldr	r3, [r7, #8]
 80140ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d004      	beq.n	80140fe <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80140f4:	68bb      	ldr	r3, [r7, #8]
 80140f6:	3318      	adds	r3, #24
 80140f8:	4618      	mov	r0, r3
 80140fa:	f7fe fbd5 	bl	80128a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80140fe:	68bb      	ldr	r3, [r7, #8]
 8014100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014102:	2201      	movs	r2, #1
 8014104:	409a      	lsls	r2, r3
 8014106:	4b24      	ldr	r3, [pc, #144]	@ (8014198 <xTaskIncrementTick+0x164>)
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	4313      	orrs	r3, r2
 801410c:	4a22      	ldr	r2, [pc, #136]	@ (8014198 <xTaskIncrementTick+0x164>)
 801410e:	6013      	str	r3, [r2, #0]
 8014110:	68bb      	ldr	r3, [r7, #8]
 8014112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014114:	4613      	mov	r3, r2
 8014116:	009b      	lsls	r3, r3, #2
 8014118:	4413      	add	r3, r2
 801411a:	009b      	lsls	r3, r3, #2
 801411c:	4a1f      	ldr	r2, [pc, #124]	@ (801419c <xTaskIncrementTick+0x168>)
 801411e:	441a      	add	r2, r3
 8014120:	68bb      	ldr	r3, [r7, #8]
 8014122:	3304      	adds	r3, #4
 8014124:	4619      	mov	r1, r3
 8014126:	4610      	mov	r0, r2
 8014128:	f7fe fb61 	bl	80127ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014130:	4b1b      	ldr	r3, [pc, #108]	@ (80141a0 <xTaskIncrementTick+0x16c>)
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014136:	429a      	cmp	r2, r3
 8014138:	d3b9      	bcc.n	80140ae <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 801413a:	2301      	movs	r3, #1
 801413c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801413e:	e7b6      	b.n	80140ae <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014140:	4b17      	ldr	r3, [pc, #92]	@ (80141a0 <xTaskIncrementTick+0x16c>)
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014146:	4915      	ldr	r1, [pc, #84]	@ (801419c <xTaskIncrementTick+0x168>)
 8014148:	4613      	mov	r3, r2
 801414a:	009b      	lsls	r3, r3, #2
 801414c:	4413      	add	r3, r2
 801414e:	009b      	lsls	r3, r3, #2
 8014150:	440b      	add	r3, r1
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	2b01      	cmp	r3, #1
 8014156:	d907      	bls.n	8014168 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8014158:	2301      	movs	r3, #1
 801415a:	617b      	str	r3, [r7, #20]
 801415c:	e004      	b.n	8014168 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801415e:	4b11      	ldr	r3, [pc, #68]	@ (80141a4 <xTaskIncrementTick+0x170>)
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	3301      	adds	r3, #1
 8014164:	4a0f      	ldr	r2, [pc, #60]	@ (80141a4 <xTaskIncrementTick+0x170>)
 8014166:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014168:	4b0f      	ldr	r3, [pc, #60]	@ (80141a8 <xTaskIncrementTick+0x174>)
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d001      	beq.n	8014174 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8014170:	2301      	movs	r3, #1
 8014172:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014174:	697b      	ldr	r3, [r7, #20]
}
 8014176:	4618      	mov	r0, r3
 8014178:	3718      	adds	r7, #24
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}
 801417e:	bf00      	nop
 8014180:	2000160c 	.word	0x2000160c
 8014184:	200015e8 	.word	0x200015e8
 8014188:	2000159c 	.word	0x2000159c
 801418c:	200015a0 	.word	0x200015a0
 8014190:	200015fc 	.word	0x200015fc
 8014194:	20001604 	.word	0x20001604
 8014198:	200015ec 	.word	0x200015ec
 801419c:	200014e8 	.word	0x200014e8
 80141a0:	200014e4 	.word	0x200014e4
 80141a4:	200015f4 	.word	0x200015f4
 80141a8:	200015f8 	.word	0x200015f8

080141ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80141ac:	b480      	push	{r7}
 80141ae:	b087      	sub	sp, #28
 80141b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80141b2:	4b2b      	ldr	r3, [pc, #172]	@ (8014260 <vTaskSwitchContext+0xb4>)
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d003      	beq.n	80141c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80141ba:	4b2a      	ldr	r3, [pc, #168]	@ (8014264 <vTaskSwitchContext+0xb8>)
 80141bc:	2201      	movs	r2, #1
 80141be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80141c0:	e047      	b.n	8014252 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80141c2:	4b28      	ldr	r3, [pc, #160]	@ (8014264 <vTaskSwitchContext+0xb8>)
 80141c4:	2200      	movs	r2, #0
 80141c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141c8:	4b27      	ldr	r3, [pc, #156]	@ (8014268 <vTaskSwitchContext+0xbc>)
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	fab3 f383 	clz	r3, r3
 80141d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80141d6:	7afb      	ldrb	r3, [r7, #11]
 80141d8:	f1c3 031f 	rsb	r3, r3, #31
 80141dc:	617b      	str	r3, [r7, #20]
 80141de:	4923      	ldr	r1, [pc, #140]	@ (801426c <vTaskSwitchContext+0xc0>)
 80141e0:	697a      	ldr	r2, [r7, #20]
 80141e2:	4613      	mov	r3, r2
 80141e4:	009b      	lsls	r3, r3, #2
 80141e6:	4413      	add	r3, r2
 80141e8:	009b      	lsls	r3, r3, #2
 80141ea:	440b      	add	r3, r1
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d10d      	bne.n	801420e <vTaskSwitchContext+0x62>
	__asm volatile
 80141f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141f6:	b672      	cpsid	i
 80141f8:	f383 8811 	msr	BASEPRI, r3
 80141fc:	f3bf 8f6f 	isb	sy
 8014200:	f3bf 8f4f 	dsb	sy
 8014204:	b662      	cpsie	i
 8014206:	607b      	str	r3, [r7, #4]
}
 8014208:	bf00      	nop
 801420a:	bf00      	nop
 801420c:	e7fd      	b.n	801420a <vTaskSwitchContext+0x5e>
 801420e:	697a      	ldr	r2, [r7, #20]
 8014210:	4613      	mov	r3, r2
 8014212:	009b      	lsls	r3, r3, #2
 8014214:	4413      	add	r3, r2
 8014216:	009b      	lsls	r3, r3, #2
 8014218:	4a14      	ldr	r2, [pc, #80]	@ (801426c <vTaskSwitchContext+0xc0>)
 801421a:	4413      	add	r3, r2
 801421c:	613b      	str	r3, [r7, #16]
 801421e:	693b      	ldr	r3, [r7, #16]
 8014220:	685b      	ldr	r3, [r3, #4]
 8014222:	685a      	ldr	r2, [r3, #4]
 8014224:	693b      	ldr	r3, [r7, #16]
 8014226:	605a      	str	r2, [r3, #4]
 8014228:	693b      	ldr	r3, [r7, #16]
 801422a:	685a      	ldr	r2, [r3, #4]
 801422c:	693b      	ldr	r3, [r7, #16]
 801422e:	3308      	adds	r3, #8
 8014230:	429a      	cmp	r2, r3
 8014232:	d104      	bne.n	801423e <vTaskSwitchContext+0x92>
 8014234:	693b      	ldr	r3, [r7, #16]
 8014236:	685b      	ldr	r3, [r3, #4]
 8014238:	685a      	ldr	r2, [r3, #4]
 801423a:	693b      	ldr	r3, [r7, #16]
 801423c:	605a      	str	r2, [r3, #4]
 801423e:	693b      	ldr	r3, [r7, #16]
 8014240:	685b      	ldr	r3, [r3, #4]
 8014242:	68db      	ldr	r3, [r3, #12]
 8014244:	4a0a      	ldr	r2, [pc, #40]	@ (8014270 <vTaskSwitchContext+0xc4>)
 8014246:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014248:	4b09      	ldr	r3, [pc, #36]	@ (8014270 <vTaskSwitchContext+0xc4>)
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	334c      	adds	r3, #76	@ 0x4c
 801424e:	4a09      	ldr	r2, [pc, #36]	@ (8014274 <vTaskSwitchContext+0xc8>)
 8014250:	6013      	str	r3, [r2, #0]
}
 8014252:	bf00      	nop
 8014254:	371c      	adds	r7, #28
 8014256:	46bd      	mov	sp, r7
 8014258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425c:	4770      	bx	lr
 801425e:	bf00      	nop
 8014260:	2000160c 	.word	0x2000160c
 8014264:	200015f8 	.word	0x200015f8
 8014268:	200015ec 	.word	0x200015ec
 801426c:	200014e8 	.word	0x200014e8
 8014270:	200014e4 	.word	0x200014e4
 8014274:	200000a4 	.word	0x200000a4

08014278 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b084      	sub	sp, #16
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
 8014280:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d10d      	bne.n	80142a4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8014288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801428c:	b672      	cpsid	i
 801428e:	f383 8811 	msr	BASEPRI, r3
 8014292:	f3bf 8f6f 	isb	sy
 8014296:	f3bf 8f4f 	dsb	sy
 801429a:	b662      	cpsie	i
 801429c:	60fb      	str	r3, [r7, #12]
}
 801429e:	bf00      	nop
 80142a0:	bf00      	nop
 80142a2:	e7fd      	b.n	80142a0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80142a4:	4b07      	ldr	r3, [pc, #28]	@ (80142c4 <vTaskPlaceOnEventList+0x4c>)
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	3318      	adds	r3, #24
 80142aa:	4619      	mov	r1, r3
 80142ac:	6878      	ldr	r0, [r7, #4]
 80142ae:	f7fe fac2 	bl	8012836 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80142b2:	2101      	movs	r1, #1
 80142b4:	6838      	ldr	r0, [r7, #0]
 80142b6:	f000 fbb3 	bl	8014a20 <prvAddCurrentTaskToDelayedList>
}
 80142ba:	bf00      	nop
 80142bc:	3710      	adds	r7, #16
 80142be:	46bd      	mov	sp, r7
 80142c0:	bd80      	pop	{r7, pc}
 80142c2:	bf00      	nop
 80142c4:	200014e4 	.word	0x200014e4

080142c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b086      	sub	sp, #24
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	68db      	ldr	r3, [r3, #12]
 80142d4:	68db      	ldr	r3, [r3, #12]
 80142d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80142d8:	693b      	ldr	r3, [r7, #16]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d10d      	bne.n	80142fa <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80142de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142e2:	b672      	cpsid	i
 80142e4:	f383 8811 	msr	BASEPRI, r3
 80142e8:	f3bf 8f6f 	isb	sy
 80142ec:	f3bf 8f4f 	dsb	sy
 80142f0:	b662      	cpsie	i
 80142f2:	60fb      	str	r3, [r7, #12]
}
 80142f4:	bf00      	nop
 80142f6:	bf00      	nop
 80142f8:	e7fd      	b.n	80142f6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80142fa:	693b      	ldr	r3, [r7, #16]
 80142fc:	3318      	adds	r3, #24
 80142fe:	4618      	mov	r0, r3
 8014300:	f7fe fad2 	bl	80128a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014304:	4b1d      	ldr	r3, [pc, #116]	@ (801437c <xTaskRemoveFromEventList+0xb4>)
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d11c      	bne.n	8014346 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801430c:	693b      	ldr	r3, [r7, #16]
 801430e:	3304      	adds	r3, #4
 8014310:	4618      	mov	r0, r3
 8014312:	f7fe fac9 	bl	80128a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014316:	693b      	ldr	r3, [r7, #16]
 8014318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801431a:	2201      	movs	r2, #1
 801431c:	409a      	lsls	r2, r3
 801431e:	4b18      	ldr	r3, [pc, #96]	@ (8014380 <xTaskRemoveFromEventList+0xb8>)
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	4313      	orrs	r3, r2
 8014324:	4a16      	ldr	r2, [pc, #88]	@ (8014380 <xTaskRemoveFromEventList+0xb8>)
 8014326:	6013      	str	r3, [r2, #0]
 8014328:	693b      	ldr	r3, [r7, #16]
 801432a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801432c:	4613      	mov	r3, r2
 801432e:	009b      	lsls	r3, r3, #2
 8014330:	4413      	add	r3, r2
 8014332:	009b      	lsls	r3, r3, #2
 8014334:	4a13      	ldr	r2, [pc, #76]	@ (8014384 <xTaskRemoveFromEventList+0xbc>)
 8014336:	441a      	add	r2, r3
 8014338:	693b      	ldr	r3, [r7, #16]
 801433a:	3304      	adds	r3, #4
 801433c:	4619      	mov	r1, r3
 801433e:	4610      	mov	r0, r2
 8014340:	f7fe fa55 	bl	80127ee <vListInsertEnd>
 8014344:	e005      	b.n	8014352 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014346:	693b      	ldr	r3, [r7, #16]
 8014348:	3318      	adds	r3, #24
 801434a:	4619      	mov	r1, r3
 801434c:	480e      	ldr	r0, [pc, #56]	@ (8014388 <xTaskRemoveFromEventList+0xc0>)
 801434e:	f7fe fa4e 	bl	80127ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014352:	693b      	ldr	r3, [r7, #16]
 8014354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014356:	4b0d      	ldr	r3, [pc, #52]	@ (801438c <xTaskRemoveFromEventList+0xc4>)
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801435c:	429a      	cmp	r2, r3
 801435e:	d905      	bls.n	801436c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014360:	2301      	movs	r3, #1
 8014362:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014364:	4b0a      	ldr	r3, [pc, #40]	@ (8014390 <xTaskRemoveFromEventList+0xc8>)
 8014366:	2201      	movs	r2, #1
 8014368:	601a      	str	r2, [r3, #0]
 801436a:	e001      	b.n	8014370 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 801436c:	2300      	movs	r3, #0
 801436e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014370:	697b      	ldr	r3, [r7, #20]
}
 8014372:	4618      	mov	r0, r3
 8014374:	3718      	adds	r7, #24
 8014376:	46bd      	mov	sp, r7
 8014378:	bd80      	pop	{r7, pc}
 801437a:	bf00      	nop
 801437c:	2000160c 	.word	0x2000160c
 8014380:	200015ec 	.word	0x200015ec
 8014384:	200014e8 	.word	0x200014e8
 8014388:	200015a4 	.word	0x200015a4
 801438c:	200014e4 	.word	0x200014e4
 8014390:	200015f8 	.word	0x200015f8

08014394 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014394:	b480      	push	{r7}
 8014396:	b083      	sub	sp, #12
 8014398:	af00      	add	r7, sp, #0
 801439a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801439c:	4b06      	ldr	r3, [pc, #24]	@ (80143b8 <vTaskInternalSetTimeOutState+0x24>)
 801439e:	681a      	ldr	r2, [r3, #0]
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80143a4:	4b05      	ldr	r3, [pc, #20]	@ (80143bc <vTaskInternalSetTimeOutState+0x28>)
 80143a6:	681a      	ldr	r2, [r3, #0]
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	605a      	str	r2, [r3, #4]
}
 80143ac:	bf00      	nop
 80143ae:	370c      	adds	r7, #12
 80143b0:	46bd      	mov	sp, r7
 80143b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b6:	4770      	bx	lr
 80143b8:	200015fc 	.word	0x200015fc
 80143bc:	200015e8 	.word	0x200015e8

080143c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b088      	sub	sp, #32
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	6078      	str	r0, [r7, #4]
 80143c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d10d      	bne.n	80143ec <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80143d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143d4:	b672      	cpsid	i
 80143d6:	f383 8811 	msr	BASEPRI, r3
 80143da:	f3bf 8f6f 	isb	sy
 80143de:	f3bf 8f4f 	dsb	sy
 80143e2:	b662      	cpsie	i
 80143e4:	613b      	str	r3, [r7, #16]
}
 80143e6:	bf00      	nop
 80143e8:	bf00      	nop
 80143ea:	e7fd      	b.n	80143e8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80143ec:	683b      	ldr	r3, [r7, #0]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d10d      	bne.n	801440e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80143f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143f6:	b672      	cpsid	i
 80143f8:	f383 8811 	msr	BASEPRI, r3
 80143fc:	f3bf 8f6f 	isb	sy
 8014400:	f3bf 8f4f 	dsb	sy
 8014404:	b662      	cpsie	i
 8014406:	60fb      	str	r3, [r7, #12]
}
 8014408:	bf00      	nop
 801440a:	bf00      	nop
 801440c:	e7fd      	b.n	801440a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 801440e:	f000 fc7d 	bl	8014d0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014412:	4b1d      	ldr	r3, [pc, #116]	@ (8014488 <xTaskCheckForTimeOut+0xc8>)
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	685b      	ldr	r3, [r3, #4]
 801441c:	69ba      	ldr	r2, [r7, #24]
 801441e:	1ad3      	subs	r3, r2, r3
 8014420:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014422:	683b      	ldr	r3, [r7, #0]
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801442a:	d102      	bne.n	8014432 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801442c:	2300      	movs	r3, #0
 801442e:	61fb      	str	r3, [r7, #28]
 8014430:	e023      	b.n	801447a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	681a      	ldr	r2, [r3, #0]
 8014436:	4b15      	ldr	r3, [pc, #84]	@ (801448c <xTaskCheckForTimeOut+0xcc>)
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	429a      	cmp	r2, r3
 801443c:	d007      	beq.n	801444e <xTaskCheckForTimeOut+0x8e>
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	685b      	ldr	r3, [r3, #4]
 8014442:	69ba      	ldr	r2, [r7, #24]
 8014444:	429a      	cmp	r2, r3
 8014446:	d302      	bcc.n	801444e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014448:	2301      	movs	r3, #1
 801444a:	61fb      	str	r3, [r7, #28]
 801444c:	e015      	b.n	801447a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801444e:	683b      	ldr	r3, [r7, #0]
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	697a      	ldr	r2, [r7, #20]
 8014454:	429a      	cmp	r2, r3
 8014456:	d20b      	bcs.n	8014470 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014458:	683b      	ldr	r3, [r7, #0]
 801445a:	681a      	ldr	r2, [r3, #0]
 801445c:	697b      	ldr	r3, [r7, #20]
 801445e:	1ad2      	subs	r2, r2, r3
 8014460:	683b      	ldr	r3, [r7, #0]
 8014462:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014464:	6878      	ldr	r0, [r7, #4]
 8014466:	f7ff ff95 	bl	8014394 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801446a:	2300      	movs	r3, #0
 801446c:	61fb      	str	r3, [r7, #28]
 801446e:	e004      	b.n	801447a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8014470:	683b      	ldr	r3, [r7, #0]
 8014472:	2200      	movs	r2, #0
 8014474:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014476:	2301      	movs	r3, #1
 8014478:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801447a:	f000 fc7d 	bl	8014d78 <vPortExitCritical>

	return xReturn;
 801447e:	69fb      	ldr	r3, [r7, #28]
}
 8014480:	4618      	mov	r0, r3
 8014482:	3720      	adds	r7, #32
 8014484:	46bd      	mov	sp, r7
 8014486:	bd80      	pop	{r7, pc}
 8014488:	200015e8 	.word	0x200015e8
 801448c:	200015fc 	.word	0x200015fc

08014490 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014490:	b480      	push	{r7}
 8014492:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014494:	4b03      	ldr	r3, [pc, #12]	@ (80144a4 <vTaskMissedYield+0x14>)
 8014496:	2201      	movs	r2, #1
 8014498:	601a      	str	r2, [r3, #0]
}
 801449a:	bf00      	nop
 801449c:	46bd      	mov	sp, r7
 801449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a2:	4770      	bx	lr
 80144a4:	200015f8 	.word	0x200015f8

080144a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	b082      	sub	sp, #8
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80144b0:	f000 f852 	bl	8014558 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80144b4:	4b06      	ldr	r3, [pc, #24]	@ (80144d0 <prvIdleTask+0x28>)
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	2b01      	cmp	r3, #1
 80144ba:	d9f9      	bls.n	80144b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80144bc:	4b05      	ldr	r3, [pc, #20]	@ (80144d4 <prvIdleTask+0x2c>)
 80144be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80144c2:	601a      	str	r2, [r3, #0]
 80144c4:	f3bf 8f4f 	dsb	sy
 80144c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80144cc:	e7f0      	b.n	80144b0 <prvIdleTask+0x8>
 80144ce:	bf00      	nop
 80144d0:	200014e8 	.word	0x200014e8
 80144d4:	e000ed04 	.word	0xe000ed04

080144d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b082      	sub	sp, #8
 80144dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80144de:	2300      	movs	r3, #0
 80144e0:	607b      	str	r3, [r7, #4]
 80144e2:	e00c      	b.n	80144fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80144e4:	687a      	ldr	r2, [r7, #4]
 80144e6:	4613      	mov	r3, r2
 80144e8:	009b      	lsls	r3, r3, #2
 80144ea:	4413      	add	r3, r2
 80144ec:	009b      	lsls	r3, r3, #2
 80144ee:	4a12      	ldr	r2, [pc, #72]	@ (8014538 <prvInitialiseTaskLists+0x60>)
 80144f0:	4413      	add	r3, r2
 80144f2:	4618      	mov	r0, r3
 80144f4:	f7fe f94e 	bl	8012794 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	3301      	adds	r3, #1
 80144fc:	607b      	str	r3, [r7, #4]
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	2b06      	cmp	r3, #6
 8014502:	d9ef      	bls.n	80144e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014504:	480d      	ldr	r0, [pc, #52]	@ (801453c <prvInitialiseTaskLists+0x64>)
 8014506:	f7fe f945 	bl	8012794 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801450a:	480d      	ldr	r0, [pc, #52]	@ (8014540 <prvInitialiseTaskLists+0x68>)
 801450c:	f7fe f942 	bl	8012794 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014510:	480c      	ldr	r0, [pc, #48]	@ (8014544 <prvInitialiseTaskLists+0x6c>)
 8014512:	f7fe f93f 	bl	8012794 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014516:	480c      	ldr	r0, [pc, #48]	@ (8014548 <prvInitialiseTaskLists+0x70>)
 8014518:	f7fe f93c 	bl	8012794 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801451c:	480b      	ldr	r0, [pc, #44]	@ (801454c <prvInitialiseTaskLists+0x74>)
 801451e:	f7fe f939 	bl	8012794 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014522:	4b0b      	ldr	r3, [pc, #44]	@ (8014550 <prvInitialiseTaskLists+0x78>)
 8014524:	4a05      	ldr	r2, [pc, #20]	@ (801453c <prvInitialiseTaskLists+0x64>)
 8014526:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014528:	4b0a      	ldr	r3, [pc, #40]	@ (8014554 <prvInitialiseTaskLists+0x7c>)
 801452a:	4a05      	ldr	r2, [pc, #20]	@ (8014540 <prvInitialiseTaskLists+0x68>)
 801452c:	601a      	str	r2, [r3, #0]
}
 801452e:	bf00      	nop
 8014530:	3708      	adds	r7, #8
 8014532:	46bd      	mov	sp, r7
 8014534:	bd80      	pop	{r7, pc}
 8014536:	bf00      	nop
 8014538:	200014e8 	.word	0x200014e8
 801453c:	20001574 	.word	0x20001574
 8014540:	20001588 	.word	0x20001588
 8014544:	200015a4 	.word	0x200015a4
 8014548:	200015b8 	.word	0x200015b8
 801454c:	200015d0 	.word	0x200015d0
 8014550:	2000159c 	.word	0x2000159c
 8014554:	200015a0 	.word	0x200015a0

08014558 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b082      	sub	sp, #8
 801455c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801455e:	e019      	b.n	8014594 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014560:	f000 fbd4 	bl	8014d0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014564:	4b10      	ldr	r3, [pc, #64]	@ (80145a8 <prvCheckTasksWaitingTermination+0x50>)
 8014566:	68db      	ldr	r3, [r3, #12]
 8014568:	68db      	ldr	r3, [r3, #12]
 801456a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	3304      	adds	r3, #4
 8014570:	4618      	mov	r0, r3
 8014572:	f7fe f999 	bl	80128a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014576:	4b0d      	ldr	r3, [pc, #52]	@ (80145ac <prvCheckTasksWaitingTermination+0x54>)
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	3b01      	subs	r3, #1
 801457c:	4a0b      	ldr	r2, [pc, #44]	@ (80145ac <prvCheckTasksWaitingTermination+0x54>)
 801457e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014580:	4b0b      	ldr	r3, [pc, #44]	@ (80145b0 <prvCheckTasksWaitingTermination+0x58>)
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	3b01      	subs	r3, #1
 8014586:	4a0a      	ldr	r2, [pc, #40]	@ (80145b0 <prvCheckTasksWaitingTermination+0x58>)
 8014588:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801458a:	f000 fbf5 	bl	8014d78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801458e:	6878      	ldr	r0, [r7, #4]
 8014590:	f000 f810 	bl	80145b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014594:	4b06      	ldr	r3, [pc, #24]	@ (80145b0 <prvCheckTasksWaitingTermination+0x58>)
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d1e1      	bne.n	8014560 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801459c:	bf00      	nop
 801459e:	bf00      	nop
 80145a0:	3708      	adds	r7, #8
 80145a2:	46bd      	mov	sp, r7
 80145a4:	bd80      	pop	{r7, pc}
 80145a6:	bf00      	nop
 80145a8:	200015b8 	.word	0x200015b8
 80145ac:	200015e4 	.word	0x200015e4
 80145b0:	200015cc 	.word	0x200015cc

080145b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80145b4:	b580      	push	{r7, lr}
 80145b6:	b084      	sub	sp, #16
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	334c      	adds	r3, #76	@ 0x4c
 80145c0:	4618      	mov	r0, r3
 80145c2:	f001 f837 	bl	8015634 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d108      	bne.n	80145e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80145d4:	4618      	mov	r0, r3
 80145d6:	f000 fd95 	bl	8015104 <vPortFree>
				vPortFree( pxTCB );
 80145da:	6878      	ldr	r0, [r7, #4]
 80145dc:	f000 fd92 	bl	8015104 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80145e0:	e01b      	b.n	801461a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80145e8:	2b01      	cmp	r3, #1
 80145ea:	d103      	bne.n	80145f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80145ec:	6878      	ldr	r0, [r7, #4]
 80145ee:	f000 fd89 	bl	8015104 <vPortFree>
	}
 80145f2:	e012      	b.n	801461a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80145fa:	2b02      	cmp	r3, #2
 80145fc:	d00d      	beq.n	801461a <prvDeleteTCB+0x66>
	__asm volatile
 80145fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014602:	b672      	cpsid	i
 8014604:	f383 8811 	msr	BASEPRI, r3
 8014608:	f3bf 8f6f 	isb	sy
 801460c:	f3bf 8f4f 	dsb	sy
 8014610:	b662      	cpsie	i
 8014612:	60fb      	str	r3, [r7, #12]
}
 8014614:	bf00      	nop
 8014616:	bf00      	nop
 8014618:	e7fd      	b.n	8014616 <prvDeleteTCB+0x62>
	}
 801461a:	bf00      	nop
 801461c:	3710      	adds	r7, #16
 801461e:	46bd      	mov	sp, r7
 8014620:	bd80      	pop	{r7, pc}
	...

08014624 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014624:	b480      	push	{r7}
 8014626:	b083      	sub	sp, #12
 8014628:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801462a:	4b0c      	ldr	r3, [pc, #48]	@ (801465c <prvResetNextTaskUnblockTime+0x38>)
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d104      	bne.n	801463e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014634:	4b0a      	ldr	r3, [pc, #40]	@ (8014660 <prvResetNextTaskUnblockTime+0x3c>)
 8014636:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801463a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801463c:	e008      	b.n	8014650 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801463e:	4b07      	ldr	r3, [pc, #28]	@ (801465c <prvResetNextTaskUnblockTime+0x38>)
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	68db      	ldr	r3, [r3, #12]
 8014644:	68db      	ldr	r3, [r3, #12]
 8014646:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	685b      	ldr	r3, [r3, #4]
 801464c:	4a04      	ldr	r2, [pc, #16]	@ (8014660 <prvResetNextTaskUnblockTime+0x3c>)
 801464e:	6013      	str	r3, [r2, #0]
}
 8014650:	bf00      	nop
 8014652:	370c      	adds	r7, #12
 8014654:	46bd      	mov	sp, r7
 8014656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801465a:	4770      	bx	lr
 801465c:	2000159c 	.word	0x2000159c
 8014660:	20001604 	.word	0x20001604

08014664 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014664:	b480      	push	{r7}
 8014666:	b083      	sub	sp, #12
 8014668:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801466a:	4b0b      	ldr	r3, [pc, #44]	@ (8014698 <xTaskGetSchedulerState+0x34>)
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d102      	bne.n	8014678 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014672:	2301      	movs	r3, #1
 8014674:	607b      	str	r3, [r7, #4]
 8014676:	e008      	b.n	801468a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014678:	4b08      	ldr	r3, [pc, #32]	@ (801469c <xTaskGetSchedulerState+0x38>)
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d102      	bne.n	8014686 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014680:	2302      	movs	r3, #2
 8014682:	607b      	str	r3, [r7, #4]
 8014684:	e001      	b.n	801468a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014686:	2300      	movs	r3, #0
 8014688:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801468a:	687b      	ldr	r3, [r7, #4]
	}
 801468c:	4618      	mov	r0, r3
 801468e:	370c      	adds	r7, #12
 8014690:	46bd      	mov	sp, r7
 8014692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014696:	4770      	bx	lr
 8014698:	200015f0 	.word	0x200015f0
 801469c:	2000160c 	.word	0x2000160c

080146a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80146a0:	b580      	push	{r7, lr}
 80146a2:	b084      	sub	sp, #16
 80146a4:	af00      	add	r7, sp, #0
 80146a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80146ac:	2300      	movs	r3, #0
 80146ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d069      	beq.n	801478a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80146b6:	68bb      	ldr	r3, [r7, #8]
 80146b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146ba:	4b36      	ldr	r3, [pc, #216]	@ (8014794 <xTaskPriorityInherit+0xf4>)
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146c0:	429a      	cmp	r2, r3
 80146c2:	d259      	bcs.n	8014778 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80146c4:	68bb      	ldr	r3, [r7, #8]
 80146c6:	699b      	ldr	r3, [r3, #24]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	db06      	blt.n	80146da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80146cc:	4b31      	ldr	r3, [pc, #196]	@ (8014794 <xTaskPriorityInherit+0xf4>)
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146d2:	f1c3 0207 	rsb	r2, r3, #7
 80146d6:	68bb      	ldr	r3, [r7, #8]
 80146d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80146da:	68bb      	ldr	r3, [r7, #8]
 80146dc:	6959      	ldr	r1, [r3, #20]
 80146de:	68bb      	ldr	r3, [r7, #8]
 80146e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146e2:	4613      	mov	r3, r2
 80146e4:	009b      	lsls	r3, r3, #2
 80146e6:	4413      	add	r3, r2
 80146e8:	009b      	lsls	r3, r3, #2
 80146ea:	4a2b      	ldr	r2, [pc, #172]	@ (8014798 <xTaskPriorityInherit+0xf8>)
 80146ec:	4413      	add	r3, r2
 80146ee:	4299      	cmp	r1, r3
 80146f0:	d13a      	bne.n	8014768 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80146f2:	68bb      	ldr	r3, [r7, #8]
 80146f4:	3304      	adds	r3, #4
 80146f6:	4618      	mov	r0, r3
 80146f8:	f7fe f8d6 	bl	80128a8 <uxListRemove>
 80146fc:	4603      	mov	r3, r0
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d115      	bne.n	801472e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8014702:	68bb      	ldr	r3, [r7, #8]
 8014704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014706:	4924      	ldr	r1, [pc, #144]	@ (8014798 <xTaskPriorityInherit+0xf8>)
 8014708:	4613      	mov	r3, r2
 801470a:	009b      	lsls	r3, r3, #2
 801470c:	4413      	add	r3, r2
 801470e:	009b      	lsls	r3, r3, #2
 8014710:	440b      	add	r3, r1
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d10a      	bne.n	801472e <xTaskPriorityInherit+0x8e>
 8014718:	68bb      	ldr	r3, [r7, #8]
 801471a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801471c:	2201      	movs	r2, #1
 801471e:	fa02 f303 	lsl.w	r3, r2, r3
 8014722:	43da      	mvns	r2, r3
 8014724:	4b1d      	ldr	r3, [pc, #116]	@ (801479c <xTaskPriorityInherit+0xfc>)
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	4013      	ands	r3, r2
 801472a:	4a1c      	ldr	r2, [pc, #112]	@ (801479c <xTaskPriorityInherit+0xfc>)
 801472c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801472e:	4b19      	ldr	r3, [pc, #100]	@ (8014794 <xTaskPriorityInherit+0xf4>)
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014734:	68bb      	ldr	r3, [r7, #8]
 8014736:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014738:	68bb      	ldr	r3, [r7, #8]
 801473a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801473c:	2201      	movs	r2, #1
 801473e:	409a      	lsls	r2, r3
 8014740:	4b16      	ldr	r3, [pc, #88]	@ (801479c <xTaskPriorityInherit+0xfc>)
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	4313      	orrs	r3, r2
 8014746:	4a15      	ldr	r2, [pc, #84]	@ (801479c <xTaskPriorityInherit+0xfc>)
 8014748:	6013      	str	r3, [r2, #0]
 801474a:	68bb      	ldr	r3, [r7, #8]
 801474c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801474e:	4613      	mov	r3, r2
 8014750:	009b      	lsls	r3, r3, #2
 8014752:	4413      	add	r3, r2
 8014754:	009b      	lsls	r3, r3, #2
 8014756:	4a10      	ldr	r2, [pc, #64]	@ (8014798 <xTaskPriorityInherit+0xf8>)
 8014758:	441a      	add	r2, r3
 801475a:	68bb      	ldr	r3, [r7, #8]
 801475c:	3304      	adds	r3, #4
 801475e:	4619      	mov	r1, r3
 8014760:	4610      	mov	r0, r2
 8014762:	f7fe f844 	bl	80127ee <vListInsertEnd>
 8014766:	e004      	b.n	8014772 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014768:	4b0a      	ldr	r3, [pc, #40]	@ (8014794 <xTaskPriorityInherit+0xf4>)
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801476e:	68bb      	ldr	r3, [r7, #8]
 8014770:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014772:	2301      	movs	r3, #1
 8014774:	60fb      	str	r3, [r7, #12]
 8014776:	e008      	b.n	801478a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014778:	68bb      	ldr	r3, [r7, #8]
 801477a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801477c:	4b05      	ldr	r3, [pc, #20]	@ (8014794 <xTaskPriorityInherit+0xf4>)
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014782:	429a      	cmp	r2, r3
 8014784:	d201      	bcs.n	801478a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014786:	2301      	movs	r3, #1
 8014788:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801478a:	68fb      	ldr	r3, [r7, #12]
	}
 801478c:	4618      	mov	r0, r3
 801478e:	3710      	adds	r7, #16
 8014790:	46bd      	mov	sp, r7
 8014792:	bd80      	pop	{r7, pc}
 8014794:	200014e4 	.word	0x200014e4
 8014798:	200014e8 	.word	0x200014e8
 801479c:	200015ec 	.word	0x200015ec

080147a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80147a0:	b580      	push	{r7, lr}
 80147a2:	b086      	sub	sp, #24
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80147ac:	2300      	movs	r3, #0
 80147ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d074      	beq.n	80148a0 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80147b6:	4b3d      	ldr	r3, [pc, #244]	@ (80148ac <xTaskPriorityDisinherit+0x10c>)
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	693a      	ldr	r2, [r7, #16]
 80147bc:	429a      	cmp	r2, r3
 80147be:	d00d      	beq.n	80147dc <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80147c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147c4:	b672      	cpsid	i
 80147c6:	f383 8811 	msr	BASEPRI, r3
 80147ca:	f3bf 8f6f 	isb	sy
 80147ce:	f3bf 8f4f 	dsb	sy
 80147d2:	b662      	cpsie	i
 80147d4:	60fb      	str	r3, [r7, #12]
}
 80147d6:	bf00      	nop
 80147d8:	bf00      	nop
 80147da:	e7fd      	b.n	80147d8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80147dc:	693b      	ldr	r3, [r7, #16]
 80147de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d10d      	bne.n	8014800 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80147e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147e8:	b672      	cpsid	i
 80147ea:	f383 8811 	msr	BASEPRI, r3
 80147ee:	f3bf 8f6f 	isb	sy
 80147f2:	f3bf 8f4f 	dsb	sy
 80147f6:	b662      	cpsie	i
 80147f8:	60bb      	str	r3, [r7, #8]
}
 80147fa:	bf00      	nop
 80147fc:	bf00      	nop
 80147fe:	e7fd      	b.n	80147fc <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8014800:	693b      	ldr	r3, [r7, #16]
 8014802:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014804:	1e5a      	subs	r2, r3, #1
 8014806:	693b      	ldr	r3, [r7, #16]
 8014808:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801480a:	693b      	ldr	r3, [r7, #16]
 801480c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801480e:	693b      	ldr	r3, [r7, #16]
 8014810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014812:	429a      	cmp	r2, r3
 8014814:	d044      	beq.n	80148a0 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014816:	693b      	ldr	r3, [r7, #16]
 8014818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801481a:	2b00      	cmp	r3, #0
 801481c:	d140      	bne.n	80148a0 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801481e:	693b      	ldr	r3, [r7, #16]
 8014820:	3304      	adds	r3, #4
 8014822:	4618      	mov	r0, r3
 8014824:	f7fe f840 	bl	80128a8 <uxListRemove>
 8014828:	4603      	mov	r3, r0
 801482a:	2b00      	cmp	r3, #0
 801482c:	d115      	bne.n	801485a <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801482e:	693b      	ldr	r3, [r7, #16]
 8014830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014832:	491f      	ldr	r1, [pc, #124]	@ (80148b0 <xTaskPriorityDisinherit+0x110>)
 8014834:	4613      	mov	r3, r2
 8014836:	009b      	lsls	r3, r3, #2
 8014838:	4413      	add	r3, r2
 801483a:	009b      	lsls	r3, r3, #2
 801483c:	440b      	add	r3, r1
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d10a      	bne.n	801485a <xTaskPriorityDisinherit+0xba>
 8014844:	693b      	ldr	r3, [r7, #16]
 8014846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014848:	2201      	movs	r2, #1
 801484a:	fa02 f303 	lsl.w	r3, r2, r3
 801484e:	43da      	mvns	r2, r3
 8014850:	4b18      	ldr	r3, [pc, #96]	@ (80148b4 <xTaskPriorityDisinherit+0x114>)
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	4013      	ands	r3, r2
 8014856:	4a17      	ldr	r2, [pc, #92]	@ (80148b4 <xTaskPriorityDisinherit+0x114>)
 8014858:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801485a:	693b      	ldr	r3, [r7, #16]
 801485c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801485e:	693b      	ldr	r3, [r7, #16]
 8014860:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014862:	693b      	ldr	r3, [r7, #16]
 8014864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014866:	f1c3 0207 	rsb	r2, r3, #7
 801486a:	693b      	ldr	r3, [r7, #16]
 801486c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801486e:	693b      	ldr	r3, [r7, #16]
 8014870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014872:	2201      	movs	r2, #1
 8014874:	409a      	lsls	r2, r3
 8014876:	4b0f      	ldr	r3, [pc, #60]	@ (80148b4 <xTaskPriorityDisinherit+0x114>)
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	4313      	orrs	r3, r2
 801487c:	4a0d      	ldr	r2, [pc, #52]	@ (80148b4 <xTaskPriorityDisinherit+0x114>)
 801487e:	6013      	str	r3, [r2, #0]
 8014880:	693b      	ldr	r3, [r7, #16]
 8014882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014884:	4613      	mov	r3, r2
 8014886:	009b      	lsls	r3, r3, #2
 8014888:	4413      	add	r3, r2
 801488a:	009b      	lsls	r3, r3, #2
 801488c:	4a08      	ldr	r2, [pc, #32]	@ (80148b0 <xTaskPriorityDisinherit+0x110>)
 801488e:	441a      	add	r2, r3
 8014890:	693b      	ldr	r3, [r7, #16]
 8014892:	3304      	adds	r3, #4
 8014894:	4619      	mov	r1, r3
 8014896:	4610      	mov	r0, r2
 8014898:	f7fd ffa9 	bl	80127ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801489c:	2301      	movs	r3, #1
 801489e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80148a0:	697b      	ldr	r3, [r7, #20]
	}
 80148a2:	4618      	mov	r0, r3
 80148a4:	3718      	adds	r7, #24
 80148a6:	46bd      	mov	sp, r7
 80148a8:	bd80      	pop	{r7, pc}
 80148aa:	bf00      	nop
 80148ac:	200014e4 	.word	0x200014e4
 80148b0:	200014e8 	.word	0x200014e8
 80148b4:	200015ec 	.word	0x200015ec

080148b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b088      	sub	sp, #32
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
 80148c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80148c6:	2301      	movs	r3, #1
 80148c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	f000 8089 	beq.w	80149e4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80148d2:	69bb      	ldr	r3, [r7, #24]
 80148d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d10d      	bne.n	80148f6 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 80148da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148de:	b672      	cpsid	i
 80148e0:	f383 8811 	msr	BASEPRI, r3
 80148e4:	f3bf 8f6f 	isb	sy
 80148e8:	f3bf 8f4f 	dsb	sy
 80148ec:	b662      	cpsie	i
 80148ee:	60fb      	str	r3, [r7, #12]
}
 80148f0:	bf00      	nop
 80148f2:	bf00      	nop
 80148f4:	e7fd      	b.n	80148f2 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80148f6:	69bb      	ldr	r3, [r7, #24]
 80148f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80148fa:	683a      	ldr	r2, [r7, #0]
 80148fc:	429a      	cmp	r2, r3
 80148fe:	d902      	bls.n	8014906 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014900:	683b      	ldr	r3, [r7, #0]
 8014902:	61fb      	str	r3, [r7, #28]
 8014904:	e002      	b.n	801490c <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014906:	69bb      	ldr	r3, [r7, #24]
 8014908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801490a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801490c:	69bb      	ldr	r3, [r7, #24]
 801490e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014910:	69fa      	ldr	r2, [r7, #28]
 8014912:	429a      	cmp	r2, r3
 8014914:	d066      	beq.n	80149e4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014916:	69bb      	ldr	r3, [r7, #24]
 8014918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801491a:	697a      	ldr	r2, [r7, #20]
 801491c:	429a      	cmp	r2, r3
 801491e:	d161      	bne.n	80149e4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014920:	4b32      	ldr	r3, [pc, #200]	@ (80149ec <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	69ba      	ldr	r2, [r7, #24]
 8014926:	429a      	cmp	r2, r3
 8014928:	d10d      	bne.n	8014946 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 801492a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801492e:	b672      	cpsid	i
 8014930:	f383 8811 	msr	BASEPRI, r3
 8014934:	f3bf 8f6f 	isb	sy
 8014938:	f3bf 8f4f 	dsb	sy
 801493c:	b662      	cpsie	i
 801493e:	60bb      	str	r3, [r7, #8]
}
 8014940:	bf00      	nop
 8014942:	bf00      	nop
 8014944:	e7fd      	b.n	8014942 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014946:	69bb      	ldr	r3, [r7, #24]
 8014948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801494a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801494c:	69bb      	ldr	r3, [r7, #24]
 801494e:	69fa      	ldr	r2, [r7, #28]
 8014950:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014952:	69bb      	ldr	r3, [r7, #24]
 8014954:	699b      	ldr	r3, [r3, #24]
 8014956:	2b00      	cmp	r3, #0
 8014958:	db04      	blt.n	8014964 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801495a:	69fb      	ldr	r3, [r7, #28]
 801495c:	f1c3 0207 	rsb	r2, r3, #7
 8014960:	69bb      	ldr	r3, [r7, #24]
 8014962:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014964:	69bb      	ldr	r3, [r7, #24]
 8014966:	6959      	ldr	r1, [r3, #20]
 8014968:	693a      	ldr	r2, [r7, #16]
 801496a:	4613      	mov	r3, r2
 801496c:	009b      	lsls	r3, r3, #2
 801496e:	4413      	add	r3, r2
 8014970:	009b      	lsls	r3, r3, #2
 8014972:	4a1f      	ldr	r2, [pc, #124]	@ (80149f0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014974:	4413      	add	r3, r2
 8014976:	4299      	cmp	r1, r3
 8014978:	d134      	bne.n	80149e4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801497a:	69bb      	ldr	r3, [r7, #24]
 801497c:	3304      	adds	r3, #4
 801497e:	4618      	mov	r0, r3
 8014980:	f7fd ff92 	bl	80128a8 <uxListRemove>
 8014984:	4603      	mov	r3, r0
 8014986:	2b00      	cmp	r3, #0
 8014988:	d115      	bne.n	80149b6 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801498a:	69bb      	ldr	r3, [r7, #24]
 801498c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801498e:	4918      	ldr	r1, [pc, #96]	@ (80149f0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014990:	4613      	mov	r3, r2
 8014992:	009b      	lsls	r3, r3, #2
 8014994:	4413      	add	r3, r2
 8014996:	009b      	lsls	r3, r3, #2
 8014998:	440b      	add	r3, r1
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d10a      	bne.n	80149b6 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 80149a0:	69bb      	ldr	r3, [r7, #24]
 80149a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149a4:	2201      	movs	r2, #1
 80149a6:	fa02 f303 	lsl.w	r3, r2, r3
 80149aa:	43da      	mvns	r2, r3
 80149ac:	4b11      	ldr	r3, [pc, #68]	@ (80149f4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	4013      	ands	r3, r2
 80149b2:	4a10      	ldr	r2, [pc, #64]	@ (80149f4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80149b4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80149b6:	69bb      	ldr	r3, [r7, #24]
 80149b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149ba:	2201      	movs	r2, #1
 80149bc:	409a      	lsls	r2, r3
 80149be:	4b0d      	ldr	r3, [pc, #52]	@ (80149f4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	4313      	orrs	r3, r2
 80149c4:	4a0b      	ldr	r2, [pc, #44]	@ (80149f4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80149c6:	6013      	str	r3, [r2, #0]
 80149c8:	69bb      	ldr	r3, [r7, #24]
 80149ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80149cc:	4613      	mov	r3, r2
 80149ce:	009b      	lsls	r3, r3, #2
 80149d0:	4413      	add	r3, r2
 80149d2:	009b      	lsls	r3, r3, #2
 80149d4:	4a06      	ldr	r2, [pc, #24]	@ (80149f0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80149d6:	441a      	add	r2, r3
 80149d8:	69bb      	ldr	r3, [r7, #24]
 80149da:	3304      	adds	r3, #4
 80149dc:	4619      	mov	r1, r3
 80149de:	4610      	mov	r0, r2
 80149e0:	f7fd ff05 	bl	80127ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80149e4:	bf00      	nop
 80149e6:	3720      	adds	r7, #32
 80149e8:	46bd      	mov	sp, r7
 80149ea:	bd80      	pop	{r7, pc}
 80149ec:	200014e4 	.word	0x200014e4
 80149f0:	200014e8 	.word	0x200014e8
 80149f4:	200015ec 	.word	0x200015ec

080149f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80149f8:	b480      	push	{r7}
 80149fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80149fc:	4b07      	ldr	r3, [pc, #28]	@ (8014a1c <pvTaskIncrementMutexHeldCount+0x24>)
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d004      	beq.n	8014a0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014a04:	4b05      	ldr	r3, [pc, #20]	@ (8014a1c <pvTaskIncrementMutexHeldCount+0x24>)
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8014a0a:	3201      	adds	r2, #1
 8014a0c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8014a0e:	4b03      	ldr	r3, [pc, #12]	@ (8014a1c <pvTaskIncrementMutexHeldCount+0x24>)
 8014a10:	681b      	ldr	r3, [r3, #0]
	}
 8014a12:	4618      	mov	r0, r3
 8014a14:	46bd      	mov	sp, r7
 8014a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1a:	4770      	bx	lr
 8014a1c:	200014e4 	.word	0x200014e4

08014a20 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b084      	sub	sp, #16
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	6078      	str	r0, [r7, #4]
 8014a28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014a2a:	4b29      	ldr	r3, [pc, #164]	@ (8014ad0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014a30:	4b28      	ldr	r3, [pc, #160]	@ (8014ad4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	3304      	adds	r3, #4
 8014a36:	4618      	mov	r0, r3
 8014a38:	f7fd ff36 	bl	80128a8 <uxListRemove>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d10b      	bne.n	8014a5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014a42:	4b24      	ldr	r3, [pc, #144]	@ (8014ad4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a48:	2201      	movs	r2, #1
 8014a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8014a4e:	43da      	mvns	r2, r3
 8014a50:	4b21      	ldr	r3, [pc, #132]	@ (8014ad8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	4013      	ands	r3, r2
 8014a56:	4a20      	ldr	r2, [pc, #128]	@ (8014ad8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014a58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014a60:	d10a      	bne.n	8014a78 <prvAddCurrentTaskToDelayedList+0x58>
 8014a62:	683b      	ldr	r3, [r7, #0]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d007      	beq.n	8014a78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014a68:	4b1a      	ldr	r3, [pc, #104]	@ (8014ad4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	3304      	adds	r3, #4
 8014a6e:	4619      	mov	r1, r3
 8014a70:	481a      	ldr	r0, [pc, #104]	@ (8014adc <prvAddCurrentTaskToDelayedList+0xbc>)
 8014a72:	f7fd febc 	bl	80127ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014a76:	e026      	b.n	8014ac6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014a78:	68fa      	ldr	r2, [r7, #12]
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	4413      	add	r3, r2
 8014a7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014a80:	4b14      	ldr	r3, [pc, #80]	@ (8014ad4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	68ba      	ldr	r2, [r7, #8]
 8014a86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014a88:	68ba      	ldr	r2, [r7, #8]
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	429a      	cmp	r2, r3
 8014a8e:	d209      	bcs.n	8014aa4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014a90:	4b13      	ldr	r3, [pc, #76]	@ (8014ae0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014a92:	681a      	ldr	r2, [r3, #0]
 8014a94:	4b0f      	ldr	r3, [pc, #60]	@ (8014ad4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	3304      	adds	r3, #4
 8014a9a:	4619      	mov	r1, r3
 8014a9c:	4610      	mov	r0, r2
 8014a9e:	f7fd feca 	bl	8012836 <vListInsert>
}
 8014aa2:	e010      	b.n	8014ac6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8014ae4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014aa6:	681a      	ldr	r2, [r3, #0]
 8014aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8014ad4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	3304      	adds	r3, #4
 8014aae:	4619      	mov	r1, r3
 8014ab0:	4610      	mov	r0, r2
 8014ab2:	f7fd fec0 	bl	8012836 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8014ae8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	68ba      	ldr	r2, [r7, #8]
 8014abc:	429a      	cmp	r2, r3
 8014abe:	d202      	bcs.n	8014ac6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014ac0:	4a09      	ldr	r2, [pc, #36]	@ (8014ae8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014ac2:	68bb      	ldr	r3, [r7, #8]
 8014ac4:	6013      	str	r3, [r2, #0]
}
 8014ac6:	bf00      	nop
 8014ac8:	3710      	adds	r7, #16
 8014aca:	46bd      	mov	sp, r7
 8014acc:	bd80      	pop	{r7, pc}
 8014ace:	bf00      	nop
 8014ad0:	200015e8 	.word	0x200015e8
 8014ad4:	200014e4 	.word	0x200014e4
 8014ad8:	200015ec 	.word	0x200015ec
 8014adc:	200015d0 	.word	0x200015d0
 8014ae0:	200015a0 	.word	0x200015a0
 8014ae4:	2000159c 	.word	0x2000159c
 8014ae8:	20001604 	.word	0x20001604

08014aec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014aec:	b480      	push	{r7}
 8014aee:	b085      	sub	sp, #20
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	60f8      	str	r0, [r7, #12]
 8014af4:	60b9      	str	r1, [r7, #8]
 8014af6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	3b04      	subs	r3, #4
 8014afc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8014b04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	3b04      	subs	r3, #4
 8014b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014b0c:	68bb      	ldr	r3, [r7, #8]
 8014b0e:	f023 0201 	bic.w	r2, r3, #1
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	3b04      	subs	r3, #4
 8014b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8014b50 <pxPortInitialiseStack+0x64>)
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	3b14      	subs	r3, #20
 8014b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014b28:	687a      	ldr	r2, [r7, #4]
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	3b04      	subs	r3, #4
 8014b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	f06f 0202 	mvn.w	r2, #2
 8014b3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	3b20      	subs	r3, #32
 8014b40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014b42:	68fb      	ldr	r3, [r7, #12]
}
 8014b44:	4618      	mov	r0, r3
 8014b46:	3714      	adds	r7, #20
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b4e:	4770      	bx	lr
 8014b50:	08014b55 	.word	0x08014b55

08014b54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014b54:	b480      	push	{r7}
 8014b56:	b085      	sub	sp, #20
 8014b58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014b5e:	4b15      	ldr	r3, [pc, #84]	@ (8014bb4 <prvTaskExitError+0x60>)
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014b66:	d00d      	beq.n	8014b84 <prvTaskExitError+0x30>
	__asm volatile
 8014b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b6c:	b672      	cpsid	i
 8014b6e:	f383 8811 	msr	BASEPRI, r3
 8014b72:	f3bf 8f6f 	isb	sy
 8014b76:	f3bf 8f4f 	dsb	sy
 8014b7a:	b662      	cpsie	i
 8014b7c:	60fb      	str	r3, [r7, #12]
}
 8014b7e:	bf00      	nop
 8014b80:	bf00      	nop
 8014b82:	e7fd      	b.n	8014b80 <prvTaskExitError+0x2c>
	__asm volatile
 8014b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b88:	b672      	cpsid	i
 8014b8a:	f383 8811 	msr	BASEPRI, r3
 8014b8e:	f3bf 8f6f 	isb	sy
 8014b92:	f3bf 8f4f 	dsb	sy
 8014b96:	b662      	cpsie	i
 8014b98:	60bb      	str	r3, [r7, #8]
}
 8014b9a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014b9c:	bf00      	nop
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d0fc      	beq.n	8014b9e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014ba4:	bf00      	nop
 8014ba6:	bf00      	nop
 8014ba8:	3714      	adds	r7, #20
 8014baa:	46bd      	mov	sp, r7
 8014bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb0:	4770      	bx	lr
 8014bb2:	bf00      	nop
 8014bb4:	20000094 	.word	0x20000094
	...

08014bc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014bc0:	4b07      	ldr	r3, [pc, #28]	@ (8014be0 <pxCurrentTCBConst2>)
 8014bc2:	6819      	ldr	r1, [r3, #0]
 8014bc4:	6808      	ldr	r0, [r1, #0]
 8014bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bca:	f380 8809 	msr	PSP, r0
 8014bce:	f3bf 8f6f 	isb	sy
 8014bd2:	f04f 0000 	mov.w	r0, #0
 8014bd6:	f380 8811 	msr	BASEPRI, r0
 8014bda:	4770      	bx	lr
 8014bdc:	f3af 8000 	nop.w

08014be0 <pxCurrentTCBConst2>:
 8014be0:	200014e4 	.word	0x200014e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014be4:	bf00      	nop
 8014be6:	bf00      	nop

08014be8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014be8:	4808      	ldr	r0, [pc, #32]	@ (8014c0c <prvPortStartFirstTask+0x24>)
 8014bea:	6800      	ldr	r0, [r0, #0]
 8014bec:	6800      	ldr	r0, [r0, #0]
 8014bee:	f380 8808 	msr	MSP, r0
 8014bf2:	f04f 0000 	mov.w	r0, #0
 8014bf6:	f380 8814 	msr	CONTROL, r0
 8014bfa:	b662      	cpsie	i
 8014bfc:	b661      	cpsie	f
 8014bfe:	f3bf 8f4f 	dsb	sy
 8014c02:	f3bf 8f6f 	isb	sy
 8014c06:	df00      	svc	0
 8014c08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014c0a:	bf00      	nop
 8014c0c:	e000ed08 	.word	0xe000ed08

08014c10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b084      	sub	sp, #16
 8014c14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014c16:	4b37      	ldr	r3, [pc, #220]	@ (8014cf4 <xPortStartScheduler+0xe4>)
 8014c18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	781b      	ldrb	r3, [r3, #0]
 8014c1e:	b2db      	uxtb	r3, r3
 8014c20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	22ff      	movs	r2, #255	@ 0xff
 8014c26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	781b      	ldrb	r3, [r3, #0]
 8014c2c:	b2db      	uxtb	r3, r3
 8014c2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014c30:	78fb      	ldrb	r3, [r7, #3]
 8014c32:	b2db      	uxtb	r3, r3
 8014c34:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8014c38:	b2da      	uxtb	r2, r3
 8014c3a:	4b2f      	ldr	r3, [pc, #188]	@ (8014cf8 <xPortStartScheduler+0xe8>)
 8014c3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8014cfc <xPortStartScheduler+0xec>)
 8014c40:	2207      	movs	r2, #7
 8014c42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014c44:	e009      	b.n	8014c5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8014c46:	4b2d      	ldr	r3, [pc, #180]	@ (8014cfc <xPortStartScheduler+0xec>)
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	3b01      	subs	r3, #1
 8014c4c:	4a2b      	ldr	r2, [pc, #172]	@ (8014cfc <xPortStartScheduler+0xec>)
 8014c4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014c50:	78fb      	ldrb	r3, [r7, #3]
 8014c52:	b2db      	uxtb	r3, r3
 8014c54:	005b      	lsls	r3, r3, #1
 8014c56:	b2db      	uxtb	r3, r3
 8014c58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014c5a:	78fb      	ldrb	r3, [r7, #3]
 8014c5c:	b2db      	uxtb	r3, r3
 8014c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014c62:	2b80      	cmp	r3, #128	@ 0x80
 8014c64:	d0ef      	beq.n	8014c46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014c66:	4b25      	ldr	r3, [pc, #148]	@ (8014cfc <xPortStartScheduler+0xec>)
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	f1c3 0307 	rsb	r3, r3, #7
 8014c6e:	2b04      	cmp	r3, #4
 8014c70:	d00d      	beq.n	8014c8e <xPortStartScheduler+0x7e>
	__asm volatile
 8014c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c76:	b672      	cpsid	i
 8014c78:	f383 8811 	msr	BASEPRI, r3
 8014c7c:	f3bf 8f6f 	isb	sy
 8014c80:	f3bf 8f4f 	dsb	sy
 8014c84:	b662      	cpsie	i
 8014c86:	60bb      	str	r3, [r7, #8]
}
 8014c88:	bf00      	nop
 8014c8a:	bf00      	nop
 8014c8c:	e7fd      	b.n	8014c8a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8014cfc <xPortStartScheduler+0xec>)
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	021b      	lsls	r3, r3, #8
 8014c94:	4a19      	ldr	r2, [pc, #100]	@ (8014cfc <xPortStartScheduler+0xec>)
 8014c96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014c98:	4b18      	ldr	r3, [pc, #96]	@ (8014cfc <xPortStartScheduler+0xec>)
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014ca0:	4a16      	ldr	r2, [pc, #88]	@ (8014cfc <xPortStartScheduler+0xec>)
 8014ca2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	b2da      	uxtb	r2, r3
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014cac:	4b14      	ldr	r3, [pc, #80]	@ (8014d00 <xPortStartScheduler+0xf0>)
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	4a13      	ldr	r2, [pc, #76]	@ (8014d00 <xPortStartScheduler+0xf0>)
 8014cb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8014cb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014cb8:	4b11      	ldr	r3, [pc, #68]	@ (8014d00 <xPortStartScheduler+0xf0>)
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	4a10      	ldr	r2, [pc, #64]	@ (8014d00 <xPortStartScheduler+0xf0>)
 8014cbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8014cc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014cc4:	f000 f8dc 	bl	8014e80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8014d04 <xPortStartScheduler+0xf4>)
 8014cca:	2200      	movs	r2, #0
 8014ccc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014cce:	f000 f8fb 	bl	8014ec8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8014d08 <xPortStartScheduler+0xf8>)
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8014d08 <xPortStartScheduler+0xf8>)
 8014cd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8014cdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014cde:	f7ff ff83 	bl	8014be8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014ce2:	f7ff fa63 	bl	80141ac <vTaskSwitchContext>
	prvTaskExitError();
 8014ce6:	f7ff ff35 	bl	8014b54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014cea:	2300      	movs	r3, #0
}
 8014cec:	4618      	mov	r0, r3
 8014cee:	3710      	adds	r7, #16
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	bd80      	pop	{r7, pc}
 8014cf4:	e000e400 	.word	0xe000e400
 8014cf8:	20001610 	.word	0x20001610
 8014cfc:	20001614 	.word	0x20001614
 8014d00:	e000ed20 	.word	0xe000ed20
 8014d04:	20000094 	.word	0x20000094
 8014d08:	e000ef34 	.word	0xe000ef34

08014d0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014d0c:	b480      	push	{r7}
 8014d0e:	b083      	sub	sp, #12
 8014d10:	af00      	add	r7, sp, #0
	__asm volatile
 8014d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d16:	b672      	cpsid	i
 8014d18:	f383 8811 	msr	BASEPRI, r3
 8014d1c:	f3bf 8f6f 	isb	sy
 8014d20:	f3bf 8f4f 	dsb	sy
 8014d24:	b662      	cpsie	i
 8014d26:	607b      	str	r3, [r7, #4]
}
 8014d28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014d2a:	4b11      	ldr	r3, [pc, #68]	@ (8014d70 <vPortEnterCritical+0x64>)
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	3301      	adds	r3, #1
 8014d30:	4a0f      	ldr	r2, [pc, #60]	@ (8014d70 <vPortEnterCritical+0x64>)
 8014d32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014d34:	4b0e      	ldr	r3, [pc, #56]	@ (8014d70 <vPortEnterCritical+0x64>)
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	2b01      	cmp	r3, #1
 8014d3a:	d112      	bne.n	8014d62 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8014d74 <vPortEnterCritical+0x68>)
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	b2db      	uxtb	r3, r3
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d00d      	beq.n	8014d62 <vPortEnterCritical+0x56>
	__asm volatile
 8014d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d4a:	b672      	cpsid	i
 8014d4c:	f383 8811 	msr	BASEPRI, r3
 8014d50:	f3bf 8f6f 	isb	sy
 8014d54:	f3bf 8f4f 	dsb	sy
 8014d58:	b662      	cpsie	i
 8014d5a:	603b      	str	r3, [r7, #0]
}
 8014d5c:	bf00      	nop
 8014d5e:	bf00      	nop
 8014d60:	e7fd      	b.n	8014d5e <vPortEnterCritical+0x52>
	}
}
 8014d62:	bf00      	nop
 8014d64:	370c      	adds	r7, #12
 8014d66:	46bd      	mov	sp, r7
 8014d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d6c:	4770      	bx	lr
 8014d6e:	bf00      	nop
 8014d70:	20000094 	.word	0x20000094
 8014d74:	e000ed04 	.word	0xe000ed04

08014d78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014d78:	b480      	push	{r7}
 8014d7a:	b083      	sub	sp, #12
 8014d7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014d7e:	4b13      	ldr	r3, [pc, #76]	@ (8014dcc <vPortExitCritical+0x54>)
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d10d      	bne.n	8014da2 <vPortExitCritical+0x2a>
	__asm volatile
 8014d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d8a:	b672      	cpsid	i
 8014d8c:	f383 8811 	msr	BASEPRI, r3
 8014d90:	f3bf 8f6f 	isb	sy
 8014d94:	f3bf 8f4f 	dsb	sy
 8014d98:	b662      	cpsie	i
 8014d9a:	607b      	str	r3, [r7, #4]
}
 8014d9c:	bf00      	nop
 8014d9e:	bf00      	nop
 8014da0:	e7fd      	b.n	8014d9e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8014da2:	4b0a      	ldr	r3, [pc, #40]	@ (8014dcc <vPortExitCritical+0x54>)
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	3b01      	subs	r3, #1
 8014da8:	4a08      	ldr	r2, [pc, #32]	@ (8014dcc <vPortExitCritical+0x54>)
 8014daa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014dac:	4b07      	ldr	r3, [pc, #28]	@ (8014dcc <vPortExitCritical+0x54>)
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d105      	bne.n	8014dc0 <vPortExitCritical+0x48>
 8014db4:	2300      	movs	r3, #0
 8014db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014db8:	683b      	ldr	r3, [r7, #0]
 8014dba:	f383 8811 	msr	BASEPRI, r3
}
 8014dbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014dc0:	bf00      	nop
 8014dc2:	370c      	adds	r7, #12
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dca:	4770      	bx	lr
 8014dcc:	20000094 	.word	0x20000094

08014dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014dd0:	f3ef 8009 	mrs	r0, PSP
 8014dd4:	f3bf 8f6f 	isb	sy
 8014dd8:	4b15      	ldr	r3, [pc, #84]	@ (8014e30 <pxCurrentTCBConst>)
 8014dda:	681a      	ldr	r2, [r3, #0]
 8014ddc:	f01e 0f10 	tst.w	lr, #16
 8014de0:	bf08      	it	eq
 8014de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dea:	6010      	str	r0, [r2, #0]
 8014dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014df0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8014df4:	b672      	cpsid	i
 8014df6:	f380 8811 	msr	BASEPRI, r0
 8014dfa:	f3bf 8f4f 	dsb	sy
 8014dfe:	f3bf 8f6f 	isb	sy
 8014e02:	b662      	cpsie	i
 8014e04:	f7ff f9d2 	bl	80141ac <vTaskSwitchContext>
 8014e08:	f04f 0000 	mov.w	r0, #0
 8014e0c:	f380 8811 	msr	BASEPRI, r0
 8014e10:	bc09      	pop	{r0, r3}
 8014e12:	6819      	ldr	r1, [r3, #0]
 8014e14:	6808      	ldr	r0, [r1, #0]
 8014e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e1a:	f01e 0f10 	tst.w	lr, #16
 8014e1e:	bf08      	it	eq
 8014e20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014e24:	f380 8809 	msr	PSP, r0
 8014e28:	f3bf 8f6f 	isb	sy
 8014e2c:	4770      	bx	lr
 8014e2e:	bf00      	nop

08014e30 <pxCurrentTCBConst>:
 8014e30:	200014e4 	.word	0x200014e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014e34:	bf00      	nop
 8014e36:	bf00      	nop

08014e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b082      	sub	sp, #8
 8014e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8014e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e42:	b672      	cpsid	i
 8014e44:	f383 8811 	msr	BASEPRI, r3
 8014e48:	f3bf 8f6f 	isb	sy
 8014e4c:	f3bf 8f4f 	dsb	sy
 8014e50:	b662      	cpsie	i
 8014e52:	607b      	str	r3, [r7, #4]
}
 8014e54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014e56:	f7ff f8ed 	bl	8014034 <xTaskIncrementTick>
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d003      	beq.n	8014e68 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014e60:	4b06      	ldr	r3, [pc, #24]	@ (8014e7c <SysTick_Handler+0x44>)
 8014e62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014e66:	601a      	str	r2, [r3, #0]
 8014e68:	2300      	movs	r3, #0
 8014e6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014e6c:	683b      	ldr	r3, [r7, #0]
 8014e6e:	f383 8811 	msr	BASEPRI, r3
}
 8014e72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014e74:	bf00      	nop
 8014e76:	3708      	adds	r7, #8
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	bd80      	pop	{r7, pc}
 8014e7c:	e000ed04 	.word	0xe000ed04

08014e80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014e80:	b480      	push	{r7}
 8014e82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014e84:	4b0b      	ldr	r3, [pc, #44]	@ (8014eb4 <vPortSetupTimerInterrupt+0x34>)
 8014e86:	2200      	movs	r2, #0
 8014e88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8014eb8 <vPortSetupTimerInterrupt+0x38>)
 8014e8c:	2200      	movs	r2, #0
 8014e8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014e90:	4b0a      	ldr	r3, [pc, #40]	@ (8014ebc <vPortSetupTimerInterrupt+0x3c>)
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	4a0a      	ldr	r2, [pc, #40]	@ (8014ec0 <vPortSetupTimerInterrupt+0x40>)
 8014e96:	fba2 2303 	umull	r2, r3, r2, r3
 8014e9a:	099b      	lsrs	r3, r3, #6
 8014e9c:	4a09      	ldr	r2, [pc, #36]	@ (8014ec4 <vPortSetupTimerInterrupt+0x44>)
 8014e9e:	3b01      	subs	r3, #1
 8014ea0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014ea2:	4b04      	ldr	r3, [pc, #16]	@ (8014eb4 <vPortSetupTimerInterrupt+0x34>)
 8014ea4:	2207      	movs	r2, #7
 8014ea6:	601a      	str	r2, [r3, #0]
}
 8014ea8:	bf00      	nop
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb0:	4770      	bx	lr
 8014eb2:	bf00      	nop
 8014eb4:	e000e010 	.word	0xe000e010
 8014eb8:	e000e018 	.word	0xe000e018
 8014ebc:	2000004c 	.word	0x2000004c
 8014ec0:	10624dd3 	.word	0x10624dd3
 8014ec4:	e000e014 	.word	0xe000e014

08014ec8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014ec8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8014ed8 <vPortEnableVFP+0x10>
 8014ecc:	6801      	ldr	r1, [r0, #0]
 8014ece:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8014ed2:	6001      	str	r1, [r0, #0]
 8014ed4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014ed6:	bf00      	nop
 8014ed8:	e000ed88 	.word	0xe000ed88

08014edc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014edc:	b480      	push	{r7}
 8014ede:	b085      	sub	sp, #20
 8014ee0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014ee2:	f3ef 8305 	mrs	r3, IPSR
 8014ee6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	2b0f      	cmp	r3, #15
 8014eec:	d917      	bls.n	8014f1e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014eee:	4a1a      	ldr	r2, [pc, #104]	@ (8014f58 <vPortValidateInterruptPriority+0x7c>)
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	4413      	add	r3, r2
 8014ef4:	781b      	ldrb	r3, [r3, #0]
 8014ef6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014ef8:	4b18      	ldr	r3, [pc, #96]	@ (8014f5c <vPortValidateInterruptPriority+0x80>)
 8014efa:	781b      	ldrb	r3, [r3, #0]
 8014efc:	7afa      	ldrb	r2, [r7, #11]
 8014efe:	429a      	cmp	r2, r3
 8014f00:	d20d      	bcs.n	8014f1e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8014f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f06:	b672      	cpsid	i
 8014f08:	f383 8811 	msr	BASEPRI, r3
 8014f0c:	f3bf 8f6f 	isb	sy
 8014f10:	f3bf 8f4f 	dsb	sy
 8014f14:	b662      	cpsie	i
 8014f16:	607b      	str	r3, [r7, #4]
}
 8014f18:	bf00      	nop
 8014f1a:	bf00      	nop
 8014f1c:	e7fd      	b.n	8014f1a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014f1e:	4b10      	ldr	r3, [pc, #64]	@ (8014f60 <vPortValidateInterruptPriority+0x84>)
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8014f26:	4b0f      	ldr	r3, [pc, #60]	@ (8014f64 <vPortValidateInterruptPriority+0x88>)
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	429a      	cmp	r2, r3
 8014f2c:	d90d      	bls.n	8014f4a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8014f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f32:	b672      	cpsid	i
 8014f34:	f383 8811 	msr	BASEPRI, r3
 8014f38:	f3bf 8f6f 	isb	sy
 8014f3c:	f3bf 8f4f 	dsb	sy
 8014f40:	b662      	cpsie	i
 8014f42:	603b      	str	r3, [r7, #0]
}
 8014f44:	bf00      	nop
 8014f46:	bf00      	nop
 8014f48:	e7fd      	b.n	8014f46 <vPortValidateInterruptPriority+0x6a>
	}
 8014f4a:	bf00      	nop
 8014f4c:	3714      	adds	r7, #20
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f54:	4770      	bx	lr
 8014f56:	bf00      	nop
 8014f58:	e000e3f0 	.word	0xe000e3f0
 8014f5c:	20001610 	.word	0x20001610
 8014f60:	e000ed0c 	.word	0xe000ed0c
 8014f64:	20001614 	.word	0x20001614

08014f68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b08a      	sub	sp, #40	@ 0x28
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014f70:	2300      	movs	r3, #0
 8014f72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014f74:	f7fe ff8e 	bl	8013e94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014f78:	4b5d      	ldr	r3, [pc, #372]	@ (80150f0 <pvPortMalloc+0x188>)
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d101      	bne.n	8014f84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014f80:	f000 f920 	bl	80151c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014f84:	4b5b      	ldr	r3, [pc, #364]	@ (80150f4 <pvPortMalloc+0x18c>)
 8014f86:	681a      	ldr	r2, [r3, #0]
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	4013      	ands	r3, r2
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	f040 8094 	bne.w	80150ba <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d020      	beq.n	8014fda <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8014f98:	2208      	movs	r2, #8
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	4413      	add	r3, r2
 8014f9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	f003 0307 	and.w	r3, r3, #7
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d017      	beq.n	8014fda <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	f023 0307 	bic.w	r3, r3, #7
 8014fb0:	3308      	adds	r3, #8
 8014fb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	f003 0307 	and.w	r3, r3, #7
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d00d      	beq.n	8014fda <pvPortMalloc+0x72>
	__asm volatile
 8014fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fc2:	b672      	cpsid	i
 8014fc4:	f383 8811 	msr	BASEPRI, r3
 8014fc8:	f3bf 8f6f 	isb	sy
 8014fcc:	f3bf 8f4f 	dsb	sy
 8014fd0:	b662      	cpsie	i
 8014fd2:	617b      	str	r3, [r7, #20]
}
 8014fd4:	bf00      	nop
 8014fd6:	bf00      	nop
 8014fd8:	e7fd      	b.n	8014fd6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d06c      	beq.n	80150ba <pvPortMalloc+0x152>
 8014fe0:	4b45      	ldr	r3, [pc, #276]	@ (80150f8 <pvPortMalloc+0x190>)
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	687a      	ldr	r2, [r7, #4]
 8014fe6:	429a      	cmp	r2, r3
 8014fe8:	d867      	bhi.n	80150ba <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014fea:	4b44      	ldr	r3, [pc, #272]	@ (80150fc <pvPortMalloc+0x194>)
 8014fec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014fee:	4b43      	ldr	r3, [pc, #268]	@ (80150fc <pvPortMalloc+0x194>)
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014ff4:	e004      	b.n	8015000 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8014ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ff8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015002:	685b      	ldr	r3, [r3, #4]
 8015004:	687a      	ldr	r2, [r7, #4]
 8015006:	429a      	cmp	r2, r3
 8015008:	d903      	bls.n	8015012 <pvPortMalloc+0xaa>
 801500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	2b00      	cmp	r3, #0
 8015010:	d1f1      	bne.n	8014ff6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015012:	4b37      	ldr	r3, [pc, #220]	@ (80150f0 <pvPortMalloc+0x188>)
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015018:	429a      	cmp	r2, r3
 801501a:	d04e      	beq.n	80150ba <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801501c:	6a3b      	ldr	r3, [r7, #32]
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	2208      	movs	r2, #8
 8015022:	4413      	add	r3, r2
 8015024:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015028:	681a      	ldr	r2, [r3, #0]
 801502a:	6a3b      	ldr	r3, [r7, #32]
 801502c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015030:	685a      	ldr	r2, [r3, #4]
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	1ad2      	subs	r2, r2, r3
 8015036:	2308      	movs	r3, #8
 8015038:	005b      	lsls	r3, r3, #1
 801503a:	429a      	cmp	r2, r3
 801503c:	d922      	bls.n	8015084 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801503e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	4413      	add	r3, r2
 8015044:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015046:	69bb      	ldr	r3, [r7, #24]
 8015048:	f003 0307 	and.w	r3, r3, #7
 801504c:	2b00      	cmp	r3, #0
 801504e:	d00d      	beq.n	801506c <pvPortMalloc+0x104>
	__asm volatile
 8015050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015054:	b672      	cpsid	i
 8015056:	f383 8811 	msr	BASEPRI, r3
 801505a:	f3bf 8f6f 	isb	sy
 801505e:	f3bf 8f4f 	dsb	sy
 8015062:	b662      	cpsie	i
 8015064:	613b      	str	r3, [r7, #16]
}
 8015066:	bf00      	nop
 8015068:	bf00      	nop
 801506a:	e7fd      	b.n	8015068 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801506e:	685a      	ldr	r2, [r3, #4]
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	1ad2      	subs	r2, r2, r3
 8015074:	69bb      	ldr	r3, [r7, #24]
 8015076:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801507a:	687a      	ldr	r2, [r7, #4]
 801507c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801507e:	69b8      	ldr	r0, [r7, #24]
 8015080:	f000 f902 	bl	8015288 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015084:	4b1c      	ldr	r3, [pc, #112]	@ (80150f8 <pvPortMalloc+0x190>)
 8015086:	681a      	ldr	r2, [r3, #0]
 8015088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801508a:	685b      	ldr	r3, [r3, #4]
 801508c:	1ad3      	subs	r3, r2, r3
 801508e:	4a1a      	ldr	r2, [pc, #104]	@ (80150f8 <pvPortMalloc+0x190>)
 8015090:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015092:	4b19      	ldr	r3, [pc, #100]	@ (80150f8 <pvPortMalloc+0x190>)
 8015094:	681a      	ldr	r2, [r3, #0]
 8015096:	4b1a      	ldr	r3, [pc, #104]	@ (8015100 <pvPortMalloc+0x198>)
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	429a      	cmp	r2, r3
 801509c:	d203      	bcs.n	80150a6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801509e:	4b16      	ldr	r3, [pc, #88]	@ (80150f8 <pvPortMalloc+0x190>)
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	4a17      	ldr	r2, [pc, #92]	@ (8015100 <pvPortMalloc+0x198>)
 80150a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80150a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150a8:	685a      	ldr	r2, [r3, #4]
 80150aa:	4b12      	ldr	r3, [pc, #72]	@ (80150f4 <pvPortMalloc+0x18c>)
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	431a      	orrs	r2, r3
 80150b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80150b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150b6:	2200      	movs	r2, #0
 80150b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80150ba:	f7fe fef9 	bl	8013eb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80150be:	69fb      	ldr	r3, [r7, #28]
 80150c0:	f003 0307 	and.w	r3, r3, #7
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d00d      	beq.n	80150e4 <pvPortMalloc+0x17c>
	__asm volatile
 80150c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150cc:	b672      	cpsid	i
 80150ce:	f383 8811 	msr	BASEPRI, r3
 80150d2:	f3bf 8f6f 	isb	sy
 80150d6:	f3bf 8f4f 	dsb	sy
 80150da:	b662      	cpsie	i
 80150dc:	60fb      	str	r3, [r7, #12]
}
 80150de:	bf00      	nop
 80150e0:	bf00      	nop
 80150e2:	e7fd      	b.n	80150e0 <pvPortMalloc+0x178>
	return pvReturn;
 80150e4:	69fb      	ldr	r3, [r7, #28]
}
 80150e6:	4618      	mov	r0, r3
 80150e8:	3728      	adds	r7, #40	@ 0x28
 80150ea:	46bd      	mov	sp, r7
 80150ec:	bd80      	pop	{r7, pc}
 80150ee:	bf00      	nop
 80150f0:	20005220 	.word	0x20005220
 80150f4:	2000522c 	.word	0x2000522c
 80150f8:	20005224 	.word	0x20005224
 80150fc:	20005218 	.word	0x20005218
 8015100:	20005228 	.word	0x20005228

08015104 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b086      	sub	sp, #24
 8015108:	af00      	add	r7, sp, #0
 801510a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d04e      	beq.n	80151b4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015116:	2308      	movs	r3, #8
 8015118:	425b      	negs	r3, r3
 801511a:	697a      	ldr	r2, [r7, #20]
 801511c:	4413      	add	r3, r2
 801511e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015120:	697b      	ldr	r3, [r7, #20]
 8015122:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015124:	693b      	ldr	r3, [r7, #16]
 8015126:	685a      	ldr	r2, [r3, #4]
 8015128:	4b24      	ldr	r3, [pc, #144]	@ (80151bc <vPortFree+0xb8>)
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	4013      	ands	r3, r2
 801512e:	2b00      	cmp	r3, #0
 8015130:	d10d      	bne.n	801514e <vPortFree+0x4a>
	__asm volatile
 8015132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015136:	b672      	cpsid	i
 8015138:	f383 8811 	msr	BASEPRI, r3
 801513c:	f3bf 8f6f 	isb	sy
 8015140:	f3bf 8f4f 	dsb	sy
 8015144:	b662      	cpsie	i
 8015146:	60fb      	str	r3, [r7, #12]
}
 8015148:	bf00      	nop
 801514a:	bf00      	nop
 801514c:	e7fd      	b.n	801514a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801514e:	693b      	ldr	r3, [r7, #16]
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d00d      	beq.n	8015172 <vPortFree+0x6e>
	__asm volatile
 8015156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801515a:	b672      	cpsid	i
 801515c:	f383 8811 	msr	BASEPRI, r3
 8015160:	f3bf 8f6f 	isb	sy
 8015164:	f3bf 8f4f 	dsb	sy
 8015168:	b662      	cpsie	i
 801516a:	60bb      	str	r3, [r7, #8]
}
 801516c:	bf00      	nop
 801516e:	bf00      	nop
 8015170:	e7fd      	b.n	801516e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015172:	693b      	ldr	r3, [r7, #16]
 8015174:	685a      	ldr	r2, [r3, #4]
 8015176:	4b11      	ldr	r3, [pc, #68]	@ (80151bc <vPortFree+0xb8>)
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	4013      	ands	r3, r2
 801517c:	2b00      	cmp	r3, #0
 801517e:	d019      	beq.n	80151b4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015180:	693b      	ldr	r3, [r7, #16]
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d115      	bne.n	80151b4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015188:	693b      	ldr	r3, [r7, #16]
 801518a:	685a      	ldr	r2, [r3, #4]
 801518c:	4b0b      	ldr	r3, [pc, #44]	@ (80151bc <vPortFree+0xb8>)
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	43db      	mvns	r3, r3
 8015192:	401a      	ands	r2, r3
 8015194:	693b      	ldr	r3, [r7, #16]
 8015196:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015198:	f7fe fe7c 	bl	8013e94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801519c:	693b      	ldr	r3, [r7, #16]
 801519e:	685a      	ldr	r2, [r3, #4]
 80151a0:	4b07      	ldr	r3, [pc, #28]	@ (80151c0 <vPortFree+0xbc>)
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	4413      	add	r3, r2
 80151a6:	4a06      	ldr	r2, [pc, #24]	@ (80151c0 <vPortFree+0xbc>)
 80151a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80151aa:	6938      	ldr	r0, [r7, #16]
 80151ac:	f000 f86c 	bl	8015288 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80151b0:	f7fe fe7e 	bl	8013eb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80151b4:	bf00      	nop
 80151b6:	3718      	adds	r7, #24
 80151b8:	46bd      	mov	sp, r7
 80151ba:	bd80      	pop	{r7, pc}
 80151bc:	2000522c 	.word	0x2000522c
 80151c0:	20005224 	.word	0x20005224

080151c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80151c4:	b480      	push	{r7}
 80151c6:	b085      	sub	sp, #20
 80151c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80151ca:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80151ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80151d0:	4b27      	ldr	r3, [pc, #156]	@ (8015270 <prvHeapInit+0xac>)
 80151d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	f003 0307 	and.w	r3, r3, #7
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d00c      	beq.n	80151f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	3307      	adds	r3, #7
 80151e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	f023 0307 	bic.w	r3, r3, #7
 80151ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80151ec:	68ba      	ldr	r2, [r7, #8]
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	1ad3      	subs	r3, r2, r3
 80151f2:	4a1f      	ldr	r2, [pc, #124]	@ (8015270 <prvHeapInit+0xac>)
 80151f4:	4413      	add	r3, r2
 80151f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80151fc:	4a1d      	ldr	r2, [pc, #116]	@ (8015274 <prvHeapInit+0xb0>)
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015202:	4b1c      	ldr	r3, [pc, #112]	@ (8015274 <prvHeapInit+0xb0>)
 8015204:	2200      	movs	r2, #0
 8015206:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	68ba      	ldr	r2, [r7, #8]
 801520c:	4413      	add	r3, r2
 801520e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015210:	2208      	movs	r2, #8
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	1a9b      	subs	r3, r3, r2
 8015216:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	f023 0307 	bic.w	r3, r3, #7
 801521e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	4a15      	ldr	r2, [pc, #84]	@ (8015278 <prvHeapInit+0xb4>)
 8015224:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015226:	4b14      	ldr	r3, [pc, #80]	@ (8015278 <prvHeapInit+0xb4>)
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	2200      	movs	r2, #0
 801522c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801522e:	4b12      	ldr	r3, [pc, #72]	@ (8015278 <prvHeapInit+0xb4>)
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	2200      	movs	r2, #0
 8015234:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801523a:	683b      	ldr	r3, [r7, #0]
 801523c:	68fa      	ldr	r2, [r7, #12]
 801523e:	1ad2      	subs	r2, r2, r3
 8015240:	683b      	ldr	r3, [r7, #0]
 8015242:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015244:	4b0c      	ldr	r3, [pc, #48]	@ (8015278 <prvHeapInit+0xb4>)
 8015246:	681a      	ldr	r2, [r3, #0]
 8015248:	683b      	ldr	r3, [r7, #0]
 801524a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801524c:	683b      	ldr	r3, [r7, #0]
 801524e:	685b      	ldr	r3, [r3, #4]
 8015250:	4a0a      	ldr	r2, [pc, #40]	@ (801527c <prvHeapInit+0xb8>)
 8015252:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015254:	683b      	ldr	r3, [r7, #0]
 8015256:	685b      	ldr	r3, [r3, #4]
 8015258:	4a09      	ldr	r2, [pc, #36]	@ (8015280 <prvHeapInit+0xbc>)
 801525a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801525c:	4b09      	ldr	r3, [pc, #36]	@ (8015284 <prvHeapInit+0xc0>)
 801525e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8015262:	601a      	str	r2, [r3, #0]
}
 8015264:	bf00      	nop
 8015266:	3714      	adds	r7, #20
 8015268:	46bd      	mov	sp, r7
 801526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526e:	4770      	bx	lr
 8015270:	20001618 	.word	0x20001618
 8015274:	20005218 	.word	0x20005218
 8015278:	20005220 	.word	0x20005220
 801527c:	20005228 	.word	0x20005228
 8015280:	20005224 	.word	0x20005224
 8015284:	2000522c 	.word	0x2000522c

08015288 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015288:	b480      	push	{r7}
 801528a:	b085      	sub	sp, #20
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015290:	4b28      	ldr	r3, [pc, #160]	@ (8015334 <prvInsertBlockIntoFreeList+0xac>)
 8015292:	60fb      	str	r3, [r7, #12]
 8015294:	e002      	b.n	801529c <prvInsertBlockIntoFreeList+0x14>
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	60fb      	str	r3, [r7, #12]
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	687a      	ldr	r2, [r7, #4]
 80152a2:	429a      	cmp	r2, r3
 80152a4:	d8f7      	bhi.n	8015296 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	685b      	ldr	r3, [r3, #4]
 80152ae:	68ba      	ldr	r2, [r7, #8]
 80152b0:	4413      	add	r3, r2
 80152b2:	687a      	ldr	r2, [r7, #4]
 80152b4:	429a      	cmp	r2, r3
 80152b6:	d108      	bne.n	80152ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	685a      	ldr	r2, [r3, #4]
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	685b      	ldr	r3, [r3, #4]
 80152c0:	441a      	add	r2, r3
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	685b      	ldr	r3, [r3, #4]
 80152d2:	68ba      	ldr	r2, [r7, #8]
 80152d4:	441a      	add	r2, r3
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	429a      	cmp	r2, r3
 80152dc:	d118      	bne.n	8015310 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	681a      	ldr	r2, [r3, #0]
 80152e2:	4b15      	ldr	r3, [pc, #84]	@ (8015338 <prvInsertBlockIntoFreeList+0xb0>)
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	429a      	cmp	r2, r3
 80152e8:	d00d      	beq.n	8015306 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	685a      	ldr	r2, [r3, #4]
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	685b      	ldr	r3, [r3, #4]
 80152f4:	441a      	add	r2, r3
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	681a      	ldr	r2, [r3, #0]
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	601a      	str	r2, [r3, #0]
 8015304:	e008      	b.n	8015318 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015306:	4b0c      	ldr	r3, [pc, #48]	@ (8015338 <prvInsertBlockIntoFreeList+0xb0>)
 8015308:	681a      	ldr	r2, [r3, #0]
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	601a      	str	r2, [r3, #0]
 801530e:	e003      	b.n	8015318 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	681a      	ldr	r2, [r3, #0]
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015318:	68fa      	ldr	r2, [r7, #12]
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	429a      	cmp	r2, r3
 801531e:	d002      	beq.n	8015326 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	687a      	ldr	r2, [r7, #4]
 8015324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015326:	bf00      	nop
 8015328:	3714      	adds	r7, #20
 801532a:	46bd      	mov	sp, r7
 801532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015330:	4770      	bx	lr
 8015332:	bf00      	nop
 8015334:	20005218 	.word	0x20005218
 8015338:	20005220 	.word	0x20005220

0801533c <rand>:
 801533c:	4b16      	ldr	r3, [pc, #88]	@ (8015398 <rand+0x5c>)
 801533e:	b510      	push	{r4, lr}
 8015340:	681c      	ldr	r4, [r3, #0]
 8015342:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015344:	b9b3      	cbnz	r3, 8015374 <rand+0x38>
 8015346:	2018      	movs	r0, #24
 8015348:	f000 faa4 	bl	8015894 <malloc>
 801534c:	4602      	mov	r2, r0
 801534e:	6320      	str	r0, [r4, #48]	@ 0x30
 8015350:	b920      	cbnz	r0, 801535c <rand+0x20>
 8015352:	4b12      	ldr	r3, [pc, #72]	@ (801539c <rand+0x60>)
 8015354:	4812      	ldr	r0, [pc, #72]	@ (80153a0 <rand+0x64>)
 8015356:	2152      	movs	r1, #82	@ 0x52
 8015358:	f000 fa34 	bl	80157c4 <__assert_func>
 801535c:	4911      	ldr	r1, [pc, #68]	@ (80153a4 <rand+0x68>)
 801535e:	4b12      	ldr	r3, [pc, #72]	@ (80153a8 <rand+0x6c>)
 8015360:	e9c0 1300 	strd	r1, r3, [r0]
 8015364:	4b11      	ldr	r3, [pc, #68]	@ (80153ac <rand+0x70>)
 8015366:	6083      	str	r3, [r0, #8]
 8015368:	230b      	movs	r3, #11
 801536a:	8183      	strh	r3, [r0, #12]
 801536c:	2100      	movs	r1, #0
 801536e:	2001      	movs	r0, #1
 8015370:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015374:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015376:	480e      	ldr	r0, [pc, #56]	@ (80153b0 <rand+0x74>)
 8015378:	690b      	ldr	r3, [r1, #16]
 801537a:	694c      	ldr	r4, [r1, #20]
 801537c:	4a0d      	ldr	r2, [pc, #52]	@ (80153b4 <rand+0x78>)
 801537e:	4358      	muls	r0, r3
 8015380:	fb02 0004 	mla	r0, r2, r4, r0
 8015384:	fba3 3202 	umull	r3, r2, r3, r2
 8015388:	3301      	adds	r3, #1
 801538a:	eb40 0002 	adc.w	r0, r0, r2
 801538e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8015392:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8015396:	bd10      	pop	{r4, pc}
 8015398:	200000a4 	.word	0x200000a4
 801539c:	08024d60 	.word	0x08024d60
 80153a0:	08024d77 	.word	0x08024d77
 80153a4:	abcd330e 	.word	0xabcd330e
 80153a8:	e66d1234 	.word	0xe66d1234
 80153ac:	0005deec 	.word	0x0005deec
 80153b0:	5851f42d 	.word	0x5851f42d
 80153b4:	4c957f2d 	.word	0x4c957f2d

080153b8 <std>:
 80153b8:	2300      	movs	r3, #0
 80153ba:	b510      	push	{r4, lr}
 80153bc:	4604      	mov	r4, r0
 80153be:	e9c0 3300 	strd	r3, r3, [r0]
 80153c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80153c6:	6083      	str	r3, [r0, #8]
 80153c8:	8181      	strh	r1, [r0, #12]
 80153ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80153cc:	81c2      	strh	r2, [r0, #14]
 80153ce:	6183      	str	r3, [r0, #24]
 80153d0:	4619      	mov	r1, r3
 80153d2:	2208      	movs	r2, #8
 80153d4:	305c      	adds	r0, #92	@ 0x5c
 80153d6:	f000 f914 	bl	8015602 <memset>
 80153da:	4b0d      	ldr	r3, [pc, #52]	@ (8015410 <std+0x58>)
 80153dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80153de:	4b0d      	ldr	r3, [pc, #52]	@ (8015414 <std+0x5c>)
 80153e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80153e2:	4b0d      	ldr	r3, [pc, #52]	@ (8015418 <std+0x60>)
 80153e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80153e6:	4b0d      	ldr	r3, [pc, #52]	@ (801541c <std+0x64>)
 80153e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80153ea:	4b0d      	ldr	r3, [pc, #52]	@ (8015420 <std+0x68>)
 80153ec:	6224      	str	r4, [r4, #32]
 80153ee:	429c      	cmp	r4, r3
 80153f0:	d006      	beq.n	8015400 <std+0x48>
 80153f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80153f6:	4294      	cmp	r4, r2
 80153f8:	d002      	beq.n	8015400 <std+0x48>
 80153fa:	33d0      	adds	r3, #208	@ 0xd0
 80153fc:	429c      	cmp	r4, r3
 80153fe:	d105      	bne.n	801540c <std+0x54>
 8015400:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015408:	f000 b9ca 	b.w	80157a0 <__retarget_lock_init_recursive>
 801540c:	bd10      	pop	{r4, pc}
 801540e:	bf00      	nop
 8015410:	0801557d 	.word	0x0801557d
 8015414:	0801559f 	.word	0x0801559f
 8015418:	080155d7 	.word	0x080155d7
 801541c:	080155fb 	.word	0x080155fb
 8015420:	20005230 	.word	0x20005230

08015424 <stdio_exit_handler>:
 8015424:	4a02      	ldr	r2, [pc, #8]	@ (8015430 <stdio_exit_handler+0xc>)
 8015426:	4903      	ldr	r1, [pc, #12]	@ (8015434 <stdio_exit_handler+0x10>)
 8015428:	4803      	ldr	r0, [pc, #12]	@ (8015438 <stdio_exit_handler+0x14>)
 801542a:	f000 b869 	b.w	8015500 <_fwalk_sglue>
 801542e:	bf00      	nop
 8015430:	20000098 	.word	0x20000098
 8015434:	080160d5 	.word	0x080160d5
 8015438:	200000a8 	.word	0x200000a8

0801543c <cleanup_stdio>:
 801543c:	6841      	ldr	r1, [r0, #4]
 801543e:	4b0c      	ldr	r3, [pc, #48]	@ (8015470 <cleanup_stdio+0x34>)
 8015440:	4299      	cmp	r1, r3
 8015442:	b510      	push	{r4, lr}
 8015444:	4604      	mov	r4, r0
 8015446:	d001      	beq.n	801544c <cleanup_stdio+0x10>
 8015448:	f000 fe44 	bl	80160d4 <_fflush_r>
 801544c:	68a1      	ldr	r1, [r4, #8]
 801544e:	4b09      	ldr	r3, [pc, #36]	@ (8015474 <cleanup_stdio+0x38>)
 8015450:	4299      	cmp	r1, r3
 8015452:	d002      	beq.n	801545a <cleanup_stdio+0x1e>
 8015454:	4620      	mov	r0, r4
 8015456:	f000 fe3d 	bl	80160d4 <_fflush_r>
 801545a:	68e1      	ldr	r1, [r4, #12]
 801545c:	4b06      	ldr	r3, [pc, #24]	@ (8015478 <cleanup_stdio+0x3c>)
 801545e:	4299      	cmp	r1, r3
 8015460:	d004      	beq.n	801546c <cleanup_stdio+0x30>
 8015462:	4620      	mov	r0, r4
 8015464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015468:	f000 be34 	b.w	80160d4 <_fflush_r>
 801546c:	bd10      	pop	{r4, pc}
 801546e:	bf00      	nop
 8015470:	20005230 	.word	0x20005230
 8015474:	20005298 	.word	0x20005298
 8015478:	20005300 	.word	0x20005300

0801547c <global_stdio_init.part.0>:
 801547c:	b510      	push	{r4, lr}
 801547e:	4b0b      	ldr	r3, [pc, #44]	@ (80154ac <global_stdio_init.part.0+0x30>)
 8015480:	4c0b      	ldr	r4, [pc, #44]	@ (80154b0 <global_stdio_init.part.0+0x34>)
 8015482:	4a0c      	ldr	r2, [pc, #48]	@ (80154b4 <global_stdio_init.part.0+0x38>)
 8015484:	601a      	str	r2, [r3, #0]
 8015486:	4620      	mov	r0, r4
 8015488:	2200      	movs	r2, #0
 801548a:	2104      	movs	r1, #4
 801548c:	f7ff ff94 	bl	80153b8 <std>
 8015490:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015494:	2201      	movs	r2, #1
 8015496:	2109      	movs	r1, #9
 8015498:	f7ff ff8e 	bl	80153b8 <std>
 801549c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80154a0:	2202      	movs	r2, #2
 80154a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80154a6:	2112      	movs	r1, #18
 80154a8:	f7ff bf86 	b.w	80153b8 <std>
 80154ac:	20005368 	.word	0x20005368
 80154b0:	20005230 	.word	0x20005230
 80154b4:	08015425 	.word	0x08015425

080154b8 <__sfp_lock_acquire>:
 80154b8:	4801      	ldr	r0, [pc, #4]	@ (80154c0 <__sfp_lock_acquire+0x8>)
 80154ba:	f000 b972 	b.w	80157a2 <__retarget_lock_acquire_recursive>
 80154be:	bf00      	nop
 80154c0:	20005371 	.word	0x20005371

080154c4 <__sfp_lock_release>:
 80154c4:	4801      	ldr	r0, [pc, #4]	@ (80154cc <__sfp_lock_release+0x8>)
 80154c6:	f000 b96d 	b.w	80157a4 <__retarget_lock_release_recursive>
 80154ca:	bf00      	nop
 80154cc:	20005371 	.word	0x20005371

080154d0 <__sinit>:
 80154d0:	b510      	push	{r4, lr}
 80154d2:	4604      	mov	r4, r0
 80154d4:	f7ff fff0 	bl	80154b8 <__sfp_lock_acquire>
 80154d8:	6a23      	ldr	r3, [r4, #32]
 80154da:	b11b      	cbz	r3, 80154e4 <__sinit+0x14>
 80154dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80154e0:	f7ff bff0 	b.w	80154c4 <__sfp_lock_release>
 80154e4:	4b04      	ldr	r3, [pc, #16]	@ (80154f8 <__sinit+0x28>)
 80154e6:	6223      	str	r3, [r4, #32]
 80154e8:	4b04      	ldr	r3, [pc, #16]	@ (80154fc <__sinit+0x2c>)
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d1f5      	bne.n	80154dc <__sinit+0xc>
 80154f0:	f7ff ffc4 	bl	801547c <global_stdio_init.part.0>
 80154f4:	e7f2      	b.n	80154dc <__sinit+0xc>
 80154f6:	bf00      	nop
 80154f8:	0801543d 	.word	0x0801543d
 80154fc:	20005368 	.word	0x20005368

08015500 <_fwalk_sglue>:
 8015500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015504:	4607      	mov	r7, r0
 8015506:	4688      	mov	r8, r1
 8015508:	4614      	mov	r4, r2
 801550a:	2600      	movs	r6, #0
 801550c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015510:	f1b9 0901 	subs.w	r9, r9, #1
 8015514:	d505      	bpl.n	8015522 <_fwalk_sglue+0x22>
 8015516:	6824      	ldr	r4, [r4, #0]
 8015518:	2c00      	cmp	r4, #0
 801551a:	d1f7      	bne.n	801550c <_fwalk_sglue+0xc>
 801551c:	4630      	mov	r0, r6
 801551e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015522:	89ab      	ldrh	r3, [r5, #12]
 8015524:	2b01      	cmp	r3, #1
 8015526:	d907      	bls.n	8015538 <_fwalk_sglue+0x38>
 8015528:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801552c:	3301      	adds	r3, #1
 801552e:	d003      	beq.n	8015538 <_fwalk_sglue+0x38>
 8015530:	4629      	mov	r1, r5
 8015532:	4638      	mov	r0, r7
 8015534:	47c0      	blx	r8
 8015536:	4306      	orrs	r6, r0
 8015538:	3568      	adds	r5, #104	@ 0x68
 801553a:	e7e9      	b.n	8015510 <_fwalk_sglue+0x10>

0801553c <siprintf>:
 801553c:	b40e      	push	{r1, r2, r3}
 801553e:	b500      	push	{lr}
 8015540:	b09c      	sub	sp, #112	@ 0x70
 8015542:	ab1d      	add	r3, sp, #116	@ 0x74
 8015544:	9002      	str	r0, [sp, #8]
 8015546:	9006      	str	r0, [sp, #24]
 8015548:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801554c:	4809      	ldr	r0, [pc, #36]	@ (8015574 <siprintf+0x38>)
 801554e:	9107      	str	r1, [sp, #28]
 8015550:	9104      	str	r1, [sp, #16]
 8015552:	4909      	ldr	r1, [pc, #36]	@ (8015578 <siprintf+0x3c>)
 8015554:	f853 2b04 	ldr.w	r2, [r3], #4
 8015558:	9105      	str	r1, [sp, #20]
 801555a:	6800      	ldr	r0, [r0, #0]
 801555c:	9301      	str	r3, [sp, #4]
 801555e:	a902      	add	r1, sp, #8
 8015560:	f000 faaa 	bl	8015ab8 <_svfiprintf_r>
 8015564:	9b02      	ldr	r3, [sp, #8]
 8015566:	2200      	movs	r2, #0
 8015568:	701a      	strb	r2, [r3, #0]
 801556a:	b01c      	add	sp, #112	@ 0x70
 801556c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015570:	b003      	add	sp, #12
 8015572:	4770      	bx	lr
 8015574:	200000a4 	.word	0x200000a4
 8015578:	ffff0208 	.word	0xffff0208

0801557c <__sread>:
 801557c:	b510      	push	{r4, lr}
 801557e:	460c      	mov	r4, r1
 8015580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015584:	f000 f8be 	bl	8015704 <_read_r>
 8015588:	2800      	cmp	r0, #0
 801558a:	bfab      	itete	ge
 801558c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801558e:	89a3      	ldrhlt	r3, [r4, #12]
 8015590:	181b      	addge	r3, r3, r0
 8015592:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015596:	bfac      	ite	ge
 8015598:	6563      	strge	r3, [r4, #84]	@ 0x54
 801559a:	81a3      	strhlt	r3, [r4, #12]
 801559c:	bd10      	pop	{r4, pc}

0801559e <__swrite>:
 801559e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155a2:	461f      	mov	r7, r3
 80155a4:	898b      	ldrh	r3, [r1, #12]
 80155a6:	05db      	lsls	r3, r3, #23
 80155a8:	4605      	mov	r5, r0
 80155aa:	460c      	mov	r4, r1
 80155ac:	4616      	mov	r6, r2
 80155ae:	d505      	bpl.n	80155bc <__swrite+0x1e>
 80155b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80155b4:	2302      	movs	r3, #2
 80155b6:	2200      	movs	r2, #0
 80155b8:	f000 f892 	bl	80156e0 <_lseek_r>
 80155bc:	89a3      	ldrh	r3, [r4, #12]
 80155be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80155c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80155c6:	81a3      	strh	r3, [r4, #12]
 80155c8:	4632      	mov	r2, r6
 80155ca:	463b      	mov	r3, r7
 80155cc:	4628      	mov	r0, r5
 80155ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80155d2:	f000 b8a9 	b.w	8015728 <_write_r>

080155d6 <__sseek>:
 80155d6:	b510      	push	{r4, lr}
 80155d8:	460c      	mov	r4, r1
 80155da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80155de:	f000 f87f 	bl	80156e0 <_lseek_r>
 80155e2:	1c43      	adds	r3, r0, #1
 80155e4:	89a3      	ldrh	r3, [r4, #12]
 80155e6:	bf15      	itete	ne
 80155e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80155ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80155ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80155f2:	81a3      	strheq	r3, [r4, #12]
 80155f4:	bf18      	it	ne
 80155f6:	81a3      	strhne	r3, [r4, #12]
 80155f8:	bd10      	pop	{r4, pc}

080155fa <__sclose>:
 80155fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80155fe:	f000 b809 	b.w	8015614 <_close_r>

08015602 <memset>:
 8015602:	4402      	add	r2, r0
 8015604:	4603      	mov	r3, r0
 8015606:	4293      	cmp	r3, r2
 8015608:	d100      	bne.n	801560c <memset+0xa>
 801560a:	4770      	bx	lr
 801560c:	f803 1b01 	strb.w	r1, [r3], #1
 8015610:	e7f9      	b.n	8015606 <memset+0x4>
	...

08015614 <_close_r>:
 8015614:	b538      	push	{r3, r4, r5, lr}
 8015616:	4d06      	ldr	r5, [pc, #24]	@ (8015630 <_close_r+0x1c>)
 8015618:	2300      	movs	r3, #0
 801561a:	4604      	mov	r4, r0
 801561c:	4608      	mov	r0, r1
 801561e:	602b      	str	r3, [r5, #0]
 8015620:	f7f0 fd9e 	bl	8006160 <_close>
 8015624:	1c43      	adds	r3, r0, #1
 8015626:	d102      	bne.n	801562e <_close_r+0x1a>
 8015628:	682b      	ldr	r3, [r5, #0]
 801562a:	b103      	cbz	r3, 801562e <_close_r+0x1a>
 801562c:	6023      	str	r3, [r4, #0]
 801562e:	bd38      	pop	{r3, r4, r5, pc}
 8015630:	2000536c 	.word	0x2000536c

08015634 <_reclaim_reent>:
 8015634:	4b29      	ldr	r3, [pc, #164]	@ (80156dc <_reclaim_reent+0xa8>)
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	4283      	cmp	r3, r0
 801563a:	b570      	push	{r4, r5, r6, lr}
 801563c:	4604      	mov	r4, r0
 801563e:	d04b      	beq.n	80156d8 <_reclaim_reent+0xa4>
 8015640:	69c3      	ldr	r3, [r0, #28]
 8015642:	b1ab      	cbz	r3, 8015670 <_reclaim_reent+0x3c>
 8015644:	68db      	ldr	r3, [r3, #12]
 8015646:	b16b      	cbz	r3, 8015664 <_reclaim_reent+0x30>
 8015648:	2500      	movs	r5, #0
 801564a:	69e3      	ldr	r3, [r4, #28]
 801564c:	68db      	ldr	r3, [r3, #12]
 801564e:	5959      	ldr	r1, [r3, r5]
 8015650:	2900      	cmp	r1, #0
 8015652:	d13b      	bne.n	80156cc <_reclaim_reent+0x98>
 8015654:	3504      	adds	r5, #4
 8015656:	2d80      	cmp	r5, #128	@ 0x80
 8015658:	d1f7      	bne.n	801564a <_reclaim_reent+0x16>
 801565a:	69e3      	ldr	r3, [r4, #28]
 801565c:	4620      	mov	r0, r4
 801565e:	68d9      	ldr	r1, [r3, #12]
 8015660:	f000 f8ce 	bl	8015800 <_free_r>
 8015664:	69e3      	ldr	r3, [r4, #28]
 8015666:	6819      	ldr	r1, [r3, #0]
 8015668:	b111      	cbz	r1, 8015670 <_reclaim_reent+0x3c>
 801566a:	4620      	mov	r0, r4
 801566c:	f000 f8c8 	bl	8015800 <_free_r>
 8015670:	6961      	ldr	r1, [r4, #20]
 8015672:	b111      	cbz	r1, 801567a <_reclaim_reent+0x46>
 8015674:	4620      	mov	r0, r4
 8015676:	f000 f8c3 	bl	8015800 <_free_r>
 801567a:	69e1      	ldr	r1, [r4, #28]
 801567c:	b111      	cbz	r1, 8015684 <_reclaim_reent+0x50>
 801567e:	4620      	mov	r0, r4
 8015680:	f000 f8be 	bl	8015800 <_free_r>
 8015684:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015686:	b111      	cbz	r1, 801568e <_reclaim_reent+0x5a>
 8015688:	4620      	mov	r0, r4
 801568a:	f000 f8b9 	bl	8015800 <_free_r>
 801568e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015690:	b111      	cbz	r1, 8015698 <_reclaim_reent+0x64>
 8015692:	4620      	mov	r0, r4
 8015694:	f000 f8b4 	bl	8015800 <_free_r>
 8015698:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801569a:	b111      	cbz	r1, 80156a2 <_reclaim_reent+0x6e>
 801569c:	4620      	mov	r0, r4
 801569e:	f000 f8af 	bl	8015800 <_free_r>
 80156a2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80156a4:	b111      	cbz	r1, 80156ac <_reclaim_reent+0x78>
 80156a6:	4620      	mov	r0, r4
 80156a8:	f000 f8aa 	bl	8015800 <_free_r>
 80156ac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80156ae:	b111      	cbz	r1, 80156b6 <_reclaim_reent+0x82>
 80156b0:	4620      	mov	r0, r4
 80156b2:	f000 f8a5 	bl	8015800 <_free_r>
 80156b6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80156b8:	b111      	cbz	r1, 80156c0 <_reclaim_reent+0x8c>
 80156ba:	4620      	mov	r0, r4
 80156bc:	f000 f8a0 	bl	8015800 <_free_r>
 80156c0:	6a23      	ldr	r3, [r4, #32]
 80156c2:	b14b      	cbz	r3, 80156d8 <_reclaim_reent+0xa4>
 80156c4:	4620      	mov	r0, r4
 80156c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80156ca:	4718      	bx	r3
 80156cc:	680e      	ldr	r6, [r1, #0]
 80156ce:	4620      	mov	r0, r4
 80156d0:	f000 f896 	bl	8015800 <_free_r>
 80156d4:	4631      	mov	r1, r6
 80156d6:	e7bb      	b.n	8015650 <_reclaim_reent+0x1c>
 80156d8:	bd70      	pop	{r4, r5, r6, pc}
 80156da:	bf00      	nop
 80156dc:	200000a4 	.word	0x200000a4

080156e0 <_lseek_r>:
 80156e0:	b538      	push	{r3, r4, r5, lr}
 80156e2:	4d07      	ldr	r5, [pc, #28]	@ (8015700 <_lseek_r+0x20>)
 80156e4:	4604      	mov	r4, r0
 80156e6:	4608      	mov	r0, r1
 80156e8:	4611      	mov	r1, r2
 80156ea:	2200      	movs	r2, #0
 80156ec:	602a      	str	r2, [r5, #0]
 80156ee:	461a      	mov	r2, r3
 80156f0:	f7f0 fd5d 	bl	80061ae <_lseek>
 80156f4:	1c43      	adds	r3, r0, #1
 80156f6:	d102      	bne.n	80156fe <_lseek_r+0x1e>
 80156f8:	682b      	ldr	r3, [r5, #0]
 80156fa:	b103      	cbz	r3, 80156fe <_lseek_r+0x1e>
 80156fc:	6023      	str	r3, [r4, #0]
 80156fe:	bd38      	pop	{r3, r4, r5, pc}
 8015700:	2000536c 	.word	0x2000536c

08015704 <_read_r>:
 8015704:	b538      	push	{r3, r4, r5, lr}
 8015706:	4d07      	ldr	r5, [pc, #28]	@ (8015724 <_read_r+0x20>)
 8015708:	4604      	mov	r4, r0
 801570a:	4608      	mov	r0, r1
 801570c:	4611      	mov	r1, r2
 801570e:	2200      	movs	r2, #0
 8015710:	602a      	str	r2, [r5, #0]
 8015712:	461a      	mov	r2, r3
 8015714:	f7f0 fceb 	bl	80060ee <_read>
 8015718:	1c43      	adds	r3, r0, #1
 801571a:	d102      	bne.n	8015722 <_read_r+0x1e>
 801571c:	682b      	ldr	r3, [r5, #0]
 801571e:	b103      	cbz	r3, 8015722 <_read_r+0x1e>
 8015720:	6023      	str	r3, [r4, #0]
 8015722:	bd38      	pop	{r3, r4, r5, pc}
 8015724:	2000536c 	.word	0x2000536c

08015728 <_write_r>:
 8015728:	b538      	push	{r3, r4, r5, lr}
 801572a:	4d07      	ldr	r5, [pc, #28]	@ (8015748 <_write_r+0x20>)
 801572c:	4604      	mov	r4, r0
 801572e:	4608      	mov	r0, r1
 8015730:	4611      	mov	r1, r2
 8015732:	2200      	movs	r2, #0
 8015734:	602a      	str	r2, [r5, #0]
 8015736:	461a      	mov	r2, r3
 8015738:	f7f0 fcf6 	bl	8006128 <_write>
 801573c:	1c43      	adds	r3, r0, #1
 801573e:	d102      	bne.n	8015746 <_write_r+0x1e>
 8015740:	682b      	ldr	r3, [r5, #0]
 8015742:	b103      	cbz	r3, 8015746 <_write_r+0x1e>
 8015744:	6023      	str	r3, [r4, #0]
 8015746:	bd38      	pop	{r3, r4, r5, pc}
 8015748:	2000536c 	.word	0x2000536c

0801574c <__errno>:
 801574c:	4b01      	ldr	r3, [pc, #4]	@ (8015754 <__errno+0x8>)
 801574e:	6818      	ldr	r0, [r3, #0]
 8015750:	4770      	bx	lr
 8015752:	bf00      	nop
 8015754:	200000a4 	.word	0x200000a4

08015758 <__libc_init_array>:
 8015758:	b570      	push	{r4, r5, r6, lr}
 801575a:	4d0d      	ldr	r5, [pc, #52]	@ (8015790 <__libc_init_array+0x38>)
 801575c:	4c0d      	ldr	r4, [pc, #52]	@ (8015794 <__libc_init_array+0x3c>)
 801575e:	1b64      	subs	r4, r4, r5
 8015760:	10a4      	asrs	r4, r4, #2
 8015762:	2600      	movs	r6, #0
 8015764:	42a6      	cmp	r6, r4
 8015766:	d109      	bne.n	801577c <__libc_init_array+0x24>
 8015768:	4d0b      	ldr	r5, [pc, #44]	@ (8015798 <__libc_init_array+0x40>)
 801576a:	4c0c      	ldr	r4, [pc, #48]	@ (801579c <__libc_init_array+0x44>)
 801576c:	f000 fff0 	bl	8016750 <_init>
 8015770:	1b64      	subs	r4, r4, r5
 8015772:	10a4      	asrs	r4, r4, #2
 8015774:	2600      	movs	r6, #0
 8015776:	42a6      	cmp	r6, r4
 8015778:	d105      	bne.n	8015786 <__libc_init_array+0x2e>
 801577a:	bd70      	pop	{r4, r5, r6, pc}
 801577c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015780:	4798      	blx	r3
 8015782:	3601      	adds	r6, #1
 8015784:	e7ee      	b.n	8015764 <__libc_init_array+0xc>
 8015786:	f855 3b04 	ldr.w	r3, [r5], #4
 801578a:	4798      	blx	r3
 801578c:	3601      	adds	r6, #1
 801578e:	e7f2      	b.n	8015776 <__libc_init_array+0x1e>
 8015790:	08024e48 	.word	0x08024e48
 8015794:	08024e48 	.word	0x08024e48
 8015798:	08024e48 	.word	0x08024e48
 801579c:	08024e4c 	.word	0x08024e4c

080157a0 <__retarget_lock_init_recursive>:
 80157a0:	4770      	bx	lr

080157a2 <__retarget_lock_acquire_recursive>:
 80157a2:	4770      	bx	lr

080157a4 <__retarget_lock_release_recursive>:
 80157a4:	4770      	bx	lr

080157a6 <memcpy>:
 80157a6:	440a      	add	r2, r1
 80157a8:	4291      	cmp	r1, r2
 80157aa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80157ae:	d100      	bne.n	80157b2 <memcpy+0xc>
 80157b0:	4770      	bx	lr
 80157b2:	b510      	push	{r4, lr}
 80157b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80157b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80157bc:	4291      	cmp	r1, r2
 80157be:	d1f9      	bne.n	80157b4 <memcpy+0xe>
 80157c0:	bd10      	pop	{r4, pc}
	...

080157c4 <__assert_func>:
 80157c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80157c6:	4614      	mov	r4, r2
 80157c8:	461a      	mov	r2, r3
 80157ca:	4b09      	ldr	r3, [pc, #36]	@ (80157f0 <__assert_func+0x2c>)
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	4605      	mov	r5, r0
 80157d0:	68d8      	ldr	r0, [r3, #12]
 80157d2:	b954      	cbnz	r4, 80157ea <__assert_func+0x26>
 80157d4:	4b07      	ldr	r3, [pc, #28]	@ (80157f4 <__assert_func+0x30>)
 80157d6:	461c      	mov	r4, r3
 80157d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80157dc:	9100      	str	r1, [sp, #0]
 80157de:	462b      	mov	r3, r5
 80157e0:	4905      	ldr	r1, [pc, #20]	@ (80157f8 <__assert_func+0x34>)
 80157e2:	f000 fc9f 	bl	8016124 <fiprintf>
 80157e6:	f000 fcd9 	bl	801619c <abort>
 80157ea:	4b04      	ldr	r3, [pc, #16]	@ (80157fc <__assert_func+0x38>)
 80157ec:	e7f4      	b.n	80157d8 <__assert_func+0x14>
 80157ee:	bf00      	nop
 80157f0:	200000a4 	.word	0x200000a4
 80157f4:	08024e0a 	.word	0x08024e0a
 80157f8:	08024ddc 	.word	0x08024ddc
 80157fc:	08024dcf 	.word	0x08024dcf

08015800 <_free_r>:
 8015800:	b538      	push	{r3, r4, r5, lr}
 8015802:	4605      	mov	r5, r0
 8015804:	2900      	cmp	r1, #0
 8015806:	d041      	beq.n	801588c <_free_r+0x8c>
 8015808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801580c:	1f0c      	subs	r4, r1, #4
 801580e:	2b00      	cmp	r3, #0
 8015810:	bfb8      	it	lt
 8015812:	18e4      	addlt	r4, r4, r3
 8015814:	f000 f8e8 	bl	80159e8 <__malloc_lock>
 8015818:	4a1d      	ldr	r2, [pc, #116]	@ (8015890 <_free_r+0x90>)
 801581a:	6813      	ldr	r3, [r2, #0]
 801581c:	b933      	cbnz	r3, 801582c <_free_r+0x2c>
 801581e:	6063      	str	r3, [r4, #4]
 8015820:	6014      	str	r4, [r2, #0]
 8015822:	4628      	mov	r0, r5
 8015824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015828:	f000 b8e4 	b.w	80159f4 <__malloc_unlock>
 801582c:	42a3      	cmp	r3, r4
 801582e:	d908      	bls.n	8015842 <_free_r+0x42>
 8015830:	6820      	ldr	r0, [r4, #0]
 8015832:	1821      	adds	r1, r4, r0
 8015834:	428b      	cmp	r3, r1
 8015836:	bf01      	itttt	eq
 8015838:	6819      	ldreq	r1, [r3, #0]
 801583a:	685b      	ldreq	r3, [r3, #4]
 801583c:	1809      	addeq	r1, r1, r0
 801583e:	6021      	streq	r1, [r4, #0]
 8015840:	e7ed      	b.n	801581e <_free_r+0x1e>
 8015842:	461a      	mov	r2, r3
 8015844:	685b      	ldr	r3, [r3, #4]
 8015846:	b10b      	cbz	r3, 801584c <_free_r+0x4c>
 8015848:	42a3      	cmp	r3, r4
 801584a:	d9fa      	bls.n	8015842 <_free_r+0x42>
 801584c:	6811      	ldr	r1, [r2, #0]
 801584e:	1850      	adds	r0, r2, r1
 8015850:	42a0      	cmp	r0, r4
 8015852:	d10b      	bne.n	801586c <_free_r+0x6c>
 8015854:	6820      	ldr	r0, [r4, #0]
 8015856:	4401      	add	r1, r0
 8015858:	1850      	adds	r0, r2, r1
 801585a:	4283      	cmp	r3, r0
 801585c:	6011      	str	r1, [r2, #0]
 801585e:	d1e0      	bne.n	8015822 <_free_r+0x22>
 8015860:	6818      	ldr	r0, [r3, #0]
 8015862:	685b      	ldr	r3, [r3, #4]
 8015864:	6053      	str	r3, [r2, #4]
 8015866:	4408      	add	r0, r1
 8015868:	6010      	str	r0, [r2, #0]
 801586a:	e7da      	b.n	8015822 <_free_r+0x22>
 801586c:	d902      	bls.n	8015874 <_free_r+0x74>
 801586e:	230c      	movs	r3, #12
 8015870:	602b      	str	r3, [r5, #0]
 8015872:	e7d6      	b.n	8015822 <_free_r+0x22>
 8015874:	6820      	ldr	r0, [r4, #0]
 8015876:	1821      	adds	r1, r4, r0
 8015878:	428b      	cmp	r3, r1
 801587a:	bf04      	itt	eq
 801587c:	6819      	ldreq	r1, [r3, #0]
 801587e:	685b      	ldreq	r3, [r3, #4]
 8015880:	6063      	str	r3, [r4, #4]
 8015882:	bf04      	itt	eq
 8015884:	1809      	addeq	r1, r1, r0
 8015886:	6021      	streq	r1, [r4, #0]
 8015888:	6054      	str	r4, [r2, #4]
 801588a:	e7ca      	b.n	8015822 <_free_r+0x22>
 801588c:	bd38      	pop	{r3, r4, r5, pc}
 801588e:	bf00      	nop
 8015890:	20005378 	.word	0x20005378

08015894 <malloc>:
 8015894:	4b02      	ldr	r3, [pc, #8]	@ (80158a0 <malloc+0xc>)
 8015896:	4601      	mov	r1, r0
 8015898:	6818      	ldr	r0, [r3, #0]
 801589a:	f000 b825 	b.w	80158e8 <_malloc_r>
 801589e:	bf00      	nop
 80158a0:	200000a4 	.word	0x200000a4

080158a4 <sbrk_aligned>:
 80158a4:	b570      	push	{r4, r5, r6, lr}
 80158a6:	4e0f      	ldr	r6, [pc, #60]	@ (80158e4 <sbrk_aligned+0x40>)
 80158a8:	460c      	mov	r4, r1
 80158aa:	6831      	ldr	r1, [r6, #0]
 80158ac:	4605      	mov	r5, r0
 80158ae:	b911      	cbnz	r1, 80158b6 <sbrk_aligned+0x12>
 80158b0:	f000 fc64 	bl	801617c <_sbrk_r>
 80158b4:	6030      	str	r0, [r6, #0]
 80158b6:	4621      	mov	r1, r4
 80158b8:	4628      	mov	r0, r5
 80158ba:	f000 fc5f 	bl	801617c <_sbrk_r>
 80158be:	1c43      	adds	r3, r0, #1
 80158c0:	d103      	bne.n	80158ca <sbrk_aligned+0x26>
 80158c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80158c6:	4620      	mov	r0, r4
 80158c8:	bd70      	pop	{r4, r5, r6, pc}
 80158ca:	1cc4      	adds	r4, r0, #3
 80158cc:	f024 0403 	bic.w	r4, r4, #3
 80158d0:	42a0      	cmp	r0, r4
 80158d2:	d0f8      	beq.n	80158c6 <sbrk_aligned+0x22>
 80158d4:	1a21      	subs	r1, r4, r0
 80158d6:	4628      	mov	r0, r5
 80158d8:	f000 fc50 	bl	801617c <_sbrk_r>
 80158dc:	3001      	adds	r0, #1
 80158de:	d1f2      	bne.n	80158c6 <sbrk_aligned+0x22>
 80158e0:	e7ef      	b.n	80158c2 <sbrk_aligned+0x1e>
 80158e2:	bf00      	nop
 80158e4:	20005374 	.word	0x20005374

080158e8 <_malloc_r>:
 80158e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158ec:	1ccd      	adds	r5, r1, #3
 80158ee:	f025 0503 	bic.w	r5, r5, #3
 80158f2:	3508      	adds	r5, #8
 80158f4:	2d0c      	cmp	r5, #12
 80158f6:	bf38      	it	cc
 80158f8:	250c      	movcc	r5, #12
 80158fa:	2d00      	cmp	r5, #0
 80158fc:	4606      	mov	r6, r0
 80158fe:	db01      	blt.n	8015904 <_malloc_r+0x1c>
 8015900:	42a9      	cmp	r1, r5
 8015902:	d904      	bls.n	801590e <_malloc_r+0x26>
 8015904:	230c      	movs	r3, #12
 8015906:	6033      	str	r3, [r6, #0]
 8015908:	2000      	movs	r0, #0
 801590a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801590e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80159e4 <_malloc_r+0xfc>
 8015912:	f000 f869 	bl	80159e8 <__malloc_lock>
 8015916:	f8d8 3000 	ldr.w	r3, [r8]
 801591a:	461c      	mov	r4, r3
 801591c:	bb44      	cbnz	r4, 8015970 <_malloc_r+0x88>
 801591e:	4629      	mov	r1, r5
 8015920:	4630      	mov	r0, r6
 8015922:	f7ff ffbf 	bl	80158a4 <sbrk_aligned>
 8015926:	1c43      	adds	r3, r0, #1
 8015928:	4604      	mov	r4, r0
 801592a:	d158      	bne.n	80159de <_malloc_r+0xf6>
 801592c:	f8d8 4000 	ldr.w	r4, [r8]
 8015930:	4627      	mov	r7, r4
 8015932:	2f00      	cmp	r7, #0
 8015934:	d143      	bne.n	80159be <_malloc_r+0xd6>
 8015936:	2c00      	cmp	r4, #0
 8015938:	d04b      	beq.n	80159d2 <_malloc_r+0xea>
 801593a:	6823      	ldr	r3, [r4, #0]
 801593c:	4639      	mov	r1, r7
 801593e:	4630      	mov	r0, r6
 8015940:	eb04 0903 	add.w	r9, r4, r3
 8015944:	f000 fc1a 	bl	801617c <_sbrk_r>
 8015948:	4581      	cmp	r9, r0
 801594a:	d142      	bne.n	80159d2 <_malloc_r+0xea>
 801594c:	6821      	ldr	r1, [r4, #0]
 801594e:	1a6d      	subs	r5, r5, r1
 8015950:	4629      	mov	r1, r5
 8015952:	4630      	mov	r0, r6
 8015954:	f7ff ffa6 	bl	80158a4 <sbrk_aligned>
 8015958:	3001      	adds	r0, #1
 801595a:	d03a      	beq.n	80159d2 <_malloc_r+0xea>
 801595c:	6823      	ldr	r3, [r4, #0]
 801595e:	442b      	add	r3, r5
 8015960:	6023      	str	r3, [r4, #0]
 8015962:	f8d8 3000 	ldr.w	r3, [r8]
 8015966:	685a      	ldr	r2, [r3, #4]
 8015968:	bb62      	cbnz	r2, 80159c4 <_malloc_r+0xdc>
 801596a:	f8c8 7000 	str.w	r7, [r8]
 801596e:	e00f      	b.n	8015990 <_malloc_r+0xa8>
 8015970:	6822      	ldr	r2, [r4, #0]
 8015972:	1b52      	subs	r2, r2, r5
 8015974:	d420      	bmi.n	80159b8 <_malloc_r+0xd0>
 8015976:	2a0b      	cmp	r2, #11
 8015978:	d917      	bls.n	80159aa <_malloc_r+0xc2>
 801597a:	1961      	adds	r1, r4, r5
 801597c:	42a3      	cmp	r3, r4
 801597e:	6025      	str	r5, [r4, #0]
 8015980:	bf18      	it	ne
 8015982:	6059      	strne	r1, [r3, #4]
 8015984:	6863      	ldr	r3, [r4, #4]
 8015986:	bf08      	it	eq
 8015988:	f8c8 1000 	streq.w	r1, [r8]
 801598c:	5162      	str	r2, [r4, r5]
 801598e:	604b      	str	r3, [r1, #4]
 8015990:	4630      	mov	r0, r6
 8015992:	f000 f82f 	bl	80159f4 <__malloc_unlock>
 8015996:	f104 000b 	add.w	r0, r4, #11
 801599a:	1d23      	adds	r3, r4, #4
 801599c:	f020 0007 	bic.w	r0, r0, #7
 80159a0:	1ac2      	subs	r2, r0, r3
 80159a2:	bf1c      	itt	ne
 80159a4:	1a1b      	subne	r3, r3, r0
 80159a6:	50a3      	strne	r3, [r4, r2]
 80159a8:	e7af      	b.n	801590a <_malloc_r+0x22>
 80159aa:	6862      	ldr	r2, [r4, #4]
 80159ac:	42a3      	cmp	r3, r4
 80159ae:	bf0c      	ite	eq
 80159b0:	f8c8 2000 	streq.w	r2, [r8]
 80159b4:	605a      	strne	r2, [r3, #4]
 80159b6:	e7eb      	b.n	8015990 <_malloc_r+0xa8>
 80159b8:	4623      	mov	r3, r4
 80159ba:	6864      	ldr	r4, [r4, #4]
 80159bc:	e7ae      	b.n	801591c <_malloc_r+0x34>
 80159be:	463c      	mov	r4, r7
 80159c0:	687f      	ldr	r7, [r7, #4]
 80159c2:	e7b6      	b.n	8015932 <_malloc_r+0x4a>
 80159c4:	461a      	mov	r2, r3
 80159c6:	685b      	ldr	r3, [r3, #4]
 80159c8:	42a3      	cmp	r3, r4
 80159ca:	d1fb      	bne.n	80159c4 <_malloc_r+0xdc>
 80159cc:	2300      	movs	r3, #0
 80159ce:	6053      	str	r3, [r2, #4]
 80159d0:	e7de      	b.n	8015990 <_malloc_r+0xa8>
 80159d2:	230c      	movs	r3, #12
 80159d4:	6033      	str	r3, [r6, #0]
 80159d6:	4630      	mov	r0, r6
 80159d8:	f000 f80c 	bl	80159f4 <__malloc_unlock>
 80159dc:	e794      	b.n	8015908 <_malloc_r+0x20>
 80159de:	6005      	str	r5, [r0, #0]
 80159e0:	e7d6      	b.n	8015990 <_malloc_r+0xa8>
 80159e2:	bf00      	nop
 80159e4:	20005378 	.word	0x20005378

080159e8 <__malloc_lock>:
 80159e8:	4801      	ldr	r0, [pc, #4]	@ (80159f0 <__malloc_lock+0x8>)
 80159ea:	f7ff beda 	b.w	80157a2 <__retarget_lock_acquire_recursive>
 80159ee:	bf00      	nop
 80159f0:	20005370 	.word	0x20005370

080159f4 <__malloc_unlock>:
 80159f4:	4801      	ldr	r0, [pc, #4]	@ (80159fc <__malloc_unlock+0x8>)
 80159f6:	f7ff bed5 	b.w	80157a4 <__retarget_lock_release_recursive>
 80159fa:	bf00      	nop
 80159fc:	20005370 	.word	0x20005370

08015a00 <__ssputs_r>:
 8015a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a04:	688e      	ldr	r6, [r1, #8]
 8015a06:	461f      	mov	r7, r3
 8015a08:	42be      	cmp	r6, r7
 8015a0a:	680b      	ldr	r3, [r1, #0]
 8015a0c:	4682      	mov	sl, r0
 8015a0e:	460c      	mov	r4, r1
 8015a10:	4690      	mov	r8, r2
 8015a12:	d82d      	bhi.n	8015a70 <__ssputs_r+0x70>
 8015a14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015a18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015a1c:	d026      	beq.n	8015a6c <__ssputs_r+0x6c>
 8015a1e:	6965      	ldr	r5, [r4, #20]
 8015a20:	6909      	ldr	r1, [r1, #16]
 8015a22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015a26:	eba3 0901 	sub.w	r9, r3, r1
 8015a2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015a2e:	1c7b      	adds	r3, r7, #1
 8015a30:	444b      	add	r3, r9
 8015a32:	106d      	asrs	r5, r5, #1
 8015a34:	429d      	cmp	r5, r3
 8015a36:	bf38      	it	cc
 8015a38:	461d      	movcc	r5, r3
 8015a3a:	0553      	lsls	r3, r2, #21
 8015a3c:	d527      	bpl.n	8015a8e <__ssputs_r+0x8e>
 8015a3e:	4629      	mov	r1, r5
 8015a40:	f7ff ff52 	bl	80158e8 <_malloc_r>
 8015a44:	4606      	mov	r6, r0
 8015a46:	b360      	cbz	r0, 8015aa2 <__ssputs_r+0xa2>
 8015a48:	6921      	ldr	r1, [r4, #16]
 8015a4a:	464a      	mov	r2, r9
 8015a4c:	f7ff feab 	bl	80157a6 <memcpy>
 8015a50:	89a3      	ldrh	r3, [r4, #12]
 8015a52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015a56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015a5a:	81a3      	strh	r3, [r4, #12]
 8015a5c:	6126      	str	r6, [r4, #16]
 8015a5e:	6165      	str	r5, [r4, #20]
 8015a60:	444e      	add	r6, r9
 8015a62:	eba5 0509 	sub.w	r5, r5, r9
 8015a66:	6026      	str	r6, [r4, #0]
 8015a68:	60a5      	str	r5, [r4, #8]
 8015a6a:	463e      	mov	r6, r7
 8015a6c:	42be      	cmp	r6, r7
 8015a6e:	d900      	bls.n	8015a72 <__ssputs_r+0x72>
 8015a70:	463e      	mov	r6, r7
 8015a72:	6820      	ldr	r0, [r4, #0]
 8015a74:	4632      	mov	r2, r6
 8015a76:	4641      	mov	r1, r8
 8015a78:	f000 fb66 	bl	8016148 <memmove>
 8015a7c:	68a3      	ldr	r3, [r4, #8]
 8015a7e:	1b9b      	subs	r3, r3, r6
 8015a80:	60a3      	str	r3, [r4, #8]
 8015a82:	6823      	ldr	r3, [r4, #0]
 8015a84:	4433      	add	r3, r6
 8015a86:	6023      	str	r3, [r4, #0]
 8015a88:	2000      	movs	r0, #0
 8015a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a8e:	462a      	mov	r2, r5
 8015a90:	f000 fb8b 	bl	80161aa <_realloc_r>
 8015a94:	4606      	mov	r6, r0
 8015a96:	2800      	cmp	r0, #0
 8015a98:	d1e0      	bne.n	8015a5c <__ssputs_r+0x5c>
 8015a9a:	6921      	ldr	r1, [r4, #16]
 8015a9c:	4650      	mov	r0, sl
 8015a9e:	f7ff feaf 	bl	8015800 <_free_r>
 8015aa2:	230c      	movs	r3, #12
 8015aa4:	f8ca 3000 	str.w	r3, [sl]
 8015aa8:	89a3      	ldrh	r3, [r4, #12]
 8015aaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015aae:	81a3      	strh	r3, [r4, #12]
 8015ab0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015ab4:	e7e9      	b.n	8015a8a <__ssputs_r+0x8a>
	...

08015ab8 <_svfiprintf_r>:
 8015ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015abc:	4698      	mov	r8, r3
 8015abe:	898b      	ldrh	r3, [r1, #12]
 8015ac0:	061b      	lsls	r3, r3, #24
 8015ac2:	b09d      	sub	sp, #116	@ 0x74
 8015ac4:	4607      	mov	r7, r0
 8015ac6:	460d      	mov	r5, r1
 8015ac8:	4614      	mov	r4, r2
 8015aca:	d510      	bpl.n	8015aee <_svfiprintf_r+0x36>
 8015acc:	690b      	ldr	r3, [r1, #16]
 8015ace:	b973      	cbnz	r3, 8015aee <_svfiprintf_r+0x36>
 8015ad0:	2140      	movs	r1, #64	@ 0x40
 8015ad2:	f7ff ff09 	bl	80158e8 <_malloc_r>
 8015ad6:	6028      	str	r0, [r5, #0]
 8015ad8:	6128      	str	r0, [r5, #16]
 8015ada:	b930      	cbnz	r0, 8015aea <_svfiprintf_r+0x32>
 8015adc:	230c      	movs	r3, #12
 8015ade:	603b      	str	r3, [r7, #0]
 8015ae0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015ae4:	b01d      	add	sp, #116	@ 0x74
 8015ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015aea:	2340      	movs	r3, #64	@ 0x40
 8015aec:	616b      	str	r3, [r5, #20]
 8015aee:	2300      	movs	r3, #0
 8015af0:	9309      	str	r3, [sp, #36]	@ 0x24
 8015af2:	2320      	movs	r3, #32
 8015af4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015af8:	f8cd 800c 	str.w	r8, [sp, #12]
 8015afc:	2330      	movs	r3, #48	@ 0x30
 8015afe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015c9c <_svfiprintf_r+0x1e4>
 8015b02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015b06:	f04f 0901 	mov.w	r9, #1
 8015b0a:	4623      	mov	r3, r4
 8015b0c:	469a      	mov	sl, r3
 8015b0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015b12:	b10a      	cbz	r2, 8015b18 <_svfiprintf_r+0x60>
 8015b14:	2a25      	cmp	r2, #37	@ 0x25
 8015b16:	d1f9      	bne.n	8015b0c <_svfiprintf_r+0x54>
 8015b18:	ebba 0b04 	subs.w	fp, sl, r4
 8015b1c:	d00b      	beq.n	8015b36 <_svfiprintf_r+0x7e>
 8015b1e:	465b      	mov	r3, fp
 8015b20:	4622      	mov	r2, r4
 8015b22:	4629      	mov	r1, r5
 8015b24:	4638      	mov	r0, r7
 8015b26:	f7ff ff6b 	bl	8015a00 <__ssputs_r>
 8015b2a:	3001      	adds	r0, #1
 8015b2c:	f000 80a7 	beq.w	8015c7e <_svfiprintf_r+0x1c6>
 8015b30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015b32:	445a      	add	r2, fp
 8015b34:	9209      	str	r2, [sp, #36]	@ 0x24
 8015b36:	f89a 3000 	ldrb.w	r3, [sl]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	f000 809f 	beq.w	8015c7e <_svfiprintf_r+0x1c6>
 8015b40:	2300      	movs	r3, #0
 8015b42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015b46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015b4a:	f10a 0a01 	add.w	sl, sl, #1
 8015b4e:	9304      	str	r3, [sp, #16]
 8015b50:	9307      	str	r3, [sp, #28]
 8015b52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015b56:	931a      	str	r3, [sp, #104]	@ 0x68
 8015b58:	4654      	mov	r4, sl
 8015b5a:	2205      	movs	r2, #5
 8015b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b60:	484e      	ldr	r0, [pc, #312]	@ (8015c9c <_svfiprintf_r+0x1e4>)
 8015b62:	f7ea fb55 	bl	8000210 <memchr>
 8015b66:	9a04      	ldr	r2, [sp, #16]
 8015b68:	b9d8      	cbnz	r0, 8015ba2 <_svfiprintf_r+0xea>
 8015b6a:	06d0      	lsls	r0, r2, #27
 8015b6c:	bf44      	itt	mi
 8015b6e:	2320      	movmi	r3, #32
 8015b70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015b74:	0711      	lsls	r1, r2, #28
 8015b76:	bf44      	itt	mi
 8015b78:	232b      	movmi	r3, #43	@ 0x2b
 8015b7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8015b82:	2b2a      	cmp	r3, #42	@ 0x2a
 8015b84:	d015      	beq.n	8015bb2 <_svfiprintf_r+0xfa>
 8015b86:	9a07      	ldr	r2, [sp, #28]
 8015b88:	4654      	mov	r4, sl
 8015b8a:	2000      	movs	r0, #0
 8015b8c:	f04f 0c0a 	mov.w	ip, #10
 8015b90:	4621      	mov	r1, r4
 8015b92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015b96:	3b30      	subs	r3, #48	@ 0x30
 8015b98:	2b09      	cmp	r3, #9
 8015b9a:	d94b      	bls.n	8015c34 <_svfiprintf_r+0x17c>
 8015b9c:	b1b0      	cbz	r0, 8015bcc <_svfiprintf_r+0x114>
 8015b9e:	9207      	str	r2, [sp, #28]
 8015ba0:	e014      	b.n	8015bcc <_svfiprintf_r+0x114>
 8015ba2:	eba0 0308 	sub.w	r3, r0, r8
 8015ba6:	fa09 f303 	lsl.w	r3, r9, r3
 8015baa:	4313      	orrs	r3, r2
 8015bac:	9304      	str	r3, [sp, #16]
 8015bae:	46a2      	mov	sl, r4
 8015bb0:	e7d2      	b.n	8015b58 <_svfiprintf_r+0xa0>
 8015bb2:	9b03      	ldr	r3, [sp, #12]
 8015bb4:	1d19      	adds	r1, r3, #4
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	9103      	str	r1, [sp, #12]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	bfbb      	ittet	lt
 8015bbe:	425b      	neglt	r3, r3
 8015bc0:	f042 0202 	orrlt.w	r2, r2, #2
 8015bc4:	9307      	strge	r3, [sp, #28]
 8015bc6:	9307      	strlt	r3, [sp, #28]
 8015bc8:	bfb8      	it	lt
 8015bca:	9204      	strlt	r2, [sp, #16]
 8015bcc:	7823      	ldrb	r3, [r4, #0]
 8015bce:	2b2e      	cmp	r3, #46	@ 0x2e
 8015bd0:	d10a      	bne.n	8015be8 <_svfiprintf_r+0x130>
 8015bd2:	7863      	ldrb	r3, [r4, #1]
 8015bd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8015bd6:	d132      	bne.n	8015c3e <_svfiprintf_r+0x186>
 8015bd8:	9b03      	ldr	r3, [sp, #12]
 8015bda:	1d1a      	adds	r2, r3, #4
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	9203      	str	r2, [sp, #12]
 8015be0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015be4:	3402      	adds	r4, #2
 8015be6:	9305      	str	r3, [sp, #20]
 8015be8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015cac <_svfiprintf_r+0x1f4>
 8015bec:	7821      	ldrb	r1, [r4, #0]
 8015bee:	2203      	movs	r2, #3
 8015bf0:	4650      	mov	r0, sl
 8015bf2:	f7ea fb0d 	bl	8000210 <memchr>
 8015bf6:	b138      	cbz	r0, 8015c08 <_svfiprintf_r+0x150>
 8015bf8:	9b04      	ldr	r3, [sp, #16]
 8015bfa:	eba0 000a 	sub.w	r0, r0, sl
 8015bfe:	2240      	movs	r2, #64	@ 0x40
 8015c00:	4082      	lsls	r2, r0
 8015c02:	4313      	orrs	r3, r2
 8015c04:	3401      	adds	r4, #1
 8015c06:	9304      	str	r3, [sp, #16]
 8015c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c0c:	4824      	ldr	r0, [pc, #144]	@ (8015ca0 <_svfiprintf_r+0x1e8>)
 8015c0e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015c12:	2206      	movs	r2, #6
 8015c14:	f7ea fafc 	bl	8000210 <memchr>
 8015c18:	2800      	cmp	r0, #0
 8015c1a:	d036      	beq.n	8015c8a <_svfiprintf_r+0x1d2>
 8015c1c:	4b21      	ldr	r3, [pc, #132]	@ (8015ca4 <_svfiprintf_r+0x1ec>)
 8015c1e:	bb1b      	cbnz	r3, 8015c68 <_svfiprintf_r+0x1b0>
 8015c20:	9b03      	ldr	r3, [sp, #12]
 8015c22:	3307      	adds	r3, #7
 8015c24:	f023 0307 	bic.w	r3, r3, #7
 8015c28:	3308      	adds	r3, #8
 8015c2a:	9303      	str	r3, [sp, #12]
 8015c2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015c2e:	4433      	add	r3, r6
 8015c30:	9309      	str	r3, [sp, #36]	@ 0x24
 8015c32:	e76a      	b.n	8015b0a <_svfiprintf_r+0x52>
 8015c34:	fb0c 3202 	mla	r2, ip, r2, r3
 8015c38:	460c      	mov	r4, r1
 8015c3a:	2001      	movs	r0, #1
 8015c3c:	e7a8      	b.n	8015b90 <_svfiprintf_r+0xd8>
 8015c3e:	2300      	movs	r3, #0
 8015c40:	3401      	adds	r4, #1
 8015c42:	9305      	str	r3, [sp, #20]
 8015c44:	4619      	mov	r1, r3
 8015c46:	f04f 0c0a 	mov.w	ip, #10
 8015c4a:	4620      	mov	r0, r4
 8015c4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015c50:	3a30      	subs	r2, #48	@ 0x30
 8015c52:	2a09      	cmp	r2, #9
 8015c54:	d903      	bls.n	8015c5e <_svfiprintf_r+0x1a6>
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d0c6      	beq.n	8015be8 <_svfiprintf_r+0x130>
 8015c5a:	9105      	str	r1, [sp, #20]
 8015c5c:	e7c4      	b.n	8015be8 <_svfiprintf_r+0x130>
 8015c5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015c62:	4604      	mov	r4, r0
 8015c64:	2301      	movs	r3, #1
 8015c66:	e7f0      	b.n	8015c4a <_svfiprintf_r+0x192>
 8015c68:	ab03      	add	r3, sp, #12
 8015c6a:	9300      	str	r3, [sp, #0]
 8015c6c:	462a      	mov	r2, r5
 8015c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8015ca8 <_svfiprintf_r+0x1f0>)
 8015c70:	a904      	add	r1, sp, #16
 8015c72:	4638      	mov	r0, r7
 8015c74:	f3af 8000 	nop.w
 8015c78:	1c42      	adds	r2, r0, #1
 8015c7a:	4606      	mov	r6, r0
 8015c7c:	d1d6      	bne.n	8015c2c <_svfiprintf_r+0x174>
 8015c7e:	89ab      	ldrh	r3, [r5, #12]
 8015c80:	065b      	lsls	r3, r3, #25
 8015c82:	f53f af2d 	bmi.w	8015ae0 <_svfiprintf_r+0x28>
 8015c86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015c88:	e72c      	b.n	8015ae4 <_svfiprintf_r+0x2c>
 8015c8a:	ab03      	add	r3, sp, #12
 8015c8c:	9300      	str	r3, [sp, #0]
 8015c8e:	462a      	mov	r2, r5
 8015c90:	4b05      	ldr	r3, [pc, #20]	@ (8015ca8 <_svfiprintf_r+0x1f0>)
 8015c92:	a904      	add	r1, sp, #16
 8015c94:	4638      	mov	r0, r7
 8015c96:	f000 f879 	bl	8015d8c <_printf_i>
 8015c9a:	e7ed      	b.n	8015c78 <_svfiprintf_r+0x1c0>
 8015c9c:	08024e0b 	.word	0x08024e0b
 8015ca0:	08024e15 	.word	0x08024e15
 8015ca4:	00000000 	.word	0x00000000
 8015ca8:	08015a01 	.word	0x08015a01
 8015cac:	08024e11 	.word	0x08024e11

08015cb0 <_printf_common>:
 8015cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015cb4:	4616      	mov	r6, r2
 8015cb6:	4698      	mov	r8, r3
 8015cb8:	688a      	ldr	r2, [r1, #8]
 8015cba:	690b      	ldr	r3, [r1, #16]
 8015cbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015cc0:	4293      	cmp	r3, r2
 8015cc2:	bfb8      	it	lt
 8015cc4:	4613      	movlt	r3, r2
 8015cc6:	6033      	str	r3, [r6, #0]
 8015cc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015ccc:	4607      	mov	r7, r0
 8015cce:	460c      	mov	r4, r1
 8015cd0:	b10a      	cbz	r2, 8015cd6 <_printf_common+0x26>
 8015cd2:	3301      	adds	r3, #1
 8015cd4:	6033      	str	r3, [r6, #0]
 8015cd6:	6823      	ldr	r3, [r4, #0]
 8015cd8:	0699      	lsls	r1, r3, #26
 8015cda:	bf42      	ittt	mi
 8015cdc:	6833      	ldrmi	r3, [r6, #0]
 8015cde:	3302      	addmi	r3, #2
 8015ce0:	6033      	strmi	r3, [r6, #0]
 8015ce2:	6825      	ldr	r5, [r4, #0]
 8015ce4:	f015 0506 	ands.w	r5, r5, #6
 8015ce8:	d106      	bne.n	8015cf8 <_printf_common+0x48>
 8015cea:	f104 0a19 	add.w	sl, r4, #25
 8015cee:	68e3      	ldr	r3, [r4, #12]
 8015cf0:	6832      	ldr	r2, [r6, #0]
 8015cf2:	1a9b      	subs	r3, r3, r2
 8015cf4:	42ab      	cmp	r3, r5
 8015cf6:	dc26      	bgt.n	8015d46 <_printf_common+0x96>
 8015cf8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015cfc:	6822      	ldr	r2, [r4, #0]
 8015cfe:	3b00      	subs	r3, #0
 8015d00:	bf18      	it	ne
 8015d02:	2301      	movne	r3, #1
 8015d04:	0692      	lsls	r2, r2, #26
 8015d06:	d42b      	bmi.n	8015d60 <_printf_common+0xb0>
 8015d08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015d0c:	4641      	mov	r1, r8
 8015d0e:	4638      	mov	r0, r7
 8015d10:	47c8      	blx	r9
 8015d12:	3001      	adds	r0, #1
 8015d14:	d01e      	beq.n	8015d54 <_printf_common+0xa4>
 8015d16:	6823      	ldr	r3, [r4, #0]
 8015d18:	6922      	ldr	r2, [r4, #16]
 8015d1a:	f003 0306 	and.w	r3, r3, #6
 8015d1e:	2b04      	cmp	r3, #4
 8015d20:	bf02      	ittt	eq
 8015d22:	68e5      	ldreq	r5, [r4, #12]
 8015d24:	6833      	ldreq	r3, [r6, #0]
 8015d26:	1aed      	subeq	r5, r5, r3
 8015d28:	68a3      	ldr	r3, [r4, #8]
 8015d2a:	bf0c      	ite	eq
 8015d2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015d30:	2500      	movne	r5, #0
 8015d32:	4293      	cmp	r3, r2
 8015d34:	bfc4      	itt	gt
 8015d36:	1a9b      	subgt	r3, r3, r2
 8015d38:	18ed      	addgt	r5, r5, r3
 8015d3a:	2600      	movs	r6, #0
 8015d3c:	341a      	adds	r4, #26
 8015d3e:	42b5      	cmp	r5, r6
 8015d40:	d11a      	bne.n	8015d78 <_printf_common+0xc8>
 8015d42:	2000      	movs	r0, #0
 8015d44:	e008      	b.n	8015d58 <_printf_common+0xa8>
 8015d46:	2301      	movs	r3, #1
 8015d48:	4652      	mov	r2, sl
 8015d4a:	4641      	mov	r1, r8
 8015d4c:	4638      	mov	r0, r7
 8015d4e:	47c8      	blx	r9
 8015d50:	3001      	adds	r0, #1
 8015d52:	d103      	bne.n	8015d5c <_printf_common+0xac>
 8015d54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d5c:	3501      	adds	r5, #1
 8015d5e:	e7c6      	b.n	8015cee <_printf_common+0x3e>
 8015d60:	18e1      	adds	r1, r4, r3
 8015d62:	1c5a      	adds	r2, r3, #1
 8015d64:	2030      	movs	r0, #48	@ 0x30
 8015d66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015d6a:	4422      	add	r2, r4
 8015d6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015d70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015d74:	3302      	adds	r3, #2
 8015d76:	e7c7      	b.n	8015d08 <_printf_common+0x58>
 8015d78:	2301      	movs	r3, #1
 8015d7a:	4622      	mov	r2, r4
 8015d7c:	4641      	mov	r1, r8
 8015d7e:	4638      	mov	r0, r7
 8015d80:	47c8      	blx	r9
 8015d82:	3001      	adds	r0, #1
 8015d84:	d0e6      	beq.n	8015d54 <_printf_common+0xa4>
 8015d86:	3601      	adds	r6, #1
 8015d88:	e7d9      	b.n	8015d3e <_printf_common+0x8e>
	...

08015d8c <_printf_i>:
 8015d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015d90:	7e0f      	ldrb	r7, [r1, #24]
 8015d92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015d94:	2f78      	cmp	r7, #120	@ 0x78
 8015d96:	4691      	mov	r9, r2
 8015d98:	4680      	mov	r8, r0
 8015d9a:	460c      	mov	r4, r1
 8015d9c:	469a      	mov	sl, r3
 8015d9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015da2:	d807      	bhi.n	8015db4 <_printf_i+0x28>
 8015da4:	2f62      	cmp	r7, #98	@ 0x62
 8015da6:	d80a      	bhi.n	8015dbe <_printf_i+0x32>
 8015da8:	2f00      	cmp	r7, #0
 8015daa:	f000 80d2 	beq.w	8015f52 <_printf_i+0x1c6>
 8015dae:	2f58      	cmp	r7, #88	@ 0x58
 8015db0:	f000 80b9 	beq.w	8015f26 <_printf_i+0x19a>
 8015db4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015db8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015dbc:	e03a      	b.n	8015e34 <_printf_i+0xa8>
 8015dbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015dc2:	2b15      	cmp	r3, #21
 8015dc4:	d8f6      	bhi.n	8015db4 <_printf_i+0x28>
 8015dc6:	a101      	add	r1, pc, #4	@ (adr r1, 8015dcc <_printf_i+0x40>)
 8015dc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015dcc:	08015e25 	.word	0x08015e25
 8015dd0:	08015e39 	.word	0x08015e39
 8015dd4:	08015db5 	.word	0x08015db5
 8015dd8:	08015db5 	.word	0x08015db5
 8015ddc:	08015db5 	.word	0x08015db5
 8015de0:	08015db5 	.word	0x08015db5
 8015de4:	08015e39 	.word	0x08015e39
 8015de8:	08015db5 	.word	0x08015db5
 8015dec:	08015db5 	.word	0x08015db5
 8015df0:	08015db5 	.word	0x08015db5
 8015df4:	08015db5 	.word	0x08015db5
 8015df8:	08015f39 	.word	0x08015f39
 8015dfc:	08015e63 	.word	0x08015e63
 8015e00:	08015ef3 	.word	0x08015ef3
 8015e04:	08015db5 	.word	0x08015db5
 8015e08:	08015db5 	.word	0x08015db5
 8015e0c:	08015f5b 	.word	0x08015f5b
 8015e10:	08015db5 	.word	0x08015db5
 8015e14:	08015e63 	.word	0x08015e63
 8015e18:	08015db5 	.word	0x08015db5
 8015e1c:	08015db5 	.word	0x08015db5
 8015e20:	08015efb 	.word	0x08015efb
 8015e24:	6833      	ldr	r3, [r6, #0]
 8015e26:	1d1a      	adds	r2, r3, #4
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	6032      	str	r2, [r6, #0]
 8015e2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015e30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015e34:	2301      	movs	r3, #1
 8015e36:	e09d      	b.n	8015f74 <_printf_i+0x1e8>
 8015e38:	6833      	ldr	r3, [r6, #0]
 8015e3a:	6820      	ldr	r0, [r4, #0]
 8015e3c:	1d19      	adds	r1, r3, #4
 8015e3e:	6031      	str	r1, [r6, #0]
 8015e40:	0606      	lsls	r6, r0, #24
 8015e42:	d501      	bpl.n	8015e48 <_printf_i+0xbc>
 8015e44:	681d      	ldr	r5, [r3, #0]
 8015e46:	e003      	b.n	8015e50 <_printf_i+0xc4>
 8015e48:	0645      	lsls	r5, r0, #25
 8015e4a:	d5fb      	bpl.n	8015e44 <_printf_i+0xb8>
 8015e4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015e50:	2d00      	cmp	r5, #0
 8015e52:	da03      	bge.n	8015e5c <_printf_i+0xd0>
 8015e54:	232d      	movs	r3, #45	@ 0x2d
 8015e56:	426d      	negs	r5, r5
 8015e58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015e5c:	4859      	ldr	r0, [pc, #356]	@ (8015fc4 <_printf_i+0x238>)
 8015e5e:	230a      	movs	r3, #10
 8015e60:	e011      	b.n	8015e86 <_printf_i+0xfa>
 8015e62:	6821      	ldr	r1, [r4, #0]
 8015e64:	6833      	ldr	r3, [r6, #0]
 8015e66:	0608      	lsls	r0, r1, #24
 8015e68:	f853 5b04 	ldr.w	r5, [r3], #4
 8015e6c:	d402      	bmi.n	8015e74 <_printf_i+0xe8>
 8015e6e:	0649      	lsls	r1, r1, #25
 8015e70:	bf48      	it	mi
 8015e72:	b2ad      	uxthmi	r5, r5
 8015e74:	2f6f      	cmp	r7, #111	@ 0x6f
 8015e76:	4853      	ldr	r0, [pc, #332]	@ (8015fc4 <_printf_i+0x238>)
 8015e78:	6033      	str	r3, [r6, #0]
 8015e7a:	bf14      	ite	ne
 8015e7c:	230a      	movne	r3, #10
 8015e7e:	2308      	moveq	r3, #8
 8015e80:	2100      	movs	r1, #0
 8015e82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015e86:	6866      	ldr	r6, [r4, #4]
 8015e88:	60a6      	str	r6, [r4, #8]
 8015e8a:	2e00      	cmp	r6, #0
 8015e8c:	bfa2      	ittt	ge
 8015e8e:	6821      	ldrge	r1, [r4, #0]
 8015e90:	f021 0104 	bicge.w	r1, r1, #4
 8015e94:	6021      	strge	r1, [r4, #0]
 8015e96:	b90d      	cbnz	r5, 8015e9c <_printf_i+0x110>
 8015e98:	2e00      	cmp	r6, #0
 8015e9a:	d04b      	beq.n	8015f34 <_printf_i+0x1a8>
 8015e9c:	4616      	mov	r6, r2
 8015e9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8015ea2:	fb03 5711 	mls	r7, r3, r1, r5
 8015ea6:	5dc7      	ldrb	r7, [r0, r7]
 8015ea8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015eac:	462f      	mov	r7, r5
 8015eae:	42bb      	cmp	r3, r7
 8015eb0:	460d      	mov	r5, r1
 8015eb2:	d9f4      	bls.n	8015e9e <_printf_i+0x112>
 8015eb4:	2b08      	cmp	r3, #8
 8015eb6:	d10b      	bne.n	8015ed0 <_printf_i+0x144>
 8015eb8:	6823      	ldr	r3, [r4, #0]
 8015eba:	07df      	lsls	r7, r3, #31
 8015ebc:	d508      	bpl.n	8015ed0 <_printf_i+0x144>
 8015ebe:	6923      	ldr	r3, [r4, #16]
 8015ec0:	6861      	ldr	r1, [r4, #4]
 8015ec2:	4299      	cmp	r1, r3
 8015ec4:	bfde      	ittt	le
 8015ec6:	2330      	movle	r3, #48	@ 0x30
 8015ec8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015ecc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8015ed0:	1b92      	subs	r2, r2, r6
 8015ed2:	6122      	str	r2, [r4, #16]
 8015ed4:	f8cd a000 	str.w	sl, [sp]
 8015ed8:	464b      	mov	r3, r9
 8015eda:	aa03      	add	r2, sp, #12
 8015edc:	4621      	mov	r1, r4
 8015ede:	4640      	mov	r0, r8
 8015ee0:	f7ff fee6 	bl	8015cb0 <_printf_common>
 8015ee4:	3001      	adds	r0, #1
 8015ee6:	d14a      	bne.n	8015f7e <_printf_i+0x1f2>
 8015ee8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015eec:	b004      	add	sp, #16
 8015eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ef2:	6823      	ldr	r3, [r4, #0]
 8015ef4:	f043 0320 	orr.w	r3, r3, #32
 8015ef8:	6023      	str	r3, [r4, #0]
 8015efa:	4833      	ldr	r0, [pc, #204]	@ (8015fc8 <_printf_i+0x23c>)
 8015efc:	2778      	movs	r7, #120	@ 0x78
 8015efe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015f02:	6823      	ldr	r3, [r4, #0]
 8015f04:	6831      	ldr	r1, [r6, #0]
 8015f06:	061f      	lsls	r7, r3, #24
 8015f08:	f851 5b04 	ldr.w	r5, [r1], #4
 8015f0c:	d402      	bmi.n	8015f14 <_printf_i+0x188>
 8015f0e:	065f      	lsls	r7, r3, #25
 8015f10:	bf48      	it	mi
 8015f12:	b2ad      	uxthmi	r5, r5
 8015f14:	6031      	str	r1, [r6, #0]
 8015f16:	07d9      	lsls	r1, r3, #31
 8015f18:	bf44      	itt	mi
 8015f1a:	f043 0320 	orrmi.w	r3, r3, #32
 8015f1e:	6023      	strmi	r3, [r4, #0]
 8015f20:	b11d      	cbz	r5, 8015f2a <_printf_i+0x19e>
 8015f22:	2310      	movs	r3, #16
 8015f24:	e7ac      	b.n	8015e80 <_printf_i+0xf4>
 8015f26:	4827      	ldr	r0, [pc, #156]	@ (8015fc4 <_printf_i+0x238>)
 8015f28:	e7e9      	b.n	8015efe <_printf_i+0x172>
 8015f2a:	6823      	ldr	r3, [r4, #0]
 8015f2c:	f023 0320 	bic.w	r3, r3, #32
 8015f30:	6023      	str	r3, [r4, #0]
 8015f32:	e7f6      	b.n	8015f22 <_printf_i+0x196>
 8015f34:	4616      	mov	r6, r2
 8015f36:	e7bd      	b.n	8015eb4 <_printf_i+0x128>
 8015f38:	6833      	ldr	r3, [r6, #0]
 8015f3a:	6825      	ldr	r5, [r4, #0]
 8015f3c:	6961      	ldr	r1, [r4, #20]
 8015f3e:	1d18      	adds	r0, r3, #4
 8015f40:	6030      	str	r0, [r6, #0]
 8015f42:	062e      	lsls	r6, r5, #24
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	d501      	bpl.n	8015f4c <_printf_i+0x1c0>
 8015f48:	6019      	str	r1, [r3, #0]
 8015f4a:	e002      	b.n	8015f52 <_printf_i+0x1c6>
 8015f4c:	0668      	lsls	r0, r5, #25
 8015f4e:	d5fb      	bpl.n	8015f48 <_printf_i+0x1bc>
 8015f50:	8019      	strh	r1, [r3, #0]
 8015f52:	2300      	movs	r3, #0
 8015f54:	6123      	str	r3, [r4, #16]
 8015f56:	4616      	mov	r6, r2
 8015f58:	e7bc      	b.n	8015ed4 <_printf_i+0x148>
 8015f5a:	6833      	ldr	r3, [r6, #0]
 8015f5c:	1d1a      	adds	r2, r3, #4
 8015f5e:	6032      	str	r2, [r6, #0]
 8015f60:	681e      	ldr	r6, [r3, #0]
 8015f62:	6862      	ldr	r2, [r4, #4]
 8015f64:	2100      	movs	r1, #0
 8015f66:	4630      	mov	r0, r6
 8015f68:	f7ea f952 	bl	8000210 <memchr>
 8015f6c:	b108      	cbz	r0, 8015f72 <_printf_i+0x1e6>
 8015f6e:	1b80      	subs	r0, r0, r6
 8015f70:	6060      	str	r0, [r4, #4]
 8015f72:	6863      	ldr	r3, [r4, #4]
 8015f74:	6123      	str	r3, [r4, #16]
 8015f76:	2300      	movs	r3, #0
 8015f78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015f7c:	e7aa      	b.n	8015ed4 <_printf_i+0x148>
 8015f7e:	6923      	ldr	r3, [r4, #16]
 8015f80:	4632      	mov	r2, r6
 8015f82:	4649      	mov	r1, r9
 8015f84:	4640      	mov	r0, r8
 8015f86:	47d0      	blx	sl
 8015f88:	3001      	adds	r0, #1
 8015f8a:	d0ad      	beq.n	8015ee8 <_printf_i+0x15c>
 8015f8c:	6823      	ldr	r3, [r4, #0]
 8015f8e:	079b      	lsls	r3, r3, #30
 8015f90:	d413      	bmi.n	8015fba <_printf_i+0x22e>
 8015f92:	68e0      	ldr	r0, [r4, #12]
 8015f94:	9b03      	ldr	r3, [sp, #12]
 8015f96:	4298      	cmp	r0, r3
 8015f98:	bfb8      	it	lt
 8015f9a:	4618      	movlt	r0, r3
 8015f9c:	e7a6      	b.n	8015eec <_printf_i+0x160>
 8015f9e:	2301      	movs	r3, #1
 8015fa0:	4632      	mov	r2, r6
 8015fa2:	4649      	mov	r1, r9
 8015fa4:	4640      	mov	r0, r8
 8015fa6:	47d0      	blx	sl
 8015fa8:	3001      	adds	r0, #1
 8015faa:	d09d      	beq.n	8015ee8 <_printf_i+0x15c>
 8015fac:	3501      	adds	r5, #1
 8015fae:	68e3      	ldr	r3, [r4, #12]
 8015fb0:	9903      	ldr	r1, [sp, #12]
 8015fb2:	1a5b      	subs	r3, r3, r1
 8015fb4:	42ab      	cmp	r3, r5
 8015fb6:	dcf2      	bgt.n	8015f9e <_printf_i+0x212>
 8015fb8:	e7eb      	b.n	8015f92 <_printf_i+0x206>
 8015fba:	2500      	movs	r5, #0
 8015fbc:	f104 0619 	add.w	r6, r4, #25
 8015fc0:	e7f5      	b.n	8015fae <_printf_i+0x222>
 8015fc2:	bf00      	nop
 8015fc4:	08024e1c 	.word	0x08024e1c
 8015fc8:	08024e2d 	.word	0x08024e2d

08015fcc <__sflush_r>:
 8015fcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fd4:	0716      	lsls	r6, r2, #28
 8015fd6:	4605      	mov	r5, r0
 8015fd8:	460c      	mov	r4, r1
 8015fda:	d454      	bmi.n	8016086 <__sflush_r+0xba>
 8015fdc:	684b      	ldr	r3, [r1, #4]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	dc02      	bgt.n	8015fe8 <__sflush_r+0x1c>
 8015fe2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	dd48      	ble.n	801607a <__sflush_r+0xae>
 8015fe8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015fea:	2e00      	cmp	r6, #0
 8015fec:	d045      	beq.n	801607a <__sflush_r+0xae>
 8015fee:	2300      	movs	r3, #0
 8015ff0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015ff4:	682f      	ldr	r7, [r5, #0]
 8015ff6:	6a21      	ldr	r1, [r4, #32]
 8015ff8:	602b      	str	r3, [r5, #0]
 8015ffa:	d030      	beq.n	801605e <__sflush_r+0x92>
 8015ffc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015ffe:	89a3      	ldrh	r3, [r4, #12]
 8016000:	0759      	lsls	r1, r3, #29
 8016002:	d505      	bpl.n	8016010 <__sflush_r+0x44>
 8016004:	6863      	ldr	r3, [r4, #4]
 8016006:	1ad2      	subs	r2, r2, r3
 8016008:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801600a:	b10b      	cbz	r3, 8016010 <__sflush_r+0x44>
 801600c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801600e:	1ad2      	subs	r2, r2, r3
 8016010:	2300      	movs	r3, #0
 8016012:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016014:	6a21      	ldr	r1, [r4, #32]
 8016016:	4628      	mov	r0, r5
 8016018:	47b0      	blx	r6
 801601a:	1c43      	adds	r3, r0, #1
 801601c:	89a3      	ldrh	r3, [r4, #12]
 801601e:	d106      	bne.n	801602e <__sflush_r+0x62>
 8016020:	6829      	ldr	r1, [r5, #0]
 8016022:	291d      	cmp	r1, #29
 8016024:	d82b      	bhi.n	801607e <__sflush_r+0xb2>
 8016026:	4a2a      	ldr	r2, [pc, #168]	@ (80160d0 <__sflush_r+0x104>)
 8016028:	410a      	asrs	r2, r1
 801602a:	07d6      	lsls	r6, r2, #31
 801602c:	d427      	bmi.n	801607e <__sflush_r+0xb2>
 801602e:	2200      	movs	r2, #0
 8016030:	6062      	str	r2, [r4, #4]
 8016032:	04d9      	lsls	r1, r3, #19
 8016034:	6922      	ldr	r2, [r4, #16]
 8016036:	6022      	str	r2, [r4, #0]
 8016038:	d504      	bpl.n	8016044 <__sflush_r+0x78>
 801603a:	1c42      	adds	r2, r0, #1
 801603c:	d101      	bne.n	8016042 <__sflush_r+0x76>
 801603e:	682b      	ldr	r3, [r5, #0]
 8016040:	b903      	cbnz	r3, 8016044 <__sflush_r+0x78>
 8016042:	6560      	str	r0, [r4, #84]	@ 0x54
 8016044:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016046:	602f      	str	r7, [r5, #0]
 8016048:	b1b9      	cbz	r1, 801607a <__sflush_r+0xae>
 801604a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801604e:	4299      	cmp	r1, r3
 8016050:	d002      	beq.n	8016058 <__sflush_r+0x8c>
 8016052:	4628      	mov	r0, r5
 8016054:	f7ff fbd4 	bl	8015800 <_free_r>
 8016058:	2300      	movs	r3, #0
 801605a:	6363      	str	r3, [r4, #52]	@ 0x34
 801605c:	e00d      	b.n	801607a <__sflush_r+0xae>
 801605e:	2301      	movs	r3, #1
 8016060:	4628      	mov	r0, r5
 8016062:	47b0      	blx	r6
 8016064:	4602      	mov	r2, r0
 8016066:	1c50      	adds	r0, r2, #1
 8016068:	d1c9      	bne.n	8015ffe <__sflush_r+0x32>
 801606a:	682b      	ldr	r3, [r5, #0]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d0c6      	beq.n	8015ffe <__sflush_r+0x32>
 8016070:	2b1d      	cmp	r3, #29
 8016072:	d001      	beq.n	8016078 <__sflush_r+0xac>
 8016074:	2b16      	cmp	r3, #22
 8016076:	d11e      	bne.n	80160b6 <__sflush_r+0xea>
 8016078:	602f      	str	r7, [r5, #0]
 801607a:	2000      	movs	r0, #0
 801607c:	e022      	b.n	80160c4 <__sflush_r+0xf8>
 801607e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016082:	b21b      	sxth	r3, r3
 8016084:	e01b      	b.n	80160be <__sflush_r+0xf2>
 8016086:	690f      	ldr	r7, [r1, #16]
 8016088:	2f00      	cmp	r7, #0
 801608a:	d0f6      	beq.n	801607a <__sflush_r+0xae>
 801608c:	0793      	lsls	r3, r2, #30
 801608e:	680e      	ldr	r6, [r1, #0]
 8016090:	bf08      	it	eq
 8016092:	694b      	ldreq	r3, [r1, #20]
 8016094:	600f      	str	r7, [r1, #0]
 8016096:	bf18      	it	ne
 8016098:	2300      	movne	r3, #0
 801609a:	eba6 0807 	sub.w	r8, r6, r7
 801609e:	608b      	str	r3, [r1, #8]
 80160a0:	f1b8 0f00 	cmp.w	r8, #0
 80160a4:	dde9      	ble.n	801607a <__sflush_r+0xae>
 80160a6:	6a21      	ldr	r1, [r4, #32]
 80160a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80160aa:	4643      	mov	r3, r8
 80160ac:	463a      	mov	r2, r7
 80160ae:	4628      	mov	r0, r5
 80160b0:	47b0      	blx	r6
 80160b2:	2800      	cmp	r0, #0
 80160b4:	dc08      	bgt.n	80160c8 <__sflush_r+0xfc>
 80160b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80160ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80160be:	81a3      	strh	r3, [r4, #12]
 80160c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80160c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160c8:	4407      	add	r7, r0
 80160ca:	eba8 0800 	sub.w	r8, r8, r0
 80160ce:	e7e7      	b.n	80160a0 <__sflush_r+0xd4>
 80160d0:	dfbffffe 	.word	0xdfbffffe

080160d4 <_fflush_r>:
 80160d4:	b538      	push	{r3, r4, r5, lr}
 80160d6:	690b      	ldr	r3, [r1, #16]
 80160d8:	4605      	mov	r5, r0
 80160da:	460c      	mov	r4, r1
 80160dc:	b913      	cbnz	r3, 80160e4 <_fflush_r+0x10>
 80160de:	2500      	movs	r5, #0
 80160e0:	4628      	mov	r0, r5
 80160e2:	bd38      	pop	{r3, r4, r5, pc}
 80160e4:	b118      	cbz	r0, 80160ee <_fflush_r+0x1a>
 80160e6:	6a03      	ldr	r3, [r0, #32]
 80160e8:	b90b      	cbnz	r3, 80160ee <_fflush_r+0x1a>
 80160ea:	f7ff f9f1 	bl	80154d0 <__sinit>
 80160ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d0f3      	beq.n	80160de <_fflush_r+0xa>
 80160f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80160f8:	07d0      	lsls	r0, r2, #31
 80160fa:	d404      	bmi.n	8016106 <_fflush_r+0x32>
 80160fc:	0599      	lsls	r1, r3, #22
 80160fe:	d402      	bmi.n	8016106 <_fflush_r+0x32>
 8016100:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016102:	f7ff fb4e 	bl	80157a2 <__retarget_lock_acquire_recursive>
 8016106:	4628      	mov	r0, r5
 8016108:	4621      	mov	r1, r4
 801610a:	f7ff ff5f 	bl	8015fcc <__sflush_r>
 801610e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016110:	07da      	lsls	r2, r3, #31
 8016112:	4605      	mov	r5, r0
 8016114:	d4e4      	bmi.n	80160e0 <_fflush_r+0xc>
 8016116:	89a3      	ldrh	r3, [r4, #12]
 8016118:	059b      	lsls	r3, r3, #22
 801611a:	d4e1      	bmi.n	80160e0 <_fflush_r+0xc>
 801611c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801611e:	f7ff fb41 	bl	80157a4 <__retarget_lock_release_recursive>
 8016122:	e7dd      	b.n	80160e0 <_fflush_r+0xc>

08016124 <fiprintf>:
 8016124:	b40e      	push	{r1, r2, r3}
 8016126:	b503      	push	{r0, r1, lr}
 8016128:	4601      	mov	r1, r0
 801612a:	ab03      	add	r3, sp, #12
 801612c:	4805      	ldr	r0, [pc, #20]	@ (8016144 <fiprintf+0x20>)
 801612e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016132:	6800      	ldr	r0, [r0, #0]
 8016134:	9301      	str	r3, [sp, #4]
 8016136:	f000 f88f 	bl	8016258 <_vfiprintf_r>
 801613a:	b002      	add	sp, #8
 801613c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016140:	b003      	add	sp, #12
 8016142:	4770      	bx	lr
 8016144:	200000a4 	.word	0x200000a4

08016148 <memmove>:
 8016148:	4288      	cmp	r0, r1
 801614a:	b510      	push	{r4, lr}
 801614c:	eb01 0402 	add.w	r4, r1, r2
 8016150:	d902      	bls.n	8016158 <memmove+0x10>
 8016152:	4284      	cmp	r4, r0
 8016154:	4623      	mov	r3, r4
 8016156:	d807      	bhi.n	8016168 <memmove+0x20>
 8016158:	1e43      	subs	r3, r0, #1
 801615a:	42a1      	cmp	r1, r4
 801615c:	d008      	beq.n	8016170 <memmove+0x28>
 801615e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016162:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016166:	e7f8      	b.n	801615a <memmove+0x12>
 8016168:	4402      	add	r2, r0
 801616a:	4601      	mov	r1, r0
 801616c:	428a      	cmp	r2, r1
 801616e:	d100      	bne.n	8016172 <memmove+0x2a>
 8016170:	bd10      	pop	{r4, pc}
 8016172:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016176:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801617a:	e7f7      	b.n	801616c <memmove+0x24>

0801617c <_sbrk_r>:
 801617c:	b538      	push	{r3, r4, r5, lr}
 801617e:	4d06      	ldr	r5, [pc, #24]	@ (8016198 <_sbrk_r+0x1c>)
 8016180:	2300      	movs	r3, #0
 8016182:	4604      	mov	r4, r0
 8016184:	4608      	mov	r0, r1
 8016186:	602b      	str	r3, [r5, #0]
 8016188:	f7f0 f81e 	bl	80061c8 <_sbrk>
 801618c:	1c43      	adds	r3, r0, #1
 801618e:	d102      	bne.n	8016196 <_sbrk_r+0x1a>
 8016190:	682b      	ldr	r3, [r5, #0]
 8016192:	b103      	cbz	r3, 8016196 <_sbrk_r+0x1a>
 8016194:	6023      	str	r3, [r4, #0]
 8016196:	bd38      	pop	{r3, r4, r5, pc}
 8016198:	2000536c 	.word	0x2000536c

0801619c <abort>:
 801619c:	b508      	push	{r3, lr}
 801619e:	2006      	movs	r0, #6
 80161a0:	f000 fa2e 	bl	8016600 <raise>
 80161a4:	2001      	movs	r0, #1
 80161a6:	f7ef ff97 	bl	80060d8 <_exit>

080161aa <_realloc_r>:
 80161aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161ae:	4680      	mov	r8, r0
 80161b0:	4615      	mov	r5, r2
 80161b2:	460c      	mov	r4, r1
 80161b4:	b921      	cbnz	r1, 80161c0 <_realloc_r+0x16>
 80161b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80161ba:	4611      	mov	r1, r2
 80161bc:	f7ff bb94 	b.w	80158e8 <_malloc_r>
 80161c0:	b92a      	cbnz	r2, 80161ce <_realloc_r+0x24>
 80161c2:	f7ff fb1d 	bl	8015800 <_free_r>
 80161c6:	2400      	movs	r4, #0
 80161c8:	4620      	mov	r0, r4
 80161ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161ce:	f000 fa33 	bl	8016638 <_malloc_usable_size_r>
 80161d2:	4285      	cmp	r5, r0
 80161d4:	4606      	mov	r6, r0
 80161d6:	d802      	bhi.n	80161de <_realloc_r+0x34>
 80161d8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80161dc:	d8f4      	bhi.n	80161c8 <_realloc_r+0x1e>
 80161de:	4629      	mov	r1, r5
 80161e0:	4640      	mov	r0, r8
 80161e2:	f7ff fb81 	bl	80158e8 <_malloc_r>
 80161e6:	4607      	mov	r7, r0
 80161e8:	2800      	cmp	r0, #0
 80161ea:	d0ec      	beq.n	80161c6 <_realloc_r+0x1c>
 80161ec:	42b5      	cmp	r5, r6
 80161ee:	462a      	mov	r2, r5
 80161f0:	4621      	mov	r1, r4
 80161f2:	bf28      	it	cs
 80161f4:	4632      	movcs	r2, r6
 80161f6:	f7ff fad6 	bl	80157a6 <memcpy>
 80161fa:	4621      	mov	r1, r4
 80161fc:	4640      	mov	r0, r8
 80161fe:	f7ff faff 	bl	8015800 <_free_r>
 8016202:	463c      	mov	r4, r7
 8016204:	e7e0      	b.n	80161c8 <_realloc_r+0x1e>

08016206 <__sfputc_r>:
 8016206:	6893      	ldr	r3, [r2, #8]
 8016208:	3b01      	subs	r3, #1
 801620a:	2b00      	cmp	r3, #0
 801620c:	b410      	push	{r4}
 801620e:	6093      	str	r3, [r2, #8]
 8016210:	da08      	bge.n	8016224 <__sfputc_r+0x1e>
 8016212:	6994      	ldr	r4, [r2, #24]
 8016214:	42a3      	cmp	r3, r4
 8016216:	db01      	blt.n	801621c <__sfputc_r+0x16>
 8016218:	290a      	cmp	r1, #10
 801621a:	d103      	bne.n	8016224 <__sfputc_r+0x1e>
 801621c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016220:	f000 b932 	b.w	8016488 <__swbuf_r>
 8016224:	6813      	ldr	r3, [r2, #0]
 8016226:	1c58      	adds	r0, r3, #1
 8016228:	6010      	str	r0, [r2, #0]
 801622a:	7019      	strb	r1, [r3, #0]
 801622c:	4608      	mov	r0, r1
 801622e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016232:	4770      	bx	lr

08016234 <__sfputs_r>:
 8016234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016236:	4606      	mov	r6, r0
 8016238:	460f      	mov	r7, r1
 801623a:	4614      	mov	r4, r2
 801623c:	18d5      	adds	r5, r2, r3
 801623e:	42ac      	cmp	r4, r5
 8016240:	d101      	bne.n	8016246 <__sfputs_r+0x12>
 8016242:	2000      	movs	r0, #0
 8016244:	e007      	b.n	8016256 <__sfputs_r+0x22>
 8016246:	f814 1b01 	ldrb.w	r1, [r4], #1
 801624a:	463a      	mov	r2, r7
 801624c:	4630      	mov	r0, r6
 801624e:	f7ff ffda 	bl	8016206 <__sfputc_r>
 8016252:	1c43      	adds	r3, r0, #1
 8016254:	d1f3      	bne.n	801623e <__sfputs_r+0xa>
 8016256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016258 <_vfiprintf_r>:
 8016258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801625c:	460d      	mov	r5, r1
 801625e:	b09d      	sub	sp, #116	@ 0x74
 8016260:	4614      	mov	r4, r2
 8016262:	4698      	mov	r8, r3
 8016264:	4606      	mov	r6, r0
 8016266:	b118      	cbz	r0, 8016270 <_vfiprintf_r+0x18>
 8016268:	6a03      	ldr	r3, [r0, #32]
 801626a:	b90b      	cbnz	r3, 8016270 <_vfiprintf_r+0x18>
 801626c:	f7ff f930 	bl	80154d0 <__sinit>
 8016270:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016272:	07d9      	lsls	r1, r3, #31
 8016274:	d405      	bmi.n	8016282 <_vfiprintf_r+0x2a>
 8016276:	89ab      	ldrh	r3, [r5, #12]
 8016278:	059a      	lsls	r2, r3, #22
 801627a:	d402      	bmi.n	8016282 <_vfiprintf_r+0x2a>
 801627c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801627e:	f7ff fa90 	bl	80157a2 <__retarget_lock_acquire_recursive>
 8016282:	89ab      	ldrh	r3, [r5, #12]
 8016284:	071b      	lsls	r3, r3, #28
 8016286:	d501      	bpl.n	801628c <_vfiprintf_r+0x34>
 8016288:	692b      	ldr	r3, [r5, #16]
 801628a:	b99b      	cbnz	r3, 80162b4 <_vfiprintf_r+0x5c>
 801628c:	4629      	mov	r1, r5
 801628e:	4630      	mov	r0, r6
 8016290:	f000 f938 	bl	8016504 <__swsetup_r>
 8016294:	b170      	cbz	r0, 80162b4 <_vfiprintf_r+0x5c>
 8016296:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016298:	07dc      	lsls	r4, r3, #31
 801629a:	d504      	bpl.n	80162a6 <_vfiprintf_r+0x4e>
 801629c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80162a0:	b01d      	add	sp, #116	@ 0x74
 80162a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162a6:	89ab      	ldrh	r3, [r5, #12]
 80162a8:	0598      	lsls	r0, r3, #22
 80162aa:	d4f7      	bmi.n	801629c <_vfiprintf_r+0x44>
 80162ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80162ae:	f7ff fa79 	bl	80157a4 <__retarget_lock_release_recursive>
 80162b2:	e7f3      	b.n	801629c <_vfiprintf_r+0x44>
 80162b4:	2300      	movs	r3, #0
 80162b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80162b8:	2320      	movs	r3, #32
 80162ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80162be:	f8cd 800c 	str.w	r8, [sp, #12]
 80162c2:	2330      	movs	r3, #48	@ 0x30
 80162c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016474 <_vfiprintf_r+0x21c>
 80162c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80162cc:	f04f 0901 	mov.w	r9, #1
 80162d0:	4623      	mov	r3, r4
 80162d2:	469a      	mov	sl, r3
 80162d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80162d8:	b10a      	cbz	r2, 80162de <_vfiprintf_r+0x86>
 80162da:	2a25      	cmp	r2, #37	@ 0x25
 80162dc:	d1f9      	bne.n	80162d2 <_vfiprintf_r+0x7a>
 80162de:	ebba 0b04 	subs.w	fp, sl, r4
 80162e2:	d00b      	beq.n	80162fc <_vfiprintf_r+0xa4>
 80162e4:	465b      	mov	r3, fp
 80162e6:	4622      	mov	r2, r4
 80162e8:	4629      	mov	r1, r5
 80162ea:	4630      	mov	r0, r6
 80162ec:	f7ff ffa2 	bl	8016234 <__sfputs_r>
 80162f0:	3001      	adds	r0, #1
 80162f2:	f000 80a7 	beq.w	8016444 <_vfiprintf_r+0x1ec>
 80162f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80162f8:	445a      	add	r2, fp
 80162fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80162fc:	f89a 3000 	ldrb.w	r3, [sl]
 8016300:	2b00      	cmp	r3, #0
 8016302:	f000 809f 	beq.w	8016444 <_vfiprintf_r+0x1ec>
 8016306:	2300      	movs	r3, #0
 8016308:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801630c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016310:	f10a 0a01 	add.w	sl, sl, #1
 8016314:	9304      	str	r3, [sp, #16]
 8016316:	9307      	str	r3, [sp, #28]
 8016318:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801631c:	931a      	str	r3, [sp, #104]	@ 0x68
 801631e:	4654      	mov	r4, sl
 8016320:	2205      	movs	r2, #5
 8016322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016326:	4853      	ldr	r0, [pc, #332]	@ (8016474 <_vfiprintf_r+0x21c>)
 8016328:	f7e9 ff72 	bl	8000210 <memchr>
 801632c:	9a04      	ldr	r2, [sp, #16]
 801632e:	b9d8      	cbnz	r0, 8016368 <_vfiprintf_r+0x110>
 8016330:	06d1      	lsls	r1, r2, #27
 8016332:	bf44      	itt	mi
 8016334:	2320      	movmi	r3, #32
 8016336:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801633a:	0713      	lsls	r3, r2, #28
 801633c:	bf44      	itt	mi
 801633e:	232b      	movmi	r3, #43	@ 0x2b
 8016340:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016344:	f89a 3000 	ldrb.w	r3, [sl]
 8016348:	2b2a      	cmp	r3, #42	@ 0x2a
 801634a:	d015      	beq.n	8016378 <_vfiprintf_r+0x120>
 801634c:	9a07      	ldr	r2, [sp, #28]
 801634e:	4654      	mov	r4, sl
 8016350:	2000      	movs	r0, #0
 8016352:	f04f 0c0a 	mov.w	ip, #10
 8016356:	4621      	mov	r1, r4
 8016358:	f811 3b01 	ldrb.w	r3, [r1], #1
 801635c:	3b30      	subs	r3, #48	@ 0x30
 801635e:	2b09      	cmp	r3, #9
 8016360:	d94b      	bls.n	80163fa <_vfiprintf_r+0x1a2>
 8016362:	b1b0      	cbz	r0, 8016392 <_vfiprintf_r+0x13a>
 8016364:	9207      	str	r2, [sp, #28]
 8016366:	e014      	b.n	8016392 <_vfiprintf_r+0x13a>
 8016368:	eba0 0308 	sub.w	r3, r0, r8
 801636c:	fa09 f303 	lsl.w	r3, r9, r3
 8016370:	4313      	orrs	r3, r2
 8016372:	9304      	str	r3, [sp, #16]
 8016374:	46a2      	mov	sl, r4
 8016376:	e7d2      	b.n	801631e <_vfiprintf_r+0xc6>
 8016378:	9b03      	ldr	r3, [sp, #12]
 801637a:	1d19      	adds	r1, r3, #4
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	9103      	str	r1, [sp, #12]
 8016380:	2b00      	cmp	r3, #0
 8016382:	bfbb      	ittet	lt
 8016384:	425b      	neglt	r3, r3
 8016386:	f042 0202 	orrlt.w	r2, r2, #2
 801638a:	9307      	strge	r3, [sp, #28]
 801638c:	9307      	strlt	r3, [sp, #28]
 801638e:	bfb8      	it	lt
 8016390:	9204      	strlt	r2, [sp, #16]
 8016392:	7823      	ldrb	r3, [r4, #0]
 8016394:	2b2e      	cmp	r3, #46	@ 0x2e
 8016396:	d10a      	bne.n	80163ae <_vfiprintf_r+0x156>
 8016398:	7863      	ldrb	r3, [r4, #1]
 801639a:	2b2a      	cmp	r3, #42	@ 0x2a
 801639c:	d132      	bne.n	8016404 <_vfiprintf_r+0x1ac>
 801639e:	9b03      	ldr	r3, [sp, #12]
 80163a0:	1d1a      	adds	r2, r3, #4
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	9203      	str	r2, [sp, #12]
 80163a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80163aa:	3402      	adds	r4, #2
 80163ac:	9305      	str	r3, [sp, #20]
 80163ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016484 <_vfiprintf_r+0x22c>
 80163b2:	7821      	ldrb	r1, [r4, #0]
 80163b4:	2203      	movs	r2, #3
 80163b6:	4650      	mov	r0, sl
 80163b8:	f7e9 ff2a 	bl	8000210 <memchr>
 80163bc:	b138      	cbz	r0, 80163ce <_vfiprintf_r+0x176>
 80163be:	9b04      	ldr	r3, [sp, #16]
 80163c0:	eba0 000a 	sub.w	r0, r0, sl
 80163c4:	2240      	movs	r2, #64	@ 0x40
 80163c6:	4082      	lsls	r2, r0
 80163c8:	4313      	orrs	r3, r2
 80163ca:	3401      	adds	r4, #1
 80163cc:	9304      	str	r3, [sp, #16]
 80163ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80163d2:	4829      	ldr	r0, [pc, #164]	@ (8016478 <_vfiprintf_r+0x220>)
 80163d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80163d8:	2206      	movs	r2, #6
 80163da:	f7e9 ff19 	bl	8000210 <memchr>
 80163de:	2800      	cmp	r0, #0
 80163e0:	d03f      	beq.n	8016462 <_vfiprintf_r+0x20a>
 80163e2:	4b26      	ldr	r3, [pc, #152]	@ (801647c <_vfiprintf_r+0x224>)
 80163e4:	bb1b      	cbnz	r3, 801642e <_vfiprintf_r+0x1d6>
 80163e6:	9b03      	ldr	r3, [sp, #12]
 80163e8:	3307      	adds	r3, #7
 80163ea:	f023 0307 	bic.w	r3, r3, #7
 80163ee:	3308      	adds	r3, #8
 80163f0:	9303      	str	r3, [sp, #12]
 80163f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80163f4:	443b      	add	r3, r7
 80163f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80163f8:	e76a      	b.n	80162d0 <_vfiprintf_r+0x78>
 80163fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80163fe:	460c      	mov	r4, r1
 8016400:	2001      	movs	r0, #1
 8016402:	e7a8      	b.n	8016356 <_vfiprintf_r+0xfe>
 8016404:	2300      	movs	r3, #0
 8016406:	3401      	adds	r4, #1
 8016408:	9305      	str	r3, [sp, #20]
 801640a:	4619      	mov	r1, r3
 801640c:	f04f 0c0a 	mov.w	ip, #10
 8016410:	4620      	mov	r0, r4
 8016412:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016416:	3a30      	subs	r2, #48	@ 0x30
 8016418:	2a09      	cmp	r2, #9
 801641a:	d903      	bls.n	8016424 <_vfiprintf_r+0x1cc>
 801641c:	2b00      	cmp	r3, #0
 801641e:	d0c6      	beq.n	80163ae <_vfiprintf_r+0x156>
 8016420:	9105      	str	r1, [sp, #20]
 8016422:	e7c4      	b.n	80163ae <_vfiprintf_r+0x156>
 8016424:	fb0c 2101 	mla	r1, ip, r1, r2
 8016428:	4604      	mov	r4, r0
 801642a:	2301      	movs	r3, #1
 801642c:	e7f0      	b.n	8016410 <_vfiprintf_r+0x1b8>
 801642e:	ab03      	add	r3, sp, #12
 8016430:	9300      	str	r3, [sp, #0]
 8016432:	462a      	mov	r2, r5
 8016434:	4b12      	ldr	r3, [pc, #72]	@ (8016480 <_vfiprintf_r+0x228>)
 8016436:	a904      	add	r1, sp, #16
 8016438:	4630      	mov	r0, r6
 801643a:	f3af 8000 	nop.w
 801643e:	4607      	mov	r7, r0
 8016440:	1c78      	adds	r0, r7, #1
 8016442:	d1d6      	bne.n	80163f2 <_vfiprintf_r+0x19a>
 8016444:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016446:	07d9      	lsls	r1, r3, #31
 8016448:	d405      	bmi.n	8016456 <_vfiprintf_r+0x1fe>
 801644a:	89ab      	ldrh	r3, [r5, #12]
 801644c:	059a      	lsls	r2, r3, #22
 801644e:	d402      	bmi.n	8016456 <_vfiprintf_r+0x1fe>
 8016450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016452:	f7ff f9a7 	bl	80157a4 <__retarget_lock_release_recursive>
 8016456:	89ab      	ldrh	r3, [r5, #12]
 8016458:	065b      	lsls	r3, r3, #25
 801645a:	f53f af1f 	bmi.w	801629c <_vfiprintf_r+0x44>
 801645e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016460:	e71e      	b.n	80162a0 <_vfiprintf_r+0x48>
 8016462:	ab03      	add	r3, sp, #12
 8016464:	9300      	str	r3, [sp, #0]
 8016466:	462a      	mov	r2, r5
 8016468:	4b05      	ldr	r3, [pc, #20]	@ (8016480 <_vfiprintf_r+0x228>)
 801646a:	a904      	add	r1, sp, #16
 801646c:	4630      	mov	r0, r6
 801646e:	f7ff fc8d 	bl	8015d8c <_printf_i>
 8016472:	e7e4      	b.n	801643e <_vfiprintf_r+0x1e6>
 8016474:	08024e0b 	.word	0x08024e0b
 8016478:	08024e15 	.word	0x08024e15
 801647c:	00000000 	.word	0x00000000
 8016480:	08016235 	.word	0x08016235
 8016484:	08024e11 	.word	0x08024e11

08016488 <__swbuf_r>:
 8016488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801648a:	460e      	mov	r6, r1
 801648c:	4614      	mov	r4, r2
 801648e:	4605      	mov	r5, r0
 8016490:	b118      	cbz	r0, 801649a <__swbuf_r+0x12>
 8016492:	6a03      	ldr	r3, [r0, #32]
 8016494:	b90b      	cbnz	r3, 801649a <__swbuf_r+0x12>
 8016496:	f7ff f81b 	bl	80154d0 <__sinit>
 801649a:	69a3      	ldr	r3, [r4, #24]
 801649c:	60a3      	str	r3, [r4, #8]
 801649e:	89a3      	ldrh	r3, [r4, #12]
 80164a0:	071a      	lsls	r2, r3, #28
 80164a2:	d501      	bpl.n	80164a8 <__swbuf_r+0x20>
 80164a4:	6923      	ldr	r3, [r4, #16]
 80164a6:	b943      	cbnz	r3, 80164ba <__swbuf_r+0x32>
 80164a8:	4621      	mov	r1, r4
 80164aa:	4628      	mov	r0, r5
 80164ac:	f000 f82a 	bl	8016504 <__swsetup_r>
 80164b0:	b118      	cbz	r0, 80164ba <__swbuf_r+0x32>
 80164b2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80164b6:	4638      	mov	r0, r7
 80164b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164ba:	6823      	ldr	r3, [r4, #0]
 80164bc:	6922      	ldr	r2, [r4, #16]
 80164be:	1a98      	subs	r0, r3, r2
 80164c0:	6963      	ldr	r3, [r4, #20]
 80164c2:	b2f6      	uxtb	r6, r6
 80164c4:	4283      	cmp	r3, r0
 80164c6:	4637      	mov	r7, r6
 80164c8:	dc05      	bgt.n	80164d6 <__swbuf_r+0x4e>
 80164ca:	4621      	mov	r1, r4
 80164cc:	4628      	mov	r0, r5
 80164ce:	f7ff fe01 	bl	80160d4 <_fflush_r>
 80164d2:	2800      	cmp	r0, #0
 80164d4:	d1ed      	bne.n	80164b2 <__swbuf_r+0x2a>
 80164d6:	68a3      	ldr	r3, [r4, #8]
 80164d8:	3b01      	subs	r3, #1
 80164da:	60a3      	str	r3, [r4, #8]
 80164dc:	6823      	ldr	r3, [r4, #0]
 80164de:	1c5a      	adds	r2, r3, #1
 80164e0:	6022      	str	r2, [r4, #0]
 80164e2:	701e      	strb	r6, [r3, #0]
 80164e4:	6962      	ldr	r2, [r4, #20]
 80164e6:	1c43      	adds	r3, r0, #1
 80164e8:	429a      	cmp	r2, r3
 80164ea:	d004      	beq.n	80164f6 <__swbuf_r+0x6e>
 80164ec:	89a3      	ldrh	r3, [r4, #12]
 80164ee:	07db      	lsls	r3, r3, #31
 80164f0:	d5e1      	bpl.n	80164b6 <__swbuf_r+0x2e>
 80164f2:	2e0a      	cmp	r6, #10
 80164f4:	d1df      	bne.n	80164b6 <__swbuf_r+0x2e>
 80164f6:	4621      	mov	r1, r4
 80164f8:	4628      	mov	r0, r5
 80164fa:	f7ff fdeb 	bl	80160d4 <_fflush_r>
 80164fe:	2800      	cmp	r0, #0
 8016500:	d0d9      	beq.n	80164b6 <__swbuf_r+0x2e>
 8016502:	e7d6      	b.n	80164b2 <__swbuf_r+0x2a>

08016504 <__swsetup_r>:
 8016504:	b538      	push	{r3, r4, r5, lr}
 8016506:	4b29      	ldr	r3, [pc, #164]	@ (80165ac <__swsetup_r+0xa8>)
 8016508:	4605      	mov	r5, r0
 801650a:	6818      	ldr	r0, [r3, #0]
 801650c:	460c      	mov	r4, r1
 801650e:	b118      	cbz	r0, 8016518 <__swsetup_r+0x14>
 8016510:	6a03      	ldr	r3, [r0, #32]
 8016512:	b90b      	cbnz	r3, 8016518 <__swsetup_r+0x14>
 8016514:	f7fe ffdc 	bl	80154d0 <__sinit>
 8016518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801651c:	0719      	lsls	r1, r3, #28
 801651e:	d422      	bmi.n	8016566 <__swsetup_r+0x62>
 8016520:	06da      	lsls	r2, r3, #27
 8016522:	d407      	bmi.n	8016534 <__swsetup_r+0x30>
 8016524:	2209      	movs	r2, #9
 8016526:	602a      	str	r2, [r5, #0]
 8016528:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801652c:	81a3      	strh	r3, [r4, #12]
 801652e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016532:	e033      	b.n	801659c <__swsetup_r+0x98>
 8016534:	0758      	lsls	r0, r3, #29
 8016536:	d512      	bpl.n	801655e <__swsetup_r+0x5a>
 8016538:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801653a:	b141      	cbz	r1, 801654e <__swsetup_r+0x4a>
 801653c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016540:	4299      	cmp	r1, r3
 8016542:	d002      	beq.n	801654a <__swsetup_r+0x46>
 8016544:	4628      	mov	r0, r5
 8016546:	f7ff f95b 	bl	8015800 <_free_r>
 801654a:	2300      	movs	r3, #0
 801654c:	6363      	str	r3, [r4, #52]	@ 0x34
 801654e:	89a3      	ldrh	r3, [r4, #12]
 8016550:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016554:	81a3      	strh	r3, [r4, #12]
 8016556:	2300      	movs	r3, #0
 8016558:	6063      	str	r3, [r4, #4]
 801655a:	6923      	ldr	r3, [r4, #16]
 801655c:	6023      	str	r3, [r4, #0]
 801655e:	89a3      	ldrh	r3, [r4, #12]
 8016560:	f043 0308 	orr.w	r3, r3, #8
 8016564:	81a3      	strh	r3, [r4, #12]
 8016566:	6923      	ldr	r3, [r4, #16]
 8016568:	b94b      	cbnz	r3, 801657e <__swsetup_r+0x7a>
 801656a:	89a3      	ldrh	r3, [r4, #12]
 801656c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016574:	d003      	beq.n	801657e <__swsetup_r+0x7a>
 8016576:	4621      	mov	r1, r4
 8016578:	4628      	mov	r0, r5
 801657a:	f000 f88b 	bl	8016694 <__smakebuf_r>
 801657e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016582:	f013 0201 	ands.w	r2, r3, #1
 8016586:	d00a      	beq.n	801659e <__swsetup_r+0x9a>
 8016588:	2200      	movs	r2, #0
 801658a:	60a2      	str	r2, [r4, #8]
 801658c:	6962      	ldr	r2, [r4, #20]
 801658e:	4252      	negs	r2, r2
 8016590:	61a2      	str	r2, [r4, #24]
 8016592:	6922      	ldr	r2, [r4, #16]
 8016594:	b942      	cbnz	r2, 80165a8 <__swsetup_r+0xa4>
 8016596:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801659a:	d1c5      	bne.n	8016528 <__swsetup_r+0x24>
 801659c:	bd38      	pop	{r3, r4, r5, pc}
 801659e:	0799      	lsls	r1, r3, #30
 80165a0:	bf58      	it	pl
 80165a2:	6962      	ldrpl	r2, [r4, #20]
 80165a4:	60a2      	str	r2, [r4, #8]
 80165a6:	e7f4      	b.n	8016592 <__swsetup_r+0x8e>
 80165a8:	2000      	movs	r0, #0
 80165aa:	e7f7      	b.n	801659c <__swsetup_r+0x98>
 80165ac:	200000a4 	.word	0x200000a4

080165b0 <_raise_r>:
 80165b0:	291f      	cmp	r1, #31
 80165b2:	b538      	push	{r3, r4, r5, lr}
 80165b4:	4605      	mov	r5, r0
 80165b6:	460c      	mov	r4, r1
 80165b8:	d904      	bls.n	80165c4 <_raise_r+0x14>
 80165ba:	2316      	movs	r3, #22
 80165bc:	6003      	str	r3, [r0, #0]
 80165be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80165c2:	bd38      	pop	{r3, r4, r5, pc}
 80165c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80165c6:	b112      	cbz	r2, 80165ce <_raise_r+0x1e>
 80165c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80165cc:	b94b      	cbnz	r3, 80165e2 <_raise_r+0x32>
 80165ce:	4628      	mov	r0, r5
 80165d0:	f000 f830 	bl	8016634 <_getpid_r>
 80165d4:	4622      	mov	r2, r4
 80165d6:	4601      	mov	r1, r0
 80165d8:	4628      	mov	r0, r5
 80165da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80165de:	f000 b817 	b.w	8016610 <_kill_r>
 80165e2:	2b01      	cmp	r3, #1
 80165e4:	d00a      	beq.n	80165fc <_raise_r+0x4c>
 80165e6:	1c59      	adds	r1, r3, #1
 80165e8:	d103      	bne.n	80165f2 <_raise_r+0x42>
 80165ea:	2316      	movs	r3, #22
 80165ec:	6003      	str	r3, [r0, #0]
 80165ee:	2001      	movs	r0, #1
 80165f0:	e7e7      	b.n	80165c2 <_raise_r+0x12>
 80165f2:	2100      	movs	r1, #0
 80165f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80165f8:	4620      	mov	r0, r4
 80165fa:	4798      	blx	r3
 80165fc:	2000      	movs	r0, #0
 80165fe:	e7e0      	b.n	80165c2 <_raise_r+0x12>

08016600 <raise>:
 8016600:	4b02      	ldr	r3, [pc, #8]	@ (801660c <raise+0xc>)
 8016602:	4601      	mov	r1, r0
 8016604:	6818      	ldr	r0, [r3, #0]
 8016606:	f7ff bfd3 	b.w	80165b0 <_raise_r>
 801660a:	bf00      	nop
 801660c:	200000a4 	.word	0x200000a4

08016610 <_kill_r>:
 8016610:	b538      	push	{r3, r4, r5, lr}
 8016612:	4d07      	ldr	r5, [pc, #28]	@ (8016630 <_kill_r+0x20>)
 8016614:	2300      	movs	r3, #0
 8016616:	4604      	mov	r4, r0
 8016618:	4608      	mov	r0, r1
 801661a:	4611      	mov	r1, r2
 801661c:	602b      	str	r3, [r5, #0]
 801661e:	f7ef fd4b 	bl	80060b8 <_kill>
 8016622:	1c43      	adds	r3, r0, #1
 8016624:	d102      	bne.n	801662c <_kill_r+0x1c>
 8016626:	682b      	ldr	r3, [r5, #0]
 8016628:	b103      	cbz	r3, 801662c <_kill_r+0x1c>
 801662a:	6023      	str	r3, [r4, #0]
 801662c:	bd38      	pop	{r3, r4, r5, pc}
 801662e:	bf00      	nop
 8016630:	2000536c 	.word	0x2000536c

08016634 <_getpid_r>:
 8016634:	f7ef bd38 	b.w	80060a8 <_getpid>

08016638 <_malloc_usable_size_r>:
 8016638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801663c:	1f18      	subs	r0, r3, #4
 801663e:	2b00      	cmp	r3, #0
 8016640:	bfbc      	itt	lt
 8016642:	580b      	ldrlt	r3, [r1, r0]
 8016644:	18c0      	addlt	r0, r0, r3
 8016646:	4770      	bx	lr

08016648 <__swhatbuf_r>:
 8016648:	b570      	push	{r4, r5, r6, lr}
 801664a:	460c      	mov	r4, r1
 801664c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016650:	2900      	cmp	r1, #0
 8016652:	b096      	sub	sp, #88	@ 0x58
 8016654:	4615      	mov	r5, r2
 8016656:	461e      	mov	r6, r3
 8016658:	da0d      	bge.n	8016676 <__swhatbuf_r+0x2e>
 801665a:	89a3      	ldrh	r3, [r4, #12]
 801665c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016660:	f04f 0100 	mov.w	r1, #0
 8016664:	bf14      	ite	ne
 8016666:	2340      	movne	r3, #64	@ 0x40
 8016668:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801666c:	2000      	movs	r0, #0
 801666e:	6031      	str	r1, [r6, #0]
 8016670:	602b      	str	r3, [r5, #0]
 8016672:	b016      	add	sp, #88	@ 0x58
 8016674:	bd70      	pop	{r4, r5, r6, pc}
 8016676:	466a      	mov	r2, sp
 8016678:	f000 f848 	bl	801670c <_fstat_r>
 801667c:	2800      	cmp	r0, #0
 801667e:	dbec      	blt.n	801665a <__swhatbuf_r+0x12>
 8016680:	9901      	ldr	r1, [sp, #4]
 8016682:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016686:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801668a:	4259      	negs	r1, r3
 801668c:	4159      	adcs	r1, r3
 801668e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016692:	e7eb      	b.n	801666c <__swhatbuf_r+0x24>

08016694 <__smakebuf_r>:
 8016694:	898b      	ldrh	r3, [r1, #12]
 8016696:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016698:	079d      	lsls	r5, r3, #30
 801669a:	4606      	mov	r6, r0
 801669c:	460c      	mov	r4, r1
 801669e:	d507      	bpl.n	80166b0 <__smakebuf_r+0x1c>
 80166a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80166a4:	6023      	str	r3, [r4, #0]
 80166a6:	6123      	str	r3, [r4, #16]
 80166a8:	2301      	movs	r3, #1
 80166aa:	6163      	str	r3, [r4, #20]
 80166ac:	b003      	add	sp, #12
 80166ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166b0:	ab01      	add	r3, sp, #4
 80166b2:	466a      	mov	r2, sp
 80166b4:	f7ff ffc8 	bl	8016648 <__swhatbuf_r>
 80166b8:	9f00      	ldr	r7, [sp, #0]
 80166ba:	4605      	mov	r5, r0
 80166bc:	4639      	mov	r1, r7
 80166be:	4630      	mov	r0, r6
 80166c0:	f7ff f912 	bl	80158e8 <_malloc_r>
 80166c4:	b948      	cbnz	r0, 80166da <__smakebuf_r+0x46>
 80166c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80166ca:	059a      	lsls	r2, r3, #22
 80166cc:	d4ee      	bmi.n	80166ac <__smakebuf_r+0x18>
 80166ce:	f023 0303 	bic.w	r3, r3, #3
 80166d2:	f043 0302 	orr.w	r3, r3, #2
 80166d6:	81a3      	strh	r3, [r4, #12]
 80166d8:	e7e2      	b.n	80166a0 <__smakebuf_r+0xc>
 80166da:	89a3      	ldrh	r3, [r4, #12]
 80166dc:	6020      	str	r0, [r4, #0]
 80166de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80166e2:	81a3      	strh	r3, [r4, #12]
 80166e4:	9b01      	ldr	r3, [sp, #4]
 80166e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80166ea:	b15b      	cbz	r3, 8016704 <__smakebuf_r+0x70>
 80166ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80166f0:	4630      	mov	r0, r6
 80166f2:	f000 f81d 	bl	8016730 <_isatty_r>
 80166f6:	b128      	cbz	r0, 8016704 <__smakebuf_r+0x70>
 80166f8:	89a3      	ldrh	r3, [r4, #12]
 80166fa:	f023 0303 	bic.w	r3, r3, #3
 80166fe:	f043 0301 	orr.w	r3, r3, #1
 8016702:	81a3      	strh	r3, [r4, #12]
 8016704:	89a3      	ldrh	r3, [r4, #12]
 8016706:	431d      	orrs	r5, r3
 8016708:	81a5      	strh	r5, [r4, #12]
 801670a:	e7cf      	b.n	80166ac <__smakebuf_r+0x18>

0801670c <_fstat_r>:
 801670c:	b538      	push	{r3, r4, r5, lr}
 801670e:	4d07      	ldr	r5, [pc, #28]	@ (801672c <_fstat_r+0x20>)
 8016710:	2300      	movs	r3, #0
 8016712:	4604      	mov	r4, r0
 8016714:	4608      	mov	r0, r1
 8016716:	4611      	mov	r1, r2
 8016718:	602b      	str	r3, [r5, #0]
 801671a:	f7ef fd2d 	bl	8006178 <_fstat>
 801671e:	1c43      	adds	r3, r0, #1
 8016720:	d102      	bne.n	8016728 <_fstat_r+0x1c>
 8016722:	682b      	ldr	r3, [r5, #0]
 8016724:	b103      	cbz	r3, 8016728 <_fstat_r+0x1c>
 8016726:	6023      	str	r3, [r4, #0]
 8016728:	bd38      	pop	{r3, r4, r5, pc}
 801672a:	bf00      	nop
 801672c:	2000536c 	.word	0x2000536c

08016730 <_isatty_r>:
 8016730:	b538      	push	{r3, r4, r5, lr}
 8016732:	4d06      	ldr	r5, [pc, #24]	@ (801674c <_isatty_r+0x1c>)
 8016734:	2300      	movs	r3, #0
 8016736:	4604      	mov	r4, r0
 8016738:	4608      	mov	r0, r1
 801673a:	602b      	str	r3, [r5, #0]
 801673c:	f7ef fd2c 	bl	8006198 <_isatty>
 8016740:	1c43      	adds	r3, r0, #1
 8016742:	d102      	bne.n	801674a <_isatty_r+0x1a>
 8016744:	682b      	ldr	r3, [r5, #0]
 8016746:	b103      	cbz	r3, 801674a <_isatty_r+0x1a>
 8016748:	6023      	str	r3, [r4, #0]
 801674a:	bd38      	pop	{r3, r4, r5, pc}
 801674c:	2000536c 	.word	0x2000536c

08016750 <_init>:
 8016750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016752:	bf00      	nop
 8016754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016756:	bc08      	pop	{r3}
 8016758:	469e      	mov	lr, r3
 801675a:	4770      	bx	lr

0801675c <_fini>:
 801675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801675e:	bf00      	nop
 8016760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016762:	bc08      	pop	{r3}
 8016764:	469e      	mov	lr, r3
 8016766:	4770      	bx	lr
