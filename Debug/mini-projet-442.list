
mini-projet-442.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c504  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004034  0800c6d4  0800c6d4  0001c6d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010708  08010708  0003009c  2**0
                  CONTENTS
  4 .ARM          00000008  08010708  08010708  00020708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010710  08010710  0003009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010710  08010710  00020710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010714  08010714  00020714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08010718  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a68  2000009c  080107b4  0003009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b04  080107b4  00034b04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d375  00000000  00000000  0003010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006c76  00000000  00000000  0005d484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002650  00000000  00000000  00064100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d88  00000000  00000000  00066750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003013b  00000000  00000000  000684d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033589  00000000  00000000  00098613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00116a58  00000000  00000000  000cbb9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a3f0  00000000  00000000  001e25f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001ec9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c6bc 	.word	0x0800c6bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	0800c6bc 	.word	0x0800c6bc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005b2:	463b      	mov	r3, r7
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005be:	4b21      	ldr	r3, [pc, #132]	; (8000644 <MX_ADC1_Init+0x98>)
 80005c0:	4a21      	ldr	r2, [pc, #132]	; (8000648 <MX_ADC1_Init+0x9c>)
 80005c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <MX_ADC1_Init+0x98>)
 80005c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005cc:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <MX_ADC1_Init+0x98>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005d2:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <MX_ADC1_Init+0x98>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005d8:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <MX_ADC1_Init+0x98>)
 80005da:	2200      	movs	r2, #0
 80005dc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005de:	4b19      	ldr	r3, [pc, #100]	; (8000644 <MX_ADC1_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <MX_ADC1_Init+0x98>)
 80005ee:	4a17      	ldr	r2, [pc, #92]	; (800064c <MX_ADC1_Init+0xa0>)
 80005f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <MX_ADC1_Init+0x98>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <MX_ADC1_Init+0x98>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_ADC1_Init+0x98>)
 8000600:	2200      	movs	r2, #0
 8000602:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_ADC1_Init+0x98>)
 8000608:	2201      	movs	r2, #1
 800060a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <MX_ADC1_Init+0x98>)
 800060e:	f004 f98b 	bl	8004928 <HAL_ADC_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000618:	f001 fcde 	bl	8001fd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800061c:	2300      	movs	r3, #0
 800061e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000620:	2301      	movs	r3, #1
 8000622:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000628:	463b      	mov	r3, r7
 800062a:	4619      	mov	r1, r3
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <MX_ADC1_Init+0x98>)
 800062e:	f004 fb25 	bl	8004c7c <HAL_ADC_ConfigChannel>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000638:	f001 fcce 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200000b8 	.word	0x200000b8
 8000648:	40012000 	.word	0x40012000
 800064c:	0f000001 	.word	0x0f000001

08000650 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000656:	463b      	mov	r3, r7
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000662:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <MX_ADC3_Init+0x98>)
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <MX_ADC3_Init+0x9c>)
 8000666:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <MX_ADC3_Init+0x98>)
 800066a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800066e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000670:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <MX_ADC3_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <MX_ADC3_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_ADC3_Init+0x98>)
 800067e:	2200      	movs	r2, #0
 8000680:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000682:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <MX_ADC3_Init+0x98>)
 8000684:	2200      	movs	r2, #0
 8000686:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <MX_ADC3_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <MX_ADC3_Init+0x98>)
 8000692:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <MX_ADC3_Init+0xa0>)
 8000694:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_ADC3_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_ADC3_Init+0x98>)
 800069e:	2201      	movs	r2, #1
 80006a0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_ADC3_Init+0x98>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_ADC3_Init+0x98>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006b0:	480d      	ldr	r0, [pc, #52]	; (80006e8 <MX_ADC3_Init+0x98>)
 80006b2:	f004 f939 	bl	8004928 <HAL_ADC_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80006bc:	f001 fc8c 	bl	8001fd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006c0:	2306      	movs	r3, #6
 80006c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_ADC3_Init+0x98>)
 80006d2:	f004 fad3 	bl	8004c7c <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80006dc:	f001 fc7c 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000100 	.word	0x20000100
 80006ec:	40012200 	.word	0x40012200
 80006f0:	0f000001 	.word	0x0f000001

080006f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08c      	sub	sp, #48	; 0x30
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a2a      	ldr	r2, [pc, #168]	; (80007bc <HAL_ADC_MspInit+0xc8>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d124      	bne.n	8000760 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000716:	4b2a      	ldr	r3, [pc, #168]	; (80007c0 <HAL_ADC_MspInit+0xcc>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071a:	4a29      	ldr	r2, [pc, #164]	; (80007c0 <HAL_ADC_MspInit+0xcc>)
 800071c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000720:	6453      	str	r3, [r2, #68]	; 0x44
 8000722:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <HAL_ADC_MspInit+0xcc>)
 8000724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800072a:	61bb      	str	r3, [r7, #24]
 800072c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <HAL_ADC_MspInit+0xcc>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a23      	ldr	r2, [pc, #140]	; (80007c0 <HAL_ADC_MspInit+0xcc>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <HAL_ADC_MspInit+0xcc>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000746:	2301      	movs	r3, #1
 8000748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800074a:	2303      	movs	r3, #3
 800074c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	4619      	mov	r1, r3
 8000758:	481a      	ldr	r0, [pc, #104]	; (80007c4 <HAL_ADC_MspInit+0xd0>)
 800075a:	f005 fbfb 	bl	8005f54 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800075e:	e029      	b.n	80007b4 <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a18      	ldr	r2, [pc, #96]	; (80007c8 <HAL_ADC_MspInit+0xd4>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d124      	bne.n	80007b4 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <HAL_ADC_MspInit+0xcc>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076e:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <HAL_ADC_MspInit+0xcc>)
 8000770:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000774:	6453      	str	r3, [r2, #68]	; 0x44
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <HAL_ADC_MspInit+0xcc>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <HAL_ADC_MspInit+0xcc>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <HAL_ADC_MspInit+0xcc>)
 8000788:	f043 0320 	orr.w	r3, r3, #32
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <HAL_ADC_MspInit+0xcc>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0320 	and.w	r3, r3, #32
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 800079a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800079e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a0:	2303      	movs	r3, #3
 80007a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4619      	mov	r1, r3
 80007ae:	4807      	ldr	r0, [pc, #28]	; (80007cc <HAL_ADC_MspInit+0xd8>)
 80007b0:	f005 fbd0 	bl	8005f54 <HAL_GPIO_Init>
}
 80007b4:	bf00      	nop
 80007b6:	3730      	adds	r7, #48	; 0x30
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40012000 	.word	0x40012000
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020000 	.word	0x40020000
 80007c8:	40012200 	.word	0x40012200
 80007cc:	40021400 	.word	0x40021400

080007d0 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007d6:	463b      	mov	r3, r7
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_DAC_Init+0x4c>)
 80007e0:	4a0f      	ldr	r2, [pc, #60]	; (8000820 <MX_DAC_Init+0x50>)
 80007e2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007e4:	480d      	ldr	r0, [pc, #52]	; (800081c <MX_DAC_Init+0x4c>)
 80007e6:	f004 fd7b 	bl	80052e0 <HAL_DAC_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007f0:	f001 fbf2 	bl	8001fd8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007fc:	463b      	mov	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	4619      	mov	r1, r3
 8000802:	4806      	ldr	r0, [pc, #24]	; (800081c <MX_DAC_Init+0x4c>)
 8000804:	f004 fdf2 	bl	80053ec <HAL_DAC_ConfigChannel>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800080e:	f001 fbe3 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000148 	.word	0x20000148
 8000820:	40007400 	.word	0x40007400

08000824 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a19      	ldr	r2, [pc, #100]	; (80008a8 <HAL_DAC_MspInit+0x84>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d12b      	bne.n	800089e <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000846:	4b19      	ldr	r3, [pc, #100]	; (80008ac <HAL_DAC_MspInit+0x88>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	4a18      	ldr	r2, [pc, #96]	; (80008ac <HAL_DAC_MspInit+0x88>)
 800084c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000850:	6413      	str	r3, [r2, #64]	; 0x40
 8000852:	4b16      	ldr	r3, [pc, #88]	; (80008ac <HAL_DAC_MspInit+0x88>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <HAL_DAC_MspInit+0x88>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a12      	ldr	r2, [pc, #72]	; (80008ac <HAL_DAC_MspInit+0x88>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <HAL_DAC_MspInit+0x88>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000876:	2310      	movs	r3, #16
 8000878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087a:	2303      	movs	r3, #3
 800087c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	4809      	ldr	r0, [pc, #36]	; (80008b0 <HAL_DAC_MspInit+0x8c>)
 800088a:	f005 fb63 	bl	8005f54 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	210f      	movs	r1, #15
 8000892:	2036      	movs	r0, #54	; 0x36
 8000894:	f004 fcfa 	bl	800528c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000898:	2036      	movs	r0, #54	; 0x36
 800089a:	f004 fd13 	bl	80052c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800089e:	bf00      	nop
 80008a0:	3728      	adds	r7, #40	; 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40007400 	.word	0x40007400
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020000 	.word	0x40020000

080008b4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_DMA2D_Init+0x5c>)
 80008ba:	4a16      	ldr	r2, [pc, #88]	; (8000914 <MX_DMA2D_Init+0x60>)
 80008bc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_DMA2D_Init+0x5c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_DMA2D_Init+0x5c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_DMA2D_Init+0x5c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_DMA2D_Init+0x5c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_DMA2D_Init+0x5c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_DMA2D_Init+0x5c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_DMA2D_Init+0x5c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <MX_DMA2D_Init+0x5c>)
 80008ea:	f004 ff97 	bl	800581c <HAL_DMA2D_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008f4:	f001 fb70 	bl	8001fd8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008f8:	2101      	movs	r1, #1
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_DMA2D_Init+0x5c>)
 80008fc:	f005 f9fc 	bl	8005cf8 <HAL_DMA2D_ConfigLayer>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000906:	f001 fb67 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000015c 	.word	0x2000015c
 8000914:	4002b000 	.word	0x4002b000

08000918 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0d      	ldr	r2, [pc, #52]	; (800095c <HAL_DMA2D_MspInit+0x44>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d113      	bne.n	8000952 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <HAL_DMA2D_MspInit+0x48>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a0c      	ldr	r2, [pc, #48]	; (8000960 <HAL_DMA2D_MspInit+0x48>)
 8000930:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <HAL_DMA2D_MspInit+0x48>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2105      	movs	r1, #5
 8000946:	205a      	movs	r0, #90	; 0x5a
 8000948:	f004 fca0 	bl	800528c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800094c:	205a      	movs	r0, #90	; 0x5a
 800094e:	f004 fcb9 	bl	80052c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	4002b000 	.word	0x4002b000
 8000960:	40023800 	.word	0x40023800

08000964 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
 8000978:	615a      	str	r2, [r3, #20]
 800097a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800097c:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <MX_FMC_Init+0x98>)
 800097e:	4a20      	ldr	r2, [pc, #128]	; (8000a00 <MX_FMC_Init+0x9c>)
 8000980:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000982:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <MX_FMC_Init+0x98>)
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <MX_FMC_Init+0x98>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_FMC_Init+0x98>)
 8000990:	2204      	movs	r2, #4
 8000992:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000994:	4b19      	ldr	r3, [pc, #100]	; (80009fc <MX_FMC_Init+0x98>)
 8000996:	2210      	movs	r2, #16
 8000998:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_FMC_Init+0x98>)
 800099c:	2240      	movs	r2, #64	; 0x40
 800099e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_FMC_Init+0x98>)
 80009a2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80009a6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_FMC_Init+0x98>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_FMC_Init+0x98>)
 80009b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009b4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_FMC_Init+0x98>)
 80009b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_FMC_Init+0x98>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80009c8:	2307      	movs	r3, #7
 80009ca:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80009cc:	2304      	movs	r3, #4
 80009ce:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80009d0:	2307      	movs	r3, #7
 80009d2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80009d4:	2303      	movs	r3, #3
 80009d6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80009d8:	2302      	movs	r3, #2
 80009da:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80009dc:	2302      	movs	r3, #2
 80009de:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	4619      	mov	r1, r3
 80009e4:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_FMC_Init+0x98>)
 80009e6:	f008 fc27 	bl	8009238 <HAL_SDRAM_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80009f0:	f001 faf2 	bl	8001fd8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80009f4:	bf00      	nop
 80009f6:	3720      	adds	r7, #32
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	2000019c 	.word	0x2000019c
 8000a00:	a0000140 	.word	0xa0000140

08000a04 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000a18:	4b3a      	ldr	r3, [pc, #232]	; (8000b04 <HAL_FMC_MspInit+0x100>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d16d      	bne.n	8000afc <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000a20:	4b38      	ldr	r3, [pc, #224]	; (8000b04 <HAL_FMC_MspInit+0x100>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a26:	4b38      	ldr	r3, [pc, #224]	; (8000b08 <HAL_FMC_MspInit+0x104>)
 8000a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a2a:	4a37      	ldr	r2, [pc, #220]	; (8000b08 <HAL_FMC_MspInit+0x104>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6393      	str	r3, [r2, #56]	; 0x38
 8000a32:	4b35      	ldr	r3, [pc, #212]	; (8000b08 <HAL_FMC_MspInit+0x104>)
 8000a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000a3e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000a42:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a50:	230c      	movs	r3, #12
 8000a52:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	4619      	mov	r1, r3
 8000a58:	482c      	ldr	r0, [pc, #176]	; (8000b0c <HAL_FMC_MspInit+0x108>)
 8000a5a:	f005 fa7b 	bl	8005f54 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000a5e:	f248 1333 	movw	r3, #33075	; 0x8133
 8000a62:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a70:	230c      	movs	r3, #12
 8000a72:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	4619      	mov	r1, r3
 8000a78:	4825      	ldr	r0, [pc, #148]	; (8000b10 <HAL_FMC_MspInit+0x10c>)
 8000a7a:	f005 fa6b 	bl	8005f54 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000a7e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000a82:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a90:	230c      	movs	r3, #12
 8000a92:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	4619      	mov	r1, r3
 8000a98:	481e      	ldr	r0, [pc, #120]	; (8000b14 <HAL_FMC_MspInit+0x110>)
 8000a9a:	f005 fa5b 	bl	8005f54 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000a9e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000aa2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ab0:	230c      	movs	r3, #12
 8000ab2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4817      	ldr	r0, [pc, #92]	; (8000b18 <HAL_FMC_MspInit+0x114>)
 8000aba:	f005 fa4b 	bl	8005f54 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000abe:	2328      	movs	r3, #40	; 0x28
 8000ac0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aca:	2303      	movs	r3, #3
 8000acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ace:	230c      	movs	r3, #12
 8000ad0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4811      	ldr	r0, [pc, #68]	; (8000b1c <HAL_FMC_MspInit+0x118>)
 8000ad8:	f005 fa3c 	bl	8005f54 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000adc:	2308      	movs	r3, #8
 8000ade:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aec:	230c      	movs	r3, #12
 8000aee:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	4619      	mov	r1, r3
 8000af4:	480a      	ldr	r0, [pc, #40]	; (8000b20 <HAL_FMC_MspInit+0x11c>)
 8000af6:	f005 fa2d 	bl	8005f54 <HAL_GPIO_Init>
 8000afa:	e000      	b.n	8000afe <HAL_FMC_MspInit+0xfa>
    return;
 8000afc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200001d0 	.word	0x200001d0
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40021800 	.word	0x40021800
 8000b14:	40020c00 	.word	0x40020c00
 8000b18:	40021400 	.word	0x40021400
 8000b1c:	40021c00 	.word	0x40021c00
 8000b20:	40020800 	.word	0x40020800

08000b24 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000b2c:	f7ff ff6a 	bl	8000a04 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <vApplicationGetIdleTaskMemory+0x30>)
 8000b4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2280      	movs	r2, #128	; 0x80
 8000b54:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b56:	bf00      	nop
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	200001d8 	.word	0x200001d8
 8000b68:	2000022c 	.word	0x2000022c

08000b6c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b6c:	b5b0      	push	{r4, r5, r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <MX_FREERTOS_Init+0x30>)
 8000b74:	1d3c      	adds	r4, r7, #4
 8000b76:	461d      	mov	r5, r3
 8000b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2100      	movs	r1, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f009 fecc 	bl	800a926 <osThreadCreate>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	4a03      	ldr	r2, [pc, #12]	; (8000ba0 <MX_FREERTOS_Init+0x34>)
 8000b92:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000b94:	bf00      	nop
 8000b96:	3720      	adds	r7, #32
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b9c:	0800c6e0 	.word	0x0800c6e0
 8000ba0:	200001d4 	.word	0x200001d4

08000ba4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bac:	2001      	movs	r0, #1
 8000bae:	f009 ff06 	bl	800a9be <osDelay>
 8000bb2:	e7fb      	b.n	8000bac <StartDefaultTask+0x8>

08000bb4 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000bbe:	20c8      	movs	r0, #200	; 0xc8
 8000bc0:	f001 fd1a 	bl	80025f8 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000bc4:	f000 fa7a 	bl	80010bc <ft5336_I2C_InitializeIfRequired>
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b084      	sub	sp, #16
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	4603      	mov	r3, r0
 8000bee:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000bfc:	f000 fa5e 	bl	80010bc <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000c00:	2300      	movs	r3, #0
 8000c02:	73fb      	strb	r3, [r7, #15]
 8000c04:	e010      	b.n	8000c28 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	21a8      	movs	r1, #168	; 0xa8
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 fcd5 	bl	80025bc <TS_IO_Read>
 8000c12:	4603      	mov	r3, r0
 8000c14:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000c16:	7b7b      	ldrb	r3, [r7, #13]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b51      	cmp	r3, #81	; 0x51
 8000c1c:	d101      	bne.n	8000c22 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	3301      	adds	r3, #1
 8000c26:	73fb      	strb	r3, [r7, #15]
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d802      	bhi.n	8000c34 <ft5336_ReadID+0x4e>
 8000c2e:	7bbb      	ldrb	r3, [r7, #14]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d0e8      	beq.n	8000c06 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000c34:	7b7b      	ldrb	r3, [r7, #13]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	b29b      	uxth	r3, r3
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	4603      	mov	r3, r0
 8000c4a:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000c4c:	88fb      	ldrh	r3, [r7, #6]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 fa44 	bl	80010dc <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f932 	bl	8000ec0 <ft5336_TS_DisableIT>
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2102      	movs	r1, #2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f001 fc9f 	bl	80025bc <TS_IO_Read>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b05      	cmp	r3, #5
 8000c94:	d901      	bls.n	8000c9a <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <ft5336_TS_DetectTouch+0x50>)
 8000ca0:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <ft5336_TS_DetectTouch+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	b2db      	uxtb	r3, r3
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	2000042c 	.word	0x2000042c

08000cb8 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
 8000cc4:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000cda:	4b6d      	ldr	r3, [pc, #436]	; (8000e90 <ft5336_TS_GetXY+0x1d8>)
 8000cdc:	789a      	ldrb	r2, [r3, #2]
 8000cde:	4b6c      	ldr	r3, [pc, #432]	; (8000e90 <ft5336_TS_GetXY+0x1d8>)
 8000ce0:	785b      	ldrb	r3, [r3, #1]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	f080 80cf 	bcs.w	8000e86 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000ce8:	4b69      	ldr	r3, [pc, #420]	; (8000e90 <ft5336_TS_GetXY+0x1d8>)
 8000cea:	789b      	ldrb	r3, [r3, #2]
 8000cec:	2b09      	cmp	r3, #9
 8000cee:	d871      	bhi.n	8000dd4 <ft5336_TS_GetXY+0x11c>
 8000cf0:	a201      	add	r2, pc, #4	; (adr r2, 8000cf8 <ft5336_TS_GetXY+0x40>)
 8000cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf6:	bf00      	nop
 8000cf8:	08000d21 	.word	0x08000d21
 8000cfc:	08000d33 	.word	0x08000d33
 8000d00:	08000d45 	.word	0x08000d45
 8000d04:	08000d57 	.word	0x08000d57
 8000d08:	08000d69 	.word	0x08000d69
 8000d0c:	08000d7b 	.word	0x08000d7b
 8000d10:	08000d8d 	.word	0x08000d8d
 8000d14:	08000d9f 	.word	0x08000d9f
 8000d18:	08000db1 	.word	0x08000db1
 8000d1c:	08000dc3 	.word	0x08000dc3
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000d20:	2304      	movs	r3, #4
 8000d22:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000d24:	2303      	movs	r3, #3
 8000d26:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000d28:	2306      	movs	r3, #6
 8000d2a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000d2c:	2305      	movs	r3, #5
 8000d2e:	753b      	strb	r3, [r7, #20]
      break;
 8000d30:	e051      	b.n	8000dd6 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000d32:	230a      	movs	r3, #10
 8000d34:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000d36:	2309      	movs	r3, #9
 8000d38:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000d3a:	230c      	movs	r3, #12
 8000d3c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000d3e:	230b      	movs	r3, #11
 8000d40:	753b      	strb	r3, [r7, #20]
      break;
 8000d42:	e048      	b.n	8000dd6 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000d44:	2310      	movs	r3, #16
 8000d46:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000d48:	230f      	movs	r3, #15
 8000d4a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000d4c:	2312      	movs	r3, #18
 8000d4e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000d50:	2311      	movs	r3, #17
 8000d52:	753b      	strb	r3, [r7, #20]
      break;
 8000d54:	e03f      	b.n	8000dd6 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000d56:	2316      	movs	r3, #22
 8000d58:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000d5a:	2315      	movs	r3, #21
 8000d5c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8000d5e:	2318      	movs	r3, #24
 8000d60:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8000d62:	2317      	movs	r3, #23
 8000d64:	753b      	strb	r3, [r7, #20]
      break;
 8000d66:	e036      	b.n	8000dd6 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000d68:	231c      	movs	r3, #28
 8000d6a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000d6c:	231b      	movs	r3, #27
 8000d6e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8000d70:	231e      	movs	r3, #30
 8000d72:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000d74:	231d      	movs	r3, #29
 8000d76:	753b      	strb	r3, [r7, #20]
      break;
 8000d78:	e02d      	b.n	8000dd6 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000d7a:	2322      	movs	r3, #34	; 0x22
 8000d7c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000d7e:	2321      	movs	r3, #33	; 0x21
 8000d80:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8000d82:	2324      	movs	r3, #36	; 0x24
 8000d84:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000d86:	2323      	movs	r3, #35	; 0x23
 8000d88:	753b      	strb	r3, [r7, #20]
      break;
 8000d8a:	e024      	b.n	8000dd6 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000d8c:	2328      	movs	r3, #40	; 0x28
 8000d8e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000d90:	2327      	movs	r3, #39	; 0x27
 8000d92:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000d94:	232a      	movs	r3, #42	; 0x2a
 8000d96:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000d98:	2329      	movs	r3, #41	; 0x29
 8000d9a:	753b      	strb	r3, [r7, #20]
      break;
 8000d9c:	e01b      	b.n	8000dd6 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000d9e:	232e      	movs	r3, #46	; 0x2e
 8000da0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000da2:	232d      	movs	r3, #45	; 0x2d
 8000da4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000da6:	2330      	movs	r3, #48	; 0x30
 8000da8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000daa:	232f      	movs	r3, #47	; 0x2f
 8000dac:	753b      	strb	r3, [r7, #20]
      break;
 8000dae:	e012      	b.n	8000dd6 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000db0:	2334      	movs	r3, #52	; 0x34
 8000db2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000db4:	2333      	movs	r3, #51	; 0x33
 8000db6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000db8:	2336      	movs	r3, #54	; 0x36
 8000dba:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000dbc:	2335      	movs	r3, #53	; 0x35
 8000dbe:	753b      	strb	r3, [r7, #20]
      break;
 8000dc0:	e009      	b.n	8000dd6 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000dc2:	233a      	movs	r3, #58	; 0x3a
 8000dc4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000dc6:	2339      	movs	r3, #57	; 0x39
 8000dc8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000dca:	233c      	movs	r3, #60	; 0x3c
 8000dcc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000dce:	233b      	movs	r3, #59	; 0x3b
 8000dd0:	753b      	strb	r3, [r7, #20]
      break;
 8000dd2:	e000      	b.n	8000dd6 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000dd4:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000dd6:	89fb      	ldrh	r3, [r7, #14]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	7dfa      	ldrb	r2, [r7, #23]
 8000ddc:	4611      	mov	r1, r2
 8000dde:	4618      	mov	r0, r3
 8000de0:	f001 fbec 	bl	80025bc <TS_IO_Read>
 8000de4:	4603      	mov	r3, r0
 8000de6:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000de8:	7cfb      	ldrb	r3, [r7, #19]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <ft5336_TS_GetXY+0x1dc>)
 8000df0:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000df2:	89fb      	ldrh	r3, [r7, #14]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	7dba      	ldrb	r2, [r7, #22]
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 fbde 	bl	80025bc <TS_IO_Read>
 8000e00:	4603      	mov	r3, r0
 8000e02:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000e04:	7cfb      	ldrb	r3, [r7, #19]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <ft5336_TS_GetXY+0x1dc>)
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	b21b      	sxth	r3, r3
 8000e16:	4313      	orrs	r3, r2
 8000e18:	b21b      	sxth	r3, r3
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <ft5336_TS_GetXY+0x1dc>)
 8000e1e:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000e20:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <ft5336_TS_GetXY+0x1dc>)
 8000e22:	881a      	ldrh	r2, [r3, #0]
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000e28:	89fb      	ldrh	r3, [r7, #14]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	7d7a      	ldrb	r2, [r7, #21]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f001 fbc3 	bl	80025bc <TS_IO_Read>
 8000e36:	4603      	mov	r3, r0
 8000e38:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000e3a:	7cfb      	ldrb	r3, [r7, #19]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <ft5336_TS_GetXY+0x1dc>)
 8000e42:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000e44:	89fb      	ldrh	r3, [r7, #14]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	7d3a      	ldrb	r2, [r7, #20]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f001 fbb5 	bl	80025bc <TS_IO_Read>
 8000e52:	4603      	mov	r3, r0
 8000e54:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000e56:	7cfb      	ldrb	r3, [r7, #19]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	021b      	lsls	r3, r3, #8
 8000e5c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000e60:	b21a      	sxth	r2, r3
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <ft5336_TS_GetXY+0x1dc>)
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	b21b      	sxth	r3, r3
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	b21b      	sxth	r3, r3
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <ft5336_TS_GetXY+0x1dc>)
 8000e70:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <ft5336_TS_GetXY+0x1dc>)
 8000e74:	881a      	ldrh	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000e7a:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <ft5336_TS_GetXY+0x1d8>)
 8000e7c:	789b      	ldrb	r3, [r3, #2]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <ft5336_TS_GetXY+0x1d8>)
 8000e84:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000e86:	bf00      	nop
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	2000042c 	.word	0x2000042c
 8000e94:	20000430 	.word	0x20000430

08000e98 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	7bfa      	ldrb	r2, [r7, #15]
 8000eb0:	21a4      	movs	r1, #164	; 0xa4
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f001 fb68 	bl	8002588 <TS_IO_Write>
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	7bfa      	ldrb	r2, [r7, #15]
 8000ed8:	21a4      	movs	r1, #164	; 0xa4
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 fb54 	bl	8002588 <TS_IO_Write>
}
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b084      	sub	sp, #16
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	6039      	str	r1, [r7, #0]
 8000f20:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f001 fb45 	bl	80025bc <TS_IO_Read>
 8000f32:	4603      	mov	r3, r0
 8000f34:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	601a      	str	r2, [r3, #0]
}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	4603      	mov	r3, r0
 8000f56:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8000f68:	4b4d      	ldr	r3, [pc, #308]	; (80010a0 <ft5336_TS_GetTouchInfo+0x158>)
 8000f6a:	785b      	ldrb	r3, [r3, #1]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	4293      	cmp	r3, r2
 8000f72:	f080 8090 	bcs.w	8001096 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	2b09      	cmp	r3, #9
 8000f7a:	d85d      	bhi.n	8001038 <ft5336_TS_GetTouchInfo+0xf0>
 8000f7c:	a201      	add	r2, pc, #4	; (adr r2, 8000f84 <ft5336_TS_GetTouchInfo+0x3c>)
 8000f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f82:	bf00      	nop
 8000f84:	08000fad 	.word	0x08000fad
 8000f88:	08000fbb 	.word	0x08000fbb
 8000f8c:	08000fc9 	.word	0x08000fc9
 8000f90:	08000fd7 	.word	0x08000fd7
 8000f94:	08000fe5 	.word	0x08000fe5
 8000f98:	08000ff3 	.word	0x08000ff3
 8000f9c:	08001001 	.word	0x08001001
 8000fa0:	0800100f 	.word	0x0800100f
 8000fa4:	0800101d 	.word	0x0800101d
 8000fa8:	0800102b 	.word	0x0800102b
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000fac:	2303      	movs	r3, #3
 8000fae:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000fb0:	2307      	movs	r3, #7
 8000fb2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8000fb4:	2308      	movs	r3, #8
 8000fb6:	757b      	strb	r3, [r7, #21]
      break;
 8000fb8:	e03f      	b.n	800103a <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8000fba:	2309      	movs	r3, #9
 8000fbc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000fbe:	230d      	movs	r3, #13
 8000fc0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8000fc2:	230e      	movs	r3, #14
 8000fc4:	757b      	strb	r3, [r7, #21]
      break;
 8000fc6:	e038      	b.n	800103a <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000fc8:	230f      	movs	r3, #15
 8000fca:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000fcc:	2313      	movs	r3, #19
 8000fce:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000fd0:	2314      	movs	r3, #20
 8000fd2:	757b      	strb	r3, [r7, #21]
      break;
 8000fd4:	e031      	b.n	800103a <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8000fd6:	2315      	movs	r3, #21
 8000fd8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000fda:	2319      	movs	r3, #25
 8000fdc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000fde:	231a      	movs	r3, #26
 8000fe0:	757b      	strb	r3, [r7, #21]
      break;
 8000fe2:	e02a      	b.n	800103a <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8000fe4:	231b      	movs	r3, #27
 8000fe6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000fe8:	231f      	movs	r3, #31
 8000fea:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000fec:	2320      	movs	r3, #32
 8000fee:	757b      	strb	r3, [r7, #21]
      break;
 8000ff0:	e023      	b.n	800103a <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8000ff2:	2321      	movs	r3, #33	; 0x21
 8000ff4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8000ff6:	2325      	movs	r3, #37	; 0x25
 8000ff8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8000ffa:	2326      	movs	r3, #38	; 0x26
 8000ffc:	757b      	strb	r3, [r7, #21]
      break;
 8000ffe:	e01c      	b.n	800103a <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8001000:	2327      	movs	r3, #39	; 0x27
 8001002:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8001004:	232b      	movs	r3, #43	; 0x2b
 8001006:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8001008:	232c      	movs	r3, #44	; 0x2c
 800100a:	757b      	strb	r3, [r7, #21]
      break;
 800100c:	e015      	b.n	800103a <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 800100e:	232d      	movs	r3, #45	; 0x2d
 8001010:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8001012:	2331      	movs	r3, #49	; 0x31
 8001014:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8001016:	2332      	movs	r3, #50	; 0x32
 8001018:	757b      	strb	r3, [r7, #21]
      break;
 800101a:	e00e      	b.n	800103a <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 800101c:	2333      	movs	r3, #51	; 0x33
 800101e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8001020:	2337      	movs	r3, #55	; 0x37
 8001022:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8001024:	2338      	movs	r3, #56	; 0x38
 8001026:	757b      	strb	r3, [r7, #21]
      break;
 8001028:	e007      	b.n	800103a <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 800102a:	2339      	movs	r3, #57	; 0x39
 800102c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 800102e:	233d      	movs	r3, #61	; 0x3d
 8001030:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8001032:	233e      	movs	r3, #62	; 0x3e
 8001034:	757b      	strb	r3, [r7, #21]
      break;
 8001036:	e000      	b.n	800103a <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8001038:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800103a:	89fb      	ldrh	r3, [r7, #14]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	7dfa      	ldrb	r2, [r7, #23]
 8001040:	4611      	mov	r1, r2
 8001042:	4618      	mov	r0, r3
 8001044:	f001 faba 	bl	80025bc <TS_IO_Read>
 8001048:	4603      	mov	r3, r0
 800104a:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 800104c:	7d3b      	ldrb	r3, [r7, #20]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	119b      	asrs	r3, r3, #6
 8001052:	f003 0203 	and.w	r2, r3, #3
 8001056:	6a3b      	ldr	r3, [r7, #32]
 8001058:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 800105a:	89fb      	ldrh	r3, [r7, #14]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	7dba      	ldrb	r2, [r7, #22]
 8001060:	4611      	mov	r1, r2
 8001062:	4618      	mov	r0, r3
 8001064:	f001 faaa 	bl	80025bc <TS_IO_Read>
 8001068:	4603      	mov	r3, r0
 800106a:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 800106c:	7d3b      	ldrb	r3, [r7, #20]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	461a      	mov	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8001076:	89fb      	ldrh	r3, [r7, #14]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	7d7a      	ldrb	r2, [r7, #21]
 800107c:	4611      	mov	r1, r2
 800107e:	4618      	mov	r0, r3
 8001080:	f001 fa9c 	bl	80025bc <TS_IO_Read>
 8001084:	4603      	mov	r3, r0
 8001086:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8001088:	7d3b      	ldrb	r3, [r7, #20]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	111b      	asrs	r3, r3, #4
 800108e:	f003 0204 	and.w	r2, r3, #4
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001096:	bf00      	nop
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000042c 	.word	0x2000042c

080010a4 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	2000042c 	.word	0x2000042c

080010bc <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80010c0:	f7ff fff0 	bl	80010a4 <ft5336_Get_I2C_InitializedStatus>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d104      	bne.n	80010d4 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80010ca:	f001 fa53 	bl	8002574 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80010ce:	4b02      	ldr	r3, [pc, #8]	; (80010d8 <ft5336_I2C_InitializeIfRequired+0x1c>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]
  }
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	2000042c 	.word	0x2000042c

080010dc <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80010ea:	68fb      	ldr	r3, [r7, #12]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b090      	sub	sp, #64	; 0x40
 80010fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800110e:	4baf      	ldr	r3, [pc, #700]	; (80013cc <MX_GPIO_Init+0x2d4>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4aae      	ldr	r2, [pc, #696]	; (80013cc <MX_GPIO_Init+0x2d4>)
 8001114:	f043 0310 	orr.w	r3, r3, #16
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4bac      	ldr	r3, [pc, #688]	; (80013cc <MX_GPIO_Init+0x2d4>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0310 	and.w	r3, r3, #16
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
 8001124:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001126:	4ba9      	ldr	r3, [pc, #676]	; (80013cc <MX_GPIO_Init+0x2d4>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4aa8      	ldr	r2, [pc, #672]	; (80013cc <MX_GPIO_Init+0x2d4>)
 800112c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4ba6      	ldr	r3, [pc, #664]	; (80013cc <MX_GPIO_Init+0x2d4>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	4ba3      	ldr	r3, [pc, #652]	; (80013cc <MX_GPIO_Init+0x2d4>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4aa2      	ldr	r2, [pc, #648]	; (80013cc <MX_GPIO_Init+0x2d4>)
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4ba0      	ldr	r3, [pc, #640]	; (80013cc <MX_GPIO_Init+0x2d4>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	623b      	str	r3, [r7, #32]
 8001154:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001156:	4b9d      	ldr	r3, [pc, #628]	; (80013cc <MX_GPIO_Init+0x2d4>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a9c      	ldr	r2, [pc, #624]	; (80013cc <MX_GPIO_Init+0x2d4>)
 800115c:	f043 0308 	orr.w	r3, r3, #8
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b9a      	ldr	r3, [pc, #616]	; (80013cc <MX_GPIO_Init+0x2d4>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	61fb      	str	r3, [r7, #28]
 800116c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116e:	4b97      	ldr	r3, [pc, #604]	; (80013cc <MX_GPIO_Init+0x2d4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a96      	ldr	r2, [pc, #600]	; (80013cc <MX_GPIO_Init+0x2d4>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b94      	ldr	r3, [pc, #592]	; (80013cc <MX_GPIO_Init+0x2d4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	61bb      	str	r3, [r7, #24]
 8001184:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	4b91      	ldr	r3, [pc, #580]	; (80013cc <MX_GPIO_Init+0x2d4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a90      	ldr	r2, [pc, #576]	; (80013cc <MX_GPIO_Init+0x2d4>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b8e      	ldr	r3, [pc, #568]	; (80013cc <MX_GPIO_Init+0x2d4>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800119e:	4b8b      	ldr	r3, [pc, #556]	; (80013cc <MX_GPIO_Init+0x2d4>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a8a      	ldr	r2, [pc, #552]	; (80013cc <MX_GPIO_Init+0x2d4>)
 80011a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b88      	ldr	r3, [pc, #544]	; (80013cc <MX_GPIO_Init+0x2d4>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80011b6:	4b85      	ldr	r3, [pc, #532]	; (80013cc <MX_GPIO_Init+0x2d4>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a84      	ldr	r2, [pc, #528]	; (80013cc <MX_GPIO_Init+0x2d4>)
 80011bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b82      	ldr	r3, [pc, #520]	; (80013cc <MX_GPIO_Init+0x2d4>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80011ce:	4b7f      	ldr	r3, [pc, #508]	; (80013cc <MX_GPIO_Init+0x2d4>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a7e      	ldr	r2, [pc, #504]	; (80013cc <MX_GPIO_Init+0x2d4>)
 80011d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b7c      	ldr	r3, [pc, #496]	; (80013cc <MX_GPIO_Init+0x2d4>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011e6:	4b79      	ldr	r3, [pc, #484]	; (80013cc <MX_GPIO_Init+0x2d4>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a78      	ldr	r2, [pc, #480]	; (80013cc <MX_GPIO_Init+0x2d4>)
 80011ec:	f043 0320 	orr.w	r3, r3, #32
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b76      	ldr	r3, [pc, #472]	; (80013cc <MX_GPIO_Init+0x2d4>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0320 	and.w	r3, r3, #32
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011fe:	4b73      	ldr	r3, [pc, #460]	; (80013cc <MX_GPIO_Init+0x2d4>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a72      	ldr	r2, [pc, #456]	; (80013cc <MX_GPIO_Init+0x2d4>)
 8001204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b70      	ldr	r3, [pc, #448]	; (80013cc <MX_GPIO_Init+0x2d4>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2160      	movs	r1, #96	; 0x60
 800121a:	486d      	ldr	r0, [pc, #436]	; (80013d0 <MX_GPIO_Init+0x2d8>)
 800121c:	f005 f96a 	bl	80064f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001220:	2201      	movs	r2, #1
 8001222:	2120      	movs	r1, #32
 8001224:	486b      	ldr	r0, [pc, #428]	; (80013d4 <MX_GPIO_Init+0x2dc>)
 8001226:	f005 f965 	bl	80064f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	2108      	movs	r1, #8
 800122e:	4869      	ldr	r0, [pc, #420]	; (80013d4 <MX_GPIO_Init+0x2dc>)
 8001230:	f005 f960 	bl	80064f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001234:	2201      	movs	r2, #1
 8001236:	2108      	movs	r1, #8
 8001238:	4867      	ldr	r0, [pc, #412]	; (80013d8 <MX_GPIO_Init+0x2e0>)
 800123a:	f005 f95b 	bl	80064f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800123e:	2201      	movs	r2, #1
 8001240:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001244:	4865      	ldr	r0, [pc, #404]	; (80013dc <MX_GPIO_Init+0x2e4>)
 8001246:	f005 f955 	bl	80064f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800124a:	2200      	movs	r2, #0
 800124c:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001250:	4863      	ldr	r0, [pc, #396]	; (80013e0 <MX_GPIO_Init+0x2e8>)
 8001252:	f005 f94f 	bl	80064f4 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	21c8      	movs	r1, #200	; 0xc8
 800125a:	4862      	ldr	r0, [pc, #392]	; (80013e4 <MX_GPIO_Init+0x2ec>)
 800125c:	f005 f94a 	bl	80064f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001260:	2308      	movs	r3, #8
 8001262:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001264:	2300      	movs	r3, #0
 8001266:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800126c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001270:	4619      	mov	r1, r3
 8001272:	4857      	ldr	r0, [pc, #348]	; (80013d0 <MX_GPIO_Init+0x2d8>)
 8001274:	f004 fe6e 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001278:	2304      	movs	r3, #4
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001288:	2309      	movs	r3, #9
 800128a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001290:	4619      	mov	r1, r3
 8001292:	484f      	ldr	r0, [pc, #316]	; (80013d0 <MX_GPIO_Init+0x2d8>)
 8001294:	f004 fe5e 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001298:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012aa:	230b      	movs	r3, #11
 80012ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012b2:	4619      	mov	r1, r3
 80012b4:	484b      	ldr	r0, [pc, #300]	; (80013e4 <MX_GPIO_Init+0x2ec>)
 80012b6:	f004 fe4d 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 80012ba:	f643 0323 	movw	r3, #14371	; 0x3823
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80012cc:	230a      	movs	r3, #10
 80012ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012d4:	4619      	mov	r1, r3
 80012d6:	4844      	ldr	r0, [pc, #272]	; (80013e8 <MX_GPIO_Init+0x2f0>)
 80012d8:	f004 fe3c 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80012ec:	2308      	movs	r3, #8
 80012ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012f4:	4619      	mov	r1, r3
 80012f6:	4837      	ldr	r0, [pc, #220]	; (80013d4 <MX_GPIO_Init+0x2dc>)
 80012f8:	f004 fe2c 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80012fc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800130e:	230c      	movs	r3, #12
 8001310:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001312:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001316:	4619      	mov	r1, r3
 8001318:	4834      	ldr	r0, [pc, #208]	; (80013ec <MX_GPIO_Init+0x2f4>)
 800131a:	f004 fe1b 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 800131e:	f248 1340 	movw	r3, #33088	; 0x8140
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001324:	2300      	movs	r3, #0
 8001326:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001330:	4619      	mov	r1, r3
 8001332:	482f      	ldr	r0, [pc, #188]	; (80013f0 <MX_GPIO_Init+0x2f8>)
 8001334:	f004 fe0e 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001338:	2360      	movs	r3, #96	; 0x60
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800134c:	4619      	mov	r1, r3
 800134e:	4820      	ldr	r0, [pc, #128]	; (80013d0 <MX_GPIO_Init+0x2d8>)
 8001350:	f004 fe00 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001354:	2340      	movs	r3, #64	; 0x40
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001364:	230a      	movs	r3, #10
 8001366:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001368:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800136c:	4619      	mov	r1, r3
 800136e:	481e      	ldr	r0, [pc, #120]	; (80013e8 <MX_GPIO_Init+0x2f0>)
 8001370:	f004 fdf0 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137a:	2300      	movs	r3, #0
 800137c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001382:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001386:	4619      	mov	r1, r3
 8001388:	481a      	ldr	r0, [pc, #104]	; (80013f4 <MX_GPIO_Init+0x2fc>)
 800138a:	f004 fde3 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800138e:	2340      	movs	r3, #64	; 0x40
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001392:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001396:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800139c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a0:	4619      	mov	r1, r3
 80013a2:	480c      	ldr	r0, [pc, #48]	; (80013d4 <MX_GPIO_Init+0x2dc>)
 80013a4:	f004 fdd6 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 80013a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013ba:	230a      	movs	r3, #10
 80013bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013c2:	4619      	mov	r1, r3
 80013c4:	480a      	ldr	r0, [pc, #40]	; (80013f0 <MX_GPIO_Init+0x2f8>)
 80013c6:	f004 fdc5 	bl	8005f54 <HAL_GPIO_Init>
 80013ca:	e015      	b.n	80013f8 <MX_GPIO_Init+0x300>
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40020c00 	.word	0x40020c00
 80013d8:	40022800 	.word	0x40022800
 80013dc:	40022000 	.word	0x40022000
 80013e0:	40021c00 	.word	0x40021c00
 80013e4:	40021800 	.word	0x40021800
 80013e8:	40020400 	.word	0x40020400
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020000 	.word	0x40020000
 80013f4:	40022400 	.word	0x40022400

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80013f8:	23f0      	movs	r3, #240	; 0xf0
 80013fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001408:	230a      	movs	r3, #10
 800140a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800140c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001410:	4619      	mov	r1, r3
 8001412:	4891      	ldr	r0, [pc, #580]	; (8001658 <MX_GPIO_Init+0x560>)
 8001414:	f004 fd9e 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800142a:	230a      	movs	r3, #10
 800142c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800142e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001432:	4619      	mov	r1, r3
 8001434:	4889      	ldr	r0, [pc, #548]	; (800165c <MX_GPIO_Init+0x564>)
 8001436:	f004 fd8d 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 800143a:	2328      	movs	r3, #40	; 0x28
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143e:	2301      	movs	r3, #1
 8001440:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800144a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800144e:	4619      	mov	r1, r3
 8001450:	4883      	ldr	r0, [pc, #524]	; (8001660 <MX_GPIO_Init+0x568>)
 8001452:	f004 fd7f 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001456:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145c:	2300      	movs	r3, #0
 800145e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001464:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001468:	4619      	mov	r1, r3
 800146a:	487e      	ldr	r0, [pc, #504]	; (8001664 <MX_GPIO_Init+0x56c>)
 800146c:	f004 fd72 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001470:	2308      	movs	r3, #8
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	2301      	movs	r3, #1
 8001476:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001484:	4619      	mov	r1, r3
 8001486:	4878      	ldr	r0, [pc, #480]	; (8001668 <MX_GPIO_Init+0x570>)
 8001488:	f004 fd64 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 800148c:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001492:	2300      	movs	r3, #0
 8001494:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800149a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800149e:	4619      	mov	r1, r3
 80014a0:	486e      	ldr	r0, [pc, #440]	; (800165c <MX_GPIO_Init+0x564>)
 80014a2:	f004 fd57 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80014a6:	2310      	movs	r3, #16
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014aa:	2300      	movs	r3, #0
 80014ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014b6:	4619      	mov	r1, r3
 80014b8:	4869      	ldr	r0, [pc, #420]	; (8001660 <MX_GPIO_Init+0x568>)
 80014ba:	f004 fd4b 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80014be:	2304      	movs	r3, #4
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80014ce:	230c      	movs	r3, #12
 80014d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014d6:	4619      	mov	r1, r3
 80014d8:	4861      	ldr	r0, [pc, #388]	; (8001660 <MX_GPIO_Init+0x568>)
 80014da:	f004 fd3b 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PH13 PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 80014de:	f24a 0304 	movw	r3, #40964	; 0xa004
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e4:	2300      	movs	r3, #0
 80014e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f0:	4619      	mov	r1, r3
 80014f2:	485e      	ldr	r0, [pc, #376]	; (800166c <MX_GPIO_Init+0x574>)
 80014f4:	f004 fd2e 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 80014f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fe:	2301      	movs	r3, #1
 8001500:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 800150a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800150e:	4619      	mov	r1, r3
 8001510:	4851      	ldr	r0, [pc, #324]	; (8001658 <MX_GPIO_Init+0x560>)
 8001512:	f004 fd1f 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001516:	f645 6340 	movw	r3, #24128	; 0x5e40
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151c:	2301      	movs	r3, #1
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001528:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800152c:	4619      	mov	r1, r3
 800152e:	484f      	ldr	r0, [pc, #316]	; (800166c <MX_GPIO_Init+0x574>)
 8001530:	f004 fd10 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001534:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800153a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800153e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001544:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001548:	4619      	mov	r1, r3
 800154a:	4843      	ldr	r0, [pc, #268]	; (8001658 <MX_GPIO_Init+0x560>)
 800154c:	f004 fd02 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001550:	2310      	movs	r3, #16
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155c:	2303      	movs	r3, #3
 800155e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001560:	230a      	movs	r3, #10
 8001562:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001568:	4619      	mov	r1, r3
 800156a:	4840      	ldr	r0, [pc, #256]	; (800166c <MX_GPIO_Init+0x574>)
 800156c:	f004 fcf2 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001570:	23c8      	movs	r3, #200	; 0xc8
 8001572:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001574:	2301      	movs	r3, #1
 8001576:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001580:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001584:	4619      	mov	r1, r3
 8001586:	4835      	ldr	r0, [pc, #212]	; (800165c <MX_GPIO_Init+0x564>)
 8001588:	f004 fce4 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800158c:	2305      	movs	r3, #5
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800159c:	230a      	movs	r3, #10
 800159e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015a4:	4619      	mov	r1, r3
 80015a6:	482f      	ldr	r0, [pc, #188]	; (8001664 <MX_GPIO_Init+0x56c>)
 80015a8:	f004 fcd4 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80015ac:	2332      	movs	r3, #50	; 0x32
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015bc:	230b      	movs	r3, #11
 80015be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015c4:	4619      	mov	r1, r3
 80015c6:	4827      	ldr	r0, [pc, #156]	; (8001664 <MX_GPIO_Init+0x56c>)
 80015c8:	f004 fcc4 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015cc:	2304      	movs	r3, #4
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015dc:	2309      	movs	r3, #9
 80015de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015e4:	4619      	mov	r1, r3
 80015e6:	4822      	ldr	r0, [pc, #136]	; (8001670 <MX_GPIO_Init+0x578>)
 80015e8:	f004 fcb4 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80015ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015fe:	2309      	movs	r3, #9
 8001600:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001602:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001606:	4619      	mov	r1, r3
 8001608:	4815      	ldr	r0, [pc, #84]	; (8001660 <MX_GPIO_Init+0x568>)
 800160a:	f004 fca3 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800160e:	2386      	movs	r3, #134	; 0x86
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800161e:	230b      	movs	r3, #11
 8001620:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001626:	4619      	mov	r1, r3
 8001628:	4812      	ldr	r0, [pc, #72]	; (8001674 <MX_GPIO_Init+0x57c>)
 800162a:	f004 fc93 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800162e:	2328      	movs	r3, #40	; 0x28
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163a:	2303      	movs	r3, #3
 800163c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800163e:	230a      	movs	r3, #10
 8001640:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001646:	4619      	mov	r1, r3
 8001648:	480a      	ldr	r0, [pc, #40]	; (8001674 <MX_GPIO_Init+0x57c>)
 800164a:	f004 fc83 	bl	8005f54 <HAL_GPIO_Init>

}
 800164e:	bf00      	nop
 8001650:	3740      	adds	r7, #64	; 0x40
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40022000 	.word	0x40022000
 800165c:	40021800 	.word	0x40021800
 8001660:	40020c00 	.word	0x40020c00
 8001664:	40020800 	.word	0x40020800
 8001668:	40022800 	.word	0x40022800
 800166c:	40021c00 	.word	0x40021c00
 8001670:	40020400 	.word	0x40020400
 8001674:	40020000 	.word	0x40020000

08001678 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <MX_I2C1_Init+0x74>)
 800167e:	4a1c      	ldr	r2, [pc, #112]	; (80016f0 <MX_I2C1_Init+0x78>)
 8001680:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <MX_I2C1_Init+0x74>)
 8001684:	4a1b      	ldr	r2, [pc, #108]	; (80016f4 <MX_I2C1_Init+0x7c>)
 8001686:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001688:	4b18      	ldr	r3, [pc, #96]	; (80016ec <MX_I2C1_Init+0x74>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <MX_I2C1_Init+0x74>)
 8001690:	2201      	movs	r2, #1
 8001692:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001694:	4b15      	ldr	r3, [pc, #84]	; (80016ec <MX_I2C1_Init+0x74>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <MX_I2C1_Init+0x74>)
 800169c:	2200      	movs	r2, #0
 800169e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <MX_I2C1_Init+0x74>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_I2C1_Init+0x74>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <MX_I2C1_Init+0x74>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016b2:	480e      	ldr	r0, [pc, #56]	; (80016ec <MX_I2C1_Init+0x74>)
 80016b4:	f004 ff38 	bl	8006528 <HAL_I2C_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016be:	f000 fc8b 	bl	8001fd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016c2:	2100      	movs	r1, #0
 80016c4:	4809      	ldr	r0, [pc, #36]	; (80016ec <MX_I2C1_Init+0x74>)
 80016c6:	f005 fcc5 	bl	8007054 <HAL_I2CEx_ConfigAnalogFilter>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016d0:	f000 fc82 	bl	8001fd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016d4:	2100      	movs	r1, #0
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_I2C1_Init+0x74>)
 80016d8:	f005 fd07 	bl	80070ea <HAL_I2CEx_ConfigDigitalFilter>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016e2:	f000 fc79 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000434 	.word	0x20000434
 80016f0:	40005400 	.word	0x40005400
 80016f4:	00c0eaff 	.word	0x00c0eaff

080016f8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <MX_I2C3_Init+0x74>)
 80016fe:	4a1c      	ldr	r2, [pc, #112]	; (8001770 <MX_I2C3_Init+0x78>)
 8001700:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001702:	4b1a      	ldr	r3, [pc, #104]	; (800176c <MX_I2C3_Init+0x74>)
 8001704:	4a1b      	ldr	r2, [pc, #108]	; (8001774 <MX_I2C3_Init+0x7c>)
 8001706:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001708:	4b18      	ldr	r3, [pc, #96]	; (800176c <MX_I2C3_Init+0x74>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800170e:	4b17      	ldr	r3, [pc, #92]	; (800176c <MX_I2C3_Init+0x74>)
 8001710:	2201      	movs	r2, #1
 8001712:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001714:	4b15      	ldr	r3, [pc, #84]	; (800176c <MX_I2C3_Init+0x74>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <MX_I2C3_Init+0x74>)
 800171c:	2200      	movs	r2, #0
 800171e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <MX_I2C3_Init+0x74>)
 8001722:	2200      	movs	r2, #0
 8001724:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_I2C3_Init+0x74>)
 8001728:	2200      	movs	r2, #0
 800172a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_I2C3_Init+0x74>)
 800172e:	2200      	movs	r2, #0
 8001730:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001732:	480e      	ldr	r0, [pc, #56]	; (800176c <MX_I2C3_Init+0x74>)
 8001734:	f004 fef8 	bl	8006528 <HAL_I2C_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800173e:	f000 fc4b 	bl	8001fd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001742:	2100      	movs	r1, #0
 8001744:	4809      	ldr	r0, [pc, #36]	; (800176c <MX_I2C3_Init+0x74>)
 8001746:	f005 fc85 	bl	8007054 <HAL_I2CEx_ConfigAnalogFilter>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001750:	f000 fc42 	bl	8001fd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001754:	2100      	movs	r1, #0
 8001756:	4805      	ldr	r0, [pc, #20]	; (800176c <MX_I2C3_Init+0x74>)
 8001758:	f005 fcc7 	bl	80070ea <HAL_I2CEx_ConfigDigitalFilter>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001762:	f000 fc39 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000488 	.word	0x20000488
 8001770:	40005c00 	.word	0x40005c00
 8001774:	00c0eaff 	.word	0x00c0eaff

08001778 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b0ac      	sub	sp, #176	; 0xb0
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001790:	f107 0318 	add.w	r3, r7, #24
 8001794:	2284      	movs	r2, #132	; 0x84
 8001796:	2100      	movs	r1, #0
 8001798:	4618      	mov	r0, r3
 800179a:	f00a fb0b 	bl	800bdb4 <memset>
  if(i2cHandle->Instance==I2C1)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a44      	ldr	r2, [pc, #272]	; (80018b4 <HAL_I2C_MspInit+0x13c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d13d      	bne.n	8001824 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017ae:	2300      	movs	r3, #0
 80017b0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017b2:	f107 0318 	add.w	r3, r7, #24
 80017b6:	4618      	mov	r0, r3
 80017b8:	f006 fd78 	bl	80082ac <HAL_RCCEx_PeriphCLKConfig>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80017c2:	f000 fc09 	bl	8001fd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	4b3c      	ldr	r3, [pc, #240]	; (80018b8 <HAL_I2C_MspInit+0x140>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a3b      	ldr	r2, [pc, #236]	; (80018b8 <HAL_I2C_MspInit+0x140>)
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b39      	ldr	r3, [pc, #228]	; (80018b8 <HAL_I2C_MspInit+0x140>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017e6:	2312      	movs	r3, #18
 80017e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017f8:	2304      	movs	r3, #4
 80017fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001802:	4619      	mov	r1, r3
 8001804:	482d      	ldr	r0, [pc, #180]	; (80018bc <HAL_I2C_MspInit+0x144>)
 8001806:	f004 fba5 	bl	8005f54 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800180a:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <HAL_I2C_MspInit+0x140>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	4a2a      	ldr	r2, [pc, #168]	; (80018b8 <HAL_I2C_MspInit+0x140>)
 8001810:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001814:	6413      	str	r3, [r2, #64]	; 0x40
 8001816:	4b28      	ldr	r3, [pc, #160]	; (80018b8 <HAL_I2C_MspInit+0x140>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001822:	e042      	b.n	80018aa <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a25      	ldr	r2, [pc, #148]	; (80018c0 <HAL_I2C_MspInit+0x148>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d13d      	bne.n	80018aa <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800182e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001832:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001834:	2300      	movs	r3, #0
 8001836:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800183a:	f107 0318 	add.w	r3, r7, #24
 800183e:	4618      	mov	r0, r3
 8001840:	f006 fd34 	bl	80082ac <HAL_RCCEx_PeriphCLKConfig>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800184a:	f000 fbc5 	bl	8001fd8 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800184e:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <HAL_I2C_MspInit+0x140>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a19      	ldr	r2, [pc, #100]	; (80018b8 <HAL_I2C_MspInit+0x140>)
 8001854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <HAL_I2C_MspInit+0x140>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001866:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800186a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800186e:	2312      	movs	r3, #18
 8001870:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001874:	2301      	movs	r3, #1
 8001876:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187a:	2303      	movs	r3, #3
 800187c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001880:	2304      	movs	r3, #4
 8001882:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001886:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800188a:	4619      	mov	r1, r3
 800188c:	480d      	ldr	r0, [pc, #52]	; (80018c4 <HAL_I2C_MspInit+0x14c>)
 800188e:	f004 fb61 	bl	8005f54 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_I2C_MspInit+0x140>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <HAL_I2C_MspInit+0x140>)
 8001898:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_I2C_MspInit+0x140>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
}
 80018aa:	bf00      	nop
 80018ac:	37b0      	adds	r7, #176	; 0xb0
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40005400 	.word	0x40005400
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020400 	.word	0x40020400
 80018c0:	40005c00 	.word	0x40005c00
 80018c4:	40021c00 	.word	0x40021c00

080018c8 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a15      	ldr	r2, [pc, #84]	; (800192c <HAL_I2C_MspDeInit+0x64>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d110      	bne.n	80018fc <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_I2C_MspDeInit+0x68>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	4a14      	ldr	r2, [pc, #80]	; (8001930 <HAL_I2C_MspDeInit+0x68>)
 80018e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018e4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80018e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ea:	4812      	ldr	r0, [pc, #72]	; (8001934 <HAL_I2C_MspDeInit+0x6c>)
 80018ec:	f004 fcde 	bl	80062ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80018f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018f4:	480f      	ldr	r0, [pc, #60]	; (8001934 <HAL_I2C_MspDeInit+0x6c>)
 80018f6:	f004 fcd9 	bl	80062ac <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 80018fa:	e013      	b.n	8001924 <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0d      	ldr	r2, [pc, #52]	; (8001938 <HAL_I2C_MspDeInit+0x70>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d10e      	bne.n	8001924 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <HAL_I2C_MspDeInit+0x68>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a09      	ldr	r2, [pc, #36]	; (8001930 <HAL_I2C_MspDeInit+0x68>)
 800190c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8001912:	2180      	movs	r1, #128	; 0x80
 8001914:	4809      	ldr	r0, [pc, #36]	; (800193c <HAL_I2C_MspDeInit+0x74>)
 8001916:	f004 fcc9 	bl	80062ac <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 800191a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800191e:	4807      	ldr	r0, [pc, #28]	; (800193c <HAL_I2C_MspDeInit+0x74>)
 8001920:	f004 fcc4 	bl	80062ac <HAL_GPIO_DeInit>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40005400 	.word	0x40005400
 8001930:	40023800 	.word	0x40023800
 8001934:	40020400 	.word	0x40020400
 8001938:	40005c00 	.word	0x40005c00
 800193c:	40021c00 	.word	0x40021c00

08001940 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08e      	sub	sp, #56	; 0x38
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	2234      	movs	r2, #52	; 0x34
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f00a fa31 	bl	800bdb4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001952:	4b3a      	ldr	r3, [pc, #232]	; (8001a3c <MX_LTDC_Init+0xfc>)
 8001954:	4a3a      	ldr	r2, [pc, #232]	; (8001a40 <MX_LTDC_Init+0x100>)
 8001956:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001958:	4b38      	ldr	r3, [pc, #224]	; (8001a3c <MX_LTDC_Init+0xfc>)
 800195a:	2200      	movs	r2, #0
 800195c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800195e:	4b37      	ldr	r3, [pc, #220]	; (8001a3c <MX_LTDC_Init+0xfc>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001964:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <MX_LTDC_Init+0xfc>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800196a:	4b34      	ldr	r3, [pc, #208]	; (8001a3c <MX_LTDC_Init+0xfc>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001970:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <MX_LTDC_Init+0xfc>)
 8001972:	2228      	movs	r2, #40	; 0x28
 8001974:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001976:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <MX_LTDC_Init+0xfc>)
 8001978:	2209      	movs	r2, #9
 800197a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800197c:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <MX_LTDC_Init+0xfc>)
 800197e:	2235      	movs	r2, #53	; 0x35
 8001980:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001982:	4b2e      	ldr	r3, [pc, #184]	; (8001a3c <MX_LTDC_Init+0xfc>)
 8001984:	220b      	movs	r2, #11
 8001986:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001988:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <MX_LTDC_Init+0xfc>)
 800198a:	f240 2215 	movw	r2, #533	; 0x215
 800198e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001990:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <MX_LTDC_Init+0xfc>)
 8001992:	f240 121b 	movw	r2, #283	; 0x11b
 8001996:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001998:	4b28      	ldr	r3, [pc, #160]	; (8001a3c <MX_LTDC_Init+0xfc>)
 800199a:	f240 2235 	movw	r2, #565	; 0x235
 800199e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80019a0:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <MX_LTDC_Init+0xfc>)
 80019a2:	f240 121d 	movw	r2, #285	; 0x11d
 80019a6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80019a8:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <MX_LTDC_Init+0xfc>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80019b0:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <MX_LTDC_Init+0xfc>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80019b8:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <MX_LTDC_Init+0xfc>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80019c0:	481e      	ldr	r0, [pc, #120]	; (8001a3c <MX_LTDC_Init+0xfc>)
 80019c2:	f005 fbdf 	bl	8007184 <HAL_LTDC_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80019cc:	f000 fb04 	bl	8001fd8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80019d4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80019d8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80019de:	f44f 7388 	mov.w	r3, #272	; 0x110
 80019e2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80019e4:	2302      	movs	r3, #2
 80019e6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80019e8:	23ff      	movs	r3, #255	; 0xff
 80019ea:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80019f0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019f4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80019f6:	2307      	movs	r3, #7
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80019fa:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80019fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001a00:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001a06:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001a0a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	2200      	movs	r2, #0
 8001a22:	4619      	mov	r1, r3
 8001a24:	4805      	ldr	r0, [pc, #20]	; (8001a3c <MX_LTDC_Init+0xfc>)
 8001a26:	f005 fd3f 	bl	80074a8 <HAL_LTDC_ConfigLayer>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001a30:	f000 fad2 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001a34:	bf00      	nop
 8001a36:	3738      	adds	r7, #56	; 0x38
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	200004dc 	.word	0x200004dc
 8001a40:	40016800 	.word	0x40016800

08001a44 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b0ae      	sub	sp, #184	; 0xb8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a5c:	f107 0320 	add.w	r3, r7, #32
 8001a60:	2284      	movs	r2, #132	; 0x84
 8001a62:	2100      	movs	r1, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f00a f9a5 	bl	800bdb4 <memset>
  if(ltdcHandle->Instance==LTDC)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a6f      	ldr	r2, [pc, #444]	; (8001c2c <HAL_LTDC_MspInit+0x1e8>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	f040 80d6 	bne.w	8001c22 <HAL_LTDC_MspInit+0x1de>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001a76:	2308      	movs	r3, #8
 8001a78:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001a7a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a7e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001a80:	2305      	movs	r3, #5
 8001a82:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001a84:	2302      	movs	r3, #2
 8001a86:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001a90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a94:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a96:	f107 0320 	add.w	r3, r7, #32
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f006 fc06 	bl	80082ac <HAL_RCCEx_PeriphCLKConfig>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8001aa6:	f000 fa97 	bl	8001fd8 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001aaa:	4b61      	ldr	r3, [pc, #388]	; (8001c30 <HAL_LTDC_MspInit+0x1ec>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	4a60      	ldr	r2, [pc, #384]	; (8001c30 <HAL_LTDC_MspInit+0x1ec>)
 8001ab0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab6:	4b5e      	ldr	r3, [pc, #376]	; (8001c30 <HAL_LTDC_MspInit+0x1ec>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001abe:	61fb      	str	r3, [r7, #28]
 8001ac0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ac2:	4b5b      	ldr	r3, [pc, #364]	; (8001c30 <HAL_LTDC_MspInit+0x1ec>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a5a      	ldr	r2, [pc, #360]	; (8001c30 <HAL_LTDC_MspInit+0x1ec>)
 8001ac8:	f043 0310 	orr.w	r3, r3, #16
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b58      	ldr	r3, [pc, #352]	; (8001c30 <HAL_LTDC_MspInit+0x1ec>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	61bb      	str	r3, [r7, #24]
 8001ad8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001ada:	4b55      	ldr	r3, [pc, #340]	; (8001c30 <HAL_LTDC_MspInit+0x1ec>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a54      	ldr	r2, [pc, #336]	; (8001c30 <HAL_LTDC_MspInit+0x1ec>)
 8001ae0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b52      	ldr	r3, [pc, #328]	; (8001c30 <HAL_LTDC_MspInit+0x1ec>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001af2:	4b4f      	ldr	r3, [pc, #316]	; (8001c30 <HAL_LTDC_MspInit+0x1ec>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a4e      	ldr	r2, [pc, #312]	; (8001c30 <HAL_LTDC_MspInit+0x1ec>)
 8001af8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b4c      	ldr	r3, [pc, #304]	; (8001c30 <HAL_LTDC_MspInit+0x1ec>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b0a:	4b49      	ldr	r3, [pc, #292]	; (8001c30 <HAL_LTDC_MspInit+0x1ec>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a48      	ldr	r2, [pc, #288]	; (8001c30 <HAL_LTDC_MspInit+0x1ec>)
 8001b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b46      	ldr	r3, [pc, #280]	; (8001c30 <HAL_LTDC_MspInit+0x1ec>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b22:	4b43      	ldr	r3, [pc, #268]	; (8001c30 <HAL_LTDC_MspInit+0x1ec>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a42      	ldr	r2, [pc, #264]	; (8001c30 <HAL_LTDC_MspInit+0x1ec>)
 8001b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b40      	ldr	r3, [pc, #256]	; (8001c30 <HAL_LTDC_MspInit+0x1ec>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001b3a:	2310      	movs	r3, #16
 8001b3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b52:	230e      	movs	r3, #14
 8001b54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4835      	ldr	r0, [pc, #212]	; (8001c34 <HAL_LTDC_MspInit+0x1f0>)
 8001b60:	f004 f9f8 	bl	8005f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001b64:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001b68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b7e:	230e      	movs	r3, #14
 8001b80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001b84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b88:	4619      	mov	r1, r3
 8001b8a:	482b      	ldr	r0, [pc, #172]	; (8001c38 <HAL_LTDC_MspInit+0x1f4>)
 8001b8c:	f004 f9e2 	bl	8005f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001b90:	23f7      	movs	r3, #247	; 0xf7
 8001b92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ba8:	230e      	movs	r3, #14
 8001baa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001bae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4821      	ldr	r0, [pc, #132]	; (8001c3c <HAL_LTDC_MspInit+0x1f8>)
 8001bb6:	f004 f9cd 	bl	8005f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001bd4:	2309      	movs	r3, #9
 8001bd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001bda:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bde:	4619      	mov	r1, r3
 8001be0:	4817      	ldr	r0, [pc, #92]	; (8001c40 <HAL_LTDC_MspInit+0x1fc>)
 8001be2:	f004 f9b7 	bl	8005f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001be6:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001bea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c00:	230e      	movs	r3, #14
 8001c02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c06:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	480d      	ldr	r0, [pc, #52]	; (8001c44 <HAL_LTDC_MspInit+0x200>)
 8001c0e:	f004 f9a1 	bl	8005f54 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2105      	movs	r1, #5
 8001c16:	2058      	movs	r0, #88	; 0x58
 8001c18:	f003 fb38 	bl	800528c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001c1c:	2058      	movs	r0, #88	; 0x58
 8001c1e:	f003 fb51 	bl	80052c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001c22:	bf00      	nop
 8001c24:	37b8      	adds	r7, #184	; 0xb8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40016800 	.word	0x40016800
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40022400 	.word	0x40022400
 8001c3c:	40022800 	.word	0x40022800
 8001c40:	40021800 	.word	0x40021800
 8001c44:	40022000 	.word	0x40022000

08001c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c48:	b590      	push	{r4, r7, lr}
 8001c4a:	b097      	sub	sp, #92	; 0x5c
 8001c4c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	char text[50]={};
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	222e      	movs	r2, #46	; 0x2e
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f00a f8aa 	bl	800bdb4 <memset>
	static TS_StateTypeDef  TS_State;
	uint32_t potl,potr,joystick_h;
	ADC_ChannelConfTypeDef sConfig = {0};
 8001c60:	463b      	mov	r3, r7
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c74:	f002 fe07 	bl	8004886 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c78:	f000 f92a 	bl	8001ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c7c:	f7ff fa3c 	bl	80010f8 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001c80:	f7fe fce6 	bl	8000650 <MX_ADC3_Init>
  MX_DMA2D_Init();
 8001c84:	f7fe fe16 	bl	80008b4 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001c88:	f7fe fe6c 	bl	8000964 <MX_FMC_Init>
  MX_I2C1_Init();
 8001c8c:	f7ff fcf4 	bl	8001678 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001c90:	f7ff fd32 	bl	80016f8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001c94:	f7ff fe54 	bl	8001940 <MX_LTDC_Init>
  MX_RTC_Init();
 8001c98:	f000 f9a4 	bl	8001fe4 <MX_RTC_Init>
  MX_SPI2_Init();
 8001c9c:	f000 fa74 	bl	8002188 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001ca0:	f002 fa04 	bl	80040ac <MX_TIM1_Init>
  MX_TIM2_Init();
 8001ca4:	f002 fa56 	bl	8004154 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ca8:	f002 faa2 	bl	80041f0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001cac:	f002 faee 	bl	800428c <MX_TIM5_Init>
  MX_TIM8_Init();
 8001cb0:	f002 fb3a 	bl	8004328 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001cb4:	f002 fc4e 	bl	8004554 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001cb8:	f002 fc7c 	bl	80045b4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001cbc:	f7fe fc76 	bl	80005ac <MX_ADC1_Init>
  MX_DAC_Init();
 8001cc0:	f7fe fd86 	bl	80007d0 <MX_DAC_Init>
  MX_UART7_Init();
 8001cc4:	f002 fc16 	bl	80044f4 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8001cc8:	f000 fca2 	bl	8002610 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001ccc:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f000 fd35 	bl	8002740 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8001cd6:	f000 fd0b 	bl	80026f0 <BSP_LCD_GetXSize>
 8001cda:	4604      	mov	r4, r0
 8001cdc:	f000 fd1c 	bl	8002718 <BSP_LCD_GetYSize>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	fb04 f303 	mul.w	r3, r4, r3
 8001ce6:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4619      	mov	r1, r3
 8001cee:	2001      	movs	r0, #1
 8001cf0:	f000 fd26 	bl	8002740 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8001cf4:	f001 fa24 	bl	8003140 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f000 fd81 	bl	8002800 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_RED);
 8001cfe:	4867      	ldr	r0, [pc, #412]	; (8001e9c <main+0x254>)
 8001d00:	f000 fdf0 	bl	80028e4 <BSP_LCD_Clear>
  BSP_LCD_DrawBitmap(100,100,(uint8_t*)apple_bmp);
 8001d04:	4a66      	ldr	r2, [pc, #408]	; (8001ea0 <main+0x258>)
 8001d06:	2164      	movs	r1, #100	; 0x64
 8001d08:	2064      	movs	r0, #100	; 0x64
 8001d0a:	f001 f8c7 	bl	8002e9c <BSP_LCD_DrawBitmap>
  BSP_LCD_SelectLayer(1);
 8001d0e:	2001      	movs	r0, #1
 8001d10:	f000 fd76 	bl	8002800 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(00);
 8001d14:	2000      	movs	r0, #0
 8001d16:	f000 fde5 	bl	80028e4 <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font12);
 8001d1a:	4862      	ldr	r0, [pc, #392]	; (8001ea4 <main+0x25c>)
 8001d1c:	f000 fdb2 	bl	8002884 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001d20:	4861      	ldr	r0, [pc, #388]	; (8001ea8 <main+0x260>)
 8001d22:	f000 fd7d 	bl	8002820 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(00);
 8001d26:	2000      	movs	r0, #0
 8001d28:	f000 fd92 	bl	8002850 <BSP_LCD_SetBackColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001d2c:	f000 fce0 	bl	80026f0 <BSP_LCD_GetXSize>
 8001d30:	4603      	mov	r3, r0
 8001d32:	b29c      	uxth	r4, r3
 8001d34:	f000 fcf0 	bl	8002718 <BSP_LCD_GetYSize>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4620      	mov	r0, r4
 8001d40:	f001 fe10 	bl	8003964 <BSP_TS_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001d44:	f7fe ff12 	bl	8000b6c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d48:	f008 fde6 	bl	800a918 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8001d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d50:	4856      	ldr	r0, [pc, #344]	; (8001eac <main+0x264>)
 8001d52:	f004 fbb7 	bl	80064c4 <HAL_GPIO_ReadPin>
 8001d56:	4603      	mov	r3, r0
 8001d58:	461a      	mov	r2, r3
 8001d5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d5e:	4854      	ldr	r0, [pc, #336]	; (8001eb0 <main+0x268>)
 8001d60:	f004 fbc8 	bl	80064f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,HAL_GPIO_ReadPin(BP2_GPIO_Port,BP2_Pin));
 8001d64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d68:	4850      	ldr	r0, [pc, #320]	; (8001eac <main+0x264>)
 8001d6a:	f004 fbab 	bl	80064c4 <HAL_GPIO_ReadPin>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	461a      	mov	r2, r3
 8001d72:	2120      	movs	r1, #32
 8001d74:	484f      	ldr	r0, [pc, #316]	; (8001eb4 <main+0x26c>)
 8001d76:	f004 fbbd 	bl	80064f4 <HAL_GPIO_WritePin>
		sprintf(text,"BP1 : %d",HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8001d7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d7e:	484b      	ldr	r0, [pc, #300]	; (8001eac <main+0x264>)
 8001d80:	f004 fba0 	bl	80064c4 <HAL_GPIO_ReadPin>
 8001d84:	4603      	mov	r3, r0
 8001d86:	461a      	mov	r2, r3
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	494a      	ldr	r1, [pc, #296]	; (8001eb8 <main+0x270>)
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f009 fff0 	bl	800bd74 <siprintf>
		BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);
 8001d94:	f107 0310 	add.w	r3, r7, #16
 8001d98:	4619      	mov	r1, r3
 8001d9a:	2005      	movs	r0, #5
 8001d9c:	f000 fed6 	bl	8002b4c <BSP_LCD_DisplayStringAtLine>

		sConfig.Channel = ADC_CHANNEL_6;
 8001da0:	2306      	movs	r3, #6
 8001da2:	603b      	str	r3, [r7, #0]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001da4:	463b      	mov	r3, r7
 8001da6:	4619      	mov	r1, r3
 8001da8:	4844      	ldr	r0, [pc, #272]	; (8001ebc <main+0x274>)
 8001daa:	f002 ff67 	bl	8004c7c <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8001dae:	4843      	ldr	r0, [pc, #268]	; (8001ebc <main+0x274>)
 8001db0:	f002 fdfe 	bl	80049b0 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8001db4:	bf00      	nop
 8001db6:	2164      	movs	r1, #100	; 0x64
 8001db8:	4840      	ldr	r0, [pc, #256]	; (8001ebc <main+0x274>)
 8001dba:	f002 fec7 	bl	8004b4c <HAL_ADC_PollForConversion>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f8      	bne.n	8001db6 <main+0x16e>
		potr = HAL_ADC_GetValue(&hadc3);
 8001dc4:	483d      	ldr	r0, [pc, #244]	; (8001ebc <main+0x274>)
 8001dc6:	f002 ff4c 	bl	8004c62 <HAL_ADC_GetValue>
 8001dca:	64f8      	str	r0, [r7, #76]	; 0x4c

		sConfig.Channel = ADC_CHANNEL_7;
 8001dcc:	2307      	movs	r3, #7
 8001dce:	603b      	str	r3, [r7, #0]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001dd0:	463b      	mov	r3, r7
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4839      	ldr	r0, [pc, #228]	; (8001ebc <main+0x274>)
 8001dd6:	f002 ff51 	bl	8004c7c <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8001dda:	4838      	ldr	r0, [pc, #224]	; (8001ebc <main+0x274>)
 8001ddc:	f002 fde8 	bl	80049b0 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8001de0:	bf00      	nop
 8001de2:	2164      	movs	r1, #100	; 0x64
 8001de4:	4835      	ldr	r0, [pc, #212]	; (8001ebc <main+0x274>)
 8001de6:	f002 feb1 	bl	8004b4c <HAL_ADC_PollForConversion>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f8      	bne.n	8001de2 <main+0x19a>
		potl = HAL_ADC_GetValue(&hadc3);
 8001df0:	4832      	ldr	r0, [pc, #200]	; (8001ebc <main+0x274>)
 8001df2:	f002 ff36 	bl	8004c62 <HAL_ADC_GetValue>
 8001df6:	64b8      	str	r0, [r7, #72]	; 0x48

		sConfig.Channel = ADC_CHANNEL_8;
 8001df8:	2308      	movs	r3, #8
 8001dfa:	603b      	str	r3, [r7, #0]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001dfc:	463b      	mov	r3, r7
 8001dfe:	4619      	mov	r1, r3
 8001e00:	482e      	ldr	r0, [pc, #184]	; (8001ebc <main+0x274>)
 8001e02:	f002 ff3b 	bl	8004c7c <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8001e06:	482d      	ldr	r0, [pc, #180]	; (8001ebc <main+0x274>)
 8001e08:	f002 fdd2 	bl	80049b0 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8001e0c:	bf00      	nop
 8001e0e:	2164      	movs	r1, #100	; 0x64
 8001e10:	482a      	ldr	r0, [pc, #168]	; (8001ebc <main+0x274>)
 8001e12:	f002 fe9b 	bl	8004b4c <HAL_ADC_PollForConversion>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f8      	bne.n	8001e0e <main+0x1c6>
		joystick_v = HAL_ADC_GetValue(&hadc3);
 8001e1c:	4827      	ldr	r0, [pc, #156]	; (8001ebc <main+0x274>)
 8001e1e:	f002 ff20 	bl	8004c62 <HAL_ADC_GetValue>
 8001e22:	4603      	mov	r3, r0
 8001e24:	4a26      	ldr	r2, [pc, #152]	; (8001ec0 <main+0x278>)
 8001e26:	6013      	str	r3, [r2, #0]

		HAL_ADC_Start(&hadc1);
 8001e28:	4826      	ldr	r0, [pc, #152]	; (8001ec4 <main+0x27c>)
 8001e2a:	f002 fdc1 	bl	80049b0 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8001e2e:	bf00      	nop
 8001e30:	2164      	movs	r1, #100	; 0x64
 8001e32:	4824      	ldr	r0, [pc, #144]	; (8001ec4 <main+0x27c>)
 8001e34:	f002 fe8a 	bl	8004b4c <HAL_ADC_PollForConversion>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f8      	bne.n	8001e30 <main+0x1e8>
		joystick_h = HAL_ADC_GetValue(&hadc1);
 8001e3e:	4821      	ldr	r0, [pc, #132]	; (8001ec4 <main+0x27c>)
 8001e40:	f002 ff0f 	bl	8004c62 <HAL_ADC_GetValue>
 8001e44:	6478      	str	r0, [r7, #68]	; 0x44

		sprintf(text,"POTL : %4u POTR : %4u joy_v : %4u joy_h : %4u",(uint16_t)potl,(uint16_t)potr,(uint16_t)joystick_v,(uint16_t)joystick_h);
 8001e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	461c      	mov	r4, r3
 8001e52:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <main+0x278>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e5a:	b292      	uxth	r2, r2
 8001e5c:	f107 0010 	add.w	r0, r7, #16
 8001e60:	9201      	str	r2, [sp, #4]
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	4623      	mov	r3, r4
 8001e66:	460a      	mov	r2, r1
 8001e68:	4917      	ldr	r1, [pc, #92]	; (8001ec8 <main+0x280>)
 8001e6a:	f009 ff83 	bl	800bd74 <siprintf>
		BSP_LCD_DisplayStringAtLine(9,(uint8_t*) text);
 8001e6e:	f107 0310 	add.w	r3, r7, #16
 8001e72:	4619      	mov	r1, r3
 8001e74:	2009      	movs	r0, #9
 8001e76:	f000 fe69 	bl	8002b4c <BSP_LCD_DisplayStringAtLine>

		BSP_TS_GetState(&TS_State);
 8001e7a:	4814      	ldr	r0, [pc, #80]	; (8001ecc <main+0x284>)
 8001e7c:	f001 fdb2 	bl	80039e4 <BSP_TS_GetState>
		if(TS_State.touchDetected){
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <main+0x284>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f43f af61 	beq.w	8001d4c <main+0x104>
			//TODO : Il faudrait vérifier que le cercle reste entièrement sur l'écran...
		  BSP_LCD_FillCircle(TS_State.touchX[0],TS_State.touchY[0],4);
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <main+0x284>)
 8001e8c:	885b      	ldrh	r3, [r3, #2]
 8001e8e:	4a0f      	ldr	r2, [pc, #60]	; (8001ecc <main+0x284>)
 8001e90:	8991      	ldrh	r1, [r2, #12]
 8001e92:	2204      	movs	r2, #4
 8001e94:	4618      	mov	r0, r3
 8001e96:	f001 f8b3 	bl	8003000 <BSP_LCD_FillCircle>
	  	HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8001e9a:	e757      	b.n	8001d4c <main+0x104>
 8001e9c:	ffff0000 	.word	0xffff0000
 8001ea0:	0800c740 	.word	0x0800c740
 8001ea4:	20000030 	.word	0x20000030
 8001ea8:	ff0000ff 	.word	0xff0000ff
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	40021c00 	.word	0x40021c00
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	0800c6fc 	.word	0x0800c6fc
 8001ebc:	20000100 	.word	0x20000100
 8001ec0:	20000584 	.word	0x20000584
 8001ec4:	200000b8 	.word	0x200000b8
 8001ec8:	0800c708 	.word	0x0800c708
 8001ecc:	20000588 	.word	0x20000588

08001ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b094      	sub	sp, #80	; 0x50
 8001ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ed6:	f107 0320 	add.w	r3, r7, #32
 8001eda:	2230      	movs	r2, #48	; 0x30
 8001edc:	2100      	movs	r1, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f009 ff68 	bl	800bdb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee4:	f107 030c 	add.w	r3, r7, #12
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ef4:	f005 fcbe 	bl	8007874 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef8:	4b2c      	ldr	r3, [pc, #176]	; (8001fac <SystemClock_Config+0xdc>)
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	4a2b      	ldr	r2, [pc, #172]	; (8001fac <SystemClock_Config+0xdc>)
 8001efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f02:	6413      	str	r3, [r2, #64]	; 0x40
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <SystemClock_Config+0xdc>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f10:	4b27      	ldr	r3, [pc, #156]	; (8001fb0 <SystemClock_Config+0xe0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a26      	ldr	r2, [pc, #152]	; (8001fb0 <SystemClock_Config+0xe0>)
 8001f16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b24      	ldr	r3, [pc, #144]	; (8001fb0 <SystemClock_Config+0xe0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001f28:	2309      	movs	r3, #9
 8001f2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f32:	2301      	movs	r3, #1
 8001f34:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f36:	2302      	movs	r3, #2
 8001f38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001f40:	2319      	movs	r3, #25
 8001f42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001f44:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001f48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001f4e:	2309      	movs	r3, #9
 8001f50:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f52:	f107 0320 	add.w	r3, r7, #32
 8001f56:	4618      	mov	r0, r3
 8001f58:	f005 fcec 	bl	8007934 <HAL_RCC_OscConfig>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001f62:	f000 f839 	bl	8001fd8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f66:	f005 fc95 	bl	8007894 <HAL_PWREx_EnableOverDrive>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001f70:	f000 f832 	bl	8001fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f74:	230f      	movs	r3, #15
 8001f76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001f8c:	f107 030c 	add.w	r3, r7, #12
 8001f90:	2106      	movs	r1, #6
 8001f92:	4618      	mov	r0, r3
 8001f94:	f005 ff72 	bl	8007e7c <HAL_RCC_ClockConfig>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001f9e:	f000 f81b 	bl	8001fd8 <Error_Handler>
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	3750      	adds	r7, #80	; 0x50
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40007000 	.word	0x40007000

08001fb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d101      	bne.n	8001fca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fc6:	f002 fc6b 	bl	80048a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40001000 	.word	0x40001000

08001fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fdc:	b672      	cpsid	i
}
 8001fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <Error_Handler+0x8>
	...

08001fe4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b090      	sub	sp, #64	; 0x40
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001fea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
 8001ff8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001ffe:	463b      	mov	r3, r7
 8002000:	2228      	movs	r2, #40	; 0x28
 8002002:	2100      	movs	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f009 fed5 	bl	800bdb4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800200a:	4b46      	ldr	r3, [pc, #280]	; (8002124 <MX_RTC_Init+0x140>)
 800200c:	4a46      	ldr	r2, [pc, #280]	; (8002128 <MX_RTC_Init+0x144>)
 800200e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002010:	4b44      	ldr	r3, [pc, #272]	; (8002124 <MX_RTC_Init+0x140>)
 8002012:	2200      	movs	r2, #0
 8002014:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002016:	4b43      	ldr	r3, [pc, #268]	; (8002124 <MX_RTC_Init+0x140>)
 8002018:	227f      	movs	r2, #127	; 0x7f
 800201a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800201c:	4b41      	ldr	r3, [pc, #260]	; (8002124 <MX_RTC_Init+0x140>)
 800201e:	22ff      	movs	r2, #255	; 0xff
 8002020:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002022:	4b40      	ldr	r3, [pc, #256]	; (8002124 <MX_RTC_Init+0x140>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002028:	4b3e      	ldr	r3, [pc, #248]	; (8002124 <MX_RTC_Init+0x140>)
 800202a:	2200      	movs	r2, #0
 800202c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800202e:	4b3d      	ldr	r3, [pc, #244]	; (8002124 <MX_RTC_Init+0x140>)
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002034:	483b      	ldr	r0, [pc, #236]	; (8002124 <MX_RTC_Init+0x140>)
 8002036:	f006 fd29 	bl	8008a8c <HAL_RTC_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002040:	f7ff ffca 	bl	8001fd8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002044:	2300      	movs	r3, #0
 8002046:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800204a:	2300      	movs	r3, #0
 800204c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8002050:	2300      	movs	r3, #0
 8002052:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002056:	2300      	movs	r3, #0
 8002058:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800205e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002062:	2201      	movs	r2, #1
 8002064:	4619      	mov	r1, r3
 8002066:	482f      	ldr	r0, [pc, #188]	; (8002124 <MX_RTC_Init+0x140>)
 8002068:	f006 fd94 	bl	8008b94 <HAL_RTC_SetTime>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002072:	f7ff ffb1 	bl	8001fd8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002076:	2301      	movs	r3, #1
 8002078:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800207c:	2301      	movs	r3, #1
 800207e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8002082:	2301      	movs	r3, #1
 8002084:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8002088:	2300      	movs	r3, #0
 800208a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800208e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002092:	2201      	movs	r2, #1
 8002094:	4619      	mov	r1, r3
 8002096:	4823      	ldr	r0, [pc, #140]	; (8002124 <MX_RTC_Init+0x140>)
 8002098:	f006 fe16 	bl	8008cc8 <HAL_RTC_SetDate>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80020a2:	f7ff ff99 	bl	8001fd8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80020ca:	2301      	movs	r3, #1
 80020cc:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80020d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80020d6:	463b      	mov	r3, r7
 80020d8:	2201      	movs	r2, #1
 80020da:	4619      	mov	r1, r3
 80020dc:	4811      	ldr	r0, [pc, #68]	; (8002124 <MX_RTC_Init+0x140>)
 80020de:	f006 fe77 	bl	8008dd0 <HAL_RTC_SetAlarm>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80020e8:	f7ff ff76 	bl	8001fd8 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80020ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80020f2:	463b      	mov	r3, r7
 80020f4:	2201      	movs	r2, #1
 80020f6:	4619      	mov	r1, r3
 80020f8:	480a      	ldr	r0, [pc, #40]	; (8002124 <MX_RTC_Init+0x140>)
 80020fa:	f006 fe69 	bl	8008dd0 <HAL_RTC_SetAlarm>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8002104:	f7ff ff68 	bl	8001fd8 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002108:	2202      	movs	r2, #2
 800210a:	2100      	movs	r1, #0
 800210c:	4805      	ldr	r0, [pc, #20]	; (8002124 <MX_RTC_Init+0x140>)
 800210e:	f007 f82b 	bl	8009168 <HAL_RTCEx_SetTimeStamp>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8002118:	f7ff ff5e 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800211c:	bf00      	nop
 800211e:	3740      	adds	r7, #64	; 0x40
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	200005b4 	.word	0x200005b4
 8002128:	40002800 	.word	0x40002800

0800212c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b0a4      	sub	sp, #144	; 0x90
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002134:	f107 030c 	add.w	r3, r7, #12
 8002138:	2284      	movs	r2, #132	; 0x84
 800213a:	2100      	movs	r1, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f009 fe39 	bl	800bdb4 <memset>
  if(rtcHandle->Instance==RTC)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a0e      	ldr	r2, [pc, #56]	; (8002180 <HAL_RTC_MspInit+0x54>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d114      	bne.n	8002176 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800214c:	2320      	movs	r3, #32
 800214e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002150:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002154:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002156:	f107 030c 	add.w	r3, r7, #12
 800215a:	4618      	mov	r0, r3
 800215c:	f006 f8a6 	bl	80082ac <HAL_RCCEx_PeriphCLKConfig>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002166:	f7ff ff37 	bl	8001fd8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_RTC_MspInit+0x58>)
 800216c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216e:	4a05      	ldr	r2, [pc, #20]	; (8002184 <HAL_RTC_MspInit+0x58>)
 8002170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002174:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002176:	bf00      	nop
 8002178:	3790      	adds	r7, #144	; 0x90
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40002800 	.word	0x40002800
 8002184:	40023800 	.word	0x40023800

08002188 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800218c:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <MX_SPI2_Init+0x74>)
 800218e:	4a1c      	ldr	r2, [pc, #112]	; (8002200 <MX_SPI2_Init+0x78>)
 8002190:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002192:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <MX_SPI2_Init+0x74>)
 8002194:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002198:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800219a:	4b18      	ldr	r3, [pc, #96]	; (80021fc <MX_SPI2_Init+0x74>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80021a0:	4b16      	ldr	r3, [pc, #88]	; (80021fc <MX_SPI2_Init+0x74>)
 80021a2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80021a6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021a8:	4b14      	ldr	r3, [pc, #80]	; (80021fc <MX_SPI2_Init+0x74>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021ae:	4b13      	ldr	r3, [pc, #76]	; (80021fc <MX_SPI2_Init+0x74>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <MX_SPI2_Init+0x74>)
 80021b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80021ba:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021bc:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <MX_SPI2_Init+0x74>)
 80021be:	2200      	movs	r2, #0
 80021c0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021c2:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <MX_SPI2_Init+0x74>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <MX_SPI2_Init+0x74>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021ce:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <MX_SPI2_Init+0x74>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80021d4:	4b09      	ldr	r3, [pc, #36]	; (80021fc <MX_SPI2_Init+0x74>)
 80021d6:	2207      	movs	r2, #7
 80021d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021da:	4b08      	ldr	r3, [pc, #32]	; (80021fc <MX_SPI2_Init+0x74>)
 80021dc:	2200      	movs	r2, #0
 80021de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <MX_SPI2_Init+0x74>)
 80021e2:	2208      	movs	r2, #8
 80021e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021e6:	4805      	ldr	r0, [pc, #20]	; (80021fc <MX_SPI2_Init+0x74>)
 80021e8:	f007 f8b7 	bl	800935a <HAL_SPI_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80021f2:	f7ff fef1 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	200005d4 	.word	0x200005d4
 8002200:	40003800 	.word	0x40003800

08002204 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08a      	sub	sp, #40	; 0x28
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a25      	ldr	r2, [pc, #148]	; (80022b8 <HAL_SPI_MspInit+0xb4>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d144      	bne.n	80022b0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002226:	4b25      	ldr	r3, [pc, #148]	; (80022bc <HAL_SPI_MspInit+0xb8>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	4a24      	ldr	r2, [pc, #144]	; (80022bc <HAL_SPI_MspInit+0xb8>)
 800222c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002230:	6413      	str	r3, [r2, #64]	; 0x40
 8002232:	4b22      	ldr	r3, [pc, #136]	; (80022bc <HAL_SPI_MspInit+0xb8>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223a:	613b      	str	r3, [r7, #16]
 800223c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800223e:	4b1f      	ldr	r3, [pc, #124]	; (80022bc <HAL_SPI_MspInit+0xb8>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a1e      	ldr	r2, [pc, #120]	; (80022bc <HAL_SPI_MspInit+0xb8>)
 8002244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b1c      	ldr	r3, [pc, #112]	; (80022bc <HAL_SPI_MspInit+0xb8>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002256:	4b19      	ldr	r3, [pc, #100]	; (80022bc <HAL_SPI_MspInit+0xb8>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	4a18      	ldr	r2, [pc, #96]	; (80022bc <HAL_SPI_MspInit+0xb8>)
 800225c:	f043 0302 	orr.w	r3, r3, #2
 8002260:	6313      	str	r3, [r2, #48]	; 0x30
 8002262:	4b16      	ldr	r3, [pc, #88]	; (80022bc <HAL_SPI_MspInit+0xb8>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800226e:	2303      	movs	r3, #3
 8002270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227a:	2303      	movs	r3, #3
 800227c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800227e:	2305      	movs	r3, #5
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	4619      	mov	r1, r3
 8002288:	480d      	ldr	r0, [pc, #52]	; (80022c0 <HAL_SPI_MspInit+0xbc>)
 800228a:	f003 fe63 	bl	8005f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800228e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229c:	2300      	movs	r3, #0
 800229e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022a0:	2305      	movs	r3, #5
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	4619      	mov	r1, r3
 80022aa:	4806      	ldr	r0, [pc, #24]	; (80022c4 <HAL_SPI_MspInit+0xc0>)
 80022ac:	f003 fe52 	bl	8005f54 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80022b0:	bf00      	nop
 80022b2:	3728      	adds	r7, #40	; 0x28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40003800 	.word	0x40003800
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40022000 	.word	0x40022000
 80022c4:	40020400 	.word	0x40020400

080022c8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08c      	sub	sp, #48	; 0x30
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a51      	ldr	r2, [pc, #324]	; (8002418 <I2Cx_MspInit+0x150>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d14d      	bne.n	8002374 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80022d8:	4b50      	ldr	r3, [pc, #320]	; (800241c <I2Cx_MspInit+0x154>)
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022dc:	4a4f      	ldr	r2, [pc, #316]	; (800241c <I2Cx_MspInit+0x154>)
 80022de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e2:	6313      	str	r3, [r2, #48]	; 0x30
 80022e4:	4b4d      	ldr	r3, [pc, #308]	; (800241c <I2Cx_MspInit+0x154>)
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80022f4:	2312      	movs	r3, #18
 80022f6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80022fc:	2302      	movs	r3, #2
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002300:	2304      	movs	r3, #4
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002304:	f107 031c 	add.w	r3, r7, #28
 8002308:	4619      	mov	r1, r3
 800230a:	4845      	ldr	r0, [pc, #276]	; (8002420 <I2Cx_MspInit+0x158>)
 800230c:	f003 fe22 	bl	8005f54 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002310:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002314:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002316:	f107 031c 	add.w	r3, r7, #28
 800231a:	4619      	mov	r1, r3
 800231c:	4840      	ldr	r0, [pc, #256]	; (8002420 <I2Cx_MspInit+0x158>)
 800231e:	f003 fe19 	bl	8005f54 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002322:	4b3e      	ldr	r3, [pc, #248]	; (800241c <I2Cx_MspInit+0x154>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	4a3d      	ldr	r2, [pc, #244]	; (800241c <I2Cx_MspInit+0x154>)
 8002328:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800232c:	6413      	str	r3, [r2, #64]	; 0x40
 800232e:	4b3b      	ldr	r3, [pc, #236]	; (800241c <I2Cx_MspInit+0x154>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800233a:	4b38      	ldr	r3, [pc, #224]	; (800241c <I2Cx_MspInit+0x154>)
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	4a37      	ldr	r2, [pc, #220]	; (800241c <I2Cx_MspInit+0x154>)
 8002340:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002344:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002346:	4b35      	ldr	r3, [pc, #212]	; (800241c <I2Cx_MspInit+0x154>)
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	4a34      	ldr	r2, [pc, #208]	; (800241c <I2Cx_MspInit+0x154>)
 800234c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002350:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	210f      	movs	r1, #15
 8002356:	2048      	movs	r0, #72	; 0x48
 8002358:	f002 ff98 	bl	800528c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800235c:	2048      	movs	r0, #72	; 0x48
 800235e:	f002 ffb1 	bl	80052c4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002362:	2200      	movs	r2, #0
 8002364:	210f      	movs	r1, #15
 8002366:	2049      	movs	r0, #73	; 0x49
 8002368:	f002 ff90 	bl	800528c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800236c:	2049      	movs	r0, #73	; 0x49
 800236e:	f002 ffa9 	bl	80052c4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002372:	e04d      	b.n	8002410 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002374:	4b29      	ldr	r3, [pc, #164]	; (800241c <I2Cx_MspInit+0x154>)
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	4a28      	ldr	r2, [pc, #160]	; (800241c <I2Cx_MspInit+0x154>)
 800237a:	f043 0302 	orr.w	r3, r3, #2
 800237e:	6313      	str	r3, [r2, #48]	; 0x30
 8002380:	4b26      	ldr	r3, [pc, #152]	; (800241c <I2Cx_MspInit+0x154>)
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800238c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002390:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002392:	2312      	movs	r3, #18
 8002394:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800239a:	2302      	movs	r3, #2
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800239e:	2304      	movs	r3, #4
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80023a2:	f107 031c 	add.w	r3, r7, #28
 80023a6:	4619      	mov	r1, r3
 80023a8:	481e      	ldr	r0, [pc, #120]	; (8002424 <I2Cx_MspInit+0x15c>)
 80023aa:	f003 fdd3 	bl	8005f54 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80023ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80023b4:	f107 031c 	add.w	r3, r7, #28
 80023b8:	4619      	mov	r1, r3
 80023ba:	481a      	ldr	r0, [pc, #104]	; (8002424 <I2Cx_MspInit+0x15c>)
 80023bc:	f003 fdca 	bl	8005f54 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80023c0:	4b16      	ldr	r3, [pc, #88]	; (800241c <I2Cx_MspInit+0x154>)
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	4a15      	ldr	r2, [pc, #84]	; (800241c <I2Cx_MspInit+0x154>)
 80023c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023ca:	6413      	str	r3, [r2, #64]	; 0x40
 80023cc:	4b13      	ldr	r3, [pc, #76]	; (800241c <I2Cx_MspInit+0x154>)
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80023d8:	4b10      	ldr	r3, [pc, #64]	; (800241c <I2Cx_MspInit+0x154>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4a0f      	ldr	r2, [pc, #60]	; (800241c <I2Cx_MspInit+0x154>)
 80023de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023e2:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80023e4:	4b0d      	ldr	r3, [pc, #52]	; (800241c <I2Cx_MspInit+0x154>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4a0c      	ldr	r2, [pc, #48]	; (800241c <I2Cx_MspInit+0x154>)
 80023ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023ee:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80023f0:	2200      	movs	r2, #0
 80023f2:	210f      	movs	r1, #15
 80023f4:	201f      	movs	r0, #31
 80023f6:	f002 ff49 	bl	800528c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80023fa:	201f      	movs	r0, #31
 80023fc:	f002 ff62 	bl	80052c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002400:	2200      	movs	r2, #0
 8002402:	210f      	movs	r1, #15
 8002404:	2020      	movs	r0, #32
 8002406:	f002 ff41 	bl	800528c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800240a:	2020      	movs	r0, #32
 800240c:	f002 ff5a 	bl	80052c4 <HAL_NVIC_EnableIRQ>
}
 8002410:	bf00      	nop
 8002412:	3730      	adds	r7, #48	; 0x30
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000638 	.word	0x20000638
 800241c:	40023800 	.word	0x40023800
 8002420:	40021c00 	.word	0x40021c00
 8002424:	40020400 	.word	0x40020400

08002428 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f004 fb67 	bl	8006b04 <HAL_I2C_GetState>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d125      	bne.n	8002488 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a14      	ldr	r2, [pc, #80]	; (8002490 <I2Cx_Init+0x68>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d103      	bne.n	800244c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a13      	ldr	r2, [pc, #76]	; (8002494 <I2Cx_Init+0x6c>)
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	e002      	b.n	8002452 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a12      	ldr	r2, [pc, #72]	; (8002498 <I2Cx_Init+0x70>)
 8002450:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a11      	ldr	r2, [pc, #68]	; (800249c <I2Cx_Init+0x74>)
 8002456:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff ff23 	bl	80022c8 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f004 f850 	bl	8006528 <HAL_I2C_Init>
  }
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20000638 	.word	0x20000638
 8002494:	40005c00 	.word	0x40005c00
 8002498:	40005400 	.word	0x40005400
 800249c:	40912732 	.word	0x40912732

080024a0 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	; 0x28
 80024a4:	af04      	add	r7, sp, #16
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	4608      	mov	r0, r1
 80024aa:	4611      	mov	r1, r2
 80024ac:	461a      	mov	r2, r3
 80024ae:	4603      	mov	r3, r0
 80024b0:	72fb      	strb	r3, [r7, #11]
 80024b2:	460b      	mov	r3, r1
 80024b4:	813b      	strh	r3, [r7, #8]
 80024b6:	4613      	mov	r3, r2
 80024b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80024be:	7afb      	ldrb	r3, [r7, #11]
 80024c0:	b299      	uxth	r1, r3
 80024c2:	88f8      	ldrh	r0, [r7, #6]
 80024c4:	893a      	ldrh	r2, [r7, #8]
 80024c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ca:	9302      	str	r3, [sp, #8]
 80024cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	4603      	mov	r3, r0
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f004 f9fa 	bl	80068d0 <HAL_I2C_Mem_Read>
 80024dc:	4603      	mov	r3, r0
 80024de:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d004      	beq.n	80024f0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80024e6:	7afb      	ldrb	r3, [r7, #11]
 80024e8:	4619      	mov	r1, r3
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 f832 	bl	8002554 <I2Cx_Error>
  }
  return status;    
 80024f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b08a      	sub	sp, #40	; 0x28
 80024fe:	af04      	add	r7, sp, #16
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	4608      	mov	r0, r1
 8002504:	4611      	mov	r1, r2
 8002506:	461a      	mov	r2, r3
 8002508:	4603      	mov	r3, r0
 800250a:	72fb      	strb	r3, [r7, #11]
 800250c:	460b      	mov	r3, r1
 800250e:	813b      	strh	r3, [r7, #8]
 8002510:	4613      	mov	r3, r2
 8002512:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002518:	7afb      	ldrb	r3, [r7, #11]
 800251a:	b299      	uxth	r1, r3
 800251c:	88f8      	ldrh	r0, [r7, #6]
 800251e:	893a      	ldrh	r2, [r7, #8]
 8002520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002524:	9302      	str	r3, [sp, #8]
 8002526:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002528:	9301      	str	r3, [sp, #4]
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	4603      	mov	r3, r0
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f004 f8b9 	bl	80066a8 <HAL_I2C_Mem_Write>
 8002536:	4603      	mov	r3, r0
 8002538:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800253a:	7dfb      	ldrb	r3, [r7, #23]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d004      	beq.n	800254a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002540:	7afb      	ldrb	r3, [r7, #11]
 8002542:	4619      	mov	r1, r3
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 f805 	bl	8002554 <I2Cx_Error>
  }
  return status;
 800254a:	7dfb      	ldrb	r3, [r7, #23]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f004 f871 	bl	8006648 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff ff5e 	bl	8002428 <I2Cx_Init>
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002578:	4802      	ldr	r0, [pc, #8]	; (8002584 <TS_IO_Init+0x10>)
 800257a:	f7ff ff55 	bl	8002428 <I2Cx_Init>
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000638 	.word	0x20000638

08002588 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af02      	add	r7, sp, #8
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
 8002592:	460b      	mov	r3, r1
 8002594:	71bb      	strb	r3, [r7, #6]
 8002596:	4613      	mov	r3, r2
 8002598:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800259a:	79bb      	ldrb	r3, [r7, #6]
 800259c:	b29a      	uxth	r2, r3
 800259e:	79f9      	ldrb	r1, [r7, #7]
 80025a0:	2301      	movs	r3, #1
 80025a2:	9301      	str	r3, [sp, #4]
 80025a4:	1d7b      	adds	r3, r7, #5
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	2301      	movs	r3, #1
 80025aa:	4803      	ldr	r0, [pc, #12]	; (80025b8 <TS_IO_Write+0x30>)
 80025ac:	f7ff ffa5 	bl	80024fa <I2Cx_WriteMultiple>
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000638 	.word	0x20000638

080025bc <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af02      	add	r7, sp, #8
 80025c2:	4603      	mov	r3, r0
 80025c4:	460a      	mov	r2, r1
 80025c6:	71fb      	strb	r3, [r7, #7]
 80025c8:	4613      	mov	r3, r2
 80025ca:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80025d0:	79bb      	ldrb	r3, [r7, #6]
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	79f9      	ldrb	r1, [r7, #7]
 80025d6:	2301      	movs	r3, #1
 80025d8:	9301      	str	r3, [sp, #4]
 80025da:	f107 030f 	add.w	r3, r7, #15
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	2301      	movs	r3, #1
 80025e2:	4804      	ldr	r0, [pc, #16]	; (80025f4 <TS_IO_Read+0x38>)
 80025e4:	f7ff ff5c 	bl	80024a0 <I2Cx_ReadMultiple>

  return read_value;
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000638 	.word	0x20000638

080025f8 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f002 f96d 	bl	80048e0 <HAL_Delay>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002614:	4b31      	ldr	r3, [pc, #196]	; (80026dc <BSP_LCD_Init+0xcc>)
 8002616:	2228      	movs	r2, #40	; 0x28
 8002618:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800261a:	4b30      	ldr	r3, [pc, #192]	; (80026dc <BSP_LCD_Init+0xcc>)
 800261c:	2209      	movs	r2, #9
 800261e:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002620:	4b2e      	ldr	r3, [pc, #184]	; (80026dc <BSP_LCD_Init+0xcc>)
 8002622:	2235      	movs	r2, #53	; 0x35
 8002624:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002626:	4b2d      	ldr	r3, [pc, #180]	; (80026dc <BSP_LCD_Init+0xcc>)
 8002628:	220b      	movs	r2, #11
 800262a:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800262c:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <BSP_LCD_Init+0xcc>)
 800262e:	f240 121b 	movw	r2, #283	; 0x11b
 8002632:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002634:	4b29      	ldr	r3, [pc, #164]	; (80026dc <BSP_LCD_Init+0xcc>)
 8002636:	f240 2215 	movw	r2, #533	; 0x215
 800263a:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 800263c:	4b27      	ldr	r3, [pc, #156]	; (80026dc <BSP_LCD_Init+0xcc>)
 800263e:	f240 121d 	movw	r2, #285	; 0x11d
 8002642:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002644:	4b25      	ldr	r3, [pc, #148]	; (80026dc <BSP_LCD_Init+0xcc>)
 8002646:	f240 2235 	movw	r2, #565	; 0x235
 800264a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800264c:	2100      	movs	r1, #0
 800264e:	4823      	ldr	r0, [pc, #140]	; (80026dc <BSP_LCD_Init+0xcc>)
 8002650:	f000 fe6e 	bl	8003330 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002654:	4b21      	ldr	r3, [pc, #132]	; (80026dc <BSP_LCD_Init+0xcc>)
 8002656:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800265a:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800265c:	4b1f      	ldr	r3, [pc, #124]	; (80026dc <BSP_LCD_Init+0xcc>)
 800265e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002662:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002664:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <BSP_LCD_Init+0xcc>)
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 800266c:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <BSP_LCD_Init+0xcc>)
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002674:	4b19      	ldr	r3, [pc, #100]	; (80026dc <BSP_LCD_Init+0xcc>)
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800267c:	4b17      	ldr	r3, [pc, #92]	; (80026dc <BSP_LCD_Init+0xcc>)
 800267e:	2200      	movs	r2, #0
 8002680:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002682:	4b16      	ldr	r3, [pc, #88]	; (80026dc <BSP_LCD_Init+0xcc>)
 8002684:	2200      	movs	r2, #0
 8002686:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <BSP_LCD_Init+0xcc>)
 800268a:	2200      	movs	r2, #0
 800268c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800268e:	4b13      	ldr	r3, [pc, #76]	; (80026dc <BSP_LCD_Init+0xcc>)
 8002690:	2200      	movs	r2, #0
 8002692:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <BSP_LCD_Init+0xcc>)
 8002696:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <BSP_LCD_Init+0xd0>)
 8002698:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800269a:	4810      	ldr	r0, [pc, #64]	; (80026dc <BSP_LCD_Init+0xcc>)
 800269c:	f004 ff42 	bl	8007524 <HAL_LTDC_GetState>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d103      	bne.n	80026ae <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80026a6:	2100      	movs	r1, #0
 80026a8:	480c      	ldr	r0, [pc, #48]	; (80026dc <BSP_LCD_Init+0xcc>)
 80026aa:	f000 fd67 	bl	800317c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80026ae:	480b      	ldr	r0, [pc, #44]	; (80026dc <BSP_LCD_Init+0xcc>)
 80026b0:	f004 fd68 	bl	8007184 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80026b4:	2201      	movs	r2, #1
 80026b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026ba:	480a      	ldr	r0, [pc, #40]	; (80026e4 <BSP_LCD_Init+0xd4>)
 80026bc:	f003 ff1a 	bl	80064f4 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80026c0:	2201      	movs	r2, #1
 80026c2:	2108      	movs	r1, #8
 80026c4:	4808      	ldr	r0, [pc, #32]	; (80026e8 <BSP_LCD_Init+0xd8>)
 80026c6:	f003 ff15 	bl	80064f4 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80026ca:	f000 ff95 	bl	80035f8 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80026ce:	4807      	ldr	r0, [pc, #28]	; (80026ec <BSP_LCD_Init+0xdc>)
 80026d0:	f000 f8d8 	bl	8002884 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	2000068c 	.word	0x2000068c
 80026e0:	40016800 	.word	0x40016800
 80026e4:	40022000 	.word	0x40022000
 80026e8:	40022800 	.word	0x40022800
 80026ec:	20000028 	.word	0x20000028

080026f0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <BSP_LCD_GetXSize+0x20>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a06      	ldr	r2, [pc, #24]	; (8002714 <BSP_LCD_GetXSize+0x24>)
 80026fa:	2134      	movs	r1, #52	; 0x34
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	3360      	adds	r3, #96	; 0x60
 8002704:	681b      	ldr	r3, [r3, #0]
}
 8002706:	4618      	mov	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	20000774 	.word	0x20000774
 8002714:	2000068c 	.word	0x2000068c

08002718 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <BSP_LCD_GetYSize+0x20>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a06      	ldr	r2, [pc, #24]	; (800273c <BSP_LCD_GetYSize+0x24>)
 8002722:	2134      	movs	r1, #52	; 0x34
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	4413      	add	r3, r2
 800272a:	3364      	adds	r3, #100	; 0x64
 800272c:	681b      	ldr	r3, [r3, #0]
}
 800272e:	4618      	mov	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	20000774 	.word	0x20000774
 800273c:	2000068c 	.word	0x2000068c

08002740 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002740:	b580      	push	{r7, lr}
 8002742:	b090      	sub	sp, #64	; 0x40
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	6039      	str	r1, [r7, #0]
 800274a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002750:	f7ff ffce 	bl	80026f0 <BSP_LCD_GetXSize>
 8002754:	4603      	mov	r3, r0
 8002756:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 800275c:	f7ff ffdc 	bl	8002718 <BSP_LCD_GetYSize>
 8002760:	4603      	mov	r3, r0
 8002762:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 800276c:	23ff      	movs	r3, #255	; 0xff
 800276e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002786:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800278c:	2307      	movs	r3, #7
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002790:	f7ff ffae 	bl	80026f0 <BSP_LCD_GetXSize>
 8002794:	4603      	mov	r3, r0
 8002796:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002798:	f7ff ffbe 	bl	8002718 <BSP_LCD_GetYSize>
 800279c:	4603      	mov	r3, r0
 800279e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80027a0:	88fa      	ldrh	r2, [r7, #6]
 80027a2:	f107 030c 	add.w	r3, r7, #12
 80027a6:	4619      	mov	r1, r3
 80027a8:	4812      	ldr	r0, [pc, #72]	; (80027f4 <BSP_LCD_LayerDefaultInit+0xb4>)
 80027aa:	f004 fe7d 	bl	80074a8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80027ae:	88fa      	ldrh	r2, [r7, #6]
 80027b0:	4911      	ldr	r1, [pc, #68]	; (80027f8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80027b2:	4613      	mov	r3, r2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	440b      	add	r3, r1
 80027bc:	3304      	adds	r3, #4
 80027be:	f04f 32ff 	mov.w	r2, #4294967295
 80027c2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80027c4:	88fa      	ldrh	r2, [r7, #6]
 80027c6:	490c      	ldr	r1, [pc, #48]	; (80027f8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80027c8:	4613      	mov	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	3308      	adds	r3, #8
 80027d4:	4a09      	ldr	r2, [pc, #36]	; (80027fc <BSP_LCD_LayerDefaultInit+0xbc>)
 80027d6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80027d8:	88fa      	ldrh	r2, [r7, #6]
 80027da:	4907      	ldr	r1, [pc, #28]	; (80027f8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80027dc:	4613      	mov	r3, r2
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	4413      	add	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80027ea:	601a      	str	r2, [r3, #0]
}
 80027ec:	bf00      	nop
 80027ee:	3740      	adds	r7, #64	; 0x40
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	2000068c 	.word	0x2000068c
 80027f8:	20000778 	.word	0x20000778
 80027fc:	20000028 	.word	0x20000028

08002800 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002808:	4a04      	ldr	r2, [pc, #16]	; (800281c <BSP_LCD_SelectLayer+0x1c>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6013      	str	r3, [r2, #0]
} 
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	20000774 	.word	0x20000774

08002820 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002828:	4b07      	ldr	r3, [pc, #28]	; (8002848 <BSP_LCD_SetTextColor+0x28>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4907      	ldr	r1, [pc, #28]	; (800284c <BSP_LCD_SetTextColor+0x2c>)
 800282e:	4613      	mov	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	601a      	str	r2, [r3, #0]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	20000774 	.word	0x20000774
 800284c:	20000778 	.word	0x20000778

08002850 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <BSP_LCD_SetBackColor+0x2c>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4908      	ldr	r1, [pc, #32]	; (8002880 <BSP_LCD_SetBackColor+0x30>)
 800285e:	4613      	mov	r3, r2
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	3304      	adds	r3, #4
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	601a      	str	r2, [r3, #0]
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000774 	.word	0x20000774
 8002880:	20000778 	.word	0x20000778

08002884 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800288c:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <BSP_LCD_SetFont+0x2c>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4908      	ldr	r1, [pc, #32]	; (80028b4 <BSP_LCD_SetFont+0x30>)
 8002892:	4613      	mov	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	4413      	add	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	3308      	adds	r3, #8
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	601a      	str	r2, [r3, #0]
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	20000774 	.word	0x20000774
 80028b4:	20000778 	.word	0x20000778

080028b8 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80028bc:	4b07      	ldr	r3, [pc, #28]	; (80028dc <BSP_LCD_GetFont+0x24>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4907      	ldr	r1, [pc, #28]	; (80028e0 <BSP_LCD_GetFont+0x28>)
 80028c2:	4613      	mov	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	3308      	adds	r3, #8
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000774 	.word	0x20000774
 80028e0:	20000778 	.word	0x20000778

080028e4 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80028e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af02      	add	r7, sp, #8
 80028ea:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80028ec:	4b0f      	ldr	r3, [pc, #60]	; (800292c <BSP_LCD_Clear+0x48>)
 80028ee:	681c      	ldr	r4, [r3, #0]
 80028f0:	4b0e      	ldr	r3, [pc, #56]	; (800292c <BSP_LCD_Clear+0x48>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a0e      	ldr	r2, [pc, #56]	; (8002930 <BSP_LCD_Clear+0x4c>)
 80028f6:	2134      	movs	r1, #52	; 0x34
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	335c      	adds	r3, #92	; 0x5c
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	461e      	mov	r6, r3
 8002904:	f7ff fef4 	bl	80026f0 <BSP_LCD_GetXSize>
 8002908:	4605      	mov	r5, r0
 800290a:	f7ff ff05 	bl	8002718 <BSP_LCD_GetYSize>
 800290e:	4602      	mov	r2, r0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	2300      	movs	r3, #0
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	4613      	mov	r3, r2
 800291a:	462a      	mov	r2, r5
 800291c:	4631      	mov	r1, r6
 800291e:	4620      	mov	r0, r4
 8002920:	f000 fdda 	bl	80034d8 <LL_FillBuffer>
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800292c:	20000774 	.word	0x20000774
 8002930:	2000068c 	.word	0x2000068c

08002934 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	80fb      	strh	r3, [r7, #6]
 800293e:	460b      	mov	r3, r1
 8002940:	80bb      	strh	r3, [r7, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002946:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <BSP_LCD_DisplayChar+0x80>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	491b      	ldr	r1, [pc, #108]	; (80029b8 <BSP_LCD_DisplayChar+0x84>)
 800294c:	4613      	mov	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	3308      	adds	r3, #8
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6819      	ldr	r1, [r3, #0]
 800295c:	78fb      	ldrb	r3, [r7, #3]
 800295e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002962:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <BSP_LCD_DisplayChar+0x80>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	4c14      	ldr	r4, [pc, #80]	; (80029b8 <BSP_LCD_DisplayChar+0x84>)
 8002968:	4613      	mov	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	4413      	add	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4423      	add	r3, r4
 8002972:	3308      	adds	r3, #8
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002978:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800297c:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <BSP_LCD_DisplayChar+0x80>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4c0d      	ldr	r4, [pc, #52]	; (80029b8 <BSP_LCD_DisplayChar+0x84>)
 8002982:	4613      	mov	r3, r2
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4423      	add	r3, r4
 800298c:	3308      	adds	r3, #8
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	889b      	ldrh	r3, [r3, #4]
 8002992:	3307      	adds	r3, #7
 8002994:	2b00      	cmp	r3, #0
 8002996:	da00      	bge.n	800299a <BSP_LCD_DisplayChar+0x66>
 8002998:	3307      	adds	r3, #7
 800299a:	10db      	asrs	r3, r3, #3
 800299c:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80029a0:	18ca      	adds	r2, r1, r3
 80029a2:	88b9      	ldrh	r1, [r7, #4]
 80029a4:	88fb      	ldrh	r3, [r7, #6]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 fcde 	bl	8003368 <DrawChar>
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd90      	pop	{r4, r7, pc}
 80029b4:	20000774 	.word	0x20000774
 80029b8:	20000778 	.word	0x20000778

080029bc <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80029bc:	b5b0      	push	{r4, r5, r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60ba      	str	r2, [r7, #8]
 80029c4:	461a      	mov	r2, r3
 80029c6:	4603      	mov	r3, r0
 80029c8:	81fb      	strh	r3, [r7, #14]
 80029ca:	460b      	mov	r3, r1
 80029cc:	81bb      	strh	r3, [r7, #12]
 80029ce:	4613      	mov	r3, r2
 80029d0:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80029d2:	2301      	movs	r3, #1
 80029d4:	83fb      	strh	r3, [r7, #30]
 80029d6:	2300      	movs	r3, #0
 80029d8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80029da:	2300      	movs	r3, #0
 80029dc:	61bb      	str	r3, [r7, #24]
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80029e6:	e002      	b.n	80029ee <BSP_LCD_DisplayStringAt+0x32>
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	3301      	adds	r3, #1
 80029ec:	61bb      	str	r3, [r7, #24]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	617a      	str	r2, [r7, #20]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f6      	bne.n	80029e8 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80029fa:	f7ff fe79 	bl	80026f0 <BSP_LCD_GetXSize>
 80029fe:	4601      	mov	r1, r0
 8002a00:	4b50      	ldr	r3, [pc, #320]	; (8002b44 <BSP_LCD_DisplayStringAt+0x188>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4850      	ldr	r0, [pc, #320]	; (8002b48 <BSP_LCD_DisplayStringAt+0x18c>)
 8002a06:	4613      	mov	r3, r2
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	4413      	add	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4403      	add	r3, r0
 8002a10:	3308      	adds	r3, #8
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	889b      	ldrh	r3, [r3, #4]
 8002a16:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a1a:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d01c      	beq.n	8002a5c <BSP_LCD_DisplayStringAt+0xa0>
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	dc33      	bgt.n	8002a8e <BSP_LCD_DisplayStringAt+0xd2>
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d002      	beq.n	8002a30 <BSP_LCD_DisplayStringAt+0x74>
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d019      	beq.n	8002a62 <BSP_LCD_DisplayStringAt+0xa6>
 8002a2e:	e02e      	b.n	8002a8e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	1ad1      	subs	r1, r2, r3
 8002a36:	4b43      	ldr	r3, [pc, #268]	; (8002b44 <BSP_LCD_DisplayStringAt+0x188>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4843      	ldr	r0, [pc, #268]	; (8002b48 <BSP_LCD_DisplayStringAt+0x18c>)
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4403      	add	r3, r0
 8002a46:	3308      	adds	r3, #8
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	889b      	ldrh	r3, [r3, #4]
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	085b      	lsrs	r3, r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	89fb      	ldrh	r3, [r7, #14]
 8002a56:	4413      	add	r3, r2
 8002a58:	83fb      	strh	r3, [r7, #30]
      break;
 8002a5a:	e01b      	b.n	8002a94 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002a5c:	89fb      	ldrh	r3, [r7, #14]
 8002a5e:	83fb      	strh	r3, [r7, #30]
      break;
 8002a60:	e018      	b.n	8002a94 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	b299      	uxth	r1, r3
 8002a6a:	4b36      	ldr	r3, [pc, #216]	; (8002b44 <BSP_LCD_DisplayStringAt+0x188>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	4836      	ldr	r0, [pc, #216]	; (8002b48 <BSP_LCD_DisplayStringAt+0x18c>)
 8002a70:	4613      	mov	r3, r2
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4413      	add	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4403      	add	r3, r0
 8002a7a:	3308      	adds	r3, #8
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	889b      	ldrh	r3, [r3, #4]
 8002a80:	fb11 f303 	smulbb	r3, r1, r3
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	89fb      	ldrh	r3, [r7, #14]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	83fb      	strh	r3, [r7, #30]
      break;
 8002a8c:	e002      	b.n	8002a94 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8002a8e:	89fb      	ldrh	r3, [r7, #14]
 8002a90:	83fb      	strh	r3, [r7, #30]
      break;
 8002a92:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002a94:	8bfb      	ldrh	r3, [r7, #30]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <BSP_LCD_DisplayStringAt+0xe6>
 8002a9a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	da1d      	bge.n	8002ade <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002aa6:	e01a      	b.n	8002ade <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	781a      	ldrb	r2, [r3, #0]
 8002aac:	89b9      	ldrh	r1, [r7, #12]
 8002aae:	8bfb      	ldrh	r3, [r7, #30]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff ff3f 	bl	8002934 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002ab6:	4b23      	ldr	r3, [pc, #140]	; (8002b44 <BSP_LCD_DisplayStringAt+0x188>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4923      	ldr	r1, [pc, #140]	; (8002b48 <BSP_LCD_DisplayStringAt+0x18c>)
 8002abc:	4613      	mov	r3, r2
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	3308      	adds	r3, #8
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	889a      	ldrh	r2, [r3, #4]
 8002acc:	8bfb      	ldrh	r3, [r7, #30]
 8002ace:	4413      	add	r3, r2
 8002ad0:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	60bb      	str	r3, [r7, #8]
    i++;
 8002ad8:	8bbb      	ldrh	r3, [r7, #28]
 8002ada:	3301      	adds	r3, #1
 8002adc:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	bf14      	ite	ne
 8002ae6:	2301      	movne	r3, #1
 8002ae8:	2300      	moveq	r3, #0
 8002aea:	b2dc      	uxtb	r4, r3
 8002aec:	f7ff fe00 	bl	80026f0 <BSP_LCD_GetXSize>
 8002af0:	8bb9      	ldrh	r1, [r7, #28]
 8002af2:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <BSP_LCD_DisplayStringAt+0x188>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	4d14      	ldr	r5, [pc, #80]	; (8002b48 <BSP_LCD_DisplayStringAt+0x18c>)
 8002af8:	4613      	mov	r3, r2
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	4413      	add	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	442b      	add	r3, r5
 8002b02:	3308      	adds	r3, #8
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	889b      	ldrh	r3, [r3, #4]
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	1ac3      	subs	r3, r0, r3
 8002b0e:	b299      	uxth	r1, r3
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <BSP_LCD_DisplayStringAt+0x188>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	480c      	ldr	r0, [pc, #48]	; (8002b48 <BSP_LCD_DisplayStringAt+0x18c>)
 8002b16:	4613      	mov	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4403      	add	r3, r0
 8002b20:	3308      	adds	r3, #8
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	889b      	ldrh	r3, [r3, #4]
 8002b26:	4299      	cmp	r1, r3
 8002b28:	bf2c      	ite	cs
 8002b2a:	2301      	movcs	r3, #1
 8002b2c:	2300      	movcc	r3, #0
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	4023      	ands	r3, r4
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1b7      	bne.n	8002aa8 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	3720      	adds	r7, #32
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bdb0      	pop	{r4, r5, r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000774 	.word	0x20000774
 8002b48:	20000778 	.word	0x20000778

08002b4c <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	6039      	str	r1, [r7, #0]
 8002b56:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002b58:	f7ff feae 	bl	80028b8 <BSP_LCD_GetFont>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	88db      	ldrh	r3, [r3, #6]
 8002b60:	88fa      	ldrh	r2, [r7, #6]
 8002b62:	fb12 f303 	smulbb	r3, r2, r3
 8002b66:	b299      	uxth	r1, r3
 8002b68:	2303      	movs	r3, #3
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f7ff ff25 	bl	80029bc <BSP_LCD_DisplayStringAt>
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002b7c:	b5b0      	push	{r4, r5, r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	4603      	mov	r3, r0
 8002b84:	80fb      	strh	r3, [r7, #6]
 8002b86:	460b      	mov	r3, r1
 8002b88:	80bb      	strh	r3, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002b92:	4b26      	ldr	r3, [pc, #152]	; (8002c2c <BSP_LCD_DrawHLine+0xb0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a26      	ldr	r2, [pc, #152]	; (8002c30 <BSP_LCD_DrawHLine+0xb4>)
 8002b98:	2134      	movs	r1, #52	; 0x34
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3348      	adds	r3, #72	; 0x48
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d114      	bne.n	8002bd2 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002ba8:	4b20      	ldr	r3, [pc, #128]	; (8002c2c <BSP_LCD_DrawHLine+0xb0>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a20      	ldr	r2, [pc, #128]	; (8002c30 <BSP_LCD_DrawHLine+0xb4>)
 8002bae:	2134      	movs	r1, #52	; 0x34
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	335c      	adds	r3, #92	; 0x5c
 8002bb8:	681c      	ldr	r4, [r3, #0]
 8002bba:	f7ff fd99 	bl	80026f0 <BSP_LCD_GetXSize>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	88bb      	ldrh	r3, [r7, #4]
 8002bc2:	fb03 f202 	mul.w	r2, r3, r2
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	4413      	add	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4423      	add	r3, r4
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	e013      	b.n	8002bfa <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002bd2:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <BSP_LCD_DrawHLine+0xb0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a16      	ldr	r2, [pc, #88]	; (8002c30 <BSP_LCD_DrawHLine+0xb4>)
 8002bd8:	2134      	movs	r1, #52	; 0x34
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	335c      	adds	r3, #92	; 0x5c
 8002be2:	681c      	ldr	r4, [r3, #0]
 8002be4:	f7ff fd84 	bl	80026f0 <BSP_LCD_GetXSize>
 8002be8:	4602      	mov	r2, r0
 8002bea:	88bb      	ldrh	r3, [r7, #4]
 8002bec:	fb03 f202 	mul.w	r2, r3, r2
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4423      	add	r3, r4
 8002bf8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <BSP_LCD_DrawHLine+0xb0>)
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	68f9      	ldr	r1, [r7, #12]
 8002c00:	887c      	ldrh	r4, [r7, #2]
 8002c02:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <BSP_LCD_DrawHLine+0xb0>)
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	4d0b      	ldr	r5, [pc, #44]	; (8002c34 <BSP_LCD_DrawHLine+0xb8>)
 8002c08:	4613      	mov	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	442b      	add	r3, r5
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	9301      	str	r3, [sp, #4]
 8002c16:	2300      	movs	r3, #0
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	4622      	mov	r2, r4
 8002c1e:	f000 fc5b 	bl	80034d8 <LL_FillBuffer>
}
 8002c22:	bf00      	nop
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bdb0      	pop	{r4, r5, r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000774 	.word	0x20000774
 8002c30:	2000068c 	.word	0x2000068c
 8002c34:	20000778 	.word	0x20000778

08002c38 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002c38:	b590      	push	{r4, r7, lr}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	80fb      	strh	r3, [r7, #6]
 8002c42:	460b      	mov	r3, r1
 8002c44:	80bb      	strh	r3, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8002c4a:	887b      	ldrh	r3, [r7, #2]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	f1c3 0303 	rsb	r3, r3, #3
 8002c52:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002c58:	887b      	ldrh	r3, [r7, #2]
 8002c5a:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8002c5c:	e0c7      	b.n	8002dee <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	4413      	add	r3, r2
 8002c66:	b298      	uxth	r0, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	88ba      	ldrh	r2, [r7, #4]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	b299      	uxth	r1, r3
 8002c72:	4b64      	ldr	r3, [pc, #400]	; (8002e04 <BSP_LCD_DrawCircle+0x1cc>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	4c64      	ldr	r4, [pc, #400]	; (8002e08 <BSP_LCD_DrawCircle+0x1d0>)
 8002c78:	4613      	mov	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4423      	add	r3, r4
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	f000 f8c1 	bl	8002e0c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	88fa      	ldrh	r2, [r7, #6]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	b298      	uxth	r0, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	88ba      	ldrh	r2, [r7, #4]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	b299      	uxth	r1, r3
 8002c9e:	4b59      	ldr	r3, [pc, #356]	; (8002e04 <BSP_LCD_DrawCircle+0x1cc>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	4c59      	ldr	r4, [pc, #356]	; (8002e08 <BSP_LCD_DrawCircle+0x1d0>)
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4423      	add	r3, r4
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	f000 f8ab 	bl	8002e0c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	b298      	uxth	r0, r3
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	88ba      	ldrh	r2, [r7, #4]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	b299      	uxth	r1, r3
 8002cca:	4b4e      	ldr	r3, [pc, #312]	; (8002e04 <BSP_LCD_DrawCircle+0x1cc>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	4c4e      	ldr	r4, [pc, #312]	; (8002e08 <BSP_LCD_DrawCircle+0x1d0>)
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4423      	add	r3, r4
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	f000 f895 	bl	8002e0c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	88fa      	ldrh	r2, [r7, #6]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	b298      	uxth	r0, r3
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	88ba      	ldrh	r2, [r7, #4]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	b299      	uxth	r1, r3
 8002cf6:	4b43      	ldr	r3, [pc, #268]	; (8002e04 <BSP_LCD_DrawCircle+0x1cc>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	4c43      	ldr	r4, [pc, #268]	; (8002e08 <BSP_LCD_DrawCircle+0x1d0>)
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	4413      	add	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4423      	add	r3, r4
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	f000 f87f 	bl	8002e0c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	4413      	add	r3, r2
 8002d16:	b298      	uxth	r0, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	88bb      	ldrh	r3, [r7, #4]
 8002d1e:	4413      	add	r3, r2
 8002d20:	b299      	uxth	r1, r3
 8002d22:	4b38      	ldr	r3, [pc, #224]	; (8002e04 <BSP_LCD_DrawCircle+0x1cc>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4c38      	ldr	r4, [pc, #224]	; (8002e08 <BSP_LCD_DrawCircle+0x1d0>)
 8002d28:	4613      	mov	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4423      	add	r3, r4
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	f000 f869 	bl	8002e0c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	88fa      	ldrh	r2, [r7, #6]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	b298      	uxth	r0, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	88bb      	ldrh	r3, [r7, #4]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	b299      	uxth	r1, r3
 8002d4e:	4b2d      	ldr	r3, [pc, #180]	; (8002e04 <BSP_LCD_DrawCircle+0x1cc>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	4c2d      	ldr	r4, [pc, #180]	; (8002e08 <BSP_LCD_DrawCircle+0x1d0>)
 8002d54:	4613      	mov	r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4423      	add	r3, r4
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	f000 f853 	bl	8002e0c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	88fb      	ldrh	r3, [r7, #6]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	b298      	uxth	r0, r3
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	88bb      	ldrh	r3, [r7, #4]
 8002d76:	4413      	add	r3, r2
 8002d78:	b299      	uxth	r1, r3
 8002d7a:	4b22      	ldr	r3, [pc, #136]	; (8002e04 <BSP_LCD_DrawCircle+0x1cc>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	4c22      	ldr	r4, [pc, #136]	; (8002e08 <BSP_LCD_DrawCircle+0x1d0>)
 8002d80:	4613      	mov	r3, r2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4423      	add	r3, r4
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	f000 f83d 	bl	8002e0c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	88fa      	ldrh	r2, [r7, #6]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	b298      	uxth	r0, r3
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	88bb      	ldrh	r3, [r7, #4]
 8002da2:	4413      	add	r3, r2
 8002da4:	b299      	uxth	r1, r3
 8002da6:	4b17      	ldr	r3, [pc, #92]	; (8002e04 <BSP_LCD_DrawCircle+0x1cc>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	4c17      	ldr	r4, [pc, #92]	; (8002e08 <BSP_LCD_DrawCircle+0x1d0>)
 8002dac:	4613      	mov	r3, r2
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4423      	add	r3, r4
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	461a      	mov	r2, r3
 8002dba:	f000 f827 	bl	8002e0c <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	da06      	bge.n	8002dd2 <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	009a      	lsls	r2, r3, #2
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	4413      	add	r3, r2
 8002dcc:	3306      	adds	r3, #6
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	e00a      	b.n	8002de8 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	009a      	lsls	r2, r3, #2
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	4413      	add	r3, r2
 8002dde:	330a      	adds	r3, #10
 8002de0:	617b      	str	r3, [r7, #20]
      current_y--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3b01      	subs	r3, #1
 8002de6:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	3301      	adds	r3, #1
 8002dec:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	f67f af33 	bls.w	8002c5e <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002df8:	bf00      	nop
 8002dfa:	bf00      	nop
 8002dfc:	371c      	adds	r7, #28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd90      	pop	{r4, r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000774 	.word	0x20000774
 8002e08:	20000778 	.word	0x20000778

08002e0c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002e0c:	b5b0      	push	{r4, r5, r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	603a      	str	r2, [r7, #0]
 8002e16:	80fb      	strh	r3, [r7, #6]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002e1c:	4b1d      	ldr	r3, [pc, #116]	; (8002e94 <BSP_LCD_DrawPixel+0x88>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1d      	ldr	r2, [pc, #116]	; (8002e98 <BSP_LCD_DrawPixel+0x8c>)
 8002e22:	2134      	movs	r1, #52	; 0x34
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	3348      	adds	r3, #72	; 0x48
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d116      	bne.n	8002e60 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002e32:	4b18      	ldr	r3, [pc, #96]	; (8002e94 <BSP_LCD_DrawPixel+0x88>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a18      	ldr	r2, [pc, #96]	; (8002e98 <BSP_LCD_DrawPixel+0x8c>)
 8002e38:	2134      	movs	r1, #52	; 0x34
 8002e3a:	fb01 f303 	mul.w	r3, r1, r3
 8002e3e:	4413      	add	r3, r2
 8002e40:	335c      	adds	r3, #92	; 0x5c
 8002e42:	681c      	ldr	r4, [r3, #0]
 8002e44:	88bd      	ldrh	r5, [r7, #4]
 8002e46:	f7ff fc53 	bl	80026f0 <BSP_LCD_GetXSize>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	fb03 f205 	mul.w	r2, r3, r5
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	4413      	add	r3, r2
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	4423      	add	r3, r4
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	b292      	uxth	r2, r2
 8002e5c:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002e5e:	e015      	b.n	8002e8c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <BSP_LCD_DrawPixel+0x88>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0c      	ldr	r2, [pc, #48]	; (8002e98 <BSP_LCD_DrawPixel+0x8c>)
 8002e66:	2134      	movs	r1, #52	; 0x34
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	335c      	adds	r3, #92	; 0x5c
 8002e70:	681c      	ldr	r4, [r3, #0]
 8002e72:	88bd      	ldrh	r5, [r7, #4]
 8002e74:	f7ff fc3c 	bl	80026f0 <BSP_LCD_GetXSize>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	fb03 f205 	mul.w	r2, r3, r5
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4423      	add	r3, r4
 8002e86:	461a      	mov	r2, r3
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	6013      	str	r3, [r2, #0]
}
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bdb0      	pop	{r4, r5, r7, pc}
 8002e94:	20000774 	.word	0x20000774
 8002e98:	2000068c 	.word	0x2000068c

08002e9c <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8002e9c:	b590      	push	{r4, r7, lr}
 8002e9e:	b08b      	sub	sp, #44	; 0x2c
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8002eac:	2300      	movs	r3, #0
 8002eae:	61bb      	str	r3, [r7, #24]
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	330a      	adds	r3, #10
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	330b      	adds	r3, #11
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	021b      	lsls	r3, r3, #8
 8002ecc:	441a      	add	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	330c      	adds	r3, #12
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	041b      	lsls	r3, r3, #16
 8002ed6:	441a      	add	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	330d      	adds	r3, #13
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	061b      	lsls	r3, r3, #24
 8002ee0:	4413      	add	r3, r2
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3312      	adds	r3, #18
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3313      	adds	r3, #19
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	441a      	add	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	3314      	adds	r3, #20
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	041b      	lsls	r3, r3, #16
 8002efe:	441a      	add	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3315      	adds	r3, #21
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	061b      	lsls	r3, r3, #24
 8002f08:	4413      	add	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3316      	adds	r3, #22
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3317      	adds	r3, #23
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	441a      	add	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3318      	adds	r3, #24
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	041b      	lsls	r3, r3, #16
 8002f26:	441a      	add	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3319      	adds	r3, #25
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	061b      	lsls	r3, r3, #24
 8002f30:	4413      	add	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	331c      	adds	r3, #28
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	331d      	adds	r3, #29
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	021b      	lsls	r3, r3, #8
 8002f44:	4413      	add	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8002f48:	4b2b      	ldr	r3, [pc, #172]	; (8002ff8 <BSP_LCD_DrawBitmap+0x15c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a2b      	ldr	r2, [pc, #172]	; (8002ffc <BSP_LCD_DrawBitmap+0x160>)
 8002f4e:	2134      	movs	r1, #52	; 0x34
 8002f50:	fb01 f303 	mul.w	r3, r1, r3
 8002f54:	4413      	add	r3, r2
 8002f56:	335c      	adds	r3, #92	; 0x5c
 8002f58:	681c      	ldr	r4, [r3, #0]
 8002f5a:	f7ff fbc9 	bl	80026f0 <BSP_LCD_GetXSize>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	fb03 f202 	mul.w	r2, r3, r2
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4423      	add	r3, r4
 8002f6e:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	3b20      	subs	r3, #32
 8002f74:	2b07      	cmp	r3, #7
 8002f76:	d802      	bhi.n	8002f7e <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61fb      	str	r3, [r7, #28]
 8002f7c:	e008      	b.n	8002f90 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	3b10      	subs	r3, #16
 8002f82:	2b07      	cmp	r3, #7
 8002f84:	d802      	bhi.n	8002f8c <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8002f86:	2302      	movs	r3, #2
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	e001      	b.n	8002f90 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	fb02 f303 	mul.w	r3, r2, r3
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	08d2      	lsrs	r2, r2, #3
 8002f9e:	fb03 f202 	mul.w	r2, r3, r2
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	4413      	add	r3, r2
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	4413      	add	r3, r2
 8002faa:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8002fac:	2300      	movs	r3, #0
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb0:	e018      	b.n	8002fe4 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8002fb2:	6a39      	ldr	r1, [r7, #32]
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 fad9 	bl	8003570 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8002fbe:	f7ff fb97 	bl	80026f0 <BSP_LCD_GetXSize>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	6a3a      	ldr	r2, [r7, #32]
 8002fc8:	4413      	add	r3, r2
 8002fca:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	08db      	lsrs	r3, r3, #3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	fb02 f303 	mul.w	r3, r2, r3
 8002fd6:	425b      	negs	r3, r3
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	4413      	add	r3, r2
 8002fdc:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d3e2      	bcc.n	8002fb2 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	372c      	adds	r7, #44	; 0x2c
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd90      	pop	{r4, r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000774 	.word	0x20000774
 8002ffc:	2000068c 	.word	0x2000068c

08003000 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	80fb      	strh	r3, [r7, #6]
 800300a:	460b      	mov	r3, r1
 800300c:	80bb      	strh	r3, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8003012:	887b      	ldrh	r3, [r7, #2]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	f1c3 0303 	rsb	r3, r3, #3
 800301a:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003020:	887b      	ldrh	r3, [r7, #2]
 8003022:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003024:	4b44      	ldr	r3, [pc, #272]	; (8003138 <BSP_LCD_FillCircle+0x138>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	4944      	ldr	r1, [pc, #272]	; (800313c <BSP_LCD_FillCircle+0x13c>)
 800302a:	4613      	mov	r3, r2
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff fbf2 	bl	8002820 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 800303c:	e061      	b.n	8003102 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d021      	beq.n	8003088 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	b29b      	uxth	r3, r3
 8003048:	88fa      	ldrh	r2, [r7, #6]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	b298      	uxth	r0, r3
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	b29a      	uxth	r2, r3
 8003052:	88bb      	ldrh	r3, [r7, #4]
 8003054:	4413      	add	r3, r2
 8003056:	b299      	uxth	r1, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	b29b      	uxth	r3, r3
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	b29b      	uxth	r3, r3
 8003060:	461a      	mov	r2, r3
 8003062:	f7ff fd8b 	bl	8002b7c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	b29b      	uxth	r3, r3
 800306a:	88fa      	ldrh	r2, [r7, #6]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	b298      	uxth	r0, r3
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	b29b      	uxth	r3, r3
 8003074:	88ba      	ldrh	r2, [r7, #4]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	b299      	uxth	r1, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	b29b      	uxth	r3, r3
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	b29b      	uxth	r3, r3
 8003082:	461a      	mov	r2, r3
 8003084:	f7ff fd7a 	bl	8002b7c <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d021      	beq.n	80030d2 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	b29b      	uxth	r3, r3
 8003092:	88fa      	ldrh	r2, [r7, #6]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	b298      	uxth	r0, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	b29b      	uxth	r3, r3
 800309c:	88ba      	ldrh	r2, [r7, #4]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	b299      	uxth	r1, r3
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	461a      	mov	r2, r3
 80030ac:	f7ff fd66 	bl	8002b7c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	88fa      	ldrh	r2, [r7, #6]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	b298      	uxth	r0, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	b29a      	uxth	r2, r3
 80030be:	88bb      	ldrh	r3, [r7, #4]
 80030c0:	4413      	add	r3, r2
 80030c2:	b299      	uxth	r1, r3
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	461a      	mov	r2, r3
 80030ce:	f7ff fd55 	bl	8002b7c <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	da06      	bge.n	80030e6 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	009a      	lsls	r2, r3, #2
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	4413      	add	r3, r2
 80030e0:	3306      	adds	r3, #6
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	e00a      	b.n	80030fc <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	009a      	lsls	r2, r3, #2
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	4413      	add	r3, r2
 80030f2:	330a      	adds	r3, #10
 80030f4:	617b      	str	r3, [r7, #20]
      current_y--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	3b01      	subs	r3, #1
 80030fa:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	3301      	adds	r3, #1
 8003100:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	429a      	cmp	r2, r3
 8003108:	d999      	bls.n	800303e <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800310a:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <BSP_LCD_FillCircle+0x138>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	490b      	ldr	r1, [pc, #44]	; (800313c <BSP_LCD_FillCircle+0x13c>)
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fb7f 	bl	8002820 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003122:	887a      	ldrh	r2, [r7, #2]
 8003124:	88b9      	ldrh	r1, [r7, #4]
 8003126:	88fb      	ldrh	r3, [r7, #6]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fd85 	bl	8002c38 <BSP_LCD_DrawCircle>
}
 800312e:	bf00      	nop
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	20000774 	.word	0x20000774
 800313c:	20000778 	.word	0x20000778

08003140 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003144:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <BSP_LCD_DisplayOn+0x30>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	4b09      	ldr	r3, [pc, #36]	; (8003170 <BSP_LCD_DisplayOn+0x30>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0201 	orr.w	r2, r2, #1
 8003152:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003154:	2201      	movs	r2, #1
 8003156:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800315a:	4806      	ldr	r0, [pc, #24]	; (8003174 <BSP_LCD_DisplayOn+0x34>)
 800315c:	f003 f9ca 	bl	80064f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003160:	2201      	movs	r2, #1
 8003162:	2108      	movs	r1, #8
 8003164:	4804      	ldr	r0, [pc, #16]	; (8003178 <BSP_LCD_DisplayOn+0x38>)
 8003166:	f003 f9c5 	bl	80064f4 <HAL_GPIO_WritePin>
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	2000068c 	.word	0x2000068c
 8003174:	40022000 	.word	0x40022000
 8003178:	40022800 	.word	0x40022800

0800317c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b090      	sub	sp, #64	; 0x40
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003186:	4b64      	ldr	r3, [pc, #400]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	4a63      	ldr	r2, [pc, #396]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 800318c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003190:	6453      	str	r3, [r2, #68]	; 0x44
 8003192:	4b61      	ldr	r3, [pc, #388]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800319a:	62bb      	str	r3, [r7, #40]	; 0x28
 800319c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800319e:	4b5e      	ldr	r3, [pc, #376]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	4a5d      	ldr	r2, [pc, #372]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 80031a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031a8:	6313      	str	r3, [r2, #48]	; 0x30
 80031aa:	4b5b      	ldr	r3, [pc, #364]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031b6:	4b58      	ldr	r3, [pc, #352]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	4a57      	ldr	r2, [pc, #348]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 80031bc:	f043 0310 	orr.w	r3, r3, #16
 80031c0:	6313      	str	r3, [r2, #48]	; 0x30
 80031c2:	4b55      	ldr	r3, [pc, #340]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	f003 0310 	and.w	r3, r3, #16
 80031ca:	623b      	str	r3, [r7, #32]
 80031cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80031ce:	4b52      	ldr	r3, [pc, #328]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	4a51      	ldr	r2, [pc, #324]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 80031d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031d8:	6313      	str	r3, [r2, #48]	; 0x30
 80031da:	4b4f      	ldr	r3, [pc, #316]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e2:	61fb      	str	r3, [r7, #28]
 80031e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80031e6:	4b4c      	ldr	r3, [pc, #304]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	4a4b      	ldr	r2, [pc, #300]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 80031ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f0:	6313      	str	r3, [r2, #48]	; 0x30
 80031f2:	4b49      	ldr	r3, [pc, #292]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	61bb      	str	r3, [r7, #24]
 80031fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80031fe:	4b46      	ldr	r3, [pc, #280]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	4a45      	ldr	r2, [pc, #276]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 8003204:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003208:	6313      	str	r3, [r2, #48]	; 0x30
 800320a:	4b43      	ldr	r3, [pc, #268]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003216:	4b40      	ldr	r3, [pc, #256]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	4a3f      	ldr	r2, [pc, #252]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 800321c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003220:	6313      	str	r3, [r2, #48]	; 0x30
 8003222:	4b3d      	ldr	r3, [pc, #244]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800322e:	4b3a      	ldr	r3, [pc, #232]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a39      	ldr	r2, [pc, #228]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 8003234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b37      	ldr	r3, [pc, #220]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003246:	4b34      	ldr	r3, [pc, #208]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	4a33      	ldr	r2, [pc, #204]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 800324c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003250:	6313      	str	r3, [r2, #48]	; 0x30
 8003252:	4b31      	ldr	r3, [pc, #196]	; (8003318 <BSP_LCD_MspInit+0x19c>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800325e:	2310      	movs	r3, #16
 8003260:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003262:	2302      	movs	r3, #2
 8003264:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800326a:	2302      	movs	r3, #2
 800326c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800326e:	230e      	movs	r3, #14
 8003270:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003272:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003276:	4619      	mov	r1, r3
 8003278:	4828      	ldr	r0, [pc, #160]	; (800331c <BSP_LCD_MspInit+0x1a0>)
 800327a:	f002 fe6b 	bl	8005f54 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800327e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003282:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003284:	2302      	movs	r3, #2
 8003286:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003288:	2309      	movs	r3, #9
 800328a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800328c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003290:	4619      	mov	r1, r3
 8003292:	4823      	ldr	r0, [pc, #140]	; (8003320 <BSP_LCD_MspInit+0x1a4>)
 8003294:	f002 fe5e 	bl	8005f54 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003298:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 800329c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800329e:	2302      	movs	r3, #2
 80032a0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80032a2:	230e      	movs	r3, #14
 80032a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80032a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032aa:	4619      	mov	r1, r3
 80032ac:	481d      	ldr	r0, [pc, #116]	; (8003324 <BSP_LCD_MspInit+0x1a8>)
 80032ae:	f002 fe51 	bl	8005f54 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80032b2:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80032b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80032b8:	2302      	movs	r3, #2
 80032ba:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80032bc:	230e      	movs	r3, #14
 80032be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80032c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032c4:	4619      	mov	r1, r3
 80032c6:	4818      	ldr	r0, [pc, #96]	; (8003328 <BSP_LCD_MspInit+0x1ac>)
 80032c8:	f002 fe44 	bl	8005f54 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80032cc:	23f7      	movs	r3, #247	; 0xf7
 80032ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80032d4:	230e      	movs	r3, #14
 80032d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80032d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032dc:	4619      	mov	r1, r3
 80032de:	4813      	ldr	r0, [pc, #76]	; (800332c <BSP_LCD_MspInit+0x1b0>)
 80032e0:	f002 fe38 	bl	8005f54 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80032e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80032ea:	2301      	movs	r3, #1
 80032ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80032ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032f2:	4619      	mov	r1, r3
 80032f4:	480b      	ldr	r0, [pc, #44]	; (8003324 <BSP_LCD_MspInit+0x1a8>)
 80032f6:	f002 fe2d 	bl	8005f54 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80032fa:	2308      	movs	r3, #8
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80032fe:	2301      	movs	r3, #1
 8003300:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003302:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003306:	4619      	mov	r1, r3
 8003308:	4808      	ldr	r0, [pc, #32]	; (800332c <BSP_LCD_MspInit+0x1b0>)
 800330a:	f002 fe23 	bl	8005f54 <HAL_GPIO_Init>
}
 800330e:	bf00      	nop
 8003310:	3740      	adds	r7, #64	; 0x40
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40023800 	.word	0x40023800
 800331c:	40021000 	.word	0x40021000
 8003320:	40021800 	.word	0x40021800
 8003324:	40022000 	.word	0x40022000
 8003328:	40022400 	.word	0x40022400
 800332c:	40022800 	.word	0x40022800

08003330 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800333a:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <BSP_LCD_ClockConfig+0x34>)
 800333c:	2208      	movs	r2, #8
 800333e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003340:	4b08      	ldr	r3, [pc, #32]	; (8003364 <BSP_LCD_ClockConfig+0x34>)
 8003342:	22c0      	movs	r2, #192	; 0xc0
 8003344:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003346:	4b07      	ldr	r3, [pc, #28]	; (8003364 <BSP_LCD_ClockConfig+0x34>)
 8003348:	2205      	movs	r2, #5
 800334a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800334c:	4b05      	ldr	r3, [pc, #20]	; (8003364 <BSP_LCD_ClockConfig+0x34>)
 800334e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003352:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003354:	4803      	ldr	r0, [pc, #12]	; (8003364 <BSP_LCD_ClockConfig+0x34>)
 8003356:	f004 ffa9 	bl	80082ac <HAL_RCCEx_PeriphCLKConfig>
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000790 	.word	0x20000790

08003368 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	603a      	str	r2, [r7, #0]
 8003372:	80fb      	strh	r3, [r7, #6]
 8003374:	460b      	mov	r3, r1
 8003376:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003378:	2300      	movs	r3, #0
 800337a:	61fb      	str	r3, [r7, #28]
 800337c:	2300      	movs	r3, #0
 800337e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003380:	4b53      	ldr	r3, [pc, #332]	; (80034d0 <DrawChar+0x168>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	4953      	ldr	r1, [pc, #332]	; (80034d4 <DrawChar+0x16c>)
 8003386:	4613      	mov	r3, r2
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	4413      	add	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	3308      	adds	r3, #8
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	88db      	ldrh	r3, [r3, #6]
 8003396:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003398:	4b4d      	ldr	r3, [pc, #308]	; (80034d0 <DrawChar+0x168>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	494d      	ldr	r1, [pc, #308]	; (80034d4 <DrawChar+0x16c>)
 800339e:	4613      	mov	r3, r2
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	4413      	add	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	440b      	add	r3, r1
 80033a8:	3308      	adds	r3, #8
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	889b      	ldrh	r3, [r3, #4]
 80033ae:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80033b0:	8a3b      	ldrh	r3, [r7, #16]
 80033b2:	3307      	adds	r3, #7
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	da00      	bge.n	80033ba <DrawChar+0x52>
 80033b8:	3307      	adds	r3, #7
 80033ba:	10db      	asrs	r3, r3, #3
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	8a3b      	ldrh	r3, [r7, #16]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	e076      	b.n	80034be <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80033d0:	8a3b      	ldrh	r3, [r7, #16]
 80033d2:	3307      	adds	r3, #7
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	da00      	bge.n	80033da <DrawChar+0x72>
 80033d8:	3307      	adds	r3, #7
 80033da:	10db      	asrs	r3, r3, #3
 80033dc:	461a      	mov	r2, r3
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	fb02 f303 	mul.w	r3, r2, r3
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	4413      	add	r3, r2
 80033e8:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80033ea:	8a3b      	ldrh	r3, [r7, #16]
 80033ec:	3307      	adds	r3, #7
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	da00      	bge.n	80033f4 <DrawChar+0x8c>
 80033f2:	3307      	adds	r3, #7
 80033f4:	10db      	asrs	r3, r3, #3
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d002      	beq.n	8003400 <DrawChar+0x98>
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d004      	beq.n	8003408 <DrawChar+0xa0>
 80033fe:	e00c      	b.n	800341a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	617b      	str	r3, [r7, #20]
      break;
 8003406:	e016      	b.n	8003436 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	021b      	lsls	r3, r3, #8
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	3201      	adds	r2, #1
 8003412:	7812      	ldrb	r2, [r2, #0]
 8003414:	4313      	orrs	r3, r2
 8003416:	617b      	str	r3, [r7, #20]
      break;
 8003418:	e00d      	b.n	8003436 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	041a      	lsls	r2, r3, #16
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	3301      	adds	r3, #1
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	021b      	lsls	r3, r3, #8
 8003428:	4313      	orrs	r3, r2
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	3202      	adds	r2, #2
 800342e:	7812      	ldrb	r2, [r2, #0]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
      break;
 8003434:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003436:	2300      	movs	r3, #0
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	e036      	b.n	80034aa <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800343c:	8a3a      	ldrh	r2, [r7, #16]
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	1ad2      	subs	r2, r2, r3
 8003442:	7bfb      	ldrb	r3, [r7, #15]
 8003444:	4413      	add	r3, r2
 8003446:	3b01      	subs	r3, #1
 8003448:	2201      	movs	r2, #1
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	461a      	mov	r2, r3
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	4013      	ands	r3, r2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d012      	beq.n	800347e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	b29a      	uxth	r2, r3
 800345c:	88fb      	ldrh	r3, [r7, #6]
 800345e:	4413      	add	r3, r2
 8003460:	b298      	uxth	r0, r3
 8003462:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <DrawChar+0x168>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	491b      	ldr	r1, [pc, #108]	; (80034d4 <DrawChar+0x16c>)
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	88bb      	ldrh	r3, [r7, #4]
 8003476:	4619      	mov	r1, r3
 8003478:	f7ff fcc8 	bl	8002e0c <BSP_LCD_DrawPixel>
 800347c:	e012      	b.n	80034a4 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	b29a      	uxth	r2, r3
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	4413      	add	r3, r2
 8003486:	b298      	uxth	r0, r3
 8003488:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <DrawChar+0x168>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	4911      	ldr	r1, [pc, #68]	; (80034d4 <DrawChar+0x16c>)
 800348e:	4613      	mov	r3, r2
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	3304      	adds	r3, #4
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	88bb      	ldrh	r3, [r7, #4]
 800349e:	4619      	mov	r1, r3
 80034a0:	f7ff fcb4 	bl	8002e0c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	3301      	adds	r3, #1
 80034a8:	61bb      	str	r3, [r7, #24]
 80034aa:	8a3b      	ldrh	r3, [r7, #16]
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d3c4      	bcc.n	800343c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80034b2:	88bb      	ldrh	r3, [r7, #4]
 80034b4:	3301      	adds	r3, #1
 80034b6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	3301      	adds	r3, #1
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	8a7b      	ldrh	r3, [r7, #18]
 80034c0:	69fa      	ldr	r2, [r7, #28]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d384      	bcc.n	80033d0 <DrawChar+0x68>
  }
}
 80034c6:	bf00      	nop
 80034c8:	bf00      	nop
 80034ca:	3720      	adds	r7, #32
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	20000774 	.word	0x20000774
 80034d4:	20000778 	.word	0x20000778

080034d8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af02      	add	r7, sp, #8
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80034e6:	4b1e      	ldr	r3, [pc, #120]	; (8003560 <LL_FillBuffer+0x88>)
 80034e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80034ec:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80034ee:	4b1d      	ldr	r3, [pc, #116]	; (8003564 <LL_FillBuffer+0x8c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1d      	ldr	r2, [pc, #116]	; (8003568 <LL_FillBuffer+0x90>)
 80034f4:	2134      	movs	r1, #52	; 0x34
 80034f6:	fb01 f303 	mul.w	r3, r1, r3
 80034fa:	4413      	add	r3, r2
 80034fc:	3348      	adds	r3, #72	; 0x48
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d103      	bne.n	800350c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003504:	4b16      	ldr	r3, [pc, #88]	; (8003560 <LL_FillBuffer+0x88>)
 8003506:	2202      	movs	r2, #2
 8003508:	609a      	str	r2, [r3, #8]
 800350a:	e002      	b.n	8003512 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800350c:	4b14      	ldr	r3, [pc, #80]	; (8003560 <LL_FillBuffer+0x88>)
 800350e:	2200      	movs	r2, #0
 8003510:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003512:	4a13      	ldr	r2, [pc, #76]	; (8003560 <LL_FillBuffer+0x88>)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003518:	4b11      	ldr	r3, [pc, #68]	; (8003560 <LL_FillBuffer+0x88>)
 800351a:	4a14      	ldr	r2, [pc, #80]	; (800356c <LL_FillBuffer+0x94>)
 800351c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800351e:	4810      	ldr	r0, [pc, #64]	; (8003560 <LL_FillBuffer+0x88>)
 8003520:	f002 f97c 	bl	800581c <HAL_DMA2D_Init>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d115      	bne.n	8003556 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800352a:	68f9      	ldr	r1, [r7, #12]
 800352c:	480c      	ldr	r0, [pc, #48]	; (8003560 <LL_FillBuffer+0x88>)
 800352e:	f002 fbe3 	bl	8005cf8 <HAL_DMA2D_ConfigLayer>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10e      	bne.n	8003556 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69f9      	ldr	r1, [r7, #28]
 8003542:	4807      	ldr	r0, [pc, #28]	; (8003560 <LL_FillBuffer+0x88>)
 8003544:	f002 f9b4 	bl	80058b0 <HAL_DMA2D_Start>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d103      	bne.n	8003556 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800354e:	210a      	movs	r1, #10
 8003550:	4803      	ldr	r0, [pc, #12]	; (8003560 <LL_FillBuffer+0x88>)
 8003552:	f002 f9d8 	bl	8005906 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000734 	.word	0x20000734
 8003564:	20000774 	.word	0x20000774
 8003568:	2000068c 	.word	0x2000068c
 800356c:	4002b000 	.word	0x4002b000

08003570 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 800357e:	4b1c      	ldr	r3, [pc, #112]	; (80035f0 <LL_ConvertLineToARGB8888+0x80>)
 8003580:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003584:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003586:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <LL_ConvertLineToARGB8888+0x80>)
 8003588:	2200      	movs	r2, #0
 800358a:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 800358c:	4b18      	ldr	r3, [pc, #96]	; (80035f0 <LL_ConvertLineToARGB8888+0x80>)
 800358e:	2200      	movs	r2, #0
 8003590:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003592:	4b17      	ldr	r3, [pc, #92]	; (80035f0 <LL_ConvertLineToARGB8888+0x80>)
 8003594:	2200      	movs	r2, #0
 8003596:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8003598:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <LL_ConvertLineToARGB8888+0x80>)
 800359a:	22ff      	movs	r2, #255	; 0xff
 800359c:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 800359e:	4a14      	ldr	r2, [pc, #80]	; (80035f0 <LL_ConvertLineToARGB8888+0x80>)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 80035a4:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <LL_ConvertLineToARGB8888+0x80>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 80035aa:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <LL_ConvertLineToARGB8888+0x80>)
 80035ac:	4a11      	ldr	r2, [pc, #68]	; (80035f4 <LL_ConvertLineToARGB8888+0x84>)
 80035ae:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80035b0:	480f      	ldr	r0, [pc, #60]	; (80035f0 <LL_ConvertLineToARGB8888+0x80>)
 80035b2:	f002 f933 	bl	800581c <HAL_DMA2D_Init>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d115      	bne.n	80035e8 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 80035bc:	2101      	movs	r1, #1
 80035be:	480c      	ldr	r0, [pc, #48]	; (80035f0 <LL_ConvertLineToARGB8888+0x80>)
 80035c0:	f002 fb9a 	bl	8005cf8 <HAL_DMA2D_ConfigLayer>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10e      	bne.n	80035e8 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80035ca:	68f9      	ldr	r1, [r7, #12]
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	2301      	movs	r3, #1
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4806      	ldr	r0, [pc, #24]	; (80035f0 <LL_ConvertLineToARGB8888+0x80>)
 80035d6:	f002 f96b 	bl	80058b0 <HAL_DMA2D_Start>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d103      	bne.n	80035e8 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80035e0:	210a      	movs	r1, #10
 80035e2:	4803      	ldr	r0, [pc, #12]	; (80035f0 <LL_ConvertLineToARGB8888+0x80>)
 80035e4:	f002 f98f 	bl	8005906 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80035e8:	bf00      	nop
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20000734 	.word	0x20000734
 80035f4:	4002b000 	.word	0x4002b000

080035f8 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80035fc:	4b29      	ldr	r3, [pc, #164]	; (80036a4 <BSP_SDRAM_Init+0xac>)
 80035fe:	4a2a      	ldr	r2, [pc, #168]	; (80036a8 <BSP_SDRAM_Init+0xb0>)
 8003600:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003602:	4b2a      	ldr	r3, [pc, #168]	; (80036ac <BSP_SDRAM_Init+0xb4>)
 8003604:	2202      	movs	r2, #2
 8003606:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003608:	4b28      	ldr	r3, [pc, #160]	; (80036ac <BSP_SDRAM_Init+0xb4>)
 800360a:	2207      	movs	r2, #7
 800360c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800360e:	4b27      	ldr	r3, [pc, #156]	; (80036ac <BSP_SDRAM_Init+0xb4>)
 8003610:	2204      	movs	r2, #4
 8003612:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003614:	4b25      	ldr	r3, [pc, #148]	; (80036ac <BSP_SDRAM_Init+0xb4>)
 8003616:	2207      	movs	r2, #7
 8003618:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800361a:	4b24      	ldr	r3, [pc, #144]	; (80036ac <BSP_SDRAM_Init+0xb4>)
 800361c:	2202      	movs	r2, #2
 800361e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003620:	4b22      	ldr	r3, [pc, #136]	; (80036ac <BSP_SDRAM_Init+0xb4>)
 8003622:	2202      	movs	r2, #2
 8003624:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003626:	4b21      	ldr	r3, [pc, #132]	; (80036ac <BSP_SDRAM_Init+0xb4>)
 8003628:	2202      	movs	r2, #2
 800362a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800362c:	4b1d      	ldr	r3, [pc, #116]	; (80036a4 <BSP_SDRAM_Init+0xac>)
 800362e:	2200      	movs	r2, #0
 8003630:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003632:	4b1c      	ldr	r3, [pc, #112]	; (80036a4 <BSP_SDRAM_Init+0xac>)
 8003634:	2200      	movs	r2, #0
 8003636:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003638:	4b1a      	ldr	r3, [pc, #104]	; (80036a4 <BSP_SDRAM_Init+0xac>)
 800363a:	2204      	movs	r2, #4
 800363c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800363e:	4b19      	ldr	r3, [pc, #100]	; (80036a4 <BSP_SDRAM_Init+0xac>)
 8003640:	2210      	movs	r2, #16
 8003642:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003644:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <BSP_SDRAM_Init+0xac>)
 8003646:	2240      	movs	r2, #64	; 0x40
 8003648:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800364a:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <BSP_SDRAM_Init+0xac>)
 800364c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003650:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003652:	4b14      	ldr	r3, [pc, #80]	; (80036a4 <BSP_SDRAM_Init+0xac>)
 8003654:	2200      	movs	r2, #0
 8003656:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003658:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <BSP_SDRAM_Init+0xac>)
 800365a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800365e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003660:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <BSP_SDRAM_Init+0xac>)
 8003662:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003666:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003668:	4b0e      	ldr	r3, [pc, #56]	; (80036a4 <BSP_SDRAM_Init+0xac>)
 800366a:	2200      	movs	r2, #0
 800366c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800366e:	2100      	movs	r1, #0
 8003670:	480c      	ldr	r0, [pc, #48]	; (80036a4 <BSP_SDRAM_Init+0xac>)
 8003672:	f000 f87f 	bl	8003774 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003676:	490d      	ldr	r1, [pc, #52]	; (80036ac <BSP_SDRAM_Init+0xb4>)
 8003678:	480a      	ldr	r0, [pc, #40]	; (80036a4 <BSP_SDRAM_Init+0xac>)
 800367a:	f005 fddd 	bl	8009238 <HAL_SDRAM_Init>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003684:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <BSP_SDRAM_Init+0xb8>)
 8003686:	2201      	movs	r2, #1
 8003688:	701a      	strb	r2, [r3, #0]
 800368a:	e002      	b.n	8003692 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800368c:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <BSP_SDRAM_Init+0xb8>)
 800368e:	2200      	movs	r2, #0
 8003690:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003692:	f240 6003 	movw	r0, #1539	; 0x603
 8003696:	f000 f80d 	bl	80036b4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800369a:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <BSP_SDRAM_Init+0xb8>)
 800369c:	781b      	ldrb	r3, [r3, #0]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000814 	.word	0x20000814
 80036a8:	a0000140 	.word	0xa0000140
 80036ac:	20000848 	.word	0x20000848
 80036b0:	20000038 	.word	0x20000038

080036b4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80036c0:	4b2a      	ldr	r3, [pc, #168]	; (800376c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036c2:	2201      	movs	r2, #1
 80036c4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80036c6:	4b29      	ldr	r3, [pc, #164]	; (800376c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036c8:	2210      	movs	r2, #16
 80036ca:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80036cc:	4b27      	ldr	r3, [pc, #156]	; (800376c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80036d2:	4b26      	ldr	r3, [pc, #152]	; (800376c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80036d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036dc:	4923      	ldr	r1, [pc, #140]	; (800376c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036de:	4824      	ldr	r0, [pc, #144]	; (8003770 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80036e0:	f005 fdde 	bl	80092a0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80036e4:	2001      	movs	r0, #1
 80036e6:	f001 f8fb 	bl	80048e0 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80036ea:	4b20      	ldr	r3, [pc, #128]	; (800376c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036ec:	2202      	movs	r2, #2
 80036ee:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80036f0:	4b1e      	ldr	r3, [pc, #120]	; (800376c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036f2:	2210      	movs	r2, #16
 80036f4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80036f6:	4b1d      	ldr	r3, [pc, #116]	; (800376c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80036fc:	4b1b      	ldr	r3, [pc, #108]	; (800376c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036fe:	2200      	movs	r2, #0
 8003700:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003706:	4919      	ldr	r1, [pc, #100]	; (800376c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003708:	4819      	ldr	r0, [pc, #100]	; (8003770 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800370a:	f005 fdc9 	bl	80092a0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800370e:	4b17      	ldr	r3, [pc, #92]	; (800376c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003710:	2203      	movs	r2, #3
 8003712:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003714:	4b15      	ldr	r3, [pc, #84]	; (800376c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003716:	2210      	movs	r2, #16
 8003718:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800371a:	4b14      	ldr	r3, [pc, #80]	; (800376c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800371c:	2208      	movs	r2, #8
 800371e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003720:	4b12      	ldr	r3, [pc, #72]	; (800376c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003722:	2200      	movs	r2, #0
 8003724:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003726:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800372a:	4910      	ldr	r1, [pc, #64]	; (800376c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800372c:	4810      	ldr	r0, [pc, #64]	; (8003770 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800372e:	f005 fdb7 	bl	80092a0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003732:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003736:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003738:	4b0c      	ldr	r3, [pc, #48]	; (800376c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800373a:	2204      	movs	r2, #4
 800373c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800373e:	4b0b      	ldr	r3, [pc, #44]	; (800376c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003740:	2210      	movs	r2, #16
 8003742:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003744:	4b09      	ldr	r3, [pc, #36]	; (800376c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003746:	2201      	movs	r2, #1
 8003748:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4a07      	ldr	r2, [pc, #28]	; (800376c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800374e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003750:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003754:	4905      	ldr	r1, [pc, #20]	; (800376c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003756:	4806      	ldr	r0, [pc, #24]	; (8003770 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003758:	f005 fda2 	bl	80092a0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	4804      	ldr	r0, [pc, #16]	; (8003770 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003760:	f005 fdd3 	bl	800930a <HAL_SDRAM_ProgramRefreshRate>
}
 8003764:	bf00      	nop
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20000864 	.word	0x20000864
 8003770:	20000814 	.word	0x20000814

08003774 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003774:	b580      	push	{r7, lr}
 8003776:	b090      	sub	sp, #64	; 0x40
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800377e:	4b70      	ldr	r3, [pc, #448]	; (8003940 <BSP_SDRAM_MspInit+0x1cc>)
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	4a6f      	ldr	r2, [pc, #444]	; (8003940 <BSP_SDRAM_MspInit+0x1cc>)
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	6393      	str	r3, [r2, #56]	; 0x38
 800378a:	4b6d      	ldr	r3, [pc, #436]	; (8003940 <BSP_SDRAM_MspInit+0x1cc>)
 800378c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	62bb      	str	r3, [r7, #40]	; 0x28
 8003794:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003796:	4b6a      	ldr	r3, [pc, #424]	; (8003940 <BSP_SDRAM_MspInit+0x1cc>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	4a69      	ldr	r2, [pc, #420]	; (8003940 <BSP_SDRAM_MspInit+0x1cc>)
 800379c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037a0:	6313      	str	r3, [r2, #48]	; 0x30
 80037a2:	4b67      	ldr	r3, [pc, #412]	; (8003940 <BSP_SDRAM_MspInit+0x1cc>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ae:	4b64      	ldr	r3, [pc, #400]	; (8003940 <BSP_SDRAM_MspInit+0x1cc>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	4a63      	ldr	r2, [pc, #396]	; (8003940 <BSP_SDRAM_MspInit+0x1cc>)
 80037b4:	f043 0304 	orr.w	r3, r3, #4
 80037b8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ba:	4b61      	ldr	r3, [pc, #388]	; (8003940 <BSP_SDRAM_MspInit+0x1cc>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	623b      	str	r3, [r7, #32]
 80037c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037c6:	4b5e      	ldr	r3, [pc, #376]	; (8003940 <BSP_SDRAM_MspInit+0x1cc>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	4a5d      	ldr	r2, [pc, #372]	; (8003940 <BSP_SDRAM_MspInit+0x1cc>)
 80037cc:	f043 0308 	orr.w	r3, r3, #8
 80037d0:	6313      	str	r3, [r2, #48]	; 0x30
 80037d2:	4b5b      	ldr	r3, [pc, #364]	; (8003940 <BSP_SDRAM_MspInit+0x1cc>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	61fb      	str	r3, [r7, #28]
 80037dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80037de:	4b58      	ldr	r3, [pc, #352]	; (8003940 <BSP_SDRAM_MspInit+0x1cc>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	4a57      	ldr	r2, [pc, #348]	; (8003940 <BSP_SDRAM_MspInit+0x1cc>)
 80037e4:	f043 0310 	orr.w	r3, r3, #16
 80037e8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ea:	4b55      	ldr	r3, [pc, #340]	; (8003940 <BSP_SDRAM_MspInit+0x1cc>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	61bb      	str	r3, [r7, #24]
 80037f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80037f6:	4b52      	ldr	r3, [pc, #328]	; (8003940 <BSP_SDRAM_MspInit+0x1cc>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	4a51      	ldr	r2, [pc, #324]	; (8003940 <BSP_SDRAM_MspInit+0x1cc>)
 80037fc:	f043 0320 	orr.w	r3, r3, #32
 8003800:	6313      	str	r3, [r2, #48]	; 0x30
 8003802:	4b4f      	ldr	r3, [pc, #316]	; (8003940 <BSP_SDRAM_MspInit+0x1cc>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	f003 0320 	and.w	r3, r3, #32
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800380e:	4b4c      	ldr	r3, [pc, #304]	; (8003940 <BSP_SDRAM_MspInit+0x1cc>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	4a4b      	ldr	r2, [pc, #300]	; (8003940 <BSP_SDRAM_MspInit+0x1cc>)
 8003814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003818:	6313      	str	r3, [r2, #48]	; 0x30
 800381a:	4b49      	ldr	r3, [pc, #292]	; (8003940 <BSP_SDRAM_MspInit+0x1cc>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003822:	613b      	str	r3, [r7, #16]
 8003824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003826:	4b46      	ldr	r3, [pc, #280]	; (8003940 <BSP_SDRAM_MspInit+0x1cc>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	4a45      	ldr	r2, [pc, #276]	; (8003940 <BSP_SDRAM_MspInit+0x1cc>)
 800382c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003830:	6313      	str	r3, [r2, #48]	; 0x30
 8003832:	4b43      	ldr	r3, [pc, #268]	; (8003940 <BSP_SDRAM_MspInit+0x1cc>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800383e:	2302      	movs	r3, #2
 8003840:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003842:	2301      	movs	r3, #1
 8003844:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003846:	2302      	movs	r3, #2
 8003848:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800384a:	230c      	movs	r3, #12
 800384c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800384e:	2308      	movs	r3, #8
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003852:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003856:	4619      	mov	r1, r3
 8003858:	483a      	ldr	r0, [pc, #232]	; (8003944 <BSP_SDRAM_MspInit+0x1d0>)
 800385a:	f002 fb7b 	bl	8005f54 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800385e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003864:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003868:	4619      	mov	r1, r3
 800386a:	4837      	ldr	r0, [pc, #220]	; (8003948 <BSP_SDRAM_MspInit+0x1d4>)
 800386c:	f002 fb72 	bl	8005f54 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003870:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003874:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800387a:	4619      	mov	r1, r3
 800387c:	4833      	ldr	r0, [pc, #204]	; (800394c <BSP_SDRAM_MspInit+0x1d8>)
 800387e:	f002 fb69 	bl	8005f54 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003882:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003886:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003888:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800388c:	4619      	mov	r1, r3
 800388e:	4830      	ldr	r0, [pc, #192]	; (8003950 <BSP_SDRAM_MspInit+0x1dc>)
 8003890:	f002 fb60 	bl	8005f54 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003894:	f248 1333 	movw	r3, #33075	; 0x8133
 8003898:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800389a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800389e:	4619      	mov	r1, r3
 80038a0:	482c      	ldr	r0, [pc, #176]	; (8003954 <BSP_SDRAM_MspInit+0x1e0>)
 80038a2:	f002 fb57 	bl	8005f54 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80038a6:	2328      	movs	r3, #40	; 0x28
 80038a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80038aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038ae:	4619      	mov	r1, r3
 80038b0:	4829      	ldr	r0, [pc, #164]	; (8003958 <BSP_SDRAM_MspInit+0x1e4>)
 80038b2:	f002 fb4f 	bl	8005f54 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80038b6:	4b29      	ldr	r3, [pc, #164]	; (800395c <BSP_SDRAM_MspInit+0x1e8>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80038bc:	4b27      	ldr	r3, [pc, #156]	; (800395c <BSP_SDRAM_MspInit+0x1e8>)
 80038be:	2280      	movs	r2, #128	; 0x80
 80038c0:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80038c2:	4b26      	ldr	r3, [pc, #152]	; (800395c <BSP_SDRAM_MspInit+0x1e8>)
 80038c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c8:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80038ca:	4b24      	ldr	r3, [pc, #144]	; (800395c <BSP_SDRAM_MspInit+0x1e8>)
 80038cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038d0:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038d2:	4b22      	ldr	r3, [pc, #136]	; (800395c <BSP_SDRAM_MspInit+0x1e8>)
 80038d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038d8:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80038da:	4b20      	ldr	r3, [pc, #128]	; (800395c <BSP_SDRAM_MspInit+0x1e8>)
 80038dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038e0:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80038e2:	4b1e      	ldr	r3, [pc, #120]	; (800395c <BSP_SDRAM_MspInit+0x1e8>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80038e8:	4b1c      	ldr	r3, [pc, #112]	; (800395c <BSP_SDRAM_MspInit+0x1e8>)
 80038ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038ee:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80038f0:	4b1a      	ldr	r3, [pc, #104]	; (800395c <BSP_SDRAM_MspInit+0x1e8>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80038f6:	4b19      	ldr	r3, [pc, #100]	; (800395c <BSP_SDRAM_MspInit+0x1e8>)
 80038f8:	2203      	movs	r2, #3
 80038fa:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80038fc:	4b17      	ldr	r3, [pc, #92]	; (800395c <BSP_SDRAM_MspInit+0x1e8>)
 80038fe:	2200      	movs	r2, #0
 8003900:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003902:	4b16      	ldr	r3, [pc, #88]	; (800395c <BSP_SDRAM_MspInit+0x1e8>)
 8003904:	2200      	movs	r2, #0
 8003906:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003908:	4b14      	ldr	r3, [pc, #80]	; (800395c <BSP_SDRAM_MspInit+0x1e8>)
 800390a:	4a15      	ldr	r2, [pc, #84]	; (8003960 <BSP_SDRAM_MspInit+0x1ec>)
 800390c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a12      	ldr	r2, [pc, #72]	; (800395c <BSP_SDRAM_MspInit+0x1e8>)
 8003912:	631a      	str	r2, [r3, #48]	; 0x30
 8003914:	4a11      	ldr	r2, [pc, #68]	; (800395c <BSP_SDRAM_MspInit+0x1e8>)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800391a:	4810      	ldr	r0, [pc, #64]	; (800395c <BSP_SDRAM_MspInit+0x1e8>)
 800391c:	f001 fe6e 	bl	80055fc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003920:	480e      	ldr	r0, [pc, #56]	; (800395c <BSP_SDRAM_MspInit+0x1e8>)
 8003922:	f001 fdbd 	bl	80054a0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003926:	2200      	movs	r2, #0
 8003928:	210f      	movs	r1, #15
 800392a:	2038      	movs	r0, #56	; 0x38
 800392c:	f001 fcae 	bl	800528c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003930:	2038      	movs	r0, #56	; 0x38
 8003932:	f001 fcc7 	bl	80052c4 <HAL_NVIC_EnableIRQ>
}
 8003936:	bf00      	nop
 8003938:	3740      	adds	r7, #64	; 0x40
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40023800 	.word	0x40023800
 8003944:	40020800 	.word	0x40020800
 8003948:	40020c00 	.word	0x40020c00
 800394c:	40021000 	.word	0x40021000
 8003950:	40021400 	.word	0x40021400
 8003954:	40021800 	.word	0x40021800
 8003958:	40021c00 	.word	0x40021c00
 800395c:	20000874 	.word	0x20000874
 8003960:	40026410 	.word	0x40026410

08003964 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	460a      	mov	r2, r1
 800396e:	80fb      	strh	r3, [r7, #6]
 8003970:	4613      	mov	r3, r2
 8003972:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003978:	4a14      	ldr	r2, [pc, #80]	; (80039cc <BSP_TS_Init+0x68>)
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800397e:	4a14      	ldr	r2, [pc, #80]	; (80039d0 <BSP_TS_Init+0x6c>)
 8003980:	88bb      	ldrh	r3, [r7, #4]
 8003982:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003984:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <BSP_TS_Init+0x70>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2070      	movs	r0, #112	; 0x70
 800398a:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800398c:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <BSP_TS_Init+0x70>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2070      	movs	r0, #112	; 0x70
 8003992:	4798      	blx	r3
 8003994:	4603      	mov	r3, r0
 8003996:	2b51      	cmp	r3, #81	; 0x51
 8003998:	d111      	bne.n	80039be <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800399a:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <BSP_TS_Init+0x74>)
 800399c:	4a0d      	ldr	r2, [pc, #52]	; (80039d4 <BSP_TS_Init+0x70>)
 800399e:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80039a0:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <BSP_TS_Init+0x78>)
 80039a2:	2270      	movs	r2, #112	; 0x70
 80039a4:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80039a6:	4b0e      	ldr	r3, [pc, #56]	; (80039e0 <BSP_TS_Init+0x7c>)
 80039a8:	2208      	movs	r2, #8
 80039aa:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80039ac:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <BSP_TS_Init+0x74>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <BSP_TS_Init+0x78>)
 80039b4:	7812      	ldrb	r2, [r2, #0]
 80039b6:	b292      	uxth	r2, r2
 80039b8:	4610      	mov	r0, r2
 80039ba:	4798      	blx	r3
 80039bc:	e001      	b.n	80039c2 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80039be:	2303      	movs	r3, #3
 80039c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	200008d8 	.word	0x200008d8
 80039d0:	200008da 	.word	0x200008da
 80039d4:	20000000 	.word	0x20000000
 80039d8:	200008d4 	.word	0x200008d4
 80039dc:	200008dd 	.word	0x200008dd
 80039e0:	200008dc 	.word	0x200008dc

080039e4 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80039e4:	b590      	push	{r4, r7, lr}
 80039e6:	b097      	sub	sp, #92	; 0x5c
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 80039f2:	2300      	movs	r3, #0
 80039f4:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 80039f6:	2300      	movs	r3, #0
 80039f8:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80039fe:	4bb4      	ldr	r3, [pc, #720]	; (8003cd0 <BSP_TS_GetState+0x2ec>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	4ab3      	ldr	r2, [pc, #716]	; (8003cd4 <BSP_TS_GetState+0x2f0>)
 8003a06:	7812      	ldrb	r2, [r2, #0]
 8003a08:	b292      	uxth	r2, r2
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	4798      	blx	r3
 8003a0e:	4603      	mov	r3, r0
 8003a10:	461a      	mov	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8196 	beq.w	8003d4c <BSP_TS_GetState+0x368>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8003a20:	2300      	movs	r3, #0
 8003a22:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a24:	e185      	b.n	8003d32 <BSP_TS_GetState+0x34e>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8003a26:	4baa      	ldr	r3, [pc, #680]	; (8003cd0 <BSP_TS_GetState+0x2ec>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	4aa9      	ldr	r2, [pc, #676]	; (8003cd4 <BSP_TS_GetState+0x2f0>)
 8003a2e:	7812      	ldrb	r2, [r2, #0]
 8003a30:	b290      	uxth	r0, r2
 8003a32:	f107 0120 	add.w	r1, r7, #32
 8003a36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a38:	0052      	lsls	r2, r2, #1
 8003a3a:	188c      	adds	r4, r1, r2
 8003a3c:	f107 0114 	add.w	r1, r7, #20
 8003a40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a42:	0052      	lsls	r2, r2, #1
 8003a44:	440a      	add	r2, r1
 8003a46:	4621      	mov	r1, r4
 8003a48:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8003a4a:	4ba3      	ldr	r3, [pc, #652]	; (8003cd8 <BSP_TS_GetState+0x2f4>)
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d117      	bne.n	8003a82 <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8003a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	3350      	adds	r3, #80	; 0x50
 8003a58:	443b      	add	r3, r7
 8003a5a:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	3350      	adds	r3, #80	; 0x50
 8003a64:	443b      	add	r3, r7
 8003a66:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8003a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	3350      	adds	r3, #80	; 0x50
 8003a70:	443b      	add	r3, r7
 8003a72:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	3350      	adds	r3, #80	; 0x50
 8003a7c:	443b      	add	r3, r7
 8003a7e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8003a82:	4b95      	ldr	r3, [pc, #596]	; (8003cd8 <BSP_TS_GetState+0x2f4>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00e      	beq.n	8003aac <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8003a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	3350      	adds	r3, #80	; 0x50
 8003a94:	443b      	add	r3, r7
 8003a96:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8003a9a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	3350      	adds	r3, #80	; 0x50
 8003aa6:	443b      	add	r3, r7
 8003aa8:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8003aac:	4b8a      	ldr	r3, [pc, #552]	; (8003cd8 <BSP_TS_GetState+0x2f4>)
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00e      	beq.n	8003ad6 <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8003ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	3350      	adds	r3, #80	; 0x50
 8003abe:	443b      	add	r3, r7
 8003ac0:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8003ac4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	3350      	adds	r3, #80	; 0x50
 8003ad0:	443b      	add	r3, r7
 8003ad2:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8003ad6:	4b80      	ldr	r3, [pc, #512]	; (8003cd8 <BSP_TS_GetState+0x2f4>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d017      	beq.n	8003b12 <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8003ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	3350      	adds	r3, #80	; 0x50
 8003ae8:	443b      	add	r3, r7
 8003aea:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	3350      	adds	r3, #80	; 0x50
 8003af4:	443b      	add	r3, r7
 8003af6:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8003afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	3350      	adds	r3, #80	; 0x50
 8003b00:	443b      	add	r3, r7
 8003b02:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	3350      	adds	r3, #80	; 0x50
 8003b0c:	443b      	add	r3, r7
 8003b0e:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8003b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	3350      	adds	r3, #80	; 0x50
 8003b18:	443b      	add	r3, r7
 8003b1a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4a6e      	ldr	r2, [pc, #440]	; (8003cdc <BSP_TS_GetState+0x2f8>)
 8003b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b28:	4299      	cmp	r1, r3
 8003b2a:	d90d      	bls.n	8003b48 <BSP_TS_GetState+0x164>
 8003b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	3350      	adds	r3, #80	; 0x50
 8003b32:	443b      	add	r3, r7
 8003b34:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8003b38:	4968      	ldr	r1, [pc, #416]	; (8003cdc <BSP_TS_GetState+0x2f8>)
 8003b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	e00c      	b.n	8003b62 <BSP_TS_GetState+0x17e>
 8003b48:	4a64      	ldr	r2, [pc, #400]	; (8003cdc <BSP_TS_GetState+0x2f8>)
 8003b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	3350      	adds	r3, #80	; 0x50
 8003b58:	443b      	add	r3, r7
 8003b5a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8003b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	3350      	adds	r3, #80	; 0x50
 8003b6c:	443b      	add	r3, r7
 8003b6e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003b72:	4619      	mov	r1, r3
 8003b74:	4a5a      	ldr	r2, [pc, #360]	; (8003ce0 <BSP_TS_GetState+0x2fc>)
 8003b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7c:	4299      	cmp	r1, r3
 8003b7e:	d90d      	bls.n	8003b9c <BSP_TS_GetState+0x1b8>
 8003b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	3350      	adds	r3, #80	; 0x50
 8003b86:	443b      	add	r3, r7
 8003b88:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8003b8c:	4954      	ldr	r1, [pc, #336]	; (8003ce0 <BSP_TS_GetState+0x2fc>)
 8003b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	e00c      	b.n	8003bb6 <BSP_TS_GetState+0x1d2>
 8003b9c:	4a50      	ldr	r2, [pc, #320]	; (8003ce0 <BSP_TS_GetState+0x2fc>)
 8003b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	3350      	adds	r3, #80	; 0x50
 8003bac:	443b      	add	r3, r7
 8003bae:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8003bba:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003bbe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003bc2:	4413      	add	r3, r2
 8003bc4:	2b05      	cmp	r3, #5
 8003bc6:	dd15      	ble.n	8003bf4 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8003bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	3350      	adds	r3, #80	; 0x50
 8003bce:	443b      	add	r3, r7
 8003bd0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4a41      	ldr	r2, [pc, #260]	; (8003cdc <BSP_TS_GetState+0x2f8>)
 8003bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8003bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	3350      	adds	r3, #80	; 0x50
 8003be4:	443b      	add	r3, r7
 8003be6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003bea:	4619      	mov	r1, r3
 8003bec:	4a3c      	ldr	r2, [pc, #240]	; (8003ce0 <BSP_TS_GetState+0x2fc>)
 8003bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bf0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8003bf4:	4b37      	ldr	r3, [pc, #220]	; (8003cd4 <BSP_TS_GetState+0x2f0>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b70      	cmp	r3, #112	; 0x70
 8003bfa:	d119      	bne.n	8003c30 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8003bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	3350      	adds	r3, #80	; 0x50
 8003c02:	443b      	add	r3, r7
 8003c04:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	4413      	add	r3, r2
 8003c10:	460a      	mov	r2, r1
 8003c12:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8003c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	3350      	adds	r3, #80	; 0x50
 8003c1a:	443b      	add	r3, r7
 8003c1c:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c24:	3304      	adds	r3, #4
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	4413      	add	r3, r2
 8003c2a:	460a      	mov	r2, r1
 8003c2c:	809a      	strh	r2, [r3, #4]
 8003c2e:	e022      	b.n	8003c76 <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8003c30:	4b2c      	ldr	r3, [pc, #176]	; (8003ce4 <BSP_TS_GetState+0x300>)
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	4619      	mov	r1, r3
 8003c36:	4a29      	ldr	r2, [pc, #164]	; (8003cdc <BSP_TS_GetState+0x2f8>)
 8003c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	0b1b      	lsrs	r3, r3, #12
 8003c44:	b299      	uxth	r1, r3
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	4413      	add	r3, r2
 8003c4e:	460a      	mov	r2, r1
 8003c50:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8003c52:	4b25      	ldr	r3, [pc, #148]	; (8003ce8 <BSP_TS_GetState+0x304>)
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	4619      	mov	r1, r3
 8003c58:	4a21      	ldr	r2, [pc, #132]	; (8003ce0 <BSP_TS_GetState+0x2fc>)
 8003c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
 8003c64:	0b1b      	lsrs	r3, r3, #12
 8003c66:	b299      	uxth	r1, r3
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	4413      	add	r3, r2
 8003c72:	460a      	mov	r2, r1
 8003c74:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8003c76:	4b17      	ldr	r3, [pc, #92]	; (8003cd4 <BSP_TS_GetState+0x2f0>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	b298      	uxth	r0, r3
 8003c7c:	f107 010c 	add.w	r1, r7, #12
 8003c80:	f107 0210 	add.w	r2, r7, #16
 8003c84:	f107 0308 	add.w	r3, r7, #8
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003c8e:	f7fd f95b 	bl	8000f48 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	b2d9      	uxtb	r1, r3
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3316      	adds	r3, #22
 8003c9e:	460a      	mov	r2, r1
 8003ca0:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	b2d9      	uxtb	r1, r3
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003caa:	4413      	add	r3, r2
 8003cac:	3320      	adds	r3, #32
 8003cae:	460a      	mov	r2, r1
 8003cb0:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d835      	bhi.n	8003d24 <BSP_TS_GetState+0x340>
 8003cb8:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <BSP_TS_GetState+0x2dc>)
 8003cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbe:	bf00      	nop
 8003cc0:	08003ced 	.word	0x08003ced
 8003cc4:	08003cfb 	.word	0x08003cfb
 8003cc8:	08003d09 	.word	0x08003d09
 8003ccc:	08003d17 	.word	0x08003d17
 8003cd0:	200008d4 	.word	0x200008d4
 8003cd4:	200008dd 	.word	0x200008dd
 8003cd8:	200008dc 	.word	0x200008dc
 8003cdc:	200008e0 	.word	0x200008e0
 8003ce0:	200008f4 	.word	0x200008f4
 8003ce4:	200008d8 	.word	0x200008d8
 8003ce8:	200008da 	.word	0x200008da
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cf0:	4413      	add	r3, r2
 8003cf2:	331b      	adds	r3, #27
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	701a      	strb	r2, [r3, #0]
          break;
 8003cf8:	e018      	b.n	8003d2c <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cfe:	4413      	add	r3, r2
 8003d00:	331b      	adds	r3, #27
 8003d02:	2202      	movs	r2, #2
 8003d04:	701a      	strb	r2, [r3, #0]
          break;
 8003d06:	e011      	b.n	8003d2c <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d0c:	4413      	add	r3, r2
 8003d0e:	331b      	adds	r3, #27
 8003d10:	2203      	movs	r2, #3
 8003d12:	701a      	strb	r2, [r3, #0]
          break;
 8003d14:	e00a      	b.n	8003d2c <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d1a:	4413      	add	r3, r2
 8003d1c:	331b      	adds	r3, #27
 8003d1e:	2200      	movs	r2, #0
 8003d20:	701a      	strb	r2, [r3, #0]
          break;
 8003d22:	e003      	b.n	8003d2c <BSP_TS_GetState+0x348>
        default :
          ts_status = TS_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8003d2a:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8003d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d2e:	3301      	adds	r3, #1
 8003d30:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	f4ff ae73 	bcc.w	8003a26 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f809 	bl	8003d58 <BSP_TS_Get_GestureId>
 8003d46:	4603      	mov	r3, r0
 8003d48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8003d4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3754      	adds	r7, #84	; 0x54
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd90      	pop	{r4, r7, pc}

08003d58 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8003d68:	4b3b      	ldr	r3, [pc, #236]	; (8003e58 <BSP_TS_Get_GestureId+0x100>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	f107 0208 	add.w	r2, r7, #8
 8003d72:	4611      	mov	r1, r2
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fd f8ce 	bl	8000f16 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2b49      	cmp	r3, #73	; 0x49
 8003d7e:	d05e      	beq.n	8003e3e <BSP_TS_Get_GestureId+0xe6>
 8003d80:	2b49      	cmp	r3, #73	; 0x49
 8003d82:	d860      	bhi.n	8003e46 <BSP_TS_Get_GestureId+0xee>
 8003d84:	2b1c      	cmp	r3, #28
 8003d86:	d83f      	bhi.n	8003e08 <BSP_TS_Get_GestureId+0xb0>
 8003d88:	2b1c      	cmp	r3, #28
 8003d8a:	d85c      	bhi.n	8003e46 <BSP_TS_Get_GestureId+0xee>
 8003d8c:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <BSP_TS_Get_GestureId+0x3c>)
 8003d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d92:	bf00      	nop
 8003d94:	08003e0f 	.word	0x08003e0f
 8003d98:	08003e47 	.word	0x08003e47
 8003d9c:	08003e47 	.word	0x08003e47
 8003da0:	08003e47 	.word	0x08003e47
 8003da4:	08003e47 	.word	0x08003e47
 8003da8:	08003e47 	.word	0x08003e47
 8003dac:	08003e47 	.word	0x08003e47
 8003db0:	08003e47 	.word	0x08003e47
 8003db4:	08003e47 	.word	0x08003e47
 8003db8:	08003e47 	.word	0x08003e47
 8003dbc:	08003e47 	.word	0x08003e47
 8003dc0:	08003e47 	.word	0x08003e47
 8003dc4:	08003e47 	.word	0x08003e47
 8003dc8:	08003e47 	.word	0x08003e47
 8003dcc:	08003e47 	.word	0x08003e47
 8003dd0:	08003e47 	.word	0x08003e47
 8003dd4:	08003e17 	.word	0x08003e17
 8003dd8:	08003e47 	.word	0x08003e47
 8003ddc:	08003e47 	.word	0x08003e47
 8003de0:	08003e47 	.word	0x08003e47
 8003de4:	08003e1f 	.word	0x08003e1f
 8003de8:	08003e47 	.word	0x08003e47
 8003dec:	08003e47 	.word	0x08003e47
 8003df0:	08003e47 	.word	0x08003e47
 8003df4:	08003e27 	.word	0x08003e27
 8003df8:	08003e47 	.word	0x08003e47
 8003dfc:	08003e47 	.word	0x08003e47
 8003e00:	08003e47 	.word	0x08003e47
 8003e04:	08003e2f 	.word	0x08003e2f
 8003e08:	2b40      	cmp	r3, #64	; 0x40
 8003e0a:	d014      	beq.n	8003e36 <BSP_TS_Get_GestureId+0xde>
 8003e0c:	e01b      	b.n	8003e46 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003e14:	e01a      	b.n	8003e4c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003e1c:	e016      	b.n	8003e4c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2202      	movs	r2, #2
 8003e22:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003e24:	e012      	b.n	8003e4c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2203      	movs	r2, #3
 8003e2a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003e2c:	e00e      	b.n	8003e4c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2204      	movs	r2, #4
 8003e32:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003e34:	e00a      	b.n	8003e4c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2205      	movs	r2, #5
 8003e3a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003e3c:	e006      	b.n	8003e4c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2206      	movs	r2, #6
 8003e42:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003e44:	e002      	b.n	8003e4c <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	73fb      	strb	r3, [r7, #15]
      break;
 8003e4a:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	200008dd 	.word	0x200008dd

08003e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e62:	4b11      	ldr	r3, [pc, #68]	; (8003ea8 <HAL_MspInit+0x4c>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	4a10      	ldr	r2, [pc, #64]	; (8003ea8 <HAL_MspInit+0x4c>)
 8003e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e6e:	4b0e      	ldr	r3, [pc, #56]	; (8003ea8 <HAL_MspInit+0x4c>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e76:	607b      	str	r3, [r7, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <HAL_MspInit+0x4c>)
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ea8 <HAL_MspInit+0x4c>)
 8003e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e84:	6453      	str	r3, [r2, #68]	; 0x44
 8003e86:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <HAL_MspInit+0x4c>)
 8003e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003e92:	2200      	movs	r2, #0
 8003e94:	210f      	movs	r1, #15
 8003e96:	f06f 0001 	mvn.w	r0, #1
 8003e9a:	f001 f9f7 	bl	800528c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e9e:	bf00      	nop
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40023800 	.word	0x40023800

08003eac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08e      	sub	sp, #56	; 0x38
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003ebc:	4b33      	ldr	r3, [pc, #204]	; (8003f8c <HAL_InitTick+0xe0>)
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	4a32      	ldr	r2, [pc, #200]	; (8003f8c <HAL_InitTick+0xe0>)
 8003ec2:	f043 0310 	orr.w	r3, r3, #16
 8003ec6:	6413      	str	r3, [r2, #64]	; 0x40
 8003ec8:	4b30      	ldr	r3, [pc, #192]	; (8003f8c <HAL_InitTick+0xe0>)
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	f003 0310 	and.w	r3, r3, #16
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ed4:	f107 0210 	add.w	r2, r7, #16
 8003ed8:	f107 0314 	add.w	r3, r7, #20
 8003edc:	4611      	mov	r1, r2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f004 f9b2 	bl	8008248 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d103      	bne.n	8003ef6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003eee:	f004 f983 	bl	80081f8 <HAL_RCC_GetPCLK1Freq>
 8003ef2:	6378      	str	r0, [r7, #52]	; 0x34
 8003ef4:	e004      	b.n	8003f00 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003ef6:	f004 f97f 	bl	80081f8 <HAL_RCC_GetPCLK1Freq>
 8003efa:	4603      	mov	r3, r0
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f02:	4a23      	ldr	r2, [pc, #140]	; (8003f90 <HAL_InitTick+0xe4>)
 8003f04:	fba2 2303 	umull	r2, r3, r2, r3
 8003f08:	0c9b      	lsrs	r3, r3, #18
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003f0e:	4b21      	ldr	r3, [pc, #132]	; (8003f94 <HAL_InitTick+0xe8>)
 8003f10:	4a21      	ldr	r2, [pc, #132]	; (8003f98 <HAL_InitTick+0xec>)
 8003f12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003f14:	4b1f      	ldr	r3, [pc, #124]	; (8003f94 <HAL_InitTick+0xe8>)
 8003f16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f1a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003f1c:	4a1d      	ldr	r2, [pc, #116]	; (8003f94 <HAL_InitTick+0xe8>)
 8003f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f20:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003f22:	4b1c      	ldr	r3, [pc, #112]	; (8003f94 <HAL_InitTick+0xe8>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f28:	4b1a      	ldr	r3, [pc, #104]	; (8003f94 <HAL_InitTick+0xe8>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f2e:	4b19      	ldr	r3, [pc, #100]	; (8003f94 <HAL_InitTick+0xe8>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003f34:	4817      	ldr	r0, [pc, #92]	; (8003f94 <HAL_InitTick+0xe8>)
 8003f36:	f005 fabb 	bl	80094b0 <HAL_TIM_Base_Init>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003f40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d11b      	bne.n	8003f80 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003f48:	4812      	ldr	r0, [pc, #72]	; (8003f94 <HAL_InitTick+0xe8>)
 8003f4a:	f005 fb09 	bl	8009560 <HAL_TIM_Base_Start_IT>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003f54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d111      	bne.n	8003f80 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003f5c:	2036      	movs	r0, #54	; 0x36
 8003f5e:	f001 f9b1 	bl	80052c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b0f      	cmp	r3, #15
 8003f66:	d808      	bhi.n	8003f7a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003f68:	2200      	movs	r2, #0
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	2036      	movs	r0, #54	; 0x36
 8003f6e:	f001 f98d 	bl	800528c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f72:	4a0a      	ldr	r2, [pc, #40]	; (8003f9c <HAL_InitTick+0xf0>)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6013      	str	r3, [r2, #0]
 8003f78:	e002      	b.n	8003f80 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003f80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3738      	adds	r7, #56	; 0x38
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	431bde83 	.word	0x431bde83
 8003f94:	20000908 	.word	0x20000908
 8003f98:	40001000 	.word	0x40001000
 8003f9c:	20000040 	.word	0x20000040

08003fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fa4:	e7fe      	b.n	8003fa4 <NMI_Handler+0x4>

08003fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003faa:	e7fe      	b.n	8003faa <HardFault_Handler+0x4>

08003fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fb0:	e7fe      	b.n	8003fb0 <MemManage_Handler+0x4>

08003fb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fb6:	e7fe      	b.n	8003fb6 <BusFault_Handler+0x4>

08003fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fbc:	e7fe      	b.n	8003fbc <UsageFault_Handler+0x4>

08003fbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fc2:	bf00      	nop
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8003fd0:	4b06      	ldr	r3, [pc, #24]	; (8003fec <TIM6_DAC_IRQHandler+0x20>)
 8003fd2:	791b      	ldrb	r3, [r3, #4]
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8003fda:	4804      	ldr	r0, [pc, #16]	; (8003fec <TIM6_DAC_IRQHandler+0x20>)
 8003fdc:	f001 f9a2 	bl	8005324 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003fe0:	4803      	ldr	r0, [pc, #12]	; (8003ff0 <TIM6_DAC_IRQHandler+0x24>)
 8003fe2:	f005 fb35 	bl	8009650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003fe6:	bf00      	nop
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	20000148 	.word	0x20000148
 8003ff0:	20000908 	.word	0x20000908

08003ff4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003ff8:	4802      	ldr	r0, [pc, #8]	; (8004004 <LTDC_IRQHandler+0x10>)
 8003ffa:	f003 f993 	bl	8007324 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003ffe:	bf00      	nop
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	200004dc 	.word	0x200004dc

08004008 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800400c:	4802      	ldr	r0, [pc, #8]	; (8004018 <DMA2D_IRQHandler+0x10>)
 800400e:	f001 fd63 	bl	8005ad8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004012:	bf00      	nop
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	2000015c 	.word	0x2000015c

0800401c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004024:	4a14      	ldr	r2, [pc, #80]	; (8004078 <_sbrk+0x5c>)
 8004026:	4b15      	ldr	r3, [pc, #84]	; (800407c <_sbrk+0x60>)
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004030:	4b13      	ldr	r3, [pc, #76]	; (8004080 <_sbrk+0x64>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d102      	bne.n	800403e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004038:	4b11      	ldr	r3, [pc, #68]	; (8004080 <_sbrk+0x64>)
 800403a:	4a12      	ldr	r2, [pc, #72]	; (8004084 <_sbrk+0x68>)
 800403c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800403e:	4b10      	ldr	r3, [pc, #64]	; (8004080 <_sbrk+0x64>)
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4413      	add	r3, r2
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	429a      	cmp	r2, r3
 800404a:	d207      	bcs.n	800405c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800404c:	f007 feba 	bl	800bdc4 <__errno>
 8004050:	4603      	mov	r3, r0
 8004052:	220c      	movs	r2, #12
 8004054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004056:	f04f 33ff 	mov.w	r3, #4294967295
 800405a:	e009      	b.n	8004070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800405c:	4b08      	ldr	r3, [pc, #32]	; (8004080 <_sbrk+0x64>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004062:	4b07      	ldr	r3, [pc, #28]	; (8004080 <_sbrk+0x64>)
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4413      	add	r3, r2
 800406a:	4a05      	ldr	r2, [pc, #20]	; (8004080 <_sbrk+0x64>)
 800406c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800406e:	68fb      	ldr	r3, [r7, #12]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	20050000 	.word	0x20050000
 800407c:	00000400 	.word	0x00000400
 8004080:	20000954 	.word	0x20000954
 8004084:	20004b08 	.word	0x20004b08

08004088 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800408c:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <SystemInit+0x20>)
 800408e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004092:	4a05      	ldr	r2, [pc, #20]	; (80040a8 <SystemInit+0x20>)
 8004094:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004098:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800409c:	bf00      	nop
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	e000ed00 	.word	0xe000ed00

080040ac <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b088      	sub	sp, #32
 80040b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040b2:	f107 0310 	add.w	r3, r7, #16
 80040b6:	2200      	movs	r2, #0
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	605a      	str	r2, [r3, #4]
 80040bc:	609a      	str	r2, [r3, #8]
 80040be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040c0:	1d3b      	adds	r3, r7, #4
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	605a      	str	r2, [r3, #4]
 80040c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80040ca:	4b20      	ldr	r3, [pc, #128]	; (800414c <MX_TIM1_Init+0xa0>)
 80040cc:	4a20      	ldr	r2, [pc, #128]	; (8004150 <MX_TIM1_Init+0xa4>)
 80040ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80040d0:	4b1e      	ldr	r3, [pc, #120]	; (800414c <MX_TIM1_Init+0xa0>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040d6:	4b1d      	ldr	r3, [pc, #116]	; (800414c <MX_TIM1_Init+0xa0>)
 80040d8:	2200      	movs	r2, #0
 80040da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80040dc:	4b1b      	ldr	r3, [pc, #108]	; (800414c <MX_TIM1_Init+0xa0>)
 80040de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040e4:	4b19      	ldr	r3, [pc, #100]	; (800414c <MX_TIM1_Init+0xa0>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80040ea:	4b18      	ldr	r3, [pc, #96]	; (800414c <MX_TIM1_Init+0xa0>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040f0:	4b16      	ldr	r3, [pc, #88]	; (800414c <MX_TIM1_Init+0xa0>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80040f6:	4815      	ldr	r0, [pc, #84]	; (800414c <MX_TIM1_Init+0xa0>)
 80040f8:	f005 f9da 	bl	80094b0 <HAL_TIM_Base_Init>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8004102:	f7fd ff69 	bl	8001fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800410a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800410c:	f107 0310 	add.w	r3, r7, #16
 8004110:	4619      	mov	r1, r3
 8004112:	480e      	ldr	r0, [pc, #56]	; (800414c <MX_TIM1_Init+0xa0>)
 8004114:	f005 fbbc 	bl	8009890 <HAL_TIM_ConfigClockSource>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800411e:	f7fd ff5b 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004122:	2300      	movs	r3, #0
 8004124:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004126:	2300      	movs	r3, #0
 8004128:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800412e:	1d3b      	adds	r3, r7, #4
 8004130:	4619      	mov	r1, r3
 8004132:	4806      	ldr	r0, [pc, #24]	; (800414c <MX_TIM1_Init+0xa0>)
 8004134:	f005 fdd8 	bl	8009ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800413e:	f7fd ff4b 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004142:	bf00      	nop
 8004144:	3720      	adds	r7, #32
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	20000958 	.word	0x20000958
 8004150:	40010000 	.word	0x40010000

08004154 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800415a:	f107 0310 	add.w	r3, r7, #16
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	605a      	str	r2, [r3, #4]
 8004164:	609a      	str	r2, [r3, #8]
 8004166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004168:	1d3b      	adds	r3, r7, #4
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	605a      	str	r2, [r3, #4]
 8004170:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004172:	4b1e      	ldr	r3, [pc, #120]	; (80041ec <MX_TIM2_Init+0x98>)
 8004174:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004178:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800417a:	4b1c      	ldr	r3, [pc, #112]	; (80041ec <MX_TIM2_Init+0x98>)
 800417c:	2200      	movs	r2, #0
 800417e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004180:	4b1a      	ldr	r3, [pc, #104]	; (80041ec <MX_TIM2_Init+0x98>)
 8004182:	2200      	movs	r2, #0
 8004184:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004186:	4b19      	ldr	r3, [pc, #100]	; (80041ec <MX_TIM2_Init+0x98>)
 8004188:	f04f 32ff 	mov.w	r2, #4294967295
 800418c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800418e:	4b17      	ldr	r3, [pc, #92]	; (80041ec <MX_TIM2_Init+0x98>)
 8004190:	2200      	movs	r2, #0
 8004192:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004194:	4b15      	ldr	r3, [pc, #84]	; (80041ec <MX_TIM2_Init+0x98>)
 8004196:	2200      	movs	r2, #0
 8004198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800419a:	4814      	ldr	r0, [pc, #80]	; (80041ec <MX_TIM2_Init+0x98>)
 800419c:	f005 f988 	bl	80094b0 <HAL_TIM_Base_Init>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80041a6:	f7fd ff17 	bl	8001fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80041b0:	f107 0310 	add.w	r3, r7, #16
 80041b4:	4619      	mov	r1, r3
 80041b6:	480d      	ldr	r0, [pc, #52]	; (80041ec <MX_TIM2_Init+0x98>)
 80041b8:	f005 fb6a 	bl	8009890 <HAL_TIM_ConfigClockSource>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80041c2:	f7fd ff09 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041c6:	2300      	movs	r3, #0
 80041c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80041ce:	1d3b      	adds	r3, r7, #4
 80041d0:	4619      	mov	r1, r3
 80041d2:	4806      	ldr	r0, [pc, #24]	; (80041ec <MX_TIM2_Init+0x98>)
 80041d4:	f005 fd88 	bl	8009ce8 <HAL_TIMEx_MasterConfigSynchronization>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80041de:	f7fd fefb 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80041e2:	bf00      	nop
 80041e4:	3720      	adds	r7, #32
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	200009a4 	.word	0x200009a4

080041f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041f6:	f107 0310 	add.w	r3, r7, #16
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	605a      	str	r2, [r3, #4]
 8004200:	609a      	str	r2, [r3, #8]
 8004202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004204:	1d3b      	adds	r3, r7, #4
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	605a      	str	r2, [r3, #4]
 800420c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800420e:	4b1d      	ldr	r3, [pc, #116]	; (8004284 <MX_TIM3_Init+0x94>)
 8004210:	4a1d      	ldr	r2, [pc, #116]	; (8004288 <MX_TIM3_Init+0x98>)
 8004212:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004214:	4b1b      	ldr	r3, [pc, #108]	; (8004284 <MX_TIM3_Init+0x94>)
 8004216:	2200      	movs	r2, #0
 8004218:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800421a:	4b1a      	ldr	r3, [pc, #104]	; (8004284 <MX_TIM3_Init+0x94>)
 800421c:	2200      	movs	r2, #0
 800421e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004220:	4b18      	ldr	r3, [pc, #96]	; (8004284 <MX_TIM3_Init+0x94>)
 8004222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004226:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004228:	4b16      	ldr	r3, [pc, #88]	; (8004284 <MX_TIM3_Init+0x94>)
 800422a:	2200      	movs	r2, #0
 800422c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800422e:	4b15      	ldr	r3, [pc, #84]	; (8004284 <MX_TIM3_Init+0x94>)
 8004230:	2200      	movs	r2, #0
 8004232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004234:	4813      	ldr	r0, [pc, #76]	; (8004284 <MX_TIM3_Init+0x94>)
 8004236:	f005 f93b 	bl	80094b0 <HAL_TIM_Base_Init>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004240:	f7fd feca 	bl	8001fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004248:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800424a:	f107 0310 	add.w	r3, r7, #16
 800424e:	4619      	mov	r1, r3
 8004250:	480c      	ldr	r0, [pc, #48]	; (8004284 <MX_TIM3_Init+0x94>)
 8004252:	f005 fb1d 	bl	8009890 <HAL_TIM_ConfigClockSource>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800425c:	f7fd febc 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004260:	2300      	movs	r3, #0
 8004262:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004264:	2300      	movs	r3, #0
 8004266:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004268:	1d3b      	adds	r3, r7, #4
 800426a:	4619      	mov	r1, r3
 800426c:	4805      	ldr	r0, [pc, #20]	; (8004284 <MX_TIM3_Init+0x94>)
 800426e:	f005 fd3b 	bl	8009ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004278:	f7fd feae 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800427c:	bf00      	nop
 800427e:	3720      	adds	r7, #32
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	200009f0 	.word	0x200009f0
 8004288:	40000400 	.word	0x40000400

0800428c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004292:	f107 0310 	add.w	r3, r7, #16
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	605a      	str	r2, [r3, #4]
 800429c:	609a      	str	r2, [r3, #8]
 800429e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042a0:	1d3b      	adds	r3, r7, #4
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	605a      	str	r2, [r3, #4]
 80042a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80042aa:	4b1d      	ldr	r3, [pc, #116]	; (8004320 <MX_TIM5_Init+0x94>)
 80042ac:	4a1d      	ldr	r2, [pc, #116]	; (8004324 <MX_TIM5_Init+0x98>)
 80042ae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80042b0:	4b1b      	ldr	r3, [pc, #108]	; (8004320 <MX_TIM5_Init+0x94>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042b6:	4b1a      	ldr	r3, [pc, #104]	; (8004320 <MX_TIM5_Init+0x94>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80042bc:	4b18      	ldr	r3, [pc, #96]	; (8004320 <MX_TIM5_Init+0x94>)
 80042be:	f04f 32ff 	mov.w	r2, #4294967295
 80042c2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042c4:	4b16      	ldr	r3, [pc, #88]	; (8004320 <MX_TIM5_Init+0x94>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042ca:	4b15      	ldr	r3, [pc, #84]	; (8004320 <MX_TIM5_Init+0x94>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80042d0:	4813      	ldr	r0, [pc, #76]	; (8004320 <MX_TIM5_Init+0x94>)
 80042d2:	f005 f8ed 	bl	80094b0 <HAL_TIM_Base_Init>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80042dc:	f7fd fe7c 	bl	8001fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80042e6:	f107 0310 	add.w	r3, r7, #16
 80042ea:	4619      	mov	r1, r3
 80042ec:	480c      	ldr	r0, [pc, #48]	; (8004320 <MX_TIM5_Init+0x94>)
 80042ee:	f005 facf 	bl	8009890 <HAL_TIM_ConfigClockSource>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80042f8:	f7fd fe6e 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042fc:	2300      	movs	r3, #0
 80042fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004304:	1d3b      	adds	r3, r7, #4
 8004306:	4619      	mov	r1, r3
 8004308:	4805      	ldr	r0, [pc, #20]	; (8004320 <MX_TIM5_Init+0x94>)
 800430a:	f005 fced 	bl	8009ce8 <HAL_TIMEx_MasterConfigSynchronization>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004314:	f7fd fe60 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004318:	bf00      	nop
 800431a:	3720      	adds	r7, #32
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	20000a3c 	.word	0x20000a3c
 8004324:	40000c00 	.word	0x40000c00

08004328 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800432e:	f107 0310 	add.w	r3, r7, #16
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	605a      	str	r2, [r3, #4]
 8004338:	609a      	str	r2, [r3, #8]
 800433a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800433c:	1d3b      	adds	r3, r7, #4
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	605a      	str	r2, [r3, #4]
 8004344:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004346:	4b20      	ldr	r3, [pc, #128]	; (80043c8 <MX_TIM8_Init+0xa0>)
 8004348:	4a20      	ldr	r2, [pc, #128]	; (80043cc <MX_TIM8_Init+0xa4>)
 800434a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800434c:	4b1e      	ldr	r3, [pc, #120]	; (80043c8 <MX_TIM8_Init+0xa0>)
 800434e:	2200      	movs	r2, #0
 8004350:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004352:	4b1d      	ldr	r3, [pc, #116]	; (80043c8 <MX_TIM8_Init+0xa0>)
 8004354:	2200      	movs	r2, #0
 8004356:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004358:	4b1b      	ldr	r3, [pc, #108]	; (80043c8 <MX_TIM8_Init+0xa0>)
 800435a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800435e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004360:	4b19      	ldr	r3, [pc, #100]	; (80043c8 <MX_TIM8_Init+0xa0>)
 8004362:	2200      	movs	r2, #0
 8004364:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004366:	4b18      	ldr	r3, [pc, #96]	; (80043c8 <MX_TIM8_Init+0xa0>)
 8004368:	2200      	movs	r2, #0
 800436a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800436c:	4b16      	ldr	r3, [pc, #88]	; (80043c8 <MX_TIM8_Init+0xa0>)
 800436e:	2200      	movs	r2, #0
 8004370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004372:	4815      	ldr	r0, [pc, #84]	; (80043c8 <MX_TIM8_Init+0xa0>)
 8004374:	f005 f89c 	bl	80094b0 <HAL_TIM_Base_Init>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800437e:	f7fd fe2b 	bl	8001fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004386:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004388:	f107 0310 	add.w	r3, r7, #16
 800438c:	4619      	mov	r1, r3
 800438e:	480e      	ldr	r0, [pc, #56]	; (80043c8 <MX_TIM8_Init+0xa0>)
 8004390:	f005 fa7e 	bl	8009890 <HAL_TIM_ConfigClockSource>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800439a:	f7fd fe1d 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800439e:	2300      	movs	r3, #0
 80043a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80043aa:	1d3b      	adds	r3, r7, #4
 80043ac:	4619      	mov	r1, r3
 80043ae:	4806      	ldr	r0, [pc, #24]	; (80043c8 <MX_TIM8_Init+0xa0>)
 80043b0:	f005 fc9a 	bl	8009ce8 <HAL_TIMEx_MasterConfigSynchronization>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80043ba:	f7fd fe0d 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80043be:	bf00      	nop
 80043c0:	3720      	adds	r7, #32
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20000a88 	.word	0x20000a88
 80043cc:	40010400 	.word	0x40010400

080043d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08e      	sub	sp, #56	; 0x38
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	605a      	str	r2, [r3, #4]
 80043e2:	609a      	str	r2, [r3, #8]
 80043e4:	60da      	str	r2, [r3, #12]
 80043e6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a3b      	ldr	r2, [pc, #236]	; (80044dc <HAL_TIM_Base_MspInit+0x10c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d10c      	bne.n	800440c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043f2:	4b3b      	ldr	r3, [pc, #236]	; (80044e0 <HAL_TIM_Base_MspInit+0x110>)
 80043f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f6:	4a3a      	ldr	r2, [pc, #232]	; (80044e0 <HAL_TIM_Base_MspInit+0x110>)
 80043f8:	f043 0301 	orr.w	r3, r3, #1
 80043fc:	6453      	str	r3, [r2, #68]	; 0x44
 80043fe:	4b38      	ldr	r3, [pc, #224]	; (80044e0 <HAL_TIM_Base_MspInit+0x110>)
 8004400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	623b      	str	r3, [r7, #32]
 8004408:	6a3b      	ldr	r3, [r7, #32]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800440a:	e062      	b.n	80044d2 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM2)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004414:	d10c      	bne.n	8004430 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004416:	4b32      	ldr	r3, [pc, #200]	; (80044e0 <HAL_TIM_Base_MspInit+0x110>)
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	4a31      	ldr	r2, [pc, #196]	; (80044e0 <HAL_TIM_Base_MspInit+0x110>)
 800441c:	f043 0301 	orr.w	r3, r3, #1
 8004420:	6413      	str	r3, [r2, #64]	; 0x40
 8004422:	4b2f      	ldr	r3, [pc, #188]	; (80044e0 <HAL_TIM_Base_MspInit+0x110>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	61fb      	str	r3, [r7, #28]
 800442c:	69fb      	ldr	r3, [r7, #28]
}
 800442e:	e050      	b.n	80044d2 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM3)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a2b      	ldr	r2, [pc, #172]	; (80044e4 <HAL_TIM_Base_MspInit+0x114>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d10c      	bne.n	8004454 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800443a:	4b29      	ldr	r3, [pc, #164]	; (80044e0 <HAL_TIM_Base_MspInit+0x110>)
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	4a28      	ldr	r2, [pc, #160]	; (80044e0 <HAL_TIM_Base_MspInit+0x110>)
 8004440:	f043 0302 	orr.w	r3, r3, #2
 8004444:	6413      	str	r3, [r2, #64]	; 0x40
 8004446:	4b26      	ldr	r3, [pc, #152]	; (80044e0 <HAL_TIM_Base_MspInit+0x110>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	61bb      	str	r3, [r7, #24]
 8004450:	69bb      	ldr	r3, [r7, #24]
}
 8004452:	e03e      	b.n	80044d2 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM5)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a23      	ldr	r2, [pc, #140]	; (80044e8 <HAL_TIM_Base_MspInit+0x118>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d10c      	bne.n	8004478 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800445e:	4b20      	ldr	r3, [pc, #128]	; (80044e0 <HAL_TIM_Base_MspInit+0x110>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	4a1f      	ldr	r2, [pc, #124]	; (80044e0 <HAL_TIM_Base_MspInit+0x110>)
 8004464:	f043 0308 	orr.w	r3, r3, #8
 8004468:	6413      	str	r3, [r2, #64]	; 0x40
 800446a:	4b1d      	ldr	r3, [pc, #116]	; (80044e0 <HAL_TIM_Base_MspInit+0x110>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	697b      	ldr	r3, [r7, #20]
}
 8004476:	e02c      	b.n	80044d2 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM8)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a1b      	ldr	r2, [pc, #108]	; (80044ec <HAL_TIM_Base_MspInit+0x11c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d127      	bne.n	80044d2 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004482:	4b17      	ldr	r3, [pc, #92]	; (80044e0 <HAL_TIM_Base_MspInit+0x110>)
 8004484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004486:	4a16      	ldr	r2, [pc, #88]	; (80044e0 <HAL_TIM_Base_MspInit+0x110>)
 8004488:	f043 0302 	orr.w	r3, r3, #2
 800448c:	6453      	str	r3, [r2, #68]	; 0x44
 800448e:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <HAL_TIM_Base_MspInit+0x110>)
 8004490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800449a:	4b11      	ldr	r3, [pc, #68]	; (80044e0 <HAL_TIM_Base_MspInit+0x110>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	4a10      	ldr	r2, [pc, #64]	; (80044e0 <HAL_TIM_Base_MspInit+0x110>)
 80044a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a4:	6313      	str	r3, [r2, #48]	; 0x30
 80044a6:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <HAL_TIM_Base_MspInit+0x110>)
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80044b2:	2304      	movs	r3, #4
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b6:	2302      	movs	r3, #2
 80044b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ba:	2300      	movs	r3, #0
 80044bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044be:	2300      	movs	r3, #0
 80044c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80044c2:	2303      	movs	r3, #3
 80044c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80044c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044ca:	4619      	mov	r1, r3
 80044cc:	4808      	ldr	r0, [pc, #32]	; (80044f0 <HAL_TIM_Base_MspInit+0x120>)
 80044ce:	f001 fd41 	bl	8005f54 <HAL_GPIO_Init>
}
 80044d2:	bf00      	nop
 80044d4:	3738      	adds	r7, #56	; 0x38
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	40010000 	.word	0x40010000
 80044e0:	40023800 	.word	0x40023800
 80044e4:	40000400 	.word	0x40000400
 80044e8:	40000c00 	.word	0x40000c00
 80044ec:	40010400 	.word	0x40010400
 80044f0:	40022000 	.word	0x40022000

080044f4 <MX_UART7_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80044f8:	4b14      	ldr	r3, [pc, #80]	; (800454c <MX_UART7_Init+0x58>)
 80044fa:	4a15      	ldr	r2, [pc, #84]	; (8004550 <MX_UART7_Init+0x5c>)
 80044fc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80044fe:	4b13      	ldr	r3, [pc, #76]	; (800454c <MX_UART7_Init+0x58>)
 8004500:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004504:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004506:	4b11      	ldr	r3, [pc, #68]	; (800454c <MX_UART7_Init+0x58>)
 8004508:	2200      	movs	r2, #0
 800450a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800450c:	4b0f      	ldr	r3, [pc, #60]	; (800454c <MX_UART7_Init+0x58>)
 800450e:	2200      	movs	r2, #0
 8004510:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8004512:	4b0e      	ldr	r3, [pc, #56]	; (800454c <MX_UART7_Init+0x58>)
 8004514:	2200      	movs	r2, #0
 8004516:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004518:	4b0c      	ldr	r3, [pc, #48]	; (800454c <MX_UART7_Init+0x58>)
 800451a:	220c      	movs	r2, #12
 800451c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800451e:	4b0b      	ldr	r3, [pc, #44]	; (800454c <MX_UART7_Init+0x58>)
 8004520:	2200      	movs	r2, #0
 8004522:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004524:	4b09      	ldr	r3, [pc, #36]	; (800454c <MX_UART7_Init+0x58>)
 8004526:	2200      	movs	r2, #0
 8004528:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800452a:	4b08      	ldr	r3, [pc, #32]	; (800454c <MX_UART7_Init+0x58>)
 800452c:	2200      	movs	r2, #0
 800452e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004530:	4b06      	ldr	r3, [pc, #24]	; (800454c <MX_UART7_Init+0x58>)
 8004532:	2200      	movs	r2, #0
 8004534:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004536:	4805      	ldr	r0, [pc, #20]	; (800454c <MX_UART7_Init+0x58>)
 8004538:	f005 fc82 	bl	8009e40 <HAL_UART_Init>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8004542:	f7fd fd49 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8004546:	bf00      	nop
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000ad4 	.word	0x20000ad4
 8004550:	40007800 	.word	0x40007800

08004554 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004558:	4b14      	ldr	r3, [pc, #80]	; (80045ac <MX_USART1_UART_Init+0x58>)
 800455a:	4a15      	ldr	r2, [pc, #84]	; (80045b0 <MX_USART1_UART_Init+0x5c>)
 800455c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800455e:	4b13      	ldr	r3, [pc, #76]	; (80045ac <MX_USART1_UART_Init+0x58>)
 8004560:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004564:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004566:	4b11      	ldr	r3, [pc, #68]	; (80045ac <MX_USART1_UART_Init+0x58>)
 8004568:	2200      	movs	r2, #0
 800456a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800456c:	4b0f      	ldr	r3, [pc, #60]	; (80045ac <MX_USART1_UART_Init+0x58>)
 800456e:	2200      	movs	r2, #0
 8004570:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004572:	4b0e      	ldr	r3, [pc, #56]	; (80045ac <MX_USART1_UART_Init+0x58>)
 8004574:	2200      	movs	r2, #0
 8004576:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004578:	4b0c      	ldr	r3, [pc, #48]	; (80045ac <MX_USART1_UART_Init+0x58>)
 800457a:	220c      	movs	r2, #12
 800457c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800457e:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <MX_USART1_UART_Init+0x58>)
 8004580:	2200      	movs	r2, #0
 8004582:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004584:	4b09      	ldr	r3, [pc, #36]	; (80045ac <MX_USART1_UART_Init+0x58>)
 8004586:	2200      	movs	r2, #0
 8004588:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800458a:	4b08      	ldr	r3, [pc, #32]	; (80045ac <MX_USART1_UART_Init+0x58>)
 800458c:	2200      	movs	r2, #0
 800458e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004590:	4b06      	ldr	r3, [pc, #24]	; (80045ac <MX_USART1_UART_Init+0x58>)
 8004592:	2200      	movs	r2, #0
 8004594:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004596:	4805      	ldr	r0, [pc, #20]	; (80045ac <MX_USART1_UART_Init+0x58>)
 8004598:	f005 fc52 	bl	8009e40 <HAL_UART_Init>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80045a2:	f7fd fd19 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80045a6:	bf00      	nop
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20000b5c 	.word	0x20000b5c
 80045b0:	40011000 	.word	0x40011000

080045b4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80045b8:	4b14      	ldr	r3, [pc, #80]	; (800460c <MX_USART6_UART_Init+0x58>)
 80045ba:	4a15      	ldr	r2, [pc, #84]	; (8004610 <MX_USART6_UART_Init+0x5c>)
 80045bc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80045be:	4b13      	ldr	r3, [pc, #76]	; (800460c <MX_USART6_UART_Init+0x58>)
 80045c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045c4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80045c6:	4b11      	ldr	r3, [pc, #68]	; (800460c <MX_USART6_UART_Init+0x58>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80045cc:	4b0f      	ldr	r3, [pc, #60]	; (800460c <MX_USART6_UART_Init+0x58>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80045d2:	4b0e      	ldr	r3, [pc, #56]	; (800460c <MX_USART6_UART_Init+0x58>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80045d8:	4b0c      	ldr	r3, [pc, #48]	; (800460c <MX_USART6_UART_Init+0x58>)
 80045da:	220c      	movs	r2, #12
 80045dc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045de:	4b0b      	ldr	r3, [pc, #44]	; (800460c <MX_USART6_UART_Init+0x58>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80045e4:	4b09      	ldr	r3, [pc, #36]	; (800460c <MX_USART6_UART_Init+0x58>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045ea:	4b08      	ldr	r3, [pc, #32]	; (800460c <MX_USART6_UART_Init+0x58>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80045f0:	4b06      	ldr	r3, [pc, #24]	; (800460c <MX_USART6_UART_Init+0x58>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80045f6:	4805      	ldr	r0, [pc, #20]	; (800460c <MX_USART6_UART_Init+0x58>)
 80045f8:	f005 fc22 	bl	8009e40 <HAL_UART_Init>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8004602:	f7fd fce9 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004606:	bf00      	nop
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	20000be4 	.word	0x20000be4
 8004610:	40011400 	.word	0x40011400

08004614 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b0b0      	sub	sp, #192	; 0xc0
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800461c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	605a      	str	r2, [r3, #4]
 8004626:	609a      	str	r2, [r3, #8]
 8004628:	60da      	str	r2, [r3, #12]
 800462a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800462c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004630:	2284      	movs	r2, #132	; 0x84
 8004632:	2100      	movs	r1, #0
 8004634:	4618      	mov	r0, r3
 8004636:	f007 fbbd 	bl	800bdb4 <memset>
  if(uartHandle->Instance==UART7)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a75      	ldr	r2, [pc, #468]	; (8004814 <HAL_UART_MspInit+0x200>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d13d      	bne.n	80046c0 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8004644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004648:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800464a:	2300      	movs	r3, #0
 800464c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004650:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004654:	4618      	mov	r0, r3
 8004656:	f003 fe29 	bl	80082ac <HAL_RCCEx_PeriphCLKConfig>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004660:	f7fd fcba 	bl	8001fd8 <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8004664:	4b6c      	ldr	r3, [pc, #432]	; (8004818 <HAL_UART_MspInit+0x204>)
 8004666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004668:	4a6b      	ldr	r2, [pc, #428]	; (8004818 <HAL_UART_MspInit+0x204>)
 800466a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800466e:	6413      	str	r3, [r2, #64]	; 0x40
 8004670:	4b69      	ldr	r3, [pc, #420]	; (8004818 <HAL_UART_MspInit+0x204>)
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800467c:	4b66      	ldr	r3, [pc, #408]	; (8004818 <HAL_UART_MspInit+0x204>)
 800467e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004680:	4a65      	ldr	r2, [pc, #404]	; (8004818 <HAL_UART_MspInit+0x204>)
 8004682:	f043 0320 	orr.w	r3, r3, #32
 8004686:	6313      	str	r3, [r2, #48]	; 0x30
 8004688:	4b63      	ldr	r3, [pc, #396]	; (8004818 <HAL_UART_MspInit+0x204>)
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	f003 0320 	and.w	r3, r3, #32
 8004690:	623b      	str	r3, [r7, #32]
 8004692:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004694:	23c0      	movs	r3, #192	; 0xc0
 8004696:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469a:	2302      	movs	r3, #2
 800469c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a0:	2300      	movs	r3, #0
 80046a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046a6:	2303      	movs	r3, #3
 80046a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80046ac:	2308      	movs	r3, #8
 80046ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80046b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80046b6:	4619      	mov	r1, r3
 80046b8:	4858      	ldr	r0, [pc, #352]	; (800481c <HAL_UART_MspInit+0x208>)
 80046ba:	f001 fc4b 	bl	8005f54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80046be:	e0a4      	b.n	800480a <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a56      	ldr	r2, [pc, #344]	; (8004820 <HAL_UART_MspInit+0x20c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d15d      	bne.n	8004786 <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80046ca:	2340      	movs	r3, #64	; 0x40
 80046cc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80046ce:	2300      	movs	r3, #0
 80046d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046d6:	4618      	mov	r0, r3
 80046d8:	f003 fde8 	bl	80082ac <HAL_RCCEx_PeriphCLKConfig>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80046e2:	f7fd fc79 	bl	8001fd8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80046e6:	4b4c      	ldr	r3, [pc, #304]	; (8004818 <HAL_UART_MspInit+0x204>)
 80046e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ea:	4a4b      	ldr	r2, [pc, #300]	; (8004818 <HAL_UART_MspInit+0x204>)
 80046ec:	f043 0310 	orr.w	r3, r3, #16
 80046f0:	6453      	str	r3, [r2, #68]	; 0x44
 80046f2:	4b49      	ldr	r3, [pc, #292]	; (8004818 <HAL_UART_MspInit+0x204>)
 80046f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f6:	f003 0310 	and.w	r3, r3, #16
 80046fa:	61fb      	str	r3, [r7, #28]
 80046fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046fe:	4b46      	ldr	r3, [pc, #280]	; (8004818 <HAL_UART_MspInit+0x204>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	4a45      	ldr	r2, [pc, #276]	; (8004818 <HAL_UART_MspInit+0x204>)
 8004704:	f043 0302 	orr.w	r3, r3, #2
 8004708:	6313      	str	r3, [r2, #48]	; 0x30
 800470a:	4b43      	ldr	r3, [pc, #268]	; (8004818 <HAL_UART_MspInit+0x204>)
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	61bb      	str	r3, [r7, #24]
 8004714:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004716:	4b40      	ldr	r3, [pc, #256]	; (8004818 <HAL_UART_MspInit+0x204>)
 8004718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471a:	4a3f      	ldr	r2, [pc, #252]	; (8004818 <HAL_UART_MspInit+0x204>)
 800471c:	f043 0301 	orr.w	r3, r3, #1
 8004720:	6313      	str	r3, [r2, #48]	; 0x30
 8004722:	4b3d      	ldr	r3, [pc, #244]	; (8004818 <HAL_UART_MspInit+0x204>)
 8004724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800472e:	2380      	movs	r3, #128	; 0x80
 8004730:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004734:	2302      	movs	r3, #2
 8004736:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473a:	2300      	movs	r3, #0
 800473c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004740:	2300      	movs	r3, #0
 8004742:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004746:	2307      	movs	r3, #7
 8004748:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800474c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004750:	4619      	mov	r1, r3
 8004752:	4834      	ldr	r0, [pc, #208]	; (8004824 <HAL_UART_MspInit+0x210>)
 8004754:	f001 fbfe 	bl	8005f54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004758:	f44f 7300 	mov.w	r3, #512	; 0x200
 800475c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004760:	2302      	movs	r3, #2
 8004762:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004766:	2300      	movs	r3, #0
 8004768:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800476c:	2300      	movs	r3, #0
 800476e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004772:	2307      	movs	r3, #7
 8004774:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004778:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800477c:	4619      	mov	r1, r3
 800477e:	482a      	ldr	r0, [pc, #168]	; (8004828 <HAL_UART_MspInit+0x214>)
 8004780:	f001 fbe8 	bl	8005f54 <HAL_GPIO_Init>
}
 8004784:	e041      	b.n	800480a <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART6)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a28      	ldr	r2, [pc, #160]	; (800482c <HAL_UART_MspInit+0x218>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d13c      	bne.n	800480a <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004790:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004794:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004796:	2300      	movs	r3, #0
 8004798:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800479c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047a0:	4618      	mov	r0, r3
 80047a2:	f003 fd83 	bl	80082ac <HAL_RCCEx_PeriphCLKConfig>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 80047ac:	f7fd fc14 	bl	8001fd8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80047b0:	4b19      	ldr	r3, [pc, #100]	; (8004818 <HAL_UART_MspInit+0x204>)
 80047b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b4:	4a18      	ldr	r2, [pc, #96]	; (8004818 <HAL_UART_MspInit+0x204>)
 80047b6:	f043 0320 	orr.w	r3, r3, #32
 80047ba:	6453      	str	r3, [r2, #68]	; 0x44
 80047bc:	4b16      	ldr	r3, [pc, #88]	; (8004818 <HAL_UART_MspInit+0x204>)
 80047be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047c8:	4b13      	ldr	r3, [pc, #76]	; (8004818 <HAL_UART_MspInit+0x204>)
 80047ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047cc:	4a12      	ldr	r2, [pc, #72]	; (8004818 <HAL_UART_MspInit+0x204>)
 80047ce:	f043 0304 	orr.w	r3, r3, #4
 80047d2:	6313      	str	r3, [r2, #48]	; 0x30
 80047d4:	4b10      	ldr	r3, [pc, #64]	; (8004818 <HAL_UART_MspInit+0x204>)
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80047e0:	23c0      	movs	r3, #192	; 0xc0
 80047e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e6:	2302      	movs	r3, #2
 80047e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047f2:	2303      	movs	r3, #3
 80047f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80047f8:	2308      	movs	r3, #8
 80047fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004802:	4619      	mov	r1, r3
 8004804:	480a      	ldr	r0, [pc, #40]	; (8004830 <HAL_UART_MspInit+0x21c>)
 8004806:	f001 fba5 	bl	8005f54 <HAL_GPIO_Init>
}
 800480a:	bf00      	nop
 800480c:	37c0      	adds	r7, #192	; 0xc0
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40007800 	.word	0x40007800
 8004818:	40023800 	.word	0x40023800
 800481c:	40021400 	.word	0x40021400
 8004820:	40011000 	.word	0x40011000
 8004824:	40020400 	.word	0x40020400
 8004828:	40020000 	.word	0x40020000
 800482c:	40011400 	.word	0x40011400
 8004830:	40020800 	.word	0x40020800

08004834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800486c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004838:	480d      	ldr	r0, [pc, #52]	; (8004870 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800483a:	490e      	ldr	r1, [pc, #56]	; (8004874 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800483c:	4a0e      	ldr	r2, [pc, #56]	; (8004878 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800483e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004840:	e002      	b.n	8004848 <LoopCopyDataInit>

08004842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004846:	3304      	adds	r3, #4

08004848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800484a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800484c:	d3f9      	bcc.n	8004842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800484e:	4a0b      	ldr	r2, [pc, #44]	; (800487c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004850:	4c0b      	ldr	r4, [pc, #44]	; (8004880 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004854:	e001      	b.n	800485a <LoopFillZerobss>

08004856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004858:	3204      	adds	r2, #4

0800485a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800485a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800485c:	d3fb      	bcc.n	8004856 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800485e:	f7ff fc13 	bl	8004088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004862:	f007 fab5 	bl	800bdd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004866:	f7fd f9ef 	bl	8001c48 <main>
  bx  lr    
 800486a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800486c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004874:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8004878:	08010718 	.word	0x08010718
  ldr r2, =_sbss
 800487c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8004880:	20004b04 	.word	0x20004b04

08004884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004884:	e7fe      	b.n	8004884 <ADC_IRQHandler>

08004886 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800488a:	2003      	movs	r0, #3
 800488c:	f000 fcf3 	bl	8005276 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004890:	200f      	movs	r0, #15
 8004892:	f7ff fb0b 	bl	8003eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004896:	f7ff fae1 	bl	8003e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048a4:	4b06      	ldr	r3, [pc, #24]	; (80048c0 <HAL_IncTick+0x20>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	461a      	mov	r2, r3
 80048aa:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <HAL_IncTick+0x24>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4413      	add	r3, r2
 80048b0:	4a04      	ldr	r2, [pc, #16]	; (80048c4 <HAL_IncTick+0x24>)
 80048b2:	6013      	str	r3, [r2, #0]
}
 80048b4:	bf00      	nop
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	20000044 	.word	0x20000044
 80048c4:	20000c6c 	.word	0x20000c6c

080048c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
  return uwTick;
 80048cc:	4b03      	ldr	r3, [pc, #12]	; (80048dc <HAL_GetTick+0x14>)
 80048ce:	681b      	ldr	r3, [r3, #0]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	20000c6c 	.word	0x20000c6c

080048e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048e8:	f7ff ffee 	bl	80048c8 <HAL_GetTick>
 80048ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f8:	d005      	beq.n	8004906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048fa:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <HAL_Delay+0x44>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4413      	add	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004906:	bf00      	nop
 8004908:	f7ff ffde 	bl	80048c8 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	429a      	cmp	r2, r3
 8004916:	d8f7      	bhi.n	8004908 <HAL_Delay+0x28>
  {
  }
}
 8004918:	bf00      	nop
 800491a:	bf00      	nop
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	20000044 	.word	0x20000044

08004928 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004930:	2300      	movs	r3, #0
 8004932:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e031      	b.n	80049a2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	d109      	bne.n	800495a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fb fed4 	bl	80006f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	f003 0310 	and.w	r3, r3, #16
 8004962:	2b00      	cmp	r3, #0
 8004964:	d116      	bne.n	8004994 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800496a:	4b10      	ldr	r3, [pc, #64]	; (80049ac <HAL_ADC_Init+0x84>)
 800496c:	4013      	ands	r3, r2
 800496e:	f043 0202 	orr.w	r2, r3, #2
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 fad6 	bl	8004f28 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	f023 0303 	bic.w	r3, r3, #3
 800498a:	f043 0201 	orr.w	r2, r3, #1
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	641a      	str	r2, [r3, #64]	; 0x40
 8004992:	e001      	b.n	8004998 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	ffffeefd 	.word	0xffffeefd

080049b0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d101      	bne.n	80049ca <HAL_ADC_Start+0x1a>
 80049c6:	2302      	movs	r3, #2
 80049c8:	e0ad      	b.n	8004b26 <HAL_ADC_Start+0x176>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d018      	beq.n	8004a12 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689a      	ldr	r2, [r3, #8]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0201 	orr.w	r2, r2, #1
 80049ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80049f0:	4b50      	ldr	r3, [pc, #320]	; (8004b34 <HAL_ADC_Start+0x184>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a50      	ldr	r2, [pc, #320]	; (8004b38 <HAL_ADC_Start+0x188>)
 80049f6:	fba2 2303 	umull	r2, r3, r2, r3
 80049fa:	0c9a      	lsrs	r2, r3, #18
 80049fc:	4613      	mov	r3, r2
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	4413      	add	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004a04:	e002      	b.n	8004a0c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f9      	bne.n	8004a06 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d175      	bne.n	8004b0c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a24:	4b45      	ldr	r3, [pc, #276]	; (8004b3c <HAL_ADC_Start+0x18c>)
 8004a26:	4013      	ands	r3, r2
 8004a28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d007      	beq.n	8004a4e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5a:	d106      	bne.n	8004a6a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a60:	f023 0206 	bic.w	r2, r3, #6
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	645a      	str	r2, [r3, #68]	; 0x44
 8004a68:	e002      	b.n	8004a70 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004a80:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004a82:	4b2f      	ldr	r3, [pc, #188]	; (8004b40 <HAL_ADC_Start+0x190>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f003 031f 	and.w	r3, r3, #31
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10f      	bne.n	8004aae <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d143      	bne.n	8004b24 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004aaa:	609a      	str	r2, [r3, #8]
 8004aac:	e03a      	b.n	8004b24 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a24      	ldr	r2, [pc, #144]	; (8004b44 <HAL_ADC_Start+0x194>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d10e      	bne.n	8004ad6 <HAL_ADC_Start+0x126>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d107      	bne.n	8004ad6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004ad4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004ad6:	4b1a      	ldr	r3, [pc, #104]	; (8004b40 <HAL_ADC_Start+0x190>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f003 0310 	and.w	r3, r3, #16
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d120      	bne.n	8004b24 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a18      	ldr	r2, [pc, #96]	; (8004b48 <HAL_ADC_Start+0x198>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d11b      	bne.n	8004b24 <HAL_ADC_Start+0x174>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d114      	bne.n	8004b24 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b08:	609a      	str	r2, [r3, #8]
 8004b0a:	e00b      	b.n	8004b24 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b10:	f043 0210 	orr.w	r2, r3, #16
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1c:	f043 0201 	orr.w	r2, r3, #1
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	2000003c 	.word	0x2000003c
 8004b38:	431bde83 	.word	0x431bde83
 8004b3c:	fffff8fe 	.word	0xfffff8fe
 8004b40:	40012300 	.word	0x40012300
 8004b44:	40012000 	.word	0x40012000
 8004b48:	40012200 	.word	0x40012200

08004b4c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b68:	d113      	bne.n	8004b92 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b78:	d10b      	bne.n	8004b92 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	f043 0220 	orr.w	r2, r3, #32
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e063      	b.n	8004c5a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004b92:	f7ff fe99 	bl	80048c8 <HAL_GetTick>
 8004b96:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004b98:	e021      	b.n	8004bde <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba0:	d01d      	beq.n	8004bde <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d007      	beq.n	8004bb8 <HAL_ADC_PollForConversion+0x6c>
 8004ba8:	f7ff fe8e 	bl	80048c8 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d212      	bcs.n	8004bde <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d00b      	beq.n	8004bde <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	f043 0204 	orr.w	r2, r3, #4
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e03d      	b.n	8004c5a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d1d6      	bne.n	8004b9a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0212 	mvn.w	r2, #18
 8004bf4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d123      	bne.n	8004c58 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d11f      	bne.n	8004c58 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d006      	beq.n	8004c34 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d111      	bne.n	8004c58 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d105      	bne.n	8004c58 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	f043 0201 	orr.w	r2, r3, #1
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_ADC_ConfigChannel+0x1c>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e136      	b.n	8004f06 <HAL_ADC_ConfigChannel+0x28a>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b09      	cmp	r3, #9
 8004ca6:	d93a      	bls.n	8004d1e <HAL_ADC_ConfigChannel+0xa2>
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cb0:	d035      	beq.n	8004d1e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68d9      	ldr	r1, [r3, #12]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	4413      	add	r3, r2
 8004cc6:	3b1e      	subs	r3, #30
 8004cc8:	2207      	movs	r2, #7
 8004cca:	fa02 f303 	lsl.w	r3, r2, r3
 8004cce:	43da      	mvns	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	400a      	ands	r2, r1
 8004cd6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a8d      	ldr	r2, [pc, #564]	; (8004f14 <HAL_ADC_ConfigChannel+0x298>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d10a      	bne.n	8004cf8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68d9      	ldr	r1, [r3, #12]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	061a      	lsls	r2, r3, #24
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cf6:	e035      	b.n	8004d64 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68d9      	ldr	r1, [r3, #12]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	4618      	mov	r0, r3
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	4403      	add	r3, r0
 8004d10:	3b1e      	subs	r3, #30
 8004d12:	409a      	lsls	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d1c:	e022      	b.n	8004d64 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6919      	ldr	r1, [r3, #16]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	4413      	add	r3, r2
 8004d32:	2207      	movs	r2, #7
 8004d34:	fa02 f303 	lsl.w	r3, r2, r3
 8004d38:	43da      	mvns	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	400a      	ands	r2, r1
 8004d40:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6919      	ldr	r1, [r3, #16]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	4618      	mov	r0, r3
 8004d54:	4603      	mov	r3, r0
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	4403      	add	r3, r0
 8004d5a:	409a      	lsls	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b06      	cmp	r3, #6
 8004d6a:	d824      	bhi.n	8004db6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	4613      	mov	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	3b05      	subs	r3, #5
 8004d7e:	221f      	movs	r2, #31
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	43da      	mvns	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	400a      	ands	r2, r1
 8004d8c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	4613      	mov	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	3b05      	subs	r3, #5
 8004da8:	fa00 f203 	lsl.w	r2, r0, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	635a      	str	r2, [r3, #52]	; 0x34
 8004db4:	e04c      	b.n	8004e50 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2b0c      	cmp	r3, #12
 8004dbc:	d824      	bhi.n	8004e08 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	3b23      	subs	r3, #35	; 0x23
 8004dd0:	221f      	movs	r2, #31
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	43da      	mvns	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	400a      	ands	r2, r1
 8004dde:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	4618      	mov	r0, r3
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	3b23      	subs	r3, #35	; 0x23
 8004dfa:	fa00 f203 	lsl.w	r2, r0, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	631a      	str	r2, [r3, #48]	; 0x30
 8004e06:	e023      	b.n	8004e50 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	3b41      	subs	r3, #65	; 0x41
 8004e1a:	221f      	movs	r2, #31
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	43da      	mvns	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	400a      	ands	r2, r1
 8004e28:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	4618      	mov	r0, r3
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	3b41      	subs	r3, #65	; 0x41
 8004e44:	fa00 f203 	lsl.w	r2, r0, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a30      	ldr	r2, [pc, #192]	; (8004f18 <HAL_ADC_ConfigChannel+0x29c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d10a      	bne.n	8004e70 <HAL_ADC_ConfigChannel+0x1f4>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e62:	d105      	bne.n	8004e70 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004e64:	4b2d      	ldr	r3, [pc, #180]	; (8004f1c <HAL_ADC_ConfigChannel+0x2a0>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	4a2c      	ldr	r2, [pc, #176]	; (8004f1c <HAL_ADC_ConfigChannel+0x2a0>)
 8004e6a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004e6e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a28      	ldr	r2, [pc, #160]	; (8004f18 <HAL_ADC_ConfigChannel+0x29c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d10f      	bne.n	8004e9a <HAL_ADC_ConfigChannel+0x21e>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b12      	cmp	r3, #18
 8004e80:	d10b      	bne.n	8004e9a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004e82:	4b26      	ldr	r3, [pc, #152]	; (8004f1c <HAL_ADC_ConfigChannel+0x2a0>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	4a25      	ldr	r2, [pc, #148]	; (8004f1c <HAL_ADC_ConfigChannel+0x2a0>)
 8004e88:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e8c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004e8e:	4b23      	ldr	r3, [pc, #140]	; (8004f1c <HAL_ADC_ConfigChannel+0x2a0>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	4a22      	ldr	r2, [pc, #136]	; (8004f1c <HAL_ADC_ConfigChannel+0x2a0>)
 8004e94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e98:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a1e      	ldr	r2, [pc, #120]	; (8004f18 <HAL_ADC_ConfigChannel+0x29c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d12b      	bne.n	8004efc <HAL_ADC_ConfigChannel+0x280>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a1a      	ldr	r2, [pc, #104]	; (8004f14 <HAL_ADC_ConfigChannel+0x298>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d003      	beq.n	8004eb6 <HAL_ADC_ConfigChannel+0x23a>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b11      	cmp	r3, #17
 8004eb4:	d122      	bne.n	8004efc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004eb6:	4b19      	ldr	r3, [pc, #100]	; (8004f1c <HAL_ADC_ConfigChannel+0x2a0>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	4a18      	ldr	r2, [pc, #96]	; (8004f1c <HAL_ADC_ConfigChannel+0x2a0>)
 8004ebc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004ec0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004ec2:	4b16      	ldr	r3, [pc, #88]	; (8004f1c <HAL_ADC_ConfigChannel+0x2a0>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	4a15      	ldr	r2, [pc, #84]	; (8004f1c <HAL_ADC_ConfigChannel+0x2a0>)
 8004ec8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ecc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a10      	ldr	r2, [pc, #64]	; (8004f14 <HAL_ADC_ConfigChannel+0x298>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d111      	bne.n	8004efc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004ed8:	4b11      	ldr	r3, [pc, #68]	; (8004f20 <HAL_ADC_ConfigChannel+0x2a4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a11      	ldr	r2, [pc, #68]	; (8004f24 <HAL_ADC_ConfigChannel+0x2a8>)
 8004ede:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee2:	0c9a      	lsrs	r2, r3, #18
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004eee:	e002      	b.n	8004ef6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1f9      	bne.n	8004ef0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	10000012 	.word	0x10000012
 8004f18:	40012000 	.word	0x40012000
 8004f1c:	40012300 	.word	0x40012300
 8004f20:	2000003c 	.word	0x2000003c
 8004f24:	431bde83 	.word	0x431bde83

08004f28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004f30:	4b78      	ldr	r3, [pc, #480]	; (8005114 <ADC_Init+0x1ec>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	4a77      	ldr	r2, [pc, #476]	; (8005114 <ADC_Init+0x1ec>)
 8004f36:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004f3a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004f3c:	4b75      	ldr	r3, [pc, #468]	; (8005114 <ADC_Init+0x1ec>)
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	4973      	ldr	r1, [pc, #460]	; (8005114 <ADC_Init+0x1ec>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6859      	ldr	r1, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	021a      	lsls	r2, r3, #8
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004f7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6859      	ldr	r1, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6899      	ldr	r1, [r3, #8]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb6:	4a58      	ldr	r2, [pc, #352]	; (8005118 <ADC_Init+0x1f0>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d022      	beq.n	8005002 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689a      	ldr	r2, [r3, #8]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6899      	ldr	r1, [r3, #8]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004fec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6899      	ldr	r1, [r3, #8]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	609a      	str	r2, [r3, #8]
 8005000:	e00f      	b.n	8005022 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005010:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005020:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0202 	bic.w	r2, r2, #2
 8005030:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6899      	ldr	r1, [r3, #8]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	005a      	lsls	r2, r3, #1
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3020 	ldrb.w	r3, [r3, #32]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01b      	beq.n	8005088 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800505e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800506e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6859      	ldr	r1, [r3, #4]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	3b01      	subs	r3, #1
 800507c:	035a      	lsls	r2, r3, #13
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	605a      	str	r2, [r3, #4]
 8005086:	e007      	b.n	8005098 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005096:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80050a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	3b01      	subs	r3, #1
 80050b4:	051a      	lsls	r2, r3, #20
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80050cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6899      	ldr	r1, [r3, #8]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050da:	025a      	lsls	r2, r3, #9
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6899      	ldr	r1, [r3, #8]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	029a      	lsls	r2, r3, #10
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	609a      	str	r2, [r3, #8]
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	40012300 	.word	0x40012300
 8005118:	0f000001 	.word	0x0f000001

0800511c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800512c:	4b0b      	ldr	r3, [pc, #44]	; (800515c <__NVIC_SetPriorityGrouping+0x40>)
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005138:	4013      	ands	r3, r2
 800513a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005144:	4b06      	ldr	r3, [pc, #24]	; (8005160 <__NVIC_SetPriorityGrouping+0x44>)
 8005146:	4313      	orrs	r3, r2
 8005148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800514a:	4a04      	ldr	r2, [pc, #16]	; (800515c <__NVIC_SetPriorityGrouping+0x40>)
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	60d3      	str	r3, [r2, #12]
}
 8005150:	bf00      	nop
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	e000ed00 	.word	0xe000ed00
 8005160:	05fa0000 	.word	0x05fa0000

08005164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005168:	4b04      	ldr	r3, [pc, #16]	; (800517c <__NVIC_GetPriorityGrouping+0x18>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	0a1b      	lsrs	r3, r3, #8
 800516e:	f003 0307 	and.w	r3, r3, #7
}
 8005172:	4618      	mov	r0, r3
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	e000ed00 	.word	0xe000ed00

08005180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	4603      	mov	r3, r0
 8005188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800518a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800518e:	2b00      	cmp	r3, #0
 8005190:	db0b      	blt.n	80051aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005192:	79fb      	ldrb	r3, [r7, #7]
 8005194:	f003 021f 	and.w	r2, r3, #31
 8005198:	4907      	ldr	r1, [pc, #28]	; (80051b8 <__NVIC_EnableIRQ+0x38>)
 800519a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800519e:	095b      	lsrs	r3, r3, #5
 80051a0:	2001      	movs	r0, #1
 80051a2:	fa00 f202 	lsl.w	r2, r0, r2
 80051a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	e000e100 	.word	0xe000e100

080051bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	4603      	mov	r3, r0
 80051c4:	6039      	str	r1, [r7, #0]
 80051c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	db0a      	blt.n	80051e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	490c      	ldr	r1, [pc, #48]	; (8005208 <__NVIC_SetPriority+0x4c>)
 80051d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051da:	0112      	lsls	r2, r2, #4
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	440b      	add	r3, r1
 80051e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051e4:	e00a      	b.n	80051fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	4908      	ldr	r1, [pc, #32]	; (800520c <__NVIC_SetPriority+0x50>)
 80051ec:	79fb      	ldrb	r3, [r7, #7]
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	3b04      	subs	r3, #4
 80051f4:	0112      	lsls	r2, r2, #4
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	440b      	add	r3, r1
 80051fa:	761a      	strb	r2, [r3, #24]
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	e000e100 	.word	0xe000e100
 800520c:	e000ed00 	.word	0xe000ed00

08005210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005210:	b480      	push	{r7}
 8005212:	b089      	sub	sp, #36	; 0x24
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f003 0307 	and.w	r3, r3, #7
 8005222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	f1c3 0307 	rsb	r3, r3, #7
 800522a:	2b04      	cmp	r3, #4
 800522c:	bf28      	it	cs
 800522e:	2304      	movcs	r3, #4
 8005230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	3304      	adds	r3, #4
 8005236:	2b06      	cmp	r3, #6
 8005238:	d902      	bls.n	8005240 <NVIC_EncodePriority+0x30>
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	3b03      	subs	r3, #3
 800523e:	e000      	b.n	8005242 <NVIC_EncodePriority+0x32>
 8005240:	2300      	movs	r3, #0
 8005242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005244:	f04f 32ff 	mov.w	r2, #4294967295
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	43da      	mvns	r2, r3
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	401a      	ands	r2, r3
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005258:	f04f 31ff 	mov.w	r1, #4294967295
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	fa01 f303 	lsl.w	r3, r1, r3
 8005262:	43d9      	mvns	r1, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005268:	4313      	orrs	r3, r2
         );
}
 800526a:	4618      	mov	r0, r3
 800526c:	3724      	adds	r7, #36	; 0x24
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b082      	sub	sp, #8
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7ff ff4c 	bl	800511c <__NVIC_SetPriorityGrouping>
}
 8005284:	bf00      	nop
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800529a:	2300      	movs	r3, #0
 800529c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800529e:	f7ff ff61 	bl	8005164 <__NVIC_GetPriorityGrouping>
 80052a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	68b9      	ldr	r1, [r7, #8]
 80052a8:	6978      	ldr	r0, [r7, #20]
 80052aa:	f7ff ffb1 	bl	8005210 <NVIC_EncodePriority>
 80052ae:	4602      	mov	r2, r0
 80052b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052b4:	4611      	mov	r1, r2
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7ff ff80 	bl	80051bc <__NVIC_SetPriority>
}
 80052bc:	bf00      	nop
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7ff ff54 	bl	8005180 <__NVIC_EnableIRQ>
}
 80052d8:	bf00      	nop
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e014      	b.n	800531c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	791b      	ldrb	r3, [r3, #4]
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d105      	bne.n	8005308 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fb fa8e 	bl	8000824 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800533a:	d120      	bne.n	800537e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800534a:	d118      	bne.n	800537e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2204      	movs	r2, #4
 8005350:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f043 0201 	orr.w	r2, r3, #1
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005366:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005376:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f82d 	bl	80053d8 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800538c:	d120      	bne.n	80053d0 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005398:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800539c:	d118      	bne.n	80053d0 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2204      	movs	r2, #4
 80053a2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f043 0202 	orr.w	r2, r3, #2
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80053b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80053c8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f85d 	bl	800548a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80053d0:	bf00      	nop
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	795b      	ldrb	r3, [r3, #5]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <HAL_DAC_ConfigChannel+0x18>
 8005400:	2302      	movs	r3, #2
 8005402:	e03c      	b.n	800547e <HAL_DAC_ConfigChannel+0x92>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2201      	movs	r2, #1
 8005408:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2202      	movs	r2, #2
 800540e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f003 0310 	and.w	r3, r3, #16
 800541e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	43db      	mvns	r3, r3
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	4013      	ands	r3, r2
 800542c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	4313      	orrs	r3, r2
 8005438:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f003 0310 	and.w	r3, r3, #16
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6819      	ldr	r1, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f003 0310 	and.w	r3, r3, #16
 8005460:	22c0      	movs	r2, #192	; 0xc0
 8005462:	fa02 f303 	lsl.w	r3, r2, r3
 8005466:	43da      	mvns	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	400a      	ands	r2, r1
 800546e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2201      	movs	r2, #1
 8005474:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	371c      	adds	r7, #28
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005492:	bf00      	nop
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
	...

080054a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80054ac:	f7ff fa0c 	bl	80048c8 <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e099      	b.n	80055f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 0201 	bic.w	r2, r2, #1
 80054da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054dc:	e00f      	b.n	80054fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054de:	f7ff f9f3 	bl	80048c8 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b05      	cmp	r3, #5
 80054ea:	d908      	bls.n	80054fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2220      	movs	r2, #32
 80054f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2203      	movs	r2, #3
 80054f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e078      	b.n	80055f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e8      	bne.n	80054de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	4b38      	ldr	r3, [pc, #224]	; (80055f8 <HAL_DMA_Init+0x158>)
 8005518:	4013      	ands	r3, r2
 800551a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800552a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005536:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005542:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	2b04      	cmp	r3, #4
 8005556:	d107      	bne.n	8005568 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005560:	4313      	orrs	r3, r2
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4313      	orrs	r3, r2
 8005566:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f023 0307 	bic.w	r3, r3, #7
 800557e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	4313      	orrs	r3, r2
 8005588:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	2b04      	cmp	r3, #4
 8005590:	d117      	bne.n	80055c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4313      	orrs	r3, r2
 800559a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00e      	beq.n	80055c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f8bd 	bl	8005724 <DMA_CheckFifoParam>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d008      	beq.n	80055c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2240      	movs	r2, #64	; 0x40
 80055b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80055be:	2301      	movs	r3, #1
 80055c0:	e016      	b.n	80055f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f874 	bl	80056b8 <DMA_CalcBaseAndBitshift>
 80055d0:	4603      	mov	r3, r0
 80055d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d8:	223f      	movs	r2, #63	; 0x3f
 80055da:	409a      	lsls	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3718      	adds	r7, #24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	f010803f 	.word	0xf010803f

080055fc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e050      	b.n	80056b0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d101      	bne.n	800561e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800561a:	2302      	movs	r3, #2
 800561c:	e048      	b.n	80056b0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0201 	bic.w	r2, r2, #1
 800562c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2200      	movs	r2, #0
 8005634:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2200      	movs	r2, #0
 800563c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2200      	movs	r2, #0
 8005644:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2200      	movs	r2, #0
 800564c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2200      	movs	r2, #0
 8005654:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2221      	movs	r2, #33	; 0x21
 800565c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f82a 	bl	80056b8 <DMA_CalcBaseAndBitshift>
 8005664:	4603      	mov	r3, r0
 8005666:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800566c:	223f      	movs	r2, #63	; 0x3f
 800566e:	409a      	lsls	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	3b10      	subs	r3, #16
 80056c8:	4a13      	ldr	r2, [pc, #76]	; (8005718 <DMA_CalcBaseAndBitshift+0x60>)
 80056ca:	fba2 2303 	umull	r2, r3, r2, r3
 80056ce:	091b      	lsrs	r3, r3, #4
 80056d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80056d2:	4a12      	ldr	r2, [pc, #72]	; (800571c <DMA_CalcBaseAndBitshift+0x64>)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4413      	add	r3, r2
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	461a      	mov	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	d908      	bls.n	80056f8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	4b0c      	ldr	r3, [pc, #48]	; (8005720 <DMA_CalcBaseAndBitshift+0x68>)
 80056ee:	4013      	ands	r3, r2
 80056f0:	1d1a      	adds	r2, r3, #4
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	659a      	str	r2, [r3, #88]	; 0x58
 80056f6:	e006      	b.n	8005706 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	461a      	mov	r2, r3
 80056fe:	4b08      	ldr	r3, [pc, #32]	; (8005720 <DMA_CalcBaseAndBitshift+0x68>)
 8005700:	4013      	ands	r3, r2
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	aaaaaaab 	.word	0xaaaaaaab
 800571c:	080106cc 	.word	0x080106cc
 8005720:	fffffc00 	.word	0xfffffc00

08005724 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800572c:	2300      	movs	r3, #0
 800572e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005734:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d11f      	bne.n	800577e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b03      	cmp	r3, #3
 8005742:	d856      	bhi.n	80057f2 <DMA_CheckFifoParam+0xce>
 8005744:	a201      	add	r2, pc, #4	; (adr r2, 800574c <DMA_CheckFifoParam+0x28>)
 8005746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574a:	bf00      	nop
 800574c:	0800575d 	.word	0x0800575d
 8005750:	0800576f 	.word	0x0800576f
 8005754:	0800575d 	.word	0x0800575d
 8005758:	080057f3 	.word	0x080057f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005760:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d046      	beq.n	80057f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800576c:	e043      	b.n	80057f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005772:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005776:	d140      	bne.n	80057fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800577c:	e03d      	b.n	80057fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005786:	d121      	bne.n	80057cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b03      	cmp	r3, #3
 800578c:	d837      	bhi.n	80057fe <DMA_CheckFifoParam+0xda>
 800578e:	a201      	add	r2, pc, #4	; (adr r2, 8005794 <DMA_CheckFifoParam+0x70>)
 8005790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005794:	080057a5 	.word	0x080057a5
 8005798:	080057ab 	.word	0x080057ab
 800579c:	080057a5 	.word	0x080057a5
 80057a0:	080057bd 	.word	0x080057bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	73fb      	strb	r3, [r7, #15]
      break;
 80057a8:	e030      	b.n	800580c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d025      	beq.n	8005802 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ba:	e022      	b.n	8005802 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057c4:	d11f      	bne.n	8005806 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80057ca:	e01c      	b.n	8005806 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d903      	bls.n	80057da <DMA_CheckFifoParam+0xb6>
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d003      	beq.n	80057e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80057d8:	e018      	b.n	800580c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	73fb      	strb	r3, [r7, #15]
      break;
 80057de:	e015      	b.n	800580c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00e      	beq.n	800580a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	73fb      	strb	r3, [r7, #15]
      break;
 80057f0:	e00b      	b.n	800580a <DMA_CheckFifoParam+0xe6>
      break;
 80057f2:	bf00      	nop
 80057f4:	e00a      	b.n	800580c <DMA_CheckFifoParam+0xe8>
      break;
 80057f6:	bf00      	nop
 80057f8:	e008      	b.n	800580c <DMA_CheckFifoParam+0xe8>
      break;
 80057fa:	bf00      	nop
 80057fc:	e006      	b.n	800580c <DMA_CheckFifoParam+0xe8>
      break;
 80057fe:	bf00      	nop
 8005800:	e004      	b.n	800580c <DMA_CheckFifoParam+0xe8>
      break;
 8005802:	bf00      	nop
 8005804:	e002      	b.n	800580c <DMA_CheckFifoParam+0xe8>
      break;   
 8005806:	bf00      	nop
 8005808:	e000      	b.n	800580c <DMA_CheckFifoParam+0xe8>
      break;
 800580a:	bf00      	nop
    }
  } 
  
  return status; 
 800580c:	7bfb      	ldrb	r3, [r7, #15]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop

0800581c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e039      	b.n	80058a2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d106      	bne.n	8005848 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fb f868 	bl	8000918 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800586c:	f023 0107 	bic.w	r1, r3, #7
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005882:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <HAL_DMA2D_Init+0x90>)
 8005884:	4013      	ands	r3, r2
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	68d1      	ldr	r1, [r2, #12]
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	6812      	ldr	r2, [r2, #0]
 800588e:	430b      	orrs	r3, r1
 8005890:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	ffffc000 	.word	0xffffc000

080058b0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af02      	add	r7, sp, #8
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d101      	bne.n	80058cc <HAL_DMA2D_Start+0x1c>
 80058c8:	2302      	movs	r3, #2
 80058ca:	e018      	b.n	80058fe <HAL_DMA2D_Start+0x4e>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	68b9      	ldr	r1, [r7, #8]
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 fa98 	bl	8005e1c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0201 	orr.w	r2, r2, #1
 80058fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b086      	sub	sp, #24
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005910:	2300      	movs	r3, #0
 8005912:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d056      	beq.n	80059d0 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005922:	f7fe ffd1 	bl	80048c8 <HAL_GetTick>
 8005926:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005928:	e04b      	b.n	80059c2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005938:	2b00      	cmp	r3, #0
 800593a:	d023      	beq.n	8005984 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b00      	cmp	r3, #0
 8005944:	d005      	beq.n	8005952 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594a:	f043 0202 	orr.w	r2, r3, #2
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b00      	cmp	r3, #0
 800595a:	d005      	beq.n	8005968 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005960:	f043 0201 	orr.w	r2, r3, #1
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2221      	movs	r2, #33	; 0x21
 800596e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2204      	movs	r2, #4
 8005974:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e0a5      	b.n	8005ad0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598a:	d01a      	beq.n	80059c2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800598c:	f7fe ff9c 	bl	80048c8 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	429a      	cmp	r2, r3
 800599a:	d302      	bcc.n	80059a2 <HAL_DMA2D_PollForTransfer+0x9c>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10f      	bne.n	80059c2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a6:	f043 0220 	orr.w	r2, r3, #32
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2203      	movs	r2, #3
 80059b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e086      	b.n	8005ad0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0ac      	beq.n	800592a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d061      	beq.n	8005ab6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80059f2:	f7fe ff69 	bl	80048c8 <HAL_GetTick>
 80059f6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80059f8:	e056      	b.n	8005aa8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d02e      	beq.n	8005a6a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f003 0308 	and.w	r3, r3, #8
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d005      	beq.n	8005a22 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1a:	f043 0204 	orr.w	r2, r3, #4
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f003 0320 	and.w	r3, r3, #32
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a30:	f043 0202 	orr.w	r2, r3, #2
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a46:	f043 0201 	orr.w	r2, r3, #1
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2229      	movs	r2, #41	; 0x29
 8005a54:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2204      	movs	r2, #4
 8005a5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e032      	b.n	8005ad0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a70:	d01a      	beq.n	8005aa8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a72:	f7fe ff29 	bl	80048c8 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d302      	bcc.n	8005a88 <HAL_DMA2D_PollForTransfer+0x182>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10f      	bne.n	8005aa8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8c:	f043 0220 	orr.w	r2, r3, #32
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2203      	movs	r2, #3
 8005a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e013      	b.n	8005ad0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f003 0310 	and.w	r3, r3, #16
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d0a1      	beq.n	80059fa <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2212      	movs	r2, #18
 8005abc:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3718      	adds	r7, #24
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d026      	beq.n	8005b48 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d021      	beq.n	8005b48 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b12:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b18:	f043 0201 	orr.w	r2, r3, #1
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2201      	movs	r2, #1
 8005b26:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2204      	movs	r2, #4
 8005b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d003      	beq.n	8005b48 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f003 0320 	and.w	r3, r3, #32
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d026      	beq.n	8005ba0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d021      	beq.n	8005ba0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b6a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2220      	movs	r2, #32
 8005b72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b78:	f043 0202 	orr.w	r2, r3, #2
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2204      	movs	r2, #4
 8005b84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f003 0308 	and.w	r3, r3, #8
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d026      	beq.n	8005bf8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d021      	beq.n	8005bf8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bc2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2208      	movs	r2, #8
 8005bca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd0:	f043 0204 	orr.w	r2, r3, #4
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2204      	movs	r2, #4
 8005bdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f003 0304 	and.w	r3, r3, #4
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d013      	beq.n	8005c2a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00e      	beq.n	8005c2a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c1a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2204      	movs	r2, #4
 8005c22:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f853 	bl	8005cd0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d024      	beq.n	8005c7e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d01f      	beq.n	8005c7e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c4c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2202      	movs	r2, #2
 8005c54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f003 0310 	and.w	r3, r3, #16
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d01f      	beq.n	8005cc8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d01a      	beq.n	8005cc8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ca0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2210      	movs	r2, #16
 8005ca8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f80e 	bl	8005ce4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005cc8:	bf00      	nop
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b087      	sub	sp, #28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_DMA2D_ConfigLayer+0x20>
 8005d14:	2302      	movs	r3, #2
 8005d16:	e079      	b.n	8005e0c <HAL_DMA2D_ConfigLayer+0x114>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	011b      	lsls	r3, r3, #4
 8005d2c:	3318      	adds	r3, #24
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	4413      	add	r3, r2
 8005d32:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	041b      	lsls	r3, r3, #16
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005d42:	4b35      	ldr	r3, [pc, #212]	; (8005e18 <HAL_DMA2D_ConfigLayer+0x120>)
 8005d44:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	2b0a      	cmp	r3, #10
 8005d4c:	d003      	beq.n	8005d56 <HAL_DMA2D_ConfigLayer+0x5e>
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2b09      	cmp	r3, #9
 8005d54:	d107      	bne.n	8005d66 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	e005      	b.n	8005d72 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	061b      	lsls	r3, r3, #24
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d120      	bne.n	8005dba <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	43db      	mvns	r3, r3
 8005d82:	ea02 0103 	and.w	r1, r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	6812      	ldr	r2, [r2, #0]
 8005d98:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	2b0a      	cmp	r3, #10
 8005da0:	d003      	beq.n	8005daa <HAL_DMA2D_ConfigLayer+0xb2>
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	2b09      	cmp	r3, #9
 8005da8:	d127      	bne.n	8005dfa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	68da      	ldr	r2, [r3, #12]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005db6:	629a      	str	r2, [r3, #40]	; 0x28
 8005db8:	e01f      	b.n	8005dfa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69da      	ldr	r2, [r3, #28]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	43db      	mvns	r3, r3
 8005dc4:	ea02 0103 	and.w	r1, r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	6812      	ldr	r2, [r2, #0]
 8005dda:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	2b0a      	cmp	r3, #10
 8005de2:	d003      	beq.n	8005dec <HAL_DMA2D_ConfigLayer+0xf4>
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	2b09      	cmp	r3, #9
 8005dea:	d106      	bne.n	8005dfa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005df8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	371c      	adds	r7, #28
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	ff03000f 	.word	0xff03000f

08005e1c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b08b      	sub	sp, #44	; 0x2c
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
 8005e28:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e30:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	041a      	lsls	r2, r3, #16
 8005e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e54:	d174      	bne.n	8005f40 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005e5c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e64:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005e6c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d108      	bne.n	8005e8e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	431a      	orrs	r2, r3
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e8c:	e053      	b.n	8005f36 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d106      	bne.n	8005ea4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea2:	e048      	b.n	8005f36 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d111      	bne.n	8005ed0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	0cdb      	lsrs	r3, r3, #19
 8005eb0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	0a9b      	lsrs	r3, r3, #10
 8005eb6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	08db      	lsrs	r3, r3, #3
 8005ebc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	015a      	lsls	r2, r3, #5
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	02db      	lsls	r3, r3, #11
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ece:	e032      	b.n	8005f36 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	2b03      	cmp	r3, #3
 8005ed6:	d117      	bne.n	8005f08 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005ed8:	6a3b      	ldr	r3, [r7, #32]
 8005eda:	0fdb      	lsrs	r3, r3, #31
 8005edc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	0cdb      	lsrs	r3, r3, #19
 8005ee2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	0adb      	lsrs	r3, r3, #11
 8005ee8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	08db      	lsrs	r3, r3, #3
 8005eee:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	029b      	lsls	r3, r3, #10
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	03db      	lsls	r3, r3, #15
 8005efe:	4313      	orrs	r3, r2
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	627b      	str	r3, [r7, #36]	; 0x24
 8005f06:	e016      	b.n	8005f36 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	0f1b      	lsrs	r3, r3, #28
 8005f0c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	0d1b      	lsrs	r3, r3, #20
 8005f12:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	0b1b      	lsrs	r3, r3, #12
 8005f18:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	091b      	lsrs	r3, r3, #4
 8005f1e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	011a      	lsls	r2, r3, #4
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	021b      	lsls	r3, r3, #8
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	031b      	lsls	r3, r3, #12
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005f3e:	e003      	b.n	8005f48 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	60da      	str	r2, [r3, #12]
}
 8005f48:	bf00      	nop
 8005f4a:	372c      	adds	r7, #44	; 0x2c
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b089      	sub	sp, #36	; 0x24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005f62:	2300      	movs	r3, #0
 8005f64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005f66:	2300      	movs	r3, #0
 8005f68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005f6e:	2300      	movs	r3, #0
 8005f70:	61fb      	str	r3, [r7, #28]
 8005f72:	e175      	b.n	8006260 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005f74:	2201      	movs	r2, #1
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	4013      	ands	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	f040 8164 	bne.w	800625a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f003 0303 	and.w	r3, r3, #3
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d005      	beq.n	8005faa <HAL_GPIO_Init+0x56>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d130      	bne.n	800600c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	2203      	movs	r2, #3
 8005fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fba:	43db      	mvns	r3, r3
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	68da      	ldr	r2, [r3, #12]
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	005b      	lsls	r3, r3, #1
 8005fca:	fa02 f303 	lsl.w	r3, r2, r3
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe8:	43db      	mvns	r3, r3
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	4013      	ands	r3, r2
 8005fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	091b      	lsrs	r3, r3, #4
 8005ff6:	f003 0201 	and.w	r2, r3, #1
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	4313      	orrs	r3, r2
 8006004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f003 0303 	and.w	r3, r3, #3
 8006014:	2b03      	cmp	r3, #3
 8006016:	d017      	beq.n	8006048 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	2203      	movs	r2, #3
 8006024:	fa02 f303 	lsl.w	r3, r2, r3
 8006028:	43db      	mvns	r3, r3
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	4013      	ands	r3, r2
 800602e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	fa02 f303 	lsl.w	r3, r2, r3
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	4313      	orrs	r3, r2
 8006040:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f003 0303 	and.w	r3, r3, #3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d123      	bne.n	800609c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	08da      	lsrs	r2, r3, #3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3208      	adds	r2, #8
 800605c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	220f      	movs	r2, #15
 800606c:	fa02 f303 	lsl.w	r3, r2, r3
 8006070:	43db      	mvns	r3, r3
 8006072:	69ba      	ldr	r2, [r7, #24]
 8006074:	4013      	ands	r3, r2
 8006076:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	691a      	ldr	r2, [r3, #16]
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	f003 0307 	and.w	r3, r3, #7
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	fa02 f303 	lsl.w	r3, r2, r3
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	4313      	orrs	r3, r2
 800608c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	08da      	lsrs	r2, r3, #3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	3208      	adds	r2, #8
 8006096:	69b9      	ldr	r1, [r7, #24]
 8006098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	005b      	lsls	r3, r3, #1
 80060a6:	2203      	movs	r2, #3
 80060a8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ac:	43db      	mvns	r3, r3
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	4013      	ands	r3, r2
 80060b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f003 0203 	and.w	r2, r3, #3
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	fa02 f303 	lsl.w	r3, r2, r3
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 80be 	beq.w	800625a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060de:	4b66      	ldr	r3, [pc, #408]	; (8006278 <HAL_GPIO_Init+0x324>)
 80060e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e2:	4a65      	ldr	r2, [pc, #404]	; (8006278 <HAL_GPIO_Init+0x324>)
 80060e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060e8:	6453      	str	r3, [r2, #68]	; 0x44
 80060ea:	4b63      	ldr	r3, [pc, #396]	; (8006278 <HAL_GPIO_Init+0x324>)
 80060ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80060f6:	4a61      	ldr	r2, [pc, #388]	; (800627c <HAL_GPIO_Init+0x328>)
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	089b      	lsrs	r3, r3, #2
 80060fc:	3302      	adds	r3, #2
 80060fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006102:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	f003 0303 	and.w	r3, r3, #3
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	220f      	movs	r2, #15
 800610e:	fa02 f303 	lsl.w	r3, r2, r3
 8006112:	43db      	mvns	r3, r3
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	4013      	ands	r3, r2
 8006118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a58      	ldr	r2, [pc, #352]	; (8006280 <HAL_GPIO_Init+0x32c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d037      	beq.n	8006192 <HAL_GPIO_Init+0x23e>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a57      	ldr	r2, [pc, #348]	; (8006284 <HAL_GPIO_Init+0x330>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d031      	beq.n	800618e <HAL_GPIO_Init+0x23a>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a56      	ldr	r2, [pc, #344]	; (8006288 <HAL_GPIO_Init+0x334>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d02b      	beq.n	800618a <HAL_GPIO_Init+0x236>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a55      	ldr	r2, [pc, #340]	; (800628c <HAL_GPIO_Init+0x338>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d025      	beq.n	8006186 <HAL_GPIO_Init+0x232>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a54      	ldr	r2, [pc, #336]	; (8006290 <HAL_GPIO_Init+0x33c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d01f      	beq.n	8006182 <HAL_GPIO_Init+0x22e>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a53      	ldr	r2, [pc, #332]	; (8006294 <HAL_GPIO_Init+0x340>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d019      	beq.n	800617e <HAL_GPIO_Init+0x22a>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a52      	ldr	r2, [pc, #328]	; (8006298 <HAL_GPIO_Init+0x344>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d013      	beq.n	800617a <HAL_GPIO_Init+0x226>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a51      	ldr	r2, [pc, #324]	; (800629c <HAL_GPIO_Init+0x348>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d00d      	beq.n	8006176 <HAL_GPIO_Init+0x222>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a50      	ldr	r2, [pc, #320]	; (80062a0 <HAL_GPIO_Init+0x34c>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d007      	beq.n	8006172 <HAL_GPIO_Init+0x21e>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a4f      	ldr	r2, [pc, #316]	; (80062a4 <HAL_GPIO_Init+0x350>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d101      	bne.n	800616e <HAL_GPIO_Init+0x21a>
 800616a:	2309      	movs	r3, #9
 800616c:	e012      	b.n	8006194 <HAL_GPIO_Init+0x240>
 800616e:	230a      	movs	r3, #10
 8006170:	e010      	b.n	8006194 <HAL_GPIO_Init+0x240>
 8006172:	2308      	movs	r3, #8
 8006174:	e00e      	b.n	8006194 <HAL_GPIO_Init+0x240>
 8006176:	2307      	movs	r3, #7
 8006178:	e00c      	b.n	8006194 <HAL_GPIO_Init+0x240>
 800617a:	2306      	movs	r3, #6
 800617c:	e00a      	b.n	8006194 <HAL_GPIO_Init+0x240>
 800617e:	2305      	movs	r3, #5
 8006180:	e008      	b.n	8006194 <HAL_GPIO_Init+0x240>
 8006182:	2304      	movs	r3, #4
 8006184:	e006      	b.n	8006194 <HAL_GPIO_Init+0x240>
 8006186:	2303      	movs	r3, #3
 8006188:	e004      	b.n	8006194 <HAL_GPIO_Init+0x240>
 800618a:	2302      	movs	r3, #2
 800618c:	e002      	b.n	8006194 <HAL_GPIO_Init+0x240>
 800618e:	2301      	movs	r3, #1
 8006190:	e000      	b.n	8006194 <HAL_GPIO_Init+0x240>
 8006192:	2300      	movs	r3, #0
 8006194:	69fa      	ldr	r2, [r7, #28]
 8006196:	f002 0203 	and.w	r2, r2, #3
 800619a:	0092      	lsls	r2, r2, #2
 800619c:	4093      	lsls	r3, r2
 800619e:	69ba      	ldr	r2, [r7, #24]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80061a4:	4935      	ldr	r1, [pc, #212]	; (800627c <HAL_GPIO_Init+0x328>)
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	089b      	lsrs	r3, r3, #2
 80061aa:	3302      	adds	r3, #2
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80061b2:	4b3d      	ldr	r3, [pc, #244]	; (80062a8 <HAL_GPIO_Init+0x354>)
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	43db      	mvns	r3, r3
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	4013      	ands	r3, r2
 80061c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80061d6:	4a34      	ldr	r2, [pc, #208]	; (80062a8 <HAL_GPIO_Init+0x354>)
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80061dc:	4b32      	ldr	r3, [pc, #200]	; (80062a8 <HAL_GPIO_Init+0x354>)
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	43db      	mvns	r3, r3
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	4013      	ands	r3, r2
 80061ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006200:	4a29      	ldr	r2, [pc, #164]	; (80062a8 <HAL_GPIO_Init+0x354>)
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006206:	4b28      	ldr	r3, [pc, #160]	; (80062a8 <HAL_GPIO_Init+0x354>)
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	43db      	mvns	r3, r3
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	4013      	ands	r3, r2
 8006214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	4313      	orrs	r3, r2
 8006228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800622a:	4a1f      	ldr	r2, [pc, #124]	; (80062a8 <HAL_GPIO_Init+0x354>)
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006230:	4b1d      	ldr	r3, [pc, #116]	; (80062a8 <HAL_GPIO_Init+0x354>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	43db      	mvns	r3, r3
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	4013      	ands	r3, r2
 800623e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	4313      	orrs	r3, r2
 8006252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006254:	4a14      	ldr	r2, [pc, #80]	; (80062a8 <HAL_GPIO_Init+0x354>)
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	3301      	adds	r3, #1
 800625e:	61fb      	str	r3, [r7, #28]
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	2b0f      	cmp	r3, #15
 8006264:	f67f ae86 	bls.w	8005f74 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006268:	bf00      	nop
 800626a:	bf00      	nop
 800626c:	3724      	adds	r7, #36	; 0x24
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	40023800 	.word	0x40023800
 800627c:	40013800 	.word	0x40013800
 8006280:	40020000 	.word	0x40020000
 8006284:	40020400 	.word	0x40020400
 8006288:	40020800 	.word	0x40020800
 800628c:	40020c00 	.word	0x40020c00
 8006290:	40021000 	.word	0x40021000
 8006294:	40021400 	.word	0x40021400
 8006298:	40021800 	.word	0x40021800
 800629c:	40021c00 	.word	0x40021c00
 80062a0:	40022000 	.word	0x40022000
 80062a4:	40022400 	.word	0x40022400
 80062a8:	40013c00 	.word	0x40013c00

080062ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80062b6:	2300      	movs	r3, #0
 80062b8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80062ba:	2300      	movs	r3, #0
 80062bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80062be:	2300      	movs	r3, #0
 80062c0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80062c2:	2300      	movs	r3, #0
 80062c4:	617b      	str	r3, [r7, #20]
 80062c6:	e0d9      	b.n	800647c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80062c8:	2201      	movs	r2, #1
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	fa02 f303 	lsl.w	r3, r2, r3
 80062d0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	4013      	ands	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	429a      	cmp	r2, r3
 80062e0:	f040 80c9 	bne.w	8006476 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80062e4:	4a6b      	ldr	r2, [pc, #428]	; (8006494 <HAL_GPIO_DeInit+0x1e8>)
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	089b      	lsrs	r3, r3, #2
 80062ea:	3302      	adds	r3, #2
 80062ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f003 0303 	and.w	r3, r3, #3
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	220f      	movs	r2, #15
 80062fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	4013      	ands	r3, r2
 8006304:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a63      	ldr	r2, [pc, #396]	; (8006498 <HAL_GPIO_DeInit+0x1ec>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d037      	beq.n	800637e <HAL_GPIO_DeInit+0xd2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a62      	ldr	r2, [pc, #392]	; (800649c <HAL_GPIO_DeInit+0x1f0>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d031      	beq.n	800637a <HAL_GPIO_DeInit+0xce>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a61      	ldr	r2, [pc, #388]	; (80064a0 <HAL_GPIO_DeInit+0x1f4>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d02b      	beq.n	8006376 <HAL_GPIO_DeInit+0xca>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a60      	ldr	r2, [pc, #384]	; (80064a4 <HAL_GPIO_DeInit+0x1f8>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d025      	beq.n	8006372 <HAL_GPIO_DeInit+0xc6>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a5f      	ldr	r2, [pc, #380]	; (80064a8 <HAL_GPIO_DeInit+0x1fc>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d01f      	beq.n	800636e <HAL_GPIO_DeInit+0xc2>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a5e      	ldr	r2, [pc, #376]	; (80064ac <HAL_GPIO_DeInit+0x200>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d019      	beq.n	800636a <HAL_GPIO_DeInit+0xbe>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a5d      	ldr	r2, [pc, #372]	; (80064b0 <HAL_GPIO_DeInit+0x204>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d013      	beq.n	8006366 <HAL_GPIO_DeInit+0xba>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a5c      	ldr	r2, [pc, #368]	; (80064b4 <HAL_GPIO_DeInit+0x208>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d00d      	beq.n	8006362 <HAL_GPIO_DeInit+0xb6>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a5b      	ldr	r2, [pc, #364]	; (80064b8 <HAL_GPIO_DeInit+0x20c>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d007      	beq.n	800635e <HAL_GPIO_DeInit+0xb2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a5a      	ldr	r2, [pc, #360]	; (80064bc <HAL_GPIO_DeInit+0x210>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d101      	bne.n	800635a <HAL_GPIO_DeInit+0xae>
 8006356:	2309      	movs	r3, #9
 8006358:	e012      	b.n	8006380 <HAL_GPIO_DeInit+0xd4>
 800635a:	230a      	movs	r3, #10
 800635c:	e010      	b.n	8006380 <HAL_GPIO_DeInit+0xd4>
 800635e:	2308      	movs	r3, #8
 8006360:	e00e      	b.n	8006380 <HAL_GPIO_DeInit+0xd4>
 8006362:	2307      	movs	r3, #7
 8006364:	e00c      	b.n	8006380 <HAL_GPIO_DeInit+0xd4>
 8006366:	2306      	movs	r3, #6
 8006368:	e00a      	b.n	8006380 <HAL_GPIO_DeInit+0xd4>
 800636a:	2305      	movs	r3, #5
 800636c:	e008      	b.n	8006380 <HAL_GPIO_DeInit+0xd4>
 800636e:	2304      	movs	r3, #4
 8006370:	e006      	b.n	8006380 <HAL_GPIO_DeInit+0xd4>
 8006372:	2303      	movs	r3, #3
 8006374:	e004      	b.n	8006380 <HAL_GPIO_DeInit+0xd4>
 8006376:	2302      	movs	r3, #2
 8006378:	e002      	b.n	8006380 <HAL_GPIO_DeInit+0xd4>
 800637a:	2301      	movs	r3, #1
 800637c:	e000      	b.n	8006380 <HAL_GPIO_DeInit+0xd4>
 800637e:	2300      	movs	r3, #0
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	f002 0203 	and.w	r2, r2, #3
 8006386:	0092      	lsls	r2, r2, #2
 8006388:	4093      	lsls	r3, r2
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	429a      	cmp	r2, r3
 800638e:	d132      	bne.n	80063f6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006390:	4b4b      	ldr	r3, [pc, #300]	; (80064c0 <HAL_GPIO_DeInit+0x214>)
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	43db      	mvns	r3, r3
 8006398:	4949      	ldr	r1, [pc, #292]	; (80064c0 <HAL_GPIO_DeInit+0x214>)
 800639a:	4013      	ands	r3, r2
 800639c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800639e:	4b48      	ldr	r3, [pc, #288]	; (80064c0 <HAL_GPIO_DeInit+0x214>)
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	43db      	mvns	r3, r3
 80063a6:	4946      	ldr	r1, [pc, #280]	; (80064c0 <HAL_GPIO_DeInit+0x214>)
 80063a8:	4013      	ands	r3, r2
 80063aa:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80063ac:	4b44      	ldr	r3, [pc, #272]	; (80064c0 <HAL_GPIO_DeInit+0x214>)
 80063ae:	68da      	ldr	r2, [r3, #12]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	43db      	mvns	r3, r3
 80063b4:	4942      	ldr	r1, [pc, #264]	; (80064c0 <HAL_GPIO_DeInit+0x214>)
 80063b6:	4013      	ands	r3, r2
 80063b8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80063ba:	4b41      	ldr	r3, [pc, #260]	; (80064c0 <HAL_GPIO_DeInit+0x214>)
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	43db      	mvns	r3, r3
 80063c2:	493f      	ldr	r1, [pc, #252]	; (80064c0 <HAL_GPIO_DeInit+0x214>)
 80063c4:	4013      	ands	r3, r2
 80063c6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f003 0303 	and.w	r3, r3, #3
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	220f      	movs	r2, #15
 80063d2:	fa02 f303 	lsl.w	r3, r2, r3
 80063d6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80063d8:	4a2e      	ldr	r2, [pc, #184]	; (8006494 <HAL_GPIO_DeInit+0x1e8>)
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	089b      	lsrs	r3, r3, #2
 80063de:	3302      	adds	r3, #2
 80063e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	43da      	mvns	r2, r3
 80063e8:	482a      	ldr	r0, [pc, #168]	; (8006494 <HAL_GPIO_DeInit+0x1e8>)
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	089b      	lsrs	r3, r3, #2
 80063ee:	400a      	ands	r2, r1
 80063f0:	3302      	adds	r3, #2
 80063f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	005b      	lsls	r3, r3, #1
 80063fe:	2103      	movs	r1, #3
 8006400:	fa01 f303 	lsl.w	r3, r1, r3
 8006404:	43db      	mvns	r3, r3
 8006406:	401a      	ands	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	08da      	lsrs	r2, r3, #3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	3208      	adds	r2, #8
 8006414:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f003 0307 	and.w	r3, r3, #7
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	220f      	movs	r2, #15
 8006422:	fa02 f303 	lsl.w	r3, r2, r3
 8006426:	43db      	mvns	r3, r3
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	08d2      	lsrs	r2, r2, #3
 800642c:	4019      	ands	r1, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	3208      	adds	r2, #8
 8006432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	2103      	movs	r1, #3
 8006440:	fa01 f303 	lsl.w	r3, r1, r3
 8006444:	43db      	mvns	r3, r3
 8006446:	401a      	ands	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	2101      	movs	r1, #1
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	fa01 f303 	lsl.w	r3, r1, r3
 8006458:	43db      	mvns	r3, r3
 800645a:	401a      	ands	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689a      	ldr	r2, [r3, #8]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	2103      	movs	r1, #3
 800646a:	fa01 f303 	lsl.w	r3, r1, r3
 800646e:	43db      	mvns	r3, r3
 8006470:	401a      	ands	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	3301      	adds	r3, #1
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2b0f      	cmp	r3, #15
 8006480:	f67f af22 	bls.w	80062c8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006484:	bf00      	nop
 8006486:	bf00      	nop
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	40013800 	.word	0x40013800
 8006498:	40020000 	.word	0x40020000
 800649c:	40020400 	.word	0x40020400
 80064a0:	40020800 	.word	0x40020800
 80064a4:	40020c00 	.word	0x40020c00
 80064a8:	40021000 	.word	0x40021000
 80064ac:	40021400 	.word	0x40021400
 80064b0:	40021800 	.word	0x40021800
 80064b4:	40021c00 	.word	0x40021c00
 80064b8:	40022000 	.word	0x40022000
 80064bc:	40022400 	.word	0x40022400
 80064c0:	40013c00 	.word	0x40013c00

080064c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	460b      	mov	r3, r1
 80064ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	691a      	ldr	r2, [r3, #16]
 80064d4:	887b      	ldrh	r3, [r7, #2]
 80064d6:	4013      	ands	r3, r2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80064dc:	2301      	movs	r3, #1
 80064de:	73fb      	strb	r3, [r7, #15]
 80064e0:	e001      	b.n	80064e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80064e2:	2300      	movs	r3, #0
 80064e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	460b      	mov	r3, r1
 80064fe:	807b      	strh	r3, [r7, #2]
 8006500:	4613      	mov	r3, r2
 8006502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006504:	787b      	ldrb	r3, [r7, #1]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800650a:	887a      	ldrh	r2, [r7, #2]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006510:	e003      	b.n	800651a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006512:	887b      	ldrh	r3, [r7, #2]
 8006514:	041a      	lsls	r2, r3, #16
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	619a      	str	r2, [r3, #24]
}
 800651a:	bf00      	nop
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
	...

08006528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e07f      	b.n	800663a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d106      	bne.n	8006554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7fb f912 	bl	8001778 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2224      	movs	r2, #36	; 0x24
 8006558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f022 0201 	bic.w	r2, r2, #1
 800656a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006578:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006588:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d107      	bne.n	80065a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689a      	ldr	r2, [r3, #8]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800659e:	609a      	str	r2, [r3, #8]
 80065a0:	e006      	b.n	80065b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689a      	ldr	r2, [r3, #8]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80065ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d104      	bne.n	80065c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6859      	ldr	r1, [r3, #4]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	4b1d      	ldr	r3, [pc, #116]	; (8006644 <HAL_I2C_Init+0x11c>)
 80065ce:	430b      	orrs	r3, r1
 80065d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68da      	ldr	r2, [r3, #12]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691a      	ldr	r2, [r3, #16]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	69d9      	ldr	r1, [r3, #28]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a1a      	ldr	r2, [r3, #32]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 0201 	orr.w	r2, r2, #1
 800661a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2220      	movs	r2, #32
 8006626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3708      	adds	r7, #8
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	02008000 	.word	0x02008000

08006648 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e021      	b.n	800669e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2224      	movs	r2, #36	; 0x24
 800665e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 0201 	bic.w	r2, r2, #1
 8006670:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7fb f928 	bl	80018c8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af02      	add	r7, sp, #8
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	4608      	mov	r0, r1
 80066b2:	4611      	mov	r1, r2
 80066b4:	461a      	mov	r2, r3
 80066b6:	4603      	mov	r3, r0
 80066b8:	817b      	strh	r3, [r7, #10]
 80066ba:	460b      	mov	r3, r1
 80066bc:	813b      	strh	r3, [r7, #8]
 80066be:	4613      	mov	r3, r2
 80066c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	f040 80f9 	bne.w	80068c2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d002      	beq.n	80066dc <HAL_I2C_Mem_Write+0x34>
 80066d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d105      	bne.n	80066e8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e0ed      	b.n	80068c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d101      	bne.n	80066f6 <HAL_I2C_Mem_Write+0x4e>
 80066f2:	2302      	movs	r3, #2
 80066f4:	e0e6      	b.n	80068c4 <HAL_I2C_Mem_Write+0x21c>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80066fe:	f7fe f8e3 	bl	80048c8 <HAL_GetTick>
 8006702:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	2319      	movs	r3, #25
 800670a:	2201      	movs	r2, #1
 800670c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f000 fad1 	bl	8006cb8 <I2C_WaitOnFlagUntilTimeout>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e0d1      	b.n	80068c4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2221      	movs	r2, #33	; 0x21
 8006724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2240      	movs	r2, #64	; 0x40
 800672c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6a3a      	ldr	r2, [r7, #32]
 800673a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006740:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006748:	88f8      	ldrh	r0, [r7, #6]
 800674a:	893a      	ldrh	r2, [r7, #8]
 800674c:	8979      	ldrh	r1, [r7, #10]
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	9301      	str	r3, [sp, #4]
 8006752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	4603      	mov	r3, r0
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f000 f9e1 	bl	8006b20 <I2C_RequestMemoryWrite>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d005      	beq.n	8006770 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e0a9      	b.n	80068c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006774:	b29b      	uxth	r3, r3
 8006776:	2bff      	cmp	r3, #255	; 0xff
 8006778:	d90e      	bls.n	8006798 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	22ff      	movs	r2, #255	; 0xff
 800677e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006784:	b2da      	uxtb	r2, r3
 8006786:	8979      	ldrh	r1, [r7, #10]
 8006788:	2300      	movs	r3, #0
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 fc2d 	bl	8006ff0 <I2C_TransferConfig>
 8006796:	e00f      	b.n	80067b8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800679c:	b29a      	uxth	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	8979      	ldrh	r1, [r7, #10]
 80067aa:	2300      	movs	r3, #0
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f000 fc1c 	bl	8006ff0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f000 fabb 	bl	8006d38 <I2C_WaitOnTXISFlagUntilTimeout>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e07b      	b.n	80068c4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	781a      	ldrb	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067f4:	3b01      	subs	r3, #1
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006800:	b29b      	uxth	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d034      	beq.n	8006870 <HAL_I2C_Mem_Write+0x1c8>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800680a:	2b00      	cmp	r3, #0
 800680c:	d130      	bne.n	8006870 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006814:	2200      	movs	r2, #0
 8006816:	2180      	movs	r1, #128	; 0x80
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 fa4d 	bl	8006cb8 <I2C_WaitOnFlagUntilTimeout>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e04d      	b.n	80068c4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800682c:	b29b      	uxth	r3, r3
 800682e:	2bff      	cmp	r3, #255	; 0xff
 8006830:	d90e      	bls.n	8006850 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	22ff      	movs	r2, #255	; 0xff
 8006836:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800683c:	b2da      	uxtb	r2, r3
 800683e:	8979      	ldrh	r1, [r7, #10]
 8006840:	2300      	movs	r3, #0
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 fbd1 	bl	8006ff0 <I2C_TransferConfig>
 800684e:	e00f      	b.n	8006870 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006854:	b29a      	uxth	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800685e:	b2da      	uxtb	r2, r3
 8006860:	8979      	ldrh	r1, [r7, #10]
 8006862:	2300      	movs	r3, #0
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 fbc0 	bl	8006ff0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006874:	b29b      	uxth	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d19e      	bne.n	80067b8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f000 fa9a 	bl	8006db8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e01a      	b.n	80068c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2220      	movs	r2, #32
 8006894:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6859      	ldr	r1, [r3, #4]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	4b0a      	ldr	r3, [pc, #40]	; (80068cc <HAL_I2C_Mem_Write+0x224>)
 80068a2:	400b      	ands	r3, r1
 80068a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2220      	movs	r2, #32
 80068aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	e000      	b.n	80068c4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80068c2:	2302      	movs	r3, #2
  }
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3718      	adds	r7, #24
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	fe00e800 	.word	0xfe00e800

080068d0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b088      	sub	sp, #32
 80068d4:	af02      	add	r7, sp, #8
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	4608      	mov	r0, r1
 80068da:	4611      	mov	r1, r2
 80068dc:	461a      	mov	r2, r3
 80068de:	4603      	mov	r3, r0
 80068e0:	817b      	strh	r3, [r7, #10]
 80068e2:	460b      	mov	r3, r1
 80068e4:	813b      	strh	r3, [r7, #8]
 80068e6:	4613      	mov	r3, r2
 80068e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b20      	cmp	r3, #32
 80068f4:	f040 80fd 	bne.w	8006af2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d002      	beq.n	8006904 <HAL_I2C_Mem_Read+0x34>
 80068fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006900:	2b00      	cmp	r3, #0
 8006902:	d105      	bne.n	8006910 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800690a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e0f1      	b.n	8006af4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006916:	2b01      	cmp	r3, #1
 8006918:	d101      	bne.n	800691e <HAL_I2C_Mem_Read+0x4e>
 800691a:	2302      	movs	r3, #2
 800691c:	e0ea      	b.n	8006af4 <HAL_I2C_Mem_Read+0x224>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006926:	f7fd ffcf 	bl	80048c8 <HAL_GetTick>
 800692a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	2319      	movs	r3, #25
 8006932:	2201      	movs	r2, #1
 8006934:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f000 f9bd 	bl	8006cb8 <I2C_WaitOnFlagUntilTimeout>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d001      	beq.n	8006948 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e0d5      	b.n	8006af4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2222      	movs	r2, #34	; 0x22
 800694c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2240      	movs	r2, #64	; 0x40
 8006954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6a3a      	ldr	r2, [r7, #32]
 8006962:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006968:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006970:	88f8      	ldrh	r0, [r7, #6]
 8006972:	893a      	ldrh	r2, [r7, #8]
 8006974:	8979      	ldrh	r1, [r7, #10]
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	9301      	str	r3, [sp, #4]
 800697a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	4603      	mov	r3, r0
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 f921 	bl	8006bc8 <I2C_RequestMemoryRead>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d005      	beq.n	8006998 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e0ad      	b.n	8006af4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800699c:	b29b      	uxth	r3, r3
 800699e:	2bff      	cmp	r3, #255	; 0xff
 80069a0:	d90e      	bls.n	80069c0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	22ff      	movs	r2, #255	; 0xff
 80069a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	8979      	ldrh	r1, [r7, #10]
 80069b0:	4b52      	ldr	r3, [pc, #328]	; (8006afc <HAL_I2C_Mem_Read+0x22c>)
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 fb19 	bl	8006ff0 <I2C_TransferConfig>
 80069be:	e00f      	b.n	80069e0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	8979      	ldrh	r1, [r7, #10]
 80069d2:	4b4a      	ldr	r3, [pc, #296]	; (8006afc <HAL_I2C_Mem_Read+0x22c>)
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f000 fb08 	bl	8006ff0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e6:	2200      	movs	r2, #0
 80069e8:	2104      	movs	r1, #4
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 f964 	bl	8006cb8 <I2C_WaitOnFlagUntilTimeout>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e07c      	b.n	8006af4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0c:	1c5a      	adds	r2, r3, #1
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	3b01      	subs	r3, #1
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d034      	beq.n	8006aa0 <HAL_I2C_Mem_Read+0x1d0>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d130      	bne.n	8006aa0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a44:	2200      	movs	r2, #0
 8006a46:	2180      	movs	r1, #128	; 0x80
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 f935 	bl	8006cb8 <I2C_WaitOnFlagUntilTimeout>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e04d      	b.n	8006af4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	2bff      	cmp	r3, #255	; 0xff
 8006a60:	d90e      	bls.n	8006a80 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	22ff      	movs	r2, #255	; 0xff
 8006a66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	8979      	ldrh	r1, [r7, #10]
 8006a70:	2300      	movs	r3, #0
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 fab9 	bl	8006ff0 <I2C_TransferConfig>
 8006a7e:	e00f      	b.n	8006aa0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	8979      	ldrh	r1, [r7, #10]
 8006a92:	2300      	movs	r3, #0
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f000 faa8 	bl	8006ff0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d19a      	bne.n	80069e0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 f982 	bl	8006db8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e01a      	b.n	8006af4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6859      	ldr	r1, [r3, #4]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	; (8006b00 <HAL_I2C_Mem_Read+0x230>)
 8006ad2:	400b      	ands	r3, r1
 8006ad4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2220      	movs	r2, #32
 8006ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	e000      	b.n	8006af4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006af2:	2302      	movs	r3, #2
  }
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3718      	adds	r7, #24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	80002400 	.word	0x80002400
 8006b00:	fe00e800 	.word	0xfe00e800

08006b04 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b12:	b2db      	uxtb	r3, r3
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b086      	sub	sp, #24
 8006b24:	af02      	add	r7, sp, #8
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	4608      	mov	r0, r1
 8006b2a:	4611      	mov	r1, r2
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	4603      	mov	r3, r0
 8006b30:	817b      	strh	r3, [r7, #10]
 8006b32:	460b      	mov	r3, r1
 8006b34:	813b      	strh	r3, [r7, #8]
 8006b36:	4613      	mov	r3, r2
 8006b38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006b3a:	88fb      	ldrh	r3, [r7, #6]
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	8979      	ldrh	r1, [r7, #10]
 8006b40:	4b20      	ldr	r3, [pc, #128]	; (8006bc4 <I2C_RequestMemoryWrite+0xa4>)
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f000 fa51 	bl	8006ff0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b4e:	69fa      	ldr	r2, [r7, #28]
 8006b50:	69b9      	ldr	r1, [r7, #24]
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f000 f8f0 	bl	8006d38 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e02c      	b.n	8006bbc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b62:	88fb      	ldrh	r3, [r7, #6]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d105      	bne.n	8006b74 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b68:	893b      	ldrh	r3, [r7, #8]
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	629a      	str	r2, [r3, #40]	; 0x28
 8006b72:	e015      	b.n	8006ba0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b74:	893b      	ldrh	r3, [r7, #8]
 8006b76:	0a1b      	lsrs	r3, r3, #8
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b82:	69fa      	ldr	r2, [r7, #28]
 8006b84:	69b9      	ldr	r1, [r7, #24]
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 f8d6 	bl	8006d38 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e012      	b.n	8006bbc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b96:	893b      	ldrh	r3, [r7, #8]
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	2180      	movs	r1, #128	; 0x80
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 f884 	bl	8006cb8 <I2C_WaitOnFlagUntilTimeout>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e000      	b.n	8006bbc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	80002000 	.word	0x80002000

08006bc8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af02      	add	r7, sp, #8
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	4608      	mov	r0, r1
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	817b      	strh	r3, [r7, #10]
 8006bda:	460b      	mov	r3, r1
 8006bdc:	813b      	strh	r3, [r7, #8]
 8006bde:	4613      	mov	r3, r2
 8006be0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006be2:	88fb      	ldrh	r3, [r7, #6]
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	8979      	ldrh	r1, [r7, #10]
 8006be8:	4b20      	ldr	r3, [pc, #128]	; (8006c6c <I2C_RequestMemoryRead+0xa4>)
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	2300      	movs	r3, #0
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f000 f9fe 	bl	8006ff0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bf4:	69fa      	ldr	r2, [r7, #28]
 8006bf6:	69b9      	ldr	r1, [r7, #24]
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 f89d 	bl	8006d38 <I2C_WaitOnTXISFlagUntilTimeout>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d001      	beq.n	8006c08 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e02c      	b.n	8006c62 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c08:	88fb      	ldrh	r3, [r7, #6]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d105      	bne.n	8006c1a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c0e:	893b      	ldrh	r3, [r7, #8]
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	629a      	str	r2, [r3, #40]	; 0x28
 8006c18:	e015      	b.n	8006c46 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c1a:	893b      	ldrh	r3, [r7, #8]
 8006c1c:	0a1b      	lsrs	r3, r3, #8
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c28:	69fa      	ldr	r2, [r7, #28]
 8006c2a:	69b9      	ldr	r1, [r7, #24]
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 f883 	bl	8006d38 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d001      	beq.n	8006c3c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e012      	b.n	8006c62 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c3c:	893b      	ldrh	r3, [r7, #8]
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	2140      	movs	r1, #64	; 0x40
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 f831 	bl	8006cb8 <I2C_WaitOnFlagUntilTimeout>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e000      	b.n	8006c62 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	80002000 	.word	0x80002000

08006c70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d103      	bne.n	8006c8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d007      	beq.n	8006cac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	699a      	ldr	r2, [r3, #24]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0201 	orr.w	r2, r2, #1
 8006caa:	619a      	str	r2, [r3, #24]
  }
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	603b      	str	r3, [r7, #0]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cc8:	e022      	b.n	8006d10 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd0:	d01e      	beq.n	8006d10 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cd2:	f7fd fdf9 	bl	80048c8 <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d302      	bcc.n	8006ce8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d113      	bne.n	8006d10 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cec:	f043 0220 	orr.w	r2, r3, #32
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e00f      	b.n	8006d30 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	699a      	ldr	r2, [r3, #24]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	4013      	ands	r3, r2
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	bf0c      	ite	eq
 8006d20:	2301      	moveq	r3, #1
 8006d22:	2300      	movne	r3, #0
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	461a      	mov	r2, r3
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d0cd      	beq.n	8006cca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d44:	e02c      	b.n	8006da0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	68b9      	ldr	r1, [r7, #8]
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 f870 	bl	8006e30 <I2C_IsErrorOccurred>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e02a      	b.n	8006db0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d60:	d01e      	beq.n	8006da0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d62:	f7fd fdb1 	bl	80048c8 <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d302      	bcc.n	8006d78 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d113      	bne.n	8006da0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d7c:	f043 0220 	orr.w	r2, r3, #32
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2220      	movs	r2, #32
 8006d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e007      	b.n	8006db0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d1cb      	bne.n	8006d46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006dc4:	e028      	b.n	8006e18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	68b9      	ldr	r1, [r7, #8]
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 f830 	bl	8006e30 <I2C_IsErrorOccurred>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e026      	b.n	8006e28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dda:	f7fd fd75 	bl	80048c8 <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d302      	bcc.n	8006df0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d113      	bne.n	8006e18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df4:	f043 0220 	orr.w	r2, r3, #32
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2220      	movs	r2, #32
 8006e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e007      	b.n	8006e28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b20      	cmp	r3, #32
 8006e24:	d1cf      	bne.n	8006dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b08a      	sub	sp, #40	; 0x28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	f003 0310 	and.w	r3, r3, #16
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d068      	beq.n	8006f2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2210      	movs	r2, #16
 8006e62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006e64:	e049      	b.n	8006efa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6c:	d045      	beq.n	8006efa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006e6e:	f7fd fd2b 	bl	80048c8 <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d302      	bcc.n	8006e84 <I2C_IsErrorOccurred+0x54>
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d13a      	bne.n	8006efa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ea6:	d121      	bne.n	8006eec <I2C_IsErrorOccurred+0xbc>
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eae:	d01d      	beq.n	8006eec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006eb0:	7cfb      	ldrb	r3, [r7, #19]
 8006eb2:	2b20      	cmp	r3, #32
 8006eb4:	d01a      	beq.n	8006eec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ec4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006ec6:	f7fd fcff 	bl	80048c8 <HAL_GetTick>
 8006eca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ecc:	e00e      	b.n	8006eec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006ece:	f7fd fcfb 	bl	80048c8 <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	2b19      	cmp	r3, #25
 8006eda:	d907      	bls.n	8006eec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	f043 0320 	orr.w	r3, r3, #32
 8006ee2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006eea:	e006      	b.n	8006efa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	f003 0320 	and.w	r3, r3, #32
 8006ef6:	2b20      	cmp	r3, #32
 8006ef8:	d1e9      	bne.n	8006ece <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	f003 0320 	and.w	r3, r3, #32
 8006f04:	2b20      	cmp	r3, #32
 8006f06:	d003      	beq.n	8006f10 <I2C_IsErrorOccurred+0xe0>
 8006f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0aa      	beq.n	8006e66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d103      	bne.n	8006f20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	f043 0304 	orr.w	r3, r3, #4
 8006f26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00b      	beq.n	8006f58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006f40:	6a3b      	ldr	r3, [r7, #32]
 8006f42:	f043 0301 	orr.w	r3, r3, #1
 8006f46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00b      	beq.n	8006f7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006f62:	6a3b      	ldr	r3, [r7, #32]
 8006f64:	f043 0308 	orr.w	r3, r3, #8
 8006f68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00b      	beq.n	8006f9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	f043 0302 	orr.w	r3, r3, #2
 8006f8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d01c      	beq.n	8006fde <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f7ff fe63 	bl	8006c70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	6859      	ldr	r1, [r3, #4]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	4b0d      	ldr	r3, [pc, #52]	; (8006fec <I2C_IsErrorOccurred+0x1bc>)
 8006fb6:	400b      	ands	r3, r1
 8006fb8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	431a      	orrs	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2220      	movs	r2, #32
 8006fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006fde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3728      	adds	r7, #40	; 0x28
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	fe00e800 	.word	0xfe00e800

08006ff0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b087      	sub	sp, #28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	607b      	str	r3, [r7, #4]
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	817b      	strh	r3, [r7, #10]
 8006ffe:	4613      	mov	r3, r2
 8007000:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007002:	897b      	ldrh	r3, [r7, #10]
 8007004:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007008:	7a7b      	ldrb	r3, [r7, #9]
 800700a:	041b      	lsls	r3, r3, #16
 800700c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007010:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	4313      	orrs	r3, r2
 800701a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800701e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	0d5b      	lsrs	r3, r3, #21
 800702a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800702e:	4b08      	ldr	r3, [pc, #32]	; (8007050 <I2C_TransferConfig+0x60>)
 8007030:	430b      	orrs	r3, r1
 8007032:	43db      	mvns	r3, r3
 8007034:	ea02 0103 	and.w	r1, r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	430a      	orrs	r2, r1
 8007040:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007042:	bf00      	nop
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	03ff63ff 	.word	0x03ff63ff

08007054 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007064:	b2db      	uxtb	r3, r3
 8007066:	2b20      	cmp	r3, #32
 8007068:	d138      	bne.n	80070dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007070:	2b01      	cmp	r3, #1
 8007072:	d101      	bne.n	8007078 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007074:	2302      	movs	r3, #2
 8007076:	e032      	b.n	80070de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2224      	movs	r2, #36	; 0x24
 8007084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f022 0201 	bic.w	r2, r2, #1
 8007096:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6819      	ldr	r1, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	430a      	orrs	r2, r1
 80070b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f042 0201 	orr.w	r2, r2, #1
 80070c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2220      	movs	r2, #32
 80070cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	e000      	b.n	80070de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80070dc:	2302      	movs	r3, #2
  }
}
 80070de:	4618      	mov	r0, r3
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80070ea:	b480      	push	{r7}
 80070ec:	b085      	sub	sp, #20
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b20      	cmp	r3, #32
 80070fe:	d139      	bne.n	8007174 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007106:	2b01      	cmp	r3, #1
 8007108:	d101      	bne.n	800710e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800710a:	2302      	movs	r3, #2
 800710c:	e033      	b.n	8007176 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2224      	movs	r2, #36	; 0x24
 800711a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f022 0201 	bic.w	r2, r2, #1
 800712c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800713c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	021b      	lsls	r3, r3, #8
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	4313      	orrs	r3, r2
 8007146:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f042 0201 	orr.w	r2, r2, #1
 800715e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2220      	movs	r2, #32
 8007164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007170:	2300      	movs	r3, #0
 8007172:	e000      	b.n	8007176 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007174:	2302      	movs	r3, #2
  }
}
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
	...

08007184 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e0bf      	b.n	8007316 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d106      	bne.n	80071b0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7fa fc4a 	bl	8001a44 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2202      	movs	r2, #2
 80071b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	699a      	ldr	r2, [r3, #24]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80071c6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6999      	ldr	r1, [r3, #24]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80071dc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	430a      	orrs	r2, r1
 80071ea:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6899      	ldr	r1, [r3, #8]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	4b4a      	ldr	r3, [pc, #296]	; (8007320 <HAL_LTDC_Init+0x19c>)
 80071f8:	400b      	ands	r3, r1
 80071fa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	041b      	lsls	r3, r3, #16
 8007202:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6899      	ldr	r1, [r3, #8]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	699a      	ldr	r2, [r3, #24]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	431a      	orrs	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68d9      	ldr	r1, [r3, #12]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	4b3e      	ldr	r3, [pc, #248]	; (8007320 <HAL_LTDC_Init+0x19c>)
 8007226:	400b      	ands	r3, r1
 8007228:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	041b      	lsls	r3, r3, #16
 8007230:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68d9      	ldr	r1, [r3, #12]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a1a      	ldr	r2, [r3, #32]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	431a      	orrs	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	430a      	orrs	r2, r1
 8007246:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6919      	ldr	r1, [r3, #16]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	4b33      	ldr	r3, [pc, #204]	; (8007320 <HAL_LTDC_Init+0x19c>)
 8007254:	400b      	ands	r3, r1
 8007256:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725c:	041b      	lsls	r3, r3, #16
 800725e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6919      	ldr	r1, [r3, #16]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	431a      	orrs	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	430a      	orrs	r2, r1
 8007274:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	6959      	ldr	r1, [r3, #20]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	4b27      	ldr	r3, [pc, #156]	; (8007320 <HAL_LTDC_Init+0x19c>)
 8007282:	400b      	ands	r3, r1
 8007284:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728a:	041b      	lsls	r3, r3, #16
 800728c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	6959      	ldr	r1, [r3, #20]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	431a      	orrs	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072aa:	021b      	lsls	r3, r3, #8
 80072ac:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80072b4:	041b      	lsls	r3, r3, #16
 80072b6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80072c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80072da:	431a      	orrs	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	430a      	orrs	r2, r1
 80072e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f042 0206 	orr.w	r2, r2, #6
 80072f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699a      	ldr	r2, [r3, #24]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f042 0201 	orr.w	r2, r2, #1
 8007302:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	f000f800 	.word	0xf000f800

08007324 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007332:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f003 0304 	and.w	r3, r3, #4
 8007342:	2b00      	cmp	r3, #0
 8007344:	d023      	beq.n	800738e <HAL_LTDC_IRQHandler+0x6a>
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	f003 0304 	and.w	r3, r3, #4
 800734c:	2b00      	cmp	r3, #0
 800734e:	d01e      	beq.n	800738e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f022 0204 	bic.w	r2, r2, #4
 800735e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2204      	movs	r2, #4
 8007366:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800736e:	f043 0201 	orr.w	r2, r3, #1
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2204      	movs	r2, #4
 800737c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f86f 	bl	800746c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f003 0302 	and.w	r3, r3, #2
 8007394:	2b00      	cmp	r3, #0
 8007396:	d023      	beq.n	80073e0 <HAL_LTDC_IRQHandler+0xbc>
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f003 0302 	and.w	r3, r3, #2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d01e      	beq.n	80073e0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f022 0202 	bic.w	r2, r2, #2
 80073b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2202      	movs	r2, #2
 80073b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80073c0:	f043 0202 	orr.w	r2, r3, #2
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2204      	movs	r2, #4
 80073ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f846 	bl	800746c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d01b      	beq.n	8007422 <HAL_LTDC_IRQHandler+0xfe>
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	f003 0301 	and.w	r3, r3, #1
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d016      	beq.n	8007422 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 0201 	bic.w	r2, r2, #1
 8007402:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2201      	movs	r2, #1
 800740a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f82f 	bl	8007480 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f003 0308 	and.w	r3, r3, #8
 8007428:	2b00      	cmp	r3, #0
 800742a:	d01b      	beq.n	8007464 <HAL_LTDC_IRQHandler+0x140>
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	f003 0308 	and.w	r3, r3, #8
 8007432:	2b00      	cmp	r3, #0
 8007434:	d016      	beq.n	8007464 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f022 0208 	bic.w	r2, r2, #8
 8007444:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2208      	movs	r2, #8
 800744c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f818 	bl	8007494 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007464:	bf00      	nop
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80074a8:	b5b0      	push	{r4, r5, r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d101      	bne.n	80074c2 <HAL_LTDC_ConfigLayer+0x1a>
 80074be:	2302      	movs	r3, #2
 80074c0:	e02c      	b.n	800751c <HAL_LTDC_ConfigLayer+0x74>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2202      	movs	r2, #2
 80074ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2134      	movs	r1, #52	; 0x34
 80074d8:	fb01 f303 	mul.w	r3, r1, r3
 80074dc:	4413      	add	r3, r2
 80074de:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	4614      	mov	r4, r2
 80074e6:	461d      	mov	r5, r3
 80074e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074f4:	682b      	ldr	r3, [r5, #0]
 80074f6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	68b9      	ldr	r1, [r7, #8]
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 f81f 	bl	8007540 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2201      	movs	r2, #1
 8007508:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bdb0      	pop	{r4, r5, r7, pc}

08007524 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007532:	b2db      	uxtb	r3, r3
}
 8007534:	4618      	mov	r0, r3
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007540:	b480      	push	{r7}
 8007542:	b089      	sub	sp, #36	; 0x24
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	0c1b      	lsrs	r3, r3, #16
 8007558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800755c:	4413      	add	r3, r2
 800755e:	041b      	lsls	r3, r3, #16
 8007560:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	461a      	mov	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	01db      	lsls	r3, r3, #7
 800756c:	4413      	add	r3, r2
 800756e:	3384      	adds	r3, #132	; 0x84
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	6812      	ldr	r2, [r2, #0]
 8007576:	4611      	mov	r1, r2
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	01d2      	lsls	r2, r2, #7
 800757c:	440a      	add	r2, r1
 800757e:	3284      	adds	r2, #132	; 0x84
 8007580:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007584:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	0c1b      	lsrs	r3, r3, #16
 8007592:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007596:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007598:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4619      	mov	r1, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	01db      	lsls	r3, r3, #7
 80075a4:	440b      	add	r3, r1
 80075a6:	3384      	adds	r3, #132	; 0x84
 80075a8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80075ae:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	68da      	ldr	r2, [r3, #12]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075be:	4413      	add	r3, r2
 80075c0:	041b      	lsls	r3, r3, #16
 80075c2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	461a      	mov	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	01db      	lsls	r3, r3, #7
 80075ce:	4413      	add	r3, r2
 80075d0:	3384      	adds	r3, #132	; 0x84
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	6812      	ldr	r2, [r2, #0]
 80075d8:	4611      	mov	r1, r2
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	01d2      	lsls	r2, r2, #7
 80075de:	440a      	add	r2, r1
 80075e0:	3284      	adds	r2, #132	; 0x84
 80075e2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80075e6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	689a      	ldr	r2, [r3, #8]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075f6:	4413      	add	r3, r2
 80075f8:	1c5a      	adds	r2, r3, #1
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4619      	mov	r1, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	01db      	lsls	r3, r3, #7
 8007604:	440b      	add	r3, r1
 8007606:	3384      	adds	r3, #132	; 0x84
 8007608:	4619      	mov	r1, r3
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	4313      	orrs	r3, r2
 800760e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	461a      	mov	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	01db      	lsls	r3, r3, #7
 800761a:	4413      	add	r3, r2
 800761c:	3384      	adds	r3, #132	; 0x84
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	6812      	ldr	r2, [r2, #0]
 8007624:	4611      	mov	r1, r2
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	01d2      	lsls	r2, r2, #7
 800762a:	440a      	add	r2, r1
 800762c:	3284      	adds	r2, #132	; 0x84
 800762e:	f023 0307 	bic.w	r3, r3, #7
 8007632:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	461a      	mov	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	01db      	lsls	r3, r3, #7
 800763e:	4413      	add	r3, r2
 8007640:	3384      	adds	r3, #132	; 0x84
 8007642:	461a      	mov	r2, r3
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007650:	021b      	lsls	r3, r3, #8
 8007652:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800765a:	041b      	lsls	r3, r3, #16
 800765c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	061b      	lsls	r3, r3, #24
 8007664:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	461a      	mov	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	01db      	lsls	r3, r3, #7
 8007670:	4413      	add	r3, r2
 8007672:	3384      	adds	r3, #132	; 0x84
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	01db      	lsls	r3, r3, #7
 8007680:	4413      	add	r3, r2
 8007682:	3384      	adds	r3, #132	; 0x84
 8007684:	461a      	mov	r2, r3
 8007686:	2300      	movs	r3, #0
 8007688:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007690:	461a      	mov	r2, r3
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	431a      	orrs	r2, r3
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	431a      	orrs	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4619      	mov	r1, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	01db      	lsls	r3, r3, #7
 80076a4:	440b      	add	r3, r1
 80076a6:	3384      	adds	r3, #132	; 0x84
 80076a8:	4619      	mov	r1, r3
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	461a      	mov	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	01db      	lsls	r3, r3, #7
 80076ba:	4413      	add	r3, r2
 80076bc:	3384      	adds	r3, #132	; 0x84
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	6812      	ldr	r2, [r2, #0]
 80076c4:	4611      	mov	r1, r2
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	01d2      	lsls	r2, r2, #7
 80076ca:	440a      	add	r2, r1
 80076cc:	3284      	adds	r2, #132	; 0x84
 80076ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80076d2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	461a      	mov	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	01db      	lsls	r3, r3, #7
 80076de:	4413      	add	r3, r2
 80076e0:	3384      	adds	r3, #132	; 0x84
 80076e2:	461a      	mov	r2, r3
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	695b      	ldr	r3, [r3, #20]
 80076e8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	461a      	mov	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	01db      	lsls	r3, r3, #7
 80076f4:	4413      	add	r3, r2
 80076f6:	3384      	adds	r3, #132	; 0x84
 80076f8:	69da      	ldr	r2, [r3, #28]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4619      	mov	r1, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	01db      	lsls	r3, r3, #7
 8007704:	440b      	add	r3, r1
 8007706:	3384      	adds	r3, #132	; 0x84
 8007708:	4619      	mov	r1, r3
 800770a:	4b58      	ldr	r3, [pc, #352]	; (800786c <LTDC_SetConfig+0x32c>)
 800770c:	4013      	ands	r3, r2
 800770e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	69da      	ldr	r2, [r3, #28]
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	6a1b      	ldr	r3, [r3, #32]
 8007718:	68f9      	ldr	r1, [r7, #12]
 800771a:	6809      	ldr	r1, [r1, #0]
 800771c:	4608      	mov	r0, r1
 800771e:	6879      	ldr	r1, [r7, #4]
 8007720:	01c9      	lsls	r1, r1, #7
 8007722:	4401      	add	r1, r0
 8007724:	3184      	adds	r1, #132	; 0x84
 8007726:	4313      	orrs	r3, r2
 8007728:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	461a      	mov	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	01db      	lsls	r3, r3, #7
 8007734:	4413      	add	r3, r2
 8007736:	3384      	adds	r3, #132	; 0x84
 8007738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	461a      	mov	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	01db      	lsls	r3, r3, #7
 8007744:	4413      	add	r3, r2
 8007746:	3384      	adds	r3, #132	; 0x84
 8007748:	461a      	mov	r2, r3
 800774a:	2300      	movs	r3, #0
 800774c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	01db      	lsls	r3, r3, #7
 8007758:	4413      	add	r3, r2
 800775a:	3384      	adds	r3, #132	; 0x84
 800775c:	461a      	mov	r2, r3
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007762:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d102      	bne.n	8007772 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800776c:	2304      	movs	r3, #4
 800776e:	61fb      	str	r3, [r7, #28]
 8007770:	e01b      	b.n	80077aa <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d102      	bne.n	8007780 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800777a:	2303      	movs	r3, #3
 800777c:	61fb      	str	r3, [r7, #28]
 800777e:	e014      	b.n	80077aa <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	2b04      	cmp	r3, #4
 8007786:	d00b      	beq.n	80077a0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800778c:	2b02      	cmp	r3, #2
 800778e:	d007      	beq.n	80077a0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007794:	2b03      	cmp	r3, #3
 8007796:	d003      	beq.n	80077a0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800779c:	2b07      	cmp	r3, #7
 800779e:	d102      	bne.n	80077a6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80077a0:	2302      	movs	r3, #2
 80077a2:	61fb      	str	r3, [r7, #28]
 80077a4:	e001      	b.n	80077aa <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80077a6:	2301      	movs	r3, #1
 80077a8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	461a      	mov	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	01db      	lsls	r3, r3, #7
 80077b4:	4413      	add	r3, r2
 80077b6:	3384      	adds	r3, #132	; 0x84
 80077b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	6812      	ldr	r2, [r2, #0]
 80077be:	4611      	mov	r1, r2
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	01d2      	lsls	r2, r2, #7
 80077c4:	440a      	add	r2, r1
 80077c6:	3284      	adds	r2, #132	; 0x84
 80077c8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80077cc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d2:	69fa      	ldr	r2, [r7, #28]
 80077d4:	fb02 f303 	mul.w	r3, r2, r3
 80077d8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	6859      	ldr	r1, [r3, #4]
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	1acb      	subs	r3, r1, r3
 80077e4:	69f9      	ldr	r1, [r7, #28]
 80077e6:	fb01 f303 	mul.w	r3, r1, r3
 80077ea:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80077ec:	68f9      	ldr	r1, [r7, #12]
 80077ee:	6809      	ldr	r1, [r1, #0]
 80077f0:	4608      	mov	r0, r1
 80077f2:	6879      	ldr	r1, [r7, #4]
 80077f4:	01c9      	lsls	r1, r1, #7
 80077f6:	4401      	add	r1, r0
 80077f8:	3184      	adds	r1, #132	; 0x84
 80077fa:	4313      	orrs	r3, r2
 80077fc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	461a      	mov	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	01db      	lsls	r3, r3, #7
 8007808:	4413      	add	r3, r2
 800780a:	3384      	adds	r3, #132	; 0x84
 800780c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4619      	mov	r1, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	01db      	lsls	r3, r3, #7
 8007818:	440b      	add	r3, r1
 800781a:	3384      	adds	r3, #132	; 0x84
 800781c:	4619      	mov	r1, r3
 800781e:	4b14      	ldr	r3, [pc, #80]	; (8007870 <LTDC_SetConfig+0x330>)
 8007820:	4013      	ands	r3, r2
 8007822:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	461a      	mov	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	01db      	lsls	r3, r3, #7
 800782e:	4413      	add	r3, r2
 8007830:	3384      	adds	r3, #132	; 0x84
 8007832:	461a      	mov	r2, r3
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007838:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	461a      	mov	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	01db      	lsls	r3, r3, #7
 8007844:	4413      	add	r3, r2
 8007846:	3384      	adds	r3, #132	; 0x84
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	6812      	ldr	r2, [r2, #0]
 800784e:	4611      	mov	r1, r2
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	01d2      	lsls	r2, r2, #7
 8007854:	440a      	add	r2, r1
 8007856:	3284      	adds	r2, #132	; 0x84
 8007858:	f043 0301 	orr.w	r3, r3, #1
 800785c:	6013      	str	r3, [r2, #0]
}
 800785e:	bf00      	nop
 8007860:	3724      	adds	r7, #36	; 0x24
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	fffff8f8 	.word	0xfffff8f8
 8007870:	fffff800 	.word	0xfffff800

08007874 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007874:	b480      	push	{r7}
 8007876:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007878:	4b05      	ldr	r3, [pc, #20]	; (8007890 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a04      	ldr	r2, [pc, #16]	; (8007890 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800787e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007882:	6013      	str	r3, [r2, #0]
}
 8007884:	bf00      	nop
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	40007000 	.word	0x40007000

08007894 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800789a:	2300      	movs	r3, #0
 800789c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800789e:	4b23      	ldr	r3, [pc, #140]	; (800792c <HAL_PWREx_EnableOverDrive+0x98>)
 80078a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a2:	4a22      	ldr	r2, [pc, #136]	; (800792c <HAL_PWREx_EnableOverDrive+0x98>)
 80078a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078a8:	6413      	str	r3, [r2, #64]	; 0x40
 80078aa:	4b20      	ldr	r3, [pc, #128]	; (800792c <HAL_PWREx_EnableOverDrive+0x98>)
 80078ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078b2:	603b      	str	r3, [r7, #0]
 80078b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80078b6:	4b1e      	ldr	r3, [pc, #120]	; (8007930 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a1d      	ldr	r2, [pc, #116]	; (8007930 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078c0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078c2:	f7fd f801 	bl	80048c8 <HAL_GetTick>
 80078c6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80078c8:	e009      	b.n	80078de <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80078ca:	f7fc fffd 	bl	80048c8 <HAL_GetTick>
 80078ce:	4602      	mov	r2, r0
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078d8:	d901      	bls.n	80078de <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e022      	b.n	8007924 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80078de:	4b14      	ldr	r3, [pc, #80]	; (8007930 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ea:	d1ee      	bne.n	80078ca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80078ec:	4b10      	ldr	r3, [pc, #64]	; (8007930 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a0f      	ldr	r2, [pc, #60]	; (8007930 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078f8:	f7fc ffe6 	bl	80048c8 <HAL_GetTick>
 80078fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80078fe:	e009      	b.n	8007914 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007900:	f7fc ffe2 	bl	80048c8 <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800790e:	d901      	bls.n	8007914 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e007      	b.n	8007924 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007914:	4b06      	ldr	r3, [pc, #24]	; (8007930 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800791c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007920:	d1ee      	bne.n	8007900 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	40023800 	.word	0x40023800
 8007930:	40007000 	.word	0x40007000

08007934 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b086      	sub	sp, #24
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800793c:	2300      	movs	r3, #0
 800793e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d101      	bne.n	800794a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e291      	b.n	8007e6e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 8087 	beq.w	8007a66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007958:	4b96      	ldr	r3, [pc, #600]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f003 030c 	and.w	r3, r3, #12
 8007960:	2b04      	cmp	r3, #4
 8007962:	d00c      	beq.n	800797e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007964:	4b93      	ldr	r3, [pc, #588]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f003 030c 	and.w	r3, r3, #12
 800796c:	2b08      	cmp	r3, #8
 800796e:	d112      	bne.n	8007996 <HAL_RCC_OscConfig+0x62>
 8007970:	4b90      	ldr	r3, [pc, #576]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007978:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800797c:	d10b      	bne.n	8007996 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800797e:	4b8d      	ldr	r3, [pc, #564]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007986:	2b00      	cmp	r3, #0
 8007988:	d06c      	beq.n	8007a64 <HAL_RCC_OscConfig+0x130>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d168      	bne.n	8007a64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e26b      	b.n	8007e6e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800799e:	d106      	bne.n	80079ae <HAL_RCC_OscConfig+0x7a>
 80079a0:	4b84      	ldr	r3, [pc, #528]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a83      	ldr	r2, [pc, #524]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 80079a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079aa:	6013      	str	r3, [r2, #0]
 80079ac:	e02e      	b.n	8007a0c <HAL_RCC_OscConfig+0xd8>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10c      	bne.n	80079d0 <HAL_RCC_OscConfig+0x9c>
 80079b6:	4b7f      	ldr	r3, [pc, #508]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a7e      	ldr	r2, [pc, #504]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 80079bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079c0:	6013      	str	r3, [r2, #0]
 80079c2:	4b7c      	ldr	r3, [pc, #496]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a7b      	ldr	r2, [pc, #492]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 80079c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079cc:	6013      	str	r3, [r2, #0]
 80079ce:	e01d      	b.n	8007a0c <HAL_RCC_OscConfig+0xd8>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079d8:	d10c      	bne.n	80079f4 <HAL_RCC_OscConfig+0xc0>
 80079da:	4b76      	ldr	r3, [pc, #472]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a75      	ldr	r2, [pc, #468]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 80079e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079e4:	6013      	str	r3, [r2, #0]
 80079e6:	4b73      	ldr	r3, [pc, #460]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a72      	ldr	r2, [pc, #456]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 80079ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079f0:	6013      	str	r3, [r2, #0]
 80079f2:	e00b      	b.n	8007a0c <HAL_RCC_OscConfig+0xd8>
 80079f4:	4b6f      	ldr	r3, [pc, #444]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a6e      	ldr	r2, [pc, #440]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 80079fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079fe:	6013      	str	r3, [r2, #0]
 8007a00:	4b6c      	ldr	r3, [pc, #432]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a6b      	ldr	r2, [pc, #428]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d013      	beq.n	8007a3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a14:	f7fc ff58 	bl	80048c8 <HAL_GetTick>
 8007a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a1a:	e008      	b.n	8007a2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a1c:	f7fc ff54 	bl	80048c8 <HAL_GetTick>
 8007a20:	4602      	mov	r2, r0
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	2b64      	cmp	r3, #100	; 0x64
 8007a28:	d901      	bls.n	8007a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e21f      	b.n	8007e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a2e:	4b61      	ldr	r3, [pc, #388]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d0f0      	beq.n	8007a1c <HAL_RCC_OscConfig+0xe8>
 8007a3a:	e014      	b.n	8007a66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a3c:	f7fc ff44 	bl	80048c8 <HAL_GetTick>
 8007a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a42:	e008      	b.n	8007a56 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a44:	f7fc ff40 	bl	80048c8 <HAL_GetTick>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	2b64      	cmp	r3, #100	; 0x64
 8007a50:	d901      	bls.n	8007a56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e20b      	b.n	8007e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a56:	4b57      	ldr	r3, [pc, #348]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1f0      	bne.n	8007a44 <HAL_RCC_OscConfig+0x110>
 8007a62:	e000      	b.n	8007a66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0302 	and.w	r3, r3, #2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d069      	beq.n	8007b46 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a72:	4b50      	ldr	r3, [pc, #320]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	f003 030c 	and.w	r3, r3, #12
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00b      	beq.n	8007a96 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a7e:	4b4d      	ldr	r3, [pc, #308]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	f003 030c 	and.w	r3, r3, #12
 8007a86:	2b08      	cmp	r3, #8
 8007a88:	d11c      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x190>
 8007a8a:	4b4a      	ldr	r3, [pc, #296]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d116      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a96:	4b47      	ldr	r3, [pc, #284]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d005      	beq.n	8007aae <HAL_RCC_OscConfig+0x17a>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d001      	beq.n	8007aae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e1df      	b.n	8007e6e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007aae:	4b41      	ldr	r3, [pc, #260]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	00db      	lsls	r3, r3, #3
 8007abc:	493d      	ldr	r1, [pc, #244]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ac2:	e040      	b.n	8007b46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d023      	beq.n	8007b14 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007acc:	4b39      	ldr	r3, [pc, #228]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a38      	ldr	r2, [pc, #224]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007ad2:	f043 0301 	orr.w	r3, r3, #1
 8007ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad8:	f7fc fef6 	bl	80048c8 <HAL_GetTick>
 8007adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ade:	e008      	b.n	8007af2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ae0:	f7fc fef2 	bl	80048c8 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d901      	bls.n	8007af2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e1bd      	b.n	8007e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007af2:	4b30      	ldr	r3, [pc, #192]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0302 	and.w	r3, r3, #2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d0f0      	beq.n	8007ae0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007afe:	4b2d      	ldr	r3, [pc, #180]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	00db      	lsls	r3, r3, #3
 8007b0c:	4929      	ldr	r1, [pc, #164]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	600b      	str	r3, [r1, #0]
 8007b12:	e018      	b.n	8007b46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b14:	4b27      	ldr	r3, [pc, #156]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a26      	ldr	r2, [pc, #152]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007b1a:	f023 0301 	bic.w	r3, r3, #1
 8007b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b20:	f7fc fed2 	bl	80048c8 <HAL_GetTick>
 8007b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b26:	e008      	b.n	8007b3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b28:	f7fc fece 	bl	80048c8 <HAL_GetTick>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d901      	bls.n	8007b3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e199      	b.n	8007e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b3a:	4b1e      	ldr	r3, [pc, #120]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0302 	and.w	r3, r3, #2
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1f0      	bne.n	8007b28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0308 	and.w	r3, r3, #8
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d038      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d019      	beq.n	8007b8e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b5a:	4b16      	ldr	r3, [pc, #88]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b5e:	4a15      	ldr	r2, [pc, #84]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007b60:	f043 0301 	orr.w	r3, r3, #1
 8007b64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b66:	f7fc feaf 	bl	80048c8 <HAL_GetTick>
 8007b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b6c:	e008      	b.n	8007b80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b6e:	f7fc feab 	bl	80048c8 <HAL_GetTick>
 8007b72:	4602      	mov	r2, r0
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d901      	bls.n	8007b80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e176      	b.n	8007e6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b80:	4b0c      	ldr	r3, [pc, #48]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d0f0      	beq.n	8007b6e <HAL_RCC_OscConfig+0x23a>
 8007b8c:	e01a      	b.n	8007bc4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b8e:	4b09      	ldr	r3, [pc, #36]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b92:	4a08      	ldr	r2, [pc, #32]	; (8007bb4 <HAL_RCC_OscConfig+0x280>)
 8007b94:	f023 0301 	bic.w	r3, r3, #1
 8007b98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b9a:	f7fc fe95 	bl	80048c8 <HAL_GetTick>
 8007b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ba0:	e00a      	b.n	8007bb8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ba2:	f7fc fe91 	bl	80048c8 <HAL_GetTick>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d903      	bls.n	8007bb8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e15c      	b.n	8007e6e <HAL_RCC_OscConfig+0x53a>
 8007bb4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bb8:	4b91      	ldr	r3, [pc, #580]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bbc:	f003 0302 	and.w	r3, r3, #2
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1ee      	bne.n	8007ba2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0304 	and.w	r3, r3, #4
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f000 80a4 	beq.w	8007d1a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bd2:	4b8b      	ldr	r3, [pc, #556]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10d      	bne.n	8007bfa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bde:	4b88      	ldr	r3, [pc, #544]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be2:	4a87      	ldr	r2, [pc, #540]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007be8:	6413      	str	r3, [r2, #64]	; 0x40
 8007bea:	4b85      	ldr	r3, [pc, #532]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bf2:	60bb      	str	r3, [r7, #8]
 8007bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bfa:	4b82      	ldr	r3, [pc, #520]	; (8007e04 <HAL_RCC_OscConfig+0x4d0>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d118      	bne.n	8007c38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007c06:	4b7f      	ldr	r3, [pc, #508]	; (8007e04 <HAL_RCC_OscConfig+0x4d0>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a7e      	ldr	r2, [pc, #504]	; (8007e04 <HAL_RCC_OscConfig+0x4d0>)
 8007c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c12:	f7fc fe59 	bl	80048c8 <HAL_GetTick>
 8007c16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c18:	e008      	b.n	8007c2c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c1a:	f7fc fe55 	bl	80048c8 <HAL_GetTick>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	2b64      	cmp	r3, #100	; 0x64
 8007c26:	d901      	bls.n	8007c2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e120      	b.n	8007e6e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c2c:	4b75      	ldr	r3, [pc, #468]	; (8007e04 <HAL_RCC_OscConfig+0x4d0>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d0f0      	beq.n	8007c1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d106      	bne.n	8007c4e <HAL_RCC_OscConfig+0x31a>
 8007c40:	4b6f      	ldr	r3, [pc, #444]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c44:	4a6e      	ldr	r2, [pc, #440]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007c46:	f043 0301 	orr.w	r3, r3, #1
 8007c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8007c4c:	e02d      	b.n	8007caa <HAL_RCC_OscConfig+0x376>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10c      	bne.n	8007c70 <HAL_RCC_OscConfig+0x33c>
 8007c56:	4b6a      	ldr	r3, [pc, #424]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c5a:	4a69      	ldr	r2, [pc, #420]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007c5c:	f023 0301 	bic.w	r3, r3, #1
 8007c60:	6713      	str	r3, [r2, #112]	; 0x70
 8007c62:	4b67      	ldr	r3, [pc, #412]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c66:	4a66      	ldr	r2, [pc, #408]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007c68:	f023 0304 	bic.w	r3, r3, #4
 8007c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8007c6e:	e01c      	b.n	8007caa <HAL_RCC_OscConfig+0x376>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	2b05      	cmp	r3, #5
 8007c76:	d10c      	bne.n	8007c92 <HAL_RCC_OscConfig+0x35e>
 8007c78:	4b61      	ldr	r3, [pc, #388]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c7c:	4a60      	ldr	r2, [pc, #384]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007c7e:	f043 0304 	orr.w	r3, r3, #4
 8007c82:	6713      	str	r3, [r2, #112]	; 0x70
 8007c84:	4b5e      	ldr	r3, [pc, #376]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c88:	4a5d      	ldr	r2, [pc, #372]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007c8a:	f043 0301 	orr.w	r3, r3, #1
 8007c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8007c90:	e00b      	b.n	8007caa <HAL_RCC_OscConfig+0x376>
 8007c92:	4b5b      	ldr	r3, [pc, #364]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c96:	4a5a      	ldr	r2, [pc, #360]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007c98:	f023 0301 	bic.w	r3, r3, #1
 8007c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8007c9e:	4b58      	ldr	r3, [pc, #352]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca2:	4a57      	ldr	r2, [pc, #348]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007ca4:	f023 0304 	bic.w	r3, r3, #4
 8007ca8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d015      	beq.n	8007cde <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cb2:	f7fc fe09 	bl	80048c8 <HAL_GetTick>
 8007cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cb8:	e00a      	b.n	8007cd0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cba:	f7fc fe05 	bl	80048c8 <HAL_GetTick>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d901      	bls.n	8007cd0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	e0ce      	b.n	8007e6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cd0:	4b4b      	ldr	r3, [pc, #300]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd4:	f003 0302 	and.w	r3, r3, #2
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d0ee      	beq.n	8007cba <HAL_RCC_OscConfig+0x386>
 8007cdc:	e014      	b.n	8007d08 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cde:	f7fc fdf3 	bl	80048c8 <HAL_GetTick>
 8007ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ce4:	e00a      	b.n	8007cfc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ce6:	f7fc fdef 	bl	80048c8 <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d901      	bls.n	8007cfc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e0b8      	b.n	8007e6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cfc:	4b40      	ldr	r3, [pc, #256]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d00:	f003 0302 	and.w	r3, r3, #2
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1ee      	bne.n	8007ce6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d08:	7dfb      	ldrb	r3, [r7, #23]
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d105      	bne.n	8007d1a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d0e:	4b3c      	ldr	r3, [pc, #240]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d12:	4a3b      	ldr	r2, [pc, #236]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f000 80a4 	beq.w	8007e6c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d24:	4b36      	ldr	r3, [pc, #216]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	f003 030c 	and.w	r3, r3, #12
 8007d2c:	2b08      	cmp	r3, #8
 8007d2e:	d06b      	beq.n	8007e08 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d149      	bne.n	8007dcc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d38:	4b31      	ldr	r3, [pc, #196]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a30      	ldr	r2, [pc, #192]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d44:	f7fc fdc0 	bl	80048c8 <HAL_GetTick>
 8007d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d4a:	e008      	b.n	8007d5e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d4c:	f7fc fdbc 	bl	80048c8 <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d901      	bls.n	8007d5e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e087      	b.n	8007e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d5e:	4b28      	ldr	r3, [pc, #160]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1f0      	bne.n	8007d4c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	69da      	ldr	r2, [r3, #28]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a1b      	ldr	r3, [r3, #32]
 8007d72:	431a      	orrs	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d78:	019b      	lsls	r3, r3, #6
 8007d7a:	431a      	orrs	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d80:	085b      	lsrs	r3, r3, #1
 8007d82:	3b01      	subs	r3, #1
 8007d84:	041b      	lsls	r3, r3, #16
 8007d86:	431a      	orrs	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8c:	061b      	lsls	r3, r3, #24
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	4a1b      	ldr	r2, [pc, #108]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007d92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d96:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d98:	4b19      	ldr	r3, [pc, #100]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a18      	ldr	r2, [pc, #96]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da4:	f7fc fd90 	bl	80048c8 <HAL_GetTick>
 8007da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007daa:	e008      	b.n	8007dbe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dac:	f7fc fd8c 	bl	80048c8 <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d901      	bls.n	8007dbe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e057      	b.n	8007e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dbe:	4b10      	ldr	r3, [pc, #64]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d0f0      	beq.n	8007dac <HAL_RCC_OscConfig+0x478>
 8007dca:	e04f      	b.n	8007e6c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dcc:	4b0c      	ldr	r3, [pc, #48]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a0b      	ldr	r2, [pc, #44]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd8:	f7fc fd76 	bl	80048c8 <HAL_GetTick>
 8007ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dde:	e008      	b.n	8007df2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007de0:	f7fc fd72 	bl	80048c8 <HAL_GetTick>
 8007de4:	4602      	mov	r2, r0
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d901      	bls.n	8007df2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007dee:	2303      	movs	r3, #3
 8007df0:	e03d      	b.n	8007e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007df2:	4b03      	ldr	r3, [pc, #12]	; (8007e00 <HAL_RCC_OscConfig+0x4cc>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1f0      	bne.n	8007de0 <HAL_RCC_OscConfig+0x4ac>
 8007dfe:	e035      	b.n	8007e6c <HAL_RCC_OscConfig+0x538>
 8007e00:	40023800 	.word	0x40023800
 8007e04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007e08:	4b1b      	ldr	r3, [pc, #108]	; (8007e78 <HAL_RCC_OscConfig+0x544>)
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d028      	beq.n	8007e68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d121      	bne.n	8007e68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d11a      	bne.n	8007e68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007e38:	4013      	ands	r3, r2
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007e3e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d111      	bne.n	8007e68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4e:	085b      	lsrs	r3, r3, #1
 8007e50:	3b01      	subs	r3, #1
 8007e52:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d107      	bne.n	8007e68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e62:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d001      	beq.n	8007e6c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e000      	b.n	8007e6e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	40023800 	.word	0x40023800

08007e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007e86:	2300      	movs	r3, #0
 8007e88:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e0d0      	b.n	8008036 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e94:	4b6a      	ldr	r3, [pc, #424]	; (8008040 <HAL_RCC_ClockConfig+0x1c4>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 030f 	and.w	r3, r3, #15
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d910      	bls.n	8007ec4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ea2:	4b67      	ldr	r3, [pc, #412]	; (8008040 <HAL_RCC_ClockConfig+0x1c4>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f023 020f 	bic.w	r2, r3, #15
 8007eaa:	4965      	ldr	r1, [pc, #404]	; (8008040 <HAL_RCC_ClockConfig+0x1c4>)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eb2:	4b63      	ldr	r3, [pc, #396]	; (8008040 <HAL_RCC_ClockConfig+0x1c4>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 030f 	and.w	r3, r3, #15
 8007eba:	683a      	ldr	r2, [r7, #0]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d001      	beq.n	8007ec4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e0b8      	b.n	8008036 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0302 	and.w	r3, r3, #2
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d020      	beq.n	8007f12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0304 	and.w	r3, r3, #4
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d005      	beq.n	8007ee8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007edc:	4b59      	ldr	r3, [pc, #356]	; (8008044 <HAL_RCC_ClockConfig+0x1c8>)
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	4a58      	ldr	r2, [pc, #352]	; (8008044 <HAL_RCC_ClockConfig+0x1c8>)
 8007ee2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007ee6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 0308 	and.w	r3, r3, #8
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d005      	beq.n	8007f00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ef4:	4b53      	ldr	r3, [pc, #332]	; (8008044 <HAL_RCC_ClockConfig+0x1c8>)
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	4a52      	ldr	r2, [pc, #328]	; (8008044 <HAL_RCC_ClockConfig+0x1c8>)
 8007efa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007efe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f00:	4b50      	ldr	r3, [pc, #320]	; (8008044 <HAL_RCC_ClockConfig+0x1c8>)
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	494d      	ldr	r1, [pc, #308]	; (8008044 <HAL_RCC_ClockConfig+0x1c8>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d040      	beq.n	8007fa0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d107      	bne.n	8007f36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f26:	4b47      	ldr	r3, [pc, #284]	; (8008044 <HAL_RCC_ClockConfig+0x1c8>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d115      	bne.n	8007f5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e07f      	b.n	8008036 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d107      	bne.n	8007f4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f3e:	4b41      	ldr	r3, [pc, #260]	; (8008044 <HAL_RCC_ClockConfig+0x1c8>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d109      	bne.n	8007f5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e073      	b.n	8008036 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f4e:	4b3d      	ldr	r3, [pc, #244]	; (8008044 <HAL_RCC_ClockConfig+0x1c8>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 0302 	and.w	r3, r3, #2
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d101      	bne.n	8007f5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e06b      	b.n	8008036 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f5e:	4b39      	ldr	r3, [pc, #228]	; (8008044 <HAL_RCC_ClockConfig+0x1c8>)
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f023 0203 	bic.w	r2, r3, #3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	4936      	ldr	r1, [pc, #216]	; (8008044 <HAL_RCC_ClockConfig+0x1c8>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f70:	f7fc fcaa 	bl	80048c8 <HAL_GetTick>
 8007f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f76:	e00a      	b.n	8007f8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f78:	f7fc fca6 	bl	80048c8 <HAL_GetTick>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d901      	bls.n	8007f8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e053      	b.n	8008036 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f8e:	4b2d      	ldr	r3, [pc, #180]	; (8008044 <HAL_RCC_ClockConfig+0x1c8>)
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f003 020c 	and.w	r2, r3, #12
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d1eb      	bne.n	8007f78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007fa0:	4b27      	ldr	r3, [pc, #156]	; (8008040 <HAL_RCC_ClockConfig+0x1c4>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 030f 	and.w	r3, r3, #15
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d210      	bcs.n	8007fd0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fae:	4b24      	ldr	r3, [pc, #144]	; (8008040 <HAL_RCC_ClockConfig+0x1c4>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f023 020f 	bic.w	r2, r3, #15
 8007fb6:	4922      	ldr	r1, [pc, #136]	; (8008040 <HAL_RCC_ClockConfig+0x1c4>)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fbe:	4b20      	ldr	r3, [pc, #128]	; (8008040 <HAL_RCC_ClockConfig+0x1c4>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 030f 	and.w	r3, r3, #15
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d001      	beq.n	8007fd0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e032      	b.n	8008036 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0304 	and.w	r3, r3, #4
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d008      	beq.n	8007fee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007fdc:	4b19      	ldr	r3, [pc, #100]	; (8008044 <HAL_RCC_ClockConfig+0x1c8>)
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	4916      	ldr	r1, [pc, #88]	; (8008044 <HAL_RCC_ClockConfig+0x1c8>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0308 	and.w	r3, r3, #8
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d009      	beq.n	800800e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007ffa:	4b12      	ldr	r3, [pc, #72]	; (8008044 <HAL_RCC_ClockConfig+0x1c8>)
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	00db      	lsls	r3, r3, #3
 8008008:	490e      	ldr	r1, [pc, #56]	; (8008044 <HAL_RCC_ClockConfig+0x1c8>)
 800800a:	4313      	orrs	r3, r2
 800800c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800800e:	f000 f821 	bl	8008054 <HAL_RCC_GetSysClockFreq>
 8008012:	4602      	mov	r2, r0
 8008014:	4b0b      	ldr	r3, [pc, #44]	; (8008044 <HAL_RCC_ClockConfig+0x1c8>)
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	091b      	lsrs	r3, r3, #4
 800801a:	f003 030f 	and.w	r3, r3, #15
 800801e:	490a      	ldr	r1, [pc, #40]	; (8008048 <HAL_RCC_ClockConfig+0x1cc>)
 8008020:	5ccb      	ldrb	r3, [r1, r3]
 8008022:	fa22 f303 	lsr.w	r3, r2, r3
 8008026:	4a09      	ldr	r2, [pc, #36]	; (800804c <HAL_RCC_ClockConfig+0x1d0>)
 8008028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800802a:	4b09      	ldr	r3, [pc, #36]	; (8008050 <HAL_RCC_ClockConfig+0x1d4>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4618      	mov	r0, r3
 8008030:	f7fb ff3c 	bl	8003eac <HAL_InitTick>

  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	40023c00 	.word	0x40023c00
 8008044:	40023800 	.word	0x40023800
 8008048:	080106b4 	.word	0x080106b4
 800804c:	2000003c 	.word	0x2000003c
 8008050:	20000040 	.word	0x20000040

08008054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008058:	b090      	sub	sp, #64	; 0x40
 800805a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800805c:	2300      	movs	r3, #0
 800805e:	637b      	str	r3, [r7, #52]	; 0x34
 8008060:	2300      	movs	r3, #0
 8008062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008064:	2300      	movs	r3, #0
 8008066:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8008068:	2300      	movs	r3, #0
 800806a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800806c:	4b59      	ldr	r3, [pc, #356]	; (80081d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f003 030c 	and.w	r3, r3, #12
 8008074:	2b08      	cmp	r3, #8
 8008076:	d00d      	beq.n	8008094 <HAL_RCC_GetSysClockFreq+0x40>
 8008078:	2b08      	cmp	r3, #8
 800807a:	f200 80a1 	bhi.w	80081c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800807e:	2b00      	cmp	r3, #0
 8008080:	d002      	beq.n	8008088 <HAL_RCC_GetSysClockFreq+0x34>
 8008082:	2b04      	cmp	r3, #4
 8008084:	d003      	beq.n	800808e <HAL_RCC_GetSysClockFreq+0x3a>
 8008086:	e09b      	b.n	80081c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008088:	4b53      	ldr	r3, [pc, #332]	; (80081d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800808a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800808c:	e09b      	b.n	80081c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800808e:	4b53      	ldr	r3, [pc, #332]	; (80081dc <HAL_RCC_GetSysClockFreq+0x188>)
 8008090:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008092:	e098      	b.n	80081c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008094:	4b4f      	ldr	r3, [pc, #316]	; (80081d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800809c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800809e:	4b4d      	ldr	r3, [pc, #308]	; (80081d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d028      	beq.n	80080fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080aa:	4b4a      	ldr	r3, [pc, #296]	; (80081d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	099b      	lsrs	r3, r3, #6
 80080b0:	2200      	movs	r2, #0
 80080b2:	623b      	str	r3, [r7, #32]
 80080b4:	627a      	str	r2, [r7, #36]	; 0x24
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80080bc:	2100      	movs	r1, #0
 80080be:	4b47      	ldr	r3, [pc, #284]	; (80081dc <HAL_RCC_GetSysClockFreq+0x188>)
 80080c0:	fb03 f201 	mul.w	r2, r3, r1
 80080c4:	2300      	movs	r3, #0
 80080c6:	fb00 f303 	mul.w	r3, r0, r3
 80080ca:	4413      	add	r3, r2
 80080cc:	4a43      	ldr	r2, [pc, #268]	; (80081dc <HAL_RCC_GetSysClockFreq+0x188>)
 80080ce:	fba0 1202 	umull	r1, r2, r0, r2
 80080d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080d4:	460a      	mov	r2, r1
 80080d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80080d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080da:	4413      	add	r3, r2
 80080dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e0:	2200      	movs	r2, #0
 80080e2:	61bb      	str	r3, [r7, #24]
 80080e4:	61fa      	str	r2, [r7, #28]
 80080e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80080ee:	f7f8 f8df 	bl	80002b0 <__aeabi_uldivmod>
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	4613      	mov	r3, r2
 80080f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080fa:	e053      	b.n	80081a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080fc:	4b35      	ldr	r3, [pc, #212]	; (80081d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	099b      	lsrs	r3, r3, #6
 8008102:	2200      	movs	r2, #0
 8008104:	613b      	str	r3, [r7, #16]
 8008106:	617a      	str	r2, [r7, #20]
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800810e:	f04f 0b00 	mov.w	fp, #0
 8008112:	4652      	mov	r2, sl
 8008114:	465b      	mov	r3, fp
 8008116:	f04f 0000 	mov.w	r0, #0
 800811a:	f04f 0100 	mov.w	r1, #0
 800811e:	0159      	lsls	r1, r3, #5
 8008120:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008124:	0150      	lsls	r0, r2, #5
 8008126:	4602      	mov	r2, r0
 8008128:	460b      	mov	r3, r1
 800812a:	ebb2 080a 	subs.w	r8, r2, sl
 800812e:	eb63 090b 	sbc.w	r9, r3, fp
 8008132:	f04f 0200 	mov.w	r2, #0
 8008136:	f04f 0300 	mov.w	r3, #0
 800813a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800813e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008142:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008146:	ebb2 0408 	subs.w	r4, r2, r8
 800814a:	eb63 0509 	sbc.w	r5, r3, r9
 800814e:	f04f 0200 	mov.w	r2, #0
 8008152:	f04f 0300 	mov.w	r3, #0
 8008156:	00eb      	lsls	r3, r5, #3
 8008158:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800815c:	00e2      	lsls	r2, r4, #3
 800815e:	4614      	mov	r4, r2
 8008160:	461d      	mov	r5, r3
 8008162:	eb14 030a 	adds.w	r3, r4, sl
 8008166:	603b      	str	r3, [r7, #0]
 8008168:	eb45 030b 	adc.w	r3, r5, fp
 800816c:	607b      	str	r3, [r7, #4]
 800816e:	f04f 0200 	mov.w	r2, #0
 8008172:	f04f 0300 	mov.w	r3, #0
 8008176:	e9d7 4500 	ldrd	r4, r5, [r7]
 800817a:	4629      	mov	r1, r5
 800817c:	028b      	lsls	r3, r1, #10
 800817e:	4621      	mov	r1, r4
 8008180:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008184:	4621      	mov	r1, r4
 8008186:	028a      	lsls	r2, r1, #10
 8008188:	4610      	mov	r0, r2
 800818a:	4619      	mov	r1, r3
 800818c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800818e:	2200      	movs	r2, #0
 8008190:	60bb      	str	r3, [r7, #8]
 8008192:	60fa      	str	r2, [r7, #12]
 8008194:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008198:	f7f8 f88a 	bl	80002b0 <__aeabi_uldivmod>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	4613      	mov	r3, r2
 80081a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80081a4:	4b0b      	ldr	r3, [pc, #44]	; (80081d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	0c1b      	lsrs	r3, r3, #16
 80081aa:	f003 0303 	and.w	r3, r3, #3
 80081ae:	3301      	adds	r3, #1
 80081b0:	005b      	lsls	r3, r3, #1
 80081b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80081b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80081b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80081be:	e002      	b.n	80081c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081c0:	4b05      	ldr	r3, [pc, #20]	; (80081d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80081c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80081c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3740      	adds	r7, #64	; 0x40
 80081cc:	46bd      	mov	sp, r7
 80081ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081d2:	bf00      	nop
 80081d4:	40023800 	.word	0x40023800
 80081d8:	00f42400 	.word	0x00f42400
 80081dc:	017d7840 	.word	0x017d7840

080081e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081e0:	b480      	push	{r7}
 80081e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081e4:	4b03      	ldr	r3, [pc, #12]	; (80081f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80081e6:	681b      	ldr	r3, [r3, #0]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	2000003c 	.word	0x2000003c

080081f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80081fc:	f7ff fff0 	bl	80081e0 <HAL_RCC_GetHCLKFreq>
 8008200:	4602      	mov	r2, r0
 8008202:	4b05      	ldr	r3, [pc, #20]	; (8008218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	0a9b      	lsrs	r3, r3, #10
 8008208:	f003 0307 	and.w	r3, r3, #7
 800820c:	4903      	ldr	r1, [pc, #12]	; (800821c <HAL_RCC_GetPCLK1Freq+0x24>)
 800820e:	5ccb      	ldrb	r3, [r1, r3]
 8008210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008214:	4618      	mov	r0, r3
 8008216:	bd80      	pop	{r7, pc}
 8008218:	40023800 	.word	0x40023800
 800821c:	080106c4 	.word	0x080106c4

08008220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008224:	f7ff ffdc 	bl	80081e0 <HAL_RCC_GetHCLKFreq>
 8008228:	4602      	mov	r2, r0
 800822a:	4b05      	ldr	r3, [pc, #20]	; (8008240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	0b5b      	lsrs	r3, r3, #13
 8008230:	f003 0307 	and.w	r3, r3, #7
 8008234:	4903      	ldr	r1, [pc, #12]	; (8008244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008236:	5ccb      	ldrb	r3, [r1, r3]
 8008238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800823c:	4618      	mov	r0, r3
 800823e:	bd80      	pop	{r7, pc}
 8008240:	40023800 	.word	0x40023800
 8008244:	080106c4 	.word	0x080106c4

08008248 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	220f      	movs	r2, #15
 8008256:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008258:	4b12      	ldr	r3, [pc, #72]	; (80082a4 <HAL_RCC_GetClockConfig+0x5c>)
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f003 0203 	and.w	r2, r3, #3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008264:	4b0f      	ldr	r3, [pc, #60]	; (80082a4 <HAL_RCC_GetClockConfig+0x5c>)
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008270:	4b0c      	ldr	r3, [pc, #48]	; (80082a4 <HAL_RCC_GetClockConfig+0x5c>)
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800827c:	4b09      	ldr	r3, [pc, #36]	; (80082a4 <HAL_RCC_GetClockConfig+0x5c>)
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	08db      	lsrs	r3, r3, #3
 8008282:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800828a:	4b07      	ldr	r3, [pc, #28]	; (80082a8 <HAL_RCC_GetClockConfig+0x60>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 020f 	and.w	r2, r3, #15
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	601a      	str	r2, [r3, #0]
}
 8008296:	bf00      	nop
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	40023800 	.word	0x40023800
 80082a8:	40023c00 	.word	0x40023c00

080082ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b088      	sub	sp, #32
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80082b4:	2300      	movs	r3, #0
 80082b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80082c0:	2300      	movs	r3, #0
 80082c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80082c4:	2300      	movs	r3, #0
 80082c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0301 	and.w	r3, r3, #1
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d012      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80082d4:	4b69      	ldr	r3, [pc, #420]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	4a68      	ldr	r2, [pc, #416]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80082de:	6093      	str	r3, [r2, #8]
 80082e0:	4b66      	ldr	r3, [pc, #408]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082e2:	689a      	ldr	r2, [r3, #8]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e8:	4964      	ldr	r1, [pc, #400]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082ea:	4313      	orrs	r3, r2
 80082ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d101      	bne.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80082f6:	2301      	movs	r3, #1
 80082f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008302:	2b00      	cmp	r3, #0
 8008304:	d017      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008306:	4b5d      	ldr	r3, [pc, #372]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800830c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008314:	4959      	ldr	r1, [pc, #356]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008316:	4313      	orrs	r3, r2
 8008318:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008324:	d101      	bne.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008326:	2301      	movs	r3, #1
 8008328:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832e:	2b00      	cmp	r3, #0
 8008330:	d101      	bne.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008332:	2301      	movs	r3, #1
 8008334:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800833e:	2b00      	cmp	r3, #0
 8008340:	d017      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008342:	4b4e      	ldr	r3, [pc, #312]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008348:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008350:	494a      	ldr	r1, [pc, #296]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008352:	4313      	orrs	r3, r2
 8008354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008360:	d101      	bne.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008362:	2301      	movs	r3, #1
 8008364:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836a:	2b00      	cmp	r3, #0
 800836c:	d101      	bne.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800836e:	2301      	movs	r3, #1
 8008370:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800837e:	2301      	movs	r3, #1
 8008380:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 0320 	and.w	r3, r3, #32
 800838a:	2b00      	cmp	r3, #0
 800838c:	f000 808b 	beq.w	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008390:	4b3a      	ldr	r3, [pc, #232]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008394:	4a39      	ldr	r2, [pc, #228]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800839a:	6413      	str	r3, [r2, #64]	; 0x40
 800839c:	4b37      	ldr	r3, [pc, #220]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800839e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083a4:	60bb      	str	r3, [r7, #8]
 80083a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80083a8:	4b35      	ldr	r3, [pc, #212]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a34      	ldr	r2, [pc, #208]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083b4:	f7fc fa88 	bl	80048c8 <HAL_GetTick>
 80083b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80083ba:	e008      	b.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083bc:	f7fc fa84 	bl	80048c8 <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	2b64      	cmp	r3, #100	; 0x64
 80083c8:	d901      	bls.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e357      	b.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80083ce:	4b2c      	ldr	r3, [pc, #176]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d0f0      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80083da:	4b28      	ldr	r3, [pc, #160]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d035      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083f2:	693a      	ldr	r2, [r7, #16]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d02e      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083f8:	4b20      	ldr	r3, [pc, #128]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008400:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008402:	4b1e      	ldr	r3, [pc, #120]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008406:	4a1d      	ldr	r2, [pc, #116]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800840c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800840e:	4b1b      	ldr	r3, [pc, #108]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008412:	4a1a      	ldr	r2, [pc, #104]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008418:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800841a:	4a18      	ldr	r2, [pc, #96]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008420:	4b16      	ldr	r3, [pc, #88]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008424:	f003 0301 	and.w	r3, r3, #1
 8008428:	2b01      	cmp	r3, #1
 800842a:	d114      	bne.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800842c:	f7fc fa4c 	bl	80048c8 <HAL_GetTick>
 8008430:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008432:	e00a      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008434:	f7fc fa48 	bl	80048c8 <HAL_GetTick>
 8008438:	4602      	mov	r2, r0
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	1ad3      	subs	r3, r2, r3
 800843e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008442:	4293      	cmp	r3, r2
 8008444:	d901      	bls.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	e319      	b.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800844a:	4b0c      	ldr	r3, [pc, #48]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800844c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800844e:	f003 0302 	and.w	r3, r3, #2
 8008452:	2b00      	cmp	r3, #0
 8008454:	d0ee      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800845e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008462:	d111      	bne.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008464:	4b05      	ldr	r3, [pc, #20]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008470:	4b04      	ldr	r3, [pc, #16]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008472:	400b      	ands	r3, r1
 8008474:	4901      	ldr	r1, [pc, #4]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008476:	4313      	orrs	r3, r2
 8008478:	608b      	str	r3, [r1, #8]
 800847a:	e00b      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800847c:	40023800 	.word	0x40023800
 8008480:	40007000 	.word	0x40007000
 8008484:	0ffffcff 	.word	0x0ffffcff
 8008488:	4baa      	ldr	r3, [pc, #680]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	4aa9      	ldr	r2, [pc, #676]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800848e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008492:	6093      	str	r3, [r2, #8]
 8008494:	4ba7      	ldr	r3, [pc, #668]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008496:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800849c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084a0:	49a4      	ldr	r1, [pc, #656]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084a2:	4313      	orrs	r3, r2
 80084a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 0310 	and.w	r3, r3, #16
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d010      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084b2:	4ba0      	ldr	r3, [pc, #640]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084b8:	4a9e      	ldr	r2, [pc, #632]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80084c2:	4b9c      	ldr	r3, [pc, #624]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084cc:	4999      	ldr	r1, [pc, #612]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084ce:	4313      	orrs	r3, r2
 80084d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00a      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80084e0:	4b94      	ldr	r3, [pc, #592]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084ee:	4991      	ldr	r1, [pc, #580]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084f0:	4313      	orrs	r3, r2
 80084f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00a      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008502:	4b8c      	ldr	r3, [pc, #560]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008508:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008510:	4988      	ldr	r1, [pc, #544]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008512:	4313      	orrs	r3, r2
 8008514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00a      	beq.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008524:	4b83      	ldr	r3, [pc, #524]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800852a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008532:	4980      	ldr	r1, [pc, #512]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008534:	4313      	orrs	r3, r2
 8008536:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00a      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008546:	4b7b      	ldr	r3, [pc, #492]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800854c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008554:	4977      	ldr	r1, [pc, #476]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008556:	4313      	orrs	r3, r2
 8008558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00a      	beq.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008568:	4b72      	ldr	r3, [pc, #456]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800856a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800856e:	f023 0203 	bic.w	r2, r3, #3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008576:	496f      	ldr	r1, [pc, #444]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008578:	4313      	orrs	r3, r2
 800857a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00a      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800858a:	4b6a      	ldr	r3, [pc, #424]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800858c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008590:	f023 020c 	bic.w	r2, r3, #12
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008598:	4966      	ldr	r1, [pc, #408]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800859a:	4313      	orrs	r3, r2
 800859c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00a      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80085ac:	4b61      	ldr	r3, [pc, #388]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ba:	495e      	ldr	r1, [pc, #376]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085bc:	4313      	orrs	r3, r2
 80085be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00a      	beq.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80085ce:	4b59      	ldr	r3, [pc, #356]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085dc:	4955      	ldr	r1, [pc, #340]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00a      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80085f0:	4b50      	ldr	r3, [pc, #320]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085fe:	494d      	ldr	r1, [pc, #308]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008600:	4313      	orrs	r3, r2
 8008602:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00a      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008612:	4b48      	ldr	r3, [pc, #288]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008618:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008620:	4944      	ldr	r1, [pc, #272]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008622:	4313      	orrs	r3, r2
 8008624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00a      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008634:	4b3f      	ldr	r3, [pc, #252]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800863a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008642:	493c      	ldr	r1, [pc, #240]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008644:	4313      	orrs	r3, r2
 8008646:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00a      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008656:	4b37      	ldr	r3, [pc, #220]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800865c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008664:	4933      	ldr	r1, [pc, #204]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008666:	4313      	orrs	r3, r2
 8008668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00a      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008678:	4b2e      	ldr	r3, [pc, #184]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800867a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800867e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008686:	492b      	ldr	r1, [pc, #172]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008688:	4313      	orrs	r3, r2
 800868a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d011      	beq.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800869a:	4b26      	ldr	r3, [pc, #152]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800869c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086a8:	4922      	ldr	r1, [pc, #136]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086aa:	4313      	orrs	r3, r2
 80086ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086b8:	d101      	bne.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80086ba:	2301      	movs	r3, #1
 80086bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 0308 	and.w	r3, r3, #8
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d001      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80086ca:	2301      	movs	r3, #1
 80086cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00a      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086da:	4b16      	ldr	r3, [pc, #88]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086e8:	4912      	ldr	r1, [pc, #72]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086ea:	4313      	orrs	r3, r2
 80086ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00b      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80086fc:	4b0d      	ldr	r3, [pc, #52]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008702:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800870c:	4909      	ldr	r1, [pc, #36]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800870e:	4313      	orrs	r3, r2
 8008710:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	2b01      	cmp	r3, #1
 8008718:	d006      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008722:	2b00      	cmp	r3, #0
 8008724:	f000 80d9 	beq.w	80088da <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008728:	4b02      	ldr	r3, [pc, #8]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a01      	ldr	r2, [pc, #4]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800872e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008732:	e001      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008734:	40023800 	.word	0x40023800
 8008738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800873a:	f7fc f8c5 	bl	80048c8 <HAL_GetTick>
 800873e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008740:	e008      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008742:	f7fc f8c1 	bl	80048c8 <HAL_GetTick>
 8008746:	4602      	mov	r2, r0
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	2b64      	cmp	r3, #100	; 0x64
 800874e:	d901      	bls.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e194      	b.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008754:	4b6c      	ldr	r3, [pc, #432]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1f0      	bne.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 0301 	and.w	r3, r3, #1
 8008768:	2b00      	cmp	r3, #0
 800876a:	d021      	beq.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008770:	2b00      	cmp	r3, #0
 8008772:	d11d      	bne.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008774:	4b64      	ldr	r3, [pc, #400]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800877a:	0c1b      	lsrs	r3, r3, #16
 800877c:	f003 0303 	and.w	r3, r3, #3
 8008780:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008782:	4b61      	ldr	r3, [pc, #388]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008788:	0e1b      	lsrs	r3, r3, #24
 800878a:	f003 030f 	and.w	r3, r3, #15
 800878e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	019a      	lsls	r2, r3, #6
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	041b      	lsls	r3, r3, #16
 800879a:	431a      	orrs	r2, r3
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	061b      	lsls	r3, r3, #24
 80087a0:	431a      	orrs	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	071b      	lsls	r3, r3, #28
 80087a8:	4957      	ldr	r1, [pc, #348]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087aa:	4313      	orrs	r3, r2
 80087ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d004      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087c4:	d00a      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d02e      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087da:	d129      	bne.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80087dc:	4b4a      	ldr	r3, [pc, #296]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087e2:	0c1b      	lsrs	r3, r3, #16
 80087e4:	f003 0303 	and.w	r3, r3, #3
 80087e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80087ea:	4b47      	ldr	r3, [pc, #284]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087f0:	0f1b      	lsrs	r3, r3, #28
 80087f2:	f003 0307 	and.w	r3, r3, #7
 80087f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	019a      	lsls	r2, r3, #6
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	041b      	lsls	r3, r3, #16
 8008802:	431a      	orrs	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	061b      	lsls	r3, r3, #24
 800880a:	431a      	orrs	r2, r3
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	071b      	lsls	r3, r3, #28
 8008810:	493d      	ldr	r1, [pc, #244]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008812:	4313      	orrs	r3, r2
 8008814:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008818:	4b3b      	ldr	r3, [pc, #236]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800881a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800881e:	f023 021f 	bic.w	r2, r3, #31
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008826:	3b01      	subs	r3, #1
 8008828:	4937      	ldr	r1, [pc, #220]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800882a:	4313      	orrs	r3, r2
 800882c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d01d      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800883c:	4b32      	ldr	r3, [pc, #200]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800883e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008842:	0e1b      	lsrs	r3, r3, #24
 8008844:	f003 030f 	and.w	r3, r3, #15
 8008848:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800884a:	4b2f      	ldr	r3, [pc, #188]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800884c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008850:	0f1b      	lsrs	r3, r3, #28
 8008852:	f003 0307 	and.w	r3, r3, #7
 8008856:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	019a      	lsls	r2, r3, #6
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	041b      	lsls	r3, r3, #16
 8008864:	431a      	orrs	r2, r3
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	061b      	lsls	r3, r3, #24
 800886a:	431a      	orrs	r2, r3
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	071b      	lsls	r3, r3, #28
 8008870:	4925      	ldr	r1, [pc, #148]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008872:	4313      	orrs	r3, r2
 8008874:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008880:	2b00      	cmp	r3, #0
 8008882:	d011      	beq.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	019a      	lsls	r2, r3, #6
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	041b      	lsls	r3, r3, #16
 8008890:	431a      	orrs	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	061b      	lsls	r3, r3, #24
 8008898:	431a      	orrs	r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	071b      	lsls	r3, r3, #28
 80088a0:	4919      	ldr	r1, [pc, #100]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088a2:	4313      	orrs	r3, r2
 80088a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80088a8:	4b17      	ldr	r3, [pc, #92]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a16      	ldr	r2, [pc, #88]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80088b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088b4:	f7fc f808 	bl	80048c8 <HAL_GetTick>
 80088b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088ba:	e008      	b.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80088bc:	f7fc f804 	bl	80048c8 <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	2b64      	cmp	r3, #100	; 0x64
 80088c8:	d901      	bls.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e0d7      	b.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088ce:	4b0e      	ldr	r3, [pc, #56]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d0f0      	beq.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	f040 80cd 	bne.w	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80088e2:	4b09      	ldr	r3, [pc, #36]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a08      	ldr	r2, [pc, #32]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088ee:	f7fb ffeb 	bl	80048c8 <HAL_GetTick>
 80088f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088f4:	e00a      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80088f6:	f7fb ffe7 	bl	80048c8 <HAL_GetTick>
 80088fa:	4602      	mov	r2, r0
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	1ad3      	subs	r3, r2, r3
 8008900:	2b64      	cmp	r3, #100	; 0x64
 8008902:	d903      	bls.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008904:	2303      	movs	r3, #3
 8008906:	e0ba      	b.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008908:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800890c:	4b5e      	ldr	r3, [pc, #376]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008918:	d0ed      	beq.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d003      	beq.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800892a:	2b00      	cmp	r3, #0
 800892c:	d009      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008936:	2b00      	cmp	r3, #0
 8008938:	d02e      	beq.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893e:	2b00      	cmp	r3, #0
 8008940:	d12a      	bne.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008942:	4b51      	ldr	r3, [pc, #324]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008948:	0c1b      	lsrs	r3, r3, #16
 800894a:	f003 0303 	and.w	r3, r3, #3
 800894e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008950:	4b4d      	ldr	r3, [pc, #308]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008956:	0f1b      	lsrs	r3, r3, #28
 8008958:	f003 0307 	and.w	r3, r3, #7
 800895c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	019a      	lsls	r2, r3, #6
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	041b      	lsls	r3, r3, #16
 8008968:	431a      	orrs	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	061b      	lsls	r3, r3, #24
 8008970:	431a      	orrs	r2, r3
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	071b      	lsls	r3, r3, #28
 8008976:	4944      	ldr	r1, [pc, #272]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008978:	4313      	orrs	r3, r2
 800897a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800897e:	4b42      	ldr	r3, [pc, #264]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008984:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898c:	3b01      	subs	r3, #1
 800898e:	021b      	lsls	r3, r3, #8
 8008990:	493d      	ldr	r1, [pc, #244]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008992:	4313      	orrs	r3, r2
 8008994:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d022      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089ac:	d11d      	bne.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80089ae:	4b36      	ldr	r3, [pc, #216]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089b4:	0e1b      	lsrs	r3, r3, #24
 80089b6:	f003 030f 	and.w	r3, r3, #15
 80089ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80089bc:	4b32      	ldr	r3, [pc, #200]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089c2:	0f1b      	lsrs	r3, r3, #28
 80089c4:	f003 0307 	and.w	r3, r3, #7
 80089c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	019a      	lsls	r2, r3, #6
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a1b      	ldr	r3, [r3, #32]
 80089d4:	041b      	lsls	r3, r3, #16
 80089d6:	431a      	orrs	r2, r3
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	061b      	lsls	r3, r3, #24
 80089dc:	431a      	orrs	r2, r3
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	071b      	lsls	r3, r3, #28
 80089e2:	4929      	ldr	r1, [pc, #164]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089e4:	4313      	orrs	r3, r2
 80089e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 0308 	and.w	r3, r3, #8
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d028      	beq.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80089f6:	4b24      	ldr	r3, [pc, #144]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089fc:	0e1b      	lsrs	r3, r3, #24
 80089fe:	f003 030f 	and.w	r3, r3, #15
 8008a02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008a04:	4b20      	ldr	r3, [pc, #128]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a0a:	0c1b      	lsrs	r3, r3, #16
 8008a0c:	f003 0303 	and.w	r3, r3, #3
 8008a10:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	019a      	lsls	r2, r3, #6
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	041b      	lsls	r3, r3, #16
 8008a1c:	431a      	orrs	r2, r3
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	061b      	lsls	r3, r3, #24
 8008a22:	431a      	orrs	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	69db      	ldr	r3, [r3, #28]
 8008a28:	071b      	lsls	r3, r3, #28
 8008a2a:	4917      	ldr	r1, [pc, #92]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008a32:	4b15      	ldr	r3, [pc, #84]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a40:	4911      	ldr	r1, [pc, #68]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a42:	4313      	orrs	r3, r2
 8008a44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008a48:	4b0f      	ldr	r3, [pc, #60]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a0e      	ldr	r2, [pc, #56]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a54:	f7fb ff38 	bl	80048c8 <HAL_GetTick>
 8008a58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a5a:	e008      	b.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008a5c:	f7fb ff34 	bl	80048c8 <HAL_GetTick>
 8008a60:	4602      	mov	r2, r0
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	2b64      	cmp	r3, #100	; 0x64
 8008a68:	d901      	bls.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	e007      	b.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a6e:	4b06      	ldr	r3, [pc, #24]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a7a:	d1ef      	bne.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3720      	adds	r7, #32
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	40023800 	.word	0x40023800

08008a8c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d101      	bne.n	8008aa2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e071      	b.n	8008b86 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	7f5b      	ldrb	r3, [r3, #29]
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d105      	bne.n	8008ab8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7f9 fb3a 	bl	800212c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2202      	movs	r2, #2
 8008abc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	f003 0310 	and.w	r3, r3, #16
 8008ac8:	2b10      	cmp	r3, #16
 8008aca:	d053      	beq.n	8008b74 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	22ca      	movs	r2, #202	; 0xca
 8008ad2:	625a      	str	r2, [r3, #36]	; 0x24
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2253      	movs	r2, #83	; 0x53
 8008ada:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 fac9 	bl	8009074 <RTC_EnterInitMode>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d12a      	bne.n	8008b42 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6899      	ldr	r1, [r3, #8]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	4b26      	ldr	r3, [pc, #152]	; (8008b90 <HAL_RTC_Init+0x104>)
 8008af8:	400b      	ands	r3, r1
 8008afa:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6899      	ldr	r1, [r3, #8]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685a      	ldr	r2, [r3, #4]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	431a      	orrs	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	695b      	ldr	r3, [r3, #20]
 8008b10:	431a      	orrs	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	430a      	orrs	r2, r1
 8008b18:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	68d2      	ldr	r2, [r2, #12]
 8008b22:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6919      	ldr	r1, [r3, #16]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	041a      	lsls	r2, r3, #16
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	430a      	orrs	r2, r1
 8008b36:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fad2 	bl	80090e2 <RTC_ExitInitMode>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d110      	bne.n	8008b6a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f022 0208 	bic.w	r2, r2, #8
 8008b56:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	699a      	ldr	r2, [r3, #24]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	430a      	orrs	r2, r1
 8008b68:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	22ff      	movs	r2, #255	; 0xff
 8008b70:	625a      	str	r2, [r3, #36]	; 0x24
 8008b72:	e001      	b.n	8008b78 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d102      	bne.n	8008b84 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2201      	movs	r2, #1
 8008b82:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	ff8fffbf 	.word	0xff8fffbf

08008b94 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008b94:	b590      	push	{r4, r7, lr}
 8008b96:	b087      	sub	sp, #28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	7f1b      	ldrb	r3, [r3, #28]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d101      	bne.n	8008bb0 <HAL_RTC_SetTime+0x1c>
 8008bac:	2302      	movs	r3, #2
 8008bae:	e085      	b.n	8008cbc <HAL_RTC_SetTime+0x128>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2202      	movs	r2, #2
 8008bba:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d126      	bne.n	8008c10 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d102      	bne.n	8008bd6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f000 faa6 	bl	800912c <RTC_ByteToBcd2>
 8008be0:	4603      	mov	r3, r0
 8008be2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	785b      	ldrb	r3, [r3, #1]
 8008be8:	4618      	mov	r0, r3
 8008bea:	f000 fa9f 	bl	800912c <RTC_ByteToBcd2>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008bf2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	789b      	ldrb	r3, [r3, #2]
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f000 fa97 	bl	800912c <RTC_ByteToBcd2>
 8008bfe:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008c00:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	78db      	ldrb	r3, [r3, #3]
 8008c08:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	617b      	str	r3, [r7, #20]
 8008c0e:	e018      	b.n	8008c42 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d102      	bne.n	8008c24 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	2200      	movs	r2, #0
 8008c22:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	785b      	ldrb	r3, [r3, #1]
 8008c2e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008c30:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008c32:	68ba      	ldr	r2, [r7, #8]
 8008c34:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008c36:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	78db      	ldrb	r3, [r3, #3]
 8008c3c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	22ca      	movs	r2, #202	; 0xca
 8008c48:	625a      	str	r2, [r3, #36]	; 0x24
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2253      	movs	r2, #83	; 0x53
 8008c50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f000 fa0e 	bl	8009074 <RTC_EnterInitMode>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008c5c:	7cfb      	ldrb	r3, [r7, #19]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d11e      	bne.n	8008ca0 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	6979      	ldr	r1, [r7, #20]
 8008c68:	4b16      	ldr	r3, [pc, #88]	; (8008cc4 <HAL_RTC_SetTime+0x130>)
 8008c6a:	400b      	ands	r3, r1
 8008c6c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	689a      	ldr	r2, [r3, #8]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008c7c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	6899      	ldr	r1, [r3, #8]
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	68da      	ldr	r2, [r3, #12]
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	431a      	orrs	r2, r3
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	430a      	orrs	r2, r1
 8008c94:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f000 fa23 	bl	80090e2 <RTC_ExitInitMode>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008ca0:	7cfb      	ldrb	r3, [r7, #19]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d102      	bne.n	8008cac <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	22ff      	movs	r2, #255	; 0xff
 8008cb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	771a      	strb	r2, [r3, #28]

  return status;
 8008cba:	7cfb      	ldrb	r3, [r7, #19]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	371c      	adds	r7, #28
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd90      	pop	{r4, r7, pc}
 8008cc4:	007f7f7f 	.word	0x007f7f7f

08008cc8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008cc8:	b590      	push	{r4, r7, lr}
 8008cca:	b087      	sub	sp, #28
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	7f1b      	ldrb	r3, [r3, #28]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d101      	bne.n	8008ce4 <HAL_RTC_SetDate+0x1c>
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	e06f      	b.n	8008dc4 <HAL_RTC_SetDate+0xfc>
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2202      	movs	r2, #2
 8008cee:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d10e      	bne.n	8008d14 <HAL_RTC_SetDate+0x4c>
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	785b      	ldrb	r3, [r3, #1]
 8008cfa:	f003 0310 	and.w	r3, r3, #16
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d008      	beq.n	8008d14 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	785b      	ldrb	r3, [r3, #1]
 8008d06:	f023 0310 	bic.w	r3, r3, #16
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	330a      	adds	r3, #10
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d11c      	bne.n	8008d54 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	78db      	ldrb	r3, [r3, #3]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 fa04 	bl	800912c <RTC_ByteToBcd2>
 8008d24:	4603      	mov	r3, r0
 8008d26:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	785b      	ldrb	r3, [r3, #1]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f000 f9fd 	bl	800912c <RTC_ByteToBcd2>
 8008d32:	4603      	mov	r3, r0
 8008d34:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008d36:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	789b      	ldrb	r3, [r3, #2]
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f000 f9f5 	bl	800912c <RTC_ByteToBcd2>
 8008d42:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008d44:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	617b      	str	r3, [r7, #20]
 8008d52:	e00e      	b.n	8008d72 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	78db      	ldrb	r3, [r3, #3]
 8008d58:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	785b      	ldrb	r3, [r3, #1]
 8008d5e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008d60:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008d66:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	22ca      	movs	r2, #202	; 0xca
 8008d78:	625a      	str	r2, [r3, #36]	; 0x24
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2253      	movs	r2, #83	; 0x53
 8008d80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f000 f976 	bl	8009074 <RTC_EnterInitMode>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008d8c:	7cfb      	ldrb	r3, [r7, #19]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10a      	bne.n	8008da8 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	6979      	ldr	r1, [r7, #20]
 8008d98:	4b0c      	ldr	r3, [pc, #48]	; (8008dcc <HAL_RTC_SetDate+0x104>)
 8008d9a:	400b      	ands	r3, r1
 8008d9c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008d9e:	68f8      	ldr	r0, [r7, #12]
 8008da0:	f000 f99f 	bl	80090e2 <RTC_ExitInitMode>
 8008da4:	4603      	mov	r3, r0
 8008da6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008da8:	7cfb      	ldrb	r3, [r7, #19]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d102      	bne.n	8008db4 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2201      	movs	r2, #1
 8008db2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	22ff      	movs	r2, #255	; 0xff
 8008dba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	771a      	strb	r2, [r3, #28]

  return status;
 8008dc2:	7cfb      	ldrb	r3, [r7, #19]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	371c      	adds	r7, #28
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd90      	pop	{r4, r7, pc}
 8008dcc:	00ffff3f 	.word	0x00ffff3f

08008dd0 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008dd0:	b590      	push	{r4, r7, lr}
 8008dd2:	b089      	sub	sp, #36	; 0x24
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8008de0:	2300      	movs	r3, #0
 8008de2:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8008de4:	2300      	movs	r3, #0
 8008de6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	7f1b      	ldrb	r3, [r3, #28]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d101      	bne.n	8008df4 <HAL_RTC_SetAlarm+0x24>
 8008df0:	2302      	movs	r3, #2
 8008df2:	e113      	b.n	800901c <HAL_RTC_SetAlarm+0x24c>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2201      	movs	r2, #1
 8008df8:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2202      	movs	r2, #2
 8008dfe:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d137      	bne.n	8008e76 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d102      	bne.n	8008e1a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	2200      	movs	r2, #0
 8008e18:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 f984 	bl	800912c <RTC_ByteToBcd2>
 8008e24:	4603      	mov	r3, r0
 8008e26:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	785b      	ldrb	r3, [r3, #1]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f000 f97d 	bl	800912c <RTC_ByteToBcd2>
 8008e32:	4603      	mov	r3, r0
 8008e34:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008e36:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	789b      	ldrb	r3, [r3, #2]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f000 f975 	bl	800912c <RTC_ByteToBcd2>
 8008e42:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008e44:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	78db      	ldrb	r3, [r3, #3]
 8008e4c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008e4e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f000 f967 	bl	800912c <RTC_ByteToBcd2>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008e62:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008e6a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008e70:	4313      	orrs	r3, r2
 8008e72:	61fb      	str	r3, [r7, #28]
 8008e74:	e023      	b.n	8008ebe <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d102      	bne.n	8008e8a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	2200      	movs	r2, #0
 8008e88:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	785b      	ldrb	r3, [r3, #1]
 8008e94:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008e96:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008e9c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	78db      	ldrb	r3, [r3, #3]
 8008ea2:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008ea4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008eac:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008eae:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008eb4:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	22ca      	movs	r2, #202	; 0xca
 8008ed0:	625a      	str	r2, [r3, #36]	; 0x24
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2253      	movs	r2, #83	; 0x53
 8008ed8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ee2:	d148      	bne.n	8008f76 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	689a      	ldr	r2, [r3, #8]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ef2:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	689a      	ldr	r2, [r3, #8]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f02:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008f14:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f16:	f7fb fcd7 	bl	80048c8 <HAL_GetTick>
 8008f1a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008f1c:	e013      	b.n	8008f46 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008f1e:	f7fb fcd3 	bl	80048c8 <HAL_GetTick>
 8008f22:	4602      	mov	r2, r0
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	1ad3      	subs	r3, r2, r3
 8008f28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f2c:	d90b      	bls.n	8008f46 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	22ff      	movs	r2, #255	; 0xff
 8008f34:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2203      	movs	r2, #3
 8008f3a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	e06a      	b.n	800901c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	f003 0301 	and.w	r3, r3, #1
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d0e4      	beq.n	8008f1e <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	69fa      	ldr	r2, [r7, #28]
 8008f5a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	697a      	ldr	r2, [r7, #20]
 8008f62:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	689a      	ldr	r2, [r3, #8]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f72:	609a      	str	r2, [r3, #8]
 8008f74:	e047      	b.n	8009006 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	689a      	ldr	r2, [r3, #8]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008f84:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	689a      	ldr	r2, [r3, #8]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f94:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	b2da      	uxtb	r2, r3
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008fa6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008fa8:	f7fb fc8e 	bl	80048c8 <HAL_GetTick>
 8008fac:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008fae:	e013      	b.n	8008fd8 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008fb0:	f7fb fc8a 	bl	80048c8 <HAL_GetTick>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fbe:	d90b      	bls.n	8008fd8 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	22ff      	movs	r2, #255	; 0xff
 8008fc6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2203      	movs	r2, #3
 8008fcc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008fd4:	2303      	movs	r3, #3
 8008fd6:	e021      	b.n	800901c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	f003 0302 	and.w	r3, r3, #2
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d0e4      	beq.n	8008fb0 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	69fa      	ldr	r2, [r7, #28]
 8008fec:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	697a      	ldr	r2, [r7, #20]
 8008ff4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	689a      	ldr	r2, [r3, #8]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009004:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	22ff      	movs	r2, #255	; 0xff
 800900c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2201      	movs	r2, #1
 8009012:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2200      	movs	r2, #0
 8009018:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3724      	adds	r7, #36	; 0x24
 8009020:	46bd      	mov	sp, r7
 8009022:	bd90      	pop	{r4, r7, pc}

08009024 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800902c:	2300      	movs	r3, #0
 800902e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	68da      	ldr	r2, [r3, #12]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800903e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009040:	f7fb fc42 	bl	80048c8 <HAL_GetTick>
 8009044:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009046:	e009      	b.n	800905c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009048:	f7fb fc3e 	bl	80048c8 <HAL_GetTick>
 800904c:	4602      	mov	r2, r0
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009056:	d901      	bls.n	800905c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009058:	2303      	movs	r3, #3
 800905a:	e007      	b.n	800906c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	f003 0320 	and.w	r3, r3, #32
 8009066:	2b00      	cmp	r3, #0
 8009068:	d0ee      	beq.n	8009048 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800906a:	2300      	movs	r3, #0
}
 800906c:	4618      	mov	r0, r3
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800907c:	2300      	movs	r3, #0
 800907e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800908e:	2b00      	cmp	r3, #0
 8009090:	d122      	bne.n	80090d8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68da      	ldr	r2, [r3, #12]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80090a0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80090a2:	f7fb fc11 	bl	80048c8 <HAL_GetTick>
 80090a6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80090a8:	e00c      	b.n	80090c4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80090aa:	f7fb fc0d 	bl	80048c8 <HAL_GetTick>
 80090ae:	4602      	mov	r2, r0
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	1ad3      	subs	r3, r2, r3
 80090b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090b8:	d904      	bls.n	80090c4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2204      	movs	r2, #4
 80090be:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d102      	bne.n	80090d8 <RTC_EnterInitMode+0x64>
 80090d2:	7bfb      	ldrb	r3, [r7, #15]
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d1e8      	bne.n	80090aa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b084      	sub	sp, #16
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090ea:	2300      	movs	r3, #0
 80090ec:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68da      	ldr	r2, [r3, #12]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090fc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	f003 0320 	and.w	r3, r3, #32
 8009108:	2b00      	cmp	r3, #0
 800910a:	d10a      	bne.n	8009122 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f7ff ff89 	bl	8009024 <HAL_RTC_WaitForSynchro>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d004      	beq.n	8009122 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2204      	movs	r2, #4
 800911c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009122:	7bfb      	ldrb	r3, [r7, #15]
}
 8009124:	4618      	mov	r0, r3
 8009126:	3710      	adds	r7, #16
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800912c:	b480      	push	{r7}
 800912e:	b085      	sub	sp, #20
 8009130:	af00      	add	r7, sp, #0
 8009132:	4603      	mov	r3, r0
 8009134:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009136:	2300      	movs	r3, #0
 8009138:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800913a:	e005      	b.n	8009148 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	3301      	adds	r3, #1
 8009140:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8009142:	79fb      	ldrb	r3, [r7, #7]
 8009144:	3b0a      	subs	r3, #10
 8009146:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009148:	79fb      	ldrb	r3, [r7, #7]
 800914a:	2b09      	cmp	r3, #9
 800914c:	d8f6      	bhi.n	800913c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	b2db      	uxtb	r3, r3
 8009152:	011b      	lsls	r3, r3, #4
 8009154:	b2da      	uxtb	r2, r3
 8009156:	79fb      	ldrb	r3, [r7, #7]
 8009158:	4313      	orrs	r3, r2
 800915a:	b2db      	uxtb	r3, r3
}
 800915c:	4618      	mov	r0, r3
 800915e:	3714      	adds	r7, #20
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009168:	b480      	push	{r7}
 800916a:	b087      	sub	sp, #28
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009174:	2300      	movs	r3, #0
 8009176:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	7f1b      	ldrb	r3, [r3, #28]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d101      	bne.n	8009184 <HAL_RTCEx_SetTimeStamp+0x1c>
 8009180:	2302      	movs	r3, #2
 8009182:	e050      	b.n	8009226 <HAL_RTCEx_SetTimeStamp+0xbe>
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2201      	movs	r2, #1
 8009188:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2202      	movs	r2, #2
 800918e:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f022 0206 	bic.w	r2, r2, #6
 800919e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	430a      	orrs	r2, r1
 80091ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	689a      	ldr	r2, [r3, #8]
 80091b6:	4b1f      	ldr	r3, [pc, #124]	; (8009234 <HAL_RTCEx_SetTimeStamp+0xcc>)
 80091b8:	4013      	ands	r3, r2
 80091ba:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 80091bc:	697a      	ldr	r2, [r7, #20]
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	22ca      	movs	r2, #202	; 0xca
 80091ca:	625a      	str	r2, [r3, #36]	; 0x24
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2253      	movs	r2, #83	; 0x53
 80091d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	697a      	ldr	r2, [r7, #20]
 80091da:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	b2da      	uxtb	r2, r3
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f462 6208 	orn	r2, r2, #2176	; 0x880
 80091ec:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	b2da      	uxtb	r2, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 80091fe:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	689a      	ldr	r2, [r3, #8]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800920e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	22ff      	movs	r2, #255	; 0xff
 8009216:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2201      	movs	r2, #1
 800921c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	371c      	adds	r7, #28
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	fffff7f7 	.word	0xfffff7f7

08009238 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d101      	bne.n	800924c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	e025      	b.n	8009298 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b00      	cmp	r3, #0
 8009256:	d106      	bne.n	8009266 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f7f7 fc5f 	bl	8000b24 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2202      	movs	r2, #2
 800926a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	3304      	adds	r3, #4
 8009276:	4619      	mov	r1, r3
 8009278:	4610      	mov	r0, r2
 800927a:	f001 fa33 	bl	800a6e4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6818      	ldr	r0, [r3, #0]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	461a      	mov	r2, r3
 8009288:	6839      	ldr	r1, [r7, #0]
 800928a:	f001 fa87 	bl	800a79c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2201      	movs	r2, #1
 8009292:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80092b2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80092b4:	7dfb      	ldrb	r3, [r7, #23]
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d101      	bne.n	80092be <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80092ba:	2302      	movs	r3, #2
 80092bc:	e021      	b.n	8009302 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80092be:	7dfb      	ldrb	r3, [r7, #23]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d002      	beq.n	80092ca <HAL_SDRAM_SendCommand+0x2a>
 80092c4:	7dfb      	ldrb	r3, [r7, #23]
 80092c6:	2b05      	cmp	r3, #5
 80092c8:	d118      	bne.n	80092fc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2202      	movs	r2, #2
 80092ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	68b9      	ldr	r1, [r7, #8]
 80092da:	4618      	mov	r0, r3
 80092dc:	f001 fac8 	bl	800a870 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d104      	bne.n	80092f2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2205      	movs	r2, #5
 80092ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80092f0:	e006      	b.n	8009300 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80092fa:	e001      	b.n	8009300 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	e000      	b.n	8009302 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3718      	adds	r7, #24
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b082      	sub	sp, #8
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b02      	cmp	r3, #2
 800931e:	d101      	bne.n	8009324 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009320:	2302      	movs	r3, #2
 8009322:	e016      	b.n	8009352 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800932a:	b2db      	uxtb	r3, r3
 800932c:	2b01      	cmp	r3, #1
 800932e:	d10f      	bne.n	8009350 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2202      	movs	r2, #2
 8009334:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	4618      	mov	r0, r3
 8009340:	f001 faba 	bl	800a8b8 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800934c:	2300      	movs	r3, #0
 800934e:	e000      	b.n	8009352 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009350:	2301      	movs	r3, #1
}
 8009352:	4618      	mov	r0, r3
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b084      	sub	sp, #16
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d101      	bne.n	800936c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	e09d      	b.n	80094a8 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009370:	2b00      	cmp	r3, #0
 8009372:	d108      	bne.n	8009386 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800937c:	d009      	beq.n	8009392 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	61da      	str	r2, [r3, #28]
 8009384:	e005      	b.n	8009392 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d106      	bne.n	80093b2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f7f8 ff29 	bl	8002204 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2202      	movs	r2, #2
 80093b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093c8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80093d2:	d902      	bls.n	80093da <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80093d4:	2300      	movs	r3, #0
 80093d6:	60fb      	str	r3, [r7, #12]
 80093d8:	e002      	b.n	80093e0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80093da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80093e8:	d007      	beq.n	80093fa <HAL_SPI_Init+0xa0>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80093f2:	d002      	beq.n	80093fa <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800940a:	431a      	orrs	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	691b      	ldr	r3, [r3, #16]
 8009410:	f003 0302 	and.w	r3, r3, #2
 8009414:	431a      	orrs	r2, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	695b      	ldr	r3, [r3, #20]
 800941a:	f003 0301 	and.w	r3, r3, #1
 800941e:	431a      	orrs	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	699b      	ldr	r3, [r3, #24]
 8009424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009428:	431a      	orrs	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009432:	431a      	orrs	r2, r3
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a1b      	ldr	r3, [r3, #32]
 8009438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800943c:	ea42 0103 	orr.w	r1, r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009444:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	430a      	orrs	r2, r1
 800944e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	0c1b      	lsrs	r3, r3, #16
 8009456:	f003 0204 	and.w	r2, r3, #4
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945e:	f003 0310 	and.w	r3, r3, #16
 8009462:	431a      	orrs	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009468:	f003 0308 	and.w	r3, r3, #8
 800946c:	431a      	orrs	r2, r3
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009476:	ea42 0103 	orr.w	r1, r2, r3
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	430a      	orrs	r2, r1
 8009486:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	69da      	ldr	r2, [r3, #28]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009496:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2201      	movs	r2, #1
 80094a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d101      	bne.n	80094c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e049      	b.n	8009556 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d106      	bne.n	80094dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f7fa ff7a 	bl	80043d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2202      	movs	r2, #2
 80094e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	3304      	adds	r3, #4
 80094ec:	4619      	mov	r1, r3
 80094ee:	4610      	mov	r0, r2
 80094f0:	f000 fac0 	bl	8009a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2201      	movs	r2, #1
 80094f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2201      	movs	r2, #1
 8009520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
	...

08009560 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009560:	b480      	push	{r7}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800956e:	b2db      	uxtb	r3, r3
 8009570:	2b01      	cmp	r3, #1
 8009572:	d001      	beq.n	8009578 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	e054      	b.n	8009622 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2202      	movs	r2, #2
 800957c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68da      	ldr	r2, [r3, #12]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f042 0201 	orr.w	r2, r2, #1
 800958e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a26      	ldr	r2, [pc, #152]	; (8009630 <HAL_TIM_Base_Start_IT+0xd0>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d022      	beq.n	80095e0 <HAL_TIM_Base_Start_IT+0x80>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095a2:	d01d      	beq.n	80095e0 <HAL_TIM_Base_Start_IT+0x80>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a22      	ldr	r2, [pc, #136]	; (8009634 <HAL_TIM_Base_Start_IT+0xd4>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d018      	beq.n	80095e0 <HAL_TIM_Base_Start_IT+0x80>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a21      	ldr	r2, [pc, #132]	; (8009638 <HAL_TIM_Base_Start_IT+0xd8>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d013      	beq.n	80095e0 <HAL_TIM_Base_Start_IT+0x80>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a1f      	ldr	r2, [pc, #124]	; (800963c <HAL_TIM_Base_Start_IT+0xdc>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d00e      	beq.n	80095e0 <HAL_TIM_Base_Start_IT+0x80>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a1e      	ldr	r2, [pc, #120]	; (8009640 <HAL_TIM_Base_Start_IT+0xe0>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d009      	beq.n	80095e0 <HAL_TIM_Base_Start_IT+0x80>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a1c      	ldr	r2, [pc, #112]	; (8009644 <HAL_TIM_Base_Start_IT+0xe4>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d004      	beq.n	80095e0 <HAL_TIM_Base_Start_IT+0x80>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a1b      	ldr	r2, [pc, #108]	; (8009648 <HAL_TIM_Base_Start_IT+0xe8>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d115      	bne.n	800960c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	689a      	ldr	r2, [r3, #8]
 80095e6:	4b19      	ldr	r3, [pc, #100]	; (800964c <HAL_TIM_Base_Start_IT+0xec>)
 80095e8:	4013      	ands	r3, r2
 80095ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2b06      	cmp	r3, #6
 80095f0:	d015      	beq.n	800961e <HAL_TIM_Base_Start_IT+0xbe>
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095f8:	d011      	beq.n	800961e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f042 0201 	orr.w	r2, r2, #1
 8009608:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800960a:	e008      	b.n	800961e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f042 0201 	orr.w	r2, r2, #1
 800961a:	601a      	str	r2, [r3, #0]
 800961c:	e000      	b.n	8009620 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800961e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3714      	adds	r7, #20
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop
 8009630:	40010000 	.word	0x40010000
 8009634:	40000400 	.word	0x40000400
 8009638:	40000800 	.word	0x40000800
 800963c:	40000c00 	.word	0x40000c00
 8009640:	40010400 	.word	0x40010400
 8009644:	40014000 	.word	0x40014000
 8009648:	40001800 	.word	0x40001800
 800964c:	00010007 	.word	0x00010007

08009650 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	f003 0302 	and.w	r3, r3, #2
 8009662:	2b02      	cmp	r3, #2
 8009664:	d122      	bne.n	80096ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	f003 0302 	and.w	r3, r3, #2
 8009670:	2b02      	cmp	r3, #2
 8009672:	d11b      	bne.n	80096ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f06f 0202 	mvn.w	r2, #2
 800967c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2201      	movs	r2, #1
 8009682:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	699b      	ldr	r3, [r3, #24]
 800968a:	f003 0303 	and.w	r3, r3, #3
 800968e:	2b00      	cmp	r3, #0
 8009690:	d003      	beq.n	800969a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f9d0 	bl	8009a38 <HAL_TIM_IC_CaptureCallback>
 8009698:	e005      	b.n	80096a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f9c2 	bl	8009a24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 f9d3 	bl	8009a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	f003 0304 	and.w	r3, r3, #4
 80096b6:	2b04      	cmp	r3, #4
 80096b8:	d122      	bne.n	8009700 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	f003 0304 	and.w	r3, r3, #4
 80096c4:	2b04      	cmp	r3, #4
 80096c6:	d11b      	bne.n	8009700 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f06f 0204 	mvn.w	r2, #4
 80096d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2202      	movs	r2, #2
 80096d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d003      	beq.n	80096ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f9a6 	bl	8009a38 <HAL_TIM_IC_CaptureCallback>
 80096ec:	e005      	b.n	80096fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f998 	bl	8009a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 f9a9 	bl	8009a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	f003 0308 	and.w	r3, r3, #8
 800970a:	2b08      	cmp	r3, #8
 800970c:	d122      	bne.n	8009754 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	f003 0308 	and.w	r3, r3, #8
 8009718:	2b08      	cmp	r3, #8
 800971a:	d11b      	bne.n	8009754 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f06f 0208 	mvn.w	r2, #8
 8009724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2204      	movs	r2, #4
 800972a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	69db      	ldr	r3, [r3, #28]
 8009732:	f003 0303 	and.w	r3, r3, #3
 8009736:	2b00      	cmp	r3, #0
 8009738:	d003      	beq.n	8009742 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 f97c 	bl	8009a38 <HAL_TIM_IC_CaptureCallback>
 8009740:	e005      	b.n	800974e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f96e 	bl	8009a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 f97f 	bl	8009a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	f003 0310 	and.w	r3, r3, #16
 800975e:	2b10      	cmp	r3, #16
 8009760:	d122      	bne.n	80097a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	f003 0310 	and.w	r3, r3, #16
 800976c:	2b10      	cmp	r3, #16
 800976e:	d11b      	bne.n	80097a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f06f 0210 	mvn.w	r2, #16
 8009778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2208      	movs	r2, #8
 800977e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	69db      	ldr	r3, [r3, #28]
 8009786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800978a:	2b00      	cmp	r3, #0
 800978c:	d003      	beq.n	8009796 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f952 	bl	8009a38 <HAL_TIM_IC_CaptureCallback>
 8009794:	e005      	b.n	80097a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f944 	bl	8009a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f955 	bl	8009a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	f003 0301 	and.w	r3, r3, #1
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d10e      	bne.n	80097d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	f003 0301 	and.w	r3, r3, #1
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d107      	bne.n	80097d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f06f 0201 	mvn.w	r2, #1
 80097cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f7f8 fbf0 	bl	8001fb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097de:	2b80      	cmp	r3, #128	; 0x80
 80097e0:	d10e      	bne.n	8009800 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ec:	2b80      	cmp	r3, #128	; 0x80
 80097ee:	d107      	bne.n	8009800 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80097f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fb0c 	bl	8009e18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	691b      	ldr	r3, [r3, #16]
 8009806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800980a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800980e:	d10e      	bne.n	800982e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68db      	ldr	r3, [r3, #12]
 8009816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800981a:	2b80      	cmp	r3, #128	; 0x80
 800981c:	d107      	bne.n	800982e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 faff 	bl	8009e2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009838:	2b40      	cmp	r3, #64	; 0x40
 800983a:	d10e      	bne.n	800985a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009846:	2b40      	cmp	r3, #64	; 0x40
 8009848:	d107      	bne.n	800985a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 f903 	bl	8009a60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	f003 0320 	and.w	r3, r3, #32
 8009864:	2b20      	cmp	r3, #32
 8009866:	d10e      	bne.n	8009886 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	f003 0320 	and.w	r3, r3, #32
 8009872:	2b20      	cmp	r3, #32
 8009874:	d107      	bne.n	8009886 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f06f 0220 	mvn.w	r2, #32
 800987e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 fabf 	bl	8009e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009886:	bf00      	nop
 8009888:	3708      	adds	r7, #8
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
	...

08009890 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d101      	bne.n	80098ac <HAL_TIM_ConfigClockSource+0x1c>
 80098a8:	2302      	movs	r3, #2
 80098aa:	e0b4      	b.n	8009a16 <HAL_TIM_ConfigClockSource+0x186>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2202      	movs	r2, #2
 80098b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80098c4:	68ba      	ldr	r2, [r7, #8]
 80098c6:	4b56      	ldr	r3, [pc, #344]	; (8009a20 <HAL_TIM_ConfigClockSource+0x190>)
 80098c8:	4013      	ands	r3, r2
 80098ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80098d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098e4:	d03e      	beq.n	8009964 <HAL_TIM_ConfigClockSource+0xd4>
 80098e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098ea:	f200 8087 	bhi.w	80099fc <HAL_TIM_ConfigClockSource+0x16c>
 80098ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098f2:	f000 8086 	beq.w	8009a02 <HAL_TIM_ConfigClockSource+0x172>
 80098f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098fa:	d87f      	bhi.n	80099fc <HAL_TIM_ConfigClockSource+0x16c>
 80098fc:	2b70      	cmp	r3, #112	; 0x70
 80098fe:	d01a      	beq.n	8009936 <HAL_TIM_ConfigClockSource+0xa6>
 8009900:	2b70      	cmp	r3, #112	; 0x70
 8009902:	d87b      	bhi.n	80099fc <HAL_TIM_ConfigClockSource+0x16c>
 8009904:	2b60      	cmp	r3, #96	; 0x60
 8009906:	d050      	beq.n	80099aa <HAL_TIM_ConfigClockSource+0x11a>
 8009908:	2b60      	cmp	r3, #96	; 0x60
 800990a:	d877      	bhi.n	80099fc <HAL_TIM_ConfigClockSource+0x16c>
 800990c:	2b50      	cmp	r3, #80	; 0x50
 800990e:	d03c      	beq.n	800998a <HAL_TIM_ConfigClockSource+0xfa>
 8009910:	2b50      	cmp	r3, #80	; 0x50
 8009912:	d873      	bhi.n	80099fc <HAL_TIM_ConfigClockSource+0x16c>
 8009914:	2b40      	cmp	r3, #64	; 0x40
 8009916:	d058      	beq.n	80099ca <HAL_TIM_ConfigClockSource+0x13a>
 8009918:	2b40      	cmp	r3, #64	; 0x40
 800991a:	d86f      	bhi.n	80099fc <HAL_TIM_ConfigClockSource+0x16c>
 800991c:	2b30      	cmp	r3, #48	; 0x30
 800991e:	d064      	beq.n	80099ea <HAL_TIM_ConfigClockSource+0x15a>
 8009920:	2b30      	cmp	r3, #48	; 0x30
 8009922:	d86b      	bhi.n	80099fc <HAL_TIM_ConfigClockSource+0x16c>
 8009924:	2b20      	cmp	r3, #32
 8009926:	d060      	beq.n	80099ea <HAL_TIM_ConfigClockSource+0x15a>
 8009928:	2b20      	cmp	r3, #32
 800992a:	d867      	bhi.n	80099fc <HAL_TIM_ConfigClockSource+0x16c>
 800992c:	2b00      	cmp	r3, #0
 800992e:	d05c      	beq.n	80099ea <HAL_TIM_ConfigClockSource+0x15a>
 8009930:	2b10      	cmp	r3, #16
 8009932:	d05a      	beq.n	80099ea <HAL_TIM_ConfigClockSource+0x15a>
 8009934:	e062      	b.n	80099fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009946:	f000 f9af 	bl	8009ca8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009958:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	609a      	str	r2, [r3, #8]
      break;
 8009962:	e04f      	b.n	8009a04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009974:	f000 f998 	bl	8009ca8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	689a      	ldr	r2, [r3, #8]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009986:	609a      	str	r2, [r3, #8]
      break;
 8009988:	e03c      	b.n	8009a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009996:	461a      	mov	r2, r3
 8009998:	f000 f90c 	bl	8009bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2150      	movs	r1, #80	; 0x50
 80099a2:	4618      	mov	r0, r3
 80099a4:	f000 f965 	bl	8009c72 <TIM_ITRx_SetConfig>
      break;
 80099a8:	e02c      	b.n	8009a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80099b6:	461a      	mov	r2, r3
 80099b8:	f000 f92b 	bl	8009c12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2160      	movs	r1, #96	; 0x60
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 f955 	bl	8009c72 <TIM_ITRx_SetConfig>
      break;
 80099c8:	e01c      	b.n	8009a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80099d6:	461a      	mov	r2, r3
 80099d8:	f000 f8ec 	bl	8009bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2140      	movs	r1, #64	; 0x40
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 f945 	bl	8009c72 <TIM_ITRx_SetConfig>
      break;
 80099e8:	e00c      	b.n	8009a04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4619      	mov	r1, r3
 80099f4:	4610      	mov	r0, r2
 80099f6:	f000 f93c 	bl	8009c72 <TIM_ITRx_SetConfig>
      break;
 80099fa:	e003      	b.n	8009a04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009a00:	e000      	b.n	8009a04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009a02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	fffeff88 	.word	0xfffeff88

08009a24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a54:	bf00      	nop
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a68:	bf00      	nop
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b085      	sub	sp, #20
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4a40      	ldr	r2, [pc, #256]	; (8009b88 <TIM_Base_SetConfig+0x114>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d013      	beq.n	8009ab4 <TIM_Base_SetConfig+0x40>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a92:	d00f      	beq.n	8009ab4 <TIM_Base_SetConfig+0x40>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a3d      	ldr	r2, [pc, #244]	; (8009b8c <TIM_Base_SetConfig+0x118>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d00b      	beq.n	8009ab4 <TIM_Base_SetConfig+0x40>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a3c      	ldr	r2, [pc, #240]	; (8009b90 <TIM_Base_SetConfig+0x11c>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d007      	beq.n	8009ab4 <TIM_Base_SetConfig+0x40>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a3b      	ldr	r2, [pc, #236]	; (8009b94 <TIM_Base_SetConfig+0x120>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d003      	beq.n	8009ab4 <TIM_Base_SetConfig+0x40>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a3a      	ldr	r2, [pc, #232]	; (8009b98 <TIM_Base_SetConfig+0x124>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d108      	bne.n	8009ac6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4a2f      	ldr	r2, [pc, #188]	; (8009b88 <TIM_Base_SetConfig+0x114>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d02b      	beq.n	8009b26 <TIM_Base_SetConfig+0xb2>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ad4:	d027      	beq.n	8009b26 <TIM_Base_SetConfig+0xb2>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4a2c      	ldr	r2, [pc, #176]	; (8009b8c <TIM_Base_SetConfig+0x118>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d023      	beq.n	8009b26 <TIM_Base_SetConfig+0xb2>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a2b      	ldr	r2, [pc, #172]	; (8009b90 <TIM_Base_SetConfig+0x11c>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d01f      	beq.n	8009b26 <TIM_Base_SetConfig+0xb2>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4a2a      	ldr	r2, [pc, #168]	; (8009b94 <TIM_Base_SetConfig+0x120>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d01b      	beq.n	8009b26 <TIM_Base_SetConfig+0xb2>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a29      	ldr	r2, [pc, #164]	; (8009b98 <TIM_Base_SetConfig+0x124>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d017      	beq.n	8009b26 <TIM_Base_SetConfig+0xb2>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4a28      	ldr	r2, [pc, #160]	; (8009b9c <TIM_Base_SetConfig+0x128>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d013      	beq.n	8009b26 <TIM_Base_SetConfig+0xb2>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4a27      	ldr	r2, [pc, #156]	; (8009ba0 <TIM_Base_SetConfig+0x12c>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d00f      	beq.n	8009b26 <TIM_Base_SetConfig+0xb2>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a26      	ldr	r2, [pc, #152]	; (8009ba4 <TIM_Base_SetConfig+0x130>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d00b      	beq.n	8009b26 <TIM_Base_SetConfig+0xb2>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a25      	ldr	r2, [pc, #148]	; (8009ba8 <TIM_Base_SetConfig+0x134>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d007      	beq.n	8009b26 <TIM_Base_SetConfig+0xb2>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4a24      	ldr	r2, [pc, #144]	; (8009bac <TIM_Base_SetConfig+0x138>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d003      	beq.n	8009b26 <TIM_Base_SetConfig+0xb2>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a23      	ldr	r2, [pc, #140]	; (8009bb0 <TIM_Base_SetConfig+0x13c>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d108      	bne.n	8009b38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	4313      	orrs	r3, r2
 8009b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	695b      	ldr	r3, [r3, #20]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	689a      	ldr	r2, [r3, #8]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4a0a      	ldr	r2, [pc, #40]	; (8009b88 <TIM_Base_SetConfig+0x114>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d003      	beq.n	8009b6c <TIM_Base_SetConfig+0xf8>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a0c      	ldr	r2, [pc, #48]	; (8009b98 <TIM_Base_SetConfig+0x124>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d103      	bne.n	8009b74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	691a      	ldr	r2, [r3, #16]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2201      	movs	r2, #1
 8009b78:	615a      	str	r2, [r3, #20]
}
 8009b7a:	bf00      	nop
 8009b7c:	3714      	adds	r7, #20
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	40010000 	.word	0x40010000
 8009b8c:	40000400 	.word	0x40000400
 8009b90:	40000800 	.word	0x40000800
 8009b94:	40000c00 	.word	0x40000c00
 8009b98:	40010400 	.word	0x40010400
 8009b9c:	40014000 	.word	0x40014000
 8009ba0:	40014400 	.word	0x40014400
 8009ba4:	40014800 	.word	0x40014800
 8009ba8:	40001800 	.word	0x40001800
 8009bac:	40001c00 	.word	0x40001c00
 8009bb0:	40002000 	.word	0x40002000

08009bb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b087      	sub	sp, #28
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6a1b      	ldr	r3, [r3, #32]
 8009bc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6a1b      	ldr	r3, [r3, #32]
 8009bca:	f023 0201 	bic.w	r2, r3, #1
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	699b      	ldr	r3, [r3, #24]
 8009bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	011b      	lsls	r3, r3, #4
 8009be4:	693a      	ldr	r2, [r7, #16]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	f023 030a 	bic.w	r3, r3, #10
 8009bf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009bf2:	697a      	ldr	r2, [r7, #20]
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	693a      	ldr	r2, [r7, #16]
 8009bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	697a      	ldr	r2, [r7, #20]
 8009c04:	621a      	str	r2, [r3, #32]
}
 8009c06:	bf00      	nop
 8009c08:	371c      	adds	r7, #28
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c12:	b480      	push	{r7}
 8009c14:	b087      	sub	sp, #28
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	60f8      	str	r0, [r7, #12]
 8009c1a:	60b9      	str	r1, [r7, #8]
 8009c1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6a1b      	ldr	r3, [r3, #32]
 8009c22:	f023 0210 	bic.w	r2, r3, #16
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	699b      	ldr	r3, [r3, #24]
 8009c2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6a1b      	ldr	r3, [r3, #32]
 8009c34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	031b      	lsls	r3, r3, #12
 8009c42:	697a      	ldr	r2, [r7, #20]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	011b      	lsls	r3, r3, #4
 8009c54:	693a      	ldr	r2, [r7, #16]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	621a      	str	r2, [r3, #32]
}
 8009c66:	bf00      	nop
 8009c68:	371c      	adds	r7, #28
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr

08009c72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c72:	b480      	push	{r7}
 8009c74:	b085      	sub	sp, #20
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c8a:	683a      	ldr	r2, [r7, #0]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	f043 0307 	orr.w	r3, r3, #7
 8009c94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	609a      	str	r2, [r3, #8]
}
 8009c9c:	bf00      	nop
 8009c9e:	3714      	adds	r7, #20
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b087      	sub	sp, #28
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
 8009cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009cc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	021a      	lsls	r2, r3, #8
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	431a      	orrs	r2, r3
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	697a      	ldr	r2, [r7, #20]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	697a      	ldr	r2, [r7, #20]
 8009cda:	609a      	str	r2, [r3, #8]
}
 8009cdc:	bf00      	nop
 8009cde:	371c      	adds	r7, #28
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d101      	bne.n	8009d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	e06d      	b.n	8009ddc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2202      	movs	r2, #2
 8009d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a30      	ldr	r2, [pc, #192]	; (8009de8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d004      	beq.n	8009d34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a2f      	ldr	r2, [pc, #188]	; (8009dec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d108      	bne.n	8009d46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009d3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a20      	ldr	r2, [pc, #128]	; (8009de8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d022      	beq.n	8009db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d72:	d01d      	beq.n	8009db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a1d      	ldr	r2, [pc, #116]	; (8009df0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d018      	beq.n	8009db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a1c      	ldr	r2, [pc, #112]	; (8009df4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d013      	beq.n	8009db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a1a      	ldr	r2, [pc, #104]	; (8009df8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d00e      	beq.n	8009db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a15      	ldr	r2, [pc, #84]	; (8009dec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d009      	beq.n	8009db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a16      	ldr	r2, [pc, #88]	; (8009dfc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d004      	beq.n	8009db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a15      	ldr	r2, [pc, #84]	; (8009e00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d10c      	bne.n	8009dca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009db6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	68ba      	ldr	r2, [r7, #8]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68ba      	ldr	r2, [r7, #8]
 8009dc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3714      	adds	r7, #20
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr
 8009de8:	40010000 	.word	0x40010000
 8009dec:	40010400 	.word	0x40010400
 8009df0:	40000400 	.word	0x40000400
 8009df4:	40000800 	.word	0x40000800
 8009df8:	40000c00 	.word	0x40000c00
 8009dfc:	40014000 	.word	0x40014000
 8009e00:	40001800 	.word	0x40001800

08009e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009e34:	bf00      	nop
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d101      	bne.n	8009e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e040      	b.n	8009ed4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d106      	bne.n	8009e68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f7fa fbd6 	bl	8004614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2224      	movs	r2, #36	; 0x24
 8009e6c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f022 0201 	bic.w	r2, r2, #1
 8009e7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 f82c 	bl	8009edc <UART_SetConfig>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d101      	bne.n	8009e8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e022      	b.n	8009ed4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d002      	beq.n	8009e9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 fa84 	bl	800a3a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	685a      	ldr	r2, [r3, #4]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009eaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	689a      	ldr	r2, [r3, #8]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009eba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f042 0201 	orr.w	r2, r2, #1
 8009eca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 fb0b 	bl	800a4e8 <UART_CheckIdleState>
 8009ed2:	4603      	mov	r3, r0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b088      	sub	sp, #32
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	689a      	ldr	r2, [r3, #8]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	431a      	orrs	r2, r3
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	695b      	ldr	r3, [r3, #20]
 8009ef6:	431a      	orrs	r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	69db      	ldr	r3, [r3, #28]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	4ba6      	ldr	r3, [pc, #664]	; (800a1a0 <UART_SetConfig+0x2c4>)
 8009f08:	4013      	ands	r3, r2
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	6812      	ldr	r2, [r2, #0]
 8009f0e:	6979      	ldr	r1, [r7, #20]
 8009f10:	430b      	orrs	r3, r1
 8009f12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	68da      	ldr	r2, [r3, #12]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	430a      	orrs	r2, r1
 8009f28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	699b      	ldr	r3, [r3, #24]
 8009f2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6a1b      	ldr	r3, [r3, #32]
 8009f34:	697a      	ldr	r2, [r7, #20]
 8009f36:	4313      	orrs	r3, r2
 8009f38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	697a      	ldr	r2, [r7, #20]
 8009f4a:	430a      	orrs	r2, r1
 8009f4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a94      	ldr	r2, [pc, #592]	; (800a1a4 <UART_SetConfig+0x2c8>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d120      	bne.n	8009f9a <UART_SetConfig+0xbe>
 8009f58:	4b93      	ldr	r3, [pc, #588]	; (800a1a8 <UART_SetConfig+0x2cc>)
 8009f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f5e:	f003 0303 	and.w	r3, r3, #3
 8009f62:	2b03      	cmp	r3, #3
 8009f64:	d816      	bhi.n	8009f94 <UART_SetConfig+0xb8>
 8009f66:	a201      	add	r2, pc, #4	; (adr r2, 8009f6c <UART_SetConfig+0x90>)
 8009f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6c:	08009f7d 	.word	0x08009f7d
 8009f70:	08009f89 	.word	0x08009f89
 8009f74:	08009f83 	.word	0x08009f83
 8009f78:	08009f8f 	.word	0x08009f8f
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	77fb      	strb	r3, [r7, #31]
 8009f80:	e150      	b.n	800a224 <UART_SetConfig+0x348>
 8009f82:	2302      	movs	r3, #2
 8009f84:	77fb      	strb	r3, [r7, #31]
 8009f86:	e14d      	b.n	800a224 <UART_SetConfig+0x348>
 8009f88:	2304      	movs	r3, #4
 8009f8a:	77fb      	strb	r3, [r7, #31]
 8009f8c:	e14a      	b.n	800a224 <UART_SetConfig+0x348>
 8009f8e:	2308      	movs	r3, #8
 8009f90:	77fb      	strb	r3, [r7, #31]
 8009f92:	e147      	b.n	800a224 <UART_SetConfig+0x348>
 8009f94:	2310      	movs	r3, #16
 8009f96:	77fb      	strb	r3, [r7, #31]
 8009f98:	e144      	b.n	800a224 <UART_SetConfig+0x348>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a83      	ldr	r2, [pc, #524]	; (800a1ac <UART_SetConfig+0x2d0>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d132      	bne.n	800a00a <UART_SetConfig+0x12e>
 8009fa4:	4b80      	ldr	r3, [pc, #512]	; (800a1a8 <UART_SetConfig+0x2cc>)
 8009fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009faa:	f003 030c 	and.w	r3, r3, #12
 8009fae:	2b0c      	cmp	r3, #12
 8009fb0:	d828      	bhi.n	800a004 <UART_SetConfig+0x128>
 8009fb2:	a201      	add	r2, pc, #4	; (adr r2, 8009fb8 <UART_SetConfig+0xdc>)
 8009fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb8:	08009fed 	.word	0x08009fed
 8009fbc:	0800a005 	.word	0x0800a005
 8009fc0:	0800a005 	.word	0x0800a005
 8009fc4:	0800a005 	.word	0x0800a005
 8009fc8:	08009ff9 	.word	0x08009ff9
 8009fcc:	0800a005 	.word	0x0800a005
 8009fd0:	0800a005 	.word	0x0800a005
 8009fd4:	0800a005 	.word	0x0800a005
 8009fd8:	08009ff3 	.word	0x08009ff3
 8009fdc:	0800a005 	.word	0x0800a005
 8009fe0:	0800a005 	.word	0x0800a005
 8009fe4:	0800a005 	.word	0x0800a005
 8009fe8:	08009fff 	.word	0x08009fff
 8009fec:	2300      	movs	r3, #0
 8009fee:	77fb      	strb	r3, [r7, #31]
 8009ff0:	e118      	b.n	800a224 <UART_SetConfig+0x348>
 8009ff2:	2302      	movs	r3, #2
 8009ff4:	77fb      	strb	r3, [r7, #31]
 8009ff6:	e115      	b.n	800a224 <UART_SetConfig+0x348>
 8009ff8:	2304      	movs	r3, #4
 8009ffa:	77fb      	strb	r3, [r7, #31]
 8009ffc:	e112      	b.n	800a224 <UART_SetConfig+0x348>
 8009ffe:	2308      	movs	r3, #8
 800a000:	77fb      	strb	r3, [r7, #31]
 800a002:	e10f      	b.n	800a224 <UART_SetConfig+0x348>
 800a004:	2310      	movs	r3, #16
 800a006:	77fb      	strb	r3, [r7, #31]
 800a008:	e10c      	b.n	800a224 <UART_SetConfig+0x348>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a68      	ldr	r2, [pc, #416]	; (800a1b0 <UART_SetConfig+0x2d4>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d120      	bne.n	800a056 <UART_SetConfig+0x17a>
 800a014:	4b64      	ldr	r3, [pc, #400]	; (800a1a8 <UART_SetConfig+0x2cc>)
 800a016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a01a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a01e:	2b30      	cmp	r3, #48	; 0x30
 800a020:	d013      	beq.n	800a04a <UART_SetConfig+0x16e>
 800a022:	2b30      	cmp	r3, #48	; 0x30
 800a024:	d814      	bhi.n	800a050 <UART_SetConfig+0x174>
 800a026:	2b20      	cmp	r3, #32
 800a028:	d009      	beq.n	800a03e <UART_SetConfig+0x162>
 800a02a:	2b20      	cmp	r3, #32
 800a02c:	d810      	bhi.n	800a050 <UART_SetConfig+0x174>
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d002      	beq.n	800a038 <UART_SetConfig+0x15c>
 800a032:	2b10      	cmp	r3, #16
 800a034:	d006      	beq.n	800a044 <UART_SetConfig+0x168>
 800a036:	e00b      	b.n	800a050 <UART_SetConfig+0x174>
 800a038:	2300      	movs	r3, #0
 800a03a:	77fb      	strb	r3, [r7, #31]
 800a03c:	e0f2      	b.n	800a224 <UART_SetConfig+0x348>
 800a03e:	2302      	movs	r3, #2
 800a040:	77fb      	strb	r3, [r7, #31]
 800a042:	e0ef      	b.n	800a224 <UART_SetConfig+0x348>
 800a044:	2304      	movs	r3, #4
 800a046:	77fb      	strb	r3, [r7, #31]
 800a048:	e0ec      	b.n	800a224 <UART_SetConfig+0x348>
 800a04a:	2308      	movs	r3, #8
 800a04c:	77fb      	strb	r3, [r7, #31]
 800a04e:	e0e9      	b.n	800a224 <UART_SetConfig+0x348>
 800a050:	2310      	movs	r3, #16
 800a052:	77fb      	strb	r3, [r7, #31]
 800a054:	e0e6      	b.n	800a224 <UART_SetConfig+0x348>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a56      	ldr	r2, [pc, #344]	; (800a1b4 <UART_SetConfig+0x2d8>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d120      	bne.n	800a0a2 <UART_SetConfig+0x1c6>
 800a060:	4b51      	ldr	r3, [pc, #324]	; (800a1a8 <UART_SetConfig+0x2cc>)
 800a062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a066:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a06a:	2bc0      	cmp	r3, #192	; 0xc0
 800a06c:	d013      	beq.n	800a096 <UART_SetConfig+0x1ba>
 800a06e:	2bc0      	cmp	r3, #192	; 0xc0
 800a070:	d814      	bhi.n	800a09c <UART_SetConfig+0x1c0>
 800a072:	2b80      	cmp	r3, #128	; 0x80
 800a074:	d009      	beq.n	800a08a <UART_SetConfig+0x1ae>
 800a076:	2b80      	cmp	r3, #128	; 0x80
 800a078:	d810      	bhi.n	800a09c <UART_SetConfig+0x1c0>
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d002      	beq.n	800a084 <UART_SetConfig+0x1a8>
 800a07e:	2b40      	cmp	r3, #64	; 0x40
 800a080:	d006      	beq.n	800a090 <UART_SetConfig+0x1b4>
 800a082:	e00b      	b.n	800a09c <UART_SetConfig+0x1c0>
 800a084:	2300      	movs	r3, #0
 800a086:	77fb      	strb	r3, [r7, #31]
 800a088:	e0cc      	b.n	800a224 <UART_SetConfig+0x348>
 800a08a:	2302      	movs	r3, #2
 800a08c:	77fb      	strb	r3, [r7, #31]
 800a08e:	e0c9      	b.n	800a224 <UART_SetConfig+0x348>
 800a090:	2304      	movs	r3, #4
 800a092:	77fb      	strb	r3, [r7, #31]
 800a094:	e0c6      	b.n	800a224 <UART_SetConfig+0x348>
 800a096:	2308      	movs	r3, #8
 800a098:	77fb      	strb	r3, [r7, #31]
 800a09a:	e0c3      	b.n	800a224 <UART_SetConfig+0x348>
 800a09c:	2310      	movs	r3, #16
 800a09e:	77fb      	strb	r3, [r7, #31]
 800a0a0:	e0c0      	b.n	800a224 <UART_SetConfig+0x348>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a44      	ldr	r2, [pc, #272]	; (800a1b8 <UART_SetConfig+0x2dc>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d125      	bne.n	800a0f8 <UART_SetConfig+0x21c>
 800a0ac:	4b3e      	ldr	r3, [pc, #248]	; (800a1a8 <UART_SetConfig+0x2cc>)
 800a0ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0ba:	d017      	beq.n	800a0ec <UART_SetConfig+0x210>
 800a0bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0c0:	d817      	bhi.n	800a0f2 <UART_SetConfig+0x216>
 800a0c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0c6:	d00b      	beq.n	800a0e0 <UART_SetConfig+0x204>
 800a0c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0cc:	d811      	bhi.n	800a0f2 <UART_SetConfig+0x216>
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d003      	beq.n	800a0da <UART_SetConfig+0x1fe>
 800a0d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0d6:	d006      	beq.n	800a0e6 <UART_SetConfig+0x20a>
 800a0d8:	e00b      	b.n	800a0f2 <UART_SetConfig+0x216>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	77fb      	strb	r3, [r7, #31]
 800a0de:	e0a1      	b.n	800a224 <UART_SetConfig+0x348>
 800a0e0:	2302      	movs	r3, #2
 800a0e2:	77fb      	strb	r3, [r7, #31]
 800a0e4:	e09e      	b.n	800a224 <UART_SetConfig+0x348>
 800a0e6:	2304      	movs	r3, #4
 800a0e8:	77fb      	strb	r3, [r7, #31]
 800a0ea:	e09b      	b.n	800a224 <UART_SetConfig+0x348>
 800a0ec:	2308      	movs	r3, #8
 800a0ee:	77fb      	strb	r3, [r7, #31]
 800a0f0:	e098      	b.n	800a224 <UART_SetConfig+0x348>
 800a0f2:	2310      	movs	r3, #16
 800a0f4:	77fb      	strb	r3, [r7, #31]
 800a0f6:	e095      	b.n	800a224 <UART_SetConfig+0x348>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a2f      	ldr	r2, [pc, #188]	; (800a1bc <UART_SetConfig+0x2e0>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d125      	bne.n	800a14e <UART_SetConfig+0x272>
 800a102:	4b29      	ldr	r3, [pc, #164]	; (800a1a8 <UART_SetConfig+0x2cc>)
 800a104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a108:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a10c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a110:	d017      	beq.n	800a142 <UART_SetConfig+0x266>
 800a112:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a116:	d817      	bhi.n	800a148 <UART_SetConfig+0x26c>
 800a118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a11c:	d00b      	beq.n	800a136 <UART_SetConfig+0x25a>
 800a11e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a122:	d811      	bhi.n	800a148 <UART_SetConfig+0x26c>
 800a124:	2b00      	cmp	r3, #0
 800a126:	d003      	beq.n	800a130 <UART_SetConfig+0x254>
 800a128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a12c:	d006      	beq.n	800a13c <UART_SetConfig+0x260>
 800a12e:	e00b      	b.n	800a148 <UART_SetConfig+0x26c>
 800a130:	2301      	movs	r3, #1
 800a132:	77fb      	strb	r3, [r7, #31]
 800a134:	e076      	b.n	800a224 <UART_SetConfig+0x348>
 800a136:	2302      	movs	r3, #2
 800a138:	77fb      	strb	r3, [r7, #31]
 800a13a:	e073      	b.n	800a224 <UART_SetConfig+0x348>
 800a13c:	2304      	movs	r3, #4
 800a13e:	77fb      	strb	r3, [r7, #31]
 800a140:	e070      	b.n	800a224 <UART_SetConfig+0x348>
 800a142:	2308      	movs	r3, #8
 800a144:	77fb      	strb	r3, [r7, #31]
 800a146:	e06d      	b.n	800a224 <UART_SetConfig+0x348>
 800a148:	2310      	movs	r3, #16
 800a14a:	77fb      	strb	r3, [r7, #31]
 800a14c:	e06a      	b.n	800a224 <UART_SetConfig+0x348>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a1b      	ldr	r2, [pc, #108]	; (800a1c0 <UART_SetConfig+0x2e4>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d138      	bne.n	800a1ca <UART_SetConfig+0x2ee>
 800a158:	4b13      	ldr	r3, [pc, #76]	; (800a1a8 <UART_SetConfig+0x2cc>)
 800a15a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a15e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a162:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a166:	d017      	beq.n	800a198 <UART_SetConfig+0x2bc>
 800a168:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a16c:	d82a      	bhi.n	800a1c4 <UART_SetConfig+0x2e8>
 800a16e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a172:	d00b      	beq.n	800a18c <UART_SetConfig+0x2b0>
 800a174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a178:	d824      	bhi.n	800a1c4 <UART_SetConfig+0x2e8>
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d003      	beq.n	800a186 <UART_SetConfig+0x2aa>
 800a17e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a182:	d006      	beq.n	800a192 <UART_SetConfig+0x2b6>
 800a184:	e01e      	b.n	800a1c4 <UART_SetConfig+0x2e8>
 800a186:	2300      	movs	r3, #0
 800a188:	77fb      	strb	r3, [r7, #31]
 800a18a:	e04b      	b.n	800a224 <UART_SetConfig+0x348>
 800a18c:	2302      	movs	r3, #2
 800a18e:	77fb      	strb	r3, [r7, #31]
 800a190:	e048      	b.n	800a224 <UART_SetConfig+0x348>
 800a192:	2304      	movs	r3, #4
 800a194:	77fb      	strb	r3, [r7, #31]
 800a196:	e045      	b.n	800a224 <UART_SetConfig+0x348>
 800a198:	2308      	movs	r3, #8
 800a19a:	77fb      	strb	r3, [r7, #31]
 800a19c:	e042      	b.n	800a224 <UART_SetConfig+0x348>
 800a19e:	bf00      	nop
 800a1a0:	efff69f3 	.word	0xefff69f3
 800a1a4:	40011000 	.word	0x40011000
 800a1a8:	40023800 	.word	0x40023800
 800a1ac:	40004400 	.word	0x40004400
 800a1b0:	40004800 	.word	0x40004800
 800a1b4:	40004c00 	.word	0x40004c00
 800a1b8:	40005000 	.word	0x40005000
 800a1bc:	40011400 	.word	0x40011400
 800a1c0:	40007800 	.word	0x40007800
 800a1c4:	2310      	movs	r3, #16
 800a1c6:	77fb      	strb	r3, [r7, #31]
 800a1c8:	e02c      	b.n	800a224 <UART_SetConfig+0x348>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a72      	ldr	r2, [pc, #456]	; (800a398 <UART_SetConfig+0x4bc>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d125      	bne.n	800a220 <UART_SetConfig+0x344>
 800a1d4:	4b71      	ldr	r3, [pc, #452]	; (800a39c <UART_SetConfig+0x4c0>)
 800a1d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a1de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a1e2:	d017      	beq.n	800a214 <UART_SetConfig+0x338>
 800a1e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a1e8:	d817      	bhi.n	800a21a <UART_SetConfig+0x33e>
 800a1ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1ee:	d00b      	beq.n	800a208 <UART_SetConfig+0x32c>
 800a1f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1f4:	d811      	bhi.n	800a21a <UART_SetConfig+0x33e>
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d003      	beq.n	800a202 <UART_SetConfig+0x326>
 800a1fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1fe:	d006      	beq.n	800a20e <UART_SetConfig+0x332>
 800a200:	e00b      	b.n	800a21a <UART_SetConfig+0x33e>
 800a202:	2300      	movs	r3, #0
 800a204:	77fb      	strb	r3, [r7, #31]
 800a206:	e00d      	b.n	800a224 <UART_SetConfig+0x348>
 800a208:	2302      	movs	r3, #2
 800a20a:	77fb      	strb	r3, [r7, #31]
 800a20c:	e00a      	b.n	800a224 <UART_SetConfig+0x348>
 800a20e:	2304      	movs	r3, #4
 800a210:	77fb      	strb	r3, [r7, #31]
 800a212:	e007      	b.n	800a224 <UART_SetConfig+0x348>
 800a214:	2308      	movs	r3, #8
 800a216:	77fb      	strb	r3, [r7, #31]
 800a218:	e004      	b.n	800a224 <UART_SetConfig+0x348>
 800a21a:	2310      	movs	r3, #16
 800a21c:	77fb      	strb	r3, [r7, #31]
 800a21e:	e001      	b.n	800a224 <UART_SetConfig+0x348>
 800a220:	2310      	movs	r3, #16
 800a222:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	69db      	ldr	r3, [r3, #28]
 800a228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a22c:	d15b      	bne.n	800a2e6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a22e:	7ffb      	ldrb	r3, [r7, #31]
 800a230:	2b08      	cmp	r3, #8
 800a232:	d828      	bhi.n	800a286 <UART_SetConfig+0x3aa>
 800a234:	a201      	add	r2, pc, #4	; (adr r2, 800a23c <UART_SetConfig+0x360>)
 800a236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a23a:	bf00      	nop
 800a23c:	0800a261 	.word	0x0800a261
 800a240:	0800a269 	.word	0x0800a269
 800a244:	0800a271 	.word	0x0800a271
 800a248:	0800a287 	.word	0x0800a287
 800a24c:	0800a277 	.word	0x0800a277
 800a250:	0800a287 	.word	0x0800a287
 800a254:	0800a287 	.word	0x0800a287
 800a258:	0800a287 	.word	0x0800a287
 800a25c:	0800a27f 	.word	0x0800a27f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a260:	f7fd ffca 	bl	80081f8 <HAL_RCC_GetPCLK1Freq>
 800a264:	61b8      	str	r0, [r7, #24]
        break;
 800a266:	e013      	b.n	800a290 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a268:	f7fd ffda 	bl	8008220 <HAL_RCC_GetPCLK2Freq>
 800a26c:	61b8      	str	r0, [r7, #24]
        break;
 800a26e:	e00f      	b.n	800a290 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a270:	4b4b      	ldr	r3, [pc, #300]	; (800a3a0 <UART_SetConfig+0x4c4>)
 800a272:	61bb      	str	r3, [r7, #24]
        break;
 800a274:	e00c      	b.n	800a290 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a276:	f7fd feed 	bl	8008054 <HAL_RCC_GetSysClockFreq>
 800a27a:	61b8      	str	r0, [r7, #24]
        break;
 800a27c:	e008      	b.n	800a290 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a27e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a282:	61bb      	str	r3, [r7, #24]
        break;
 800a284:	e004      	b.n	800a290 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a286:	2300      	movs	r3, #0
 800a288:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	77bb      	strb	r3, [r7, #30]
        break;
 800a28e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d074      	beq.n	800a380 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	005a      	lsls	r2, r3, #1
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	085b      	lsrs	r3, r3, #1
 800a2a0:	441a      	add	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	2b0f      	cmp	r3, #15
 800a2b0:	d916      	bls.n	800a2e0 <UART_SetConfig+0x404>
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2b8:	d212      	bcs.n	800a2e0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	f023 030f 	bic.w	r3, r3, #15
 800a2c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	085b      	lsrs	r3, r3, #1
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	f003 0307 	and.w	r3, r3, #7
 800a2ce:	b29a      	uxth	r2, r3
 800a2d0:	89fb      	ldrh	r3, [r7, #14]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	89fa      	ldrh	r2, [r7, #14]
 800a2dc:	60da      	str	r2, [r3, #12]
 800a2de:	e04f      	b.n	800a380 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	77bb      	strb	r3, [r7, #30]
 800a2e4:	e04c      	b.n	800a380 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2e6:	7ffb      	ldrb	r3, [r7, #31]
 800a2e8:	2b08      	cmp	r3, #8
 800a2ea:	d828      	bhi.n	800a33e <UART_SetConfig+0x462>
 800a2ec:	a201      	add	r2, pc, #4	; (adr r2, 800a2f4 <UART_SetConfig+0x418>)
 800a2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f2:	bf00      	nop
 800a2f4:	0800a319 	.word	0x0800a319
 800a2f8:	0800a321 	.word	0x0800a321
 800a2fc:	0800a329 	.word	0x0800a329
 800a300:	0800a33f 	.word	0x0800a33f
 800a304:	0800a32f 	.word	0x0800a32f
 800a308:	0800a33f 	.word	0x0800a33f
 800a30c:	0800a33f 	.word	0x0800a33f
 800a310:	0800a33f 	.word	0x0800a33f
 800a314:	0800a337 	.word	0x0800a337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a318:	f7fd ff6e 	bl	80081f8 <HAL_RCC_GetPCLK1Freq>
 800a31c:	61b8      	str	r0, [r7, #24]
        break;
 800a31e:	e013      	b.n	800a348 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a320:	f7fd ff7e 	bl	8008220 <HAL_RCC_GetPCLK2Freq>
 800a324:	61b8      	str	r0, [r7, #24]
        break;
 800a326:	e00f      	b.n	800a348 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a328:	4b1d      	ldr	r3, [pc, #116]	; (800a3a0 <UART_SetConfig+0x4c4>)
 800a32a:	61bb      	str	r3, [r7, #24]
        break;
 800a32c:	e00c      	b.n	800a348 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a32e:	f7fd fe91 	bl	8008054 <HAL_RCC_GetSysClockFreq>
 800a332:	61b8      	str	r0, [r7, #24]
        break;
 800a334:	e008      	b.n	800a348 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a33a:	61bb      	str	r3, [r7, #24]
        break;
 800a33c:	e004      	b.n	800a348 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a33e:	2300      	movs	r3, #0
 800a340:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	77bb      	strb	r3, [r7, #30]
        break;
 800a346:	bf00      	nop
    }

    if (pclk != 0U)
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d018      	beq.n	800a380 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	085a      	lsrs	r2, r3, #1
 800a354:	69bb      	ldr	r3, [r7, #24]
 800a356:	441a      	add	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a360:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	2b0f      	cmp	r3, #15
 800a366:	d909      	bls.n	800a37c <UART_SetConfig+0x4a0>
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a36e:	d205      	bcs.n	800a37c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	b29a      	uxth	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	60da      	str	r2, [r3, #12]
 800a37a:	e001      	b.n	800a380 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a38c:	7fbb      	ldrb	r3, [r7, #30]
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3720      	adds	r7, #32
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	40007c00 	.word	0x40007c00
 800a39c:	40023800 	.word	0x40023800
 800a3a0:	00f42400 	.word	0x00f42400

0800a3a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b0:	f003 0301 	and.w	r3, r3, #1
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d00a      	beq.n	800a3ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	430a      	orrs	r2, r1
 800a3cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d2:	f003 0302 	and.w	r3, r3, #2
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d00a      	beq.n	800a3f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	430a      	orrs	r2, r1
 800a3ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f4:	f003 0304 	and.w	r3, r3, #4
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00a      	beq.n	800a412 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	430a      	orrs	r2, r1
 800a410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a416:	f003 0308 	and.w	r3, r3, #8
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00a      	beq.n	800a434 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	430a      	orrs	r2, r1
 800a432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a438:	f003 0310 	and.w	r3, r3, #16
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d00a      	beq.n	800a456 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	430a      	orrs	r2, r1
 800a454:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45a:	f003 0320 	and.w	r3, r3, #32
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d00a      	beq.n	800a478 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	430a      	orrs	r2, r1
 800a476:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a480:	2b00      	cmp	r3, #0
 800a482:	d01a      	beq.n	800a4ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	430a      	orrs	r2, r1
 800a498:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a49e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4a2:	d10a      	bne.n	800a4ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	430a      	orrs	r2, r1
 800a4b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d00a      	beq.n	800a4dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	430a      	orrs	r2, r1
 800a4da:	605a      	str	r2, [r3, #4]
  }
}
 800a4dc:	bf00      	nop
 800a4de:	370c      	adds	r7, #12
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b086      	sub	sp, #24
 800a4ec:	af02      	add	r7, sp, #8
 800a4ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4f8:	f7fa f9e6 	bl	80048c8 <HAL_GetTick>
 800a4fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f003 0308 	and.w	r3, r3, #8
 800a508:	2b08      	cmp	r3, #8
 800a50a:	d10e      	bne.n	800a52a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a50c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a510:	9300      	str	r3, [sp, #0]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2200      	movs	r2, #0
 800a516:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f81b 	bl	800a556 <UART_WaitOnFlagUntilTimeout>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	d001      	beq.n	800a52a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a526:	2303      	movs	r3, #3
 800a528:	e011      	b.n	800a54e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2220      	movs	r2, #32
 800a52e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2220      	movs	r2, #32
 800a534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b09c      	sub	sp, #112	; 0x70
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	60f8      	str	r0, [r7, #12]
 800a55e:	60b9      	str	r1, [r7, #8]
 800a560:	603b      	str	r3, [r7, #0]
 800a562:	4613      	mov	r3, r2
 800a564:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a566:	e0a7      	b.n	800a6b8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a56a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a56e:	f000 80a3 	beq.w	800a6b8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a572:	f7fa f9a9 	bl	80048c8 <HAL_GetTick>
 800a576:	4602      	mov	r2, r0
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	1ad3      	subs	r3, r2, r3
 800a57c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a57e:	429a      	cmp	r2, r3
 800a580:	d302      	bcc.n	800a588 <UART_WaitOnFlagUntilTimeout+0x32>
 800a582:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a584:	2b00      	cmp	r3, #0
 800a586:	d13f      	bne.n	800a608 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a58e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a590:	e853 3f00 	ldrex	r3, [r3]
 800a594:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a598:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a59c:	667b      	str	r3, [r7, #100]	; 0x64
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a5a8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a5ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a5ae:	e841 2300 	strex	r3, r2, [r1]
 800a5b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a5b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1e6      	bne.n	800a588 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	3308      	adds	r3, #8
 800a5c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5c4:	e853 3f00 	ldrex	r3, [r3]
 800a5c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5cc:	f023 0301 	bic.w	r3, r3, #1
 800a5d0:	663b      	str	r3, [r7, #96]	; 0x60
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	3308      	adds	r3, #8
 800a5d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a5da:	64ba      	str	r2, [r7, #72]	; 0x48
 800a5dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a5e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5e2:	e841 2300 	strex	r3, r2, [r1]
 800a5e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a5e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d1e5      	bne.n	800a5ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2220      	movs	r2, #32
 800a5f2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2220      	movs	r2, #32
 800a5f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2200      	movs	r2, #0
 800a600:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a604:	2303      	movs	r3, #3
 800a606:	e068      	b.n	800a6da <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f003 0304 	and.w	r3, r3, #4
 800a612:	2b00      	cmp	r3, #0
 800a614:	d050      	beq.n	800a6b8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	69db      	ldr	r3, [r3, #28]
 800a61c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a624:	d148      	bne.n	800a6b8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a62e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a638:	e853 3f00 	ldrex	r3, [r3]
 800a63c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a640:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a644:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	461a      	mov	r2, r3
 800a64c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a64e:	637b      	str	r3, [r7, #52]	; 0x34
 800a650:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a652:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a656:	e841 2300 	strex	r3, r2, [r1]
 800a65a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d1e6      	bne.n	800a630 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	3308      	adds	r3, #8
 800a668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	e853 3f00 	ldrex	r3, [r3]
 800a670:	613b      	str	r3, [r7, #16]
   return(result);
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	f023 0301 	bic.w	r3, r3, #1
 800a678:	66bb      	str	r3, [r7, #104]	; 0x68
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	3308      	adds	r3, #8
 800a680:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a682:	623a      	str	r2, [r7, #32]
 800a684:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a686:	69f9      	ldr	r1, [r7, #28]
 800a688:	6a3a      	ldr	r2, [r7, #32]
 800a68a:	e841 2300 	strex	r3, r2, [r1]
 800a68e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d1e5      	bne.n	800a662 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2220      	movs	r2, #32
 800a69a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2220      	movs	r2, #32
 800a6a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2220      	movs	r2, #32
 800a6a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a6b4:	2303      	movs	r3, #3
 800a6b6:	e010      	b.n	800a6da <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	69da      	ldr	r2, [r3, #28]
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	4013      	ands	r3, r2
 800a6c2:	68ba      	ldr	r2, [r7, #8]
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	bf0c      	ite	eq
 800a6c8:	2301      	moveq	r3, #1
 800a6ca:	2300      	movne	r3, #0
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	79fb      	ldrb	r3, [r7, #7]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	f43f af48 	beq.w	800a568 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3770      	adds	r7, #112	; 0x70
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
	...

0800a6e4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d121      	bne.n	800a73a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	4b27      	ldr	r3, [pc, #156]	; (800a798 <FMC_SDRAM_Init+0xb4>)
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	683a      	ldr	r2, [r7, #0]
 800a700:	6851      	ldr	r1, [r2, #4]
 800a702:	683a      	ldr	r2, [r7, #0]
 800a704:	6892      	ldr	r2, [r2, #8]
 800a706:	4311      	orrs	r1, r2
 800a708:	683a      	ldr	r2, [r7, #0]
 800a70a:	68d2      	ldr	r2, [r2, #12]
 800a70c:	4311      	orrs	r1, r2
 800a70e:	683a      	ldr	r2, [r7, #0]
 800a710:	6912      	ldr	r2, [r2, #16]
 800a712:	4311      	orrs	r1, r2
 800a714:	683a      	ldr	r2, [r7, #0]
 800a716:	6952      	ldr	r2, [r2, #20]
 800a718:	4311      	orrs	r1, r2
 800a71a:	683a      	ldr	r2, [r7, #0]
 800a71c:	6992      	ldr	r2, [r2, #24]
 800a71e:	4311      	orrs	r1, r2
 800a720:	683a      	ldr	r2, [r7, #0]
 800a722:	69d2      	ldr	r2, [r2, #28]
 800a724:	4311      	orrs	r1, r2
 800a726:	683a      	ldr	r2, [r7, #0]
 800a728:	6a12      	ldr	r2, [r2, #32]
 800a72a:	4311      	orrs	r1, r2
 800a72c:	683a      	ldr	r2, [r7, #0]
 800a72e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a730:	430a      	orrs	r2, r1
 800a732:	431a      	orrs	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	601a      	str	r2, [r3, #0]
 800a738:	e026      	b.n	800a788 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	69d9      	ldr	r1, [r3, #28]
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	6a1b      	ldr	r3, [r3, #32]
 800a74a:	4319      	orrs	r1, r3
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a750:	430b      	orrs	r3, r1
 800a752:	431a      	orrs	r2, r3
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	685a      	ldr	r2, [r3, #4]
 800a75c:	4b0e      	ldr	r3, [pc, #56]	; (800a798 <FMC_SDRAM_Init+0xb4>)
 800a75e:	4013      	ands	r3, r2
 800a760:	683a      	ldr	r2, [r7, #0]
 800a762:	6851      	ldr	r1, [r2, #4]
 800a764:	683a      	ldr	r2, [r7, #0]
 800a766:	6892      	ldr	r2, [r2, #8]
 800a768:	4311      	orrs	r1, r2
 800a76a:	683a      	ldr	r2, [r7, #0]
 800a76c:	68d2      	ldr	r2, [r2, #12]
 800a76e:	4311      	orrs	r1, r2
 800a770:	683a      	ldr	r2, [r7, #0]
 800a772:	6912      	ldr	r2, [r2, #16]
 800a774:	4311      	orrs	r1, r2
 800a776:	683a      	ldr	r2, [r7, #0]
 800a778:	6952      	ldr	r2, [r2, #20]
 800a77a:	4311      	orrs	r1, r2
 800a77c:	683a      	ldr	r2, [r7, #0]
 800a77e:	6992      	ldr	r2, [r2, #24]
 800a780:	430a      	orrs	r2, r1
 800a782:	431a      	orrs	r2, r3
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a788:	2300      	movs	r3, #0
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	370c      	adds	r7, #12
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr
 800a796:	bf00      	nop
 800a798:	ffff8000 	.word	0xffff8000

0800a79c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d128      	bne.n	800a800 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	1e59      	subs	r1, r3, #1
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	011b      	lsls	r3, r3, #4
 800a7c4:	4319      	orrs	r1, r3
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	3b01      	subs	r3, #1
 800a7cc:	021b      	lsls	r3, r3, #8
 800a7ce:	4319      	orrs	r1, r3
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	031b      	lsls	r3, r3, #12
 800a7d8:	4319      	orrs	r1, r3
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	3b01      	subs	r3, #1
 800a7e0:	041b      	lsls	r3, r3, #16
 800a7e2:	4319      	orrs	r1, r3
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	695b      	ldr	r3, [r3, #20]
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	051b      	lsls	r3, r3, #20
 800a7ec:	4319      	orrs	r1, r3
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	699b      	ldr	r3, [r3, #24]
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	061b      	lsls	r3, r3, #24
 800a7f6:	430b      	orrs	r3, r1
 800a7f8:	431a      	orrs	r2, r3
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	609a      	str	r2, [r3, #8]
 800a7fe:	e02d      	b.n	800a85c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	689a      	ldr	r2, [r3, #8]
 800a804:	4b19      	ldr	r3, [pc, #100]	; (800a86c <FMC_SDRAM_Timing_Init+0xd0>)
 800a806:	4013      	ands	r3, r2
 800a808:	68ba      	ldr	r2, [r7, #8]
 800a80a:	68d2      	ldr	r2, [r2, #12]
 800a80c:	3a01      	subs	r2, #1
 800a80e:	0311      	lsls	r1, r2, #12
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	6952      	ldr	r2, [r2, #20]
 800a814:	3a01      	subs	r2, #1
 800a816:	0512      	lsls	r2, r2, #20
 800a818:	430a      	orrs	r2, r1
 800a81a:	431a      	orrs	r2, r3
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	1e59      	subs	r1, r3, #1
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	3b01      	subs	r3, #1
 800a834:	011b      	lsls	r3, r3, #4
 800a836:	4319      	orrs	r1, r3
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	3b01      	subs	r3, #1
 800a83e:	021b      	lsls	r3, r3, #8
 800a840:	4319      	orrs	r1, r3
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	3b01      	subs	r3, #1
 800a848:	041b      	lsls	r3, r3, #16
 800a84a:	4319      	orrs	r1, r3
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	699b      	ldr	r3, [r3, #24]
 800a850:	3b01      	subs	r3, #1
 800a852:	061b      	lsls	r3, r3, #24
 800a854:	430b      	orrs	r3, r1
 800a856:	431a      	orrs	r2, r3
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3714      	adds	r7, #20
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	ff0f0fff 	.word	0xff0f0fff

0800a870 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	691a      	ldr	r2, [r3, #16]
 800a880:	4b0c      	ldr	r3, [pc, #48]	; (800a8b4 <FMC_SDRAM_SendCommand+0x44>)
 800a882:	4013      	ands	r3, r2
 800a884:	68ba      	ldr	r2, [r7, #8]
 800a886:	6811      	ldr	r1, [r2, #0]
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	6852      	ldr	r2, [r2, #4]
 800a88c:	4311      	orrs	r1, r2
 800a88e:	68ba      	ldr	r2, [r7, #8]
 800a890:	6892      	ldr	r2, [r2, #8]
 800a892:	3a01      	subs	r2, #1
 800a894:	0152      	lsls	r2, r2, #5
 800a896:	4311      	orrs	r1, r2
 800a898:	68ba      	ldr	r2, [r7, #8]
 800a89a:	68d2      	ldr	r2, [r2, #12]
 800a89c:	0252      	lsls	r2, r2, #9
 800a89e:	430a      	orrs	r2, r1
 800a8a0:	431a      	orrs	r2, r3
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3714      	adds	r7, #20
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr
 800a8b4:	ffc00000 	.word	0xffc00000

0800a8b8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	695a      	ldr	r2, [r3, #20]
 800a8c6:	4b07      	ldr	r3, [pc, #28]	; (800a8e4 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800a8c8:	4013      	ands	r3, r2
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	0052      	lsls	r2, r2, #1
 800a8ce:	431a      	orrs	r2, r3
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	370c      	adds	r7, #12
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	ffffc001 	.word	0xffffc001

0800a8e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a8f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a8fa:	2b84      	cmp	r3, #132	; 0x84
 800a8fc:	d005      	beq.n	800a90a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a8fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	4413      	add	r3, r2
 800a906:	3303      	adds	r3, #3
 800a908:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a90a:	68fb      	ldr	r3, [r7, #12]
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3714      	adds	r7, #20
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a91c:	f000 fae8 	bl	800aef0 <vTaskStartScheduler>
  
  return osOK;
 800a920:	2300      	movs	r3, #0
}
 800a922:	4618      	mov	r0, r3
 800a924:	bd80      	pop	{r7, pc}

0800a926 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a926:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a928:	b089      	sub	sp, #36	; 0x24
 800a92a:	af04      	add	r7, sp, #16
 800a92c:	6078      	str	r0, [r7, #4]
 800a92e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	695b      	ldr	r3, [r3, #20]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d020      	beq.n	800a97a <osThreadCreate+0x54>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	699b      	ldr	r3, [r3, #24]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d01c      	beq.n	800a97a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	685c      	ldr	r4, [r3, #4]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	691e      	ldr	r6, [r3, #16]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a952:	4618      	mov	r0, r3
 800a954:	f7ff ffc8 	bl	800a8e8 <makeFreeRtosPriority>
 800a958:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	695b      	ldr	r3, [r3, #20]
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a962:	9202      	str	r2, [sp, #8]
 800a964:	9301      	str	r3, [sp, #4]
 800a966:	9100      	str	r1, [sp, #0]
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	4632      	mov	r2, r6
 800a96c:	4629      	mov	r1, r5
 800a96e:	4620      	mov	r0, r4
 800a970:	f000 f8ed 	bl	800ab4e <xTaskCreateStatic>
 800a974:	4603      	mov	r3, r0
 800a976:	60fb      	str	r3, [r7, #12]
 800a978:	e01c      	b.n	800a9b4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	685c      	ldr	r4, [r3, #4]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a986:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a98e:	4618      	mov	r0, r3
 800a990:	f7ff ffaa 	bl	800a8e8 <makeFreeRtosPriority>
 800a994:	4602      	mov	r2, r0
 800a996:	f107 030c 	add.w	r3, r7, #12
 800a99a:	9301      	str	r3, [sp, #4]
 800a99c:	9200      	str	r2, [sp, #0]
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	4632      	mov	r2, r6
 800a9a2:	4629      	mov	r1, r5
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	f000 f935 	bl	800ac14 <xTaskCreate>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d001      	beq.n	800a9b4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	e000      	b.n	800a9b6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3714      	adds	r7, #20
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a9be <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b084      	sub	sp, #16
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d001      	beq.n	800a9d4 <osDelay+0x16>
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	e000      	b.n	800a9d6 <osDelay+0x18>
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f000 fa54 	bl	800ae84 <vTaskDelay>
  
  return osOK;
 800a9dc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3710      	adds	r7, #16
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a9e6:	b480      	push	{r7}
 800a9e8:	b083      	sub	sp, #12
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f103 0208 	add.w	r2, r3, #8
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a9fe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f103 0208 	add.w	r2, r3, #8
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f103 0208 	add.w	r2, r3, #8
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa1a:	bf00      	nop
 800aa1c:	370c      	adds	r7, #12
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aa26:	b480      	push	{r7}
 800aa28:	b083      	sub	sp, #12
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa34:	bf00      	nop
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa40:	b480      	push	{r7}
 800aa42:	b085      	sub	sp, #20
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	68fa      	ldr	r2, [r7, #12]
 800aa54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	689a      	ldr	r2, [r3, #8]
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	683a      	ldr	r2, [r7, #0]
 800aa64:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	683a      	ldr	r2, [r7, #0]
 800aa6a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	1c5a      	adds	r2, r3, #1
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	601a      	str	r2, [r3, #0]
}
 800aa7c:	bf00      	nop
 800aa7e:	3714      	adds	r7, #20
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b085      	sub	sp, #20
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa9e:	d103      	bne.n	800aaa8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	691b      	ldr	r3, [r3, #16]
 800aaa4:	60fb      	str	r3, [r7, #12]
 800aaa6:	e00c      	b.n	800aac2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	3308      	adds	r3, #8
 800aaac:	60fb      	str	r3, [r7, #12]
 800aaae:	e002      	b.n	800aab6 <vListInsert+0x2e>
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	60fb      	str	r3, [r7, #12]
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	68ba      	ldr	r2, [r7, #8]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d2f6      	bcs.n	800aab0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	685a      	ldr	r2, [r3, #4]
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	683a      	ldr	r2, [r7, #0]
 800aad0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	68fa      	ldr	r2, [r7, #12]
 800aad6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	683a      	ldr	r2, [r7, #0]
 800aadc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	1c5a      	adds	r2, r3, #1
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	601a      	str	r2, [r3, #0]
}
 800aaee:	bf00      	nop
 800aaf0:	3714      	adds	r7, #20
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr

0800aafa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aafa:	b480      	push	{r7}
 800aafc:	b085      	sub	sp, #20
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	691b      	ldr	r3, [r3, #16]
 800ab06:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	6892      	ldr	r2, [r2, #8]
 800ab10:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	689b      	ldr	r3, [r3, #8]
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	6852      	ldr	r2, [r2, #4]
 800ab1a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d103      	bne.n	800ab2e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	689a      	ldr	r2, [r3, #8]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	1e5a      	subs	r2, r3, #1
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3714      	adds	r7, #20
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr

0800ab4e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b08e      	sub	sp, #56	; 0x38
 800ab52:	af04      	add	r7, sp, #16
 800ab54:	60f8      	str	r0, [r7, #12]
 800ab56:	60b9      	str	r1, [r7, #8]
 800ab58:	607a      	str	r2, [r7, #4]
 800ab5a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ab5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d10c      	bne.n	800ab7c <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ab62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab66:	b672      	cpsid	i
 800ab68:	f383 8811 	msr	BASEPRI, r3
 800ab6c:	f3bf 8f6f 	isb	sy
 800ab70:	f3bf 8f4f 	dsb	sy
 800ab74:	b662      	cpsie	i
 800ab76:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ab78:	bf00      	nop
 800ab7a:	e7fe      	b.n	800ab7a <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ab7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d10c      	bne.n	800ab9c <xTaskCreateStatic+0x4e>
	__asm volatile
 800ab82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab86:	b672      	cpsid	i
 800ab88:	f383 8811 	msr	BASEPRI, r3
 800ab8c:	f3bf 8f6f 	isb	sy
 800ab90:	f3bf 8f4f 	dsb	sy
 800ab94:	b662      	cpsie	i
 800ab96:	61fb      	str	r3, [r7, #28]
}
 800ab98:	bf00      	nop
 800ab9a:	e7fe      	b.n	800ab9a <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab9c:	2354      	movs	r3, #84	; 0x54
 800ab9e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	2b54      	cmp	r3, #84	; 0x54
 800aba4:	d00c      	beq.n	800abc0 <xTaskCreateStatic+0x72>
	__asm volatile
 800aba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abaa:	b672      	cpsid	i
 800abac:	f383 8811 	msr	BASEPRI, r3
 800abb0:	f3bf 8f6f 	isb	sy
 800abb4:	f3bf 8f4f 	dsb	sy
 800abb8:	b662      	cpsie	i
 800abba:	61bb      	str	r3, [r7, #24]
}
 800abbc:	bf00      	nop
 800abbe:	e7fe      	b.n	800abbe <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800abc0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800abc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d01e      	beq.n	800ac06 <xTaskCreateStatic+0xb8>
 800abc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d01b      	beq.n	800ac06 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800abce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800abd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abd6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800abd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abda:	2202      	movs	r2, #2
 800abdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800abe0:	2300      	movs	r3, #0
 800abe2:	9303      	str	r3, [sp, #12]
 800abe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe6:	9302      	str	r3, [sp, #8]
 800abe8:	f107 0314 	add.w	r3, r7, #20
 800abec:	9301      	str	r3, [sp, #4]
 800abee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf0:	9300      	str	r3, [sp, #0]
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	68b9      	ldr	r1, [r7, #8]
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f000 f850 	bl	800ac9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac00:	f000 f8d6 	bl	800adb0 <prvAddNewTaskToReadyList>
 800ac04:	e001      	b.n	800ac0a <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800ac06:	2300      	movs	r3, #0
 800ac08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ac0a:	697b      	ldr	r3, [r7, #20]
	}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3728      	adds	r7, #40	; 0x28
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b08c      	sub	sp, #48	; 0x30
 800ac18:	af04      	add	r7, sp, #16
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	603b      	str	r3, [r7, #0]
 800ac20:	4613      	mov	r3, r2
 800ac22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac24:	88fb      	ldrh	r3, [r7, #6]
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f000 febf 	bl	800b9ac <pvPortMalloc>
 800ac2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00e      	beq.n	800ac54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ac36:	2054      	movs	r0, #84	; 0x54
 800ac38:	f000 feb8 	bl	800b9ac <pvPortMalloc>
 800ac3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d003      	beq.n	800ac4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	697a      	ldr	r2, [r7, #20]
 800ac48:	631a      	str	r2, [r3, #48]	; 0x30
 800ac4a:	e005      	b.n	800ac58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ac4c:	6978      	ldr	r0, [r7, #20]
 800ac4e:	f000 ff77 	bl	800bb40 <vPortFree>
 800ac52:	e001      	b.n	800ac58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ac54:	2300      	movs	r3, #0
 800ac56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d017      	beq.n	800ac8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ac5e:	69fb      	ldr	r3, [r7, #28]
 800ac60:	2200      	movs	r2, #0
 800ac62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ac66:	88fa      	ldrh	r2, [r7, #6]
 800ac68:	2300      	movs	r3, #0
 800ac6a:	9303      	str	r3, [sp, #12]
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	9302      	str	r3, [sp, #8]
 800ac70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac72:	9301      	str	r3, [sp, #4]
 800ac74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	68b9      	ldr	r1, [r7, #8]
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	f000 f80e 	bl	800ac9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac82:	69f8      	ldr	r0, [r7, #28]
 800ac84:	f000 f894 	bl	800adb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	61bb      	str	r3, [r7, #24]
 800ac8c:	e002      	b.n	800ac94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac94:	69bb      	ldr	r3, [r7, #24]
	}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3720      	adds	r7, #32
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b088      	sub	sp, #32
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	60f8      	str	r0, [r7, #12]
 800aca6:	60b9      	str	r1, [r7, #8]
 800aca8:	607a      	str	r2, [r7, #4]
 800acaa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800acac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800acb0:	6879      	ldr	r1, [r7, #4]
 800acb2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800acb6:	440b      	add	r3, r1
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	4413      	add	r3, r2
 800acbc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	f023 0307 	bic.w	r3, r3, #7
 800acc4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	f003 0307 	and.w	r3, r3, #7
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00c      	beq.n	800acea <prvInitialiseNewTask+0x4c>
	__asm volatile
 800acd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd4:	b672      	cpsid	i
 800acd6:	f383 8811 	msr	BASEPRI, r3
 800acda:	f3bf 8f6f 	isb	sy
 800acde:	f3bf 8f4f 	dsb	sy
 800ace2:	b662      	cpsie	i
 800ace4:	617b      	str	r3, [r7, #20]
}
 800ace6:	bf00      	nop
 800ace8:	e7fe      	b.n	800ace8 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d01f      	beq.n	800ad30 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800acf0:	2300      	movs	r3, #0
 800acf2:	61fb      	str	r3, [r7, #28]
 800acf4:	e012      	b.n	800ad1c <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800acf6:	68ba      	ldr	r2, [r7, #8]
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	4413      	add	r3, r2
 800acfc:	7819      	ldrb	r1, [r3, #0]
 800acfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	4413      	add	r3, r2
 800ad04:	3334      	adds	r3, #52	; 0x34
 800ad06:	460a      	mov	r2, r1
 800ad08:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	4413      	add	r3, r2
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d006      	beq.n	800ad24 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad16:	69fb      	ldr	r3, [r7, #28]
 800ad18:	3301      	adds	r3, #1
 800ad1a:	61fb      	str	r3, [r7, #28]
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	2b0f      	cmp	r3, #15
 800ad20:	d9e9      	bls.n	800acf6 <prvInitialiseNewTask+0x58>
 800ad22:	e000      	b.n	800ad26 <prvInitialiseNewTask+0x88>
			{
				break;
 800ad24:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ad26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad2e:	e003      	b.n	800ad38 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ad30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad32:	2200      	movs	r2, #0
 800ad34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ad38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3a:	2b06      	cmp	r3, #6
 800ad3c:	d901      	bls.n	800ad42 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ad3e:	2306      	movs	r3, #6
 800ad40:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ad42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad46:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ad48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad4c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ad4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad50:	2200      	movs	r2, #0
 800ad52:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ad54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad56:	3304      	adds	r3, #4
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7ff fe64 	bl	800aa26 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ad5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad60:	3318      	adds	r3, #24
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7ff fe5f 	bl	800aa26 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ad68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad6c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad70:	f1c3 0207 	rsb	r2, r3, #7
 800ad74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad76:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ad78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad7c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ad7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad80:	2200      	movs	r2, #0
 800ad82:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad86:	2200      	movs	r2, #0
 800ad88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad8c:	683a      	ldr	r2, [r7, #0]
 800ad8e:	68f9      	ldr	r1, [r7, #12]
 800ad90:	69b8      	ldr	r0, [r7, #24]
 800ad92:	f000 fc13 	bl	800b5bc <pxPortInitialiseStack>
 800ad96:	4602      	mov	r2, r0
 800ad98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ad9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d002      	beq.n	800ada8 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ada2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ada6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ada8:	bf00      	nop
 800adaa:	3720      	adds	r7, #32
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800adb8:	f000 fd10 	bl	800b7dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800adbc:	4b2a      	ldr	r3, [pc, #168]	; (800ae68 <prvAddNewTaskToReadyList+0xb8>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	3301      	adds	r3, #1
 800adc2:	4a29      	ldr	r2, [pc, #164]	; (800ae68 <prvAddNewTaskToReadyList+0xb8>)
 800adc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800adc6:	4b29      	ldr	r3, [pc, #164]	; (800ae6c <prvAddNewTaskToReadyList+0xbc>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d109      	bne.n	800ade2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800adce:	4a27      	ldr	r2, [pc, #156]	; (800ae6c <prvAddNewTaskToReadyList+0xbc>)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800add4:	4b24      	ldr	r3, [pc, #144]	; (800ae68 <prvAddNewTaskToReadyList+0xb8>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b01      	cmp	r3, #1
 800adda:	d110      	bne.n	800adfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800addc:	f000 fac8 	bl	800b370 <prvInitialiseTaskLists>
 800ade0:	e00d      	b.n	800adfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ade2:	4b23      	ldr	r3, [pc, #140]	; (800ae70 <prvAddNewTaskToReadyList+0xc0>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d109      	bne.n	800adfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800adea:	4b20      	ldr	r3, [pc, #128]	; (800ae6c <prvAddNewTaskToReadyList+0xbc>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d802      	bhi.n	800adfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800adf8:	4a1c      	ldr	r2, [pc, #112]	; (800ae6c <prvAddNewTaskToReadyList+0xbc>)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800adfe:	4b1d      	ldr	r3, [pc, #116]	; (800ae74 <prvAddNewTaskToReadyList+0xc4>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	3301      	adds	r3, #1
 800ae04:	4a1b      	ldr	r2, [pc, #108]	; (800ae74 <prvAddNewTaskToReadyList+0xc4>)
 800ae06:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	409a      	lsls	r2, r3
 800ae10:	4b19      	ldr	r3, [pc, #100]	; (800ae78 <prvAddNewTaskToReadyList+0xc8>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4313      	orrs	r3, r2
 800ae16:	4a18      	ldr	r2, [pc, #96]	; (800ae78 <prvAddNewTaskToReadyList+0xc8>)
 800ae18:	6013      	str	r3, [r2, #0]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae1e:	4613      	mov	r3, r2
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	4413      	add	r3, r2
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	4a15      	ldr	r2, [pc, #84]	; (800ae7c <prvAddNewTaskToReadyList+0xcc>)
 800ae28:	441a      	add	r2, r3
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	3304      	adds	r3, #4
 800ae2e:	4619      	mov	r1, r3
 800ae30:	4610      	mov	r0, r2
 800ae32:	f7ff fe05 	bl	800aa40 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ae36:	f000 fd05 	bl	800b844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ae3a:	4b0d      	ldr	r3, [pc, #52]	; (800ae70 <prvAddNewTaskToReadyList+0xc0>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00e      	beq.n	800ae60 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ae42:	4b0a      	ldr	r3, [pc, #40]	; (800ae6c <prvAddNewTaskToReadyList+0xbc>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d207      	bcs.n	800ae60 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ae50:	4b0b      	ldr	r3, [pc, #44]	; (800ae80 <prvAddNewTaskToReadyList+0xd0>)
 800ae52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae56:	601a      	str	r2, [r3, #0]
 800ae58:	f3bf 8f4f 	dsb	sy
 800ae5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae60:	bf00      	nop
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	20000d70 	.word	0x20000d70
 800ae6c:	20000c70 	.word	0x20000c70
 800ae70:	20000d7c 	.word	0x20000d7c
 800ae74:	20000d8c 	.word	0x20000d8c
 800ae78:	20000d78 	.word	0x20000d78
 800ae7c:	20000c74 	.word	0x20000c74
 800ae80:	e000ed04 	.word	0xe000ed04

0800ae84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d019      	beq.n	800aeca <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ae96:	4b14      	ldr	r3, [pc, #80]	; (800aee8 <vTaskDelay+0x64>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d00c      	beq.n	800aeb8 <vTaskDelay+0x34>
	__asm volatile
 800ae9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea2:	b672      	cpsid	i
 800aea4:	f383 8811 	msr	BASEPRI, r3
 800aea8:	f3bf 8f6f 	isb	sy
 800aeac:	f3bf 8f4f 	dsb	sy
 800aeb0:	b662      	cpsie	i
 800aeb2:	60bb      	str	r3, [r7, #8]
}
 800aeb4:	bf00      	nop
 800aeb6:	e7fe      	b.n	800aeb6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800aeb8:	f000 f87e 	bl	800afb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aebc:	2100      	movs	r1, #0
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 fb16 	bl	800b4f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aec4:	f000 f886 	bl	800afd4 <xTaskResumeAll>
 800aec8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d107      	bne.n	800aee0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800aed0:	4b06      	ldr	r3, [pc, #24]	; (800aeec <vTaskDelay+0x68>)
 800aed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aed6:	601a      	str	r2, [r3, #0]
 800aed8:	f3bf 8f4f 	dsb	sy
 800aedc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aee0:	bf00      	nop
 800aee2:	3710      	adds	r7, #16
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	20000d98 	.word	0x20000d98
 800aeec:	e000ed04 	.word	0xe000ed04

0800aef0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b08a      	sub	sp, #40	; 0x28
 800aef4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aef6:	2300      	movs	r3, #0
 800aef8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aefa:	2300      	movs	r3, #0
 800aefc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aefe:	463a      	mov	r2, r7
 800af00:	1d39      	adds	r1, r7, #4
 800af02:	f107 0308 	add.w	r3, r7, #8
 800af06:	4618      	mov	r0, r3
 800af08:	f7f5 fe16 	bl	8000b38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af0c:	6839      	ldr	r1, [r7, #0]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	68ba      	ldr	r2, [r7, #8]
 800af12:	9202      	str	r2, [sp, #8]
 800af14:	9301      	str	r3, [sp, #4]
 800af16:	2300      	movs	r3, #0
 800af18:	9300      	str	r3, [sp, #0]
 800af1a:	2300      	movs	r3, #0
 800af1c:	460a      	mov	r2, r1
 800af1e:	4920      	ldr	r1, [pc, #128]	; (800afa0 <vTaskStartScheduler+0xb0>)
 800af20:	4820      	ldr	r0, [pc, #128]	; (800afa4 <vTaskStartScheduler+0xb4>)
 800af22:	f7ff fe14 	bl	800ab4e <xTaskCreateStatic>
 800af26:	4603      	mov	r3, r0
 800af28:	4a1f      	ldr	r2, [pc, #124]	; (800afa8 <vTaskStartScheduler+0xb8>)
 800af2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800af2c:	4b1e      	ldr	r3, [pc, #120]	; (800afa8 <vTaskStartScheduler+0xb8>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d002      	beq.n	800af3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800af34:	2301      	movs	r3, #1
 800af36:	617b      	str	r3, [r7, #20]
 800af38:	e001      	b.n	800af3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800af3a:	2300      	movs	r3, #0
 800af3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	2b01      	cmp	r3, #1
 800af42:	d118      	bne.n	800af76 <vTaskStartScheduler+0x86>
	__asm volatile
 800af44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af48:	b672      	cpsid	i
 800af4a:	f383 8811 	msr	BASEPRI, r3
 800af4e:	f3bf 8f6f 	isb	sy
 800af52:	f3bf 8f4f 	dsb	sy
 800af56:	b662      	cpsie	i
 800af58:	613b      	str	r3, [r7, #16]
}
 800af5a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800af5c:	4b13      	ldr	r3, [pc, #76]	; (800afac <vTaskStartScheduler+0xbc>)
 800af5e:	f04f 32ff 	mov.w	r2, #4294967295
 800af62:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800af64:	4b12      	ldr	r3, [pc, #72]	; (800afb0 <vTaskStartScheduler+0xc0>)
 800af66:	2201      	movs	r2, #1
 800af68:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800af6a:	4b12      	ldr	r3, [pc, #72]	; (800afb4 <vTaskStartScheduler+0xc4>)
 800af6c:	2200      	movs	r2, #0
 800af6e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800af70:	f000 fbb6 	bl	800b6e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800af74:	e010      	b.n	800af98 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af7c:	d10c      	bne.n	800af98 <vTaskStartScheduler+0xa8>
	__asm volatile
 800af7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af82:	b672      	cpsid	i
 800af84:	f383 8811 	msr	BASEPRI, r3
 800af88:	f3bf 8f6f 	isb	sy
 800af8c:	f3bf 8f4f 	dsb	sy
 800af90:	b662      	cpsie	i
 800af92:	60fb      	str	r3, [r7, #12]
}
 800af94:	bf00      	nop
 800af96:	e7fe      	b.n	800af96 <vTaskStartScheduler+0xa6>
}
 800af98:	bf00      	nop
 800af9a:	3718      	adds	r7, #24
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	0800c738 	.word	0x0800c738
 800afa4:	0800b341 	.word	0x0800b341
 800afa8:	20000d94 	.word	0x20000d94
 800afac:	20000d90 	.word	0x20000d90
 800afb0:	20000d7c 	.word	0x20000d7c
 800afb4:	20000d74 	.word	0x20000d74

0800afb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800afb8:	b480      	push	{r7}
 800afba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800afbc:	4b04      	ldr	r3, [pc, #16]	; (800afd0 <vTaskSuspendAll+0x18>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	3301      	adds	r3, #1
 800afc2:	4a03      	ldr	r2, [pc, #12]	; (800afd0 <vTaskSuspendAll+0x18>)
 800afc4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800afc6:	bf00      	nop
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr
 800afd0:	20000d98 	.word	0x20000d98

0800afd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800afda:	2300      	movs	r3, #0
 800afdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800afde:	2300      	movs	r3, #0
 800afe0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800afe2:	4b42      	ldr	r3, [pc, #264]	; (800b0ec <xTaskResumeAll+0x118>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d10c      	bne.n	800b004 <xTaskResumeAll+0x30>
	__asm volatile
 800afea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afee:	b672      	cpsid	i
 800aff0:	f383 8811 	msr	BASEPRI, r3
 800aff4:	f3bf 8f6f 	isb	sy
 800aff8:	f3bf 8f4f 	dsb	sy
 800affc:	b662      	cpsie	i
 800affe:	603b      	str	r3, [r7, #0]
}
 800b000:	bf00      	nop
 800b002:	e7fe      	b.n	800b002 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b004:	f000 fbea 	bl	800b7dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b008:	4b38      	ldr	r3, [pc, #224]	; (800b0ec <xTaskResumeAll+0x118>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	3b01      	subs	r3, #1
 800b00e:	4a37      	ldr	r2, [pc, #220]	; (800b0ec <xTaskResumeAll+0x118>)
 800b010:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b012:	4b36      	ldr	r3, [pc, #216]	; (800b0ec <xTaskResumeAll+0x118>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d161      	bne.n	800b0de <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b01a:	4b35      	ldr	r3, [pc, #212]	; (800b0f0 <xTaskResumeAll+0x11c>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d05d      	beq.n	800b0de <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b022:	e02e      	b.n	800b082 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b024:	4b33      	ldr	r3, [pc, #204]	; (800b0f4 <xTaskResumeAll+0x120>)
 800b026:	68db      	ldr	r3, [r3, #12]
 800b028:	68db      	ldr	r3, [r3, #12]
 800b02a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	3318      	adds	r3, #24
 800b030:	4618      	mov	r0, r3
 800b032:	f7ff fd62 	bl	800aafa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	3304      	adds	r3, #4
 800b03a:	4618      	mov	r0, r3
 800b03c:	f7ff fd5d 	bl	800aafa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b044:	2201      	movs	r2, #1
 800b046:	409a      	lsls	r2, r3
 800b048:	4b2b      	ldr	r3, [pc, #172]	; (800b0f8 <xTaskResumeAll+0x124>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4313      	orrs	r3, r2
 800b04e:	4a2a      	ldr	r2, [pc, #168]	; (800b0f8 <xTaskResumeAll+0x124>)
 800b050:	6013      	str	r3, [r2, #0]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b056:	4613      	mov	r3, r2
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	4413      	add	r3, r2
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	4a27      	ldr	r2, [pc, #156]	; (800b0fc <xTaskResumeAll+0x128>)
 800b060:	441a      	add	r2, r3
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	3304      	adds	r3, #4
 800b066:	4619      	mov	r1, r3
 800b068:	4610      	mov	r0, r2
 800b06a:	f7ff fce9 	bl	800aa40 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b072:	4b23      	ldr	r3, [pc, #140]	; (800b100 <xTaskResumeAll+0x12c>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b078:	429a      	cmp	r2, r3
 800b07a:	d302      	bcc.n	800b082 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b07c:	4b21      	ldr	r3, [pc, #132]	; (800b104 <xTaskResumeAll+0x130>)
 800b07e:	2201      	movs	r2, #1
 800b080:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b082:	4b1c      	ldr	r3, [pc, #112]	; (800b0f4 <xTaskResumeAll+0x120>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d1cc      	bne.n	800b024 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d001      	beq.n	800b094 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b090:	f000 fa0e 	bl	800b4b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b094:	4b1c      	ldr	r3, [pc, #112]	; (800b108 <xTaskResumeAll+0x134>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d010      	beq.n	800b0c2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b0a0:	f000 f836 	bl	800b110 <xTaskIncrementTick>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d002      	beq.n	800b0b0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b0aa:	4b16      	ldr	r3, [pc, #88]	; (800b104 <xTaskResumeAll+0x130>)
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	3b01      	subs	r3, #1
 800b0b4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d1f1      	bne.n	800b0a0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800b0bc:	4b12      	ldr	r3, [pc, #72]	; (800b108 <xTaskResumeAll+0x134>)
 800b0be:	2200      	movs	r2, #0
 800b0c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b0c2:	4b10      	ldr	r3, [pc, #64]	; (800b104 <xTaskResumeAll+0x130>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d009      	beq.n	800b0de <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b0ce:	4b0f      	ldr	r3, [pc, #60]	; (800b10c <xTaskResumeAll+0x138>)
 800b0d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0d4:	601a      	str	r2, [r3, #0]
 800b0d6:	f3bf 8f4f 	dsb	sy
 800b0da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0de:	f000 fbb1 	bl	800b844 <vPortExitCritical>

	return xAlreadyYielded;
 800b0e2:	68bb      	ldr	r3, [r7, #8]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3710      	adds	r7, #16
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	20000d98 	.word	0x20000d98
 800b0f0:	20000d70 	.word	0x20000d70
 800b0f4:	20000d30 	.word	0x20000d30
 800b0f8:	20000d78 	.word	0x20000d78
 800b0fc:	20000c74 	.word	0x20000c74
 800b100:	20000c70 	.word	0x20000c70
 800b104:	20000d84 	.word	0x20000d84
 800b108:	20000d80 	.word	0x20000d80
 800b10c:	e000ed04 	.word	0xe000ed04

0800b110 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b086      	sub	sp, #24
 800b114:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b116:	2300      	movs	r3, #0
 800b118:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b11a:	4b4f      	ldr	r3, [pc, #316]	; (800b258 <xTaskIncrementTick+0x148>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	f040 808a 	bne.w	800b238 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b124:	4b4d      	ldr	r3, [pc, #308]	; (800b25c <xTaskIncrementTick+0x14c>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	3301      	adds	r3, #1
 800b12a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b12c:	4a4b      	ldr	r2, [pc, #300]	; (800b25c <xTaskIncrementTick+0x14c>)
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d122      	bne.n	800b17e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b138:	4b49      	ldr	r3, [pc, #292]	; (800b260 <xTaskIncrementTick+0x150>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00c      	beq.n	800b15c <xTaskIncrementTick+0x4c>
	__asm volatile
 800b142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b146:	b672      	cpsid	i
 800b148:	f383 8811 	msr	BASEPRI, r3
 800b14c:	f3bf 8f6f 	isb	sy
 800b150:	f3bf 8f4f 	dsb	sy
 800b154:	b662      	cpsie	i
 800b156:	603b      	str	r3, [r7, #0]
}
 800b158:	bf00      	nop
 800b15a:	e7fe      	b.n	800b15a <xTaskIncrementTick+0x4a>
 800b15c:	4b40      	ldr	r3, [pc, #256]	; (800b260 <xTaskIncrementTick+0x150>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	60fb      	str	r3, [r7, #12]
 800b162:	4b40      	ldr	r3, [pc, #256]	; (800b264 <xTaskIncrementTick+0x154>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	4a3e      	ldr	r2, [pc, #248]	; (800b260 <xTaskIncrementTick+0x150>)
 800b168:	6013      	str	r3, [r2, #0]
 800b16a:	4a3e      	ldr	r2, [pc, #248]	; (800b264 <xTaskIncrementTick+0x154>)
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	6013      	str	r3, [r2, #0]
 800b170:	4b3d      	ldr	r3, [pc, #244]	; (800b268 <xTaskIncrementTick+0x158>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	3301      	adds	r3, #1
 800b176:	4a3c      	ldr	r2, [pc, #240]	; (800b268 <xTaskIncrementTick+0x158>)
 800b178:	6013      	str	r3, [r2, #0]
 800b17a:	f000 f999 	bl	800b4b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b17e:	4b3b      	ldr	r3, [pc, #236]	; (800b26c <xTaskIncrementTick+0x15c>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	693a      	ldr	r2, [r7, #16]
 800b184:	429a      	cmp	r2, r3
 800b186:	d348      	bcc.n	800b21a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b188:	4b35      	ldr	r3, [pc, #212]	; (800b260 <xTaskIncrementTick+0x150>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d104      	bne.n	800b19c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b192:	4b36      	ldr	r3, [pc, #216]	; (800b26c <xTaskIncrementTick+0x15c>)
 800b194:	f04f 32ff 	mov.w	r2, #4294967295
 800b198:	601a      	str	r2, [r3, #0]
					break;
 800b19a:	e03e      	b.n	800b21a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b19c:	4b30      	ldr	r3, [pc, #192]	; (800b260 <xTaskIncrementTick+0x150>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b1ac:	693a      	ldr	r2, [r7, #16]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d203      	bcs.n	800b1bc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b1b4:	4a2d      	ldr	r2, [pc, #180]	; (800b26c <xTaskIncrementTick+0x15c>)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b1ba:	e02e      	b.n	800b21a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	3304      	adds	r3, #4
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7ff fc9a 	bl	800aafa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d004      	beq.n	800b1d8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	3318      	adds	r3, #24
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7ff fc91 	bl	800aafa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1dc:	2201      	movs	r2, #1
 800b1de:	409a      	lsls	r2, r3
 800b1e0:	4b23      	ldr	r3, [pc, #140]	; (800b270 <xTaskIncrementTick+0x160>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	4a22      	ldr	r2, [pc, #136]	; (800b270 <xTaskIncrementTick+0x160>)
 800b1e8:	6013      	str	r3, [r2, #0]
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ee:	4613      	mov	r3, r2
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	4413      	add	r3, r2
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	4a1f      	ldr	r2, [pc, #124]	; (800b274 <xTaskIncrementTick+0x164>)
 800b1f8:	441a      	add	r2, r3
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	3304      	adds	r3, #4
 800b1fe:	4619      	mov	r1, r3
 800b200:	4610      	mov	r0, r2
 800b202:	f7ff fc1d 	bl	800aa40 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b20a:	4b1b      	ldr	r3, [pc, #108]	; (800b278 <xTaskIncrementTick+0x168>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b210:	429a      	cmp	r2, r3
 800b212:	d3b9      	bcc.n	800b188 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800b214:	2301      	movs	r3, #1
 800b216:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b218:	e7b6      	b.n	800b188 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b21a:	4b17      	ldr	r3, [pc, #92]	; (800b278 <xTaskIncrementTick+0x168>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b220:	4914      	ldr	r1, [pc, #80]	; (800b274 <xTaskIncrementTick+0x164>)
 800b222:	4613      	mov	r3, r2
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	4413      	add	r3, r2
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	440b      	add	r3, r1
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d907      	bls.n	800b242 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800b232:	2301      	movs	r3, #1
 800b234:	617b      	str	r3, [r7, #20]
 800b236:	e004      	b.n	800b242 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b238:	4b10      	ldr	r3, [pc, #64]	; (800b27c <xTaskIncrementTick+0x16c>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	3301      	adds	r3, #1
 800b23e:	4a0f      	ldr	r2, [pc, #60]	; (800b27c <xTaskIncrementTick+0x16c>)
 800b240:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b242:	4b0f      	ldr	r3, [pc, #60]	; (800b280 <xTaskIncrementTick+0x170>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d001      	beq.n	800b24e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800b24a:	2301      	movs	r3, #1
 800b24c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b24e:	697b      	ldr	r3, [r7, #20]
}
 800b250:	4618      	mov	r0, r3
 800b252:	3718      	adds	r7, #24
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	20000d98 	.word	0x20000d98
 800b25c:	20000d74 	.word	0x20000d74
 800b260:	20000d28 	.word	0x20000d28
 800b264:	20000d2c 	.word	0x20000d2c
 800b268:	20000d88 	.word	0x20000d88
 800b26c:	20000d90 	.word	0x20000d90
 800b270:	20000d78 	.word	0x20000d78
 800b274:	20000c74 	.word	0x20000c74
 800b278:	20000c70 	.word	0x20000c70
 800b27c:	20000d80 	.word	0x20000d80
 800b280:	20000d84 	.word	0x20000d84

0800b284 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b284:	b480      	push	{r7}
 800b286:	b087      	sub	sp, #28
 800b288:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b28a:	4b28      	ldr	r3, [pc, #160]	; (800b32c <vTaskSwitchContext+0xa8>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d003      	beq.n	800b29a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b292:	4b27      	ldr	r3, [pc, #156]	; (800b330 <vTaskSwitchContext+0xac>)
 800b294:	2201      	movs	r2, #1
 800b296:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b298:	e041      	b.n	800b31e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b29a:	4b25      	ldr	r3, [pc, #148]	; (800b330 <vTaskSwitchContext+0xac>)
 800b29c:	2200      	movs	r2, #0
 800b29e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2a0:	4b24      	ldr	r3, [pc, #144]	; (800b334 <vTaskSwitchContext+0xb0>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	fab3 f383 	clz	r3, r3
 800b2ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b2ae:	7afb      	ldrb	r3, [r7, #11]
 800b2b0:	f1c3 031f 	rsb	r3, r3, #31
 800b2b4:	617b      	str	r3, [r7, #20]
 800b2b6:	4920      	ldr	r1, [pc, #128]	; (800b338 <vTaskSwitchContext+0xb4>)
 800b2b8:	697a      	ldr	r2, [r7, #20]
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	4413      	add	r3, r2
 800b2c0:	009b      	lsls	r3, r3, #2
 800b2c2:	440b      	add	r3, r1
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d10c      	bne.n	800b2e4 <vTaskSwitchContext+0x60>
	__asm volatile
 800b2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ce:	b672      	cpsid	i
 800b2d0:	f383 8811 	msr	BASEPRI, r3
 800b2d4:	f3bf 8f6f 	isb	sy
 800b2d8:	f3bf 8f4f 	dsb	sy
 800b2dc:	b662      	cpsie	i
 800b2de:	607b      	str	r3, [r7, #4]
}
 800b2e0:	bf00      	nop
 800b2e2:	e7fe      	b.n	800b2e2 <vTaskSwitchContext+0x5e>
 800b2e4:	697a      	ldr	r2, [r7, #20]
 800b2e6:	4613      	mov	r3, r2
 800b2e8:	009b      	lsls	r3, r3, #2
 800b2ea:	4413      	add	r3, r2
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	4a12      	ldr	r2, [pc, #72]	; (800b338 <vTaskSwitchContext+0xb4>)
 800b2f0:	4413      	add	r3, r2
 800b2f2:	613b      	str	r3, [r7, #16]
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	685a      	ldr	r2, [r3, #4]
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	605a      	str	r2, [r3, #4]
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	685a      	ldr	r2, [r3, #4]
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	3308      	adds	r3, #8
 800b306:	429a      	cmp	r2, r3
 800b308:	d104      	bne.n	800b314 <vTaskSwitchContext+0x90>
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	685a      	ldr	r2, [r3, #4]
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	605a      	str	r2, [r3, #4]
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	4a08      	ldr	r2, [pc, #32]	; (800b33c <vTaskSwitchContext+0xb8>)
 800b31c:	6013      	str	r3, [r2, #0]
}
 800b31e:	bf00      	nop
 800b320:	371c      	adds	r7, #28
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop
 800b32c:	20000d98 	.word	0x20000d98
 800b330:	20000d84 	.word	0x20000d84
 800b334:	20000d78 	.word	0x20000d78
 800b338:	20000c74 	.word	0x20000c74
 800b33c:	20000c70 	.word	0x20000c70

0800b340 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b082      	sub	sp, #8
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b348:	f000 f852 	bl	800b3f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b34c:	4b06      	ldr	r3, [pc, #24]	; (800b368 <prvIdleTask+0x28>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2b01      	cmp	r3, #1
 800b352:	d9f9      	bls.n	800b348 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b354:	4b05      	ldr	r3, [pc, #20]	; (800b36c <prvIdleTask+0x2c>)
 800b356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b35a:	601a      	str	r2, [r3, #0]
 800b35c:	f3bf 8f4f 	dsb	sy
 800b360:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b364:	e7f0      	b.n	800b348 <prvIdleTask+0x8>
 800b366:	bf00      	nop
 800b368:	20000c74 	.word	0x20000c74
 800b36c:	e000ed04 	.word	0xe000ed04

0800b370 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b376:	2300      	movs	r3, #0
 800b378:	607b      	str	r3, [r7, #4]
 800b37a:	e00c      	b.n	800b396 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	4613      	mov	r3, r2
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4413      	add	r3, r2
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	4a12      	ldr	r2, [pc, #72]	; (800b3d0 <prvInitialiseTaskLists+0x60>)
 800b388:	4413      	add	r3, r2
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7ff fb2b 	bl	800a9e6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	3301      	adds	r3, #1
 800b394:	607b      	str	r3, [r7, #4]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2b06      	cmp	r3, #6
 800b39a:	d9ef      	bls.n	800b37c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b39c:	480d      	ldr	r0, [pc, #52]	; (800b3d4 <prvInitialiseTaskLists+0x64>)
 800b39e:	f7ff fb22 	bl	800a9e6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b3a2:	480d      	ldr	r0, [pc, #52]	; (800b3d8 <prvInitialiseTaskLists+0x68>)
 800b3a4:	f7ff fb1f 	bl	800a9e6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b3a8:	480c      	ldr	r0, [pc, #48]	; (800b3dc <prvInitialiseTaskLists+0x6c>)
 800b3aa:	f7ff fb1c 	bl	800a9e6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b3ae:	480c      	ldr	r0, [pc, #48]	; (800b3e0 <prvInitialiseTaskLists+0x70>)
 800b3b0:	f7ff fb19 	bl	800a9e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b3b4:	480b      	ldr	r0, [pc, #44]	; (800b3e4 <prvInitialiseTaskLists+0x74>)
 800b3b6:	f7ff fb16 	bl	800a9e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b3ba:	4b0b      	ldr	r3, [pc, #44]	; (800b3e8 <prvInitialiseTaskLists+0x78>)
 800b3bc:	4a05      	ldr	r2, [pc, #20]	; (800b3d4 <prvInitialiseTaskLists+0x64>)
 800b3be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b3c0:	4b0a      	ldr	r3, [pc, #40]	; (800b3ec <prvInitialiseTaskLists+0x7c>)
 800b3c2:	4a05      	ldr	r2, [pc, #20]	; (800b3d8 <prvInitialiseTaskLists+0x68>)
 800b3c4:	601a      	str	r2, [r3, #0]
}
 800b3c6:	bf00      	nop
 800b3c8:	3708      	adds	r7, #8
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20000c74 	.word	0x20000c74
 800b3d4:	20000d00 	.word	0x20000d00
 800b3d8:	20000d14 	.word	0x20000d14
 800b3dc:	20000d30 	.word	0x20000d30
 800b3e0:	20000d44 	.word	0x20000d44
 800b3e4:	20000d5c 	.word	0x20000d5c
 800b3e8:	20000d28 	.word	0x20000d28
 800b3ec:	20000d2c 	.word	0x20000d2c

0800b3f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b3f6:	e019      	b.n	800b42c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b3f8:	f000 f9f0 	bl	800b7dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3fc:	4b10      	ldr	r3, [pc, #64]	; (800b440 <prvCheckTasksWaitingTermination+0x50>)
 800b3fe:	68db      	ldr	r3, [r3, #12]
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	3304      	adds	r3, #4
 800b408:	4618      	mov	r0, r3
 800b40a:	f7ff fb76 	bl	800aafa <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b40e:	4b0d      	ldr	r3, [pc, #52]	; (800b444 <prvCheckTasksWaitingTermination+0x54>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	3b01      	subs	r3, #1
 800b414:	4a0b      	ldr	r2, [pc, #44]	; (800b444 <prvCheckTasksWaitingTermination+0x54>)
 800b416:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b418:	4b0b      	ldr	r3, [pc, #44]	; (800b448 <prvCheckTasksWaitingTermination+0x58>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	3b01      	subs	r3, #1
 800b41e:	4a0a      	ldr	r2, [pc, #40]	; (800b448 <prvCheckTasksWaitingTermination+0x58>)
 800b420:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b422:	f000 fa0f 	bl	800b844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 f810 	bl	800b44c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b42c:	4b06      	ldr	r3, [pc, #24]	; (800b448 <prvCheckTasksWaitingTermination+0x58>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d1e1      	bne.n	800b3f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b434:	bf00      	nop
 800b436:	bf00      	nop
 800b438:	3708      	adds	r7, #8
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	20000d44 	.word	0x20000d44
 800b444:	20000d70 	.word	0x20000d70
 800b448:	20000d58 	.word	0x20000d58

0800b44c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d108      	bne.n	800b470 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b462:	4618      	mov	r0, r3
 800b464:	f000 fb6c 	bl	800bb40 <vPortFree>
				vPortFree( pxTCB );
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f000 fb69 	bl	800bb40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b46e:	e01a      	b.n	800b4a6 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b476:	2b01      	cmp	r3, #1
 800b478:	d103      	bne.n	800b482 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 fb60 	bl	800bb40 <vPortFree>
	}
 800b480:	e011      	b.n	800b4a6 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b488:	2b02      	cmp	r3, #2
 800b48a:	d00c      	beq.n	800b4a6 <prvDeleteTCB+0x5a>
	__asm volatile
 800b48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b490:	b672      	cpsid	i
 800b492:	f383 8811 	msr	BASEPRI, r3
 800b496:	f3bf 8f6f 	isb	sy
 800b49a:	f3bf 8f4f 	dsb	sy
 800b49e:	b662      	cpsie	i
 800b4a0:	60fb      	str	r3, [r7, #12]
}
 800b4a2:	bf00      	nop
 800b4a4:	e7fe      	b.n	800b4a4 <prvDeleteTCB+0x58>
	}
 800b4a6:	bf00      	nop
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
	...

0800b4b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4b6:	4b0c      	ldr	r3, [pc, #48]	; (800b4e8 <prvResetNextTaskUnblockTime+0x38>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d104      	bne.n	800b4ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b4c0:	4b0a      	ldr	r3, [pc, #40]	; (800b4ec <prvResetNextTaskUnblockTime+0x3c>)
 800b4c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b4c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b4c8:	e008      	b.n	800b4dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4ca:	4b07      	ldr	r3, [pc, #28]	; (800b4e8 <prvResetNextTaskUnblockTime+0x38>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	68db      	ldr	r3, [r3, #12]
 800b4d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	4a04      	ldr	r2, [pc, #16]	; (800b4ec <prvResetNextTaskUnblockTime+0x3c>)
 800b4da:	6013      	str	r3, [r2, #0]
}
 800b4dc:	bf00      	nop
 800b4de:	370c      	adds	r7, #12
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr
 800b4e8:	20000d28 	.word	0x20000d28
 800b4ec:	20000d90 	.word	0x20000d90

0800b4f0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b4fa:	4b29      	ldr	r3, [pc, #164]	; (800b5a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b500:	4b28      	ldr	r3, [pc, #160]	; (800b5a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	3304      	adds	r3, #4
 800b506:	4618      	mov	r0, r3
 800b508:	f7ff faf7 	bl	800aafa <uxListRemove>
 800b50c:	4603      	mov	r3, r0
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d10b      	bne.n	800b52a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b512:	4b24      	ldr	r3, [pc, #144]	; (800b5a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b518:	2201      	movs	r2, #1
 800b51a:	fa02 f303 	lsl.w	r3, r2, r3
 800b51e:	43da      	mvns	r2, r3
 800b520:	4b21      	ldr	r3, [pc, #132]	; (800b5a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4013      	ands	r3, r2
 800b526:	4a20      	ldr	r2, [pc, #128]	; (800b5a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b528:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b530:	d10a      	bne.n	800b548 <prvAddCurrentTaskToDelayedList+0x58>
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d007      	beq.n	800b548 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b538:	4b1a      	ldr	r3, [pc, #104]	; (800b5a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	3304      	adds	r3, #4
 800b53e:	4619      	mov	r1, r3
 800b540:	481a      	ldr	r0, [pc, #104]	; (800b5ac <prvAddCurrentTaskToDelayedList+0xbc>)
 800b542:	f7ff fa7d 	bl	800aa40 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b546:	e026      	b.n	800b596 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b548:	68fa      	ldr	r2, [r7, #12]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	4413      	add	r3, r2
 800b54e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b550:	4b14      	ldr	r3, [pc, #80]	; (800b5a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	68ba      	ldr	r2, [r7, #8]
 800b556:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b558:	68ba      	ldr	r2, [r7, #8]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d209      	bcs.n	800b574 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b560:	4b13      	ldr	r3, [pc, #76]	; (800b5b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	4b0f      	ldr	r3, [pc, #60]	; (800b5a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	3304      	adds	r3, #4
 800b56a:	4619      	mov	r1, r3
 800b56c:	4610      	mov	r0, r2
 800b56e:	f7ff fa8b 	bl	800aa88 <vListInsert>
}
 800b572:	e010      	b.n	800b596 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b574:	4b0f      	ldr	r3, [pc, #60]	; (800b5b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b576:	681a      	ldr	r2, [r3, #0]
 800b578:	4b0a      	ldr	r3, [pc, #40]	; (800b5a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	3304      	adds	r3, #4
 800b57e:	4619      	mov	r1, r3
 800b580:	4610      	mov	r0, r2
 800b582:	f7ff fa81 	bl	800aa88 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b586:	4b0c      	ldr	r3, [pc, #48]	; (800b5b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	68ba      	ldr	r2, [r7, #8]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d202      	bcs.n	800b596 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b590:	4a09      	ldr	r2, [pc, #36]	; (800b5b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	6013      	str	r3, [r2, #0]
}
 800b596:	bf00      	nop
 800b598:	3710      	adds	r7, #16
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	20000d74 	.word	0x20000d74
 800b5a4:	20000c70 	.word	0x20000c70
 800b5a8:	20000d78 	.word	0x20000d78
 800b5ac:	20000d5c 	.word	0x20000d5c
 800b5b0:	20000d2c 	.word	0x20000d2c
 800b5b4:	20000d28 	.word	0x20000d28
 800b5b8:	20000d90 	.word	0x20000d90

0800b5bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b085      	sub	sp, #20
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	3b04      	subs	r3, #4
 800b5cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b5d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	3b04      	subs	r3, #4
 800b5da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	f023 0201 	bic.w	r2, r3, #1
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	3b04      	subs	r3, #4
 800b5ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b5ec:	4a0c      	ldr	r2, [pc, #48]	; (800b620 <pxPortInitialiseStack+0x64>)
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	3b14      	subs	r3, #20
 800b5f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	3b04      	subs	r3, #4
 800b602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f06f 0202 	mvn.w	r2, #2
 800b60a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	3b20      	subs	r3, #32
 800b610:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b612:	68fb      	ldr	r3, [r7, #12]
}
 800b614:	4618      	mov	r0, r3
 800b616:	3714      	adds	r7, #20
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr
 800b620:	0800b625 	.word	0x0800b625

0800b624 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b624:	b480      	push	{r7}
 800b626:	b085      	sub	sp, #20
 800b628:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b62a:	2300      	movs	r3, #0
 800b62c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b62e:	4b14      	ldr	r3, [pc, #80]	; (800b680 <prvTaskExitError+0x5c>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b636:	d00c      	beq.n	800b652 <prvTaskExitError+0x2e>
	__asm volatile
 800b638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63c:	b672      	cpsid	i
 800b63e:	f383 8811 	msr	BASEPRI, r3
 800b642:	f3bf 8f6f 	isb	sy
 800b646:	f3bf 8f4f 	dsb	sy
 800b64a:	b662      	cpsie	i
 800b64c:	60fb      	str	r3, [r7, #12]
}
 800b64e:	bf00      	nop
 800b650:	e7fe      	b.n	800b650 <prvTaskExitError+0x2c>
	__asm volatile
 800b652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b656:	b672      	cpsid	i
 800b658:	f383 8811 	msr	BASEPRI, r3
 800b65c:	f3bf 8f6f 	isb	sy
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	b662      	cpsie	i
 800b666:	60bb      	str	r3, [r7, #8]
}
 800b668:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b66a:	bf00      	nop
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d0fc      	beq.n	800b66c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b672:	bf00      	nop
 800b674:	bf00      	nop
 800b676:	3714      	adds	r7, #20
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr
 800b680:	20000048 	.word	0x20000048
	...

0800b690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b690:	4b07      	ldr	r3, [pc, #28]	; (800b6b0 <pxCurrentTCBConst2>)
 800b692:	6819      	ldr	r1, [r3, #0]
 800b694:	6808      	ldr	r0, [r1, #0]
 800b696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b69a:	f380 8809 	msr	PSP, r0
 800b69e:	f3bf 8f6f 	isb	sy
 800b6a2:	f04f 0000 	mov.w	r0, #0
 800b6a6:	f380 8811 	msr	BASEPRI, r0
 800b6aa:	4770      	bx	lr
 800b6ac:	f3af 8000 	nop.w

0800b6b0 <pxCurrentTCBConst2>:
 800b6b0:	20000c70 	.word	0x20000c70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b6b4:	bf00      	nop
 800b6b6:	bf00      	nop

0800b6b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b6b8:	4808      	ldr	r0, [pc, #32]	; (800b6dc <prvPortStartFirstTask+0x24>)
 800b6ba:	6800      	ldr	r0, [r0, #0]
 800b6bc:	6800      	ldr	r0, [r0, #0]
 800b6be:	f380 8808 	msr	MSP, r0
 800b6c2:	f04f 0000 	mov.w	r0, #0
 800b6c6:	f380 8814 	msr	CONTROL, r0
 800b6ca:	b662      	cpsie	i
 800b6cc:	b661      	cpsie	f
 800b6ce:	f3bf 8f4f 	dsb	sy
 800b6d2:	f3bf 8f6f 	isb	sy
 800b6d6:	df00      	svc	0
 800b6d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b6da:	bf00      	nop
 800b6dc:	e000ed08 	.word	0xe000ed08

0800b6e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b6e6:	4b37      	ldr	r3, [pc, #220]	; (800b7c4 <xPortStartScheduler+0xe4>)
 800b6e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	b2db      	uxtb	r3, r3
 800b6f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	22ff      	movs	r2, #255	; 0xff
 800b6f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b700:	78fb      	ldrb	r3, [r7, #3]
 800b702:	b2db      	uxtb	r3, r3
 800b704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b708:	b2da      	uxtb	r2, r3
 800b70a:	4b2f      	ldr	r3, [pc, #188]	; (800b7c8 <xPortStartScheduler+0xe8>)
 800b70c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b70e:	4b2f      	ldr	r3, [pc, #188]	; (800b7cc <xPortStartScheduler+0xec>)
 800b710:	2207      	movs	r2, #7
 800b712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b714:	e009      	b.n	800b72a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b716:	4b2d      	ldr	r3, [pc, #180]	; (800b7cc <xPortStartScheduler+0xec>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	3b01      	subs	r3, #1
 800b71c:	4a2b      	ldr	r2, [pc, #172]	; (800b7cc <xPortStartScheduler+0xec>)
 800b71e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b720:	78fb      	ldrb	r3, [r7, #3]
 800b722:	b2db      	uxtb	r3, r3
 800b724:	005b      	lsls	r3, r3, #1
 800b726:	b2db      	uxtb	r3, r3
 800b728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b72a:	78fb      	ldrb	r3, [r7, #3]
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b732:	2b80      	cmp	r3, #128	; 0x80
 800b734:	d0ef      	beq.n	800b716 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b736:	4b25      	ldr	r3, [pc, #148]	; (800b7cc <xPortStartScheduler+0xec>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f1c3 0307 	rsb	r3, r3, #7
 800b73e:	2b04      	cmp	r3, #4
 800b740:	d00c      	beq.n	800b75c <xPortStartScheduler+0x7c>
	__asm volatile
 800b742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b746:	b672      	cpsid	i
 800b748:	f383 8811 	msr	BASEPRI, r3
 800b74c:	f3bf 8f6f 	isb	sy
 800b750:	f3bf 8f4f 	dsb	sy
 800b754:	b662      	cpsie	i
 800b756:	60bb      	str	r3, [r7, #8]
}
 800b758:	bf00      	nop
 800b75a:	e7fe      	b.n	800b75a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b75c:	4b1b      	ldr	r3, [pc, #108]	; (800b7cc <xPortStartScheduler+0xec>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	021b      	lsls	r3, r3, #8
 800b762:	4a1a      	ldr	r2, [pc, #104]	; (800b7cc <xPortStartScheduler+0xec>)
 800b764:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b766:	4b19      	ldr	r3, [pc, #100]	; (800b7cc <xPortStartScheduler+0xec>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b76e:	4a17      	ldr	r2, [pc, #92]	; (800b7cc <xPortStartScheduler+0xec>)
 800b770:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	b2da      	uxtb	r2, r3
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b77a:	4b15      	ldr	r3, [pc, #84]	; (800b7d0 <xPortStartScheduler+0xf0>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a14      	ldr	r2, [pc, #80]	; (800b7d0 <xPortStartScheduler+0xf0>)
 800b780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b784:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b786:	4b12      	ldr	r3, [pc, #72]	; (800b7d0 <xPortStartScheduler+0xf0>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4a11      	ldr	r2, [pc, #68]	; (800b7d0 <xPortStartScheduler+0xf0>)
 800b78c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b790:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b792:	f000 f8dd 	bl	800b950 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b796:	4b0f      	ldr	r3, [pc, #60]	; (800b7d4 <xPortStartScheduler+0xf4>)
 800b798:	2200      	movs	r2, #0
 800b79a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b79c:	f000 f8fc 	bl	800b998 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b7a0:	4b0d      	ldr	r3, [pc, #52]	; (800b7d8 <xPortStartScheduler+0xf8>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4a0c      	ldr	r2, [pc, #48]	; (800b7d8 <xPortStartScheduler+0xf8>)
 800b7a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b7aa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b7ac:	f7ff ff84 	bl	800b6b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b7b0:	f7ff fd68 	bl	800b284 <vTaskSwitchContext>
	prvTaskExitError();
 800b7b4:	f7ff ff36 	bl	800b624 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	e000e400 	.word	0xe000e400
 800b7c8:	20000d9c 	.word	0x20000d9c
 800b7cc:	20000da0 	.word	0x20000da0
 800b7d0:	e000ed20 	.word	0xe000ed20
 800b7d4:	20000048 	.word	0x20000048
 800b7d8:	e000ef34 	.word	0xe000ef34

0800b7dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
	__asm volatile
 800b7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e6:	b672      	cpsid	i
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	b662      	cpsie	i
 800b7f6:	607b      	str	r3, [r7, #4]
}
 800b7f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b7fa:	4b10      	ldr	r3, [pc, #64]	; (800b83c <vPortEnterCritical+0x60>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	3301      	adds	r3, #1
 800b800:	4a0e      	ldr	r2, [pc, #56]	; (800b83c <vPortEnterCritical+0x60>)
 800b802:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b804:	4b0d      	ldr	r3, [pc, #52]	; (800b83c <vPortEnterCritical+0x60>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d111      	bne.n	800b830 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b80c:	4b0c      	ldr	r3, [pc, #48]	; (800b840 <vPortEnterCritical+0x64>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	b2db      	uxtb	r3, r3
 800b812:	2b00      	cmp	r3, #0
 800b814:	d00c      	beq.n	800b830 <vPortEnterCritical+0x54>
	__asm volatile
 800b816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81a:	b672      	cpsid	i
 800b81c:	f383 8811 	msr	BASEPRI, r3
 800b820:	f3bf 8f6f 	isb	sy
 800b824:	f3bf 8f4f 	dsb	sy
 800b828:	b662      	cpsie	i
 800b82a:	603b      	str	r3, [r7, #0]
}
 800b82c:	bf00      	nop
 800b82e:	e7fe      	b.n	800b82e <vPortEnterCritical+0x52>
	}
}
 800b830:	bf00      	nop
 800b832:	370c      	adds	r7, #12
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr
 800b83c:	20000048 	.word	0x20000048
 800b840:	e000ed04 	.word	0xe000ed04

0800b844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b84a:	4b13      	ldr	r3, [pc, #76]	; (800b898 <vPortExitCritical+0x54>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d10c      	bne.n	800b86c <vPortExitCritical+0x28>
	__asm volatile
 800b852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b856:	b672      	cpsid	i
 800b858:	f383 8811 	msr	BASEPRI, r3
 800b85c:	f3bf 8f6f 	isb	sy
 800b860:	f3bf 8f4f 	dsb	sy
 800b864:	b662      	cpsie	i
 800b866:	607b      	str	r3, [r7, #4]
}
 800b868:	bf00      	nop
 800b86a:	e7fe      	b.n	800b86a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800b86c:	4b0a      	ldr	r3, [pc, #40]	; (800b898 <vPortExitCritical+0x54>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	3b01      	subs	r3, #1
 800b872:	4a09      	ldr	r2, [pc, #36]	; (800b898 <vPortExitCritical+0x54>)
 800b874:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b876:	4b08      	ldr	r3, [pc, #32]	; (800b898 <vPortExitCritical+0x54>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d105      	bne.n	800b88a <vPortExitCritical+0x46>
 800b87e:	2300      	movs	r3, #0
 800b880:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b888:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b88a:	bf00      	nop
 800b88c:	370c      	adds	r7, #12
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr
 800b896:	bf00      	nop
 800b898:	20000048 	.word	0x20000048
 800b89c:	00000000 	.word	0x00000000

0800b8a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b8a0:	f3ef 8009 	mrs	r0, PSP
 800b8a4:	f3bf 8f6f 	isb	sy
 800b8a8:	4b15      	ldr	r3, [pc, #84]	; (800b900 <pxCurrentTCBConst>)
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	f01e 0f10 	tst.w	lr, #16
 800b8b0:	bf08      	it	eq
 800b8b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b8b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ba:	6010      	str	r0, [r2, #0]
 800b8bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b8c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b8c4:	b672      	cpsid	i
 800b8c6:	f380 8811 	msr	BASEPRI, r0
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	f3bf 8f6f 	isb	sy
 800b8d2:	b662      	cpsie	i
 800b8d4:	f7ff fcd6 	bl	800b284 <vTaskSwitchContext>
 800b8d8:	f04f 0000 	mov.w	r0, #0
 800b8dc:	f380 8811 	msr	BASEPRI, r0
 800b8e0:	bc09      	pop	{r0, r3}
 800b8e2:	6819      	ldr	r1, [r3, #0]
 800b8e4:	6808      	ldr	r0, [r1, #0]
 800b8e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ea:	f01e 0f10 	tst.w	lr, #16
 800b8ee:	bf08      	it	eq
 800b8f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b8f4:	f380 8809 	msr	PSP, r0
 800b8f8:	f3bf 8f6f 	isb	sy
 800b8fc:	4770      	bx	lr
 800b8fe:	bf00      	nop

0800b900 <pxCurrentTCBConst>:
 800b900:	20000c70 	.word	0x20000c70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b904:	bf00      	nop
 800b906:	bf00      	nop

0800b908 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
	__asm volatile
 800b90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b912:	b672      	cpsid	i
 800b914:	f383 8811 	msr	BASEPRI, r3
 800b918:	f3bf 8f6f 	isb	sy
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	b662      	cpsie	i
 800b922:	607b      	str	r3, [r7, #4]
}
 800b924:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b926:	f7ff fbf3 	bl	800b110 <xTaskIncrementTick>
 800b92a:	4603      	mov	r3, r0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d003      	beq.n	800b938 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b930:	4b06      	ldr	r3, [pc, #24]	; (800b94c <SysTick_Handler+0x44>)
 800b932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b936:	601a      	str	r2, [r3, #0]
 800b938:	2300      	movs	r3, #0
 800b93a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	f383 8811 	msr	BASEPRI, r3
}
 800b942:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b944:	bf00      	nop
 800b946:	3708      	adds	r7, #8
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	e000ed04 	.word	0xe000ed04

0800b950 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b950:	b480      	push	{r7}
 800b952:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b954:	4b0b      	ldr	r3, [pc, #44]	; (800b984 <vPortSetupTimerInterrupt+0x34>)
 800b956:	2200      	movs	r2, #0
 800b958:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b95a:	4b0b      	ldr	r3, [pc, #44]	; (800b988 <vPortSetupTimerInterrupt+0x38>)
 800b95c:	2200      	movs	r2, #0
 800b95e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b960:	4b0a      	ldr	r3, [pc, #40]	; (800b98c <vPortSetupTimerInterrupt+0x3c>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4a0a      	ldr	r2, [pc, #40]	; (800b990 <vPortSetupTimerInterrupt+0x40>)
 800b966:	fba2 2303 	umull	r2, r3, r2, r3
 800b96a:	099b      	lsrs	r3, r3, #6
 800b96c:	4a09      	ldr	r2, [pc, #36]	; (800b994 <vPortSetupTimerInterrupt+0x44>)
 800b96e:	3b01      	subs	r3, #1
 800b970:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b972:	4b04      	ldr	r3, [pc, #16]	; (800b984 <vPortSetupTimerInterrupt+0x34>)
 800b974:	2207      	movs	r2, #7
 800b976:	601a      	str	r2, [r3, #0]
}
 800b978:	bf00      	nop
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr
 800b982:	bf00      	nop
 800b984:	e000e010 	.word	0xe000e010
 800b988:	e000e018 	.word	0xe000e018
 800b98c:	2000003c 	.word	0x2000003c
 800b990:	10624dd3 	.word	0x10624dd3
 800b994:	e000e014 	.word	0xe000e014

0800b998 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b998:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b9a8 <vPortEnableVFP+0x10>
 800b99c:	6801      	ldr	r1, [r0, #0]
 800b99e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b9a2:	6001      	str	r1, [r0, #0]
 800b9a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b9a6:	bf00      	nop
 800b9a8:	e000ed88 	.word	0xe000ed88

0800b9ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b08a      	sub	sp, #40	; 0x28
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b9b8:	f7ff fafe 	bl	800afb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b9bc:	4b5b      	ldr	r3, [pc, #364]	; (800bb2c <pvPortMalloc+0x180>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d101      	bne.n	800b9c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b9c4:	f000 f91a 	bl	800bbfc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b9c8:	4b59      	ldr	r3, [pc, #356]	; (800bb30 <pvPortMalloc+0x184>)
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	4013      	ands	r3, r2
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	f040 8092 	bne.w	800bafa <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d01f      	beq.n	800ba1c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800b9dc:	2208      	movs	r2, #8
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4413      	add	r3, r2
 800b9e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f003 0307 	and.w	r3, r3, #7
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d016      	beq.n	800ba1c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f023 0307 	bic.w	r3, r3, #7
 800b9f4:	3308      	adds	r3, #8
 800b9f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f003 0307 	and.w	r3, r3, #7
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d00c      	beq.n	800ba1c <pvPortMalloc+0x70>
	__asm volatile
 800ba02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba06:	b672      	cpsid	i
 800ba08:	f383 8811 	msr	BASEPRI, r3
 800ba0c:	f3bf 8f6f 	isb	sy
 800ba10:	f3bf 8f4f 	dsb	sy
 800ba14:	b662      	cpsie	i
 800ba16:	617b      	str	r3, [r7, #20]
}
 800ba18:	bf00      	nop
 800ba1a:	e7fe      	b.n	800ba1a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d06b      	beq.n	800bafa <pvPortMalloc+0x14e>
 800ba22:	4b44      	ldr	r3, [pc, #272]	; (800bb34 <pvPortMalloc+0x188>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d866      	bhi.n	800bafa <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ba2c:	4b42      	ldr	r3, [pc, #264]	; (800bb38 <pvPortMalloc+0x18c>)
 800ba2e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ba30:	4b41      	ldr	r3, [pc, #260]	; (800bb38 <pvPortMalloc+0x18c>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba36:	e004      	b.n	800ba42 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800ba38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ba3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d903      	bls.n	800ba54 <pvPortMalloc+0xa8>
 800ba4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d1f1      	bne.n	800ba38 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ba54:	4b35      	ldr	r3, [pc, #212]	; (800bb2c <pvPortMalloc+0x180>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d04d      	beq.n	800bafa <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ba5e:	6a3b      	ldr	r3, [r7, #32]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	2208      	movs	r2, #8
 800ba64:	4413      	add	r3, r2
 800ba66:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ba68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	6a3b      	ldr	r3, [r7, #32]
 800ba6e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ba70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba72:	685a      	ldr	r2, [r3, #4]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	1ad2      	subs	r2, r2, r3
 800ba78:	2308      	movs	r3, #8
 800ba7a:	005b      	lsls	r3, r3, #1
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d921      	bls.n	800bac4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ba80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	4413      	add	r3, r2
 800ba86:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	f003 0307 	and.w	r3, r3, #7
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d00c      	beq.n	800baac <pvPortMalloc+0x100>
	__asm volatile
 800ba92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba96:	b672      	cpsid	i
 800ba98:	f383 8811 	msr	BASEPRI, r3
 800ba9c:	f3bf 8f6f 	isb	sy
 800baa0:	f3bf 8f4f 	dsb	sy
 800baa4:	b662      	cpsie	i
 800baa6:	613b      	str	r3, [r7, #16]
}
 800baa8:	bf00      	nop
 800baaa:	e7fe      	b.n	800baaa <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800baac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baae:	685a      	ldr	r2, [r3, #4]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	1ad2      	subs	r2, r2, r3
 800bab4:	69bb      	ldr	r3, [r7, #24]
 800bab6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800babe:	69b8      	ldr	r0, [r7, #24]
 800bac0:	f000 f8fe 	bl	800bcc0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bac4:	4b1b      	ldr	r3, [pc, #108]	; (800bb34 <pvPortMalloc+0x188>)
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	1ad3      	subs	r3, r2, r3
 800bace:	4a19      	ldr	r2, [pc, #100]	; (800bb34 <pvPortMalloc+0x188>)
 800bad0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bad2:	4b18      	ldr	r3, [pc, #96]	; (800bb34 <pvPortMalloc+0x188>)
 800bad4:	681a      	ldr	r2, [r3, #0]
 800bad6:	4b19      	ldr	r3, [pc, #100]	; (800bb3c <pvPortMalloc+0x190>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	429a      	cmp	r2, r3
 800badc:	d203      	bcs.n	800bae6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bade:	4b15      	ldr	r3, [pc, #84]	; (800bb34 <pvPortMalloc+0x188>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	4a16      	ldr	r2, [pc, #88]	; (800bb3c <pvPortMalloc+0x190>)
 800bae4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae8:	685a      	ldr	r2, [r3, #4]
 800baea:	4b11      	ldr	r3, [pc, #68]	; (800bb30 <pvPortMalloc+0x184>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	431a      	orrs	r2, r3
 800baf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800baf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf6:	2200      	movs	r2, #0
 800baf8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bafa:	f7ff fa6b 	bl	800afd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bafe:	69fb      	ldr	r3, [r7, #28]
 800bb00:	f003 0307 	and.w	r3, r3, #7
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d00c      	beq.n	800bb22 <pvPortMalloc+0x176>
	__asm volatile
 800bb08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb0c:	b672      	cpsid	i
 800bb0e:	f383 8811 	msr	BASEPRI, r3
 800bb12:	f3bf 8f6f 	isb	sy
 800bb16:	f3bf 8f4f 	dsb	sy
 800bb1a:	b662      	cpsie	i
 800bb1c:	60fb      	str	r3, [r7, #12]
}
 800bb1e:	bf00      	nop
 800bb20:	e7fe      	b.n	800bb20 <pvPortMalloc+0x174>
	return pvReturn;
 800bb22:	69fb      	ldr	r3, [r7, #28]
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3728      	adds	r7, #40	; 0x28
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}
 800bb2c:	200049ac 	.word	0x200049ac
 800bb30:	200049b8 	.word	0x200049b8
 800bb34:	200049b0 	.word	0x200049b0
 800bb38:	200049a4 	.word	0x200049a4
 800bb3c:	200049b4 	.word	0x200049b4

0800bb40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b086      	sub	sp, #24
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d04c      	beq.n	800bbec <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bb52:	2308      	movs	r3, #8
 800bb54:	425b      	negs	r3, r3
 800bb56:	697a      	ldr	r2, [r7, #20]
 800bb58:	4413      	add	r3, r2
 800bb5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	685a      	ldr	r2, [r3, #4]
 800bb64:	4b23      	ldr	r3, [pc, #140]	; (800bbf4 <vPortFree+0xb4>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	4013      	ands	r3, r2
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d10c      	bne.n	800bb88 <vPortFree+0x48>
	__asm volatile
 800bb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb72:	b672      	cpsid	i
 800bb74:	f383 8811 	msr	BASEPRI, r3
 800bb78:	f3bf 8f6f 	isb	sy
 800bb7c:	f3bf 8f4f 	dsb	sy
 800bb80:	b662      	cpsie	i
 800bb82:	60fb      	str	r3, [r7, #12]
}
 800bb84:	bf00      	nop
 800bb86:	e7fe      	b.n	800bb86 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d00c      	beq.n	800bbaa <vPortFree+0x6a>
	__asm volatile
 800bb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb94:	b672      	cpsid	i
 800bb96:	f383 8811 	msr	BASEPRI, r3
 800bb9a:	f3bf 8f6f 	isb	sy
 800bb9e:	f3bf 8f4f 	dsb	sy
 800bba2:	b662      	cpsie	i
 800bba4:	60bb      	str	r3, [r7, #8]
}
 800bba6:	bf00      	nop
 800bba8:	e7fe      	b.n	800bba8 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	685a      	ldr	r2, [r3, #4]
 800bbae:	4b11      	ldr	r3, [pc, #68]	; (800bbf4 <vPortFree+0xb4>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	4013      	ands	r3, r2
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d019      	beq.n	800bbec <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d115      	bne.n	800bbec <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	685a      	ldr	r2, [r3, #4]
 800bbc4:	4b0b      	ldr	r3, [pc, #44]	; (800bbf4 <vPortFree+0xb4>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	43db      	mvns	r3, r3
 800bbca:	401a      	ands	r2, r3
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bbd0:	f7ff f9f2 	bl	800afb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	685a      	ldr	r2, [r3, #4]
 800bbd8:	4b07      	ldr	r3, [pc, #28]	; (800bbf8 <vPortFree+0xb8>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4413      	add	r3, r2
 800bbde:	4a06      	ldr	r2, [pc, #24]	; (800bbf8 <vPortFree+0xb8>)
 800bbe0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bbe2:	6938      	ldr	r0, [r7, #16]
 800bbe4:	f000 f86c 	bl	800bcc0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bbe8:	f7ff f9f4 	bl	800afd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bbec:	bf00      	nop
 800bbee:	3718      	adds	r7, #24
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	200049b8 	.word	0x200049b8
 800bbf8:	200049b0 	.word	0x200049b0

0800bbfc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b085      	sub	sp, #20
 800bc00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bc02:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bc06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bc08:	4b27      	ldr	r3, [pc, #156]	; (800bca8 <prvHeapInit+0xac>)
 800bc0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f003 0307 	and.w	r3, r3, #7
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d00c      	beq.n	800bc30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	3307      	adds	r3, #7
 800bc1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f023 0307 	bic.w	r3, r3, #7
 800bc22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bc24:	68ba      	ldr	r2, [r7, #8]
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	1ad3      	subs	r3, r2, r3
 800bc2a:	4a1f      	ldr	r2, [pc, #124]	; (800bca8 <prvHeapInit+0xac>)
 800bc2c:	4413      	add	r3, r2
 800bc2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bc34:	4a1d      	ldr	r2, [pc, #116]	; (800bcac <prvHeapInit+0xb0>)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bc3a:	4b1c      	ldr	r3, [pc, #112]	; (800bcac <prvHeapInit+0xb0>)
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	68ba      	ldr	r2, [r7, #8]
 800bc44:	4413      	add	r3, r2
 800bc46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bc48:	2208      	movs	r2, #8
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	1a9b      	subs	r3, r3, r2
 800bc4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f023 0307 	bic.w	r3, r3, #7
 800bc56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	4a15      	ldr	r2, [pc, #84]	; (800bcb0 <prvHeapInit+0xb4>)
 800bc5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bc5e:	4b14      	ldr	r3, [pc, #80]	; (800bcb0 <prvHeapInit+0xb4>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2200      	movs	r2, #0
 800bc64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bc66:	4b12      	ldr	r3, [pc, #72]	; (800bcb0 <prvHeapInit+0xb4>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	1ad2      	subs	r2, r2, r3
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bc7c:	4b0c      	ldr	r3, [pc, #48]	; (800bcb0 <prvHeapInit+0xb4>)
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	4a0a      	ldr	r2, [pc, #40]	; (800bcb4 <prvHeapInit+0xb8>)
 800bc8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	4a09      	ldr	r2, [pc, #36]	; (800bcb8 <prvHeapInit+0xbc>)
 800bc92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc94:	4b09      	ldr	r3, [pc, #36]	; (800bcbc <prvHeapInit+0xc0>)
 800bc96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bc9a:	601a      	str	r2, [r3, #0]
}
 800bc9c:	bf00      	nop
 800bc9e:	3714      	adds	r7, #20
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr
 800bca8:	20000da4 	.word	0x20000da4
 800bcac:	200049a4 	.word	0x200049a4
 800bcb0:	200049ac 	.word	0x200049ac
 800bcb4:	200049b4 	.word	0x200049b4
 800bcb8:	200049b0 	.word	0x200049b0
 800bcbc:	200049b8 	.word	0x200049b8

0800bcc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b085      	sub	sp, #20
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bcc8:	4b28      	ldr	r3, [pc, #160]	; (800bd6c <prvInsertBlockIntoFreeList+0xac>)
 800bcca:	60fb      	str	r3, [r7, #12]
 800bccc:	e002      	b.n	800bcd4 <prvInsertBlockIntoFreeList+0x14>
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	60fb      	str	r3, [r7, #12]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d8f7      	bhi.n	800bcce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	68ba      	ldr	r2, [r7, #8]
 800bce8:	4413      	add	r3, r2
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d108      	bne.n	800bd02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	685a      	ldr	r2, [r3, #4]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	441a      	add	r2, r3
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	68ba      	ldr	r2, [r7, #8]
 800bd0c:	441a      	add	r2, r3
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d118      	bne.n	800bd48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	4b15      	ldr	r3, [pc, #84]	; (800bd70 <prvInsertBlockIntoFreeList+0xb0>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d00d      	beq.n	800bd3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	685a      	ldr	r2, [r3, #4]
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	441a      	add	r2, r3
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	601a      	str	r2, [r3, #0]
 800bd3c:	e008      	b.n	800bd50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bd3e:	4b0c      	ldr	r3, [pc, #48]	; (800bd70 <prvInsertBlockIntoFreeList+0xb0>)
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	601a      	str	r2, [r3, #0]
 800bd46:	e003      	b.n	800bd50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bd50:	68fa      	ldr	r2, [r7, #12]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d002      	beq.n	800bd5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd5e:	bf00      	nop
 800bd60:	3714      	adds	r7, #20
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr
 800bd6a:	bf00      	nop
 800bd6c:	200049a4 	.word	0x200049a4
 800bd70:	200049ac 	.word	0x200049ac

0800bd74 <siprintf>:
 800bd74:	b40e      	push	{r1, r2, r3}
 800bd76:	b500      	push	{lr}
 800bd78:	b09c      	sub	sp, #112	; 0x70
 800bd7a:	ab1d      	add	r3, sp, #116	; 0x74
 800bd7c:	9002      	str	r0, [sp, #8]
 800bd7e:	9006      	str	r0, [sp, #24]
 800bd80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bd84:	4809      	ldr	r0, [pc, #36]	; (800bdac <siprintf+0x38>)
 800bd86:	9107      	str	r1, [sp, #28]
 800bd88:	9104      	str	r1, [sp, #16]
 800bd8a:	4909      	ldr	r1, [pc, #36]	; (800bdb0 <siprintf+0x3c>)
 800bd8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd90:	9105      	str	r1, [sp, #20]
 800bd92:	6800      	ldr	r0, [r0, #0]
 800bd94:	9301      	str	r3, [sp, #4]
 800bd96:	a902      	add	r1, sp, #8
 800bd98:	f000 f9a0 	bl	800c0dc <_svfiprintf_r>
 800bd9c:	9b02      	ldr	r3, [sp, #8]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	701a      	strb	r2, [r3, #0]
 800bda2:	b01c      	add	sp, #112	; 0x70
 800bda4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bda8:	b003      	add	sp, #12
 800bdaa:	4770      	bx	lr
 800bdac:	20000098 	.word	0x20000098
 800bdb0:	ffff0208 	.word	0xffff0208

0800bdb4 <memset>:
 800bdb4:	4402      	add	r2, r0
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d100      	bne.n	800bdbe <memset+0xa>
 800bdbc:	4770      	bx	lr
 800bdbe:	f803 1b01 	strb.w	r1, [r3], #1
 800bdc2:	e7f9      	b.n	800bdb8 <memset+0x4>

0800bdc4 <__errno>:
 800bdc4:	4b01      	ldr	r3, [pc, #4]	; (800bdcc <__errno+0x8>)
 800bdc6:	6818      	ldr	r0, [r3, #0]
 800bdc8:	4770      	bx	lr
 800bdca:	bf00      	nop
 800bdcc:	20000098 	.word	0x20000098

0800bdd0 <__libc_init_array>:
 800bdd0:	b570      	push	{r4, r5, r6, lr}
 800bdd2:	4d0d      	ldr	r5, [pc, #52]	; (800be08 <__libc_init_array+0x38>)
 800bdd4:	4c0d      	ldr	r4, [pc, #52]	; (800be0c <__libc_init_array+0x3c>)
 800bdd6:	1b64      	subs	r4, r4, r5
 800bdd8:	10a4      	asrs	r4, r4, #2
 800bdda:	2600      	movs	r6, #0
 800bddc:	42a6      	cmp	r6, r4
 800bdde:	d109      	bne.n	800bdf4 <__libc_init_array+0x24>
 800bde0:	4d0b      	ldr	r5, [pc, #44]	; (800be10 <__libc_init_array+0x40>)
 800bde2:	4c0c      	ldr	r4, [pc, #48]	; (800be14 <__libc_init_array+0x44>)
 800bde4:	f000 fc6a 	bl	800c6bc <_init>
 800bde8:	1b64      	subs	r4, r4, r5
 800bdea:	10a4      	asrs	r4, r4, #2
 800bdec:	2600      	movs	r6, #0
 800bdee:	42a6      	cmp	r6, r4
 800bdf0:	d105      	bne.n	800bdfe <__libc_init_array+0x2e>
 800bdf2:	bd70      	pop	{r4, r5, r6, pc}
 800bdf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdf8:	4798      	blx	r3
 800bdfa:	3601      	adds	r6, #1
 800bdfc:	e7ee      	b.n	800bddc <__libc_init_array+0xc>
 800bdfe:	f855 3b04 	ldr.w	r3, [r5], #4
 800be02:	4798      	blx	r3
 800be04:	3601      	adds	r6, #1
 800be06:	e7f2      	b.n	800bdee <__libc_init_array+0x1e>
 800be08:	08010710 	.word	0x08010710
 800be0c:	08010710 	.word	0x08010710
 800be10:	08010710 	.word	0x08010710
 800be14:	08010714 	.word	0x08010714

0800be18 <__retarget_lock_acquire_recursive>:
 800be18:	4770      	bx	lr

0800be1a <__retarget_lock_release_recursive>:
 800be1a:	4770      	bx	lr

0800be1c <memcpy>:
 800be1c:	440a      	add	r2, r1
 800be1e:	4291      	cmp	r1, r2
 800be20:	f100 33ff 	add.w	r3, r0, #4294967295
 800be24:	d100      	bne.n	800be28 <memcpy+0xc>
 800be26:	4770      	bx	lr
 800be28:	b510      	push	{r4, lr}
 800be2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be32:	4291      	cmp	r1, r2
 800be34:	d1f9      	bne.n	800be2a <memcpy+0xe>
 800be36:	bd10      	pop	{r4, pc}

0800be38 <_free_r>:
 800be38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be3a:	2900      	cmp	r1, #0
 800be3c:	d044      	beq.n	800bec8 <_free_r+0x90>
 800be3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be42:	9001      	str	r0, [sp, #4]
 800be44:	2b00      	cmp	r3, #0
 800be46:	f1a1 0404 	sub.w	r4, r1, #4
 800be4a:	bfb8      	it	lt
 800be4c:	18e4      	addlt	r4, r4, r3
 800be4e:	f000 f8df 	bl	800c010 <__malloc_lock>
 800be52:	4a1e      	ldr	r2, [pc, #120]	; (800becc <_free_r+0x94>)
 800be54:	9801      	ldr	r0, [sp, #4]
 800be56:	6813      	ldr	r3, [r2, #0]
 800be58:	b933      	cbnz	r3, 800be68 <_free_r+0x30>
 800be5a:	6063      	str	r3, [r4, #4]
 800be5c:	6014      	str	r4, [r2, #0]
 800be5e:	b003      	add	sp, #12
 800be60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be64:	f000 b8da 	b.w	800c01c <__malloc_unlock>
 800be68:	42a3      	cmp	r3, r4
 800be6a:	d908      	bls.n	800be7e <_free_r+0x46>
 800be6c:	6825      	ldr	r5, [r4, #0]
 800be6e:	1961      	adds	r1, r4, r5
 800be70:	428b      	cmp	r3, r1
 800be72:	bf01      	itttt	eq
 800be74:	6819      	ldreq	r1, [r3, #0]
 800be76:	685b      	ldreq	r3, [r3, #4]
 800be78:	1949      	addeq	r1, r1, r5
 800be7a:	6021      	streq	r1, [r4, #0]
 800be7c:	e7ed      	b.n	800be5a <_free_r+0x22>
 800be7e:	461a      	mov	r2, r3
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	b10b      	cbz	r3, 800be88 <_free_r+0x50>
 800be84:	42a3      	cmp	r3, r4
 800be86:	d9fa      	bls.n	800be7e <_free_r+0x46>
 800be88:	6811      	ldr	r1, [r2, #0]
 800be8a:	1855      	adds	r5, r2, r1
 800be8c:	42a5      	cmp	r5, r4
 800be8e:	d10b      	bne.n	800bea8 <_free_r+0x70>
 800be90:	6824      	ldr	r4, [r4, #0]
 800be92:	4421      	add	r1, r4
 800be94:	1854      	adds	r4, r2, r1
 800be96:	42a3      	cmp	r3, r4
 800be98:	6011      	str	r1, [r2, #0]
 800be9a:	d1e0      	bne.n	800be5e <_free_r+0x26>
 800be9c:	681c      	ldr	r4, [r3, #0]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	6053      	str	r3, [r2, #4]
 800bea2:	440c      	add	r4, r1
 800bea4:	6014      	str	r4, [r2, #0]
 800bea6:	e7da      	b.n	800be5e <_free_r+0x26>
 800bea8:	d902      	bls.n	800beb0 <_free_r+0x78>
 800beaa:	230c      	movs	r3, #12
 800beac:	6003      	str	r3, [r0, #0]
 800beae:	e7d6      	b.n	800be5e <_free_r+0x26>
 800beb0:	6825      	ldr	r5, [r4, #0]
 800beb2:	1961      	adds	r1, r4, r5
 800beb4:	428b      	cmp	r3, r1
 800beb6:	bf04      	itt	eq
 800beb8:	6819      	ldreq	r1, [r3, #0]
 800beba:	685b      	ldreq	r3, [r3, #4]
 800bebc:	6063      	str	r3, [r4, #4]
 800bebe:	bf04      	itt	eq
 800bec0:	1949      	addeq	r1, r1, r5
 800bec2:	6021      	streq	r1, [r4, #0]
 800bec4:	6054      	str	r4, [r2, #4]
 800bec6:	e7ca      	b.n	800be5e <_free_r+0x26>
 800bec8:	b003      	add	sp, #12
 800beca:	bd30      	pop	{r4, r5, pc}
 800becc:	20004afc 	.word	0x20004afc

0800bed0 <sbrk_aligned>:
 800bed0:	b570      	push	{r4, r5, r6, lr}
 800bed2:	4e0e      	ldr	r6, [pc, #56]	; (800bf0c <sbrk_aligned+0x3c>)
 800bed4:	460c      	mov	r4, r1
 800bed6:	6831      	ldr	r1, [r6, #0]
 800bed8:	4605      	mov	r5, r0
 800beda:	b911      	cbnz	r1, 800bee2 <sbrk_aligned+0x12>
 800bedc:	f000 fba6 	bl	800c62c <_sbrk_r>
 800bee0:	6030      	str	r0, [r6, #0]
 800bee2:	4621      	mov	r1, r4
 800bee4:	4628      	mov	r0, r5
 800bee6:	f000 fba1 	bl	800c62c <_sbrk_r>
 800beea:	1c43      	adds	r3, r0, #1
 800beec:	d00a      	beq.n	800bf04 <sbrk_aligned+0x34>
 800beee:	1cc4      	adds	r4, r0, #3
 800bef0:	f024 0403 	bic.w	r4, r4, #3
 800bef4:	42a0      	cmp	r0, r4
 800bef6:	d007      	beq.n	800bf08 <sbrk_aligned+0x38>
 800bef8:	1a21      	subs	r1, r4, r0
 800befa:	4628      	mov	r0, r5
 800befc:	f000 fb96 	bl	800c62c <_sbrk_r>
 800bf00:	3001      	adds	r0, #1
 800bf02:	d101      	bne.n	800bf08 <sbrk_aligned+0x38>
 800bf04:	f04f 34ff 	mov.w	r4, #4294967295
 800bf08:	4620      	mov	r0, r4
 800bf0a:	bd70      	pop	{r4, r5, r6, pc}
 800bf0c:	20004b00 	.word	0x20004b00

0800bf10 <_malloc_r>:
 800bf10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf14:	1ccd      	adds	r5, r1, #3
 800bf16:	f025 0503 	bic.w	r5, r5, #3
 800bf1a:	3508      	adds	r5, #8
 800bf1c:	2d0c      	cmp	r5, #12
 800bf1e:	bf38      	it	cc
 800bf20:	250c      	movcc	r5, #12
 800bf22:	2d00      	cmp	r5, #0
 800bf24:	4607      	mov	r7, r0
 800bf26:	db01      	blt.n	800bf2c <_malloc_r+0x1c>
 800bf28:	42a9      	cmp	r1, r5
 800bf2a:	d905      	bls.n	800bf38 <_malloc_r+0x28>
 800bf2c:	230c      	movs	r3, #12
 800bf2e:	603b      	str	r3, [r7, #0]
 800bf30:	2600      	movs	r6, #0
 800bf32:	4630      	mov	r0, r6
 800bf34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c00c <_malloc_r+0xfc>
 800bf3c:	f000 f868 	bl	800c010 <__malloc_lock>
 800bf40:	f8d8 3000 	ldr.w	r3, [r8]
 800bf44:	461c      	mov	r4, r3
 800bf46:	bb5c      	cbnz	r4, 800bfa0 <_malloc_r+0x90>
 800bf48:	4629      	mov	r1, r5
 800bf4a:	4638      	mov	r0, r7
 800bf4c:	f7ff ffc0 	bl	800bed0 <sbrk_aligned>
 800bf50:	1c43      	adds	r3, r0, #1
 800bf52:	4604      	mov	r4, r0
 800bf54:	d155      	bne.n	800c002 <_malloc_r+0xf2>
 800bf56:	f8d8 4000 	ldr.w	r4, [r8]
 800bf5a:	4626      	mov	r6, r4
 800bf5c:	2e00      	cmp	r6, #0
 800bf5e:	d145      	bne.n	800bfec <_malloc_r+0xdc>
 800bf60:	2c00      	cmp	r4, #0
 800bf62:	d048      	beq.n	800bff6 <_malloc_r+0xe6>
 800bf64:	6823      	ldr	r3, [r4, #0]
 800bf66:	4631      	mov	r1, r6
 800bf68:	4638      	mov	r0, r7
 800bf6a:	eb04 0903 	add.w	r9, r4, r3
 800bf6e:	f000 fb5d 	bl	800c62c <_sbrk_r>
 800bf72:	4581      	cmp	r9, r0
 800bf74:	d13f      	bne.n	800bff6 <_malloc_r+0xe6>
 800bf76:	6821      	ldr	r1, [r4, #0]
 800bf78:	1a6d      	subs	r5, r5, r1
 800bf7a:	4629      	mov	r1, r5
 800bf7c:	4638      	mov	r0, r7
 800bf7e:	f7ff ffa7 	bl	800bed0 <sbrk_aligned>
 800bf82:	3001      	adds	r0, #1
 800bf84:	d037      	beq.n	800bff6 <_malloc_r+0xe6>
 800bf86:	6823      	ldr	r3, [r4, #0]
 800bf88:	442b      	add	r3, r5
 800bf8a:	6023      	str	r3, [r4, #0]
 800bf8c:	f8d8 3000 	ldr.w	r3, [r8]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d038      	beq.n	800c006 <_malloc_r+0xf6>
 800bf94:	685a      	ldr	r2, [r3, #4]
 800bf96:	42a2      	cmp	r2, r4
 800bf98:	d12b      	bne.n	800bff2 <_malloc_r+0xe2>
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	605a      	str	r2, [r3, #4]
 800bf9e:	e00f      	b.n	800bfc0 <_malloc_r+0xb0>
 800bfa0:	6822      	ldr	r2, [r4, #0]
 800bfa2:	1b52      	subs	r2, r2, r5
 800bfa4:	d41f      	bmi.n	800bfe6 <_malloc_r+0xd6>
 800bfa6:	2a0b      	cmp	r2, #11
 800bfa8:	d917      	bls.n	800bfda <_malloc_r+0xca>
 800bfaa:	1961      	adds	r1, r4, r5
 800bfac:	42a3      	cmp	r3, r4
 800bfae:	6025      	str	r5, [r4, #0]
 800bfb0:	bf18      	it	ne
 800bfb2:	6059      	strne	r1, [r3, #4]
 800bfb4:	6863      	ldr	r3, [r4, #4]
 800bfb6:	bf08      	it	eq
 800bfb8:	f8c8 1000 	streq.w	r1, [r8]
 800bfbc:	5162      	str	r2, [r4, r5]
 800bfbe:	604b      	str	r3, [r1, #4]
 800bfc0:	4638      	mov	r0, r7
 800bfc2:	f104 060b 	add.w	r6, r4, #11
 800bfc6:	f000 f829 	bl	800c01c <__malloc_unlock>
 800bfca:	f026 0607 	bic.w	r6, r6, #7
 800bfce:	1d23      	adds	r3, r4, #4
 800bfd0:	1af2      	subs	r2, r6, r3
 800bfd2:	d0ae      	beq.n	800bf32 <_malloc_r+0x22>
 800bfd4:	1b9b      	subs	r3, r3, r6
 800bfd6:	50a3      	str	r3, [r4, r2]
 800bfd8:	e7ab      	b.n	800bf32 <_malloc_r+0x22>
 800bfda:	42a3      	cmp	r3, r4
 800bfdc:	6862      	ldr	r2, [r4, #4]
 800bfde:	d1dd      	bne.n	800bf9c <_malloc_r+0x8c>
 800bfe0:	f8c8 2000 	str.w	r2, [r8]
 800bfe4:	e7ec      	b.n	800bfc0 <_malloc_r+0xb0>
 800bfe6:	4623      	mov	r3, r4
 800bfe8:	6864      	ldr	r4, [r4, #4]
 800bfea:	e7ac      	b.n	800bf46 <_malloc_r+0x36>
 800bfec:	4634      	mov	r4, r6
 800bfee:	6876      	ldr	r6, [r6, #4]
 800bff0:	e7b4      	b.n	800bf5c <_malloc_r+0x4c>
 800bff2:	4613      	mov	r3, r2
 800bff4:	e7cc      	b.n	800bf90 <_malloc_r+0x80>
 800bff6:	230c      	movs	r3, #12
 800bff8:	603b      	str	r3, [r7, #0]
 800bffa:	4638      	mov	r0, r7
 800bffc:	f000 f80e 	bl	800c01c <__malloc_unlock>
 800c000:	e797      	b.n	800bf32 <_malloc_r+0x22>
 800c002:	6025      	str	r5, [r4, #0]
 800c004:	e7dc      	b.n	800bfc0 <_malloc_r+0xb0>
 800c006:	605b      	str	r3, [r3, #4]
 800c008:	deff      	udf	#255	; 0xff
 800c00a:	bf00      	nop
 800c00c:	20004afc 	.word	0x20004afc

0800c010 <__malloc_lock>:
 800c010:	4801      	ldr	r0, [pc, #4]	; (800c018 <__malloc_lock+0x8>)
 800c012:	f7ff bf01 	b.w	800be18 <__retarget_lock_acquire_recursive>
 800c016:	bf00      	nop
 800c018:	20004af8 	.word	0x20004af8

0800c01c <__malloc_unlock>:
 800c01c:	4801      	ldr	r0, [pc, #4]	; (800c024 <__malloc_unlock+0x8>)
 800c01e:	f7ff befc 	b.w	800be1a <__retarget_lock_release_recursive>
 800c022:	bf00      	nop
 800c024:	20004af8 	.word	0x20004af8

0800c028 <__ssputs_r>:
 800c028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c02c:	688e      	ldr	r6, [r1, #8]
 800c02e:	461f      	mov	r7, r3
 800c030:	42be      	cmp	r6, r7
 800c032:	680b      	ldr	r3, [r1, #0]
 800c034:	4682      	mov	sl, r0
 800c036:	460c      	mov	r4, r1
 800c038:	4690      	mov	r8, r2
 800c03a:	d82c      	bhi.n	800c096 <__ssputs_r+0x6e>
 800c03c:	898a      	ldrh	r2, [r1, #12]
 800c03e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c042:	d026      	beq.n	800c092 <__ssputs_r+0x6a>
 800c044:	6965      	ldr	r5, [r4, #20]
 800c046:	6909      	ldr	r1, [r1, #16]
 800c048:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c04c:	eba3 0901 	sub.w	r9, r3, r1
 800c050:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c054:	1c7b      	adds	r3, r7, #1
 800c056:	444b      	add	r3, r9
 800c058:	106d      	asrs	r5, r5, #1
 800c05a:	429d      	cmp	r5, r3
 800c05c:	bf38      	it	cc
 800c05e:	461d      	movcc	r5, r3
 800c060:	0553      	lsls	r3, r2, #21
 800c062:	d527      	bpl.n	800c0b4 <__ssputs_r+0x8c>
 800c064:	4629      	mov	r1, r5
 800c066:	f7ff ff53 	bl	800bf10 <_malloc_r>
 800c06a:	4606      	mov	r6, r0
 800c06c:	b360      	cbz	r0, 800c0c8 <__ssputs_r+0xa0>
 800c06e:	6921      	ldr	r1, [r4, #16]
 800c070:	464a      	mov	r2, r9
 800c072:	f7ff fed3 	bl	800be1c <memcpy>
 800c076:	89a3      	ldrh	r3, [r4, #12]
 800c078:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c07c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c080:	81a3      	strh	r3, [r4, #12]
 800c082:	6126      	str	r6, [r4, #16]
 800c084:	6165      	str	r5, [r4, #20]
 800c086:	444e      	add	r6, r9
 800c088:	eba5 0509 	sub.w	r5, r5, r9
 800c08c:	6026      	str	r6, [r4, #0]
 800c08e:	60a5      	str	r5, [r4, #8]
 800c090:	463e      	mov	r6, r7
 800c092:	42be      	cmp	r6, r7
 800c094:	d900      	bls.n	800c098 <__ssputs_r+0x70>
 800c096:	463e      	mov	r6, r7
 800c098:	6820      	ldr	r0, [r4, #0]
 800c09a:	4632      	mov	r2, r6
 800c09c:	4641      	mov	r1, r8
 800c09e:	f000 faab 	bl	800c5f8 <memmove>
 800c0a2:	68a3      	ldr	r3, [r4, #8]
 800c0a4:	1b9b      	subs	r3, r3, r6
 800c0a6:	60a3      	str	r3, [r4, #8]
 800c0a8:	6823      	ldr	r3, [r4, #0]
 800c0aa:	4433      	add	r3, r6
 800c0ac:	6023      	str	r3, [r4, #0]
 800c0ae:	2000      	movs	r0, #0
 800c0b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0b4:	462a      	mov	r2, r5
 800c0b6:	f000 fac9 	bl	800c64c <_realloc_r>
 800c0ba:	4606      	mov	r6, r0
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	d1e0      	bne.n	800c082 <__ssputs_r+0x5a>
 800c0c0:	6921      	ldr	r1, [r4, #16]
 800c0c2:	4650      	mov	r0, sl
 800c0c4:	f7ff feb8 	bl	800be38 <_free_r>
 800c0c8:	230c      	movs	r3, #12
 800c0ca:	f8ca 3000 	str.w	r3, [sl]
 800c0ce:	89a3      	ldrh	r3, [r4, #12]
 800c0d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0d4:	81a3      	strh	r3, [r4, #12]
 800c0d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0da:	e7e9      	b.n	800c0b0 <__ssputs_r+0x88>

0800c0dc <_svfiprintf_r>:
 800c0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0e0:	4698      	mov	r8, r3
 800c0e2:	898b      	ldrh	r3, [r1, #12]
 800c0e4:	061b      	lsls	r3, r3, #24
 800c0e6:	b09d      	sub	sp, #116	; 0x74
 800c0e8:	4607      	mov	r7, r0
 800c0ea:	460d      	mov	r5, r1
 800c0ec:	4614      	mov	r4, r2
 800c0ee:	d50e      	bpl.n	800c10e <_svfiprintf_r+0x32>
 800c0f0:	690b      	ldr	r3, [r1, #16]
 800c0f2:	b963      	cbnz	r3, 800c10e <_svfiprintf_r+0x32>
 800c0f4:	2140      	movs	r1, #64	; 0x40
 800c0f6:	f7ff ff0b 	bl	800bf10 <_malloc_r>
 800c0fa:	6028      	str	r0, [r5, #0]
 800c0fc:	6128      	str	r0, [r5, #16]
 800c0fe:	b920      	cbnz	r0, 800c10a <_svfiprintf_r+0x2e>
 800c100:	230c      	movs	r3, #12
 800c102:	603b      	str	r3, [r7, #0]
 800c104:	f04f 30ff 	mov.w	r0, #4294967295
 800c108:	e0d0      	b.n	800c2ac <_svfiprintf_r+0x1d0>
 800c10a:	2340      	movs	r3, #64	; 0x40
 800c10c:	616b      	str	r3, [r5, #20]
 800c10e:	2300      	movs	r3, #0
 800c110:	9309      	str	r3, [sp, #36]	; 0x24
 800c112:	2320      	movs	r3, #32
 800c114:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c118:	f8cd 800c 	str.w	r8, [sp, #12]
 800c11c:	2330      	movs	r3, #48	; 0x30
 800c11e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c2c4 <_svfiprintf_r+0x1e8>
 800c122:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c126:	f04f 0901 	mov.w	r9, #1
 800c12a:	4623      	mov	r3, r4
 800c12c:	469a      	mov	sl, r3
 800c12e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c132:	b10a      	cbz	r2, 800c138 <_svfiprintf_r+0x5c>
 800c134:	2a25      	cmp	r2, #37	; 0x25
 800c136:	d1f9      	bne.n	800c12c <_svfiprintf_r+0x50>
 800c138:	ebba 0b04 	subs.w	fp, sl, r4
 800c13c:	d00b      	beq.n	800c156 <_svfiprintf_r+0x7a>
 800c13e:	465b      	mov	r3, fp
 800c140:	4622      	mov	r2, r4
 800c142:	4629      	mov	r1, r5
 800c144:	4638      	mov	r0, r7
 800c146:	f7ff ff6f 	bl	800c028 <__ssputs_r>
 800c14a:	3001      	adds	r0, #1
 800c14c:	f000 80a9 	beq.w	800c2a2 <_svfiprintf_r+0x1c6>
 800c150:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c152:	445a      	add	r2, fp
 800c154:	9209      	str	r2, [sp, #36]	; 0x24
 800c156:	f89a 3000 	ldrb.w	r3, [sl]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	f000 80a1 	beq.w	800c2a2 <_svfiprintf_r+0x1c6>
 800c160:	2300      	movs	r3, #0
 800c162:	f04f 32ff 	mov.w	r2, #4294967295
 800c166:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c16a:	f10a 0a01 	add.w	sl, sl, #1
 800c16e:	9304      	str	r3, [sp, #16]
 800c170:	9307      	str	r3, [sp, #28]
 800c172:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c176:	931a      	str	r3, [sp, #104]	; 0x68
 800c178:	4654      	mov	r4, sl
 800c17a:	2205      	movs	r2, #5
 800c17c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c180:	4850      	ldr	r0, [pc, #320]	; (800c2c4 <_svfiprintf_r+0x1e8>)
 800c182:	f7f4 f845 	bl	8000210 <memchr>
 800c186:	9a04      	ldr	r2, [sp, #16]
 800c188:	b9d8      	cbnz	r0, 800c1c2 <_svfiprintf_r+0xe6>
 800c18a:	06d0      	lsls	r0, r2, #27
 800c18c:	bf44      	itt	mi
 800c18e:	2320      	movmi	r3, #32
 800c190:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c194:	0711      	lsls	r1, r2, #28
 800c196:	bf44      	itt	mi
 800c198:	232b      	movmi	r3, #43	; 0x2b
 800c19a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c19e:	f89a 3000 	ldrb.w	r3, [sl]
 800c1a2:	2b2a      	cmp	r3, #42	; 0x2a
 800c1a4:	d015      	beq.n	800c1d2 <_svfiprintf_r+0xf6>
 800c1a6:	9a07      	ldr	r2, [sp, #28]
 800c1a8:	4654      	mov	r4, sl
 800c1aa:	2000      	movs	r0, #0
 800c1ac:	f04f 0c0a 	mov.w	ip, #10
 800c1b0:	4621      	mov	r1, r4
 800c1b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1b6:	3b30      	subs	r3, #48	; 0x30
 800c1b8:	2b09      	cmp	r3, #9
 800c1ba:	d94d      	bls.n	800c258 <_svfiprintf_r+0x17c>
 800c1bc:	b1b0      	cbz	r0, 800c1ec <_svfiprintf_r+0x110>
 800c1be:	9207      	str	r2, [sp, #28]
 800c1c0:	e014      	b.n	800c1ec <_svfiprintf_r+0x110>
 800c1c2:	eba0 0308 	sub.w	r3, r0, r8
 800c1c6:	fa09 f303 	lsl.w	r3, r9, r3
 800c1ca:	4313      	orrs	r3, r2
 800c1cc:	9304      	str	r3, [sp, #16]
 800c1ce:	46a2      	mov	sl, r4
 800c1d0:	e7d2      	b.n	800c178 <_svfiprintf_r+0x9c>
 800c1d2:	9b03      	ldr	r3, [sp, #12]
 800c1d4:	1d19      	adds	r1, r3, #4
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	9103      	str	r1, [sp, #12]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	bfbb      	ittet	lt
 800c1de:	425b      	neglt	r3, r3
 800c1e0:	f042 0202 	orrlt.w	r2, r2, #2
 800c1e4:	9307      	strge	r3, [sp, #28]
 800c1e6:	9307      	strlt	r3, [sp, #28]
 800c1e8:	bfb8      	it	lt
 800c1ea:	9204      	strlt	r2, [sp, #16]
 800c1ec:	7823      	ldrb	r3, [r4, #0]
 800c1ee:	2b2e      	cmp	r3, #46	; 0x2e
 800c1f0:	d10c      	bne.n	800c20c <_svfiprintf_r+0x130>
 800c1f2:	7863      	ldrb	r3, [r4, #1]
 800c1f4:	2b2a      	cmp	r3, #42	; 0x2a
 800c1f6:	d134      	bne.n	800c262 <_svfiprintf_r+0x186>
 800c1f8:	9b03      	ldr	r3, [sp, #12]
 800c1fa:	1d1a      	adds	r2, r3, #4
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	9203      	str	r2, [sp, #12]
 800c200:	2b00      	cmp	r3, #0
 800c202:	bfb8      	it	lt
 800c204:	f04f 33ff 	movlt.w	r3, #4294967295
 800c208:	3402      	adds	r4, #2
 800c20a:	9305      	str	r3, [sp, #20]
 800c20c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c2d4 <_svfiprintf_r+0x1f8>
 800c210:	7821      	ldrb	r1, [r4, #0]
 800c212:	2203      	movs	r2, #3
 800c214:	4650      	mov	r0, sl
 800c216:	f7f3 fffb 	bl	8000210 <memchr>
 800c21a:	b138      	cbz	r0, 800c22c <_svfiprintf_r+0x150>
 800c21c:	9b04      	ldr	r3, [sp, #16]
 800c21e:	eba0 000a 	sub.w	r0, r0, sl
 800c222:	2240      	movs	r2, #64	; 0x40
 800c224:	4082      	lsls	r2, r0
 800c226:	4313      	orrs	r3, r2
 800c228:	3401      	adds	r4, #1
 800c22a:	9304      	str	r3, [sp, #16]
 800c22c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c230:	4825      	ldr	r0, [pc, #148]	; (800c2c8 <_svfiprintf_r+0x1ec>)
 800c232:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c236:	2206      	movs	r2, #6
 800c238:	f7f3 ffea 	bl	8000210 <memchr>
 800c23c:	2800      	cmp	r0, #0
 800c23e:	d038      	beq.n	800c2b2 <_svfiprintf_r+0x1d6>
 800c240:	4b22      	ldr	r3, [pc, #136]	; (800c2cc <_svfiprintf_r+0x1f0>)
 800c242:	bb1b      	cbnz	r3, 800c28c <_svfiprintf_r+0x1b0>
 800c244:	9b03      	ldr	r3, [sp, #12]
 800c246:	3307      	adds	r3, #7
 800c248:	f023 0307 	bic.w	r3, r3, #7
 800c24c:	3308      	adds	r3, #8
 800c24e:	9303      	str	r3, [sp, #12]
 800c250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c252:	4433      	add	r3, r6
 800c254:	9309      	str	r3, [sp, #36]	; 0x24
 800c256:	e768      	b.n	800c12a <_svfiprintf_r+0x4e>
 800c258:	fb0c 3202 	mla	r2, ip, r2, r3
 800c25c:	460c      	mov	r4, r1
 800c25e:	2001      	movs	r0, #1
 800c260:	e7a6      	b.n	800c1b0 <_svfiprintf_r+0xd4>
 800c262:	2300      	movs	r3, #0
 800c264:	3401      	adds	r4, #1
 800c266:	9305      	str	r3, [sp, #20]
 800c268:	4619      	mov	r1, r3
 800c26a:	f04f 0c0a 	mov.w	ip, #10
 800c26e:	4620      	mov	r0, r4
 800c270:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c274:	3a30      	subs	r2, #48	; 0x30
 800c276:	2a09      	cmp	r2, #9
 800c278:	d903      	bls.n	800c282 <_svfiprintf_r+0x1a6>
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d0c6      	beq.n	800c20c <_svfiprintf_r+0x130>
 800c27e:	9105      	str	r1, [sp, #20]
 800c280:	e7c4      	b.n	800c20c <_svfiprintf_r+0x130>
 800c282:	fb0c 2101 	mla	r1, ip, r1, r2
 800c286:	4604      	mov	r4, r0
 800c288:	2301      	movs	r3, #1
 800c28a:	e7f0      	b.n	800c26e <_svfiprintf_r+0x192>
 800c28c:	ab03      	add	r3, sp, #12
 800c28e:	9300      	str	r3, [sp, #0]
 800c290:	462a      	mov	r2, r5
 800c292:	4b0f      	ldr	r3, [pc, #60]	; (800c2d0 <_svfiprintf_r+0x1f4>)
 800c294:	a904      	add	r1, sp, #16
 800c296:	4638      	mov	r0, r7
 800c298:	f3af 8000 	nop.w
 800c29c:	1c42      	adds	r2, r0, #1
 800c29e:	4606      	mov	r6, r0
 800c2a0:	d1d6      	bne.n	800c250 <_svfiprintf_r+0x174>
 800c2a2:	89ab      	ldrh	r3, [r5, #12]
 800c2a4:	065b      	lsls	r3, r3, #25
 800c2a6:	f53f af2d 	bmi.w	800c104 <_svfiprintf_r+0x28>
 800c2aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2ac:	b01d      	add	sp, #116	; 0x74
 800c2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b2:	ab03      	add	r3, sp, #12
 800c2b4:	9300      	str	r3, [sp, #0]
 800c2b6:	462a      	mov	r2, r5
 800c2b8:	4b05      	ldr	r3, [pc, #20]	; (800c2d0 <_svfiprintf_r+0x1f4>)
 800c2ba:	a904      	add	r1, sp, #16
 800c2bc:	4638      	mov	r0, r7
 800c2be:	f000 f879 	bl	800c3b4 <_printf_i>
 800c2c2:	e7eb      	b.n	800c29c <_svfiprintf_r+0x1c0>
 800c2c4:	080106d4 	.word	0x080106d4
 800c2c8:	080106de 	.word	0x080106de
 800c2cc:	00000000 	.word	0x00000000
 800c2d0:	0800c029 	.word	0x0800c029
 800c2d4:	080106da 	.word	0x080106da

0800c2d8 <_printf_common>:
 800c2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2dc:	4616      	mov	r6, r2
 800c2de:	4699      	mov	r9, r3
 800c2e0:	688a      	ldr	r2, [r1, #8]
 800c2e2:	690b      	ldr	r3, [r1, #16]
 800c2e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	bfb8      	it	lt
 800c2ec:	4613      	movlt	r3, r2
 800c2ee:	6033      	str	r3, [r6, #0]
 800c2f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c2f4:	4607      	mov	r7, r0
 800c2f6:	460c      	mov	r4, r1
 800c2f8:	b10a      	cbz	r2, 800c2fe <_printf_common+0x26>
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	6033      	str	r3, [r6, #0]
 800c2fe:	6823      	ldr	r3, [r4, #0]
 800c300:	0699      	lsls	r1, r3, #26
 800c302:	bf42      	ittt	mi
 800c304:	6833      	ldrmi	r3, [r6, #0]
 800c306:	3302      	addmi	r3, #2
 800c308:	6033      	strmi	r3, [r6, #0]
 800c30a:	6825      	ldr	r5, [r4, #0]
 800c30c:	f015 0506 	ands.w	r5, r5, #6
 800c310:	d106      	bne.n	800c320 <_printf_common+0x48>
 800c312:	f104 0a19 	add.w	sl, r4, #25
 800c316:	68e3      	ldr	r3, [r4, #12]
 800c318:	6832      	ldr	r2, [r6, #0]
 800c31a:	1a9b      	subs	r3, r3, r2
 800c31c:	42ab      	cmp	r3, r5
 800c31e:	dc26      	bgt.n	800c36e <_printf_common+0x96>
 800c320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c324:	1e13      	subs	r3, r2, #0
 800c326:	6822      	ldr	r2, [r4, #0]
 800c328:	bf18      	it	ne
 800c32a:	2301      	movne	r3, #1
 800c32c:	0692      	lsls	r2, r2, #26
 800c32e:	d42b      	bmi.n	800c388 <_printf_common+0xb0>
 800c330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c334:	4649      	mov	r1, r9
 800c336:	4638      	mov	r0, r7
 800c338:	47c0      	blx	r8
 800c33a:	3001      	adds	r0, #1
 800c33c:	d01e      	beq.n	800c37c <_printf_common+0xa4>
 800c33e:	6823      	ldr	r3, [r4, #0]
 800c340:	6922      	ldr	r2, [r4, #16]
 800c342:	f003 0306 	and.w	r3, r3, #6
 800c346:	2b04      	cmp	r3, #4
 800c348:	bf02      	ittt	eq
 800c34a:	68e5      	ldreq	r5, [r4, #12]
 800c34c:	6833      	ldreq	r3, [r6, #0]
 800c34e:	1aed      	subeq	r5, r5, r3
 800c350:	68a3      	ldr	r3, [r4, #8]
 800c352:	bf0c      	ite	eq
 800c354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c358:	2500      	movne	r5, #0
 800c35a:	4293      	cmp	r3, r2
 800c35c:	bfc4      	itt	gt
 800c35e:	1a9b      	subgt	r3, r3, r2
 800c360:	18ed      	addgt	r5, r5, r3
 800c362:	2600      	movs	r6, #0
 800c364:	341a      	adds	r4, #26
 800c366:	42b5      	cmp	r5, r6
 800c368:	d11a      	bne.n	800c3a0 <_printf_common+0xc8>
 800c36a:	2000      	movs	r0, #0
 800c36c:	e008      	b.n	800c380 <_printf_common+0xa8>
 800c36e:	2301      	movs	r3, #1
 800c370:	4652      	mov	r2, sl
 800c372:	4649      	mov	r1, r9
 800c374:	4638      	mov	r0, r7
 800c376:	47c0      	blx	r8
 800c378:	3001      	adds	r0, #1
 800c37a:	d103      	bne.n	800c384 <_printf_common+0xac>
 800c37c:	f04f 30ff 	mov.w	r0, #4294967295
 800c380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c384:	3501      	adds	r5, #1
 800c386:	e7c6      	b.n	800c316 <_printf_common+0x3e>
 800c388:	18e1      	adds	r1, r4, r3
 800c38a:	1c5a      	adds	r2, r3, #1
 800c38c:	2030      	movs	r0, #48	; 0x30
 800c38e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c392:	4422      	add	r2, r4
 800c394:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c398:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c39c:	3302      	adds	r3, #2
 800c39e:	e7c7      	b.n	800c330 <_printf_common+0x58>
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	4622      	mov	r2, r4
 800c3a4:	4649      	mov	r1, r9
 800c3a6:	4638      	mov	r0, r7
 800c3a8:	47c0      	blx	r8
 800c3aa:	3001      	adds	r0, #1
 800c3ac:	d0e6      	beq.n	800c37c <_printf_common+0xa4>
 800c3ae:	3601      	adds	r6, #1
 800c3b0:	e7d9      	b.n	800c366 <_printf_common+0x8e>
	...

0800c3b4 <_printf_i>:
 800c3b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3b8:	7e0f      	ldrb	r7, [r1, #24]
 800c3ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c3bc:	2f78      	cmp	r7, #120	; 0x78
 800c3be:	4691      	mov	r9, r2
 800c3c0:	4680      	mov	r8, r0
 800c3c2:	460c      	mov	r4, r1
 800c3c4:	469a      	mov	sl, r3
 800c3c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c3ca:	d807      	bhi.n	800c3dc <_printf_i+0x28>
 800c3cc:	2f62      	cmp	r7, #98	; 0x62
 800c3ce:	d80a      	bhi.n	800c3e6 <_printf_i+0x32>
 800c3d0:	2f00      	cmp	r7, #0
 800c3d2:	f000 80d4 	beq.w	800c57e <_printf_i+0x1ca>
 800c3d6:	2f58      	cmp	r7, #88	; 0x58
 800c3d8:	f000 80c0 	beq.w	800c55c <_printf_i+0x1a8>
 800c3dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c3e4:	e03a      	b.n	800c45c <_printf_i+0xa8>
 800c3e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c3ea:	2b15      	cmp	r3, #21
 800c3ec:	d8f6      	bhi.n	800c3dc <_printf_i+0x28>
 800c3ee:	a101      	add	r1, pc, #4	; (adr r1, 800c3f4 <_printf_i+0x40>)
 800c3f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c3f4:	0800c44d 	.word	0x0800c44d
 800c3f8:	0800c461 	.word	0x0800c461
 800c3fc:	0800c3dd 	.word	0x0800c3dd
 800c400:	0800c3dd 	.word	0x0800c3dd
 800c404:	0800c3dd 	.word	0x0800c3dd
 800c408:	0800c3dd 	.word	0x0800c3dd
 800c40c:	0800c461 	.word	0x0800c461
 800c410:	0800c3dd 	.word	0x0800c3dd
 800c414:	0800c3dd 	.word	0x0800c3dd
 800c418:	0800c3dd 	.word	0x0800c3dd
 800c41c:	0800c3dd 	.word	0x0800c3dd
 800c420:	0800c565 	.word	0x0800c565
 800c424:	0800c48d 	.word	0x0800c48d
 800c428:	0800c51f 	.word	0x0800c51f
 800c42c:	0800c3dd 	.word	0x0800c3dd
 800c430:	0800c3dd 	.word	0x0800c3dd
 800c434:	0800c587 	.word	0x0800c587
 800c438:	0800c3dd 	.word	0x0800c3dd
 800c43c:	0800c48d 	.word	0x0800c48d
 800c440:	0800c3dd 	.word	0x0800c3dd
 800c444:	0800c3dd 	.word	0x0800c3dd
 800c448:	0800c527 	.word	0x0800c527
 800c44c:	682b      	ldr	r3, [r5, #0]
 800c44e:	1d1a      	adds	r2, r3, #4
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	602a      	str	r2, [r5, #0]
 800c454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c45c:	2301      	movs	r3, #1
 800c45e:	e09f      	b.n	800c5a0 <_printf_i+0x1ec>
 800c460:	6820      	ldr	r0, [r4, #0]
 800c462:	682b      	ldr	r3, [r5, #0]
 800c464:	0607      	lsls	r7, r0, #24
 800c466:	f103 0104 	add.w	r1, r3, #4
 800c46a:	6029      	str	r1, [r5, #0]
 800c46c:	d501      	bpl.n	800c472 <_printf_i+0xbe>
 800c46e:	681e      	ldr	r6, [r3, #0]
 800c470:	e003      	b.n	800c47a <_printf_i+0xc6>
 800c472:	0646      	lsls	r6, r0, #25
 800c474:	d5fb      	bpl.n	800c46e <_printf_i+0xba>
 800c476:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c47a:	2e00      	cmp	r6, #0
 800c47c:	da03      	bge.n	800c486 <_printf_i+0xd2>
 800c47e:	232d      	movs	r3, #45	; 0x2d
 800c480:	4276      	negs	r6, r6
 800c482:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c486:	485a      	ldr	r0, [pc, #360]	; (800c5f0 <_printf_i+0x23c>)
 800c488:	230a      	movs	r3, #10
 800c48a:	e012      	b.n	800c4b2 <_printf_i+0xfe>
 800c48c:	682b      	ldr	r3, [r5, #0]
 800c48e:	6820      	ldr	r0, [r4, #0]
 800c490:	1d19      	adds	r1, r3, #4
 800c492:	6029      	str	r1, [r5, #0]
 800c494:	0605      	lsls	r5, r0, #24
 800c496:	d501      	bpl.n	800c49c <_printf_i+0xe8>
 800c498:	681e      	ldr	r6, [r3, #0]
 800c49a:	e002      	b.n	800c4a2 <_printf_i+0xee>
 800c49c:	0641      	lsls	r1, r0, #25
 800c49e:	d5fb      	bpl.n	800c498 <_printf_i+0xe4>
 800c4a0:	881e      	ldrh	r6, [r3, #0]
 800c4a2:	4853      	ldr	r0, [pc, #332]	; (800c5f0 <_printf_i+0x23c>)
 800c4a4:	2f6f      	cmp	r7, #111	; 0x6f
 800c4a6:	bf0c      	ite	eq
 800c4a8:	2308      	moveq	r3, #8
 800c4aa:	230a      	movne	r3, #10
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c4b2:	6865      	ldr	r5, [r4, #4]
 800c4b4:	60a5      	str	r5, [r4, #8]
 800c4b6:	2d00      	cmp	r5, #0
 800c4b8:	bfa2      	ittt	ge
 800c4ba:	6821      	ldrge	r1, [r4, #0]
 800c4bc:	f021 0104 	bicge.w	r1, r1, #4
 800c4c0:	6021      	strge	r1, [r4, #0]
 800c4c2:	b90e      	cbnz	r6, 800c4c8 <_printf_i+0x114>
 800c4c4:	2d00      	cmp	r5, #0
 800c4c6:	d04b      	beq.n	800c560 <_printf_i+0x1ac>
 800c4c8:	4615      	mov	r5, r2
 800c4ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800c4ce:	fb03 6711 	mls	r7, r3, r1, r6
 800c4d2:	5dc7      	ldrb	r7, [r0, r7]
 800c4d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c4d8:	4637      	mov	r7, r6
 800c4da:	42bb      	cmp	r3, r7
 800c4dc:	460e      	mov	r6, r1
 800c4de:	d9f4      	bls.n	800c4ca <_printf_i+0x116>
 800c4e0:	2b08      	cmp	r3, #8
 800c4e2:	d10b      	bne.n	800c4fc <_printf_i+0x148>
 800c4e4:	6823      	ldr	r3, [r4, #0]
 800c4e6:	07de      	lsls	r6, r3, #31
 800c4e8:	d508      	bpl.n	800c4fc <_printf_i+0x148>
 800c4ea:	6923      	ldr	r3, [r4, #16]
 800c4ec:	6861      	ldr	r1, [r4, #4]
 800c4ee:	4299      	cmp	r1, r3
 800c4f0:	bfde      	ittt	le
 800c4f2:	2330      	movle	r3, #48	; 0x30
 800c4f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c4f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c4fc:	1b52      	subs	r2, r2, r5
 800c4fe:	6122      	str	r2, [r4, #16]
 800c500:	f8cd a000 	str.w	sl, [sp]
 800c504:	464b      	mov	r3, r9
 800c506:	aa03      	add	r2, sp, #12
 800c508:	4621      	mov	r1, r4
 800c50a:	4640      	mov	r0, r8
 800c50c:	f7ff fee4 	bl	800c2d8 <_printf_common>
 800c510:	3001      	adds	r0, #1
 800c512:	d14a      	bne.n	800c5aa <_printf_i+0x1f6>
 800c514:	f04f 30ff 	mov.w	r0, #4294967295
 800c518:	b004      	add	sp, #16
 800c51a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c51e:	6823      	ldr	r3, [r4, #0]
 800c520:	f043 0320 	orr.w	r3, r3, #32
 800c524:	6023      	str	r3, [r4, #0]
 800c526:	4833      	ldr	r0, [pc, #204]	; (800c5f4 <_printf_i+0x240>)
 800c528:	2778      	movs	r7, #120	; 0x78
 800c52a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c52e:	6823      	ldr	r3, [r4, #0]
 800c530:	6829      	ldr	r1, [r5, #0]
 800c532:	061f      	lsls	r7, r3, #24
 800c534:	f851 6b04 	ldr.w	r6, [r1], #4
 800c538:	d402      	bmi.n	800c540 <_printf_i+0x18c>
 800c53a:	065f      	lsls	r7, r3, #25
 800c53c:	bf48      	it	mi
 800c53e:	b2b6      	uxthmi	r6, r6
 800c540:	07df      	lsls	r7, r3, #31
 800c542:	bf48      	it	mi
 800c544:	f043 0320 	orrmi.w	r3, r3, #32
 800c548:	6029      	str	r1, [r5, #0]
 800c54a:	bf48      	it	mi
 800c54c:	6023      	strmi	r3, [r4, #0]
 800c54e:	b91e      	cbnz	r6, 800c558 <_printf_i+0x1a4>
 800c550:	6823      	ldr	r3, [r4, #0]
 800c552:	f023 0320 	bic.w	r3, r3, #32
 800c556:	6023      	str	r3, [r4, #0]
 800c558:	2310      	movs	r3, #16
 800c55a:	e7a7      	b.n	800c4ac <_printf_i+0xf8>
 800c55c:	4824      	ldr	r0, [pc, #144]	; (800c5f0 <_printf_i+0x23c>)
 800c55e:	e7e4      	b.n	800c52a <_printf_i+0x176>
 800c560:	4615      	mov	r5, r2
 800c562:	e7bd      	b.n	800c4e0 <_printf_i+0x12c>
 800c564:	682b      	ldr	r3, [r5, #0]
 800c566:	6826      	ldr	r6, [r4, #0]
 800c568:	6961      	ldr	r1, [r4, #20]
 800c56a:	1d18      	adds	r0, r3, #4
 800c56c:	6028      	str	r0, [r5, #0]
 800c56e:	0635      	lsls	r5, r6, #24
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	d501      	bpl.n	800c578 <_printf_i+0x1c4>
 800c574:	6019      	str	r1, [r3, #0]
 800c576:	e002      	b.n	800c57e <_printf_i+0x1ca>
 800c578:	0670      	lsls	r0, r6, #25
 800c57a:	d5fb      	bpl.n	800c574 <_printf_i+0x1c0>
 800c57c:	8019      	strh	r1, [r3, #0]
 800c57e:	2300      	movs	r3, #0
 800c580:	6123      	str	r3, [r4, #16]
 800c582:	4615      	mov	r5, r2
 800c584:	e7bc      	b.n	800c500 <_printf_i+0x14c>
 800c586:	682b      	ldr	r3, [r5, #0]
 800c588:	1d1a      	adds	r2, r3, #4
 800c58a:	602a      	str	r2, [r5, #0]
 800c58c:	681d      	ldr	r5, [r3, #0]
 800c58e:	6862      	ldr	r2, [r4, #4]
 800c590:	2100      	movs	r1, #0
 800c592:	4628      	mov	r0, r5
 800c594:	f7f3 fe3c 	bl	8000210 <memchr>
 800c598:	b108      	cbz	r0, 800c59e <_printf_i+0x1ea>
 800c59a:	1b40      	subs	r0, r0, r5
 800c59c:	6060      	str	r0, [r4, #4]
 800c59e:	6863      	ldr	r3, [r4, #4]
 800c5a0:	6123      	str	r3, [r4, #16]
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5a8:	e7aa      	b.n	800c500 <_printf_i+0x14c>
 800c5aa:	6923      	ldr	r3, [r4, #16]
 800c5ac:	462a      	mov	r2, r5
 800c5ae:	4649      	mov	r1, r9
 800c5b0:	4640      	mov	r0, r8
 800c5b2:	47d0      	blx	sl
 800c5b4:	3001      	adds	r0, #1
 800c5b6:	d0ad      	beq.n	800c514 <_printf_i+0x160>
 800c5b8:	6823      	ldr	r3, [r4, #0]
 800c5ba:	079b      	lsls	r3, r3, #30
 800c5bc:	d413      	bmi.n	800c5e6 <_printf_i+0x232>
 800c5be:	68e0      	ldr	r0, [r4, #12]
 800c5c0:	9b03      	ldr	r3, [sp, #12]
 800c5c2:	4298      	cmp	r0, r3
 800c5c4:	bfb8      	it	lt
 800c5c6:	4618      	movlt	r0, r3
 800c5c8:	e7a6      	b.n	800c518 <_printf_i+0x164>
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	4632      	mov	r2, r6
 800c5ce:	4649      	mov	r1, r9
 800c5d0:	4640      	mov	r0, r8
 800c5d2:	47d0      	blx	sl
 800c5d4:	3001      	adds	r0, #1
 800c5d6:	d09d      	beq.n	800c514 <_printf_i+0x160>
 800c5d8:	3501      	adds	r5, #1
 800c5da:	68e3      	ldr	r3, [r4, #12]
 800c5dc:	9903      	ldr	r1, [sp, #12]
 800c5de:	1a5b      	subs	r3, r3, r1
 800c5e0:	42ab      	cmp	r3, r5
 800c5e2:	dcf2      	bgt.n	800c5ca <_printf_i+0x216>
 800c5e4:	e7eb      	b.n	800c5be <_printf_i+0x20a>
 800c5e6:	2500      	movs	r5, #0
 800c5e8:	f104 0619 	add.w	r6, r4, #25
 800c5ec:	e7f5      	b.n	800c5da <_printf_i+0x226>
 800c5ee:	bf00      	nop
 800c5f0:	080106e5 	.word	0x080106e5
 800c5f4:	080106f6 	.word	0x080106f6

0800c5f8 <memmove>:
 800c5f8:	4288      	cmp	r0, r1
 800c5fa:	b510      	push	{r4, lr}
 800c5fc:	eb01 0402 	add.w	r4, r1, r2
 800c600:	d902      	bls.n	800c608 <memmove+0x10>
 800c602:	4284      	cmp	r4, r0
 800c604:	4623      	mov	r3, r4
 800c606:	d807      	bhi.n	800c618 <memmove+0x20>
 800c608:	1e43      	subs	r3, r0, #1
 800c60a:	42a1      	cmp	r1, r4
 800c60c:	d008      	beq.n	800c620 <memmove+0x28>
 800c60e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c612:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c616:	e7f8      	b.n	800c60a <memmove+0x12>
 800c618:	4402      	add	r2, r0
 800c61a:	4601      	mov	r1, r0
 800c61c:	428a      	cmp	r2, r1
 800c61e:	d100      	bne.n	800c622 <memmove+0x2a>
 800c620:	bd10      	pop	{r4, pc}
 800c622:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c626:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c62a:	e7f7      	b.n	800c61c <memmove+0x24>

0800c62c <_sbrk_r>:
 800c62c:	b538      	push	{r3, r4, r5, lr}
 800c62e:	4d06      	ldr	r5, [pc, #24]	; (800c648 <_sbrk_r+0x1c>)
 800c630:	2300      	movs	r3, #0
 800c632:	4604      	mov	r4, r0
 800c634:	4608      	mov	r0, r1
 800c636:	602b      	str	r3, [r5, #0]
 800c638:	f7f7 fcf0 	bl	800401c <_sbrk>
 800c63c:	1c43      	adds	r3, r0, #1
 800c63e:	d102      	bne.n	800c646 <_sbrk_r+0x1a>
 800c640:	682b      	ldr	r3, [r5, #0]
 800c642:	b103      	cbz	r3, 800c646 <_sbrk_r+0x1a>
 800c644:	6023      	str	r3, [r4, #0]
 800c646:	bd38      	pop	{r3, r4, r5, pc}
 800c648:	20004af4 	.word	0x20004af4

0800c64c <_realloc_r>:
 800c64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c650:	4680      	mov	r8, r0
 800c652:	4614      	mov	r4, r2
 800c654:	460e      	mov	r6, r1
 800c656:	b921      	cbnz	r1, 800c662 <_realloc_r+0x16>
 800c658:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c65c:	4611      	mov	r1, r2
 800c65e:	f7ff bc57 	b.w	800bf10 <_malloc_r>
 800c662:	b92a      	cbnz	r2, 800c670 <_realloc_r+0x24>
 800c664:	f7ff fbe8 	bl	800be38 <_free_r>
 800c668:	4625      	mov	r5, r4
 800c66a:	4628      	mov	r0, r5
 800c66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c670:	f000 f81b 	bl	800c6aa <_malloc_usable_size_r>
 800c674:	4284      	cmp	r4, r0
 800c676:	4607      	mov	r7, r0
 800c678:	d802      	bhi.n	800c680 <_realloc_r+0x34>
 800c67a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c67e:	d812      	bhi.n	800c6a6 <_realloc_r+0x5a>
 800c680:	4621      	mov	r1, r4
 800c682:	4640      	mov	r0, r8
 800c684:	f7ff fc44 	bl	800bf10 <_malloc_r>
 800c688:	4605      	mov	r5, r0
 800c68a:	2800      	cmp	r0, #0
 800c68c:	d0ed      	beq.n	800c66a <_realloc_r+0x1e>
 800c68e:	42bc      	cmp	r4, r7
 800c690:	4622      	mov	r2, r4
 800c692:	4631      	mov	r1, r6
 800c694:	bf28      	it	cs
 800c696:	463a      	movcs	r2, r7
 800c698:	f7ff fbc0 	bl	800be1c <memcpy>
 800c69c:	4631      	mov	r1, r6
 800c69e:	4640      	mov	r0, r8
 800c6a0:	f7ff fbca 	bl	800be38 <_free_r>
 800c6a4:	e7e1      	b.n	800c66a <_realloc_r+0x1e>
 800c6a6:	4635      	mov	r5, r6
 800c6a8:	e7df      	b.n	800c66a <_realloc_r+0x1e>

0800c6aa <_malloc_usable_size_r>:
 800c6aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6ae:	1f18      	subs	r0, r3, #4
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	bfbc      	itt	lt
 800c6b4:	580b      	ldrlt	r3, [r1, r0]
 800c6b6:	18c0      	addlt	r0, r0, r3
 800c6b8:	4770      	bx	lr
	...

0800c6bc <_init>:
 800c6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6be:	bf00      	nop
 800c6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6c2:	bc08      	pop	{r3}
 800c6c4:	469e      	mov	lr, r3
 800c6c6:	4770      	bx	lr

0800c6c8 <_fini>:
 800c6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ca:	bf00      	nop
 800c6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ce:	bc08      	pop	{r3}
 800c6d0:	469e      	mov	lr, r3
 800c6d2:	4770      	bx	lr
