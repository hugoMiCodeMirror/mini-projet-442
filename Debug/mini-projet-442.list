
mini-projet-442.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016f40  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e6c8  08017110  08017110  00018110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080257d8  080257d8  000270fc  2**0
                  CONTENTS
  4 .ARM          00000008  080257d8  080257d8  000267d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080257e0  080257e0  000270fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080257e0  080257e0  000267e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080257e4  080257e4  000267e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080257e8  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000970c  200000fc  080258e4  000270fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20009808  080258e4  00027808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000270fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034b04  00000000  00000000  0002712c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000070f3  00000000  00000000  0005bc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c68  00000000  00000000  00062d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002269  00000000  00000000  00065990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a4b8  00000000  00000000  00067bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038343  00000000  00000000  000720b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ab65  00000000  00000000  000aa3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c4f59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c6bc  00000000  00000000  001c4f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001d1658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000fc 	.word	0x200000fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080170f8 	.word	0x080170f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000100 	.word	0x20000100
 800020c:	080170f8 	.word	0x080170f8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b96a 	b.w	8000d78 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14e      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	458c      	cmp	ip, r1
 8000acc:	4686      	mov	lr, r0
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	d962      	bls.n	8000b9a <__udivmoddi4+0xde>
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	4091      	lsls	r1, r2
 8000adc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f f68c 	uxth.w	r6, ip
 8000af2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	fb07 1114 	mls	r1, r7, r4, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb04 f106 	mul.w	r1, r4, r6
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b12:	f080 8112 	bcs.w	8000d3a <__udivmoddi4+0x27e>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 810f 	bls.w	8000d3a <__udivmoddi4+0x27e>
 8000b1c:	3c02      	subs	r4, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	fa1f f38e 	uxth.w	r3, lr
 8000b26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb00 f606 	mul.w	r6, r0, r6
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x94>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b42:	f080 80fc 	bcs.w	8000d3e <__udivmoddi4+0x282>
 8000b46:	429e      	cmp	r6, r3
 8000b48:	f240 80f9 	bls.w	8000d3e <__udivmoddi4+0x282>
 8000b4c:	4463      	add	r3, ip
 8000b4e:	3802      	subs	r0, #2
 8000b50:	1b9b      	subs	r3, r3, r6
 8000b52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b56:	2100      	movs	r1, #0
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa6>
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xba>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb4>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x150>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xcc>
 8000b82:	4290      	cmp	r0, r2
 8000b84:	f0c0 80f0 	bcc.w	8000d68 <__udivmoddi4+0x2ac>
 8000b88:	1a86      	subs	r6, r0, r2
 8000b8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0e6      	beq.n	8000b62 <__udivmoddi4+0xa6>
 8000b94:	e9c5 6300 	strd	r6, r3, [r5]
 8000b98:	e7e3      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	f040 8090 	bne.w	8000cc0 <__udivmoddi4+0x204>
 8000ba0:	eba1 040c 	sub.w	r4, r1, ip
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa1f f78c 	uxth.w	r7, ip
 8000bac:	2101      	movs	r1, #1
 8000bae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	fb07 f006 	mul.w	r0, r7, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x11c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x11a>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000bd6:	4626      	mov	r6, r4
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000be2:	fb08 4410 	mls	r4, r8, r0, r4
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	fb00 f707 	mul.w	r7, r0, r7
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x148>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x146>
 8000bfc:	429f      	cmp	r7, r3
 8000bfe:	f200 80b0 	bhi.w	8000d62 <__udivmoddi4+0x2a6>
 8000c02:	4620      	mov	r0, r4
 8000c04:	1bdb      	subs	r3, r3, r7
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x9c>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c20:	ea43 030c 	orr.w	r3, r3, ip
 8000c24:	40f4      	lsrs	r4, r6
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	0c38      	lsrs	r0, r7, #16
 8000c2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c30:	fbb4 fef0 	udiv	lr, r4, r0
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	fb00 441e 	mls	r4, r0, lr, r4
 8000c3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c40:	fb0e f90c 	mul.w	r9, lr, ip
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x1a6>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c52:	f080 8084 	bcs.w	8000d5e <__udivmoddi4+0x2a2>
 8000c56:	45a1      	cmp	r9, r4
 8000c58:	f240 8081 	bls.w	8000d5e <__udivmoddi4+0x2a2>
 8000c5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	eba4 0409 	sub.w	r4, r4, r9
 8000c66:	fa1f f983 	uxth.w	r9, r3
 8000c6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x1d2>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c84:	d267      	bcs.n	8000d56 <__udivmoddi4+0x29a>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d965      	bls.n	8000d56 <__udivmoddi4+0x29a>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	443c      	add	r4, r7
 8000c8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c92:	fba0 9302 	umull	r9, r3, r0, r2
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	46ce      	mov	lr, r9
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	d351      	bcc.n	8000d46 <__udivmoddi4+0x28a>
 8000ca2:	d04e      	beq.n	8000d42 <__udivmoddi4+0x286>
 8000ca4:	b155      	cbz	r5, 8000cbc <__udivmoddi4+0x200>
 8000ca6:	ebb8 030e 	subs.w	r3, r8, lr
 8000caa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e750      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	430c      	orrs	r4, r1
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce8:	0c23      	lsrs	r3, r4, #16
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f107 	mul.w	r1, r0, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x24c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cfe:	d22c      	bcs.n	8000d5a <__udivmoddi4+0x29e>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d92a      	bls.n	8000d5a <__udivmoddi4+0x29e>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d10:	fb08 3311 	mls	r3, r8, r1, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb01 f307 	mul.w	r3, r1, r7
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x276>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d28:	d213      	bcs.n	8000d52 <__udivmoddi4+0x296>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d911      	bls.n	8000d52 <__udivmoddi4+0x296>
 8000d2e:	3902      	subs	r1, #2
 8000d30:	4464      	add	r4, ip
 8000d32:	1ae4      	subs	r4, r4, r3
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	e739      	b.n	8000bae <__udivmoddi4+0xf2>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	e6f0      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e706      	b.n	8000b50 <__udivmoddi4+0x94>
 8000d42:	45c8      	cmp	r8, r9
 8000d44:	d2ae      	bcs.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d4e:	3801      	subs	r0, #1
 8000d50:	e7a8      	b.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d52:	4631      	mov	r1, r6
 8000d54:	e7ed      	b.n	8000d32 <__udivmoddi4+0x276>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e799      	b.n	8000c8e <__udivmoddi4+0x1d2>
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	e7d4      	b.n	8000d08 <__udivmoddi4+0x24c>
 8000d5e:	46d6      	mov	lr, sl
 8000d60:	e77f      	b.n	8000c62 <__udivmoddi4+0x1a6>
 8000d62:	4463      	add	r3, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	e74d      	b.n	8000c04 <__udivmoddi4+0x148>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e70f      	b.n	8000b90 <__udivmoddi4+0xd4>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	e730      	b.n	8000bd8 <__udivmoddi4+0x11c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3301      	adds	r3, #1
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8000d8c:	89fb      	ldrh	r3, [r7, #14]
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	b21a      	sxth	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	b21b      	sxth	r3, r3
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	b21b      	sxth	r3, r3
 8000d9c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8000d9e:	89fb      	ldrh	r3, [r7, #14]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3303      	adds	r3, #3
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	021b      	lsls	r3, r3, #8
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	3202      	adds	r2, #2
 8000dc4:	7812      	ldrb	r2, [r2, #0]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	021b      	lsls	r3, r3, #8
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	3201      	adds	r2, #1
 8000dd2:	7812      	ldrb	r2, [r2, #0]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021b      	lsls	r3, r3, #8
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	7812      	ldrb	r2, [r2, #0]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]
	return rv;
 8000de4:	68fb      	ldr	r3, [r7, #12]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	1c5a      	adds	r2, r3, #1
 8000e02:	607a      	str	r2, [r7, #4]
 8000e04:	887a      	ldrh	r2, [r7, #2]
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	701a      	strb	r2, [r3, #0]
 8000e0a:	887b      	ldrh	r3, [r7, #2]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	1c5a      	adds	r2, r3, #1
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	887a      	ldrh	r2, [r7, #2]
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	701a      	strb	r2, [r3, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	1c5a      	adds	r2, r3, #1
 8000e36:	607a      	str	r2, [r7, #4]
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	701a      	strb	r2, [r3, #0]
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	683a      	ldr	r2, [r7, #0]
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	701a      	strb	r2, [r3, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	0a1b      	lsrs	r3, r3, #8
 8000e54:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	1c5a      	adds	r2, r3, #1
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	701a      	strb	r2, [r3, #0]
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	1c5a      	adds	r2, r3, #1
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	701a      	strb	r2, [r3, #0]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8000e80:	b480      	push	{r7}
 8000e82:	b087      	sub	sp, #28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d00d      	beq.n	8000eb6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	1c53      	adds	r3, r2, #1
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	1c59      	adds	r1, r3, #1
 8000ea4:	6179      	str	r1, [r7, #20]
 8000ea6:	7812      	ldrb	r2, [r2, #0]
 8000ea8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f1      	bne.n	8000e9a <mem_cpy+0x1a>
	}
}
 8000eb6:	bf00      	nop
 8000eb8:	371c      	adds	r7, #28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8000ec2:	b480      	push	{r7}
 8000ec4:	b087      	sub	sp, #28
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	60f8      	str	r0, [r7, #12]
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	617a      	str	r2, [r7, #20]
 8000ed8:	68ba      	ldr	r2, [r7, #8]
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1f3      	bne.n	8000ed2 <mem_set+0x10>
}
 8000eea:	bf00      	nop
 8000eec:	bf00      	nop
 8000eee:	371c      	adds	r7, #28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	@ 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	61fa      	str	r2, [r7, #28]
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	1c5a      	adds	r2, r3, #1
 8000f1e:	61ba      	str	r2, [r7, #24]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	1acb      	subs	r3, r1, r3
 8000f24:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d002      	beq.n	8000f38 <mem_cmp+0x40>
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d0eb      	beq.n	8000f10 <mem_cmp+0x18>

	return r;
 8000f38:	697b      	ldr	r3, [r7, #20]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3724      	adds	r7, #36	@ 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8000f50:	e002      	b.n	8000f58 <chk_chr+0x12>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3301      	adds	r3, #1
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d005      	beq.n	8000f6c <chk_chr+0x26>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d1f2      	bne.n	8000f52 <chk_chr+0xc>
	return *str;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d009      	beq.n	8000f9e <lock_fs+0x22>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f011 fcef 	bl	8012972 <ff_req_grant>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <lock_fs+0x22>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <lock_fs+0x24>
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d00d      	beq.n	8000fd6 <unlock_fs+0x2e>
 8000fba:	78fb      	ldrb	r3, [r7, #3]
 8000fbc:	2b0c      	cmp	r3, #12
 8000fbe:	d00a      	beq.n	8000fd6 <unlock_fs+0x2e>
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	2b0b      	cmp	r3, #11
 8000fc4:	d007      	beq.n	8000fd6 <unlock_fs+0x2e>
 8000fc6:	78fb      	ldrb	r3, [r7, #3]
 8000fc8:	2b0f      	cmp	r3, #15
 8000fca:	d004      	beq.n	8000fd6 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f011 fce3 	bl	801299c <ff_rel_grant>
	}
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	e029      	b.n	8001048 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8000ff4:	4a27      	ldr	r2, [pc, #156]	@ (8001094 <chk_lock+0xb4>)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	4413      	add	r3, r2
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d01d      	beq.n	800103e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8001002:	4a24      	ldr	r2, [pc, #144]	@ (8001094 <chk_lock+0xb4>)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	4413      	add	r3, r2
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	429a      	cmp	r2, r3
 8001012:	d116      	bne.n	8001042 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8001014:	4a1f      	ldr	r2, [pc, #124]	@ (8001094 <chk_lock+0xb4>)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	011b      	lsls	r3, r3, #4
 800101a:	4413      	add	r3, r2
 800101c:	3304      	adds	r3, #4
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8001024:	429a      	cmp	r2, r3
 8001026:	d10c      	bne.n	8001042 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8001028:	4a1a      	ldr	r2, [pc, #104]	@ (8001094 <chk_lock+0xb4>)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	011b      	lsls	r3, r3, #4
 800102e:	4413      	add	r3, r2
 8001030:	3308      	adds	r3, #8
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8001038:	429a      	cmp	r2, r3
 800103a:	d102      	bne.n	8001042 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800103c:	e007      	b.n	800104e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800103e:	2301      	movs	r3, #1
 8001040:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3301      	adds	r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d9d2      	bls.n	8000ff4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d109      	bne.n	8001068 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d102      	bne.n	8001060 <chk_lock+0x80>
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d101      	bne.n	8001064 <chk_lock+0x84>
 8001060:	2300      	movs	r3, #0
 8001062:	e010      	b.n	8001086 <chk_lock+0xa6>
 8001064:	2312      	movs	r3, #18
 8001066:	e00e      	b.n	8001086 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d108      	bne.n	8001080 <chk_lock+0xa0>
 800106e:	4a09      	ldr	r2, [pc, #36]	@ (8001094 <chk_lock+0xb4>)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	4413      	add	r3, r2
 8001076:	330c      	adds	r3, #12
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800107e:	d101      	bne.n	8001084 <chk_lock+0xa4>
 8001080:	2310      	movs	r3, #16
 8001082:	e000      	b.n	8001086 <chk_lock+0xa6>
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000120 	.word	0x20000120

08001098 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	e002      	b.n	80010aa <enq_lock+0x12>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3301      	adds	r3, #1
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d806      	bhi.n	80010be <enq_lock+0x26>
 80010b0:	4a09      	ldr	r2, [pc, #36]	@ (80010d8 <enq_lock+0x40>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	011b      	lsls	r3, r3, #4
 80010b6:	4413      	add	r3, r2
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f2      	bne.n	80010a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	bf14      	ite	ne
 80010c4:	2301      	movne	r3, #1
 80010c6:	2300      	moveq	r3, #0
 80010c8:	b2db      	uxtb	r3, r3
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000120 	.word	0x20000120

080010dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	e01f      	b.n	800112c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80010ec:	4a41      	ldr	r2, [pc, #260]	@ (80011f4 <inc_lock+0x118>)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	011b      	lsls	r3, r3, #4
 80010f2:	4413      	add	r3, r2
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d113      	bne.n	8001126 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80010fe:	4a3d      	ldr	r2, [pc, #244]	@ (80011f4 <inc_lock+0x118>)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	4413      	add	r3, r2
 8001106:	3304      	adds	r3, #4
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800110e:	429a      	cmp	r2, r3
 8001110:	d109      	bne.n	8001126 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8001112:	4a38      	ldr	r2, [pc, #224]	@ (80011f4 <inc_lock+0x118>)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	011b      	lsls	r3, r3, #4
 8001118:	4413      	add	r3, r2
 800111a:	3308      	adds	r3, #8
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8001122:	429a      	cmp	r2, r3
 8001124:	d006      	beq.n	8001134 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3301      	adds	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d9dc      	bls.n	80010ec <inc_lock+0x10>
 8001132:	e000      	b.n	8001136 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8001134:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d132      	bne.n	80011a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	e002      	b.n	8001148 <inc_lock+0x6c>
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3301      	adds	r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d806      	bhi.n	800115c <inc_lock+0x80>
 800114e:	4a29      	ldr	r2, [pc, #164]	@ (80011f4 <inc_lock+0x118>)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	011b      	lsls	r3, r3, #4
 8001154:	4413      	add	r3, r2
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1f2      	bne.n	8001142 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b02      	cmp	r3, #2
 8001160:	d101      	bne.n	8001166 <inc_lock+0x8a>
 8001162:	2300      	movs	r3, #0
 8001164:	e040      	b.n	80011e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4922      	ldr	r1, [pc, #136]	@ (80011f4 <inc_lock+0x118>)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	440b      	add	r3, r1
 8001172:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	491e      	ldr	r1, [pc, #120]	@ (80011f4 <inc_lock+0x118>)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	440b      	add	r3, r1
 8001180:	3304      	adds	r3, #4
 8001182:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	695a      	ldr	r2, [r3, #20]
 8001188:	491a      	ldr	r1, [pc, #104]	@ (80011f4 <inc_lock+0x118>)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	011b      	lsls	r3, r3, #4
 800118e:	440b      	add	r3, r1
 8001190:	3308      	adds	r3, #8
 8001192:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8001194:	4a17      	ldr	r2, [pc, #92]	@ (80011f4 <inc_lock+0x118>)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	011b      	lsls	r3, r3, #4
 800119a:	4413      	add	r3, r2
 800119c:	330c      	adds	r3, #12
 800119e:	2200      	movs	r2, #0
 80011a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d009      	beq.n	80011bc <inc_lock+0xe0>
 80011a8:	4a12      	ldr	r2, [pc, #72]	@ (80011f4 <inc_lock+0x118>)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	4413      	add	r3, r2
 80011b0:	330c      	adds	r3, #12
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <inc_lock+0xe0>
 80011b8:	2300      	movs	r3, #0
 80011ba:	e015      	b.n	80011e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d108      	bne.n	80011d4 <inc_lock+0xf8>
 80011c2:	4a0c      	ldr	r2, [pc, #48]	@ (80011f4 <inc_lock+0x118>)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	4413      	add	r3, r2
 80011ca:	330c      	adds	r3, #12
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	3301      	adds	r3, #1
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	e001      	b.n	80011d8 <inc_lock+0xfc>
 80011d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011d8:	4906      	ldr	r1, [pc, #24]	@ (80011f4 <inc_lock+0x118>)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	440b      	add	r3, r1
 80011e0:	330c      	adds	r3, #12
 80011e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3301      	adds	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	20000120 	.word	0x20000120

080011f8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d825      	bhi.n	8001258 <dec_lock+0x60>
		n = Files[i].ctr;
 800120c:	4a17      	ldr	r2, [pc, #92]	@ (800126c <dec_lock+0x74>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	011b      	lsls	r3, r3, #4
 8001212:	4413      	add	r3, r2
 8001214:	330c      	adds	r3, #12
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800121a:	89fb      	ldrh	r3, [r7, #14]
 800121c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001220:	d101      	bne.n	8001226 <dec_lock+0x2e>
 8001222:	2300      	movs	r3, #0
 8001224:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8001226:	89fb      	ldrh	r3, [r7, #14]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <dec_lock+0x3a>
 800122c:	89fb      	ldrh	r3, [r7, #14]
 800122e:	3b01      	subs	r3, #1
 8001230:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8001232:	4a0e      	ldr	r2, [pc, #56]	@ (800126c <dec_lock+0x74>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	4413      	add	r3, r2
 800123a:	330c      	adds	r3, #12
 800123c:	89fa      	ldrh	r2, [r7, #14]
 800123e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8001240:	89fb      	ldrh	r3, [r7, #14]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d105      	bne.n	8001252 <dec_lock+0x5a>
 8001246:	4a09      	ldr	r2, [pc, #36]	@ (800126c <dec_lock+0x74>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	4413      	add	r3, r2
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	737b      	strb	r3, [r7, #13]
 8001256:	e001      	b.n	800125c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8001258:	2302      	movs	r3, #2
 800125a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800125c:	7b7b      	ldrb	r3, [r7, #13]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000120 	.word	0x20000120

08001270 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	e010      	b.n	80012a0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800127e:	4a0d      	ldr	r2, [pc, #52]	@ (80012b4 <clear_lock+0x44>)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	011b      	lsls	r3, r3, #4
 8001284:	4413      	add	r3, r2
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	429a      	cmp	r2, r3
 800128c:	d105      	bne.n	800129a <clear_lock+0x2a>
 800128e:	4a09      	ldr	r2, [pc, #36]	@ (80012b4 <clear_lock+0x44>)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	011b      	lsls	r3, r3, #4
 8001294:	4413      	add	r3, r2
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3301      	adds	r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d9eb      	bls.n	800127e <clear_lock+0xe>
	}
}
 80012a6:	bf00      	nop
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	20000120 	.word	0x20000120

080012b8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80012c0:	2300      	movs	r3, #0
 80012c2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	78db      	ldrb	r3, [r3, #3]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d034      	beq.n	8001336 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7858      	ldrb	r0, [r3, #1]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80012dc:	2301      	movs	r3, #1
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	f011 fa82 	bl	80127e8 <disk_write>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	73fb      	strb	r3, [r7, #15]
 80012ee:	e022      	b.n	8001336 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	1ad2      	subs	r2, r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	429a      	cmp	r2, r3
 8001304:	d217      	bcs.n	8001336 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	789b      	ldrb	r3, [r3, #2]
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	e010      	b.n	8001330 <sync_window+0x78>
					wsect += fs->fsize;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	4413      	add	r3, r2
 8001316:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7858      	ldrb	r0, [r3, #1]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8001322:	2301      	movs	r3, #1
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	f011 fa5f 	bl	80127e8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	3b01      	subs	r3, #1
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d8eb      	bhi.n	800130e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8001336:	7bfb      	ldrb	r3, [r7, #15]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d01b      	beq.n	8001390 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ffad 	bl	80012b8 <sync_window>
 800135e:	4603      	mov	r3, r0
 8001360:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d113      	bne.n	8001390 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7858      	ldrb	r0, [r3, #1]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8001372:	2301      	movs	r3, #1
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	f011 fa17 	bl	80127a8 <disk_read>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d004      	beq.n	800138a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8001380:	f04f 33ff 	mov.w	r3, #4294967295
 8001384:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8001386:	2301      	movs	r3, #1
 8001388:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8001390:	7bfb      	ldrb	r3, [r7, #15]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff87 	bl	80012b8 <sync_window>
 80013aa:	4603      	mov	r3, r0
 80013ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d158      	bne.n	8001466 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	d148      	bne.n	800144e <sync_fs+0xb2>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	791b      	ldrb	r3, [r3, #4]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d144      	bne.n	800144e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3334      	adds	r3, #52	@ 0x34
 80013c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fd77 	bl	8000ec2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3334      	adds	r3, #52	@ 0x34
 80013d8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80013dc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fd06 	bl	8000df2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3334      	adds	r3, #52	@ 0x34
 80013ea:	4921      	ldr	r1, [pc, #132]	@ (8001470 <sync_fs+0xd4>)
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fd1b 	bl	8000e28 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3334      	adds	r3, #52	@ 0x34
 80013f6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80013fa:	491e      	ldr	r1, [pc, #120]	@ (8001474 <sync_fs+0xd8>)
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fd13 	bl	8000e28 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3334      	adds	r3, #52	@ 0x34
 8001406:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4619      	mov	r1, r3
 8001410:	4610      	mov	r0, r2
 8001412:	f7ff fd09 	bl	8000e28 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3334      	adds	r3, #52	@ 0x34
 800141a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	4619      	mov	r1, r3
 8001424:	4610      	mov	r0, r2
 8001426:	f7ff fcff 	bl	8000e28 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	7858      	ldrb	r0, [r3, #1]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001442:	2301      	movs	r3, #1
 8001444:	f011 f9d0 	bl	80127e8 <disk_write>
			fs->fsi_flag = 0;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	785b      	ldrb	r3, [r3, #1]
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f011 f9e6 	bl	8012828 <disk_ioctl>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <sync_fs+0xca>
 8001462:	2301      	movs	r3, #1
 8001464:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8001466:	7bfb      	ldrb	r3, [r7, #15]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	41615252 	.word	0x41615252
 8001474:	61417272 	.word	0x61417272

08001478 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	3b02      	subs	r3, #2
 8001486:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	3b02      	subs	r3, #2
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	429a      	cmp	r2, r3
 8001492:	d301      	bcc.n	8001498 <clust2sect+0x20>
 8001494:	2300      	movs	r3, #0
 8001496:	e008      	b.n	80014aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	895b      	ldrh	r3, [r3, #10]
 800149c:	461a      	mov	r2, r3
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	fb03 f202 	mul.w	r2, r3, r2
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a8:	4413      	add	r3, r2
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d904      	bls.n	80014d6 <get_fat+0x20>
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d302      	bcc.n	80014dc <get_fat+0x26>
		val = 1;	/* Internal error */
 80014d6:	2301      	movs	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	e08e      	b.n	80015fa <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295
 80014e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d061      	beq.n	80015ae <get_fat+0xf8>
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	dc7b      	bgt.n	80015e6 <get_fat+0x130>
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d002      	beq.n	80014f8 <get_fat+0x42>
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d041      	beq.n	800157a <get_fat+0xc4>
 80014f6:	e076      	b.n	80015e6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	085b      	lsrs	r3, r3, #1
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	0a5b      	lsrs	r3, r3, #9
 800150e:	4413      	add	r3, r2
 8001510:	4619      	mov	r1, r3
 8001512:	6938      	ldr	r0, [r7, #16]
 8001514:	f7ff ff14 	bl	8001340 <move_window>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d166      	bne.n	80015ec <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	60fa      	str	r2, [r7, #12]
 8001524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4413      	add	r3, r2
 800152c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001530:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	0a5b      	lsrs	r3, r3, #9
 800153a:	4413      	add	r3, r2
 800153c:	4619      	mov	r1, r3
 800153e:	6938      	ldr	r0, [r7, #16]
 8001540:	f7ff fefe 	bl	8001340 <move_window>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d152      	bne.n	80015f0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4413      	add	r3, r2
 8001554:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	4313      	orrs	r3, r2
 800155e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <get_fat+0xba>
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	091b      	lsrs	r3, r3, #4
 800156e:	e002      	b.n	8001576 <get_fat+0xc0>
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001576:	617b      	str	r3, [r7, #20]
			break;
 8001578:	e03f      	b.n	80015fa <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	4413      	add	r3, r2
 8001584:	4619      	mov	r1, r3
 8001586:	6938      	ldr	r0, [r7, #16]
 8001588:	f7ff feda 	bl	8001340 <move_window>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d130      	bne.n	80015f4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80015a0:	4413      	add	r3, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fbea 	bl	8000d7c <ld_word>
 80015a8:	4603      	mov	r3, r0
 80015aa:	617b      	str	r3, [r7, #20]
			break;
 80015ac:	e025      	b.n	80015fa <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	09db      	lsrs	r3, r3, #7
 80015b6:	4413      	add	r3, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	6938      	ldr	r0, [r7, #16]
 80015bc:	f7ff fec0 	bl	8001340 <move_window>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d118      	bne.n	80015f8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80015d4:	4413      	add	r3, r2
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fbe8 	bl	8000dac <ld_dword>
 80015dc:	4603      	mov	r3, r0
 80015de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80015e2:	617b      	str	r3, [r7, #20]
			break;
 80015e4:	e009      	b.n	80015fa <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80015e6:	2301      	movs	r3, #1
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	e006      	b.n	80015fa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80015ec:	bf00      	nop
 80015ee:	e004      	b.n	80015fa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80015f0:	bf00      	nop
 80015f2:	e002      	b.n	80015fa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80015f4:	bf00      	nop
 80015f6:	e000      	b.n	80015fa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80015f8:	bf00      	nop
		}
	}

	return val;
 80015fa:	697b      	ldr	r3, [r7, #20]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b089      	sub	sp, #36	@ 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8001610:	2302      	movs	r3, #2
 8001612:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	2b01      	cmp	r3, #1
 8001618:	f240 80d9 	bls.w	80017ce <put_fat+0x1ca>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	429a      	cmp	r2, r3
 8001624:	f080 80d3 	bcs.w	80017ce <put_fat+0x1ca>
		switch (fs->fs_type) {
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b03      	cmp	r3, #3
 800162e:	f000 8096 	beq.w	800175e <put_fat+0x15a>
 8001632:	2b03      	cmp	r3, #3
 8001634:	f300 80cb 	bgt.w	80017ce <put_fat+0x1ca>
 8001638:	2b01      	cmp	r3, #1
 800163a:	d002      	beq.n	8001642 <put_fat+0x3e>
 800163c:	2b02      	cmp	r3, #2
 800163e:	d06e      	beq.n	800171e <put_fat+0x11a>
 8001640:	e0c5      	b.n	80017ce <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	085b      	lsrs	r3, r3, #1
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4413      	add	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	0a5b      	lsrs	r3, r3, #9
 8001658:	4413      	add	r3, r2
 800165a:	4619      	mov	r1, r3
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f7ff fe6f 	bl	8001340 <move_window>
 8001662:	4603      	mov	r3, r0
 8001664:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001666:	7ffb      	ldrb	r3, [r7, #31]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f040 80a9 	bne.w	80017c0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	1c59      	adds	r1, r3, #1
 8001678:	61b9      	str	r1, [r7, #24]
 800167a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800167e:	4413      	add	r3, r2
 8001680:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00d      	beq.n	80016a8 <put_fat+0xa4>
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b25b      	sxtb	r3, r3
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	b25a      	sxtb	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	b25b      	sxtb	r3, r3
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	e001      	b.n	80016ac <put_fat+0xa8>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2201      	movs	r2, #1
 80016b4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	0a5b      	lsrs	r3, r3, #9
 80016be:	4413      	add	r3, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f7ff fe3c 	bl	8001340 <move_window>
 80016c8:	4603      	mov	r3, r0
 80016ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80016cc:	7ffb      	ldrb	r3, [r7, #31]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d178      	bne.n	80017c4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016de:	4413      	add	r3, r2
 80016e0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <put_fat+0xf0>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	091b      	lsrs	r3, r3, #4
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	e00e      	b.n	8001712 <put_fat+0x10e>
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b25b      	sxtb	r3, r3
 80016fa:	f023 030f 	bic.w	r3, r3, #15
 80016fe:	b25a      	sxtb	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	0a1b      	lsrs	r3, r3, #8
 8001704:	b25b      	sxtb	r3, r3
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	b25b      	sxtb	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b25b      	sxtb	r3, r3
 8001710:	b2db      	uxtb	r3, r3
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2201      	movs	r2, #1
 800171a:	70da      	strb	r2, [r3, #3]
			break;
 800171c:	e057      	b.n	80017ce <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	4413      	add	r3, r2
 8001728:	4619      	mov	r1, r3
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f7ff fe08 	bl	8001340 <move_window>
 8001730:	4603      	mov	r3, r0
 8001732:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001734:	7ffb      	ldrb	r3, [r7, #31]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d146      	bne.n	80017c8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8001748:	4413      	add	r3, r2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	b292      	uxth	r2, r2
 800174e:	4611      	mov	r1, r2
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fb4e 	bl	8000df2 <st_word>
			fs->wflag = 1;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2201      	movs	r2, #1
 800175a:	70da      	strb	r2, [r3, #3]
			break;
 800175c:	e037      	b.n	80017ce <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	09db      	lsrs	r3, r3, #7
 8001766:	4413      	add	r3, r2
 8001768:	4619      	mov	r1, r3
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f7ff fde8 	bl	8001340 <move_window>
 8001770:	4603      	mov	r3, r0
 8001772:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001774:	7ffb      	ldrb	r3, [r7, #31]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d128      	bne.n	80017cc <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800178e:	4413      	add	r3, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fb0b 	bl	8000dac <ld_dword>
 8001796:	4603      	mov	r3, r0
 8001798:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800179c:	4323      	orrs	r3, r4
 800179e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80017ae:	4413      	add	r3, r2
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fb38 	bl	8000e28 <st_dword>
			fs->wflag = 1;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2201      	movs	r2, #1
 80017bc:	70da      	strb	r2, [r3, #3]
			break;
 80017be:	e006      	b.n	80017ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 80017c0:	bf00      	nop
 80017c2:	e004      	b.n	80017ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 80017c4:	bf00      	nop
 80017c6:	e002      	b.n	80017ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 80017c8:	bf00      	nop
 80017ca:	e000      	b.n	80017ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 80017cc:	bf00      	nop
		}
	}
	return res;
 80017ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3724      	adds	r7, #36	@ 0x24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd90      	pop	{r4, r7, pc}

080017d8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d904      	bls.n	80017fe <remove_chain+0x26>
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d301      	bcc.n	8001802 <remove_chain+0x2a>
 80017fe:	2302      	movs	r3, #2
 8001800:	e04b      	b.n	800189a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00c      	beq.n	8001822 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8001808:	f04f 32ff 	mov.w	r2, #4294967295
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	69b8      	ldr	r0, [r7, #24]
 8001810:	f7ff fef8 	bl	8001604 <put_fat>
 8001814:	4603      	mov	r3, r0
 8001816:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8001818:	7ffb      	ldrb	r3, [r7, #31]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <remove_chain+0x4a>
 800181e:	7ffb      	ldrb	r3, [r7, #31]
 8001820:	e03b      	b.n	800189a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8001822:	68b9      	ldr	r1, [r7, #8]
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f7ff fe46 	bl	80014b6 <get_fat>
 800182a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d031      	beq.n	8001896 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <remove_chain+0x64>
 8001838:	2302      	movs	r3, #2
 800183a:	e02e      	b.n	800189a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001842:	d101      	bne.n	8001848 <remove_chain+0x70>
 8001844:	2301      	movs	r3, #1
 8001846:	e028      	b.n	800189a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8001848:	2200      	movs	r2, #0
 800184a:	68b9      	ldr	r1, [r7, #8]
 800184c:	69b8      	ldr	r0, [r7, #24]
 800184e:	f7ff fed9 	bl	8001604 <put_fat>
 8001852:	4603      	mov	r3, r0
 8001854:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8001856:	7ffb      	ldrb	r3, [r7, #31]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <remove_chain+0x88>
 800185c:	7ffb      	ldrb	r3, [r7, #31]
 800185e:	e01c      	b.n	800189a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	695a      	ldr	r2, [r3, #20]
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	3b02      	subs	r3, #2
 800186a:	429a      	cmp	r2, r3
 800186c:	d20b      	bcs.n	8001886 <remove_chain+0xae>
			fs->free_clst++;
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	791b      	ldrb	r3, [r3, #4]
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	b2da      	uxtb	r2, r3
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	429a      	cmp	r2, r3
 8001892:	d3c6      	bcc.n	8001822 <remove_chain+0x4a>
 8001894:	e000      	b.n	8001898 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8001896:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3720      	adds	r7, #32
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b088      	sub	sp, #32
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10d      	bne.n	80018d4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d004      	beq.n	80018ce <create_chain+0x2c>
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d31b      	bcc.n	8001906 <create_chain+0x64>
 80018ce:	2301      	movs	r3, #1
 80018d0:	61bb      	str	r3, [r7, #24]
 80018d2:	e018      	b.n	8001906 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80018d4:	6839      	ldr	r1, [r7, #0]
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fded 	bl	80014b6 <get_fat>
 80018dc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d801      	bhi.n	80018e8 <create_chain+0x46>
 80018e4:	2301      	movs	r3, #1
 80018e6:	e070      	b.n	80019ca <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ee:	d101      	bne.n	80018f4 <create_chain+0x52>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	e06a      	b.n	80019ca <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d201      	bcs.n	8001902 <create_chain+0x60>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	e063      	b.n	80019ca <create_chain+0x128>
		scl = clst;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3301      	adds	r3, #1
 800190e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	429a      	cmp	r2, r3
 8001918:	d307      	bcc.n	800192a <create_chain+0x88>
				ncl = 2;
 800191a:	2302      	movs	r3, #2
 800191c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	429a      	cmp	r2, r3
 8001924:	d901      	bls.n	800192a <create_chain+0x88>
 8001926:	2300      	movs	r3, #0
 8001928:	e04f      	b.n	80019ca <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800192a:	69f9      	ldr	r1, [r7, #28]
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff fdc2 	bl	80014b6 <get_fat>
 8001932:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00e      	beq.n	8001958 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d003      	beq.n	8001948 <create_chain+0xa6>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001946:	d101      	bne.n	800194c <create_chain+0xaa>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	e03e      	b.n	80019ca <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	429a      	cmp	r2, r3
 8001952:	d1da      	bne.n	800190a <create_chain+0x68>
 8001954:	2300      	movs	r3, #0
 8001956:	e038      	b.n	80019ca <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8001958:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800195a:	f04f 32ff 	mov.w	r2, #4294967295
 800195e:	69f9      	ldr	r1, [r7, #28]
 8001960:	6938      	ldr	r0, [r7, #16]
 8001962:	f7ff fe4f 	bl	8001604 <put_fat>
 8001966:	4603      	mov	r3, r0
 8001968:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800196a:	7dfb      	ldrb	r3, [r7, #23]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d109      	bne.n	8001984 <create_chain+0xe2>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d006      	beq.n	8001984 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	6839      	ldr	r1, [r7, #0]
 800197a:	6938      	ldr	r0, [r7, #16]
 800197c:	f7ff fe42 	bl	8001604 <put_fat>
 8001980:	4603      	mov	r3, r0
 8001982:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8001984:	7dfb      	ldrb	r3, [r7, #23]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d116      	bne.n	80019b8 <create_chain+0x116>
		fs->last_clst = ncl;
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	69fa      	ldr	r2, [r7, #28]
 800198e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	695a      	ldr	r2, [r3, #20]
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	3b02      	subs	r3, #2
 800199a:	429a      	cmp	r2, r3
 800199c:	d804      	bhi.n	80019a8 <create_chain+0x106>
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	1e5a      	subs	r2, r3, #1
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	791b      	ldrb	r3, [r3, #4]
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	711a      	strb	r2, [r3, #4]
 80019b6:	e007      	b.n	80019c8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80019b8:	7dfb      	ldrb	r3, [r7, #23]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d102      	bne.n	80019c4 <create_chain+0x122>
 80019be:	f04f 33ff 	mov.w	r3, #4294967295
 80019c2:	e000      	b.n	80019c6 <create_chain+0x124>
 80019c4:	2301      	movs	r3, #1
 80019c6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80019c8:	69fb      	ldr	r3, [r7, #28]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3720      	adds	r7, #32
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b087      	sub	sp, #28
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e6:	3304      	adds	r3, #4
 80019e8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	0a5b      	lsrs	r3, r3, #9
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	8952      	ldrh	r2, [r2, #10]
 80019f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80019f6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1d1a      	adds	r2, r3, #4
 80019fc:	613a      	str	r2, [r7, #16]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <clmt_clust+0x3a>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	e010      	b.n	8001a2e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d307      	bcc.n	8001a24 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8001a22:	e7e9      	b.n	80019f8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8001a24:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	4413      	add	r3, r2
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a50:	d204      	bcs.n	8001a5c <dir_sdi+0x22>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <dir_sdi+0x26>
		return FR_INT_ERR;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e063      	b.n	8001b28 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <dir_sdi+0x46>
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d902      	bls.n	8001a80 <dir_sdi+0x46>
		clst = fs->dirbase;
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10c      	bne.n	8001aa0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	095b      	lsrs	r3, r3, #5
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	8912      	ldrh	r2, [r2, #8]
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d301      	bcc.n	8001a96 <dir_sdi+0x5c>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e048      	b.n	8001b28 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	61da      	str	r2, [r3, #28]
 8001a9e:	e029      	b.n	8001af4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	895b      	ldrh	r3, [r3, #10]
 8001aa4:	025b      	lsls	r3, r3, #9
 8001aa6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8001aa8:	e019      	b.n	8001ade <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6979      	ldr	r1, [r7, #20]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fd01 	bl	80014b6 <get_fat>
 8001ab4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abc:	d101      	bne.n	8001ac2 <dir_sdi+0x88>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e032      	b.n	8001b28 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d904      	bls.n	8001ad2 <dir_sdi+0x98>
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d301      	bcc.n	8001ad6 <dir_sdi+0x9c>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e028      	b.n	8001b28 <dir_sdi+0xee>
			ofs -= csz;
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d2e1      	bcs.n	8001aaa <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8001ae6:	6979      	ldr	r1, [r7, #20]
 8001ae8:	6938      	ldr	r0, [r7, #16]
 8001aea:	f7ff fcc5 	bl	8001478 <clust2sect>
 8001aee:	4602      	mov	r2, r0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <dir_sdi+0xcc>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e010      	b.n	8001b28 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69da      	ldr	r2, [r3, #28]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	0a5b      	lsrs	r3, r3, #9
 8001b0e:	441a      	add	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b20:	441a      	add	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	3320      	adds	r3, #32
 8001b46:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <dir_next+0x28>
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b56:	d301      	bcc.n	8001b5c <dir_next+0x2c>
 8001b58:	2304      	movs	r3, #4
 8001b5a:	e0aa      	b.n	8001cb2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f040 8098 	bne.w	8001c98 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10b      	bne.n	8001b92 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	095b      	lsrs	r3, r3, #5
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	8912      	ldrh	r2, [r2, #8]
 8001b82:	4293      	cmp	r3, r2
 8001b84:	f0c0 8088 	bcc.w	8001c98 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	61da      	str	r2, [r3, #28]
 8001b8e:	2304      	movs	r3, #4
 8001b90:	e08f      	b.n	8001cb2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	0a5b      	lsrs	r3, r3, #9
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	8952      	ldrh	r2, [r2, #10]
 8001b9a:	3a01      	subs	r2, #1
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d17a      	bne.n	8001c98 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4610      	mov	r0, r2
 8001bac:	f7ff fc83 	bl	80014b6 <get_fat>
 8001bb0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d801      	bhi.n	8001bbc <dir_next+0x8c>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e07a      	b.n	8001cb2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc2:	d101      	bne.n	8001bc8 <dir_next+0x98>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e074      	b.n	8001cb2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d358      	bcc.n	8001c84 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d104      	bne.n	8001be2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
 8001bde:	2304      	movs	r3, #4
 8001be0:	e067      	b.n	8001cb2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4619      	mov	r1, r3
 8001bea:	4610      	mov	r0, r2
 8001bec:	f7ff fe59 	bl	80018a2 <create_chain>
 8001bf0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <dir_next+0xcc>
 8001bf8:	2307      	movs	r3, #7
 8001bfa:	e05a      	b.n	8001cb2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <dir_next+0xd6>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e055      	b.n	8001cb2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0c:	d101      	bne.n	8001c12 <dir_next+0xe2>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e04f      	b.n	8001cb2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f7ff fb50 	bl	80012b8 <sync_window>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <dir_next+0xf2>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e047      	b.n	8001cb2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3334      	adds	r3, #52	@ 0x34
 8001c26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff f948 	bl	8000ec2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	6979      	ldr	r1, [r7, #20]
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f7ff fc1d 	bl	8001478 <clust2sect>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c44:	e012      	b.n	8001c6c <dir_next+0x13c>
						fs->wflag = 1;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f7ff fb33 	bl	80012b8 <sync_window>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <dir_next+0x12c>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e02a      	b.n	8001cb2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	895b      	ldrh	r3, [r3, #10]
 8001c70:	461a      	mov	r2, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d3e6      	bcc.n	8001c46 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad2      	subs	r2, r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8001c8a:	6979      	ldr	r1, [r7, #20]
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f7ff fbf3 	bl	8001478 <clust2sect>
 8001c92:	4602      	mov	r2, r0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001caa:	441a      	add	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8001cca:	2100      	movs	r1, #0
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff feb4 	bl	8001a3a <dir_sdi>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d12b      	bne.n	8001d34 <dir_alloc+0x7a>
		n = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f7ff fb2a 	bl	8001340 <move_window>
 8001cec:	4603      	mov	r3, r0
 8001cee:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d11d      	bne.n	8001d32 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2be5      	cmp	r3, #229	@ 0xe5
 8001cfe:	d004      	beq.n	8001d0a <dir_alloc+0x50>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d107      	bne.n	8001d1a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d102      	bne.n	8001d1e <dir_alloc+0x64>
 8001d18:	e00c      	b.n	8001d34 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8001d1e:	2101      	movs	r1, #1
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff ff05 	bl	8001b30 <dir_next>
 8001d26:	4603      	mov	r3, r0
 8001d28:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8001d2a:	7dfb      	ldrb	r3, [r7, #23]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0d7      	beq.n	8001ce0 <dir_alloc+0x26>
 8001d30:	e000      	b.n	8001d34 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8001d32:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d101      	bne.n	8001d3e <dir_alloc+0x84>
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	75fb      	strb	r3, [r7, #23]
	return res;
 8001d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	331a      	adds	r3, #26
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff f810 	bl	8000d7c <ld_word>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d109      	bne.n	8001d7c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	3314      	adds	r3, #20
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff f805 	bl	8000d7c <ld_word>
 8001d72:	4603      	mov	r3, r0
 8001d74:	041b      	lsls	r3, r3, #16
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b084      	sub	sp, #16
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	331a      	adds	r3, #26
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	b292      	uxth	r2, r2
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff f828 	bl	8000df2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d109      	bne.n	8001dbe <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f103 0214 	add.w	r2, r3, #20
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	0c1b      	lsrs	r3, r3, #16
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	4619      	mov	r1, r3
 8001db8:	4610      	mov	r0, r2
 8001dba:	f7ff f81a 	bl	8000df2 <st_word>
	}
}
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff fe2f 	bl	8001a3a <dir_sdi>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8001de0:	7dfb      	ldrb	r3, [r7, #23]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <dir_find+0x24>
 8001de6:	7dfb      	ldrb	r3, [r7, #23]
 8001de8:	e03e      	b.n	8001e68 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	4619      	mov	r1, r3
 8001df0:	6938      	ldr	r0, [r7, #16]
 8001df2:	f7ff faa5 	bl	8001340 <move_window>
 8001df6:	4603      	mov	r3, r0
 8001df8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d12f      	bne.n	8001e60 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d102      	bne.n	8001e14 <dir_find+0x4e>
 8001e0e:	2304      	movs	r3, #4
 8001e10:	75fb      	strb	r3, [r7, #23]
 8001e12:	e028      	b.n	8001e66 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	330b      	adds	r3, #11
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	330b      	adds	r3, #11
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10a      	bne.n	8001e4c <dir_find+0x86>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a18      	ldr	r0, [r3, #32]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3324      	adds	r3, #36	@ 0x24
 8001e3e:	220b      	movs	r2, #11
 8001e40:	4619      	mov	r1, r3
 8001e42:	f7ff f859 	bl	8000ef8 <mem_cmp>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00b      	beq.n	8001e64 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff fe6e 	bl	8001b30 <dir_next>
 8001e54:	4603      	mov	r3, r0
 8001e56:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0c5      	beq.n	8001dea <dir_find+0x24>
 8001e5e:	e002      	b.n	8001e66 <dir_find+0xa0>
		if (res != FR_OK) break;
 8001e60:	bf00      	nop
 8001e62:	e000      	b.n	8001e66 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8001e64:	bf00      	nop

	return res;
 8001e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8001e7e:	2101      	movs	r1, #1
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ff1a 	bl	8001cba <dir_alloc>
 8001e86:	4603      	mov	r3, r0
 8001e88:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d11c      	bne.n	8001eca <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	4619      	mov	r1, r3
 8001e96:	68b8      	ldr	r0, [r7, #8]
 8001e98:	f7ff fa52 	bl	8001340 <move_window>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d111      	bne.n	8001eca <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	2100      	movs	r1, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff f807 	bl	8000ec2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a18      	ldr	r0, [r3, #32]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3324      	adds	r3, #36	@ 0x24
 8001ebc:	220b      	movs	r2, #11
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f7fe ffde 	bl	8000e80 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3324      	adds	r3, #36	@ 0x24
 8001ee8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8001eea:	220b      	movs	r2, #11
 8001eec:	2120      	movs	r1, #32
 8001eee:	68b8      	ldr	r0, [r7, #8]
 8001ef0:	f7fe ffe7 	bl	8000ec2 <mem_set>
	si = i = 0; ni = 8;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	61fb      	str	r3, [r7, #28]
 8001efc:	2308      	movs	r3, #8
 8001efe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	1c5a      	adds	r2, r3, #1
 8001f04:	61fa      	str	r2, [r7, #28]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	4413      	add	r3, r2
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8001f0e:	7efb      	ldrb	r3, [r7, #27]
 8001f10:	2b20      	cmp	r3, #32
 8001f12:	d94e      	bls.n	8001fb2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8001f14:	7efb      	ldrb	r3, [r7, #27]
 8001f16:	2b2f      	cmp	r3, #47	@ 0x2f
 8001f18:	d006      	beq.n	8001f28 <create_name+0x54>
 8001f1a:	7efb      	ldrb	r3, [r7, #27]
 8001f1c:	2b5c      	cmp	r3, #92	@ 0x5c
 8001f1e:	d110      	bne.n	8001f42 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8001f20:	e002      	b.n	8001f28 <create_name+0x54>
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3301      	adds	r3, #1
 8001f26:	61fb      	str	r3, [r7, #28]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b2f      	cmp	r3, #47	@ 0x2f
 8001f32:	d0f6      	beq.n	8001f22 <create_name+0x4e>
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	4413      	add	r3, r2
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b5c      	cmp	r3, #92	@ 0x5c
 8001f3e:	d0f0      	beq.n	8001f22 <create_name+0x4e>
			break;
 8001f40:	e038      	b.n	8001fb4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8001f42:	7efb      	ldrb	r3, [r7, #27]
 8001f44:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f46:	d003      	beq.n	8001f50 <create_name+0x7c>
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d30c      	bcc.n	8001f6a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2b0b      	cmp	r3, #11
 8001f54:	d002      	beq.n	8001f5c <create_name+0x88>
 8001f56:	7efb      	ldrb	r3, [r7, #27]
 8001f58:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f5a:	d001      	beq.n	8001f60 <create_name+0x8c>
 8001f5c:	2306      	movs	r3, #6
 8001f5e:	e044      	b.n	8001fea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8001f60:	2308      	movs	r3, #8
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	230b      	movs	r3, #11
 8001f66:	617b      	str	r3, [r7, #20]
			continue;
 8001f68:	e022      	b.n	8001fb0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8001f6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	da04      	bge.n	8001f7c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8001f72:	7efb      	ldrb	r3, [r7, #27]
 8001f74:	3b80      	subs	r3, #128	@ 0x80
 8001f76:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff4 <create_name+0x120>)
 8001f78:	5cd3      	ldrb	r3, [r2, r3]
 8001f7a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8001f7c:	7efb      	ldrb	r3, [r7, #27]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	481d      	ldr	r0, [pc, #116]	@ (8001ff8 <create_name+0x124>)
 8001f82:	f7fe ffe0 	bl	8000f46 <chk_chr>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <create_name+0xbc>
 8001f8c:	2306      	movs	r3, #6
 8001f8e:	e02c      	b.n	8001fea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8001f90:	7efb      	ldrb	r3, [r7, #27]
 8001f92:	2b60      	cmp	r3, #96	@ 0x60
 8001f94:	d905      	bls.n	8001fa2 <create_name+0xce>
 8001f96:	7efb      	ldrb	r3, [r7, #27]
 8001f98:	2b7a      	cmp	r3, #122	@ 0x7a
 8001f9a:	d802      	bhi.n	8001fa2 <create_name+0xce>
 8001f9c:	7efb      	ldrb	r3, [r7, #27]
 8001f9e:	3b20      	subs	r3, #32
 8001fa0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	613a      	str	r2, [r7, #16]
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	4413      	add	r3, r2
 8001fac:	7efa      	ldrb	r2, [r7, #27]
 8001fae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8001fb0:	e7a6      	b.n	8001f00 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8001fb2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	441a      	add	r2, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <create_name+0xf4>
 8001fc4:	2306      	movs	r3, #6
 8001fc6:	e010      	b.n	8001fea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2be5      	cmp	r3, #229	@ 0xe5
 8001fce:	d102      	bne.n	8001fd6 <create_name+0x102>
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2205      	movs	r2, #5
 8001fd4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8001fd6:	7efb      	ldrb	r3, [r7, #27]
 8001fd8:	2b20      	cmp	r3, #32
 8001fda:	d801      	bhi.n	8001fe0 <create_name+0x10c>
 8001fdc:	2204      	movs	r2, #4
 8001fde:	e000      	b.n	8001fe2 <create_name+0x10e>
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	330b      	adds	r3, #11
 8001fe6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8001fe8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3720      	adds	r7, #32
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	08017374 	.word	0x08017374
 8001ff8:	08017110 	.word	0x08017110

08001ffc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002010:	e002      	b.n	8002018 <follow_path+0x1c>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	3301      	adds	r3, #1
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b2f      	cmp	r3, #47	@ 0x2f
 800201e:	d0f8      	beq.n	8002012 <follow_path+0x16>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b5c      	cmp	r3, #92	@ 0x5c
 8002026:	d0f4      	beq.n	8002012 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b1f      	cmp	r3, #31
 8002034:	d80a      	bhi.n	800204c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2280      	movs	r2, #128	@ 0x80
 800203a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800203e:	2100      	movs	r1, #0
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff fcfa 	bl	8001a3a <dir_sdi>
 8002046:	4603      	mov	r3, r0
 8002048:	75fb      	strb	r3, [r7, #23]
 800204a:	e043      	b.n	80020d4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800204c:	463b      	mov	r3, r7
 800204e:	4619      	mov	r1, r3
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff ff3f 	bl	8001ed4 <create_name>
 8002056:	4603      	mov	r3, r0
 8002058:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800205a:	7dfb      	ldrb	r3, [r7, #23]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d134      	bne.n	80020ca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff feb0 	bl	8001dc6 <dir_find>
 8002066:	4603      	mov	r3, r0
 8002068:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002070:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8002072:	7dfb      	ldrb	r3, [r7, #23]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00a      	beq.n	800208e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8002078:	7dfb      	ldrb	r3, [r7, #23]
 800207a:	2b04      	cmp	r3, #4
 800207c:	d127      	bne.n	80020ce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800207e:	7afb      	ldrb	r3, [r7, #11]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d122      	bne.n	80020ce <follow_path+0xd2>
 8002088:	2305      	movs	r3, #5
 800208a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800208c:	e01f      	b.n	80020ce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800208e:	7afb      	ldrb	r3, [r7, #11]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d11c      	bne.n	80020d2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	799b      	ldrb	r3, [r3, #6]
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d102      	bne.n	80020aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80020a4:	2305      	movs	r3, #5
 80020a6:	75fb      	strb	r3, [r7, #23]
 80020a8:	e014      	b.n	80020d4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020b8:	4413      	add	r3, r2
 80020ba:	4619      	mov	r1, r3
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f7ff fe43 	bl	8001d48 <ld_clust>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80020c8:	e7c0      	b.n	800204c <follow_path+0x50>
			if (res != FR_OK) break;
 80020ca:	bf00      	nop
 80020cc:	e002      	b.n	80020d4 <follow_path+0xd8>
				break;
 80020ce:	bf00      	nop
 80020d0:	e000      	b.n	80020d4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80020d2:	bf00      	nop
			}
		}
	}

	return res;
 80020d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80020de:	b480      	push	{r7}
 80020e0:	b087      	sub	sp, #28
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80020e6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d031      	beq.n	8002158 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	e002      	b.n	8002102 <get_ldnumber+0x24>
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	3301      	adds	r3, #1
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b20      	cmp	r3, #32
 8002108:	d903      	bls.n	8002112 <get_ldnumber+0x34>
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b3a      	cmp	r3, #58	@ 0x3a
 8002110:	d1f4      	bne.n	80020fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b3a      	cmp	r3, #58	@ 0x3a
 8002118:	d11c      	bne.n	8002154 <get_ldnumber+0x76>
			tp = *path;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	60fa      	str	r2, [r7, #12]
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	3b30      	subs	r3, #48	@ 0x30
 800212a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b09      	cmp	r3, #9
 8002130:	d80e      	bhi.n	8002150 <get_ldnumber+0x72>
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	429a      	cmp	r2, r3
 8002138:	d10a      	bne.n	8002150 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d107      	bne.n	8002150 <get_ldnumber+0x72>
					vol = (int)i;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	3301      	adds	r3, #1
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	e002      	b.n	800215a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8002154:	2300      	movs	r3, #0
 8002156:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8002158:	693b      	ldr	r3, [r7, #16]
}
 800215a:	4618      	mov	r0, r3
 800215c:	371c      	adds	r7, #28
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	70da      	strb	r2, [r3, #3]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f04f 32ff 	mov.w	r2, #4294967295
 800217e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002180:	6839      	ldr	r1, [r7, #0]
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff f8dc 	bl	8001340 <move_window>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <check_fs+0x2a>
 800218e:	2304      	movs	r3, #4
 8002190:	e038      	b.n	8002204 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3334      	adds	r3, #52	@ 0x34
 8002196:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe fdee 	bl	8000d7c <ld_word>
 80021a0:	4603      	mov	r3, r0
 80021a2:	461a      	mov	r2, r3
 80021a4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <check_fs+0x48>
 80021ac:	2303      	movs	r3, #3
 80021ae:	e029      	b.n	8002204 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021b6:	2be9      	cmp	r3, #233	@ 0xe9
 80021b8:	d009      	beq.n	80021ce <check_fs+0x66>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021c0:	2beb      	cmp	r3, #235	@ 0xeb
 80021c2:	d11e      	bne.n	8002202 <check_fs+0x9a>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80021ca:	2b90      	cmp	r3, #144	@ 0x90
 80021cc:	d119      	bne.n	8002202 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3334      	adds	r3, #52	@ 0x34
 80021d2:	3336      	adds	r3, #54	@ 0x36
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe fde9 	bl	8000dac <ld_dword>
 80021da:	4603      	mov	r3, r0
 80021dc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80021e0:	4a0a      	ldr	r2, [pc, #40]	@ (800220c <check_fs+0xa4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d101      	bne.n	80021ea <check_fs+0x82>
 80021e6:	2300      	movs	r3, #0
 80021e8:	e00c      	b.n	8002204 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3334      	adds	r3, #52	@ 0x34
 80021ee:	3352      	adds	r3, #82	@ 0x52
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe fddb 	bl	8000dac <ld_dword>
 80021f6:	4603      	mov	r3, r0
 80021f8:	4a05      	ldr	r2, [pc, #20]	@ (8002210 <check_fs+0xa8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d101      	bne.n	8002202 <check_fs+0x9a>
 80021fe:	2300      	movs	r3, #0
 8002200:	e000      	b.n	8002204 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8002202:	2302      	movs	r3, #2
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	00544146 	.word	0x00544146
 8002210:	33544146 	.word	0x33544146

08002214 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b096      	sub	sp, #88	@ 0x58
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	4613      	mov	r3, r2
 8002220:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f7ff ff58 	bl	80020de <get_ldnumber>
 800222e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8002230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002232:	2b00      	cmp	r3, #0
 8002234:	da01      	bge.n	800223a <find_volume+0x26>
 8002236:	230b      	movs	r3, #11
 8002238:	e235      	b.n	80026a6 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800223a:	4aa5      	ldr	r2, [pc, #660]	@ (80024d0 <find_volume+0x2bc>)
 800223c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800223e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002242:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <find_volume+0x3a>
 800224a:	230c      	movs	r3, #12
 800224c:	e22b      	b.n	80026a6 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800224e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002250:	f7fe fe94 	bl	8000f7c <lock_fs>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <find_volume+0x4a>
 800225a:	230f      	movs	r3, #15
 800225c:	e223      	b.n	80026a6 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002262:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	f023 0301 	bic.w	r3, r3, #1
 800226a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800226c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d01a      	beq.n	80022aa <find_volume+0x96>
		stat = disk_status(fs->drv);
 8002274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002276:	785b      	ldrb	r3, [r3, #1]
 8002278:	4618      	mov	r0, r3
 800227a:	f010 fa55 	bl	8012728 <disk_status>
 800227e:	4603      	mov	r3, r0
 8002280:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002284:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10c      	bne.n	80022aa <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d007      	beq.n	80022a6 <find_volume+0x92>
 8002296:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80022a2:	230a      	movs	r3, #10
 80022a4:	e1ff      	b.n	80026a6 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 80022a6:	2300      	movs	r3, #0
 80022a8:	e1fd      	b.n	80026a6 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80022aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80022b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022b6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80022b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ba:	785b      	ldrb	r3, [r3, #1]
 80022bc:	4618      	mov	r0, r3
 80022be:	f010 fa4d 	bl	801275c <disk_initialize>
 80022c2:	4603      	mov	r3, r0
 80022c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80022c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80022d4:	2303      	movs	r3, #3
 80022d6:	e1e6      	b.n	80026a6 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d007      	beq.n	80022ee <find_volume+0xda>
 80022de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80022ea:	230a      	movs	r3, #10
 80022ec:	e1db      	b.n	80026a6 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80022f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80022f4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80022f6:	f7ff ff37 	bl	8002168 <check_fs>
 80022fa:	4603      	mov	r3, r0
 80022fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8002300:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002304:	2b02      	cmp	r3, #2
 8002306:	d149      	bne.n	800239c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002308:	2300      	movs	r3, #0
 800230a:	643b      	str	r3, [r7, #64]	@ 0x40
 800230c:	e01e      	b.n	800234c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800230e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002310:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8002314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800231c:	4413      	add	r3, r2
 800231e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002322:	3304      	adds	r3, #4
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d006      	beq.n	8002338 <find_volume+0x124>
 800232a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800232c:	3308      	adds	r3, #8
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fd3c 	bl	8000dac <ld_dword>
 8002334:	4602      	mov	r2, r0
 8002336:	e000      	b.n	800233a <find_volume+0x126>
 8002338:	2200      	movs	r2, #0
 800233a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	3358      	adds	r3, #88	@ 0x58
 8002340:	443b      	add	r3, r7
 8002342:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002346:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002348:	3301      	adds	r3, #1
 800234a:	643b      	str	r3, [r7, #64]	@ 0x40
 800234c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800234e:	2b03      	cmp	r3, #3
 8002350:	d9dd      	bls.n	800230e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8002352:	2300      	movs	r3, #0
 8002354:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8002356:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <find_volume+0x14e>
 800235c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800235e:	3b01      	subs	r3, #1
 8002360:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8002362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	3358      	adds	r3, #88	@ 0x58
 8002368:	443b      	add	r3, r7
 800236a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800236e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002370:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <find_volume+0x16e>
 8002376:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002378:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800237a:	f7ff fef5 	bl	8002168 <check_fs>
 800237e:	4603      	mov	r3, r0
 8002380:	e000      	b.n	8002384 <find_volume+0x170>
 8002382:	2303      	movs	r3, #3
 8002384:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002388:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800238c:	2b01      	cmp	r3, #1
 800238e:	d905      	bls.n	800239c <find_volume+0x188>
 8002390:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002392:	3301      	adds	r3, #1
 8002394:	643b      	str	r3, [r7, #64]	@ 0x40
 8002396:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002398:	2b03      	cmp	r3, #3
 800239a:	d9e2      	bls.n	8002362 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800239c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d101      	bne.n	80023a8 <find_volume+0x194>
 80023a4:	2301      	movs	r3, #1
 80023a6:	e17e      	b.n	80026a6 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80023a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d901      	bls.n	80023b4 <find_volume+0x1a0>
 80023b0:	230d      	movs	r3, #13
 80023b2:	e178      	b.n	80026a6 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80023b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b6:	3334      	adds	r3, #52	@ 0x34
 80023b8:	330b      	adds	r3, #11
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe fcde 	bl	8000d7c <ld_word>
 80023c0:	4603      	mov	r3, r0
 80023c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023c6:	d001      	beq.n	80023cc <find_volume+0x1b8>
 80023c8:	230d      	movs	r3, #13
 80023ca:	e16c      	b.n	80026a6 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80023cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ce:	3334      	adds	r3, #52	@ 0x34
 80023d0:	3316      	adds	r3, #22
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe fcd2 	bl	8000d7c <ld_word>
 80023d8:	4603      	mov	r3, r0
 80023da:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80023dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <find_volume+0x1dc>
 80023e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e4:	3334      	adds	r3, #52	@ 0x34
 80023e6:	3324      	adds	r3, #36	@ 0x24
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe fcdf 	bl	8000dac <ld_dword>
 80023ee:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80023f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023f4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80023f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023f8:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80023fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8002400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002402:	789b      	ldrb	r3, [r3, #2]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d005      	beq.n	8002414 <find_volume+0x200>
 8002408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800240a:	789b      	ldrb	r3, [r3, #2]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d001      	beq.n	8002414 <find_volume+0x200>
 8002410:	230d      	movs	r3, #13
 8002412:	e148      	b.n	80026a6 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8002414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002416:	789b      	ldrb	r3, [r3, #2]
 8002418:	461a      	mov	r2, r3
 800241a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800241c:	fb02 f303 	mul.w	r3, r2, r3
 8002420:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8002422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002424:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002428:	461a      	mov	r2, r3
 800242a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800242c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800242e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002430:	895b      	ldrh	r3, [r3, #10]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d008      	beq.n	8002448 <find_volume+0x234>
 8002436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002438:	895b      	ldrh	r3, [r3, #10]
 800243a:	461a      	mov	r2, r3
 800243c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800243e:	895b      	ldrh	r3, [r3, #10]
 8002440:	3b01      	subs	r3, #1
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <find_volume+0x238>
 8002448:	230d      	movs	r3, #13
 800244a:	e12c      	b.n	80026a6 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800244c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800244e:	3334      	adds	r3, #52	@ 0x34
 8002450:	3311      	adds	r3, #17
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fc92 	bl	8000d7c <ld_word>
 8002458:	4603      	mov	r3, r0
 800245a:	461a      	mov	r2, r3
 800245c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800245e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8002460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002462:	891b      	ldrh	r3, [r3, #8]
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	b29b      	uxth	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <find_volume+0x25e>
 800246e:	230d      	movs	r3, #13
 8002470:	e119      	b.n	80026a6 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8002472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002474:	3334      	adds	r3, #52	@ 0x34
 8002476:	3313      	adds	r3, #19
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe fc7f 	bl	8000d7c <ld_word>
 800247e:	4603      	mov	r3, r0
 8002480:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8002482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002484:	2b00      	cmp	r3, #0
 8002486:	d106      	bne.n	8002496 <find_volume+0x282>
 8002488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800248a:	3334      	adds	r3, #52	@ 0x34
 800248c:	3320      	adds	r3, #32
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fc8c 	bl	8000dac <ld_dword>
 8002494:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8002496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002498:	3334      	adds	r3, #52	@ 0x34
 800249a:	330e      	adds	r3, #14
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fc6d 	bl	8000d7c <ld_word>
 80024a2:	4603      	mov	r3, r0
 80024a4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80024a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <find_volume+0x29c>
 80024ac:	230d      	movs	r3, #13
 80024ae:	e0fa      	b.n	80026a6 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80024b0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80024b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024b4:	4413      	add	r3, r2
 80024b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024b8:	8912      	ldrh	r2, [r2, #8]
 80024ba:	0912      	lsrs	r2, r2, #4
 80024bc:	b292      	uxth	r2, r2
 80024be:	4413      	add	r3, r2
 80024c0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80024c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d204      	bcs.n	80024d4 <find_volume+0x2c0>
 80024ca:	230d      	movs	r3, #13
 80024cc:	e0eb      	b.n	80026a6 <find_volume+0x492>
 80024ce:	bf00      	nop
 80024d0:	20000118 	.word	0x20000118
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80024d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024dc:	8952      	ldrh	r2, [r2, #10]
 80024de:	fbb3 f3f2 	udiv	r3, r3, r2
 80024e2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <find_volume+0x2da>
 80024ea:	230d      	movs	r3, #13
 80024ec:	e0db      	b.n	80026a6 <find_volume+0x492>
		fmt = FS_FAT32;
 80024ee:	2303      	movs	r3, #3
 80024f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80024f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d802      	bhi.n	8002504 <find_volume+0x2f0>
 80024fe:	2302      	movs	r3, #2
 8002500:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8002504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002506:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800250a:	4293      	cmp	r3, r2
 800250c:	d802      	bhi.n	8002514 <find_volume+0x300>
 800250e:	2301      	movs	r3, #1
 8002510:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002516:	1c9a      	adds	r2, r3, #2
 8002518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800251a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800251c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800251e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002520:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002522:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002524:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002526:	441a      	add	r2, r3
 8002528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800252c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800252e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002530:	441a      	add	r2, r3
 8002532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002534:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8002536:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800253a:	2b03      	cmp	r3, #3
 800253c:	d11e      	bne.n	800257c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800253e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002540:	3334      	adds	r3, #52	@ 0x34
 8002542:	332a      	adds	r3, #42	@ 0x2a
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe fc19 	bl	8000d7c <ld_word>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <find_volume+0x340>
 8002550:	230d      	movs	r3, #13
 8002552:	e0a8      	b.n	80026a6 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8002554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002556:	891b      	ldrh	r3, [r3, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <find_volume+0x34c>
 800255c:	230d      	movs	r3, #13
 800255e:	e0a2      	b.n	80026a6 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8002560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002562:	3334      	adds	r3, #52	@ 0x34
 8002564:	332c      	adds	r3, #44	@ 0x2c
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe fc20 	bl	8000dac <ld_dword>
 800256c:	4602      	mov	r2, r0
 800256e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002570:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8002572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	647b      	str	r3, [r7, #68]	@ 0x44
 800257a:	e01f      	b.n	80025bc <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800257c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800257e:	891b      	ldrh	r3, [r3, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <find_volume+0x374>
 8002584:	230d      	movs	r3, #13
 8002586:	e08e      	b.n	80026a6 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8002588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800258a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800258c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800258e:	441a      	add	r2, r3
 8002590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002592:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002594:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002598:	2b02      	cmp	r3, #2
 800259a:	d103      	bne.n	80025a4 <find_volume+0x390>
 800259c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	e00a      	b.n	80025ba <find_volume+0x3a6>
 80025a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a6:	699a      	ldr	r2, [r3, #24]
 80025a8:	4613      	mov	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4413      	add	r3, r2
 80025ae:	085a      	lsrs	r2, r3, #1
 80025b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80025ba:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80025bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025be:	69da      	ldr	r2, [r3, #28]
 80025c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025c2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80025c6:	0a5b      	lsrs	r3, r3, #9
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d201      	bcs.n	80025d0 <find_volume+0x3bc>
 80025cc:	230d      	movs	r3, #13
 80025ce:	e06a      	b.n	80026a6 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80025d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d2:	f04f 32ff 	mov.w	r2, #4294967295
 80025d6:	615a      	str	r2, [r3, #20]
 80025d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025da:	695a      	ldr	r2, [r3, #20]
 80025dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025de:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80025e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e2:	2280      	movs	r2, #128	@ 0x80
 80025e4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80025e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d149      	bne.n	8002682 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80025ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f0:	3334      	adds	r3, #52	@ 0x34
 80025f2:	3330      	adds	r3, #48	@ 0x30
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe fbc1 	bl	8000d7c <ld_word>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d140      	bne.n	8002682 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8002600:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002602:	3301      	adds	r3, #1
 8002604:	4619      	mov	r1, r3
 8002606:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002608:	f7fe fe9a 	bl	8001340 <move_window>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d137      	bne.n	8002682 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8002612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002614:	2200      	movs	r2, #0
 8002616:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8002618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800261a:	3334      	adds	r3, #52	@ 0x34
 800261c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe fbab 	bl	8000d7c <ld_word>
 8002626:	4603      	mov	r3, r0
 8002628:	461a      	mov	r2, r3
 800262a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800262e:	429a      	cmp	r2, r3
 8002630:	d127      	bne.n	8002682 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8002632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002634:	3334      	adds	r3, #52	@ 0x34
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fbb8 	bl	8000dac <ld_dword>
 800263c:	4603      	mov	r3, r0
 800263e:	4a1c      	ldr	r2, [pc, #112]	@ (80026b0 <find_volume+0x49c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d11e      	bne.n	8002682 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8002644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002646:	3334      	adds	r3, #52	@ 0x34
 8002648:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fbad 	bl	8000dac <ld_dword>
 8002652:	4603      	mov	r3, r0
 8002654:	4a17      	ldr	r2, [pc, #92]	@ (80026b4 <find_volume+0x4a0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d113      	bne.n	8002682 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800265a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800265c:	3334      	adds	r3, #52	@ 0x34
 800265e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fba2 	bl	8000dac <ld_dword>
 8002668:	4602      	mov	r2, r0
 800266a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800266c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800266e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002670:	3334      	adds	r3, #52	@ 0x34
 8002672:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fb98 	bl	8000dac <ld_dword>
 800267c:	4602      	mov	r2, r0
 800267e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002680:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8002682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002684:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8002688:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800268a:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <find_volume+0x4a4>)
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	3301      	adds	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	4b09      	ldr	r3, [pc, #36]	@ (80026b8 <find_volume+0x4a4>)
 8002694:	801a      	strh	r2, [r3, #0]
 8002696:	4b08      	ldr	r3, [pc, #32]	@ (80026b8 <find_volume+0x4a4>)
 8002698:	881a      	ldrh	r2, [r3, #0]
 800269a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800269c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800269e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80026a0:	f7fe fde6 	bl	8001270 <clear_lock>
#endif
	return FR_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3758      	adds	r7, #88	@ 0x58
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	41615252 	.word	0x41615252
 80026b4:	61417272 	.word	0x61417272
 80026b8:	2000011c 	.word	0x2000011c

080026bc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80026c6:	2309      	movs	r3, #9
 80026c8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d02e      	beq.n	800272e <validate+0x72>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d02a      	beq.n	800272e <validate+0x72>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d025      	beq.n	800272e <validate+0x72>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	889a      	ldrh	r2, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	88db      	ldrh	r3, [r3, #6]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d11e      	bne.n	800272e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fc41 	bl	8000f7c <lock_fs>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d014      	beq.n	800272a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	785b      	ldrb	r3, [r3, #1]
 8002706:	4618      	mov	r0, r3
 8002708:	f010 f80e 	bl	8012728 <disk_status>
 800270c:	4603      	mov	r3, r0
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d102      	bne.n	800271c <validate+0x60>
				res = FR_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	73fb      	strb	r3, [r7, #15]
 800271a:	e008      	b.n	800272e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2100      	movs	r1, #0
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fc40 	bl	8000fa8 <unlock_fs>
 8002728:	e001      	b.n	800272e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800272a:	230f      	movs	r3, #15
 800272c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <validate+0x7e>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	e000      	b.n	800273c <validate+0x80>
 800273a:	2300      	movs	r3, #0
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	6013      	str	r3, [r2, #0]
	return res;
 8002740:	7bfb      	ldrb	r3, [r7, #15]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	4613      	mov	r3, r2
 8002758:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800275e:	f107 0310 	add.w	r3, r7, #16
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fcbb 	bl	80020de <get_ldnumber>
 8002768:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	2b00      	cmp	r3, #0
 800276e:	da01      	bge.n	8002774 <f_mount+0x28>
 8002770:	230b      	movs	r3, #11
 8002772:	e048      	b.n	8002806 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8002774:	4a26      	ldr	r2, [pc, #152]	@ (8002810 <f_mount+0xc4>)
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00f      	beq.n	80027a4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8002784:	69b8      	ldr	r0, [r7, #24]
 8002786:	f7fe fd73 	bl	8001270 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	4618      	mov	r0, r3
 8002790:	f010 f8e3 	bl	801295a <ff_del_syncobj>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <f_mount+0x52>
 800279a:	2302      	movs	r3, #2
 800279c:	e033      	b.n	8002806 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00f      	beq.n	80027ca <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	330c      	adds	r3, #12
 80027b8:	4619      	mov	r1, r3
 80027ba:	4610      	mov	r0, r2
 80027bc:	f010 f8ad 	bl	801291a <ff_cre_syncobj>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <f_mount+0x7e>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e01d      	b.n	8002806 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4910      	ldr	r1, [pc, #64]	@ (8002810 <f_mount+0xc4>)
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <f_mount+0x94>
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d001      	beq.n	80027e4 <f_mount+0x98>
 80027e0:	2300      	movs	r3, #0
 80027e2:	e010      	b.n	8002806 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80027e4:	f107 010c 	add.w	r1, r7, #12
 80027e8:	f107 0308 	add.w	r3, r7, #8
 80027ec:	2200      	movs	r2, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fd10 	bl	8002214 <find_volume>
 80027f4:	4603      	mov	r3, r0
 80027f6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	7dfa      	ldrb	r2, [r7, #23]
 80027fc:	4611      	mov	r1, r2
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fe fbd2 	bl	8000fa8 <unlock_fs>
 8002804:	7dfb      	ldrb	r3, [r7, #23]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3720      	adds	r7, #32
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000118 	.word	0x20000118

08002814 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b09a      	sub	sp, #104	@ 0x68
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	4613      	mov	r3, r2
 8002820:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <f_open+0x18>
 8002828:	2309      	movs	r3, #9
 800282a:	e1b0      	b.n	8002b8e <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002832:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8002834:	79fa      	ldrb	r2, [r7, #7]
 8002836:	f107 0114 	add.w	r1, r7, #20
 800283a:	f107 0308 	add.w	r3, r7, #8
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fce8 	bl	8002214 <find_volume>
 8002844:	4603      	mov	r3, r0
 8002846:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800284a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800284e:	2b00      	cmp	r3, #0
 8002850:	f040 818d 	bne.w	8002b6e <f_open+0x35a>
		dj.obj.fs = fs;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	f107 0318 	add.w	r3, r7, #24
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fbcb 	bl	8001ffc <follow_path>
 8002866:	4603      	mov	r3, r0
 8002868:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800286c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002870:	2b00      	cmp	r3, #0
 8002872:	d118      	bne.n	80028a6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8002874:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002878:	b25b      	sxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	da03      	bge.n	8002886 <f_open+0x72>
				res = FR_INVALID_NAME;
 800287e:	2306      	movs	r3, #6
 8002880:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002884:	e00f      	b.n	80028a6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	2b01      	cmp	r3, #1
 800288a:	bf8c      	ite	hi
 800288c:	2301      	movhi	r3, #1
 800288e:	2300      	movls	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	461a      	mov	r2, r3
 8002894:	f107 0318 	add.w	r3, r7, #24
 8002898:	4611      	mov	r1, r2
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe fba0 	bl	8000fe0 <chk_lock>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	f003 031c 	and.w	r3, r3, #28
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d07f      	beq.n	80029b0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80028b0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d017      	beq.n	80028e8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80028b8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d10e      	bne.n	80028de <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80028c0:	f7fe fbea 	bl	8001098 <enq_lock>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d006      	beq.n	80028d8 <f_open+0xc4>
 80028ca:	f107 0318 	add.w	r3, r7, #24
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff face 	bl	8001e70 <dir_register>
 80028d4:	4603      	mov	r3, r0
 80028d6:	e000      	b.n	80028da <f_open+0xc6>
 80028d8:	2312      	movs	r3, #18
 80028da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	f043 0308 	orr.w	r3, r3, #8
 80028e4:	71fb      	strb	r3, [r7, #7]
 80028e6:	e010      	b.n	800290a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80028e8:	7fbb      	ldrb	r3, [r7, #30]
 80028ea:	f003 0311 	and.w	r3, r3, #17
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <f_open+0xe6>
					res = FR_DENIED;
 80028f2:	2307      	movs	r3, #7
 80028f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80028f8:	e007      	b.n	800290a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <f_open+0xf6>
 8002904:	2308      	movs	r3, #8
 8002906:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800290a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800290e:	2b00      	cmp	r3, #0
 8002910:	d168      	bne.n	80029e4 <f_open+0x1d0>
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	f003 0308 	and.w	r3, r3, #8
 8002918:	2b00      	cmp	r3, #0
 800291a:	d063      	beq.n	80029e4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800291c:	f00f fca2 	bl	8012264 <get_fattime>
 8002920:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8002922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002924:	330e      	adds	r3, #14
 8002926:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe fa7d 	bl	8000e28 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800292e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002930:	3316      	adds	r3, #22
 8002932:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe fa77 	bl	8000e28 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800293a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800293c:	330b      	adds	r3, #11
 800293e:	2220      	movs	r2, #32
 8002940:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002946:	4611      	mov	r1, r2
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff f9fd 	bl	8001d48 <ld_clust>
 800294e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002954:	2200      	movs	r2, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fa15 	bl	8001d86 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800295c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800295e:	331c      	adds	r3, #28
 8002960:	2100      	movs	r1, #0
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe fa60 	bl	8000e28 <st_dword>
					fs->wflag = 1;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2201      	movs	r2, #1
 800296c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800296e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002970:	2b00      	cmp	r3, #0
 8002972:	d037      	beq.n	80029e4 <f_open+0x1d0>
						dw = fs->winsect;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002978:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800297a:	f107 0318 	add.w	r3, r7, #24
 800297e:	2200      	movs	r2, #0
 8002980:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe ff28 	bl	80017d8 <remove_chain>
 8002988:	4603      	mov	r3, r0
 800298a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800298e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002992:	2b00      	cmp	r3, #0
 8002994:	d126      	bne.n	80029e4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800299a:	4618      	mov	r0, r3
 800299c:	f7fe fcd0 	bl	8001340 <move_window>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80029aa:	3a01      	subs	r2, #1
 80029ac:	611a      	str	r2, [r3, #16]
 80029ae:	e019      	b.n	80029e4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80029b0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d115      	bne.n	80029e4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80029b8:	7fbb      	ldrb	r3, [r7, #30]
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <f_open+0x1b6>
					res = FR_NO_FILE;
 80029c2:	2304      	movs	r3, #4
 80029c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80029c8:	e00c      	b.n	80029e4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d007      	beq.n	80029e4 <f_open+0x1d0>
 80029d4:	7fbb      	ldrb	r3, [r7, #30]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <f_open+0x1d0>
						res = FR_DENIED;
 80029de:	2307      	movs	r3, #7
 80029e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80029e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d126      	bne.n	8002a3a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029fc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8002a06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	bf8c      	ite	hi
 8002a12:	2301      	movhi	r3, #1
 8002a14:	2300      	movls	r3, #0
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	f107 0318 	add.w	r3, r7, #24
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fe fb5b 	bl	80010dc <inc_lock>
 8002a26:	4602      	mov	r2, r0
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d102      	bne.n	8002a3a <f_open+0x226>
 8002a34:	2302      	movs	r3, #2
 8002a36:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8002a3a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f040 8095 	bne.w	8002b6e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff f97c 	bl	8001d48 <ld_clust>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8002a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a58:	331c      	adds	r3, #28
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fe f9a6 	bl	8000dac <ld_dword>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	88da      	ldrh	r2, [r3, #6]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	79fa      	ldrb	r2, [r7, #7]
 8002a7e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3330      	adds	r3, #48	@ 0x30
 8002a96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fe fa10 	bl	8000ec2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	f003 0320 	and.w	r3, r3, #32
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d060      	beq.n	8002b6e <f_open+0x35a>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d05c      	beq.n	8002b6e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	895b      	ldrh	r3, [r3, #10]
 8002ac0:	025b      	lsls	r3, r3, #9
 8002ac2:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ad0:	e016      	b.n	8002b00 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe fced 	bl	80014b6 <get_fat>
 8002adc:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8002ade:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d802      	bhi.n	8002aea <f_open+0x2d6>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8002aea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af0:	d102      	bne.n	8002af8 <f_open+0x2e4>
 8002af2:	2301      	movs	r3, #1
 8002af4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8002af8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002afa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b00:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d103      	bne.n	8002b10 <f_open+0x2fc>
 8002b08:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002b0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d8e0      	bhi.n	8002ad2 <f_open+0x2be>
				}
				fp->clust = clst;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002b14:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8002b16:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d127      	bne.n	8002b6e <f_open+0x35a>
 8002b1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d022      	beq.n	8002b6e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe fca3 	bl	8001478 <clust2sect>
 8002b32:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8002b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d103      	bne.n	8002b42 <f_open+0x32e>
						res = FR_INT_ERR;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002b40:	e015      	b.n	8002b6e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8002b42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b44:	0a5a      	lsrs	r2, r3, #9
 8002b46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b48:	441a      	add	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	7858      	ldrb	r0, [r3, #1]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a1a      	ldr	r2, [r3, #32]
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	f00f fe23 	bl	80127a8 <disk_read>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d002      	beq.n	8002b6e <f_open+0x35a>
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8002b6e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <f_open+0x368>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe fa0f 	bl	8000fa8 <unlock_fs>
 8002b8a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3768      	adds	r7, #104	@ 0x68
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b08e      	sub	sp, #56	@ 0x38
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	607a      	str	r2, [r7, #4]
 8002ba2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f107 0214 	add.w	r2, r7, #20
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fd80 	bl	80026bc <validate>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8002bc2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d107      	bne.n	8002bda <f_read+0x44>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	7d5b      	ldrb	r3, [r3, #21]
 8002bce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002bd2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <f_read+0x58>
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe f9e0 	bl	8000fa8 <unlock_fs>
 8002be8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002bec:	e13d      	b.n	8002e6a <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	7d1b      	ldrb	r3, [r3, #20]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <f_read+0x72>
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2107      	movs	r1, #7
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe f9d2 	bl	8000fa8 <unlock_fs>
 8002c04:	2307      	movs	r3, #7
 8002c06:	e130      	b.n	8002e6a <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	f240 811c 	bls.w	8002e56 <f_read+0x2c0>
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8002c22:	e118      	b.n	8002e56 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f040 80e4 	bne.w	8002dfa <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	0a5b      	lsrs	r3, r3, #9
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	8952      	ldrh	r2, [r2, #10]
 8002c3c:	3a01      	subs	r2, #1
 8002c3e:	4013      	ands	r3, r2
 8002c40:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d139      	bne.n	8002cbc <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d103      	bne.n	8002c58 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c56:	e013      	b.n	8002c80 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d007      	beq.n	8002c70 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	4619      	mov	r1, r3
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f7fe feb3 	bl	80019d2 <clmt_clust>
 8002c6c:	6338      	str	r0, [r7, #48]	@ 0x30
 8002c6e:	e007      	b.n	8002c80 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	4619      	mov	r1, r3
 8002c78:	4610      	mov	r0, r2
 8002c7a:	f7fe fc1c 	bl	80014b6 <get_fat>
 8002c7e:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8002c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d809      	bhi.n	8002c9a <f_read+0x104>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2202      	movs	r2, #2
 8002c8a:	755a      	strb	r2, [r3, #21]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	2102      	movs	r1, #2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fe f989 	bl	8000fa8 <unlock_fs>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e0e7      	b.n	8002e6a <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca0:	d109      	bne.n	8002cb6 <f_read+0x120>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	755a      	strb	r2, [r3, #21]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2101      	movs	r1, #1
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe f97b 	bl	8000fa8 <unlock_fs>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e0d9      	b.n	8002e6a <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cba:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	f7fe fbd7 	bl	8001478 <clust2sect>
 8002cca:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <f_read+0x150>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	755a      	strb	r2, [r3, #21]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2102      	movs	r1, #2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7fe f963 	bl	8000fa8 <unlock_fs>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e0c1      	b.n	8002e6a <f_read+0x2d4>
			sect += csect;
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	4413      	add	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	0a5b      	lsrs	r3, r3, #9
 8002cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8002cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d03e      	beq.n	8002d78 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8002cfa:	69fa      	ldr	r2, [r7, #28]
 8002cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cfe:	4413      	add	r3, r2
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	8952      	ldrh	r2, [r2, #10]
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d905      	bls.n	8002d14 <f_read+0x17e>
					cc = fs->csize - csect;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	895b      	ldrh	r3, [r3, #10]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	7858      	ldrb	r0, [r3, #1]
 8002d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d1e:	f00f fd43 	bl	80127a8 <disk_read>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d009      	beq.n	8002d3c <f_read+0x1a6>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	755a      	strb	r2, [r3, #21]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2101      	movs	r1, #1
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fe f938 	bl	8000fa8 <unlock_fs>
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e096      	b.n	8002e6a <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	7d1b      	ldrb	r3, [r3, #20]
 8002d40:	b25b      	sxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	da14      	bge.n	8002d70 <f_read+0x1da>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a1a      	ldr	r2, [r3, #32]
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d90d      	bls.n	8002d70 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a1a      	ldr	r2, [r3, #32]
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	025b      	lsls	r3, r3, #9
 8002d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d60:	18d0      	adds	r0, r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	3330      	adds	r3, #48	@ 0x30
 8002d66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f7fe f888 	bl	8000e80 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8002d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d72:	025b      	lsls	r3, r3, #9
 8002d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8002d76:	e05a      	b.n	8002e2e <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d038      	beq.n	8002df4 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	7d1b      	ldrb	r3, [r3, #20]
 8002d86:	b25b      	sxtb	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	da1d      	bge.n	8002dc8 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	7858      	ldrb	r0, [r3, #1]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a1a      	ldr	r2, [r3, #32]
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f00f fd24 	bl	80127e8 <disk_write>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d009      	beq.n	8002dba <f_read+0x224>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	755a      	strb	r2, [r3, #21]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2101      	movs	r1, #1
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fe f8f9 	bl	8000fa8 <unlock_fs>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e057      	b.n	8002e6a <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	7d1b      	ldrb	r3, [r3, #20]
 8002dbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	7858      	ldrb	r0, [r3, #1]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	f00f fce7 	bl	80127a8 <disk_read>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d009      	beq.n	8002df4 <f_read+0x25e>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	755a      	strb	r2, [r3, #21]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2101      	movs	r1, #1
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe f8dc 	bl	8000fa8 <unlock_fs>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e03a      	b.n	8002e6a <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e02:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8002e08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d901      	bls.n	8002e14 <f_read+0x27e>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e22:	4413      	add	r3, r2
 8002e24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e26:	4619      	mov	r1, r3
 8002e28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002e2a:	f7fe f829 	bl	8000e80 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8002e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e32:	4413      	add	r3, r2
 8002e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	699a      	ldr	r2, [r3, #24]
 8002e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e3c:	441a      	add	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	619a      	str	r2, [r3, #24]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e48:	441a      	add	r2, r3
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f47f aee3 	bne.w	8002c24 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2100      	movs	r1, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe f8a0 	bl	8000fa8 <unlock_fs>
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3738      	adds	r7, #56	@ 0x38
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b086      	sub	sp, #24
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f107 0208 	add.w	r2, r7, #8
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff fc1a 	bl	80026bc <validate>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d16d      	bne.n	8002f6e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	7d1b      	ldrb	r3, [r3, #20]
 8002e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d067      	beq.n	8002f6e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	7d1b      	ldrb	r3, [r3, #20]
 8002ea2:	b25b      	sxtb	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	da1a      	bge.n	8002ede <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	7858      	ldrb	r0, [r3, #1]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1a      	ldr	r2, [r3, #32]
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	f00f fc96 	bl	80127e8 <disk_write>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d006      	beq.n	8002ed0 <f_sync+0x5e>
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe f86e 	bl	8000fa8 <unlock_fs>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e055      	b.n	8002f7c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	7d1b      	ldrb	r3, [r3, #20]
 8002ed4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8002ede:	f00f f9c1 	bl	8012264 <get_fattime>
 8002ee2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	4619      	mov	r1, r3
 8002eec:	4610      	mov	r0, r2
 8002eee:	f7fe fa27 	bl	8001340 <move_window>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8002ef6:	7dfb      	ldrb	r3, [r7, #23]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d138      	bne.n	8002f6e <f_sync+0xfc>
					dir = fp->dir_ptr;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f00:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	330b      	adds	r3, #11
 8002f06:	781a      	ldrb	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	330b      	adds	r3, #11
 8002f0c:	f042 0220 	orr.w	r2, r2, #32
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	68f9      	ldr	r1, [r7, #12]
 8002f20:	f7fe ff31 	bl	8001d86 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f103 021c 	add.w	r2, r3, #28
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4610      	mov	r0, r2
 8002f32:	f7fd ff79 	bl	8000e28 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3316      	adds	r3, #22
 8002f3a:	6939      	ldr	r1, [r7, #16]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fd ff73 	bl	8000e28 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3312      	adds	r3, #18
 8002f46:	2100      	movs	r1, #0
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fd ff52 	bl	8000df2 <st_word>
					fs->wflag = 1;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2201      	movs	r2, #1
 8002f52:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fe fa20 	bl	800139c <sync_fs>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	7d1b      	ldrb	r3, [r3, #20]
 8002f64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	7dfa      	ldrb	r2, [r7, #23]
 8002f72:	4611      	mov	r1, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fe f817 	bl	8000fa8 <unlock_fs>
 8002f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff ff70 	bl	8002e72 <f_sync>
 8002f92:	4603      	mov	r3, r0
 8002f94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d11d      	bne.n	8002fd8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f107 0208 	add.w	r2, r7, #8
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fb89 	bl	80026bc <validate>
 8002faa:	4603      	mov	r3, r0
 8002fac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d111      	bne.n	8002fd8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fe f91d 	bl	80011f8 <dec_lock>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d102      	bne.n	8002fce <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fd ffe8 	bl	8000fa8 <unlock_fs>
#endif
		}
	}
	return res;
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b090      	sub	sp, #64	@ 0x40
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f107 0208 	add.w	r2, r7, #8
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fb61 	bl	80026bc <validate>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8003000:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003004:	2b00      	cmp	r3, #0
 8003006:	d103      	bne.n	8003010 <f_lseek+0x2e>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	7d5b      	ldrb	r3, [r3, #21]
 800300c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8003010:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003014:	2b00      	cmp	r3, #0
 8003016:	d009      	beq.n	800302c <f_lseek+0x4a>
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800301e:	4611      	mov	r1, r2
 8003020:	4618      	mov	r0, r3
 8003022:	f7fd ffc1 	bl	8000fa8 <unlock_fs>
 8003026:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800302a:	e229      	b.n	8003480 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80ea 	beq.w	800320a <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303c:	d164      	bne.n	8003108 <f_lseek+0x126>
			tbl = fp->cltbl;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003042:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8003044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003046:	1d1a      	adds	r2, r3, #4
 8003048:	627a      	str	r2, [r7, #36]	@ 0x24
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	2302      	movs	r3, #2
 8003050:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8003058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800305a:	2b00      	cmp	r3, #0
 800305c:	d044      	beq.n	80030e8 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800305e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	2300      	movs	r3, #0
 8003064:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003068:	3302      	adds	r3, #2
 800306a:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800306c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003072:	3301      	adds	r3, #1
 8003074:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe fa1b 	bl	80014b6 <get_fat>
 8003080:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8003082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003084:	2b01      	cmp	r3, #1
 8003086:	d809      	bhi.n	800309c <f_lseek+0xba>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	755a      	strb	r2, [r3, #21]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2102      	movs	r1, #2
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd ff88 	bl	8000fa8 <unlock_fs>
 8003098:	2302      	movs	r3, #2
 800309a:	e1f1      	b.n	8003480 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800309c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800309e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a2:	d109      	bne.n	80030b8 <f_lseek+0xd6>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	755a      	strb	r2, [r3, #21]
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2101      	movs	r1, #1
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fd ff7a 	bl	8000fa8 <unlock_fs>
 80030b4:	2301      	movs	r3, #1
 80030b6:	e1e3      	b.n	8003480 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	3301      	adds	r3, #1
 80030bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030be:	429a      	cmp	r2, r3
 80030c0:	d0d4      	beq.n	800306c <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80030c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d809      	bhi.n	80030de <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 80030ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030cc:	1d1a      	adds	r2, r3, #4
 80030ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80030d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d6:	1d1a      	adds	r2, r3, #4
 80030d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d3ba      	bcc.n	800305e <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030ee:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80030f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d803      	bhi.n	8003100 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 80030f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	e1b6      	b.n	800346e <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8003100:	2311      	movs	r3, #17
 8003102:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003106:	e1b2      	b.n	800346e <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d902      	bls.n	8003118 <f_lseek+0x136>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 81a4 	beq.w	800346e <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	3b01      	subs	r3, #1
 800312a:	4619      	mov	r1, r3
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7fe fc50 	bl	80019d2 <clmt_clust>
 8003132:	4602      	mov	r2, r0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	4619      	mov	r1, r3
 8003140:	4610      	mov	r0, r2
 8003142:	f7fe f999 	bl	8001478 <clust2sect>
 8003146:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <f_lseek+0x180>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2202      	movs	r2, #2
 8003152:	755a      	strb	r2, [r3, #21]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2102      	movs	r1, #2
 8003158:	4618      	mov	r0, r3
 800315a:	f7fd ff25 	bl	8000fa8 <unlock_fs>
 800315e:	2302      	movs	r3, #2
 8003160:	e18e      	b.n	8003480 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	3b01      	subs	r3, #1
 8003166:	0a5b      	lsrs	r3, r3, #9
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	8952      	ldrh	r2, [r2, #10]
 800316c:	3a01      	subs	r2, #1
 800316e:	4013      	ands	r3, r2
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4413      	add	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 8175 	beq.w	800346e <f_lseek+0x48c>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	429a      	cmp	r2, r3
 800318c:	f000 816f 	beq.w	800346e <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	7d1b      	ldrb	r3, [r3, #20]
 8003194:	b25b      	sxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	da1d      	bge.n	80031d6 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	7858      	ldrb	r0, [r3, #1]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1a      	ldr	r2, [r3, #32]
 80031a8:	2301      	movs	r3, #1
 80031aa:	f00f fb1d 	bl	80127e8 <disk_write>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d009      	beq.n	80031c8 <f_lseek+0x1e6>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	755a      	strb	r2, [r3, #21]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2101      	movs	r1, #1
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd fef2 	bl	8000fa8 <unlock_fs>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e15b      	b.n	8003480 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7d1b      	ldrb	r3, [r3, #20]
 80031cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	7858      	ldrb	r0, [r3, #1]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80031e0:	2301      	movs	r3, #1
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	f00f fae0 	bl	80127a8 <disk_read>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <f_lseek+0x220>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	755a      	strb	r2, [r3, #21]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2101      	movs	r1, #1
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fd fed5 	bl	8000fa8 <unlock_fs>
 80031fe:	2301      	movs	r3, #1
 8003200:	e13e      	b.n	8003480 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	621a      	str	r2, [r3, #32]
 8003208:	e131      	b.n	800346e <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d908      	bls.n	8003226 <f_lseek+0x244>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	7d1b      	ldrb	r3, [r3, #20]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003234:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80c0 	beq.w	80033be <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	895b      	ldrh	r3, [r3, #10]
 8003242:	025b      	lsls	r3, r3, #9
 8003244:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d01b      	beq.n	8003284 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	1e5a      	subs	r2, r3, #1
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	fbb2 f2f3 	udiv	r2, r2, r3
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	1e59      	subs	r1, r3, #1
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8003260:	429a      	cmp	r2, r3
 8003262:	d30f      	bcc.n	8003284 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	1e5a      	subs	r2, r3, #1
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	425b      	negs	r3, r3
 800326c:	401a      	ands	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003282:	e02c      	b.n	80032de <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800328a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328c:	2b00      	cmp	r3, #0
 800328e:	d123      	bne.n	80032d8 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2100      	movs	r1, #0
 8003294:	4618      	mov	r0, r3
 8003296:	f7fe fb04 	bl	80018a2 <create_chain>
 800329a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800329c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d109      	bne.n	80032b6 <f_lseek+0x2d4>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2202      	movs	r2, #2
 80032a6:	755a      	strb	r2, [r3, #21]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2102      	movs	r1, #2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fd fe7b 	bl	8000fa8 <unlock_fs>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e0e4      	b.n	8003480 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80032b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d109      	bne.n	80032d2 <f_lseek+0x2f0>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	755a      	strb	r2, [r3, #21]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2101      	movs	r1, #1
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fd fe6d 	bl	8000fa8 <unlock_fs>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e0d6      	b.n	8003480 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80032d6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80032dc:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80032de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d06c      	beq.n	80033be <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 80032e4:	e044      	b.n	8003370 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	603b      	str	r3, [r7, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699a      	ldr	r2, [r3, #24]
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	441a      	add	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	7d1b      	ldrb	r3, [r3, #20]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00b      	beq.n	800331e <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800330a:	4618      	mov	r0, r3
 800330c:	f7fe fac9 	bl	80018a2 <create_chain>
 8003310:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8003312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003314:	2b00      	cmp	r3, #0
 8003316:	d108      	bne.n	800332a <f_lseek+0x348>
							ofs = 0; break;
 8003318:	2300      	movs	r3, #0
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	e02c      	b.n	8003378 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003322:	4618      	mov	r0, r3
 8003324:	f7fe f8c7 	bl	80014b6 <get_fat>
 8003328:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800332a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800332c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003330:	d109      	bne.n	8003346 <f_lseek+0x364>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	755a      	strb	r2, [r3, #21]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2101      	movs	r1, #1
 800333c:	4618      	mov	r0, r3
 800333e:	f7fd fe33 	bl	8000fa8 <unlock_fs>
 8003342:	2301      	movs	r3, #1
 8003344:	e09c      	b.n	8003480 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8003346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003348:	2b01      	cmp	r3, #1
 800334a:	d904      	bls.n	8003356 <f_lseek+0x374>
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003352:	429a      	cmp	r2, r3
 8003354:	d309      	bcc.n	800336a <f_lseek+0x388>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2202      	movs	r2, #2
 800335a:	755a      	strb	r2, [r3, #21]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2102      	movs	r1, #2
 8003360:	4618      	mov	r0, r3
 8003362:	f7fd fe21 	bl	8000fa8 <unlock_fs>
 8003366:	2302      	movs	r3, #2
 8003368:	e08a      	b.n	8003480 <f_lseek+0x49e>
					fp->clust = clst;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800336e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	429a      	cmp	r2, r3
 8003376:	d8b6      	bhi.n	80032e6 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699a      	ldr	r2, [r3, #24]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	441a      	add	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800338a:	2b00      	cmp	r3, #0
 800338c:	d017      	beq.n	80033be <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003392:	4618      	mov	r0, r3
 8003394:	f7fe f870 	bl	8001478 <clust2sect>
 8003398:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800339a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800339c:	2b00      	cmp	r3, #0
 800339e:	d109      	bne.n	80033b4 <f_lseek+0x3d2>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	755a      	strb	r2, [r3, #21]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2102      	movs	r1, #2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd fdfc 	bl	8000fa8 <unlock_fs>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e065      	b.n	8003480 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	0a5b      	lsrs	r3, r3, #9
 80033b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033ba:	4413      	add	r3, r2
 80033bc:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d90a      	bls.n	80033e0 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699a      	ldr	r2, [r3, #24]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	7d1b      	ldrb	r3, [r3, #20]
 80033d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d040      	beq.n	800346e <f_lseek+0x48c>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d03b      	beq.n	800346e <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	7d1b      	ldrb	r3, [r3, #20]
 80033fa:	b25b      	sxtb	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	da1d      	bge.n	800343c <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	7858      	ldrb	r0, [r3, #1]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1a      	ldr	r2, [r3, #32]
 800340e:	2301      	movs	r3, #1
 8003410:	f00f f9ea 	bl	80127e8 <disk_write>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d009      	beq.n	800342e <f_lseek+0x44c>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	755a      	strb	r2, [r3, #21]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2101      	movs	r1, #1
 8003424:	4618      	mov	r0, r3
 8003426:	f7fd fdbf 	bl	8000fa8 <unlock_fs>
 800342a:	2301      	movs	r3, #1
 800342c:	e028      	b.n	8003480 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	7d1b      	ldrb	r3, [r3, #20]
 8003432:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003436:	b2da      	uxtb	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	7858      	ldrb	r0, [r3, #1]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003446:	2301      	movs	r3, #1
 8003448:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800344a:	f00f f9ad 	bl	80127a8 <disk_read>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d009      	beq.n	8003468 <f_lseek+0x486>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	755a      	strb	r2, [r3, #21]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2101      	movs	r1, #1
 800345e:	4618      	mov	r0, r3
 8003460:	f7fd fda2 	bl	8000fa8 <unlock_fs>
 8003464:	2301      	movs	r3, #1
 8003466:	e00b      	b.n	8003480 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800346c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8003474:	4611      	mov	r1, r2
 8003476:	4618      	mov	r0, r3
 8003478:	f7fd fd96 	bl	8000fa8 <unlock_fs>
 800347c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8003480:	4618      	mov	r0, r3
 8003482:	3740      	adds	r7, #64	@ 0x40
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800348c:	bf00      	nop
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80034b0:	bf00      	nop
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
	...

080034bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4a07      	ldr	r2, [pc, #28]	@ (80034e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80034cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	4a06      	ldr	r2, [pc, #24]	@ (80034ec <vApplicationGetIdleTaskMemory+0x30>)
 80034d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2280      	movs	r2, #128	@ 0x80
 80034d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80034da:	bf00      	nop
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	20000140 	.word	0x20000140
 80034ec:	200001e0 	.word	0x200001e0

080034f0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80034fa:	20c8      	movs	r0, #200	@ 0xc8
 80034fc:	f002 fee4 	bl	80062c8 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8003500:	f000 fa7a 	bl	80039f8 <ft5336_I2C_InitializeIfRequired>
}
 8003504:	bf00      	nop
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	4603      	mov	r3, r0
 800352a:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8003534:	2300      	movs	r3, #0
 8003536:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8003538:	f000 fa5e 	bl	80039f8 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800353c:	2300      	movs	r3, #0
 800353e:	73fb      	strb	r3, [r7, #15]
 8003540:	e010      	b.n	8003564 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8003542:	88fb      	ldrh	r3, [r7, #6]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	21a8      	movs	r1, #168	@ 0xa8
 8003548:	4618      	mov	r0, r3
 800354a:	f002 fe9f 	bl	800628c <TS_IO_Read>
 800354e:	4603      	mov	r3, r0
 8003550:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8003552:	7b7b      	ldrb	r3, [r7, #13]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b51      	cmp	r3, #81	@ 0x51
 8003558:	d101      	bne.n	800355e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800355a:	2301      	movs	r3, #1
 800355c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	3301      	adds	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d802      	bhi.n	8003570 <ft5336_ReadID+0x4e>
 800356a:	7bbb      	ldrb	r3, [r7, #14]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0e8      	beq.n	8003542 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8003570:	7b7b      	ldrb	r3, [r7, #13]
 8003572:	b2db      	uxtb	r3, r3
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fa45 	bl	8003a18 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 800358e:	88fb      	ldrh	r3, [r7, #6]
 8003590:	4618      	mov	r0, r3
 8003592:	f000 f933 	bl	80037fc <ft5336_TS_DisableIT>
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2102      	movs	r1, #2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f002 fe69 	bl	800628c <TS_IO_Read>
 80035ba:	4603      	mov	r3, r0
 80035bc:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b05      	cmp	r3, #5
 80035d0:	d901      	bls.n	80035d6 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	4b05      	ldr	r3, [pc, #20]	@ (80035f0 <ft5336_TS_DetectTouch+0x50>)
 80035dc:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80035de:	4b04      	ldr	r3, [pc, #16]	@ (80035f0 <ft5336_TS_DetectTouch+0x50>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	b2db      	uxtb	r3, r3
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	200003e0 	.word	0x200003e0

080035f4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8003602:	2300      	movs	r3, #0
 8003604:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8003606:	2300      	movs	r3, #0
 8003608:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800360a:	2300      	movs	r3, #0
 800360c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800360e:	2300      	movs	r3, #0
 8003610:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8003612:	2300      	movs	r3, #0
 8003614:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8003616:	4b6d      	ldr	r3, [pc, #436]	@ (80037cc <ft5336_TS_GetXY+0x1d8>)
 8003618:	789a      	ldrb	r2, [r3, #2]
 800361a:	4b6c      	ldr	r3, [pc, #432]	@ (80037cc <ft5336_TS_GetXY+0x1d8>)
 800361c:	785b      	ldrb	r3, [r3, #1]
 800361e:	429a      	cmp	r2, r3
 8003620:	f080 80cf 	bcs.w	80037c2 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8003624:	4b69      	ldr	r3, [pc, #420]	@ (80037cc <ft5336_TS_GetXY+0x1d8>)
 8003626:	789b      	ldrb	r3, [r3, #2]
 8003628:	2b09      	cmp	r3, #9
 800362a:	d871      	bhi.n	8003710 <ft5336_TS_GetXY+0x11c>
 800362c:	a201      	add	r2, pc, #4	@ (adr r2, 8003634 <ft5336_TS_GetXY+0x40>)
 800362e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003632:	bf00      	nop
 8003634:	0800365d 	.word	0x0800365d
 8003638:	0800366f 	.word	0x0800366f
 800363c:	08003681 	.word	0x08003681
 8003640:	08003693 	.word	0x08003693
 8003644:	080036a5 	.word	0x080036a5
 8003648:	080036b7 	.word	0x080036b7
 800364c:	080036c9 	.word	0x080036c9
 8003650:	080036db 	.word	0x080036db
 8003654:	080036ed 	.word	0x080036ed
 8003658:	080036ff 	.word	0x080036ff
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800365c:	2304      	movs	r3, #4
 800365e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8003660:	2303      	movs	r3, #3
 8003662:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8003664:	2306      	movs	r3, #6
 8003666:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8003668:	2305      	movs	r3, #5
 800366a:	753b      	strb	r3, [r7, #20]
      break;
 800366c:	e051      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800366e:	230a      	movs	r3, #10
 8003670:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8003672:	2309      	movs	r3, #9
 8003674:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8003676:	230c      	movs	r3, #12
 8003678:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800367a:	230b      	movs	r3, #11
 800367c:	753b      	strb	r3, [r7, #20]
      break;
 800367e:	e048      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8003680:	2310      	movs	r3, #16
 8003682:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8003684:	230f      	movs	r3, #15
 8003686:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8003688:	2312      	movs	r3, #18
 800368a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800368c:	2311      	movs	r3, #17
 800368e:	753b      	strb	r3, [r7, #20]
      break;
 8003690:	e03f      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8003692:	2316      	movs	r3, #22
 8003694:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8003696:	2315      	movs	r3, #21
 8003698:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800369a:	2318      	movs	r3, #24
 800369c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800369e:	2317      	movs	r3, #23
 80036a0:	753b      	strb	r3, [r7, #20]
      break;
 80036a2:	e036      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80036a4:	231c      	movs	r3, #28
 80036a6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80036a8:	231b      	movs	r3, #27
 80036aa:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80036ac:	231e      	movs	r3, #30
 80036ae:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80036b0:	231d      	movs	r3, #29
 80036b2:	753b      	strb	r3, [r7, #20]
      break;
 80036b4:	e02d      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80036b6:	2322      	movs	r3, #34	@ 0x22
 80036b8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80036ba:	2321      	movs	r3, #33	@ 0x21
 80036bc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80036be:	2324      	movs	r3, #36	@ 0x24
 80036c0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80036c2:	2323      	movs	r3, #35	@ 0x23
 80036c4:	753b      	strb	r3, [r7, #20]
      break;
 80036c6:	e024      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80036c8:	2328      	movs	r3, #40	@ 0x28
 80036ca:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80036cc:	2327      	movs	r3, #39	@ 0x27
 80036ce:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80036d0:	232a      	movs	r3, #42	@ 0x2a
 80036d2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80036d4:	2329      	movs	r3, #41	@ 0x29
 80036d6:	753b      	strb	r3, [r7, #20]
      break;
 80036d8:	e01b      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80036da:	232e      	movs	r3, #46	@ 0x2e
 80036dc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80036de:	232d      	movs	r3, #45	@ 0x2d
 80036e0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80036e2:	2330      	movs	r3, #48	@ 0x30
 80036e4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80036e6:	232f      	movs	r3, #47	@ 0x2f
 80036e8:	753b      	strb	r3, [r7, #20]
      break;
 80036ea:	e012      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80036ec:	2334      	movs	r3, #52	@ 0x34
 80036ee:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80036f0:	2333      	movs	r3, #51	@ 0x33
 80036f2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80036f4:	2336      	movs	r3, #54	@ 0x36
 80036f6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80036f8:	2335      	movs	r3, #53	@ 0x35
 80036fa:	753b      	strb	r3, [r7, #20]
      break;
 80036fc:	e009      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80036fe:	233a      	movs	r3, #58	@ 0x3a
 8003700:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8003702:	2339      	movs	r3, #57	@ 0x39
 8003704:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8003706:	233c      	movs	r3, #60	@ 0x3c
 8003708:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800370a:	233b      	movs	r3, #59	@ 0x3b
 800370c:	753b      	strb	r3, [r7, #20]
      break;
 800370e:	e000      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8003710:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8003712:	89fb      	ldrh	r3, [r7, #14]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	7dfa      	ldrb	r2, [r7, #23]
 8003718:	4611      	mov	r1, r2
 800371a:	4618      	mov	r0, r3
 800371c:	f002 fdb6 	bl	800628c <TS_IO_Read>
 8003720:	4603      	mov	r3, r0
 8003722:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003724:	7cfb      	ldrb	r3, [r7, #19]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	461a      	mov	r2, r3
 800372a:	4b29      	ldr	r3, [pc, #164]	@ (80037d0 <ft5336_TS_GetXY+0x1dc>)
 800372c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800372e:	89fb      	ldrh	r3, [r7, #14]
 8003730:	b2db      	uxtb	r3, r3
 8003732:	7dba      	ldrb	r2, [r7, #22]
 8003734:	4611      	mov	r1, r2
 8003736:	4618      	mov	r0, r3
 8003738:	f002 fda8 	bl	800628c <TS_IO_Read>
 800373c:	4603      	mov	r3, r0
 800373e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	b2db      	uxtb	r3, r3
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800374a:	b21a      	sxth	r2, r3
 800374c:	4b20      	ldr	r3, [pc, #128]	@ (80037d0 <ft5336_TS_GetXY+0x1dc>)
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	b21b      	sxth	r3, r3
 8003752:	4313      	orrs	r3, r2
 8003754:	b21b      	sxth	r3, r3
 8003756:	b29a      	uxth	r2, r3
 8003758:	4b1d      	ldr	r3, [pc, #116]	@ (80037d0 <ft5336_TS_GetXY+0x1dc>)
 800375a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800375c:	4b1c      	ldr	r3, [pc, #112]	@ (80037d0 <ft5336_TS_GetXY+0x1dc>)
 800375e:	881a      	ldrh	r2, [r3, #0]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8003764:	89fb      	ldrh	r3, [r7, #14]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	7d7a      	ldrb	r2, [r7, #21]
 800376a:	4611      	mov	r1, r2
 800376c:	4618      	mov	r0, r3
 800376e:	f002 fd8d 	bl	800628c <TS_IO_Read>
 8003772:	4603      	mov	r3, r0
 8003774:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003776:	7cfb      	ldrb	r3, [r7, #19]
 8003778:	b2db      	uxtb	r3, r3
 800377a:	461a      	mov	r2, r3
 800377c:	4b14      	ldr	r3, [pc, #80]	@ (80037d0 <ft5336_TS_GetXY+0x1dc>)
 800377e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8003780:	89fb      	ldrh	r3, [r7, #14]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	7d3a      	ldrb	r2, [r7, #20]
 8003786:	4611      	mov	r1, r2
 8003788:	4618      	mov	r0, r3
 800378a:	f002 fd7f 	bl	800628c <TS_IO_Read>
 800378e:	4603      	mov	r3, r0
 8003790:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003792:	7cfb      	ldrb	r3, [r7, #19]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	021b      	lsls	r3, r3, #8
 8003798:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800379c:	b21a      	sxth	r2, r3
 800379e:	4b0c      	ldr	r3, [pc, #48]	@ (80037d0 <ft5336_TS_GetXY+0x1dc>)
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	b21b      	sxth	r3, r3
 80037a4:	4313      	orrs	r3, r2
 80037a6:	b21b      	sxth	r3, r3
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	4b09      	ldr	r3, [pc, #36]	@ (80037d0 <ft5336_TS_GetXY+0x1dc>)
 80037ac:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80037ae:	4b08      	ldr	r3, [pc, #32]	@ (80037d0 <ft5336_TS_GetXY+0x1dc>)
 80037b0:	881a      	ldrh	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80037b6:	4b05      	ldr	r3, [pc, #20]	@ (80037cc <ft5336_TS_GetXY+0x1d8>)
 80037b8:	789b      	ldrb	r3, [r3, #2]
 80037ba:	3301      	adds	r3, #1
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	4b03      	ldr	r3, [pc, #12]	@ (80037cc <ft5336_TS_GetXY+0x1d8>)
 80037c0:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80037c2:	bf00      	nop
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	200003e0 	.word	0x200003e0
 80037d0:	200003e4 	.word	0x200003e4

080037d4 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80037de:	2300      	movs	r3, #0
 80037e0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80037e2:	2301      	movs	r3, #1
 80037e4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	7bfa      	ldrb	r2, [r7, #15]
 80037ec:	21a4      	movs	r1, #164	@ 0xa4
 80037ee:	4618      	mov	r0, r3
 80037f0:	f002 fd32 	bl	8006258 <TS_IO_Write>
}
 80037f4:	bf00      	nop
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8003806:	2300      	movs	r3, #0
 8003808:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800380a:	2300      	movs	r3, #0
 800380c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	b2db      	uxtb	r3, r3
 8003812:	7bfa      	ldrb	r2, [r7, #15]
 8003814:	21a4      	movs	r1, #164	@ 0xa4
 8003816:	4618      	mov	r0, r3
 8003818:	f002 fd1e 	bl	8006258 <TS_IO_Write>
}
 800381c:	bf00      	nop
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b084      	sub	sp, #16
 8003856:	af00      	add	r7, sp, #0
 8003858:	4603      	mov	r3, r0
 800385a:	6039      	str	r1, [r7, #0]
 800385c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800385e:	2300      	movs	r3, #0
 8003860:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2101      	movs	r1, #1
 8003868:	4618      	mov	r0, r3
 800386a:	f002 fd0f 	bl	800628c <TS_IO_Read>
 800386e:	4603      	mov	r3, r0
 8003870:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	461a      	mov	r2, r3
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	601a      	str	r2, [r3, #0]
}
 800387c:	bf00      	nop
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	4603      	mov	r3, r0
 8003892:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80038a4:	4b4d      	ldr	r3, [pc, #308]	@ (80039dc <ft5336_TS_GetTouchInfo+0x158>)
 80038a6:	785b      	ldrb	r3, [r3, #1]
 80038a8:	461a      	mov	r2, r3
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	4293      	cmp	r3, r2
 80038ae:	f080 8090 	bcs.w	80039d2 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b09      	cmp	r3, #9
 80038b6:	d85d      	bhi.n	8003974 <ft5336_TS_GetTouchInfo+0xf0>
 80038b8:	a201      	add	r2, pc, #4	@ (adr r2, 80038c0 <ft5336_TS_GetTouchInfo+0x3c>)
 80038ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038be:	bf00      	nop
 80038c0:	080038e9 	.word	0x080038e9
 80038c4:	080038f7 	.word	0x080038f7
 80038c8:	08003905 	.word	0x08003905
 80038cc:	08003913 	.word	0x08003913
 80038d0:	08003921 	.word	0x08003921
 80038d4:	0800392f 	.word	0x0800392f
 80038d8:	0800393d 	.word	0x0800393d
 80038dc:	0800394b 	.word	0x0800394b
 80038e0:	08003959 	.word	0x08003959
 80038e4:	08003967 	.word	0x08003967
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80038e8:	2303      	movs	r3, #3
 80038ea:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80038ec:	2307      	movs	r3, #7
 80038ee:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80038f0:	2308      	movs	r3, #8
 80038f2:	757b      	strb	r3, [r7, #21]
      break;
 80038f4:	e03f      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80038f6:	2309      	movs	r3, #9
 80038f8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80038fa:	230d      	movs	r3, #13
 80038fc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80038fe:	230e      	movs	r3, #14
 8003900:	757b      	strb	r3, [r7, #21]
      break;
 8003902:	e038      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8003904:	230f      	movs	r3, #15
 8003906:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8003908:	2313      	movs	r3, #19
 800390a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 800390c:	2314      	movs	r3, #20
 800390e:	757b      	strb	r3, [r7, #21]
      break;
 8003910:	e031      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8003912:	2315      	movs	r3, #21
 8003914:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8003916:	2319      	movs	r3, #25
 8003918:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 800391a:	231a      	movs	r3, #26
 800391c:	757b      	strb	r3, [r7, #21]
      break;
 800391e:	e02a      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8003920:	231b      	movs	r3, #27
 8003922:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8003924:	231f      	movs	r3, #31
 8003926:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8003928:	2320      	movs	r3, #32
 800392a:	757b      	strb	r3, [r7, #21]
      break;
 800392c:	e023      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800392e:	2321      	movs	r3, #33	@ 0x21
 8003930:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8003932:	2325      	movs	r3, #37	@ 0x25
 8003934:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8003936:	2326      	movs	r3, #38	@ 0x26
 8003938:	757b      	strb	r3, [r7, #21]
      break;
 800393a:	e01c      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 800393c:	2327      	movs	r3, #39	@ 0x27
 800393e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8003940:	232b      	movs	r3, #43	@ 0x2b
 8003942:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8003944:	232c      	movs	r3, #44	@ 0x2c
 8003946:	757b      	strb	r3, [r7, #21]
      break;
 8003948:	e015      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 800394a:	232d      	movs	r3, #45	@ 0x2d
 800394c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800394e:	2331      	movs	r3, #49	@ 0x31
 8003950:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8003952:	2332      	movs	r3, #50	@ 0x32
 8003954:	757b      	strb	r3, [r7, #21]
      break;
 8003956:	e00e      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8003958:	2333      	movs	r3, #51	@ 0x33
 800395a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 800395c:	2337      	movs	r3, #55	@ 0x37
 800395e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8003960:	2338      	movs	r3, #56	@ 0x38
 8003962:	757b      	strb	r3, [r7, #21]
      break;
 8003964:	e007      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8003966:	2339      	movs	r3, #57	@ 0x39
 8003968:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 800396a:	233d      	movs	r3, #61	@ 0x3d
 800396c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 800396e:	233e      	movs	r3, #62	@ 0x3e
 8003970:	757b      	strb	r3, [r7, #21]
      break;
 8003972:	e000      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8003974:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8003976:	89fb      	ldrh	r3, [r7, #14]
 8003978:	b2db      	uxtb	r3, r3
 800397a:	7dfa      	ldrb	r2, [r7, #23]
 800397c:	4611      	mov	r1, r2
 800397e:	4618      	mov	r0, r3
 8003980:	f002 fc84 	bl	800628c <TS_IO_Read>
 8003984:	4603      	mov	r3, r0
 8003986:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8003988:	7d3b      	ldrb	r3, [r7, #20]
 800398a:	b2db      	uxtb	r3, r3
 800398c:	119b      	asrs	r3, r3, #6
 800398e:	f003 0203 	and.w	r2, r3, #3
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8003996:	89fb      	ldrh	r3, [r7, #14]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	7dba      	ldrb	r2, [r7, #22]
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f002 fc74 	bl	800628c <TS_IO_Read>
 80039a4:	4603      	mov	r3, r0
 80039a6:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80039a8:	7d3b      	ldrb	r3, [r7, #20]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80039b2:	89fb      	ldrh	r3, [r7, #14]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	7d7a      	ldrb	r2, [r7, #21]
 80039b8:	4611      	mov	r1, r2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f002 fc66 	bl	800628c <TS_IO_Read>
 80039c0:	4603      	mov	r3, r0
 80039c2:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80039c4:	7d3b      	ldrb	r3, [r7, #20]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	111b      	asrs	r3, r3, #4
 80039ca:	f003 0204 	and.w	r2, r3, #4
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 80039d2:	bf00      	nop
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	200003e0 	.word	0x200003e0

080039e0 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80039e4:	4b03      	ldr	r3, [pc, #12]	@ (80039f4 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	200003e0 	.word	0x200003e0

080039f8 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80039fc:	f7ff fff0 	bl	80039e0 <ft5336_Get_I2C_InitializedStatus>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d104      	bne.n	8003a10 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8003a06:	f002 fc1d 	bl	8006244 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8003a0a:	4b02      	ldr	r3, [pc, #8]	@ (8003a14 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	701a      	strb	r2, [r3, #0]
  }
}
 8003a10:	bf00      	nop
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	200003e0 	.word	0x200003e0

08003a18 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8003a26:	68fb      	ldr	r3, [r7, #12]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003a38:	f3bf 8f4f 	dsb	sy
}
 8003a3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a3e:	f3bf 8f6f 	isb	sy
}
 8003a42:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003a44:	4b0d      	ldr	r3, [pc, #52]	@ (8003a7c <SCB_EnableICache+0x48>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003a4c:	f3bf 8f4f 	dsb	sy
}
 8003a50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a52:	f3bf 8f6f 	isb	sy
}
 8003a56:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003a58:	4b08      	ldr	r3, [pc, #32]	@ (8003a7c <SCB_EnableICache+0x48>)
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	4a07      	ldr	r2, [pc, #28]	@ (8003a7c <SCB_EnableICache+0x48>)
 8003a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a64:	f3bf 8f4f 	dsb	sy
}
 8003a68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a6a:	f3bf 8f6f 	isb	sy
}
 8003a6e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	e000ed00 	.word	0xe000ed00

08003a80 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003a86:	4b1f      	ldr	r3, [pc, #124]	@ (8003b04 <SCB_EnableDCache+0x84>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003a8e:	f3bf 8f4f 	dsb	sy
}
 8003a92:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003a94:	4b1b      	ldr	r3, [pc, #108]	@ (8003b04 <SCB_EnableDCache+0x84>)
 8003a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a9a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	0b5b      	lsrs	r3, r3, #13
 8003aa0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003aa4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	08db      	lsrs	r3, r3, #3
 8003aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aae:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8003ab8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003abe:	4911      	ldr	r1, [pc, #68]	@ (8003b04 <SCB_EnableDCache+0x84>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	1e5a      	subs	r2, r3, #1
 8003aca:	60ba      	str	r2, [r7, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1ef      	bne.n	8003ab0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1e5a      	subs	r2, r3, #1
 8003ad4:	60fa      	str	r2, [r7, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e5      	bne.n	8003aa6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8003ada:	f3bf 8f4f 	dsb	sy
}
 8003ade:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003ae0:	4b08      	ldr	r3, [pc, #32]	@ (8003b04 <SCB_EnableDCache+0x84>)
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	4a07      	ldr	r2, [pc, #28]	@ (8003b04 <SCB_EnableDCache+0x84>)
 8003ae6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003aec:	f3bf 8f4f 	dsb	sy
}
 8003af0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003af2:	f3bf 8f6f 	isb	sy
}
 8003af6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8003af8:	bf00      	nop
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	e000ed00 	.word	0xe000ed00

08003b08 <whatBodyPart>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
enum BodyPart whatBodyPart(uint8_t frontX, uint8_t frontY, uint8_t backX, uint8_t backY, uint8_t missingX, uint8_t missingY)
{
 8003b08:	b490      	push	{r4, r7}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	4604      	mov	r4, r0
 8003b10:	4608      	mov	r0, r1
 8003b12:	4611      	mov	r1, r2
 8003b14:	461a      	mov	r2, r3
 8003b16:	4623      	mov	r3, r4
 8003b18:	71fb      	strb	r3, [r7, #7]
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	71bb      	strb	r3, [r7, #6]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	717b      	strb	r3, [r7, #5]
 8003b22:	4613      	mov	r3, r2
 8003b24:	713b      	strb	r3, [r7, #4]
	/*
	  . F .
	  . X .
	  . B .
	*/
	if (frontX == backX)
 8003b26:	79fa      	ldrb	r2, [r7, #7]
 8003b28:	797b      	ldrb	r3, [r7, #5]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d101      	bne.n	8003b32 <whatBodyPart+0x2a>
		return BottomTop;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e046      	b.n	8003bc0 <whatBodyPart+0xb8>
	/*
	  . . .
	  F X B
	  . . .
	*/
	if (frontY == backY)
 8003b32:	79ba      	ldrb	r2, [r7, #6]
 8003b34:	793b      	ldrb	r3, [r7, #4]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d101      	bne.n	8003b3e <whatBodyPart+0x36>
		return LeftRight;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e040      	b.n	8003bc0 <whatBodyPart+0xb8>
	/*
	  . B .       . . .
	  F X .       . X B
	  . . .       . F .
	*/
	if (frontX < backX && frontY > backY)
 8003b3e:	79fa      	ldrb	r2, [r7, #7]
 8003b40:	797b      	ldrb	r3, [r7, #5]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d20b      	bcs.n	8003b5e <whatBodyPart+0x56>
 8003b46:	79ba      	ldrb	r2, [r7, #6]
 8003b48:	793b      	ldrb	r3, [r7, #4]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d907      	bls.n	8003b5e <whatBodyPart+0x56>
	{
		if (missingX == frontX)
 8003b4e:	7c3a      	ldrb	r2, [r7, #16]
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d101      	bne.n	8003b5a <whatBodyPart+0x52>
			return BottomRight;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e032      	b.n	8003bc0 <whatBodyPart+0xb8>
		else
			return LeftTop;
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	e030      	b.n	8003bc0 <whatBodyPart+0xb8>
	/*
	  . . .       . F .
	  F X .       . X B
	  . B .       . . .
	*/
	if (frontX < backX && frontY < backY)
 8003b5e:	79fa      	ldrb	r2, [r7, #7]
 8003b60:	797b      	ldrb	r3, [r7, #5]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d20b      	bcs.n	8003b7e <whatBodyPart+0x76>
 8003b66:	79ba      	ldrb	r2, [r7, #6]
 8003b68:	793b      	ldrb	r3, [r7, #4]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d207      	bcs.n	8003b7e <whatBodyPart+0x76>
	{
		if (missingX == frontX)
 8003b6e:	7c3a      	ldrb	r2, [r7, #16]
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d101      	bne.n	8003b7a <whatBodyPart+0x72>
			return RightTop;
 8003b76:	2305      	movs	r3, #5
 8003b78:	e022      	b.n	8003bc0 <whatBodyPart+0xb8>
		else
			return BottomLeft;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e020      	b.n	8003bc0 <whatBodyPart+0xb8>
	/*
	  . . .       . F .
	  . X F       B X .
	  . B .       . . .
	*/
	if (frontX > backX && frontY < backY)
 8003b7e:	79fa      	ldrb	r2, [r7, #7]
 8003b80:	797b      	ldrb	r3, [r7, #5]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d90b      	bls.n	8003b9e <whatBodyPart+0x96>
 8003b86:	79ba      	ldrb	r2, [r7, #6]
 8003b88:	793b      	ldrb	r3, [r7, #4]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d207      	bcs.n	8003b9e <whatBodyPart+0x96>
	{
		if (missingX == frontX)
 8003b8e:	7c3a      	ldrb	r2, [r7, #16]
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d101      	bne.n	8003b9a <whatBodyPart+0x92>
			return LeftTop;
 8003b96:	2304      	movs	r3, #4
 8003b98:	e012      	b.n	8003bc0 <whatBodyPart+0xb8>
		else
			return BottomRight;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e010      	b.n	8003bc0 <whatBodyPart+0xb8>
	/*
	  . B .       . . .
	  . X F       B X .
	  . . .       . F .
	*/
	if (frontX > backX && frontY > backY)
 8003b9e:	79fa      	ldrb	r2, [r7, #7]
 8003ba0:	797b      	ldrb	r3, [r7, #5]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d90b      	bls.n	8003bbe <whatBodyPart+0xb6>
 8003ba6:	79ba      	ldrb	r2, [r7, #6]
 8003ba8:	793b      	ldrb	r3, [r7, #4]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d907      	bls.n	8003bbe <whatBodyPart+0xb6>
	{
		if (missingX == frontX)
 8003bae:	7c3a      	ldrb	r2, [r7, #16]
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d101      	bne.n	8003bba <whatBodyPart+0xb2>
			return BottomLeft;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e002      	b.n	8003bc0 <whatBodyPart+0xb8>
		else
			return RightTop;
 8003bba:	2305      	movs	r3, #5
 8003bbc:	e000      	b.n	8003bc0 <whatBodyPart+0xb8>
	}

	return BottomTop; // ne devrait jamais arriver
 8003bbe:	2302      	movs	r3, #2
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc90      	pop	{r4, r7}
 8003bc8:	4770      	bx	lr
	...

08003bcc <isSnakePosition>:

uint8_t isSnakePosition(uint8_t x, uint8_t y)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	460a      	mov	r2, r1
 8003bd6:	71fb      	strb	r3, [r7, #7]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	71bb      	strb	r3, [r7, #6]
	if (x == snakeHeadPosition[0] && y == snakeHeadPosition[1])
 8003bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8003c54 <isSnakePosition+0x88>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	79fa      	ldrb	r2, [r7, #7]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d106      	bne.n	8003bf4 <isSnakePosition+0x28>
 8003be6:	4b1b      	ldr	r3, [pc, #108]	@ (8003c54 <isSnakePosition+0x88>)
 8003be8:	785b      	ldrb	r3, [r3, #1]
 8003bea:	79ba      	ldrb	r2, [r7, #6]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d101      	bne.n	8003bf4 <isSnakePosition+0x28>
		return 1;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e029      	b.n	8003c48 <isSnakePosition+0x7c>

	for (int i = 0; i < snakeSize; i++)
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	e013      	b.n	8003c22 <isSnakePosition+0x56>
	{
		if (x == snakeBodyPosition[i][0] && y == snakeBodyPosition[i][1])
 8003bfa:	4a17      	ldr	r2, [pc, #92]	@ (8003c58 <isSnakePosition+0x8c>)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003c02:	79fa      	ldrb	r2, [r7, #7]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d109      	bne.n	8003c1c <isSnakePosition+0x50>
 8003c08:	4a13      	ldr	r2, [pc, #76]	@ (8003c58 <isSnakePosition+0x8c>)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	4413      	add	r3, r2
 8003c10:	785b      	ldrb	r3, [r3, #1]
 8003c12:	79ba      	ldrb	r2, [r7, #6]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d101      	bne.n	8003c1c <isSnakePosition+0x50>
			return 1;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e015      	b.n	8003c48 <isSnakePosition+0x7c>
	for (int i = 0; i < snakeSize; i++)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	4b0e      	ldr	r3, [pc, #56]	@ (8003c5c <isSnakePosition+0x90>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	dbe5      	blt.n	8003bfa <isSnakePosition+0x2e>
	}

	if (x == snakeTailPosition[0] && y == snakeTailPosition[1])
 8003c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c60 <isSnakePosition+0x94>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	79fa      	ldrb	r2, [r7, #7]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d106      	bne.n	8003c46 <isSnakePosition+0x7a>
 8003c38:	4b09      	ldr	r3, [pc, #36]	@ (8003c60 <isSnakePosition+0x94>)
 8003c3a:	785b      	ldrb	r3, [r3, #1]
 8003c3c:	79ba      	ldrb	r2, [r7, #6]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d101      	bne.n	8003c46 <isSnakePosition+0x7a>
		return 1;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <isSnakePosition+0x7c>

	return 0;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	20000038 	.word	0x20000038
 8003c58:	20000ab8 	.word	0x20000ab8
 8003c5c:	20000aa4 	.word	0x20000aa4
 8003c60:	2000003c 	.word	0x2000003c

08003c64 <isApplePosition>:

uint8_t isApplePosition(uint8_t x, uint8_t y, uint8_t appleIndex)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	71fb      	strb	r3, [r7, #7]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	71bb      	strb	r3, [r7, #6]
 8003c72:	4613      	mov	r3, r2
 8003c74:	717b      	strb	r3, [r7, #5]
	for (int i = 0; i < NB_APPLES; i++)
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	e019      	b.n	8003cb0 <isApplePosition+0x4c>
	{
		if (i == appleIndex)
 8003c7c:	797b      	ldrb	r3, [r7, #5]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d011      	beq.n	8003ca8 <isApplePosition+0x44>
			continue;

		if (x == applePosition[i][0] && y == applePosition[i][1])
 8003c84:	79fb      	ldrb	r3, [r7, #7]
 8003c86:	490f      	ldr	r1, [pc, #60]	@ (8003cc4 <isApplePosition+0x60>)
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	f911 2012 	ldrsb.w	r2, [r1, r2, lsl #1]
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d10b      	bne.n	8003caa <isApplePosition+0x46>
 8003c92:	79ba      	ldrb	r2, [r7, #6]
 8003c94:	490b      	ldr	r1, [pc, #44]	@ (8003cc4 <isApplePosition+0x60>)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	440b      	add	r3, r1
 8003c9c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d102      	bne.n	8003caa <isApplePosition+0x46>
			return 1;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e007      	b.n	8003cb8 <isApplePosition+0x54>
			continue;
 8003ca8:	bf00      	nop
	for (int i = 0; i < NB_APPLES; i++)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3301      	adds	r3, #1
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	dde2      	ble.n	8003c7c <isApplePosition+0x18>
	}

	return 0;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	20000bac 	.word	0x20000bac

08003cc8 <updateJoystickDirection>:

void updateJoystickDirection()
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8003cce:	463b      	mov	r3, r7
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	605a      	str	r2, [r3, #4]
 8003cd6:	609a      	str	r2, [r3, #8]
 8003cd8:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60bb      	str	r3, [r7, #8]
	sConfig.Channel = ADC_CHANNEL_8;
 8003ce2:	2308      	movs	r3, #8
 8003ce4:	603b      	str	r3, [r7, #0]

	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8003ce6:	463b      	mov	r3, r7
 8003ce8:	4619      	mov	r1, r3
 8003cea:	482f      	ldr	r0, [pc, #188]	@ (8003da8 <updateJoystickDirection+0xe0>)
 8003cec:	f006 ff12 	bl	800ab14 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc3);
 8003cf0:	482d      	ldr	r0, [pc, #180]	@ (8003da8 <updateJoystickDirection+0xe0>)
 8003cf2:	f006 fda9 	bl	800a848 <HAL_ADC_Start>
	while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 8003cf6:	bf00      	nop
 8003cf8:	2164      	movs	r1, #100	@ 0x64
 8003cfa:	482b      	ldr	r0, [pc, #172]	@ (8003da8 <updateJoystickDirection+0xe0>)
 8003cfc:	f006 fe72 	bl	800a9e4 <HAL_ADC_PollForConversion>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f8      	bne.n	8003cf8 <updateJoystickDirection+0x30>
		;
	joystick_v = HAL_ADC_GetValue(&hadc3);
 8003d06:	4828      	ldr	r0, [pc, #160]	@ (8003da8 <updateJoystickDirection+0xe0>)
 8003d08:	f006 fef7 	bl	800aafa <HAL_ADC_GetValue>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	4a27      	ldr	r2, [pc, #156]	@ (8003dac <updateJoystickDirection+0xe4>)
 8003d10:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start(&hadc1);
 8003d12:	4827      	ldr	r0, [pc, #156]	@ (8003db0 <updateJoystickDirection+0xe8>)
 8003d14:	f006 fd98 	bl	800a848 <HAL_ADC_Start>
	while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8003d18:	bf00      	nop
 8003d1a:	2164      	movs	r1, #100	@ 0x64
 8003d1c:	4824      	ldr	r0, [pc, #144]	@ (8003db0 <updateJoystickDirection+0xe8>)
 8003d1e:	f006 fe61 	bl	800a9e4 <HAL_ADC_PollForConversion>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f8      	bne.n	8003d1a <updateJoystickDirection+0x52>
		;
	joystick_h = HAL_ADC_GetValue(&hadc1);
 8003d28:	4821      	ldr	r0, [pc, #132]	@ (8003db0 <updateJoystickDirection+0xe8>)
 8003d2a:	f006 fee6 	bl	800aafa <HAL_ADC_GetValue>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	4a20      	ldr	r2, [pc, #128]	@ (8003db4 <updateJoystickDirection+0xec>)
 8003d32:	6013      	str	r3, [r2, #0]

	// On actualise la direction du snake
	if (joystick_v < 1000 && headPart != HeadTop)
 8003d34:	4b1d      	ldr	r3, [pc, #116]	@ (8003dac <updateJoystickDirection+0xe4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d3c:	d207      	bcs.n	8003d4e <updateJoystickDirection+0x86>
 8003d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003db8 <updateJoystickDirection+0xf0>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <updateJoystickDirection+0x86>
	{
		direction = Down;
 8003d46:	4b1d      	ldr	r3, [pc, #116]	@ (8003dbc <updateJoystickDirection+0xf4>)
 8003d48:	2201      	movs	r2, #1
 8003d4a:	701a      	strb	r2, [r3, #0]
 8003d4c:	e028      	b.n	8003da0 <updateJoystickDirection+0xd8>
	}
	else if (joystick_v > 3000 && headPart != HeadBottom)
 8003d4e:	4b17      	ldr	r3, [pc, #92]	@ (8003dac <updateJoystickDirection+0xe4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d907      	bls.n	8003d6a <updateJoystickDirection+0xa2>
 8003d5a:	4b17      	ldr	r3, [pc, #92]	@ (8003db8 <updateJoystickDirection+0xf0>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d003      	beq.n	8003d6a <updateJoystickDirection+0xa2>
	{
		direction = Up;
 8003d62:	4b16      	ldr	r3, [pc, #88]	@ (8003dbc <updateJoystickDirection+0xf4>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	701a      	strb	r2, [r3, #0]
 8003d68:	e01a      	b.n	8003da0 <updateJoystickDirection+0xd8>
	}
	else if (joystick_h < 1000 && headPart != HeadLeft)
 8003d6a:	4b12      	ldr	r3, [pc, #72]	@ (8003db4 <updateJoystickDirection+0xec>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d72:	d207      	bcs.n	8003d84 <updateJoystickDirection+0xbc>
 8003d74:	4b10      	ldr	r3, [pc, #64]	@ (8003db8 <updateJoystickDirection+0xf0>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d003      	beq.n	8003d84 <updateJoystickDirection+0xbc>
	{
		direction = Right;
 8003d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003dbc <updateJoystickDirection+0xf4>)
 8003d7e:	2203      	movs	r2, #3
 8003d80:	701a      	strb	r2, [r3, #0]
 8003d82:	e00d      	b.n	8003da0 <updateJoystickDirection+0xd8>
	}
	else if (joystick_h > 3000 && headPart != HeadRight)
 8003d84:	4b0b      	ldr	r3, [pc, #44]	@ (8003db4 <updateJoystickDirection+0xec>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d907      	bls.n	8003da0 <updateJoystickDirection+0xd8>
 8003d90:	4b09      	ldr	r3, [pc, #36]	@ (8003db8 <updateJoystickDirection+0xf0>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d003      	beq.n	8003da0 <updateJoystickDirection+0xd8>
	{
		direction = Left;
 8003d98:	4b08      	ldr	r3, [pc, #32]	@ (8003dbc <updateJoystickDirection+0xf4>)
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	701a      	strb	r2, [r3, #0]
	}
}
 8003d9e:	e7ff      	b.n	8003da0 <updateJoystickDirection+0xd8>
 8003da0:	bf00      	nop
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000430 	.word	0x20000430
 8003dac:	20000a20 	.word	0x20000a20
 8003db0:	200003e8 	.word	0x200003e8
 8003db4:	20000a24 	.word	0x20000a24
 8003db8:	20000a29 	.word	0x20000a29
 8003dbc:	20000a28 	.word	0x20000a28

08003dc0 <restartGame>:

void restartGame()
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
	gameOver = 0;
 8003dc6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ec0 <restartGame+0x100>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
	lastMove = 1;
 8003dcc:	4b3d      	ldr	r3, [pc, #244]	@ (8003ec4 <restartGame+0x104>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]
	snakeSize = 0;
 8003dd2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ec8 <restartGame+0x108>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	701a      	strb	r2, [r3, #0]
	speed = initSpeed;
 8003dd8:	2202      	movs	r2, #2
 8003dda:	4b3c      	ldr	r3, [pc, #240]	@ (8003ecc <restartGame+0x10c>)
 8003ddc:	701a      	strb	r2, [r3, #0]
	snakeHeadPosition[0] = 7;
 8003dde:	4b3c      	ldr	r3, [pc, #240]	@ (8003ed0 <restartGame+0x110>)
 8003de0:	2207      	movs	r2, #7
 8003de2:	701a      	strb	r2, [r3, #0]
	snakeHeadPosition[1] = 6;
 8003de4:	4b3a      	ldr	r3, [pc, #232]	@ (8003ed0 <restartGame+0x110>)
 8003de6:	2206      	movs	r2, #6
 8003de8:	705a      	strb	r2, [r3, #1]
	snakeTailPosition[0] = 7;
 8003dea:	4b3a      	ldr	r3, [pc, #232]	@ (8003ed4 <restartGame+0x114>)
 8003dec:	2207      	movs	r2, #7
 8003dee:	701a      	strb	r2, [r3, #0]
	snakeTailPosition[1] = 7;
 8003df0:	4b38      	ldr	r3, [pc, #224]	@ (8003ed4 <restartGame+0x114>)
 8003df2:	2207      	movs	r2, #7
 8003df4:	705a      	strb	r2, [r3, #1]
	direction = Up;
 8003df6:	4b38      	ldr	r3, [pc, #224]	@ (8003ed8 <restartGame+0x118>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
	headPart = HeadTop;
 8003dfc:	4b37      	ldr	r3, [pc, #220]	@ (8003edc <restartGame+0x11c>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	701a      	strb	r2, [r3, #0]
	tailPart = TailTop;
 8003e02:	4b37      	ldr	r3, [pc, #220]	@ (8003ee0 <restartGame+0x120>)
 8003e04:	2201      	movs	r2, #1
 8003e06:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < NB_APPLES; i++)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	607b      	str	r3, [r7, #4]
 8003e0c:	e04d      	b.n	8003eaa <restartGame+0xea>
	{
		do
		{
			applePosition[i][0] = rand() % GRID_SIZE_X;
 8003e0e:	f012 f81f 	bl	8015e50 <rand>
 8003e12:	4602      	mov	r2, r0
 8003e14:	4b33      	ldr	r3, [pc, #204]	@ (8003ee4 <restartGame+0x124>)
 8003e16:	fb83 1302 	smull	r1, r3, r3, r2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	10d9      	asrs	r1, r3, #3
 8003e1e:	17d3      	asrs	r3, r2, #31
 8003e20:	1ac9      	subs	r1, r1, r3
 8003e22:	460b      	mov	r3, r1
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	1a5b      	subs	r3, r3, r1
 8003e28:	1ad1      	subs	r1, r2, r3
 8003e2a:	b249      	sxtb	r1, r1
 8003e2c:	4a2e      	ldr	r2, [pc, #184]	@ (8003ee8 <restartGame+0x128>)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
			applePosition[i][1] = rand() % GRID_SIZE_Y;
 8003e34:	f012 f80c 	bl	8015e50 <rand>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	425a      	negs	r2, r3
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	f002 0207 	and.w	r2, r2, #7
 8003e44:	bf58      	it	pl
 8003e46:	4253      	negpl	r3, r2
 8003e48:	b259      	sxtb	r1, r3
 8003e4a:	4a27      	ldr	r2, [pc, #156]	@ (8003ee8 <restartGame+0x128>)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	4413      	add	r3, r2
 8003e52:	460a      	mov	r2, r1
 8003e54:	705a      	strb	r2, [r3, #1]
		} while (isSnakePosition(applePosition[i][0], applePosition[i][1]) || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 8003e56:	4a24      	ldr	r2, [pc, #144]	@ (8003ee8 <restartGame+0x128>)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	4921      	ldr	r1, [pc, #132]	@ (8003ee8 <restartGame+0x128>)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	440b      	add	r3, r1
 8003e68:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4610      	mov	r0, r2
 8003e72:	f7ff feab 	bl	8003bcc <isSnakePosition>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1c8      	bne.n	8003e0e <restartGame+0x4e>
 8003e7c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ee8 <restartGame+0x128>)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8003e84:	b2d8      	uxtb	r0, r3
 8003e86:	4a18      	ldr	r2, [pc, #96]	@ (8003ee8 <restartGame+0x128>)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	4619      	mov	r1, r3
 8003e9a:	f7ff fee3 	bl	8003c64 <isApplePosition>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1b4      	bne.n	8003e0e <restartGame+0x4e>
	for (int i = 0; i < NB_APPLES; i++)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	607b      	str	r3, [r7, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	ddae      	ble.n	8003e0e <restartGame+0x4e>
	}

	BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8003eb0:	480e      	ldr	r0, [pc, #56]	@ (8003eec <restartGame+0x12c>)
 8003eb2:	f002 ff57 	bl	8006d64 <BSP_LCD_Clear>
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20000ab4 	.word	0x20000ab4
 8003ec4:	20000034 	.word	0x20000034
 8003ec8:	20000aa4 	.word	0x20000aa4
 8003ecc:	20000030 	.word	0x20000030
 8003ed0:	20000038 	.word	0x20000038
 8003ed4:	2000003c 	.word	0x2000003c
 8003ed8:	20000a28 	.word	0x20000a28
 8003edc:	20000a29 	.word	0x20000a29
 8003ee0:	20000031 	.word	0x20000031
 8003ee4:	88888889 	.word	0x88888889
 8003ee8:	20000bac 	.word	0x20000bac
 8003eec:	ff81cd4b 	.word	0xff81cd4b

08003ef0 <displayGameStatus>:

void displayGameStatus()
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
	// On affiche le texte en fonction de l'état du jeu
	if (gameOver)
 8003ef4:	4b27      	ldr	r3, [pc, #156]	@ (8003f94 <displayGameStatus+0xa4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d015      	beq.n	8003f28 <displayGameStatus+0x38>
	{
		BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8003efc:	4826      	ldr	r0, [pc, #152]	@ (8003f98 <displayGameStatus+0xa8>)
 8003efe:	f002 fecf 	bl	8006ca0 <BSP_LCD_SetTextColor>
		BSP_LCD_SetFont(&Font24);
 8003f02:	4826      	ldr	r0, [pc, #152]	@ (8003f9c <displayGameStatus+0xac>)
 8003f04:	f002 fefe 	bl	8006d04 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Over", CENTER_MODE);
 8003f08:	2301      	movs	r3, #1
 8003f0a:	4a25      	ldr	r2, [pc, #148]	@ (8003fa0 <displayGameStatus+0xb0>)
 8003f0c:	2164      	movs	r1, #100	@ 0x64
 8003f0e:	2000      	movs	r0, #0
 8003f10:	f002 ff94 	bl	8006e3c <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font16);
 8003f14:	4823      	ldr	r0, [pc, #140]	@ (8003fa4 <displayGameStatus+0xb4>)
 8003f16:	f002 fef5 	bl	8006d04 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to restart", CENTER_MODE);
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	4a22      	ldr	r2, [pc, #136]	@ (8003fa8 <displayGameStatus+0xb8>)
 8003f1e:	2182      	movs	r1, #130	@ 0x82
 8003f20:	2000      	movs	r0, #0
 8003f22:	f002 ff8b 	bl	8006e3c <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font24);
		BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
		BSP_LCD_SetFont(&Font16);
		BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
	}
}
 8003f26:	e032      	b.n	8003f8e <displayGameStatus+0x9e>
	else if (gamePaused)
 8003f28:	4b20      	ldr	r3, [pc, #128]	@ (8003fac <displayGameStatus+0xbc>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d015      	beq.n	8003f5c <displayGameStatus+0x6c>
		BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8003f30:	4819      	ldr	r0, [pc, #100]	@ (8003f98 <displayGameStatus+0xa8>)
 8003f32:	f002 feb5 	bl	8006ca0 <BSP_LCD_SetTextColor>
		BSP_LCD_SetFont(&Font24);
 8003f36:	4819      	ldr	r0, [pc, #100]	@ (8003f9c <displayGameStatus+0xac>)
 8003f38:	f002 fee4 	bl	8006d04 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Paused", CENTER_MODE);
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8003fb0 <displayGameStatus+0xc0>)
 8003f40:	2164      	movs	r1, #100	@ 0x64
 8003f42:	2000      	movs	r0, #0
 8003f44:	f002 ff7a 	bl	8006e3c <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font16);
 8003f48:	4816      	ldr	r0, [pc, #88]	@ (8003fa4 <displayGameStatus+0xb4>)
 8003f4a:	f002 fedb 	bl	8006d04 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to resume", CENTER_MODE);
 8003f4e:	2301      	movs	r3, #1
 8003f50:	4a18      	ldr	r2, [pc, #96]	@ (8003fb4 <displayGameStatus+0xc4>)
 8003f52:	2182      	movs	r1, #130	@ 0x82
 8003f54:	2000      	movs	r0, #0
 8003f56:	f002 ff71 	bl	8006e3c <BSP_LCD_DisplayStringAt>
}
 8003f5a:	e018      	b.n	8003f8e <displayGameStatus+0x9e>
	else if (!gameStarted)
 8003f5c:	4b16      	ldr	r3, [pc, #88]	@ (8003fb8 <displayGameStatus+0xc8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d114      	bne.n	8003f8e <displayGameStatus+0x9e>
		BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8003f64:	480c      	ldr	r0, [pc, #48]	@ (8003f98 <displayGameStatus+0xa8>)
 8003f66:	f002 fe9b 	bl	8006ca0 <BSP_LCD_SetTextColor>
		BSP_LCD_SetFont(&Font24);
 8003f6a:	480c      	ldr	r0, [pc, #48]	@ (8003f9c <displayGameStatus+0xac>)
 8003f6c:	f002 feca 	bl	8006d04 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
 8003f70:	2301      	movs	r3, #1
 8003f72:	4a12      	ldr	r2, [pc, #72]	@ (8003fbc <displayGameStatus+0xcc>)
 8003f74:	2164      	movs	r1, #100	@ 0x64
 8003f76:	2000      	movs	r0, #0
 8003f78:	f002 ff60 	bl	8006e3c <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font16);
 8003f7c:	4809      	ldr	r0, [pc, #36]	@ (8003fa4 <displayGameStatus+0xb4>)
 8003f7e:	f002 fec1 	bl	8006d04 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
 8003f82:	2301      	movs	r3, #1
 8003f84:	4a0e      	ldr	r2, [pc, #56]	@ (8003fc0 <displayGameStatus+0xd0>)
 8003f86:	2182      	movs	r1, #130	@ 0x82
 8003f88:	2000      	movs	r0, #0
 8003f8a:	f002 ff57 	bl	8006e3c <BSP_LCD_DisplayStringAt>
}
 8003f8e:	bf00      	nop
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	20000ab4 	.word	0x20000ab4
 8003f98:	ffa52a2a 	.word	0xffa52a2a
 8003f9c:	20000040 	.word	0x20000040
 8003fa0:	08017154 	.word	0x08017154
 8003fa4:	20000048 	.word	0x20000048
 8003fa8:	08017160 	.word	0x08017160
 8003fac:	20000ab0 	.word	0x20000ab0
 8003fb0:	0801717c 	.word	0x0801717c
 8003fb4:	08017188 	.word	0x08017188
 8003fb8:	20000aac 	.word	0x20000aac
 8003fbc:	080171a4 	.word	0x080171a4
 8003fc0:	080171b0 	.word	0x080171b0

08003fc4 <initializeSD>:

void initializeSD()
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
	if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	4905      	ldr	r1, [pc, #20]	@ (8003fe0 <initializeSD+0x1c>)
 8003fcc:	4805      	ldr	r0, [pc, #20]	@ (8003fe4 <initializeSD+0x20>)
 8003fce:	f7fe fbbd 	bl	800274c <f_mount>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <initializeSD+0x18>
	{
		Error_Handler();
 8003fd8:	f001 ff64 	bl	8005ea4 <Error_Handler>
	}
}
 8003fdc:	bf00      	nop
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	200010b8 	.word	0x200010b8
 8003fe4:	200010bc 	.word	0x200010bc

08003fe8 <initializeAudio>:

void initializeAudio(uint32_t freq)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	6078      	str	r0, [r7, #4]
	// Initialisation de l'audio
	if (BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_INPUT_LINE_1,
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	2310      	movs	r3, #16
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	2102      	movs	r1, #2
 8003ffa:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8003ffe:	f002 fb43 	bl	8006688 <BSP_AUDIO_IN_OUT_Init>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <initializeAudio+0x24>
							  OUTPUT_DEVICE_HEADPHONE, freq,
							  DEFAULT_AUDIO_IN_BIT_RESOLUTION,
							  DEFAULT_AUDIO_IN_CHANNEL_NBR) != AUDIO_OK)
	{
		Error_Handler();
 8004008:	f001 ff4c 	bl	8005ea4 <Error_Handler>
	}

	// Initialisation du buffer audio
	memset((uint16_t *)AUDIO_BUFFER_OUT, 0, AUDIO_BLOCK_SIZE * 2);
 800400c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004010:	2100      	movs	r1, #0
 8004012:	480b      	ldr	r0, [pc, #44]	@ (8004040 <initializeAudio+0x58>)
 8004014:	f012 f87f 	bl	8016116 <memset>

	// Démarrage de l'audio
	BSP_AUDIO_OUT_SetVolume(40);
 8004018:	2028      	movs	r0, #40	@ 0x28
 800401a:	f002 f98b 	bl	8006334 <BSP_AUDIO_OUT_SetVolume>
	BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 800401e:	2005      	movs	r0, #5
 8004020:	f002 f9a0 	bl	8006364 <BSP_AUDIO_OUT_SetAudioFrameSlot>

	if (BSP_AUDIO_OUT_Play((uint16_t *)AUDIO_BUFFER_OUT,
 8004024:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004028:	4805      	ldr	r0, [pc, #20]	@ (8004040 <initializeAudio+0x58>)
 800402a:	f002 f959 	bl	80062e0 <BSP_AUDIO_OUT_Play>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <initializeAudio+0x50>
						   AUDIO_BLOCK_SIZE * 2) != AUDIO_OK)
	{
		Error_Handler();
 8004034:	f001 ff36 	bl	8005ea4 <Error_Handler>
	}
}
 8004038:	bf00      	nop
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	c007fc00 	.word	0xc007fc00

08004044 <extractHeaderInfo>:

void extractHeaderInfo()
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
	uint32_t data = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	607b      	str	r3, [r7, #4]
	uint32_t bytesread;

	// Lecture de la taille du fichier
	f_lseek(&SDFile, 04);
 800404e:	2104      	movs	r1, #4
 8004050:	4817      	ldr	r0, [pc, #92]	@ (80040b0 <extractHeaderInfo+0x6c>)
 8004052:	f7fe ffc6 	bl	8002fe2 <f_lseek>
	f_read(&SDFile, &data, 4, (void *)&bytesread);
 8004056:	463b      	mov	r3, r7
 8004058:	1d39      	adds	r1, r7, #4
 800405a:	2204      	movs	r2, #4
 800405c:	4814      	ldr	r0, [pc, #80]	@ (80040b0 <extractHeaderInfo+0x6c>)
 800405e:	f7fe fd9a 	bl	8002b96 <f_read>
	numberOfBlocks = data / 512;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	0a5b      	lsrs	r3, r3, #9
 8004066:	4a13      	ldr	r2, [pc, #76]	@ (80040b4 <extractHeaderInfo+0x70>)
 8004068:	6013      	str	r3, [r2, #0]
	data = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	607b      	str	r3, [r7, #4]

	// Lecture de la fréquence d'échantillonnage
	f_lseek(&SDFile, 24);
 800406e:	2118      	movs	r1, #24
 8004070:	480f      	ldr	r0, [pc, #60]	@ (80040b0 <extractHeaderInfo+0x6c>)
 8004072:	f7fe ffb6 	bl	8002fe2 <f_lseek>
	f_read(&SDFile, &data, 4, (void *)&bytesread);
 8004076:	463b      	mov	r3, r7
 8004078:	1d39      	adds	r1, r7, #4
 800407a:	2204      	movs	r2, #4
 800407c:	480c      	ldr	r0, [pc, #48]	@ (80040b0 <extractHeaderInfo+0x6c>)
 800407e:	f7fe fd8a 	bl	8002b96 <f_read>
	audioFrequency = data;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a0c      	ldr	r2, [pc, #48]	@ (80040b8 <extractHeaderInfo+0x74>)
 8004086:	6013      	str	r3, [r2, #0]
	data = 0;
 8004088:	2300      	movs	r3, #0
 800408a:	607b      	str	r3, [r7, #4]

	// Nombre d'octets par secondes
	f_lseek(&SDFile, 28);
 800408c:	211c      	movs	r1, #28
 800408e:	4808      	ldr	r0, [pc, #32]	@ (80040b0 <extractHeaderInfo+0x6c>)
 8004090:	f7fe ffa7 	bl	8002fe2 <f_lseek>
	f_read(&SDFile, (uint8_t *)&data, 4, (void *)&bytesread);
 8004094:	463b      	mov	r3, r7
 8004096:	1d39      	adds	r1, r7, #4
 8004098:	2204      	movs	r2, #4
 800409a:	4805      	ldr	r0, [pc, #20]	@ (80040b0 <extractHeaderInfo+0x6c>)
 800409c:	f7fe fd7b 	bl	8002b96 <f_read>
	bytesPerSecond = data;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a06      	ldr	r2, [pc, #24]	@ (80040bc <extractHeaderInfo+0x78>)
 80040a4:	6013      	str	r3, [r2, #0]
}
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	200012f0 	.word	0x200012f0
 80040b4:	20000978 	.word	0x20000978
 80040b8:	20000028 	.word	0x20000028
 80040bc:	2000002c 	.word	0x2000002c

080040c0 <loadWav>:

void loadWav()
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
	f_close(&SDFile);
 80040c4:	481e      	ldr	r0, [pc, #120]	@ (8004140 <loadWav+0x80>)
 80040c6:	f7fe ff5d 	bl	8002f84 <f_close>
	if (currentSong == 0)
 80040ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004144 <loadWav+0x84>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d105      	bne.n	80040de <loadWav+0x1e>
		f_open(&SDFile, SONG1, FA_READ);
 80040d2:	2201      	movs	r2, #1
 80040d4:	491c      	ldr	r1, [pc, #112]	@ (8004148 <loadWav+0x88>)
 80040d6:	481a      	ldr	r0, [pc, #104]	@ (8004140 <loadWav+0x80>)
 80040d8:	f7fe fb9c 	bl	8002814 <f_open>
 80040dc:	e012      	b.n	8004104 <loadWav+0x44>
	else if (currentSong == 1)
 80040de:	4b19      	ldr	r3, [pc, #100]	@ (8004144 <loadWav+0x84>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d105      	bne.n	80040f2 <loadWav+0x32>
		f_open(&SDFile, SONG2, FA_READ);
 80040e6:	2201      	movs	r2, #1
 80040e8:	4918      	ldr	r1, [pc, #96]	@ (800414c <loadWav+0x8c>)
 80040ea:	4815      	ldr	r0, [pc, #84]	@ (8004140 <loadWav+0x80>)
 80040ec:	f7fe fb92 	bl	8002814 <f_open>
 80040f0:	e008      	b.n	8004104 <loadWav+0x44>
	else if (currentSong == 2)
 80040f2:	4b14      	ldr	r3, [pc, #80]	@ (8004144 <loadWav+0x84>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d104      	bne.n	8004104 <loadWav+0x44>
		f_open(&SDFile, SONG3, FA_READ);
 80040fa:	2201      	movs	r2, #1
 80040fc:	4914      	ldr	r1, [pc, #80]	@ (8004150 <loadWav+0x90>)
 80040fe:	4810      	ldr	r0, [pc, #64]	@ (8004140 <loadWav+0x80>)
 8004100:	f7fe fb88 	bl	8002814 <f_open>
	extractHeaderInfo();
 8004104:	f7ff ff9e 	bl	8004044 <extractHeaderInfo>
	initializeAudio(audioFrequency);
 8004108:	4b12      	ldr	r3, [pc, #72]	@ (8004154 <loadWav+0x94>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff ff6b 	bl	8003fe8 <initializeAudio>
	f_lseek(&SDFile, 44);
 8004112:	212c      	movs	r1, #44	@ 0x2c
 8004114:	480a      	ldr	r0, [pc, #40]	@ (8004140 <loadWav+0x80>)
 8004116:	f7fe ff64 	bl	8002fe2 <f_lseek>
	blockPointer = 0;
 800411a:	4b0f      	ldr	r3, [pc, #60]	@ (8004158 <loadWav+0x98>)
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
	currentSong = (currentSong + 1) % NB_SONGS;
 8004120:	4b08      	ldr	r3, [pc, #32]	@ (8004144 <loadWav+0x84>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	1c59      	adds	r1, r3, #1
 8004126:	4b0d      	ldr	r3, [pc, #52]	@ (800415c <loadWav+0x9c>)
 8004128:	fba3 2301 	umull	r2, r3, r3, r1
 800412c:	085a      	lsrs	r2, r3, #1
 800412e:	4613      	mov	r3, r2
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	4413      	add	r3, r2
 8004134:	1aca      	subs	r2, r1, r3
 8004136:	4b03      	ldr	r3, [pc, #12]	@ (8004144 <loadWav+0x84>)
 8004138:	601a      	str	r2, [r3, #0]
}
 800413a:	bf00      	nop
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	200012f0 	.word	0x200012f0
 8004144:	20000980 	.word	0x20000980
 8004148:	080171cc 	.word	0x080171cc
 800414c:	080171d8 	.word	0x080171d8
 8004150:	080171e4 	.word	0x080171e4
 8004154:	20000028 	.word	0x20000028
 8004158:	2000097c 	.word	0x2000097c
 800415c:	aaaaaaab 	.word	0xaaaaaaab

08004160 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8004160:	b5b0      	push	{r4, r5, r7, lr}
 8004162:	b0aa      	sub	sp, #168	@ 0xa8
 8004164:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	/* USER CODE END 1 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8004166:	f7ff fc65 	bl	8003a34 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 800416a:	f7ff fc89 	bl	8003a80 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800416e:	f006 fad6 	bl	800a71e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004172:	f000 f8ef 	bl	8004354 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8004176:	f000 f95d 	bl	8004434 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800417a:	f000 fc9b 	bl	8004ab4 <MX_GPIO_Init>
	MX_DMA_Init();
 800417e:	f000 fbdb 	bl	8004938 <MX_DMA_Init>
	MX_SDMMC1_SD_Init();
 8004182:	f000 fb89 	bl	8004898 <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 8004186:	f00e f85b 	bl	8012240 <MX_FATFS_Init>
	MX_FMC_Init();
 800418a:	f000 fc0b 	bl	80049a4 <MX_FMC_Init>
	MX_LTDC_Init();
 800418e:	f000 fa59 	bl	8004644 <MX_LTDC_Init>
	MX_USART1_UART_Init();
 8004192:	f000 fba1 	bl	80048d8 <MX_USART1_UART_Init>
	MX_DMA2D_Init();
 8004196:	f000 fa23 	bl	80045e0 <MX_DMA2D_Init>
	MX_SAI2_Init();
 800419a:	f000 fad5 	bl	8004748 <MX_SAI2_Init>
	MX_ADC1_Init();
 800419e:	f000 f97b 	bl	8004498 <MX_ADC1_Init>
	MX_ADC3_Init();
 80041a2:	f000 f9cb 	bl	800453c <MX_ADC3_Init>
	/* USER CODE BEGIN 2 */

	// Initialisation de l'écran LCD
	BSP_LCD_Init();
 80041a6:	f002 fc73 	bl	8006a90 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80041aa:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 80041ae:	2000      	movs	r0, #0
 80041b0:	f002 fd06 	bl	8006bc0 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 80041b4:	f002 fcdc 	bl	8006b70 <BSP_LCD_GetXSize>
 80041b8:	4604      	mov	r4, r0
 80041ba:	f002 fced 	bl	8006b98 <BSP_LCD_GetYSize>
 80041be:	4603      	mov	r3, r0
 80041c0:	fb04 f303 	mul.w	r3, r4, r3
 80041c4:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4619      	mov	r1, r3
 80041cc:	2001      	movs	r0, #1
 80041ce:	f002 fcf7 	bl	8006bc0 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 80041d2:	f003 f8e5 	bl	80073a0 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(0);
 80041d6:	2000      	movs	r0, #0
 80041d8:	f002 fd52 	bl	8006c80 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 80041dc:	484d      	ldr	r0, [pc, #308]	@ (8004314 <main+0x1b4>)
 80041de:	f002 fdc1 	bl	8006d64 <BSP_LCD_Clear>
	BSP_LCD_SelectLayer(1);
 80041e2:	2001      	movs	r0, #1
 80041e4:	f002 fd4c 	bl	8006c80 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(00);
 80041e8:	2000      	movs	r0, #0
 80041ea:	f002 fdbb 	bl	8006d64 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font16);
 80041ee:	484a      	ldr	r0, [pc, #296]	@ (8004318 <main+0x1b8>)
 80041f0:	f002 fd88 	bl	8006d04 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 80041f4:	4849      	ldr	r0, [pc, #292]	@ (800431c <main+0x1bc>)
 80041f6:	f002 fd53 	bl	8006ca0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(00);
 80041fa:	2000      	movs	r0, #0
 80041fc:	f002 fd68 	bl	8006cd0 <BSP_LCD_SetBackColor>
	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8004200:	f002 fcb6 	bl	8006b70 <BSP_LCD_GetXSize>
 8004204:	4603      	mov	r3, r0
 8004206:	b29c      	uxth	r4, r3
 8004208:	f002 fcc6 	bl	8006b98 <BSP_LCD_GetYSize>
 800420c:	4603      	mov	r3, r0
 800420e:	b29b      	uxth	r3, r3
 8004210:	4619      	mov	r1, r3
 8004212:	4620      	mov	r0, r4
 8004214:	f003 fcd6 	bl	8007bc4 <BSP_TS_Init>
	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of displayMutex */
	osMutexDef(displayMutex);
 8004218:	2300      	movs	r3, #0
 800421a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800421e:	2300      	movs	r3, #0
 8004220:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	displayMutexHandle = osMutexCreate(osMutex(displayMutex));
 8004224:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8004228:	4618      	mov	r0, r3
 800422a:	f00e fc6f 	bl	8012b0c <osMutexCreate>
 800422e:	4603      	mov	r3, r0
 8004230:	4a3b      	ldr	r2, [pc, #236]	@ (8004320 <main+0x1c0>)
 8004232:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of WakeUp */
	osMessageQDef(WakeUp, 1, uint8_t);
 8004234:	4b3b      	ldr	r3, [pc, #236]	@ (8004324 <main+0x1c4>)
 8004236:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 800423a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800423c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	WakeUpHandle = osMessageCreate(osMessageQ(WakeUp), NULL);
 8004240:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8004244:	2100      	movs	r1, #0
 8004246:	4618      	mov	r0, r3
 8004248:	f00e fd41 	bl	8012cce <osMessageCreate>
 800424c:	4603      	mov	r3, r0
 800424e:	4a36      	ldr	r2, [pc, #216]	@ (8004328 <main+0x1c8>)
 8004250:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8004252:	4b36      	ldr	r3, [pc, #216]	@ (800432c <main+0x1cc>)
 8004254:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8004258:	461d      	mov	r5, r3
 800425a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800425c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800425e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004262:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004266:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800426a:	2100      	movs	r1, #0
 800426c:	4618      	mov	r0, r3
 800426e:	f00e fbed 	bl	8012a4c <osThreadCreate>
 8004272:	4603      	mov	r3, r0
 8004274:	4a2e      	ldr	r2, [pc, #184]	@ (8004330 <main+0x1d0>)
 8004276:	6013      	str	r3, [r2, #0]

	/* definition and creation of displayTask */
	osThreadDef(displayTask, StartDisplayTask, osPriorityLow, 0, 1024);
 8004278:	4b2e      	ldr	r3, [pc, #184]	@ (8004334 <main+0x1d4>)
 800427a:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800427e:	461d      	mov	r5, r3
 8004280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004284:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004288:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 800428c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004290:	2100      	movs	r1, #0
 8004292:	4618      	mov	r0, r3
 8004294:	f00e fbda 	bl	8012a4c <osThreadCreate>
 8004298:	4603      	mov	r3, r0
 800429a:	4a27      	ldr	r2, [pc, #156]	@ (8004338 <main+0x1d8>)
 800429c:	6013      	str	r3, [r2, #0]

	/* definition and creation of manageBodyParts */
	osThreadDef(manageBodyParts, StartManageBodyParts, osPriorityHigh, 0, 256);
 800429e:	4b27      	ldr	r3, [pc, #156]	@ (800433c <main+0x1dc>)
 80042a0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80042a4:	461d      	mov	r5, r3
 80042a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80042ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	manageBodyPartsHandle = osThreadCreate(osThread(manageBodyParts), NULL);
 80042b2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80042b6:	2100      	movs	r1, #0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f00e fbc7 	bl	8012a4c <osThreadCreate>
 80042be:	4603      	mov	r3, r0
 80042c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004340 <main+0x1e0>)
 80042c2:	6013      	str	r3, [r2, #0]

	/* definition and creation of tsHandlerTask */
	osThreadDef(tsHandlerTask, StartTsHandler, osPriorityHigh, 0, 256);
 80042c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004344 <main+0x1e4>)
 80042c6:	f107 0420 	add.w	r4, r7, #32
 80042ca:	461d      	mov	r5, r3
 80042cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80042d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	tsHandlerTaskHandle = osThreadCreate(osThread(tsHandlerTask), NULL);
 80042d8:	f107 0320 	add.w	r3, r7, #32
 80042dc:	2100      	movs	r1, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	f00e fbb4 	bl	8012a4c <osThreadCreate>
 80042e4:	4603      	mov	r3, r0
 80042e6:	4a18      	ldr	r2, [pc, #96]	@ (8004348 <main+0x1e8>)
 80042e8:	6013      	str	r3, [r2, #0]

	/* definition and creation of playSongTask */
	osThreadDef(playSongTask, StartPlaySongTask, osPriorityHigh, 0, 256);
 80042ea:	4b18      	ldr	r3, [pc, #96]	@ (800434c <main+0x1ec>)
 80042ec:	1d3c      	adds	r4, r7, #4
 80042ee:	461d      	mov	r5, r3
 80042f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80042f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	playSongTaskHandle = osThreadCreate(osThread(playSongTask), NULL);
 80042fc:	1d3b      	adds	r3, r7, #4
 80042fe:	2100      	movs	r1, #0
 8004300:	4618      	mov	r0, r3
 8004302:	f00e fba3 	bl	8012a4c <osThreadCreate>
 8004306:	4603      	mov	r3, r0
 8004308:	4a11      	ldr	r2, [pc, #68]	@ (8004350 <main+0x1f0>)
 800430a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800430c:	f00e fb7b 	bl	8012a06 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8004310:	bf00      	nop
 8004312:	e7fd      	b.n	8004310 <main+0x1b0>
 8004314:	ff81cd4b 	.word	0xff81cd4b
 8004318:	20000048 	.word	0x20000048
 800431c:	ffa52a2a 	.word	0xffa52a2a
 8004320:	20000974 	.word	0x20000974
 8004324:	080171f0 	.word	0x080171f0
 8004328:	20000970 	.word	0x20000970
 800432c:	0801720c 	.word	0x0801720c
 8004330:	2000095c 	.word	0x2000095c
 8004334:	08017234 	.word	0x08017234
 8004338:	20000960 	.word	0x20000960
 800433c:	08017260 	.word	0x08017260
 8004340:	20000964 	.word	0x20000964
 8004344:	0801728c 	.word	0x0801728c
 8004348:	20000968 	.word	0x20000968
 800434c:	080172b8 	.word	0x080172b8
 8004350:	2000096c 	.word	0x2000096c

08004354 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b094      	sub	sp, #80	@ 0x50
 8004358:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800435a:	f107 0320 	add.w	r3, r7, #32
 800435e:	2230      	movs	r2, #48	@ 0x30
 8004360:	2100      	movs	r1, #0
 8004362:	4618      	mov	r0, r3
 8004364:	f011 fed7 	bl	8016116 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004368:	f107 030c 	add.w	r3, r7, #12
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	605a      	str	r2, [r3, #4]
 8004372:	609a      	str	r2, [r3, #8]
 8004374:	60da      	str	r2, [r3, #12]
 8004376:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8004378:	f009 f99a 	bl	800d6b0 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800437c:	4b2b      	ldr	r3, [pc, #172]	@ (800442c <SystemClock_Config+0xd8>)
 800437e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004380:	4a2a      	ldr	r2, [pc, #168]	@ (800442c <SystemClock_Config+0xd8>)
 8004382:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004386:	6413      	str	r3, [r2, #64]	@ 0x40
 8004388:	4b28      	ldr	r3, [pc, #160]	@ (800442c <SystemClock_Config+0xd8>)
 800438a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004394:	4b26      	ldr	r3, [pc, #152]	@ (8004430 <SystemClock_Config+0xdc>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a25      	ldr	r2, [pc, #148]	@ (8004430 <SystemClock_Config+0xdc>)
 800439a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	4b23      	ldr	r3, [pc, #140]	@ (8004430 <SystemClock_Config+0xdc>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80043a8:	607b      	str	r3, [r7, #4]
 80043aa:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80043ac:	2301      	movs	r3, #1
 80043ae:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80043b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80043b4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043b6:	2302      	movs	r3, #2
 80043b8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80043ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80043be:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 80043c0:	2319      	movs	r3, #25
 80043c2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 400;
 80043c4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80043c8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80043ca:	2302      	movs	r3, #2
 80043cc:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 9;
 80043ce:	2309      	movs	r3, #9
 80043d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043d2:	f107 0320 	add.w	r3, r7, #32
 80043d6:	4618      	mov	r0, r3
 80043d8:	f009 f9ca 	bl	800d770 <HAL_RCC_OscConfig>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <SystemClock_Config+0x92>
	{
		Error_Handler();
 80043e2:	f001 fd5f 	bl	8005ea4 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80043e6:	f009 f973 	bl	800d6d0 <HAL_PWREx_EnableOverDrive>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <SystemClock_Config+0xa0>
	{
		Error_Handler();
 80043f0:	f001 fd58 	bl	8005ea4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80043f4:	230f      	movs	r3, #15
 80043f6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80043f8:	2302      	movs	r3, #2
 80043fa:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80043fc:	2300      	movs	r3, #0
 80043fe:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004400:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004404:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004406:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800440a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800440c:	f107 030c 	add.w	r3, r7, #12
 8004410:	2106      	movs	r1, #6
 8004412:	4618      	mov	r0, r3
 8004414:	f009 fc50 	bl	800dcb8 <HAL_RCC_ClockConfig>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <SystemClock_Config+0xce>
	{
		Error_Handler();
 800441e:	f001 fd41 	bl	8005ea4 <Error_Handler>
	}
}
 8004422:	bf00      	nop
 8004424:	3750      	adds	r7, #80	@ 0x50
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40023800 	.word	0x40023800
 8004430:	40007000 	.word	0x40007000

08004434 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b0a2      	sub	sp, #136	@ 0x88
 8004438:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800443a:	1d3b      	adds	r3, r7, #4
 800443c:	2284      	movs	r2, #132	@ 0x84
 800443e:	2100      	movs	r1, #0
 8004440:	4618      	mov	r0, r3
 8004442:	f011 fe68 	bl	8016116 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC | RCC_PERIPHCLK_SAI2 | RCC_PERIPHCLK_SDMMC1 | RCC_PERIPHCLK_CLK48;
 8004446:	4b13      	ldr	r3, [pc, #76]	@ (8004494 <PeriphCommonClock_Config+0x60>)
 8004448:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800444a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800444e:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8004450:	2305      	movs	r3, #5
 8004452:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8004454:	2302      	movs	r3, #2
 8004456:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8004458:	2303      	movs	r3, #3
 800445a:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 800445c:	2301      	movs	r3, #1
 800445e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8004460:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004464:	633b      	str	r3, [r7, #48]	@ 0x30
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8004466:	2300      	movs	r3, #0
 8004468:	647b      	str	r3, [r7, #68]	@ 0x44
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800446a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800446e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8004472:	2300      	movs	r3, #0
 8004474:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004478:	1d3b      	adds	r3, r7, #4
 800447a:	4618      	mov	r0, r3
 800447c:	f009 fe34 	bl	800e0e8 <HAL_RCCEx_PeriphCLKConfig>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <PeriphCommonClock_Config+0x56>
	{
		Error_Handler();
 8004486:	f001 fd0d 	bl	8005ea4 <Error_Handler>
	}
}
 800448a:	bf00      	nop
 800448c:	3788      	adds	r7, #136	@ 0x88
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	00b00008 	.word	0x00b00008

08004498 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800449e:	463b      	mov	r3, r7
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	605a      	str	r2, [r3, #4]
 80044a6:	609a      	str	r2, [r3, #8]
 80044a8:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80044aa:	4b21      	ldr	r3, [pc, #132]	@ (8004530 <MX_ADC1_Init+0x98>)
 80044ac:	4a21      	ldr	r2, [pc, #132]	@ (8004534 <MX_ADC1_Init+0x9c>)
 80044ae:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80044b0:	4b1f      	ldr	r3, [pc, #124]	@ (8004530 <MX_ADC1_Init+0x98>)
 80044b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80044b6:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80044b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004530 <MX_ADC1_Init+0x98>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80044be:	4b1c      	ldr	r3, [pc, #112]	@ (8004530 <MX_ADC1_Init+0x98>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80044c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004530 <MX_ADC1_Init+0x98>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80044ca:	4b19      	ldr	r3, [pc, #100]	@ (8004530 <MX_ADC1_Init+0x98>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80044d2:	4b17      	ldr	r3, [pc, #92]	@ (8004530 <MX_ADC1_Init+0x98>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80044d8:	4b15      	ldr	r3, [pc, #84]	@ (8004530 <MX_ADC1_Init+0x98>)
 80044da:	4a17      	ldr	r2, [pc, #92]	@ (8004538 <MX_ADC1_Init+0xa0>)
 80044dc:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80044de:	4b14      	ldr	r3, [pc, #80]	@ (8004530 <MX_ADC1_Init+0x98>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80044e4:	4b12      	ldr	r3, [pc, #72]	@ (8004530 <MX_ADC1_Init+0x98>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80044ea:	4b11      	ldr	r3, [pc, #68]	@ (8004530 <MX_ADC1_Init+0x98>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80044f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004530 <MX_ADC1_Init+0x98>)
 80044f4:	2201      	movs	r2, #1
 80044f6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80044f8:	480d      	ldr	r0, [pc, #52]	@ (8004530 <MX_ADC1_Init+0x98>)
 80044fa:	f006 f961 	bl	800a7c0 <HAL_ADC_Init>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8004504:	f001 fcce 	bl	8005ea4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8004508:	2300      	movs	r3, #0
 800450a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800450c:	2301      	movs	r3, #1
 800450e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004510:	2300      	movs	r3, #0
 8004512:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004514:	463b      	mov	r3, r7
 8004516:	4619      	mov	r1, r3
 8004518:	4805      	ldr	r0, [pc, #20]	@ (8004530 <MX_ADC1_Init+0x98>)
 800451a:	f006 fafb 	bl	800ab14 <HAL_ADC_ConfigChannel>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8004524:	f001 fcbe 	bl	8005ea4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */
}
 8004528:	bf00      	nop
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	200003e8 	.word	0x200003e8
 8004534:	40012000 	.word	0x40012000
 8004538:	0f000001 	.word	0x0f000001

0800453c <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8004542:	463b      	mov	r3, r7
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	605a      	str	r2, [r3, #4]
 800454a:	609a      	str	r2, [r3, #8]
 800454c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC3_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 800454e:	4b21      	ldr	r3, [pc, #132]	@ (80045d4 <MX_ADC3_Init+0x98>)
 8004550:	4a21      	ldr	r2, [pc, #132]	@ (80045d8 <MX_ADC3_Init+0x9c>)
 8004552:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004554:	4b1f      	ldr	r3, [pc, #124]	@ (80045d4 <MX_ADC3_Init+0x98>)
 8004556:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800455a:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800455c:	4b1d      	ldr	r3, [pc, #116]	@ (80045d4 <MX_ADC3_Init+0x98>)
 800455e:	2200      	movs	r2, #0
 8004560:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004562:	4b1c      	ldr	r3, [pc, #112]	@ (80045d4 <MX_ADC3_Init+0x98>)
 8004564:	2200      	movs	r2, #0
 8004566:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8004568:	4b1a      	ldr	r3, [pc, #104]	@ (80045d4 <MX_ADC3_Init+0x98>)
 800456a:	2200      	movs	r2, #0
 800456c:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 800456e:	4b19      	ldr	r3, [pc, #100]	@ (80045d4 <MX_ADC3_Init+0x98>)
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004576:	4b17      	ldr	r3, [pc, #92]	@ (80045d4 <MX_ADC3_Init+0x98>)
 8004578:	2200      	movs	r2, #0
 800457a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800457c:	4b15      	ldr	r3, [pc, #84]	@ (80045d4 <MX_ADC3_Init+0x98>)
 800457e:	4a17      	ldr	r2, [pc, #92]	@ (80045dc <MX_ADC3_Init+0xa0>)
 8004580:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004582:	4b14      	ldr	r3, [pc, #80]	@ (80045d4 <MX_ADC3_Init+0x98>)
 8004584:	2200      	movs	r2, #0
 8004586:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8004588:	4b12      	ldr	r3, [pc, #72]	@ (80045d4 <MX_ADC3_Init+0x98>)
 800458a:	2201      	movs	r2, #1
 800458c:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 800458e:	4b11      	ldr	r3, [pc, #68]	@ (80045d4 <MX_ADC3_Init+0x98>)
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004596:	4b0f      	ldr	r3, [pc, #60]	@ (80045d4 <MX_ADC3_Init+0x98>)
 8004598:	2201      	movs	r2, #1
 800459a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800459c:	480d      	ldr	r0, [pc, #52]	@ (80045d4 <MX_ADC3_Init+0x98>)
 800459e:	f006 f90f 	bl	800a7c0 <HAL_ADC_Init>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 80045a8:	f001 fc7c 	bl	8005ea4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 80045ac:	2306      	movs	r3, #6
 80045ae:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80045b0:	2301      	movs	r3, #1
 80045b2:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80045b4:	2300      	movs	r3, #0
 80045b6:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80045b8:	463b      	mov	r3, r7
 80045ba:	4619      	mov	r1, r3
 80045bc:	4805      	ldr	r0, [pc, #20]	@ (80045d4 <MX_ADC3_Init+0x98>)
 80045be:	f006 faa9 	bl	800ab14 <HAL_ADC_ConfigChannel>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 80045c8:	f001 fc6c 	bl	8005ea4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */
}
 80045cc:	bf00      	nop
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20000430 	.word	0x20000430
 80045d8:	40012200 	.word	0x40012200
 80045dc:	0f000001 	.word	0x0f000001

080045e0 <MX_DMA2D_Init>:
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 80045e4:	4b15      	ldr	r3, [pc, #84]	@ (800463c <MX_DMA2D_Init+0x5c>)
 80045e6:	4a16      	ldr	r2, [pc, #88]	@ (8004640 <MX_DMA2D_Init+0x60>)
 80045e8:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 80045ea:	4b14      	ldr	r3, [pc, #80]	@ (800463c <MX_DMA2D_Init+0x5c>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80045f0:	4b12      	ldr	r3, [pc, #72]	@ (800463c <MX_DMA2D_Init+0x5c>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 80045f6:	4b11      	ldr	r3, [pc, #68]	@ (800463c <MX_DMA2D_Init+0x5c>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 80045fc:	4b0f      	ldr	r3, [pc, #60]	@ (800463c <MX_DMA2D_Init+0x5c>)
 80045fe:	2200      	movs	r2, #0
 8004600:	629a      	str	r2, [r3, #40]	@ 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8004602:	4b0e      	ldr	r3, [pc, #56]	@ (800463c <MX_DMA2D_Init+0x5c>)
 8004604:	2200      	movs	r2, #0
 8004606:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8004608:	4b0c      	ldr	r3, [pc, #48]	@ (800463c <MX_DMA2D_Init+0x5c>)
 800460a:	2200      	movs	r2, #0
 800460c:	631a      	str	r2, [r3, #48]	@ 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 800460e:	4b0b      	ldr	r3, [pc, #44]	@ (800463c <MX_DMA2D_Init+0x5c>)
 8004610:	2200      	movs	r2, #0
 8004612:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8004614:	4809      	ldr	r0, [pc, #36]	@ (800463c <MX_DMA2D_Init+0x5c>)
 8004616:	f007 f9b3 	bl	800b980 <HAL_DMA2D_Init>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <MX_DMA2D_Init+0x44>
	{
		Error_Handler();
 8004620:	f001 fc40 	bl	8005ea4 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8004624:	2101      	movs	r1, #1
 8004626:	4805      	ldr	r0, [pc, #20]	@ (800463c <MX_DMA2D_Init+0x5c>)
 8004628:	f007 fb08 	bl	800bc3c <HAL_DMA2D_ConfigLayer>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 8004632:	f001 fc37 	bl	8005ea4 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */
}
 8004636:	bf00      	nop
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	20000478 	.word	0x20000478
 8004640:	4002b000 	.word	0x4002b000

08004644 <MX_LTDC_Init>:
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08e      	sub	sp, #56	@ 0x38
 8004648:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800464a:	1d3b      	adds	r3, r7, #4
 800464c:	2234      	movs	r2, #52	@ 0x34
 800464e:	2100      	movs	r1, #0
 8004650:	4618      	mov	r0, r3
 8004652:	f011 fd60 	bl	8016116 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 8004656:	4b3a      	ldr	r3, [pc, #232]	@ (8004740 <MX_LTDC_Init+0xfc>)
 8004658:	4a3a      	ldr	r2, [pc, #232]	@ (8004744 <MX_LTDC_Init+0x100>)
 800465a:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800465c:	4b38      	ldr	r3, [pc, #224]	@ (8004740 <MX_LTDC_Init+0xfc>)
 800465e:	2200      	movs	r2, #0
 8004660:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8004662:	4b37      	ldr	r3, [pc, #220]	@ (8004740 <MX_LTDC_Init+0xfc>)
 8004664:	2200      	movs	r2, #0
 8004666:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8004668:	4b35      	ldr	r3, [pc, #212]	@ (8004740 <MX_LTDC_Init+0xfc>)
 800466a:	2200      	movs	r2, #0
 800466c:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800466e:	4b34      	ldr	r3, [pc, #208]	@ (8004740 <MX_LTDC_Init+0xfc>)
 8004670:	2200      	movs	r2, #0
 8004672:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 8004674:	4b32      	ldr	r3, [pc, #200]	@ (8004740 <MX_LTDC_Init+0xfc>)
 8004676:	2228      	movs	r2, #40	@ 0x28
 8004678:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 800467a:	4b31      	ldr	r3, [pc, #196]	@ (8004740 <MX_LTDC_Init+0xfc>)
 800467c:	2209      	movs	r2, #9
 800467e:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 8004680:	4b2f      	ldr	r3, [pc, #188]	@ (8004740 <MX_LTDC_Init+0xfc>)
 8004682:	2235      	movs	r2, #53	@ 0x35
 8004684:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 8004686:	4b2e      	ldr	r3, [pc, #184]	@ (8004740 <MX_LTDC_Init+0xfc>)
 8004688:	220b      	movs	r2, #11
 800468a:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 800468c:	4b2c      	ldr	r3, [pc, #176]	@ (8004740 <MX_LTDC_Init+0xfc>)
 800468e:	f240 2215 	movw	r2, #533	@ 0x215
 8004692:	625a      	str	r2, [r3, #36]	@ 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 8004694:	4b2a      	ldr	r3, [pc, #168]	@ (8004740 <MX_LTDC_Init+0xfc>)
 8004696:	f240 121b 	movw	r2, #283	@ 0x11b
 800469a:	629a      	str	r2, [r3, #40]	@ 0x28
	hltdc.Init.TotalWidth = 565;
 800469c:	4b28      	ldr	r3, [pc, #160]	@ (8004740 <MX_LTDC_Init+0xfc>)
 800469e:	f240 2235 	movw	r2, #565	@ 0x235
 80046a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	hltdc.Init.TotalHeigh = 285;
 80046a4:	4b26      	ldr	r3, [pc, #152]	@ (8004740 <MX_LTDC_Init+0xfc>)
 80046a6:	f240 121d 	movw	r2, #285	@ 0x11d
 80046aa:	631a      	str	r2, [r3, #48]	@ 0x30
	hltdc.Init.Backcolor.Blue = 0;
 80046ac:	4b24      	ldr	r3, [pc, #144]	@ (8004740 <MX_LTDC_Init+0xfc>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80046b4:	4b22      	ldr	r3, [pc, #136]	@ (8004740 <MX_LTDC_Init+0xfc>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	hltdc.Init.Backcolor.Red = 0;
 80046bc:	4b20      	ldr	r3, [pc, #128]	@ (8004740 <MX_LTDC_Init+0xfc>)
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80046c4:	481e      	ldr	r0, [pc, #120]	@ (8004740 <MX_LTDC_Init+0xfc>)
 80046c6:	f008 fc7b 	bl	800cfc0 <HAL_LTDC_Init>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <MX_LTDC_Init+0x90>
	{
		Error_Handler();
 80046d0:	f001 fbe8 	bl	8005ea4 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 80046d4:	2300      	movs	r3, #0
 80046d6:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 80046d8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80046dc:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 80046e2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80046e6:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80046e8:	2302      	movs	r3, #2
 80046ea:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 80046ec:	23ff      	movs	r3, #255	@ 0xff
 80046ee:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 80046f0:	2300      	movs	r3, #0
 80046f2:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80046f4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80046f8:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80046fa:	2307      	movs	r3, #7
 80046fc:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 80046fe:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8004702:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.ImageWidth = 480;
 8004704:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8004708:	62fb      	str	r3, [r7, #44]	@ 0x2c
	pLayerCfg.ImageHeight = 272;
 800470a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800470e:	633b      	str	r3, [r7, #48]	@ 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8004710:	2300      	movs	r3, #0
 8004712:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	pLayerCfg.Backcolor.Green = 0;
 8004716:	2300      	movs	r3, #0
 8004718:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	pLayerCfg.Backcolor.Red = 0;
 800471c:	2300      	movs	r3, #0
 800471e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8004722:	1d3b      	adds	r3, r7, #4
 8004724:	2200      	movs	r2, #0
 8004726:	4619      	mov	r1, r3
 8004728:	4805      	ldr	r0, [pc, #20]	@ (8004740 <MX_LTDC_Init+0xfc>)
 800472a:	f008 fddb 	bl	800d2e4 <HAL_LTDC_ConfigLayer>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <MX_LTDC_Init+0xf4>
	{
		Error_Handler();
 8004734:	f001 fbb6 	bl	8005ea4 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */
}
 8004738:	bf00      	nop
 800473a:	3738      	adds	r7, #56	@ 0x38
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	200004b8 	.word	0x200004b8
 8004744:	40016800 	.word	0x40016800

08004748 <MX_SAI2_Init>:
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	af00      	add	r7, sp, #0
	/* USER CODE END SAI2_Init 0 */

	/* USER CODE BEGIN SAI2_Init 1 */

	/* USER CODE END SAI2_Init 1 */
	hsai_BlockA2.Instance = SAI2_Block_A;
 800474c:	4b4e      	ldr	r3, [pc, #312]	@ (8004888 <MX_SAI2_Init+0x140>)
 800474e:	4a4f      	ldr	r2, [pc, #316]	@ (800488c <MX_SAI2_Init+0x144>)
 8004750:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8004752:	4b4d      	ldr	r3, [pc, #308]	@ (8004888 <MX_SAI2_Init+0x140>)
 8004754:	2200      	movs	r2, #0
 8004756:	631a      	str	r2, [r3, #48]	@ 0x30
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8004758:	4b4b      	ldr	r3, [pc, #300]	@ (8004888 <MX_SAI2_Init+0x140>)
 800475a:	2200      	movs	r2, #0
 800475c:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800475e:	4b4a      	ldr	r3, [pc, #296]	@ (8004888 <MX_SAI2_Init+0x140>)
 8004760:	2240      	movs	r2, #64	@ 0x40
 8004762:	635a      	str	r2, [r3, #52]	@ 0x34
	hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004764:	4b48      	ldr	r3, [pc, #288]	@ (8004888 <MX_SAI2_Init+0x140>)
 8004766:	2200      	movs	r2, #0
 8004768:	639a      	str	r2, [r3, #56]	@ 0x38
	hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800476a:	4b47      	ldr	r3, [pc, #284]	@ (8004888 <MX_SAI2_Init+0x140>)
 800476c:	2200      	movs	r2, #0
 800476e:	63da      	str	r2, [r3, #60]	@ 0x3c
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8004770:	4b45      	ldr	r3, [pc, #276]	@ (8004888 <MX_SAI2_Init+0x140>)
 8004772:	2200      	movs	r2, #0
 8004774:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8004776:	4b44      	ldr	r3, [pc, #272]	@ (8004888 <MX_SAI2_Init+0x140>)
 8004778:	2200      	movs	r2, #0
 800477a:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800477c:	4b42      	ldr	r3, [pc, #264]	@ (8004888 <MX_SAI2_Init+0x140>)
 800477e:	2200      	movs	r2, #0
 8004780:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8004782:	4b41      	ldr	r3, [pc, #260]	@ (8004888 <MX_SAI2_Init+0x140>)
 8004784:	2200      	movs	r2, #0
 8004786:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8004788:	4b3f      	ldr	r3, [pc, #252]	@ (8004888 <MX_SAI2_Init+0x140>)
 800478a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800478e:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8004790:	4b3d      	ldr	r3, [pc, #244]	@ (8004888 <MX_SAI2_Init+0x140>)
 8004792:	2200      	movs	r2, #0
 8004794:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8004796:	4b3c      	ldr	r3, [pc, #240]	@ (8004888 <MX_SAI2_Init+0x140>)
 8004798:	2200      	movs	r2, #0
 800479a:	625a      	str	r2, [r3, #36]	@ 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800479c:	4b3a      	ldr	r3, [pc, #232]	@ (8004888 <MX_SAI2_Init+0x140>)
 800479e:	2200      	movs	r2, #0
 80047a0:	629a      	str	r2, [r3, #40]	@ 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80047a2:	4b39      	ldr	r3, [pc, #228]	@ (8004888 <MX_SAI2_Init+0x140>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	62da      	str	r2, [r3, #44]	@ 0x2c
	hsai_BlockA2.FrameInit.FrameLength = 8;
 80047a8:	4b37      	ldr	r3, [pc, #220]	@ (8004888 <MX_SAI2_Init+0x140>)
 80047aa:	2208      	movs	r2, #8
 80047ac:	641a      	str	r2, [r3, #64]	@ 0x40
	hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80047ae:	4b36      	ldr	r3, [pc, #216]	@ (8004888 <MX_SAI2_Init+0x140>)
 80047b0:	2201      	movs	r2, #1
 80047b2:	645a      	str	r2, [r3, #68]	@ 0x44
	hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80047b4:	4b34      	ldr	r3, [pc, #208]	@ (8004888 <MX_SAI2_Init+0x140>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	649a      	str	r2, [r3, #72]	@ 0x48
	hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80047ba:	4b33      	ldr	r3, [pc, #204]	@ (8004888 <MX_SAI2_Init+0x140>)
 80047bc:	2200      	movs	r2, #0
 80047be:	64da      	str	r2, [r3, #76]	@ 0x4c
	hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80047c0:	4b31      	ldr	r3, [pc, #196]	@ (8004888 <MX_SAI2_Init+0x140>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	651a      	str	r2, [r3, #80]	@ 0x50
	hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80047c6:	4b30      	ldr	r3, [pc, #192]	@ (8004888 <MX_SAI2_Init+0x140>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	655a      	str	r2, [r3, #84]	@ 0x54
	hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80047cc:	4b2e      	ldr	r3, [pc, #184]	@ (8004888 <MX_SAI2_Init+0x140>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	659a      	str	r2, [r3, #88]	@ 0x58
	hsai_BlockA2.SlotInit.SlotNumber = 1;
 80047d2:	4b2d      	ldr	r3, [pc, #180]	@ (8004888 <MX_SAI2_Init+0x140>)
 80047d4:	2201      	movs	r2, #1
 80047d6:	65da      	str	r2, [r3, #92]	@ 0x5c
	hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80047d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004888 <MX_SAI2_Init+0x140>)
 80047da:	2200      	movs	r2, #0
 80047dc:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80047de:	482a      	ldr	r0, [pc, #168]	@ (8004888 <MX_SAI2_Init+0x140>)
 80047e0:	f00a fabe 	bl	800ed60 <HAL_SAI_Init>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <MX_SAI2_Init+0xa6>
	{
		Error_Handler();
 80047ea:	f001 fb5b 	bl	8005ea4 <Error_Handler>
	}
	hsai_BlockB2.Instance = SAI2_Block_B;
 80047ee:	4b28      	ldr	r3, [pc, #160]	@ (8004890 <MX_SAI2_Init+0x148>)
 80047f0:	4a28      	ldr	r2, [pc, #160]	@ (8004894 <MX_SAI2_Init+0x14c>)
 80047f2:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80047f4:	4b26      	ldr	r3, [pc, #152]	@ (8004890 <MX_SAI2_Init+0x148>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	631a      	str	r2, [r3, #48]	@ 0x30
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80047fa:	4b25      	ldr	r3, [pc, #148]	@ (8004890 <MX_SAI2_Init+0x148>)
 80047fc:	2203      	movs	r2, #3
 80047fe:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8004800:	4b23      	ldr	r3, [pc, #140]	@ (8004890 <MX_SAI2_Init+0x148>)
 8004802:	2240      	movs	r2, #64	@ 0x40
 8004804:	635a      	str	r2, [r3, #52]	@ 0x34
	hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004806:	4b22      	ldr	r3, [pc, #136]	@ (8004890 <MX_SAI2_Init+0x148>)
 8004808:	2200      	movs	r2, #0
 800480a:	639a      	str	r2, [r3, #56]	@ 0x38
	hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800480c:	4b20      	ldr	r3, [pc, #128]	@ (8004890 <MX_SAI2_Init+0x148>)
 800480e:	2200      	movs	r2, #0
 8004810:	63da      	str	r2, [r3, #60]	@ 0x3c
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8004812:	4b1f      	ldr	r3, [pc, #124]	@ (8004890 <MX_SAI2_Init+0x148>)
 8004814:	2201      	movs	r2, #1
 8004816:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8004818:	4b1d      	ldr	r3, [pc, #116]	@ (8004890 <MX_SAI2_Init+0x148>)
 800481a:	2200      	movs	r2, #0
 800481c:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800481e:	4b1c      	ldr	r3, [pc, #112]	@ (8004890 <MX_SAI2_Init+0x148>)
 8004820:	2200      	movs	r2, #0
 8004822:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8004824:	4b1a      	ldr	r3, [pc, #104]	@ (8004890 <MX_SAI2_Init+0x148>)
 8004826:	2200      	movs	r2, #0
 8004828:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800482a:	4b19      	ldr	r3, [pc, #100]	@ (8004890 <MX_SAI2_Init+0x148>)
 800482c:	2200      	movs	r2, #0
 800482e:	625a      	str	r2, [r3, #36]	@ 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8004830:	4b17      	ldr	r3, [pc, #92]	@ (8004890 <MX_SAI2_Init+0x148>)
 8004832:	2200      	movs	r2, #0
 8004834:	629a      	str	r2, [r3, #40]	@ 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8004836:	4b16      	ldr	r3, [pc, #88]	@ (8004890 <MX_SAI2_Init+0x148>)
 8004838:	2200      	movs	r2, #0
 800483a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hsai_BlockB2.FrameInit.FrameLength = 8;
 800483c:	4b14      	ldr	r3, [pc, #80]	@ (8004890 <MX_SAI2_Init+0x148>)
 800483e:	2208      	movs	r2, #8
 8004840:	641a      	str	r2, [r3, #64]	@ 0x40
	hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8004842:	4b13      	ldr	r3, [pc, #76]	@ (8004890 <MX_SAI2_Init+0x148>)
 8004844:	2201      	movs	r2, #1
 8004846:	645a      	str	r2, [r3, #68]	@ 0x44
	hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8004848:	4b11      	ldr	r3, [pc, #68]	@ (8004890 <MX_SAI2_Init+0x148>)
 800484a:	2200      	movs	r2, #0
 800484c:	649a      	str	r2, [r3, #72]	@ 0x48
	hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800484e:	4b10      	ldr	r3, [pc, #64]	@ (8004890 <MX_SAI2_Init+0x148>)
 8004850:	2200      	movs	r2, #0
 8004852:	64da      	str	r2, [r3, #76]	@ 0x4c
	hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8004854:	4b0e      	ldr	r3, [pc, #56]	@ (8004890 <MX_SAI2_Init+0x148>)
 8004856:	2200      	movs	r2, #0
 8004858:	651a      	str	r2, [r3, #80]	@ 0x50
	hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800485a:	4b0d      	ldr	r3, [pc, #52]	@ (8004890 <MX_SAI2_Init+0x148>)
 800485c:	2200      	movs	r2, #0
 800485e:	655a      	str	r2, [r3, #84]	@ 0x54
	hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004860:	4b0b      	ldr	r3, [pc, #44]	@ (8004890 <MX_SAI2_Init+0x148>)
 8004862:	2200      	movs	r2, #0
 8004864:	659a      	str	r2, [r3, #88]	@ 0x58
	hsai_BlockB2.SlotInit.SlotNumber = 1;
 8004866:	4b0a      	ldr	r3, [pc, #40]	@ (8004890 <MX_SAI2_Init+0x148>)
 8004868:	2201      	movs	r2, #1
 800486a:	65da      	str	r2, [r3, #92]	@ 0x5c
	hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800486c:	4b08      	ldr	r3, [pc, #32]	@ (8004890 <MX_SAI2_Init+0x148>)
 800486e:	2200      	movs	r2, #0
 8004870:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8004872:	4807      	ldr	r0, [pc, #28]	@ (8004890 <MX_SAI2_Init+0x148>)
 8004874:	f00a fa74 	bl	800ed60 <HAL_SAI_Init>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <MX_SAI2_Init+0x13a>
	{
		Error_Handler();
 800487e:	f001 fb11 	bl	8005ea4 <Error_Handler>
	}
	/* USER CODE BEGIN SAI2_Init 2 */

	/* USER CODE END SAI2_Init 2 */
}
 8004882:	bf00      	nop
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000560 	.word	0x20000560
 800488c:	40015c04 	.word	0x40015c04
 8004890:	200005e4 	.word	0x200005e4
 8004894:	40015c24 	.word	0x40015c24

08004898 <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 800489c:	4b0c      	ldr	r3, [pc, #48]	@ (80048d0 <MX_SDMMC1_SD_Init+0x38>)
 800489e:	4a0d      	ldr	r2, [pc, #52]	@ (80048d4 <MX_SDMMC1_SD_Init+0x3c>)
 80048a0:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80048a2:	4b0b      	ldr	r3, [pc, #44]	@ (80048d0 <MX_SDMMC1_SD_Init+0x38>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80048a8:	4b09      	ldr	r3, [pc, #36]	@ (80048d0 <MX_SDMMC1_SD_Init+0x38>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80048ae:	4b08      	ldr	r3, [pc, #32]	@ (80048d0 <MX_SDMMC1_SD_Init+0x38>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80048b4:	4b06      	ldr	r3, [pc, #24]	@ (80048d0 <MX_SDMMC1_SD_Init+0x38>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80048ba:	4b05      	ldr	r3, [pc, #20]	@ (80048d0 <MX_SDMMC1_SD_Init+0x38>)
 80048bc:	2200      	movs	r2, #0
 80048be:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 0;
 80048c0:	4b03      	ldr	r3, [pc, #12]	@ (80048d0 <MX_SDMMC1_SD_Init+0x38>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */
}
 80048c6:	bf00      	nop
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	20000728 	.word	0x20000728
 80048d4:	40012c00 	.word	0x40012c00

080048d8 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80048dc:	4b14      	ldr	r3, [pc, #80]	@ (8004930 <MX_USART1_UART_Init+0x58>)
 80048de:	4a15      	ldr	r2, [pc, #84]	@ (8004934 <MX_USART1_UART_Init+0x5c>)
 80048e0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80048e2:	4b13      	ldr	r3, [pc, #76]	@ (8004930 <MX_USART1_UART_Init+0x58>)
 80048e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80048e8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80048ea:	4b11      	ldr	r3, [pc, #68]	@ (8004930 <MX_USART1_UART_Init+0x58>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80048f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004930 <MX_USART1_UART_Init+0x58>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80048f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004930 <MX_USART1_UART_Init+0x58>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80048fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004930 <MX_USART1_UART_Init+0x58>)
 80048fe:	220c      	movs	r2, #12
 8004900:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004902:	4b0b      	ldr	r3, [pc, #44]	@ (8004930 <MX_USART1_UART_Init+0x58>)
 8004904:	2200      	movs	r2, #0
 8004906:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004908:	4b09      	ldr	r3, [pc, #36]	@ (8004930 <MX_USART1_UART_Init+0x58>)
 800490a:	2200      	movs	r2, #0
 800490c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800490e:	4b08      	ldr	r3, [pc, #32]	@ (8004930 <MX_USART1_UART_Init+0x58>)
 8004910:	2200      	movs	r2, #0
 8004912:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004914:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <MX_USART1_UART_Init+0x58>)
 8004916:	2200      	movs	r2, #0
 8004918:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800491a:	4805      	ldr	r0, [pc, #20]	@ (8004930 <MX_USART1_UART_Init+0x58>)
 800491c:	f00c fa0a 	bl	8010d34 <HAL_UART_Init>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8004926:	f001 fabd 	bl	8005ea4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */
}
 800492a:	bf00      	nop
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	2000086c 	.word	0x2000086c
 8004934:	40011000 	.word	0x40011000

08004938 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800493e:	4b18      	ldr	r3, [pc, #96]	@ (80049a0 <MX_DMA_Init+0x68>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004942:	4a17      	ldr	r2, [pc, #92]	@ (80049a0 <MX_DMA_Init+0x68>)
 8004944:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004948:	6313      	str	r3, [r2, #48]	@ 0x30
 800494a:	4b15      	ldr	r3, [pc, #84]	@ (80049a0 <MX_DMA_Init+0x68>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004952:	607b      	str	r3, [r7, #4]
 8004954:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8004956:	2200      	movs	r2, #0
 8004958:	2105      	movs	r1, #5
 800495a:	203b      	movs	r0, #59	@ 0x3b
 800495c:	f006 fbe2 	bl	800b124 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004960:	203b      	movs	r0, #59	@ 0x3b
 8004962:	f006 fbfb 	bl	800b15c <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8004966:	2200      	movs	r2, #0
 8004968:	2105      	movs	r1, #5
 800496a:	203c      	movs	r0, #60	@ 0x3c
 800496c:	f006 fbda 	bl	800b124 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8004970:	203c      	movs	r0, #60	@ 0x3c
 8004972:	f006 fbf3 	bl	800b15c <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8004976:	2200      	movs	r2, #0
 8004978:	2105      	movs	r1, #5
 800497a:	2045      	movs	r0, #69	@ 0x45
 800497c:	f006 fbd2 	bl	800b124 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004980:	2045      	movs	r0, #69	@ 0x45
 8004982:	f006 fbeb 	bl	800b15c <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8004986:	2200      	movs	r2, #0
 8004988:	2105      	movs	r1, #5
 800498a:	2046      	movs	r0, #70	@ 0x46
 800498c:	f006 fbca 	bl	800b124 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8004990:	2046      	movs	r0, #70	@ 0x46
 8004992:	f006 fbe3 	bl	800b15c <HAL_NVIC_EnableIRQ>
}
 8004996:	bf00      	nop
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	40023800 	.word	0x40023800

080049a4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80049aa:	1d3b      	adds	r3, r7, #4
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	605a      	str	r2, [r3, #4]
 80049b2:	609a      	str	r2, [r3, #8]
 80049b4:	60da      	str	r2, [r3, #12]
 80049b6:	611a      	str	r2, [r3, #16]
 80049b8:	615a      	str	r2, [r3, #20]
 80049ba:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 80049bc:	4b3a      	ldr	r3, [pc, #232]	@ (8004aa8 <MX_FMC_Init+0x104>)
 80049be:	4a3b      	ldr	r2, [pc, #236]	@ (8004aac <MX_FMC_Init+0x108>)
 80049c0:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80049c2:	4b39      	ldr	r3, [pc, #228]	@ (8004aa8 <MX_FMC_Init+0x104>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80049c8:	4b37      	ldr	r3, [pc, #220]	@ (8004aa8 <MX_FMC_Init+0x104>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80049ce:	4b36      	ldr	r3, [pc, #216]	@ (8004aa8 <MX_FMC_Init+0x104>)
 80049d0:	2204      	movs	r2, #4
 80049d2:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80049d4:	4b34      	ldr	r3, [pc, #208]	@ (8004aa8 <MX_FMC_Init+0x104>)
 80049d6:	2210      	movs	r2, #16
 80049d8:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80049da:	4b33      	ldr	r3, [pc, #204]	@ (8004aa8 <MX_FMC_Init+0x104>)
 80049dc:	2240      	movs	r2, #64	@ 0x40
 80049de:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80049e0:	4b31      	ldr	r3, [pc, #196]	@ (8004aa8 <MX_FMC_Init+0x104>)
 80049e2:	2280      	movs	r2, #128	@ 0x80
 80049e4:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80049e6:	4b30      	ldr	r3, [pc, #192]	@ (8004aa8 <MX_FMC_Init+0x104>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80049ec:	4b2e      	ldr	r3, [pc, #184]	@ (8004aa8 <MX_FMC_Init+0x104>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80049f2:	4b2d      	ldr	r3, [pc, #180]	@ (8004aa8 <MX_FMC_Init+0x104>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	625a      	str	r2, [r3, #36]	@ 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80049f8:	4b2b      	ldr	r3, [pc, #172]	@ (8004aa8 <MX_FMC_Init+0x104>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	629a      	str	r2, [r3, #40]	@ 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 16;
 80049fe:	2310      	movs	r3, #16
 8004a00:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 16;
 8004a02:	2310      	movs	r3, #16
 8004a04:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 16;
 8004a06:	2310      	movs	r3, #16
 8004a08:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 16;
 8004a0a:	2310      	movs	r3, #16
 8004a0c:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 16;
 8004a0e:	2310      	movs	r3, #16
 8004a10:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 16;
 8004a12:	2310      	movs	r3, #16
 8004a14:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 16;
 8004a16:	2310      	movs	r3, #16
 8004a18:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8004a1a:	1d3b      	adds	r3, r7, #4
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4822      	ldr	r0, [pc, #136]	@ (8004aa8 <MX_FMC_Init+0x104>)
 8004a20:	f00b fe18 	bl	8010654 <HAL_SDRAM_Init>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <MX_FMC_Init+0x8a>
	{
		Error_Handler();
 8004a2a:	f001 fa3b 	bl	8005ea4 <Error_Handler>
	}

	/** Perform the SDRAM2 memory initialization sequence
	 */
	hsdram2.Instance = FMC_SDRAM_DEVICE;
 8004a2e:	4b20      	ldr	r3, [pc, #128]	@ (8004ab0 <MX_FMC_Init+0x10c>)
 8004a30:	4a1e      	ldr	r2, [pc, #120]	@ (8004aac <MX_FMC_Init+0x108>)
 8004a32:	601a      	str	r2, [r3, #0]
	/* hsdram2.Init */
	hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 8004a34:	4b1e      	ldr	r3, [pc, #120]	@ (8004ab0 <MX_FMC_Init+0x10c>)
 8004a36:	2201      	movs	r2, #1
 8004a38:	605a      	str	r2, [r3, #4]
	hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ab0 <MX_FMC_Init+0x10c>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	609a      	str	r2, [r3, #8]
	hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8004a40:	4b1b      	ldr	r3, [pc, #108]	@ (8004ab0 <MX_FMC_Init+0x10c>)
 8004a42:	2204      	movs	r2, #4
 8004a44:	60da      	str	r2, [r3, #12]
	hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8004a46:	4b1a      	ldr	r3, [pc, #104]	@ (8004ab0 <MX_FMC_Init+0x10c>)
 8004a48:	2210      	movs	r2, #16
 8004a4a:	611a      	str	r2, [r3, #16]
	hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004a4c:	4b18      	ldr	r3, [pc, #96]	@ (8004ab0 <MX_FMC_Init+0x10c>)
 8004a4e:	2240      	movs	r2, #64	@ 0x40
 8004a50:	615a      	str	r2, [r3, #20]
	hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8004a52:	4b17      	ldr	r3, [pc, #92]	@ (8004ab0 <MX_FMC_Init+0x10c>)
 8004a54:	2280      	movs	r2, #128	@ 0x80
 8004a56:	619a      	str	r2, [r3, #24]
	hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004a58:	4b15      	ldr	r3, [pc, #84]	@ (8004ab0 <MX_FMC_Init+0x10c>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	61da      	str	r2, [r3, #28]
	hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8004a5e:	4b14      	ldr	r3, [pc, #80]	@ (8004ab0 <MX_FMC_Init+0x10c>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	621a      	str	r2, [r3, #32]
	hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8004a64:	4b12      	ldr	r3, [pc, #72]	@ (8004ab0 <MX_FMC_Init+0x10c>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	625a      	str	r2, [r3, #36]	@ 0x24
	hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8004a6a:	4b11      	ldr	r3, [pc, #68]	@ (8004ab0 <MX_FMC_Init+0x10c>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	629a      	str	r2, [r3, #40]	@ 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 16;
 8004a70:	2310      	movs	r3, #16
 8004a72:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 16;
 8004a74:	2310      	movs	r3, #16
 8004a76:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 16;
 8004a78:	2310      	movs	r3, #16
 8004a7a:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 16;
 8004a7c:	2310      	movs	r3, #16
 8004a7e:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 16;
 8004a80:	2310      	movs	r3, #16
 8004a82:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 16;
 8004a84:	2310      	movs	r3, #16
 8004a86:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 16;
 8004a88:	2310      	movs	r3, #16
 8004a8a:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8004a8c:	1d3b      	adds	r3, r7, #4
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4807      	ldr	r0, [pc, #28]	@ (8004ab0 <MX_FMC_Init+0x10c>)
 8004a92:	f00b fddf 	bl	8010654 <HAL_SDRAM_Init>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <MX_FMC_Init+0xfc>
	{
		Error_Handler();
 8004a9c:	f001 fa02 	bl	8005ea4 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 8004aa0:	bf00      	nop
 8004aa2:	3720      	adds	r7, #32
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	200008f4 	.word	0x200008f4
 8004aac:	a0000140 	.word	0xa0000140
 8004ab0:	20000928 	.word	0x20000928

08004ab4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b090      	sub	sp, #64	@ 0x40
 8004ab8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	605a      	str	r2, [r3, #4]
 8004ac4:	609a      	str	r2, [r3, #8]
 8004ac6:	60da      	str	r2, [r3, #12]
 8004ac8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8004aca:	4bae      	ldr	r3, [pc, #696]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ace:	4aad      	ldr	r2, [pc, #692]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004ad0:	f043 0310 	orr.w	r3, r3, #16
 8004ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ad6:	4bab      	ldr	r3, [pc, #684]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ada:	f003 0310 	and.w	r3, r3, #16
 8004ade:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8004ae2:	4ba8      	ldr	r3, [pc, #672]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae6:	4aa7      	ldr	r2, [pc, #668]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004ae8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8004aee:	4ba5      	ldr	r3, [pc, #660]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004afa:	4ba2      	ldr	r3, [pc, #648]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afe:	4aa1      	ldr	r2, [pc, #644]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004b00:	f043 0302 	orr.w	r3, r3, #2
 8004b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b06:	4b9f      	ldr	r3, [pc, #636]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	623b      	str	r3, [r7, #32]
 8004b10:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8004b12:	4b9c      	ldr	r3, [pc, #624]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b16:	4a9b      	ldr	r2, [pc, #620]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004b18:	f043 0308 	orr.w	r3, r3, #8
 8004b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b1e:	4b99      	ldr	r3, [pc, #612]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	61fb      	str	r3, [r7, #28]
 8004b28:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004b2a:	4b96      	ldr	r3, [pc, #600]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2e:	4a95      	ldr	r2, [pc, #596]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004b30:	f043 0304 	orr.w	r3, r3, #4
 8004b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b36:	4b93      	ldr	r3, [pc, #588]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	61bb      	str	r3, [r7, #24]
 8004b40:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004b42:	4b90      	ldr	r3, [pc, #576]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b46:	4a8f      	ldr	r2, [pc, #572]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004b48:	f043 0301 	orr.w	r3, r3, #1
 8004b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b4e:	4b8d      	ldr	r3, [pc, #564]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8004b5a:	4b8a      	ldr	r3, [pc, #552]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b5e:	4a89      	ldr	r2, [pc, #548]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004b60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b66:	4b87      	ldr	r3, [pc, #540]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b6e:	613b      	str	r3, [r7, #16]
 8004b70:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8004b72:	4b84      	ldr	r3, [pc, #528]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b76:	4a83      	ldr	r2, [pc, #524]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004b78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b7e:	4b81      	ldr	r3, [pc, #516]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8004b8a:	4b7e      	ldr	r3, [pc, #504]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8e:	4a7d      	ldr	r2, [pc, #500]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004b90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b96:	4b7b      	ldr	r3, [pc, #492]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b9e:	60bb      	str	r3, [r7, #8]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8004ba2:	4b78      	ldr	r3, [pc, #480]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba6:	4a77      	ldr	r2, [pc, #476]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004ba8:	f043 0320 	orr.w	r3, r3, #32
 8004bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bae:	4b75      	ldr	r3, [pc, #468]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	607b      	str	r3, [r7, #4]
 8004bb8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8004bba:	4b72      	ldr	r3, [pc, #456]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bbe:	4a71      	ldr	r2, [pc, #452]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bc6:	4b6f      	ldr	r3, [pc, #444]	@ (8004d84 <MX_GPIO_Init+0x2d0>)
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bce:	603b      	str	r3, [r7, #0]
 8004bd0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	2120      	movs	r1, #32
 8004bd6:	486c      	ldr	r0, [pc, #432]	@ (8004d88 <MX_GPIO_Init+0x2d4>)
 8004bd8:	f007 fc2e 	bl	800c438 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin, GPIO_PIN_RESET);
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f241 010c 	movw	r1, #4108	@ 0x100c
 8004be2:	486a      	ldr	r0, [pc, #424]	@ (8004d8c <MX_GPIO_Init+0x2d8>)
 8004be4:	f007 fc28 	bl	800c438 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8004be8:	2200      	movs	r2, #0
 8004bea:	2108      	movs	r1, #8
 8004bec:	4868      	ldr	r0, [pc, #416]	@ (8004d90 <MX_GPIO_Init+0x2dc>)
 8004bee:	f007 fc23 	bl	800c438 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin | LED2_Pin | LED1_Pin | LED3_Pin, GPIO_PIN_RESET);
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 8004bf8:	4866      	ldr	r0, [pc, #408]	@ (8004d94 <MX_GPIO_Init+0x2e0>)
 8004bfa:	f007 fc1d 	bl	800c438 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin, GPIO_PIN_RESET);
 8004bfe:	2200      	movs	r2, #0
 8004c00:	21c8      	movs	r1, #200	@ 0xc8
 8004c02:	4865      	ldr	r0, [pc, #404]	@ (8004d98 <MX_GPIO_Init+0x2e4>)
 8004c04:	f007 fc18 	bl	800c438 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8004c08:	2308      	movs	r3, #8
 8004c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c10:	2300      	movs	r3, #0
 8004c12:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004c14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4860      	ldr	r0, [pc, #384]	@ (8004d9c <MX_GPIO_Init+0x2e8>)
 8004c1c:	f007 f93c 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8004c20:	2304      	movs	r3, #4
 8004c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c24:	2302      	movs	r3, #2
 8004c26:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004c30:	2309      	movs	r3, #9
 8004c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8004c34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4858      	ldr	r0, [pc, #352]	@ (8004d9c <MX_GPIO_Init+0x2e8>)
 8004c3c:	f007 f92c 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 8004c40:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8004c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c46:	2302      	movs	r3, #2
 8004c48:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c52:	230b      	movs	r3, #11
 8004c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004c56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	484e      	ldr	r0, [pc, #312]	@ (8004d98 <MX_GPIO_Init+0x2e4>)
 8004c5e:	f007 f91b 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin | ARDUINO_SDA_D14_Pin;
 8004c62:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c68:	2312      	movs	r3, #18
 8004c6a:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c70:	2300      	movs	r3, #0
 8004c72:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c74:	2304      	movs	r3, #4
 8004c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4848      	ldr	r0, [pc, #288]	@ (8004da0 <MX_GPIO_Init+0x2ec>)
 8004c80:	f007 f90a 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8004c84:	2310      	movs	r3, #16
 8004c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c88:	2302      	movs	r3, #2
 8004c8a:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c90:	2300      	movs	r3, #0
 8004c92:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c94:	2302      	movs	r3, #2
 8004c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8004c98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4840      	ldr	r0, [pc, #256]	@ (8004da0 <MX_GPIO_Init+0x2ec>)
 8004ca0:	f007 f8fa 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8004ca4:	2380      	movs	r3, #128	@ 0x80
 8004ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca8:	2302      	movs	r3, #2
 8004caa:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cac:	2300      	movs	r3, #0
 8004cae:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8004cb4:	2308      	movs	r3, #8
 8004cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8004cb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4832      	ldr	r0, [pc, #200]	@ (8004d88 <MX_GPIO_Init+0x2d4>)
 8004cc0:	f007 f8ea 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8004cc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cca:	2302      	movs	r3, #2
 8004ccc:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8004cda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4830      	ldr	r0, [pc, #192]	@ (8004da4 <MX_GPIO_Init+0x2f0>)
 8004ce2:	f007 f8d9 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
	GPIO_InitStruct.Pin = DCMI_D6_Pin | DCMI_D7_Pin;
 8004ce6:	2360      	movs	r3, #96	@ 0x60
 8004ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cea:	2302      	movs	r3, #2
 8004cec:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004cf6:	230d      	movs	r3, #13
 8004cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004cfa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4826      	ldr	r0, [pc, #152]	@ (8004d9c <MX_GPIO_Init+0x2e8>)
 8004d02:	f007 f8c9 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8004d06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d10:	2300      	movs	r3, #0
 8004d12:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004d14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4823      	ldr	r0, [pc, #140]	@ (8004da8 <MX_GPIO_Init+0x2f4>)
 8004d1c:	f007 f8bc 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 8004d20:	2340      	movs	r3, #64	@ 0x40
 8004d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004d24:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8004d28:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8004d2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d32:	4619      	mov	r1, r3
 8004d34:	4814      	ldr	r0, [pc, #80]	@ (8004d88 <MX_GPIO_Init+0x2d4>)
 8004d36:	f007 f8af 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 8004d3a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d40:	2302      	movs	r3, #2
 8004d42:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d44:	2300      	movs	r3, #0
 8004d46:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004d4c:	230a      	movs	r3, #10
 8004d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d54:	4619      	mov	r1, r3
 8004d56:	4813      	ldr	r0, [pc, #76]	@ (8004da4 <MX_GPIO_Init+0x2f0>)
 8004d58:	f007 f89e 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8004d5c:	2320      	movs	r3, #32
 8004d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d60:	2301      	movs	r3, #1
 8004d62:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d64:	2300      	movs	r3, #0
 8004d66:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004d6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d70:	4619      	mov	r1, r3
 8004d72:	4805      	ldr	r0, [pc, #20]	@ (8004d88 <MX_GPIO_Init+0x2d4>)
 8004d74:	f007 f890 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_D5_Pin */
	GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8004d78:	2308      	movs	r3, #8
 8004d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d80:	2300      	movs	r3, #0
 8004d82:	e013      	b.n	8004dac <MX_GPIO_Init+0x2f8>
 8004d84:	40023800 	.word	0x40023800
 8004d88:	40020c00 	.word	0x40020c00
 8004d8c:	40022000 	.word	0x40022000
 8004d90:	40022800 	.word	0x40022800
 8004d94:	40021c00 	.word	0x40021c00
 8004d98:	40021800 	.word	0x40021800
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	40020400 	.word	0x40020400
 8004da4:	40020000 	.word	0x40020000
 8004da8:	40022400 	.word	0x40022400
 8004dac:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dae:	2300      	movs	r3, #0
 8004db0:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004db2:	230d      	movs	r3, #13
 8004db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8004db6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004dba:	4619      	mov	r1, r3
 8004dbc:	48bb      	ldr	r0, [pc, #748]	@ (80050ac <MX_GPIO_Init+0x5f8>)
 8004dbe:	f007 f86b 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 8004dc2:	f241 030c 	movw	r3, #4108	@ 0x100c
 8004dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004dd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004dd8:	4619      	mov	r1, r3
 8004dda:	48b5      	ldr	r0, [pc, #724]	@ (80050b0 <MX_GPIO_Init+0x5fc>)
 8004ddc:	f007 f85c 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8004de0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004de6:	2300      	movs	r3, #0
 8004de8:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8004dee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004df2:	4619      	mov	r1, r3
 8004df4:	48af      	ldr	r0, [pc, #700]	@ (80050b4 <MX_GPIO_Init+0x600>)
 8004df6:	f007 f84f 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8004dfa:	2308      	movs	r3, #8
 8004dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e06:	2300      	movs	r3, #0
 8004e08:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8004e0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e0e:	4619      	mov	r1, r3
 8004e10:	48a9      	ldr	r0, [pc, #676]	@ (80050b8 <MX_GPIO_Init+0x604>)
 8004e12:	f007 f841 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_VSYNC_Pin */
	GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8004e16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e20:	2300      	movs	r3, #0
 8004e22:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e24:	2300      	movs	r3, #0
 8004e26:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004e28:	230d      	movs	r3, #13
 8004e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8004e2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e30:	4619      	mov	r1, r3
 8004e32:	48a2      	ldr	r0, [pc, #648]	@ (80050bc <MX_GPIO_Init+0x608>)
 8004e34:	f007 f830 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8004e38:	2310      	movs	r3, #16
 8004e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e40:	2300      	movs	r3, #0
 8004e42:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004e44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4898      	ldr	r0, [pc, #608]	@ (80050ac <MX_GPIO_Init+0x5f8>)
 8004e4c:	f007 f824 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 8004e50:	f248 0304 	movw	r3, #32772	@ 0x8004
 8004e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e56:	2300      	movs	r3, #0
 8004e58:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004e5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e62:	4619      	mov	r1, r3
 8004e64:	4896      	ldr	r0, [pc, #600]	@ (80050c0 <MX_GPIO_Init+0x60c>)
 8004e66:	f007 f817 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e6e:	2302      	movs	r3, #2
 8004e70:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e72:	2300      	movs	r3, #0
 8004e74:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e76:	2300      	movs	r3, #0
 8004e78:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004e7a:	2305      	movs	r3, #5
 8004e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8004e7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e82:	4619      	mov	r1, r3
 8004e84:	488a      	ldr	r0, [pc, #552]	@ (80050b0 <MX_GPIO_Init+0x5fc>)
 8004e86:	f007 f807 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_PWR_EN_Pin LED2_Pin LED1_Pin LED3_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin | LED2_Pin | LED1_Pin | LED3_Pin;
 8004e8a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e90:	2301      	movs	r3, #1
 8004e92:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e94:	2300      	movs	r3, #0
 8004e96:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004e9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	4887      	ldr	r0, [pc, #540]	@ (80050c0 <MX_GPIO_Init+0x60c>)
 8004ea4:	f006 fff8 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D4_Pin DCMI_D0_Pin */
	GPIO_InitStruct.Pin = DCMI_D4_Pin | DCMI_D0_Pin;
 8004ea8:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8004eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eae:	2302      	movs	r3, #2
 8004eb0:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004eba:	230d      	movs	r3, #13
 8004ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004ebe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	487e      	ldr	r0, [pc, #504]	@ (80050c0 <MX_GPIO_Init+0x60c>)
 8004ec6:	f006 ffe7 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ece:	2302      	movs	r3, #2
 8004ed0:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004eda:	2302      	movs	r3, #2
 8004edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8004ede:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4872      	ldr	r0, [pc, #456]	@ (80050b0 <MX_GPIO_Init+0x5fc>)
 8004ee6:	f006 ffd7 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8004eea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004efc:	2301      	movs	r3, #1
 8004efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8004f00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f04:	4619      	mov	r1, r3
 8004f06:	486f      	ldr	r0, [pc, #444]	@ (80050c4 <MX_GPIO_Init+0x610>)
 8004f08:	f006 ffc6 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 8004f0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004f12:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8004f16:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8004f1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f20:	4619      	mov	r1, r3
 8004f22:	4863      	ldr	r0, [pc, #396]	@ (80050b0 <MX_GPIO_Init+0x5fc>)
 8004f24:	f006 ffb8 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
	GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 8004f28:	23c0      	movs	r3, #192	@ 0xc0
 8004f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f34:	2303      	movs	r3, #3
 8004f36:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004f38:	2308      	movs	r3, #8
 8004f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f40:	4619      	mov	r1, r3
 8004f42:	485c      	ldr	r0, [pc, #368]	@ (80050b4 <MX_GPIO_Init+0x600>)
 8004f44:	f006 ffa8 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8004f48:	2310      	movs	r3, #16
 8004f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f50:	2300      	movs	r3, #0
 8004f52:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f54:	2303      	movs	r3, #3
 8004f56:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8004f58:	230a      	movs	r3, #10
 8004f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8004f5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f60:	4619      	mov	r1, r3
 8004f62:	4857      	ldr	r0, [pc, #348]	@ (80050c0 <MX_GPIO_Init+0x60c>)
 8004f64:	f006 ff98 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 8004f68:	23c8      	movs	r3, #200	@ 0xc8
 8004f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f70:	2300      	movs	r3, #0
 8004f72:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f74:	2300      	movs	r3, #0
 8004f76:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004f78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	484f      	ldr	r0, [pc, #316]	@ (80050bc <MX_GPIO_Init+0x608>)
 8004f80:	f006 ff8a 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin ULPI_D2_Pin
							 ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin | ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
 8004f84:	f643 4303 	movw	r3, #15363	@ 0x3c03
 8004f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f92:	2303      	movs	r3, #3
 8004f94:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8004f96:	230a      	movs	r3, #10
 8004f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	4849      	ldr	r0, [pc, #292]	@ (80050c8 <MX_GPIO_Init+0x614>)
 8004fa2:	f006 ff79 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 8004fa6:	2305      	movs	r3, #5
 8004fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004faa:	2302      	movs	r3, #2
 8004fac:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8004fb6:	230a      	movs	r3, #10
 8004fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	483c      	ldr	r0, [pc, #240]	@ (80050b4 <MX_GPIO_Init+0x600>)
 8004fc2:	f006 ff69 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8004fc6:	2332      	movs	r3, #50	@ 0x32
 8004fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fca:	2302      	movs	r3, #2
 8004fcc:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004fd6:	230b      	movs	r3, #11
 8004fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4834      	ldr	r0, [pc, #208]	@ (80050b4 <MX_GPIO_Init+0x600>)
 8004fe2:	f006 ff59 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004fe6:	2304      	movs	r3, #4
 8004fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fea:	2302      	movs	r3, #2
 8004fec:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004ff6:	2309      	movs	r3, #9
 8004ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ffa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ffe:	4619      	mov	r1, r3
 8005000:	4831      	ldr	r0, [pc, #196]	@ (80050c8 <MX_GPIO_Init+0x614>)
 8005002:	f006 ff49 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin | QSPI_D3_Pin | QSPI_D0_Pin;
 8005006:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800500a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800500c:	2302      	movs	r3, #2
 800500e:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005010:	2300      	movs	r3, #0
 8005012:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005014:	2303      	movs	r3, #3
 8005016:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8005018:	2309      	movs	r3, #9
 800501a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800501c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005020:	4619      	mov	r1, r3
 8005022:	4822      	ldr	r0, [pc, #136]	@ (80050ac <MX_GPIO_Init+0x5f8>)
 8005024:	f006 ff38 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8005028:	2304      	movs	r3, #4
 800502a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800502c:	2300      	movs	r3, #0
 800502e:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005030:	2300      	movs	r3, #0
 8005032:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8005034:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005038:	4619      	mov	r1, r3
 800503a:	4820      	ldr	r0, [pc, #128]	@ (80050bc <MX_GPIO_Init+0x608>)
 800503c:	f006 ff2c 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8005040:	2386      	movs	r3, #134	@ 0x86
 8005042:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005044:	2302      	movs	r3, #2
 8005046:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005048:	2300      	movs	r3, #0
 800504a:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800504c:	2303      	movs	r3, #3
 800504e:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005050:	230b      	movs	r3, #11
 8005052:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005054:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005058:	4619      	mov	r1, r3
 800505a:	481a      	ldr	r0, [pc, #104]	@ (80050c4 <MX_GPIO_Init+0x610>)
 800505c:	f006 ff1c 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
	GPIO_InitStruct.Pin = DCMI_HSYNC_Pin | GPIO_PIN_6;
 8005060:	2350      	movs	r3, #80	@ 0x50
 8005062:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005064:	2302      	movs	r3, #2
 8005066:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005068:	2300      	movs	r3, #0
 800506a:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800506c:	2300      	movs	r3, #0
 800506e:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8005070:	230d      	movs	r3, #13
 8005072:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005074:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005078:	4619      	mov	r1, r3
 800507a:	4812      	ldr	r0, [pc, #72]	@ (80050c4 <MX_GPIO_Init+0x610>)
 800507c:	f006 ff0c 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 8005080:	2328      	movs	r3, #40	@ 0x28
 8005082:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005084:	2302      	movs	r3, #2
 8005086:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005088:	2300      	movs	r3, #0
 800508a:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800508c:	2303      	movs	r3, #3
 800508e:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8005090:	230a      	movs	r3, #10
 8005092:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005094:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005098:	4619      	mov	r1, r3
 800509a:	480a      	ldr	r0, [pc, #40]	@ (80050c4 <MX_GPIO_Init+0x610>)
 800509c:	f006 fefc 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_SDA_Pin */
	GPIO_InitStruct.Pin = LCD_SDA_Pin;
 80050a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80050a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050a6:	2312      	movs	r3, #18
 80050a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80050aa:	e00f      	b.n	80050cc <MX_GPIO_Init+0x618>
 80050ac:	40020c00 	.word	0x40020c00
 80050b0:	40022000 	.word	0x40022000
 80050b4:	40020800 	.word	0x40020800
 80050b8:	40022800 	.word	0x40022800
 80050bc:	40021800 	.word	0x40021800
 80050c0:	40021c00 	.word	0x40021c00
 80050c4:	40020000 	.word	0x40020000
 80050c8:	40020400 	.word	0x40020400
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050cc:	2300      	movs	r3, #0
 80050ce:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050d0:	2303      	movs	r3, #3
 80050d2:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80050d4:	2304      	movs	r3, #4
 80050d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(LCD_SDA_GPIO_Port, &GPIO_InitStruct);
 80050d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80050dc:	4619      	mov	r1, r3
 80050de:	480c      	ldr	r0, [pc, #48]	@ (8005110 <MX_GPIO_Init+0x65c>)
 80050e0:	f006 feda 	bl	800be98 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 80050e4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80050e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ea:	2302      	movs	r3, #2
 80050ec:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050f2:	2300      	movs	r3, #0
 80050f4:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80050f6:	2305      	movs	r3, #5
 80050f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80050fe:	4619      	mov	r1, r3
 8005100:	4804      	ldr	r0, [pc, #16]	@ (8005114 <MX_GPIO_Init+0x660>)
 8005102:	f006 fec9 	bl	800be98 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8005106:	bf00      	nop
 8005108:	3740      	adds	r7, #64	@ 0x40
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	40021c00 	.word	0x40021c00
 8005114:	40020400 	.word	0x40020400

08005118 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/* USER CODE BEGIN 4 */

void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
	char a = 1;
 800511e:	2301      	movs	r3, #1
 8005120:	71fb      	strb	r3, [r7, #7]
	xQueueSendFromISR(WakeUpHandle, &a, 0);
 8005122:	4b05      	ldr	r3, [pc, #20]	@ (8005138 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	1df9      	adds	r1, r7, #7
 8005128:	2300      	movs	r3, #0
 800512a:	2200      	movs	r2, #0
 800512c:	f00e fa0c 	bl	8013548 <xQueueGenericSendFromISR>
}
 8005130:	bf00      	nop
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	20000970 	.word	0x20000970

0800513c <BSP_AUDIO_OUT_HalfTransfer_CallBack>:

void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
	char a = 0;
 8005142:	2300      	movs	r3, #0
 8005144:	71fb      	strb	r3, [r7, #7]
	xQueueSendFromISR(WakeUpHandle, &a, 0);
 8005146:	4b05      	ldr	r3, [pc, #20]	@ (800515c <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8005148:	6818      	ldr	r0, [r3, #0]
 800514a:	1df9      	adds	r1, r7, #7
 800514c:	2300      	movs	r3, #0
 800514e:	2200      	movs	r2, #0
 8005150:	f00e f9fa 	bl	8013548 <xQueueGenericSendFromISR>
}
 8005154:	bf00      	nop
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	20000970 	.word	0x20000970

08005160 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		updateJoystickDirection();
 8005168:	f7fe fdae 	bl	8003cc8 <updateJoystickDirection>
		osDelay(10);
 800516c:	200a      	movs	r0, #10
 800516e:	f00d fcb9 	bl	8012ae4 <osDelay>
		updateJoystickDirection();
 8005172:	bf00      	nop
 8005174:	e7f8      	b.n	8005168 <StartDefaultTask+0x8>
	...

08005178 <StartDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void const *argument)
{
 8005178:	b590      	push	{r4, r7, lr}
 800517a:	b0d1      	sub	sp, #324	@ 0x144
 800517c:	af00      	add	r7, sp, #0
 800517e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005182:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005186:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN StartDisplayTask */
	vTaskSuspend(manageBodyPartsHandle);
 8005188:	4bb8      	ldr	r3, [pc, #736]	@ (800546c <StartDisplayTask+0x2f4>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4618      	mov	r0, r3
 800518e:	f00f f995 	bl	80144bc <vTaskSuspend>
	vTaskSuspend(tsHandlerTaskHandle);
 8005192:	4bb7      	ldr	r3, [pc, #732]	@ (8005470 <StartDisplayTask+0x2f8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f00f f990 	bl	80144bc <vTaskSuspend>
	vTaskSuspend(playSongTaskHandle);
 800519c:	4bb5      	ldr	r3, [pc, #724]	@ (8005474 <StartDisplayTask+0x2fc>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f00f f98b 	bl	80144bc <vTaskSuspend>
	vTaskDelay(100);
 80051a6:	2064      	movs	r0, #100	@ 0x64
 80051a8:	f00f f950 	bl	801444c <vTaskDelay>

	uwInternelBuffer = (uint8_t *)0xC0260000;
 80051ac:	4bb2      	ldr	r3, [pc, #712]	@ (8005478 <StartDisplayTask+0x300>)
 80051ae:	4ab3      	ldr	r2, [pc, #716]	@ (800547c <StartDisplayTask+0x304>)
 80051b0:	601a      	str	r2, [r3, #0]
	uwInternelBuffer2 = (uint8_t *)0xC0360000;
 80051b2:	4bb3      	ldr	r3, [pc, #716]	@ (8005480 <StartDisplayTask+0x308>)
 80051b4:	4ab3      	ldr	r2, [pc, #716]	@ (8005484 <StartDisplayTask+0x30c>)
 80051b6:	601a      	str	r2, [r3, #0]

	uint8_t counter;

	/*##- Initialize the Directory Files pointers (heap) ###################*/
	for (counter = 0; counter < MAX_BMP_FILES; counter++)
 80051b8:	2300      	movs	r3, #0
 80051ba:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80051be:	e01e      	b.n	80051fe <StartDisplayTask+0x86>
	{
		pDirectoryFiles[counter] = malloc(MAX_BMP_FILE_NAME);
 80051c0:	f897 413f 	ldrb.w	r4, [r7, #319]	@ 0x13f
 80051c4:	200b      	movs	r0, #11
 80051c6:	f010 fd8d 	bl	8015ce4 <malloc>
 80051ca:	4603      	mov	r3, r0
 80051cc:	461a      	mov	r2, r3
 80051ce:	4bae      	ldr	r3, [pc, #696]	@ (8005488 <StartDisplayTask+0x310>)
 80051d0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		if (pDirectoryFiles[counter] == NULL)
 80051d4:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80051d8:	4aab      	ldr	r2, [pc, #684]	@ (8005488 <StartDisplayTask+0x310>)
 80051da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d108      	bne.n	80051f4 <StartDisplayTask+0x7c>
		{
			/* Set the Text Color */
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80051e2:	48aa      	ldr	r0, [pc, #680]	@ (800548c <StartDisplayTask+0x314>)
 80051e4:	f001 fd5c 	bl	8006ca0 <BSP_LCD_SetTextColor>

			BSP_LCD_DisplayStringAtLine(8,
 80051e8:	49a9      	ldr	r1, [pc, #676]	@ (8005490 <StartDisplayTask+0x318>)
 80051ea:	2008      	movs	r0, #8
 80051ec:	f001 feee 	bl	8006fcc <BSP_LCD_DisplayStringAtLine>
										(uint8_t *)"  Cannot allocate memory ");

			while (1)
 80051f0:	bf00      	nop
 80051f2:	e7fd      	b.n	80051f0 <StartDisplayTask+0x78>
	for (counter = 0; counter < MAX_BMP_FILES; counter++)
 80051f4:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80051f8:	3301      	adds	r3, #1
 80051fa:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80051fe:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8005202:	2b18      	cmp	r3, #24
 8005204:	d9dc      	bls.n	80051c0 <StartDisplayTask+0x48>
			}
		}
	}

	// Lancement de la musique
	initializeSD();
 8005206:	f7fe fedd 	bl	8003fc4 <initializeSD>
	loadWav(0);
 800520a:	2000      	movs	r0, #0
 800520c:	f7fe ff58 	bl	80040c0 <loadWav>

	vTaskResume(manageBodyPartsHandle);
 8005210:	4b96      	ldr	r3, [pc, #600]	@ (800546c <StartDisplayTask+0x2f4>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4618      	mov	r0, r3
 8005216:	f00f fa1b 	bl	8014650 <vTaskResume>
	vTaskResume(tsHandlerTaskHandle);
 800521a:	4b95      	ldr	r3, [pc, #596]	@ (8005470 <StartDisplayTask+0x2f8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4618      	mov	r0, r3
 8005220:	f00f fa16 	bl	8014650 <vTaskResume>
	vTaskResume(playSongTaskHandle);
 8005224:	4b93      	ldr	r3, [pc, #588]	@ (8005474 <StartDisplayTask+0x2fc>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4618      	mov	r0, r3
 800522a:	f00f fa11 	bl	8014650 <vTaskResume>

	vTaskDelay(1000);
 800522e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005232:	f00f f90b 	bl	801444c <vTaskDelay>
	/* Infinite loop */
	for (;;)
	{
		if ((gameOver && !lastMove) || gamePaused || !gameStarted)
 8005236:	4b97      	ldr	r3, [pc, #604]	@ (8005494 <StartDisplayTask+0x31c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <StartDisplayTask+0xce>
 800523e:	4b96      	ldr	r3, [pc, #600]	@ (8005498 <StartDisplayTask+0x320>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d007      	beq.n	8005256 <StartDisplayTask+0xde>
 8005246:	4b95      	ldr	r3, [pc, #596]	@ (800549c <StartDisplayTask+0x324>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d103      	bne.n	8005256 <StartDisplayTask+0xde>
 800524e:	4b94      	ldr	r3, [pc, #592]	@ (80054a0 <StartDisplayTask+0x328>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d110      	bne.n	8005278 <StartDisplayTask+0x100>
		{ // revoir la condition
			xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8005256:	4b93      	ldr	r3, [pc, #588]	@ (80054a4 <StartDisplayTask+0x32c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f04f 31ff 	mov.w	r1, #4294967295
 800525e:	4618      	mov	r0, r3
 8005260:	f00e fb96 	bl	8013990 <xQueueSemaphoreTake>
			displayGameStatus();
 8005264:	f7fe fe44 	bl	8003ef0 <displayGameStatus>
			xSemaphoreGive(displayMutexHandle);
 8005268:	4b8e      	ldr	r3, [pc, #568]	@ (80054a4 <StartDisplayTask+0x32c>)
 800526a:	6818      	ldr	r0, [r3, #0]
 800526c:	2300      	movs	r3, #0
 800526e:	2200      	movs	r2, #0
 8005270:	2100      	movs	r1, #0
 8005272:	f00e f85f 	bl	8013334 <xQueueGenericSend>
 8005276:	e22c      	b.n	80056d2 <StartDisplayTask+0x55a>
		}
		else
		{
			// On convertit la direction en texte
			char directionText[100];
			switch (direction)
 8005278:	4b8b      	ldr	r3, [pc, #556]	@ (80054a8 <StartDisplayTask+0x330>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	2b03      	cmp	r3, #3
 800527e:	d827      	bhi.n	80052d0 <StartDisplayTask+0x158>
 8005280:	a201      	add	r2, pc, #4	@ (adr r2, 8005288 <StartDisplayTask+0x110>)
 8005282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005286:	bf00      	nop
 8005288:	08005299 	.word	0x08005299
 800528c:	080052a7 	.word	0x080052a7
 8005290:	080052b5 	.word	0x080052b5
 8005294:	080052c3 	.word	0x080052c3
			{
			case Up:
				sprintf(directionText, (char *)"Direction: Up   ");
 8005298:	f107 0308 	add.w	r3, r7, #8
 800529c:	4983      	ldr	r1, [pc, #524]	@ (80054ac <StartDisplayTask+0x334>)
 800529e:	4618      	mov	r0, r3
 80052a0:	f010 fed6 	bl	8016050 <siprintf>
				break;
 80052a4:	e014      	b.n	80052d0 <StartDisplayTask+0x158>
			case Down:
				sprintf(directionText, (char *)"Direction: Down ");
 80052a6:	f107 0308 	add.w	r3, r7, #8
 80052aa:	4981      	ldr	r1, [pc, #516]	@ (80054b0 <StartDisplayTask+0x338>)
 80052ac:	4618      	mov	r0, r3
 80052ae:	f010 fecf 	bl	8016050 <siprintf>
				break;
 80052b2:	e00d      	b.n	80052d0 <StartDisplayTask+0x158>
			case Left:
				sprintf(directionText, (char *)"Direction: Left ");
 80052b4:	f107 0308 	add.w	r3, r7, #8
 80052b8:	497e      	ldr	r1, [pc, #504]	@ (80054b4 <StartDisplayTask+0x33c>)
 80052ba:	4618      	mov	r0, r3
 80052bc:	f010 fec8 	bl	8016050 <siprintf>
				break;
 80052c0:	e006      	b.n	80052d0 <StartDisplayTask+0x158>
			case Right:
				sprintf(directionText, (char *)"Direction: Right");
 80052c2:	f107 0308 	add.w	r3, r7, #8
 80052c6:	497c      	ldr	r1, [pc, #496]	@ (80054b8 <StartDisplayTask+0x340>)
 80052c8:	4618      	mov	r0, r3
 80052ca:	f010 fec1 	bl	8016050 <siprintf>
				break;
 80052ce:	bf00      	nop
			}
			// On convertit le score en texte
			char scoreText[100];
			sprintf(scoreText, (char *)"Score: %d", snakeSize);
 80052d0:	4b7a      	ldr	r3, [pc, #488]	@ (80054bc <StartDisplayTask+0x344>)
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	461a      	mov	r2, r3
 80052d6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80052da:	4979      	ldr	r1, [pc, #484]	@ (80054c0 <StartDisplayTask+0x348>)
 80052dc:	4618      	mov	r0, r3
 80052de:	f010 feb7 	bl	8016050 <siprintf>

			// On convertit la vitesse en texte
			char speedText[100];
			sprintf(speedText, (char *)"Speed: %d Hz", speed);
 80052e2:	4b78      	ldr	r3, [pc, #480]	@ (80054c4 <StartDisplayTask+0x34c>)
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80052ec:	4976      	ldr	r1, [pc, #472]	@ (80054c8 <StartDisplayTask+0x350>)
 80052ee:	4618      	mov	r0, r3
 80052f0:	f010 feae 	bl	8016050 <siprintf>

			xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 80052f4:	4b6b      	ldr	r3, [pc, #428]	@ (80054a4 <StartDisplayTask+0x32c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f04f 31ff 	mov.w	r1, #4294967295
 80052fc:	4618      	mov	r0, r3
 80052fe:	f00e fb47 	bl	8013990 <xQueueSemaphoreTake>
			BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8005302:	4872      	ldr	r0, [pc, #456]	@ (80054cc <StartDisplayTask+0x354>)
 8005304:	f001 fccc 	bl	8006ca0 <BSP_LCD_SetTextColor>
			BSP_LCD_DrawHLine(0, 8 * 32, BSP_LCD_GetXSize());
 8005308:	f001 fc32 	bl	8006b70 <BSP_LCD_GetXSize>
 800530c:	4603      	mov	r3, r0
 800530e:	b29b      	uxth	r3, r3
 8005310:	461a      	mov	r2, r3
 8005312:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005316:	2000      	movs	r0, #0
 8005318:	f001 fe70 	bl	8006ffc <BSP_LCD_DrawHLine>
			BSP_LCD_DrawHLine(0, 8 * 32 + 1, BSP_LCD_GetXSize());
 800531c:	f001 fc28 	bl	8006b70 <BSP_LCD_GetXSize>
 8005320:	4603      	mov	r3, r0
 8005322:	b29b      	uxth	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	f240 1101 	movw	r1, #257	@ 0x101
 800532a:	2000      	movs	r0, #0
 800532c:	f001 fe66 	bl	8006ffc <BSP_LCD_DrawHLine>

			// On affiche la direction, le score et la vitesse
			BSP_LCD_DisplayStringAt(0, 8 * 32 + 2, (uint8_t *)directionText, LEFT_MODE);
 8005330:	f107 0208 	add.w	r2, r7, #8
 8005334:	2303      	movs	r3, #3
 8005336:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800533a:	2000      	movs	r0, #0
 800533c:	f001 fd7e 	bl	8006e3c <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(200, 8 * 32 + 2, (uint8_t *)scoreText, LEFT_MODE);
 8005340:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8005344:	2303      	movs	r3, #3
 8005346:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800534a:	20c8      	movs	r0, #200	@ 0xc8
 800534c:	f001 fd76 	bl	8006e3c <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(350, 8 * 32 + 2, (uint8_t *)speedText, LEFT_MODE);
 8005350:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8005354:	2303      	movs	r3, #3
 8005356:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800535a:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 800535e:	f001 fd6d 	bl	8006e3c <BSP_LCD_DisplayStringAt>

			// On affiche la tête du snake
			if (!gameOver)
 8005362:	4b4c      	ldr	r3, [pc, #304]	@ (8005494 <StartDisplayTask+0x31c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d13e      	bne.n	80053e8 <StartDisplayTask+0x270>
				switch (headPart)
 800536a:	4b59      	ldr	r3, [pc, #356]	@ (80054d0 <StartDisplayTask+0x358>)
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	2b03      	cmp	r3, #3
 8005370:	d83a      	bhi.n	80053e8 <StartDisplayTask+0x270>
 8005372:	a201      	add	r2, pc, #4	@ (adr r2, 8005378 <StartDisplayTask+0x200>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	080053a1 	.word	0x080053a1
 800537c:	08005389 	.word	0x08005389
 8005380:	080053b9 	.word	0x080053b9
 8005384:	080053d1 	.word	0x080053d1
				{
				case HeadBottom:
					BSP_LCD_DrawBitmap(snakeHeadPosition[0] * 32, snakeHeadPosition[1] * 32, (uint8_t *)images_bmp_color_head_bottom_81CD4B_bmp);
 8005388:	4b52      	ldr	r3, [pc, #328]	@ (80054d4 <StartDisplayTask+0x35c>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	015b      	lsls	r3, r3, #5
 800538e:	4618      	mov	r0, r3
 8005390:	4b50      	ldr	r3, [pc, #320]	@ (80054d4 <StartDisplayTask+0x35c>)
 8005392:	785b      	ldrb	r3, [r3, #1]
 8005394:	015b      	lsls	r3, r3, #5
 8005396:	4a50      	ldr	r2, [pc, #320]	@ (80054d8 <StartDisplayTask+0x360>)
 8005398:	4619      	mov	r1, r3
 800539a:	f001 fed5 	bl	8007148 <BSP_LCD_DrawBitmap>
					break;
 800539e:	e023      	b.n	80053e8 <StartDisplayTask+0x270>
				case HeadTop:
					BSP_LCD_DrawBitmap(snakeHeadPosition[0] * 32, snakeHeadPosition[1] * 32, (uint8_t *)images_bmp_color_head_top_81CD4B_bmp);
 80053a0:	4b4c      	ldr	r3, [pc, #304]	@ (80054d4 <StartDisplayTask+0x35c>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	015b      	lsls	r3, r3, #5
 80053a6:	4618      	mov	r0, r3
 80053a8:	4b4a      	ldr	r3, [pc, #296]	@ (80054d4 <StartDisplayTask+0x35c>)
 80053aa:	785b      	ldrb	r3, [r3, #1]
 80053ac:	015b      	lsls	r3, r3, #5
 80053ae:	4a4b      	ldr	r2, [pc, #300]	@ (80054dc <StartDisplayTask+0x364>)
 80053b0:	4619      	mov	r1, r3
 80053b2:	f001 fec9 	bl	8007148 <BSP_LCD_DrawBitmap>
					break;
 80053b6:	e017      	b.n	80053e8 <StartDisplayTask+0x270>
				case HeadLeft:
					BSP_LCD_DrawBitmap(snakeHeadPosition[0] * 32, snakeHeadPosition[1] * 32, (uint8_t *)images_bmp_color_head_left_81CD4B_bmp);
 80053b8:	4b46      	ldr	r3, [pc, #280]	@ (80054d4 <StartDisplayTask+0x35c>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	015b      	lsls	r3, r3, #5
 80053be:	4618      	mov	r0, r3
 80053c0:	4b44      	ldr	r3, [pc, #272]	@ (80054d4 <StartDisplayTask+0x35c>)
 80053c2:	785b      	ldrb	r3, [r3, #1]
 80053c4:	015b      	lsls	r3, r3, #5
 80053c6:	4a46      	ldr	r2, [pc, #280]	@ (80054e0 <StartDisplayTask+0x368>)
 80053c8:	4619      	mov	r1, r3
 80053ca:	f001 febd 	bl	8007148 <BSP_LCD_DrawBitmap>
					break;
 80053ce:	e00b      	b.n	80053e8 <StartDisplayTask+0x270>
				case HeadRight:
					BSP_LCD_DrawBitmap(snakeHeadPosition[0] * 32, snakeHeadPosition[1] * 32, (uint8_t *)images_bmp_color_head_right_81CD4B_bmp);
 80053d0:	4b40      	ldr	r3, [pc, #256]	@ (80054d4 <StartDisplayTask+0x35c>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	015b      	lsls	r3, r3, #5
 80053d6:	4618      	mov	r0, r3
 80053d8:	4b3e      	ldr	r3, [pc, #248]	@ (80054d4 <StartDisplayTask+0x35c>)
 80053da:	785b      	ldrb	r3, [r3, #1]
 80053dc:	015b      	lsls	r3, r3, #5
 80053de:	4a41      	ldr	r2, [pc, #260]	@ (80054e4 <StartDisplayTask+0x36c>)
 80053e0:	4619      	mov	r1, r3
 80053e2:	f001 feb1 	bl	8007148 <BSP_LCD_DrawBitmap>
					break;
 80053e6:	bf00      	nop
				}

			// On affiche le corps du snake
			for (int i = 0; i < snakeSize; i++)
 80053e8:	2300      	movs	r3, #0
 80053ea:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80053ee:	e0d4      	b.n	800559a <StartDisplayTask+0x422>
			{
				switch (snakeBodyParts[i])
 80053f0:	4a3d      	ldr	r2, [pc, #244]	@ (80054e8 <StartDisplayTask+0x370>)
 80053f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80053f6:	4413      	add	r3, r2
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b05      	cmp	r3, #5
 80053fc:	f200 80c8 	bhi.w	8005590 <StartDisplayTask+0x418>
 8005400:	a201      	add	r2, pc, #4	@ (adr r2, 8005408 <StartDisplayTask+0x290>)
 8005402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005406:	bf00      	nop
 8005408:	08005421 	.word	0x08005421
 800540c:	08005447 	.word	0x08005447
 8005410:	080054f9 	.word	0x080054f9
 8005414:	0800551f 	.word	0x0800551f
 8005418:	08005545 	.word	0x08005545
 800541c:	0800556b 	.word	0x0800556b
				{
				case BottomLeft:
					BSP_LCD_DrawBitmap(snakeBodyPosition[i][0] * 32, snakeBodyPosition[i][1] * 32, (uint8_t *)images_bmp_color_bottom_left_81CD4B_bmp);
 8005420:	4a32      	ldr	r2, [pc, #200]	@ (80054ec <StartDisplayTask+0x374>)
 8005422:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005426:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800542a:	015b      	lsls	r3, r3, #5
 800542c:	4618      	mov	r0, r3
 800542e:	4a2f      	ldr	r2, [pc, #188]	@ (80054ec <StartDisplayTask+0x374>)
 8005430:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	4413      	add	r3, r2
 8005438:	785b      	ldrb	r3, [r3, #1]
 800543a:	015b      	lsls	r3, r3, #5
 800543c:	4a2c      	ldr	r2, [pc, #176]	@ (80054f0 <StartDisplayTask+0x378>)
 800543e:	4619      	mov	r1, r3
 8005440:	f001 fe82 	bl	8007148 <BSP_LCD_DrawBitmap>
					break;
 8005444:	e0a4      	b.n	8005590 <StartDisplayTask+0x418>
				case BottomRight:
					BSP_LCD_DrawBitmap(snakeBodyPosition[i][0] * 32, snakeBodyPosition[i][1] * 32, (uint8_t *)images_bmp_color_bottom_right_81CD4B_bmp);
 8005446:	4a29      	ldr	r2, [pc, #164]	@ (80054ec <StartDisplayTask+0x374>)
 8005448:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800544c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8005450:	015b      	lsls	r3, r3, #5
 8005452:	4618      	mov	r0, r3
 8005454:	4a25      	ldr	r2, [pc, #148]	@ (80054ec <StartDisplayTask+0x374>)
 8005456:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	4413      	add	r3, r2
 800545e:	785b      	ldrb	r3, [r3, #1]
 8005460:	015b      	lsls	r3, r3, #5
 8005462:	4a24      	ldr	r2, [pc, #144]	@ (80054f4 <StartDisplayTask+0x37c>)
 8005464:	4619      	mov	r1, r3
 8005466:	f001 fe6f 	bl	8007148 <BSP_LCD_DrawBitmap>
					break;
 800546a:	e091      	b.n	8005590 <StartDisplayTask+0x418>
 800546c:	20000964 	.word	0x20000964
 8005470:	20000968 	.word	0x20000968
 8005474:	2000096c 	.word	0x2000096c
 8005478:	200009e8 	.word	0x200009e8
 800547c:	c0260000 	.word	0xc0260000
 8005480:	200009ec 	.word	0x200009ec
 8005484:	c0360000 	.word	0xc0360000
 8005488:	20000984 	.word	0x20000984
 800548c:	ffff0000 	.word	0xffff0000
 8005490:	080172d4 	.word	0x080172d4
 8005494:	20000ab4 	.word	0x20000ab4
 8005498:	20000034 	.word	0x20000034
 800549c:	20000ab0 	.word	0x20000ab0
 80054a0:	20000aac 	.word	0x20000aac
 80054a4:	20000974 	.word	0x20000974
 80054a8:	20000a28 	.word	0x20000a28
 80054ac:	080172f0 	.word	0x080172f0
 80054b0:	08017304 	.word	0x08017304
 80054b4:	08017318 	.word	0x08017318
 80054b8:	0801732c 	.word	0x0801732c
 80054bc:	20000aa4 	.word	0x20000aa4
 80054c0:	08017340 	.word	0x08017340
 80054c4:	20000030 	.word	0x20000030
 80054c8:	0801734c 	.word	0x0801734c
 80054cc:	ffa52a2a 	.word	0xffa52a2a
 80054d0:	20000a29 	.word	0x20000a29
 80054d4:	20000038 	.word	0x20000038
 80054d8:	0801a624 	.word	0x0801a624
 80054dc:	0801b2b0 	.word	0x0801b2b0
 80054e0:	0801bf3c 	.word	0x0801bf3c
 80054e4:	0801cbc8 	.word	0x0801cbc8
 80054e8:	20000a2c 	.word	0x20000a2c
 80054ec:	20000ab8 	.word	0x20000ab8
 80054f0:	08018080 	.word	0x08018080
 80054f4:	08018d0c 	.word	0x08018d0c
				case BottomTop:
					BSP_LCD_DrawBitmap(snakeBodyPosition[i][0] * 32, snakeBodyPosition[i][1] * 32, (uint8_t *)images_bmp_color_bottom_top_81CD4B_bmp);
 80054f8:	4a78      	ldr	r2, [pc, #480]	@ (80056dc <StartDisplayTask+0x564>)
 80054fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80054fe:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8005502:	015b      	lsls	r3, r3, #5
 8005504:	4618      	mov	r0, r3
 8005506:	4a75      	ldr	r2, [pc, #468]	@ (80056dc <StartDisplayTask+0x564>)
 8005508:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	4413      	add	r3, r2
 8005510:	785b      	ldrb	r3, [r3, #1]
 8005512:	015b      	lsls	r3, r3, #5
 8005514:	4a72      	ldr	r2, [pc, #456]	@ (80056e0 <StartDisplayTask+0x568>)
 8005516:	4619      	mov	r1, r3
 8005518:	f001 fe16 	bl	8007148 <BSP_LCD_DrawBitmap>
					break;
 800551c:	e038      	b.n	8005590 <StartDisplayTask+0x418>
				case LeftRight:
					BSP_LCD_DrawBitmap(snakeBodyPosition[i][0] * 32, snakeBodyPosition[i][1] * 32, (uint8_t *)images_bmp_color_left_right_81CD4B_bmp);
 800551e:	4a6f      	ldr	r2, [pc, #444]	@ (80056dc <StartDisplayTask+0x564>)
 8005520:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005524:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8005528:	015b      	lsls	r3, r3, #5
 800552a:	4618      	mov	r0, r3
 800552c:	4a6b      	ldr	r2, [pc, #428]	@ (80056dc <StartDisplayTask+0x564>)
 800552e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	4413      	add	r3, r2
 8005536:	785b      	ldrb	r3, [r3, #1]
 8005538:	015b      	lsls	r3, r3, #5
 800553a:	4a6a      	ldr	r2, [pc, #424]	@ (80056e4 <StartDisplayTask+0x56c>)
 800553c:	4619      	mov	r1, r3
 800553e:	f001 fe03 	bl	8007148 <BSP_LCD_DrawBitmap>
					break;
 8005542:	e025      	b.n	8005590 <StartDisplayTask+0x418>
				case LeftTop:
					BSP_LCD_DrawBitmap(snakeBodyPosition[i][0] * 32, snakeBodyPosition[i][1] * 32, (uint8_t *)images_bmp_color_left_top_81CD4B_bmp);
 8005544:	4a65      	ldr	r2, [pc, #404]	@ (80056dc <StartDisplayTask+0x564>)
 8005546:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800554a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800554e:	015b      	lsls	r3, r3, #5
 8005550:	4618      	mov	r0, r3
 8005552:	4a62      	ldr	r2, [pc, #392]	@ (80056dc <StartDisplayTask+0x564>)
 8005554:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	4413      	add	r3, r2
 800555c:	785b      	ldrb	r3, [r3, #1]
 800555e:	015b      	lsls	r3, r3, #5
 8005560:	4a61      	ldr	r2, [pc, #388]	@ (80056e8 <StartDisplayTask+0x570>)
 8005562:	4619      	mov	r1, r3
 8005564:	f001 fdf0 	bl	8007148 <BSP_LCD_DrawBitmap>
					break;
 8005568:	e012      	b.n	8005590 <StartDisplayTask+0x418>
				case RightTop:
					BSP_LCD_DrawBitmap(snakeBodyPosition[i][0] * 32, snakeBodyPosition[i][1] * 32, (uint8_t *)images_bmp_color_right_top_81CD4B_bmp);
 800556a:	4a5c      	ldr	r2, [pc, #368]	@ (80056dc <StartDisplayTask+0x564>)
 800556c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005570:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8005574:	015b      	lsls	r3, r3, #5
 8005576:	4618      	mov	r0, r3
 8005578:	4a58      	ldr	r2, [pc, #352]	@ (80056dc <StartDisplayTask+0x564>)
 800557a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	4413      	add	r3, r2
 8005582:	785b      	ldrb	r3, [r3, #1]
 8005584:	015b      	lsls	r3, r3, #5
 8005586:	4a59      	ldr	r2, [pc, #356]	@ (80056ec <StartDisplayTask+0x574>)
 8005588:	4619      	mov	r1, r3
 800558a:	f001 fddd 	bl	8007148 <BSP_LCD_DrawBitmap>
					break;
 800558e:	bf00      	nop
			for (int i = 0; i < snakeSize; i++)
 8005590:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005594:	3301      	adds	r3, #1
 8005596:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800559a:	4b55      	ldr	r3, [pc, #340]	@ (80056f0 <StartDisplayTask+0x578>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	461a      	mov	r2, r3
 80055a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80055a4:	4293      	cmp	r3, r2
 80055a6:	f6ff af23 	blt.w	80053f0 <StartDisplayTask+0x278>
				}
			}

			// On affiche la queue du snake
			switch (tailPart)
 80055aa:	4b52      	ldr	r3, [pc, #328]	@ (80056f4 <StartDisplayTask+0x57c>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d83a      	bhi.n	8005628 <StartDisplayTask+0x4b0>
 80055b2:	a201      	add	r2, pc, #4	@ (adr r2, 80055b8 <StartDisplayTask+0x440>)
 80055b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b8:	080055c9 	.word	0x080055c9
 80055bc:	080055e1 	.word	0x080055e1
 80055c0:	080055f9 	.word	0x080055f9
 80055c4:	08005611 	.word	0x08005611
			{
			case TailBottom:
				BSP_LCD_DrawBitmap(snakeTailPosition[0] * 32, snakeTailPosition[1] * 32, (uint8_t *)images_bmp_color_tail_bottom_81CD4B_bmp);
 80055c8:	4b4b      	ldr	r3, [pc, #300]	@ (80056f8 <StartDisplayTask+0x580>)
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	015b      	lsls	r3, r3, #5
 80055ce:	4618      	mov	r0, r3
 80055d0:	4b49      	ldr	r3, [pc, #292]	@ (80056f8 <StartDisplayTask+0x580>)
 80055d2:	785b      	ldrb	r3, [r3, #1]
 80055d4:	015b      	lsls	r3, r3, #5
 80055d6:	4a49      	ldr	r2, [pc, #292]	@ (80056fc <StartDisplayTask+0x584>)
 80055d8:	4619      	mov	r1, r3
 80055da:	f001 fdb5 	bl	8007148 <BSP_LCD_DrawBitmap>
				break;
 80055de:	e023      	b.n	8005628 <StartDisplayTask+0x4b0>
			case TailTop:
				BSP_LCD_DrawBitmap(snakeTailPosition[0] * 32, snakeTailPosition[1] * 32, (uint8_t *)images_bmp_color_tail_top_81CD4B_bmp);
 80055e0:	4b45      	ldr	r3, [pc, #276]	@ (80056f8 <StartDisplayTask+0x580>)
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	015b      	lsls	r3, r3, #5
 80055e6:	4618      	mov	r0, r3
 80055e8:	4b43      	ldr	r3, [pc, #268]	@ (80056f8 <StartDisplayTask+0x580>)
 80055ea:	785b      	ldrb	r3, [r3, #1]
 80055ec:	015b      	lsls	r3, r3, #5
 80055ee:	4a44      	ldr	r2, [pc, #272]	@ (8005700 <StartDisplayTask+0x588>)
 80055f0:	4619      	mov	r1, r3
 80055f2:	f001 fda9 	bl	8007148 <BSP_LCD_DrawBitmap>
				break;
 80055f6:	e017      	b.n	8005628 <StartDisplayTask+0x4b0>
			case TailLeft:
				BSP_LCD_DrawBitmap(snakeTailPosition[0] * 32, snakeTailPosition[1] * 32, (uint8_t *)images_bmp_color_tail_left_81CD4B_bmp);
 80055f8:	4b3f      	ldr	r3, [pc, #252]	@ (80056f8 <StartDisplayTask+0x580>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	015b      	lsls	r3, r3, #5
 80055fe:	4618      	mov	r0, r3
 8005600:	4b3d      	ldr	r3, [pc, #244]	@ (80056f8 <StartDisplayTask+0x580>)
 8005602:	785b      	ldrb	r3, [r3, #1]
 8005604:	015b      	lsls	r3, r3, #5
 8005606:	4a3f      	ldr	r2, [pc, #252]	@ (8005704 <StartDisplayTask+0x58c>)
 8005608:	4619      	mov	r1, r3
 800560a:	f001 fd9d 	bl	8007148 <BSP_LCD_DrawBitmap>
				break;
 800560e:	e00b      	b.n	8005628 <StartDisplayTask+0x4b0>
			case TailRight:
				BSP_LCD_DrawBitmap(snakeTailPosition[0] * 32, snakeTailPosition[1] * 32, (uint8_t *)images_bmp_color_tail_right_81CD4B_bmp);
 8005610:	4b39      	ldr	r3, [pc, #228]	@ (80056f8 <StartDisplayTask+0x580>)
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	015b      	lsls	r3, r3, #5
 8005616:	4618      	mov	r0, r3
 8005618:	4b37      	ldr	r3, [pc, #220]	@ (80056f8 <StartDisplayTask+0x580>)
 800561a:	785b      	ldrb	r3, [r3, #1]
 800561c:	015b      	lsls	r3, r3, #5
 800561e:	4a3a      	ldr	r2, [pc, #232]	@ (8005708 <StartDisplayTask+0x590>)
 8005620:	4619      	mov	r1, r3
 8005622:	f001 fd91 	bl	8007148 <BSP_LCD_DrawBitmap>
				break;
 8005626:	bf00      	nop
			}

			// On efface l'ancienne queue avec un carré vert
			if (!appleEaten && (snakeHeadPosition[0] != oldTailPosition[0] || snakeHeadPosition[1] != oldTailPosition[1]))
 8005628:	4b38      	ldr	r3, [pc, #224]	@ (800570c <StartDisplayTask+0x594>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d11a      	bne.n	8005666 <StartDisplayTask+0x4ee>
 8005630:	4b37      	ldr	r3, [pc, #220]	@ (8005710 <StartDisplayTask+0x598>)
 8005632:	781a      	ldrb	r2, [r3, #0]
 8005634:	4b37      	ldr	r3, [pc, #220]	@ (8005714 <StartDisplayTask+0x59c>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	429a      	cmp	r2, r3
 800563a:	d105      	bne.n	8005648 <StartDisplayTask+0x4d0>
 800563c:	4b34      	ldr	r3, [pc, #208]	@ (8005710 <StartDisplayTask+0x598>)
 800563e:	785a      	ldrb	r2, [r3, #1]
 8005640:	4b34      	ldr	r3, [pc, #208]	@ (8005714 <StartDisplayTask+0x59c>)
 8005642:	785b      	ldrb	r3, [r3, #1]
 8005644:	429a      	cmp	r2, r3
 8005646:	d00e      	beq.n	8005666 <StartDisplayTask+0x4ee>
			{
				// On efface l'ancienne queue si:
				//    - le snake a avancé et n'a pas mangé de pomme
				// et
				//    - la tête n'est pas à la position de l'ancienne queue (sinon on efface la tête)
				BSP_LCD_SetTextColor((uint32_t)0xFF81CD4B); // 0xFF81CD4B
 8005648:	4833      	ldr	r0, [pc, #204]	@ (8005718 <StartDisplayTask+0x5a0>)
 800564a:	f001 fb29 	bl	8006ca0 <BSP_LCD_SetTextColor>
				BSP_LCD_FillRect(oldTailPosition[0] * 32, oldTailPosition[1] * 32, 32, 32);
 800564e:	4b31      	ldr	r3, [pc, #196]	@ (8005714 <StartDisplayTask+0x59c>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	015b      	lsls	r3, r3, #5
 8005654:	b298      	uxth	r0, r3
 8005656:	4b2f      	ldr	r3, [pc, #188]	@ (8005714 <StartDisplayTask+0x59c>)
 8005658:	785b      	ldrb	r3, [r3, #1]
 800565a:	015b      	lsls	r3, r3, #5
 800565c:	b299      	uxth	r1, r3
 800565e:	2320      	movs	r3, #32
 8005660:	2220      	movs	r2, #32
 8005662:	f001 fe23 	bl	80072ac <BSP_LCD_FillRect>
			}

			// On affiche les pommes
			for (int i = 0; i < NB_APPLES; i++)
 8005666:	2300      	movs	r3, #0
 8005668:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800566c:	e01f      	b.n	80056ae <StartDisplayTask+0x536>
				if (applePosition[i][0] != -1)
 800566e:	4a2b      	ldr	r2, [pc, #172]	@ (800571c <StartDisplayTask+0x5a4>)
 8005670:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005674:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8005678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567c:	d012      	beq.n	80056a4 <StartDisplayTask+0x52c>
					BSP_LCD_DrawBitmap(applePosition[i][0] * 32, applePosition[i][1] * 32, (uint8_t *)images_bmp_color_apple_81CD4B_bmp);
 800567e:	4a27      	ldr	r2, [pc, #156]	@ (800571c <StartDisplayTask+0x5a4>)
 8005680:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005684:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8005688:	015b      	lsls	r3, r3, #5
 800568a:	4618      	mov	r0, r3
 800568c:	4a23      	ldr	r2, [pc, #140]	@ (800571c <StartDisplayTask+0x5a4>)
 800568e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	4413      	add	r3, r2
 8005696:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800569a:	015b      	lsls	r3, r3, #5
 800569c:	4a20      	ldr	r2, [pc, #128]	@ (8005720 <StartDisplayTask+0x5a8>)
 800569e:	4619      	mov	r1, r3
 80056a0:	f001 fd52 	bl	8007148 <BSP_LCD_DrawBitmap>
			for (int i = 0; i < NB_APPLES; i++)
 80056a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80056a8:	3301      	adds	r3, #1
 80056aa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80056ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	dddb      	ble.n	800566e <StartDisplayTask+0x4f6>
			xSemaphoreGive(displayMutexHandle);
 80056b6:	4b1b      	ldr	r3, [pc, #108]	@ (8005724 <StartDisplayTask+0x5ac>)
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	2300      	movs	r3, #0
 80056bc:	2200      	movs	r2, #0
 80056be:	2100      	movs	r1, #0
 80056c0:	f00d fe38 	bl	8013334 <xQueueGenericSend>

			if (gameOver)
 80056c4:	4b18      	ldr	r3, [pc, #96]	@ (8005728 <StartDisplayTask+0x5b0>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d002      	beq.n	80056d2 <StartDisplayTask+0x55a>
				lastMove = 0;
 80056cc:	4b17      	ldr	r3, [pc, #92]	@ (800572c <StartDisplayTask+0x5b4>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]
		}

		osDelay(90);
 80056d2:	205a      	movs	r0, #90	@ 0x5a
 80056d4:	f00d fa06 	bl	8012ae4 <osDelay>
		if ((gameOver && !lastMove) || gamePaused || !gameStarted)
 80056d8:	e5ad      	b.n	8005236 <StartDisplayTask+0xbe>
 80056da:	bf00      	nop
 80056dc:	20000ab8 	.word	0x20000ab8
 80056e0:	08019998 	.word	0x08019998
 80056e4:	0801d854 	.word	0x0801d854
 80056e8:	0801e4e0 	.word	0x0801e4e0
 80056ec:	0801f16c 	.word	0x0801f16c
 80056f0:	20000aa4 	.word	0x20000aa4
 80056f4:	20000031 	.word	0x20000031
 80056f8:	2000003c 	.word	0x2000003c
 80056fc:	0801fdf8 	.word	0x0801fdf8
 8005700:	08020a84 	.word	0x08020a84
 8005704:	08021710 	.word	0x08021710
 8005708:	0802239c 	.word	0x0802239c
 800570c:	20000aa8 	.word	0x20000aa8
 8005710:	20000038 	.word	0x20000038
 8005714:	20000ba8 	.word	0x20000ba8
 8005718:	ff81cd4b 	.word	0xff81cd4b
 800571c:	20000bac 	.word	0x20000bac
 8005720:	080173f4 	.word	0x080173f4
 8005724:	20000974 	.word	0x20000974
 8005728:	20000ab4 	.word	0x20000ab4
 800572c:	20000034 	.word	0x20000034

08005730 <StartManageBodyParts>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartManageBodyParts */
void StartManageBodyParts(void const *argument)
{
 8005730:	b5b0      	push	{r4, r5, r7, lr}
 8005732:	b08e      	sub	sp, #56	@ 0x38
 8005734:	af02      	add	r7, sp, #8
 8005736:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartManageBodyParts */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8005738:	f00f f906 	bl	8014948 <xTaskGetTickCount>
 800573c:	4603      	mov	r3, r0
 800573e:	60fb      	str	r3, [r7, #12]
	TickType_t delay = pdMS_TO_TICKS(1000. / initSpeed);
 8005740:	2302      	movs	r3, #2
 8005742:	4618      	mov	r0, r3
 8005744:	f7fa ff06 	bl	8000554 <__aeabi_i2d>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	f04f 0000 	mov.w	r0, #0
 8005750:	4990      	ldr	r1, [pc, #576]	@ (8005994 <StartManageBodyParts+0x264>)
 8005752:	f7fb f893 	bl	800087c <__aeabi_ddiv>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4610      	mov	r0, r2
 800575c:	4619      	mov	r1, r3
 800575e:	f7fb f975 	bl	8000a4c <__aeabi_d2uiz>
 8005762:	4603      	mov	r3, r0
 8005764:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005768:	fb02 f303 	mul.w	r3, r2, r3
 800576c:	4a8a      	ldr	r2, [pc, #552]	@ (8005998 <StartManageBodyParts+0x268>)
 800576e:	fba2 2303 	umull	r2, r3, r2, r3
 8005772:	099b      	lsrs	r3, r3, #6
 8005774:	617b      	str	r3, [r7, #20]

	/* Infinite loop */
	for (;;)
	{
		delay = pdMS_TO_TICKS(1000. / speed);
 8005776:	4b89      	ldr	r3, [pc, #548]	@ (800599c <StartManageBodyParts+0x26c>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	4618      	mov	r0, r3
 800577c:	f7fa feea 	bl	8000554 <__aeabi_i2d>
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	f04f 0000 	mov.w	r0, #0
 8005788:	4982      	ldr	r1, [pc, #520]	@ (8005994 <StartManageBodyParts+0x264>)
 800578a:	f7fb f877 	bl	800087c <__aeabi_ddiv>
 800578e:	4602      	mov	r2, r0
 8005790:	460b      	mov	r3, r1
 8005792:	4610      	mov	r0, r2
 8005794:	4619      	mov	r1, r3
 8005796:	f7fb f959 	bl	8000a4c <__aeabi_d2uiz>
 800579a:	4603      	mov	r3, r0
 800579c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80057a0:	fb02 f303 	mul.w	r3, r2, r3
 80057a4:	4a7c      	ldr	r2, [pc, #496]	@ (8005998 <StartManageBodyParts+0x268>)
 80057a6:	fba2 2303 	umull	r2, r3, r2, r3
 80057aa:	099b      	lsrs	r3, r3, #6
 80057ac:	617b      	str	r3, [r7, #20]

		if (!gameOver && !gamePaused && gameStarted)
 80057ae:	4b7c      	ldr	r3, [pc, #496]	@ (80059a0 <StartManageBodyParts+0x270>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f040 82b6 	bne.w	8005d24 <StartManageBodyParts+0x5f4>
 80057b8:	4b7a      	ldr	r3, [pc, #488]	@ (80059a4 <StartManageBodyParts+0x274>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f040 82b1 	bne.w	8005d24 <StartManageBodyParts+0x5f4>
 80057c2:	4b79      	ldr	r3, [pc, #484]	@ (80059a8 <StartManageBodyParts+0x278>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f000 82ac 	beq.w	8005d24 <StartManageBodyParts+0x5f4>
		{
			// Le jeu est en cours

			// On sauvegarde la position de la queue et de la tête
			oldTailPosition[0] = snakeTailPosition[0];
 80057cc:	4b77      	ldr	r3, [pc, #476]	@ (80059ac <StartManageBodyParts+0x27c>)
 80057ce:	781a      	ldrb	r2, [r3, #0]
 80057d0:	4b77      	ldr	r3, [pc, #476]	@ (80059b0 <StartManageBodyParts+0x280>)
 80057d2:	701a      	strb	r2, [r3, #0]
			oldTailPosition[1] = snakeTailPosition[1];
 80057d4:	4b75      	ldr	r3, [pc, #468]	@ (80059ac <StartManageBodyParts+0x27c>)
 80057d6:	785a      	ldrb	r2, [r3, #1]
 80057d8:	4b75      	ldr	r3, [pc, #468]	@ (80059b0 <StartManageBodyParts+0x280>)
 80057da:	705a      	strb	r2, [r3, #1]

			uint8_t oldHeadPosition[2];
			oldHeadPosition[0] = snakeHeadPosition[0];
 80057dc:	4b75      	ldr	r3, [pc, #468]	@ (80059b4 <StartManageBodyParts+0x284>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	723b      	strb	r3, [r7, #8]
			oldHeadPosition[1] = snakeHeadPosition[1];
 80057e2:	4b74      	ldr	r3, [pc, #464]	@ (80059b4 <StartManageBodyParts+0x284>)
 80057e4:	785b      	ldrb	r3, [r3, #1]
 80057e6:	727b      	strb	r3, [r7, #9]

			// On met a jour la position de la tête en fonction de la direction
			switch (direction)
 80057e8:	4b73      	ldr	r3, [pc, #460]	@ (80059b8 <StartManageBodyParts+0x288>)
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	2b03      	cmp	r3, #3
 80057ee:	d833      	bhi.n	8005858 <StartManageBodyParts+0x128>
 80057f0:	a201      	add	r2, pc, #4	@ (adr r2, 80057f8 <StartManageBodyParts+0xc8>)
 80057f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f6:	bf00      	nop
 80057f8:	08005809 	.word	0x08005809
 80057fc:	0800581d 	.word	0x0800581d
 8005800:	08005831 	.word	0x08005831
 8005804:	08005845 	.word	0x08005845
			{
			case Up:
				headPart = HeadTop;
 8005808:	4b6c      	ldr	r3, [pc, #432]	@ (80059bc <StartManageBodyParts+0x28c>)
 800580a:	2200      	movs	r2, #0
 800580c:	701a      	strb	r2, [r3, #0]
				snakeHeadPosition[1]--;
 800580e:	4b69      	ldr	r3, [pc, #420]	@ (80059b4 <StartManageBodyParts+0x284>)
 8005810:	785b      	ldrb	r3, [r3, #1]
 8005812:	3b01      	subs	r3, #1
 8005814:	b2da      	uxtb	r2, r3
 8005816:	4b67      	ldr	r3, [pc, #412]	@ (80059b4 <StartManageBodyParts+0x284>)
 8005818:	705a      	strb	r2, [r3, #1]
				break;
 800581a:	e01d      	b.n	8005858 <StartManageBodyParts+0x128>
			case Down:
				headPart = HeadBottom;
 800581c:	4b67      	ldr	r3, [pc, #412]	@ (80059bc <StartManageBodyParts+0x28c>)
 800581e:	2201      	movs	r2, #1
 8005820:	701a      	strb	r2, [r3, #0]
				snakeHeadPosition[1]++;
 8005822:	4b64      	ldr	r3, [pc, #400]	@ (80059b4 <StartManageBodyParts+0x284>)
 8005824:	785b      	ldrb	r3, [r3, #1]
 8005826:	3301      	adds	r3, #1
 8005828:	b2da      	uxtb	r2, r3
 800582a:	4b62      	ldr	r3, [pc, #392]	@ (80059b4 <StartManageBodyParts+0x284>)
 800582c:	705a      	strb	r2, [r3, #1]
				break;
 800582e:	e013      	b.n	8005858 <StartManageBodyParts+0x128>
			case Left:
				headPart = HeadLeft;
 8005830:	4b62      	ldr	r3, [pc, #392]	@ (80059bc <StartManageBodyParts+0x28c>)
 8005832:	2202      	movs	r2, #2
 8005834:	701a      	strb	r2, [r3, #0]
				snakeHeadPosition[0]--;
 8005836:	4b5f      	ldr	r3, [pc, #380]	@ (80059b4 <StartManageBodyParts+0x284>)
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	3b01      	subs	r3, #1
 800583c:	b2da      	uxtb	r2, r3
 800583e:	4b5d      	ldr	r3, [pc, #372]	@ (80059b4 <StartManageBodyParts+0x284>)
 8005840:	701a      	strb	r2, [r3, #0]
				break;
 8005842:	e009      	b.n	8005858 <StartManageBodyParts+0x128>
			case Right:
				headPart = HeadRight;
 8005844:	4b5d      	ldr	r3, [pc, #372]	@ (80059bc <StartManageBodyParts+0x28c>)
 8005846:	2203      	movs	r2, #3
 8005848:	701a      	strb	r2, [r3, #0]
				snakeHeadPosition[0]++;
 800584a:	4b5a      	ldr	r3, [pc, #360]	@ (80059b4 <StartManageBodyParts+0x284>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	3301      	adds	r3, #1
 8005850:	b2da      	uxtb	r2, r3
 8005852:	4b58      	ldr	r3, [pc, #352]	@ (80059b4 <StartManageBodyParts+0x284>)
 8005854:	701a      	strb	r2, [r3, #0]
				break;
 8005856:	bf00      	nop
			}

			// on vérifie si on est mort
			if (snakeHeadPosition[0] >= GRID_SIZE_X || snakeHeadPosition[1] >= GRID_SIZE_Y || snakeHeadPosition[0] < 0 || snakeHeadPosition[1] < 0)
 8005858:	4b56      	ldr	r3, [pc, #344]	@ (80059b4 <StartManageBodyParts+0x284>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b0e      	cmp	r3, #14
 800585e:	d803      	bhi.n	8005868 <StartManageBodyParts+0x138>
 8005860:	4b54      	ldr	r3, [pc, #336]	@ (80059b4 <StartManageBodyParts+0x284>)
 8005862:	785b      	ldrb	r3, [r3, #1]
 8005864:	2b07      	cmp	r3, #7
 8005866:	d903      	bls.n	8005870 <StartManageBodyParts+0x140>
			{
				// On a touché un mur
				gameOver = 1;
 8005868:	4b4d      	ldr	r3, [pc, #308]	@ (80059a0 <StartManageBodyParts+0x270>)
 800586a:	2201      	movs	r2, #1
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	e01f      	b.n	80058b0 <StartManageBodyParts+0x180>
			}
			else
			{
				for (int i = 0; i < snakeSize; i++)
 8005870:	2300      	movs	r3, #0
 8005872:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005874:	e016      	b.n	80058a4 <StartManageBodyParts+0x174>
				{
					if (snakeHeadPosition[0] == snakeBodyPosition[i][0] && snakeHeadPosition[1] == snakeBodyPosition[i][1])
 8005876:	4b4f      	ldr	r3, [pc, #316]	@ (80059b4 <StartManageBodyParts+0x284>)
 8005878:	781a      	ldrb	r2, [r3, #0]
 800587a:	4951      	ldr	r1, [pc, #324]	@ (80059c0 <StartManageBodyParts+0x290>)
 800587c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587e:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8005882:	429a      	cmp	r2, r3
 8005884:	d10b      	bne.n	800589e <StartManageBodyParts+0x16e>
 8005886:	4b4b      	ldr	r3, [pc, #300]	@ (80059b4 <StartManageBodyParts+0x284>)
 8005888:	785a      	ldrb	r2, [r3, #1]
 800588a:	494d      	ldr	r1, [pc, #308]	@ (80059c0 <StartManageBodyParts+0x290>)
 800588c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	440b      	add	r3, r1
 8005892:	785b      	ldrb	r3, [r3, #1]
 8005894:	429a      	cmp	r2, r3
 8005896:	d102      	bne.n	800589e <StartManageBodyParts+0x16e>
					{
						// On a touché notre corps
						gameOver = 1;
 8005898:	4b41      	ldr	r3, [pc, #260]	@ (80059a0 <StartManageBodyParts+0x270>)
 800589a:	2201      	movs	r2, #1
 800589c:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < snakeSize; i++)
 800589e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a0:	3301      	adds	r3, #1
 80058a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058a4:	4b47      	ldr	r3, [pc, #284]	@ (80059c4 <StartManageBodyParts+0x294>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	461a      	mov	r2, r3
 80058aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ac:	4293      	cmp	r3, r2
 80058ae:	dbe2      	blt.n	8005876 <StartManageBodyParts+0x146>
				}
			}
			// Note: Inutile de vérifier si on a touché la queue. Celle ci n'a pas encore avancé.

			// On vérifie si on a mangé la pomme avant de bouger le corps et la queue
			appleEaten = 0;
 80058b0:	4b45      	ldr	r3, [pc, #276]	@ (80059c8 <StartManageBodyParts+0x298>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < NB_APPLES; i++)
 80058b6:	2300      	movs	r3, #0
 80058b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058ba:	e10d      	b.n	8005ad8 <StartManageBodyParts+0x3a8>
			{
				if (snakeHeadPosition[0] == applePosition[i][0] && snakeHeadPosition[1] == applePosition[i][1])
 80058bc:	4b3d      	ldr	r3, [pc, #244]	@ (80059b4 <StartManageBodyParts+0x284>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	4619      	mov	r1, r3
 80058c2:	4a42      	ldr	r2, [pc, #264]	@ (80059cc <StartManageBodyParts+0x29c>)
 80058c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c6:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 80058ca:	4299      	cmp	r1, r3
 80058cc:	f040 8101 	bne.w	8005ad2 <StartManageBodyParts+0x3a2>
 80058d0:	4b38      	ldr	r3, [pc, #224]	@ (80059b4 <StartManageBodyParts+0x284>)
 80058d2:	785b      	ldrb	r3, [r3, #1]
 80058d4:	4619      	mov	r1, r3
 80058d6:	4a3d      	ldr	r2, [pc, #244]	@ (80059cc <StartManageBodyParts+0x29c>)
 80058d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	4413      	add	r3, r2
 80058de:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80058e2:	4299      	cmp	r1, r3
 80058e4:	f040 80f5 	bne.w	8005ad2 <StartManageBodyParts+0x3a2>
				{
					snakeSize++;
 80058e8:	4b36      	ldr	r3, [pc, #216]	@ (80059c4 <StartManageBodyParts+0x294>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	3301      	adds	r3, #1
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	4b34      	ldr	r3, [pc, #208]	@ (80059c4 <StartManageBodyParts+0x294>)
 80058f2:	701a      	strb	r2, [r3, #0]
					appleEaten = 1;
 80058f4:	4b34      	ldr	r3, [pc, #208]	@ (80059c8 <StartManageBodyParts+0x298>)
 80058f6:	2201      	movs	r2, #1
 80058f8:	601a      	str	r2, [r3, #0]

					// On augmente la vitesse de 1Hz a chaque palier
					for (int i = 0; i < NB_PALIERS; i++)
 80058fa:	2300      	movs	r3, #0
 80058fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80058fe:	e011      	b.n	8005924 <StartManageBodyParts+0x1f4>
					{
						if (snakeSize == palierIncreaseSpeed[i])
 8005900:	4a33      	ldr	r2, [pc, #204]	@ (80059d0 <StartManageBodyParts+0x2a0>)
 8005902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005904:	4413      	add	r3, r2
 8005906:	781a      	ldrb	r2, [r3, #0]
 8005908:	4b2e      	ldr	r3, [pc, #184]	@ (80059c4 <StartManageBodyParts+0x294>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	429a      	cmp	r2, r3
 800590e:	d106      	bne.n	800591e <StartManageBodyParts+0x1ee>
						{
							speed++;
 8005910:	4b22      	ldr	r3, [pc, #136]	@ (800599c <StartManageBodyParts+0x26c>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	3301      	adds	r3, #1
 8005916:	b2da      	uxtb	r2, r3
 8005918:	4b20      	ldr	r3, [pc, #128]	@ (800599c <StartManageBodyParts+0x26c>)
 800591a:	701a      	strb	r2, [r3, #0]
							break;
 800591c:	e005      	b.n	800592a <StartManageBodyParts+0x1fa>
					for (int i = 0; i < NB_PALIERS; i++)
 800591e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005920:	3301      	adds	r3, #1
 8005922:	627b      	str	r3, [r7, #36]	@ 0x24
 8005924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005926:	2b03      	cmp	r3, #3
 8005928:	ddea      	ble.n	8005900 <StartManageBodyParts+0x1d0>
						}
					}

					// On ajoute un bodyPart à la queue
					for (int i = snakeSize - 1; i > 0; i--)
 800592a:	4b26      	ldr	r3, [pc, #152]	@ (80059c4 <StartManageBodyParts+0x294>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	3b01      	subs	r3, #1
 8005930:	623b      	str	r3, [r7, #32]
 8005932:	e020      	b.n	8005976 <StartManageBodyParts+0x246>
					{
						snakeBodyParts[i] = snakeBodyParts[i - 1];
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	3b01      	subs	r3, #1
 8005938:	4a26      	ldr	r2, [pc, #152]	@ (80059d4 <StartManageBodyParts+0x2a4>)
 800593a:	5cd1      	ldrb	r1, [r2, r3]
 800593c:	4a25      	ldr	r2, [pc, #148]	@ (80059d4 <StartManageBodyParts+0x2a4>)
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	4413      	add	r3, r2
 8005942:	460a      	mov	r2, r1
 8005944:	701a      	strb	r2, [r3, #0]
						snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	3b01      	subs	r3, #1
 800594a:	4a1d      	ldr	r2, [pc, #116]	@ (80059c0 <StartManageBodyParts+0x290>)
 800594c:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8005950:	4a1b      	ldr	r2, [pc, #108]	@ (80059c0 <StartManageBodyParts+0x290>)
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
						snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	3b01      	subs	r3, #1
 800595c:	4a18      	ldr	r2, [pc, #96]	@ (80059c0 <StartManageBodyParts+0x290>)
 800595e:	005b      	lsls	r3, r3, #1
 8005960:	4413      	add	r3, r2
 8005962:	7859      	ldrb	r1, [r3, #1]
 8005964:	4a16      	ldr	r2, [pc, #88]	@ (80059c0 <StartManageBodyParts+0x290>)
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	4413      	add	r3, r2
 800596c:	460a      	mov	r2, r1
 800596e:	705a      	strb	r2, [r3, #1]
					for (int i = snakeSize - 1; i > 0; i--)
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	3b01      	subs	r3, #1
 8005974:	623b      	str	r3, [r7, #32]
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	2b00      	cmp	r3, #0
 800597a:	dcdb      	bgt.n	8005934 <StartManageBodyParts+0x204>

					// On met a jour le premier bodyPart
					uint8_t backX;
					uint8_t backY;

					if (snakeSize > 1)
 800597c:	4b11      	ldr	r3, [pc, #68]	@ (80059c4 <StartManageBodyParts+0x294>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d929      	bls.n	80059d8 <StartManageBodyParts+0x2a8>
					{
						backX = snakeBodyPosition[0][0];
 8005984:	4b0e      	ldr	r3, [pc, #56]	@ (80059c0 <StartManageBodyParts+0x290>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	77fb      	strb	r3, [r7, #31]
						backY = snakeBodyPosition[0][1];
 800598a:	4b0d      	ldr	r3, [pc, #52]	@ (80059c0 <StartManageBodyParts+0x290>)
 800598c:	785b      	ldrb	r3, [r3, #1]
 800598e:	77bb      	strb	r3, [r7, #30]
 8005990:	e028      	b.n	80059e4 <StartManageBodyParts+0x2b4>
 8005992:	bf00      	nop
 8005994:	408f4000 	.word	0x408f4000
 8005998:	10624dd3 	.word	0x10624dd3
 800599c:	20000030 	.word	0x20000030
 80059a0:	20000ab4 	.word	0x20000ab4
 80059a4:	20000ab0 	.word	0x20000ab0
 80059a8:	20000aac 	.word	0x20000aac
 80059ac:	2000003c 	.word	0x2000003c
 80059b0:	20000ba8 	.word	0x20000ba8
 80059b4:	20000038 	.word	0x20000038
 80059b8:	20000a28 	.word	0x20000a28
 80059bc:	20000a29 	.word	0x20000a29
 80059c0:	20000ab8 	.word	0x20000ab8
 80059c4:	20000aa4 	.word	0x20000aa4
 80059c8:	20000aa8 	.word	0x20000aa8
 80059cc:	20000bac 	.word	0x20000bac
 80059d0:	08023028 	.word	0x08023028
 80059d4:	20000a2c 	.word	0x20000a2c
					}
					else
					{
						backX = snakeTailPosition[0];
 80059d8:	4ba6      	ldr	r3, [pc, #664]	@ (8005c74 <StartManageBodyParts+0x544>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	77fb      	strb	r3, [r7, #31]
						backY = snakeTailPosition[1];
 80059de:	4ba5      	ldr	r3, [pc, #660]	@ (8005c74 <StartManageBodyParts+0x544>)
 80059e0:	785b      	ldrb	r3, [r3, #1]
 80059e2:	77bb      	strb	r3, [r7, #30]
					}

					// Trouve le type de bodyPart à mettre
					snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], backX, backY, oldHeadPosition[0], oldHeadPosition[1]);
 80059e4:	4ba4      	ldr	r3, [pc, #656]	@ (8005c78 <StartManageBodyParts+0x548>)
 80059e6:	7818      	ldrb	r0, [r3, #0]
 80059e8:	4ba3      	ldr	r3, [pc, #652]	@ (8005c78 <StartManageBodyParts+0x548>)
 80059ea:	7859      	ldrb	r1, [r3, #1]
 80059ec:	7a3b      	ldrb	r3, [r7, #8]
 80059ee:	7a7a      	ldrb	r2, [r7, #9]
 80059f0:	7fbd      	ldrb	r5, [r7, #30]
 80059f2:	7ffc      	ldrb	r4, [r7, #31]
 80059f4:	9201      	str	r2, [sp, #4]
 80059f6:	9300      	str	r3, [sp, #0]
 80059f8:	462b      	mov	r3, r5
 80059fa:	4622      	mov	r2, r4
 80059fc:	f7fe f884 	bl	8003b08 <whatBodyPart>
 8005a00:	4603      	mov	r3, r0
 8005a02:	461a      	mov	r2, r3
 8005a04:	4b9d      	ldr	r3, [pc, #628]	@ (8005c7c <StartManageBodyParts+0x54c>)
 8005a06:	701a      	strb	r2, [r3, #0]
					snakeBodyPosition[0][0] = oldHeadPosition[0];
 8005a08:	7a3a      	ldrb	r2, [r7, #8]
 8005a0a:	4b9d      	ldr	r3, [pc, #628]	@ (8005c80 <StartManageBodyParts+0x550>)
 8005a0c:	701a      	strb	r2, [r3, #0]
					snakeBodyPosition[0][1] = oldHeadPosition[1];
 8005a0e:	7a7a      	ldrb	r2, [r7, #9]
 8005a10:	4b9b      	ldr	r3, [pc, #620]	@ (8005c80 <StartManageBodyParts+0x550>)
 8005a12:	705a      	strb	r2, [r3, #1]

					// Si on a de la place pour une nouvelle pomme
					uint8_t NBFreeCells = GRID_SIZE_X * GRID_SIZE_Y - snakeSize - 1;
 8005a14:	4b9b      	ldr	r3, [pc, #620]	@ (8005c84 <StartManageBodyParts+0x554>)
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	f1c3 0377 	rsb	r3, r3, #119	@ 0x77
 8005a1c:	74fb      	strb	r3, [r7, #19]
					if (NBFreeCells > NB_APPLES)
 8005a1e:	7cfb      	ldrb	r3, [r7, #19]
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d94b      	bls.n	8005abc <StartManageBodyParts+0x38c>
					{
						// On génère une nouvelle pomme à une position aléatoire qui n'est pas sur le snake ou une autre pomme
						do
						{
							applePosition[i][0] = rand() % GRID_SIZE_X;
 8005a24:	f010 fa14 	bl	8015e50 <rand>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	4b97      	ldr	r3, [pc, #604]	@ (8005c88 <StartManageBodyParts+0x558>)
 8005a2c:	fb83 1302 	smull	r1, r3, r3, r2
 8005a30:	4413      	add	r3, r2
 8005a32:	10d9      	asrs	r1, r3, #3
 8005a34:	17d3      	asrs	r3, r2, #31
 8005a36:	1ac9      	subs	r1, r1, r3
 8005a38:	460b      	mov	r3, r1
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	1a5b      	subs	r3, r3, r1
 8005a3e:	1ad1      	subs	r1, r2, r3
 8005a40:	b249      	sxtb	r1, r1
 8005a42:	4a92      	ldr	r2, [pc, #584]	@ (8005c8c <StartManageBodyParts+0x55c>)
 8005a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a46:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
							applePosition[i][1] = rand() % GRID_SIZE_Y;
 8005a4a:	f010 fa01 	bl	8015e50 <rand>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	425a      	negs	r2, r3
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	f002 0207 	and.w	r2, r2, #7
 8005a5a:	bf58      	it	pl
 8005a5c:	4253      	negpl	r3, r2
 8005a5e:	b259      	sxtb	r1, r3
 8005a60:	4a8a      	ldr	r2, [pc, #552]	@ (8005c8c <StartManageBodyParts+0x55c>)
 8005a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	4413      	add	r3, r2
 8005a68:	460a      	mov	r2, r1
 8005a6a:	705a      	strb	r2, [r3, #1]
						} while (isSnakePosition(applePosition[i][0], applePosition[i][1]) || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 8005a6c:	4a87      	ldr	r2, [pc, #540]	@ (8005c8c <StartManageBodyParts+0x55c>)
 8005a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a70:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	4985      	ldr	r1, [pc, #532]	@ (8005c8c <StartManageBodyParts+0x55c>)
 8005a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	440b      	add	r3, r1
 8005a7e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	4619      	mov	r1, r3
 8005a86:	4610      	mov	r0, r2
 8005a88:	f7fe f8a0 	bl	8003bcc <isSnakePosition>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1c8      	bne.n	8005a24 <StartManageBodyParts+0x2f4>
 8005a92:	4a7e      	ldr	r2, [pc, #504]	@ (8005c8c <StartManageBodyParts+0x55c>)
 8005a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a96:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8005a9a:	b2d8      	uxtb	r0, r3
 8005a9c:	4a7b      	ldr	r2, [pc, #492]	@ (8005c8c <StartManageBodyParts+0x55c>)
 8005a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005aac:	b2d2      	uxtb	r2, r2
 8005aae:	4619      	mov	r1, r3
 8005ab0:	f7fe f8d8 	bl	8003c64 <isApplePosition>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1b4      	bne.n	8005a24 <StartManageBodyParts+0x2f4>
 8005aba:	e00a      	b.n	8005ad2 <StartManageBodyParts+0x3a2>
					}
					else
					{
						applePosition[i][0] = -1;
 8005abc:	4a73      	ldr	r2, [pc, #460]	@ (8005c8c <StartManageBodyParts+0x55c>)
 8005abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac0:	21ff      	movs	r1, #255	@ 0xff
 8005ac2:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
						applePosition[i][1] = -1;
 8005ac6:	4a71      	ldr	r2, [pc, #452]	@ (8005c8c <StartManageBodyParts+0x55c>)
 8005ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	4413      	add	r3, r2
 8005ace:	22ff      	movs	r2, #255	@ 0xff
 8005ad0:	705a      	strb	r2, [r3, #1]
			for (int i = 0; i < NB_APPLES; i++)
 8005ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	f77f aeee 	ble.w	80058bc <StartManageBodyParts+0x18c>
					}
				}
			}

			// On n'a pas mangé de pomme on avance le corps et la queue sans ajouter de bodyPart
			if (!appleEaten)
 8005ae0:	4b6b      	ldr	r3, [pc, #428]	@ (8005c90 <StartManageBodyParts+0x560>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f040 811d 	bne.w	8005d24 <StartManageBodyParts+0x5f4>
			{
				// on met a jour la position de la queue
				if (snakeSize > 0)
 8005aea:	4b66      	ldr	r3, [pc, #408]	@ (8005c84 <StartManageBodyParts+0x554>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d011      	beq.n	8005b16 <StartManageBodyParts+0x3e6>
				{
					snakeTailPosition[0] = snakeBodyPosition[snakeSize - 1][0];
 8005af2:	4b64      	ldr	r3, [pc, #400]	@ (8005c84 <StartManageBodyParts+0x554>)
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	3b01      	subs	r3, #1
 8005af8:	4a61      	ldr	r2, [pc, #388]	@ (8005c80 <StartManageBodyParts+0x550>)
 8005afa:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8005afe:	4b5d      	ldr	r3, [pc, #372]	@ (8005c74 <StartManageBodyParts+0x544>)
 8005b00:	701a      	strb	r2, [r3, #0]
					snakeTailPosition[1] = snakeBodyPosition[snakeSize - 1][1];
 8005b02:	4b60      	ldr	r3, [pc, #384]	@ (8005c84 <StartManageBodyParts+0x554>)
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	3b01      	subs	r3, #1
 8005b08:	4a5d      	ldr	r2, [pc, #372]	@ (8005c80 <StartManageBodyParts+0x550>)
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	4413      	add	r3, r2
 8005b0e:	785a      	ldrb	r2, [r3, #1]
 8005b10:	4b58      	ldr	r3, [pc, #352]	@ (8005c74 <StartManageBodyParts+0x544>)
 8005b12:	705a      	strb	r2, [r3, #1]
 8005b14:	e005      	b.n	8005b22 <StartManageBodyParts+0x3f2>
				}
				else
				{
					snakeTailPosition[0] = oldHeadPosition[0];
 8005b16:	7a3a      	ldrb	r2, [r7, #8]
 8005b18:	4b56      	ldr	r3, [pc, #344]	@ (8005c74 <StartManageBodyParts+0x544>)
 8005b1a:	701a      	strb	r2, [r3, #0]
					snakeTailPosition[1] = oldHeadPosition[1];
 8005b1c:	7a7a      	ldrb	r2, [r7, #9]
 8005b1e:	4b55      	ldr	r3, [pc, #340]	@ (8005c74 <StartManageBodyParts+0x544>)
 8005b20:	705a      	strb	r2, [r3, #1]
				}

				// On avance le corps
				for (int i = snakeSize - 1; i > 0; i--)
 8005b22:	4b58      	ldr	r3, [pc, #352]	@ (8005c84 <StartManageBodyParts+0x554>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	61bb      	str	r3, [r7, #24]
 8005b2a:	e020      	b.n	8005b6e <StartManageBodyParts+0x43e>
				{
					snakeBodyParts[i] = snakeBodyParts[i - 1];
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	4a52      	ldr	r2, [pc, #328]	@ (8005c7c <StartManageBodyParts+0x54c>)
 8005b32:	5cd1      	ldrb	r1, [r2, r3]
 8005b34:	4a51      	ldr	r2, [pc, #324]	@ (8005c7c <StartManageBodyParts+0x54c>)
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	4413      	add	r3, r2
 8005b3a:	460a      	mov	r2, r1
 8005b3c:	701a      	strb	r2, [r3, #0]
					snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	3b01      	subs	r3, #1
 8005b42:	4a4f      	ldr	r2, [pc, #316]	@ (8005c80 <StartManageBodyParts+0x550>)
 8005b44:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8005b48:	4a4d      	ldr	r2, [pc, #308]	@ (8005c80 <StartManageBodyParts+0x550>)
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
					snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	4a4a      	ldr	r2, [pc, #296]	@ (8005c80 <StartManageBodyParts+0x550>)
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	4413      	add	r3, r2
 8005b5a:	7859      	ldrb	r1, [r3, #1]
 8005b5c:	4a48      	ldr	r2, [pc, #288]	@ (8005c80 <StartManageBodyParts+0x550>)
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	4413      	add	r3, r2
 8005b64:	460a      	mov	r2, r1
 8005b66:	705a      	strb	r2, [r3, #1]
				for (int i = snakeSize - 1; i > 0; i--)
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	61bb      	str	r3, [r7, #24]
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	dcdb      	bgt.n	8005b2c <StartManageBodyParts+0x3fc>
				}

				// On met a jour le corps
				if (snakeSize > 0)
 8005b74:	4b43      	ldr	r3, [pc, #268]	@ (8005c84 <StartManageBodyParts+0x554>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 80b3 	beq.w	8005ce4 <StartManageBodyParts+0x5b4>
				{
					// On trouve le type de bodyPart à mettre juste derrière la tête
					snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], snakeBodyPosition[0][0], snakeBodyPosition[0][1], oldHeadPosition[0], oldHeadPosition[1]);
 8005b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8005c78 <StartManageBodyParts+0x548>)
 8005b80:	7818      	ldrb	r0, [r3, #0]
 8005b82:	4b3d      	ldr	r3, [pc, #244]	@ (8005c78 <StartManageBodyParts+0x548>)
 8005b84:	7859      	ldrb	r1, [r3, #1]
 8005b86:	4b3e      	ldr	r3, [pc, #248]	@ (8005c80 <StartManageBodyParts+0x550>)
 8005b88:	781c      	ldrb	r4, [r3, #0]
 8005b8a:	4b3d      	ldr	r3, [pc, #244]	@ (8005c80 <StartManageBodyParts+0x550>)
 8005b8c:	785d      	ldrb	r5, [r3, #1]
 8005b8e:	7a3b      	ldrb	r3, [r7, #8]
 8005b90:	7a7a      	ldrb	r2, [r7, #9]
 8005b92:	9201      	str	r2, [sp, #4]
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	462b      	mov	r3, r5
 8005b98:	4622      	mov	r2, r4
 8005b9a:	f7fd ffb5 	bl	8003b08 <whatBodyPart>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	4b36      	ldr	r3, [pc, #216]	@ (8005c7c <StartManageBodyParts+0x54c>)
 8005ba4:	701a      	strb	r2, [r3, #0]
					snakeBodyPosition[0][0] = oldHeadPosition[0];
 8005ba6:	7a3a      	ldrb	r2, [r7, #8]
 8005ba8:	4b35      	ldr	r3, [pc, #212]	@ (8005c80 <StartManageBodyParts+0x550>)
 8005baa:	701a      	strb	r2, [r3, #0]
					snakeBodyPosition[0][1] = oldHeadPosition[1];
 8005bac:	7a7a      	ldrb	r2, [r7, #9]
 8005bae:	4b34      	ldr	r3, [pc, #208]	@ (8005c80 <StartManageBodyParts+0x550>)
 8005bb0:	705a      	strb	r2, [r3, #1]

					// On met a jour le l'orientation de la queue
					switch (snakeBodyParts[snakeSize - 1])
 8005bb2:	4b34      	ldr	r3, [pc, #208]	@ (8005c84 <StartManageBodyParts+0x554>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	4a30      	ldr	r2, [pc, #192]	@ (8005c7c <StartManageBodyParts+0x54c>)
 8005bba:	5cd3      	ldrb	r3, [r2, r3]
 8005bbc:	2b05      	cmp	r3, #5
 8005bbe:	f200 80b1 	bhi.w	8005d24 <StartManageBodyParts+0x5f4>
 8005bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc8 <StartManageBodyParts+0x498>)
 8005bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc8:	08005be1 	.word	0x08005be1
 8005bcc:	08005c05 	.word	0x08005c05
 8005bd0:	08005c29 	.word	0x08005c29
 8005bd4:	08005c4f 	.word	0x08005c4f
 8005bd8:	08005c99 	.word	0x08005c99
 8005bdc:	08005cbf 	.word	0x08005cbf
					{
					case BottomLeft:
						// TailTop ou TailRight
						if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0])
 8005be0:	4b28      	ldr	r3, [pc, #160]	@ (8005c84 <StartManageBodyParts+0x554>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	3b01      	subs	r3, #1
 8005be6:	4a26      	ldr	r2, [pc, #152]	@ (8005c80 <StartManageBodyParts+0x550>)
 8005be8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8005bec:	4b21      	ldr	r3, [pc, #132]	@ (8005c74 <StartManageBodyParts+0x544>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d103      	bne.n	8005bfc <StartManageBodyParts+0x4cc>
						{
							tailPart = TailTop;
 8005bf4:	4b27      	ldr	r3, [pc, #156]	@ (8005c94 <StartManageBodyParts+0x564>)
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	701a      	strb	r2, [r3, #0]
						}
						else
						{
							tailPart = TailRight;
						}
						break;
 8005bfa:	e093      	b.n	8005d24 <StartManageBodyParts+0x5f4>
							tailPart = TailRight;
 8005bfc:	4b25      	ldr	r3, [pc, #148]	@ (8005c94 <StartManageBodyParts+0x564>)
 8005bfe:	2203      	movs	r2, #3
 8005c00:	701a      	strb	r2, [r3, #0]
						break;
 8005c02:	e08f      	b.n	8005d24 <StartManageBodyParts+0x5f4>
					case BottomRight:
						// TailBottom ou TailLeft
						if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0])
 8005c04:	4b1f      	ldr	r3, [pc, #124]	@ (8005c84 <StartManageBodyParts+0x554>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8005c80 <StartManageBodyParts+0x550>)
 8005c0c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8005c10:	4b18      	ldr	r3, [pc, #96]	@ (8005c74 <StartManageBodyParts+0x544>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d103      	bne.n	8005c20 <StartManageBodyParts+0x4f0>
						{
							tailPart = TailTop;
 8005c18:	4b1e      	ldr	r3, [pc, #120]	@ (8005c94 <StartManageBodyParts+0x564>)
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	701a      	strb	r2, [r3, #0]
						}
						else
						{
							tailPart = TailLeft;
						}
						break;
 8005c1e:	e081      	b.n	8005d24 <StartManageBodyParts+0x5f4>
							tailPart = TailLeft;
 8005c20:	4b1c      	ldr	r3, [pc, #112]	@ (8005c94 <StartManageBodyParts+0x564>)
 8005c22:	2202      	movs	r2, #2
 8005c24:	701a      	strb	r2, [r3, #0]
						break;
 8005c26:	e07d      	b.n	8005d24 <StartManageBodyParts+0x5f4>
					case BottomTop:
						// TailTop ou TailBottom
						if (snakeBodyPosition[snakeSize - 1][1] < snakeTailPosition[1])
 8005c28:	4b16      	ldr	r3, [pc, #88]	@ (8005c84 <StartManageBodyParts+0x554>)
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	4a14      	ldr	r2, [pc, #80]	@ (8005c80 <StartManageBodyParts+0x550>)
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	4413      	add	r3, r2
 8005c34:	785a      	ldrb	r2, [r3, #1]
 8005c36:	4b0f      	ldr	r3, [pc, #60]	@ (8005c74 <StartManageBodyParts+0x544>)
 8005c38:	785b      	ldrb	r3, [r3, #1]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d203      	bcs.n	8005c46 <StartManageBodyParts+0x516>
						{
							tailPart = TailTop;
 8005c3e:	4b15      	ldr	r3, [pc, #84]	@ (8005c94 <StartManageBodyParts+0x564>)
 8005c40:	2201      	movs	r2, #1
 8005c42:	701a      	strb	r2, [r3, #0]
						}
						else
						{
							tailPart = TailBottom;
						}
						break;
 8005c44:	e06e      	b.n	8005d24 <StartManageBodyParts+0x5f4>
							tailPart = TailBottom;
 8005c46:	4b13      	ldr	r3, [pc, #76]	@ (8005c94 <StartManageBodyParts+0x564>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	701a      	strb	r2, [r3, #0]
						break;
 8005c4c:	e06a      	b.n	8005d24 <StartManageBodyParts+0x5f4>
					case LeftRight:
						// TailRight ou TailLeft
						if (snakeBodyPosition[snakeSize - 1][0] < snakeTailPosition[0])
 8005c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c84 <StartManageBodyParts+0x554>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	4a0a      	ldr	r2, [pc, #40]	@ (8005c80 <StartManageBodyParts+0x550>)
 8005c56:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8005c5a:	4b06      	ldr	r3, [pc, #24]	@ (8005c74 <StartManageBodyParts+0x544>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d203      	bcs.n	8005c6a <StartManageBodyParts+0x53a>
						{
							tailPart = TailLeft;
 8005c62:	4b0c      	ldr	r3, [pc, #48]	@ (8005c94 <StartManageBodyParts+0x564>)
 8005c64:	2202      	movs	r2, #2
 8005c66:	701a      	strb	r2, [r3, #0]
						}
						else
						{
							tailPart = TailRight;
						}
						break;
 8005c68:	e05c      	b.n	8005d24 <StartManageBodyParts+0x5f4>
							tailPart = TailRight;
 8005c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8005c94 <StartManageBodyParts+0x564>)
 8005c6c:	2203      	movs	r2, #3
 8005c6e:	701a      	strb	r2, [r3, #0]
						break;
 8005c70:	e058      	b.n	8005d24 <StartManageBodyParts+0x5f4>
 8005c72:	bf00      	nop
 8005c74:	2000003c 	.word	0x2000003c
 8005c78:	20000038 	.word	0x20000038
 8005c7c:	20000a2c 	.word	0x20000a2c
 8005c80:	20000ab8 	.word	0x20000ab8
 8005c84:	20000aa4 	.word	0x20000aa4
 8005c88:	88888889 	.word	0x88888889
 8005c8c:	20000bac 	.word	0x20000bac
 8005c90:	20000aa8 	.word	0x20000aa8
 8005c94:	20000031 	.word	0x20000031
					case LeftTop:
						// TailRight ou TailBottom
						if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1])
 8005c98:	4b26      	ldr	r3, [pc, #152]	@ (8005d34 <StartManageBodyParts+0x604>)
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	4a26      	ldr	r2, [pc, #152]	@ (8005d38 <StartManageBodyParts+0x608>)
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	4413      	add	r3, r2
 8005ca4:	785a      	ldrb	r2, [r3, #1]
 8005ca6:	4b25      	ldr	r3, [pc, #148]	@ (8005d3c <StartManageBodyParts+0x60c>)
 8005ca8:	785b      	ldrb	r3, [r3, #1]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d103      	bne.n	8005cb6 <StartManageBodyParts+0x586>
						{
							tailPart = TailRight;
 8005cae:	4b24      	ldr	r3, [pc, #144]	@ (8005d40 <StartManageBodyParts+0x610>)
 8005cb0:	2203      	movs	r2, #3
 8005cb2:	701a      	strb	r2, [r3, #0]
						}
						else
						{
							tailPart = TailBottom;
						}
						break;
 8005cb4:	e036      	b.n	8005d24 <StartManageBodyParts+0x5f4>
							tailPart = TailBottom;
 8005cb6:	4b22      	ldr	r3, [pc, #136]	@ (8005d40 <StartManageBodyParts+0x610>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	701a      	strb	r2, [r3, #0]
						break;
 8005cbc:	e032      	b.n	8005d24 <StartManageBodyParts+0x5f4>
					case RightTop:
						// TailLeft ou TailBottom
						if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1])
 8005cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8005d34 <StartManageBodyParts+0x604>)
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8005d38 <StartManageBodyParts+0x608>)
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	4413      	add	r3, r2
 8005cca:	785a      	ldrb	r2, [r3, #1]
 8005ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8005d3c <StartManageBodyParts+0x60c>)
 8005cce:	785b      	ldrb	r3, [r3, #1]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d103      	bne.n	8005cdc <StartManageBodyParts+0x5ac>
						{
							tailPart = TailLeft;
 8005cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8005d40 <StartManageBodyParts+0x610>)
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	701a      	strb	r2, [r3, #0]
						}
						else
						{
							tailPart = TailBottom;
						}
						break;
 8005cda:	e023      	b.n	8005d24 <StartManageBodyParts+0x5f4>
							tailPart = TailBottom;
 8005cdc:	4b18      	ldr	r3, [pc, #96]	@ (8005d40 <StartManageBodyParts+0x610>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	701a      	strb	r2, [r3, #0]
						break;
 8005ce2:	e01f      	b.n	8005d24 <StartManageBodyParts+0x5f4>
					}
				}
				else
				{
					switch (headPart)
 8005ce4:	4b17      	ldr	r3, [pc, #92]	@ (8005d44 <StartManageBodyParts+0x614>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d81b      	bhi.n	8005d24 <StartManageBodyParts+0x5f4>
 8005cec:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf4 <StartManageBodyParts+0x5c4>)
 8005cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf2:	bf00      	nop
 8005cf4:	08005d05 	.word	0x08005d05
 8005cf8:	08005d0d 	.word	0x08005d0d
 8005cfc:	08005d15 	.word	0x08005d15
 8005d00:	08005d1d 	.word	0x08005d1d
					{
					case HeadTop:
						tailPart = TailTop;
 8005d04:	4b0e      	ldr	r3, [pc, #56]	@ (8005d40 <StartManageBodyParts+0x610>)
 8005d06:	2201      	movs	r2, #1
 8005d08:	701a      	strb	r2, [r3, #0]
						break;
 8005d0a:	e00b      	b.n	8005d24 <StartManageBodyParts+0x5f4>
					case HeadBottom:
						tailPart = TailBottom;
 8005d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d40 <StartManageBodyParts+0x610>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	701a      	strb	r2, [r3, #0]
						break;
 8005d12:	e007      	b.n	8005d24 <StartManageBodyParts+0x5f4>
					case HeadLeft:
						tailPart = TailLeft;
 8005d14:	4b0a      	ldr	r3, [pc, #40]	@ (8005d40 <StartManageBodyParts+0x610>)
 8005d16:	2202      	movs	r2, #2
 8005d18:	701a      	strb	r2, [r3, #0]
						break;
 8005d1a:	e003      	b.n	8005d24 <StartManageBodyParts+0x5f4>
					case HeadRight:
						tailPart = TailRight;
 8005d1c:	4b08      	ldr	r3, [pc, #32]	@ (8005d40 <StartManageBodyParts+0x610>)
 8005d1e:	2203      	movs	r2, #3
 8005d20:	701a      	strb	r2, [r3, #0]
						break;
 8005d22:	bf00      	nop
					}
				}
			}
		}

		vTaskDelayUntil(&xLastWakeTime, delay);
 8005d24:	f107 030c 	add.w	r3, r7, #12
 8005d28:	6979      	ldr	r1, [r7, #20]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f00e fb08 	bl	8014340 <vTaskDelayUntil>
		delay = pdMS_TO_TICKS(1000. / speed);
 8005d30:	e521      	b.n	8005776 <StartManageBodyParts+0x46>
 8005d32:	bf00      	nop
 8005d34:	20000aa4 	.word	0x20000aa4
 8005d38:	20000ab8 	.word	0x20000ab8
 8005d3c:	2000003c 	.word	0x2000003c
 8005d40:	20000031 	.word	0x20000031
 8005d44:	20000a29 	.word	0x20000a29

08005d48 <StartTsHandler>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTsHandler */
void StartTsHandler(void const *argument)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTsHandler */
	/* Infinite loop */
	for (;;)
	{
		if (!gameStarted)
 8005d50:	4b29      	ldr	r3, [pc, #164]	@ (8005df8 <StartTsHandler+0xb0>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <StartTsHandler+0x14>
			rand();
 8005d58:	f010 f87a 	bl	8015e50 <rand>

		BSP_TS_GetState(&TS_State);
 8005d5c:	4827      	ldr	r0, [pc, #156]	@ (8005dfc <StartTsHandler+0xb4>)
 8005d5e:	f001 ff71 	bl	8007c44 <BSP_TS_GetState>

		if (!TS_State.touchDetected && screenPressed)
 8005d62:	4b26      	ldr	r3, [pc, #152]	@ (8005dfc <StartTsHandler+0xb4>)
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d136      	bne.n	8005dd8 <StartTsHandler+0x90>
 8005d6a:	4b25      	ldr	r3, [pc, #148]	@ (8005e00 <StartTsHandler+0xb8>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d032      	beq.n	8005dd8 <StartTsHandler+0x90>
		{
			if (gameOver)
 8005d72:	4b24      	ldr	r3, [pc, #144]	@ (8005e04 <StartTsHandler+0xbc>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d005      	beq.n	8005d86 <StartTsHandler+0x3e>
			{
				BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8005d7a:	4823      	ldr	r0, [pc, #140]	@ (8005e08 <StartTsHandler+0xc0>)
 8005d7c:	f000 fff2 	bl	8006d64 <BSP_LCD_Clear>
				restartGame();
 8005d80:	f7fe f81e 	bl	8003dc0 <restartGame>
 8005d84:	e028      	b.n	8005dd8 <StartTsHandler+0x90>
			}
			else if (gamePaused)
 8005d86:	4b21      	ldr	r3, [pc, #132]	@ (8005e0c <StartTsHandler+0xc4>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d014      	beq.n	8005db8 <StartTsHandler+0x70>
			{
				xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8005d8e:	4b20      	ldr	r3, [pc, #128]	@ (8005e10 <StartTsHandler+0xc8>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f04f 31ff 	mov.w	r1, #4294967295
 8005d96:	4618      	mov	r0, r3
 8005d98:	f00d fdfa 	bl	8013990 <xQueueSemaphoreTake>
				BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8005d9c:	481a      	ldr	r0, [pc, #104]	@ (8005e08 <StartTsHandler+0xc0>)
 8005d9e:	f000 ffe1 	bl	8006d64 <BSP_LCD_Clear>
				xSemaphoreGive(displayMutexHandle);
 8005da2:	4b1b      	ldr	r3, [pc, #108]	@ (8005e10 <StartTsHandler+0xc8>)
 8005da4:	6818      	ldr	r0, [r3, #0]
 8005da6:	2300      	movs	r3, #0
 8005da8:	2200      	movs	r2, #0
 8005daa:	2100      	movs	r1, #0
 8005dac:	f00d fac2 	bl	8013334 <xQueueGenericSend>
				gamePaused = 0;
 8005db0:	4b16      	ldr	r3, [pc, #88]	@ (8005e0c <StartTsHandler+0xc4>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	e00f      	b.n	8005dd8 <StartTsHandler+0x90>
			}
			else if (!gameStarted)
 8005db8:	4b0f      	ldr	r3, [pc, #60]	@ (8005df8 <StartTsHandler+0xb0>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d108      	bne.n	8005dd2 <StartTsHandler+0x8a>
			{
				BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8005dc0:	4811      	ldr	r0, [pc, #68]	@ (8005e08 <StartTsHandler+0xc0>)
 8005dc2:	f000 ffcf 	bl	8006d64 <BSP_LCD_Clear>
				restartGame();
 8005dc6:	f7fd fffb 	bl	8003dc0 <restartGame>
				gameStarted = 1;
 8005dca:	4b0b      	ldr	r3, [pc, #44]	@ (8005df8 <StartTsHandler+0xb0>)
 8005dcc:	2201      	movs	r2, #1
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	e002      	b.n	8005dd8 <StartTsHandler+0x90>
			}
			else
			{
				gamePaused = 1;
 8005dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8005e0c <StartTsHandler+0xc4>)
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]
			}
		}

		if (TS_State.touchDetected)
 8005dd8:	4b08      	ldr	r3, [pc, #32]	@ (8005dfc <StartTsHandler+0xb4>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d003      	beq.n	8005de8 <StartTsHandler+0xa0>
		{
			screenPressed = 1;
 8005de0:	4b07      	ldr	r3, [pc, #28]	@ (8005e00 <StartTsHandler+0xb8>)
 8005de2:	2201      	movs	r2, #1
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	e002      	b.n	8005dee <StartTsHandler+0xa6>
		}
		else
		{
			screenPressed = 0;
 8005de8:	4b05      	ldr	r3, [pc, #20]	@ (8005e00 <StartTsHandler+0xb8>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	601a      	str	r2, [r3, #0]
		}

		osDelay(10);
 8005dee:	200a      	movs	r0, #10
 8005df0:	f00c fe78 	bl	8012ae4 <osDelay>
		if (!gameStarted)
 8005df4:	e7ac      	b.n	8005d50 <StartTsHandler+0x8>
 8005df6:	bf00      	nop
 8005df8:	20000aac 	.word	0x20000aac
 8005dfc:	200009f0 	.word	0x200009f0
 8005e00:	20000a1c 	.word	0x20000a1c
 8005e04:	20000ab4 	.word	0x20000ab4
 8005e08:	ff81cd4b 	.word	0xff81cd4b
 8005e0c:	20000ab0 	.word	0x20000ab0
 8005e10:	20000974 	.word	0x20000974

08005e14 <StartPlaySongTask>:
 * @brief Function implementing the playSongTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPlaySongTask */
void StartPlaySongTask(void const *argument) {
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
    uint32_t bytesread;
    
    /* Infinite loop */
    for (;;) {
        // On attend le signal de réveil
        xQueueReceive(WakeUpHandle, &i, portMAX_DELAY);
 8005e1c:	4b12      	ldr	r3, [pc, #72]	@ (8005e68 <StartPlaySongTask+0x54>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f107 0113 	add.w	r1, r7, #19
 8005e24:	f04f 32ff 	mov.w	r2, #4294967295
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f00d fcc9 	bl	80137c0 <xQueueReceive>
        
        // On arrive ici si la musique est terminée
        if (blockPointer++ == numberOfBlocks - 1) {
 8005e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8005e6c <StartPlaySongTask+0x58>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	490d      	ldr	r1, [pc, #52]	@ (8005e6c <StartPlaySongTask+0x58>)
 8005e36:	600a      	str	r2, [r1, #0]
 8005e38:	4a0d      	ldr	r2, [pc, #52]	@ (8005e70 <StartPlaySongTask+0x5c>)
 8005e3a:	6812      	ldr	r2, [r2, #0]
 8005e3c:	3a01      	subs	r2, #1
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d101      	bne.n	8005e46 <StartPlaySongTask+0x32>
            loadWav();
 8005e42:	f7fe f93d 	bl	80040c0 <loadWav>
        }
        
        // On détermine la position du buffer à remplir
        uint8_t *bufferPosition = (i == 0) ? AUDIO_BUFFER_OUT : (AUDIO_BUFFER_OUT + AUDIO_BLOCK_SIZE);
 8005e46:	7cfb      	ldrb	r3, [r7, #19]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <StartPlaySongTask+0x3c>
 8005e4c:	4b09      	ldr	r3, [pc, #36]	@ (8005e74 <StartPlaySongTask+0x60>)
 8005e4e:	e000      	b.n	8005e52 <StartPlaySongTask+0x3e>
 8005e50:	4b09      	ldr	r3, [pc, #36]	@ (8005e78 <StartPlaySongTask+0x64>)
 8005e52:	617b      	str	r3, [r7, #20]
        
        // On lit le bloc de données
        f_read(&SDFile, bufferPosition, AUDIO_BLOCK_SIZE, (void *)&bytesread);
 8005e54:	f107 030c 	add.w	r3, r7, #12
 8005e58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e5c:	6979      	ldr	r1, [r7, #20]
 8005e5e:	4807      	ldr	r0, [pc, #28]	@ (8005e7c <StartPlaySongTask+0x68>)
 8005e60:	f7fc fe99 	bl	8002b96 <f_read>
    for (;;) {
 8005e64:	e7da      	b.n	8005e1c <StartPlaySongTask+0x8>
 8005e66:	bf00      	nop
 8005e68:	20000970 	.word	0x20000970
 8005e6c:	2000097c 	.word	0x2000097c
 8005e70:	20000978 	.word	0x20000978
 8005e74:	c007fc00 	.word	0xc007fc00
 8005e78:	c007fe00 	.word	0xc007fe00
 8005e7c:	200012f0 	.word	0x200012f0

08005e80 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a04      	ldr	r2, [pc, #16]	@ (8005ea0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d101      	bne.n	8005e96 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8005e92:	f004 fc51 	bl	800a738 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8005e96:	bf00      	nop
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	40001000 	.word	0x40001000

08005ea4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005ea8:	b672      	cpsid	i
}
 8005eaa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8005eac:	bf00      	nop
 8005eae:	e7fd      	b.n	8005eac <Error_Handler+0x8>

08005eb0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08c      	sub	sp, #48	@ 0x30
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a51      	ldr	r2, [pc, #324]	@ (8006000 <I2Cx_MspInit+0x150>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d14d      	bne.n	8005f5c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8005ec0:	4b50      	ldr	r3, [pc, #320]	@ (8006004 <I2Cx_MspInit+0x154>)
 8005ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec4:	4a4f      	ldr	r2, [pc, #316]	@ (8006004 <I2Cx_MspInit+0x154>)
 8005ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eca:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ecc:	4b4d      	ldr	r3, [pc, #308]	@ (8006004 <I2Cx_MspInit+0x154>)
 8005ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ed4:	61bb      	str	r3, [r7, #24]
 8005ed6:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8005ed8:	2380      	movs	r3, #128	@ 0x80
 8005eda:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8005edc:	2312      	movs	r3, #18
 8005ede:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8005ee8:	2304      	movs	r3, #4
 8005eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005eec:	f107 031c 	add.w	r3, r7, #28
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4845      	ldr	r0, [pc, #276]	@ (8006008 <I2Cx_MspInit+0x158>)
 8005ef4:	f005 ffd0 	bl	800be98 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8005ef8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005efc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005efe:	f107 031c 	add.w	r3, r7, #28
 8005f02:	4619      	mov	r1, r3
 8005f04:	4840      	ldr	r0, [pc, #256]	@ (8006008 <I2Cx_MspInit+0x158>)
 8005f06:	f005 ffc7 	bl	800be98 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8005f0a:	4b3e      	ldr	r3, [pc, #248]	@ (8006004 <I2Cx_MspInit+0x154>)
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0e:	4a3d      	ldr	r2, [pc, #244]	@ (8006004 <I2Cx_MspInit+0x154>)
 8005f10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005f14:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f16:	4b3b      	ldr	r3, [pc, #236]	@ (8006004 <I2Cx_MspInit+0x154>)
 8005f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8005f22:	4b38      	ldr	r3, [pc, #224]	@ (8006004 <I2Cx_MspInit+0x154>)
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	4a37      	ldr	r2, [pc, #220]	@ (8006004 <I2Cx_MspInit+0x154>)
 8005f28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005f2c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8005f2e:	4b35      	ldr	r3, [pc, #212]	@ (8006004 <I2Cx_MspInit+0x154>)
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	4a34      	ldr	r2, [pc, #208]	@ (8006004 <I2Cx_MspInit+0x154>)
 8005f34:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005f38:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	210f      	movs	r1, #15
 8005f3e:	2048      	movs	r0, #72	@ 0x48
 8005f40:	f005 f8f0 	bl	800b124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8005f44:	2048      	movs	r0, #72	@ 0x48
 8005f46:	f005 f909 	bl	800b15c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	210f      	movs	r1, #15
 8005f4e:	2049      	movs	r0, #73	@ 0x49
 8005f50:	f005 f8e8 	bl	800b124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8005f54:	2049      	movs	r0, #73	@ 0x49
 8005f56:	f005 f901 	bl	800b15c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8005f5a:	e04d      	b.n	8005ff8 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8005f5c:	4b29      	ldr	r3, [pc, #164]	@ (8006004 <I2Cx_MspInit+0x154>)
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f60:	4a28      	ldr	r2, [pc, #160]	@ (8006004 <I2Cx_MspInit+0x154>)
 8005f62:	f043 0302 	orr.w	r3, r3, #2
 8005f66:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f68:	4b26      	ldr	r3, [pc, #152]	@ (8006004 <I2Cx_MspInit+0x154>)
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	613b      	str	r3, [r7, #16]
 8005f72:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8005f74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f78:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8005f7a:	2312      	movs	r3, #18
 8005f7c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005f82:	2302      	movs	r3, #2
 8005f84:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8005f86:	2304      	movs	r3, #4
 8005f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005f8a:	f107 031c 	add.w	r3, r7, #28
 8005f8e:	4619      	mov	r1, r3
 8005f90:	481e      	ldr	r0, [pc, #120]	@ (800600c <I2Cx_MspInit+0x15c>)
 8005f92:	f005 ff81 	bl	800be98 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8005f96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005f9c:	f107 031c 	add.w	r3, r7, #28
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	481a      	ldr	r0, [pc, #104]	@ (800600c <I2Cx_MspInit+0x15c>)
 8005fa4:	f005 ff78 	bl	800be98 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8005fa8:	4b16      	ldr	r3, [pc, #88]	@ (8006004 <I2Cx_MspInit+0x154>)
 8005faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fac:	4a15      	ldr	r2, [pc, #84]	@ (8006004 <I2Cx_MspInit+0x154>)
 8005fae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005fb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fb4:	4b13      	ldr	r3, [pc, #76]	@ (8006004 <I2Cx_MspInit+0x154>)
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fbc:	60fb      	str	r3, [r7, #12]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8005fc0:	4b10      	ldr	r3, [pc, #64]	@ (8006004 <I2Cx_MspInit+0x154>)
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	4a0f      	ldr	r2, [pc, #60]	@ (8006004 <I2Cx_MspInit+0x154>)
 8005fc6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005fca:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8005fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8006004 <I2Cx_MspInit+0x154>)
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8006004 <I2Cx_MspInit+0x154>)
 8005fd2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005fd6:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8005fd8:	2200      	movs	r2, #0
 8005fda:	210f      	movs	r1, #15
 8005fdc:	201f      	movs	r0, #31
 8005fde:	f005 f8a1 	bl	800b124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8005fe2:	201f      	movs	r0, #31
 8005fe4:	f005 f8ba 	bl	800b15c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8005fe8:	2200      	movs	r2, #0
 8005fea:	210f      	movs	r1, #15
 8005fec:	2020      	movs	r0, #32
 8005fee:	f005 f899 	bl	800b124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8005ff2:	2020      	movs	r0, #32
 8005ff4:	f005 f8b2 	bl	800b15c <HAL_NVIC_EnableIRQ>
}
 8005ff8:	bf00      	nop
 8005ffa:	3730      	adds	r7, #48	@ 0x30
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	20000bb4 	.word	0x20000bb4
 8006004:	40023800 	.word	0x40023800
 8006008:	40021c00 	.word	0x40021c00
 800600c:	40020400 	.word	0x40020400

08006010 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f006 fd29 	bl	800ca70 <HAL_I2C_GetState>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d125      	bne.n	8006070 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a14      	ldr	r2, [pc, #80]	@ (8006078 <I2Cx_Init+0x68>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d103      	bne.n	8006034 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a13      	ldr	r2, [pc, #76]	@ (800607c <I2Cx_Init+0x6c>)
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	e002      	b.n	800603a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a12      	ldr	r2, [pc, #72]	@ (8006080 <I2Cx_Init+0x70>)
 8006038:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a11      	ldr	r2, [pc, #68]	@ (8006084 <I2Cx_Init+0x74>)
 800603e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff ff23 	bl	8005eb0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f006 f9fe 	bl	800c46c <HAL_I2C_Init>
  }
}
 8006070:	bf00      	nop
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	20000bb4 	.word	0x20000bb4
 800607c:	40005c00 	.word	0x40005c00
 8006080:	40005400 	.word	0x40005400
 8006084:	40912732 	.word	0x40912732

08006088 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08a      	sub	sp, #40	@ 0x28
 800608c:	af04      	add	r7, sp, #16
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	4608      	mov	r0, r1
 8006092:	4611      	mov	r1, r2
 8006094:	461a      	mov	r2, r3
 8006096:	4603      	mov	r3, r0
 8006098:	72fb      	strb	r3, [r7, #11]
 800609a:	460b      	mov	r3, r1
 800609c:	813b      	strh	r3, [r7, #8]
 800609e:	4613      	mov	r3, r2
 80060a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80060a6:	7afb      	ldrb	r3, [r7, #11]
 80060a8:	b299      	uxth	r1, r3
 80060aa:	88f8      	ldrh	r0, [r7, #6]
 80060ac:	893a      	ldrh	r2, [r7, #8]
 80060ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80060b2:	9302      	str	r3, [sp, #8]
 80060b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060b6:	9301      	str	r3, [sp, #4]
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	4603      	mov	r3, r0
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f006 fbbc 	bl	800c83c <HAL_I2C_Mem_Read>
 80060c4:	4603      	mov	r3, r0
 80060c6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80060c8:	7dfb      	ldrb	r3, [r7, #23]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d004      	beq.n	80060d8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80060ce:	7afb      	ldrb	r3, [r7, #11]
 80060d0:	4619      	mov	r1, r3
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 f832 	bl	800613c <I2Cx_Error>
  }
  return status;    
 80060d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3718      	adds	r7, #24
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b08a      	sub	sp, #40	@ 0x28
 80060e6:	af04      	add	r7, sp, #16
 80060e8:	60f8      	str	r0, [r7, #12]
 80060ea:	4608      	mov	r0, r1
 80060ec:	4611      	mov	r1, r2
 80060ee:	461a      	mov	r2, r3
 80060f0:	4603      	mov	r3, r0
 80060f2:	72fb      	strb	r3, [r7, #11]
 80060f4:	460b      	mov	r3, r1
 80060f6:	813b      	strh	r3, [r7, #8]
 80060f8:	4613      	mov	r3, r2
 80060fa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006100:	7afb      	ldrb	r3, [r7, #11]
 8006102:	b299      	uxth	r1, r3
 8006104:	88f8      	ldrh	r0, [r7, #6]
 8006106:	893a      	ldrh	r2, [r7, #8]
 8006108:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800610c:	9302      	str	r3, [sp, #8]
 800610e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006110:	9301      	str	r3, [sp, #4]
 8006112:	6a3b      	ldr	r3, [r7, #32]
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	4603      	mov	r3, r0
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f006 fa7b 	bl	800c614 <HAL_I2C_Mem_Write>
 800611e:	4603      	mov	r3, r0
 8006120:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8006122:	7dfb      	ldrb	r3, [r7, #23]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d004      	beq.n	8006132 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8006128:	7afb      	ldrb	r3, [r7, #11]
 800612a:	4619      	mov	r1, r3
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 f805 	bl	800613c <I2Cx_Error>
  }
  return status;
 8006132:	7dfb      	ldrb	r3, [r7, #23]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3718      	adds	r7, #24
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	460b      	mov	r3, r1
 8006146:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f006 fa1f 	bl	800c58c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7ff ff5e 	bl	8006010 <I2Cx_Init>
}
 8006154:	bf00      	nop
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8006160:	4802      	ldr	r0, [pc, #8]	@ (800616c <AUDIO_IO_Init+0x10>)
 8006162:	f7ff ff55 	bl	8006010 <I2Cx_Init>
}
 8006166:	bf00      	nop
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20000bb4 	.word	0x20000bb4

08006170 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0
}
 8006174:	bf00      	nop
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
	...

08006180 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af02      	add	r7, sp, #8
 8006186:	4603      	mov	r3, r0
 8006188:	71fb      	strb	r3, [r7, #7]
 800618a:	460b      	mov	r3, r1
 800618c:	80bb      	strh	r3, [r7, #4]
 800618e:	4613      	mov	r3, r2
 8006190:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8006192:	887b      	ldrh	r3, [r7, #2]
 8006194:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8006196:	89fb      	ldrh	r3, [r7, #14]
 8006198:	0a1b      	lsrs	r3, r3, #8
 800619a:	b29b      	uxth	r3, r3
 800619c:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800619e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80061a2:	021b      	lsls	r3, r3, #8
 80061a4:	b21a      	sxth	r2, r3
 80061a6:	887b      	ldrh	r3, [r7, #2]
 80061a8:	b21b      	sxth	r3, r3
 80061aa:	4313      	orrs	r3, r2
 80061ac:	b21b      	sxth	r3, r3
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80061b2:	88ba      	ldrh	r2, [r7, #4]
 80061b4:	79f9      	ldrb	r1, [r7, #7]
 80061b6:	2302      	movs	r3, #2
 80061b8:	9301      	str	r3, [sp, #4]
 80061ba:	1cbb      	adds	r3, r7, #2
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	2302      	movs	r3, #2
 80061c0:	4803      	ldr	r0, [pc, #12]	@ (80061d0 <AUDIO_IO_Write+0x50>)
 80061c2:	f7ff ff8e 	bl	80060e2 <I2Cx_WriteMultiple>
}
 80061c6:	bf00      	nop
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	20000bb4 	.word	0x20000bb4

080061d4 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af02      	add	r7, sp, #8
 80061da:	4603      	mov	r3, r0
 80061dc:	460a      	mov	r2, r1
 80061de:	71fb      	strb	r3, [r7, #7]
 80061e0:	4613      	mov	r3, r2
 80061e2:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 80061e4:	2300      	movs	r3, #0
 80061e6:	81bb      	strh	r3, [r7, #12]
 80061e8:	2300      	movs	r3, #0
 80061ea:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 80061ec:	88ba      	ldrh	r2, [r7, #4]
 80061ee:	79f9      	ldrb	r1, [r7, #7]
 80061f0:	2302      	movs	r3, #2
 80061f2:	9301      	str	r3, [sp, #4]
 80061f4:	f107 030c 	add.w	r3, r7, #12
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	2302      	movs	r3, #2
 80061fc:	480a      	ldr	r0, [pc, #40]	@ (8006228 <AUDIO_IO_Read+0x54>)
 80061fe:	f7ff ff43 	bl	8006088 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8006202:	89bb      	ldrh	r3, [r7, #12]
 8006204:	0a1b      	lsrs	r3, r3, #8
 8006206:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8006208:	89bb      	ldrh	r3, [r7, #12]
 800620a:	b21b      	sxth	r3, r3
 800620c:	021b      	lsls	r3, r3, #8
 800620e:	b21a      	sxth	r2, r3
 8006210:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006214:	4313      	orrs	r3, r2
 8006216:	b21b      	sxth	r3, r3
 8006218:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 800621a:	89fb      	ldrh	r3, [r7, #14]
 800621c:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 800621e:	89bb      	ldrh	r3, [r7, #12]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	20000bb4 	.word	0x20000bb4

0800622c <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f004 fa9f 	bl	800a778 <HAL_Delay>
}
 800623a:	bf00      	nop
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
	...

08006244 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8006248:	4802      	ldr	r0, [pc, #8]	@ (8006254 <TS_IO_Init+0x10>)
 800624a:	f7ff fee1 	bl	8006010 <I2Cx_Init>
}
 800624e:	bf00      	nop
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	20000bb4 	.word	0x20000bb4

08006258 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af02      	add	r7, sp, #8
 800625e:	4603      	mov	r3, r0
 8006260:	71fb      	strb	r3, [r7, #7]
 8006262:	460b      	mov	r3, r1
 8006264:	71bb      	strb	r3, [r7, #6]
 8006266:	4613      	mov	r3, r2
 8006268:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800626a:	79bb      	ldrb	r3, [r7, #6]
 800626c:	b29a      	uxth	r2, r3
 800626e:	79f9      	ldrb	r1, [r7, #7]
 8006270:	2301      	movs	r3, #1
 8006272:	9301      	str	r3, [sp, #4]
 8006274:	1d7b      	adds	r3, r7, #5
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	2301      	movs	r3, #1
 800627a:	4803      	ldr	r0, [pc, #12]	@ (8006288 <TS_IO_Write+0x30>)
 800627c:	f7ff ff31 	bl	80060e2 <I2Cx_WriteMultiple>
}
 8006280:	bf00      	nop
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	20000bb4 	.word	0x20000bb4

0800628c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af02      	add	r7, sp, #8
 8006292:	4603      	mov	r3, r0
 8006294:	460a      	mov	r2, r1
 8006296:	71fb      	strb	r3, [r7, #7]
 8006298:	4613      	mov	r3, r2
 800629a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800629c:	2300      	movs	r3, #0
 800629e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80062a0:	79bb      	ldrb	r3, [r7, #6]
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	79f9      	ldrb	r1, [r7, #7]
 80062a6:	2301      	movs	r3, #1
 80062a8:	9301      	str	r3, [sp, #4]
 80062aa:	f107 030f 	add.w	r3, r7, #15
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	2301      	movs	r3, #1
 80062b2:	4804      	ldr	r0, [pc, #16]	@ (80062c4 <TS_IO_Read+0x38>)
 80062b4:	f7ff fee8 	bl	8006088 <I2Cx_ReadMultiple>

  return read_value;
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20000bb4 	.word	0x20000bb4

080062c8 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f004 fa51 	bl	800a778 <HAL_Delay>
}
 80062d6:	bf00      	nop
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
	...

080062e0 <BSP_AUDIO_OUT_Play>:
 * @param  pBuffer: Pointer to the buffer
 * @param  Size: Number of audio data in BYTES unit.
 *         In memory, first element is for left channel, second element is for right channel
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_Play(uint16_t *pBuffer, uint32_t Size) {
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
	/* Call the audio Codec Play function */
	if (audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0) {
 80062ea:	4b10      	ldr	r3, [pc, #64]	@ (800632c <BSP_AUDIO_OUT_Play+0x4c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	b292      	uxth	r2, r2
 80062f4:	6879      	ldr	r1, [r7, #4]
 80062f6:	2034      	movs	r0, #52	@ 0x34
 80062f8:	4798      	blx	r3
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <BSP_AUDIO_OUT_Play+0x24>
		return AUDIO_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e00f      	b.n	8006324 <BSP_AUDIO_OUT_Play+0x44>
	} else {
		/* Update the Media layer and enable it for play */
		HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer,
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800630a:	d203      	bcs.n	8006314 <BSP_AUDIO_OUT_Play+0x34>
				DMA_MAX(Size / AUDIODATA_SIZE));
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	085b      	lsrs	r3, r3, #1
		HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer,
 8006310:	b29b      	uxth	r3, r3
 8006312:	e001      	b.n	8006318 <BSP_AUDIO_OUT_Play+0x38>
 8006314:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006318:	461a      	mov	r2, r3
 800631a:	6879      	ldr	r1, [r7, #4]
 800631c:	4804      	ldr	r0, [pc, #16]	@ (8006330 <BSP_AUDIO_OUT_Play+0x50>)
 800631e:	f008 fed3 	bl	800f0c8 <HAL_SAI_Transmit_DMA>

		return AUDIO_OK;
 8006322:	2300      	movs	r3, #0
	}
}
 8006324:	4618      	mov	r0, r3
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	20000c08 	.word	0x20000c08
 8006330:	20000c0c 	.word	0x20000c0c

08006334 <BSP_AUDIO_OUT_SetVolume>:
 * @brief  Controls the current audio volume level.
 * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for
 *         Mute and 100 for Max volume level).
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_SetVolume(uint8_t Volume) {
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	4603      	mov	r3, r0
 800633c:	71fb      	strb	r3, [r7, #7]
	/* Call the codec volume control function with converted volume value */
	if (audio_drv->SetVolumeOut(AUDIO_I2C_ADDRESS, Volume) != 0) {
 800633e:	4b08      	ldr	r3, [pc, #32]	@ (8006360 <BSP_AUDIO_OUT_SetVolume+0x2c>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006344:	79fa      	ldrb	r2, [r7, #7]
 8006346:	4611      	mov	r1, r2
 8006348:	2034      	movs	r0, #52	@ 0x34
 800634a:	4798      	blx	r3
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <BSP_AUDIO_OUT_SetVolume+0x22>
		return AUDIO_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e000      	b.n	8006358 <BSP_AUDIO_OUT_SetVolume+0x24>
	} else {
		/* Return AUDIO_OK when all operations are correctly done */
		return AUDIO_OK;
 8006356:	2300      	movs	r3, #0
	}
}
 8006358:	4618      	mov	r0, r3
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	20000c08 	.word	0x20000c08

08006364 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
 *            @arg CODEC_AUDIOFRAME_SLOT_13
 * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
 *         audio frame slot.
 * @retval None
 */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot) {
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 800636c:	4b0c      	ldr	r3, [pc, #48]	@ (80063a0 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	4b0b      	ldr	r3, [pc, #44]	@ (80063a0 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800637a:	601a      	str	r2, [r3, #0]

	/* Update the SAI audio frame slot configuration */
	haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 800637c:	4a08      	ldr	r2, [pc, #32]	@ (80063a0 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6613      	str	r3, [r2, #96]	@ 0x60
	HAL_SAI_Init(&haudio_out_sai);
 8006382:	4807      	ldr	r0, [pc, #28]	@ (80063a0 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8006384:	f008 fcec 	bl	800ed60 <HAL_SAI_Init>

	/* Enable SAI peripheral to generate MCLK */
	__HAL_SAI_ENABLE(&haudio_out_sai);
 8006388:	4b05      	ldr	r3, [pc, #20]	@ (80063a0 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	4b04      	ldr	r3, [pc, #16]	@ (80063a0 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006396:	601a      	str	r2, [r3, #0]
}
 8006398:	bf00      	nop
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	20000c0c 	.word	0x20000c0c

080063a4 <HAL_SAI_TxCpltCallback>:
/**
 * @brief  Tx Transfer completed callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
	/* Manage the remaining file size and new address offset: This function
	 should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
	BSP_AUDIO_OUT_TransferComplete_CallBack();
 80063ac:	f7fe feb4 	bl	8005118 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 80063b0:	bf00      	nop
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_SAI_TxHalfCpltCallback>:
/**
 * @brief  Tx Half Transfer completed callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
	/* Manage the remaining file size and new address offset: This function
	 should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
	BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80063c0:	f7fe febc 	bl	800513c <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 80063c4:	bf00      	nop
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_SAI_ErrorCallback>:
/**
 * @brief  SAI error callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
	HAL_SAI_StateTypeDef audio_out_state;
	HAL_SAI_StateTypeDef audio_in_state;

	audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 80063d4:	480e      	ldr	r0, [pc, #56]	@ (8006410 <HAL_SAI_ErrorCallback+0x44>)
 80063d6:	f008 ff27 	bl	800f228 <HAL_SAI_GetState>
 80063da:	4603      	mov	r3, r0
 80063dc:	73fb      	strb	r3, [r7, #15]
	audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 80063de:	480d      	ldr	r0, [pc, #52]	@ (8006414 <HAL_SAI_ErrorCallback+0x48>)
 80063e0:	f008 ff22 	bl	800f228 <HAL_SAI_GetState>
 80063e4:	4603      	mov	r3, r0
 80063e6:	73bb      	strb	r3, [r7, #14]

	/* Determines if it is an audio out or audio in error */
	if ((audio_out_state == HAL_SAI_STATE_BUSY)
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d002      	beq.n	80063f4 <HAL_SAI_ErrorCallback+0x28>
			|| (audio_out_state == HAL_SAI_STATE_BUSY_TX)) {
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
 80063f0:	2b12      	cmp	r3, #18
 80063f2:	d101      	bne.n	80063f8 <HAL_SAI_ErrorCallback+0x2c>
		BSP_AUDIO_OUT_Error_CallBack();
 80063f4:	f000 f810 	bl	8006418 <BSP_AUDIO_OUT_Error_CallBack>
	}

	if ((audio_in_state == HAL_SAI_STATE_BUSY)
 80063f8:	7bbb      	ldrb	r3, [r7, #14]
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d002      	beq.n	8006404 <HAL_SAI_ErrorCallback+0x38>
			|| (audio_in_state == HAL_SAI_STATE_BUSY_RX)) {
 80063fe:	7bbb      	ldrb	r3, [r7, #14]
 8006400:	2b22      	cmp	r3, #34	@ 0x22
 8006402:	d101      	bne.n	8006408 <HAL_SAI_ErrorCallback+0x3c>
		BSP_AUDIO_IN_Error_CallBack();
 8006404:	f000 f9be 	bl	8006784 <BSP_AUDIO_IN_Error_CallBack>
	}
}
 8006408:	bf00      	nop
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	20000c0c 	.word	0x20000c0c
 8006414:	20000c90 	.word	0x20000c90

08006418 <BSP_AUDIO_OUT_Error_CallBack>:

/**
 * @brief  Manages the DMA FIFO error event.
 * @retval None
 */
__weak void BSP_AUDIO_OUT_Error_CallBack(void) {
 8006418:	b480      	push	{r7}
 800641a:	af00      	add	r7, sp, #0
}
 800641c:	bf00      	nop
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
	...

08006428 <BSP_AUDIO_OUT_MspInit>:
 * @brief  Initializes BSP_AUDIO_OUT MSP.
 * @param  hsai: SAI handle
 * @param  Params
 * @retval None
 */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params) {
 8006428:	b580      	push	{r7, lr}
 800642a:	b08c      	sub	sp, #48	@ 0x30
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_sai_tx;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable SAI clock */
	AUDIO_OUT_SAIx_CLK_ENABLE();
 8006432:	4b63      	ldr	r3, [pc, #396]	@ (80065c0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8006434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006436:	4a62      	ldr	r2, [pc, #392]	@ (80065c0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8006438:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800643c:	6453      	str	r3, [r2, #68]	@ 0x44
 800643e:	4b60      	ldr	r3, [pc, #384]	@ (80065c0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8006440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006442:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006446:	61bb      	str	r3, [r7, #24]
 8006448:	69bb      	ldr	r3, [r7, #24]

	/* Enable GPIO clock */
	AUDIO_OUT_SAIx_MCLK_ENABLE();
 800644a:	4b5d      	ldr	r3, [pc, #372]	@ (80065c0 <BSP_AUDIO_OUT_MspInit+0x198>)
 800644c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800644e:	4a5c      	ldr	r2, [pc, #368]	@ (80065c0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8006450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006454:	6313      	str	r3, [r2, #48]	@ 0x30
 8006456:	4b5a      	ldr	r3, [pc, #360]	@ (80065c0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8006458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800645a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800645e:	617b      	str	r3, [r7, #20]
 8006460:	697b      	ldr	r3, [r7, #20]
	AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8006462:	4b57      	ldr	r3, [pc, #348]	@ (80065c0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8006464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006466:	4a56      	ldr	r2, [pc, #344]	@ (80065c0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8006468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800646c:	6313      	str	r3, [r2, #48]	@ 0x30
 800646e:	4b54      	ldr	r3, [pc, #336]	@ (80065c0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8006470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006476:	613b      	str	r3, [r7, #16]
 8006478:	693b      	ldr	r3, [r7, #16]
	AUDIO_OUT_SAIx_FS_ENABLE();
 800647a:	4b51      	ldr	r3, [pc, #324]	@ (80065c0 <BSP_AUDIO_OUT_MspInit+0x198>)
 800647c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800647e:	4a50      	ldr	r2, [pc, #320]	@ (80065c0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8006480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006484:	6313      	str	r3, [r2, #48]	@ 0x30
 8006486:	4b4e      	ldr	r3, [pc, #312]	@ (80065c0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8006488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800648a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	68fb      	ldr	r3, [r7, #12]
	/* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
	gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8006492:	2380      	movs	r3, #128	@ 0x80
 8006494:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8006496:	2302      	movs	r3, #2
 8006498:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800649a:	2300      	movs	r3, #0
 800649c:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800649e:	2303      	movs	r3, #3
 80064a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80064a2:	230a      	movs	r3, #10
 80064a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80064a6:	f107 031c 	add.w	r3, r7, #28
 80064aa:	4619      	mov	r1, r3
 80064ac:	4845      	ldr	r0, [pc, #276]	@ (80065c4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80064ae:	f005 fcf3 	bl	800be98 <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80064b2:	2320      	movs	r3, #32
 80064b4:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80064b6:	2302      	movs	r3, #2
 80064b8:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 80064ba:	2300      	movs	r3, #0
 80064bc:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80064be:	2303      	movs	r3, #3
 80064c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80064c2:	230a      	movs	r3, #10
 80064c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80064c6:	f107 031c 	add.w	r3, r7, #28
 80064ca:	4619      	mov	r1, r3
 80064cc:	483d      	ldr	r0, [pc, #244]	@ (80065c4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80064ce:	f005 fce3 	bl	800be98 <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_SD_PIN;
 80064d2:	2340      	movs	r3, #64	@ 0x40
 80064d4:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80064d6:	2302      	movs	r3, #2
 80064d8:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80064de:	2303      	movs	r3, #3
 80064e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80064e2:	230a      	movs	r3, #10
 80064e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80064e6:	f107 031c 	add.w	r3, r7, #28
 80064ea:	4619      	mov	r1, r3
 80064ec:	4835      	ldr	r0, [pc, #212]	@ (80065c4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80064ee:	f005 fcd3 	bl	800be98 <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 80064f2:	2310      	movs	r3, #16
 80064f4:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80064f6:	2302      	movs	r3, #2
 80064f8:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 80064fa:	2300      	movs	r3, #0
 80064fc:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80064fe:	2303      	movs	r3, #3
 8006500:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8006502:	230a      	movs	r3, #10
 8006504:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8006506:	f107 031c 	add.w	r3, r7, #28
 800650a:	4619      	mov	r1, r3
 800650c:	482d      	ldr	r0, [pc, #180]	@ (80065c4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 800650e:	f005 fcc3 	bl	800be98 <HAL_GPIO_Init>

	/* Enable the DMA clock */
	AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8006512:	4b2b      	ldr	r3, [pc, #172]	@ (80065c0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8006514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006516:	4a2a      	ldr	r2, [pc, #168]	@ (80065c0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8006518:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800651c:	6313      	str	r3, [r2, #48]	@ 0x30
 800651e:	4b28      	ldr	r3, [pc, #160]	@ (80065c0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8006520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006526:	60bb      	str	r3, [r7, #8]
 8006528:	68bb      	ldr	r3, [r7, #8]

	if (hsai->Instance == AUDIO_OUT_SAIx) {
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a26      	ldr	r2, [pc, #152]	@ (80065c8 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d138      	bne.n	80065a6 <BSP_AUDIO_OUT_MspInit+0x17e>
		/* Configure the hdma_saiTx handle parameters */
		hdma_sai_tx.Init.Channel = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8006534:	4b25      	ldr	r3, [pc, #148]	@ (80065cc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8006536:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800653a:	605a      	str	r2, [r3, #4]
		hdma_sai_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800653c:	4b23      	ldr	r3, [pc, #140]	@ (80065cc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800653e:	2240      	movs	r2, #64	@ 0x40
 8006540:	609a      	str	r2, [r3, #8]
		hdma_sai_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006542:	4b22      	ldr	r3, [pc, #136]	@ (80065cc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8006544:	2200      	movs	r2, #0
 8006546:	60da      	str	r2, [r3, #12]
		hdma_sai_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006548:	4b20      	ldr	r3, [pc, #128]	@ (80065cc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800654a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800654e:	611a      	str	r2, [r3, #16]
		hdma_sai_tx.Init.PeriphDataAlignment =
 8006550:	4b1e      	ldr	r3, [pc, #120]	@ (80065cc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8006552:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006556:	615a      	str	r2, [r3, #20]
				AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
		hdma_sai_tx.Init.MemDataAlignment = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8006558:	4b1c      	ldr	r3, [pc, #112]	@ (80065cc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800655a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800655e:	619a      	str	r2, [r3, #24]
		hdma_sai_tx.Init.Mode = DMA_CIRCULAR;
 8006560:	4b1a      	ldr	r3, [pc, #104]	@ (80065cc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8006562:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006566:	61da      	str	r2, [r3, #28]
		hdma_sai_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8006568:	4b18      	ldr	r3, [pc, #96]	@ (80065cc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800656a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800656e:	621a      	str	r2, [r3, #32]
		hdma_sai_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006570:	4b16      	ldr	r3, [pc, #88]	@ (80065cc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8006572:	2204      	movs	r2, #4
 8006574:	625a      	str	r2, [r3, #36]	@ 0x24
		hdma_sai_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006576:	4b15      	ldr	r3, [pc, #84]	@ (80065cc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8006578:	2203      	movs	r2, #3
 800657a:	629a      	str	r2, [r3, #40]	@ 0x28
		hdma_sai_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800657c:	4b13      	ldr	r3, [pc, #76]	@ (80065cc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800657e:	2200      	movs	r2, #0
 8006580:	62da      	str	r2, [r3, #44]	@ 0x2c
		hdma_sai_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006582:	4b12      	ldr	r3, [pc, #72]	@ (80065cc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8006584:	2200      	movs	r2, #0
 8006586:	631a      	str	r2, [r3, #48]	@ 0x30

		hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8006588:	4b10      	ldr	r3, [pc, #64]	@ (80065cc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800658a:	4a11      	ldr	r2, [pc, #68]	@ (80065d0 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 800658c:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a0e      	ldr	r2, [pc, #56]	@ (80065cc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8006592:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006594:	4a0d      	ldr	r2, [pc, #52]	@ (80065cc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6393      	str	r3, [r2, #56]	@ 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_sai_tx);
 800659a:	480c      	ldr	r0, [pc, #48]	@ (80065cc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800659c:	f004 fe9a 	bl	800b2d4 <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_sai_tx);
 80065a0:	480a      	ldr	r0, [pc, #40]	@ (80065cc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80065a2:	f004 fde9 	bl	800b178 <HAL_DMA_Init>
	}

	/* SAI DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80065a6:	2200      	movs	r2, #0
 80065a8:	210e      	movs	r1, #14
 80065aa:	203c      	movs	r0, #60	@ 0x3c
 80065ac:	f004 fdba 	bl	800b124 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 80065b0:	203c      	movs	r0, #60	@ 0x3c
 80065b2:	f004 fdd3 	bl	800b15c <HAL_NVIC_EnableIRQ>
}
 80065b6:	bf00      	nop
 80065b8:	3730      	adds	r7, #48	@ 0x30
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	40023800 	.word	0x40023800
 80065c4:	40022000 	.word	0x40022000
 80065c8:	40015c04 	.word	0x40015c04
 80065cc:	20000d14 	.word	0x20000d14
 80065d0:	40026470 	.word	0x40026470

080065d4 <BSP_AUDIO_OUT_ClockConfig>:
 * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
 *         Being __weak it can be overwritten by the application
 * @retval None
 */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai,
		uint32_t AudioFreq, void *Params) {
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b0a6      	sub	sp, #152	@ 0x98
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
	RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

	HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 80065e0:	f107 0314 	add.w	r3, r7, #20
 80065e4:	4618      	mov	r0, r3
 80065e6:	f008 f96f 	bl	800e8c8 <HAL_RCCEx_GetPeriphCLKConfig>

	/* Set the PLL configuration according to the audio frequency */
	if ((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K)
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d009      	beq.n	8006608 <BSP_AUDIO_OUT_ClockConfig+0x34>
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f245 6222 	movw	r2, #22050	@ 0x5622
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d004      	beq.n	8006608 <BSP_AUDIO_OUT_ClockConfig+0x34>
			|| (AudioFreq == AUDIO_FREQUENCY_44K)) {
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8006604:	4293      	cmp	r3, r2
 8006606:	d112      	bne.n	800662e <BSP_AUDIO_OUT_ClockConfig+0x5a>
		/* Configure PLLI2S prescalers */
		/* PLLI2S_VCO: VCO_429M
		 I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
		 I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
		rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8006608:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800660c:	617b      	str	r3, [r7, #20]
		rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 800660e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006612:	657b      	str	r3, [r7, #84]	@ 0x54
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8006614:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8006618:	61bb      	str	r3, [r7, #24]
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 800661a:	2302      	movs	r3, #2
 800661c:	623b      	str	r3, [r7, #32]
		rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 800661e:	2313      	movs	r3, #19
 8006620:	63bb      	str	r3, [r7, #56]	@ 0x38

		HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8006622:	f107 0314 	add.w	r3, r7, #20
 8006626:	4618      	mov	r0, r3
 8006628:	f007 fd5e 	bl	800e0e8 <HAL_RCCEx_PeriphCLKConfig>
 800662c:	e012      	b.n	8006654 <BSP_AUDIO_OUT_ClockConfig+0x80>
	{
		/* I2S clock config
		 PLLI2S_VCO: VCO_344M
		 I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
		 I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
		rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800662e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006632:	617b      	str	r3, [r7, #20]
		rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8006634:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006638:	657b      	str	r3, [r7, #84]	@ 0x54
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 800663a:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 800663e:	61bb      	str	r3, [r7, #24]
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8006640:	2307      	movs	r3, #7
 8006642:	623b      	str	r3, [r7, #32]
		rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8006644:	2301      	movs	r3, #1
 8006646:	63bb      	str	r3, [r7, #56]	@ 0x38

		HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8006648:	f107 0314 	add.w	r3, r7, #20
 800664c:	4618      	mov	r0, r3
 800664e:	f007 fd4b 	bl	800e0e8 <HAL_RCCEx_PeriphCLKConfig>
	}
}
 8006652:	bf00      	nop
 8006654:	bf00      	nop
 8006656:	3798      	adds	r7, #152	@ 0x98
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <SAIx_Out_DeInit>:

/**
 * @brief  Deinitializes the output Audio Codec audio interface (SAI).
 * @retval None
 */
static void SAIx_Out_DeInit(void) {
 800665c:	b580      	push	{r7, lr}
 800665e:	af00      	add	r7, sp, #0
	/* Initialize the haudio_out_sai Instance parameter */
	haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8006660:	4b07      	ldr	r3, [pc, #28]	@ (8006680 <SAIx_Out_DeInit+0x24>)
 8006662:	4a08      	ldr	r2, [pc, #32]	@ (8006684 <SAIx_Out_DeInit+0x28>)
 8006664:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 8006666:	4b06      	ldr	r3, [pc, #24]	@ (8006680 <SAIx_Out_DeInit+0x24>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	4b04      	ldr	r3, [pc, #16]	@ (8006680 <SAIx_Out_DeInit+0x24>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006674:	601a      	str	r2, [r3, #0]

	HAL_SAI_DeInit(&haudio_out_sai);
 8006676:	4802      	ldr	r0, [pc, #8]	@ (8006680 <SAIx_Out_DeInit+0x24>)
 8006678:	f008 fcf0 	bl	800f05c <HAL_SAI_DeInit>
}
 800667c:	bf00      	nop
 800667e:	bd80      	pop	{r7, pc}
 8006680:	20000c0c 	.word	0x20000c0c
 8006684:	40015c04 	.word	0x40015c04

08006688 <BSP_AUDIO_IN_OUT_Init>:
 * @param  BitRes: Audio frequency to be configured.
 * @param  ChnlNbr: Channel number.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_OUT_Init(uint16_t InputDevice, uint16_t OutputDevice,
		uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr) {
 8006688:	b590      	push	{r4, r7, lr}
 800668a:	b089      	sub	sp, #36	@ 0x24
 800668c:	af00      	add	r7, sp, #0
 800668e:	60ba      	str	r2, [r7, #8]
 8006690:	607b      	str	r3, [r7, #4]
 8006692:	4603      	mov	r3, r0
 8006694:	81fb      	strh	r3, [r7, #14]
 8006696:	460b      	mov	r3, r1
 8006698:	81bb      	strh	r3, [r7, #12]
	uint8_t ret = AUDIO_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	77fb      	strb	r3, [r7, #31]
	uint32_t deviceid = 0x00;
 800669e:	2300      	movs	r3, #0
 80066a0:	617b      	str	r3, [r7, #20]
	uint32_t slot_active;

	if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1)
 80066a2:	89fb      	ldrh	r3, [r7, #14]
 80066a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066a8:	d006      	beq.n	80066b8 <BSP_AUDIO_IN_OUT_Init+0x30>
			&& (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2)) /* Only MICROPHONE_2 input supported */
 80066aa:	89fb      	ldrh	r3, [r7, #14]
 80066ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066b0:	d002      	beq.n	80066b8 <BSP_AUDIO_IN_OUT_Init+0x30>
			{
		ret = AUDIO_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	77fb      	strb	r3, [r7, #31]
 80066b6:	e054      	b.n	8006762 <BSP_AUDIO_IN_OUT_Init+0xda>
	} else {
		/* Disable SAI */
		SAIx_In_DeInit();
 80066b8:	f000 f9d4 	bl	8006a64 <SAIx_In_DeInit>
		SAIx_Out_DeInit();
 80066bc:	f7ff ffce 	bl	800665c <SAIx_Out_DeInit>

		/* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
		BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 80066c0:	2200      	movs	r2, #0
 80066c2:	68b9      	ldr	r1, [r7, #8]
 80066c4:	4829      	ldr	r0, [pc, #164]	@ (800676c <BSP_AUDIO_IN_OUT_Init+0xe4>)
 80066c6:	f7ff ff85 	bl	80065d4 <BSP_AUDIO_OUT_ClockConfig>

		/* SAI data transfer preparation:
		 Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
		haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80066ca:	4b28      	ldr	r3, [pc, #160]	@ (800676c <BSP_AUDIO_IN_OUT_Init+0xe4>)
 80066cc:	4a28      	ldr	r2, [pc, #160]	@ (8006770 <BSP_AUDIO_IN_OUT_Init+0xe8>)
 80066ce:	601a      	str	r2, [r3, #0]
		if (HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET) {
 80066d0:	4826      	ldr	r0, [pc, #152]	@ (800676c <BSP_AUDIO_IN_OUT_Init+0xe4>)
 80066d2:	f008 fda9 	bl	800f228 <HAL_SAI_GetState>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d103      	bne.n	80066e4 <BSP_AUDIO_IN_OUT_Init+0x5c>
			/* Init the SAI MSP: this __weak function can be redefined by the application*/
			BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 80066dc:	2100      	movs	r1, #0
 80066de:	4823      	ldr	r0, [pc, #140]	@ (800676c <BSP_AUDIO_IN_OUT_Init+0xe4>)
 80066e0:	f000 f858 	bl	8006794 <BSP_AUDIO_IN_MspInit>
		}

		/* SAI data transfer preparation:
		 Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
		haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80066e4:	4b23      	ldr	r3, [pc, #140]	@ (8006774 <BSP_AUDIO_IN_OUT_Init+0xec>)
 80066e6:	4a24      	ldr	r2, [pc, #144]	@ (8006778 <BSP_AUDIO_IN_OUT_Init+0xf0>)
 80066e8:	601a      	str	r2, [r3, #0]
		if (HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET) {
 80066ea:	4822      	ldr	r0, [pc, #136]	@ (8006774 <BSP_AUDIO_IN_OUT_Init+0xec>)
 80066ec:	f008 fd9c 	bl	800f228 <HAL_SAI_GetState>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d103      	bne.n	80066fe <BSP_AUDIO_IN_OUT_Init+0x76>
			/* Init the SAI MSP: this __weak function can be redefined by the application*/
			BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 80066f6:	2100      	movs	r1, #0
 80066f8:	481e      	ldr	r0, [pc, #120]	@ (8006774 <BSP_AUDIO_IN_OUT_Init+0xec>)
 80066fa:	f7ff fe95 	bl	8006428 <BSP_AUDIO_OUT_MspInit>

		/* Configure SAI in master mode :
		 *   - SAI2_block_A in master TX mode
		 *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
		 */
		if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2) {
 80066fe:	89fb      	ldrh	r3, [r7, #14]
 8006700:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006704:	d102      	bne.n	800670c <BSP_AUDIO_IN_OUT_Init+0x84>
			slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8006706:	230a      	movs	r3, #10
 8006708:	61bb      	str	r3, [r7, #24]
 800670a:	e001      	b.n	8006710 <BSP_AUDIO_IN_OUT_Init+0x88>
		} else {
			slot_active = CODEC_AUDIOFRAME_SLOT_02;
 800670c:	2305      	movs	r3, #5
 800670e:	61bb      	str	r3, [r7, #24]
		}
		SAIx_In_Init(SAI_MODEMASTER_TX, slot_active, AudioFreq);
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	69b9      	ldr	r1, [r7, #24]
 8006714:	2000      	movs	r0, #0
 8006716:	f000 f8ef 	bl	80068f8 <SAIx_In_Init>

		/* wm8994 codec initialization */
		deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800671a:	4b18      	ldr	r3, [pc, #96]	@ (800677c <BSP_AUDIO_IN_OUT_Init+0xf4>)
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	2034      	movs	r0, #52	@ 0x34
 8006720:	4798      	blx	r3
 8006722:	6178      	str	r0, [r7, #20]

		if ((deviceid) == WM8994_ID) {
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	f648 1294 	movw	r2, #35220	@ 0x8994
 800672a:	4293      	cmp	r3, r2
 800672c:	d109      	bne.n	8006742 <BSP_AUDIO_IN_OUT_Init+0xba>
			/* Reset the Codec Registers */
			wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800672e:	4b13      	ldr	r3, [pc, #76]	@ (800677c <BSP_AUDIO_IN_OUT_Init+0xf4>)
 8006730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006732:	2034      	movs	r0, #52	@ 0x34
 8006734:	4798      	blx	r3
			/* Initialize the audio driver structure */
			audio_drv = &wm8994_drv;
 8006736:	4b12      	ldr	r3, [pc, #72]	@ (8006780 <BSP_AUDIO_IN_OUT_Init+0xf8>)
 8006738:	4a10      	ldr	r2, [pc, #64]	@ (800677c <BSP_AUDIO_IN_OUT_Init+0xf4>)
 800673a:	601a      	str	r2, [r3, #0]
			ret = AUDIO_OK;
 800673c:	2300      	movs	r3, #0
 800673e:	77fb      	strb	r3, [r7, #31]
 8006740:	e001      	b.n	8006746 <BSP_AUDIO_IN_OUT_Init+0xbe>
		} else {
			ret = AUDIO_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	77fb      	strb	r3, [r7, #31]
		}

		if (ret == AUDIO_OK) {
 8006746:	7ffb      	ldrb	r3, [r7, #31]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10a      	bne.n	8006762 <BSP_AUDIO_IN_OUT_Init+0xda>
			/* Initialize the codec internal registers */
			audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice | OutputDevice, 100,
 800674c:	4b0c      	ldr	r3, [pc, #48]	@ (8006780 <BSP_AUDIO_IN_OUT_Init+0xf8>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681c      	ldr	r4, [r3, #0]
 8006752:	89fa      	ldrh	r2, [r7, #14]
 8006754:	89bb      	ldrh	r3, [r7, #12]
 8006756:	4313      	orrs	r3, r2
 8006758:	b299      	uxth	r1, r3
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2264      	movs	r2, #100	@ 0x64
 800675e:	2034      	movs	r0, #52	@ 0x34
 8006760:	47a0      	blx	r4
					AudioFreq);
		}
	}
	return ret;
 8006762:	7ffb      	ldrb	r3, [r7, #31]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3724      	adds	r7, #36	@ 0x24
 8006768:	46bd      	mov	sp, r7
 800676a:	bd90      	pop	{r4, r7, pc}
 800676c:	20000c90 	.word	0x20000c90
 8006770:	40015c24 	.word	0x40015c24
 8006774:	20000c0c 	.word	0x20000c0c
 8006778:	40015c04 	.word	0x40015c04
 800677c:	20000058 	.word	0x20000058
 8006780:	20000c08 	.word	0x20000c08

08006784 <BSP_AUDIO_IN_Error_CallBack>:

/**
 * @brief  Audio IN Error callback function.
 * @retval None
 */
__weak void BSP_AUDIO_IN_Error_CallBack(void) {
 8006784:	b480      	push	{r7}
 8006786:	af00      	add	r7, sp, #0
	/* This function is called when an Interrupt due to transfer error on or peripheral
	 error occurs. */
}
 8006788:	bf00      	nop
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
	...

08006794 <BSP_AUDIO_IN_MspInit>:
 * @brief  Initializes BSP_AUDIO_IN MSP.
 * @param  hsai: SAI handle
 * @param  Params
 * @retval None
 */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params) {
 8006794:	b580      	push	{r7, lr}
 8006796:	b08c      	sub	sp, #48	@ 0x30
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_sai_rx;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable SAI clock */
	AUDIO_IN_SAIx_CLK_ENABLE();
 800679e:	4b50      	ldr	r3, [pc, #320]	@ (80068e0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80067a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a2:	4a4f      	ldr	r2, [pc, #316]	@ (80068e0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80067a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80067a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80067aa:	4b4d      	ldr	r3, [pc, #308]	@ (80068e0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80067ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067b2:	61bb      	str	r3, [r7, #24]
 80067b4:	69bb      	ldr	r3, [r7, #24]

	/* Enable SD GPIO clock */
	AUDIO_IN_SAIx_SD_ENABLE();
 80067b6:	4b4a      	ldr	r3, [pc, #296]	@ (80068e0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80067b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ba:	4a49      	ldr	r2, [pc, #292]	@ (80068e0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80067bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80067c2:	4b47      	ldr	r3, [pc, #284]	@ (80068e0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80067c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	697b      	ldr	r3, [r7, #20]
	/* CODEC_SAI pin configuration: SD pin */
	gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 80067ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067d2:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80067d4:	2302      	movs	r3, #2
 80067d6:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 80067d8:	2300      	movs	r3, #0
 80067da:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80067dc:	2302      	movs	r3, #2
 80067de:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 80067e0:	230a      	movs	r3, #10
 80067e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80067e4:	f107 031c 	add.w	r3, r7, #28
 80067e8:	4619      	mov	r1, r3
 80067ea:	483e      	ldr	r0, [pc, #248]	@ (80068e4 <BSP_AUDIO_IN_MspInit+0x150>)
 80067ec:	f005 fb54 	bl	800be98 <HAL_GPIO_Init>

	/* Enable Audio INT GPIO clock */
	AUDIO_IN_INT_GPIO_ENABLE();
 80067f0:	4b3b      	ldr	r3, [pc, #236]	@ (80068e0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80067f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f4:	4a3a      	ldr	r2, [pc, #232]	@ (80068e0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80067f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80067fc:	4b38      	ldr	r3, [pc, #224]	@ (80068e0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80067fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006800:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006804:	613b      	str	r3, [r7, #16]
 8006806:	693b      	ldr	r3, [r7, #16]
	/* Audio INT pin configuration: input */
	gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8006808:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800680c:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800680e:	2300      	movs	r3, #0
 8006810:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8006812:	2300      	movs	r3, #0
 8006814:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8006816:	2302      	movs	r3, #2
 8006818:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 800681a:	f107 031c 	add.w	r3, r7, #28
 800681e:	4619      	mov	r1, r3
 8006820:	4831      	ldr	r0, [pc, #196]	@ (80068e8 <BSP_AUDIO_IN_MspInit+0x154>)
 8006822:	f005 fb39 	bl	800be98 <HAL_GPIO_Init>

	/* Enable the DMA clock */
	AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8006826:	4b2e      	ldr	r3, [pc, #184]	@ (80068e0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8006828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800682a:	4a2d      	ldr	r2, [pc, #180]	@ (80068e0 <BSP_AUDIO_IN_MspInit+0x14c>)
 800682c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006830:	6313      	str	r3, [r2, #48]	@ 0x30
 8006832:	4b2b      	ldr	r3, [pc, #172]	@ (80068e0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8006834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006836:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800683a:	60fb      	str	r3, [r7, #12]
 800683c:	68fb      	ldr	r3, [r7, #12]

	if (hsai->Instance == AUDIO_IN_SAIx) {
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a2a      	ldr	r2, [pc, #168]	@ (80068ec <BSP_AUDIO_IN_MspInit+0x158>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d137      	bne.n	80068b8 <BSP_AUDIO_IN_MspInit+0x124>
		/* Configure the hdma_sai_rx handle parameters */
		hdma_sai_rx.Init.Channel = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8006848:	4b29      	ldr	r3, [pc, #164]	@ (80068f0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800684a:	2200      	movs	r2, #0
 800684c:	605a      	str	r2, [r3, #4]
		hdma_sai_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800684e:	4b28      	ldr	r3, [pc, #160]	@ (80068f0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006850:	2200      	movs	r2, #0
 8006852:	609a      	str	r2, [r3, #8]
		hdma_sai_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006854:	4b26      	ldr	r3, [pc, #152]	@ (80068f0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006856:	2200      	movs	r2, #0
 8006858:	60da      	str	r2, [r3, #12]
		hdma_sai_rx.Init.MemInc = DMA_MINC_ENABLE;
 800685a:	4b25      	ldr	r3, [pc, #148]	@ (80068f0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800685c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006860:	611a      	str	r2, [r3, #16]
		hdma_sai_rx.Init.PeriphDataAlignment =
 8006862:	4b23      	ldr	r3, [pc, #140]	@ (80068f0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006864:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006868:	615a      	str	r2, [r3, #20]
				AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
		hdma_sai_rx.Init.MemDataAlignment = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 800686a:	4b21      	ldr	r3, [pc, #132]	@ (80068f0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800686c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006870:	619a      	str	r2, [r3, #24]
		hdma_sai_rx.Init.Mode = DMA_CIRCULAR;
 8006872:	4b1f      	ldr	r3, [pc, #124]	@ (80068f0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006874:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006878:	61da      	str	r2, [r3, #28]
		hdma_sai_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800687a:	4b1d      	ldr	r3, [pc, #116]	@ (80068f0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800687c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006880:	621a      	str	r2, [r3, #32]
		hdma_sai_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006882:	4b1b      	ldr	r3, [pc, #108]	@ (80068f0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006884:	2200      	movs	r2, #0
 8006886:	625a      	str	r2, [r3, #36]	@ 0x24
		hdma_sai_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006888:	4b19      	ldr	r3, [pc, #100]	@ (80068f0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800688a:	2203      	movs	r2, #3
 800688c:	629a      	str	r2, [r3, #40]	@ 0x28
		hdma_sai_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800688e:	4b18      	ldr	r3, [pc, #96]	@ (80068f0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006890:	2200      	movs	r2, #0
 8006892:	62da      	str	r2, [r3, #44]	@ 0x2c
		hdma_sai_rx.Init.PeriphBurst = DMA_MBURST_SINGLE;
 8006894:	4b16      	ldr	r3, [pc, #88]	@ (80068f0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006896:	2200      	movs	r2, #0
 8006898:	631a      	str	r2, [r3, #48]	@ 0x30

		hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 800689a:	4b15      	ldr	r3, [pc, #84]	@ (80068f0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800689c:	4a15      	ldr	r2, [pc, #84]	@ (80068f4 <BSP_AUDIO_IN_MspInit+0x160>)
 800689e:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a13      	ldr	r2, [pc, #76]	@ (80068f0 <BSP_AUDIO_IN_MspInit+0x15c>)
 80068a4:	671a      	str	r2, [r3, #112]	@ 0x70
 80068a6:	4a12      	ldr	r2, [pc, #72]	@ (80068f0 <BSP_AUDIO_IN_MspInit+0x15c>)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6393      	str	r3, [r2, #56]	@ 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_sai_rx);
 80068ac:	4810      	ldr	r0, [pc, #64]	@ (80068f0 <BSP_AUDIO_IN_MspInit+0x15c>)
 80068ae:	f004 fd11 	bl	800b2d4 <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_sai_rx);
 80068b2:	480f      	ldr	r0, [pc, #60]	@ (80068f0 <BSP_AUDIO_IN_MspInit+0x15c>)
 80068b4:	f004 fc60 	bl	800b178 <HAL_DMA_Init>
	}

	/* SAI DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80068b8:	2200      	movs	r2, #0
 80068ba:	210f      	movs	r1, #15
 80068bc:	2046      	movs	r0, #70	@ 0x46
 80068be:	f004 fc31 	bl	800b124 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 80068c2:	2046      	movs	r0, #70	@ 0x46
 80068c4:	f004 fc4a 	bl	800b15c <HAL_NVIC_EnableIRQ>

	/* Audio INT IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80068c8:	2200      	movs	r2, #0
 80068ca:	210f      	movs	r1, #15
 80068cc:	2028      	movs	r0, #40	@ 0x28
 80068ce:	f004 fc29 	bl	800b124 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 80068d2:	2028      	movs	r0, #40	@ 0x28
 80068d4:	f004 fc42 	bl	800b15c <HAL_NVIC_EnableIRQ>
}
 80068d8:	bf00      	nop
 80068da:	3730      	adds	r7, #48	@ 0x30
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	40023800 	.word	0x40023800
 80068e4:	40021800 	.word	0x40021800
 80068e8:	40021c00 	.word	0x40021c00
 80068ec:	40015c24 	.word	0x40015c24
 80068f0:	20000d74 	.word	0x20000d74
 80068f4:	400264b8 	.word	0x400264b8

080068f8 <SAIx_In_Init>:
 * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
 * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
 * @retval None
 */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive,
		uint32_t AudioFreq) {
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
	/* Initialize SAI2 block A in MASTER RX */
	/* Initialize the haudio_out_sai Instance parameter */
	haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8006904:	4b53      	ldr	r3, [pc, #332]	@ (8006a54 <SAIx_In_Init+0x15c>)
 8006906:	4a54      	ldr	r2, [pc, #336]	@ (8006a58 <SAIx_In_Init+0x160>)
 8006908:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 800690a:	4b52      	ldr	r3, [pc, #328]	@ (8006a54 <SAIx_In_Init+0x15c>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	4b50      	ldr	r3, [pc, #320]	@ (8006a54 <SAIx_In_Init+0x15c>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006918:	601a      	str	r2, [r3, #0]

	/* Configure SAI_Block_x
	 LSBFirst: Disabled
	 DataSize: 16 */
	haudio_out_sai.Init.AudioFrequency = AudioFreq;
 800691a:	4a4e      	ldr	r2, [pc, #312]	@ (8006a54 <SAIx_In_Init+0x15c>)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	61d3      	str	r3, [r2, #28]
	haudio_out_sai.Init.AudioMode = SaiOutMode;
 8006920:	4a4c      	ldr	r2, [pc, #304]	@ (8006a54 <SAIx_In_Init+0x15c>)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6053      	str	r3, [r2, #4]
	haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8006926:	4b4b      	ldr	r3, [pc, #300]	@ (8006a54 <SAIx_In_Init+0x15c>)
 8006928:	2200      	movs	r2, #0
 800692a:	615a      	str	r2, [r3, #20]
	haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 800692c:	4b49      	ldr	r3, [pc, #292]	@ (8006a54 <SAIx_In_Init+0x15c>)
 800692e:	2200      	movs	r2, #0
 8006930:	631a      	str	r2, [r3, #48]	@ 0x30
	haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8006932:	4b48      	ldr	r3, [pc, #288]	@ (8006a54 <SAIx_In_Init+0x15c>)
 8006934:	2280      	movs	r2, #128	@ 0x80
 8006936:	635a      	str	r2, [r3, #52]	@ 0x34
	haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8006938:	4b46      	ldr	r3, [pc, #280]	@ (8006a54 <SAIx_In_Init+0x15c>)
 800693a:	2200      	movs	r2, #0
 800693c:	639a      	str	r2, [r3, #56]	@ 0x38
	haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800693e:	4b45      	ldr	r3, [pc, #276]	@ (8006a54 <SAIx_In_Init+0x15c>)
 8006940:	2201      	movs	r2, #1
 8006942:	63da      	str	r2, [r3, #60]	@ 0x3c
	haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8006944:	4b43      	ldr	r3, [pc, #268]	@ (8006a54 <SAIx_In_Init+0x15c>)
 8006946:	2200      	movs	r2, #0
 8006948:	609a      	str	r2, [r3, #8]
	haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 800694a:	4b42      	ldr	r3, [pc, #264]	@ (8006a54 <SAIx_In_Init+0x15c>)
 800694c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006950:	611a      	str	r2, [r3, #16]
	haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8006952:	4b40      	ldr	r3, [pc, #256]	@ (8006a54 <SAIx_In_Init+0x15c>)
 8006954:	2201      	movs	r2, #1
 8006956:	619a      	str	r2, [r3, #24]
	 Frame Length: 64
	 Frame active Length: 32
	 FS Definition: Start frame + Channel Side identification
	 FS Polarity: FS active Low
	 FS Offset: FS asserted one bit before the first bit of slot 0 */
	haudio_out_sai.FrameInit.FrameLength = 64;
 8006958:	4b3e      	ldr	r3, [pc, #248]	@ (8006a54 <SAIx_In_Init+0x15c>)
 800695a:	2240      	movs	r2, #64	@ 0x40
 800695c:	641a      	str	r2, [r3, #64]	@ 0x40
	haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800695e:	4b3d      	ldr	r3, [pc, #244]	@ (8006a54 <SAIx_In_Init+0x15c>)
 8006960:	2220      	movs	r2, #32
 8006962:	645a      	str	r2, [r3, #68]	@ 0x44
	haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8006964:	4b3b      	ldr	r3, [pc, #236]	@ (8006a54 <SAIx_In_Init+0x15c>)
 8006966:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800696a:	649a      	str	r2, [r3, #72]	@ 0x48
	haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800696c:	4b39      	ldr	r3, [pc, #228]	@ (8006a54 <SAIx_In_Init+0x15c>)
 800696e:	2200      	movs	r2, #0
 8006970:	64da      	str	r2, [r3, #76]	@ 0x4c
	haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8006972:	4b38      	ldr	r3, [pc, #224]	@ (8006a54 <SAIx_In_Init+0x15c>)
 8006974:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006978:	651a      	str	r2, [r3, #80]	@ 0x50
	/* Configure SAI Block_x Slot
	 Slot First Bit Offset: 0
	 Slot Size  : 16
	 Slot Number: 4
	 Slot Active: All slot actives */
	haudio_out_sai.SlotInit.FirstBitOffset = 0;
 800697a:	4b36      	ldr	r3, [pc, #216]	@ (8006a54 <SAIx_In_Init+0x15c>)
 800697c:	2200      	movs	r2, #0
 800697e:	655a      	str	r2, [r3, #84]	@ 0x54
	haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8006980:	4b34      	ldr	r3, [pc, #208]	@ (8006a54 <SAIx_In_Init+0x15c>)
 8006982:	2200      	movs	r2, #0
 8006984:	659a      	str	r2, [r3, #88]	@ 0x58
	haudio_out_sai.SlotInit.SlotNumber = 4;
 8006986:	4b33      	ldr	r3, [pc, #204]	@ (8006a54 <SAIx_In_Init+0x15c>)
 8006988:	2204      	movs	r2, #4
 800698a:	65da      	str	r2, [r3, #92]	@ 0x5c
	haudio_out_sai.SlotInit.SlotActive = SlotActive;
 800698c:	4a31      	ldr	r2, [pc, #196]	@ (8006a54 <SAIx_In_Init+0x15c>)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	6613      	str	r3, [r2, #96]	@ 0x60

	HAL_SAI_Init(&haudio_out_sai);
 8006992:	4830      	ldr	r0, [pc, #192]	@ (8006a54 <SAIx_In_Init+0x15c>)
 8006994:	f008 f9e4 	bl	800ed60 <HAL_SAI_Init>

	/* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
	/* Initialize the haudio_in_sai Instance parameter */
	haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8006998:	4b30      	ldr	r3, [pc, #192]	@ (8006a5c <SAIx_In_Init+0x164>)
 800699a:	4a31      	ldr	r2, [pc, #196]	@ (8006a60 <SAIx_In_Init+0x168>)
 800699c:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_in_sai);
 800699e:	4b2f      	ldr	r3, [pc, #188]	@ (8006a5c <SAIx_In_Init+0x164>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	4b2d      	ldr	r3, [pc, #180]	@ (8006a5c <SAIx_In_Init+0x164>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80069ac:	601a      	str	r2, [r3, #0]

	/* Configure SAI_Block_x
	 LSBFirst: Disabled
	 DataSize: 16 */
	haudio_in_sai.Init.AudioFrequency = AudioFreq;
 80069ae:	4a2b      	ldr	r2, [pc, #172]	@ (8006a5c <SAIx_In_Init+0x164>)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	61d3      	str	r3, [r2, #28]
	haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 80069b4:	4b29      	ldr	r3, [pc, #164]	@ (8006a5c <SAIx_In_Init+0x164>)
 80069b6:	2203      	movs	r2, #3
 80069b8:	605a      	str	r2, [r3, #4]
	haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80069ba:	4b28      	ldr	r3, [pc, #160]	@ (8006a5c <SAIx_In_Init+0x164>)
 80069bc:	2200      	movs	r2, #0
 80069be:	615a      	str	r2, [r3, #20]
	haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80069c0:	4b26      	ldr	r3, [pc, #152]	@ (8006a5c <SAIx_In_Init+0x164>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	631a      	str	r2, [r3, #48]	@ 0x30
	haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 80069c6:	4b25      	ldr	r3, [pc, #148]	@ (8006a5c <SAIx_In_Init+0x164>)
 80069c8:	2280      	movs	r2, #128	@ 0x80
 80069ca:	635a      	str	r2, [r3, #52]	@ 0x34
	haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80069cc:	4b23      	ldr	r3, [pc, #140]	@ (8006a5c <SAIx_In_Init+0x164>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	639a      	str	r2, [r3, #56]	@ 0x38
	haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80069d2:	4b22      	ldr	r3, [pc, #136]	@ (8006a5c <SAIx_In_Init+0x164>)
 80069d4:	2201      	movs	r2, #1
 80069d6:	63da      	str	r2, [r3, #60]	@ 0x3c
	haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 80069d8:	4b20      	ldr	r3, [pc, #128]	@ (8006a5c <SAIx_In_Init+0x164>)
 80069da:	2201      	movs	r2, #1
 80069dc:	609a      	str	r2, [r3, #8]
	haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 80069de:	4b1f      	ldr	r3, [pc, #124]	@ (8006a5c <SAIx_In_Init+0x164>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	611a      	str	r2, [r3, #16]
	haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80069e4:	4b1d      	ldr	r3, [pc, #116]	@ (8006a5c <SAIx_In_Init+0x164>)
 80069e6:	2201      	movs	r2, #1
 80069e8:	619a      	str	r2, [r3, #24]
	 Frame Length: 64
	 Frame active Length: 32
	 FS Definition: Start frame + Channel Side identification
	 FS Polarity: FS active Low
	 FS Offset: FS asserted one bit before the first bit of slot 0 */
	haudio_in_sai.FrameInit.FrameLength = 64;
 80069ea:	4b1c      	ldr	r3, [pc, #112]	@ (8006a5c <SAIx_In_Init+0x164>)
 80069ec:	2240      	movs	r2, #64	@ 0x40
 80069ee:	641a      	str	r2, [r3, #64]	@ 0x40
	haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 80069f0:	4b1a      	ldr	r3, [pc, #104]	@ (8006a5c <SAIx_In_Init+0x164>)
 80069f2:	2220      	movs	r2, #32
 80069f4:	645a      	str	r2, [r3, #68]	@ 0x44
	haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80069f6:	4b19      	ldr	r3, [pc, #100]	@ (8006a5c <SAIx_In_Init+0x164>)
 80069f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80069fc:	649a      	str	r2, [r3, #72]	@ 0x48
	haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80069fe:	4b17      	ldr	r3, [pc, #92]	@ (8006a5c <SAIx_In_Init+0x164>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	64da      	str	r2, [r3, #76]	@ 0x4c
	haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8006a04:	4b15      	ldr	r3, [pc, #84]	@ (8006a5c <SAIx_In_Init+0x164>)
 8006a06:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006a0a:	651a      	str	r2, [r3, #80]	@ 0x50
	/* Configure SAI Block_x Slot
	 Slot First Bit Offset: 0
	 Slot Size  : 16
	 Slot Number: 4
	 Slot Active: All slot active */
	haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8006a0c:	4b13      	ldr	r3, [pc, #76]	@ (8006a5c <SAIx_In_Init+0x164>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	655a      	str	r2, [r3, #84]	@ 0x54
	haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8006a12:	4b12      	ldr	r3, [pc, #72]	@ (8006a5c <SAIx_In_Init+0x164>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	659a      	str	r2, [r3, #88]	@ 0x58
	haudio_in_sai.SlotInit.SlotNumber = 4;
 8006a18:	4b10      	ldr	r3, [pc, #64]	@ (8006a5c <SAIx_In_Init+0x164>)
 8006a1a:	2204      	movs	r2, #4
 8006a1c:	65da      	str	r2, [r3, #92]	@ 0x5c
	haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8006a1e:	4a0f      	ldr	r2, [pc, #60]	@ (8006a5c <SAIx_In_Init+0x164>)
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	6613      	str	r3, [r2, #96]	@ 0x60

	HAL_SAI_Init(&haudio_in_sai);
 8006a24:	480d      	ldr	r0, [pc, #52]	@ (8006a5c <SAIx_In_Init+0x164>)
 8006a26:	f008 f99b 	bl	800ed60 <HAL_SAI_Init>

	/* Enable SAI peripheral to generate MCLK */
	__HAL_SAI_ENABLE(&haudio_out_sai);
 8006a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a54 <SAIx_In_Init+0x15c>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	4b08      	ldr	r3, [pc, #32]	@ (8006a54 <SAIx_In_Init+0x15c>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006a38:	601a      	str	r2, [r3, #0]

	/* Enable SAI peripheral */
	__HAL_SAI_ENABLE(&haudio_in_sai);
 8006a3a:	4b08      	ldr	r3, [pc, #32]	@ (8006a5c <SAIx_In_Init+0x164>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	4b06      	ldr	r3, [pc, #24]	@ (8006a5c <SAIx_In_Init+0x164>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006a48:	601a      	str	r2, [r3, #0]
}
 8006a4a:	bf00      	nop
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	20000c0c 	.word	0x20000c0c
 8006a58:	40015c04 	.word	0x40015c04
 8006a5c:	20000c90 	.word	0x20000c90
 8006a60:	40015c24 	.word	0x40015c24

08006a64 <SAIx_In_DeInit>:

/**
 * @brief  Deinitializes the output Audio Codec audio interface (SAI).
 * @retval None
 */
static void SAIx_In_DeInit(void) {
 8006a64:	b580      	push	{r7, lr}
 8006a66:	af00      	add	r7, sp, #0
	/* Initialize the haudio_in_sai Instance parameter */
	haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8006a68:	4b07      	ldr	r3, [pc, #28]	@ (8006a88 <SAIx_In_DeInit+0x24>)
 8006a6a:	4a08      	ldr	r2, [pc, #32]	@ (8006a8c <SAIx_In_DeInit+0x28>)
 8006a6c:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral */
	__HAL_SAI_DISABLE(&haudio_in_sai);
 8006a6e:	4b06      	ldr	r3, [pc, #24]	@ (8006a88 <SAIx_In_DeInit+0x24>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	4b04      	ldr	r3, [pc, #16]	@ (8006a88 <SAIx_In_DeInit+0x24>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006a7c:	601a      	str	r2, [r3, #0]

	HAL_SAI_DeInit(&haudio_in_sai);
 8006a7e:	4802      	ldr	r0, [pc, #8]	@ (8006a88 <SAIx_In_DeInit+0x24>)
 8006a80:	f008 faec 	bl	800f05c <HAL_SAI_DeInit>
}
 8006a84:	bf00      	nop
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	20000c90 	.word	0x20000c90
 8006a8c:	40015c24 	.word	0x40015c24

08006a90 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8006a90:	b580      	push	{r7, lr}
 8006a92:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8006a94:	4b31      	ldr	r3, [pc, #196]	@ (8006b5c <BSP_LCD_Init+0xcc>)
 8006a96:	2228      	movs	r2, #40	@ 0x28
 8006a98:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8006a9a:	4b30      	ldr	r3, [pc, #192]	@ (8006b5c <BSP_LCD_Init+0xcc>)
 8006a9c:	2209      	movs	r2, #9
 8006a9e:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8006aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8006b5c <BSP_LCD_Init+0xcc>)
 8006aa2:	2235      	movs	r2, #53	@ 0x35
 8006aa4:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8006b5c <BSP_LCD_Init+0xcc>)
 8006aa8:	220b      	movs	r2, #11
 8006aaa:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006aac:	4b2b      	ldr	r3, [pc, #172]	@ (8006b5c <BSP_LCD_Init+0xcc>)
 8006aae:	f240 121b 	movw	r2, #283	@ 0x11b
 8006ab2:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8006ab4:	4b29      	ldr	r3, [pc, #164]	@ (8006b5c <BSP_LCD_Init+0xcc>)
 8006ab6:	f240 2215 	movw	r2, #533	@ 0x215
 8006aba:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8006abc:	4b27      	ldr	r3, [pc, #156]	@ (8006b5c <BSP_LCD_Init+0xcc>)
 8006abe:	f240 121d 	movw	r2, #285	@ 0x11d
 8006ac2:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8006ac4:	4b25      	ldr	r3, [pc, #148]	@ (8006b5c <BSP_LCD_Init+0xcc>)
 8006ac6:	f240 2235 	movw	r2, #565	@ 0x235
 8006aca:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8006acc:	2100      	movs	r1, #0
 8006ace:	4823      	ldr	r0, [pc, #140]	@ (8006b5c <BSP_LCD_Init+0xcc>)
 8006ad0:	f000 fd5e 	bl	8007590 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8006ad4:	4b21      	ldr	r3, [pc, #132]	@ (8006b5c <BSP_LCD_Init+0xcc>)
 8006ad6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8006ada:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8006adc:	4b1f      	ldr	r3, [pc, #124]	@ (8006b5c <BSP_LCD_Init+0xcc>)
 8006ade:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8006ae2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8006ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8006b5c <BSP_LCD_Init+0xcc>)
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8006aec:	4b1b      	ldr	r3, [pc, #108]	@ (8006b5c <BSP_LCD_Init+0xcc>)
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8006af4:	4b19      	ldr	r3, [pc, #100]	@ (8006b5c <BSP_LCD_Init+0xcc>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006afc:	4b17      	ldr	r3, [pc, #92]	@ (8006b5c <BSP_LCD_Init+0xcc>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8006b02:	4b16      	ldr	r3, [pc, #88]	@ (8006b5c <BSP_LCD_Init+0xcc>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8006b08:	4b14      	ldr	r3, [pc, #80]	@ (8006b5c <BSP_LCD_Init+0xcc>)
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8006b0e:	4b13      	ldr	r3, [pc, #76]	@ (8006b5c <BSP_LCD_Init+0xcc>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8006b14:	4b11      	ldr	r3, [pc, #68]	@ (8006b5c <BSP_LCD_Init+0xcc>)
 8006b16:	4a12      	ldr	r2, [pc, #72]	@ (8006b60 <BSP_LCD_Init+0xd0>)
 8006b18:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8006b1a:	4810      	ldr	r0, [pc, #64]	@ (8006b5c <BSP_LCD_Init+0xcc>)
 8006b1c:	f006 fc20 	bl	800d360 <HAL_LTDC_GetState>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d103      	bne.n	8006b2e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8006b26:	2100      	movs	r1, #0
 8006b28:	480c      	ldr	r0, [pc, #48]	@ (8006b5c <BSP_LCD_Init+0xcc>)
 8006b2a:	f000 fc57 	bl	80073dc <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8006b2e:	480b      	ldr	r0, [pc, #44]	@ (8006b5c <BSP_LCD_Init+0xcc>)
 8006b30:	f006 fa46 	bl	800cfc0 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8006b34:	2201      	movs	r2, #1
 8006b36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006b3a:	480a      	ldr	r0, [pc, #40]	@ (8006b64 <BSP_LCD_Init+0xd4>)
 8006b3c:	f005 fc7c 	bl	800c438 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8006b40:	2201      	movs	r2, #1
 8006b42:	2108      	movs	r1, #8
 8006b44:	4808      	ldr	r0, [pc, #32]	@ (8006b68 <BSP_LCD_Init+0xd8>)
 8006b46:	f005 fc77 	bl	800c438 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8006b4a:	f000 fe85 	bl	8007858 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8006b4e:	4807      	ldr	r0, [pc, #28]	@ (8006b6c <BSP_LCD_Init+0xdc>)
 8006b50:	f000 f8d8 	bl	8006d04 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20000dd4 	.word	0x20000dd4
 8006b60:	40016800 	.word	0x40016800
 8006b64:	40022000 	.word	0x40022000
 8006b68:	40022800 	.word	0x40022800
 8006b6c:	20000040 	.word	0x20000040

08006b70 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8006b70:	b480      	push	{r7}
 8006b72:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8006b74:	4b06      	ldr	r3, [pc, #24]	@ (8006b90 <BSP_LCD_GetXSize+0x20>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a06      	ldr	r2, [pc, #24]	@ (8006b94 <BSP_LCD_GetXSize+0x24>)
 8006b7a:	2134      	movs	r1, #52	@ 0x34
 8006b7c:	fb01 f303 	mul.w	r3, r1, r3
 8006b80:	4413      	add	r3, r2
 8006b82:	3360      	adds	r3, #96	@ 0x60
 8006b84:	681b      	ldr	r3, [r3, #0]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr
 8006b90:	20000ebc 	.word	0x20000ebc
 8006b94:	20000dd4 	.word	0x20000dd4

08006b98 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8006b9c:	4b06      	ldr	r3, [pc, #24]	@ (8006bb8 <BSP_LCD_GetYSize+0x20>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a06      	ldr	r2, [pc, #24]	@ (8006bbc <BSP_LCD_GetYSize+0x24>)
 8006ba2:	2134      	movs	r1, #52	@ 0x34
 8006ba4:	fb01 f303 	mul.w	r3, r1, r3
 8006ba8:	4413      	add	r3, r2
 8006baa:	3364      	adds	r3, #100	@ 0x64
 8006bac:	681b      	ldr	r3, [r3, #0]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	20000ebc 	.word	0x20000ebc
 8006bbc:	20000dd4 	.word	0x20000dd4

08006bc0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b090      	sub	sp, #64	@ 0x40
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	6039      	str	r1, [r7, #0]
 8006bca:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8006bd0:	f7ff ffce 	bl	8006b70 <BSP_LCD_GetXSize>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8006bdc:	f7ff ffdc 	bl	8006b98 <BSP_LCD_GetYSize>
 8006be0:	4603      	mov	r3, r0
 8006be2:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8006be4:	2300      	movs	r3, #0
 8006be6:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8006bec:	23ff      	movs	r3, #255	@ 0xff
 8006bee:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8006c00:	2300      	movs	r3, #0
 8006c02:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8006c06:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006c0c:	2307      	movs	r3, #7
 8006c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8006c10:	f7ff ffae 	bl	8006b70 <BSP_LCD_GetXSize>
 8006c14:	4603      	mov	r3, r0
 8006c16:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8006c18:	f7ff ffbe 	bl	8006b98 <BSP_LCD_GetYSize>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8006c20:	88fa      	ldrh	r2, [r7, #6]
 8006c22:	f107 030c 	add.w	r3, r7, #12
 8006c26:	4619      	mov	r1, r3
 8006c28:	4812      	ldr	r0, [pc, #72]	@ (8006c74 <BSP_LCD_LayerDefaultInit+0xb4>)
 8006c2a:	f006 fb5b 	bl	800d2e4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8006c2e:	88fa      	ldrh	r2, [r7, #6]
 8006c30:	4911      	ldr	r1, [pc, #68]	@ (8006c78 <BSP_LCD_LayerDefaultInit+0xb8>)
 8006c32:	4613      	mov	r3, r2
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	4413      	add	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	440b      	add	r3, r1
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c42:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8006c44:	88fa      	ldrh	r2, [r7, #6]
 8006c46:	490c      	ldr	r1, [pc, #48]	@ (8006c78 <BSP_LCD_LayerDefaultInit+0xb8>)
 8006c48:	4613      	mov	r3, r2
 8006c4a:	005b      	lsls	r3, r3, #1
 8006c4c:	4413      	add	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	440b      	add	r3, r1
 8006c52:	3308      	adds	r3, #8
 8006c54:	4a09      	ldr	r2, [pc, #36]	@ (8006c7c <BSP_LCD_LayerDefaultInit+0xbc>)
 8006c56:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8006c58:	88fa      	ldrh	r2, [r7, #6]
 8006c5a:	4907      	ldr	r1, [pc, #28]	@ (8006c78 <BSP_LCD_LayerDefaultInit+0xb8>)
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	005b      	lsls	r3, r3, #1
 8006c60:	4413      	add	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	440b      	add	r3, r1
 8006c66:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8006c6a:	601a      	str	r2, [r3, #0]
}
 8006c6c:	bf00      	nop
 8006c6e:	3740      	adds	r7, #64	@ 0x40
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	20000dd4 	.word	0x20000dd4
 8006c78:	20000ec0 	.word	0x20000ec0
 8006c7c:	20000040 	.word	0x20000040

08006c80 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8006c88:	4a04      	ldr	r2, [pc, #16]	@ (8006c9c <BSP_LCD_SelectLayer+0x1c>)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6013      	str	r3, [r2, #0]
} 
 8006c8e:	bf00      	nop
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	20000ebc 	.word	0x20000ebc

08006ca0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8006ca8:	4b07      	ldr	r3, [pc, #28]	@ (8006cc8 <BSP_LCD_SetTextColor+0x28>)
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	4907      	ldr	r1, [pc, #28]	@ (8006ccc <BSP_LCD_SetTextColor+0x2c>)
 8006cae:	4613      	mov	r3, r2
 8006cb0:	005b      	lsls	r3, r3, #1
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	440b      	add	r3, r1
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	601a      	str	r2, [r3, #0]
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	20000ebc 	.word	0x20000ebc
 8006ccc:	20000ec0 	.word	0x20000ec0

08006cd0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8006cd8:	4b08      	ldr	r3, [pc, #32]	@ (8006cfc <BSP_LCD_SetBackColor+0x2c>)
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	4908      	ldr	r1, [pc, #32]	@ (8006d00 <BSP_LCD_SetBackColor+0x30>)
 8006cde:	4613      	mov	r3, r2
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	4413      	add	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	440b      	add	r3, r1
 8006ce8:	3304      	adds	r3, #4
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	601a      	str	r2, [r3, #0]
}
 8006cee:	bf00      	nop
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	20000ebc 	.word	0x20000ebc
 8006d00:	20000ec0 	.word	0x20000ec0

08006d04 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8006d0c:	4b08      	ldr	r3, [pc, #32]	@ (8006d30 <BSP_LCD_SetFont+0x2c>)
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	4908      	ldr	r1, [pc, #32]	@ (8006d34 <BSP_LCD_SetFont+0x30>)
 8006d12:	4613      	mov	r3, r2
 8006d14:	005b      	lsls	r3, r3, #1
 8006d16:	4413      	add	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	440b      	add	r3, r1
 8006d1c:	3308      	adds	r3, #8
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	601a      	str	r2, [r3, #0]
}
 8006d22:	bf00      	nop
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	20000ebc 	.word	0x20000ebc
 8006d34:	20000ec0 	.word	0x20000ec0

08006d38 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8006d3c:	4b07      	ldr	r3, [pc, #28]	@ (8006d5c <BSP_LCD_GetFont+0x24>)
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	4907      	ldr	r1, [pc, #28]	@ (8006d60 <BSP_LCD_GetFont+0x28>)
 8006d42:	4613      	mov	r3, r2
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	4413      	add	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	440b      	add	r3, r1
 8006d4c:	3308      	adds	r3, #8
 8006d4e:	681b      	ldr	r3, [r3, #0]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	20000ebc 	.word	0x20000ebc
 8006d60:	20000ec0 	.word	0x20000ec0

08006d64 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8006d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af02      	add	r7, sp, #8
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8006d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8006dac <BSP_LCD_Clear+0x48>)
 8006d6e:	681c      	ldr	r4, [r3, #0]
 8006d70:	4b0e      	ldr	r3, [pc, #56]	@ (8006dac <BSP_LCD_Clear+0x48>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a0e      	ldr	r2, [pc, #56]	@ (8006db0 <BSP_LCD_Clear+0x4c>)
 8006d76:	2134      	movs	r1, #52	@ 0x34
 8006d78:	fb01 f303 	mul.w	r3, r1, r3
 8006d7c:	4413      	add	r3, r2
 8006d7e:	335c      	adds	r3, #92	@ 0x5c
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	461e      	mov	r6, r3
 8006d84:	f7ff fef4 	bl	8006b70 <BSP_LCD_GetXSize>
 8006d88:	4605      	mov	r5, r0
 8006d8a:	f7ff ff05 	bl	8006b98 <BSP_LCD_GetYSize>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	9301      	str	r3, [sp, #4]
 8006d94:	2300      	movs	r3, #0
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	462a      	mov	r2, r5
 8006d9c:	4631      	mov	r1, r6
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f000 fcca 	bl	8007738 <LL_FillBuffer>
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dac:	20000ebc 	.word	0x20000ebc
 8006db0:	20000dd4 	.word	0x20000dd4

08006db4 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8006db4:	b590      	push	{r4, r7, lr}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	4603      	mov	r3, r0
 8006dbc:	80fb      	strh	r3, [r7, #6]
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	80bb      	strh	r3, [r7, #4]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8006e34 <BSP_LCD_DisplayChar+0x80>)
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	491b      	ldr	r1, [pc, #108]	@ (8006e38 <BSP_LCD_DisplayChar+0x84>)
 8006dcc:	4613      	mov	r3, r2
 8006dce:	005b      	lsls	r3, r3, #1
 8006dd0:	4413      	add	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	440b      	add	r3, r1
 8006dd6:	3308      	adds	r3, #8
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6819      	ldr	r1, [r3, #0]
 8006ddc:	78fb      	ldrb	r3, [r7, #3]
 8006dde:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8006de2:	4b14      	ldr	r3, [pc, #80]	@ (8006e34 <BSP_LCD_DisplayChar+0x80>)
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	4c14      	ldr	r4, [pc, #80]	@ (8006e38 <BSP_LCD_DisplayChar+0x84>)
 8006de8:	4613      	mov	r3, r2
 8006dea:	005b      	lsls	r3, r3, #1
 8006dec:	4413      	add	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4423      	add	r3, r4
 8006df2:	3308      	adds	r3, #8
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006df8:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8006dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8006e34 <BSP_LCD_DisplayChar+0x80>)
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	4c0d      	ldr	r4, [pc, #52]	@ (8006e38 <BSP_LCD_DisplayChar+0x84>)
 8006e02:	4613      	mov	r3, r2
 8006e04:	005b      	lsls	r3, r3, #1
 8006e06:	4413      	add	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4423      	add	r3, r4
 8006e0c:	3308      	adds	r3, #8
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	889b      	ldrh	r3, [r3, #4]
 8006e12:	3307      	adds	r3, #7
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	da00      	bge.n	8006e1a <BSP_LCD_DisplayChar+0x66>
 8006e18:	3307      	adds	r3, #7
 8006e1a:	10db      	asrs	r3, r3, #3
 8006e1c:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006e20:	18ca      	adds	r2, r1, r3
 8006e22:	88b9      	ldrh	r1, [r7, #4]
 8006e24:	88fb      	ldrh	r3, [r7, #6]
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 fbce 	bl	80075c8 <DrawChar>
}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd90      	pop	{r4, r7, pc}
 8006e34:	20000ebc 	.word	0x20000ebc
 8006e38:	20000ec0 	.word	0x20000ec0

08006e3c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8006e3c:	b5b0      	push	{r4, r5, r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60ba      	str	r2, [r7, #8]
 8006e44:	461a      	mov	r2, r3
 8006e46:	4603      	mov	r3, r0
 8006e48:	81fb      	strh	r3, [r7, #14]
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	81bb      	strh	r3, [r7, #12]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8006e52:	2301      	movs	r3, #1
 8006e54:	83fb      	strh	r3, [r7, #30]
 8006e56:	2300      	movs	r3, #0
 8006e58:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	61bb      	str	r3, [r7, #24]
 8006e5e:	2300      	movs	r3, #0
 8006e60:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8006e66:	e002      	b.n	8006e6e <BSP_LCD_DisplayStringAt+0x32>
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	61bb      	str	r3, [r7, #24]
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	1c5a      	adds	r2, r3, #1
 8006e72:	617a      	str	r2, [r7, #20]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1f6      	bne.n	8006e68 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8006e7a:	f7ff fe79 	bl	8006b70 <BSP_LCD_GetXSize>
 8006e7e:	4601      	mov	r1, r0
 8006e80:	4b50      	ldr	r3, [pc, #320]	@ (8006fc4 <BSP_LCD_DisplayStringAt+0x188>)
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	4850      	ldr	r0, [pc, #320]	@ (8006fc8 <BSP_LCD_DisplayStringAt+0x18c>)
 8006e86:	4613      	mov	r3, r2
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	4413      	add	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4403      	add	r3, r0
 8006e90:	3308      	adds	r3, #8
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	889b      	ldrh	r3, [r3, #4]
 8006e96:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e9a:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8006e9c:	79fb      	ldrb	r3, [r7, #7]
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d01c      	beq.n	8006edc <BSP_LCD_DisplayStringAt+0xa0>
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	dc33      	bgt.n	8006f0e <BSP_LCD_DisplayStringAt+0xd2>
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d002      	beq.n	8006eb0 <BSP_LCD_DisplayStringAt+0x74>
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d019      	beq.n	8006ee2 <BSP_LCD_DisplayStringAt+0xa6>
 8006eae:	e02e      	b.n	8006f0e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	1ad1      	subs	r1, r2, r3
 8006eb6:	4b43      	ldr	r3, [pc, #268]	@ (8006fc4 <BSP_LCD_DisplayStringAt+0x188>)
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	4843      	ldr	r0, [pc, #268]	@ (8006fc8 <BSP_LCD_DisplayStringAt+0x18c>)
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	4413      	add	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4403      	add	r3, r0
 8006ec6:	3308      	adds	r3, #8
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	889b      	ldrh	r3, [r3, #4]
 8006ecc:	fb01 f303 	mul.w	r3, r1, r3
 8006ed0:	085b      	lsrs	r3, r3, #1
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	89fb      	ldrh	r3, [r7, #14]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	83fb      	strh	r3, [r7, #30]
      break;
 8006eda:	e01b      	b.n	8006f14 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8006edc:	89fb      	ldrh	r3, [r7, #14]
 8006ede:	83fb      	strh	r3, [r7, #30]
      break;
 8006ee0:	e018      	b.n	8006f14 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	b299      	uxth	r1, r3
 8006eea:	4b36      	ldr	r3, [pc, #216]	@ (8006fc4 <BSP_LCD_DisplayStringAt+0x188>)
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	4836      	ldr	r0, [pc, #216]	@ (8006fc8 <BSP_LCD_DisplayStringAt+0x18c>)
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	005b      	lsls	r3, r3, #1
 8006ef4:	4413      	add	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4403      	add	r3, r0
 8006efa:	3308      	adds	r3, #8
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	889b      	ldrh	r3, [r3, #4]
 8006f00:	fb11 f303 	smulbb	r3, r1, r3
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	89fb      	ldrh	r3, [r7, #14]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	83fb      	strh	r3, [r7, #30]
      break;
 8006f0c:	e002      	b.n	8006f14 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8006f0e:	89fb      	ldrh	r3, [r7, #14]
 8006f10:	83fb      	strh	r3, [r7, #30]
      break;
 8006f12:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8006f14:	8bfb      	ldrh	r3, [r7, #30]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d003      	beq.n	8006f22 <BSP_LCD_DisplayStringAt+0xe6>
 8006f1a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	da1d      	bge.n	8006f5e <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8006f22:	2301      	movs	r3, #1
 8006f24:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8006f26:	e01a      	b.n	8006f5e <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	781a      	ldrb	r2, [r3, #0]
 8006f2c:	89b9      	ldrh	r1, [r7, #12]
 8006f2e:	8bfb      	ldrh	r3, [r7, #30]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7ff ff3f 	bl	8006db4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8006f36:	4b23      	ldr	r3, [pc, #140]	@ (8006fc4 <BSP_LCD_DisplayStringAt+0x188>)
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	4923      	ldr	r1, [pc, #140]	@ (8006fc8 <BSP_LCD_DisplayStringAt+0x18c>)
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	005b      	lsls	r3, r3, #1
 8006f40:	4413      	add	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	440b      	add	r3, r1
 8006f46:	3308      	adds	r3, #8
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	889a      	ldrh	r2, [r3, #4]
 8006f4c:	8bfb      	ldrh	r3, [r7, #30]
 8006f4e:	4413      	add	r3, r2
 8006f50:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	3301      	adds	r3, #1
 8006f56:	60bb      	str	r3, [r7, #8]
    i++;
 8006f58:	8bbb      	ldrh	r3, [r7, #28]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	bf14      	ite	ne
 8006f66:	2301      	movne	r3, #1
 8006f68:	2300      	moveq	r3, #0
 8006f6a:	b2dc      	uxtb	r4, r3
 8006f6c:	f7ff fe00 	bl	8006b70 <BSP_LCD_GetXSize>
 8006f70:	8bb9      	ldrh	r1, [r7, #28]
 8006f72:	4b14      	ldr	r3, [pc, #80]	@ (8006fc4 <BSP_LCD_DisplayStringAt+0x188>)
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	4d14      	ldr	r5, [pc, #80]	@ (8006fc8 <BSP_LCD_DisplayStringAt+0x18c>)
 8006f78:	4613      	mov	r3, r2
 8006f7a:	005b      	lsls	r3, r3, #1
 8006f7c:	4413      	add	r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	442b      	add	r3, r5
 8006f82:	3308      	adds	r3, #8
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	889b      	ldrh	r3, [r3, #4]
 8006f88:	fb01 f303 	mul.w	r3, r1, r3
 8006f8c:	1ac3      	subs	r3, r0, r3
 8006f8e:	b299      	uxth	r1, r3
 8006f90:	4b0c      	ldr	r3, [pc, #48]	@ (8006fc4 <BSP_LCD_DisplayStringAt+0x188>)
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	480c      	ldr	r0, [pc, #48]	@ (8006fc8 <BSP_LCD_DisplayStringAt+0x18c>)
 8006f96:	4613      	mov	r3, r2
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	4413      	add	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4403      	add	r3, r0
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	889b      	ldrh	r3, [r3, #4]
 8006fa6:	4299      	cmp	r1, r3
 8006fa8:	bf2c      	ite	cs
 8006faa:	2301      	movcs	r3, #1
 8006fac:	2300      	movcc	r3, #0
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	4023      	ands	r3, r4
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1b7      	bne.n	8006f28 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8006fb8:	bf00      	nop
 8006fba:	bf00      	nop
 8006fbc:	3720      	adds	r7, #32
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20000ebc 	.word	0x20000ebc
 8006fc8:	20000ec0 	.word	0x20000ec0

08006fcc <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	6039      	str	r1, [r7, #0]
 8006fd6:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8006fd8:	f7ff feae 	bl	8006d38 <BSP_LCD_GetFont>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	88db      	ldrh	r3, [r3, #6]
 8006fe0:	88fa      	ldrh	r2, [r7, #6]
 8006fe2:	fb12 f303 	smulbb	r3, r2, r3
 8006fe6:	b299      	uxth	r1, r3
 8006fe8:	2303      	movs	r3, #3
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	2000      	movs	r0, #0
 8006fee:	f7ff ff25 	bl	8006e3c <BSP_LCD_DisplayStringAt>
}
 8006ff2:	bf00      	nop
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
	...

08006ffc <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8006ffc:	b5b0      	push	{r4, r5, r7, lr}
 8006ffe:	b086      	sub	sp, #24
 8007000:	af02      	add	r7, sp, #8
 8007002:	4603      	mov	r3, r0
 8007004:	80fb      	strh	r3, [r7, #6]
 8007006:	460b      	mov	r3, r1
 8007008:	80bb      	strh	r3, [r7, #4]
 800700a:	4613      	mov	r3, r2
 800700c:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800700e:	2300      	movs	r3, #0
 8007010:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8007012:	4b26      	ldr	r3, [pc, #152]	@ (80070ac <BSP_LCD_DrawHLine+0xb0>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a26      	ldr	r2, [pc, #152]	@ (80070b0 <BSP_LCD_DrawHLine+0xb4>)
 8007018:	2134      	movs	r1, #52	@ 0x34
 800701a:	fb01 f303 	mul.w	r3, r1, r3
 800701e:	4413      	add	r3, r2
 8007020:	3348      	adds	r3, #72	@ 0x48
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b02      	cmp	r3, #2
 8007026:	d114      	bne.n	8007052 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8007028:	4b20      	ldr	r3, [pc, #128]	@ (80070ac <BSP_LCD_DrawHLine+0xb0>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a20      	ldr	r2, [pc, #128]	@ (80070b0 <BSP_LCD_DrawHLine+0xb4>)
 800702e:	2134      	movs	r1, #52	@ 0x34
 8007030:	fb01 f303 	mul.w	r3, r1, r3
 8007034:	4413      	add	r3, r2
 8007036:	335c      	adds	r3, #92	@ 0x5c
 8007038:	681c      	ldr	r4, [r3, #0]
 800703a:	f7ff fd99 	bl	8006b70 <BSP_LCD_GetXSize>
 800703e:	4602      	mov	r2, r0
 8007040:	88bb      	ldrh	r3, [r7, #4]
 8007042:	fb03 f202 	mul.w	r2, r3, r2
 8007046:	88fb      	ldrh	r3, [r7, #6]
 8007048:	4413      	add	r3, r2
 800704a:	005b      	lsls	r3, r3, #1
 800704c:	4423      	add	r3, r4
 800704e:	60fb      	str	r3, [r7, #12]
 8007050:	e013      	b.n	800707a <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8007052:	4b16      	ldr	r3, [pc, #88]	@ (80070ac <BSP_LCD_DrawHLine+0xb0>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a16      	ldr	r2, [pc, #88]	@ (80070b0 <BSP_LCD_DrawHLine+0xb4>)
 8007058:	2134      	movs	r1, #52	@ 0x34
 800705a:	fb01 f303 	mul.w	r3, r1, r3
 800705e:	4413      	add	r3, r2
 8007060:	335c      	adds	r3, #92	@ 0x5c
 8007062:	681c      	ldr	r4, [r3, #0]
 8007064:	f7ff fd84 	bl	8006b70 <BSP_LCD_GetXSize>
 8007068:	4602      	mov	r2, r0
 800706a:	88bb      	ldrh	r3, [r7, #4]
 800706c:	fb03 f202 	mul.w	r2, r3, r2
 8007070:	88fb      	ldrh	r3, [r7, #6]
 8007072:	4413      	add	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4423      	add	r3, r4
 8007078:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800707a:	4b0c      	ldr	r3, [pc, #48]	@ (80070ac <BSP_LCD_DrawHLine+0xb0>)
 800707c:	6818      	ldr	r0, [r3, #0]
 800707e:	68f9      	ldr	r1, [r7, #12]
 8007080:	887c      	ldrh	r4, [r7, #2]
 8007082:	4b0a      	ldr	r3, [pc, #40]	@ (80070ac <BSP_LCD_DrawHLine+0xb0>)
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	4d0b      	ldr	r5, [pc, #44]	@ (80070b4 <BSP_LCD_DrawHLine+0xb8>)
 8007088:	4613      	mov	r3, r2
 800708a:	005b      	lsls	r3, r3, #1
 800708c:	4413      	add	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	442b      	add	r3, r5
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	9301      	str	r3, [sp, #4]
 8007096:	2300      	movs	r3, #0
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	2301      	movs	r3, #1
 800709c:	4622      	mov	r2, r4
 800709e:	f000 fb4b 	bl	8007738 <LL_FillBuffer>
}
 80070a2:	bf00      	nop
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bdb0      	pop	{r4, r5, r7, pc}
 80070aa:	bf00      	nop
 80070ac:	20000ebc 	.word	0x20000ebc
 80070b0:	20000dd4 	.word	0x20000dd4
 80070b4:	20000ec0 	.word	0x20000ec0

080070b8 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80070b8:	b5b0      	push	{r4, r5, r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	4603      	mov	r3, r0
 80070c0:	603a      	str	r2, [r7, #0]
 80070c2:	80fb      	strh	r3, [r7, #6]
 80070c4:	460b      	mov	r3, r1
 80070c6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80070c8:	4b1d      	ldr	r3, [pc, #116]	@ (8007140 <BSP_LCD_DrawPixel+0x88>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a1d      	ldr	r2, [pc, #116]	@ (8007144 <BSP_LCD_DrawPixel+0x8c>)
 80070ce:	2134      	movs	r1, #52	@ 0x34
 80070d0:	fb01 f303 	mul.w	r3, r1, r3
 80070d4:	4413      	add	r3, r2
 80070d6:	3348      	adds	r3, #72	@ 0x48
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d116      	bne.n	800710c <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80070de:	4b18      	ldr	r3, [pc, #96]	@ (8007140 <BSP_LCD_DrawPixel+0x88>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a18      	ldr	r2, [pc, #96]	@ (8007144 <BSP_LCD_DrawPixel+0x8c>)
 80070e4:	2134      	movs	r1, #52	@ 0x34
 80070e6:	fb01 f303 	mul.w	r3, r1, r3
 80070ea:	4413      	add	r3, r2
 80070ec:	335c      	adds	r3, #92	@ 0x5c
 80070ee:	681c      	ldr	r4, [r3, #0]
 80070f0:	88bd      	ldrh	r5, [r7, #4]
 80070f2:	f7ff fd3d 	bl	8006b70 <BSP_LCD_GetXSize>
 80070f6:	4603      	mov	r3, r0
 80070f8:	fb03 f205 	mul.w	r2, r3, r5
 80070fc:	88fb      	ldrh	r3, [r7, #6]
 80070fe:	4413      	add	r3, r2
 8007100:	005b      	lsls	r3, r3, #1
 8007102:	4423      	add	r3, r4
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	b292      	uxth	r2, r2
 8007108:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800710a:	e015      	b.n	8007138 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800710c:	4b0c      	ldr	r3, [pc, #48]	@ (8007140 <BSP_LCD_DrawPixel+0x88>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a0c      	ldr	r2, [pc, #48]	@ (8007144 <BSP_LCD_DrawPixel+0x8c>)
 8007112:	2134      	movs	r1, #52	@ 0x34
 8007114:	fb01 f303 	mul.w	r3, r1, r3
 8007118:	4413      	add	r3, r2
 800711a:	335c      	adds	r3, #92	@ 0x5c
 800711c:	681c      	ldr	r4, [r3, #0]
 800711e:	88bd      	ldrh	r5, [r7, #4]
 8007120:	f7ff fd26 	bl	8006b70 <BSP_LCD_GetXSize>
 8007124:	4603      	mov	r3, r0
 8007126:	fb03 f205 	mul.w	r2, r3, r5
 800712a:	88fb      	ldrh	r3, [r7, #6]
 800712c:	4413      	add	r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4423      	add	r3, r4
 8007132:	461a      	mov	r2, r3
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	6013      	str	r3, [r2, #0]
}
 8007138:	bf00      	nop
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bdb0      	pop	{r4, r5, r7, pc}
 8007140:	20000ebc 	.word	0x20000ebc
 8007144:	20000dd4 	.word	0x20000dd4

08007148 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8007148:	b590      	push	{r4, r7, lr}
 800714a:	b08b      	sub	sp, #44	@ 0x2c
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8007154:	2300      	movs	r3, #0
 8007156:	627b      	str	r3, [r7, #36]	@ 0x24
 8007158:	2300      	movs	r3, #0
 800715a:	61bb      	str	r3, [r7, #24]
 800715c:	2300      	movs	r3, #0
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	2300      	movs	r3, #0
 8007162:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8007164:	2300      	movs	r3, #0
 8007166:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	330a      	adds	r3, #10
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	330b      	adds	r3, #11
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	021b      	lsls	r3, r3, #8
 8007178:	441a      	add	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	330c      	adds	r3, #12
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	041b      	lsls	r3, r3, #16
 8007182:	441a      	add	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	330d      	adds	r3, #13
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	061b      	lsls	r3, r3, #24
 800718c:	4413      	add	r3, r2
 800718e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	3312      	adds	r3, #18
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	461a      	mov	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	3313      	adds	r3, #19
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	021b      	lsls	r3, r3, #8
 80071a0:	441a      	add	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	3314      	adds	r3, #20
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	041b      	lsls	r3, r3, #16
 80071aa:	441a      	add	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	3315      	adds	r3, #21
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	061b      	lsls	r3, r3, #24
 80071b4:	4413      	add	r3, r2
 80071b6:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	3316      	adds	r3, #22
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	461a      	mov	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	3317      	adds	r3, #23
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	021b      	lsls	r3, r3, #8
 80071c8:	441a      	add	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3318      	adds	r3, #24
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	041b      	lsls	r3, r3, #16
 80071d2:	441a      	add	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3319      	adds	r3, #25
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	061b      	lsls	r3, r3, #24
 80071dc:	4413      	add	r3, r2
 80071de:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	331c      	adds	r3, #28
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	461a      	mov	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	331d      	adds	r3, #29
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	021b      	lsls	r3, r3, #8
 80071f0:	4413      	add	r3, r2
 80071f2:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 80071f4:	4b2b      	ldr	r3, [pc, #172]	@ (80072a4 <BSP_LCD_DrawBitmap+0x15c>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a2b      	ldr	r2, [pc, #172]	@ (80072a8 <BSP_LCD_DrawBitmap+0x160>)
 80071fa:	2134      	movs	r1, #52	@ 0x34
 80071fc:	fb01 f303 	mul.w	r3, r1, r3
 8007200:	4413      	add	r3, r2
 8007202:	335c      	adds	r3, #92	@ 0x5c
 8007204:	681c      	ldr	r4, [r3, #0]
 8007206:	f7ff fcb3 	bl	8006b70 <BSP_LCD_GetXSize>
 800720a:	4602      	mov	r2, r0
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	fb03 f202 	mul.w	r2, r3, r2
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	4413      	add	r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4423      	add	r3, r4
 800721a:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	3b20      	subs	r3, #32
 8007220:	2b07      	cmp	r3, #7
 8007222:	d802      	bhi.n	800722a <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8007224:	2300      	movs	r3, #0
 8007226:	61fb      	str	r3, [r7, #28]
 8007228:	e008      	b.n	800723c <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	3b10      	subs	r3, #16
 800722e:	2b07      	cmp	r3, #7
 8007230:	d802      	bhi.n	8007238 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8007232:	2302      	movs	r3, #2
 8007234:	61fb      	str	r3, [r7, #28]
 8007236:	e001      	b.n	800723c <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8007238:	2301      	movs	r3, #1
 800723a:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	3b01      	subs	r3, #1
 8007240:	69ba      	ldr	r2, [r7, #24]
 8007242:	fb02 f303 	mul.w	r3, r2, r3
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	08d2      	lsrs	r2, r2, #3
 800724a:	fb03 f202 	mul.w	r2, r3, r2
 800724e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007250:	4413      	add	r3, r2
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	4413      	add	r3, r2
 8007256:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8007258:	2300      	movs	r3, #0
 800725a:	627b      	str	r3, [r7, #36]	@ 0x24
 800725c:	e018      	b.n	8007290 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 800725e:	6a39      	ldr	r1, [r7, #32]
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	69ba      	ldr	r2, [r7, #24]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fab3 	bl	80077d0 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 800726a:	f7ff fc81 	bl	8006b70 <BSP_LCD_GetXSize>
 800726e:	4603      	mov	r3, r0
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	6a3a      	ldr	r2, [r7, #32]
 8007274:	4413      	add	r3, r2
 8007276:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	08db      	lsrs	r3, r3, #3
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	fb02 f303 	mul.w	r3, r2, r3
 8007282:	425b      	negs	r3, r3
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	4413      	add	r3, r2
 8007288:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 800728a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728c:	3301      	adds	r3, #1
 800728e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	429a      	cmp	r2, r3
 8007296:	d3e2      	bcc.n	800725e <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8007298:	bf00      	nop
 800729a:	bf00      	nop
 800729c:	372c      	adds	r7, #44	@ 0x2c
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd90      	pop	{r4, r7, pc}
 80072a2:	bf00      	nop
 80072a4:	20000ebc 	.word	0x20000ebc
 80072a8:	20000dd4 	.word	0x20000dd4

080072ac <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80072ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b0:	b086      	sub	sp, #24
 80072b2:	af02      	add	r7, sp, #8
 80072b4:	4604      	mov	r4, r0
 80072b6:	4608      	mov	r0, r1
 80072b8:	4611      	mov	r1, r2
 80072ba:	461a      	mov	r2, r3
 80072bc:	4623      	mov	r3, r4
 80072be:	80fb      	strh	r3, [r7, #6]
 80072c0:	4603      	mov	r3, r0
 80072c2:	80bb      	strh	r3, [r7, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	807b      	strh	r3, [r7, #2]
 80072c8:	4613      	mov	r3, r2
 80072ca:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 80072cc:	2300      	movs	r3, #0
 80072ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80072d0:	4b30      	ldr	r3, [pc, #192]	@ (8007394 <BSP_LCD_FillRect+0xe8>)
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	4930      	ldr	r1, [pc, #192]	@ (8007398 <BSP_LCD_FillRect+0xec>)
 80072d6:	4613      	mov	r3, r2
 80072d8:	005b      	lsls	r3, r3, #1
 80072da:	4413      	add	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	440b      	add	r3, r1
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7ff fcdc 	bl	8006ca0 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80072e8:	4b2a      	ldr	r3, [pc, #168]	@ (8007394 <BSP_LCD_FillRect+0xe8>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a2b      	ldr	r2, [pc, #172]	@ (800739c <BSP_LCD_FillRect+0xf0>)
 80072ee:	2134      	movs	r1, #52	@ 0x34
 80072f0:	fb01 f303 	mul.w	r3, r1, r3
 80072f4:	4413      	add	r3, r2
 80072f6:	3348      	adds	r3, #72	@ 0x48
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d114      	bne.n	8007328 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80072fe:	4b25      	ldr	r3, [pc, #148]	@ (8007394 <BSP_LCD_FillRect+0xe8>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a26      	ldr	r2, [pc, #152]	@ (800739c <BSP_LCD_FillRect+0xf0>)
 8007304:	2134      	movs	r1, #52	@ 0x34
 8007306:	fb01 f303 	mul.w	r3, r1, r3
 800730a:	4413      	add	r3, r2
 800730c:	335c      	adds	r3, #92	@ 0x5c
 800730e:	681c      	ldr	r4, [r3, #0]
 8007310:	f7ff fc2e 	bl	8006b70 <BSP_LCD_GetXSize>
 8007314:	4602      	mov	r2, r0
 8007316:	88bb      	ldrh	r3, [r7, #4]
 8007318:	fb03 f202 	mul.w	r2, r3, r2
 800731c:	88fb      	ldrh	r3, [r7, #6]
 800731e:	4413      	add	r3, r2
 8007320:	005b      	lsls	r3, r3, #1
 8007322:	4423      	add	r3, r4
 8007324:	60fb      	str	r3, [r7, #12]
 8007326:	e013      	b.n	8007350 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8007328:	4b1a      	ldr	r3, [pc, #104]	@ (8007394 <BSP_LCD_FillRect+0xe8>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a1b      	ldr	r2, [pc, #108]	@ (800739c <BSP_LCD_FillRect+0xf0>)
 800732e:	2134      	movs	r1, #52	@ 0x34
 8007330:	fb01 f303 	mul.w	r3, r1, r3
 8007334:	4413      	add	r3, r2
 8007336:	335c      	adds	r3, #92	@ 0x5c
 8007338:	681c      	ldr	r4, [r3, #0]
 800733a:	f7ff fc19 	bl	8006b70 <BSP_LCD_GetXSize>
 800733e:	4602      	mov	r2, r0
 8007340:	88bb      	ldrh	r3, [r7, #4]
 8007342:	fb03 f202 	mul.w	r2, r3, r2
 8007346:	88fb      	ldrh	r3, [r7, #6]
 8007348:	4413      	add	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4423      	add	r3, r4
 800734e:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8007350:	4b10      	ldr	r3, [pc, #64]	@ (8007394 <BSP_LCD_FillRect+0xe8>)
 8007352:	681c      	ldr	r4, [r3, #0]
 8007354:	68fd      	ldr	r5, [r7, #12]
 8007356:	887e      	ldrh	r6, [r7, #2]
 8007358:	f8b7 8000 	ldrh.w	r8, [r7]
 800735c:	f7ff fc08 	bl	8006b70 <BSP_LCD_GetXSize>
 8007360:	4602      	mov	r2, r0
 8007362:	887b      	ldrh	r3, [r7, #2]
 8007364:	1ad1      	subs	r1, r2, r3
 8007366:	4b0b      	ldr	r3, [pc, #44]	@ (8007394 <BSP_LCD_FillRect+0xe8>)
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	480b      	ldr	r0, [pc, #44]	@ (8007398 <BSP_LCD_FillRect+0xec>)
 800736c:	4613      	mov	r3, r2
 800736e:	005b      	lsls	r3, r3, #1
 8007370:	4413      	add	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4403      	add	r3, r0
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	9301      	str	r3, [sp, #4]
 800737a:	9100      	str	r1, [sp, #0]
 800737c:	4643      	mov	r3, r8
 800737e:	4632      	mov	r2, r6
 8007380:	4629      	mov	r1, r5
 8007382:	4620      	mov	r0, r4
 8007384:	f000 f9d8 	bl	8007738 <LL_FillBuffer>
}
 8007388:	bf00      	nop
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007392:	bf00      	nop
 8007394:	20000ebc 	.word	0x20000ebc
 8007398:	20000ec0 	.word	0x20000ec0
 800739c:	20000dd4 	.word	0x20000dd4

080073a0 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80073a4:	4b0a      	ldr	r3, [pc, #40]	@ (80073d0 <BSP_LCD_DisplayOn+0x30>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	699a      	ldr	r2, [r3, #24]
 80073aa:	4b09      	ldr	r3, [pc, #36]	@ (80073d0 <BSP_LCD_DisplayOn+0x30>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f042 0201 	orr.w	r2, r2, #1
 80073b2:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80073b4:	2201      	movs	r2, #1
 80073b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80073ba:	4806      	ldr	r0, [pc, #24]	@ (80073d4 <BSP_LCD_DisplayOn+0x34>)
 80073bc:	f005 f83c 	bl	800c438 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80073c0:	2201      	movs	r2, #1
 80073c2:	2108      	movs	r1, #8
 80073c4:	4804      	ldr	r0, [pc, #16]	@ (80073d8 <BSP_LCD_DisplayOn+0x38>)
 80073c6:	f005 f837 	bl	800c438 <HAL_GPIO_WritePin>
}
 80073ca:	bf00      	nop
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	20000dd4 	.word	0x20000dd4
 80073d4:	40022000 	.word	0x40022000
 80073d8:	40022800 	.word	0x40022800

080073dc <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b090      	sub	sp, #64	@ 0x40
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80073e6:	4b64      	ldr	r3, [pc, #400]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 80073e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ea:	4a63      	ldr	r2, [pc, #396]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 80073ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80073f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80073f2:	4b61      	ldr	r3, [pc, #388]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 80073f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80073fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80073fe:	4b5e      	ldr	r3, [pc, #376]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 8007400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007402:	4a5d      	ldr	r2, [pc, #372]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 8007404:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007408:	6313      	str	r3, [r2, #48]	@ 0x30
 800740a:	4b5b      	ldr	r3, [pc, #364]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 800740c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800740e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007412:	627b      	str	r3, [r7, #36]	@ 0x24
 8007414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007416:	4b58      	ldr	r3, [pc, #352]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 8007418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800741a:	4a57      	ldr	r2, [pc, #348]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 800741c:	f043 0310 	orr.w	r3, r3, #16
 8007420:	6313      	str	r3, [r2, #48]	@ 0x30
 8007422:	4b55      	ldr	r3, [pc, #340]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 8007424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007426:	f003 0310 	and.w	r3, r3, #16
 800742a:	623b      	str	r3, [r7, #32]
 800742c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800742e:	4b52      	ldr	r3, [pc, #328]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 8007430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007432:	4a51      	ldr	r2, [pc, #324]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 8007434:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007438:	6313      	str	r3, [r2, #48]	@ 0x30
 800743a:	4b4f      	ldr	r3, [pc, #316]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 800743c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800743e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007442:	61fb      	str	r3, [r7, #28]
 8007444:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8007446:	4b4c      	ldr	r3, [pc, #304]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 8007448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800744a:	4a4b      	ldr	r2, [pc, #300]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 800744c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007450:	6313      	str	r3, [r2, #48]	@ 0x30
 8007452:	4b49      	ldr	r3, [pc, #292]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 8007454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800745a:	61bb      	str	r3, [r7, #24]
 800745c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800745e:	4b46      	ldr	r3, [pc, #280]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 8007460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007462:	4a45      	ldr	r2, [pc, #276]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 8007464:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007468:	6313      	str	r3, [r2, #48]	@ 0x30
 800746a:	4b43      	ldr	r3, [pc, #268]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 800746c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800746e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007472:	617b      	str	r3, [r7, #20]
 8007474:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8007476:	4b40      	ldr	r3, [pc, #256]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 8007478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800747a:	4a3f      	ldr	r2, [pc, #252]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 800747c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007480:	6313      	str	r3, [r2, #48]	@ 0x30
 8007482:	4b3d      	ldr	r3, [pc, #244]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 8007484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800748a:	613b      	str	r3, [r7, #16]
 800748c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800748e:	4b3a      	ldr	r3, [pc, #232]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 8007490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007492:	4a39      	ldr	r2, [pc, #228]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 8007494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007498:	6313      	str	r3, [r2, #48]	@ 0x30
 800749a:	4b37      	ldr	r3, [pc, #220]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 800749c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800749e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80074a6:	4b34      	ldr	r3, [pc, #208]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 80074a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074aa:	4a33      	ldr	r2, [pc, #204]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 80074ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80074b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80074b2:	4b31      	ldr	r3, [pc, #196]	@ (8007578 <BSP_LCD_MspInit+0x19c>)
 80074b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074ba:	60bb      	str	r3, [r7, #8]
 80074bc:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80074be:	2310      	movs	r3, #16
 80074c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80074c2:	2302      	movs	r3, #2
 80074c4:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80074ca:	2302      	movs	r3, #2
 80074cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80074ce:	230e      	movs	r3, #14
 80074d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80074d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80074d6:	4619      	mov	r1, r3
 80074d8:	4828      	ldr	r0, [pc, #160]	@ (800757c <BSP_LCD_MspInit+0x1a0>)
 80074da:	f004 fcdd 	bl	800be98 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80074de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80074e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80074e4:	2302      	movs	r3, #2
 80074e6:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80074e8:	2309      	movs	r3, #9
 80074ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80074ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80074f0:	4619      	mov	r1, r3
 80074f2:	4823      	ldr	r0, [pc, #140]	@ (8007580 <BSP_LCD_MspInit+0x1a4>)
 80074f4:	f004 fcd0 	bl	800be98 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80074f8:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 80074fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80074fe:	2302      	movs	r3, #2
 8007500:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8007502:	230e      	movs	r3, #14
 8007504:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8007506:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800750a:	4619      	mov	r1, r3
 800750c:	481d      	ldr	r0, [pc, #116]	@ (8007584 <BSP_LCD_MspInit+0x1a8>)
 800750e:	f004 fcc3 	bl	800be98 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8007512:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8007516:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007518:	2302      	movs	r3, #2
 800751a:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800751c:	230e      	movs	r3, #14
 800751e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8007520:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007524:	4619      	mov	r1, r3
 8007526:	4818      	ldr	r0, [pc, #96]	@ (8007588 <BSP_LCD_MspInit+0x1ac>)
 8007528:	f004 fcb6 	bl	800be98 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800752c:	23f7      	movs	r3, #247	@ 0xf7
 800752e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007530:	2302      	movs	r3, #2
 8007532:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8007534:	230e      	movs	r3, #14
 8007536:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8007538:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800753c:	4619      	mov	r1, r3
 800753e:	4813      	ldr	r0, [pc, #76]	@ (800758c <BSP_LCD_MspInit+0x1b0>)
 8007540:	f004 fcaa 	bl	800be98 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8007544:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007548:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800754a:	2301      	movs	r3, #1
 800754c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800754e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007552:	4619      	mov	r1, r3
 8007554:	480b      	ldr	r0, [pc, #44]	@ (8007584 <BSP_LCD_MspInit+0x1a8>)
 8007556:	f004 fc9f 	bl	800be98 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800755a:	2308      	movs	r3, #8
 800755c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800755e:	2301      	movs	r3, #1
 8007560:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8007562:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007566:	4619      	mov	r1, r3
 8007568:	4808      	ldr	r0, [pc, #32]	@ (800758c <BSP_LCD_MspInit+0x1b0>)
 800756a:	f004 fc95 	bl	800be98 <HAL_GPIO_Init>
}
 800756e:	bf00      	nop
 8007570:	3740      	adds	r7, #64	@ 0x40
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	40023800 	.word	0x40023800
 800757c:	40021000 	.word	0x40021000
 8007580:	40021800 	.word	0x40021800
 8007584:	40022000 	.word	0x40022000
 8007588:	40022400 	.word	0x40022400
 800758c:	40022800 	.word	0x40022800

08007590 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800759a:	4b0a      	ldr	r3, [pc, #40]	@ (80075c4 <BSP_LCD_ClockConfig+0x34>)
 800759c:	2208      	movs	r2, #8
 800759e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80075a0:	4b08      	ldr	r3, [pc, #32]	@ (80075c4 <BSP_LCD_ClockConfig+0x34>)
 80075a2:	22c0      	movs	r2, #192	@ 0xc0
 80075a4:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80075a6:	4b07      	ldr	r3, [pc, #28]	@ (80075c4 <BSP_LCD_ClockConfig+0x34>)
 80075a8:	2205      	movs	r2, #5
 80075aa:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80075ac:	4b05      	ldr	r3, [pc, #20]	@ (80075c4 <BSP_LCD_ClockConfig+0x34>)
 80075ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80075b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80075b4:	4803      	ldr	r0, [pc, #12]	@ (80075c4 <BSP_LCD_ClockConfig+0x34>)
 80075b6:	f006 fd97 	bl	800e0e8 <HAL_RCCEx_PeriphCLKConfig>
}
 80075ba:	bf00      	nop
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	20000ed8 	.word	0x20000ed8

080075c8 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b088      	sub	sp, #32
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	4603      	mov	r3, r0
 80075d0:	603a      	str	r2, [r7, #0]
 80075d2:	80fb      	strh	r3, [r7, #6]
 80075d4:	460b      	mov	r3, r1
 80075d6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80075d8:	2300      	movs	r3, #0
 80075da:	61fb      	str	r3, [r7, #28]
 80075dc:	2300      	movs	r3, #0
 80075de:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80075e0:	4b53      	ldr	r3, [pc, #332]	@ (8007730 <DrawChar+0x168>)
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	4953      	ldr	r1, [pc, #332]	@ (8007734 <DrawChar+0x16c>)
 80075e6:	4613      	mov	r3, r2
 80075e8:	005b      	lsls	r3, r3, #1
 80075ea:	4413      	add	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	440b      	add	r3, r1
 80075f0:	3308      	adds	r3, #8
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	88db      	ldrh	r3, [r3, #6]
 80075f6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80075f8:	4b4d      	ldr	r3, [pc, #308]	@ (8007730 <DrawChar+0x168>)
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	494d      	ldr	r1, [pc, #308]	@ (8007734 <DrawChar+0x16c>)
 80075fe:	4613      	mov	r3, r2
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	4413      	add	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	440b      	add	r3, r1
 8007608:	3308      	adds	r3, #8
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	889b      	ldrh	r3, [r3, #4]
 800760e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8007610:	8a3b      	ldrh	r3, [r7, #16]
 8007612:	3307      	adds	r3, #7
 8007614:	2b00      	cmp	r3, #0
 8007616:	da00      	bge.n	800761a <DrawChar+0x52>
 8007618:	3307      	adds	r3, #7
 800761a:	10db      	asrs	r3, r3, #3
 800761c:	b2db      	uxtb	r3, r3
 800761e:	00db      	lsls	r3, r3, #3
 8007620:	b2da      	uxtb	r2, r3
 8007622:	8a3b      	ldrh	r3, [r7, #16]
 8007624:	b2db      	uxtb	r3, r3
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800762a:	2300      	movs	r3, #0
 800762c:	61fb      	str	r3, [r7, #28]
 800762e:	e076      	b.n	800771e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8007630:	8a3b      	ldrh	r3, [r7, #16]
 8007632:	3307      	adds	r3, #7
 8007634:	2b00      	cmp	r3, #0
 8007636:	da00      	bge.n	800763a <DrawChar+0x72>
 8007638:	3307      	adds	r3, #7
 800763a:	10db      	asrs	r3, r3, #3
 800763c:	461a      	mov	r2, r3
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	fb02 f303 	mul.w	r3, r2, r3
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	4413      	add	r3, r2
 8007648:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800764a:	8a3b      	ldrh	r3, [r7, #16]
 800764c:	3307      	adds	r3, #7
 800764e:	2b00      	cmp	r3, #0
 8007650:	da00      	bge.n	8007654 <DrawChar+0x8c>
 8007652:	3307      	adds	r3, #7
 8007654:	10db      	asrs	r3, r3, #3
 8007656:	2b01      	cmp	r3, #1
 8007658:	d002      	beq.n	8007660 <DrawChar+0x98>
 800765a:	2b02      	cmp	r3, #2
 800765c:	d004      	beq.n	8007668 <DrawChar+0xa0>
 800765e:	e00c      	b.n	800767a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	617b      	str	r3, [r7, #20]
      break;
 8007666:	e016      	b.n	8007696 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	021b      	lsls	r3, r3, #8
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	3201      	adds	r2, #1
 8007672:	7812      	ldrb	r2, [r2, #0]
 8007674:	4313      	orrs	r3, r2
 8007676:	617b      	str	r3, [r7, #20]
      break;
 8007678:	e00d      	b.n	8007696 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	041a      	lsls	r2, r3, #16
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	3301      	adds	r3, #1
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	021b      	lsls	r3, r3, #8
 8007688:	4313      	orrs	r3, r2
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	3202      	adds	r2, #2
 800768e:	7812      	ldrb	r2, [r2, #0]
 8007690:	4313      	orrs	r3, r2
 8007692:	617b      	str	r3, [r7, #20]
      break;
 8007694:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8007696:	2300      	movs	r3, #0
 8007698:	61bb      	str	r3, [r7, #24]
 800769a:	e036      	b.n	800770a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800769c:	8a3a      	ldrh	r2, [r7, #16]
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	1ad2      	subs	r2, r2, r3
 80076a2:	7bfb      	ldrb	r3, [r7, #15]
 80076a4:	4413      	add	r3, r2
 80076a6:	3b01      	subs	r3, #1
 80076a8:	2201      	movs	r2, #1
 80076aa:	fa02 f303 	lsl.w	r3, r2, r3
 80076ae:	461a      	mov	r2, r3
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	4013      	ands	r3, r2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d012      	beq.n	80076de <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	88fb      	ldrh	r3, [r7, #6]
 80076be:	4413      	add	r3, r2
 80076c0:	b298      	uxth	r0, r3
 80076c2:	4b1b      	ldr	r3, [pc, #108]	@ (8007730 <DrawChar+0x168>)
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	491b      	ldr	r1, [pc, #108]	@ (8007734 <DrawChar+0x16c>)
 80076c8:	4613      	mov	r3, r2
 80076ca:	005b      	lsls	r3, r3, #1
 80076cc:	4413      	add	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	440b      	add	r3, r1
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	88bb      	ldrh	r3, [r7, #4]
 80076d6:	4619      	mov	r1, r3
 80076d8:	f7ff fcee 	bl	80070b8 <BSP_LCD_DrawPixel>
 80076dc:	e012      	b.n	8007704 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	88fb      	ldrh	r3, [r7, #6]
 80076e4:	4413      	add	r3, r2
 80076e6:	b298      	uxth	r0, r3
 80076e8:	4b11      	ldr	r3, [pc, #68]	@ (8007730 <DrawChar+0x168>)
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	4911      	ldr	r1, [pc, #68]	@ (8007734 <DrawChar+0x16c>)
 80076ee:	4613      	mov	r3, r2
 80076f0:	005b      	lsls	r3, r3, #1
 80076f2:	4413      	add	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	440b      	add	r3, r1
 80076f8:	3304      	adds	r3, #4
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	88bb      	ldrh	r3, [r7, #4]
 80076fe:	4619      	mov	r1, r3
 8007700:	f7ff fcda 	bl	80070b8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	3301      	adds	r3, #1
 8007708:	61bb      	str	r3, [r7, #24]
 800770a:	8a3b      	ldrh	r3, [r7, #16]
 800770c:	69ba      	ldr	r2, [r7, #24]
 800770e:	429a      	cmp	r2, r3
 8007710:	d3c4      	bcc.n	800769c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8007712:	88bb      	ldrh	r3, [r7, #4]
 8007714:	3301      	adds	r3, #1
 8007716:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	3301      	adds	r3, #1
 800771c:	61fb      	str	r3, [r7, #28]
 800771e:	8a7b      	ldrh	r3, [r7, #18]
 8007720:	69fa      	ldr	r2, [r7, #28]
 8007722:	429a      	cmp	r2, r3
 8007724:	d384      	bcc.n	8007630 <DrawChar+0x68>
  }
}
 8007726:	bf00      	nop
 8007728:	bf00      	nop
 800772a:	3720      	adds	r7, #32
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	20000ebc 	.word	0x20000ebc
 8007734:	20000ec0 	.word	0x20000ec0

08007738 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b086      	sub	sp, #24
 800773c:	af02      	add	r7, sp, #8
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
 8007744:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8007746:	4b1e      	ldr	r3, [pc, #120]	@ (80077c0 <LL_FillBuffer+0x88>)
 8007748:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800774c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800774e:	4b1d      	ldr	r3, [pc, #116]	@ (80077c4 <LL_FillBuffer+0x8c>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a1d      	ldr	r2, [pc, #116]	@ (80077c8 <LL_FillBuffer+0x90>)
 8007754:	2134      	movs	r1, #52	@ 0x34
 8007756:	fb01 f303 	mul.w	r3, r1, r3
 800775a:	4413      	add	r3, r2
 800775c:	3348      	adds	r3, #72	@ 0x48
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b02      	cmp	r3, #2
 8007762:	d103      	bne.n	800776c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8007764:	4b16      	ldr	r3, [pc, #88]	@ (80077c0 <LL_FillBuffer+0x88>)
 8007766:	2202      	movs	r2, #2
 8007768:	609a      	str	r2, [r3, #8]
 800776a:	e002      	b.n	8007772 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800776c:	4b14      	ldr	r3, [pc, #80]	@ (80077c0 <LL_FillBuffer+0x88>)
 800776e:	2200      	movs	r2, #0
 8007770:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8007772:	4a13      	ldr	r2, [pc, #76]	@ (80077c0 <LL_FillBuffer+0x88>)
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8007778:	4b11      	ldr	r3, [pc, #68]	@ (80077c0 <LL_FillBuffer+0x88>)
 800777a:	4a14      	ldr	r2, [pc, #80]	@ (80077cc <LL_FillBuffer+0x94>)
 800777c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800777e:	4810      	ldr	r0, [pc, #64]	@ (80077c0 <LL_FillBuffer+0x88>)
 8007780:	f004 f8fe 	bl	800b980 <HAL_DMA2D_Init>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d115      	bne.n	80077b6 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800778a:	68f9      	ldr	r1, [r7, #12]
 800778c:	480c      	ldr	r0, [pc, #48]	@ (80077c0 <LL_FillBuffer+0x88>)
 800778e:	f004 fa55 	bl	800bc3c <HAL_DMA2D_ConfigLayer>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d10e      	bne.n	80077b6 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	69f9      	ldr	r1, [r7, #28]
 80077a2:	4807      	ldr	r0, [pc, #28]	@ (80077c0 <LL_FillBuffer+0x88>)
 80077a4:	f004 f936 	bl	800ba14 <HAL_DMA2D_Start>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d103      	bne.n	80077b6 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80077ae:	210a      	movs	r1, #10
 80077b0:	4803      	ldr	r0, [pc, #12]	@ (80077c0 <LL_FillBuffer+0x88>)
 80077b2:	f004 f95a 	bl	800ba6a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80077b6:	bf00      	nop
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	20000e7c 	.word	0x20000e7c
 80077c4:	20000ebc 	.word	0x20000ebc
 80077c8:	20000dd4 	.word	0x20000dd4
 80077cc:	4002b000 	.word	0x4002b000

080077d0 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af02      	add	r7, sp, #8
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
 80077dc:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 80077de:	4b1c      	ldr	r3, [pc, #112]	@ (8007850 <LL_ConvertLineToARGB8888+0x80>)
 80077e0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80077e4:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80077e6:	4b1a      	ldr	r3, [pc, #104]	@ (8007850 <LL_ConvertLineToARGB8888+0x80>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 80077ec:	4b18      	ldr	r3, [pc, #96]	@ (8007850 <LL_ConvertLineToARGB8888+0x80>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80077f2:	4b17      	ldr	r3, [pc, #92]	@ (8007850 <LL_ConvertLineToARGB8888+0x80>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80077f8:	4b15      	ldr	r3, [pc, #84]	@ (8007850 <LL_ConvertLineToARGB8888+0x80>)
 80077fa:	22ff      	movs	r2, #255	@ 0xff
 80077fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 80077fe:	4a14      	ldr	r2, [pc, #80]	@ (8007850 <LL_ConvertLineToARGB8888+0x80>)
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8007804:	4b12      	ldr	r3, [pc, #72]	@ (8007850 <LL_ConvertLineToARGB8888+0x80>)
 8007806:	2200      	movs	r2, #0
 8007808:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 800780a:	4b11      	ldr	r3, [pc, #68]	@ (8007850 <LL_ConvertLineToARGB8888+0x80>)
 800780c:	4a11      	ldr	r2, [pc, #68]	@ (8007854 <LL_ConvertLineToARGB8888+0x84>)
 800780e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8007810:	480f      	ldr	r0, [pc, #60]	@ (8007850 <LL_ConvertLineToARGB8888+0x80>)
 8007812:	f004 f8b5 	bl	800b980 <HAL_DMA2D_Init>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d115      	bne.n	8007848 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 800781c:	2101      	movs	r1, #1
 800781e:	480c      	ldr	r0, [pc, #48]	@ (8007850 <LL_ConvertLineToARGB8888+0x80>)
 8007820:	f004 fa0c 	bl	800bc3c <HAL_DMA2D_ConfigLayer>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10e      	bne.n	8007848 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800782a:	68f9      	ldr	r1, [r7, #12]
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	2301      	movs	r3, #1
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4806      	ldr	r0, [pc, #24]	@ (8007850 <LL_ConvertLineToARGB8888+0x80>)
 8007836:	f004 f8ed 	bl	800ba14 <HAL_DMA2D_Start>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d103      	bne.n	8007848 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8007840:	210a      	movs	r1, #10
 8007842:	4803      	ldr	r0, [pc, #12]	@ (8007850 <LL_ConvertLineToARGB8888+0x80>)
 8007844:	f004 f911 	bl	800ba6a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8007848:	bf00      	nop
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	20000e7c 	.word	0x20000e7c
 8007854:	4002b000 	.word	0x4002b000

08007858 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8007858:	b580      	push	{r7, lr}
 800785a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800785c:	4b29      	ldr	r3, [pc, #164]	@ (8007904 <BSP_SDRAM_Init+0xac>)
 800785e:	4a2a      	ldr	r2, [pc, #168]	@ (8007908 <BSP_SDRAM_Init+0xb0>)
 8007860:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8007862:	4b2a      	ldr	r3, [pc, #168]	@ (800790c <BSP_SDRAM_Init+0xb4>)
 8007864:	2202      	movs	r2, #2
 8007866:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8007868:	4b28      	ldr	r3, [pc, #160]	@ (800790c <BSP_SDRAM_Init+0xb4>)
 800786a:	2207      	movs	r2, #7
 800786c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800786e:	4b27      	ldr	r3, [pc, #156]	@ (800790c <BSP_SDRAM_Init+0xb4>)
 8007870:	2204      	movs	r2, #4
 8007872:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8007874:	4b25      	ldr	r3, [pc, #148]	@ (800790c <BSP_SDRAM_Init+0xb4>)
 8007876:	2207      	movs	r2, #7
 8007878:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800787a:	4b24      	ldr	r3, [pc, #144]	@ (800790c <BSP_SDRAM_Init+0xb4>)
 800787c:	2202      	movs	r2, #2
 800787e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8007880:	4b22      	ldr	r3, [pc, #136]	@ (800790c <BSP_SDRAM_Init+0xb4>)
 8007882:	2202      	movs	r2, #2
 8007884:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8007886:	4b21      	ldr	r3, [pc, #132]	@ (800790c <BSP_SDRAM_Init+0xb4>)
 8007888:	2202      	movs	r2, #2
 800788a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800788c:	4b1d      	ldr	r3, [pc, #116]	@ (8007904 <BSP_SDRAM_Init+0xac>)
 800788e:	2200      	movs	r2, #0
 8007890:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8007892:	4b1c      	ldr	r3, [pc, #112]	@ (8007904 <BSP_SDRAM_Init+0xac>)
 8007894:	2200      	movs	r2, #0
 8007896:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8007898:	4b1a      	ldr	r3, [pc, #104]	@ (8007904 <BSP_SDRAM_Init+0xac>)
 800789a:	2204      	movs	r2, #4
 800789c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800789e:	4b19      	ldr	r3, [pc, #100]	@ (8007904 <BSP_SDRAM_Init+0xac>)
 80078a0:	2210      	movs	r2, #16
 80078a2:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80078a4:	4b17      	ldr	r3, [pc, #92]	@ (8007904 <BSP_SDRAM_Init+0xac>)
 80078a6:	2240      	movs	r2, #64	@ 0x40
 80078a8:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80078aa:	4b16      	ldr	r3, [pc, #88]	@ (8007904 <BSP_SDRAM_Init+0xac>)
 80078ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80078b0:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80078b2:	4b14      	ldr	r3, [pc, #80]	@ (8007904 <BSP_SDRAM_Init+0xac>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80078b8:	4b12      	ldr	r3, [pc, #72]	@ (8007904 <BSP_SDRAM_Init+0xac>)
 80078ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078be:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80078c0:	4b10      	ldr	r3, [pc, #64]	@ (8007904 <BSP_SDRAM_Init+0xac>)
 80078c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80078c6:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80078c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007904 <BSP_SDRAM_Init+0xac>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80078ce:	2100      	movs	r1, #0
 80078d0:	480c      	ldr	r0, [pc, #48]	@ (8007904 <BSP_SDRAM_Init+0xac>)
 80078d2:	f000 f87f 	bl	80079d4 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80078d6:	490d      	ldr	r1, [pc, #52]	@ (800790c <BSP_SDRAM_Init+0xb4>)
 80078d8:	480a      	ldr	r0, [pc, #40]	@ (8007904 <BSP_SDRAM_Init+0xac>)
 80078da:	f008 febb 	bl	8010654 <HAL_SDRAM_Init>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d003      	beq.n	80078ec <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80078e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007910 <BSP_SDRAM_Init+0xb8>)
 80078e6:	2201      	movs	r2, #1
 80078e8:	701a      	strb	r2, [r3, #0]
 80078ea:	e002      	b.n	80078f2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80078ec:	4b08      	ldr	r3, [pc, #32]	@ (8007910 <BSP_SDRAM_Init+0xb8>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80078f2:	f240 6003 	movw	r0, #1539	@ 0x603
 80078f6:	f000 f80d 	bl	8007914 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80078fa:	4b05      	ldr	r3, [pc, #20]	@ (8007910 <BSP_SDRAM_Init+0xb8>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	20000f5c 	.word	0x20000f5c
 8007908:	a0000140 	.word	0xa0000140
 800790c:	20000f90 	.word	0x20000f90
 8007910:	20000050 	.word	0x20000050

08007914 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800791c:	2300      	movs	r3, #0
 800791e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8007920:	4b2a      	ldr	r3, [pc, #168]	@ (80079cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007922:	2201      	movs	r2, #1
 8007924:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007926:	4b29      	ldr	r3, [pc, #164]	@ (80079cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007928:	2210      	movs	r2, #16
 800792a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800792c:	4b27      	ldr	r3, [pc, #156]	@ (80079cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800792e:	2201      	movs	r2, #1
 8007930:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8007932:	4b26      	ldr	r3, [pc, #152]	@ (80079cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007934:	2200      	movs	r2, #0
 8007936:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8007938:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800793c:	4923      	ldr	r1, [pc, #140]	@ (80079cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800793e:	4824      	ldr	r0, [pc, #144]	@ (80079d0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007940:	f008 febc 	bl	80106bc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8007944:	2001      	movs	r0, #1
 8007946:	f002 ff17 	bl	800a778 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800794a:	4b20      	ldr	r3, [pc, #128]	@ (80079cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800794c:	2202      	movs	r2, #2
 800794e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007950:	4b1e      	ldr	r3, [pc, #120]	@ (80079cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007952:	2210      	movs	r2, #16
 8007954:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8007956:	4b1d      	ldr	r3, [pc, #116]	@ (80079cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007958:	2201      	movs	r2, #1
 800795a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800795c:	4b1b      	ldr	r3, [pc, #108]	@ (80079cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800795e:	2200      	movs	r2, #0
 8007960:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8007962:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007966:	4919      	ldr	r1, [pc, #100]	@ (80079cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007968:	4819      	ldr	r0, [pc, #100]	@ (80079d0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800796a:	f008 fea7 	bl	80106bc <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800796e:	4b17      	ldr	r3, [pc, #92]	@ (80079cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007970:	2203      	movs	r2, #3
 8007972:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007974:	4b15      	ldr	r3, [pc, #84]	@ (80079cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007976:	2210      	movs	r2, #16
 8007978:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800797a:	4b14      	ldr	r3, [pc, #80]	@ (80079cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800797c:	2208      	movs	r2, #8
 800797e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8007980:	4b12      	ldr	r3, [pc, #72]	@ (80079cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007982:	2200      	movs	r2, #0
 8007984:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8007986:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800798a:	4910      	ldr	r1, [pc, #64]	@ (80079cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800798c:	4810      	ldr	r0, [pc, #64]	@ (80079d0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800798e:	f008 fe95 	bl	80106bc <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8007992:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8007996:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8007998:	4b0c      	ldr	r3, [pc, #48]	@ (80079cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800799a:	2204      	movs	r2, #4
 800799c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800799e:	4b0b      	ldr	r3, [pc, #44]	@ (80079cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80079a0:	2210      	movs	r2, #16
 80079a2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80079a4:	4b09      	ldr	r3, [pc, #36]	@ (80079cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80079a6:	2201      	movs	r2, #1
 80079a8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	4a07      	ldr	r2, [pc, #28]	@ (80079cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80079ae:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80079b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80079b4:	4905      	ldr	r1, [pc, #20]	@ (80079cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80079b6:	4806      	ldr	r0, [pc, #24]	@ (80079d0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80079b8:	f008 fe80 	bl	80106bc <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80079bc:	6879      	ldr	r1, [r7, #4]
 80079be:	4804      	ldr	r0, [pc, #16]	@ (80079d0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80079c0:	f008 feb1 	bl	8010726 <HAL_SDRAM_ProgramRefreshRate>
}
 80079c4:	bf00      	nop
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	20000fac 	.word	0x20000fac
 80079d0:	20000f5c 	.word	0x20000f5c

080079d4 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b090      	sub	sp, #64	@ 0x40
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80079de:	4b70      	ldr	r3, [pc, #448]	@ (8007ba0 <BSP_SDRAM_MspInit+0x1cc>)
 80079e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e2:	4a6f      	ldr	r2, [pc, #444]	@ (8007ba0 <BSP_SDRAM_MspInit+0x1cc>)
 80079e4:	f043 0301 	orr.w	r3, r3, #1
 80079e8:	6393      	str	r3, [r2, #56]	@ 0x38
 80079ea:	4b6d      	ldr	r3, [pc, #436]	@ (8007ba0 <BSP_SDRAM_MspInit+0x1cc>)
 80079ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80079f6:	4b6a      	ldr	r3, [pc, #424]	@ (8007ba0 <BSP_SDRAM_MspInit+0x1cc>)
 80079f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079fa:	4a69      	ldr	r2, [pc, #420]	@ (8007ba0 <BSP_SDRAM_MspInit+0x1cc>)
 80079fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a02:	4b67      	ldr	r3, [pc, #412]	@ (8007ba0 <BSP_SDRAM_MspInit+0x1cc>)
 8007a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a0e:	4b64      	ldr	r3, [pc, #400]	@ (8007ba0 <BSP_SDRAM_MspInit+0x1cc>)
 8007a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a12:	4a63      	ldr	r2, [pc, #396]	@ (8007ba0 <BSP_SDRAM_MspInit+0x1cc>)
 8007a14:	f043 0304 	orr.w	r3, r3, #4
 8007a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a1a:	4b61      	ldr	r3, [pc, #388]	@ (8007ba0 <BSP_SDRAM_MspInit+0x1cc>)
 8007a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a1e:	f003 0304 	and.w	r3, r3, #4
 8007a22:	623b      	str	r3, [r7, #32]
 8007a24:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007a26:	4b5e      	ldr	r3, [pc, #376]	@ (8007ba0 <BSP_SDRAM_MspInit+0x1cc>)
 8007a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a2a:	4a5d      	ldr	r2, [pc, #372]	@ (8007ba0 <BSP_SDRAM_MspInit+0x1cc>)
 8007a2c:	f043 0308 	orr.w	r3, r3, #8
 8007a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a32:	4b5b      	ldr	r3, [pc, #364]	@ (8007ba0 <BSP_SDRAM_MspInit+0x1cc>)
 8007a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a36:	f003 0308 	and.w	r3, r3, #8
 8007a3a:	61fb      	str	r3, [r7, #28]
 8007a3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007a3e:	4b58      	ldr	r3, [pc, #352]	@ (8007ba0 <BSP_SDRAM_MspInit+0x1cc>)
 8007a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a42:	4a57      	ldr	r2, [pc, #348]	@ (8007ba0 <BSP_SDRAM_MspInit+0x1cc>)
 8007a44:	f043 0310 	orr.w	r3, r3, #16
 8007a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a4a:	4b55      	ldr	r3, [pc, #340]	@ (8007ba0 <BSP_SDRAM_MspInit+0x1cc>)
 8007a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a4e:	f003 0310 	and.w	r3, r3, #16
 8007a52:	61bb      	str	r3, [r7, #24]
 8007a54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007a56:	4b52      	ldr	r3, [pc, #328]	@ (8007ba0 <BSP_SDRAM_MspInit+0x1cc>)
 8007a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a5a:	4a51      	ldr	r2, [pc, #324]	@ (8007ba0 <BSP_SDRAM_MspInit+0x1cc>)
 8007a5c:	f043 0320 	orr.w	r3, r3, #32
 8007a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a62:	4b4f      	ldr	r3, [pc, #316]	@ (8007ba0 <BSP_SDRAM_MspInit+0x1cc>)
 8007a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a66:	f003 0320 	and.w	r3, r3, #32
 8007a6a:	617b      	str	r3, [r7, #20]
 8007a6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007a6e:	4b4c      	ldr	r3, [pc, #304]	@ (8007ba0 <BSP_SDRAM_MspInit+0x1cc>)
 8007a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a72:	4a4b      	ldr	r2, [pc, #300]	@ (8007ba0 <BSP_SDRAM_MspInit+0x1cc>)
 8007a74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a7a:	4b49      	ldr	r3, [pc, #292]	@ (8007ba0 <BSP_SDRAM_MspInit+0x1cc>)
 8007a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a82:	613b      	str	r3, [r7, #16]
 8007a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007a86:	4b46      	ldr	r3, [pc, #280]	@ (8007ba0 <BSP_SDRAM_MspInit+0x1cc>)
 8007a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a8a:	4a45      	ldr	r2, [pc, #276]	@ (8007ba0 <BSP_SDRAM_MspInit+0x1cc>)
 8007a8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a92:	4b43      	ldr	r3, [pc, #268]	@ (8007ba0 <BSP_SDRAM_MspInit+0x1cc>)
 8007a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a9a:	60fb      	str	r3, [r7, #12]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007a9e:	2302      	movs	r3, #2
 8007aa0:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8007aaa:	230c      	movs	r3, #12
 8007aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8007aae:	2308      	movs	r3, #8
 8007ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8007ab2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	483a      	ldr	r0, [pc, #232]	@ (8007ba4 <BSP_SDRAM_MspInit+0x1d0>)
 8007aba:	f004 f9ed 	bl	800be98 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8007abe:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8007ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8007ac4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007ac8:	4619      	mov	r1, r3
 8007aca:	4837      	ldr	r0, [pc, #220]	@ (8007ba8 <BSP_SDRAM_MspInit+0x1d4>)
 8007acc:	f004 f9e4 	bl	800be98 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8007ad0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8007ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8007ad6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007ada:	4619      	mov	r1, r3
 8007adc:	4833      	ldr	r0, [pc, #204]	@ (8007bac <BSP_SDRAM_MspInit+0x1d8>)
 8007ade:	f004 f9db 	bl	800be98 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8007ae2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8007ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8007ae8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007aec:	4619      	mov	r1, r3
 8007aee:	4830      	ldr	r0, [pc, #192]	@ (8007bb0 <BSP_SDRAM_MspInit+0x1dc>)
 8007af0:	f004 f9d2 	bl	800be98 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8007af4:	f248 1333 	movw	r3, #33075	@ 0x8133
 8007af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8007afa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007afe:	4619      	mov	r1, r3
 8007b00:	482c      	ldr	r0, [pc, #176]	@ (8007bb4 <BSP_SDRAM_MspInit+0x1e0>)
 8007b02:	f004 f9c9 	bl	800be98 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8007b06:	2328      	movs	r3, #40	@ 0x28
 8007b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8007b0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007b0e:	4619      	mov	r1, r3
 8007b10:	4829      	ldr	r0, [pc, #164]	@ (8007bb8 <BSP_SDRAM_MspInit+0x1e4>)
 8007b12:	f004 f9c1 	bl	800be98 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8007b16:	4b29      	ldr	r3, [pc, #164]	@ (8007bbc <BSP_SDRAM_MspInit+0x1e8>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8007b1c:	4b27      	ldr	r3, [pc, #156]	@ (8007bbc <BSP_SDRAM_MspInit+0x1e8>)
 8007b1e:	2280      	movs	r2, #128	@ 0x80
 8007b20:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8007b22:	4b26      	ldr	r3, [pc, #152]	@ (8007bbc <BSP_SDRAM_MspInit+0x1e8>)
 8007b24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b28:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8007b2a:	4b24      	ldr	r3, [pc, #144]	@ (8007bbc <BSP_SDRAM_MspInit+0x1e8>)
 8007b2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007b30:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007b32:	4b22      	ldr	r3, [pc, #136]	@ (8007bbc <BSP_SDRAM_MspInit+0x1e8>)
 8007b34:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007b38:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8007b3a:	4b20      	ldr	r3, [pc, #128]	@ (8007bbc <BSP_SDRAM_MspInit+0x1e8>)
 8007b3c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007b40:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8007b42:	4b1e      	ldr	r3, [pc, #120]	@ (8007bbc <BSP_SDRAM_MspInit+0x1e8>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8007b48:	4b1c      	ldr	r3, [pc, #112]	@ (8007bbc <BSP_SDRAM_MspInit+0x1e8>)
 8007b4a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007b4e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8007b50:	4b1a      	ldr	r3, [pc, #104]	@ (8007bbc <BSP_SDRAM_MspInit+0x1e8>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8007b56:	4b19      	ldr	r3, [pc, #100]	@ (8007bbc <BSP_SDRAM_MspInit+0x1e8>)
 8007b58:	2203      	movs	r2, #3
 8007b5a:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8007b5c:	4b17      	ldr	r3, [pc, #92]	@ (8007bbc <BSP_SDRAM_MspInit+0x1e8>)
 8007b5e:	2200      	movs	r2, #0
 8007b60:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8007b62:	4b16      	ldr	r3, [pc, #88]	@ (8007bbc <BSP_SDRAM_MspInit+0x1e8>)
 8007b64:	2200      	movs	r2, #0
 8007b66:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8007b68:	4b14      	ldr	r3, [pc, #80]	@ (8007bbc <BSP_SDRAM_MspInit+0x1e8>)
 8007b6a:	4a15      	ldr	r2, [pc, #84]	@ (8007bc0 <BSP_SDRAM_MspInit+0x1ec>)
 8007b6c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a12      	ldr	r2, [pc, #72]	@ (8007bbc <BSP_SDRAM_MspInit+0x1e8>)
 8007b72:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b74:	4a11      	ldr	r2, [pc, #68]	@ (8007bbc <BSP_SDRAM_MspInit+0x1e8>)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8007b7a:	4810      	ldr	r0, [pc, #64]	@ (8007bbc <BSP_SDRAM_MspInit+0x1e8>)
 8007b7c:	f003 fbaa 	bl	800b2d4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8007b80:	480e      	ldr	r0, [pc, #56]	@ (8007bbc <BSP_SDRAM_MspInit+0x1e8>)
 8007b82:	f003 faf9 	bl	800b178 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8007b86:	2200      	movs	r2, #0
 8007b88:	210f      	movs	r1, #15
 8007b8a:	2038      	movs	r0, #56	@ 0x38
 8007b8c:	f003 faca 	bl	800b124 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8007b90:	2038      	movs	r0, #56	@ 0x38
 8007b92:	f003 fae3 	bl	800b15c <HAL_NVIC_EnableIRQ>
}
 8007b96:	bf00      	nop
 8007b98:	3740      	adds	r7, #64	@ 0x40
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	40023800 	.word	0x40023800
 8007ba4:	40020800 	.word	0x40020800
 8007ba8:	40020c00 	.word	0x40020c00
 8007bac:	40021000 	.word	0x40021000
 8007bb0:	40021400 	.word	0x40021400
 8007bb4:	40021800 	.word	0x40021800
 8007bb8:	40021c00 	.word	0x40021c00
 8007bbc:	20000fbc 	.word	0x20000fbc
 8007bc0:	40026410 	.word	0x40026410

08007bc4 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	4603      	mov	r3, r0
 8007bcc:	460a      	mov	r2, r1
 8007bce:	80fb      	strh	r3, [r7, #6]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8007bd8:	4a14      	ldr	r2, [pc, #80]	@ (8007c2c <BSP_TS_Init+0x68>)
 8007bda:	88fb      	ldrh	r3, [r7, #6]
 8007bdc:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8007bde:	4a14      	ldr	r2, [pc, #80]	@ (8007c30 <BSP_TS_Init+0x6c>)
 8007be0:	88bb      	ldrh	r3, [r7, #4]
 8007be2:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8007be4:	4b13      	ldr	r3, [pc, #76]	@ (8007c34 <BSP_TS_Init+0x70>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2070      	movs	r0, #112	@ 0x70
 8007bea:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8007bec:	4b11      	ldr	r3, [pc, #68]	@ (8007c34 <BSP_TS_Init+0x70>)
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	2070      	movs	r0, #112	@ 0x70
 8007bf2:	4798      	blx	r3
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b51      	cmp	r3, #81	@ 0x51
 8007bf8:	d110      	bne.n	8007c1c <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8007bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8007c38 <BSP_TS_Init+0x74>)
 8007bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8007c34 <BSP_TS_Init+0x70>)
 8007bfe:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8007c00:	4b0e      	ldr	r3, [pc, #56]	@ (8007c3c <BSP_TS_Init+0x78>)
 8007c02:	2270      	movs	r2, #112	@ 0x70
 8007c04:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8007c06:	4b0e      	ldr	r3, [pc, #56]	@ (8007c40 <BSP_TS_Init+0x7c>)
 8007c08:	2208      	movs	r2, #8
 8007c0a:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8007c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c38 <BSP_TS_Init+0x74>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	4a0a      	ldr	r2, [pc, #40]	@ (8007c3c <BSP_TS_Init+0x78>)
 8007c14:	7812      	ldrb	r2, [r2, #0]
 8007c16:	4610      	mov	r0, r2
 8007c18:	4798      	blx	r3
 8007c1a:	e001      	b.n	8007c20 <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	20001020 	.word	0x20001020
 8007c30:	20001022 	.word	0x20001022
 8007c34:	20000000 	.word	0x20000000
 8007c38:	2000101c 	.word	0x2000101c
 8007c3c:	20001025 	.word	0x20001025
 8007c40:	20001024 	.word	0x20001024

08007c44 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8007c44:	b590      	push	{r4, r7, lr}
 8007c46:	b097      	sub	sp, #92	@ 0x5c
 8007c48:	af02      	add	r7, sp, #8
 8007c4a:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8007c52:	2300      	movs	r3, #0
 8007c54:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8007c56:	2300      	movs	r3, #0
 8007c58:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8007c5e:	4bb8      	ldr	r3, [pc, #736]	@ (8007f40 <BSP_TS_GetState+0x2fc>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	4ab7      	ldr	r2, [pc, #732]	@ (8007f44 <BSP_TS_GetState+0x300>)
 8007c66:	7812      	ldrb	r2, [r2, #0]
 8007c68:	4610      	mov	r0, r2
 8007c6a:	4798      	blx	r3
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	461a      	mov	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 8198 	beq.w	8007fae <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8007c7e:	2300      	movs	r3, #0
 8007c80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c82:	e187      	b.n	8007f94 <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8007c84:	4bae      	ldr	r3, [pc, #696]	@ (8007f40 <BSP_TS_GetState+0x2fc>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	4aae      	ldr	r2, [pc, #696]	@ (8007f44 <BSP_TS_GetState+0x300>)
 8007c8c:	7812      	ldrb	r2, [r2, #0]
 8007c8e:	4614      	mov	r4, r2
 8007c90:	f107 0120 	add.w	r1, r7, #32
 8007c94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c96:	0052      	lsls	r2, r2, #1
 8007c98:	1888      	adds	r0, r1, r2
 8007c9a:	f107 0114 	add.w	r1, r7, #20
 8007c9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ca0:	0052      	lsls	r2, r2, #1
 8007ca2:	440a      	add	r2, r1
 8007ca4:	4601      	mov	r1, r0
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8007caa:	4ba7      	ldr	r3, [pc, #668]	@ (8007f48 <BSP_TS_GetState+0x304>)
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d117      	bne.n	8007ce2 <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8007cb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cb4:	005b      	lsls	r3, r3, #1
 8007cb6:	3350      	adds	r3, #80	@ 0x50
 8007cb8:	443b      	add	r3, r7
 8007cba:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8007cbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cc0:	005b      	lsls	r3, r3, #1
 8007cc2:	3350      	adds	r3, #80	@ 0x50
 8007cc4:	443b      	add	r3, r7
 8007cc6:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8007cca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ccc:	005b      	lsls	r3, r3, #1
 8007cce:	3350      	adds	r3, #80	@ 0x50
 8007cd0:	443b      	add	r3, r7
 8007cd2:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8007cd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cd8:	005b      	lsls	r3, r3, #1
 8007cda:	3350      	adds	r3, #80	@ 0x50
 8007cdc:	443b      	add	r3, r7
 8007cde:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8007ce2:	4b99      	ldr	r3, [pc, #612]	@ (8007f48 <BSP_TS_GetState+0x304>)
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	f003 0302 	and.w	r3, r3, #2
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00e      	beq.n	8007d0c <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8007cee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cf0:	005b      	lsls	r3, r3, #1
 8007cf2:	3350      	adds	r3, #80	@ 0x50
 8007cf4:	443b      	add	r3, r7
 8007cf6:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8007cfa:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d02:	005b      	lsls	r3, r3, #1
 8007d04:	3350      	adds	r3, #80	@ 0x50
 8007d06:	443b      	add	r3, r7
 8007d08:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8007d0c:	4b8e      	ldr	r3, [pc, #568]	@ (8007f48 <BSP_TS_GetState+0x304>)
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	f003 0304 	and.w	r3, r3, #4
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00e      	beq.n	8007d36 <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8007d18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	3350      	adds	r3, #80	@ 0x50
 8007d1e:	443b      	add	r3, r7
 8007d20:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8007d24:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d2c:	005b      	lsls	r3, r3, #1
 8007d2e:	3350      	adds	r3, #80	@ 0x50
 8007d30:	443b      	add	r3, r7
 8007d32:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8007d36:	4b84      	ldr	r3, [pc, #528]	@ (8007f48 <BSP_TS_GetState+0x304>)
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	f003 0308 	and.w	r3, r3, #8
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d017      	beq.n	8007d72 <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8007d42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d44:	005b      	lsls	r3, r3, #1
 8007d46:	3350      	adds	r3, #80	@ 0x50
 8007d48:	443b      	add	r3, r7
 8007d4a:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8007d4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	3350      	adds	r3, #80	@ 0x50
 8007d54:	443b      	add	r3, r7
 8007d56:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8007d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d5c:	005b      	lsls	r3, r3, #1
 8007d5e:	3350      	adds	r3, #80	@ 0x50
 8007d60:	443b      	add	r3, r7
 8007d62:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8007d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d68:	005b      	lsls	r3, r3, #1
 8007d6a:	3350      	adds	r3, #80	@ 0x50
 8007d6c:	443b      	add	r3, r7
 8007d6e:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8007d72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d74:	005b      	lsls	r3, r3, #1
 8007d76:	3350      	adds	r3, #80	@ 0x50
 8007d78:	443b      	add	r3, r7
 8007d7a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007d7e:	4619      	mov	r1, r3
 8007d80:	4a72      	ldr	r2, [pc, #456]	@ (8007f4c <BSP_TS_GetState+0x308>)
 8007d82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d88:	4299      	cmp	r1, r3
 8007d8a:	d90d      	bls.n	8007da8 <BSP_TS_GetState+0x164>
 8007d8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d8e:	005b      	lsls	r3, r3, #1
 8007d90:	3350      	adds	r3, #80	@ 0x50
 8007d92:	443b      	add	r3, r7
 8007d94:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8007d98:	496c      	ldr	r1, [pc, #432]	@ (8007f4c <BSP_TS_GetState+0x308>)
 8007d9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	e00c      	b.n	8007dc2 <BSP_TS_GetState+0x17e>
 8007da8:	4a68      	ldr	r2, [pc, #416]	@ (8007f4c <BSP_TS_GetState+0x308>)
 8007daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007db4:	005b      	lsls	r3, r3, #1
 8007db6:	3350      	adds	r3, #80	@ 0x50
 8007db8:	443b      	add	r3, r7
 8007dba:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8007dc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dc8:	005b      	lsls	r3, r3, #1
 8007dca:	3350      	adds	r3, #80	@ 0x50
 8007dcc:	443b      	add	r3, r7
 8007dce:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	4a5e      	ldr	r2, [pc, #376]	@ (8007f50 <BSP_TS_GetState+0x30c>)
 8007dd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ddc:	4299      	cmp	r1, r3
 8007dde:	d90d      	bls.n	8007dfc <BSP_TS_GetState+0x1b8>
 8007de0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007de2:	005b      	lsls	r3, r3, #1
 8007de4:	3350      	adds	r3, #80	@ 0x50
 8007de6:	443b      	add	r3, r7
 8007de8:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8007dec:	4958      	ldr	r1, [pc, #352]	@ (8007f50 <BSP_TS_GetState+0x30c>)
 8007dee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007df0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	e00c      	b.n	8007e16 <BSP_TS_GetState+0x1d2>
 8007dfc:	4a54      	ldr	r2, [pc, #336]	@ (8007f50 <BSP_TS_GetState+0x30c>)
 8007dfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e08:	005b      	lsls	r3, r3, #1
 8007e0a:	3350      	adds	r3, #80	@ 0x50
 8007e0c:	443b      	add	r3, r7
 8007e0e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 8007e1a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8007e1e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007e22:	4413      	add	r3, r2
 8007e24:	2b05      	cmp	r3, #5
 8007e26:	dd15      	ble.n	8007e54 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8007e28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	3350      	adds	r3, #80	@ 0x50
 8007e2e:	443b      	add	r3, r7
 8007e30:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007e34:	4619      	mov	r1, r3
 8007e36:	4a45      	ldr	r2, [pc, #276]	@ (8007f4c <BSP_TS_GetState+0x308>)
 8007e38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8007e3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e40:	005b      	lsls	r3, r3, #1
 8007e42:	3350      	adds	r3, #80	@ 0x50
 8007e44:	443b      	add	r3, r7
 8007e46:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	4a40      	ldr	r2, [pc, #256]	@ (8007f50 <BSP_TS_GetState+0x30c>)
 8007e4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8007e54:	4b3b      	ldr	r3, [pc, #236]	@ (8007f44 <BSP_TS_GetState+0x300>)
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	2b70      	cmp	r3, #112	@ 0x70
 8007e5a:	d119      	bne.n	8007e90 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8007e5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e5e:	005b      	lsls	r3, r3, #1
 8007e60:	3350      	adds	r3, #80	@ 0x50
 8007e62:	443b      	add	r3, r7
 8007e64:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e6c:	005b      	lsls	r3, r3, #1
 8007e6e:	4413      	add	r3, r2
 8007e70:	460a      	mov	r2, r1
 8007e72:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8007e74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e76:	005b      	lsls	r3, r3, #1
 8007e78:	3350      	adds	r3, #80	@ 0x50
 8007e7a:	443b      	add	r3, r7
 8007e7c:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e84:	3304      	adds	r3, #4
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	4413      	add	r3, r2
 8007e8a:	460a      	mov	r2, r1
 8007e8c:	809a      	strh	r2, [r3, #4]
 8007e8e:	e022      	b.n	8007ed6 <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8007e90:	4b30      	ldr	r3, [pc, #192]	@ (8007f54 <BSP_TS_GetState+0x310>)
 8007e92:	881b      	ldrh	r3, [r3, #0]
 8007e94:	4619      	mov	r1, r3
 8007e96:	4a2d      	ldr	r2, [pc, #180]	@ (8007f4c <BSP_TS_GetState+0x308>)
 8007e98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e9e:	fb01 f303 	mul.w	r3, r1, r3
 8007ea2:	0b1b      	lsrs	r3, r3, #12
 8007ea4:	b299      	uxth	r1, r3
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007eaa:	005b      	lsls	r3, r3, #1
 8007eac:	4413      	add	r3, r2
 8007eae:	460a      	mov	r2, r1
 8007eb0:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8007eb2:	4b29      	ldr	r3, [pc, #164]	@ (8007f58 <BSP_TS_GetState+0x314>)
 8007eb4:	881b      	ldrh	r3, [r3, #0]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	4a25      	ldr	r2, [pc, #148]	@ (8007f50 <BSP_TS_GetState+0x30c>)
 8007eba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ec0:	fb01 f303 	mul.w	r3, r1, r3
 8007ec4:	0b1b      	lsrs	r3, r3, #12
 8007ec6:	b299      	uxth	r1, r3
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ecc:	3304      	adds	r3, #4
 8007ece:	005b      	lsls	r3, r3, #1
 8007ed0:	4413      	add	r3, r2
 8007ed2:	460a      	mov	r2, r1
 8007ed4:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8007ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8007f44 <BSP_TS_GetState+0x300>)
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f107 010c 	add.w	r1, r7, #12
 8007ee0:	f107 0210 	add.w	r2, r7, #16
 8007ee4:	f107 0308 	add.w	r3, r7, #8
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	460b      	mov	r3, r1
 8007eec:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007eee:	f7fb fcc9 	bl	8003884 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	b2d9      	uxtb	r1, r3
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007efa:	4413      	add	r3, r2
 8007efc:	3316      	adds	r3, #22
 8007efe:	460a      	mov	r2, r1
 8007f00:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	b2d9      	uxtb	r1, r3
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f0a:	4413      	add	r3, r2
 8007f0c:	3320      	adds	r3, #32
 8007f0e:	460a      	mov	r2, r1
 8007f10:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	2b03      	cmp	r3, #3
 8007f16:	d836      	bhi.n	8007f86 <BSP_TS_GetState+0x342>
 8007f18:	a201      	add	r2, pc, #4	@ (adr r2, 8007f20 <BSP_TS_GetState+0x2dc>)
 8007f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1e:	bf00      	nop
 8007f20:	08007f31 	.word	0x08007f31
 8007f24:	08007f5d 	.word	0x08007f5d
 8007f28:	08007f6b 	.word	0x08007f6b
 8007f2c:	08007f79 	.word	0x08007f79
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f34:	4413      	add	r3, r2
 8007f36:	331b      	adds	r3, #27
 8007f38:	2201      	movs	r2, #1
 8007f3a:	701a      	strb	r2, [r3, #0]
          break;
 8007f3c:	e027      	b.n	8007f8e <BSP_TS_GetState+0x34a>
 8007f3e:	bf00      	nop
 8007f40:	2000101c 	.word	0x2000101c
 8007f44:	20001025 	.word	0x20001025
 8007f48:	20001024 	.word	0x20001024
 8007f4c:	20001028 	.word	0x20001028
 8007f50:	2000103c 	.word	0x2000103c
 8007f54:	20001020 	.word	0x20001020
 8007f58:	20001022 	.word	0x20001022
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f60:	4413      	add	r3, r2
 8007f62:	331b      	adds	r3, #27
 8007f64:	2202      	movs	r2, #2
 8007f66:	701a      	strb	r2, [r3, #0]
          break;
 8007f68:	e011      	b.n	8007f8e <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f6e:	4413      	add	r3, r2
 8007f70:	331b      	adds	r3, #27
 8007f72:	2203      	movs	r2, #3
 8007f74:	701a      	strb	r2, [r3, #0]
          break;
 8007f76:	e00a      	b.n	8007f8e <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f7c:	4413      	add	r3, r2
 8007f7e:	331b      	adds	r3, #27
 8007f80:	2200      	movs	r2, #0
 8007f82:	701a      	strb	r2, [r3, #0]
          break;
 8007f84:	e003      	b.n	8007f8e <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 8007f8c:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8007f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f90:	3301      	adds	r3, #1
 8007f92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	461a      	mov	r2, r3
 8007f9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	f4ff ae71 	bcc.w	8007c84 <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f80a 	bl	8007fbc <BSP_TS_Get_GestureId>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8007fae:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3754      	adds	r7, #84	@ 0x54
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd90      	pop	{r4, r7, pc}
 8007fba:	bf00      	nop

08007fbc <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8007fcc:	4b3b      	ldr	r3, [pc, #236]	@ (80080bc <BSP_TS_Get_GestureId+0x100>)
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	f107 0308 	add.w	r3, r7, #8
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	4610      	mov	r0, r2
 8007fda:	f7fb fc3a 	bl	8003852 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2b49      	cmp	r3, #73	@ 0x49
 8007fe2:	d05e      	beq.n	80080a2 <BSP_TS_Get_GestureId+0xe6>
 8007fe4:	2b49      	cmp	r3, #73	@ 0x49
 8007fe6:	d860      	bhi.n	80080aa <BSP_TS_Get_GestureId+0xee>
 8007fe8:	2b1c      	cmp	r3, #28
 8007fea:	d83f      	bhi.n	800806c <BSP_TS_Get_GestureId+0xb0>
 8007fec:	2b1c      	cmp	r3, #28
 8007fee:	d85c      	bhi.n	80080aa <BSP_TS_Get_GestureId+0xee>
 8007ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff8 <BSP_TS_Get_GestureId+0x3c>)
 8007ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff6:	bf00      	nop
 8007ff8:	08008073 	.word	0x08008073
 8007ffc:	080080ab 	.word	0x080080ab
 8008000:	080080ab 	.word	0x080080ab
 8008004:	080080ab 	.word	0x080080ab
 8008008:	080080ab 	.word	0x080080ab
 800800c:	080080ab 	.word	0x080080ab
 8008010:	080080ab 	.word	0x080080ab
 8008014:	080080ab 	.word	0x080080ab
 8008018:	080080ab 	.word	0x080080ab
 800801c:	080080ab 	.word	0x080080ab
 8008020:	080080ab 	.word	0x080080ab
 8008024:	080080ab 	.word	0x080080ab
 8008028:	080080ab 	.word	0x080080ab
 800802c:	080080ab 	.word	0x080080ab
 8008030:	080080ab 	.word	0x080080ab
 8008034:	080080ab 	.word	0x080080ab
 8008038:	0800807b 	.word	0x0800807b
 800803c:	080080ab 	.word	0x080080ab
 8008040:	080080ab 	.word	0x080080ab
 8008044:	080080ab 	.word	0x080080ab
 8008048:	08008083 	.word	0x08008083
 800804c:	080080ab 	.word	0x080080ab
 8008050:	080080ab 	.word	0x080080ab
 8008054:	080080ab 	.word	0x080080ab
 8008058:	0800808b 	.word	0x0800808b
 800805c:	080080ab 	.word	0x080080ab
 8008060:	080080ab 	.word	0x080080ab
 8008064:	080080ab 	.word	0x080080ab
 8008068:	08008093 	.word	0x08008093
 800806c:	2b40      	cmp	r3, #64	@ 0x40
 800806e:	d014      	beq.n	800809a <BSP_TS_Get_GestureId+0xde>
 8008070:	e01b      	b.n	80080aa <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8008078:	e01a      	b.n	80080b0 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8008080:	e016      	b.n	80080b0 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2202      	movs	r2, #2
 8008086:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8008088:	e012      	b.n	80080b0 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2203      	movs	r2, #3
 800808e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8008090:	e00e      	b.n	80080b0 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2204      	movs	r2, #4
 8008096:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8008098:	e00a      	b.n	80080b0 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2205      	movs	r2, #5
 800809e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80080a0:	e006      	b.n	80080b0 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2206      	movs	r2, #6
 80080a6:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80080a8:	e002      	b.n	80080b0 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	73fb      	strb	r3, [r7, #15]
      break;
 80080ae:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	20001025 	.word	0x20001025

080080c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80080c6:	4b11      	ldr	r3, [pc, #68]	@ (800810c <HAL_MspInit+0x4c>)
 80080c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ca:	4a10      	ldr	r2, [pc, #64]	@ (800810c <HAL_MspInit+0x4c>)
 80080cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80080d2:	4b0e      	ldr	r3, [pc, #56]	@ (800810c <HAL_MspInit+0x4c>)
 80080d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080da:	607b      	str	r3, [r7, #4]
 80080dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080de:	4b0b      	ldr	r3, [pc, #44]	@ (800810c <HAL_MspInit+0x4c>)
 80080e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080e2:	4a0a      	ldr	r2, [pc, #40]	@ (800810c <HAL_MspInit+0x4c>)
 80080e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80080e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80080ea:	4b08      	ldr	r3, [pc, #32]	@ (800810c <HAL_MspInit+0x4c>)
 80080ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080f2:	603b      	str	r3, [r7, #0]
 80080f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80080f6:	2200      	movs	r2, #0
 80080f8:	210f      	movs	r1, #15
 80080fa:	f06f 0001 	mvn.w	r0, #1
 80080fe:	f003 f811 	bl	800b124 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008102:	bf00      	nop
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	40023800 	.word	0x40023800

08008110 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b08c      	sub	sp, #48	@ 0x30
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008118:	f107 031c 	add.w	r3, r7, #28
 800811c:	2200      	movs	r2, #0
 800811e:	601a      	str	r2, [r3, #0]
 8008120:	605a      	str	r2, [r3, #4]
 8008122:	609a      	str	r2, [r3, #8]
 8008124:	60da      	str	r2, [r3, #12]
 8008126:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a36      	ldr	r2, [pc, #216]	@ (8008208 <HAL_ADC_MspInit+0xf8>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d124      	bne.n	800817c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008132:	4b36      	ldr	r3, [pc, #216]	@ (800820c <HAL_ADC_MspInit+0xfc>)
 8008134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008136:	4a35      	ldr	r2, [pc, #212]	@ (800820c <HAL_ADC_MspInit+0xfc>)
 8008138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800813c:	6453      	str	r3, [r2, #68]	@ 0x44
 800813e:	4b33      	ldr	r3, [pc, #204]	@ (800820c <HAL_ADC_MspInit+0xfc>)
 8008140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008146:	61bb      	str	r3, [r7, #24]
 8008148:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800814a:	4b30      	ldr	r3, [pc, #192]	@ (800820c <HAL_ADC_MspInit+0xfc>)
 800814c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800814e:	4a2f      	ldr	r2, [pc, #188]	@ (800820c <HAL_ADC_MspInit+0xfc>)
 8008150:	f043 0301 	orr.w	r3, r3, #1
 8008154:	6313      	str	r3, [r2, #48]	@ 0x30
 8008156:	4b2d      	ldr	r3, [pc, #180]	@ (800820c <HAL_ADC_MspInit+0xfc>)
 8008158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	617b      	str	r3, [r7, #20]
 8008160:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008162:	2301      	movs	r3, #1
 8008164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008166:	2303      	movs	r3, #3
 8008168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800816a:	2300      	movs	r3, #0
 800816c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800816e:	f107 031c 	add.w	r3, r7, #28
 8008172:	4619      	mov	r1, r3
 8008174:	4826      	ldr	r0, [pc, #152]	@ (8008210 <HAL_ADC_MspInit+0x100>)
 8008176:	f003 fe8f 	bl	800be98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800817a:	e041      	b.n	8008200 <HAL_ADC_MspInit+0xf0>
  else if(hadc->Instance==ADC3)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a24      	ldr	r2, [pc, #144]	@ (8008214 <HAL_ADC_MspInit+0x104>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d13c      	bne.n	8008200 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8008186:	4b21      	ldr	r3, [pc, #132]	@ (800820c <HAL_ADC_MspInit+0xfc>)
 8008188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800818a:	4a20      	ldr	r2, [pc, #128]	@ (800820c <HAL_ADC_MspInit+0xfc>)
 800818c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008190:	6453      	str	r3, [r2, #68]	@ 0x44
 8008192:	4b1e      	ldr	r3, [pc, #120]	@ (800820c <HAL_ADC_MspInit+0xfc>)
 8008194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800819a:	613b      	str	r3, [r7, #16]
 800819c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800819e:	4b1b      	ldr	r3, [pc, #108]	@ (800820c <HAL_ADC_MspInit+0xfc>)
 80081a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081a2:	4a1a      	ldr	r2, [pc, #104]	@ (800820c <HAL_ADC_MspInit+0xfc>)
 80081a4:	f043 0320 	orr.w	r3, r3, #32
 80081a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80081aa:	4b18      	ldr	r3, [pc, #96]	@ (800820c <HAL_ADC_MspInit+0xfc>)
 80081ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ae:	f003 0320 	and.w	r3, r3, #32
 80081b2:	60fb      	str	r3, [r7, #12]
 80081b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081b6:	4b15      	ldr	r3, [pc, #84]	@ (800820c <HAL_ADC_MspInit+0xfc>)
 80081b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ba:	4a14      	ldr	r2, [pc, #80]	@ (800820c <HAL_ADC_MspInit+0xfc>)
 80081bc:	f043 0301 	orr.w	r3, r3, #1
 80081c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80081c2:	4b12      	ldr	r3, [pc, #72]	@ (800820c <HAL_ADC_MspInit+0xfc>)
 80081c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081c6:	f003 0301 	and.w	r3, r3, #1
 80081ca:	60bb      	str	r3, [r7, #8]
 80081cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80081ce:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 80081d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80081d4:	2303      	movs	r3, #3
 80081d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081d8:	2300      	movs	r3, #0
 80081da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80081dc:	f107 031c 	add.w	r3, r7, #28
 80081e0:	4619      	mov	r1, r3
 80081e2:	480d      	ldr	r0, [pc, #52]	@ (8008218 <HAL_ADC_MspInit+0x108>)
 80081e4:	f003 fe58 	bl	800be98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80081e8:	2301      	movs	r3, #1
 80081ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80081ec:	2303      	movs	r3, #3
 80081ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081f0:	2300      	movs	r3, #0
 80081f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081f4:	f107 031c 	add.w	r3, r7, #28
 80081f8:	4619      	mov	r1, r3
 80081fa:	4805      	ldr	r0, [pc, #20]	@ (8008210 <HAL_ADC_MspInit+0x100>)
 80081fc:	f003 fe4c 	bl	800be98 <HAL_GPIO_Init>
}
 8008200:	bf00      	nop
 8008202:	3730      	adds	r7, #48	@ 0x30
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	40012000 	.word	0x40012000
 800820c:	40023800 	.word	0x40023800
 8008210:	40020000 	.word	0x40020000
 8008214:	40012200 	.word	0x40012200
 8008218:	40021400 	.word	0x40021400

0800821c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a0a      	ldr	r2, [pc, #40]	@ (8008254 <HAL_DMA2D_MspInit+0x38>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d10b      	bne.n	8008246 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800822e:	4b0a      	ldr	r3, [pc, #40]	@ (8008258 <HAL_DMA2D_MspInit+0x3c>)
 8008230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008232:	4a09      	ldr	r2, [pc, #36]	@ (8008258 <HAL_DMA2D_MspInit+0x3c>)
 8008234:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008238:	6313      	str	r3, [r2, #48]	@ 0x30
 800823a:	4b07      	ldr	r3, [pc, #28]	@ (8008258 <HAL_DMA2D_MspInit+0x3c>)
 800823c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800823e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8008246:	bf00      	nop
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	4002b000 	.word	0x4002b000
 8008258:	40023800 	.word	0x40023800

0800825c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b08e      	sub	sp, #56	@ 0x38
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008264:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008268:	2200      	movs	r2, #0
 800826a:	601a      	str	r2, [r3, #0]
 800826c:	605a      	str	r2, [r3, #4]
 800826e:	609a      	str	r2, [r3, #8]
 8008270:	60da      	str	r2, [r3, #12]
 8008272:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a55      	ldr	r2, [pc, #340]	@ (80083d0 <HAL_LTDC_MspInit+0x174>)
 800827a:	4293      	cmp	r3, r2
 800827c:	f040 80a3 	bne.w	80083c6 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8008280:	4b54      	ldr	r3, [pc, #336]	@ (80083d4 <HAL_LTDC_MspInit+0x178>)
 8008282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008284:	4a53      	ldr	r2, [pc, #332]	@ (80083d4 <HAL_LTDC_MspInit+0x178>)
 8008286:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800828a:	6453      	str	r3, [r2, #68]	@ 0x44
 800828c:	4b51      	ldr	r3, [pc, #324]	@ (80083d4 <HAL_LTDC_MspInit+0x178>)
 800828e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008290:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008294:	623b      	str	r3, [r7, #32]
 8008296:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008298:	4b4e      	ldr	r3, [pc, #312]	@ (80083d4 <HAL_LTDC_MspInit+0x178>)
 800829a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800829c:	4a4d      	ldr	r2, [pc, #308]	@ (80083d4 <HAL_LTDC_MspInit+0x178>)
 800829e:	f043 0310 	orr.w	r3, r3, #16
 80082a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80082a4:	4b4b      	ldr	r3, [pc, #300]	@ (80083d4 <HAL_LTDC_MspInit+0x178>)
 80082a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082a8:	f003 0310 	and.w	r3, r3, #16
 80082ac:	61fb      	str	r3, [r7, #28]
 80082ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80082b0:	4b48      	ldr	r3, [pc, #288]	@ (80083d4 <HAL_LTDC_MspInit+0x178>)
 80082b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082b4:	4a47      	ldr	r2, [pc, #284]	@ (80083d4 <HAL_LTDC_MspInit+0x178>)
 80082b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80082ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80082bc:	4b45      	ldr	r3, [pc, #276]	@ (80083d4 <HAL_LTDC_MspInit+0x178>)
 80082be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082c4:	61bb      	str	r3, [r7, #24]
 80082c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80082c8:	4b42      	ldr	r3, [pc, #264]	@ (80083d4 <HAL_LTDC_MspInit+0x178>)
 80082ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082cc:	4a41      	ldr	r2, [pc, #260]	@ (80083d4 <HAL_LTDC_MspInit+0x178>)
 80082ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80082d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80082d4:	4b3f      	ldr	r3, [pc, #252]	@ (80083d4 <HAL_LTDC_MspInit+0x178>)
 80082d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082dc:	617b      	str	r3, [r7, #20]
 80082de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80082e0:	4b3c      	ldr	r3, [pc, #240]	@ (80083d4 <HAL_LTDC_MspInit+0x178>)
 80082e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082e4:	4a3b      	ldr	r2, [pc, #236]	@ (80083d4 <HAL_LTDC_MspInit+0x178>)
 80082e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80082ec:	4b39      	ldr	r3, [pc, #228]	@ (80083d4 <HAL_LTDC_MspInit+0x178>)
 80082ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082f4:	613b      	str	r3, [r7, #16]
 80082f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80082f8:	4b36      	ldr	r3, [pc, #216]	@ (80083d4 <HAL_LTDC_MspInit+0x178>)
 80082fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082fc:	4a35      	ldr	r2, [pc, #212]	@ (80083d4 <HAL_LTDC_MspInit+0x178>)
 80082fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008302:	6313      	str	r3, [r2, #48]	@ 0x30
 8008304:	4b33      	ldr	r3, [pc, #204]	@ (80083d4 <HAL_LTDC_MspInit+0x178>)
 8008306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800830c:	60fb      	str	r3, [r7, #12]
 800830e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8008310:	2310      	movs	r3, #16
 8008312:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008314:	2302      	movs	r3, #2
 8008316:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008318:	2300      	movs	r3, #0
 800831a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800831c:	2300      	movs	r3, #0
 800831e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008320:	230e      	movs	r3, #14
 8008322:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8008324:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008328:	4619      	mov	r1, r3
 800832a:	482b      	ldr	r0, [pc, #172]	@ (80083d8 <HAL_LTDC_MspInit+0x17c>)
 800832c:	f003 fdb4 	bl	800be98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8008330:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8008334:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008336:	2302      	movs	r3, #2
 8008338:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800833a:	2300      	movs	r3, #0
 800833c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800833e:	2300      	movs	r3, #0
 8008340:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008342:	230e      	movs	r3, #14
 8008344:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8008346:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800834a:	4619      	mov	r1, r3
 800834c:	4823      	ldr	r0, [pc, #140]	@ (80083dc <HAL_LTDC_MspInit+0x180>)
 800834e:	f003 fda3 	bl	800be98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8008352:	23f7      	movs	r3, #247	@ 0xf7
 8008354:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008356:	2302      	movs	r3, #2
 8008358:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800835a:	2300      	movs	r3, #0
 800835c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800835e:	2300      	movs	r3, #0
 8008360:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008362:	230e      	movs	r3, #14
 8008364:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8008366:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800836a:	4619      	mov	r1, r3
 800836c:	481c      	ldr	r0, [pc, #112]	@ (80083e0 <HAL_LTDC_MspInit+0x184>)
 800836e:	f003 fd93 	bl	800be98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8008372:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008376:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008378:	2302      	movs	r3, #2
 800837a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800837c:	2300      	movs	r3, #0
 800837e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008380:	2300      	movs	r3, #0
 8008382:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8008384:	2309      	movs	r3, #9
 8008386:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8008388:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800838c:	4619      	mov	r1, r3
 800838e:	4815      	ldr	r0, [pc, #84]	@ (80083e4 <HAL_LTDC_MspInit+0x188>)
 8008390:	f003 fd82 	bl	800be98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8008394:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8008398:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800839a:	2302      	movs	r3, #2
 800839c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800839e:	2300      	movs	r3, #0
 80083a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083a2:	2300      	movs	r3, #0
 80083a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80083a6:	230e      	movs	r3, #14
 80083a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80083aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083ae:	4619      	mov	r1, r3
 80083b0:	480d      	ldr	r0, [pc, #52]	@ (80083e8 <HAL_LTDC_MspInit+0x18c>)
 80083b2:	f003 fd71 	bl	800be98 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80083b6:	2200      	movs	r2, #0
 80083b8:	2105      	movs	r1, #5
 80083ba:	2058      	movs	r0, #88	@ 0x58
 80083bc:	f002 feb2 	bl	800b124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80083c0:	2058      	movs	r0, #88	@ 0x58
 80083c2:	f002 fecb 	bl	800b15c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80083c6:	bf00      	nop
 80083c8:	3738      	adds	r7, #56	@ 0x38
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	40016800 	.word	0x40016800
 80083d4:	40023800 	.word	0x40023800
 80083d8:	40021000 	.word	0x40021000
 80083dc:	40022400 	.word	0x40022400
 80083e0:	40022800 	.word	0x40022800
 80083e4:	40021800 	.word	0x40021800
 80083e8:	40022000 	.word	0x40022000

080083ec <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b08a      	sub	sp, #40	@ 0x28
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083f4:	f107 0314 	add.w	r3, r7, #20
 80083f8:	2200      	movs	r2, #0
 80083fa:	601a      	str	r2, [r3, #0]
 80083fc:	605a      	str	r2, [r3, #4]
 80083fe:	609a      	str	r2, [r3, #8]
 8008400:	60da      	str	r2, [r3, #12]
 8008402:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a65      	ldr	r2, [pc, #404]	@ (80085a0 <HAL_SD_MspInit+0x1b4>)
 800840a:	4293      	cmp	r3, r2
 800840c:	f040 80c3 	bne.w	8008596 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8008410:	4b64      	ldr	r3, [pc, #400]	@ (80085a4 <HAL_SD_MspInit+0x1b8>)
 8008412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008414:	4a63      	ldr	r2, [pc, #396]	@ (80085a4 <HAL_SD_MspInit+0x1b8>)
 8008416:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800841a:	6453      	str	r3, [r2, #68]	@ 0x44
 800841c:	4b61      	ldr	r3, [pc, #388]	@ (80085a4 <HAL_SD_MspInit+0x1b8>)
 800841e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008420:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008424:	613b      	str	r3, [r7, #16]
 8008426:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008428:	4b5e      	ldr	r3, [pc, #376]	@ (80085a4 <HAL_SD_MspInit+0x1b8>)
 800842a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800842c:	4a5d      	ldr	r2, [pc, #372]	@ (80085a4 <HAL_SD_MspInit+0x1b8>)
 800842e:	f043 0304 	orr.w	r3, r3, #4
 8008432:	6313      	str	r3, [r2, #48]	@ 0x30
 8008434:	4b5b      	ldr	r3, [pc, #364]	@ (80085a4 <HAL_SD_MspInit+0x1b8>)
 8008436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008438:	f003 0304 	and.w	r3, r3, #4
 800843c:	60fb      	str	r3, [r7, #12]
 800843e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008440:	4b58      	ldr	r3, [pc, #352]	@ (80085a4 <HAL_SD_MspInit+0x1b8>)
 8008442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008444:	4a57      	ldr	r2, [pc, #348]	@ (80085a4 <HAL_SD_MspInit+0x1b8>)
 8008446:	f043 0308 	orr.w	r3, r3, #8
 800844a:	6313      	str	r3, [r2, #48]	@ 0x30
 800844c:	4b55      	ldr	r3, [pc, #340]	@ (80085a4 <HAL_SD_MspInit+0x1b8>)
 800844e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008450:	f003 0308 	and.w	r3, r3, #8
 8008454:	60bb      	str	r3, [r7, #8]
 8008456:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8008458:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800845c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800845e:	2302      	movs	r3, #2
 8008460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008462:	2300      	movs	r3, #0
 8008464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008466:	2303      	movs	r3, #3
 8008468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800846a:	230c      	movs	r3, #12
 800846c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800846e:	f107 0314 	add.w	r3, r7, #20
 8008472:	4619      	mov	r1, r3
 8008474:	484c      	ldr	r0, [pc, #304]	@ (80085a8 <HAL_SD_MspInit+0x1bc>)
 8008476:	f003 fd0f 	bl	800be98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 800847a:	2304      	movs	r3, #4
 800847c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800847e:	2302      	movs	r3, #2
 8008480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008482:	2300      	movs	r3, #0
 8008484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008486:	2303      	movs	r3, #3
 8008488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800848a:	230c      	movs	r3, #12
 800848c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 800848e:	f107 0314 	add.w	r3, r7, #20
 8008492:	4619      	mov	r1, r3
 8008494:	4845      	ldr	r0, [pc, #276]	@ (80085ac <HAL_SD_MspInit+0x1c0>)
 8008496:	f003 fcff 	bl	800be98 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800849a:	4b45      	ldr	r3, [pc, #276]	@ (80085b0 <HAL_SD_MspInit+0x1c4>)
 800849c:	4a45      	ldr	r2, [pc, #276]	@ (80085b4 <HAL_SD_MspInit+0x1c8>)
 800849e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80084a0:	4b43      	ldr	r3, [pc, #268]	@ (80085b0 <HAL_SD_MspInit+0x1c4>)
 80084a2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80084a6:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80084a8:	4b41      	ldr	r3, [pc, #260]	@ (80085b0 <HAL_SD_MspInit+0x1c4>)
 80084aa:	2200      	movs	r2, #0
 80084ac:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80084ae:	4b40      	ldr	r3, [pc, #256]	@ (80085b0 <HAL_SD_MspInit+0x1c4>)
 80084b0:	2200      	movs	r2, #0
 80084b2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80084b4:	4b3e      	ldr	r3, [pc, #248]	@ (80085b0 <HAL_SD_MspInit+0x1c4>)
 80084b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80084ba:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80084bc:	4b3c      	ldr	r3, [pc, #240]	@ (80085b0 <HAL_SD_MspInit+0x1c4>)
 80084be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80084c2:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80084c4:	4b3a      	ldr	r3, [pc, #232]	@ (80085b0 <HAL_SD_MspInit+0x1c4>)
 80084c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80084ca:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80084cc:	4b38      	ldr	r3, [pc, #224]	@ (80085b0 <HAL_SD_MspInit+0x1c4>)
 80084ce:	2220      	movs	r2, #32
 80084d0:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80084d2:	4b37      	ldr	r3, [pc, #220]	@ (80085b0 <HAL_SD_MspInit+0x1c4>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80084d8:	4b35      	ldr	r3, [pc, #212]	@ (80085b0 <HAL_SD_MspInit+0x1c4>)
 80084da:	2204      	movs	r2, #4
 80084dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80084de:	4b34      	ldr	r3, [pc, #208]	@ (80085b0 <HAL_SD_MspInit+0x1c4>)
 80084e0:	2203      	movs	r2, #3
 80084e2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80084e4:	4b32      	ldr	r3, [pc, #200]	@ (80085b0 <HAL_SD_MspInit+0x1c4>)
 80084e6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80084ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80084ec:	4b30      	ldr	r3, [pc, #192]	@ (80085b0 <HAL_SD_MspInit+0x1c4>)
 80084ee:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80084f2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80084f4:	482e      	ldr	r0, [pc, #184]	@ (80085b0 <HAL_SD_MspInit+0x1c4>)
 80084f6:	f002 fe3f 	bl	800b178 <HAL_DMA_Init>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d001      	beq.n	8008504 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8008500:	f7fd fcd0 	bl	8005ea4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a2a      	ldr	r2, [pc, #168]	@ (80085b0 <HAL_SD_MspInit+0x1c4>)
 8008508:	641a      	str	r2, [r3, #64]	@ 0x40
 800850a:	4a29      	ldr	r2, [pc, #164]	@ (80085b0 <HAL_SD_MspInit+0x1c4>)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8008510:	4b29      	ldr	r3, [pc, #164]	@ (80085b8 <HAL_SD_MspInit+0x1cc>)
 8008512:	4a2a      	ldr	r2, [pc, #168]	@ (80085bc <HAL_SD_MspInit+0x1d0>)
 8008514:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8008516:	4b28      	ldr	r3, [pc, #160]	@ (80085b8 <HAL_SD_MspInit+0x1cc>)
 8008518:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800851c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800851e:	4b26      	ldr	r3, [pc, #152]	@ (80085b8 <HAL_SD_MspInit+0x1cc>)
 8008520:	2240      	movs	r2, #64	@ 0x40
 8008522:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008524:	4b24      	ldr	r3, [pc, #144]	@ (80085b8 <HAL_SD_MspInit+0x1cc>)
 8008526:	2200      	movs	r2, #0
 8008528:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800852a:	4b23      	ldr	r3, [pc, #140]	@ (80085b8 <HAL_SD_MspInit+0x1cc>)
 800852c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008530:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008532:	4b21      	ldr	r3, [pc, #132]	@ (80085b8 <HAL_SD_MspInit+0x1cc>)
 8008534:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008538:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800853a:	4b1f      	ldr	r3, [pc, #124]	@ (80085b8 <HAL_SD_MspInit+0x1cc>)
 800853c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008540:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8008542:	4b1d      	ldr	r3, [pc, #116]	@ (80085b8 <HAL_SD_MspInit+0x1cc>)
 8008544:	2220      	movs	r2, #32
 8008546:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008548:	4b1b      	ldr	r3, [pc, #108]	@ (80085b8 <HAL_SD_MspInit+0x1cc>)
 800854a:	2200      	movs	r2, #0
 800854c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800854e:	4b1a      	ldr	r3, [pc, #104]	@ (80085b8 <HAL_SD_MspInit+0x1cc>)
 8008550:	2204      	movs	r2, #4
 8008552:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8008554:	4b18      	ldr	r3, [pc, #96]	@ (80085b8 <HAL_SD_MspInit+0x1cc>)
 8008556:	2203      	movs	r2, #3
 8008558:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800855a:	4b17      	ldr	r3, [pc, #92]	@ (80085b8 <HAL_SD_MspInit+0x1cc>)
 800855c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8008560:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8008562:	4b15      	ldr	r3, [pc, #84]	@ (80085b8 <HAL_SD_MspInit+0x1cc>)
 8008564:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8008568:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800856a:	4813      	ldr	r0, [pc, #76]	@ (80085b8 <HAL_SD_MspInit+0x1cc>)
 800856c:	f002 fe04 	bl	800b178 <HAL_DMA_Init>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d001      	beq.n	800857a <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 8008576:	f7fd fc95 	bl	8005ea4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a0e      	ldr	r2, [pc, #56]	@ (80085b8 <HAL_SD_MspInit+0x1cc>)
 800857e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008580:	4a0d      	ldr	r2, [pc, #52]	@ (80085b8 <HAL_SD_MspInit+0x1cc>)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8008586:	2200      	movs	r2, #0
 8008588:	2105      	movs	r1, #5
 800858a:	2031      	movs	r0, #49	@ 0x31
 800858c:	f002 fdca 	bl	800b124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8008590:	2031      	movs	r0, #49	@ 0x31
 8008592:	f002 fde3 	bl	800b15c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8008596:	bf00      	nop
 8008598:	3728      	adds	r7, #40	@ 0x28
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	40012c00 	.word	0x40012c00
 80085a4:	40023800 	.word	0x40023800
 80085a8:	40020800 	.word	0x40020800
 80085ac:	40020c00 	.word	0x40020c00
 80085b0:	200007ac 	.word	0x200007ac
 80085b4:	40026458 	.word	0x40026458
 80085b8:	2000080c 	.word	0x2000080c
 80085bc:	400264a0 	.word	0x400264a0

080085c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b0ac      	sub	sp, #176	@ 0xb0
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80085cc:	2200      	movs	r2, #0
 80085ce:	601a      	str	r2, [r3, #0]
 80085d0:	605a      	str	r2, [r3, #4]
 80085d2:	609a      	str	r2, [r3, #8]
 80085d4:	60da      	str	r2, [r3, #12]
 80085d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80085d8:	f107 0318 	add.w	r3, r7, #24
 80085dc:	2284      	movs	r2, #132	@ 0x84
 80085de:	2100      	movs	r1, #0
 80085e0:	4618      	mov	r0, r3
 80085e2:	f00d fd98 	bl	8016116 <memset>
  if(huart->Instance==USART1)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a32      	ldr	r2, [pc, #200]	@ (80086b4 <HAL_UART_MspInit+0xf4>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d15c      	bne.n	80086aa <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80085f0:	2340      	movs	r3, #64	@ 0x40
 80085f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80085f4:	2300      	movs	r3, #0
 80085f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80085f8:	f107 0318 	add.w	r3, r7, #24
 80085fc:	4618      	mov	r0, r3
 80085fe:	f005 fd73 	bl	800e0e8 <HAL_RCCEx_PeriphCLKConfig>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d001      	beq.n	800860c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8008608:	f7fd fc4c 	bl	8005ea4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800860c:	4b2a      	ldr	r3, [pc, #168]	@ (80086b8 <HAL_UART_MspInit+0xf8>)
 800860e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008610:	4a29      	ldr	r2, [pc, #164]	@ (80086b8 <HAL_UART_MspInit+0xf8>)
 8008612:	f043 0310 	orr.w	r3, r3, #16
 8008616:	6453      	str	r3, [r2, #68]	@ 0x44
 8008618:	4b27      	ldr	r3, [pc, #156]	@ (80086b8 <HAL_UART_MspInit+0xf8>)
 800861a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800861c:	f003 0310 	and.w	r3, r3, #16
 8008620:	617b      	str	r3, [r7, #20]
 8008622:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008624:	4b24      	ldr	r3, [pc, #144]	@ (80086b8 <HAL_UART_MspInit+0xf8>)
 8008626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008628:	4a23      	ldr	r2, [pc, #140]	@ (80086b8 <HAL_UART_MspInit+0xf8>)
 800862a:	f043 0302 	orr.w	r3, r3, #2
 800862e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008630:	4b21      	ldr	r3, [pc, #132]	@ (80086b8 <HAL_UART_MspInit+0xf8>)
 8008632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008634:	f003 0302 	and.w	r3, r3, #2
 8008638:	613b      	str	r3, [r7, #16]
 800863a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800863c:	4b1e      	ldr	r3, [pc, #120]	@ (80086b8 <HAL_UART_MspInit+0xf8>)
 800863e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008640:	4a1d      	ldr	r2, [pc, #116]	@ (80086b8 <HAL_UART_MspInit+0xf8>)
 8008642:	f043 0301 	orr.w	r3, r3, #1
 8008646:	6313      	str	r3, [r2, #48]	@ 0x30
 8008648:	4b1b      	ldr	r3, [pc, #108]	@ (80086b8 <HAL_UART_MspInit+0xf8>)
 800864a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800864c:	f003 0301 	and.w	r3, r3, #1
 8008650:	60fb      	str	r3, [r7, #12]
 8008652:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8008654:	2380      	movs	r3, #128	@ 0x80
 8008656:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800865a:	2302      	movs	r3, #2
 800865c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008660:	2300      	movs	r3, #0
 8008662:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008666:	2300      	movs	r3, #0
 8008668:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800866c:	2307      	movs	r3, #7
 800866e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8008672:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8008676:	4619      	mov	r1, r3
 8008678:	4810      	ldr	r0, [pc, #64]	@ (80086bc <HAL_UART_MspInit+0xfc>)
 800867a:	f003 fc0d 	bl	800be98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800867e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008682:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008686:	2302      	movs	r3, #2
 8008688:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800868c:	2300      	movs	r3, #0
 800868e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008692:	2300      	movs	r3, #0
 8008694:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008698:	2307      	movs	r3, #7
 800869a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800869e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80086a2:	4619      	mov	r1, r3
 80086a4:	4806      	ldr	r0, [pc, #24]	@ (80086c0 <HAL_UART_MspInit+0x100>)
 80086a6:	f003 fbf7 	bl	800be98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80086aa:	bf00      	nop
 80086ac:	37b0      	adds	r7, #176	@ 0xb0
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	40011000 	.word	0x40011000
 80086b8:	40023800 	.word	0x40023800
 80086bc:	40020400 	.word	0x40020400
 80086c0:	40020000 	.word	0x40020000

080086c4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b086      	sub	sp, #24
 80086c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80086ca:	1d3b      	adds	r3, r7, #4
 80086cc:	2200      	movs	r2, #0
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	605a      	str	r2, [r3, #4]
 80086d2:	609a      	str	r2, [r3, #8]
 80086d4:	60da      	str	r2, [r3, #12]
 80086d6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80086d8:	4b42      	ldr	r3, [pc, #264]	@ (80087e4 <HAL_FMC_MspInit+0x120>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d17c      	bne.n	80087da <HAL_FMC_MspInit+0x116>
    return;
  }
  FMC_Initialized = 1;
 80086e0:	4b40      	ldr	r3, [pc, #256]	@ (80087e4 <HAL_FMC_MspInit+0x120>)
 80086e2:	2201      	movs	r2, #1
 80086e4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80086e6:	4b40      	ldr	r3, [pc, #256]	@ (80087e8 <HAL_FMC_MspInit+0x124>)
 80086e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ea:	4a3f      	ldr	r2, [pc, #252]	@ (80087e8 <HAL_FMC_MspInit+0x124>)
 80086ec:	f043 0301 	orr.w	r3, r3, #1
 80086f0:	6393      	str	r3, [r2, #56]	@ 0x38
 80086f2:	4b3d      	ldr	r3, [pc, #244]	@ (80087e8 <HAL_FMC_MspInit+0x124>)
 80086f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	603b      	str	r3, [r7, #0]
 80086fc:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80086fe:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8008702:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008704:	2302      	movs	r3, #2
 8008706:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008708:	2300      	movs	r3, #0
 800870a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800870c:	2303      	movs	r3, #3
 800870e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008710:	230c      	movs	r3, #12
 8008712:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008714:	1d3b      	adds	r3, r7, #4
 8008716:	4619      	mov	r1, r3
 8008718:	4834      	ldr	r0, [pc, #208]	@ (80087ec <HAL_FMC_MspInit+0x128>)
 800871a:	f003 fbbd 	bl	800be98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800871e:	2360      	movs	r3, #96	@ 0x60
 8008720:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008722:	2302      	movs	r3, #2
 8008724:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008726:	2300      	movs	r3, #0
 8008728:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800872a:	2303      	movs	r3, #3
 800872c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800872e:	230c      	movs	r3, #12
 8008730:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008732:	1d3b      	adds	r3, r7, #4
 8008734:	4619      	mov	r1, r3
 8008736:	482e      	ldr	r0, [pc, #184]	@ (80087f0 <HAL_FMC_MspInit+0x12c>)
 8008738:	f003 fbae 	bl	800be98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800873c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8008740:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008742:	2302      	movs	r3, #2
 8008744:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008746:	2300      	movs	r3, #0
 8008748:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800874a:	2303      	movs	r3, #3
 800874c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800874e:	230c      	movs	r3, #12
 8008750:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008752:	1d3b      	adds	r3, r7, #4
 8008754:	4619      	mov	r1, r3
 8008756:	4827      	ldr	r0, [pc, #156]	@ (80087f4 <HAL_FMC_MspInit+0x130>)
 8008758:	f003 fb9e 	bl	800be98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800875c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8008760:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008762:	2302      	movs	r3, #2
 8008764:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008766:	2300      	movs	r3, #0
 8008768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800876a:	2303      	movs	r3, #3
 800876c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800876e:	230c      	movs	r3, #12
 8008770:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008772:	1d3b      	adds	r3, r7, #4
 8008774:	4619      	mov	r1, r3
 8008776:	4820      	ldr	r0, [pc, #128]	@ (80087f8 <HAL_FMC_MspInit+0x134>)
 8008778:	f003 fb8e 	bl	800be98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800877c:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8008780:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008782:	2302      	movs	r3, #2
 8008784:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008786:	2300      	movs	r3, #0
 8008788:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800878a:	2303      	movs	r3, #3
 800878c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800878e:	230c      	movs	r3, #12
 8008790:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008792:	1d3b      	adds	r3, r7, #4
 8008794:	4619      	mov	r1, r3
 8008796:	4819      	ldr	r0, [pc, #100]	@ (80087fc <HAL_FMC_MspInit+0x138>)
 8008798:	f003 fb7e 	bl	800be98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800879c:	2328      	movs	r3, #40	@ 0x28
 800879e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087a0:	2302      	movs	r3, #2
 80087a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087a4:	2300      	movs	r3, #0
 80087a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087a8:	2303      	movs	r3, #3
 80087aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80087ac:	230c      	movs	r3, #12
 80087ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80087b0:	1d3b      	adds	r3, r7, #4
 80087b2:	4619      	mov	r1, r3
 80087b4:	4812      	ldr	r0, [pc, #72]	@ (8008800 <HAL_FMC_MspInit+0x13c>)
 80087b6:	f003 fb6f 	bl	800be98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80087ba:	2308      	movs	r3, #8
 80087bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087be:	2302      	movs	r3, #2
 80087c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087c2:	2300      	movs	r3, #0
 80087c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087c6:	2303      	movs	r3, #3
 80087c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80087ca:	230c      	movs	r3, #12
 80087cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80087ce:	1d3b      	adds	r3, r7, #4
 80087d0:	4619      	mov	r1, r3
 80087d2:	480c      	ldr	r0, [pc, #48]	@ (8008804 <HAL_FMC_MspInit+0x140>)
 80087d4:	f003 fb60 	bl	800be98 <HAL_GPIO_Init>
 80087d8:	e000      	b.n	80087dc <HAL_FMC_MspInit+0x118>
    return;
 80087da:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80087dc:	3718      	adds	r7, #24
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	20001050 	.word	0x20001050
 80087e8:	40023800 	.word	0x40023800
 80087ec:	40021000 	.word	0x40021000
 80087f0:	40020400 	.word	0x40020400
 80087f4:	40021800 	.word	0x40021800
 80087f8:	40020c00 	.word	0x40020c00
 80087fc:	40021400 	.word	0x40021400
 8008800:	40021c00 	.word	0x40021c00
 8008804:	40020800 	.word	0x40020800

08008808 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8008810:	f7ff ff58 	bl	80086c4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8008814:	bf00      	nop
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b08a      	sub	sp, #40	@ 0x28
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a61      	ldr	r2, [pc, #388]	@ (80089b0 <HAL_SAI_MspInit+0x194>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d15b      	bne.n	80088e6 <HAL_SAI_MspInit+0xca>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800882e:	4b61      	ldr	r3, [pc, #388]	@ (80089b4 <HAL_SAI_MspInit+0x198>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d10b      	bne.n	800884e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8008836:	4b60      	ldr	r3, [pc, #384]	@ (80089b8 <HAL_SAI_MspInit+0x19c>)
 8008838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800883a:	4a5f      	ldr	r2, [pc, #380]	@ (80089b8 <HAL_SAI_MspInit+0x19c>)
 800883c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008840:	6453      	str	r3, [r2, #68]	@ 0x44
 8008842:	4b5d      	ldr	r3, [pc, #372]	@ (80089b8 <HAL_SAI_MspInit+0x19c>)
 8008844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008846:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800884a:	613b      	str	r3, [r7, #16]
 800884c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800884e:	4b59      	ldr	r3, [pc, #356]	@ (80089b4 <HAL_SAI_MspInit+0x198>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3301      	adds	r3, #1
 8008854:	4a57      	ldr	r2, [pc, #348]	@ (80089b4 <HAL_SAI_MspInit+0x198>)
 8008856:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8008858:	23f0      	movs	r3, #240	@ 0xf0
 800885a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800885c:	2302      	movs	r3, #2
 800885e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008860:	2300      	movs	r3, #0
 8008862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008864:	2300      	movs	r3, #0
 8008866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8008868:	230a      	movs	r3, #10
 800886a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800886c:	f107 0314 	add.w	r3, r7, #20
 8008870:	4619      	mov	r1, r3
 8008872:	4852      	ldr	r0, [pc, #328]	@ (80089bc <HAL_SAI_MspInit+0x1a0>)
 8008874:	f003 fb10 	bl	800be98 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8008878:	4b51      	ldr	r3, [pc, #324]	@ (80089c0 <HAL_SAI_MspInit+0x1a4>)
 800887a:	4a52      	ldr	r2, [pc, #328]	@ (80089c4 <HAL_SAI_MspInit+0x1a8>)
 800887c:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 800887e:	4b50      	ldr	r3, [pc, #320]	@ (80089c0 <HAL_SAI_MspInit+0x1a4>)
 8008880:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8008884:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008886:	4b4e      	ldr	r3, [pc, #312]	@ (80089c0 <HAL_SAI_MspInit+0x1a4>)
 8008888:	2240      	movs	r2, #64	@ 0x40
 800888a:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800888c:	4b4c      	ldr	r3, [pc, #304]	@ (80089c0 <HAL_SAI_MspInit+0x1a4>)
 800888e:	2200      	movs	r2, #0
 8008890:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8008892:	4b4b      	ldr	r3, [pc, #300]	@ (80089c0 <HAL_SAI_MspInit+0x1a4>)
 8008894:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008898:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800889a:	4b49      	ldr	r3, [pc, #292]	@ (80089c0 <HAL_SAI_MspInit+0x1a4>)
 800889c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80088a0:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80088a2:	4b47      	ldr	r3, [pc, #284]	@ (80089c0 <HAL_SAI_MspInit+0x1a4>)
 80088a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80088a8:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 80088aa:	4b45      	ldr	r3, [pc, #276]	@ (80089c0 <HAL_SAI_MspInit+0x1a4>)
 80088ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80088b0:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 80088b2:	4b43      	ldr	r3, [pc, #268]	@ (80089c0 <HAL_SAI_MspInit+0x1a4>)
 80088b4:	2200      	movs	r2, #0
 80088b6:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80088b8:	4b41      	ldr	r3, [pc, #260]	@ (80089c0 <HAL_SAI_MspInit+0x1a4>)
 80088ba:	2200      	movs	r2, #0
 80088bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 80088be:	4840      	ldr	r0, [pc, #256]	@ (80089c0 <HAL_SAI_MspInit+0x1a4>)
 80088c0:	f002 fc5a 	bl	800b178 <HAL_DMA_Init>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d001      	beq.n	80088ce <HAL_SAI_MspInit+0xb2>
    {
      Error_Handler();
 80088ca:	f7fd faeb 	bl	8005ea4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a3b      	ldr	r2, [pc, #236]	@ (80089c0 <HAL_SAI_MspInit+0x1a4>)
 80088d2:	671a      	str	r2, [r3, #112]	@ 0x70
 80088d4:	4a3a      	ldr	r2, [pc, #232]	@ (80089c0 <HAL_SAI_MspInit+0x1a4>)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4a38      	ldr	r2, [pc, #224]	@ (80089c0 <HAL_SAI_MspInit+0x1a4>)
 80088de:	66da      	str	r2, [r3, #108]	@ 0x6c
 80088e0:	4a37      	ldr	r2, [pc, #220]	@ (80089c0 <HAL_SAI_MspInit+0x1a4>)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6393      	str	r3, [r2, #56]	@ 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a37      	ldr	r2, [pc, #220]	@ (80089c8 <HAL_SAI_MspInit+0x1ac>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d15b      	bne.n	80089a8 <HAL_SAI_MspInit+0x18c>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80088f0:	4b30      	ldr	r3, [pc, #192]	@ (80089b4 <HAL_SAI_MspInit+0x198>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10b      	bne.n	8008910 <HAL_SAI_MspInit+0xf4>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80088f8:	4b2f      	ldr	r3, [pc, #188]	@ (80089b8 <HAL_SAI_MspInit+0x19c>)
 80088fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088fc:	4a2e      	ldr	r2, [pc, #184]	@ (80089b8 <HAL_SAI_MspInit+0x19c>)
 80088fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008902:	6453      	str	r3, [r2, #68]	@ 0x44
 8008904:	4b2c      	ldr	r3, [pc, #176]	@ (80089b8 <HAL_SAI_MspInit+0x19c>)
 8008906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008908:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800890c:	60fb      	str	r3, [r7, #12]
 800890e:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8008910:	4b28      	ldr	r3, [pc, #160]	@ (80089b4 <HAL_SAI_MspInit+0x198>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	3301      	adds	r3, #1
 8008916:	4a27      	ldr	r2, [pc, #156]	@ (80089b4 <HAL_SAI_MspInit+0x198>)
 8008918:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800891a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800891e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008920:	2302      	movs	r3, #2
 8008922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008924:	2300      	movs	r3, #0
 8008926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008928:	2300      	movs	r3, #0
 800892a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800892c:	230a      	movs	r3, #10
 800892e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8008930:	f107 0314 	add.w	r3, r7, #20
 8008934:	4619      	mov	r1, r3
 8008936:	4825      	ldr	r0, [pc, #148]	@ (80089cc <HAL_SAI_MspInit+0x1b0>)
 8008938:	f003 faae 	bl	800be98 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 800893c:	4b24      	ldr	r3, [pc, #144]	@ (80089d0 <HAL_SAI_MspInit+0x1b4>)
 800893e:	4a25      	ldr	r2, [pc, #148]	@ (80089d4 <HAL_SAI_MspInit+0x1b8>)
 8008940:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 8008942:	4b23      	ldr	r3, [pc, #140]	@ (80089d0 <HAL_SAI_MspInit+0x1b4>)
 8008944:	2200      	movs	r2, #0
 8008946:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008948:	4b21      	ldr	r3, [pc, #132]	@ (80089d0 <HAL_SAI_MspInit+0x1b4>)
 800894a:	2200      	movs	r2, #0
 800894c:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800894e:	4b20      	ldr	r3, [pc, #128]	@ (80089d0 <HAL_SAI_MspInit+0x1b4>)
 8008950:	2200      	movs	r2, #0
 8008952:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8008954:	4b1e      	ldr	r3, [pc, #120]	@ (80089d0 <HAL_SAI_MspInit+0x1b4>)
 8008956:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800895a:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800895c:	4b1c      	ldr	r3, [pc, #112]	@ (80089d0 <HAL_SAI_MspInit+0x1b4>)
 800895e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008962:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008964:	4b1a      	ldr	r3, [pc, #104]	@ (80089d0 <HAL_SAI_MspInit+0x1b4>)
 8008966:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800896a:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 800896c:	4b18      	ldr	r3, [pc, #96]	@ (80089d0 <HAL_SAI_MspInit+0x1b4>)
 800896e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008972:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8008974:	4b16      	ldr	r3, [pc, #88]	@ (80089d0 <HAL_SAI_MspInit+0x1b4>)
 8008976:	2200      	movs	r2, #0
 8008978:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800897a:	4b15      	ldr	r3, [pc, #84]	@ (80089d0 <HAL_SAI_MspInit+0x1b4>)
 800897c:	2200      	movs	r2, #0
 800897e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8008980:	4813      	ldr	r0, [pc, #76]	@ (80089d0 <HAL_SAI_MspInit+0x1b4>)
 8008982:	f002 fbf9 	bl	800b178 <HAL_DMA_Init>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d001      	beq.n	8008990 <HAL_SAI_MspInit+0x174>
    {
      Error_Handler();
 800898c:	f7fd fa8a 	bl	8005ea4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a0f      	ldr	r2, [pc, #60]	@ (80089d0 <HAL_SAI_MspInit+0x1b4>)
 8008994:	671a      	str	r2, [r3, #112]	@ 0x70
 8008996:	4a0e      	ldr	r2, [pc, #56]	@ (80089d0 <HAL_SAI_MspInit+0x1b4>)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a0c      	ldr	r2, [pc, #48]	@ (80089d0 <HAL_SAI_MspInit+0x1b4>)
 80089a0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80089a2:	4a0b      	ldr	r2, [pc, #44]	@ (80089d0 <HAL_SAI_MspInit+0x1b4>)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 80089a8:	bf00      	nop
 80089aa:	3728      	adds	r7, #40	@ 0x28
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	40015c04 	.word	0x40015c04
 80089b4:	20001054 	.word	0x20001054
 80089b8:	40023800 	.word	0x40023800
 80089bc:	40022000 	.word	0x40022000
 80089c0:	20000668 	.word	0x20000668
 80089c4:	40026470 	.word	0x40026470
 80089c8:	40015c24 	.word	0x40015c24
 80089cc:	40021800 	.word	0x40021800
 80089d0:	200006c8 	.word	0x200006c8
 80089d4:	400264b8 	.word	0x400264b8

080089d8 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a23      	ldr	r2, [pc, #140]	@ (8008a74 <HAL_SAI_MspDeInit+0x9c>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d11c      	bne.n	8008a24 <HAL_SAI_MspDeInit+0x4c>
    {
    SAI2_client --;
 80089ea:	4b23      	ldr	r3, [pc, #140]	@ (8008a78 <HAL_SAI_MspDeInit+0xa0>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	3b01      	subs	r3, #1
 80089f0:	4a21      	ldr	r2, [pc, #132]	@ (8008a78 <HAL_SAI_MspDeInit+0xa0>)
 80089f2:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 80089f4:	4b20      	ldr	r3, [pc, #128]	@ (8008a78 <HAL_SAI_MspDeInit+0xa0>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d105      	bne.n	8008a08 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 80089fc:	4b1f      	ldr	r3, [pc, #124]	@ (8008a7c <HAL_SAI_MspDeInit+0xa4>)
 80089fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a00:	4a1e      	ldr	r2, [pc, #120]	@ (8008a7c <HAL_SAI_MspDeInit+0xa4>)
 8008a02:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008a06:	6453      	str	r3, [r2, #68]	@ 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 8008a08:	21f0      	movs	r1, #240	@ 0xf0
 8008a0a:	481d      	ldr	r0, [pc, #116]	@ (8008a80 <HAL_SAI_MspDeInit+0xa8>)
 8008a0c:	f003 fbf0 	bl	800c1f0 <HAL_GPIO_DeInit>

    /* SAI2 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a14:	4618      	mov	r0, r3
 8008a16:	f002 fc5d 	bl	800b2d4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f002 fc58 	bl	800b2d4 <HAL_DMA_DeInit>
    }
    if(hsai->Instance==SAI2_Block_B)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a16      	ldr	r2, [pc, #88]	@ (8008a84 <HAL_SAI_MspDeInit+0xac>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d11d      	bne.n	8008a6a <HAL_SAI_MspDeInit+0x92>
    {
    SAI2_client --;
 8008a2e:	4b12      	ldr	r3, [pc, #72]	@ (8008a78 <HAL_SAI_MspDeInit+0xa0>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	3b01      	subs	r3, #1
 8008a34:	4a10      	ldr	r2, [pc, #64]	@ (8008a78 <HAL_SAI_MspDeInit+0xa0>)
 8008a36:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 8008a38:	4b0f      	ldr	r3, [pc, #60]	@ (8008a78 <HAL_SAI_MspDeInit+0xa0>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d105      	bne.n	8008a4c <HAL_SAI_MspDeInit+0x74>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 8008a40:	4b0e      	ldr	r3, [pc, #56]	@ (8008a7c <HAL_SAI_MspDeInit+0xa4>)
 8008a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a44:	4a0d      	ldr	r2, [pc, #52]	@ (8008a7c <HAL_SAI_MspDeInit+0xa4>)
 8008a46:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008a4a:	6453      	str	r3, [r2, #68]	@ 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 8008a4c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008a50:	480d      	ldr	r0, [pc, #52]	@ (8008a88 <HAL_SAI_MspDeInit+0xb0>)
 8008a52:	f003 fbcd 	bl	800c1f0 <HAL_GPIO_DeInit>

    /* SAI2 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f002 fc3a 	bl	800b2d4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a64:	4618      	mov	r0, r3
 8008a66:	f002 fc35 	bl	800b2d4 <HAL_DMA_DeInit>
    }
}
 8008a6a:	bf00      	nop
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	40015c04 	.word	0x40015c04
 8008a78:	20001054 	.word	0x20001054
 8008a7c:	40023800 	.word	0x40023800
 8008a80:	40022000 	.word	0x40022000
 8008a84:	40015c24 	.word	0x40015c24
 8008a88:	40021800 	.word	0x40021800

08008a8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b08e      	sub	sp, #56	@ 0x38
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8008a94:	2300      	movs	r3, #0
 8008a96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8008a9c:	4b33      	ldr	r3, [pc, #204]	@ (8008b6c <HAL_InitTick+0xe0>)
 8008a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aa0:	4a32      	ldr	r2, [pc, #200]	@ (8008b6c <HAL_InitTick+0xe0>)
 8008aa2:	f043 0310 	orr.w	r3, r3, #16
 8008aa6:	6413      	str	r3, [r2, #64]	@ 0x40
 8008aa8:	4b30      	ldr	r3, [pc, #192]	@ (8008b6c <HAL_InitTick+0xe0>)
 8008aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aac:	f003 0310 	and.w	r3, r3, #16
 8008ab0:	60fb      	str	r3, [r7, #12]
 8008ab2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008ab4:	f107 0210 	add.w	r2, r7, #16
 8008ab8:	f107 0314 	add.w	r3, r7, #20
 8008abc:	4611      	mov	r1, r2
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f005 fae0 	bl	800e084 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8008ac4:	6a3b      	ldr	r3, [r7, #32]
 8008ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8008ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d103      	bne.n	8008ad6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8008ace:	f005 fab1 	bl	800e034 <HAL_RCC_GetPCLK1Freq>
 8008ad2:	6378      	str	r0, [r7, #52]	@ 0x34
 8008ad4:	e004      	b.n	8008ae0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8008ad6:	f005 faad 	bl	800e034 <HAL_RCC_GetPCLK1Freq>
 8008ada:	4603      	mov	r3, r0
 8008adc:	005b      	lsls	r3, r3, #1
 8008ade:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ae2:	4a23      	ldr	r2, [pc, #140]	@ (8008b70 <HAL_InitTick+0xe4>)
 8008ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ae8:	0c9b      	lsrs	r3, r3, #18
 8008aea:	3b01      	subs	r3, #1
 8008aec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8008aee:	4b21      	ldr	r3, [pc, #132]	@ (8008b74 <HAL_InitTick+0xe8>)
 8008af0:	4a21      	ldr	r2, [pc, #132]	@ (8008b78 <HAL_InitTick+0xec>)
 8008af2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8008af4:	4b1f      	ldr	r3, [pc, #124]	@ (8008b74 <HAL_InitTick+0xe8>)
 8008af6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008afa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8008afc:	4a1d      	ldr	r2, [pc, #116]	@ (8008b74 <HAL_InitTick+0xe8>)
 8008afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b00:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8008b02:	4b1c      	ldr	r3, [pc, #112]	@ (8008b74 <HAL_InitTick+0xe8>)
 8008b04:	2200      	movs	r2, #0
 8008b06:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b08:	4b1a      	ldr	r3, [pc, #104]	@ (8008b74 <HAL_InitTick+0xe8>)
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b0e:	4b19      	ldr	r3, [pc, #100]	@ (8008b74 <HAL_InitTick+0xe8>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8008b14:	4817      	ldr	r0, [pc, #92]	@ (8008b74 <HAL_InitTick+0xe8>)
 8008b16:	f007 fe2e 	bl	8010776 <HAL_TIM_Base_Init>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8008b20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d11b      	bne.n	8008b60 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8008b28:	4812      	ldr	r0, [pc, #72]	@ (8008b74 <HAL_InitTick+0xe8>)
 8008b2a:	f007 fe85 	bl	8010838 <HAL_TIM_Base_Start_IT>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8008b34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d111      	bne.n	8008b60 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008b3c:	2036      	movs	r0, #54	@ 0x36
 8008b3e:	f002 fb0d 	bl	800b15c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2b0f      	cmp	r3, #15
 8008b46:	d808      	bhi.n	8008b5a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8008b48:	2200      	movs	r2, #0
 8008b4a:	6879      	ldr	r1, [r7, #4]
 8008b4c:	2036      	movs	r0, #54	@ 0x36
 8008b4e:	f002 fae9 	bl	800b124 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008b52:	4a0a      	ldr	r2, [pc, #40]	@ (8008b7c <HAL_InitTick+0xf0>)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6013      	str	r3, [r2, #0]
 8008b58:	e002      	b.n	8008b60 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8008b60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3738      	adds	r7, #56	@ 0x38
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	40023800 	.word	0x40023800
 8008b70:	431bde83 	.word	0x431bde83
 8008b74:	20001058 	.word	0x20001058
 8008b78:	40001000 	.word	0x40001000
 8008b7c:	20000094 	.word	0x20000094

08008b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008b80:	b480      	push	{r7}
 8008b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008b84:	bf00      	nop
 8008b86:	e7fd      	b.n	8008b84 <NMI_Handler+0x4>

08008b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008b8c:	bf00      	nop
 8008b8e:	e7fd      	b.n	8008b8c <HardFault_Handler+0x4>

08008b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008b90:	b480      	push	{r7}
 8008b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008b94:	bf00      	nop
 8008b96:	e7fd      	b.n	8008b94 <MemManage_Handler+0x4>

08008b98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008b9c:	bf00      	nop
 8008b9e:	e7fd      	b.n	8008b9c <BusFault_Handler+0x4>

08008ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008ba4:	bf00      	nop
 8008ba6:	e7fd      	b.n	8008ba4 <UsageFault_Handler+0x4>

08008ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008bac:	bf00      	nop
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
	...

08008bb8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8008bbc:	4802      	ldr	r0, [pc, #8]	@ (8008bc8 <SDMMC1_IRQHandler+0x10>)
 8008bbe:	f006 fea1 	bl	800f904 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8008bc2:	bf00      	nop
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	20000728 	.word	0x20000728

08008bcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008bd0:	4802      	ldr	r0, [pc, #8]	@ (8008bdc <TIM6_DAC_IRQHandler+0x10>)
 8008bd2:	f007 fea9 	bl	8010928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8008bd6:	bf00      	nop
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	20001058 	.word	0x20001058

08008be0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8008be4:	4802      	ldr	r0, [pc, #8]	@ (8008bf0 <DMA2_Stream3_IRQHandler+0x10>)
 8008be6:	f002 fc55 	bl	800b494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8008bea:	bf00      	nop
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	200007ac 	.word	0x200007ac

08008bf4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8008bf8:	4802      	ldr	r0, [pc, #8]	@ (8008c04 <DMA2_Stream4_IRQHandler+0x10>)
 8008bfa:	f002 fc4b 	bl	800b494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8008bfe:	bf00      	nop
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	20000668 	.word	0x20000668

08008c08 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8008c0c:	4802      	ldr	r0, [pc, #8]	@ (8008c18 <DMA2_Stream6_IRQHandler+0x10>)
 8008c0e:	f002 fc41 	bl	800b494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8008c12:	bf00      	nop
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	2000080c 	.word	0x2000080c

08008c1c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8008c20:	4802      	ldr	r0, [pc, #8]	@ (8008c2c <DMA2_Stream7_IRQHandler+0x10>)
 8008c22:	f002 fc37 	bl	800b494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8008c26:	bf00      	nop
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	200006c8 	.word	0x200006c8

08008c30 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8008c34:	4802      	ldr	r0, [pc, #8]	@ (8008c40 <LTDC_IRQHandler+0x10>)
 8008c36:	f004 fa93 	bl	800d160 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8008c3a:	bf00      	nop
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	200004b8 	.word	0x200004b8

08008c44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008c44:	b480      	push	{r7}
 8008c46:	af00      	add	r7, sp, #0
	return 1;
 8008c48:	2301      	movs	r3, #1
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <_kill>:

int _kill(int pid, int sig)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008c5e:	f00d fb0f 	bl	8016280 <__errno>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2216      	movs	r2, #22
 8008c66:	601a      	str	r2, [r3, #0]
	return -1;
 8008c68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <_exit>:

void _exit (int status)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f7ff ffe7 	bl	8008c54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008c86:	bf00      	nop
 8008c88:	e7fd      	b.n	8008c86 <_exit+0x12>

08008c8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b086      	sub	sp, #24
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	60f8      	str	r0, [r7, #12]
 8008c92:	60b9      	str	r1, [r7, #8]
 8008c94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c96:	2300      	movs	r3, #0
 8008c98:	617b      	str	r3, [r7, #20]
 8008c9a:	e00a      	b.n	8008cb2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008c9c:	f3af 8000 	nop.w
 8008ca0:	4601      	mov	r1, r0
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	1c5a      	adds	r2, r3, #1
 8008ca6:	60ba      	str	r2, [r7, #8]
 8008ca8:	b2ca      	uxtb	r2, r1
 8008caa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	617b      	str	r3, [r7, #20]
 8008cb2:	697a      	ldr	r2, [r7, #20]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	dbf0      	blt.n	8008c9c <_read+0x12>
	}

return len;
 8008cba:	687b      	ldr	r3, [r7, #4]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3718      	adds	r7, #24
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b086      	sub	sp, #24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	617b      	str	r3, [r7, #20]
 8008cd4:	e009      	b.n	8008cea <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	1c5a      	adds	r2, r3, #1
 8008cda:	60ba      	str	r2, [r7, #8]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	617b      	str	r3, [r7, #20]
 8008cea:	697a      	ldr	r2, [r7, #20]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	dbf1      	blt.n	8008cd6 <_write+0x12>
	}
	return len;
 8008cf2:	687b      	ldr	r3, [r7, #4]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3718      	adds	r7, #24
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <_close>:

int _close(int file)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
	return -1;
 8008d04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008d24:	605a      	str	r2, [r3, #4]
	return 0;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <_isatty>:

int _isatty(int file)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
	return 1;
 8008d3c:	2301      	movs	r3, #1
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	370c      	adds	r7, #12
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr

08008d4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008d4a:	b480      	push	{r7}
 8008d4c:	b085      	sub	sp, #20
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	60f8      	str	r0, [r7, #12]
 8008d52:	60b9      	str	r1, [r7, #8]
 8008d54:	607a      	str	r2, [r7, #4]
	return 0;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3714      	adds	r7, #20
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008d6c:	4a14      	ldr	r2, [pc, #80]	@ (8008dc0 <_sbrk+0x5c>)
 8008d6e:	4b15      	ldr	r3, [pc, #84]	@ (8008dc4 <_sbrk+0x60>)
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008d78:	4b13      	ldr	r3, [pc, #76]	@ (8008dc8 <_sbrk+0x64>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d102      	bne.n	8008d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008d80:	4b11      	ldr	r3, [pc, #68]	@ (8008dc8 <_sbrk+0x64>)
 8008d82:	4a12      	ldr	r2, [pc, #72]	@ (8008dcc <_sbrk+0x68>)
 8008d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008d86:	4b10      	ldr	r3, [pc, #64]	@ (8008dc8 <_sbrk+0x64>)
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	693a      	ldr	r2, [r7, #16]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d207      	bcs.n	8008da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008d94:	f00d fa74 	bl	8016280 <__errno>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	220c      	movs	r2, #12
 8008d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008da2:	e009      	b.n	8008db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008da4:	4b08      	ldr	r3, [pc, #32]	@ (8008dc8 <_sbrk+0x64>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008daa:	4b07      	ldr	r3, [pc, #28]	@ (8008dc8 <_sbrk+0x64>)
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4413      	add	r3, r2
 8008db2:	4a05      	ldr	r2, [pc, #20]	@ (8008dc8 <_sbrk+0x64>)
 8008db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008db6:	68fb      	ldr	r3, [r7, #12]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3718      	adds	r7, #24
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	20050000 	.word	0x20050000
 8008dc4:	00000800 	.word	0x00000800
 8008dc8:	200010a4 	.word	0x200010a4
 8008dcc:	20009808 	.word	0x20009808

08008dd0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008dd4:	4b06      	ldr	r3, [pc, #24]	@ (8008df0 <SystemInit+0x20>)
 8008dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dda:	4a05      	ldr	r2, [pc, #20]	@ (8008df0 <SystemInit+0x20>)
 8008ddc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008de0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008de4:	bf00      	nop
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	e000ed00 	.word	0xe000ed00

08008df4 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b088      	sub	sp, #32
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	607b      	str	r3, [r7, #4]
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	81fb      	strh	r3, [r7, #14]
 8008e00:	460b      	mov	r3, r1
 8008e02:	81bb      	strh	r3, [r7, #12]
 8008e04:	4613      	mov	r3, r2
 8008e06:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8008e0c:	89bb      	ldrh	r3, [r7, #12]
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8008e12:	89bb      	ldrh	r3, [r7, #12]
 8008e14:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008e18:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8008e1e:	f7fd f99d 	bl	800615c <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8008e22:	89fb      	ldrh	r3, [r7, #14]
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	2203      	movs	r2, #3
 8008e28:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f001 fc35 	bl	800a69c <CODEC_IO_Write>
 8008e32:	4603      	mov	r3, r0
 8008e34:	461a      	mov	r2, r3
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	4413      	add	r3, r2
 8008e3a:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8008e3c:	89fb      	ldrh	r3, [r7, #14]
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	2200      	movs	r2, #0
 8008e42:	f640 0117 	movw	r1, #2071	@ 0x817
 8008e46:	4618      	mov	r0, r3
 8008e48:	f001 fc28 	bl	800a69c <CODEC_IO_Write>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	461a      	mov	r2, r3
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	4413      	add	r3, r2
 8008e54:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8008e56:	89fb      	ldrh	r3, [r7, #14]
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8008e60:	4618      	mov	r0, r3
 8008e62:	f001 fc1b 	bl	800a69c <CODEC_IO_Write>
 8008e66:	4603      	mov	r3, r0
 8008e68:	461a      	mov	r2, r3
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8008e70:	89fb      	ldrh	r3, [r7, #14]
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	226c      	movs	r2, #108	@ 0x6c
 8008e76:	2139      	movs	r1, #57	@ 0x39
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f001 fc0f 	bl	800a69c <CODEC_IO_Write>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	461a      	mov	r2, r3
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	4413      	add	r3, r2
 8008e86:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8008e88:	8afb      	ldrh	r3, [r7, #22]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00c      	beq.n	8008ea8 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8008e8e:	89fb      	ldrh	r3, [r7, #14]
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	2213      	movs	r2, #19
 8008e94:	2101      	movs	r1, #1
 8008e96:	4618      	mov	r0, r3
 8008e98:	f001 fc00 	bl	800a69c <CODEC_IO_Write>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	61fb      	str	r3, [r7, #28]
 8008ea6:	e00b      	b.n	8008ec0 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8008ea8:	89fb      	ldrh	r3, [r7, #14]
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	2203      	movs	r2, #3
 8008eae:	2101      	movs	r1, #1
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f001 fbf3 	bl	800a69c <CODEC_IO_Write>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	461a      	mov	r2, r3
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8008ec0:	2032      	movs	r0, #50	@ 0x32
 8008ec2:	f7fd f9b3 	bl	800622c <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8008ec6:	8b3b      	ldrh	r3, [r7, #24]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f000 815f 	beq.w	800918c <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8008ece:	4bae      	ldr	r3, [pc, #696]	@ (8009188 <wm8994_Init+0x394>)
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8008ed4:	8b3b      	ldrh	r3, [r7, #24]
 8008ed6:	2b03      	cmp	r3, #3
 8008ed8:	f000 808c 	beq.w	8008ff4 <wm8994_Init+0x200>
 8008edc:	2b03      	cmp	r3, #3
 8008ede:	f300 8111 	bgt.w	8009104 <wm8994_Init+0x310>
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d002      	beq.n	8008eec <wm8994_Init+0xf8>
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	d042      	beq.n	8008f70 <wm8994_Init+0x17c>
 8008eea:	e10b      	b.n	8009104 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8008eec:	89fb      	ldrh	r3, [r7, #14]
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8008ef4:	2105      	movs	r1, #5
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f001 fbd0 	bl	800a69c <CODEC_IO_Write>
 8008efc:	4603      	mov	r3, r0
 8008efe:	461a      	mov	r2, r3
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	4413      	add	r3, r2
 8008f04:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8008f06:	89fb      	ldrh	r3, [r7, #14]
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f240 6101 	movw	r1, #1537	@ 0x601
 8008f10:	4618      	mov	r0, r3
 8008f12:	f001 fbc3 	bl	800a69c <CODEC_IO_Write>
 8008f16:	4603      	mov	r3, r0
 8008f18:	461a      	mov	r2, r3
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8008f20:	89fb      	ldrh	r3, [r7, #14]
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	2200      	movs	r2, #0
 8008f26:	f240 6102 	movw	r1, #1538	@ 0x602
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f001 fbb6 	bl	800a69c <CODEC_IO_Write>
 8008f30:	4603      	mov	r3, r0
 8008f32:	461a      	mov	r2, r3
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	4413      	add	r3, r2
 8008f38:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8008f3a:	89fb      	ldrh	r3, [r7, #14]
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2202      	movs	r2, #2
 8008f40:	f240 6104 	movw	r1, #1540	@ 0x604
 8008f44:	4618      	mov	r0, r3
 8008f46:	f001 fba9 	bl	800a69c <CODEC_IO_Write>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	4413      	add	r3, r2
 8008f52:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8008f54:	89fb      	ldrh	r3, [r7, #14]
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	2202      	movs	r2, #2
 8008f5a:	f240 6105 	movw	r1, #1541	@ 0x605
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f001 fb9c 	bl	800a69c <CODEC_IO_Write>
 8008f64:	4603      	mov	r3, r0
 8008f66:	461a      	mov	r2, r3
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	61fb      	str	r3, [r7, #28]
      break;
 8008f6e:	e110      	b.n	8009192 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8008f70:	89fb      	ldrh	r3, [r7, #14]
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	f240 3203 	movw	r2, #771	@ 0x303
 8008f78:	2105      	movs	r1, #5
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f001 fb8e 	bl	800a69c <CODEC_IO_Write>
 8008f80:	4603      	mov	r3, r0
 8008f82:	461a      	mov	r2, r3
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	4413      	add	r3, r2
 8008f88:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8008f8a:	89fb      	ldrh	r3, [r7, #14]
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f240 6101 	movw	r1, #1537	@ 0x601
 8008f94:	4618      	mov	r0, r3
 8008f96:	f001 fb81 	bl	800a69c <CODEC_IO_Write>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8008fa4:	89fb      	ldrh	r3, [r7, #14]
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	2201      	movs	r2, #1
 8008faa:	f240 6102 	movw	r1, #1538	@ 0x602
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f001 fb74 	bl	800a69c <CODEC_IO_Write>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	4413      	add	r3, r2
 8008fbc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8008fbe:	89fb      	ldrh	r3, [r7, #14]
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f240 6104 	movw	r1, #1540	@ 0x604
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f001 fb67 	bl	800a69c <CODEC_IO_Write>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8008fd8:	89fb      	ldrh	r3, [r7, #14]
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f240 6105 	movw	r1, #1541	@ 0x605
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f001 fb5a 	bl	800a69c <CODEC_IO_Write>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	461a      	mov	r2, r3
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	4413      	add	r3, r2
 8008ff0:	61fb      	str	r3, [r7, #28]
      break;
 8008ff2:	e0ce      	b.n	8009192 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8008ff4:	8afb      	ldrh	r3, [r7, #22]
 8008ff6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ffa:	d141      	bne.n	8009080 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8008ffc:	89fb      	ldrh	r3, [r7, #14]
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8009004:	2105      	movs	r1, #5
 8009006:	4618      	mov	r0, r3
 8009008:	f001 fb48 	bl	800a69c <CODEC_IO_Write>
 800900c:	4603      	mov	r3, r0
 800900e:	461a      	mov	r2, r3
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	4413      	add	r3, r2
 8009014:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8009016:	89fb      	ldrh	r3, [r7, #14]
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2203      	movs	r2, #3
 800901c:	f240 6101 	movw	r1, #1537	@ 0x601
 8009020:	4618      	mov	r0, r3
 8009022:	f001 fb3b 	bl	800a69c <CODEC_IO_Write>
 8009026:	4603      	mov	r3, r0
 8009028:	461a      	mov	r2, r3
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	4413      	add	r3, r2
 800902e:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8009030:	89fb      	ldrh	r3, [r7, #14]
 8009032:	b2db      	uxtb	r3, r3
 8009034:	2203      	movs	r2, #3
 8009036:	f240 6102 	movw	r1, #1538	@ 0x602
 800903a:	4618      	mov	r0, r3
 800903c:	f001 fb2e 	bl	800a69c <CODEC_IO_Write>
 8009040:	4603      	mov	r3, r0
 8009042:	461a      	mov	r2, r3
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	4413      	add	r3, r2
 8009048:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 800904a:	89fb      	ldrh	r3, [r7, #14]
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2203      	movs	r2, #3
 8009050:	f240 6104 	movw	r1, #1540	@ 0x604
 8009054:	4618      	mov	r0, r3
 8009056:	f001 fb21 	bl	800a69c <CODEC_IO_Write>
 800905a:	4603      	mov	r3, r0
 800905c:	461a      	mov	r2, r3
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	4413      	add	r3, r2
 8009062:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8009064:	89fb      	ldrh	r3, [r7, #14]
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2203      	movs	r2, #3
 800906a:	f240 6105 	movw	r1, #1541	@ 0x605
 800906e:	4618      	mov	r0, r3
 8009070:	f001 fb14 	bl	800a69c <CODEC_IO_Write>
 8009074:	4603      	mov	r3, r0
 8009076:	461a      	mov	r2, r3
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	4413      	add	r3, r2
 800907c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 800907e:	e088      	b.n	8009192 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8009080:	89fb      	ldrh	r3, [r7, #14]
 8009082:	b2db      	uxtb	r3, r3
 8009084:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8009088:	2105      	movs	r1, #5
 800908a:	4618      	mov	r0, r3
 800908c:	f001 fb06 	bl	800a69c <CODEC_IO_Write>
 8009090:	4603      	mov	r3, r0
 8009092:	461a      	mov	r2, r3
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	4413      	add	r3, r2
 8009098:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800909a:	89fb      	ldrh	r3, [r7, #14]
 800909c:	b2db      	uxtb	r3, r3
 800909e:	2201      	movs	r2, #1
 80090a0:	f240 6101 	movw	r1, #1537	@ 0x601
 80090a4:	4618      	mov	r0, r3
 80090a6:	f001 faf9 	bl	800a69c <CODEC_IO_Write>
 80090aa:	4603      	mov	r3, r0
 80090ac:	461a      	mov	r2, r3
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	4413      	add	r3, r2
 80090b2:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80090b4:	89fb      	ldrh	r3, [r7, #14]
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	2201      	movs	r2, #1
 80090ba:	f240 6102 	movw	r1, #1538	@ 0x602
 80090be:	4618      	mov	r0, r3
 80090c0:	f001 faec 	bl	800a69c <CODEC_IO_Write>
 80090c4:	4603      	mov	r3, r0
 80090c6:	461a      	mov	r2, r3
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	4413      	add	r3, r2
 80090cc:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80090ce:	89fb      	ldrh	r3, [r7, #14]
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	2202      	movs	r2, #2
 80090d4:	f240 6104 	movw	r1, #1540	@ 0x604
 80090d8:	4618      	mov	r0, r3
 80090da:	f001 fadf 	bl	800a69c <CODEC_IO_Write>
 80090de:	4603      	mov	r3, r0
 80090e0:	461a      	mov	r2, r3
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	4413      	add	r3, r2
 80090e6:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 80090e8:	89fb      	ldrh	r3, [r7, #14]
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	2202      	movs	r2, #2
 80090ee:	f240 6105 	movw	r1, #1541	@ 0x605
 80090f2:	4618      	mov	r0, r3
 80090f4:	f001 fad2 	bl	800a69c <CODEC_IO_Write>
 80090f8:	4603      	mov	r3, r0
 80090fa:	461a      	mov	r2, r3
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	4413      	add	r3, r2
 8009100:	61fb      	str	r3, [r7, #28]
      break;
 8009102:	e046      	b.n	8009192 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8009104:	89fb      	ldrh	r3, [r7, #14]
 8009106:	b2db      	uxtb	r3, r3
 8009108:	f240 3203 	movw	r2, #771	@ 0x303
 800910c:	2105      	movs	r1, #5
 800910e:	4618      	mov	r0, r3
 8009110:	f001 fac4 	bl	800a69c <CODEC_IO_Write>
 8009114:	4603      	mov	r3, r0
 8009116:	461a      	mov	r2, r3
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	4413      	add	r3, r2
 800911c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800911e:	89fb      	ldrh	r3, [r7, #14]
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2201      	movs	r2, #1
 8009124:	f240 6101 	movw	r1, #1537	@ 0x601
 8009128:	4618      	mov	r0, r3
 800912a:	f001 fab7 	bl	800a69c <CODEC_IO_Write>
 800912e:	4603      	mov	r3, r0
 8009130:	461a      	mov	r2, r3
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	4413      	add	r3, r2
 8009136:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8009138:	89fb      	ldrh	r3, [r7, #14]
 800913a:	b2db      	uxtb	r3, r3
 800913c:	2201      	movs	r2, #1
 800913e:	f240 6102 	movw	r1, #1538	@ 0x602
 8009142:	4618      	mov	r0, r3
 8009144:	f001 faaa 	bl	800a69c <CODEC_IO_Write>
 8009148:	4603      	mov	r3, r0
 800914a:	461a      	mov	r2, r3
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	4413      	add	r3, r2
 8009150:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8009152:	89fb      	ldrh	r3, [r7, #14]
 8009154:	b2db      	uxtb	r3, r3
 8009156:	2200      	movs	r2, #0
 8009158:	f240 6104 	movw	r1, #1540	@ 0x604
 800915c:	4618      	mov	r0, r3
 800915e:	f001 fa9d 	bl	800a69c <CODEC_IO_Write>
 8009162:	4603      	mov	r3, r0
 8009164:	461a      	mov	r2, r3
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	4413      	add	r3, r2
 800916a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800916c:	89fb      	ldrh	r3, [r7, #14]
 800916e:	b2db      	uxtb	r3, r3
 8009170:	2200      	movs	r2, #0
 8009172:	f240 6105 	movw	r1, #1541	@ 0x605
 8009176:	4618      	mov	r0, r3
 8009178:	f001 fa90 	bl	800a69c <CODEC_IO_Write>
 800917c:	4603      	mov	r3, r0
 800917e:	461a      	mov	r2, r3
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	4413      	add	r3, r2
 8009184:	61fb      	str	r3, [r7, #28]
      break;
 8009186:	e004      	b.n	8009192 <wm8994_Init+0x39e>
 8009188:	200010a8 	.word	0x200010a8
    }
  }
  else
  {
    outputEnabled = 0;
 800918c:	4ba5      	ldr	r3, [pc, #660]	@ (8009424 <wm8994_Init+0x630>)
 800918e:	2200      	movs	r2, #0
 8009190:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8009192:	8afb      	ldrh	r3, [r7, #22]
 8009194:	2b00      	cmp	r3, #0
 8009196:	f000 81c3 	beq.w	8009520 <wm8994_Init+0x72c>
  {
    inputEnabled = 1;
 800919a:	4ba3      	ldr	r3, [pc, #652]	@ (8009428 <wm8994_Init+0x634>)
 800919c:	2201      	movs	r2, #1
 800919e:	601a      	str	r2, [r3, #0]
    switch (input_device)
 80091a0:	8afb      	ldrh	r3, [r7, #22]
 80091a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091a6:	f000 8141 	beq.w	800942c <wm8994_Init+0x638>
 80091aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091ae:	f300 81b3 	bgt.w	8009518 <wm8994_Init+0x724>
 80091b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091b6:	d05a      	beq.n	800926e <wm8994_Init+0x47a>
 80091b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091bc:	f300 81ac 	bgt.w	8009518 <wm8994_Init+0x724>
 80091c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091c4:	f000 80de 	beq.w	8009384 <wm8994_Init+0x590>
 80091c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091cc:	f040 81a4 	bne.w	8009518 <wm8994_Init+0x724>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80091d0:	89fb      	ldrh	r3, [r7, #14]
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 80091d8:	2104      	movs	r1, #4
 80091da:	4618      	mov	r0, r3
 80091dc:	f001 fa5e 	bl	800a69c <CODEC_IO_Write>
 80091e0:	4603      	mov	r3, r0
 80091e2:	461a      	mov	r2, r3
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	4413      	add	r3, r2
 80091e8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80091ea:	89fb      	ldrh	r3, [r7, #14]
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	22db      	movs	r2, #219	@ 0xdb
 80091f0:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80091f4:	4618      	mov	r0, r3
 80091f6:	f001 fa51 	bl	800a69c <CODEC_IO_Write>
 80091fa:	4603      	mov	r3, r0
 80091fc:	461a      	mov	r2, r3
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	4413      	add	r3, r2
 8009202:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8009204:	89fb      	ldrh	r3, [r7, #14]
 8009206:	b2db      	uxtb	r3, r3
 8009208:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 800920c:	2102      	movs	r1, #2
 800920e:	4618      	mov	r0, r3
 8009210:	f001 fa44 	bl	800a69c <CODEC_IO_Write>
 8009214:	4603      	mov	r3, r0
 8009216:	461a      	mov	r2, r3
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	4413      	add	r3, r2
 800921c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800921e:	89fb      	ldrh	r3, [r7, #14]
 8009220:	b2db      	uxtb	r3, r3
 8009222:	2202      	movs	r2, #2
 8009224:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8009228:	4618      	mov	r0, r3
 800922a:	f001 fa37 	bl	800a69c <CODEC_IO_Write>
 800922e:	4603      	mov	r3, r0
 8009230:	461a      	mov	r2, r3
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	4413      	add	r3, r2
 8009236:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8009238:	89fb      	ldrh	r3, [r7, #14]
 800923a:	b2db      	uxtb	r3, r3
 800923c:	2202      	movs	r2, #2
 800923e:	f240 6109 	movw	r1, #1545	@ 0x609
 8009242:	4618      	mov	r0, r3
 8009244:	f001 fa2a 	bl	800a69c <CODEC_IO_Write>
 8009248:	4603      	mov	r3, r0
 800924a:	461a      	mov	r2, r3
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	4413      	add	r3, r2
 8009250:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8009252:	89fb      	ldrh	r3, [r7, #14]
 8009254:	b2db      	uxtb	r3, r3
 8009256:	220e      	movs	r2, #14
 8009258:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800925c:	4618      	mov	r0, r3
 800925e:	f001 fa1d 	bl	800a69c <CODEC_IO_Write>
 8009262:	4603      	mov	r3, r0
 8009264:	461a      	mov	r2, r3
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	4413      	add	r3, r2
 800926a:	61fb      	str	r3, [r7, #28]
      break;
 800926c:	e15b      	b.n	8009526 <wm8994_Init+0x732>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 800926e:	89fb      	ldrh	r3, [r7, #14]
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2211      	movs	r2, #17
 8009274:	2128      	movs	r1, #40	@ 0x28
 8009276:	4618      	mov	r0, r3
 8009278:	f001 fa10 	bl	800a69c <CODEC_IO_Write>
 800927c:	4603      	mov	r3, r0
 800927e:	461a      	mov	r2, r3
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	4413      	add	r3, r2
 8009284:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +0dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 8009286:	89fb      	ldrh	r3, [r7, #14]
 8009288:	b2db      	uxtb	r3, r3
 800928a:	2220      	movs	r2, #32
 800928c:	2129      	movs	r1, #41	@ 0x29
 800928e:	4618      	mov	r0, r3
 8009290:	f001 fa04 	bl	800a69c <CODEC_IO_Write>
 8009294:	4603      	mov	r3, r0
 8009296:	461a      	mov	r2, r3
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	4413      	add	r3, r2
 800929c:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 800929e:	89fb      	ldrh	r3, [r7, #14]
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2220      	movs	r2, #32
 80092a4:	212a      	movs	r1, #42	@ 0x2a
 80092a6:	4618      	mov	r0, r3
 80092a8:	f001 f9f8 	bl	800a69c <CODEC_IO_Write>
 80092ac:	4603      	mov	r3, r0
 80092ae:	461a      	mov	r2, r3
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	4413      	add	r3, r2
 80092b4:	61fb      	str	r3, [r7, #28]
      counter += CODEC_IO_Write(DeviceAddr, 0x2B, 0x0000);
 80092b6:	89fb      	ldrh	r3, [r7, #14]
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	2200      	movs	r2, #0
 80092bc:	212b      	movs	r1, #43	@ 0x2b
 80092be:	4618      	mov	r0, r3
 80092c0:	f001 f9ec 	bl	800a69c <CODEC_IO_Write>
 80092c4:	4603      	mov	r3, r0
 80092c6:	461a      	mov	r2, r3
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	4413      	add	r3, r2
 80092cc:	61fb      	str	r3, [r7, #28]
      counter += CODEC_IO_Write(DeviceAddr, 0x2C, 0x0000);
 80092ce:	89fb      	ldrh	r3, [r7, #14]
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	2200      	movs	r2, #0
 80092d4:	212c      	movs	r1, #44	@ 0x2c
 80092d6:	4618      	mov	r0, r3
 80092d8:	f001 f9e0 	bl	800a69c <CODEC_IO_Write>
 80092dc:	4603      	mov	r3, r0
 80092de:	461a      	mov	r2, r3
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	4413      	add	r3, r2
 80092e4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 80092e6:	89fb      	ldrh	r3, [r7, #14]
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	f240 3203 	movw	r2, #771	@ 0x303
 80092ee:	2104      	movs	r1, #4
 80092f0:	4618      	mov	r0, r3
 80092f2:	f001 f9d3 	bl	800a69c <CODEC_IO_Write>
 80092f6:	4603      	mov	r3, r0
 80092f8:	461a      	mov	r2, r3
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	4413      	add	r3, r2
 80092fe:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8009300:	89fb      	ldrh	r3, [r7, #14]
 8009302:	b2db      	uxtb	r3, r3
 8009304:	22db      	movs	r2, #219	@ 0xdb
 8009306:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800930a:	4618      	mov	r0, r3
 800930c:	f001 f9c6 	bl	800a69c <CODEC_IO_Write>
 8009310:	4603      	mov	r3, r0
 8009312:	461a      	mov	r2, r3
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	4413      	add	r3, r2
 8009318:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800931a:	89fb      	ldrh	r3, [r7, #14]
 800931c:	b2db      	uxtb	r3, r3
 800931e:	f246 3250 	movw	r2, #25424	@ 0x6350
 8009322:	2102      	movs	r1, #2
 8009324:	4618      	mov	r0, r3
 8009326:	f001 f9b9 	bl	800a69c <CODEC_IO_Write>
 800932a:	4603      	mov	r3, r0
 800932c:	461a      	mov	r2, r3
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	4413      	add	r3, r2
 8009332:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8009334:	89fb      	ldrh	r3, [r7, #14]
 8009336:	b2db      	uxtb	r3, r3
 8009338:	2202      	movs	r2, #2
 800933a:	f240 6106 	movw	r1, #1542	@ 0x606
 800933e:	4618      	mov	r0, r3
 8009340:	f001 f9ac 	bl	800a69c <CODEC_IO_Write>
 8009344:	4603      	mov	r3, r0
 8009346:	461a      	mov	r2, r3
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	4413      	add	r3, r2
 800934c:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800934e:	89fb      	ldrh	r3, [r7, #14]
 8009350:	b2db      	uxtb	r3, r3
 8009352:	2202      	movs	r2, #2
 8009354:	f240 6107 	movw	r1, #1543	@ 0x607
 8009358:	4618      	mov	r0, r3
 800935a:	f001 f99f 	bl	800a69c <CODEC_IO_Write>
 800935e:	4603      	mov	r3, r0
 8009360:	461a      	mov	r2, r3
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	4413      	add	r3, r2
 8009366:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8009368:	89fb      	ldrh	r3, [r7, #14]
 800936a:	b2db      	uxtb	r3, r3
 800936c:	220d      	movs	r2, #13
 800936e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8009372:	4618      	mov	r0, r3
 8009374:	f001 f992 	bl	800a69c <CODEC_IO_Write>
 8009378:	4603      	mov	r3, r0
 800937a:	461a      	mov	r2, r3
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	4413      	add	r3, r2
 8009380:	61fb      	str	r3, [r7, #28]
      break;
 8009382:	e0d0      	b.n	8009526 <wm8994_Init+0x732>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8009384:	89fb      	ldrh	r3, [r7, #14]
 8009386:	b2db      	uxtb	r3, r3
 8009388:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 800938c:	2104      	movs	r1, #4
 800938e:	4618      	mov	r0, r3
 8009390:	f001 f984 	bl	800a69c <CODEC_IO_Write>
 8009394:	4603      	mov	r3, r0
 8009396:	461a      	mov	r2, r3
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	4413      	add	r3, r2
 800939c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800939e:	89fb      	ldrh	r3, [r7, #14]
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	22db      	movs	r2, #219	@ 0xdb
 80093a4:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80093a8:	4618      	mov	r0, r3
 80093aa:	f001 f977 	bl	800a69c <CODEC_IO_Write>
 80093ae:	4603      	mov	r3, r0
 80093b0:	461a      	mov	r2, r3
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	4413      	add	r3, r2
 80093b6:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80093b8:	89fb      	ldrh	r3, [r7, #14]
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	f246 3250 	movw	r2, #25424	@ 0x6350
 80093c0:	2102      	movs	r1, #2
 80093c2:	4618      	mov	r0, r3
 80093c4:	f001 f96a 	bl	800a69c <CODEC_IO_Write>
 80093c8:	4603      	mov	r3, r0
 80093ca:	461a      	mov	r2, r3
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	4413      	add	r3, r2
 80093d0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80093d2:	89fb      	ldrh	r3, [r7, #14]
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	2202      	movs	r2, #2
 80093d8:	f240 6106 	movw	r1, #1542	@ 0x606
 80093dc:	4618      	mov	r0, r3
 80093de:	f001 f95d 	bl	800a69c <CODEC_IO_Write>
 80093e2:	4603      	mov	r3, r0
 80093e4:	461a      	mov	r2, r3
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	4413      	add	r3, r2
 80093ea:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80093ec:	89fb      	ldrh	r3, [r7, #14]
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	2202      	movs	r2, #2
 80093f2:	f240 6107 	movw	r1, #1543	@ 0x607
 80093f6:	4618      	mov	r0, r3
 80093f8:	f001 f950 	bl	800a69c <CODEC_IO_Write>
 80093fc:	4603      	mov	r3, r0
 80093fe:	461a      	mov	r2, r3
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	4413      	add	r3, r2
 8009404:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8009406:	89fb      	ldrh	r3, [r7, #14]
 8009408:	b2db      	uxtb	r3, r3
 800940a:	220d      	movs	r2, #13
 800940c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8009410:	4618      	mov	r0, r3
 8009412:	f001 f943 	bl	800a69c <CODEC_IO_Write>
 8009416:	4603      	mov	r3, r0
 8009418:	461a      	mov	r2, r3
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	4413      	add	r3, r2
 800941e:	61fb      	str	r3, [r7, #28]
      break; 
 8009420:	e081      	b.n	8009526 <wm8994_Init+0x732>
 8009422:	bf00      	nop
 8009424:	200010a8 	.word	0x200010a8
 8009428:	200010ac 	.word	0x200010ac
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 800942c:	89fb      	ldrh	r3, [r7, #14]
 800942e:	b2db      	uxtb	r3, r3
 8009430:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8009434:	2104      	movs	r1, #4
 8009436:	4618      	mov	r0, r3
 8009438:	f001 f930 	bl	800a69c <CODEC_IO_Write>
 800943c:	4603      	mov	r3, r0
 800943e:	461a      	mov	r2, r3
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	4413      	add	r3, r2
 8009444:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8009446:	89fb      	ldrh	r3, [r7, #14]
 8009448:	b2db      	uxtb	r3, r3
 800944a:	22db      	movs	r2, #219	@ 0xdb
 800944c:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8009450:	4618      	mov	r0, r3
 8009452:	f001 f923 	bl	800a69c <CODEC_IO_Write>
 8009456:	4603      	mov	r3, r0
 8009458:	461a      	mov	r2, r3
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	4413      	add	r3, r2
 800945e:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8009460:	89fb      	ldrh	r3, [r7, #14]
 8009462:	b2db      	uxtb	r3, r3
 8009464:	22db      	movs	r2, #219	@ 0xdb
 8009466:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800946a:	4618      	mov	r0, r3
 800946c:	f001 f916 	bl	800a69c <CODEC_IO_Write>
 8009470:	4603      	mov	r3, r0
 8009472:	461a      	mov	r2, r3
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	4413      	add	r3, r2
 8009478:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 800947a:	89fb      	ldrh	r3, [r7, #14]
 800947c:	b2db      	uxtb	r3, r3
 800947e:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 8009482:	2102      	movs	r1, #2
 8009484:	4618      	mov	r0, r3
 8009486:	f001 f909 	bl	800a69c <CODEC_IO_Write>
 800948a:	4603      	mov	r3, r0
 800948c:	461a      	mov	r2, r3
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	4413      	add	r3, r2
 8009492:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8009494:	89fb      	ldrh	r3, [r7, #14]
 8009496:	b2db      	uxtb	r3, r3
 8009498:	2202      	movs	r2, #2
 800949a:	f240 6106 	movw	r1, #1542	@ 0x606
 800949e:	4618      	mov	r0, r3
 80094a0:	f001 f8fc 	bl	800a69c <CODEC_IO_Write>
 80094a4:	4603      	mov	r3, r0
 80094a6:	461a      	mov	r2, r3
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	4413      	add	r3, r2
 80094ac:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80094ae:	89fb      	ldrh	r3, [r7, #14]
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2202      	movs	r2, #2
 80094b4:	f240 6107 	movw	r1, #1543	@ 0x607
 80094b8:	4618      	mov	r0, r3
 80094ba:	f001 f8ef 	bl	800a69c <CODEC_IO_Write>
 80094be:	4603      	mov	r3, r0
 80094c0:	461a      	mov	r2, r3
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	4413      	add	r3, r2
 80094c6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80094c8:	89fb      	ldrh	r3, [r7, #14]
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	2202      	movs	r2, #2
 80094ce:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80094d2:	4618      	mov	r0, r3
 80094d4:	f001 f8e2 	bl	800a69c <CODEC_IO_Write>
 80094d8:	4603      	mov	r3, r0
 80094da:	461a      	mov	r2, r3
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	4413      	add	r3, r2
 80094e0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80094e2:	89fb      	ldrh	r3, [r7, #14]
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2202      	movs	r2, #2
 80094e8:	f240 6109 	movw	r1, #1545	@ 0x609
 80094ec:	4618      	mov	r0, r3
 80094ee:	f001 f8d5 	bl	800a69c <CODEC_IO_Write>
 80094f2:	4603      	mov	r3, r0
 80094f4:	461a      	mov	r2, r3
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	4413      	add	r3, r2
 80094fa:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80094fc:	89fb      	ldrh	r3, [r7, #14]
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	220d      	movs	r2, #13
 8009502:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8009506:	4618      	mov	r0, r3
 8009508:	f001 f8c8 	bl	800a69c <CODEC_IO_Write>
 800950c:	4603      	mov	r3, r0
 800950e:	461a      	mov	r2, r3
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	4413      	add	r3, r2
 8009514:	61fb      	str	r3, [r7, #28]
      break;    
 8009516:	e006      	b.n	8009526 <wm8994_Init+0x732>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	3301      	adds	r3, #1
 800951c:	61fb      	str	r3, [r7, #28]
      break;
 800951e:	e002      	b.n	8009526 <wm8994_Init+0x732>
    }
  }
  else
  {
    inputEnabled = 0;
 8009520:	4ba4      	ldr	r3, [pc, #656]	@ (80097b4 <wm8994_Init+0x9c0>)
 8009522:	2200      	movs	r2, #0
 8009524:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	4aa3      	ldr	r2, [pc, #652]	@ (80097b8 <wm8994_Init+0x9c4>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d079      	beq.n	8009622 <wm8994_Init+0x82e>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4aa1      	ldr	r2, [pc, #644]	@ (80097b8 <wm8994_Init+0x9c4>)
 8009532:	4293      	cmp	r3, r2
 8009534:	f200 80ad 	bhi.w	8009692 <wm8994_Init+0x89e>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800953e:	4293      	cmp	r3, r2
 8009540:	d061      	beq.n	8009606 <wm8994_Init+0x812>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8009548:	4293      	cmp	r3, r2
 800954a:	f200 80a2 	bhi.w	8009692 <wm8994_Init+0x89e>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8009554:	4293      	cmp	r3, r2
 8009556:	f000 808e 	beq.w	8009676 <wm8994_Init+0x882>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8009560:	4293      	cmp	r3, r2
 8009562:	f200 8096 	bhi.w	8009692 <wm8994_Init+0x89e>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800956c:	d03d      	beq.n	80095ea <wm8994_Init+0x7f6>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8009574:	f200 808d 	bhi.w	8009692 <wm8994_Init+0x89e>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f245 6222 	movw	r2, #22050	@ 0x5622
 800957e:	4293      	cmp	r3, r2
 8009580:	d06b      	beq.n	800965a <wm8994_Init+0x866>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f245 6222 	movw	r2, #22050	@ 0x5622
 8009588:	4293      	cmp	r3, r2
 800958a:	f200 8082 	bhi.w	8009692 <wm8994_Init+0x89e>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8009594:	d01b      	beq.n	80095ce <wm8994_Init+0x7da>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800959c:	d879      	bhi.n	8009692 <wm8994_Init+0x89e>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80095a4:	d005      	beq.n	80095b2 <wm8994_Init+0x7be>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d046      	beq.n	800963e <wm8994_Init+0x84a>
 80095b0:	e06f      	b.n	8009692 <wm8994_Init+0x89e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80095b2:	89fb      	ldrh	r3, [r7, #14]
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	2203      	movs	r2, #3
 80095b8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80095bc:	4618      	mov	r0, r3
 80095be:	f001 f86d 	bl	800a69c <CODEC_IO_Write>
 80095c2:	4603      	mov	r3, r0
 80095c4:	461a      	mov	r2, r3
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	4413      	add	r3, r2
 80095ca:	61fb      	str	r3, [r7, #28]
    break;
 80095cc:	e06f      	b.n	80096ae <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80095ce:	89fb      	ldrh	r3, [r7, #14]
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	2233      	movs	r2, #51	@ 0x33
 80095d4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80095d8:	4618      	mov	r0, r3
 80095da:	f001 f85f 	bl	800a69c <CODEC_IO_Write>
 80095de:	4603      	mov	r3, r0
 80095e0:	461a      	mov	r2, r3
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	4413      	add	r3, r2
 80095e6:	61fb      	str	r3, [r7, #28]
    break;
 80095e8:	e061      	b.n	80096ae <wm8994_Init+0x8ba>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80095ea:	89fb      	ldrh	r3, [r7, #14]
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	2263      	movs	r2, #99	@ 0x63
 80095f0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80095f4:	4618      	mov	r0, r3
 80095f6:	f001 f851 	bl	800a69c <CODEC_IO_Write>
 80095fa:	4603      	mov	r3, r0
 80095fc:	461a      	mov	r2, r3
 80095fe:	69fb      	ldr	r3, [r7, #28]
 8009600:	4413      	add	r3, r2
 8009602:	61fb      	str	r3, [r7, #28]
    break;
 8009604:	e053      	b.n	80096ae <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8009606:	89fb      	ldrh	r3, [r7, #14]
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2283      	movs	r2, #131	@ 0x83
 800960c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8009610:	4618      	mov	r0, r3
 8009612:	f001 f843 	bl	800a69c <CODEC_IO_Write>
 8009616:	4603      	mov	r3, r0
 8009618:	461a      	mov	r2, r3
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	4413      	add	r3, r2
 800961e:	61fb      	str	r3, [r7, #28]
    break;
 8009620:	e045      	b.n	80096ae <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8009622:	89fb      	ldrh	r3, [r7, #14]
 8009624:	b2db      	uxtb	r3, r3
 8009626:	22a3      	movs	r2, #163	@ 0xa3
 8009628:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800962c:	4618      	mov	r0, r3
 800962e:	f001 f835 	bl	800a69c <CODEC_IO_Write>
 8009632:	4603      	mov	r3, r0
 8009634:	461a      	mov	r2, r3
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	4413      	add	r3, r2
 800963a:	61fb      	str	r3, [r7, #28]
    break;
 800963c:	e037      	b.n	80096ae <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800963e:	89fb      	ldrh	r3, [r7, #14]
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2213      	movs	r2, #19
 8009644:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8009648:	4618      	mov	r0, r3
 800964a:	f001 f827 	bl	800a69c <CODEC_IO_Write>
 800964e:	4603      	mov	r3, r0
 8009650:	461a      	mov	r2, r3
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	4413      	add	r3, r2
 8009656:	61fb      	str	r3, [r7, #28]
    break;
 8009658:	e029      	b.n	80096ae <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800965a:	89fb      	ldrh	r3, [r7, #14]
 800965c:	b2db      	uxtb	r3, r3
 800965e:	2243      	movs	r2, #67	@ 0x43
 8009660:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8009664:	4618      	mov	r0, r3
 8009666:	f001 f819 	bl	800a69c <CODEC_IO_Write>
 800966a:	4603      	mov	r3, r0
 800966c:	461a      	mov	r2, r3
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	4413      	add	r3, r2
 8009672:	61fb      	str	r3, [r7, #28]
    break;
 8009674:	e01b      	b.n	80096ae <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8009676:	89fb      	ldrh	r3, [r7, #14]
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2273      	movs	r2, #115	@ 0x73
 800967c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8009680:	4618      	mov	r0, r3
 8009682:	f001 f80b 	bl	800a69c <CODEC_IO_Write>
 8009686:	4603      	mov	r3, r0
 8009688:	461a      	mov	r2, r3
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	4413      	add	r3, r2
 800968e:	61fb      	str	r3, [r7, #28]
    break; 
 8009690:	e00d      	b.n	80096ae <wm8994_Init+0x8ba>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8009692:	89fb      	ldrh	r3, [r7, #14]
 8009694:	b2db      	uxtb	r3, r3
 8009696:	2283      	movs	r2, #131	@ 0x83
 8009698:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800969c:	4618      	mov	r0, r3
 800969e:	f000 fffd 	bl	800a69c <CODEC_IO_Write>
 80096a2:	4603      	mov	r3, r0
 80096a4:	461a      	mov	r2, r3
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	4413      	add	r3, r2
 80096aa:	61fb      	str	r3, [r7, #28]
    break; 
 80096ac:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80096ae:	8afb      	ldrh	r3, [r7, #22]
 80096b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096b4:	d10e      	bne.n	80096d4 <wm8994_Init+0x8e0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 80096b6:	89fb      	ldrh	r3, [r7, #14]
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	f244 0218 	movw	r2, #16408	@ 0x4018
 80096be:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80096c2:	4618      	mov	r0, r3
 80096c4:	f000 ffea 	bl	800a69c <CODEC_IO_Write>
 80096c8:	4603      	mov	r3, r0
 80096ca:	461a      	mov	r2, r3
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	4413      	add	r3, r2
 80096d0:	61fb      	str	r3, [r7, #28]
 80096d2:	e00d      	b.n	80096f0 <wm8994_Init+0x8fc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 80096d4:	89fb      	ldrh	r3, [r7, #14]
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	f244 0210 	movw	r2, #16400	@ 0x4010
 80096dc:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80096e0:	4618      	mov	r0, r3
 80096e2:	f000 ffdb 	bl	800a69c <CODEC_IO_Write>
 80096e6:	4603      	mov	r3, r0
 80096e8:	461a      	mov	r2, r3
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	4413      	add	r3, r2
 80096ee:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 80096f0:	89fb      	ldrh	r3, [r7, #14]
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	2200      	movs	r2, #0
 80096f6:	f240 3102 	movw	r1, #770	@ 0x302
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 ffce 	bl	800a69c <CODEC_IO_Write>
 8009700:	4603      	mov	r3, r0
 8009702:	461a      	mov	r2, r3
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	4413      	add	r3, r2
 8009708:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 800970a:	89fb      	ldrh	r3, [r7, #14]
 800970c:	b2db      	uxtb	r3, r3
 800970e:	220a      	movs	r2, #10
 8009710:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8009714:	4618      	mov	r0, r3
 8009716:	f000 ffc1 	bl	800a69c <CODEC_IO_Write>
 800971a:	4603      	mov	r3, r0
 800971c:	461a      	mov	r2, r3
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	4413      	add	r3, r2
 8009722:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8009724:	89fb      	ldrh	r3, [r7, #14]
 8009726:	b2db      	uxtb	r3, r3
 8009728:	2201      	movs	r2, #1
 800972a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800972e:	4618      	mov	r0, r3
 8009730:	f000 ffb4 	bl	800a69c <CODEC_IO_Write>
 8009734:	4603      	mov	r3, r0
 8009736:	461a      	mov	r2, r3
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	4413      	add	r3, r2
 800973c:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 800973e:	8b3b      	ldrh	r3, [r7, #24]
 8009740:	2b00      	cmp	r3, #0
 8009742:	f000 817b 	beq.w	8009a3c <wm8994_Init+0xc48>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8009746:	8b3b      	ldrh	r3, [r7, #24]
 8009748:	2b02      	cmp	r3, #2
 800974a:	d157      	bne.n	80097fc <wm8994_Init+0xa08>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 800974c:	89fb      	ldrh	r3, [r7, #14]
 800974e:	b2db      	uxtb	r3, r3
 8009750:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009754:	212d      	movs	r1, #45	@ 0x2d
 8009756:	4618      	mov	r0, r3
 8009758:	f000 ffa0 	bl	800a69c <CODEC_IO_Write>
 800975c:	4603      	mov	r3, r0
 800975e:	461a      	mov	r2, r3
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	4413      	add	r3, r2
 8009764:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8009766:	89fb      	ldrh	r3, [r7, #14]
 8009768:	b2db      	uxtb	r3, r3
 800976a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800976e:	212e      	movs	r1, #46	@ 0x2e
 8009770:	4618      	mov	r0, r3
 8009772:	f000 ff93 	bl	800a69c <CODEC_IO_Write>
 8009776:	4603      	mov	r3, r0
 8009778:	461a      	mov	r2, r3
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	4413      	add	r3, r2
 800977e:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8009780:	4b0e      	ldr	r3, [pc, #56]	@ (80097bc <wm8994_Init+0x9c8>)
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d01b      	beq.n	80097c0 <wm8994_Init+0x9cc>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8009788:	89fb      	ldrh	r3, [r7, #14]
 800978a:	b2db      	uxtb	r3, r3
 800978c:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 8009790:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8009794:	4618      	mov	r0, r3
 8009796:	f000 ff81 	bl	800a69c <CODEC_IO_Write>
 800979a:	4603      	mov	r3, r0
 800979c:	461a      	mov	r2, r3
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	4413      	add	r3, r2
 80097a2:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 80097a4:	4b05      	ldr	r3, [pc, #20]	@ (80097bc <wm8994_Init+0x9c8>)
 80097a6:	2200      	movs	r2, #0
 80097a8:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 80097aa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80097ae:	f7fc fd3d 	bl	800622c <AUDIO_IO_Delay>
 80097b2:	e016      	b.n	80097e2 <wm8994_Init+0x9ee>
 80097b4:	200010ac 	.word	0x200010ac
 80097b8:	00017700 	.word	0x00017700
 80097bc:	20000090 	.word	0x20000090
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 80097c0:	89fb      	ldrh	r3, [r7, #14]
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	f248 1208 	movw	r2, #33032	@ 0x8108
 80097c8:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80097cc:	4618      	mov	r0, r3
 80097ce:	f000 ff65 	bl	800a69c <CODEC_IO_Write>
 80097d2:	4603      	mov	r3, r0
 80097d4:	461a      	mov	r2, r3
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	4413      	add	r3, r2
 80097da:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 80097dc:	2032      	movs	r0, #50	@ 0x32
 80097de:	f7fc fd25 	bl	800622c <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80097e2:	89fb      	ldrh	r3, [r7, #14]
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	2200      	movs	r2, #0
 80097e8:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80097ec:	4618      	mov	r0, r3
 80097ee:	f000 ff55 	bl	800a69c <CODEC_IO_Write>
 80097f2:	4603      	mov	r3, r0
 80097f4:	461a      	mov	r2, r3
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	4413      	add	r3, r2
 80097fa:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 80097fc:	89fb      	ldrh	r3, [r7, #14]
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8009804:	2103      	movs	r1, #3
 8009806:	4618      	mov	r0, r3
 8009808:	f000 ff48 	bl	800a69c <CODEC_IO_Write>
 800980c:	4603      	mov	r3, r0
 800980e:	461a      	mov	r2, r3
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	4413      	add	r3, r2
 8009814:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8009816:	89fb      	ldrh	r3, [r7, #14]
 8009818:	b2db      	uxtb	r3, r3
 800981a:	2200      	movs	r2, #0
 800981c:	2122      	movs	r1, #34	@ 0x22
 800981e:	4618      	mov	r0, r3
 8009820:	f000 ff3c 	bl	800a69c <CODEC_IO_Write>
 8009824:	4603      	mov	r3, r0
 8009826:	461a      	mov	r2, r3
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	4413      	add	r3, r2
 800982c:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 800982e:	89fb      	ldrh	r3, [r7, #14]
 8009830:	b2db      	uxtb	r3, r3
 8009832:	2200      	movs	r2, #0
 8009834:	2123      	movs	r1, #35	@ 0x23
 8009836:	4618      	mov	r0, r3
 8009838:	f000 ff30 	bl	800a69c <CODEC_IO_Write>
 800983c:	4603      	mov	r3, r0
 800983e:	461a      	mov	r2, r3
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	4413      	add	r3, r2
 8009844:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8009846:	89fb      	ldrh	r3, [r7, #14]
 8009848:	b2db      	uxtb	r3, r3
 800984a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800984e:	2136      	movs	r1, #54	@ 0x36
 8009850:	4618      	mov	r0, r3
 8009852:	f000 ff23 	bl	800a69c <CODEC_IO_Write>
 8009856:	4603      	mov	r3, r0
 8009858:	461a      	mov	r2, r3
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	4413      	add	r3, r2
 800985e:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8009860:	89fb      	ldrh	r3, [r7, #14]
 8009862:	b2db      	uxtb	r3, r3
 8009864:	f243 0203 	movw	r2, #12291	@ 0x3003
 8009868:	2101      	movs	r1, #1
 800986a:	4618      	mov	r0, r3
 800986c:	f000 ff16 	bl	800a69c <CODEC_IO_Write>
 8009870:	4603      	mov	r3, r0
 8009872:	461a      	mov	r2, r3
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	4413      	add	r3, r2
 8009878:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800987a:	8afb      	ldrh	r3, [r7, #22]
 800987c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009880:	d10d      	bne.n	800989e <wm8994_Init+0xaaa>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8009882:	89fb      	ldrh	r3, [r7, #14]
 8009884:	b2db      	uxtb	r3, r3
 8009886:	f240 2205 	movw	r2, #517	@ 0x205
 800988a:	2151      	movs	r1, #81	@ 0x51
 800988c:	4618      	mov	r0, r3
 800988e:	f000 ff05 	bl	800a69c <CODEC_IO_Write>
 8009892:	4603      	mov	r3, r0
 8009894:	461a      	mov	r2, r3
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	4413      	add	r3, r2
 800989a:	61fb      	str	r3, [r7, #28]
 800989c:	e00b      	b.n	80098b6 <wm8994_Init+0xac2>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 800989e:	89fb      	ldrh	r3, [r7, #14]
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	2205      	movs	r2, #5
 80098a4:	2151      	movs	r1, #81	@ 0x51
 80098a6:	4618      	mov	r0, r3
 80098a8:	f000 fef8 	bl	800a69c <CODEC_IO_Write>
 80098ac:	4603      	mov	r3, r0
 80098ae:	461a      	mov	r2, r3
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	4413      	add	r3, r2
 80098b4:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80098b6:	8b7b      	ldrh	r3, [r7, #26]
 80098b8:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 80098bc:	f043 0303 	orr.w	r3, r3, #3
 80098c0:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80098c2:	89fb      	ldrh	r3, [r7, #14]
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	8b7a      	ldrh	r2, [r7, #26]
 80098c8:	2101      	movs	r1, #1
 80098ca:	4618      	mov	r0, r3
 80098cc:	f000 fee6 	bl	800a69c <CODEC_IO_Write>
 80098d0:	4603      	mov	r3, r0
 80098d2:	461a      	mov	r2, r3
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	4413      	add	r3, r2
 80098d8:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 80098da:	89fb      	ldrh	r3, [r7, #14]
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	2222      	movs	r2, #34	@ 0x22
 80098e0:	2160      	movs	r1, #96	@ 0x60
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 feda 	bl	800a69c <CODEC_IO_Write>
 80098e8:	4603      	mov	r3, r0
 80098ea:	461a      	mov	r2, r3
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	4413      	add	r3, r2
 80098f0:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 80098f2:	89fb      	ldrh	r3, [r7, #14]
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	f649 7225 	movw	r2, #40741	@ 0x9f25
 80098fa:	214c      	movs	r1, #76	@ 0x4c
 80098fc:	4618      	mov	r0, r3
 80098fe:	f000 fecd 	bl	800a69c <CODEC_IO_Write>
 8009902:	4603      	mov	r3, r0
 8009904:	461a      	mov	r2, r3
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	4413      	add	r3, r2
 800990a:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 800990c:	200f      	movs	r0, #15
 800990e:	f7fc fc8d 	bl	800622c <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8009912:	89fb      	ldrh	r3, [r7, #14]
 8009914:	b2db      	uxtb	r3, r3
 8009916:	2201      	movs	r2, #1
 8009918:	212d      	movs	r1, #45	@ 0x2d
 800991a:	4618      	mov	r0, r3
 800991c:	f000 febe 	bl	800a69c <CODEC_IO_Write>
 8009920:	4603      	mov	r3, r0
 8009922:	461a      	mov	r2, r3
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	4413      	add	r3, r2
 8009928:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 800992a:	89fb      	ldrh	r3, [r7, #14]
 800992c:	b2db      	uxtb	r3, r3
 800992e:	2201      	movs	r2, #1
 8009930:	212e      	movs	r1, #46	@ 0x2e
 8009932:	4618      	mov	r0, r3
 8009934:	f000 feb2 	bl	800a69c <CODEC_IO_Write>
 8009938:	4603      	mov	r3, r0
 800993a:	461a      	mov	r2, r3
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	4413      	add	r3, r2
 8009940:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8009942:	89fb      	ldrh	r3, [r7, #14]
 8009944:	b2db      	uxtb	r3, r3
 8009946:	f44f 724c 	mov.w	r2, #816	@ 0x330
 800994a:	2103      	movs	r1, #3
 800994c:	4618      	mov	r0, r3
 800994e:	f000 fea5 	bl	800a69c <CODEC_IO_Write>
 8009952:	4603      	mov	r3, r0
 8009954:	461a      	mov	r2, r3
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	4413      	add	r3, r2
 800995a:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 800995c:	89fb      	ldrh	r3, [r7, #14]
 800995e:	b2db      	uxtb	r3, r3
 8009960:	2233      	movs	r2, #51	@ 0x33
 8009962:	2154      	movs	r1, #84	@ 0x54
 8009964:	4618      	mov	r0, r3
 8009966:	f000 fe99 	bl	800a69c <CODEC_IO_Write>
 800996a:	4603      	mov	r3, r0
 800996c:	461a      	mov	r2, r3
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	4413      	add	r3, r2
 8009972:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8009974:	f240 1001 	movw	r0, #257	@ 0x101
 8009978:	f7fc fc58 	bl	800622c <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 800997c:	89fb      	ldrh	r3, [r7, #14]
 800997e:	b2db      	uxtb	r3, r3
 8009980:	22ee      	movs	r2, #238	@ 0xee
 8009982:	2160      	movs	r1, #96	@ 0x60
 8009984:	4618      	mov	r0, r3
 8009986:	f000 fe89 	bl	800a69c <CODEC_IO_Write>
 800998a:	4603      	mov	r3, r0
 800998c:	461a      	mov	r2, r3
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	4413      	add	r3, r2
 8009992:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8009994:	89fb      	ldrh	r3, [r7, #14]
 8009996:	b2db      	uxtb	r3, r3
 8009998:	22c0      	movs	r2, #192	@ 0xc0
 800999a:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 800999e:	4618      	mov	r0, r3
 80099a0:	f000 fe7c 	bl	800a69c <CODEC_IO_Write>
 80099a4:	4603      	mov	r3, r0
 80099a6:	461a      	mov	r2, r3
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	4413      	add	r3, r2
 80099ac:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 80099ae:	89fb      	ldrh	r3, [r7, #14]
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	22c0      	movs	r2, #192	@ 0xc0
 80099b4:	f240 6111 	movw	r1, #1553	@ 0x611
 80099b8:	4618      	mov	r0, r3
 80099ba:	f000 fe6f 	bl	800a69c <CODEC_IO_Write>
 80099be:	4603      	mov	r3, r0
 80099c0:	461a      	mov	r2, r3
 80099c2:	69fb      	ldr	r3, [r7, #28]
 80099c4:	4413      	add	r3, r2
 80099c6:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80099c8:	89fb      	ldrh	r3, [r7, #14]
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	2210      	movs	r2, #16
 80099ce:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80099d2:	4618      	mov	r0, r3
 80099d4:	f000 fe62 	bl	800a69c <CODEC_IO_Write>
 80099d8:	4603      	mov	r3, r0
 80099da:	461a      	mov	r2, r3
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	4413      	add	r3, r2
 80099e0:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 80099e2:	89fb      	ldrh	r3, [r7, #14]
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	22c0      	movs	r2, #192	@ 0xc0
 80099e8:	f240 6112 	movw	r1, #1554	@ 0x612
 80099ec:	4618      	mov	r0, r3
 80099ee:	f000 fe55 	bl	800a69c <CODEC_IO_Write>
 80099f2:	4603      	mov	r3, r0
 80099f4:	461a      	mov	r2, r3
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	4413      	add	r3, r2
 80099fa:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 80099fc:	89fb      	ldrh	r3, [r7, #14]
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	22c0      	movs	r2, #192	@ 0xc0
 8009a02:	f240 6113 	movw	r1, #1555	@ 0x613
 8009a06:	4618      	mov	r0, r3
 8009a08:	f000 fe48 	bl	800a69c <CODEC_IO_Write>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	461a      	mov	r2, r3
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	4413      	add	r3, r2
 8009a14:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8009a16:	89fb      	ldrh	r3, [r7, #14]
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	2210      	movs	r2, #16
 8009a1c:	f240 4122 	movw	r1, #1058	@ 0x422
 8009a20:	4618      	mov	r0, r3
 8009a22:	f000 fe3b 	bl	800a69c <CODEC_IO_Write>
 8009a26:	4603      	mov	r3, r0
 8009a28:	461a      	mov	r2, r3
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8009a30:	7afa      	ldrb	r2, [r7, #11]
 8009a32:	89fb      	ldrh	r3, [r7, #14]
 8009a34:	4611      	mov	r1, r2
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 f984 	bl	8009d44 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8009a3c:	8afb      	ldrh	r3, [r7, #22]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f000 80a6 	beq.w	8009b90 <wm8994_Init+0xd9c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8009a44:	8afb      	ldrh	r3, [r7, #22]
 8009a46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a4a:	d003      	beq.n	8009a54 <wm8994_Init+0xc60>
 8009a4c:	8afb      	ldrh	r3, [r7, #22]
 8009a4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a52:	d12b      	bne.n	8009aac <wm8994_Init+0xcb8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8009a54:	8b7b      	ldrh	r3, [r7, #26]
 8009a56:	f043 0313 	orr.w	r3, r3, #19
 8009a5a:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8009a5c:	89fb      	ldrh	r3, [r7, #14]
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	8b7a      	ldrh	r2, [r7, #26]
 8009a62:	2101      	movs	r1, #1
 8009a64:	4618      	mov	r0, r3
 8009a66:	f000 fe19 	bl	800a69c <CODEC_IO_Write>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	69fb      	ldr	r3, [r7, #28]
 8009a70:	4413      	add	r3, r2
 8009a72:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8009a74:	89fb      	ldrh	r3, [r7, #14]
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	2202      	movs	r2, #2
 8009a7a:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 fe0c 	bl	800a69c <CODEC_IO_Write>
 8009a84:	4603      	mov	r3, r0
 8009a86:	461a      	mov	r2, r3
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8009a8e:	89fb      	ldrh	r3, [r7, #14]
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8009a96:	f240 4111 	movw	r1, #1041	@ 0x411
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f000 fdfe 	bl	800a69c <CODEC_IO_Write>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	61fb      	str	r3, [r7, #28]
 8009aaa:	e06b      	b.n	8009b84 <wm8994_Init+0xd90>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8009aac:	8afb      	ldrh	r3, [r7, #22]
 8009aae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ab2:	d139      	bne.n	8009b28 <wm8994_Init+0xd34>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8009ab4:	8b7b      	ldrh	r3, [r7, #26]
 8009ab6:	f043 0313 	orr.w	r3, r3, #19
 8009aba:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8009abc:	89fb      	ldrh	r3, [r7, #14]
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	8b7a      	ldrh	r2, [r7, #26]
 8009ac2:	2101      	movs	r1, #1
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f000 fde9 	bl	800a69c <CODEC_IO_Write>
 8009aca:	4603      	mov	r3, r0
 8009acc:	461a      	mov	r2, r3
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8009ad4:	89fb      	ldrh	r3, [r7, #14]
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	2202      	movs	r2, #2
 8009ada:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 fddc 	bl	800a69c <CODEC_IO_Write>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	4413      	add	r3, r2
 8009aec:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8009aee:	89fb      	ldrh	r3, [r7, #14]
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8009af6:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8009afa:	4618      	mov	r0, r3
 8009afc:	f000 fdce 	bl	800a69c <CODEC_IO_Write>
 8009b00:	4603      	mov	r3, r0
 8009b02:	461a      	mov	r2, r3
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	4413      	add	r3, r2
 8009b08:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8009b0a:	89fb      	ldrh	r3, [r7, #14]
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8009b12:	f240 4111 	movw	r1, #1041	@ 0x411
 8009b16:	4618      	mov	r0, r3
 8009b18:	f000 fdc0 	bl	800a69c <CODEC_IO_Write>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	461a      	mov	r2, r3
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	4413      	add	r3, r2
 8009b24:	61fb      	str	r3, [r7, #28]
 8009b26:	e02d      	b.n	8009b84 <wm8994_Init+0xd90>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8009b28:	8afb      	ldrh	r3, [r7, #22]
 8009b2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b2e:	d003      	beq.n	8009b38 <wm8994_Init+0xd44>
 8009b30:	8afb      	ldrh	r3, [r7, #22]
 8009b32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b36:	d125      	bne.n	8009b84 <wm8994_Init+0xd90>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x008B);
 8009b38:	89fb      	ldrh	r3, [r7, #14]
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	228b      	movs	r2, #139	@ 0x8b
 8009b3e:	2118      	movs	r1, #24
 8009b40:	4618      	mov	r0, r3
 8009b42:	f000 fdab 	bl	800a69c <CODEC_IO_Write>
 8009b46:	4603      	mov	r3, r0
 8009b48:	461a      	mov	r2, r3
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x008B);
 8009b50:	89fb      	ldrh	r3, [r7, #14]
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	228b      	movs	r2, #139	@ 0x8b
 8009b56:	211a      	movs	r1, #26
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f000 fd9f 	bl	800a69c <CODEC_IO_Write>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	461a      	mov	r2, r3
 8009b62:	69fb      	ldr	r3, [r7, #28]
 8009b64:	4413      	add	r3, r2
 8009b66:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8009b68:	89fb      	ldrh	r3, [r7, #14]
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8009b70:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8009b74:	4618      	mov	r0, r3
 8009b76:	f000 fd91 	bl	800a69c <CODEC_IO_Write>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	69fb      	ldr	r3, [r7, #28]
 8009b80:	4413      	add	r3, r2
 8009b82:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8009b84:	7afa      	ldrb	r2, [r7, #11]
 8009b86:	89fb      	ldrh	r3, [r7, #14]
 8009b88:	4611      	mov	r1, r2
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f000 f8da 	bl	8009d44 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8009b90:	69fb      	ldr	r3, [r7, #28]
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3720      	adds	r7, #32
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop

08009b9c <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8009ba0:	f7fc fae6 	bl	8006170 <AUDIO_IO_DeInit>
}
 8009ba4:	bf00      	nop
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	4603      	mov	r3, r0
 8009bb0:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8009bb2:	f7fc fad3 	bl	800615c <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8009bb6:	88fb      	ldrh	r3, [r7, #6]
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	2100      	movs	r1, #0
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7fc fb09 	bl	80061d4 <AUDIO_IO_Read>
 8009bc2:	4603      	mov	r3, r0
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	6039      	str	r1, [r7, #0]
 8009bd6:	80fb      	strh	r3, [r7, #6]
 8009bd8:	4613      	mov	r3, r2
 8009bda:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8009be0:	88fb      	ldrh	r3, [r7, #6]
 8009be2:	2100      	movs	r1, #0
 8009be4:	4618      	mov	r0, r3
 8009be6:	f000 faf3 	bl	800a1d0 <wm8994_SetMute>
 8009bea:	4602      	mov	r2, r0
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	4413      	add	r3, r2
 8009bf0:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	4603      	mov	r3, r0
 8009c04:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8009c06:	2300      	movs	r3, #0
 8009c08:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8009c0a:	88fb      	ldrh	r3, [r7, #6]
 8009c0c:	2101      	movs	r1, #1
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f000 fade 	bl	800a1d0 <wm8994_SetMute>
 8009c14:	4602      	mov	r2, r0
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	4413      	add	r3, r2
 8009c1a:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8009c1c:	88fb      	ldrh	r3, [r7, #6]
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	2201      	movs	r2, #1
 8009c22:	2102      	movs	r1, #2
 8009c24:	4618      	mov	r0, r3
 8009c26:	f000 fd39 	bl	800a69c <CODEC_IO_Write>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	4413      	add	r3, r2
 8009c32:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8009c34:	68fb      	ldr	r3, [r7, #12]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b084      	sub	sp, #16
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	4603      	mov	r3, r0
 8009c46:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8009c4c:	88fb      	ldrh	r3, [r7, #6]
 8009c4e:	2100      	movs	r1, #0
 8009c50:	4618      	mov	r0, r3
 8009c52:	f000 fabd 	bl	800a1d0 <wm8994_SetMute>
 8009c56:	4602      	mov	r2, r0
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	4413      	add	r3, r2
 8009c5c:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3710      	adds	r7, #16
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	4603      	mov	r3, r0
 8009c70:	6039      	str	r1, [r7, #0]
 8009c72:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8009c74:	2300      	movs	r3, #0
 8009c76:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8009c78:	4b31      	ldr	r3, [pc, #196]	@ (8009d40 <wm8994_Stop+0xd8>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d05a      	beq.n	8009d36 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8009c80:	88fb      	ldrh	r3, [r7, #6]
 8009c82:	2101      	movs	r1, #1
 8009c84:	4618      	mov	r0, r3
 8009c86:	f000 faa3 	bl	800a1d0 <wm8994_SetMute>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	4413      	add	r3, r2
 8009c90:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	d04e      	beq.n	8009d36 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8009c98:	88fb      	ldrh	r3, [r7, #6]
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ca0:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f000 fcf9 	bl	800a69c <CODEC_IO_Write>
 8009caa:	4603      	mov	r3, r0
 8009cac:	461a      	mov	r2, r3
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8009cb4:	88fb      	ldrh	r3, [r7, #6]
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009cbc:	f240 4122 	movw	r1, #1058	@ 0x422
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f000 fceb 	bl	800a69c <CODEC_IO_Write>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	461a      	mov	r2, r3
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	4413      	add	r3, r2
 8009cce:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8009cd0:	88fb      	ldrh	r3, [r7, #6]
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	212d      	movs	r1, #45	@ 0x2d
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f000 fcdf 	bl	800a69c <CODEC_IO_Write>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8009ce8:	88fb      	ldrh	r3, [r7, #6]
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	2200      	movs	r2, #0
 8009cee:	212e      	movs	r1, #46	@ 0x2e
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f000 fcd3 	bl	800a69c <CODEC_IO_Write>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8009d00:	88fb      	ldrh	r3, [r7, #6]
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	2200      	movs	r2, #0
 8009d06:	2105      	movs	r1, #5
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f000 fcc7 	bl	800a69c <CODEC_IO_Write>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	461a      	mov	r2, r3
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	4413      	add	r3, r2
 8009d16:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8009d18:	88fb      	ldrh	r3, [r7, #6]
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	2100      	movs	r1, #0
 8009d20:	4618      	mov	r0, r3
 8009d22:	f000 fcbb 	bl	800a69c <CODEC_IO_Write>
 8009d26:	4603      	mov	r3, r0
 8009d28:	461a      	mov	r2, r3
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8009d30:	4b03      	ldr	r3, [pc, #12]	@ (8009d40 <wm8994_Stop+0xd8>)
 8009d32:	2200      	movs	r2, #0
 8009d34:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8009d36:	68fb      	ldr	r3, [r7, #12]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	200010a8 	.word	0x200010a8

08009d44 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	460a      	mov	r2, r1
 8009d4e:	80fb      	strh	r3, [r7, #6]
 8009d50:	4613      	mov	r3, r2
 8009d52:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8009d54:	2300      	movs	r3, #0
 8009d56:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8009d58:	797b      	ldrb	r3, [r7, #5]
 8009d5a:	2b64      	cmp	r3, #100	@ 0x64
 8009d5c:	d80b      	bhi.n	8009d76 <wm8994_SetVolume+0x32>
 8009d5e:	797a      	ldrb	r2, [r7, #5]
 8009d60:	4613      	mov	r3, r2
 8009d62:	019b      	lsls	r3, r3, #6
 8009d64:	1a9b      	subs	r3, r3, r2
 8009d66:	4a86      	ldr	r2, [pc, #536]	@ (8009f80 <wm8994_SetVolume+0x23c>)
 8009d68:	fb82 1203 	smull	r1, r2, r2, r3
 8009d6c:	1152      	asrs	r2, r2, #5
 8009d6e:	17db      	asrs	r3, r3, #31
 8009d70:	1ad3      	subs	r3, r2, r3
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	e000      	b.n	8009d78 <wm8994_SetVolume+0x34>
 8009d76:	2364      	movs	r3, #100	@ 0x64
 8009d78:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8009d7a:	4b82      	ldr	r3, [pc, #520]	@ (8009f84 <wm8994_SetVolume+0x240>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f000 809b 	beq.w	8009eba <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8009d84:	7afb      	ldrb	r3, [r7, #11]
 8009d86:	2b3e      	cmp	r3, #62	@ 0x3e
 8009d88:	d93d      	bls.n	8009e06 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8009d8a:	88fb      	ldrh	r3, [r7, #6]
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 fa1e 	bl	800a1d0 <wm8994_SetMute>
 8009d94:	4602      	mov	r2, r0
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	4413      	add	r3, r2
 8009d9a:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8009d9c:	88fb      	ldrh	r3, [r7, #6]
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	f240 127f 	movw	r2, #383	@ 0x17f
 8009da4:	211c      	movs	r1, #28
 8009da6:	4618      	mov	r0, r3
 8009da8:	f000 fc78 	bl	800a69c <CODEC_IO_Write>
 8009dac:	4603      	mov	r3, r0
 8009dae:	461a      	mov	r2, r3
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	4413      	add	r3, r2
 8009db4:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8009db6:	88fb      	ldrh	r3, [r7, #6]
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	f240 127f 	movw	r2, #383	@ 0x17f
 8009dbe:	211d      	movs	r1, #29
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f000 fc6b 	bl	800a69c <CODEC_IO_Write>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	461a      	mov	r2, r3
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	4413      	add	r3, r2
 8009dce:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8009dd0:	88fb      	ldrh	r3, [r7, #6]
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	f240 127f 	movw	r2, #383	@ 0x17f
 8009dd8:	2126      	movs	r1, #38	@ 0x26
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f000 fc5e 	bl	800a69c <CODEC_IO_Write>
 8009de0:	4603      	mov	r3, r0
 8009de2:	461a      	mov	r2, r3
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	4413      	add	r3, r2
 8009de8:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8009dea:	88fb      	ldrh	r3, [r7, #6]
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	f240 127f 	movw	r2, #383	@ 0x17f
 8009df2:	2127      	movs	r1, #39	@ 0x27
 8009df4:	4618      	mov	r0, r3
 8009df6:	f000 fc51 	bl	800a69c <CODEC_IO_Write>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	4413      	add	r3, r2
 8009e02:	60fb      	str	r3, [r7, #12]
 8009e04:	e059      	b.n	8009eba <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8009e06:	797b      	ldrb	r3, [r7, #5]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d109      	bne.n	8009e20 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8009e0c:	88fb      	ldrh	r3, [r7, #6]
 8009e0e:	2101      	movs	r1, #1
 8009e10:	4618      	mov	r0, r3
 8009e12:	f000 f9dd 	bl	800a1d0 <wm8994_SetMute>
 8009e16:	4602      	mov	r2, r0
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	60fb      	str	r3, [r7, #12]
 8009e1e:	e04c      	b.n	8009eba <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8009e20:	88fb      	ldrh	r3, [r7, #6]
 8009e22:	2100      	movs	r1, #0
 8009e24:	4618      	mov	r0, r3
 8009e26:	f000 f9d3 	bl	800a1d0 <wm8994_SetMute>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	4413      	add	r3, r2
 8009e30:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8009e32:	88fb      	ldrh	r3, [r7, #6]
 8009e34:	b2d8      	uxtb	r0, r3
 8009e36:	7afb      	ldrb	r3, [r7, #11]
 8009e38:	b21b      	sxth	r3, r3
 8009e3a:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8009e3e:	b21b      	sxth	r3, r3
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	461a      	mov	r2, r3
 8009e44:	211c      	movs	r1, #28
 8009e46:	f000 fc29 	bl	800a69c <CODEC_IO_Write>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	4413      	add	r3, r2
 8009e52:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8009e54:	88fb      	ldrh	r3, [r7, #6]
 8009e56:	b2d8      	uxtb	r0, r3
 8009e58:	7afb      	ldrb	r3, [r7, #11]
 8009e5a:	b21b      	sxth	r3, r3
 8009e5c:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8009e60:	b21b      	sxth	r3, r3
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	461a      	mov	r2, r3
 8009e66:	211d      	movs	r1, #29
 8009e68:	f000 fc18 	bl	800a69c <CODEC_IO_Write>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	461a      	mov	r2, r3
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	4413      	add	r3, r2
 8009e74:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8009e76:	88fb      	ldrh	r3, [r7, #6]
 8009e78:	b2d8      	uxtb	r0, r3
 8009e7a:	7afb      	ldrb	r3, [r7, #11]
 8009e7c:	b21b      	sxth	r3, r3
 8009e7e:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8009e82:	b21b      	sxth	r3, r3
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	461a      	mov	r2, r3
 8009e88:	2126      	movs	r1, #38	@ 0x26
 8009e8a:	f000 fc07 	bl	800a69c <CODEC_IO_Write>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	461a      	mov	r2, r3
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	4413      	add	r3, r2
 8009e96:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8009e98:	88fb      	ldrh	r3, [r7, #6]
 8009e9a:	b2d8      	uxtb	r0, r3
 8009e9c:	7afb      	ldrb	r3, [r7, #11]
 8009e9e:	b21b      	sxth	r3, r3
 8009ea0:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8009ea4:	b21b      	sxth	r3, r3
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	2127      	movs	r1, #39	@ 0x27
 8009eac:	f000 fbf6 	bl	800a69c <CODEC_IO_Write>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8009eba:	4b33      	ldr	r3, [pc, #204]	@ (8009f88 <wm8994_SetVolume+0x244>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d059      	beq.n	8009f76 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8009ec2:	797b      	ldrb	r3, [r7, #5]
 8009ec4:	2b63      	cmp	r3, #99	@ 0x63
 8009ec6:	d80c      	bhi.n	8009ee2 <wm8994_SetVolume+0x19e>
 8009ec8:	797a      	ldrb	r2, [r7, #5]
 8009eca:	4613      	mov	r3, r2
 8009ecc:	011b      	lsls	r3, r3, #4
 8009ece:	1a9b      	subs	r3, r3, r2
 8009ed0:	011b      	lsls	r3, r3, #4
 8009ed2:	4a2b      	ldr	r2, [pc, #172]	@ (8009f80 <wm8994_SetVolume+0x23c>)
 8009ed4:	fb82 1203 	smull	r1, r2, r2, r3
 8009ed8:	1152      	asrs	r2, r2, #5
 8009eda:	17db      	asrs	r3, r3, #31
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	e000      	b.n	8009ee4 <wm8994_SetVolume+0x1a0>
 8009ee2:	23ef      	movs	r3, #239	@ 0xef
 8009ee4:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8009ee6:	88fb      	ldrh	r3, [r7, #6]
 8009ee8:	b2d8      	uxtb	r0, r3
 8009eea:	7afb      	ldrb	r3, [r7, #11]
 8009eec:	b21b      	sxth	r3, r3
 8009eee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ef2:	b21b      	sxth	r3, r3
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009efc:	f000 fbce 	bl	800a69c <CODEC_IO_Write>
 8009f00:	4603      	mov	r3, r0
 8009f02:	461a      	mov	r2, r3
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	4413      	add	r3, r2
 8009f08:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8009f0a:	88fb      	ldrh	r3, [r7, #6]
 8009f0c:	b2d8      	uxtb	r0, r3
 8009f0e:	7afb      	ldrb	r3, [r7, #11]
 8009f10:	b21b      	sxth	r3, r3
 8009f12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f16:	b21b      	sxth	r3, r3
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	f240 4101 	movw	r1, #1025	@ 0x401
 8009f20:	f000 fbbc 	bl	800a69c <CODEC_IO_Write>
 8009f24:	4603      	mov	r3, r0
 8009f26:	461a      	mov	r2, r3
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8009f2e:	88fb      	ldrh	r3, [r7, #6]
 8009f30:	b2d8      	uxtb	r0, r3
 8009f32:	7afb      	ldrb	r3, [r7, #11]
 8009f34:	b21b      	sxth	r3, r3
 8009f36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f3a:	b21b      	sxth	r3, r3
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	461a      	mov	r2, r3
 8009f40:	f240 4104 	movw	r1, #1028	@ 0x404
 8009f44:	f000 fbaa 	bl	800a69c <CODEC_IO_Write>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	4413      	add	r3, r2
 8009f50:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8009f52:	88fb      	ldrh	r3, [r7, #6]
 8009f54:	b2d8      	uxtb	r0, r3
 8009f56:	7afb      	ldrb	r3, [r7, #11]
 8009f58:	b21b      	sxth	r3, r3
 8009f5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f5e:	b21b      	sxth	r3, r3
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	461a      	mov	r2, r3
 8009f64:	f240 4105 	movw	r1, #1029	@ 0x405
 8009f68:	f000 fb98 	bl	800a69c <CODEC_IO_Write>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	461a      	mov	r2, r3
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	4413      	add	r3, r2
 8009f74:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8009f76:	68fb      	ldr	r3, [r7, #12]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3710      	adds	r7, #16
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	51eb851f 	.word	0x51eb851f
 8009f84:	200010a8 	.word	0x200010a8
 8009f88:	200010ac 	.word	0x200010ac

08009f8c <wm8994_SetVolumeOut>:
uint32_t wm8994_SetVolumeOut(uint16_t DeviceAddr, uint8_t Volume) {
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	4603      	mov	r3, r0
 8009f94:	460a      	mov	r2, r1
 8009f96:	80fb      	strh	r3, [r7, #6]
 8009f98:	4613      	mov	r3, r2
 8009f9a:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	60fb      	str	r3, [r7, #12]
	uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8009fa0:	797b      	ldrb	r3, [r7, #5]
 8009fa2:	2b64      	cmp	r3, #100	@ 0x64
 8009fa4:	d80b      	bhi.n	8009fbe <wm8994_SetVolumeOut+0x32>
 8009fa6:	797a      	ldrb	r2, [r7, #5]
 8009fa8:	4613      	mov	r3, r2
 8009faa:	019b      	lsls	r3, r3, #6
 8009fac:	1a9b      	subs	r3, r3, r2
 8009fae:	4a57      	ldr	r2, [pc, #348]	@ (800a10c <wm8994_SetVolumeOut+0x180>)
 8009fb0:	fb82 1203 	smull	r1, r2, r2, r3
 8009fb4:	1152      	asrs	r2, r2, #5
 8009fb6:	17db      	asrs	r3, r3, #31
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	e000      	b.n	8009fc0 <wm8994_SetVolumeOut+0x34>
 8009fbe:	2364      	movs	r3, #100	@ 0x64
 8009fc0:	72fb      	strb	r3, [r7, #11]

	/* Output volume */
	if (outputEnabled != 0) {
 8009fc2:	4b53      	ldr	r3, [pc, #332]	@ (800a110 <wm8994_SetVolumeOut+0x184>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	f000 809b 	beq.w	800a102 <wm8994_SetVolumeOut+0x176>
		if (convertedvol > 0x3E) {
 8009fcc:	7afb      	ldrb	r3, [r7, #11]
 8009fce:	2b3e      	cmp	r3, #62	@ 0x3e
 8009fd0:	d93d      	bls.n	800a04e <wm8994_SetVolumeOut+0xc2>
			/* Unmute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8009fd2:	88fb      	ldrh	r3, [r7, #6]
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f000 f8fa 	bl	800a1d0 <wm8994_SetMute>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	60fb      	str	r3, [r7, #12]

			/* Left Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8009fe4:	88fb      	ldrh	r3, [r7, #6]
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	f240 127f 	movw	r2, #383	@ 0x17f
 8009fec:	211c      	movs	r1, #28
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f000 fb54 	bl	800a69c <CODEC_IO_Write>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	60fb      	str	r3, [r7, #12]

			/* Right Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8009ffe:	88fb      	ldrh	r3, [r7, #6]
 800a000:	b2db      	uxtb	r3, r3
 800a002:	f240 127f 	movw	r2, #383	@ 0x17f
 800a006:	211d      	movs	r1, #29
 800a008:	4618      	mov	r0, r3
 800a00a:	f000 fb47 	bl	800a69c <CODEC_IO_Write>
 800a00e:	4603      	mov	r3, r0
 800a010:	461a      	mov	r2, r3
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	4413      	add	r3, r2
 800a016:	60fb      	str	r3, [r7, #12]

			/* Left Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 800a018:	88fb      	ldrh	r3, [r7, #6]
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	f240 127f 	movw	r2, #383	@ 0x17f
 800a020:	2126      	movs	r1, #38	@ 0x26
 800a022:	4618      	mov	r0, r3
 800a024:	f000 fb3a 	bl	800a69c <CODEC_IO_Write>
 800a028:	4603      	mov	r3, r0
 800a02a:	461a      	mov	r2, r3
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	4413      	add	r3, r2
 800a030:	60fb      	str	r3, [r7, #12]

			/* Right Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 800a032:	88fb      	ldrh	r3, [r7, #6]
 800a034:	b2db      	uxtb	r3, r3
 800a036:	f240 127f 	movw	r2, #383	@ 0x17f
 800a03a:	2127      	movs	r1, #39	@ 0x27
 800a03c:	4618      	mov	r0, r3
 800a03e:	f000 fb2d 	bl	800a69c <CODEC_IO_Write>
 800a042:	4603      	mov	r3, r0
 800a044:	461a      	mov	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	4413      	add	r3, r2
 800a04a:	60fb      	str	r3, [r7, #12]
 800a04c:	e059      	b.n	800a102 <wm8994_SetVolumeOut+0x176>
		} else if (Volume == 0) {
 800a04e:	797b      	ldrb	r3, [r7, #5]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d109      	bne.n	800a068 <wm8994_SetVolumeOut+0xdc>
			/* Mute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800a054:	88fb      	ldrh	r3, [r7, #6]
 800a056:	2101      	movs	r1, #1
 800a058:	4618      	mov	r0, r3
 800a05a:	f000 f8b9 	bl	800a1d0 <wm8994_SetMute>
 800a05e:	4602      	mov	r2, r0
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	4413      	add	r3, r2
 800a064:	60fb      	str	r3, [r7, #12]
 800a066:	e04c      	b.n	800a102 <wm8994_SetVolumeOut+0x176>
		} else {
			/* Unmute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800a068:	88fb      	ldrh	r3, [r7, #6]
 800a06a:	2100      	movs	r1, #0
 800a06c:	4618      	mov	r0, r3
 800a06e:	f000 f8af 	bl	800a1d0 <wm8994_SetMute>
 800a072:	4602      	mov	r2, r0
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	4413      	add	r3, r2
 800a078:	60fb      	str	r3, [r7, #12]

			/* Left Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800a07a:	88fb      	ldrh	r3, [r7, #6]
 800a07c:	b2d8      	uxtb	r0, r3
 800a07e:	7afb      	ldrb	r3, [r7, #11]
 800a080:	b21b      	sxth	r3, r3
 800a082:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800a086:	b21b      	sxth	r3, r3
 800a088:	b29b      	uxth	r3, r3
 800a08a:	461a      	mov	r2, r3
 800a08c:	211c      	movs	r1, #28
 800a08e:	f000 fb05 	bl	800a69c <CODEC_IO_Write>
 800a092:	4603      	mov	r3, r0
 800a094:	461a      	mov	r2, r3
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	4413      	add	r3, r2
 800a09a:	60fb      	str	r3, [r7, #12]

			/* Right Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 800a09c:	88fb      	ldrh	r3, [r7, #6]
 800a09e:	b2d8      	uxtb	r0, r3
 800a0a0:	7afb      	ldrb	r3, [r7, #11]
 800a0a2:	b21b      	sxth	r3, r3
 800a0a4:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800a0a8:	b21b      	sxth	r3, r3
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	211d      	movs	r1, #29
 800a0b0:	f000 faf4 	bl	800a69c <CODEC_IO_Write>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	60fb      	str	r3, [r7, #12]

			/* Left Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 800a0be:	88fb      	ldrh	r3, [r7, #6]
 800a0c0:	b2d8      	uxtb	r0, r3
 800a0c2:	7afb      	ldrb	r3, [r7, #11]
 800a0c4:	b21b      	sxth	r3, r3
 800a0c6:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800a0ca:	b21b      	sxth	r3, r3
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	2126      	movs	r1, #38	@ 0x26
 800a0d2:	f000 fae3 	bl	800a69c <CODEC_IO_Write>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	461a      	mov	r2, r3
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	4413      	add	r3, r2
 800a0de:	60fb      	str	r3, [r7, #12]

			/* Right Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 800a0e0:	88fb      	ldrh	r3, [r7, #6]
 800a0e2:	b2d8      	uxtb	r0, r3
 800a0e4:	7afb      	ldrb	r3, [r7, #11]
 800a0e6:	b21b      	sxth	r3, r3
 800a0e8:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800a0ec:	b21b      	sxth	r3, r3
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	2127      	movs	r1, #39	@ 0x27
 800a0f4:	f000 fad2 	bl	800a69c <CODEC_IO_Write>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	4413      	add	r3, r2
 800a100:	60fb      	str	r3, [r7, #12]
		}
	}
	return counter;
 800a102:	68fb      	ldr	r3, [r7, #12]
}
 800a104:	4618      	mov	r0, r3
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	51eb851f 	.word	0x51eb851f
 800a110:	200010a8 	.word	0x200010a8

0800a114 <wm8994_SetVolumeIn>:
uint32_t wm8994_SetVolumeIn(uint16_t DeviceAddr, uint8_t Volume) {
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	4603      	mov	r3, r0
 800a11c:	460a      	mov	r2, r1
 800a11e:	80fb      	strh	r3, [r7, #6]
 800a120:	4613      	mov	r3, r2
 800a122:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 800a124:	2300      	movs	r3, #0
 800a126:	60fb      	str	r3, [r7, #12]
	if (inputEnabled != 0) {
 800a128:	4b28      	ldr	r3, [pc, #160]	@ (800a1cc <wm8994_SetVolumeIn+0xb8>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d047      	beq.n	800a1c0 <wm8994_SetVolumeIn+0xac>
		// B1 = 0dB
		/* Left AIF1 ADC1 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x400, Volume | 0x100);
 800a130:	88fb      	ldrh	r3, [r7, #6]
 800a132:	b2d8      	uxtb	r0, r3
 800a134:	797b      	ldrb	r3, [r7, #5]
 800a136:	b21b      	sxth	r3, r3
 800a138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a13c:	b21b      	sxth	r3, r3
 800a13e:	b29b      	uxth	r3, r3
 800a140:	461a      	mov	r2, r3
 800a142:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a146:	f000 faa9 	bl	800a69c <CODEC_IO_Write>
 800a14a:	4603      	mov	r3, r0
 800a14c:	461a      	mov	r2, r3
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	4413      	add	r3, r2
 800a152:	60fb      	str	r3, [r7, #12]

		/* Right AIF1 ADC1 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x401, Volume | 0x100);
 800a154:	88fb      	ldrh	r3, [r7, #6]
 800a156:	b2d8      	uxtb	r0, r3
 800a158:	797b      	ldrb	r3, [r7, #5]
 800a15a:	b21b      	sxth	r3, r3
 800a15c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a160:	b21b      	sxth	r3, r3
 800a162:	b29b      	uxth	r3, r3
 800a164:	461a      	mov	r2, r3
 800a166:	f240 4101 	movw	r1, #1025	@ 0x401
 800a16a:	f000 fa97 	bl	800a69c <CODEC_IO_Write>
 800a16e:	4603      	mov	r3, r0
 800a170:	461a      	mov	r2, r3
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	4413      	add	r3, r2
 800a176:	60fb      	str	r3, [r7, #12]

		/* Left AIF1 ADC2 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x404, Volume | 0x100);
 800a178:	88fb      	ldrh	r3, [r7, #6]
 800a17a:	b2d8      	uxtb	r0, r3
 800a17c:	797b      	ldrb	r3, [r7, #5]
 800a17e:	b21b      	sxth	r3, r3
 800a180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a184:	b21b      	sxth	r3, r3
 800a186:	b29b      	uxth	r3, r3
 800a188:	461a      	mov	r2, r3
 800a18a:	f240 4104 	movw	r1, #1028	@ 0x404
 800a18e:	f000 fa85 	bl	800a69c <CODEC_IO_Write>
 800a192:	4603      	mov	r3, r0
 800a194:	461a      	mov	r2, r3
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	4413      	add	r3, r2
 800a19a:	60fb      	str	r3, [r7, #12]

		/* Right AIF1 ADC2 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x405, Volume | 0x100);
 800a19c:	88fb      	ldrh	r3, [r7, #6]
 800a19e:	b2d8      	uxtb	r0, r3
 800a1a0:	797b      	ldrb	r3, [r7, #5]
 800a1a2:	b21b      	sxth	r3, r3
 800a1a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1a8:	b21b      	sxth	r3, r3
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	f240 4105 	movw	r1, #1029	@ 0x405
 800a1b2:	f000 fa73 	bl	800a69c <CODEC_IO_Write>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	4413      	add	r3, r2
 800a1be:	60fb      	str	r3, [r7, #12]
	}
	return counter;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	200010ac 	.word	0x200010ac

0800a1d0 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	6039      	str	r1, [r7, #0]
 800a1da:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 800a1e0:	4b21      	ldr	r3, [pc, #132]	@ (800a268 <wm8994_SetMute+0x98>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d039      	beq.n	800a25c <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d11c      	bne.n	800a228 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800a1ee:	88fb      	ldrh	r3, [r7, #6]
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a1f6:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f000 fa4e 	bl	800a69c <CODEC_IO_Write>
 800a200:	4603      	mov	r3, r0
 800a202:	461a      	mov	r2, r3
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	4413      	add	r3, r2
 800a208:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 800a20a:	88fb      	ldrh	r3, [r7, #6]
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a212:	f240 4122 	movw	r1, #1058	@ 0x422
 800a216:	4618      	mov	r0, r3
 800a218:	f000 fa40 	bl	800a69c <CODEC_IO_Write>
 800a21c:	4603      	mov	r3, r0
 800a21e:	461a      	mov	r2, r3
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	4413      	add	r3, r2
 800a224:	60fb      	str	r3, [r7, #12]
 800a226:	e019      	b.n	800a25c <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 800a228:	88fb      	ldrh	r3, [r7, #6]
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	2210      	movs	r2, #16
 800a22e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800a232:	4618      	mov	r0, r3
 800a234:	f000 fa32 	bl	800a69c <CODEC_IO_Write>
 800a238:	4603      	mov	r3, r0
 800a23a:	461a      	mov	r2, r3
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	4413      	add	r3, r2
 800a240:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800a242:	88fb      	ldrh	r3, [r7, #6]
 800a244:	b2db      	uxtb	r3, r3
 800a246:	2210      	movs	r2, #16
 800a248:	f240 4122 	movw	r1, #1058	@ 0x422
 800a24c:	4618      	mov	r0, r3
 800a24e:	f000 fa25 	bl	800a69c <CODEC_IO_Write>
 800a252:	4603      	mov	r3, r0
 800a254:	461a      	mov	r2, r3
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	4413      	add	r3, r2
 800a25a:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 800a25c:	68fb      	ldr	r3, [r7, #12]
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	200010a8 	.word	0x200010a8

0800a26c <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	4603      	mov	r3, r0
 800a274:	460a      	mov	r2, r1
 800a276:	80fb      	strh	r3, [r7, #6]
 800a278:	4613      	mov	r3, r2
 800a27a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 800a27c:	2300      	movs	r3, #0
 800a27e:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 800a280:	797b      	ldrb	r3, [r7, #5]
 800a282:	2b03      	cmp	r3, #3
 800a284:	f000 808c 	beq.w	800a3a0 <wm8994_SetOutputMode+0x134>
 800a288:	2b03      	cmp	r3, #3
 800a28a:	f300 80cb 	bgt.w	800a424 <wm8994_SetOutputMode+0x1b8>
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d002      	beq.n	800a298 <wm8994_SetOutputMode+0x2c>
 800a292:	2b02      	cmp	r3, #2
 800a294:	d042      	beq.n	800a31c <wm8994_SetOutputMode+0xb0>
 800a296:	e0c5      	b.n	800a424 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 800a298:	88fb      	ldrh	r3, [r7, #6]
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	f640 420c 	movw	r2, #3084	@ 0xc0c
 800a2a0:	2105      	movs	r1, #5
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f000 f9fa 	bl	800a69c <CODEC_IO_Write>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800a2b2:	88fb      	ldrh	r3, [r7, #6]
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f240 6101 	movw	r1, #1537	@ 0x601
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f000 f9ed 	bl	800a69c <CODEC_IO_Write>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 800a2cc:	88fb      	ldrh	r3, [r7, #6]
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f240 6102 	movw	r1, #1538	@ 0x602
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f000 f9e0 	bl	800a69c <CODEC_IO_Write>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	461a      	mov	r2, r3
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800a2e6:	88fb      	ldrh	r3, [r7, #6]
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	2202      	movs	r2, #2
 800a2ec:	f240 6104 	movw	r1, #1540	@ 0x604
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f000 f9d3 	bl	800a69c <CODEC_IO_Write>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800a300:	88fb      	ldrh	r3, [r7, #6]
 800a302:	b2db      	uxtb	r3, r3
 800a304:	2202      	movs	r2, #2
 800a306:	f240 6105 	movw	r1, #1541	@ 0x605
 800a30a:	4618      	mov	r0, r3
 800a30c:	f000 f9c6 	bl	800a69c <CODEC_IO_Write>
 800a310:	4603      	mov	r3, r0
 800a312:	461a      	mov	r2, r3
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	4413      	add	r3, r2
 800a318:	60fb      	str	r3, [r7, #12]
    break;
 800a31a:	e0c5      	b.n	800a4a8 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800a31c:	88fb      	ldrh	r3, [r7, #6]
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	f240 3203 	movw	r2, #771	@ 0x303
 800a324:	2105      	movs	r1, #5
 800a326:	4618      	mov	r0, r3
 800a328:	f000 f9b8 	bl	800a69c <CODEC_IO_Write>
 800a32c:	4603      	mov	r3, r0
 800a32e:	461a      	mov	r2, r3
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	4413      	add	r3, r2
 800a334:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800a336:	88fb      	ldrh	r3, [r7, #6]
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	2201      	movs	r2, #1
 800a33c:	f240 6101 	movw	r1, #1537	@ 0x601
 800a340:	4618      	mov	r0, r3
 800a342:	f000 f9ab 	bl	800a69c <CODEC_IO_Write>
 800a346:	4603      	mov	r3, r0
 800a348:	461a      	mov	r2, r3
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	4413      	add	r3, r2
 800a34e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800a350:	88fb      	ldrh	r3, [r7, #6]
 800a352:	b2db      	uxtb	r3, r3
 800a354:	2201      	movs	r2, #1
 800a356:	f240 6102 	movw	r1, #1538	@ 0x602
 800a35a:	4618      	mov	r0, r3
 800a35c:	f000 f99e 	bl	800a69c <CODEC_IO_Write>
 800a360:	4603      	mov	r3, r0
 800a362:	461a      	mov	r2, r3
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	4413      	add	r3, r2
 800a368:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800a36a:	88fb      	ldrh	r3, [r7, #6]
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2200      	movs	r2, #0
 800a370:	f240 6104 	movw	r1, #1540	@ 0x604
 800a374:	4618      	mov	r0, r3
 800a376:	f000 f991 	bl	800a69c <CODEC_IO_Write>
 800a37a:	4603      	mov	r3, r0
 800a37c:	461a      	mov	r2, r3
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	4413      	add	r3, r2
 800a382:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800a384:	88fb      	ldrh	r3, [r7, #6]
 800a386:	b2db      	uxtb	r3, r3
 800a388:	2200      	movs	r2, #0
 800a38a:	f240 6105 	movw	r1, #1541	@ 0x605
 800a38e:	4618      	mov	r0, r3
 800a390:	f000 f984 	bl	800a69c <CODEC_IO_Write>
 800a394:	4603      	mov	r3, r0
 800a396:	461a      	mov	r2, r3
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	4413      	add	r3, r2
 800a39c:	60fb      	str	r3, [r7, #12]
    break;
 800a39e:	e083      	b.n	800a4a8 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800a3a0:	88fb      	ldrh	r3, [r7, #6]
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	f640 720f 	movw	r2, #3855	@ 0xf0f
 800a3a8:	2105      	movs	r1, #5
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f000 f976 	bl	800a69c <CODEC_IO_Write>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800a3ba:	88fb      	ldrh	r3, [r7, #6]
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f240 6101 	movw	r1, #1537	@ 0x601
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f000 f969 	bl	800a69c <CODEC_IO_Write>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800a3d4:	88fb      	ldrh	r3, [r7, #6]
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	2201      	movs	r2, #1
 800a3da:	f240 6102 	movw	r1, #1538	@ 0x602
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f000 f95c 	bl	800a69c <CODEC_IO_Write>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800a3ee:	88fb      	ldrh	r3, [r7, #6]
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	2202      	movs	r2, #2
 800a3f4:	f240 6104 	movw	r1, #1540	@ 0x604
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f000 f94f 	bl	800a69c <CODEC_IO_Write>
 800a3fe:	4603      	mov	r3, r0
 800a400:	461a      	mov	r2, r3
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	4413      	add	r3, r2
 800a406:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800a408:	88fb      	ldrh	r3, [r7, #6]
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	2202      	movs	r2, #2
 800a40e:	f240 6105 	movw	r1, #1541	@ 0x605
 800a412:	4618      	mov	r0, r3
 800a414:	f000 f942 	bl	800a69c <CODEC_IO_Write>
 800a418:	4603      	mov	r3, r0
 800a41a:	461a      	mov	r2, r3
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	4413      	add	r3, r2
 800a420:	60fb      	str	r3, [r7, #12]
    break;
 800a422:	e041      	b.n	800a4a8 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800a424:	88fb      	ldrh	r3, [r7, #6]
 800a426:	b2db      	uxtb	r3, r3
 800a428:	f240 3203 	movw	r2, #771	@ 0x303
 800a42c:	2105      	movs	r1, #5
 800a42e:	4618      	mov	r0, r3
 800a430:	f000 f934 	bl	800a69c <CODEC_IO_Write>
 800a434:	4603      	mov	r3, r0
 800a436:	461a      	mov	r2, r3
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	4413      	add	r3, r2
 800a43c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800a43e:	88fb      	ldrh	r3, [r7, #6]
 800a440:	b2db      	uxtb	r3, r3
 800a442:	2201      	movs	r2, #1
 800a444:	f240 6101 	movw	r1, #1537	@ 0x601
 800a448:	4618      	mov	r0, r3
 800a44a:	f000 f927 	bl	800a69c <CODEC_IO_Write>
 800a44e:	4603      	mov	r3, r0
 800a450:	461a      	mov	r2, r3
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	4413      	add	r3, r2
 800a456:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800a458:	88fb      	ldrh	r3, [r7, #6]
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	2201      	movs	r2, #1
 800a45e:	f240 6102 	movw	r1, #1538	@ 0x602
 800a462:	4618      	mov	r0, r3
 800a464:	f000 f91a 	bl	800a69c <CODEC_IO_Write>
 800a468:	4603      	mov	r3, r0
 800a46a:	461a      	mov	r2, r3
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	4413      	add	r3, r2
 800a470:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800a472:	88fb      	ldrh	r3, [r7, #6]
 800a474:	b2db      	uxtb	r3, r3
 800a476:	2200      	movs	r2, #0
 800a478:	f240 6104 	movw	r1, #1540	@ 0x604
 800a47c:	4618      	mov	r0, r3
 800a47e:	f000 f90d 	bl	800a69c <CODEC_IO_Write>
 800a482:	4603      	mov	r3, r0
 800a484:	461a      	mov	r2, r3
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	4413      	add	r3, r2
 800a48a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800a48c:	88fb      	ldrh	r3, [r7, #6]
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	2200      	movs	r2, #0
 800a492:	f240 6105 	movw	r1, #1541	@ 0x605
 800a496:	4618      	mov	r0, r3
 800a498:	f000 f900 	bl	800a69c <CODEC_IO_Write>
 800a49c:	4603      	mov	r3, r0
 800a49e:	461a      	mov	r2, r3
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	60fb      	str	r3, [r7, #12]
    break;    
 800a4a6:	bf00      	nop
  }  
  return counter;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3710      	adds	r7, #16
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
	...

0800a4b4 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	6039      	str	r1, [r7, #0]
 800a4be:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	4a64      	ldr	r2, [pc, #400]	@ (800a658 <wm8994_SetFrequency+0x1a4>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d079      	beq.n	800a5c0 <wm8994_SetFrequency+0x10c>
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	4a62      	ldr	r2, [pc, #392]	@ (800a658 <wm8994_SetFrequency+0x1a4>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	f200 80ad 	bhi.w	800a630 <wm8994_SetFrequency+0x17c>
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d061      	beq.n	800a5a4 <wm8994_SetFrequency+0xf0>
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	f200 80a2 	bhi.w	800a630 <wm8994_SetFrequency+0x17c>
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	f000 808e 	beq.w	800a614 <wm8994_SetFrequency+0x160>
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800a4fe:	4293      	cmp	r3, r2
 800a500:	f200 8096 	bhi.w	800a630 <wm8994_SetFrequency+0x17c>
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800a50a:	d03d      	beq.n	800a588 <wm8994_SetFrequency+0xd4>
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800a512:	f200 808d 	bhi.w	800a630 <wm8994_SetFrequency+0x17c>
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	f245 6222 	movw	r2, #22050	@ 0x5622
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d06b      	beq.n	800a5f8 <wm8994_SetFrequency+0x144>
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	f245 6222 	movw	r2, #22050	@ 0x5622
 800a526:	4293      	cmp	r3, r2
 800a528:	f200 8082 	bhi.w	800a630 <wm8994_SetFrequency+0x17c>
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800a532:	d01b      	beq.n	800a56c <wm8994_SetFrequency+0xb8>
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800a53a:	d879      	bhi.n	800a630 <wm8994_SetFrequency+0x17c>
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800a542:	d005      	beq.n	800a550 <wm8994_SetFrequency+0x9c>
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d046      	beq.n	800a5dc <wm8994_SetFrequency+0x128>
 800a54e:	e06f      	b.n	800a630 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 800a550:	88fb      	ldrh	r3, [r7, #6]
 800a552:	b2db      	uxtb	r3, r3
 800a554:	2203      	movs	r2, #3
 800a556:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a55a:	4618      	mov	r0, r3
 800a55c:	f000 f89e 	bl	800a69c <CODEC_IO_Write>
 800a560:	4603      	mov	r3, r0
 800a562:	461a      	mov	r2, r3
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	4413      	add	r3, r2
 800a568:	60fb      	str	r3, [r7, #12]
    break;
 800a56a:	e06f      	b.n	800a64c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800a56c:	88fb      	ldrh	r3, [r7, #6]
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	2233      	movs	r2, #51	@ 0x33
 800a572:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a576:	4618      	mov	r0, r3
 800a578:	f000 f890 	bl	800a69c <CODEC_IO_Write>
 800a57c:	4603      	mov	r3, r0
 800a57e:	461a      	mov	r2, r3
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	4413      	add	r3, r2
 800a584:	60fb      	str	r3, [r7, #12]
    break;
 800a586:	e061      	b.n	800a64c <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800a588:	88fb      	ldrh	r3, [r7, #6]
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	2263      	movs	r2, #99	@ 0x63
 800a58e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a592:	4618      	mov	r0, r3
 800a594:	f000 f882 	bl	800a69c <CODEC_IO_Write>
 800a598:	4603      	mov	r3, r0
 800a59a:	461a      	mov	r2, r3
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	4413      	add	r3, r2
 800a5a0:	60fb      	str	r3, [r7, #12]
    break;
 800a5a2:	e053      	b.n	800a64c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800a5a4:	88fb      	ldrh	r3, [r7, #6]
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	2283      	movs	r2, #131	@ 0x83
 800a5aa:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f000 f874 	bl	800a69c <CODEC_IO_Write>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	60fb      	str	r3, [r7, #12]
    break;
 800a5be:	e045      	b.n	800a64c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800a5c0:	88fb      	ldrh	r3, [r7, #6]
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	22a3      	movs	r2, #163	@ 0xa3
 800a5c6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f000 f866 	bl	800a69c <CODEC_IO_Write>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	60fb      	str	r3, [r7, #12]
    break;
 800a5da:	e037      	b.n	800a64c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800a5dc:	88fb      	ldrh	r3, [r7, #6]
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	2213      	movs	r2, #19
 800a5e2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f000 f858 	bl	800a69c <CODEC_IO_Write>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	60fb      	str	r3, [r7, #12]
    break;
 800a5f6:	e029      	b.n	800a64c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800a5f8:	88fb      	ldrh	r3, [r7, #6]
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	2243      	movs	r2, #67	@ 0x43
 800a5fe:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a602:	4618      	mov	r0, r3
 800a604:	f000 f84a 	bl	800a69c <CODEC_IO_Write>
 800a608:	4603      	mov	r3, r0
 800a60a:	461a      	mov	r2, r3
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	4413      	add	r3, r2
 800a610:	60fb      	str	r3, [r7, #12]
    break;
 800a612:	e01b      	b.n	800a64c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800a614:	88fb      	ldrh	r3, [r7, #6]
 800a616:	b2db      	uxtb	r3, r3
 800a618:	2273      	movs	r2, #115	@ 0x73
 800a61a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a61e:	4618      	mov	r0, r3
 800a620:	f000 f83c 	bl	800a69c <CODEC_IO_Write>
 800a624:	4603      	mov	r3, r0
 800a626:	461a      	mov	r2, r3
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	4413      	add	r3, r2
 800a62c:	60fb      	str	r3, [r7, #12]
    break; 
 800a62e:	e00d      	b.n	800a64c <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800a630:	88fb      	ldrh	r3, [r7, #6]
 800a632:	b2db      	uxtb	r3, r3
 800a634:	2283      	movs	r2, #131	@ 0x83
 800a636:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a63a:	4618      	mov	r0, r3
 800a63c:	f000 f82e 	bl	800a69c <CODEC_IO_Write>
 800a640:	4603      	mov	r3, r0
 800a642:	461a      	mov	r2, r3
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	4413      	add	r3, r2
 800a648:	60fb      	str	r3, [r7, #12]
    break; 
 800a64a:	bf00      	nop
  }
  return counter;
 800a64c:	68fb      	ldr	r3, [r7, #12]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	00017700 	.word	0x00017700

0800a65c <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	4603      	mov	r3, r0
 800a664:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800a666:	2300      	movs	r3, #0
 800a668:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800a66a:	88fb      	ldrh	r3, [r7, #6]
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	2200      	movs	r2, #0
 800a670:	2100      	movs	r1, #0
 800a672:	4618      	mov	r0, r3
 800a674:	f000 f812 	bl	800a69c <CODEC_IO_Write>
 800a678:	4603      	mov	r3, r0
 800a67a:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 800a67c:	4b05      	ldr	r3, [pc, #20]	@ (800a694 <wm8994_Reset+0x38>)
 800a67e:	2200      	movs	r2, #0
 800a680:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 800a682:	4b05      	ldr	r3, [pc, #20]	@ (800a698 <wm8994_Reset+0x3c>)
 800a684:	2200      	movs	r2, #0
 800a686:	601a      	str	r2, [r3, #0]

  return counter;
 800a688:	68fb      	ldr	r3, [r7, #12]
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	200010a8 	.word	0x200010a8
 800a698:	200010ac 	.word	0x200010ac

0800a69c <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	71fb      	strb	r3, [r7, #7]
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	80bb      	strh	r3, [r7, #4]
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800a6b2:	887a      	ldrh	r2, [r7, #2]
 800a6b4:	88b9      	ldrh	r1, [r7, #4]
 800a6b6:	79fb      	ldrb	r3, [r7, #7]
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7fb fd61 	bl	8006180 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	b2db      	uxtb	r3, r3
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
	...

0800a6cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800a6cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800a704 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a6d0:	480d      	ldr	r0, [pc, #52]	@ (800a708 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800a6d2:	490e      	ldr	r1, [pc, #56]	@ (800a70c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800a6d4:	4a0e      	ldr	r2, [pc, #56]	@ (800a710 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a6d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a6d8:	e002      	b.n	800a6e0 <LoopCopyDataInit>

0800a6da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a6da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a6dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a6de:	3304      	adds	r3, #4

0800a6e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a6e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a6e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a6e4:	d3f9      	bcc.n	800a6da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a6e6:	4a0b      	ldr	r2, [pc, #44]	@ (800a714 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800a6e8:	4c0b      	ldr	r4, [pc, #44]	@ (800a718 <LoopFillZerobss+0x26>)
  movs r3, #0
 800a6ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a6ec:	e001      	b.n	800a6f2 <LoopFillZerobss>

0800a6ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a6ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a6f0:	3204      	adds	r2, #4

0800a6f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a6f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a6f4:	d3fb      	bcc.n	800a6ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800a6f6:	f7fe fb6b 	bl	8008dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a6fa:	f00b fdc7 	bl	801628c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a6fe:	f7f9 fd2f 	bl	8004160 <main>
  bx  lr    
 800a702:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a704:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800a708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a70c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 800a710:	080257e8 	.word	0x080257e8
  ldr r2, =_sbss
 800a714:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 800a718:	20009808 	.word	0x20009808

0800a71c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a71c:	e7fe      	b.n	800a71c <ADC_IRQHandler>

0800a71e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a722:	2003      	movs	r0, #3
 800a724:	f000 fcf3 	bl	800b10e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a728:	2000      	movs	r0, #0
 800a72a:	f7fe f9af 	bl	8008a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a72e:	f7fd fcc7 	bl	80080c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a732:	2300      	movs	r3, #0
}
 800a734:	4618      	mov	r0, r3
 800a736:	bd80      	pop	{r7, pc}

0800a738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a738:	b480      	push	{r7}
 800a73a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a73c:	4b06      	ldr	r3, [pc, #24]	@ (800a758 <HAL_IncTick+0x20>)
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	461a      	mov	r2, r3
 800a742:	4b06      	ldr	r3, [pc, #24]	@ (800a75c <HAL_IncTick+0x24>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4413      	add	r3, r2
 800a748:	4a04      	ldr	r2, [pc, #16]	@ (800a75c <HAL_IncTick+0x24>)
 800a74a:	6013      	str	r3, [r2, #0]
}
 800a74c:	bf00      	nop
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr
 800a756:	bf00      	nop
 800a758:	20000098 	.word	0x20000098
 800a75c:	200010b0 	.word	0x200010b0

0800a760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a760:	b480      	push	{r7}
 800a762:	af00      	add	r7, sp, #0
  return uwTick;
 800a764:	4b03      	ldr	r3, [pc, #12]	@ (800a774 <HAL_GetTick+0x14>)
 800a766:	681b      	ldr	r3, [r3, #0]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	200010b0 	.word	0x200010b0

0800a778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a780:	f7ff ffee 	bl	800a760 <HAL_GetTick>
 800a784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a790:	d005      	beq.n	800a79e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a792:	4b0a      	ldr	r3, [pc, #40]	@ (800a7bc <HAL_Delay+0x44>)
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	461a      	mov	r2, r3
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	4413      	add	r3, r2
 800a79c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a79e:	bf00      	nop
 800a7a0:	f7ff ffde 	bl	800a760 <HAL_GetTick>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	68fa      	ldr	r2, [r7, #12]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d8f7      	bhi.n	800a7a0 <HAL_Delay+0x28>
  {
  }
}
 800a7b0:	bf00      	nop
 800a7b2:	bf00      	nop
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	20000098 	.word	0x20000098

0800a7c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d101      	bne.n	800a7d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	e031      	b.n	800a83a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d109      	bne.n	800a7f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f7fd fc96 	bl	8008110 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7f6:	f003 0310 	and.w	r3, r3, #16
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d116      	bne.n	800a82c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a802:	4b10      	ldr	r3, [pc, #64]	@ (800a844 <HAL_ADC_Init+0x84>)
 800a804:	4013      	ands	r3, r2
 800a806:	f043 0202 	orr.w	r2, r3, #2
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 fad6 	bl	800adc0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a81e:	f023 0303 	bic.w	r3, r3, #3
 800a822:	f043 0201 	orr.w	r2, r3, #1
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	641a      	str	r2, [r3, #64]	@ 0x40
 800a82a:	e001      	b.n	800a830 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800a838:	7bfb      	ldrb	r3, [r7, #15]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3710      	adds	r7, #16
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	ffffeefd 	.word	0xffffeefd

0800a848 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800a848:	b480      	push	{r7}
 800a84a:	b085      	sub	sp, #20
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800a850:	2300      	movs	r3, #0
 800a852:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d101      	bne.n	800a862 <HAL_ADC_Start+0x1a>
 800a85e:	2302      	movs	r3, #2
 800a860:	e0ad      	b.n	800a9be <HAL_ADC_Start+0x176>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2201      	movs	r2, #1
 800a866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	f003 0301 	and.w	r3, r3, #1
 800a874:	2b01      	cmp	r3, #1
 800a876:	d018      	beq.n	800a8aa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	689a      	ldr	r2, [r3, #8]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f042 0201 	orr.w	r2, r2, #1
 800a886:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800a888:	4b50      	ldr	r3, [pc, #320]	@ (800a9cc <HAL_ADC_Start+0x184>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a50      	ldr	r2, [pc, #320]	@ (800a9d0 <HAL_ADC_Start+0x188>)
 800a88e:	fba2 2303 	umull	r2, r3, r2, r3
 800a892:	0c9a      	lsrs	r2, r3, #18
 800a894:	4613      	mov	r3, r2
 800a896:	005b      	lsls	r3, r3, #1
 800a898:	4413      	add	r3, r2
 800a89a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800a89c:	e002      	b.n	800a8a4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d1f9      	bne.n	800a89e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	f003 0301 	and.w	r3, r3, #1
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d175      	bne.n	800a9a4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a8bc:	4b45      	ldr	r3, [pc, #276]	@ (800a9d4 <HAL_ADC_Start+0x18c>)
 800a8be:	4013      	ands	r3, r2
 800a8c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d007      	beq.n	800a8e6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8da:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a8de:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a8ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8f2:	d106      	bne.n	800a902 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8f8:	f023 0206 	bic.w	r2, r3, #6
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	645a      	str	r2, [r3, #68]	@ 0x44
 800a900:	e002      	b.n	800a908 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800a918:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800a91a:	4b2f      	ldr	r3, [pc, #188]	@ (800a9d8 <HAL_ADC_Start+0x190>)
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	f003 031f 	and.w	r3, r3, #31
 800a922:	2b00      	cmp	r3, #0
 800a924:	d10f      	bne.n	800a946 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a930:	2b00      	cmp	r3, #0
 800a932:	d143      	bne.n	800a9bc <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	689a      	ldr	r2, [r3, #8]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a942:	609a      	str	r2, [r3, #8]
 800a944:	e03a      	b.n	800a9bc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a24      	ldr	r2, [pc, #144]	@ (800a9dc <HAL_ADC_Start+0x194>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d10e      	bne.n	800a96e <HAL_ADC_Start+0x126>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d107      	bne.n	800a96e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	689a      	ldr	r2, [r3, #8]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a96c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800a96e:	4b1a      	ldr	r3, [pc, #104]	@ (800a9d8 <HAL_ADC_Start+0x190>)
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	f003 0310 	and.w	r3, r3, #16
 800a976:	2b00      	cmp	r3, #0
 800a978:	d120      	bne.n	800a9bc <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a18      	ldr	r2, [pc, #96]	@ (800a9e0 <HAL_ADC_Start+0x198>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d11b      	bne.n	800a9bc <HAL_ADC_Start+0x174>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d114      	bne.n	800a9bc <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	689a      	ldr	r2, [r3, #8]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a9a0:	609a      	str	r2, [r3, #8]
 800a9a2:	e00b      	b.n	800a9bc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9a8:	f043 0210 	orr.w	r2, r3, #16
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9b4:	f043 0201 	orr.w	r2, r3, #1
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800a9bc:	2300      	movs	r3, #0
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3714      	adds	r7, #20
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	20000054 	.word	0x20000054
 800a9d0:	431bde83 	.word	0x431bde83
 800a9d4:	fffff8fe 	.word	0xfffff8fe
 800a9d8:	40012300 	.word	0x40012300
 800a9dc:	40012000 	.word	0x40012000
 800a9e0:	40012200 	.word	0x40012200

0800a9e4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a9fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa00:	d113      	bne.n	800aa2a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800aa0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa10:	d10b      	bne.n	800aa2a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa16:	f043 0220 	orr.w	r2, r3, #32
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	e063      	b.n	800aaf2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800aa2a:	f7ff fe99 	bl	800a760 <HAL_GetTick>
 800aa2e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800aa30:	e021      	b.n	800aa76 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa38:	d01d      	beq.n	800aa76 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d007      	beq.n	800aa50 <HAL_ADC_PollForConversion+0x6c>
 800aa40:	f7ff fe8e 	bl	800a760 <HAL_GetTick>
 800aa44:	4602      	mov	r2, r0
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	1ad3      	subs	r3, r2, r3
 800aa4a:	683a      	ldr	r2, [r7, #0]
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d212      	bcs.n	800aa76 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f003 0302 	and.w	r3, r3, #2
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d00b      	beq.n	800aa76 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa62:	f043 0204 	orr.w	r2, r3, #4
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 800aa72:	2303      	movs	r3, #3
 800aa74:	e03d      	b.n	800aaf2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f003 0302 	and.w	r3, r3, #2
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	d1d6      	bne.n	800aa32 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f06f 0212 	mvn.w	r2, #18
 800aa8c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa92:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	689b      	ldr	r3, [r3, #8]
 800aaa0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d123      	bne.n	800aaf0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d11f      	bne.n	800aaf0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aab6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d006      	beq.n	800aacc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d111      	bne.n	800aaf0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aad0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aadc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d105      	bne.n	800aaf0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aae8:	f043 0201 	orr.w	r2, r3, #1
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800aaf0:	2300      	movs	r3, #0
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}

0800aafa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800aafa:	b480      	push	{r7}
 800aafc:	b083      	sub	sp, #12
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d101      	bne.n	800ab30 <HAL_ADC_ConfigChannel+0x1c>
 800ab2c:	2302      	movs	r3, #2
 800ab2e:	e136      	b.n	800ad9e <HAL_ADC_ConfigChannel+0x28a>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2201      	movs	r2, #1
 800ab34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2b09      	cmp	r3, #9
 800ab3e:	d93a      	bls.n	800abb6 <HAL_ADC_ConfigChannel+0xa2>
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab48:	d035      	beq.n	800abb6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	68d9      	ldr	r1, [r3, #12]
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	461a      	mov	r2, r3
 800ab58:	4613      	mov	r3, r2
 800ab5a:	005b      	lsls	r3, r3, #1
 800ab5c:	4413      	add	r3, r2
 800ab5e:	3b1e      	subs	r3, #30
 800ab60:	2207      	movs	r2, #7
 800ab62:	fa02 f303 	lsl.w	r3, r2, r3
 800ab66:	43da      	mvns	r2, r3
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	400a      	ands	r2, r1
 800ab6e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4a8d      	ldr	r2, [pc, #564]	@ (800adac <HAL_ADC_ConfigChannel+0x298>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d10a      	bne.n	800ab90 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	68d9      	ldr	r1, [r3, #12]
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	689b      	ldr	r3, [r3, #8]
 800ab84:	061a      	lsls	r2, r3, #24
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	430a      	orrs	r2, r1
 800ab8c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ab8e:	e035      	b.n	800abfc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	68d9      	ldr	r1, [r3, #12]
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	689a      	ldr	r2, [r3, #8]
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	4618      	mov	r0, r3
 800aba2:	4603      	mov	r3, r0
 800aba4:	005b      	lsls	r3, r3, #1
 800aba6:	4403      	add	r3, r0
 800aba8:	3b1e      	subs	r3, #30
 800abaa:	409a      	lsls	r2, r3
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	430a      	orrs	r2, r1
 800abb2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800abb4:	e022      	b.n	800abfc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	6919      	ldr	r1, [r3, #16]
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	461a      	mov	r2, r3
 800abc4:	4613      	mov	r3, r2
 800abc6:	005b      	lsls	r3, r3, #1
 800abc8:	4413      	add	r3, r2
 800abca:	2207      	movs	r2, #7
 800abcc:	fa02 f303 	lsl.w	r3, r2, r3
 800abd0:	43da      	mvns	r2, r3
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	400a      	ands	r2, r1
 800abd8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	6919      	ldr	r1, [r3, #16]
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	689a      	ldr	r2, [r3, #8]
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	b29b      	uxth	r3, r3
 800abea:	4618      	mov	r0, r3
 800abec:	4603      	mov	r3, r0
 800abee:	005b      	lsls	r3, r3, #1
 800abf0:	4403      	add	r3, r0
 800abf2:	409a      	lsls	r2, r3
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	430a      	orrs	r2, r1
 800abfa:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	2b06      	cmp	r3, #6
 800ac02:	d824      	bhi.n	800ac4e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	685a      	ldr	r2, [r3, #4]
 800ac0e:	4613      	mov	r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	4413      	add	r3, r2
 800ac14:	3b05      	subs	r3, #5
 800ac16:	221f      	movs	r2, #31
 800ac18:	fa02 f303 	lsl.w	r3, r2, r3
 800ac1c:	43da      	mvns	r2, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	400a      	ands	r2, r1
 800ac24:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	4618      	mov	r0, r3
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	685a      	ldr	r2, [r3, #4]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	4413      	add	r3, r2
 800ac3e:	3b05      	subs	r3, #5
 800ac40:	fa00 f203 	lsl.w	r2, r0, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	430a      	orrs	r2, r1
 800ac4a:	635a      	str	r2, [r3, #52]	@ 0x34
 800ac4c:	e04c      	b.n	800ace8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	2b0c      	cmp	r3, #12
 800ac54:	d824      	bhi.n	800aca0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	685a      	ldr	r2, [r3, #4]
 800ac60:	4613      	mov	r3, r2
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	4413      	add	r3, r2
 800ac66:	3b23      	subs	r3, #35	@ 0x23
 800ac68:	221f      	movs	r2, #31
 800ac6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac6e:	43da      	mvns	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	400a      	ands	r2, r1
 800ac76:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	4618      	mov	r0, r3
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	685a      	ldr	r2, [r3, #4]
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4413      	add	r3, r2
 800ac90:	3b23      	subs	r3, #35	@ 0x23
 800ac92:	fa00 f203 	lsl.w	r2, r0, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	430a      	orrs	r2, r1
 800ac9c:	631a      	str	r2, [r3, #48]	@ 0x30
 800ac9e:	e023      	b.n	800ace8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	685a      	ldr	r2, [r3, #4]
 800acaa:	4613      	mov	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	4413      	add	r3, r2
 800acb0:	3b41      	subs	r3, #65	@ 0x41
 800acb2:	221f      	movs	r2, #31
 800acb4:	fa02 f303 	lsl.w	r3, r2, r3
 800acb8:	43da      	mvns	r2, r3
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	400a      	ands	r2, r1
 800acc0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	b29b      	uxth	r3, r3
 800acce:	4618      	mov	r0, r3
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	685a      	ldr	r2, [r3, #4]
 800acd4:	4613      	mov	r3, r2
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	4413      	add	r3, r2
 800acda:	3b41      	subs	r3, #65	@ 0x41
 800acdc:	fa00 f203 	lsl.w	r2, r0, r3
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	430a      	orrs	r2, r1
 800ace6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a30      	ldr	r2, [pc, #192]	@ (800adb0 <HAL_ADC_ConfigChannel+0x29c>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d10a      	bne.n	800ad08 <HAL_ADC_ConfigChannel+0x1f4>
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800acfa:	d105      	bne.n	800ad08 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800acfc:	4b2d      	ldr	r3, [pc, #180]	@ (800adb4 <HAL_ADC_ConfigChannel+0x2a0>)
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	4a2c      	ldr	r2, [pc, #176]	@ (800adb4 <HAL_ADC_ConfigChannel+0x2a0>)
 800ad02:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800ad06:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a28      	ldr	r2, [pc, #160]	@ (800adb0 <HAL_ADC_ConfigChannel+0x29c>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d10f      	bne.n	800ad32 <HAL_ADC_ConfigChannel+0x21e>
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	2b12      	cmp	r3, #18
 800ad18:	d10b      	bne.n	800ad32 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800ad1a:	4b26      	ldr	r3, [pc, #152]	@ (800adb4 <HAL_ADC_ConfigChannel+0x2a0>)
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	4a25      	ldr	r2, [pc, #148]	@ (800adb4 <HAL_ADC_ConfigChannel+0x2a0>)
 800ad20:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ad24:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800ad26:	4b23      	ldr	r3, [pc, #140]	@ (800adb4 <HAL_ADC_ConfigChannel+0x2a0>)
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	4a22      	ldr	r2, [pc, #136]	@ (800adb4 <HAL_ADC_ConfigChannel+0x2a0>)
 800ad2c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ad30:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a1e      	ldr	r2, [pc, #120]	@ (800adb0 <HAL_ADC_ConfigChannel+0x29c>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d12b      	bne.n	800ad94 <HAL_ADC_ConfigChannel+0x280>
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a1a      	ldr	r2, [pc, #104]	@ (800adac <HAL_ADC_ConfigChannel+0x298>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d003      	beq.n	800ad4e <HAL_ADC_ConfigChannel+0x23a>
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	2b11      	cmp	r3, #17
 800ad4c:	d122      	bne.n	800ad94 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800ad4e:	4b19      	ldr	r3, [pc, #100]	@ (800adb4 <HAL_ADC_ConfigChannel+0x2a0>)
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	4a18      	ldr	r2, [pc, #96]	@ (800adb4 <HAL_ADC_ConfigChannel+0x2a0>)
 800ad54:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800ad58:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800ad5a:	4b16      	ldr	r3, [pc, #88]	@ (800adb4 <HAL_ADC_ConfigChannel+0x2a0>)
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	4a15      	ldr	r2, [pc, #84]	@ (800adb4 <HAL_ADC_ConfigChannel+0x2a0>)
 800ad60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ad64:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a10      	ldr	r2, [pc, #64]	@ (800adac <HAL_ADC_ConfigChannel+0x298>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d111      	bne.n	800ad94 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800ad70:	4b11      	ldr	r3, [pc, #68]	@ (800adb8 <HAL_ADC_ConfigChannel+0x2a4>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a11      	ldr	r2, [pc, #68]	@ (800adbc <HAL_ADC_ConfigChannel+0x2a8>)
 800ad76:	fba2 2303 	umull	r2, r3, r2, r3
 800ad7a:	0c9a      	lsrs	r2, r3, #18
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4413      	add	r3, r2
 800ad82:	005b      	lsls	r3, r3, #1
 800ad84:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800ad86:	e002      	b.n	800ad8e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	3b01      	subs	r3, #1
 800ad8c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d1f9      	bne.n	800ad88 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3714      	adds	r7, #20
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	10000012 	.word	0x10000012
 800adb0:	40012000 	.word	0x40012000
 800adb4:	40012300 	.word	0x40012300
 800adb8:	20000054 	.word	0x20000054
 800adbc:	431bde83 	.word	0x431bde83

0800adc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b083      	sub	sp, #12
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800adc8:	4b78      	ldr	r3, [pc, #480]	@ (800afac <ADC_Init+0x1ec>)
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	4a77      	ldr	r2, [pc, #476]	@ (800afac <ADC_Init+0x1ec>)
 800adce:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800add2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800add4:	4b75      	ldr	r3, [pc, #468]	@ (800afac <ADC_Init+0x1ec>)
 800add6:	685a      	ldr	r2, [r3, #4]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	4973      	ldr	r1, [pc, #460]	@ (800afac <ADC_Init+0x1ec>)
 800adde:	4313      	orrs	r3, r2
 800ade0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	685a      	ldr	r2, [r3, #4]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800adf0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	6859      	ldr	r1, [r3, #4]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	021a      	lsls	r2, r3, #8
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	430a      	orrs	r2, r1
 800ae04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	685a      	ldr	r2, [r3, #4]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800ae14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	6859      	ldr	r1, [r3, #4]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	689a      	ldr	r2, [r3, #8]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	430a      	orrs	r2, r1
 800ae26:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	689a      	ldr	r2, [r3, #8]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ae36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	6899      	ldr	r1, [r3, #8]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	68da      	ldr	r2, [r3, #12]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	430a      	orrs	r2, r1
 800ae48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae4e:	4a58      	ldr	r2, [pc, #352]	@ (800afb0 <ADC_Init+0x1f0>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d022      	beq.n	800ae9a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	689a      	ldr	r2, [r3, #8]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800ae62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	6899      	ldr	r1, [r3, #8]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	430a      	orrs	r2, r1
 800ae74:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	689a      	ldr	r2, [r3, #8]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800ae84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	6899      	ldr	r1, [r3, #8]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	430a      	orrs	r2, r1
 800ae96:	609a      	str	r2, [r3, #8]
 800ae98:	e00f      	b.n	800aeba <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	689a      	ldr	r2, [r3, #8]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800aea8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	689a      	ldr	r2, [r3, #8]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800aeb8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	689a      	ldr	r2, [r3, #8]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f022 0202 	bic.w	r2, r2, #2
 800aec8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	6899      	ldr	r1, [r3, #8]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	699b      	ldr	r3, [r3, #24]
 800aed4:	005a      	lsls	r2, r3, #1
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	430a      	orrs	r2, r1
 800aedc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d01b      	beq.n	800af20 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	685a      	ldr	r2, [r3, #4]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aef6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	685a      	ldr	r2, [r3, #4]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800af06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	6859      	ldr	r1, [r3, #4]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af12:	3b01      	subs	r3, #1
 800af14:	035a      	lsls	r2, r3, #13
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	430a      	orrs	r2, r1
 800af1c:	605a      	str	r2, [r3, #4]
 800af1e:	e007      	b.n	800af30 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	685a      	ldr	r2, [r3, #4]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800af2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800af3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	69db      	ldr	r3, [r3, #28]
 800af4a:	3b01      	subs	r3, #1
 800af4c:	051a      	lsls	r2, r3, #20
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	430a      	orrs	r2, r1
 800af54:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	689a      	ldr	r2, [r3, #8]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800af64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	6899      	ldr	r1, [r3, #8]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800af72:	025a      	lsls	r2, r3, #9
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	430a      	orrs	r2, r1
 800af7a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	689a      	ldr	r2, [r3, #8]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	6899      	ldr	r1, [r3, #8]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	695b      	ldr	r3, [r3, #20]
 800af96:	029a      	lsls	r2, r3, #10
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	430a      	orrs	r2, r1
 800af9e:	609a      	str	r2, [r3, #8]
}
 800afa0:	bf00      	nop
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr
 800afac:	40012300 	.word	0x40012300
 800afb0:	0f000001 	.word	0x0f000001

0800afb4 <__NVIC_SetPriorityGrouping>:
{
 800afb4:	b480      	push	{r7}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f003 0307 	and.w	r3, r3, #7
 800afc2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800afc4:	4b0b      	ldr	r3, [pc, #44]	@ (800aff4 <__NVIC_SetPriorityGrouping+0x40>)
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800afca:	68ba      	ldr	r2, [r7, #8]
 800afcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800afd0:	4013      	ands	r3, r2
 800afd2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800afdc:	4b06      	ldr	r3, [pc, #24]	@ (800aff8 <__NVIC_SetPriorityGrouping+0x44>)
 800afde:	4313      	orrs	r3, r2
 800afe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800afe2:	4a04      	ldr	r2, [pc, #16]	@ (800aff4 <__NVIC_SetPriorityGrouping+0x40>)
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	60d3      	str	r3, [r2, #12]
}
 800afe8:	bf00      	nop
 800afea:	3714      	adds	r7, #20
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr
 800aff4:	e000ed00 	.word	0xe000ed00
 800aff8:	05fa0000 	.word	0x05fa0000

0800affc <__NVIC_GetPriorityGrouping>:
{
 800affc:	b480      	push	{r7}
 800affe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b000:	4b04      	ldr	r3, [pc, #16]	@ (800b014 <__NVIC_GetPriorityGrouping+0x18>)
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	0a1b      	lsrs	r3, r3, #8
 800b006:	f003 0307 	and.w	r3, r3, #7
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr
 800b014:	e000ed00 	.word	0xe000ed00

0800b018 <__NVIC_EnableIRQ>:
{
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	4603      	mov	r3, r0
 800b020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b026:	2b00      	cmp	r3, #0
 800b028:	db0b      	blt.n	800b042 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b02a:	79fb      	ldrb	r3, [r7, #7]
 800b02c:	f003 021f 	and.w	r2, r3, #31
 800b030:	4907      	ldr	r1, [pc, #28]	@ (800b050 <__NVIC_EnableIRQ+0x38>)
 800b032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b036:	095b      	lsrs	r3, r3, #5
 800b038:	2001      	movs	r0, #1
 800b03a:	fa00 f202 	lsl.w	r2, r0, r2
 800b03e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b042:	bf00      	nop
 800b044:	370c      	adds	r7, #12
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr
 800b04e:	bf00      	nop
 800b050:	e000e100 	.word	0xe000e100

0800b054 <__NVIC_SetPriority>:
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	4603      	mov	r3, r0
 800b05c:	6039      	str	r1, [r7, #0]
 800b05e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b064:	2b00      	cmp	r3, #0
 800b066:	db0a      	blt.n	800b07e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	b2da      	uxtb	r2, r3
 800b06c:	490c      	ldr	r1, [pc, #48]	@ (800b0a0 <__NVIC_SetPriority+0x4c>)
 800b06e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b072:	0112      	lsls	r2, r2, #4
 800b074:	b2d2      	uxtb	r2, r2
 800b076:	440b      	add	r3, r1
 800b078:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b07c:	e00a      	b.n	800b094 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	b2da      	uxtb	r2, r3
 800b082:	4908      	ldr	r1, [pc, #32]	@ (800b0a4 <__NVIC_SetPriority+0x50>)
 800b084:	79fb      	ldrb	r3, [r7, #7]
 800b086:	f003 030f 	and.w	r3, r3, #15
 800b08a:	3b04      	subs	r3, #4
 800b08c:	0112      	lsls	r2, r2, #4
 800b08e:	b2d2      	uxtb	r2, r2
 800b090:	440b      	add	r3, r1
 800b092:	761a      	strb	r2, [r3, #24]
}
 800b094:	bf00      	nop
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr
 800b0a0:	e000e100 	.word	0xe000e100
 800b0a4:	e000ed00 	.word	0xe000ed00

0800b0a8 <NVIC_EncodePriority>:
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b089      	sub	sp, #36	@ 0x24
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f003 0307 	and.w	r3, r3, #7
 800b0ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b0bc:	69fb      	ldr	r3, [r7, #28]
 800b0be:	f1c3 0307 	rsb	r3, r3, #7
 800b0c2:	2b04      	cmp	r3, #4
 800b0c4:	bf28      	it	cs
 800b0c6:	2304      	movcs	r3, #4
 800b0c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b0ca:	69fb      	ldr	r3, [r7, #28]
 800b0cc:	3304      	adds	r3, #4
 800b0ce:	2b06      	cmp	r3, #6
 800b0d0:	d902      	bls.n	800b0d8 <NVIC_EncodePriority+0x30>
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	3b03      	subs	r3, #3
 800b0d6:	e000      	b.n	800b0da <NVIC_EncodePriority+0x32>
 800b0d8:	2300      	movs	r3, #0
 800b0da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b0dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0e6:	43da      	mvns	r2, r3
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	401a      	ands	r2, r3
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b0f0:	f04f 31ff 	mov.w	r1, #4294967295
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	fa01 f303 	lsl.w	r3, r1, r3
 800b0fa:	43d9      	mvns	r1, r3
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b100:	4313      	orrs	r3, r2
}
 800b102:	4618      	mov	r0, r3
 800b104:	3724      	adds	r7, #36	@ 0x24
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr

0800b10e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b082      	sub	sp, #8
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f7ff ff4c 	bl	800afb4 <__NVIC_SetPriorityGrouping>
}
 800b11c:	bf00      	nop
 800b11e:	3708      	adds	r7, #8
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b124:	b580      	push	{r7, lr}
 800b126:	b086      	sub	sp, #24
 800b128:	af00      	add	r7, sp, #0
 800b12a:	4603      	mov	r3, r0
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	607a      	str	r2, [r7, #4]
 800b130:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b132:	2300      	movs	r3, #0
 800b134:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b136:	f7ff ff61 	bl	800affc <__NVIC_GetPriorityGrouping>
 800b13a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	68b9      	ldr	r1, [r7, #8]
 800b140:	6978      	ldr	r0, [r7, #20]
 800b142:	f7ff ffb1 	bl	800b0a8 <NVIC_EncodePriority>
 800b146:	4602      	mov	r2, r0
 800b148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b14c:	4611      	mov	r1, r2
 800b14e:	4618      	mov	r0, r3
 800b150:	f7ff ff80 	bl	800b054 <__NVIC_SetPriority>
}
 800b154:	bf00      	nop
 800b156:	3718      	adds	r7, #24
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	4603      	mov	r3, r0
 800b164:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7ff ff54 	bl	800b018 <__NVIC_EnableIRQ>
}
 800b170:	bf00      	nop
 800b172:	3708      	adds	r7, #8
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b086      	sub	sp, #24
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b180:	2300      	movs	r3, #0
 800b182:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b184:	f7ff faec 	bl	800a760 <HAL_GetTick>
 800b188:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d101      	bne.n	800b194 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b190:	2301      	movs	r3, #1
 800b192:	e099      	b.n	800b2c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2202      	movs	r2, #2
 800b198:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f022 0201 	bic.w	r2, r2, #1
 800b1b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b1b4:	e00f      	b.n	800b1d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b1b6:	f7ff fad3 	bl	800a760 <HAL_GetTick>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	1ad3      	subs	r3, r2, r3
 800b1c0:	2b05      	cmp	r3, #5
 800b1c2:	d908      	bls.n	800b1d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2220      	movs	r2, #32
 800b1c8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2203      	movs	r2, #3
 800b1ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800b1d2:	2303      	movs	r3, #3
 800b1d4:	e078      	b.n	800b2c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f003 0301 	and.w	r3, r3, #1
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d1e8      	bne.n	800b1b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b1ec:	697a      	ldr	r2, [r7, #20]
 800b1ee:	4b38      	ldr	r3, [pc, #224]	@ (800b2d0 <HAL_DMA_Init+0x158>)
 800b1f0:	4013      	ands	r3, r2
 800b1f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	685a      	ldr	r2, [r3, #4]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b202:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	691b      	ldr	r3, [r3, #16]
 800b208:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b20e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	699b      	ldr	r3, [r3, #24]
 800b214:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b21a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6a1b      	ldr	r3, [r3, #32]
 800b220:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b222:	697a      	ldr	r2, [r7, #20]
 800b224:	4313      	orrs	r3, r2
 800b226:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b22c:	2b04      	cmp	r3, #4
 800b22e:	d107      	bne.n	800b240 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b238:	4313      	orrs	r3, r2
 800b23a:	697a      	ldr	r2, [r7, #20]
 800b23c:	4313      	orrs	r3, r2
 800b23e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	697a      	ldr	r2, [r7, #20]
 800b246:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	695b      	ldr	r3, [r3, #20]
 800b24e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	f023 0307 	bic.w	r3, r3, #7
 800b256:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b25c:	697a      	ldr	r2, [r7, #20]
 800b25e:	4313      	orrs	r3, r2
 800b260:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b266:	2b04      	cmp	r3, #4
 800b268:	d117      	bne.n	800b29a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b26e:	697a      	ldr	r2, [r7, #20]
 800b270:	4313      	orrs	r3, r2
 800b272:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00e      	beq.n	800b29a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 fb03 	bl	800b888 <DMA_CheckFifoParam>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d008      	beq.n	800b29a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2240      	movs	r2, #64	@ 0x40
 800b28c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2201      	movs	r2, #1
 800b292:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800b296:	2301      	movs	r3, #1
 800b298:	e016      	b.n	800b2c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	697a      	ldr	r2, [r7, #20]
 800b2a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 faba 	bl	800b81c <DMA_CalcBaseAndBitshift>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b2b0:	223f      	movs	r2, #63	@ 0x3f
 800b2b2:	409a      	lsls	r2, r3
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800b2c6:	2300      	movs	r3, #0
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3718      	adds	r7, #24
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	f010803f 	.word	0xf010803f

0800b2d4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d101      	bne.n	800b2e6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e050      	b.n	800b388 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	2b02      	cmp	r3, #2
 800b2f0:	d101      	bne.n	800b2f6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800b2f2:	2302      	movs	r3, #2
 800b2f4:	e048      	b.n	800b388 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f022 0201 	bic.w	r2, r2, #1
 800b304:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2200      	movs	r2, #0
 800b30c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	2200      	movs	r2, #0
 800b314:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2200      	movs	r2, #0
 800b31c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	2200      	movs	r2, #0
 800b324:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2200      	movs	r2, #0
 800b32c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	2221      	movs	r2, #33	@ 0x21
 800b334:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 fa70 	bl	800b81c <DMA_CalcBaseAndBitshift>
 800b33c:	4603      	mov	r3, r0
 800b33e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b344:	223f      	movs	r2, #63	@ 0x3f
 800b346:	409a      	lsls	r2, r3
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2200      	movs	r2, #0
 800b350:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2200      	movs	r2, #0
 800b356:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2200      	movs	r2, #0
 800b362:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2200      	movs	r2, #0
 800b36e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2200      	movs	r2, #0
 800b382:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b386:	2300      	movs	r3, #0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3710      	adds	r7, #16
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b086      	sub	sp, #24
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	607a      	str	r2, [r7, #4]
 800b39c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d101      	bne.n	800b3b6 <HAL_DMA_Start_IT+0x26>
 800b3b2:	2302      	movs	r3, #2
 800b3b4:	e048      	b.n	800b448 <HAL_DMA_Start_IT+0xb8>
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b3c4:	b2db      	uxtb	r3, r3
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d137      	bne.n	800b43a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2202      	movs	r2, #2
 800b3ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	68b9      	ldr	r1, [r7, #8]
 800b3de:	68f8      	ldr	r0, [r7, #12]
 800b3e0:	f000 f9ee 	bl	800b7c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b3e8:	223f      	movs	r2, #63	@ 0x3f
 800b3ea:	409a      	lsls	r2, r3
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	681a      	ldr	r2, [r3, #0]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f042 0216 	orr.w	r2, r2, #22
 800b3fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	695a      	ldr	r2, [r3, #20]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b40e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b414:	2b00      	cmp	r3, #0
 800b416:	d007      	beq.n	800b428 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f042 0208 	orr.w	r2, r2, #8
 800b426:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f042 0201 	orr.w	r2, r2, #1
 800b436:	601a      	str	r2, [r3, #0]
 800b438:	e005      	b.n	800b446 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2200      	movs	r2, #0
 800b43e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b442:	2302      	movs	r3, #2
 800b444:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b446:	7dfb      	ldrb	r3, [r7, #23]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3718      	adds	r7, #24
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	2b02      	cmp	r3, #2
 800b462:	d004      	beq.n	800b46e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2280      	movs	r2, #128	@ 0x80
 800b468:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800b46a:	2301      	movs	r3, #1
 800b46c:	e00c      	b.n	800b488 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2205      	movs	r2, #5
 800b472:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f022 0201 	bic.w	r2, r2, #1
 800b484:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b486:	2300      	movs	r3, #0
}
 800b488:	4618      	mov	r0, r3
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b086      	sub	sp, #24
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800b49c:	2300      	movs	r3, #0
 800b49e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800b4a0:	4b8e      	ldr	r3, [pc, #568]	@ (800b6dc <HAL_DMA_IRQHandler+0x248>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a8e      	ldr	r2, [pc, #568]	@ (800b6e0 <HAL_DMA_IRQHandler+0x24c>)
 800b4a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b4aa:	0a9b      	lsrs	r3, r3, #10
 800b4ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4be:	2208      	movs	r2, #8
 800b4c0:	409a      	lsls	r2, r3
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	4013      	ands	r3, r2
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d01a      	beq.n	800b500 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f003 0304 	and.w	r3, r3, #4
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d013      	beq.n	800b500 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	681a      	ldr	r2, [r3, #0]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f022 0204 	bic.w	r2, r2, #4
 800b4e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4ec:	2208      	movs	r2, #8
 800b4ee:	409a      	lsls	r2, r3
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4f8:	f043 0201 	orr.w	r2, r3, #1
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b504:	2201      	movs	r2, #1
 800b506:	409a      	lsls	r2, r3
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	4013      	ands	r3, r2
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d012      	beq.n	800b536 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	695b      	ldr	r3, [r3, #20]
 800b516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00b      	beq.n	800b536 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b522:	2201      	movs	r2, #1
 800b524:	409a      	lsls	r2, r3
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b52e:	f043 0202 	orr.w	r2, r3, #2
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b53a:	2204      	movs	r2, #4
 800b53c:	409a      	lsls	r2, r3
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	4013      	ands	r3, r2
 800b542:	2b00      	cmp	r3, #0
 800b544:	d012      	beq.n	800b56c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f003 0302 	and.w	r3, r3, #2
 800b550:	2b00      	cmp	r3, #0
 800b552:	d00b      	beq.n	800b56c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b558:	2204      	movs	r2, #4
 800b55a:	409a      	lsls	r2, r3
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b564:	f043 0204 	orr.w	r2, r3, #4
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b570:	2210      	movs	r2, #16
 800b572:	409a      	lsls	r2, r3
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	4013      	ands	r3, r2
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d043      	beq.n	800b604 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f003 0308 	and.w	r3, r3, #8
 800b586:	2b00      	cmp	r3, #0
 800b588:	d03c      	beq.n	800b604 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b58e:	2210      	movs	r2, #16
 800b590:	409a      	lsls	r2, r3
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d018      	beq.n	800b5d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d108      	bne.n	800b5c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d024      	beq.n	800b604 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	4798      	blx	r3
 800b5c2:	e01f      	b.n	800b604 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d01b      	beq.n	800b604 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	4798      	blx	r3
 800b5d4:	e016      	b.n	800b604 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d107      	bne.n	800b5f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	681a      	ldr	r2, [r3, #0]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f022 0208 	bic.w	r2, r2, #8
 800b5f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d003      	beq.n	800b604 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b608:	2220      	movs	r2, #32
 800b60a:	409a      	lsls	r2, r3
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	4013      	ands	r3, r2
 800b610:	2b00      	cmp	r3, #0
 800b612:	f000 808f 	beq.w	800b734 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f003 0310 	and.w	r3, r3, #16
 800b620:	2b00      	cmp	r3, #0
 800b622:	f000 8087 	beq.w	800b734 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b62a:	2220      	movs	r2, #32
 800b62c:	409a      	lsls	r2, r3
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b638:	b2db      	uxtb	r3, r3
 800b63a:	2b05      	cmp	r3, #5
 800b63c:	d136      	bne.n	800b6ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	681a      	ldr	r2, [r3, #0]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f022 0216 	bic.w	r2, r2, #22
 800b64c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	695a      	ldr	r2, [r3, #20]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b65c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b662:	2b00      	cmp	r3, #0
 800b664:	d103      	bne.n	800b66e <HAL_DMA_IRQHandler+0x1da>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d007      	beq.n	800b67e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f022 0208 	bic.w	r2, r2, #8
 800b67c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b682:	223f      	movs	r2, #63	@ 0x3f
 800b684:	409a      	lsls	r2, r3
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2201      	movs	r2, #1
 800b68e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2200      	movs	r2, #0
 800b696:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d07e      	beq.n	800b7a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	4798      	blx	r3
        }
        return;
 800b6aa:	e079      	b.n	800b7a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d01d      	beq.n	800b6f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d10d      	bne.n	800b6e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d031      	beq.n	800b734 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	4798      	blx	r3
 800b6d8:	e02c      	b.n	800b734 <HAL_DMA_IRQHandler+0x2a0>
 800b6da:	bf00      	nop
 800b6dc:	20000054 	.word	0x20000054
 800b6e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d023      	beq.n	800b734 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	4798      	blx	r3
 800b6f4:	e01e      	b.n	800b734 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b700:	2b00      	cmp	r3, #0
 800b702:	d10f      	bne.n	800b724 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f022 0210 	bic.w	r2, r2, #16
 800b712:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2201      	movs	r2, #1
 800b718:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2200      	movs	r2, #0
 800b720:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d003      	beq.n	800b734 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d032      	beq.n	800b7a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b740:	f003 0301 	and.w	r3, r3, #1
 800b744:	2b00      	cmp	r3, #0
 800b746:	d022      	beq.n	800b78e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2205      	movs	r2, #5
 800b74c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f022 0201 	bic.w	r2, r2, #1
 800b75e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	3301      	adds	r3, #1
 800b764:	60bb      	str	r3, [r7, #8]
 800b766:	697a      	ldr	r2, [r7, #20]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d307      	bcc.n	800b77c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f003 0301 	and.w	r3, r3, #1
 800b776:	2b00      	cmp	r3, #0
 800b778:	d1f2      	bne.n	800b760 <HAL_DMA_IRQHandler+0x2cc>
 800b77a:	e000      	b.n	800b77e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800b77c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2201      	movs	r2, #1
 800b782:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2200      	movs	r2, #0
 800b78a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b792:	2b00      	cmp	r3, #0
 800b794:	d005      	beq.n	800b7a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	4798      	blx	r3
 800b79e:	e000      	b.n	800b7a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 800b7a0:	bf00      	nop
    }
  }
}
 800b7a2:	3718      	adds	r7, #24
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	370c      	adds	r7, #12
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr

0800b7c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	607a      	str	r2, [r7, #4]
 800b7cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b7dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	683a      	ldr	r2, [r7, #0]
 800b7e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	2b40      	cmp	r3, #64	@ 0x40
 800b7ec:	d108      	bne.n	800b800 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	68ba      	ldr	r2, [r7, #8]
 800b7fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b7fe:	e007      	b.n	800b810 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	68ba      	ldr	r2, [r7, #8]
 800b806:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	687a      	ldr	r2, [r7, #4]
 800b80e:	60da      	str	r2, [r3, #12]
}
 800b810:	bf00      	nop
 800b812:	3714      	adds	r7, #20
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b085      	sub	sp, #20
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	3b10      	subs	r3, #16
 800b82c:	4a13      	ldr	r2, [pc, #76]	@ (800b87c <DMA_CalcBaseAndBitshift+0x60>)
 800b82e:	fba2 2303 	umull	r2, r3, r2, r3
 800b832:	091b      	lsrs	r3, r3, #4
 800b834:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b836:	4a12      	ldr	r2, [pc, #72]	@ (800b880 <DMA_CalcBaseAndBitshift+0x64>)
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	4413      	add	r3, r2
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	461a      	mov	r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2b03      	cmp	r3, #3
 800b848:	d908      	bls.n	800b85c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	461a      	mov	r2, r3
 800b850:	4b0c      	ldr	r3, [pc, #48]	@ (800b884 <DMA_CalcBaseAndBitshift+0x68>)
 800b852:	4013      	ands	r3, r2
 800b854:	1d1a      	adds	r2, r3, #4
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	659a      	str	r2, [r3, #88]	@ 0x58
 800b85a:	e006      	b.n	800b86a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	461a      	mov	r2, r3
 800b862:	4b08      	ldr	r3, [pc, #32]	@ (800b884 <DMA_CalcBaseAndBitshift+0x68>)
 800b864:	4013      	ands	r3, r2
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3714      	adds	r7, #20
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr
 800b87a:	bf00      	nop
 800b87c:	aaaaaaab 	.word	0xaaaaaaab
 800b880:	080256dc 	.word	0x080256dc
 800b884:	fffffc00 	.word	0xfffffc00

0800b888 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b888:	b480      	push	{r7}
 800b88a:	b085      	sub	sp, #20
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b890:	2300      	movs	r3, #0
 800b892:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b898:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	699b      	ldr	r3, [r3, #24]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d11f      	bne.n	800b8e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	2b03      	cmp	r3, #3
 800b8a6:	d856      	bhi.n	800b956 <DMA_CheckFifoParam+0xce>
 800b8a8:	a201      	add	r2, pc, #4	@ (adr r2, 800b8b0 <DMA_CheckFifoParam+0x28>)
 800b8aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8ae:	bf00      	nop
 800b8b0:	0800b8c1 	.word	0x0800b8c1
 800b8b4:	0800b8d3 	.word	0x0800b8d3
 800b8b8:	0800b8c1 	.word	0x0800b8c1
 800b8bc:	0800b957 	.word	0x0800b957
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d046      	beq.n	800b95a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b8d0:	e043      	b.n	800b95a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800b8da:	d140      	bne.n	800b95e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b8e0:	e03d      	b.n	800b95e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	699b      	ldr	r3, [r3, #24]
 800b8e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b8ea:	d121      	bne.n	800b930 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	2b03      	cmp	r3, #3
 800b8f0:	d837      	bhi.n	800b962 <DMA_CheckFifoParam+0xda>
 800b8f2:	a201      	add	r2, pc, #4	@ (adr r2, 800b8f8 <DMA_CheckFifoParam+0x70>)
 800b8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8f8:	0800b909 	.word	0x0800b909
 800b8fc:	0800b90f 	.word	0x0800b90f
 800b900:	0800b909 	.word	0x0800b909
 800b904:	0800b921 	.word	0x0800b921
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b908:	2301      	movs	r3, #1
 800b90a:	73fb      	strb	r3, [r7, #15]
      break;
 800b90c:	e030      	b.n	800b970 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b912:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b916:	2b00      	cmp	r3, #0
 800b918:	d025      	beq.n	800b966 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b91a:	2301      	movs	r3, #1
 800b91c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b91e:	e022      	b.n	800b966 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b924:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800b928:	d11f      	bne.n	800b96a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b92e:	e01c      	b.n	800b96a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	2b02      	cmp	r3, #2
 800b934:	d903      	bls.n	800b93e <DMA_CheckFifoParam+0xb6>
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	2b03      	cmp	r3, #3
 800b93a:	d003      	beq.n	800b944 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b93c:	e018      	b.n	800b970 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	73fb      	strb	r3, [r7, #15]
      break;
 800b942:	e015      	b.n	800b970 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b948:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d00e      	beq.n	800b96e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b950:	2301      	movs	r3, #1
 800b952:	73fb      	strb	r3, [r7, #15]
      break;
 800b954:	e00b      	b.n	800b96e <DMA_CheckFifoParam+0xe6>
      break;
 800b956:	bf00      	nop
 800b958:	e00a      	b.n	800b970 <DMA_CheckFifoParam+0xe8>
      break;
 800b95a:	bf00      	nop
 800b95c:	e008      	b.n	800b970 <DMA_CheckFifoParam+0xe8>
      break;
 800b95e:	bf00      	nop
 800b960:	e006      	b.n	800b970 <DMA_CheckFifoParam+0xe8>
      break;
 800b962:	bf00      	nop
 800b964:	e004      	b.n	800b970 <DMA_CheckFifoParam+0xe8>
      break;
 800b966:	bf00      	nop
 800b968:	e002      	b.n	800b970 <DMA_CheckFifoParam+0xe8>
      break;   
 800b96a:	bf00      	nop
 800b96c:	e000      	b.n	800b970 <DMA_CheckFifoParam+0xe8>
      break;
 800b96e:	bf00      	nop
    }
  } 
  
  return status; 
 800b970:	7bfb      	ldrb	r3, [r7, #15]
}
 800b972:	4618      	mov	r0, r3
 800b974:	3714      	adds	r7, #20
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr
 800b97e:	bf00      	nop

0800b980 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d101      	bne.n	800b992 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	e039      	b.n	800ba06 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d106      	bne.n	800b9ac <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f7fc fc38 	bl	800821c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2202      	movs	r2, #2
 800b9b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	685a      	ldr	r2, [r3, #4]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	430a      	orrs	r2, r1
 800b9c8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9d0:	f023 0107 	bic.w	r1, r3, #7
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	689a      	ldr	r2, [r3, #8]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	430a      	orrs	r2, r1
 800b9de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b9e6:	4b0a      	ldr	r3, [pc, #40]	@ (800ba10 <HAL_DMA2D_Init+0x90>)
 800b9e8:	4013      	ands	r3, r2
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	68d1      	ldr	r1, [r2, #12]
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	6812      	ldr	r2, [r2, #0]
 800b9f2:	430b      	orrs	r3, r1
 800b9f4:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3708      	adds	r7, #8
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
 800ba0e:	bf00      	nop
 800ba10:	ffffc000 	.word	0xffffc000

0800ba14 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b086      	sub	sp, #24
 800ba18:	af02      	add	r7, sp, #8
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	60b9      	str	r1, [r7, #8]
 800ba1e:	607a      	str	r2, [r7, #4]
 800ba20:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ba28:	2b01      	cmp	r3, #1
 800ba2a:	d101      	bne.n	800ba30 <HAL_DMA2D_Start+0x1c>
 800ba2c:	2302      	movs	r3, #2
 800ba2e:	e018      	b.n	800ba62 <HAL_DMA2D_Start+0x4e>
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2201      	movs	r2, #1
 800ba34:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2202      	movs	r2, #2
 800ba3c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800ba40:	69bb      	ldr	r3, [r7, #24]
 800ba42:	9300      	str	r3, [sp, #0]
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	68b9      	ldr	r1, [r7, #8]
 800ba4a:	68f8      	ldr	r0, [r7, #12]
 800ba4c:	f000 f988 	bl	800bd60 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f042 0201 	orr.w	r2, r2, #1
 800ba5e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ba60:	2300      	movs	r3, #0
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3710      	adds	r7, #16
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b086      	sub	sp, #24
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
 800ba72:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800ba74:	2300      	movs	r3, #0
 800ba76:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f003 0301 	and.w	r3, r3, #1
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d056      	beq.n	800bb34 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800ba86:	f7fe fe6b 	bl	800a760 <HAL_GetTick>
 800ba8a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800ba8c:	e04b      	b.n	800bb26 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d023      	beq.n	800bae8 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f003 0320 	and.w	r3, r3, #32
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d005      	beq.n	800bab6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baae:	f043 0202 	orr.w	r2, r3, #2
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f003 0301 	and.w	r3, r3, #1
 800babc:	2b00      	cmp	r3, #0
 800babe:	d005      	beq.n	800bacc <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bac4:	f043 0201 	orr.w	r2, r3, #1
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	2221      	movs	r2, #33	@ 0x21
 800bad2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2204      	movs	r2, #4
 800bad8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2200      	movs	r2, #0
 800bae0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800bae4:	2301      	movs	r3, #1
 800bae6:	e0a5      	b.n	800bc34 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baee:	d01a      	beq.n	800bb26 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800baf0:	f7fe fe36 	bl	800a760 <HAL_GetTick>
 800baf4:	4602      	mov	r2, r0
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	1ad3      	subs	r3, r2, r3
 800bafa:	683a      	ldr	r2, [r7, #0]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d302      	bcc.n	800bb06 <HAL_DMA2D_PollForTransfer+0x9c>
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d10f      	bne.n	800bb26 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb0a:	f043 0220 	orr.w	r2, r3, #32
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2203      	movs	r2, #3
 800bb16:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800bb22:	2303      	movs	r3, #3
 800bb24:	e086      	b.n	800bc34 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	f003 0302 	and.w	r3, r3, #2
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d0ac      	beq.n	800ba8e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	69db      	ldr	r3, [r3, #28]
 800bb3a:	f003 0320 	and.w	r3, r3, #32
 800bb3e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb46:	f003 0320 	and.w	r3, r3, #32
 800bb4a:	693a      	ldr	r2, [r7, #16]
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d061      	beq.n	800bc1a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800bb56:	f7fe fe03 	bl	800a760 <HAL_GetTick>
 800bb5a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800bb5c:	e056      	b.n	800bc0c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d02e      	beq.n	800bbce <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f003 0308 	and.w	r3, r3, #8
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d005      	beq.n	800bb86 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb7e:	f043 0204 	orr.w	r2, r3, #4
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f003 0320 	and.w	r3, r3, #32
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d005      	beq.n	800bb9c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb94:	f043 0202 	orr.w	r2, r3, #2
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f003 0301 	and.w	r3, r3, #1
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d005      	beq.n	800bbb2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbaa:	f043 0201 	orr.w	r2, r3, #1
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	2229      	movs	r2, #41	@ 0x29
 800bbb8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2204      	movs	r2, #4
 800bbbe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e032      	b.n	800bc34 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbd4:	d01a      	beq.n	800bc0c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bbd6:	f7fe fdc3 	bl	800a760 <HAL_GetTick>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	1ad3      	subs	r3, r2, r3
 800bbe0:	683a      	ldr	r2, [r7, #0]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d302      	bcc.n	800bbec <HAL_DMA2D_PollForTransfer+0x182>
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d10f      	bne.n	800bc0c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbf0:	f043 0220 	orr.w	r2, r3, #32
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2203      	movs	r2, #3
 800bbfc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2200      	movs	r2, #0
 800bc04:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800bc08:	2303      	movs	r3, #3
 800bc0a:	e013      	b.n	800bc34 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	f003 0310 	and.w	r3, r3, #16
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d0a1      	beq.n	800bb5e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	2212      	movs	r2, #18
 800bc20:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2201      	movs	r2, #1
 800bc26:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800bc32:	2300      	movs	r3, #0
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3718      	adds	r7, #24
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b087      	sub	sp, #28
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d101      	bne.n	800bc5c <HAL_DMA2D_ConfigLayer+0x20>
 800bc58:	2302      	movs	r3, #2
 800bc5a:	e079      	b.n	800bd50 <HAL_DMA2D_ConfigLayer+0x114>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2202      	movs	r2, #2
 800bc68:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	011b      	lsls	r3, r3, #4
 800bc70:	3318      	adds	r3, #24
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	4413      	add	r3, r2
 800bc76:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	685a      	ldr	r2, [r3, #4]
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	041b      	lsls	r3, r3, #16
 800bc82:	4313      	orrs	r3, r2
 800bc84:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800bc86:	4b35      	ldr	r3, [pc, #212]	@ (800bd5c <HAL_DMA2D_ConfigLayer+0x120>)
 800bc88:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	2b0a      	cmp	r3, #10
 800bc90:	d003      	beq.n	800bc9a <HAL_DMA2D_ConfigLayer+0x5e>
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	685b      	ldr	r3, [r3, #4]
 800bc96:	2b09      	cmp	r3, #9
 800bc98:	d107      	bne.n	800bcaa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	68db      	ldr	r3, [r3, #12]
 800bc9e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800bca2:	697a      	ldr	r2, [r7, #20]
 800bca4:	4313      	orrs	r3, r2
 800bca6:	617b      	str	r3, [r7, #20]
 800bca8:	e005      	b.n	800bcb6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	061b      	lsls	r3, r3, #24
 800bcb0:	697a      	ldr	r2, [r7, #20]
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d120      	bne.n	800bcfe <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	43db      	mvns	r3, r3
 800bcc6:	ea02 0103 	and.w	r1, r2, r3
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	697a      	ldr	r2, [r7, #20]
 800bcd0:	430a      	orrs	r2, r1
 800bcd2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	693a      	ldr	r2, [r7, #16]
 800bcda:	6812      	ldr	r2, [r2, #0]
 800bcdc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	2b0a      	cmp	r3, #10
 800bce4:	d003      	beq.n	800bcee <HAL_DMA2D_ConfigLayer+0xb2>
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	2b09      	cmp	r3, #9
 800bcec:	d127      	bne.n	800bd3e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	68da      	ldr	r2, [r3, #12]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800bcfa:	629a      	str	r2, [r3, #40]	@ 0x28
 800bcfc:	e01f      	b.n	800bd3e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	69da      	ldr	r2, [r3, #28]
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	43db      	mvns	r3, r3
 800bd08:	ea02 0103 	and.w	r1, r2, r3
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	697a      	ldr	r2, [r7, #20]
 800bd12:	430a      	orrs	r2, r1
 800bd14:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	693a      	ldr	r2, [r7, #16]
 800bd1c:	6812      	ldr	r2, [r2, #0]
 800bd1e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	2b0a      	cmp	r3, #10
 800bd26:	d003      	beq.n	800bd30 <HAL_DMA2D_ConfigLayer+0xf4>
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	2b09      	cmp	r3, #9
 800bd2e:	d106      	bne.n	800bd3e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	68da      	ldr	r2, [r3, #12]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800bd3c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2201      	movs	r2, #1
 800bd42:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800bd4e:	2300      	movs	r3, #0
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	371c      	adds	r7, #28
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr
 800bd5c:	ff03000f 	.word	0xff03000f

0800bd60 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b08b      	sub	sp, #44	@ 0x2c
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	60f8      	str	r0, [r7, #12]
 800bd68:	60b9      	str	r1, [r7, #8]
 800bd6a:	607a      	str	r2, [r7, #4]
 800bd6c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd74:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	041a      	lsls	r2, r3, #16
 800bd7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd7e:	431a      	orrs	r2, r3
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	430a      	orrs	r2, r1
 800bd86:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bd98:	d174      	bne.n	800be84 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800bda0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bda8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bdb0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d108      	bne.n	800bdd2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800bdc0:	69ba      	ldr	r2, [r7, #24]
 800bdc2:	69fb      	ldr	r3, [r7, #28]
 800bdc4:	431a      	orrs	r2, r3
 800bdc6:	6a3b      	ldr	r3, [r7, #32]
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	697a      	ldr	r2, [r7, #20]
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdd0:	e053      	b.n	800be7a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d106      	bne.n	800bde8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800bdda:	69ba      	ldr	r2, [r7, #24]
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	4313      	orrs	r3, r2
 800bde0:	697a      	ldr	r2, [r7, #20]
 800bde2:	4313      	orrs	r3, r2
 800bde4:	627b      	str	r3, [r7, #36]	@ 0x24
 800bde6:	e048      	b.n	800be7a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	689b      	ldr	r3, [r3, #8]
 800bdec:	2b02      	cmp	r3, #2
 800bdee:	d111      	bne.n	800be14 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800bdf0:	69fb      	ldr	r3, [r7, #28]
 800bdf2:	0cdb      	lsrs	r3, r3, #19
 800bdf4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	0a9b      	lsrs	r3, r3, #10
 800bdfa:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	08db      	lsrs	r3, r3, #3
 800be00:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800be02:	69bb      	ldr	r3, [r7, #24]
 800be04:	015a      	lsls	r2, r3, #5
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	02db      	lsls	r3, r3, #11
 800be0a:	4313      	orrs	r3, r2
 800be0c:	697a      	ldr	r2, [r7, #20]
 800be0e:	4313      	orrs	r3, r2
 800be10:	627b      	str	r3, [r7, #36]	@ 0x24
 800be12:	e032      	b.n	800be7a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	689b      	ldr	r3, [r3, #8]
 800be18:	2b03      	cmp	r3, #3
 800be1a:	d117      	bne.n	800be4c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800be1c:	6a3b      	ldr	r3, [r7, #32]
 800be1e:	0fdb      	lsrs	r3, r3, #31
 800be20:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800be22:	69fb      	ldr	r3, [r7, #28]
 800be24:	0cdb      	lsrs	r3, r3, #19
 800be26:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800be28:	69bb      	ldr	r3, [r7, #24]
 800be2a:	0adb      	lsrs	r3, r3, #11
 800be2c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	08db      	lsrs	r3, r3, #3
 800be32:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	015a      	lsls	r2, r3, #5
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	029b      	lsls	r3, r3, #10
 800be3c:	431a      	orrs	r2, r3
 800be3e:	6a3b      	ldr	r3, [r7, #32]
 800be40:	03db      	lsls	r3, r3, #15
 800be42:	4313      	orrs	r3, r2
 800be44:	697a      	ldr	r2, [r7, #20]
 800be46:	4313      	orrs	r3, r2
 800be48:	627b      	str	r3, [r7, #36]	@ 0x24
 800be4a:	e016      	b.n	800be7a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800be4c:	6a3b      	ldr	r3, [r7, #32]
 800be4e:	0f1b      	lsrs	r3, r3, #28
 800be50:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800be52:	69fb      	ldr	r3, [r7, #28]
 800be54:	0d1b      	lsrs	r3, r3, #20
 800be56:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	0b1b      	lsrs	r3, r3, #12
 800be5c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	091b      	lsrs	r3, r3, #4
 800be62:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	011a      	lsls	r2, r3, #4
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	021b      	lsls	r3, r3, #8
 800be6c:	431a      	orrs	r2, r3
 800be6e:	6a3b      	ldr	r3, [r7, #32]
 800be70:	031b      	lsls	r3, r3, #12
 800be72:	4313      	orrs	r3, r2
 800be74:	697a      	ldr	r2, [r7, #20]
 800be76:	4313      	orrs	r3, r2
 800be78:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be80:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800be82:	e003      	b.n	800be8c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	68ba      	ldr	r2, [r7, #8]
 800be8a:	60da      	str	r2, [r3, #12]
}
 800be8c:	bf00      	nop
 800be8e:	372c      	adds	r7, #44	@ 0x2c
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr

0800be98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800be98:	b480      	push	{r7}
 800be9a:	b089      	sub	sp, #36	@ 0x24
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800bea2:	2300      	movs	r3, #0
 800bea4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800bea6:	2300      	movs	r3, #0
 800bea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800beaa:	2300      	movs	r3, #0
 800beac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800beae:	2300      	movs	r3, #0
 800beb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800beb2:	2300      	movs	r3, #0
 800beb4:	61fb      	str	r3, [r7, #28]
 800beb6:	e175      	b.n	800c1a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800beb8:	2201      	movs	r2, #1
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	fa02 f303 	lsl.w	r3, r2, r3
 800bec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	697a      	ldr	r2, [r7, #20]
 800bec8:	4013      	ands	r3, r2
 800beca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800becc:	693a      	ldr	r2, [r7, #16]
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	429a      	cmp	r2, r3
 800bed2:	f040 8164 	bne.w	800c19e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	f003 0303 	and.w	r3, r3, #3
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d005      	beq.n	800beee <HAL_GPIO_Init+0x56>
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	f003 0303 	and.w	r3, r3, #3
 800beea:	2b02      	cmp	r3, #2
 800beec:	d130      	bne.n	800bf50 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800bef4:	69fb      	ldr	r3, [r7, #28]
 800bef6:	005b      	lsls	r3, r3, #1
 800bef8:	2203      	movs	r2, #3
 800befa:	fa02 f303 	lsl.w	r3, r2, r3
 800befe:	43db      	mvns	r3, r3
 800bf00:	69ba      	ldr	r2, [r7, #24]
 800bf02:	4013      	ands	r3, r2
 800bf04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	68da      	ldr	r2, [r3, #12]
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	005b      	lsls	r3, r3, #1
 800bf0e:	fa02 f303 	lsl.w	r3, r2, r3
 800bf12:	69ba      	ldr	r2, [r7, #24]
 800bf14:	4313      	orrs	r3, r2
 800bf16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	69ba      	ldr	r2, [r7, #24]
 800bf1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bf24:	2201      	movs	r2, #1
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	fa02 f303 	lsl.w	r3, r2, r3
 800bf2c:	43db      	mvns	r3, r3
 800bf2e:	69ba      	ldr	r2, [r7, #24]
 800bf30:	4013      	ands	r3, r2
 800bf32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	091b      	lsrs	r3, r3, #4
 800bf3a:	f003 0201 	and.w	r2, r3, #1
 800bf3e:	69fb      	ldr	r3, [r7, #28]
 800bf40:	fa02 f303 	lsl.w	r3, r2, r3
 800bf44:	69ba      	ldr	r2, [r7, #24]
 800bf46:	4313      	orrs	r3, r2
 800bf48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	69ba      	ldr	r2, [r7, #24]
 800bf4e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	f003 0303 	and.w	r3, r3, #3
 800bf58:	2b03      	cmp	r3, #3
 800bf5a:	d017      	beq.n	800bf8c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	68db      	ldr	r3, [r3, #12]
 800bf60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800bf62:	69fb      	ldr	r3, [r7, #28]
 800bf64:	005b      	lsls	r3, r3, #1
 800bf66:	2203      	movs	r2, #3
 800bf68:	fa02 f303 	lsl.w	r3, r2, r3
 800bf6c:	43db      	mvns	r3, r3
 800bf6e:	69ba      	ldr	r2, [r7, #24]
 800bf70:	4013      	ands	r3, r2
 800bf72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	689a      	ldr	r2, [r3, #8]
 800bf78:	69fb      	ldr	r3, [r7, #28]
 800bf7a:	005b      	lsls	r3, r3, #1
 800bf7c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf80:	69ba      	ldr	r2, [r7, #24]
 800bf82:	4313      	orrs	r3, r2
 800bf84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	69ba      	ldr	r2, [r7, #24]
 800bf8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	f003 0303 	and.w	r3, r3, #3
 800bf94:	2b02      	cmp	r3, #2
 800bf96:	d123      	bne.n	800bfe0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800bf98:	69fb      	ldr	r3, [r7, #28]
 800bf9a:	08da      	lsrs	r2, r3, #3
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	3208      	adds	r2, #8
 800bfa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	f003 0307 	and.w	r3, r3, #7
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	220f      	movs	r2, #15
 800bfb0:	fa02 f303 	lsl.w	r3, r2, r3
 800bfb4:	43db      	mvns	r3, r3
 800bfb6:	69ba      	ldr	r2, [r7, #24]
 800bfb8:	4013      	ands	r3, r2
 800bfba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	691a      	ldr	r2, [r3, #16]
 800bfc0:	69fb      	ldr	r3, [r7, #28]
 800bfc2:	f003 0307 	and.w	r3, r3, #7
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	fa02 f303 	lsl.w	r3, r2, r3
 800bfcc:	69ba      	ldr	r2, [r7, #24]
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800bfd2:	69fb      	ldr	r3, [r7, #28]
 800bfd4:	08da      	lsrs	r2, r3, #3
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	3208      	adds	r2, #8
 800bfda:	69b9      	ldr	r1, [r7, #24]
 800bfdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800bfe6:	69fb      	ldr	r3, [r7, #28]
 800bfe8:	005b      	lsls	r3, r3, #1
 800bfea:	2203      	movs	r2, #3
 800bfec:	fa02 f303 	lsl.w	r3, r2, r3
 800bff0:	43db      	mvns	r3, r3
 800bff2:	69ba      	ldr	r2, [r7, #24]
 800bff4:	4013      	ands	r3, r2
 800bff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	f003 0203 	and.w	r2, r3, #3
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	005b      	lsls	r3, r3, #1
 800c004:	fa02 f303 	lsl.w	r3, r2, r3
 800c008:	69ba      	ldr	r2, [r7, #24]
 800c00a:	4313      	orrs	r3, r2
 800c00c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	69ba      	ldr	r2, [r7, #24]
 800c012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f000 80be 	beq.w	800c19e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c022:	4b66      	ldr	r3, [pc, #408]	@ (800c1bc <HAL_GPIO_Init+0x324>)
 800c024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c026:	4a65      	ldr	r2, [pc, #404]	@ (800c1bc <HAL_GPIO_Init+0x324>)
 800c028:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c02c:	6453      	str	r3, [r2, #68]	@ 0x44
 800c02e:	4b63      	ldr	r3, [pc, #396]	@ (800c1bc <HAL_GPIO_Init+0x324>)
 800c030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c036:	60fb      	str	r3, [r7, #12]
 800c038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800c03a:	4a61      	ldr	r2, [pc, #388]	@ (800c1c0 <HAL_GPIO_Init+0x328>)
 800c03c:	69fb      	ldr	r3, [r7, #28]
 800c03e:	089b      	lsrs	r3, r3, #2
 800c040:	3302      	adds	r3, #2
 800c042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c046:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c048:	69fb      	ldr	r3, [r7, #28]
 800c04a:	f003 0303 	and.w	r3, r3, #3
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	220f      	movs	r2, #15
 800c052:	fa02 f303 	lsl.w	r3, r2, r3
 800c056:	43db      	mvns	r3, r3
 800c058:	69ba      	ldr	r2, [r7, #24]
 800c05a:	4013      	ands	r3, r2
 800c05c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	4a58      	ldr	r2, [pc, #352]	@ (800c1c4 <HAL_GPIO_Init+0x32c>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d037      	beq.n	800c0d6 <HAL_GPIO_Init+0x23e>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4a57      	ldr	r2, [pc, #348]	@ (800c1c8 <HAL_GPIO_Init+0x330>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d031      	beq.n	800c0d2 <HAL_GPIO_Init+0x23a>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	4a56      	ldr	r2, [pc, #344]	@ (800c1cc <HAL_GPIO_Init+0x334>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d02b      	beq.n	800c0ce <HAL_GPIO_Init+0x236>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	4a55      	ldr	r2, [pc, #340]	@ (800c1d0 <HAL_GPIO_Init+0x338>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d025      	beq.n	800c0ca <HAL_GPIO_Init+0x232>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	4a54      	ldr	r2, [pc, #336]	@ (800c1d4 <HAL_GPIO_Init+0x33c>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d01f      	beq.n	800c0c6 <HAL_GPIO_Init+0x22e>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	4a53      	ldr	r2, [pc, #332]	@ (800c1d8 <HAL_GPIO_Init+0x340>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d019      	beq.n	800c0c2 <HAL_GPIO_Init+0x22a>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	4a52      	ldr	r2, [pc, #328]	@ (800c1dc <HAL_GPIO_Init+0x344>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d013      	beq.n	800c0be <HAL_GPIO_Init+0x226>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	4a51      	ldr	r2, [pc, #324]	@ (800c1e0 <HAL_GPIO_Init+0x348>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d00d      	beq.n	800c0ba <HAL_GPIO_Init+0x222>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	4a50      	ldr	r2, [pc, #320]	@ (800c1e4 <HAL_GPIO_Init+0x34c>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d007      	beq.n	800c0b6 <HAL_GPIO_Init+0x21e>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	4a4f      	ldr	r2, [pc, #316]	@ (800c1e8 <HAL_GPIO_Init+0x350>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d101      	bne.n	800c0b2 <HAL_GPIO_Init+0x21a>
 800c0ae:	2309      	movs	r3, #9
 800c0b0:	e012      	b.n	800c0d8 <HAL_GPIO_Init+0x240>
 800c0b2:	230a      	movs	r3, #10
 800c0b4:	e010      	b.n	800c0d8 <HAL_GPIO_Init+0x240>
 800c0b6:	2308      	movs	r3, #8
 800c0b8:	e00e      	b.n	800c0d8 <HAL_GPIO_Init+0x240>
 800c0ba:	2307      	movs	r3, #7
 800c0bc:	e00c      	b.n	800c0d8 <HAL_GPIO_Init+0x240>
 800c0be:	2306      	movs	r3, #6
 800c0c0:	e00a      	b.n	800c0d8 <HAL_GPIO_Init+0x240>
 800c0c2:	2305      	movs	r3, #5
 800c0c4:	e008      	b.n	800c0d8 <HAL_GPIO_Init+0x240>
 800c0c6:	2304      	movs	r3, #4
 800c0c8:	e006      	b.n	800c0d8 <HAL_GPIO_Init+0x240>
 800c0ca:	2303      	movs	r3, #3
 800c0cc:	e004      	b.n	800c0d8 <HAL_GPIO_Init+0x240>
 800c0ce:	2302      	movs	r3, #2
 800c0d0:	e002      	b.n	800c0d8 <HAL_GPIO_Init+0x240>
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	e000      	b.n	800c0d8 <HAL_GPIO_Init+0x240>
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	69fa      	ldr	r2, [r7, #28]
 800c0da:	f002 0203 	and.w	r2, r2, #3
 800c0de:	0092      	lsls	r2, r2, #2
 800c0e0:	4093      	lsls	r3, r2
 800c0e2:	69ba      	ldr	r2, [r7, #24]
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800c0e8:	4935      	ldr	r1, [pc, #212]	@ (800c1c0 <HAL_GPIO_Init+0x328>)
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	089b      	lsrs	r3, r3, #2
 800c0ee:	3302      	adds	r3, #2
 800c0f0:	69ba      	ldr	r2, [r7, #24]
 800c0f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c0f6:	4b3d      	ldr	r3, [pc, #244]	@ (800c1ec <HAL_GPIO_Init+0x354>)
 800c0f8:	689b      	ldr	r3, [r3, #8]
 800c0fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	43db      	mvns	r3, r3
 800c100:	69ba      	ldr	r2, [r7, #24]
 800c102:	4013      	ands	r3, r2
 800c104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d003      	beq.n	800c11a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800c112:	69ba      	ldr	r2, [r7, #24]
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	4313      	orrs	r3, r2
 800c118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c11a:	4a34      	ldr	r2, [pc, #208]	@ (800c1ec <HAL_GPIO_Init+0x354>)
 800c11c:	69bb      	ldr	r3, [r7, #24]
 800c11e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c120:	4b32      	ldr	r3, [pc, #200]	@ (800c1ec <HAL_GPIO_Init+0x354>)
 800c122:	68db      	ldr	r3, [r3, #12]
 800c124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	43db      	mvns	r3, r3
 800c12a:	69ba      	ldr	r2, [r7, #24]
 800c12c:	4013      	ands	r3, r2
 800c12e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d003      	beq.n	800c144 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800c13c:	69ba      	ldr	r2, [r7, #24]
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	4313      	orrs	r3, r2
 800c142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c144:	4a29      	ldr	r2, [pc, #164]	@ (800c1ec <HAL_GPIO_Init+0x354>)
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800c14a:	4b28      	ldr	r3, [pc, #160]	@ (800c1ec <HAL_GPIO_Init+0x354>)
 800c14c:	685b      	ldr	r3, [r3, #4]
 800c14e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	43db      	mvns	r3, r3
 800c154:	69ba      	ldr	r2, [r7, #24]
 800c156:	4013      	ands	r3, r2
 800c158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c162:	2b00      	cmp	r3, #0
 800c164:	d003      	beq.n	800c16e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800c166:	69ba      	ldr	r2, [r7, #24]
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	4313      	orrs	r3, r2
 800c16c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c16e:	4a1f      	ldr	r2, [pc, #124]	@ (800c1ec <HAL_GPIO_Init+0x354>)
 800c170:	69bb      	ldr	r3, [r7, #24]
 800c172:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c174:	4b1d      	ldr	r3, [pc, #116]	@ (800c1ec <HAL_GPIO_Init+0x354>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	43db      	mvns	r3, r3
 800c17e:	69ba      	ldr	r2, [r7, #24]
 800c180:	4013      	ands	r3, r2
 800c182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d003      	beq.n	800c198 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800c190:	69ba      	ldr	r2, [r7, #24]
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	4313      	orrs	r3, r2
 800c196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c198:	4a14      	ldr	r2, [pc, #80]	@ (800c1ec <HAL_GPIO_Init+0x354>)
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800c19e:	69fb      	ldr	r3, [r7, #28]
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	61fb      	str	r3, [r7, #28]
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	2b0f      	cmp	r3, #15
 800c1a8:	f67f ae86 	bls.w	800beb8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800c1ac:	bf00      	nop
 800c1ae:	bf00      	nop
 800c1b0:	3724      	adds	r7, #36	@ 0x24
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr
 800c1ba:	bf00      	nop
 800c1bc:	40023800 	.word	0x40023800
 800c1c0:	40013800 	.word	0x40013800
 800c1c4:	40020000 	.word	0x40020000
 800c1c8:	40020400 	.word	0x40020400
 800c1cc:	40020800 	.word	0x40020800
 800c1d0:	40020c00 	.word	0x40020c00
 800c1d4:	40021000 	.word	0x40021000
 800c1d8:	40021400 	.word	0x40021400
 800c1dc:	40021800 	.word	0x40021800
 800c1e0:	40021c00 	.word	0x40021c00
 800c1e4:	40022000 	.word	0x40022000
 800c1e8:	40022400 	.word	0x40022400
 800c1ec:	40013c00 	.word	0x40013c00

0800c1f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b087      	sub	sp, #28
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800c1fe:	2300      	movs	r3, #0
 800c200:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800c202:	2300      	movs	r3, #0
 800c204:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800c206:	2300      	movs	r3, #0
 800c208:	617b      	str	r3, [r7, #20]
 800c20a:	e0d9      	b.n	800c3c0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800c20c:	2201      	movs	r2, #1
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	fa02 f303 	lsl.w	r3, r2, r3
 800c214:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800c216:	683a      	ldr	r2, [r7, #0]
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	4013      	ands	r3, r2
 800c21c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800c21e:	68fa      	ldr	r2, [r7, #12]
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	429a      	cmp	r2, r3
 800c224:	f040 80c9 	bne.w	800c3ba <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800c228:	4a6b      	ldr	r2, [pc, #428]	@ (800c3d8 <HAL_GPIO_DeInit+0x1e8>)
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	089b      	lsrs	r3, r3, #2
 800c22e:	3302      	adds	r3, #2
 800c230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c234:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	f003 0303 	and.w	r3, r3, #3
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	220f      	movs	r2, #15
 800c240:	fa02 f303 	lsl.w	r3, r2, r3
 800c244:	68ba      	ldr	r2, [r7, #8]
 800c246:	4013      	ands	r3, r2
 800c248:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4a63      	ldr	r2, [pc, #396]	@ (800c3dc <HAL_GPIO_DeInit+0x1ec>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d037      	beq.n	800c2c2 <HAL_GPIO_DeInit+0xd2>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	4a62      	ldr	r2, [pc, #392]	@ (800c3e0 <HAL_GPIO_DeInit+0x1f0>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d031      	beq.n	800c2be <HAL_GPIO_DeInit+0xce>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	4a61      	ldr	r2, [pc, #388]	@ (800c3e4 <HAL_GPIO_DeInit+0x1f4>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d02b      	beq.n	800c2ba <HAL_GPIO_DeInit+0xca>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	4a60      	ldr	r2, [pc, #384]	@ (800c3e8 <HAL_GPIO_DeInit+0x1f8>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d025      	beq.n	800c2b6 <HAL_GPIO_DeInit+0xc6>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	4a5f      	ldr	r2, [pc, #380]	@ (800c3ec <HAL_GPIO_DeInit+0x1fc>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d01f      	beq.n	800c2b2 <HAL_GPIO_DeInit+0xc2>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4a5e      	ldr	r2, [pc, #376]	@ (800c3f0 <HAL_GPIO_DeInit+0x200>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d019      	beq.n	800c2ae <HAL_GPIO_DeInit+0xbe>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4a5d      	ldr	r2, [pc, #372]	@ (800c3f4 <HAL_GPIO_DeInit+0x204>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d013      	beq.n	800c2aa <HAL_GPIO_DeInit+0xba>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4a5c      	ldr	r2, [pc, #368]	@ (800c3f8 <HAL_GPIO_DeInit+0x208>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d00d      	beq.n	800c2a6 <HAL_GPIO_DeInit+0xb6>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4a5b      	ldr	r2, [pc, #364]	@ (800c3fc <HAL_GPIO_DeInit+0x20c>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d007      	beq.n	800c2a2 <HAL_GPIO_DeInit+0xb2>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4a5a      	ldr	r2, [pc, #360]	@ (800c400 <HAL_GPIO_DeInit+0x210>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d101      	bne.n	800c29e <HAL_GPIO_DeInit+0xae>
 800c29a:	2309      	movs	r3, #9
 800c29c:	e012      	b.n	800c2c4 <HAL_GPIO_DeInit+0xd4>
 800c29e:	230a      	movs	r3, #10
 800c2a0:	e010      	b.n	800c2c4 <HAL_GPIO_DeInit+0xd4>
 800c2a2:	2308      	movs	r3, #8
 800c2a4:	e00e      	b.n	800c2c4 <HAL_GPIO_DeInit+0xd4>
 800c2a6:	2307      	movs	r3, #7
 800c2a8:	e00c      	b.n	800c2c4 <HAL_GPIO_DeInit+0xd4>
 800c2aa:	2306      	movs	r3, #6
 800c2ac:	e00a      	b.n	800c2c4 <HAL_GPIO_DeInit+0xd4>
 800c2ae:	2305      	movs	r3, #5
 800c2b0:	e008      	b.n	800c2c4 <HAL_GPIO_DeInit+0xd4>
 800c2b2:	2304      	movs	r3, #4
 800c2b4:	e006      	b.n	800c2c4 <HAL_GPIO_DeInit+0xd4>
 800c2b6:	2303      	movs	r3, #3
 800c2b8:	e004      	b.n	800c2c4 <HAL_GPIO_DeInit+0xd4>
 800c2ba:	2302      	movs	r3, #2
 800c2bc:	e002      	b.n	800c2c4 <HAL_GPIO_DeInit+0xd4>
 800c2be:	2301      	movs	r3, #1
 800c2c0:	e000      	b.n	800c2c4 <HAL_GPIO_DeInit+0xd4>
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	697a      	ldr	r2, [r7, #20]
 800c2c6:	f002 0203 	and.w	r2, r2, #3
 800c2ca:	0092      	lsls	r2, r2, #2
 800c2cc:	4093      	lsls	r3, r2
 800c2ce:	68ba      	ldr	r2, [r7, #8]
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d132      	bne.n	800c33a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800c2d4:	4b4b      	ldr	r3, [pc, #300]	@ (800c404 <HAL_GPIO_DeInit+0x214>)
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	43db      	mvns	r3, r3
 800c2dc:	4949      	ldr	r1, [pc, #292]	@ (800c404 <HAL_GPIO_DeInit+0x214>)
 800c2de:	4013      	ands	r3, r2
 800c2e0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800c2e2:	4b48      	ldr	r3, [pc, #288]	@ (800c404 <HAL_GPIO_DeInit+0x214>)
 800c2e4:	685a      	ldr	r2, [r3, #4]
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	43db      	mvns	r3, r3
 800c2ea:	4946      	ldr	r1, [pc, #280]	@ (800c404 <HAL_GPIO_DeInit+0x214>)
 800c2ec:	4013      	ands	r3, r2
 800c2ee:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800c2f0:	4b44      	ldr	r3, [pc, #272]	@ (800c404 <HAL_GPIO_DeInit+0x214>)
 800c2f2:	68da      	ldr	r2, [r3, #12]
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	43db      	mvns	r3, r3
 800c2f8:	4942      	ldr	r1, [pc, #264]	@ (800c404 <HAL_GPIO_DeInit+0x214>)
 800c2fa:	4013      	ands	r3, r2
 800c2fc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800c2fe:	4b41      	ldr	r3, [pc, #260]	@ (800c404 <HAL_GPIO_DeInit+0x214>)
 800c300:	689a      	ldr	r2, [r3, #8]
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	43db      	mvns	r3, r3
 800c306:	493f      	ldr	r1, [pc, #252]	@ (800c404 <HAL_GPIO_DeInit+0x214>)
 800c308:	4013      	ands	r3, r2
 800c30a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	f003 0303 	and.w	r3, r3, #3
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	220f      	movs	r2, #15
 800c316:	fa02 f303 	lsl.w	r3, r2, r3
 800c31a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800c31c:	4a2e      	ldr	r2, [pc, #184]	@ (800c3d8 <HAL_GPIO_DeInit+0x1e8>)
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	089b      	lsrs	r3, r3, #2
 800c322:	3302      	adds	r3, #2
 800c324:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	43da      	mvns	r2, r3
 800c32c:	482a      	ldr	r0, [pc, #168]	@ (800c3d8 <HAL_GPIO_DeInit+0x1e8>)
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	089b      	lsrs	r3, r3, #2
 800c332:	400a      	ands	r2, r1
 800c334:	3302      	adds	r3, #2
 800c336:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681a      	ldr	r2, [r3, #0]
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	005b      	lsls	r3, r3, #1
 800c342:	2103      	movs	r1, #3
 800c344:	fa01 f303 	lsl.w	r3, r1, r3
 800c348:	43db      	mvns	r3, r3
 800c34a:	401a      	ands	r2, r3
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	08da      	lsrs	r2, r3, #3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	3208      	adds	r2, #8
 800c358:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	f003 0307 	and.w	r3, r3, #7
 800c362:	009b      	lsls	r3, r3, #2
 800c364:	220f      	movs	r2, #15
 800c366:	fa02 f303 	lsl.w	r3, r2, r3
 800c36a:	43db      	mvns	r3, r3
 800c36c:	697a      	ldr	r2, [r7, #20]
 800c36e:	08d2      	lsrs	r2, r2, #3
 800c370:	4019      	ands	r1, r3
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	3208      	adds	r2, #8
 800c376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	68da      	ldr	r2, [r3, #12]
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	005b      	lsls	r3, r3, #1
 800c382:	2103      	movs	r1, #3
 800c384:	fa01 f303 	lsl.w	r3, r1, r3
 800c388:	43db      	mvns	r3, r3
 800c38a:	401a      	ands	r2, r3
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	685a      	ldr	r2, [r3, #4]
 800c394:	2101      	movs	r1, #1
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	fa01 f303 	lsl.w	r3, r1, r3
 800c39c:	43db      	mvns	r3, r3
 800c39e:	401a      	ands	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	689a      	ldr	r2, [r3, #8]
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	005b      	lsls	r3, r3, #1
 800c3ac:	2103      	movs	r1, #3
 800c3ae:	fa01 f303 	lsl.w	r3, r1, r3
 800c3b2:	43db      	mvns	r3, r3
 800c3b4:	401a      	ands	r2, r3
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	3301      	adds	r3, #1
 800c3be:	617b      	str	r3, [r7, #20]
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	2b0f      	cmp	r3, #15
 800c3c4:	f67f af22 	bls.w	800c20c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800c3c8:	bf00      	nop
 800c3ca:	bf00      	nop
 800c3cc:	371c      	adds	r7, #28
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr
 800c3d6:	bf00      	nop
 800c3d8:	40013800 	.word	0x40013800
 800c3dc:	40020000 	.word	0x40020000
 800c3e0:	40020400 	.word	0x40020400
 800c3e4:	40020800 	.word	0x40020800
 800c3e8:	40020c00 	.word	0x40020c00
 800c3ec:	40021000 	.word	0x40021000
 800c3f0:	40021400 	.word	0x40021400
 800c3f4:	40021800 	.word	0x40021800
 800c3f8:	40021c00 	.word	0x40021c00
 800c3fc:	40022000 	.word	0x40022000
 800c400:	40022400 	.word	0x40022400
 800c404:	40013c00 	.word	0x40013c00

0800c408 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c408:	b480      	push	{r7}
 800c40a:	b085      	sub	sp, #20
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	460b      	mov	r3, r1
 800c412:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	691a      	ldr	r2, [r3, #16]
 800c418:	887b      	ldrh	r3, [r7, #2]
 800c41a:	4013      	ands	r3, r2
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d002      	beq.n	800c426 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c420:	2301      	movs	r3, #1
 800c422:	73fb      	strb	r3, [r7, #15]
 800c424:	e001      	b.n	800c42a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c426:	2300      	movs	r3, #0
 800c428:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3714      	adds	r7, #20
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr

0800c438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c438:	b480      	push	{r7}
 800c43a:	b083      	sub	sp, #12
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	460b      	mov	r3, r1
 800c442:	807b      	strh	r3, [r7, #2]
 800c444:	4613      	mov	r3, r2
 800c446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c448:	787b      	ldrb	r3, [r7, #1]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d003      	beq.n	800c456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c44e:	887a      	ldrh	r2, [r7, #2]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800c454:	e003      	b.n	800c45e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800c456:	887b      	ldrh	r3, [r7, #2]
 800c458:	041a      	lsls	r2, r3, #16
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	619a      	str	r2, [r3, #24]
}
 800c45e:	bf00      	nop
 800c460:	370c      	adds	r7, #12
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr
	...

0800c46c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d101      	bne.n	800c47e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c47a:	2301      	movs	r3, #1
 800c47c:	e07f      	b.n	800c57e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c484:	b2db      	uxtb	r3, r3
 800c486:	2b00      	cmp	r3, #0
 800c488:	d106      	bne.n	800c498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2200      	movs	r2, #0
 800c48e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f000 f8a9 	bl	800c5ea <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2224      	movs	r2, #36	@ 0x24
 800c49c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	681a      	ldr	r2, [r3, #0]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f022 0201 	bic.w	r2, r2, #1
 800c4ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	685a      	ldr	r2, [r3, #4]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800c4bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	689a      	ldr	r2, [r3, #8]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c4cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d107      	bne.n	800c4e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	689a      	ldr	r2, [r3, #8]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c4e2:	609a      	str	r2, [r3, #8]
 800c4e4:	e006      	b.n	800c4f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	689a      	ldr	r2, [r3, #8]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800c4f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	68db      	ldr	r3, [r3, #12]
 800c4f8:	2b02      	cmp	r3, #2
 800c4fa:	d104      	bne.n	800c506 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c504:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	6859      	ldr	r1, [r3, #4]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	4b1d      	ldr	r3, [pc, #116]	@ (800c588 <HAL_I2C_Init+0x11c>)
 800c512:	430b      	orrs	r3, r1
 800c514:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	68da      	ldr	r2, [r3, #12]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c524:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	691a      	ldr	r2, [r3, #16]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	695b      	ldr	r3, [r3, #20]
 800c52e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	699b      	ldr	r3, [r3, #24]
 800c536:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	430a      	orrs	r2, r1
 800c53e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	69d9      	ldr	r1, [r3, #28]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6a1a      	ldr	r2, [r3, #32]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	430a      	orrs	r2, r1
 800c54e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	681a      	ldr	r2, [r3, #0]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f042 0201 	orr.w	r2, r2, #1
 800c55e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2220      	movs	r2, #32
 800c56a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2200      	movs	r2, #0
 800c572:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800c57c:	2300      	movs	r3, #0
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3708      	adds	r7, #8
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
 800c586:	bf00      	nop
 800c588:	02008000 	.word	0x02008000

0800c58c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b082      	sub	sp, #8
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d101      	bne.n	800c59e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800c59a:	2301      	movs	r3, #1
 800c59c:	e021      	b.n	800c5e2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2224      	movs	r2, #36	@ 0x24
 800c5a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f022 0201 	bic.w	r2, r2, #1
 800c5b4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f000 f821 	bl	800c5fe <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c5e0:	2300      	movs	r3, #0
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3708      	adds	r7, #8
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800c5ea:	b480      	push	{r7}
 800c5ec:	b083      	sub	sp, #12
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800c5f2:	bf00      	nop
 800c5f4:	370c      	adds	r7, #12
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr

0800c5fe <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800c5fe:	b480      	push	{r7}
 800c600:	b083      	sub	sp, #12
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800c606:	bf00      	nop
 800c608:	370c      	adds	r7, #12
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr
	...

0800c614 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b088      	sub	sp, #32
 800c618:	af02      	add	r7, sp, #8
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	4608      	mov	r0, r1
 800c61e:	4611      	mov	r1, r2
 800c620:	461a      	mov	r2, r3
 800c622:	4603      	mov	r3, r0
 800c624:	817b      	strh	r3, [r7, #10]
 800c626:	460b      	mov	r3, r1
 800c628:	813b      	strh	r3, [r7, #8]
 800c62a:	4613      	mov	r3, r2
 800c62c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c634:	b2db      	uxtb	r3, r3
 800c636:	2b20      	cmp	r3, #32
 800c638:	f040 80f9 	bne.w	800c82e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c63c:	6a3b      	ldr	r3, [r7, #32]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d002      	beq.n	800c648 <HAL_I2C_Mem_Write+0x34>
 800c642:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c644:	2b00      	cmp	r3, #0
 800c646:	d105      	bne.n	800c654 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c64e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800c650:	2301      	movs	r3, #1
 800c652:	e0ed      	b.n	800c830 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d101      	bne.n	800c662 <HAL_I2C_Mem_Write+0x4e>
 800c65e:	2302      	movs	r3, #2
 800c660:	e0e6      	b.n	800c830 <HAL_I2C_Mem_Write+0x21c>
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2201      	movs	r2, #1
 800c666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c66a:	f7fe f879 	bl	800a760 <HAL_GetTick>
 800c66e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	9300      	str	r3, [sp, #0]
 800c674:	2319      	movs	r3, #25
 800c676:	2201      	movs	r2, #1
 800c678:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c67c:	68f8      	ldr	r0, [r7, #12]
 800c67e:	f000 fad1 	bl	800cc24 <I2C_WaitOnFlagUntilTimeout>
 800c682:	4603      	mov	r3, r0
 800c684:	2b00      	cmp	r3, #0
 800c686:	d001      	beq.n	800c68c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800c688:	2301      	movs	r3, #1
 800c68a:	e0d1      	b.n	800c830 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2221      	movs	r2, #33	@ 0x21
 800c690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	2240      	movs	r2, #64	@ 0x40
 800c698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	6a3a      	ldr	r2, [r7, #32]
 800c6a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c6ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c6b4:	88f8      	ldrh	r0, [r7, #6]
 800c6b6:	893a      	ldrh	r2, [r7, #8]
 800c6b8:	8979      	ldrh	r1, [r7, #10]
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	9301      	str	r3, [sp, #4]
 800c6be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6c0:	9300      	str	r3, [sp, #0]
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	68f8      	ldr	r0, [r7, #12]
 800c6c6:	f000 f9e1 	bl	800ca8c <I2C_RequestMemoryWrite>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d005      	beq.n	800c6dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800c6d8:	2301      	movs	r3, #1
 800c6da:	e0a9      	b.n	800c830 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c6e0:	b29b      	uxth	r3, r3
 800c6e2:	2bff      	cmp	r3, #255	@ 0xff
 800c6e4:	d90e      	bls.n	800c704 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	22ff      	movs	r2, #255	@ 0xff
 800c6ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c6f0:	b2da      	uxtb	r2, r3
 800c6f2:	8979      	ldrh	r1, [r7, #10]
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	9300      	str	r3, [sp, #0]
 800c6f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c6fc:	68f8      	ldr	r0, [r7, #12]
 800c6fe:	f000 fc2d 	bl	800cf5c <I2C_TransferConfig>
 800c702:	e00f      	b.n	800c724 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c708:	b29a      	uxth	r2, r3
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c712:	b2da      	uxtb	r2, r3
 800c714:	8979      	ldrh	r1, [r7, #10]
 800c716:	2300      	movs	r3, #0
 800c718:	9300      	str	r3, [sp, #0]
 800c71a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c71e:	68f8      	ldr	r0, [r7, #12]
 800c720:	f000 fc1c 	bl	800cf5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c724:	697a      	ldr	r2, [r7, #20]
 800c726:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c728:	68f8      	ldr	r0, [r7, #12]
 800c72a:	f000 fabb 	bl	800cca4 <I2C_WaitOnTXISFlagUntilTimeout>
 800c72e:	4603      	mov	r3, r0
 800c730:	2b00      	cmp	r3, #0
 800c732:	d001      	beq.n	800c738 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800c734:	2301      	movs	r3, #1
 800c736:	e07b      	b.n	800c830 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c73c:	781a      	ldrb	r2, [r3, #0]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c748:	1c5a      	adds	r2, r3, #1
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c752:	b29b      	uxth	r3, r3
 800c754:	3b01      	subs	r3, #1
 800c756:	b29a      	uxth	r2, r3
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c760:	3b01      	subs	r3, #1
 800c762:	b29a      	uxth	r2, r3
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c76c:	b29b      	uxth	r3, r3
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d034      	beq.n	800c7dc <HAL_I2C_Mem_Write+0x1c8>
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c776:	2b00      	cmp	r3, #0
 800c778:	d130      	bne.n	800c7dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	9300      	str	r3, [sp, #0]
 800c77e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c780:	2200      	movs	r2, #0
 800c782:	2180      	movs	r1, #128	@ 0x80
 800c784:	68f8      	ldr	r0, [r7, #12]
 800c786:	f000 fa4d 	bl	800cc24 <I2C_WaitOnFlagUntilTimeout>
 800c78a:	4603      	mov	r3, r0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d001      	beq.n	800c794 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800c790:	2301      	movs	r3, #1
 800c792:	e04d      	b.n	800c830 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c798:	b29b      	uxth	r3, r3
 800c79a:	2bff      	cmp	r3, #255	@ 0xff
 800c79c:	d90e      	bls.n	800c7bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	22ff      	movs	r2, #255	@ 0xff
 800c7a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c7a8:	b2da      	uxtb	r2, r3
 800c7aa:	8979      	ldrh	r1, [r7, #10]
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	9300      	str	r3, [sp, #0]
 800c7b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c7b4:	68f8      	ldr	r0, [r7, #12]
 800c7b6:	f000 fbd1 	bl	800cf5c <I2C_TransferConfig>
 800c7ba:	e00f      	b.n	800c7dc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c7c0:	b29a      	uxth	r2, r3
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c7ca:	b2da      	uxtb	r2, r3
 800c7cc:	8979      	ldrh	r1, [r7, #10]
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	9300      	str	r3, [sp, #0]
 800c7d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c7d6:	68f8      	ldr	r0, [r7, #12]
 800c7d8:	f000 fbc0 	bl	800cf5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d19e      	bne.n	800c724 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c7e6:	697a      	ldr	r2, [r7, #20]
 800c7e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c7ea:	68f8      	ldr	r0, [r7, #12]
 800c7ec:	f000 fa9a 	bl	800cd24 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d001      	beq.n	800c7fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e01a      	b.n	800c830 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	2220      	movs	r2, #32
 800c800:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	6859      	ldr	r1, [r3, #4]
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	4b0a      	ldr	r3, [pc, #40]	@ (800c838 <HAL_I2C_Mem_Write+0x224>)
 800c80e:	400b      	ands	r3, r1
 800c810:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	2220      	movs	r2, #32
 800c816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	2200      	movs	r2, #0
 800c81e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	2200      	movs	r2, #0
 800c826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c82a:	2300      	movs	r3, #0
 800c82c:	e000      	b.n	800c830 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800c82e:	2302      	movs	r3, #2
  }
}
 800c830:	4618      	mov	r0, r3
 800c832:	3718      	adds	r7, #24
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}
 800c838:	fe00e800 	.word	0xfe00e800

0800c83c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b088      	sub	sp, #32
 800c840:	af02      	add	r7, sp, #8
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	4608      	mov	r0, r1
 800c846:	4611      	mov	r1, r2
 800c848:	461a      	mov	r2, r3
 800c84a:	4603      	mov	r3, r0
 800c84c:	817b      	strh	r3, [r7, #10]
 800c84e:	460b      	mov	r3, r1
 800c850:	813b      	strh	r3, [r7, #8]
 800c852:	4613      	mov	r3, r2
 800c854:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c85c:	b2db      	uxtb	r3, r3
 800c85e:	2b20      	cmp	r3, #32
 800c860:	f040 80fd 	bne.w	800ca5e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800c864:	6a3b      	ldr	r3, [r7, #32]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d002      	beq.n	800c870 <HAL_I2C_Mem_Read+0x34>
 800c86a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d105      	bne.n	800c87c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c876:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800c878:	2301      	movs	r3, #1
 800c87a:	e0f1      	b.n	800ca60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c882:	2b01      	cmp	r3, #1
 800c884:	d101      	bne.n	800c88a <HAL_I2C_Mem_Read+0x4e>
 800c886:	2302      	movs	r3, #2
 800c888:	e0ea      	b.n	800ca60 <HAL_I2C_Mem_Read+0x224>
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2201      	movs	r2, #1
 800c88e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c892:	f7fd ff65 	bl	800a760 <HAL_GetTick>
 800c896:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	9300      	str	r3, [sp, #0]
 800c89c:	2319      	movs	r3, #25
 800c89e:	2201      	movs	r2, #1
 800c8a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c8a4:	68f8      	ldr	r0, [r7, #12]
 800c8a6:	f000 f9bd 	bl	800cc24 <I2C_WaitOnFlagUntilTimeout>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d001      	beq.n	800c8b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	e0d5      	b.n	800ca60 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2222      	movs	r2, #34	@ 0x22
 800c8b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2240      	movs	r2, #64	@ 0x40
 800c8c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6a3a      	ldr	r2, [r7, #32]
 800c8ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c8d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c8dc:	88f8      	ldrh	r0, [r7, #6]
 800c8de:	893a      	ldrh	r2, [r7, #8]
 800c8e0:	8979      	ldrh	r1, [r7, #10]
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	9301      	str	r3, [sp, #4]
 800c8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8e8:	9300      	str	r3, [sp, #0]
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	68f8      	ldr	r0, [r7, #12]
 800c8ee:	f000 f921 	bl	800cb34 <I2C_RequestMemoryRead>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d005      	beq.n	800c904 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800c900:	2301      	movs	r3, #1
 800c902:	e0ad      	b.n	800ca60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c908:	b29b      	uxth	r3, r3
 800c90a:	2bff      	cmp	r3, #255	@ 0xff
 800c90c:	d90e      	bls.n	800c92c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	22ff      	movs	r2, #255	@ 0xff
 800c912:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c918:	b2da      	uxtb	r2, r3
 800c91a:	8979      	ldrh	r1, [r7, #10]
 800c91c:	4b52      	ldr	r3, [pc, #328]	@ (800ca68 <HAL_I2C_Mem_Read+0x22c>)
 800c91e:	9300      	str	r3, [sp, #0]
 800c920:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c924:	68f8      	ldr	r0, [r7, #12]
 800c926:	f000 fb19 	bl	800cf5c <I2C_TransferConfig>
 800c92a:	e00f      	b.n	800c94c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c930:	b29a      	uxth	r2, r3
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c93a:	b2da      	uxtb	r2, r3
 800c93c:	8979      	ldrh	r1, [r7, #10]
 800c93e:	4b4a      	ldr	r3, [pc, #296]	@ (800ca68 <HAL_I2C_Mem_Read+0x22c>)
 800c940:	9300      	str	r3, [sp, #0]
 800c942:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c946:	68f8      	ldr	r0, [r7, #12]
 800c948:	f000 fb08 	bl	800cf5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	9300      	str	r3, [sp, #0]
 800c950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c952:	2200      	movs	r2, #0
 800c954:	2104      	movs	r1, #4
 800c956:	68f8      	ldr	r0, [r7, #12]
 800c958:	f000 f964 	bl	800cc24 <I2C_WaitOnFlagUntilTimeout>
 800c95c:	4603      	mov	r3, r0
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d001      	beq.n	800c966 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800c962:	2301      	movs	r3, #1
 800c964:	e07c      	b.n	800ca60 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c970:	b2d2      	uxtb	r2, r2
 800c972:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c978:	1c5a      	adds	r2, r3, #1
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c982:	3b01      	subs	r3, #1
 800c984:	b29a      	uxth	r2, r3
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c98e:	b29b      	uxth	r3, r3
 800c990:	3b01      	subs	r3, #1
 800c992:	b29a      	uxth	r2, r3
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d034      	beq.n	800ca0c <HAL_I2C_Mem_Read+0x1d0>
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d130      	bne.n	800ca0c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	9300      	str	r3, [sp, #0]
 800c9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	2180      	movs	r1, #128	@ 0x80
 800c9b4:	68f8      	ldr	r0, [r7, #12]
 800c9b6:	f000 f935 	bl	800cc24 <I2C_WaitOnFlagUntilTimeout>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d001      	beq.n	800c9c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	e04d      	b.n	800ca60 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	2bff      	cmp	r3, #255	@ 0xff
 800c9cc:	d90e      	bls.n	800c9ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	22ff      	movs	r2, #255	@ 0xff
 800c9d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c9d8:	b2da      	uxtb	r2, r3
 800c9da:	8979      	ldrh	r1, [r7, #10]
 800c9dc:	2300      	movs	r3, #0
 800c9de:	9300      	str	r3, [sp, #0]
 800c9e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c9e4:	68f8      	ldr	r0, [r7, #12]
 800c9e6:	f000 fab9 	bl	800cf5c <I2C_TransferConfig>
 800c9ea:	e00f      	b.n	800ca0c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c9f0:	b29a      	uxth	r2, r3
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c9fa:	b2da      	uxtb	r2, r3
 800c9fc:	8979      	ldrh	r1, [r7, #10]
 800c9fe:	2300      	movs	r3, #0
 800ca00:	9300      	str	r3, [sp, #0]
 800ca02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ca06:	68f8      	ldr	r0, [r7, #12]
 800ca08:	f000 faa8 	bl	800cf5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ca10:	b29b      	uxth	r3, r3
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d19a      	bne.n	800c94c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ca16:	697a      	ldr	r2, [r7, #20]
 800ca18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f000 f982 	bl	800cd24 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ca20:	4603      	mov	r3, r0
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d001      	beq.n	800ca2a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ca26:	2301      	movs	r3, #1
 800ca28:	e01a      	b.n	800ca60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	2220      	movs	r2, #32
 800ca30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	6859      	ldr	r1, [r3, #4]
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681a      	ldr	r2, [r3, #0]
 800ca3c:	4b0b      	ldr	r3, [pc, #44]	@ (800ca6c <HAL_I2C_Mem_Read+0x230>)
 800ca3e:	400b      	ands	r3, r1
 800ca40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2220      	movs	r2, #32
 800ca46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2200      	movs	r2, #0
 800ca56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	e000      	b.n	800ca60 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ca5e:	2302      	movs	r3, #2
  }
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3718      	adds	r7, #24
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}
 800ca68:	80002400 	.word	0x80002400
 800ca6c:	fe00e800 	.word	0xfe00e800

0800ca70 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b083      	sub	sp, #12
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ca7e:	b2db      	uxtb	r3, r3
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	370c      	adds	r7, #12
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr

0800ca8c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b086      	sub	sp, #24
 800ca90:	af02      	add	r7, sp, #8
 800ca92:	60f8      	str	r0, [r7, #12]
 800ca94:	4608      	mov	r0, r1
 800ca96:	4611      	mov	r1, r2
 800ca98:	461a      	mov	r2, r3
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	817b      	strh	r3, [r7, #10]
 800ca9e:	460b      	mov	r3, r1
 800caa0:	813b      	strh	r3, [r7, #8]
 800caa2:	4613      	mov	r3, r2
 800caa4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800caa6:	88fb      	ldrh	r3, [r7, #6]
 800caa8:	b2da      	uxtb	r2, r3
 800caaa:	8979      	ldrh	r1, [r7, #10]
 800caac:	4b20      	ldr	r3, [pc, #128]	@ (800cb30 <I2C_RequestMemoryWrite+0xa4>)
 800caae:	9300      	str	r3, [sp, #0]
 800cab0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cab4:	68f8      	ldr	r0, [r7, #12]
 800cab6:	f000 fa51 	bl	800cf5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800caba:	69fa      	ldr	r2, [r7, #28]
 800cabc:	69b9      	ldr	r1, [r7, #24]
 800cabe:	68f8      	ldr	r0, [r7, #12]
 800cac0:	f000 f8f0 	bl	800cca4 <I2C_WaitOnTXISFlagUntilTimeout>
 800cac4:	4603      	mov	r3, r0
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d001      	beq.n	800cace <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800caca:	2301      	movs	r3, #1
 800cacc:	e02c      	b.n	800cb28 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cace:	88fb      	ldrh	r3, [r7, #6]
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	d105      	bne.n	800cae0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cad4:	893b      	ldrh	r3, [r7, #8]
 800cad6:	b2da      	uxtb	r2, r3
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	629a      	str	r2, [r3, #40]	@ 0x28
 800cade:	e015      	b.n	800cb0c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800cae0:	893b      	ldrh	r3, [r7, #8]
 800cae2:	0a1b      	lsrs	r3, r3, #8
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	b2da      	uxtb	r2, r3
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800caee:	69fa      	ldr	r2, [r7, #28]
 800caf0:	69b9      	ldr	r1, [r7, #24]
 800caf2:	68f8      	ldr	r0, [r7, #12]
 800caf4:	f000 f8d6 	bl	800cca4 <I2C_WaitOnTXISFlagUntilTimeout>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d001      	beq.n	800cb02 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800cafe:	2301      	movs	r3, #1
 800cb00:	e012      	b.n	800cb28 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cb02:	893b      	ldrh	r3, [r7, #8]
 800cb04:	b2da      	uxtb	r2, r3
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800cb0c:	69fb      	ldr	r3, [r7, #28]
 800cb0e:	9300      	str	r3, [sp, #0]
 800cb10:	69bb      	ldr	r3, [r7, #24]
 800cb12:	2200      	movs	r2, #0
 800cb14:	2180      	movs	r1, #128	@ 0x80
 800cb16:	68f8      	ldr	r0, [r7, #12]
 800cb18:	f000 f884 	bl	800cc24 <I2C_WaitOnFlagUntilTimeout>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d001      	beq.n	800cb26 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800cb22:	2301      	movs	r3, #1
 800cb24:	e000      	b.n	800cb28 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800cb26:	2300      	movs	r3, #0
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3710      	adds	r7, #16
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	80002000 	.word	0x80002000

0800cb34 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b086      	sub	sp, #24
 800cb38:	af02      	add	r7, sp, #8
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	4608      	mov	r0, r1
 800cb3e:	4611      	mov	r1, r2
 800cb40:	461a      	mov	r2, r3
 800cb42:	4603      	mov	r3, r0
 800cb44:	817b      	strh	r3, [r7, #10]
 800cb46:	460b      	mov	r3, r1
 800cb48:	813b      	strh	r3, [r7, #8]
 800cb4a:	4613      	mov	r3, r2
 800cb4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800cb4e:	88fb      	ldrh	r3, [r7, #6]
 800cb50:	b2da      	uxtb	r2, r3
 800cb52:	8979      	ldrh	r1, [r7, #10]
 800cb54:	4b20      	ldr	r3, [pc, #128]	@ (800cbd8 <I2C_RequestMemoryRead+0xa4>)
 800cb56:	9300      	str	r3, [sp, #0]
 800cb58:	2300      	movs	r3, #0
 800cb5a:	68f8      	ldr	r0, [r7, #12]
 800cb5c:	f000 f9fe 	bl	800cf5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cb60:	69fa      	ldr	r2, [r7, #28]
 800cb62:	69b9      	ldr	r1, [r7, #24]
 800cb64:	68f8      	ldr	r0, [r7, #12]
 800cb66:	f000 f89d 	bl	800cca4 <I2C_WaitOnTXISFlagUntilTimeout>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d001      	beq.n	800cb74 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800cb70:	2301      	movs	r3, #1
 800cb72:	e02c      	b.n	800cbce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cb74:	88fb      	ldrh	r3, [r7, #6]
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d105      	bne.n	800cb86 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cb7a:	893b      	ldrh	r3, [r7, #8]
 800cb7c:	b2da      	uxtb	r2, r3
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	629a      	str	r2, [r3, #40]	@ 0x28
 800cb84:	e015      	b.n	800cbb2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800cb86:	893b      	ldrh	r3, [r7, #8]
 800cb88:	0a1b      	lsrs	r3, r3, #8
 800cb8a:	b29b      	uxth	r3, r3
 800cb8c:	b2da      	uxtb	r2, r3
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cb94:	69fa      	ldr	r2, [r7, #28]
 800cb96:	69b9      	ldr	r1, [r7, #24]
 800cb98:	68f8      	ldr	r0, [r7, #12]
 800cb9a:	f000 f883 	bl	800cca4 <I2C_WaitOnTXISFlagUntilTimeout>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d001      	beq.n	800cba8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800cba4:	2301      	movs	r3, #1
 800cba6:	e012      	b.n	800cbce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cba8:	893b      	ldrh	r3, [r7, #8]
 800cbaa:	b2da      	uxtb	r2, r3
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800cbb2:	69fb      	ldr	r3, [r7, #28]
 800cbb4:	9300      	str	r3, [sp, #0]
 800cbb6:	69bb      	ldr	r3, [r7, #24]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	2140      	movs	r1, #64	@ 0x40
 800cbbc:	68f8      	ldr	r0, [r7, #12]
 800cbbe:	f000 f831 	bl	800cc24 <I2C_WaitOnFlagUntilTimeout>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d001      	beq.n	800cbcc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	e000      	b.n	800cbce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800cbcc:	2300      	movs	r3, #0
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3710      	adds	r7, #16
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}
 800cbd6:	bf00      	nop
 800cbd8:	80002000 	.word	0x80002000

0800cbdc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b083      	sub	sp, #12
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	699b      	ldr	r3, [r3, #24]
 800cbea:	f003 0302 	and.w	r3, r3, #2
 800cbee:	2b02      	cmp	r3, #2
 800cbf0:	d103      	bne.n	800cbfa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	699b      	ldr	r3, [r3, #24]
 800cc00:	f003 0301 	and.w	r3, r3, #1
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d007      	beq.n	800cc18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	699a      	ldr	r2, [r3, #24]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f042 0201 	orr.w	r2, r2, #1
 800cc16:	619a      	str	r2, [r3, #24]
  }
}
 800cc18:	bf00      	nop
 800cc1a:	370c      	adds	r7, #12
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr

0800cc24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b084      	sub	sp, #16
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	60b9      	str	r1, [r7, #8]
 800cc2e:	603b      	str	r3, [r7, #0]
 800cc30:	4613      	mov	r3, r2
 800cc32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cc34:	e022      	b.n	800cc7c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc3c:	d01e      	beq.n	800cc7c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc3e:	f7fd fd8f 	bl	800a760 <HAL_GetTick>
 800cc42:	4602      	mov	r2, r0
 800cc44:	69bb      	ldr	r3, [r7, #24]
 800cc46:	1ad3      	subs	r3, r2, r3
 800cc48:	683a      	ldr	r2, [r7, #0]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d302      	bcc.n	800cc54 <I2C_WaitOnFlagUntilTimeout+0x30>
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d113      	bne.n	800cc7c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc58:	f043 0220 	orr.w	r2, r3, #32
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2220      	movs	r2, #32
 800cc64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	2200      	movs	r2, #0
 800cc74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	e00f      	b.n	800cc9c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	699a      	ldr	r2, [r3, #24]
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	4013      	ands	r3, r2
 800cc86:	68ba      	ldr	r2, [r7, #8]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	bf0c      	ite	eq
 800cc8c:	2301      	moveq	r3, #1
 800cc8e:	2300      	movne	r3, #0
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	461a      	mov	r2, r3
 800cc94:	79fb      	ldrb	r3, [r7, #7]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d0cd      	beq.n	800cc36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cc9a:	2300      	movs	r3, #0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3710      	adds	r7, #16
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ccb0:	e02c      	b.n	800cd0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	68b9      	ldr	r1, [r7, #8]
 800ccb6:	68f8      	ldr	r0, [r7, #12]
 800ccb8:	f000 f870 	bl	800cd9c <I2C_IsErrorOccurred>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d001      	beq.n	800ccc6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	e02a      	b.n	800cd1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cccc:	d01e      	beq.n	800cd0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ccce:	f7fd fd47 	bl	800a760 <HAL_GetTick>
 800ccd2:	4602      	mov	r2, r0
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	1ad3      	subs	r3, r2, r3
 800ccd8:	68ba      	ldr	r2, [r7, #8]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d302      	bcc.n	800cce4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d113      	bne.n	800cd0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cce8:	f043 0220 	orr.w	r2, r3, #32
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	2220      	movs	r2, #32
 800ccf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	2200      	movs	r2, #0
 800cd04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800cd08:	2301      	movs	r3, #1
 800cd0a:	e007      	b.n	800cd1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	699b      	ldr	r3, [r3, #24]
 800cd12:	f003 0302 	and.w	r3, r3, #2
 800cd16:	2b02      	cmp	r3, #2
 800cd18:	d1cb      	bne.n	800ccb2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800cd1a:	2300      	movs	r3, #0
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3710      	adds	r7, #16
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cd30:	e028      	b.n	800cd84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	68b9      	ldr	r1, [r7, #8]
 800cd36:	68f8      	ldr	r0, [r7, #12]
 800cd38:	f000 f830 	bl	800cd9c <I2C_IsErrorOccurred>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d001      	beq.n	800cd46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cd42:	2301      	movs	r3, #1
 800cd44:	e026      	b.n	800cd94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd46:	f7fd fd0b 	bl	800a760 <HAL_GetTick>
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	1ad3      	subs	r3, r2, r3
 800cd50:	68ba      	ldr	r2, [r7, #8]
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d302      	bcc.n	800cd5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d113      	bne.n	800cd84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd60:	f043 0220 	orr.w	r2, r3, #32
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	2220      	movs	r2, #32
 800cd6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2200      	movs	r2, #0
 800cd74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800cd80:	2301      	movs	r3, #1
 800cd82:	e007      	b.n	800cd94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	699b      	ldr	r3, [r3, #24]
 800cd8a:	f003 0320 	and.w	r3, r3, #32
 800cd8e:	2b20      	cmp	r3, #32
 800cd90:	d1cf      	bne.n	800cd32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800cd92:	2300      	movs	r3, #0
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3710      	adds	r7, #16
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b08a      	sub	sp, #40	@ 0x28
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	60f8      	str	r0, [r7, #12]
 800cda4:	60b9      	str	r1, [r7, #8]
 800cda6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	699b      	ldr	r3, [r3, #24]
 800cdb4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800cdbe:	69bb      	ldr	r3, [r7, #24]
 800cdc0:	f003 0310 	and.w	r3, r3, #16
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d068      	beq.n	800ce9a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	2210      	movs	r2, #16
 800cdce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cdd0:	e049      	b.n	800ce66 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdd8:	d045      	beq.n	800ce66 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800cdda:	f7fd fcc1 	bl	800a760 <HAL_GetTick>
 800cdde:	4602      	mov	r2, r0
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	1ad3      	subs	r3, r2, r3
 800cde4:	68ba      	ldr	r2, [r7, #8]
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d302      	bcc.n	800cdf0 <I2C_IsErrorOccurred+0x54>
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d13a      	bne.n	800ce66 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cdfa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ce02:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	699b      	ldr	r3, [r3, #24]
 800ce0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ce0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ce12:	d121      	bne.n	800ce58 <I2C_IsErrorOccurred+0xbc>
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ce1a:	d01d      	beq.n	800ce58 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800ce1c:	7cfb      	ldrb	r3, [r7, #19]
 800ce1e:	2b20      	cmp	r3, #32
 800ce20:	d01a      	beq.n	800ce58 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	685a      	ldr	r2, [r3, #4]
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ce30:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800ce32:	f7fd fc95 	bl	800a760 <HAL_GetTick>
 800ce36:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ce38:	e00e      	b.n	800ce58 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ce3a:	f7fd fc91 	bl	800a760 <HAL_GetTick>
 800ce3e:	4602      	mov	r2, r0
 800ce40:	69fb      	ldr	r3, [r7, #28]
 800ce42:	1ad3      	subs	r3, r2, r3
 800ce44:	2b19      	cmp	r3, #25
 800ce46:	d907      	bls.n	800ce58 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800ce48:	6a3b      	ldr	r3, [r7, #32]
 800ce4a:	f043 0320 	orr.w	r3, r3, #32
 800ce4e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800ce50:	2301      	movs	r3, #1
 800ce52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800ce56:	e006      	b.n	800ce66 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	699b      	ldr	r3, [r3, #24]
 800ce5e:	f003 0320 	and.w	r3, r3, #32
 800ce62:	2b20      	cmp	r3, #32
 800ce64:	d1e9      	bne.n	800ce3a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	699b      	ldr	r3, [r3, #24]
 800ce6c:	f003 0320 	and.w	r3, r3, #32
 800ce70:	2b20      	cmp	r3, #32
 800ce72:	d003      	beq.n	800ce7c <I2C_IsErrorOccurred+0xe0>
 800ce74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d0aa      	beq.n	800cdd2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ce7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d103      	bne.n	800ce8c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	2220      	movs	r2, #32
 800ce8a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ce8c:	6a3b      	ldr	r3, [r7, #32]
 800ce8e:	f043 0304 	orr.w	r3, r3, #4
 800ce92:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ce94:	2301      	movs	r3, #1
 800ce96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	699b      	ldr	r3, [r3, #24]
 800cea0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800cea2:	69bb      	ldr	r3, [r7, #24]
 800cea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d00b      	beq.n	800cec4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ceac:	6a3b      	ldr	r3, [r7, #32]
 800ceae:	f043 0301 	orr.w	r3, r3, #1
 800ceb2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cebc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800cebe:	2301      	movs	r3, #1
 800cec0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800cec4:	69bb      	ldr	r3, [r7, #24]
 800cec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d00b      	beq.n	800cee6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800cece:	6a3b      	ldr	r3, [r7, #32]
 800ced0:	f043 0308 	orr.w	r3, r3, #8
 800ced4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cede:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800cee0:	2301      	movs	r3, #1
 800cee2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800cee6:	69bb      	ldr	r3, [r7, #24]
 800cee8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d00b      	beq.n	800cf08 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800cef0:	6a3b      	ldr	r3, [r7, #32]
 800cef2:	f043 0302 	orr.w	r3, r3, #2
 800cef6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800cf02:	2301      	movs	r3, #1
 800cf04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800cf08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d01c      	beq.n	800cf4a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800cf10:	68f8      	ldr	r0, [r7, #12]
 800cf12:	f7ff fe63 	bl	800cbdc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	6859      	ldr	r1, [r3, #4]
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681a      	ldr	r2, [r3, #0]
 800cf20:	4b0d      	ldr	r3, [pc, #52]	@ (800cf58 <I2C_IsErrorOccurred+0x1bc>)
 800cf22:	400b      	ands	r3, r1
 800cf24:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf2a:	6a3b      	ldr	r3, [r7, #32]
 800cf2c:	431a      	orrs	r2, r3
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2220      	movs	r2, #32
 800cf36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	2200      	movs	r2, #0
 800cf46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800cf4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3728      	adds	r7, #40	@ 0x28
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	fe00e800 	.word	0xfe00e800

0800cf5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	b087      	sub	sp, #28
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	607b      	str	r3, [r7, #4]
 800cf66:	460b      	mov	r3, r1
 800cf68:	817b      	strh	r3, [r7, #10]
 800cf6a:	4613      	mov	r3, r2
 800cf6c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cf6e:	897b      	ldrh	r3, [r7, #10]
 800cf70:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800cf74:	7a7b      	ldrb	r3, [r7, #9]
 800cf76:	041b      	lsls	r3, r3, #16
 800cf78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cf7c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cf82:	6a3b      	ldr	r3, [r7, #32]
 800cf84:	4313      	orrs	r3, r2
 800cf86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cf8a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	685a      	ldr	r2, [r3, #4]
 800cf92:	6a3b      	ldr	r3, [r7, #32]
 800cf94:	0d5b      	lsrs	r3, r3, #21
 800cf96:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800cf9a:	4b08      	ldr	r3, [pc, #32]	@ (800cfbc <I2C_TransferConfig+0x60>)
 800cf9c:	430b      	orrs	r3, r1
 800cf9e:	43db      	mvns	r3, r3
 800cfa0:	ea02 0103 	and.w	r1, r2, r3
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	697a      	ldr	r2, [r7, #20]
 800cfaa:	430a      	orrs	r2, r1
 800cfac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800cfae:	bf00      	nop
 800cfb0:	371c      	adds	r7, #28
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb8:	4770      	bx	lr
 800cfba:	bf00      	nop
 800cfbc:	03ff63ff 	.word	0x03ff63ff

0800cfc0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b084      	sub	sp, #16
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d101      	bne.n	800cfd2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800cfce:	2301      	movs	r3, #1
 800cfd0:	e0bf      	b.n	800d152 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800cfd8:	b2db      	uxtb	r3, r3
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d106      	bne.n	800cfec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f7fb f938 	bl	800825c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2202      	movs	r2, #2
 800cff0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	699a      	ldr	r2, [r3, #24]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800d002:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	6999      	ldr	r1, [r3, #24]
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	685a      	ldr	r2, [r3, #4]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	689b      	ldr	r3, [r3, #8]
 800d012:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d018:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	691b      	ldr	r3, [r3, #16]
 800d01e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	430a      	orrs	r2, r1
 800d026:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	6899      	ldr	r1, [r3, #8]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	4b4a      	ldr	r3, [pc, #296]	@ (800d15c <HAL_LTDC_Init+0x19c>)
 800d034:	400b      	ands	r3, r1
 800d036:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	695b      	ldr	r3, [r3, #20]
 800d03c:	041b      	lsls	r3, r3, #16
 800d03e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	6899      	ldr	r1, [r3, #8]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	699a      	ldr	r2, [r3, #24]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	431a      	orrs	r2, r3
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	430a      	orrs	r2, r1
 800d054:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	68d9      	ldr	r1, [r3, #12]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681a      	ldr	r2, [r3, #0]
 800d060:	4b3e      	ldr	r3, [pc, #248]	@ (800d15c <HAL_LTDC_Init+0x19c>)
 800d062:	400b      	ands	r3, r1
 800d064:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	69db      	ldr	r3, [r3, #28]
 800d06a:	041b      	lsls	r3, r3, #16
 800d06c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	68d9      	ldr	r1, [r3, #12]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6a1a      	ldr	r2, [r3, #32]
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	431a      	orrs	r2, r3
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	430a      	orrs	r2, r1
 800d082:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	6919      	ldr	r1, [r3, #16]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	4b33      	ldr	r3, [pc, #204]	@ (800d15c <HAL_LTDC_Init+0x19c>)
 800d090:	400b      	ands	r3, r1
 800d092:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d098:	041b      	lsls	r3, r3, #16
 800d09a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	6919      	ldr	r1, [r3, #16]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	431a      	orrs	r2, r3
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	430a      	orrs	r2, r1
 800d0b0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	6959      	ldr	r1, [r3, #20]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681a      	ldr	r2, [r3, #0]
 800d0bc:	4b27      	ldr	r3, [pc, #156]	@ (800d15c <HAL_LTDC_Init+0x19c>)
 800d0be:	400b      	ands	r3, r1
 800d0c0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0c6:	041b      	lsls	r3, r3, #16
 800d0c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	6959      	ldr	r1, [r3, #20]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	431a      	orrs	r2, r3
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	430a      	orrs	r2, r1
 800d0de:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d0e6:	021b      	lsls	r3, r3, #8
 800d0e8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800d0f0:	041b      	lsls	r3, r3, #16
 800d0f2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800d102:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800d10a:	68ba      	ldr	r2, [r7, #8]
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	4313      	orrs	r3, r2
 800d110:	687a      	ldr	r2, [r7, #4]
 800d112:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800d116:	431a      	orrs	r2, r3
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	430a      	orrs	r2, r1
 800d11e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f042 0206 	orr.w	r2, r2, #6
 800d12e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	699a      	ldr	r2, [r3, #24]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f042 0201 	orr.w	r2, r2, #1
 800d13e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2200      	movs	r2, #0
 800d144:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2201      	movs	r2, #1
 800d14c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800d150:	2300      	movs	r3, #0
}
 800d152:	4618      	mov	r0, r3
 800d154:	3710      	adds	r7, #16
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	f000f800 	.word	0xf000f800

0800d160 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d16e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d176:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	f003 0304 	and.w	r3, r3, #4
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d023      	beq.n	800d1ca <HAL_LTDC_IRQHandler+0x6a>
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	f003 0304 	and.w	r3, r3, #4
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d01e      	beq.n	800d1ca <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f022 0204 	bic.w	r2, r2, #4
 800d19a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	2204      	movs	r2, #4
 800d1a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d1aa:	f043 0201 	orr.w	r2, r3, #1
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2204      	movs	r2, #4
 800d1b8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f000 f86f 	bl	800d2a8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	f003 0302 	and.w	r3, r3, #2
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d023      	beq.n	800d21c <HAL_LTDC_IRQHandler+0xbc>
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	f003 0302 	and.w	r3, r3, #2
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d01e      	beq.n	800d21c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f022 0202 	bic.w	r2, r2, #2
 800d1ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	2202      	movs	r2, #2
 800d1f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d1fc:	f043 0202 	orr.w	r2, r3, #2
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2204      	movs	r2, #4
 800d20a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2200      	movs	r2, #0
 800d212:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 f846 	bl	800d2a8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	f003 0301 	and.w	r3, r3, #1
 800d222:	2b00      	cmp	r3, #0
 800d224:	d01b      	beq.n	800d25e <HAL_LTDC_IRQHandler+0xfe>
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	f003 0301 	and.w	r3, r3, #1
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d016      	beq.n	800d25e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f022 0201 	bic.w	r2, r2, #1
 800d23e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	2201      	movs	r2, #1
 800d246:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2201      	movs	r2, #1
 800d24c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2200      	movs	r2, #0
 800d254:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 f82f 	bl	800d2bc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	f003 0308 	and.w	r3, r3, #8
 800d264:	2b00      	cmp	r3, #0
 800d266:	d01b      	beq.n	800d2a0 <HAL_LTDC_IRQHandler+0x140>
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	f003 0308 	and.w	r3, r3, #8
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d016      	beq.n	800d2a0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f022 0208 	bic.w	r2, r2, #8
 800d280:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2208      	movs	r2, #8
 800d288:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2201      	movs	r2, #1
 800d28e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2200      	movs	r2, #0
 800d296:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f000 f818 	bl	800d2d0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800d2a0:	bf00      	nop
 800d2a2:	3710      	adds	r7, #16
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}

0800d2a8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800d2b0:	bf00      	nop
 800d2b2:	370c      	adds	r7, #12
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ba:	4770      	bx	lr

0800d2bc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b083      	sub	sp, #12
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800d2c4:	bf00      	nop
 800d2c6:	370c      	adds	r7, #12
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr

0800d2d0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b083      	sub	sp, #12
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800d2d8:	bf00      	nop
 800d2da:	370c      	adds	r7, #12
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr

0800d2e4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800d2e4:	b5b0      	push	{r4, r5, r7, lr}
 800d2e6:	b084      	sub	sp, #16
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	60f8      	str	r0, [r7, #12]
 800d2ec:	60b9      	str	r1, [r7, #8]
 800d2ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800d2f6:	2b01      	cmp	r3, #1
 800d2f8:	d101      	bne.n	800d2fe <HAL_LTDC_ConfigLayer+0x1a>
 800d2fa:	2302      	movs	r3, #2
 800d2fc:	e02c      	b.n	800d358 <HAL_LTDC_ConfigLayer+0x74>
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2201      	movs	r2, #1
 800d302:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	2202      	movs	r2, #2
 800d30a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d30e:	68fa      	ldr	r2, [r7, #12]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2134      	movs	r1, #52	@ 0x34
 800d314:	fb01 f303 	mul.w	r3, r1, r3
 800d318:	4413      	add	r3, r2
 800d31a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	4614      	mov	r4, r2
 800d322:	461d      	mov	r5, r3
 800d324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d32a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d32c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d32e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d330:	682b      	ldr	r3, [r5, #0]
 800d332:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	68b9      	ldr	r1, [r7, #8]
 800d338:	68f8      	ldr	r0, [r7, #12]
 800d33a:	f000 f81f 	bl	800d37c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	2201      	movs	r2, #1
 800d344:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	2201      	movs	r2, #1
 800d34a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2200      	movs	r2, #0
 800d352:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800d356:	2300      	movs	r3, #0
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3710      	adds	r7, #16
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bdb0      	pop	{r4, r5, r7, pc}

0800d360 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800d360:	b480      	push	{r7}
 800d362:	b083      	sub	sp, #12
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800d36e:	b2db      	uxtb	r3, r3
}
 800d370:	4618      	mov	r0, r3
 800d372:	370c      	adds	r7, #12
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr

0800d37c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b089      	sub	sp, #36	@ 0x24
 800d380:	af00      	add	r7, sp, #0
 800d382:	60f8      	str	r0, [r7, #12]
 800d384:	60b9      	str	r1, [r7, #8]
 800d386:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	685a      	ldr	r2, [r3, #4]
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	68db      	ldr	r3, [r3, #12]
 800d392:	0c1b      	lsrs	r3, r3, #16
 800d394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d398:	4413      	add	r3, r2
 800d39a:	041b      	lsls	r3, r3, #16
 800d39c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	461a      	mov	r2, r3
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	01db      	lsls	r3, r3, #7
 800d3a8:	4413      	add	r3, r2
 800d3aa:	3384      	adds	r3, #132	@ 0x84
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	68fa      	ldr	r2, [r7, #12]
 800d3b0:	6812      	ldr	r2, [r2, #0]
 800d3b2:	4611      	mov	r1, r2
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	01d2      	lsls	r2, r2, #7
 800d3b8:	440a      	add	r2, r1
 800d3ba:	3284      	adds	r2, #132	@ 0x84
 800d3bc:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800d3c0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	68db      	ldr	r3, [r3, #12]
 800d3cc:	0c1b      	lsrs	r3, r3, #16
 800d3ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800d3d2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d3d4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4619      	mov	r1, r3
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	01db      	lsls	r3, r3, #7
 800d3e0:	440b      	add	r3, r1
 800d3e2:	3384      	adds	r3, #132	@ 0x84
 800d3e4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d3e6:	69fb      	ldr	r3, [r7, #28]
 800d3e8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800d3ea:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	68da      	ldr	r2, [r3, #12]
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	68db      	ldr	r3, [r3, #12]
 800d3f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3fa:	4413      	add	r3, r2
 800d3fc:	041b      	lsls	r3, r3, #16
 800d3fe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	461a      	mov	r2, r3
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	01db      	lsls	r3, r3, #7
 800d40a:	4413      	add	r3, r2
 800d40c:	3384      	adds	r3, #132	@ 0x84
 800d40e:	689b      	ldr	r3, [r3, #8]
 800d410:	68fa      	ldr	r2, [r7, #12]
 800d412:	6812      	ldr	r2, [r2, #0]
 800d414:	4611      	mov	r1, r2
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	01d2      	lsls	r2, r2, #7
 800d41a:	440a      	add	r2, r1
 800d41c:	3284      	adds	r2, #132	@ 0x84
 800d41e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800d422:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	689a      	ldr	r2, [r3, #8]
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d432:	4413      	add	r3, r2
 800d434:	1c5a      	adds	r2, r3, #1
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4619      	mov	r1, r3
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	01db      	lsls	r3, r3, #7
 800d440:	440b      	add	r3, r1
 800d442:	3384      	adds	r3, #132	@ 0x84
 800d444:	4619      	mov	r1, r3
 800d446:	69fb      	ldr	r3, [r7, #28]
 800d448:	4313      	orrs	r3, r2
 800d44a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	461a      	mov	r2, r3
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	01db      	lsls	r3, r3, #7
 800d456:	4413      	add	r3, r2
 800d458:	3384      	adds	r3, #132	@ 0x84
 800d45a:	691b      	ldr	r3, [r3, #16]
 800d45c:	68fa      	ldr	r2, [r7, #12]
 800d45e:	6812      	ldr	r2, [r2, #0]
 800d460:	4611      	mov	r1, r2
 800d462:	687a      	ldr	r2, [r7, #4]
 800d464:	01d2      	lsls	r2, r2, #7
 800d466:	440a      	add	r2, r1
 800d468:	3284      	adds	r2, #132	@ 0x84
 800d46a:	f023 0307 	bic.w	r3, r3, #7
 800d46e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	461a      	mov	r2, r3
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	01db      	lsls	r3, r3, #7
 800d47a:	4413      	add	r3, r2
 800d47c:	3384      	adds	r3, #132	@ 0x84
 800d47e:	461a      	mov	r2, r3
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	691b      	ldr	r3, [r3, #16]
 800d484:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d48c:	021b      	lsls	r3, r3, #8
 800d48e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800d496:	041b      	lsls	r3, r3, #16
 800d498:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	699b      	ldr	r3, [r3, #24]
 800d49e:	061b      	lsls	r3, r3, #24
 800d4a0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	01db      	lsls	r3, r3, #7
 800d4ac:	4413      	add	r3, r2
 800d4ae:	3384      	adds	r3, #132	@ 0x84
 800d4b0:	699b      	ldr	r3, [r3, #24]
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	01db      	lsls	r3, r3, #7
 800d4bc:	4413      	add	r3, r2
 800d4be:	3384      	adds	r3, #132	@ 0x84
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	69fb      	ldr	r3, [r7, #28]
 800d4d0:	431a      	orrs	r2, r3
 800d4d2:	69bb      	ldr	r3, [r7, #24]
 800d4d4:	431a      	orrs	r2, r3
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	4619      	mov	r1, r3
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	01db      	lsls	r3, r3, #7
 800d4e0:	440b      	add	r3, r1
 800d4e2:	3384      	adds	r3, #132	@ 0x84
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	4313      	orrs	r3, r2
 800d4ea:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	01db      	lsls	r3, r3, #7
 800d4f6:	4413      	add	r3, r2
 800d4f8:	3384      	adds	r3, #132	@ 0x84
 800d4fa:	695b      	ldr	r3, [r3, #20]
 800d4fc:	68fa      	ldr	r2, [r7, #12]
 800d4fe:	6812      	ldr	r2, [r2, #0]
 800d500:	4611      	mov	r1, r2
 800d502:	687a      	ldr	r2, [r7, #4]
 800d504:	01d2      	lsls	r2, r2, #7
 800d506:	440a      	add	r2, r1
 800d508:	3284      	adds	r2, #132	@ 0x84
 800d50a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d50e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	461a      	mov	r2, r3
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	01db      	lsls	r3, r3, #7
 800d51a:	4413      	add	r3, r2
 800d51c:	3384      	adds	r3, #132	@ 0x84
 800d51e:	461a      	mov	r2, r3
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	695b      	ldr	r3, [r3, #20]
 800d524:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	461a      	mov	r2, r3
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	01db      	lsls	r3, r3, #7
 800d530:	4413      	add	r3, r2
 800d532:	3384      	adds	r3, #132	@ 0x84
 800d534:	69da      	ldr	r2, [r3, #28]
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	4619      	mov	r1, r3
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	01db      	lsls	r3, r3, #7
 800d540:	440b      	add	r3, r1
 800d542:	3384      	adds	r3, #132	@ 0x84
 800d544:	4619      	mov	r1, r3
 800d546:	4b58      	ldr	r3, [pc, #352]	@ (800d6a8 <LTDC_SetConfig+0x32c>)
 800d548:	4013      	ands	r3, r2
 800d54a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	69da      	ldr	r2, [r3, #28]
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	6a1b      	ldr	r3, [r3, #32]
 800d554:	68f9      	ldr	r1, [r7, #12]
 800d556:	6809      	ldr	r1, [r1, #0]
 800d558:	4608      	mov	r0, r1
 800d55a:	6879      	ldr	r1, [r7, #4]
 800d55c:	01c9      	lsls	r1, r1, #7
 800d55e:	4401      	add	r1, r0
 800d560:	3184      	adds	r1, #132	@ 0x84
 800d562:	4313      	orrs	r3, r2
 800d564:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	461a      	mov	r2, r3
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	01db      	lsls	r3, r3, #7
 800d570:	4413      	add	r3, r2
 800d572:	3384      	adds	r3, #132	@ 0x84
 800d574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	461a      	mov	r2, r3
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	01db      	lsls	r3, r3, #7
 800d580:	4413      	add	r3, r2
 800d582:	3384      	adds	r3, #132	@ 0x84
 800d584:	461a      	mov	r2, r3
 800d586:	2300      	movs	r3, #0
 800d588:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	461a      	mov	r2, r3
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	01db      	lsls	r3, r3, #7
 800d594:	4413      	add	r3, r2
 800d596:	3384      	adds	r3, #132	@ 0x84
 800d598:	461a      	mov	r2, r3
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d59e:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	691b      	ldr	r3, [r3, #16]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d102      	bne.n	800d5ae <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800d5a8:	2304      	movs	r3, #4
 800d5aa:	61fb      	str	r3, [r7, #28]
 800d5ac:	e01b      	b.n	800d5e6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	691b      	ldr	r3, [r3, #16]
 800d5b2:	2b01      	cmp	r3, #1
 800d5b4:	d102      	bne.n	800d5bc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800d5b6:	2303      	movs	r3, #3
 800d5b8:	61fb      	str	r3, [r7, #28]
 800d5ba:	e014      	b.n	800d5e6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	691b      	ldr	r3, [r3, #16]
 800d5c0:	2b04      	cmp	r3, #4
 800d5c2:	d00b      	beq.n	800d5dc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800d5c8:	2b02      	cmp	r3, #2
 800d5ca:	d007      	beq.n	800d5dc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800d5d0:	2b03      	cmp	r3, #3
 800d5d2:	d003      	beq.n	800d5dc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800d5d8:	2b07      	cmp	r3, #7
 800d5da:	d102      	bne.n	800d5e2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800d5dc:	2302      	movs	r3, #2
 800d5de:	61fb      	str	r3, [r7, #28]
 800d5e0:	e001      	b.n	800d5e6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	461a      	mov	r2, r3
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	01db      	lsls	r3, r3, #7
 800d5f0:	4413      	add	r3, r2
 800d5f2:	3384      	adds	r3, #132	@ 0x84
 800d5f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5f6:	68fa      	ldr	r2, [r7, #12]
 800d5f8:	6812      	ldr	r2, [r2, #0]
 800d5fa:	4611      	mov	r1, r2
 800d5fc:	687a      	ldr	r2, [r7, #4]
 800d5fe:	01d2      	lsls	r2, r2, #7
 800d600:	440a      	add	r2, r1
 800d602:	3284      	adds	r2, #132	@ 0x84
 800d604:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800d608:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d60e:	69fa      	ldr	r2, [r7, #28]
 800d610:	fb02 f303 	mul.w	r3, r2, r3
 800d614:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	6859      	ldr	r1, [r3, #4]
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	1acb      	subs	r3, r1, r3
 800d620:	69f9      	ldr	r1, [r7, #28]
 800d622:	fb01 f303 	mul.w	r3, r1, r3
 800d626:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800d628:	68f9      	ldr	r1, [r7, #12]
 800d62a:	6809      	ldr	r1, [r1, #0]
 800d62c:	4608      	mov	r0, r1
 800d62e:	6879      	ldr	r1, [r7, #4]
 800d630:	01c9      	lsls	r1, r1, #7
 800d632:	4401      	add	r1, r0
 800d634:	3184      	adds	r1, #132	@ 0x84
 800d636:	4313      	orrs	r3, r2
 800d638:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	461a      	mov	r2, r3
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	01db      	lsls	r3, r3, #7
 800d644:	4413      	add	r3, r2
 800d646:	3384      	adds	r3, #132	@ 0x84
 800d648:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	4619      	mov	r1, r3
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	01db      	lsls	r3, r3, #7
 800d654:	440b      	add	r3, r1
 800d656:	3384      	adds	r3, #132	@ 0x84
 800d658:	4619      	mov	r1, r3
 800d65a:	4b14      	ldr	r3, [pc, #80]	@ (800d6ac <LTDC_SetConfig+0x330>)
 800d65c:	4013      	ands	r3, r2
 800d65e:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	461a      	mov	r2, r3
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	01db      	lsls	r3, r3, #7
 800d66a:	4413      	add	r3, r2
 800d66c:	3384      	adds	r3, #132	@ 0x84
 800d66e:	461a      	mov	r2, r3
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d674:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	461a      	mov	r2, r3
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	01db      	lsls	r3, r3, #7
 800d680:	4413      	add	r3, r2
 800d682:	3384      	adds	r3, #132	@ 0x84
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	68fa      	ldr	r2, [r7, #12]
 800d688:	6812      	ldr	r2, [r2, #0]
 800d68a:	4611      	mov	r1, r2
 800d68c:	687a      	ldr	r2, [r7, #4]
 800d68e:	01d2      	lsls	r2, r2, #7
 800d690:	440a      	add	r2, r1
 800d692:	3284      	adds	r2, #132	@ 0x84
 800d694:	f043 0301 	orr.w	r3, r3, #1
 800d698:	6013      	str	r3, [r2, #0]
}
 800d69a:	bf00      	nop
 800d69c:	3724      	adds	r7, #36	@ 0x24
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a4:	4770      	bx	lr
 800d6a6:	bf00      	nop
 800d6a8:	fffff8f8 	.word	0xfffff8f8
 800d6ac:	fffff800 	.word	0xfffff800

0800d6b0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d6b4:	4b05      	ldr	r3, [pc, #20]	@ (800d6cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4a04      	ldr	r2, [pc, #16]	@ (800d6cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d6ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d6be:	6013      	str	r3, [r2, #0]
}
 800d6c0:	bf00      	nop
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr
 800d6ca:	bf00      	nop
 800d6cc:	40007000 	.word	0x40007000

0800d6d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b082      	sub	sp, #8
 800d6d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800d6da:	4b23      	ldr	r3, [pc, #140]	@ (800d768 <HAL_PWREx_EnableOverDrive+0x98>)
 800d6dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6de:	4a22      	ldr	r2, [pc, #136]	@ (800d768 <HAL_PWREx_EnableOverDrive+0x98>)
 800d6e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d6e4:	6413      	str	r3, [r2, #64]	@ 0x40
 800d6e6:	4b20      	ldr	r3, [pc, #128]	@ (800d768 <HAL_PWREx_EnableOverDrive+0x98>)
 800d6e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d6ee:	603b      	str	r3, [r7, #0]
 800d6f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d6f2:	4b1e      	ldr	r3, [pc, #120]	@ (800d76c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4a1d      	ldr	r2, [pc, #116]	@ (800d76c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d6f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d6fc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d6fe:	f7fd f82f 	bl	800a760 <HAL_GetTick>
 800d702:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d704:	e009      	b.n	800d71a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d706:	f7fd f82b 	bl	800a760 <HAL_GetTick>
 800d70a:	4602      	mov	r2, r0
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	1ad3      	subs	r3, r2, r3
 800d710:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d714:	d901      	bls.n	800d71a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800d716:	2303      	movs	r3, #3
 800d718:	e022      	b.n	800d760 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d71a:	4b14      	ldr	r3, [pc, #80]	@ (800d76c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d71c:	685b      	ldr	r3, [r3, #4]
 800d71e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d722:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d726:	d1ee      	bne.n	800d706 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d728:	4b10      	ldr	r3, [pc, #64]	@ (800d76c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	4a0f      	ldr	r2, [pc, #60]	@ (800d76c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d72e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d732:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d734:	f7fd f814 	bl	800a760 <HAL_GetTick>
 800d738:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d73a:	e009      	b.n	800d750 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d73c:	f7fd f810 	bl	800a760 <HAL_GetTick>
 800d740:	4602      	mov	r2, r0
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	1ad3      	subs	r3, r2, r3
 800d746:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d74a:	d901      	bls.n	800d750 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800d74c:	2303      	movs	r3, #3
 800d74e:	e007      	b.n	800d760 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d750:	4b06      	ldr	r3, [pc, #24]	@ (800d76c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d758:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d75c:	d1ee      	bne.n	800d73c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800d75e:	2300      	movs	r3, #0
}
 800d760:	4618      	mov	r0, r3
 800d762:	3708      	adds	r7, #8
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}
 800d768:	40023800 	.word	0x40023800
 800d76c:	40007000 	.word	0x40007000

0800d770 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b086      	sub	sp, #24
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800d778:	2300      	movs	r3, #0
 800d77a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d101      	bne.n	800d786 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800d782:	2301      	movs	r3, #1
 800d784:	e291      	b.n	800dcaa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f003 0301 	and.w	r3, r3, #1
 800d78e:	2b00      	cmp	r3, #0
 800d790:	f000 8087 	beq.w	800d8a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d794:	4b96      	ldr	r3, [pc, #600]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d796:	689b      	ldr	r3, [r3, #8]
 800d798:	f003 030c 	and.w	r3, r3, #12
 800d79c:	2b04      	cmp	r3, #4
 800d79e:	d00c      	beq.n	800d7ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d7a0:	4b93      	ldr	r3, [pc, #588]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d7a2:	689b      	ldr	r3, [r3, #8]
 800d7a4:	f003 030c 	and.w	r3, r3, #12
 800d7a8:	2b08      	cmp	r3, #8
 800d7aa:	d112      	bne.n	800d7d2 <HAL_RCC_OscConfig+0x62>
 800d7ac:	4b90      	ldr	r3, [pc, #576]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d7b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d7b8:	d10b      	bne.n	800d7d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d7ba:	4b8d      	ldr	r3, [pc, #564]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d06c      	beq.n	800d8a0 <HAL_RCC_OscConfig+0x130>
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	685b      	ldr	r3, [r3, #4]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d168      	bne.n	800d8a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	e26b      	b.n	800dcaa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	685b      	ldr	r3, [r3, #4]
 800d7d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7da:	d106      	bne.n	800d7ea <HAL_RCC_OscConfig+0x7a>
 800d7dc:	4b84      	ldr	r3, [pc, #528]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4a83      	ldr	r2, [pc, #524]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d7e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d7e6:	6013      	str	r3, [r2, #0]
 800d7e8:	e02e      	b.n	800d848 <HAL_RCC_OscConfig+0xd8>
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	685b      	ldr	r3, [r3, #4]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d10c      	bne.n	800d80c <HAL_RCC_OscConfig+0x9c>
 800d7f2:	4b7f      	ldr	r3, [pc, #508]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	4a7e      	ldr	r2, [pc, #504]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d7f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d7fc:	6013      	str	r3, [r2, #0]
 800d7fe:	4b7c      	ldr	r3, [pc, #496]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	4a7b      	ldr	r2, [pc, #492]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d804:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d808:	6013      	str	r3, [r2, #0]
 800d80a:	e01d      	b.n	800d848 <HAL_RCC_OscConfig+0xd8>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d814:	d10c      	bne.n	800d830 <HAL_RCC_OscConfig+0xc0>
 800d816:	4b76      	ldr	r3, [pc, #472]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	4a75      	ldr	r2, [pc, #468]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d81c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d820:	6013      	str	r3, [r2, #0]
 800d822:	4b73      	ldr	r3, [pc, #460]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	4a72      	ldr	r2, [pc, #456]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d82c:	6013      	str	r3, [r2, #0]
 800d82e:	e00b      	b.n	800d848 <HAL_RCC_OscConfig+0xd8>
 800d830:	4b6f      	ldr	r3, [pc, #444]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4a6e      	ldr	r2, [pc, #440]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d836:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d83a:	6013      	str	r3, [r2, #0]
 800d83c:	4b6c      	ldr	r3, [pc, #432]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4a6b      	ldr	r2, [pc, #428]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d842:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	685b      	ldr	r3, [r3, #4]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d013      	beq.n	800d878 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d850:	f7fc ff86 	bl	800a760 <HAL_GetTick>
 800d854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d856:	e008      	b.n	800d86a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d858:	f7fc ff82 	bl	800a760 <HAL_GetTick>
 800d85c:	4602      	mov	r2, r0
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	1ad3      	subs	r3, r2, r3
 800d862:	2b64      	cmp	r3, #100	@ 0x64
 800d864:	d901      	bls.n	800d86a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d866:	2303      	movs	r3, #3
 800d868:	e21f      	b.n	800dcaa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d86a:	4b61      	ldr	r3, [pc, #388]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d872:	2b00      	cmp	r3, #0
 800d874:	d0f0      	beq.n	800d858 <HAL_RCC_OscConfig+0xe8>
 800d876:	e014      	b.n	800d8a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d878:	f7fc ff72 	bl	800a760 <HAL_GetTick>
 800d87c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d87e:	e008      	b.n	800d892 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d880:	f7fc ff6e 	bl	800a760 <HAL_GetTick>
 800d884:	4602      	mov	r2, r0
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	1ad3      	subs	r3, r2, r3
 800d88a:	2b64      	cmp	r3, #100	@ 0x64
 800d88c:	d901      	bls.n	800d892 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d88e:	2303      	movs	r3, #3
 800d890:	e20b      	b.n	800dcaa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d892:	4b57      	ldr	r3, [pc, #348]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d1f0      	bne.n	800d880 <HAL_RCC_OscConfig+0x110>
 800d89e:	e000      	b.n	800d8a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d8a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	f003 0302 	and.w	r3, r3, #2
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d069      	beq.n	800d982 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d8ae:	4b50      	ldr	r3, [pc, #320]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d8b0:	689b      	ldr	r3, [r3, #8]
 800d8b2:	f003 030c 	and.w	r3, r3, #12
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d00b      	beq.n	800d8d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d8ba:	4b4d      	ldr	r3, [pc, #308]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d8bc:	689b      	ldr	r3, [r3, #8]
 800d8be:	f003 030c 	and.w	r3, r3, #12
 800d8c2:	2b08      	cmp	r3, #8
 800d8c4:	d11c      	bne.n	800d900 <HAL_RCC_OscConfig+0x190>
 800d8c6:	4b4a      	ldr	r3, [pc, #296]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d8c8:	685b      	ldr	r3, [r3, #4]
 800d8ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d116      	bne.n	800d900 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d8d2:	4b47      	ldr	r3, [pc, #284]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f003 0302 	and.w	r3, r3, #2
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d005      	beq.n	800d8ea <HAL_RCC_OscConfig+0x17a>
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	d001      	beq.n	800d8ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	e1df      	b.n	800dcaa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d8ea:	4b41      	ldr	r3, [pc, #260]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	691b      	ldr	r3, [r3, #16]
 800d8f6:	00db      	lsls	r3, r3, #3
 800d8f8:	493d      	ldr	r1, [pc, #244]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d8fa:	4313      	orrs	r3, r2
 800d8fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d8fe:	e040      	b.n	800d982 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	68db      	ldr	r3, [r3, #12]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d023      	beq.n	800d950 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d908:	4b39      	ldr	r3, [pc, #228]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	4a38      	ldr	r2, [pc, #224]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d90e:	f043 0301 	orr.w	r3, r3, #1
 800d912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d914:	f7fc ff24 	bl	800a760 <HAL_GetTick>
 800d918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d91a:	e008      	b.n	800d92e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d91c:	f7fc ff20 	bl	800a760 <HAL_GetTick>
 800d920:	4602      	mov	r2, r0
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	1ad3      	subs	r3, r2, r3
 800d926:	2b02      	cmp	r3, #2
 800d928:	d901      	bls.n	800d92e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800d92a:	2303      	movs	r3, #3
 800d92c:	e1bd      	b.n	800dcaa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d92e:	4b30      	ldr	r3, [pc, #192]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f003 0302 	and.w	r3, r3, #2
 800d936:	2b00      	cmp	r3, #0
 800d938:	d0f0      	beq.n	800d91c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d93a:	4b2d      	ldr	r3, [pc, #180]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	691b      	ldr	r3, [r3, #16]
 800d946:	00db      	lsls	r3, r3, #3
 800d948:	4929      	ldr	r1, [pc, #164]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d94a:	4313      	orrs	r3, r2
 800d94c:	600b      	str	r3, [r1, #0]
 800d94e:	e018      	b.n	800d982 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d950:	4b27      	ldr	r3, [pc, #156]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	4a26      	ldr	r2, [pc, #152]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d956:	f023 0301 	bic.w	r3, r3, #1
 800d95a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d95c:	f7fc ff00 	bl	800a760 <HAL_GetTick>
 800d960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d962:	e008      	b.n	800d976 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d964:	f7fc fefc 	bl	800a760 <HAL_GetTick>
 800d968:	4602      	mov	r2, r0
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	1ad3      	subs	r3, r2, r3
 800d96e:	2b02      	cmp	r3, #2
 800d970:	d901      	bls.n	800d976 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800d972:	2303      	movs	r3, #3
 800d974:	e199      	b.n	800dcaa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d976:	4b1e      	ldr	r3, [pc, #120]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f003 0302 	and.w	r3, r3, #2
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d1f0      	bne.n	800d964 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f003 0308 	and.w	r3, r3, #8
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d038      	beq.n	800da00 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	695b      	ldr	r3, [r3, #20]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d019      	beq.n	800d9ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d996:	4b16      	ldr	r3, [pc, #88]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d99a:	4a15      	ldr	r2, [pc, #84]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d99c:	f043 0301 	orr.w	r3, r3, #1
 800d9a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d9a2:	f7fc fedd 	bl	800a760 <HAL_GetTick>
 800d9a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d9a8:	e008      	b.n	800d9bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d9aa:	f7fc fed9 	bl	800a760 <HAL_GetTick>
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	1ad3      	subs	r3, r2, r3
 800d9b4:	2b02      	cmp	r3, #2
 800d9b6:	d901      	bls.n	800d9bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800d9b8:	2303      	movs	r3, #3
 800d9ba:	e176      	b.n	800dcaa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d9bc:	4b0c      	ldr	r3, [pc, #48]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d9be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9c0:	f003 0302 	and.w	r3, r3, #2
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d0f0      	beq.n	800d9aa <HAL_RCC_OscConfig+0x23a>
 800d9c8:	e01a      	b.n	800da00 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d9ca:	4b09      	ldr	r3, [pc, #36]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d9cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9ce:	4a08      	ldr	r2, [pc, #32]	@ (800d9f0 <HAL_RCC_OscConfig+0x280>)
 800d9d0:	f023 0301 	bic.w	r3, r3, #1
 800d9d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d9d6:	f7fc fec3 	bl	800a760 <HAL_GetTick>
 800d9da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d9dc:	e00a      	b.n	800d9f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d9de:	f7fc febf 	bl	800a760 <HAL_GetTick>
 800d9e2:	4602      	mov	r2, r0
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	1ad3      	subs	r3, r2, r3
 800d9e8:	2b02      	cmp	r3, #2
 800d9ea:	d903      	bls.n	800d9f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d9ec:	2303      	movs	r3, #3
 800d9ee:	e15c      	b.n	800dcaa <HAL_RCC_OscConfig+0x53a>
 800d9f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d9f4:	4b91      	ldr	r3, [pc, #580]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800d9f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9f8:	f003 0302 	and.w	r3, r3, #2
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d1ee      	bne.n	800d9de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f003 0304 	and.w	r3, r3, #4
 800da08:	2b00      	cmp	r3, #0
 800da0a:	f000 80a4 	beq.w	800db56 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800da0e:	4b8b      	ldr	r3, [pc, #556]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800da10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800da16:	2b00      	cmp	r3, #0
 800da18:	d10d      	bne.n	800da36 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800da1a:	4b88      	ldr	r3, [pc, #544]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800da1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da1e:	4a87      	ldr	r2, [pc, #540]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800da20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800da24:	6413      	str	r3, [r2, #64]	@ 0x40
 800da26:	4b85      	ldr	r3, [pc, #532]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800da28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800da2e:	60bb      	str	r3, [r7, #8]
 800da30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800da32:	2301      	movs	r3, #1
 800da34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800da36:	4b82      	ldr	r3, [pc, #520]	@ (800dc40 <HAL_RCC_OscConfig+0x4d0>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d118      	bne.n	800da74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800da42:	4b7f      	ldr	r3, [pc, #508]	@ (800dc40 <HAL_RCC_OscConfig+0x4d0>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4a7e      	ldr	r2, [pc, #504]	@ (800dc40 <HAL_RCC_OscConfig+0x4d0>)
 800da48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800da4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800da4e:	f7fc fe87 	bl	800a760 <HAL_GetTick>
 800da52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800da54:	e008      	b.n	800da68 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800da56:	f7fc fe83 	bl	800a760 <HAL_GetTick>
 800da5a:	4602      	mov	r2, r0
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	1ad3      	subs	r3, r2, r3
 800da60:	2b64      	cmp	r3, #100	@ 0x64
 800da62:	d901      	bls.n	800da68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800da64:	2303      	movs	r3, #3
 800da66:	e120      	b.n	800dcaa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800da68:	4b75      	ldr	r3, [pc, #468]	@ (800dc40 <HAL_RCC_OscConfig+0x4d0>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da70:	2b00      	cmp	r3, #0
 800da72:	d0f0      	beq.n	800da56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	689b      	ldr	r3, [r3, #8]
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d106      	bne.n	800da8a <HAL_RCC_OscConfig+0x31a>
 800da7c:	4b6f      	ldr	r3, [pc, #444]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800da7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da80:	4a6e      	ldr	r2, [pc, #440]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800da82:	f043 0301 	orr.w	r3, r3, #1
 800da86:	6713      	str	r3, [r2, #112]	@ 0x70
 800da88:	e02d      	b.n	800dae6 <HAL_RCC_OscConfig+0x376>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	689b      	ldr	r3, [r3, #8]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d10c      	bne.n	800daac <HAL_RCC_OscConfig+0x33c>
 800da92:	4b6a      	ldr	r3, [pc, #424]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800da94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da96:	4a69      	ldr	r2, [pc, #420]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800da98:	f023 0301 	bic.w	r3, r3, #1
 800da9c:	6713      	str	r3, [r2, #112]	@ 0x70
 800da9e:	4b67      	ldr	r3, [pc, #412]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800daa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800daa2:	4a66      	ldr	r2, [pc, #408]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800daa4:	f023 0304 	bic.w	r3, r3, #4
 800daa8:	6713      	str	r3, [r2, #112]	@ 0x70
 800daaa:	e01c      	b.n	800dae6 <HAL_RCC_OscConfig+0x376>
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	689b      	ldr	r3, [r3, #8]
 800dab0:	2b05      	cmp	r3, #5
 800dab2:	d10c      	bne.n	800dace <HAL_RCC_OscConfig+0x35e>
 800dab4:	4b61      	ldr	r3, [pc, #388]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800dab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dab8:	4a60      	ldr	r2, [pc, #384]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800daba:	f043 0304 	orr.w	r3, r3, #4
 800dabe:	6713      	str	r3, [r2, #112]	@ 0x70
 800dac0:	4b5e      	ldr	r3, [pc, #376]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800dac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dac4:	4a5d      	ldr	r2, [pc, #372]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800dac6:	f043 0301 	orr.w	r3, r3, #1
 800daca:	6713      	str	r3, [r2, #112]	@ 0x70
 800dacc:	e00b      	b.n	800dae6 <HAL_RCC_OscConfig+0x376>
 800dace:	4b5b      	ldr	r3, [pc, #364]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800dad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dad2:	4a5a      	ldr	r2, [pc, #360]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800dad4:	f023 0301 	bic.w	r3, r3, #1
 800dad8:	6713      	str	r3, [r2, #112]	@ 0x70
 800dada:	4b58      	ldr	r3, [pc, #352]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800dadc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dade:	4a57      	ldr	r2, [pc, #348]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800dae0:	f023 0304 	bic.w	r3, r3, #4
 800dae4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	689b      	ldr	r3, [r3, #8]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d015      	beq.n	800db1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800daee:	f7fc fe37 	bl	800a760 <HAL_GetTick>
 800daf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800daf4:	e00a      	b.n	800db0c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800daf6:	f7fc fe33 	bl	800a760 <HAL_GetTick>
 800dafa:	4602      	mov	r2, r0
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	1ad3      	subs	r3, r2, r3
 800db00:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db04:	4293      	cmp	r3, r2
 800db06:	d901      	bls.n	800db0c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800db08:	2303      	movs	r3, #3
 800db0a:	e0ce      	b.n	800dcaa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800db0c:	4b4b      	ldr	r3, [pc, #300]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800db0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db10:	f003 0302 	and.w	r3, r3, #2
 800db14:	2b00      	cmp	r3, #0
 800db16:	d0ee      	beq.n	800daf6 <HAL_RCC_OscConfig+0x386>
 800db18:	e014      	b.n	800db44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800db1a:	f7fc fe21 	bl	800a760 <HAL_GetTick>
 800db1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800db20:	e00a      	b.n	800db38 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800db22:	f7fc fe1d 	bl	800a760 <HAL_GetTick>
 800db26:	4602      	mov	r2, r0
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	1ad3      	subs	r3, r2, r3
 800db2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db30:	4293      	cmp	r3, r2
 800db32:	d901      	bls.n	800db38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800db34:	2303      	movs	r3, #3
 800db36:	e0b8      	b.n	800dcaa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800db38:	4b40      	ldr	r3, [pc, #256]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800db3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db3c:	f003 0302 	and.w	r3, r3, #2
 800db40:	2b00      	cmp	r3, #0
 800db42:	d1ee      	bne.n	800db22 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800db44:	7dfb      	ldrb	r3, [r7, #23]
 800db46:	2b01      	cmp	r3, #1
 800db48:	d105      	bne.n	800db56 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800db4a:	4b3c      	ldr	r3, [pc, #240]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800db4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db4e:	4a3b      	ldr	r2, [pc, #236]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800db50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800db54:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	699b      	ldr	r3, [r3, #24]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	f000 80a4 	beq.w	800dca8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800db60:	4b36      	ldr	r3, [pc, #216]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800db62:	689b      	ldr	r3, [r3, #8]
 800db64:	f003 030c 	and.w	r3, r3, #12
 800db68:	2b08      	cmp	r3, #8
 800db6a:	d06b      	beq.n	800dc44 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	699b      	ldr	r3, [r3, #24]
 800db70:	2b02      	cmp	r3, #2
 800db72:	d149      	bne.n	800dc08 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800db74:	4b31      	ldr	r3, [pc, #196]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4a30      	ldr	r2, [pc, #192]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800db7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800db7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db80:	f7fc fdee 	bl	800a760 <HAL_GetTick>
 800db84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800db86:	e008      	b.n	800db9a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db88:	f7fc fdea 	bl	800a760 <HAL_GetTick>
 800db8c:	4602      	mov	r2, r0
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	1ad3      	subs	r3, r2, r3
 800db92:	2b02      	cmp	r3, #2
 800db94:	d901      	bls.n	800db9a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800db96:	2303      	movs	r3, #3
 800db98:	e087      	b.n	800dcaa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800db9a:	4b28      	ldr	r3, [pc, #160]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d1f0      	bne.n	800db88 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	69da      	ldr	r2, [r3, #28]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6a1b      	ldr	r3, [r3, #32]
 800dbae:	431a      	orrs	r2, r3
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbb4:	019b      	lsls	r3, r3, #6
 800dbb6:	431a      	orrs	r2, r3
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbbc:	085b      	lsrs	r3, r3, #1
 800dbbe:	3b01      	subs	r3, #1
 800dbc0:	041b      	lsls	r3, r3, #16
 800dbc2:	431a      	orrs	r2, r3
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbc8:	061b      	lsls	r3, r3, #24
 800dbca:	4313      	orrs	r3, r2
 800dbcc:	4a1b      	ldr	r2, [pc, #108]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800dbce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800dbd2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dbd4:	4b19      	ldr	r3, [pc, #100]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4a18      	ldr	r2, [pc, #96]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800dbda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dbde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbe0:	f7fc fdbe 	bl	800a760 <HAL_GetTick>
 800dbe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dbe6:	e008      	b.n	800dbfa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dbe8:	f7fc fdba 	bl	800a760 <HAL_GetTick>
 800dbec:	4602      	mov	r2, r0
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	1ad3      	subs	r3, r2, r3
 800dbf2:	2b02      	cmp	r3, #2
 800dbf4:	d901      	bls.n	800dbfa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800dbf6:	2303      	movs	r3, #3
 800dbf8:	e057      	b.n	800dcaa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dbfa:	4b10      	ldr	r3, [pc, #64]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d0f0      	beq.n	800dbe8 <HAL_RCC_OscConfig+0x478>
 800dc06:	e04f      	b.n	800dca8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dc08:	4b0c      	ldr	r3, [pc, #48]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	4a0b      	ldr	r2, [pc, #44]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800dc0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dc12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc14:	f7fc fda4 	bl	800a760 <HAL_GetTick>
 800dc18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dc1a:	e008      	b.n	800dc2e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dc1c:	f7fc fda0 	bl	800a760 <HAL_GetTick>
 800dc20:	4602      	mov	r2, r0
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	1ad3      	subs	r3, r2, r3
 800dc26:	2b02      	cmp	r3, #2
 800dc28:	d901      	bls.n	800dc2e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800dc2a:	2303      	movs	r3, #3
 800dc2c:	e03d      	b.n	800dcaa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dc2e:	4b03      	ldr	r3, [pc, #12]	@ (800dc3c <HAL_RCC_OscConfig+0x4cc>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d1f0      	bne.n	800dc1c <HAL_RCC_OscConfig+0x4ac>
 800dc3a:	e035      	b.n	800dca8 <HAL_RCC_OscConfig+0x538>
 800dc3c:	40023800 	.word	0x40023800
 800dc40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800dc44:	4b1b      	ldr	r3, [pc, #108]	@ (800dcb4 <HAL_RCC_OscConfig+0x544>)
 800dc46:	685b      	ldr	r3, [r3, #4]
 800dc48:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	699b      	ldr	r3, [r3, #24]
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d028      	beq.n	800dca4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d121      	bne.n	800dca4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d11a      	bne.n	800dca4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800dc6e:	68fa      	ldr	r2, [r7, #12]
 800dc70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800dc74:	4013      	ands	r3, r2
 800dc76:	687a      	ldr	r2, [r7, #4]
 800dc78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800dc7a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d111      	bne.n	800dca4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc8a:	085b      	lsrs	r3, r3, #1
 800dc8c:	3b01      	subs	r3, #1
 800dc8e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d107      	bne.n	800dca4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc9e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d001      	beq.n	800dca8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800dca4:	2301      	movs	r3, #1
 800dca6:	e000      	b.n	800dcaa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800dca8:	2300      	movs	r3, #0
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3718      	adds	r7, #24
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
 800dcb2:	bf00      	nop
 800dcb4:	40023800 	.word	0x40023800

0800dcb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b084      	sub	sp, #16
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d101      	bne.n	800dcd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800dccc:	2301      	movs	r3, #1
 800dcce:	e0d0      	b.n	800de72 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dcd0:	4b6a      	ldr	r3, [pc, #424]	@ (800de7c <HAL_RCC_ClockConfig+0x1c4>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	f003 030f 	and.w	r3, r3, #15
 800dcd8:	683a      	ldr	r2, [r7, #0]
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d910      	bls.n	800dd00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dcde:	4b67      	ldr	r3, [pc, #412]	@ (800de7c <HAL_RCC_ClockConfig+0x1c4>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	f023 020f 	bic.w	r2, r3, #15
 800dce6:	4965      	ldr	r1, [pc, #404]	@ (800de7c <HAL_RCC_ClockConfig+0x1c4>)
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	4313      	orrs	r3, r2
 800dcec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dcee:	4b63      	ldr	r3, [pc, #396]	@ (800de7c <HAL_RCC_ClockConfig+0x1c4>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	f003 030f 	and.w	r3, r3, #15
 800dcf6:	683a      	ldr	r2, [r7, #0]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d001      	beq.n	800dd00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	e0b8      	b.n	800de72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	f003 0302 	and.w	r3, r3, #2
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d020      	beq.n	800dd4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	f003 0304 	and.w	r3, r3, #4
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d005      	beq.n	800dd24 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dd18:	4b59      	ldr	r3, [pc, #356]	@ (800de80 <HAL_RCC_ClockConfig+0x1c8>)
 800dd1a:	689b      	ldr	r3, [r3, #8]
 800dd1c:	4a58      	ldr	r2, [pc, #352]	@ (800de80 <HAL_RCC_ClockConfig+0x1c8>)
 800dd1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800dd22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	f003 0308 	and.w	r3, r3, #8
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d005      	beq.n	800dd3c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dd30:	4b53      	ldr	r3, [pc, #332]	@ (800de80 <HAL_RCC_ClockConfig+0x1c8>)
 800dd32:	689b      	ldr	r3, [r3, #8]
 800dd34:	4a52      	ldr	r2, [pc, #328]	@ (800de80 <HAL_RCC_ClockConfig+0x1c8>)
 800dd36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800dd3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dd3c:	4b50      	ldr	r3, [pc, #320]	@ (800de80 <HAL_RCC_ClockConfig+0x1c8>)
 800dd3e:	689b      	ldr	r3, [r3, #8]
 800dd40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	689b      	ldr	r3, [r3, #8]
 800dd48:	494d      	ldr	r1, [pc, #308]	@ (800de80 <HAL_RCC_ClockConfig+0x1c8>)
 800dd4a:	4313      	orrs	r3, r2
 800dd4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	f003 0301 	and.w	r3, r3, #1
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d040      	beq.n	800dddc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	d107      	bne.n	800dd72 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dd62:	4b47      	ldr	r3, [pc, #284]	@ (800de80 <HAL_RCC_ClockConfig+0x1c8>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d115      	bne.n	800dd9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800dd6e:	2301      	movs	r3, #1
 800dd70:	e07f      	b.n	800de72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	685b      	ldr	r3, [r3, #4]
 800dd76:	2b02      	cmp	r3, #2
 800dd78:	d107      	bne.n	800dd8a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dd7a:	4b41      	ldr	r3, [pc, #260]	@ (800de80 <HAL_RCC_ClockConfig+0x1c8>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d109      	bne.n	800dd9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800dd86:	2301      	movs	r3, #1
 800dd88:	e073      	b.n	800de72 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dd8a:	4b3d      	ldr	r3, [pc, #244]	@ (800de80 <HAL_RCC_ClockConfig+0x1c8>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	f003 0302 	and.w	r3, r3, #2
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d101      	bne.n	800dd9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800dd96:	2301      	movs	r3, #1
 800dd98:	e06b      	b.n	800de72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dd9a:	4b39      	ldr	r3, [pc, #228]	@ (800de80 <HAL_RCC_ClockConfig+0x1c8>)
 800dd9c:	689b      	ldr	r3, [r3, #8]
 800dd9e:	f023 0203 	bic.w	r2, r3, #3
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	685b      	ldr	r3, [r3, #4]
 800dda6:	4936      	ldr	r1, [pc, #216]	@ (800de80 <HAL_RCC_ClockConfig+0x1c8>)
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ddac:	f7fc fcd8 	bl	800a760 <HAL_GetTick>
 800ddb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ddb2:	e00a      	b.n	800ddca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ddb4:	f7fc fcd4 	bl	800a760 <HAL_GetTick>
 800ddb8:	4602      	mov	r2, r0
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	1ad3      	subs	r3, r2, r3
 800ddbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d901      	bls.n	800ddca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800ddc6:	2303      	movs	r3, #3
 800ddc8:	e053      	b.n	800de72 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ddca:	4b2d      	ldr	r3, [pc, #180]	@ (800de80 <HAL_RCC_ClockConfig+0x1c8>)
 800ddcc:	689b      	ldr	r3, [r3, #8]
 800ddce:	f003 020c 	and.w	r2, r3, #12
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	685b      	ldr	r3, [r3, #4]
 800ddd6:	009b      	lsls	r3, r3, #2
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d1eb      	bne.n	800ddb4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800dddc:	4b27      	ldr	r3, [pc, #156]	@ (800de7c <HAL_RCC_ClockConfig+0x1c4>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f003 030f 	and.w	r3, r3, #15
 800dde4:	683a      	ldr	r2, [r7, #0]
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d210      	bcs.n	800de0c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ddea:	4b24      	ldr	r3, [pc, #144]	@ (800de7c <HAL_RCC_ClockConfig+0x1c4>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	f023 020f 	bic.w	r2, r3, #15
 800ddf2:	4922      	ldr	r1, [pc, #136]	@ (800de7c <HAL_RCC_ClockConfig+0x1c4>)
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	4313      	orrs	r3, r2
 800ddf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ddfa:	4b20      	ldr	r3, [pc, #128]	@ (800de7c <HAL_RCC_ClockConfig+0x1c4>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f003 030f 	and.w	r3, r3, #15
 800de02:	683a      	ldr	r2, [r7, #0]
 800de04:	429a      	cmp	r2, r3
 800de06:	d001      	beq.n	800de0c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800de08:	2301      	movs	r3, #1
 800de0a:	e032      	b.n	800de72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	f003 0304 	and.w	r3, r3, #4
 800de14:	2b00      	cmp	r3, #0
 800de16:	d008      	beq.n	800de2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800de18:	4b19      	ldr	r3, [pc, #100]	@ (800de80 <HAL_RCC_ClockConfig+0x1c8>)
 800de1a:	689b      	ldr	r3, [r3, #8]
 800de1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	68db      	ldr	r3, [r3, #12]
 800de24:	4916      	ldr	r1, [pc, #88]	@ (800de80 <HAL_RCC_ClockConfig+0x1c8>)
 800de26:	4313      	orrs	r3, r2
 800de28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	f003 0308 	and.w	r3, r3, #8
 800de32:	2b00      	cmp	r3, #0
 800de34:	d009      	beq.n	800de4a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800de36:	4b12      	ldr	r3, [pc, #72]	@ (800de80 <HAL_RCC_ClockConfig+0x1c8>)
 800de38:	689b      	ldr	r3, [r3, #8]
 800de3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	691b      	ldr	r3, [r3, #16]
 800de42:	00db      	lsls	r3, r3, #3
 800de44:	490e      	ldr	r1, [pc, #56]	@ (800de80 <HAL_RCC_ClockConfig+0x1c8>)
 800de46:	4313      	orrs	r3, r2
 800de48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800de4a:	f000 f821 	bl	800de90 <HAL_RCC_GetSysClockFreq>
 800de4e:	4602      	mov	r2, r0
 800de50:	4b0b      	ldr	r3, [pc, #44]	@ (800de80 <HAL_RCC_ClockConfig+0x1c8>)
 800de52:	689b      	ldr	r3, [r3, #8]
 800de54:	091b      	lsrs	r3, r3, #4
 800de56:	f003 030f 	and.w	r3, r3, #15
 800de5a:	490a      	ldr	r1, [pc, #40]	@ (800de84 <HAL_RCC_ClockConfig+0x1cc>)
 800de5c:	5ccb      	ldrb	r3, [r1, r3]
 800de5e:	fa22 f303 	lsr.w	r3, r2, r3
 800de62:	4a09      	ldr	r2, [pc, #36]	@ (800de88 <HAL_RCC_ClockConfig+0x1d0>)
 800de64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800de66:	4b09      	ldr	r3, [pc, #36]	@ (800de8c <HAL_RCC_ClockConfig+0x1d4>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7fa fe0e 	bl	8008a8c <HAL_InitTick>

  return HAL_OK;
 800de70:	2300      	movs	r3, #0
}
 800de72:	4618      	mov	r0, r3
 800de74:	3710      	adds	r7, #16
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}
 800de7a:	bf00      	nop
 800de7c:	40023c00 	.word	0x40023c00
 800de80:	40023800 	.word	0x40023800
 800de84:	080256c4 	.word	0x080256c4
 800de88:	20000054 	.word	0x20000054
 800de8c:	20000094 	.word	0x20000094

0800de90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800de90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800de94:	b090      	sub	sp, #64	@ 0x40
 800de96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800de98:	2300      	movs	r3, #0
 800de9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800de9c:	2300      	movs	r3, #0
 800de9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dea0:	2300      	movs	r3, #0
 800dea2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800dea4:	2300      	movs	r3, #0
 800dea6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dea8:	4b59      	ldr	r3, [pc, #356]	@ (800e010 <HAL_RCC_GetSysClockFreq+0x180>)
 800deaa:	689b      	ldr	r3, [r3, #8]
 800deac:	f003 030c 	and.w	r3, r3, #12
 800deb0:	2b08      	cmp	r3, #8
 800deb2:	d00d      	beq.n	800ded0 <HAL_RCC_GetSysClockFreq+0x40>
 800deb4:	2b08      	cmp	r3, #8
 800deb6:	f200 80a1 	bhi.w	800dffc <HAL_RCC_GetSysClockFreq+0x16c>
 800deba:	2b00      	cmp	r3, #0
 800debc:	d002      	beq.n	800dec4 <HAL_RCC_GetSysClockFreq+0x34>
 800debe:	2b04      	cmp	r3, #4
 800dec0:	d003      	beq.n	800deca <HAL_RCC_GetSysClockFreq+0x3a>
 800dec2:	e09b      	b.n	800dffc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800dec4:	4b53      	ldr	r3, [pc, #332]	@ (800e014 <HAL_RCC_GetSysClockFreq+0x184>)
 800dec6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800dec8:	e09b      	b.n	800e002 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800deca:	4b53      	ldr	r3, [pc, #332]	@ (800e018 <HAL_RCC_GetSysClockFreq+0x188>)
 800decc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800dece:	e098      	b.n	800e002 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ded0:	4b4f      	ldr	r3, [pc, #316]	@ (800e010 <HAL_RCC_GetSysClockFreq+0x180>)
 800ded2:	685b      	ldr	r3, [r3, #4]
 800ded4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ded8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800deda:	4b4d      	ldr	r3, [pc, #308]	@ (800e010 <HAL_RCC_GetSysClockFreq+0x180>)
 800dedc:	685b      	ldr	r3, [r3, #4]
 800dede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d028      	beq.n	800df38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dee6:	4b4a      	ldr	r3, [pc, #296]	@ (800e010 <HAL_RCC_GetSysClockFreq+0x180>)
 800dee8:	685b      	ldr	r3, [r3, #4]
 800deea:	099b      	lsrs	r3, r3, #6
 800deec:	2200      	movs	r2, #0
 800deee:	623b      	str	r3, [r7, #32]
 800def0:	627a      	str	r2, [r7, #36]	@ 0x24
 800def2:	6a3b      	ldr	r3, [r7, #32]
 800def4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800def8:	2100      	movs	r1, #0
 800defa:	4b47      	ldr	r3, [pc, #284]	@ (800e018 <HAL_RCC_GetSysClockFreq+0x188>)
 800defc:	fb03 f201 	mul.w	r2, r3, r1
 800df00:	2300      	movs	r3, #0
 800df02:	fb00 f303 	mul.w	r3, r0, r3
 800df06:	4413      	add	r3, r2
 800df08:	4a43      	ldr	r2, [pc, #268]	@ (800e018 <HAL_RCC_GetSysClockFreq+0x188>)
 800df0a:	fba0 1202 	umull	r1, r2, r0, r2
 800df0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800df10:	460a      	mov	r2, r1
 800df12:	62ba      	str	r2, [r7, #40]	@ 0x28
 800df14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df16:	4413      	add	r3, r2
 800df18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800df1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df1c:	2200      	movs	r2, #0
 800df1e:	61bb      	str	r3, [r7, #24]
 800df20:	61fa      	str	r2, [r7, #28]
 800df22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800df26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800df2a:	f7f2 fdaf 	bl	8000a8c <__aeabi_uldivmod>
 800df2e:	4602      	mov	r2, r0
 800df30:	460b      	mov	r3, r1
 800df32:	4613      	mov	r3, r2
 800df34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800df36:	e053      	b.n	800dfe0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800df38:	4b35      	ldr	r3, [pc, #212]	@ (800e010 <HAL_RCC_GetSysClockFreq+0x180>)
 800df3a:	685b      	ldr	r3, [r3, #4]
 800df3c:	099b      	lsrs	r3, r3, #6
 800df3e:	2200      	movs	r2, #0
 800df40:	613b      	str	r3, [r7, #16]
 800df42:	617a      	str	r2, [r7, #20]
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800df4a:	f04f 0b00 	mov.w	fp, #0
 800df4e:	4652      	mov	r2, sl
 800df50:	465b      	mov	r3, fp
 800df52:	f04f 0000 	mov.w	r0, #0
 800df56:	f04f 0100 	mov.w	r1, #0
 800df5a:	0159      	lsls	r1, r3, #5
 800df5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800df60:	0150      	lsls	r0, r2, #5
 800df62:	4602      	mov	r2, r0
 800df64:	460b      	mov	r3, r1
 800df66:	ebb2 080a 	subs.w	r8, r2, sl
 800df6a:	eb63 090b 	sbc.w	r9, r3, fp
 800df6e:	f04f 0200 	mov.w	r2, #0
 800df72:	f04f 0300 	mov.w	r3, #0
 800df76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800df7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800df7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800df82:	ebb2 0408 	subs.w	r4, r2, r8
 800df86:	eb63 0509 	sbc.w	r5, r3, r9
 800df8a:	f04f 0200 	mov.w	r2, #0
 800df8e:	f04f 0300 	mov.w	r3, #0
 800df92:	00eb      	lsls	r3, r5, #3
 800df94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800df98:	00e2      	lsls	r2, r4, #3
 800df9a:	4614      	mov	r4, r2
 800df9c:	461d      	mov	r5, r3
 800df9e:	eb14 030a 	adds.w	r3, r4, sl
 800dfa2:	603b      	str	r3, [r7, #0]
 800dfa4:	eb45 030b 	adc.w	r3, r5, fp
 800dfa8:	607b      	str	r3, [r7, #4]
 800dfaa:	f04f 0200 	mov.w	r2, #0
 800dfae:	f04f 0300 	mov.w	r3, #0
 800dfb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800dfb6:	4629      	mov	r1, r5
 800dfb8:	028b      	lsls	r3, r1, #10
 800dfba:	4621      	mov	r1, r4
 800dfbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800dfc0:	4621      	mov	r1, r4
 800dfc2:	028a      	lsls	r2, r1, #10
 800dfc4:	4610      	mov	r0, r2
 800dfc6:	4619      	mov	r1, r3
 800dfc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfca:	2200      	movs	r2, #0
 800dfcc:	60bb      	str	r3, [r7, #8]
 800dfce:	60fa      	str	r2, [r7, #12]
 800dfd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dfd4:	f7f2 fd5a 	bl	8000a8c <__aeabi_uldivmod>
 800dfd8:	4602      	mov	r2, r0
 800dfda:	460b      	mov	r3, r1
 800dfdc:	4613      	mov	r3, r2
 800dfde:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800dfe0:	4b0b      	ldr	r3, [pc, #44]	@ (800e010 <HAL_RCC_GetSysClockFreq+0x180>)
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	0c1b      	lsrs	r3, r3, #16
 800dfe6:	f003 0303 	and.w	r3, r3, #3
 800dfea:	3301      	adds	r3, #1
 800dfec:	005b      	lsls	r3, r3, #1
 800dfee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800dff0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dff4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dff8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800dffa:	e002      	b.n	800e002 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800dffc:	4b05      	ldr	r3, [pc, #20]	@ (800e014 <HAL_RCC_GetSysClockFreq+0x184>)
 800dffe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800e000:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800e004:	4618      	mov	r0, r3
 800e006:	3740      	adds	r7, #64	@ 0x40
 800e008:	46bd      	mov	sp, r7
 800e00a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e00e:	bf00      	nop
 800e010:	40023800 	.word	0x40023800
 800e014:	00f42400 	.word	0x00f42400
 800e018:	017d7840 	.word	0x017d7840

0800e01c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e01c:	b480      	push	{r7}
 800e01e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e020:	4b03      	ldr	r3, [pc, #12]	@ (800e030 <HAL_RCC_GetHCLKFreq+0x14>)
 800e022:	681b      	ldr	r3, [r3, #0]
}
 800e024:	4618      	mov	r0, r3
 800e026:	46bd      	mov	sp, r7
 800e028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02c:	4770      	bx	lr
 800e02e:	bf00      	nop
 800e030:	20000054 	.word	0x20000054

0800e034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800e038:	f7ff fff0 	bl	800e01c <HAL_RCC_GetHCLKFreq>
 800e03c:	4602      	mov	r2, r0
 800e03e:	4b05      	ldr	r3, [pc, #20]	@ (800e054 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e040:	689b      	ldr	r3, [r3, #8]
 800e042:	0a9b      	lsrs	r3, r3, #10
 800e044:	f003 0307 	and.w	r3, r3, #7
 800e048:	4903      	ldr	r1, [pc, #12]	@ (800e058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e04a:	5ccb      	ldrb	r3, [r1, r3]
 800e04c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e050:	4618      	mov	r0, r3
 800e052:	bd80      	pop	{r7, pc}
 800e054:	40023800 	.word	0x40023800
 800e058:	080256d4 	.word	0x080256d4

0800e05c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800e060:	f7ff ffdc 	bl	800e01c <HAL_RCC_GetHCLKFreq>
 800e064:	4602      	mov	r2, r0
 800e066:	4b05      	ldr	r3, [pc, #20]	@ (800e07c <HAL_RCC_GetPCLK2Freq+0x20>)
 800e068:	689b      	ldr	r3, [r3, #8]
 800e06a:	0b5b      	lsrs	r3, r3, #13
 800e06c:	f003 0307 	and.w	r3, r3, #7
 800e070:	4903      	ldr	r1, [pc, #12]	@ (800e080 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e072:	5ccb      	ldrb	r3, [r1, r3]
 800e074:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e078:	4618      	mov	r0, r3
 800e07a:	bd80      	pop	{r7, pc}
 800e07c:	40023800 	.word	0x40023800
 800e080:	080256d4 	.word	0x080256d4

0800e084 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e084:	b480      	push	{r7}
 800e086:	b083      	sub	sp, #12
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	220f      	movs	r2, #15
 800e092:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e094:	4b12      	ldr	r3, [pc, #72]	@ (800e0e0 <HAL_RCC_GetClockConfig+0x5c>)
 800e096:	689b      	ldr	r3, [r3, #8]
 800e098:	f003 0203 	and.w	r2, r3, #3
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e0a0:	4b0f      	ldr	r3, [pc, #60]	@ (800e0e0 <HAL_RCC_GetClockConfig+0x5c>)
 800e0a2:	689b      	ldr	r3, [r3, #8]
 800e0a4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e0ac:	4b0c      	ldr	r3, [pc, #48]	@ (800e0e0 <HAL_RCC_GetClockConfig+0x5c>)
 800e0ae:	689b      	ldr	r3, [r3, #8]
 800e0b0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800e0b8:	4b09      	ldr	r3, [pc, #36]	@ (800e0e0 <HAL_RCC_GetClockConfig+0x5c>)
 800e0ba:	689b      	ldr	r3, [r3, #8]
 800e0bc:	08db      	lsrs	r3, r3, #3
 800e0be:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e0c6:	4b07      	ldr	r3, [pc, #28]	@ (800e0e4 <HAL_RCC_GetClockConfig+0x60>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f003 020f 	and.w	r2, r3, #15
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	601a      	str	r2, [r3, #0]
}
 800e0d2:	bf00      	nop
 800e0d4:	370c      	adds	r7, #12
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0dc:	4770      	bx	lr
 800e0de:	bf00      	nop
 800e0e0:	40023800 	.word	0x40023800
 800e0e4:	40023c00 	.word	0x40023c00

0800e0e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b088      	sub	sp, #32
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800e100:	2300      	movs	r3, #0
 800e102:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	f003 0301 	and.w	r3, r3, #1
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d012      	beq.n	800e136 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e110:	4b69      	ldr	r3, [pc, #420]	@ (800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e112:	689b      	ldr	r3, [r3, #8]
 800e114:	4a68      	ldr	r2, [pc, #416]	@ (800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e116:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e11a:	6093      	str	r3, [r2, #8]
 800e11c:	4b66      	ldr	r3, [pc, #408]	@ (800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e11e:	689a      	ldr	r2, [r3, #8]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e124:	4964      	ldr	r1, [pc, #400]	@ (800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e126:	4313      	orrs	r3, r2
 800e128:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d101      	bne.n	800e136 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800e132:	2301      	movs	r3, #1
 800e134:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d017      	beq.n	800e172 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e142:	4b5d      	ldr	r3, [pc, #372]	@ (800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e144:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e148:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e150:	4959      	ldr	r1, [pc, #356]	@ (800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e152:	4313      	orrs	r3, r2
 800e154:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e15c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e160:	d101      	bne.n	800e166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800e162:	2301      	movs	r3, #1
 800e164:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d101      	bne.n	800e172 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800e16e:	2301      	movs	r3, #1
 800e170:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d017      	beq.n	800e1ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e17e:	4b4e      	ldr	r3, [pc, #312]	@ (800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e180:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e184:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e18c:	494a      	ldr	r1, [pc, #296]	@ (800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e18e:	4313      	orrs	r3, r2
 800e190:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e198:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e19c:	d101      	bne.n	800e1a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800e19e:	2301      	movs	r3, #1
 800e1a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d101      	bne.n	800e1ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d001      	beq.n	800e1be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	f003 0320 	and.w	r3, r3, #32
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	f000 808b 	beq.w	800e2e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e1cc:	4b3a      	ldr	r3, [pc, #232]	@ (800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1d0:	4a39      	ldr	r2, [pc, #228]	@ (800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e1d6:	6413      	str	r3, [r2, #64]	@ 0x40
 800e1d8:	4b37      	ldr	r3, [pc, #220]	@ (800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e1e0:	60bb      	str	r3, [r7, #8]
 800e1e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e1e4:	4b35      	ldr	r3, [pc, #212]	@ (800e2bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	4a34      	ldr	r2, [pc, #208]	@ (800e2bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e1ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e1ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e1f0:	f7fc fab6 	bl	800a760 <HAL_GetTick>
 800e1f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e1f6:	e008      	b.n	800e20a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e1f8:	f7fc fab2 	bl	800a760 <HAL_GetTick>
 800e1fc:	4602      	mov	r2, r0
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	1ad3      	subs	r3, r2, r3
 800e202:	2b64      	cmp	r3, #100	@ 0x64
 800e204:	d901      	bls.n	800e20a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800e206:	2303      	movs	r3, #3
 800e208:	e357      	b.n	800e8ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e20a:	4b2c      	ldr	r3, [pc, #176]	@ (800e2bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e212:	2b00      	cmp	r3, #0
 800e214:	d0f0      	beq.n	800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e216:	4b28      	ldr	r3, [pc, #160]	@ (800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e21a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e21e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d035      	beq.n	800e292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e22a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e22e:	693a      	ldr	r2, [r7, #16]
 800e230:	429a      	cmp	r2, r3
 800e232:	d02e      	beq.n	800e292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e234:	4b20      	ldr	r3, [pc, #128]	@ (800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e238:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e23c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e23e:	4b1e      	ldr	r3, [pc, #120]	@ (800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e242:	4a1d      	ldr	r2, [pc, #116]	@ (800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e248:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e24a:	4b1b      	ldr	r3, [pc, #108]	@ (800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e24c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e24e:	4a1a      	ldr	r2, [pc, #104]	@ (800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e250:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e254:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800e256:	4a18      	ldr	r2, [pc, #96]	@ (800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e25c:	4b16      	ldr	r3, [pc, #88]	@ (800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e25e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e260:	f003 0301 	and.w	r3, r3, #1
 800e264:	2b01      	cmp	r3, #1
 800e266:	d114      	bne.n	800e292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e268:	f7fc fa7a 	bl	800a760 <HAL_GetTick>
 800e26c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e26e:	e00a      	b.n	800e286 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e270:	f7fc fa76 	bl	800a760 <HAL_GetTick>
 800e274:	4602      	mov	r2, r0
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	1ad3      	subs	r3, r2, r3
 800e27a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e27e:	4293      	cmp	r3, r2
 800e280:	d901      	bls.n	800e286 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800e282:	2303      	movs	r3, #3
 800e284:	e319      	b.n	800e8ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e286:	4b0c      	ldr	r3, [pc, #48]	@ (800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e28a:	f003 0302 	and.w	r3, r3, #2
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d0ee      	beq.n	800e270 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e296:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e29a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e29e:	d111      	bne.n	800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800e2a0:	4b05      	ldr	r3, [pc, #20]	@ (800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e2a2:	689b      	ldr	r3, [r3, #8]
 800e2a4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800e2ac:	4b04      	ldr	r3, [pc, #16]	@ (800e2c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800e2ae:	400b      	ands	r3, r1
 800e2b0:	4901      	ldr	r1, [pc, #4]	@ (800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e2b2:	4313      	orrs	r3, r2
 800e2b4:	608b      	str	r3, [r1, #8]
 800e2b6:	e00b      	b.n	800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800e2b8:	40023800 	.word	0x40023800
 800e2bc:	40007000 	.word	0x40007000
 800e2c0:	0ffffcff 	.word	0x0ffffcff
 800e2c4:	4baa      	ldr	r3, [pc, #680]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e2c6:	689b      	ldr	r3, [r3, #8]
 800e2c8:	4aa9      	ldr	r2, [pc, #676]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e2ca:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800e2ce:	6093      	str	r3, [r2, #8]
 800e2d0:	4ba7      	ldr	r3, [pc, #668]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e2d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e2dc:	49a4      	ldr	r1, [pc, #656]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e2de:	4313      	orrs	r3, r2
 800e2e0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	f003 0310 	and.w	r3, r3, #16
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d010      	beq.n	800e310 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e2ee:	4ba0      	ldr	r3, [pc, #640]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e2f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e2f4:	4a9e      	ldr	r2, [pc, #632]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e2f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e2fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800e2fe:	4b9c      	ldr	r3, [pc, #624]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e300:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e308:	4999      	ldr	r1, [pc, #612]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e30a:	4313      	orrs	r3, r2
 800e30c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d00a      	beq.n	800e332 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e31c:	4b94      	ldr	r3, [pc, #592]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e31e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e322:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e32a:	4991      	ldr	r1, [pc, #580]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e32c:	4313      	orrs	r3, r2
 800e32e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d00a      	beq.n	800e354 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e33e:	4b8c      	ldr	r3, [pc, #560]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e344:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e34c:	4988      	ldr	r1, [pc, #544]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e34e:	4313      	orrs	r3, r2
 800e350:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d00a      	beq.n	800e376 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e360:	4b83      	ldr	r3, [pc, #524]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e366:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e36e:	4980      	ldr	r1, [pc, #512]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e370:	4313      	orrs	r3, r2
 800e372:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d00a      	beq.n	800e398 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e382:	4b7b      	ldr	r3, [pc, #492]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e388:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e390:	4977      	ldr	r1, [pc, #476]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e392:	4313      	orrs	r3, r2
 800e394:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d00a      	beq.n	800e3ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e3a4:	4b72      	ldr	r3, [pc, #456]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e3a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3aa:	f023 0203 	bic.w	r2, r3, #3
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3b2:	496f      	ldr	r1, [pc, #444]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e3b4:	4313      	orrs	r3, r2
 800e3b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d00a      	beq.n	800e3dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e3c6:	4b6a      	ldr	r3, [pc, #424]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e3c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3cc:	f023 020c 	bic.w	r2, r3, #12
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e3d4:	4966      	ldr	r1, [pc, #408]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e3d6:	4313      	orrs	r3, r2
 800e3d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d00a      	beq.n	800e3fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e3e8:	4b61      	ldr	r3, [pc, #388]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e3ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3ee:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3f6:	495e      	ldr	r1, [pc, #376]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e3f8:	4313      	orrs	r3, r2
 800e3fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e406:	2b00      	cmp	r3, #0
 800e408:	d00a      	beq.n	800e420 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e40a:	4b59      	ldr	r3, [pc, #356]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e40c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e410:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e418:	4955      	ldr	r1, [pc, #340]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e41a:	4313      	orrs	r3, r2
 800e41c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d00a      	beq.n	800e442 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e42c:	4b50      	ldr	r3, [pc, #320]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e42e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e432:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e43a:	494d      	ldr	r1, [pc, #308]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e43c:	4313      	orrs	r3, r2
 800e43e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d00a      	beq.n	800e464 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e44e:	4b48      	ldr	r3, [pc, #288]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e454:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e45c:	4944      	ldr	r1, [pc, #272]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e45e:	4313      	orrs	r3, r2
 800e460:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d00a      	beq.n	800e486 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e470:	4b3f      	ldr	r3, [pc, #252]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e476:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e47e:	493c      	ldr	r1, [pc, #240]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e480:	4313      	orrs	r3, r2
 800e482:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d00a      	beq.n	800e4a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e492:	4b37      	ldr	r3, [pc, #220]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e498:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e4a0:	4933      	ldr	r1, [pc, #204]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e4a2:	4313      	orrs	r3, r2
 800e4a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d00a      	beq.n	800e4ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e4b4:	4b2e      	ldr	r3, [pc, #184]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e4b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4ba:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e4c2:	492b      	ldr	r1, [pc, #172]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e4c4:	4313      	orrs	r3, r2
 800e4c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d011      	beq.n	800e4fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e4d6:	4b26      	ldr	r3, [pc, #152]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e4d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4dc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e4e4:	4922      	ldr	r1, [pc, #136]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e4e6:	4313      	orrs	r3, r2
 800e4e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e4f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e4f4:	d101      	bne.n	800e4fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	f003 0308 	and.w	r3, r3, #8
 800e502:	2b00      	cmp	r3, #0
 800e504:	d001      	beq.n	800e50a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800e506:	2301      	movs	r3, #1
 800e508:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e512:	2b00      	cmp	r3, #0
 800e514:	d00a      	beq.n	800e52c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e516:	4b16      	ldr	r3, [pc, #88]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e51c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e524:	4912      	ldr	r1, [pc, #72]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e526:	4313      	orrs	r3, r2
 800e528:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e534:	2b00      	cmp	r3, #0
 800e536:	d00b      	beq.n	800e550 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e538:	4b0d      	ldr	r3, [pc, #52]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e53a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e53e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e548:	4909      	ldr	r1, [pc, #36]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e54a:	4313      	orrs	r3, r2
 800e54c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800e550:	69fb      	ldr	r3, [r7, #28]
 800e552:	2b01      	cmp	r3, #1
 800e554:	d006      	beq.n	800e564 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e55e:	2b00      	cmp	r3, #0
 800e560:	f000 80d9 	beq.w	800e716 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e564:	4b02      	ldr	r3, [pc, #8]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	4a01      	ldr	r2, [pc, #4]	@ (800e570 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e56a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e56e:	e001      	b.n	800e574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800e570:	40023800 	.word	0x40023800
 800e574:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e576:	f7fc f8f3 	bl	800a760 <HAL_GetTick>
 800e57a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e57c:	e008      	b.n	800e590 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e57e:	f7fc f8ef 	bl	800a760 <HAL_GetTick>
 800e582:	4602      	mov	r2, r0
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	1ad3      	subs	r3, r2, r3
 800e588:	2b64      	cmp	r3, #100	@ 0x64
 800e58a:	d901      	bls.n	800e590 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e58c:	2303      	movs	r3, #3
 800e58e:	e194      	b.n	800e8ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e590:	4b6c      	ldr	r3, [pc, #432]	@ (800e744 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d1f0      	bne.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f003 0301 	and.w	r3, r3, #1
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d021      	beq.n	800e5ec <HAL_RCCEx_PeriphCLKConfig+0x504>
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d11d      	bne.n	800e5ec <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e5b0:	4b64      	ldr	r3, [pc, #400]	@ (800e744 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e5b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e5b6:	0c1b      	lsrs	r3, r3, #16
 800e5b8:	f003 0303 	and.w	r3, r3, #3
 800e5bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e5be:	4b61      	ldr	r3, [pc, #388]	@ (800e744 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e5c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e5c4:	0e1b      	lsrs	r3, r3, #24
 800e5c6:	f003 030f 	and.w	r3, r3, #15
 800e5ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	019a      	lsls	r2, r3, #6
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	041b      	lsls	r3, r3, #16
 800e5d6:	431a      	orrs	r2, r3
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	061b      	lsls	r3, r3, #24
 800e5dc:	431a      	orrs	r2, r3
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	689b      	ldr	r3, [r3, #8]
 800e5e2:	071b      	lsls	r3, r3, #28
 800e5e4:	4957      	ldr	r1, [pc, #348]	@ (800e744 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e5e6:	4313      	orrs	r3, r2
 800e5e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d004      	beq.n	800e602 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e5fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e600:	d00a      	beq.n	800e618 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d02e      	beq.n	800e66c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e612:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e616:	d129      	bne.n	800e66c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e618:	4b4a      	ldr	r3, [pc, #296]	@ (800e744 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e61a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e61e:	0c1b      	lsrs	r3, r3, #16
 800e620:	f003 0303 	and.w	r3, r3, #3
 800e624:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e626:	4b47      	ldr	r3, [pc, #284]	@ (800e744 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e628:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e62c:	0f1b      	lsrs	r3, r3, #28
 800e62e:	f003 0307 	and.w	r3, r3, #7
 800e632:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	019a      	lsls	r2, r3, #6
 800e63a:	693b      	ldr	r3, [r7, #16]
 800e63c:	041b      	lsls	r3, r3, #16
 800e63e:	431a      	orrs	r2, r3
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	68db      	ldr	r3, [r3, #12]
 800e644:	061b      	lsls	r3, r3, #24
 800e646:	431a      	orrs	r2, r3
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	071b      	lsls	r3, r3, #28
 800e64c:	493d      	ldr	r1, [pc, #244]	@ (800e744 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e64e:	4313      	orrs	r3, r2
 800e650:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e654:	4b3b      	ldr	r3, [pc, #236]	@ (800e744 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e656:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e65a:	f023 021f 	bic.w	r2, r3, #31
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e662:	3b01      	subs	r3, #1
 800e664:	4937      	ldr	r1, [pc, #220]	@ (800e744 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e666:	4313      	orrs	r3, r2
 800e668:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e674:	2b00      	cmp	r3, #0
 800e676:	d01d      	beq.n	800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e678:	4b32      	ldr	r3, [pc, #200]	@ (800e744 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e67a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e67e:	0e1b      	lsrs	r3, r3, #24
 800e680:	f003 030f 	and.w	r3, r3, #15
 800e684:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e686:	4b2f      	ldr	r3, [pc, #188]	@ (800e744 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e688:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e68c:	0f1b      	lsrs	r3, r3, #28
 800e68e:	f003 0307 	and.w	r3, r3, #7
 800e692:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	685b      	ldr	r3, [r3, #4]
 800e698:	019a      	lsls	r2, r3, #6
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	691b      	ldr	r3, [r3, #16]
 800e69e:	041b      	lsls	r3, r3, #16
 800e6a0:	431a      	orrs	r2, r3
 800e6a2:	693b      	ldr	r3, [r7, #16]
 800e6a4:	061b      	lsls	r3, r3, #24
 800e6a6:	431a      	orrs	r2, r3
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	071b      	lsls	r3, r3, #28
 800e6ac:	4925      	ldr	r1, [pc, #148]	@ (800e744 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e6ae:	4313      	orrs	r3, r2
 800e6b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d011      	beq.n	800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	685b      	ldr	r3, [r3, #4]
 800e6c4:	019a      	lsls	r2, r3, #6
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	691b      	ldr	r3, [r3, #16]
 800e6ca:	041b      	lsls	r3, r3, #16
 800e6cc:	431a      	orrs	r2, r3
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	68db      	ldr	r3, [r3, #12]
 800e6d2:	061b      	lsls	r3, r3, #24
 800e6d4:	431a      	orrs	r2, r3
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	689b      	ldr	r3, [r3, #8]
 800e6da:	071b      	lsls	r3, r3, #28
 800e6dc:	4919      	ldr	r1, [pc, #100]	@ (800e744 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e6de:	4313      	orrs	r3, r2
 800e6e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e6e4:	4b17      	ldr	r3, [pc, #92]	@ (800e744 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	4a16      	ldr	r2, [pc, #88]	@ (800e744 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e6ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e6ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e6f0:	f7fc f836 	bl	800a760 <HAL_GetTick>
 800e6f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e6f6:	e008      	b.n	800e70a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e6f8:	f7fc f832 	bl	800a760 <HAL_GetTick>
 800e6fc:	4602      	mov	r2, r0
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	1ad3      	subs	r3, r2, r3
 800e702:	2b64      	cmp	r3, #100	@ 0x64
 800e704:	d901      	bls.n	800e70a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e706:	2303      	movs	r3, #3
 800e708:	e0d7      	b.n	800e8ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e70a:	4b0e      	ldr	r3, [pc, #56]	@ (800e744 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e712:	2b00      	cmp	r3, #0
 800e714:	d0f0      	beq.n	800e6f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800e716:	69bb      	ldr	r3, [r7, #24]
 800e718:	2b01      	cmp	r3, #1
 800e71a:	f040 80cd 	bne.w	800e8b8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800e71e:	4b09      	ldr	r3, [pc, #36]	@ (800e744 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	4a08      	ldr	r2, [pc, #32]	@ (800e744 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e724:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e72a:	f7fc f819 	bl	800a760 <HAL_GetTick>
 800e72e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e730:	e00a      	b.n	800e748 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e732:	f7fc f815 	bl	800a760 <HAL_GetTick>
 800e736:	4602      	mov	r2, r0
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	1ad3      	subs	r3, r2, r3
 800e73c:	2b64      	cmp	r3, #100	@ 0x64
 800e73e:	d903      	bls.n	800e748 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e740:	2303      	movs	r3, #3
 800e742:	e0ba      	b.n	800e8ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800e744:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e748:	4b5e      	ldr	r3, [pc, #376]	@ (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e750:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e754:	d0ed      	beq.n	800e732 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d003      	beq.n	800e76a <HAL_RCCEx_PeriphCLKConfig+0x682>
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e766:	2b00      	cmp	r3, #0
 800e768:	d009      	beq.n	800e77e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e772:	2b00      	cmp	r3, #0
 800e774:	d02e      	beq.n	800e7d4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d12a      	bne.n	800e7d4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e77e:	4b51      	ldr	r3, [pc, #324]	@ (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e784:	0c1b      	lsrs	r3, r3, #16
 800e786:	f003 0303 	and.w	r3, r3, #3
 800e78a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e78c:	4b4d      	ldr	r3, [pc, #308]	@ (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e78e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e792:	0f1b      	lsrs	r3, r3, #28
 800e794:	f003 0307 	and.w	r3, r3, #7
 800e798:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	695b      	ldr	r3, [r3, #20]
 800e79e:	019a      	lsls	r2, r3, #6
 800e7a0:	693b      	ldr	r3, [r7, #16]
 800e7a2:	041b      	lsls	r3, r3, #16
 800e7a4:	431a      	orrs	r2, r3
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	699b      	ldr	r3, [r3, #24]
 800e7aa:	061b      	lsls	r3, r3, #24
 800e7ac:	431a      	orrs	r2, r3
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	071b      	lsls	r3, r3, #28
 800e7b2:	4944      	ldr	r1, [pc, #272]	@ (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e7b4:	4313      	orrs	r3, r2
 800e7b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e7ba:	4b42      	ldr	r3, [pc, #264]	@ (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e7bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e7c0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7c8:	3b01      	subs	r3, #1
 800e7ca:	021b      	lsls	r3, r3, #8
 800e7cc:	493d      	ldr	r1, [pc, #244]	@ (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e7ce:	4313      	orrs	r3, r2
 800e7d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d022      	beq.n	800e826 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e7e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e7e8:	d11d      	bne.n	800e826 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e7ea:	4b36      	ldr	r3, [pc, #216]	@ (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e7ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e7f0:	0e1b      	lsrs	r3, r3, #24
 800e7f2:	f003 030f 	and.w	r3, r3, #15
 800e7f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e7f8:	4b32      	ldr	r3, [pc, #200]	@ (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e7fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e7fe:	0f1b      	lsrs	r3, r3, #28
 800e800:	f003 0307 	and.w	r3, r3, #7
 800e804:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	695b      	ldr	r3, [r3, #20]
 800e80a:	019a      	lsls	r2, r3, #6
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	6a1b      	ldr	r3, [r3, #32]
 800e810:	041b      	lsls	r3, r3, #16
 800e812:	431a      	orrs	r2, r3
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	061b      	lsls	r3, r3, #24
 800e818:	431a      	orrs	r2, r3
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	071b      	lsls	r3, r3, #28
 800e81e:	4929      	ldr	r1, [pc, #164]	@ (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e820:	4313      	orrs	r3, r2
 800e822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f003 0308 	and.w	r3, r3, #8
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d028      	beq.n	800e884 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e832:	4b24      	ldr	r3, [pc, #144]	@ (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e838:	0e1b      	lsrs	r3, r3, #24
 800e83a:	f003 030f 	and.w	r3, r3, #15
 800e83e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e840:	4b20      	ldr	r3, [pc, #128]	@ (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e846:	0c1b      	lsrs	r3, r3, #16
 800e848:	f003 0303 	and.w	r3, r3, #3
 800e84c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	695b      	ldr	r3, [r3, #20]
 800e852:	019a      	lsls	r2, r3, #6
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	041b      	lsls	r3, r3, #16
 800e858:	431a      	orrs	r2, r3
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	061b      	lsls	r3, r3, #24
 800e85e:	431a      	orrs	r2, r3
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	69db      	ldr	r3, [r3, #28]
 800e864:	071b      	lsls	r3, r3, #28
 800e866:	4917      	ldr	r1, [pc, #92]	@ (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e868:	4313      	orrs	r3, r2
 800e86a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e86e:	4b15      	ldr	r3, [pc, #84]	@ (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e870:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e874:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e87c:	4911      	ldr	r1, [pc, #68]	@ (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e87e:	4313      	orrs	r3, r2
 800e880:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e884:	4b0f      	ldr	r3, [pc, #60]	@ (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	4a0e      	ldr	r2, [pc, #56]	@ (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e88a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e88e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e890:	f7fb ff66 	bl	800a760 <HAL_GetTick>
 800e894:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e896:	e008      	b.n	800e8aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e898:	f7fb ff62 	bl	800a760 <HAL_GetTick>
 800e89c:	4602      	mov	r2, r0
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	1ad3      	subs	r3, r2, r3
 800e8a2:	2b64      	cmp	r3, #100	@ 0x64
 800e8a4:	d901      	bls.n	800e8aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e8a6:	2303      	movs	r3, #3
 800e8a8:	e007      	b.n	800e8ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e8aa:	4b06      	ldr	r3, [pc, #24]	@ (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e8b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e8b6:	d1ef      	bne.n	800e898 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800e8b8:	2300      	movs	r3, #0
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	3720      	adds	r7, #32
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}
 800e8c2:	bf00      	nop
 800e8c4:	40023800 	.word	0x40023800

0800e8c8 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e8c8:	b480      	push	{r7}
 800e8ca:	b085      	sub	sp, #20
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	4a80      	ldr	r2, [pc, #512]	@ (800ead8 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 800e8d8:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800e8da:	4b80      	ldr	r3, [pc, #512]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e8dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e8e0:	099b      	lsrs	r3, r3, #6
 800e8e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e8ea:	4b7c      	ldr	r3, [pc, #496]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e8ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e8f0:	0c1b      	lsrs	r3, r3, #16
 800e8f2:	f003 0203 	and.w	r2, r3, #3
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e8fa:	4b78      	ldr	r3, [pc, #480]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e8fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e900:	0e1b      	lsrs	r3, r3, #24
 800e902:	f003 020f 	and.w	r2, r3, #15
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e90a:	4b74      	ldr	r3, [pc, #464]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e90c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e910:	0f1b      	lsrs	r3, r3, #28
 800e912:	f003 0207 	and.w	r2, r3, #7
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800e91a:	4b70      	ldr	r3, [pc, #448]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e91c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e920:	099b      	lsrs	r3, r3, #6
 800e922:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e92a:	4b6c      	ldr	r3, [pc, #432]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e92c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e930:	0c1b      	lsrs	r3, r3, #16
 800e932:	f003 0203 	and.w	r2, r3, #3
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e93a:	4b68      	ldr	r3, [pc, #416]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e93c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e940:	0e1b      	lsrs	r3, r3, #24
 800e942:	f003 020f 	and.w	r2, r3, #15
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e94a:	4b64      	ldr	r3, [pc, #400]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e94c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e950:	0f1b      	lsrs	r3, r3, #28
 800e952:	f003 0207 	and.w	r2, r3, #7
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800e95a:	4b60      	ldr	r3, [pc, #384]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e95c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e960:	f003 021f 	and.w	r2, r3, #31
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800e968:	4b5c      	ldr	r3, [pc, #368]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e96a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e96e:	0a1b      	lsrs	r3, r3, #8
 800e970:	f003 021f 	and.w	r2, r3, #31
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800e978:	4b58      	ldr	r3, [pc, #352]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e97a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e97e:	0c1b      	lsrs	r3, r3, #16
 800e980:	f003 0203 	and.w	r2, r3, #3
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800e988:	4b54      	ldr	r3, [pc, #336]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e98a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e98e:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800e996:	4b51      	ldr	r3, [pc, #324]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e998:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e99c:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800e9a4:	4b4d      	ldr	r3, [pc, #308]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e9a6:	689b      	ldr	r3, [r3, #8]
 800e9a8:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800e9b0:	4b4a      	ldr	r3, [pc, #296]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e9b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800e9be:	4b47      	ldr	r3, [pc, #284]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e9c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9c4:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800e9cc:	4b43      	ldr	r3, [pc, #268]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e9ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9d2:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800e9da:	4b40      	ldr	r3, [pc, #256]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e9dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9e0:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800e9e8:	4b3c      	ldr	r3, [pc, #240]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e9ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9ee:	f003 0203 	and.w	r2, r3, #3
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800e9f6:	4b39      	ldr	r3, [pc, #228]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e9f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9fc:	f003 020c 	and.w	r2, r3, #12
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800ea04:	4b35      	ldr	r3, [pc, #212]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea0a:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800ea12:	4b32      	ldr	r3, [pc, #200]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea18:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800ea20:	4b2e      	ldr	r3, [pc, #184]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea26:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800ea2e:	4b2b      	ldr	r3, [pc, #172]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea34:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800ea3c:	4b27      	ldr	r3, [pc, #156]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea42:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800ea4a:	4b24      	ldr	r3, [pc, #144]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea50:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800ea58:	4b20      	ldr	r3, [pc, #128]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea5e:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800ea66:	4b1d      	ldr	r3, [pc, #116]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea6c:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800ea74:	4b19      	ldr	r3, [pc, #100]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea7a:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800ea82:	4b16      	ldr	r3, [pc, #88]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea88:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800ea92:	4b12      	ldr	r3, [pc, #72]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea94:	689b      	ldr	r3, [r3, #8]
 800ea96:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ea9a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800ea9c:	4b0f      	ldr	r3, [pc, #60]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eaa0:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	431a      	orrs	r2, r3
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800eaac:	4b0b      	ldr	r3, [pc, #44]	@ (800eadc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800eaae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eab2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d103      	bne.n	800eac2 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2200      	movs	r2, #0
 800eabe:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800eac0:	e003      	b.n	800eaca <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800eac8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800eaca:	bf00      	nop
 800eacc:	3714      	adds	r7, #20
 800eace:	46bd      	mov	sp, r7
 800ead0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead4:	4770      	bx	lr
 800ead6:	bf00      	nop
 800ead8:	00fffff1 	.word	0x00fffff1
 800eadc:	40023800 	.word	0x40023800

0800eae0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b087      	sub	sp, #28
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800eae8:	2300      	movs	r3, #0
 800eaea:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800eaec:	2300      	movs	r3, #0
 800eaee:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800eafe:	f040 808d 	bne.w	800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800eb02:	4b93      	ldr	r3, [pc, #588]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eb04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eb08:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800eb10:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eb18:	d07c      	beq.n	800ec14 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eb20:	d87b      	bhi.n	800ec1a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d004      	beq.n	800eb32 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eb2e:	d039      	beq.n	800eba4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800eb30:	e073      	b.n	800ec1a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800eb32:	4b87      	ldr	r3, [pc, #540]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eb34:	685b      	ldr	r3, [r3, #4]
 800eb36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d108      	bne.n	800eb50 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800eb3e:	4b84      	ldr	r3, [pc, #528]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eb40:	685b      	ldr	r3, [r3, #4]
 800eb42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eb46:	4a83      	ldr	r2, [pc, #524]	@ (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800eb48:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb4c:	613b      	str	r3, [r7, #16]
 800eb4e:	e007      	b.n	800eb60 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800eb50:	4b7f      	ldr	r3, [pc, #508]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eb52:	685b      	ldr	r3, [r3, #4]
 800eb54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eb58:	4a7f      	ldr	r2, [pc, #508]	@ (800ed58 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800eb5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb5e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800eb60:	4b7b      	ldr	r3, [pc, #492]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eb62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eb66:	0e1b      	lsrs	r3, r3, #24
 800eb68:	f003 030f 	and.w	r3, r3, #15
 800eb6c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800eb6e:	4b78      	ldr	r3, [pc, #480]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eb70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eb74:	099b      	lsrs	r3, r3, #6
 800eb76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb7a:	693a      	ldr	r2, [r7, #16]
 800eb7c:	fb03 f202 	mul.w	r2, r3, r2
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb86:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800eb88:	4b71      	ldr	r3, [pc, #452]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eb8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eb8e:	0a1b      	lsrs	r3, r3, #8
 800eb90:	f003 031f 	and.w	r3, r3, #31
 800eb94:	3301      	adds	r3, #1
 800eb96:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800eb98:	697a      	ldr	r2, [r7, #20]
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800eba0:	617b      	str	r3, [r7, #20]
        break;
 800eba2:	e03b      	b.n	800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800eba4:	4b6a      	ldr	r3, [pc, #424]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eba6:	685b      	ldr	r3, [r3, #4]
 800eba8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d108      	bne.n	800ebc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800ebb0:	4b67      	ldr	r3, [pc, #412]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ebb2:	685b      	ldr	r3, [r3, #4]
 800ebb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ebb8:	4a66      	ldr	r2, [pc, #408]	@ (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800ebba:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebbe:	613b      	str	r3, [r7, #16]
 800ebc0:	e007      	b.n	800ebd2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ebc2:	4b63      	ldr	r3, [pc, #396]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ebc4:	685b      	ldr	r3, [r3, #4]
 800ebc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ebca:	4a63      	ldr	r2, [pc, #396]	@ (800ed58 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ebcc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebd0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800ebd2:	4b5f      	ldr	r3, [pc, #380]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ebd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ebd8:	0e1b      	lsrs	r3, r3, #24
 800ebda:	f003 030f 	and.w	r3, r3, #15
 800ebde:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800ebe0:	4b5b      	ldr	r3, [pc, #364]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ebe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ebe6:	099b      	lsrs	r3, r3, #6
 800ebe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebec:	693a      	ldr	r2, [r7, #16]
 800ebee:	fb03 f202 	mul.w	r2, r3, r2
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebf8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800ebfa:	4b55      	ldr	r3, [pc, #340]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ebfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ec00:	f003 031f 	and.w	r3, r3, #31
 800ec04:	3301      	adds	r3, #1
 800ec06:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ec08:	697a      	ldr	r2, [r7, #20]
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec10:	617b      	str	r3, [r7, #20]
        break;
 800ec12:	e003      	b.n	800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800ec14:	4b51      	ldr	r3, [pc, #324]	@ (800ed5c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800ec16:	617b      	str	r3, [r7, #20]
        break;
 800ec18:	e000      	b.n	800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800ec1a:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ec22:	f040 808d 	bne.w	800ed40 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800ec26:	4b4a      	ldr	r3, [pc, #296]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ec28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ec2c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800ec34:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800ec36:	68bb      	ldr	r3, [r7, #8]
 800ec38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ec3c:	d07c      	beq.n	800ed38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ec44:	d87b      	bhi.n	800ed3e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d004      	beq.n	800ec56 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800ec4c:	68bb      	ldr	r3, [r7, #8]
 800ec4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ec52:	d039      	beq.n	800ecc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800ec54:	e073      	b.n	800ed3e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ec56:	4b3e      	ldr	r3, [pc, #248]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ec58:	685b      	ldr	r3, [r3, #4]
 800ec5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d108      	bne.n	800ec74 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800ec62:	4b3b      	ldr	r3, [pc, #236]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ec64:	685b      	ldr	r3, [r3, #4]
 800ec66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ec6a:	4a3a      	ldr	r2, [pc, #232]	@ (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800ec6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec70:	613b      	str	r3, [r7, #16]
 800ec72:	e007      	b.n	800ec84 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ec74:	4b36      	ldr	r3, [pc, #216]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ec7c:	4a36      	ldr	r2, [pc, #216]	@ (800ed58 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ec7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec82:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800ec84:	4b32      	ldr	r3, [pc, #200]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ec86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ec8a:	0e1b      	lsrs	r3, r3, #24
 800ec8c:	f003 030f 	and.w	r3, r3, #15
 800ec90:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800ec92:	4b2f      	ldr	r3, [pc, #188]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ec94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ec98:	099b      	lsrs	r3, r3, #6
 800ec9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec9e:	693a      	ldr	r2, [r7, #16]
 800eca0:	fb03 f202 	mul.w	r2, r3, r2
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecaa:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800ecac:	4b28      	ldr	r3, [pc, #160]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ecae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ecb2:	0a1b      	lsrs	r3, r3, #8
 800ecb4:	f003 031f 	and.w	r3, r3, #31
 800ecb8:	3301      	adds	r3, #1
 800ecba:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ecbc:	697a      	ldr	r2, [r7, #20]
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecc4:	617b      	str	r3, [r7, #20]
        break;
 800ecc6:	e03b      	b.n	800ed40 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ecc8:	4b21      	ldr	r3, [pc, #132]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ecca:	685b      	ldr	r3, [r3, #4]
 800eccc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d108      	bne.n	800ece6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800ecd4:	4b1e      	ldr	r3, [pc, #120]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ecd6:	685b      	ldr	r3, [r3, #4]
 800ecd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ecdc:	4a1d      	ldr	r2, [pc, #116]	@ (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800ecde:	fbb2 f3f3 	udiv	r3, r2, r3
 800ece2:	613b      	str	r3, [r7, #16]
 800ece4:	e007      	b.n	800ecf6 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ece6:	4b1a      	ldr	r3, [pc, #104]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ece8:	685b      	ldr	r3, [r3, #4]
 800ecea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ecee:	4a1a      	ldr	r2, [pc, #104]	@ (800ed58 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ecf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecf4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800ecf6:	4b16      	ldr	r3, [pc, #88]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ecf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ecfc:	0e1b      	lsrs	r3, r3, #24
 800ecfe:	f003 030f 	and.w	r3, r3, #15
 800ed02:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800ed04:	4b12      	ldr	r3, [pc, #72]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ed06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ed0a:	099b      	lsrs	r3, r3, #6
 800ed0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed10:	693a      	ldr	r2, [r7, #16]
 800ed12:	fb03 f202 	mul.w	r2, r3, r2
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed1c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800ed1e:	4b0c      	ldr	r3, [pc, #48]	@ (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ed20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ed24:	f003 031f 	and.w	r3, r3, #31
 800ed28:	3301      	adds	r3, #1
 800ed2a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ed2c:	697a      	ldr	r2, [r7, #20]
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed34:	617b      	str	r3, [r7, #20]
        break;
 800ed36:	e003      	b.n	800ed40 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800ed38:	4b08      	ldr	r3, [pc, #32]	@ (800ed5c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800ed3a:	617b      	str	r3, [r7, #20]
        break;
 800ed3c:	e000      	b.n	800ed40 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800ed3e:	bf00      	nop
      }
    }
  }

  return frequency;
 800ed40:	697b      	ldr	r3, [r7, #20]
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	371c      	adds	r7, #28
 800ed46:	46bd      	mov	sp, r7
 800ed48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4c:	4770      	bx	lr
 800ed4e:	bf00      	nop
 800ed50:	40023800 	.word	0x40023800
 800ed54:	00f42400 	.word	0x00f42400
 800ed58:	017d7840 	.word	0x017d7840
 800ed5c:	00bb8000 	.word	0x00bb8000

0800ed60 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b088      	sub	sp, #32
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800ed70:	2300      	movs	r3, #0
 800ed72:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d101      	bne.n	800ed7e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	e156      	b.n	800f02c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800ed84:	b2db      	uxtb	r3, r3
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d106      	bne.n	800ed98 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f7f9 fd42 	bl	800881c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2202      	movs	r2, #2
 800ed9c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800eda0:	6878      	ldr	r0, [r7, #4]
 800eda2:	f000 fa85 	bl	800f2b0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	68db      	ldr	r3, [r3, #12]
 800edaa:	2b02      	cmp	r3, #2
 800edac:	d00c      	beq.n	800edc8 <HAL_SAI_Init+0x68>
 800edae:	2b02      	cmp	r3, #2
 800edb0:	d80d      	bhi.n	800edce <HAL_SAI_Init+0x6e>
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d002      	beq.n	800edbc <HAL_SAI_Init+0x5c>
 800edb6:	2b01      	cmp	r3, #1
 800edb8:	d003      	beq.n	800edc2 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800edba:	e008      	b.n	800edce <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800edbc:	2300      	movs	r3, #0
 800edbe:	61fb      	str	r3, [r7, #28]
      break;
 800edc0:	e006      	b.n	800edd0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800edc2:	2310      	movs	r3, #16
 800edc4:	61fb      	str	r3, [r7, #28]
      break;
 800edc6:	e003      	b.n	800edd0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800edc8:	2320      	movs	r3, #32
 800edca:	61fb      	str	r3, [r7, #28]
      break;
 800edcc:	e000      	b.n	800edd0 <HAL_SAI_Init+0x70>
      break;
 800edce:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	689b      	ldr	r3, [r3, #8]
 800edd4:	2b03      	cmp	r3, #3
 800edd6:	d81e      	bhi.n	800ee16 <HAL_SAI_Init+0xb6>
 800edd8:	a201      	add	r2, pc, #4	@ (adr r2, 800ede0 <HAL_SAI_Init+0x80>)
 800edda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edde:	bf00      	nop
 800ede0:	0800edf1 	.word	0x0800edf1
 800ede4:	0800edf7 	.word	0x0800edf7
 800ede8:	0800edff 	.word	0x0800edff
 800edec:	0800ee07 	.word	0x0800ee07
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800edf0:	2300      	movs	r3, #0
 800edf2:	617b      	str	r3, [r7, #20]
    }
    break;
 800edf4:	e010      	b.n	800ee18 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800edf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800edfa:	617b      	str	r3, [r7, #20]
    }
    break;
 800edfc:	e00c      	b.n	800ee18 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800edfe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ee02:	617b      	str	r3, [r7, #20]
    }
    break;
 800ee04:	e008      	b.n	800ee18 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ee06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ee0a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	f043 0301 	orr.w	r3, r3, #1
 800ee12:	61fb      	str	r3, [r7, #28]
    }
    break;
 800ee14:	e000      	b.n	800ee18 <HAL_SAI_Init+0xb8>
    default:
      break;
 800ee16:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	4a85      	ldr	r2, [pc, #532]	@ (800f034 <HAL_SAI_Init+0x2d4>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	d004      	beq.n	800ee2c <HAL_SAI_Init+0xcc>
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	4a84      	ldr	r2, [pc, #528]	@ (800f038 <HAL_SAI_Init+0x2d8>)
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	d103      	bne.n	800ee34 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800ee2c:	4a83      	ldr	r2, [pc, #524]	@ (800f03c <HAL_SAI_Init+0x2dc>)
 800ee2e:	69fb      	ldr	r3, [r7, #28]
 800ee30:	6013      	str	r3, [r2, #0]
 800ee32:	e002      	b.n	800ee3a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800ee34:	4a82      	ldr	r2, [pc, #520]	@ (800f040 <HAL_SAI_Init+0x2e0>)
 800ee36:	69fb      	ldr	r3, [r7, #28]
 800ee38:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	69db      	ldr	r3, [r3, #28]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d04c      	beq.n	800eedc <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800ee42:	2300      	movs	r3, #0
 800ee44:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	4a7a      	ldr	r2, [pc, #488]	@ (800f034 <HAL_SAI_Init+0x2d4>)
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	d004      	beq.n	800ee5a <HAL_SAI_Init+0xfa>
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	4a78      	ldr	r2, [pc, #480]	@ (800f038 <HAL_SAI_Init+0x2d8>)
 800ee56:	4293      	cmp	r3, r2
 800ee58:	d104      	bne.n	800ee64 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ee5a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800ee5e:	f7ff fe3f 	bl	800eae0 <HAL_RCCEx_GetPeriphCLKFreq>
 800ee62:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	4a76      	ldr	r2, [pc, #472]	@ (800f044 <HAL_SAI_Init+0x2e4>)
 800ee6a:	4293      	cmp	r3, r2
 800ee6c:	d004      	beq.n	800ee78 <HAL_SAI_Init+0x118>
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	4a75      	ldr	r2, [pc, #468]	@ (800f048 <HAL_SAI_Init+0x2e8>)
 800ee74:	4293      	cmp	r3, r2
 800ee76:	d104      	bne.n	800ee82 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800ee78:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800ee7c:	f7ff fe30 	bl	800eae0 <HAL_RCCEx_GetPeriphCLKFreq>
 800ee80:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800ee82:	693a      	ldr	r2, [r7, #16]
 800ee84:	4613      	mov	r3, r2
 800ee86:	009b      	lsls	r3, r3, #2
 800ee88:	4413      	add	r3, r2
 800ee8a:	005b      	lsls	r3, r3, #1
 800ee8c:	461a      	mov	r2, r3
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	69db      	ldr	r3, [r3, #28]
 800ee92:	025b      	lsls	r3, r3, #9
 800ee94:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee98:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	4a6b      	ldr	r2, [pc, #428]	@ (800f04c <HAL_SAI_Init+0x2ec>)
 800ee9e:	fba2 2303 	umull	r2, r3, r2, r3
 800eea2:	08da      	lsrs	r2, r3, #3
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800eea8:	68f9      	ldr	r1, [r7, #12]
 800eeaa:	4b68      	ldr	r3, [pc, #416]	@ (800f04c <HAL_SAI_Init+0x2ec>)
 800eeac:	fba3 2301 	umull	r2, r3, r3, r1
 800eeb0:	08da      	lsrs	r2, r3, #3
 800eeb2:	4613      	mov	r3, r2
 800eeb4:	009b      	lsls	r3, r3, #2
 800eeb6:	4413      	add	r3, r2
 800eeb8:	005b      	lsls	r3, r3, #1
 800eeba:	1aca      	subs	r2, r1, r3
 800eebc:	2a08      	cmp	r2, #8
 800eebe:	d904      	bls.n	800eeca <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	6a1b      	ldr	r3, [r3, #32]
 800eec4:	1c5a      	adds	r2, r3, #1
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eece:	2b04      	cmp	r3, #4
 800eed0:	d104      	bne.n	800eedc <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6a1b      	ldr	r3, [r3, #32]
 800eed6:	085a      	lsrs	r2, r3, #1
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	685b      	ldr	r3, [r3, #4]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d003      	beq.n	800eeec <HAL_SAI_Init+0x18c>
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	685b      	ldr	r3, [r3, #4]
 800eee8:	2b02      	cmp	r3, #2
 800eeea:	d109      	bne.n	800ef00 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eef0:	2b01      	cmp	r3, #1
 800eef2:	d101      	bne.n	800eef8 <HAL_SAI_Init+0x198>
 800eef4:	2300      	movs	r3, #0
 800eef6:	e001      	b.n	800eefc <HAL_SAI_Init+0x19c>
 800eef8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eefc:	61bb      	str	r3, [r7, #24]
 800eefe:	e008      	b.n	800ef12 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef04:	2b01      	cmp	r3, #1
 800ef06:	d102      	bne.n	800ef0e <HAL_SAI_Init+0x1ae>
 800ef08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ef0c:	e000      	b.n	800ef10 <HAL_SAI_Init+0x1b0>
 800ef0e:	2300      	movs	r3, #0
 800ef10:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	6819      	ldr	r1, [r3, #0]
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681a      	ldr	r2, [r3, #0]
 800ef1c:	4b4c      	ldr	r3, [pc, #304]	@ (800f050 <HAL_SAI_Init+0x2f0>)
 800ef1e:	400b      	ands	r3, r1
 800ef20:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	6819      	ldr	r1, [r3, #0]
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	685a      	ldr	r2, [r3, #4]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef30:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ef36:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef3c:	431a      	orrs	r2, r3
 800ef3e:	69bb      	ldr	r3, [r7, #24]
 800ef40:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800ef42:	697b      	ldr	r3, [r7, #20]
 800ef44:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800ef4a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	691b      	ldr	r3, [r3, #16]
 800ef50:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ef56:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	6a1b      	ldr	r3, [r3, #32]
 800ef5c:	051b      	lsls	r3, r3, #20
 800ef5e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	430a      	orrs	r2, r1
 800ef66:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	6859      	ldr	r1, [r3, #4]
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681a      	ldr	r2, [r3, #0]
 800ef72:	4b38      	ldr	r3, [pc, #224]	@ (800f054 <HAL_SAI_Init+0x2f4>)
 800ef74:	400b      	ands	r3, r1
 800ef76:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	6859      	ldr	r1, [r3, #4]
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	699a      	ldr	r2, [r3, #24]
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef86:	431a      	orrs	r2, r3
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef8c:	431a      	orrs	r2, r3
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	430a      	orrs	r2, r1
 800ef94:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	6899      	ldr	r1, [r3, #8]
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681a      	ldr	r2, [r3, #0]
 800efa0:	4b2d      	ldr	r3, [pc, #180]	@ (800f058 <HAL_SAI_Init+0x2f8>)
 800efa2:	400b      	ands	r3, r1
 800efa4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	6899      	ldr	r1, [r3, #8]
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efb0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800efb6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800efbc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800efc2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efc8:	3b01      	subs	r3, #1
 800efca:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800efcc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	430a      	orrs	r2, r1
 800efd4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	68d9      	ldr	r1, [r3, #12]
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681a      	ldr	r2, [r3, #0]
 800efe0:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800efe4:	400b      	ands	r3, r1
 800efe6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	68d9      	ldr	r1, [r3, #12]
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eff6:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800effc:	041b      	lsls	r3, r3, #16
 800effe:	431a      	orrs	r2, r3
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f004:	3b01      	subs	r3, #1
 800f006:	021b      	lsls	r3, r3, #8
 800f008:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	430a      	orrs	r2, r1
 800f010:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2200      	movs	r2, #0
 800f016:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2201      	movs	r2, #1
 800f01e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	2200      	movs	r2, #0
 800f026:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800f02a:	2300      	movs	r3, #0
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	3720      	adds	r7, #32
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}
 800f034:	40015804 	.word	0x40015804
 800f038:	40015824 	.word	0x40015824
 800f03c:	40015800 	.word	0x40015800
 800f040:	40015c00 	.word	0x40015c00
 800f044:	40015c04 	.word	0x40015c04
 800f048:	40015c24 	.word	0x40015c24
 800f04c:	cccccccd 	.word	0xcccccccd
 800f050:	ff05c010 	.word	0xff05c010
 800f054:	ffff1ff0 	.word	0xffff1ff0
 800f058:	fff88000 	.word	0xfff88000

0800f05c <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b082      	sub	sp, #8
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d101      	bne.n	800f06e <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800f06a:	2301      	movs	r3, #1
 800f06c:	e027      	b.n	800f0be <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2202      	movs	r2, #2
 800f072:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	2200      	movs	r2, #0
 800f07c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	f04f 32ff 	mov.w	r2, #4294967295
 800f086:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f000 f911 	bl	800f2b0 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	685a      	ldr	r2, [r3, #4]
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	f042 0208 	orr.w	r2, r2, #8
 800f09c:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f7f9 fc9a 	bl	80089d8 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800f0bc:	2300      	movs	r3, #0
}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	3708      	adds	r7, #8
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}
	...

0800f0c8 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b086      	sub	sp, #24
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	60f8      	str	r0, [r7, #12]
 800f0d0:	60b9      	str	r1, [r7, #8]
 800f0d2:	4613      	mov	r3, r2
 800f0d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800f0d6:	f7fb fb43 	bl	800a760 <HAL_GetTick>
 800f0da:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d002      	beq.n	800f0e8 <HAL_SAI_Transmit_DMA+0x20>
 800f0e2:	88fb      	ldrh	r3, [r7, #6]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d101      	bne.n	800f0ec <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	e093      	b.n	800f214 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f0f2:	b2db      	uxtb	r3, r3
 800f0f4:	2b01      	cmp	r3, #1
 800f0f6:	f040 808c 	bne.w	800f212 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800f100:	2b01      	cmp	r3, #1
 800f102:	d101      	bne.n	800f108 <HAL_SAI_Transmit_DMA+0x40>
 800f104:	2302      	movs	r3, #2
 800f106:	e085      	b.n	800f214 <HAL_SAI_Transmit_DMA+0x14c>
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	2201      	movs	r2, #1
 800f10c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	68ba      	ldr	r2, [r7, #8]
 800f114:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	88fa      	ldrh	r2, [r7, #6]
 800f11a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	88fa      	ldrh	r2, [r7, #6]
 800f122:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	2200      	movs	r2, #0
 800f12a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	2212      	movs	r2, #18
 800f132:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f13a:	4a38      	ldr	r2, [pc, #224]	@ (800f21c <HAL_SAI_Transmit_DMA+0x154>)
 800f13c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f142:	4a37      	ldr	r2, [pc, #220]	@ (800f220 <HAL_SAI_Transmit_DMA+0x158>)
 800f144:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f14a:	4a36      	ldr	r2, [pc, #216]	@ (800f224 <HAL_SAI_Transmit_DMA+0x15c>)
 800f14c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f152:	2200      	movs	r2, #0
 800f154:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f15e:	4619      	mov	r1, r3
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	331c      	adds	r3, #28
 800f166:	461a      	mov	r2, r3
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f16e:	f7fc f90f 	bl	800b390 <HAL_DMA_Start_IT>
 800f172:	4603      	mov	r3, r0
 800f174:	2b00      	cmp	r3, #0
 800f176:	d005      	beq.n	800f184 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	2200      	movs	r2, #0
 800f17c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 800f180:	2301      	movs	r3, #1
 800f182:	e047      	b.n	800f214 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f184:	2100      	movs	r1, #0
 800f186:	68f8      	ldr	r0, [r7, #12]
 800f188:	f000 f85c 	bl	800f244 <SAI_InterruptFlag>
 800f18c:	4601      	mov	r1, r0
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	691a      	ldr	r2, [r3, #16]
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	430a      	orrs	r2, r1
 800f19a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	681a      	ldr	r2, [r3, #0]
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800f1aa:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f1ac:	e015      	b.n	800f1da <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800f1ae:	f7fb fad7 	bl	800a760 <HAL_GetTick>
 800f1b2:	4602      	mov	r2, r0
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	1ad3      	subs	r3, r2, r3
 800f1b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f1bc:	d90d      	bls.n	800f1da <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f1c4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800f1d6:	2303      	movs	r3, #3
 800f1d8:	e01c      	b.n	800f214 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	695b      	ldr	r3, [r3, #20]
 800f1e0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d0e2      	beq.n	800f1ae <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d107      	bne.n	800f206 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	681a      	ldr	r2, [r3, #0]
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800f204:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	2200      	movs	r2, #0
 800f20a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800f20e:	2300      	movs	r3, #0
 800f210:	e000      	b.n	800f214 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800f212:	2302      	movs	r3, #2
  }
}
 800f214:	4618      	mov	r0, r3
 800f216:	3718      	adds	r7, #24
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}
 800f21c:	0800f381 	.word	0x0800f381
 800f220:	0800f321 	.word	0x0800f321
 800f224:	0800f39d 	.word	0x0800f39d

0800f228 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 800f228:	b480      	push	{r7}
 800f22a:	b083      	sub	sp, #12
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f236:	b2db      	uxtb	r3, r3
}
 800f238:	4618      	mov	r0, r3
 800f23a:	370c      	adds	r7, #12
 800f23c:	46bd      	mov	sp, r7
 800f23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f242:	4770      	bx	lr

0800f244 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800f244:	b480      	push	{r7}
 800f246:	b085      	sub	sp, #20
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
 800f24c:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800f24e:	2301      	movs	r3, #1
 800f250:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	2b01      	cmp	r3, #1
 800f256:	d103      	bne.n	800f260 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	f043 0308 	orr.w	r3, r3, #8
 800f25e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f264:	2b08      	cmp	r3, #8
 800f266:	d10b      	bne.n	800f280 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f26c:	2b03      	cmp	r3, #3
 800f26e:	d003      	beq.n	800f278 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	685b      	ldr	r3, [r3, #4]
 800f274:	2b01      	cmp	r3, #1
 800f276:	d103      	bne.n	800f280 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	f043 0310 	orr.w	r3, r3, #16
 800f27e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	2b03      	cmp	r3, #3
 800f286:	d003      	beq.n	800f290 <SAI_InterruptFlag+0x4c>
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	685b      	ldr	r3, [r3, #4]
 800f28c:	2b02      	cmp	r3, #2
 800f28e:	d104      	bne.n	800f29a <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800f296:	60fb      	str	r3, [r7, #12]
 800f298:	e003      	b.n	800f2a2 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	f043 0304 	orr.w	r3, r3, #4
 800f2a0:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3714      	adds	r7, #20
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ae:	4770      	bx	lr

0800f2b0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b085      	sub	sp, #20
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800f2b8:	4b17      	ldr	r3, [pc, #92]	@ (800f318 <SAI_Disable+0x68>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	4a17      	ldr	r2, [pc, #92]	@ (800f31c <SAI_Disable+0x6c>)
 800f2be:	fba2 2303 	umull	r2, r3, r2, r3
 800f2c2:	0b1b      	lsrs	r3, r3, #12
 800f2c4:	009b      	lsls	r3, r3, #2
 800f2c6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	681a      	ldr	r2, [r3, #0]
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800f2da:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	1e5a      	subs	r2, r3, #1
 800f2e0:	60fa      	str	r2, [r7, #12]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d10a      	bne.n	800f2fc <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800f2f6:	2303      	movs	r3, #3
 800f2f8:	72fb      	strb	r3, [r7, #11]
      break;
 800f2fa:	e006      	b.n	800f30a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f306:	2b00      	cmp	r3, #0
 800f308:	d1e8      	bne.n	800f2dc <SAI_Disable+0x2c>

  return status;
 800f30a:	7afb      	ldrb	r3, [r7, #11]
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	3714      	adds	r7, #20
 800f310:	46bd      	mov	sp, r7
 800f312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f316:	4770      	bx	lr
 800f318:	20000054 	.word	0x20000054
 800f31c:	95cbec1b 	.word	0x95cbec1b

0800f320 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b084      	sub	sp, #16
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f32c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	69db      	ldr	r3, [r3, #28]
 800f332:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f336:	d01c      	beq.n	800f372 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	2200      	movs	r2, #0
 800f33c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	681a      	ldr	r2, [r3, #0]
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f34e:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f350:	2100      	movs	r1, #0
 800f352:	68f8      	ldr	r0, [r7, #12]
 800f354:	f7ff ff76 	bl	800f244 <SAI_InterruptFlag>
 800f358:	4603      	mov	r3, r0
 800f35a:	43d9      	mvns	r1, r3
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	691a      	ldr	r2, [r3, #16]
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	400a      	ands	r2, r1
 800f368:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	2201      	movs	r2, #1
 800f36e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800f372:	68f8      	ldr	r0, [r7, #12]
 800f374:	f7f7 f816 	bl	80063a4 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f378:	bf00      	nop
 800f37a:	3710      	adds	r7, #16
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}

0800f380 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b084      	sub	sp, #16
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f38c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800f38e:	68f8      	ldr	r0, [r7, #12]
 800f390:	f7f7 f812 	bl	80063b8 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f394:	bf00      	nop
 800f396:	3710      	adds	r7, #16
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}

0800f39c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b084      	sub	sp, #16
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3a8:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f3b0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f3be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d004      	beq.n	800f3ce <SAI_DMAError+0x32>
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f3c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3ca:	2b01      	cmp	r3, #1
 800f3cc:	d112      	bne.n	800f3f4 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	681a      	ldr	r2, [r3, #0]
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f3dc:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800f3de:	68f8      	ldr	r0, [r7, #12]
 800f3e0:	f7ff ff66 	bl	800f2b0 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	2201      	movs	r2, #1
 800f3e8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800f3f4:	68f8      	ldr	r0, [r7, #12]
 800f3f6:	f7f6 ffe9 	bl	80063cc <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f3fa:	bf00      	nop
 800f3fc:	3710      	adds	r7, #16
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}

0800f402 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800f402:	b580      	push	{r7, lr}
 800f404:	b082      	sub	sp, #8
 800f406:	af00      	add	r7, sp, #0
 800f408:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d101      	bne.n	800f414 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800f410:	2301      	movs	r3, #1
 800f412:	e022      	b.n	800f45a <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f41a:	b2db      	uxtb	r3, r3
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d105      	bne.n	800f42c <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2200      	movs	r2, #0
 800f424:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	f7f8 ffe0 	bl	80083ec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2203      	movs	r2, #3
 800f430:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f000 f815 	bl	800f464 <HAL_SD_InitCard>
 800f43a:	4603      	mov	r3, r0
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d001      	beq.n	800f444 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800f440:	2301      	movs	r3, #1
 800f442:	e00a      	b.n	800f45a <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2200      	movs	r2, #0
 800f448:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2200      	movs	r2, #0
 800f44e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2201      	movs	r2, #1
 800f454:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800f458:	2300      	movs	r3, #0
}
 800f45a:	4618      	mov	r0, r3
 800f45c:	3708      	adds	r7, #8
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}
	...

0800f464 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f464:	b5b0      	push	{r4, r5, r7, lr}
 800f466:	b08e      	sub	sp, #56	@ 0x38
 800f468:	af04      	add	r7, sp, #16
 800f46a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800f46c:	2300      	movs	r3, #0
 800f46e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800f470:	2300      	movs	r3, #0
 800f472:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800f474:	2300      	movs	r3, #0
 800f476:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800f478:	2300      	movs	r3, #0
 800f47a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800f47c:	2300      	movs	r3, #0
 800f47e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800f480:	2376      	movs	r3, #118	@ 0x76
 800f482:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681d      	ldr	r5, [r3, #0]
 800f488:	466c      	mov	r4, sp
 800f48a:	f107 0314 	add.w	r3, r7, #20
 800f48e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f492:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f496:	f107 0308 	add.w	r3, r7, #8
 800f49a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f49c:	4628      	mov	r0, r5
 800f49e:	f002 f99d 	bl	80117dc <SDMMC_Init>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800f4a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d001      	beq.n	800f4b4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	e059      	b.n	800f568 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	685a      	ldr	r2, [r3, #4]
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800f4c2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f002 f9d1 	bl	8011870 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	685a      	ldr	r2, [r3, #4]
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f4dc:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800f4de:	2002      	movs	r0, #2
 800f4e0:	f7fb f94a 	bl	800a778 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f000 ff59 	bl	801039c <SD_PowerON>
 800f4ea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f4ec:	6a3b      	ldr	r3, [r7, #32]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d00b      	beq.n	800f50a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2201      	movs	r2, #1
 800f4f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f4fe:	6a3b      	ldr	r3, [r7, #32]
 800f500:	431a      	orrs	r2, r3
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800f506:	2301      	movs	r3, #1
 800f508:	e02e      	b.n	800f568 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f000 fe78 	bl	8010200 <SD_InitCard>
 800f510:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f512:	6a3b      	ldr	r3, [r7, #32]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d00b      	beq.n	800f530 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2201      	movs	r2, #1
 800f51c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f524:	6a3b      	ldr	r3, [r7, #32]
 800f526:	431a      	orrs	r2, r3
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800f52c:	2301      	movs	r3, #1
 800f52e:	e01b      	b.n	800f568 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f538:	4618      	mov	r0, r3
 800f53a:	f002 fa2b 	bl	8011994 <SDMMC_CmdBlockLength>
 800f53e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f540:	6a3b      	ldr	r3, [r7, #32]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d00f      	beq.n	800f566 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	4a09      	ldr	r2, [pc, #36]	@ (800f570 <HAL_SD_InitCard+0x10c>)
 800f54c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f552:	6a3b      	ldr	r3, [r7, #32]
 800f554:	431a      	orrs	r2, r3
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	2201      	movs	r2, #1
 800f55e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800f562:	2301      	movs	r3, #1
 800f564:	e000      	b.n	800f568 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800f566:	2300      	movs	r3, #0
}
 800f568:	4618      	mov	r0, r3
 800f56a:	3728      	adds	r7, #40	@ 0x28
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bdb0      	pop	{r4, r5, r7, pc}
 800f570:	004005ff 	.word	0x004005ff

0800f574 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b08c      	sub	sp, #48	@ 0x30
 800f578:	af00      	add	r7, sp, #0
 800f57a:	60f8      	str	r0, [r7, #12]
 800f57c:	60b9      	str	r1, [r7, #8]
 800f57e:	607a      	str	r2, [r7, #4]
 800f580:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d107      	bne.n	800f59c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f590:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800f598:	2301      	movs	r3, #1
 800f59a:	e0c3      	b.n	800f724 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f5a2:	b2db      	uxtb	r3, r3
 800f5a4:	2b01      	cmp	r3, #1
 800f5a6:	f040 80bc 	bne.w	800f722 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800f5b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	441a      	add	r2, r3
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d907      	bls.n	800f5ce <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5c2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	e0aa      	b.n	800f724 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	2203      	movs	r2, #3
 800f5d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800f5ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5f2:	4a4e      	ldr	r2, [pc, #312]	@ (800f72c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800f5f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5fa:	4a4d      	ldr	r2, [pc, #308]	@ (800f730 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800f5fc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f602:	2200      	movs	r2, #0
 800f604:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f60a:	2200      	movs	r2, #0
 800f60c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f61e:	689a      	ldr	r2, [r3, #8]
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	430a      	orrs	r2, r1
 800f628:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	3380      	adds	r3, #128	@ 0x80
 800f634:	4619      	mov	r1, r3
 800f636:	68ba      	ldr	r2, [r7, #8]
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	025b      	lsls	r3, r3, #9
 800f63c:	089b      	lsrs	r3, r3, #2
 800f63e:	f7fb fea7 	bl	800b390 <HAL_DMA_Start_IT>
 800f642:	4603      	mov	r3, r0
 800f644:	2b00      	cmp	r3, #0
 800f646:	d017      	beq.n	800f678 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800f656:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	4a35      	ldr	r2, [pc, #212]	@ (800f734 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800f65e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f664:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2201      	movs	r2, #1
 800f670:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800f674:	2301      	movs	r3, #1
 800f676:	e055      	b.n	800f724 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	f042 0208 	orr.w	r2, r2, #8
 800f686:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f68c:	2b01      	cmp	r3, #1
 800f68e:	d002      	beq.n	800f696 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800f690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f692:	025b      	lsls	r3, r3, #9
 800f694:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f696:	f04f 33ff 	mov.w	r3, #4294967295
 800f69a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	025b      	lsls	r3, r3, #9
 800f6a0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800f6a2:	2390      	movs	r3, #144	@ 0x90
 800f6a4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f6a6:	2302      	movs	r3, #2
 800f6a8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	f107 0210 	add.w	r2, r7, #16
 800f6ba:	4611      	mov	r1, r2
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f002 f93d 	bl	801193c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	d90a      	bls.n	800f6de <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	2282      	movs	r2, #130	@ 0x82
 800f6cc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f002 f9a1 	bl	8011a1c <SDMMC_CmdReadMultiBlock>
 800f6da:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800f6dc:	e009      	b.n	800f6f2 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	2281      	movs	r2, #129	@ 0x81
 800f6e2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f002 f974 	bl	80119d8 <SDMMC_CmdReadSingleBlock>
 800f6f0:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800f6f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d012      	beq.n	800f71e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	4a0d      	ldr	r2, [pc, #52]	@ (800f734 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800f6fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f706:	431a      	orrs	r2, r3
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	2201      	movs	r2, #1
 800f710:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	2200      	movs	r2, #0
 800f718:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800f71a:	2301      	movs	r3, #1
 800f71c:	e002      	b.n	800f724 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800f71e:	2300      	movs	r3, #0
 800f720:	e000      	b.n	800f724 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800f722:	2302      	movs	r3, #2
  }
}
 800f724:	4618      	mov	r0, r3
 800f726:	3730      	adds	r7, #48	@ 0x30
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}
 800f72c:	0801000f 	.word	0x0801000f
 800f730:	08010081 	.word	0x08010081
 800f734:	004005ff 	.word	0x004005ff

0800f738 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b08c      	sub	sp, #48	@ 0x30
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	60f8      	str	r0, [r7, #12]
 800f740:	60b9      	str	r1, [r7, #8]
 800f742:	607a      	str	r2, [r7, #4]
 800f744:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d107      	bne.n	800f760 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f754:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800f75c:	2301      	movs	r3, #1
 800f75e:	e0c6      	b.n	800f8ee <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f766:	b2db      	uxtb	r3, r3
 800f768:	2b01      	cmp	r3, #1
 800f76a:	f040 80bf 	bne.w	800f8ec <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	2200      	movs	r2, #0
 800f772:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800f774:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	441a      	add	r2, r3
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f77e:	429a      	cmp	r2, r3
 800f780:	d907      	bls.n	800f792 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f786:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800f78e:	2301      	movs	r3, #1
 800f790:	e0ad      	b.n	800f8ee <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	2203      	movs	r2, #3
 800f796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	f042 021a 	orr.w	r2, r2, #26
 800f7b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7b6:	4a50      	ldr	r2, [pc, #320]	@ (800f8f8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800f7b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7be:	4a4f      	ldr	r2, [pc, #316]	@ (800f8fc <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800f7c0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f7ce:	2b01      	cmp	r3, #1
 800f7d0:	d002      	beq.n	800f7d8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800f7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7d4:	025b      	lsls	r3, r3, #9
 800f7d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	2b01      	cmp	r3, #1
 800f7dc:	d90a      	bls.n	800f7f4 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	22a0      	movs	r2, #160	@ 0xa0
 800f7e2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f002 f95a 	bl	8011aa4 <SDMMC_CmdWriteMultiBlock>
 800f7f0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800f7f2:	e009      	b.n	800f808 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	2290      	movs	r2, #144	@ 0x90
 800f7f8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f800:	4618      	mov	r0, r3
 800f802:	f002 f92d 	bl	8011a60 <SDMMC_CmdWriteSingleBlock>
 800f806:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800f808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d012      	beq.n	800f834 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	4a3b      	ldr	r2, [pc, #236]	@ (800f900 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800f814:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f81a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f81c:	431a      	orrs	r2, r3
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	2201      	movs	r2, #1
 800f826:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	2200      	movs	r2, #0
 800f82e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800f830:	2301      	movs	r3, #1
 800f832:	e05c      	b.n	800f8ee <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	f042 0208 	orr.w	r2, r2, #8
 800f842:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f848:	2240      	movs	r2, #64	@ 0x40
 800f84a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f85c:	689a      	ldr	r2, [r3, #8]
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	430a      	orrs	r2, r1
 800f866:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800f86c:	68b9      	ldr	r1, [r7, #8]
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	3380      	adds	r3, #128	@ 0x80
 800f874:	461a      	mov	r2, r3
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	025b      	lsls	r3, r3, #9
 800f87a:	089b      	lsrs	r3, r3, #2
 800f87c:	f7fb fd88 	bl	800b390 <HAL_DMA_Start_IT>
 800f880:	4603      	mov	r3, r0
 800f882:	2b00      	cmp	r3, #0
 800f884:	d01a      	beq.n	800f8bc <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	f022 021a 	bic.w	r2, r2, #26
 800f894:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	4a19      	ldr	r2, [pc, #100]	@ (800f900 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800f89c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8a2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	2201      	movs	r2, #1
 800f8ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800f8b8:	2301      	movs	r3, #1
 800f8ba:	e018      	b.n	800f8ee <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f8bc:	f04f 33ff 	mov.w	r3, #4294967295
 800f8c0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	025b      	lsls	r3, r3, #9
 800f8c6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800f8c8:	2390      	movs	r3, #144	@ 0x90
 800f8ca:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800f8d4:	2301      	movs	r3, #1
 800f8d6:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	f107 0210 	add.w	r2, r7, #16
 800f8e0:	4611      	mov	r1, r2
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f002 f82a 	bl	801193c <SDMMC_ConfigData>

      return HAL_OK;
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	e000      	b.n	800f8ee <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800f8ec:	2302      	movs	r3, #2
  }
}
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	3730      	adds	r7, #48	@ 0x30
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}
 800f8f6:	bf00      	nop
 800f8f8:	0800ffe5 	.word	0x0800ffe5
 800f8fc:	08010081 	.word	0x08010081
 800f900:	004005ff 	.word	0x004005ff

0800f904 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b084      	sub	sp, #16
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f910:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f918:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d008      	beq.n	800f932 <HAL_SD_IRQHandler+0x2e>
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	f003 0308 	and.w	r3, r3, #8
 800f926:	2b00      	cmp	r3, #0
 800f928:	d003      	beq.n	800f932 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800f92a:	6878      	ldr	r0, [r7, #4]
 800f92c:	f000 fdec 	bl	8010508 <SD_Read_IT>
 800f930:	e15a      	b.n	800fbe8 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	f000 808d 	beq.w	800fa5c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f94a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681a      	ldr	r2, [r3, #0]
 800f956:	4b9a      	ldr	r3, [pc, #616]	@ (800fbc0 <HAL_SD_IRQHandler+0x2bc>)
 800f958:	400b      	ands	r3, r1
 800f95a:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	f022 0201 	bic.w	r2, r2, #1
 800f96a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	f003 0308 	and.w	r3, r3, #8
 800f972:	2b00      	cmp	r3, #0
 800f974:	d039      	beq.n	800f9ea <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	f003 0302 	and.w	r3, r3, #2
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d104      	bne.n	800f98a <HAL_SD_IRQHandler+0x86>
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	f003 0320 	and.w	r3, r3, #32
 800f986:	2b00      	cmp	r3, #0
 800f988:	d011      	beq.n	800f9ae <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	4618      	mov	r0, r3
 800f990:	f002 f8aa 	bl	8011ae8 <SDMMC_CmdStopTransfer>
 800f994:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d008      	beq.n	800f9ae <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	431a      	orrs	r2, r3
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f000 f921 	bl	800fbf0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	f240 523a 	movw	r2, #1338	@ 0x53a
 800f9b6:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2201      	movs	r2, #1
 800f9bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	f003 0301 	and.w	r3, r3, #1
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d104      	bne.n	800f9da <HAL_SD_IRQHandler+0xd6>
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	f003 0302 	and.w	r3, r3, #2
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d003      	beq.n	800f9e2 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f002 fcc8 	bl	8012370 <HAL_SD_RxCpltCallback>
 800f9e0:	e102      	b.n	800fbe8 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f002 fcba 	bl	801235c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800f9e8:	e0fe      	b.n	800fbe8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	f000 80f9 	beq.w	800fbe8 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	f003 0320 	and.w	r3, r3, #32
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d011      	beq.n	800fa24 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	4618      	mov	r0, r3
 800fa06:	f002 f86f 	bl	8011ae8 <SDMMC_CmdStopTransfer>
 800fa0a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d008      	beq.n	800fa24 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	431a      	orrs	r2, r3
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800fa1e:	6878      	ldr	r0, [r7, #4]
 800fa20:	f000 f8e6 	bl	800fbf0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	f003 0301 	and.w	r3, r3, #1
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	f040 80dc 	bne.w	800fbe8 <HAL_SD_IRQHandler+0x2e4>
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	f003 0302 	and.w	r3, r3, #2
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	f040 80d6 	bne.w	800fbe8 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	f022 0208 	bic.w	r2, r2, #8
 800fa4a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2201      	movs	r2, #1
 800fa50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	f002 fc81 	bl	801235c <HAL_SD_TxCpltCallback>
}
 800fa5a:	e0c5      	b.n	800fbe8 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d008      	beq.n	800fa7c <HAL_SD_IRQHandler+0x178>
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	f003 0308 	and.w	r3, r3, #8
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d003      	beq.n	800fa7c <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f000 fd98 	bl	80105aa <SD_Write_IT>
 800fa7a:	e0b5      	b.n	800fbe8 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa82:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	f000 80ae 	beq.w	800fbe8 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa92:	f003 0302 	and.w	r3, r3, #2
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d005      	beq.n	800faa6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa9e:	f043 0202 	orr.w	r2, r3, #2
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800faac:	f003 0308 	and.w	r3, r3, #8
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d005      	beq.n	800fac0 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fab8:	f043 0208 	orr.w	r2, r3, #8
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fac6:	f003 0320 	and.w	r3, r3, #32
 800faca:	2b00      	cmp	r3, #0
 800facc:	d005      	beq.n	800fada <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fad2:	f043 0220 	orr.w	r2, r3, #32
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fae0:	f003 0310 	and.w	r3, r3, #16
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d005      	beq.n	800faf4 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faec:	f043 0210 	orr.w	r2, r3, #16
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	f240 523a 	movw	r2, #1338	@ 0x53a
 800fafc:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800fb0c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	4618      	mov	r0, r3
 800fb14:	f001 ffe8 	bl	8011ae8 <SDMMC_CmdStopTransfer>
 800fb18:	4602      	mov	r2, r0
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb1e:	431a      	orrs	r2, r3
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	f003 0308 	and.w	r3, r3, #8
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d00a      	beq.n	800fb44 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2201      	movs	r2, #1
 800fb32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2200      	movs	r2, #0
 800fb3a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f000 f857 	bl	800fbf0 <HAL_SD_ErrorCallback>
}
 800fb42:	e051      	b.n	800fbe8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d04c      	beq.n	800fbe8 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	f003 0310 	and.w	r3, r3, #16
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d104      	bne.n	800fb62 <HAL_SD_IRQHandler+0x25e>
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	f003 0320 	and.w	r3, r3, #32
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d011      	beq.n	800fb86 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb66:	4a17      	ldr	r2, [pc, #92]	@ (800fbc4 <HAL_SD_IRQHandler+0x2c0>)
 800fb68:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb6e:	4618      	mov	r0, r3
 800fb70:	f7fb fc6e 	bl	800b450 <HAL_DMA_Abort_IT>
 800fb74:	4603      	mov	r3, r0
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d036      	beq.n	800fbe8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f000 fad0 	bl	8010124 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800fb84:	e030      	b.n	800fbe8 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	f003 0301 	and.w	r3, r3, #1
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d104      	bne.n	800fb9a <HAL_SD_IRQHandler+0x296>
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	f003 0302 	and.w	r3, r3, #2
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d018      	beq.n	800fbcc <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb9e:	4a0a      	ldr	r2, [pc, #40]	@ (800fbc8 <HAL_SD_IRQHandler+0x2c4>)
 800fba0:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fba6:	4618      	mov	r0, r3
 800fba8:	f7fb fc52 	bl	800b450 <HAL_DMA_Abort_IT>
 800fbac:	4603      	mov	r3, r0
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d01a      	beq.n	800fbe8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f000 faeb 	bl	8010192 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800fbbc:	e014      	b.n	800fbe8 <HAL_SD_IRQHandler+0x2e4>
 800fbbe:	bf00      	nop
 800fbc0:	ffff3ec5 	.word	0xffff3ec5
 800fbc4:	08010125 	.word	0x08010125
 800fbc8:	08010193 	.word	0x08010193
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2200      	movs	r2, #0
 800fbd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2201      	movs	r2, #1
 800fbd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2200      	movs	r2, #0
 800fbde:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f002 fbb1 	bl	8012348 <HAL_SD_AbortCallback>
}
 800fbe6:	e7ff      	b.n	800fbe8 <HAL_SD_IRQHandler+0x2e4>
 800fbe8:	bf00      	nop
 800fbea:	3710      	adds	r7, #16
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd80      	pop	{r7, pc}

0800fbf0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800fbf0:	b480      	push	{r7}
 800fbf2:	b083      	sub	sp, #12
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800fbf8:	bf00      	nop
 800fbfa:	370c      	adds	r7, #12
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc02:	4770      	bx	lr

0800fc04 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800fc04:	b480      	push	{r7}
 800fc06:	b083      	sub	sp, #12
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
 800fc0c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fc12:	0f9b      	lsrs	r3, r3, #30
 800fc14:	b2da      	uxtb	r2, r3
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fc1e:	0e9b      	lsrs	r3, r3, #26
 800fc20:	b2db      	uxtb	r3, r3
 800fc22:	f003 030f 	and.w	r3, r3, #15
 800fc26:	b2da      	uxtb	r2, r3
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fc30:	0e1b      	lsrs	r3, r3, #24
 800fc32:	b2db      	uxtb	r3, r3
 800fc34:	f003 0303 	and.w	r3, r3, #3
 800fc38:	b2da      	uxtb	r2, r3
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fc42:	0c1b      	lsrs	r3, r3, #16
 800fc44:	b2da      	uxtb	r2, r3
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fc4e:	0a1b      	lsrs	r3, r3, #8
 800fc50:	b2da      	uxtb	r2, r3
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fc5a:	b2da      	uxtb	r2, r3
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fc64:	0d1b      	lsrs	r3, r3, #20
 800fc66:	b29a      	uxth	r2, r3
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fc70:	0c1b      	lsrs	r3, r3, #16
 800fc72:	b2db      	uxtb	r3, r3
 800fc74:	f003 030f 	and.w	r3, r3, #15
 800fc78:	b2da      	uxtb	r2, r3
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fc82:	0bdb      	lsrs	r3, r3, #15
 800fc84:	b2db      	uxtb	r3, r3
 800fc86:	f003 0301 	and.w	r3, r3, #1
 800fc8a:	b2da      	uxtb	r2, r3
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fc94:	0b9b      	lsrs	r3, r3, #14
 800fc96:	b2db      	uxtb	r3, r3
 800fc98:	f003 0301 	and.w	r3, r3, #1
 800fc9c:	b2da      	uxtb	r2, r3
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fca6:	0b5b      	lsrs	r3, r3, #13
 800fca8:	b2db      	uxtb	r3, r3
 800fcaa:	f003 0301 	and.w	r3, r3, #1
 800fcae:	b2da      	uxtb	r2, r3
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fcb8:	0b1b      	lsrs	r3, r3, #12
 800fcba:	b2db      	uxtb	r3, r3
 800fcbc:	f003 0301 	and.w	r3, r3, #1
 800fcc0:	b2da      	uxtb	r2, r3
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	2200      	movs	r2, #0
 800fcca:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d163      	bne.n	800fd9c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fcd8:	009a      	lsls	r2, r3, #2
 800fcda:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800fcde:	4013      	ands	r3, r2
 800fce0:	687a      	ldr	r2, [r7, #4]
 800fce2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800fce4:	0f92      	lsrs	r2, r2, #30
 800fce6:	431a      	orrs	r2, r3
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fcf0:	0edb      	lsrs	r3, r3, #27
 800fcf2:	b2db      	uxtb	r3, r3
 800fcf4:	f003 0307 	and.w	r3, r3, #7
 800fcf8:	b2da      	uxtb	r2, r3
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd02:	0e1b      	lsrs	r3, r3, #24
 800fd04:	b2db      	uxtb	r3, r3
 800fd06:	f003 0307 	and.w	r3, r3, #7
 800fd0a:	b2da      	uxtb	r2, r3
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd14:	0d5b      	lsrs	r3, r3, #21
 800fd16:	b2db      	uxtb	r3, r3
 800fd18:	f003 0307 	and.w	r3, r3, #7
 800fd1c:	b2da      	uxtb	r2, r3
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd26:	0c9b      	lsrs	r3, r3, #18
 800fd28:	b2db      	uxtb	r3, r3
 800fd2a:	f003 0307 	and.w	r3, r3, #7
 800fd2e:	b2da      	uxtb	r2, r3
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd38:	0bdb      	lsrs	r3, r3, #15
 800fd3a:	b2db      	uxtb	r3, r3
 800fd3c:	f003 0307 	and.w	r3, r3, #7
 800fd40:	b2da      	uxtb	r2, r3
 800fd42:	683b      	ldr	r3, [r7, #0]
 800fd44:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	691b      	ldr	r3, [r3, #16]
 800fd4a:	1c5a      	adds	r2, r3, #1
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	7e1b      	ldrb	r3, [r3, #24]
 800fd54:	b2db      	uxtb	r3, r3
 800fd56:	f003 0307 	and.w	r3, r3, #7
 800fd5a:	3302      	adds	r3, #2
 800fd5c:	2201      	movs	r2, #1
 800fd5e:	fa02 f303 	lsl.w	r3, r2, r3
 800fd62:	687a      	ldr	r2, [r7, #4]
 800fd64:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800fd66:	fb03 f202 	mul.w	r2, r3, r2
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800fd6e:	683b      	ldr	r3, [r7, #0]
 800fd70:	7a1b      	ldrb	r3, [r3, #8]
 800fd72:	b2db      	uxtb	r3, r3
 800fd74:	f003 030f 	and.w	r3, r3, #15
 800fd78:	2201      	movs	r2, #1
 800fd7a:	409a      	lsls	r2, r3
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd84:	687a      	ldr	r2, [r7, #4]
 800fd86:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800fd88:	0a52      	lsrs	r2, r2, #9
 800fd8a:	fb03 f202 	mul.w	r2, r3, r2
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fd98:	661a      	str	r2, [r3, #96]	@ 0x60
 800fd9a:	e031      	b.n	800fe00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fda0:	2b01      	cmp	r3, #1
 800fda2:	d11d      	bne.n	800fde0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fda8:	041b      	lsls	r3, r3, #16
 800fdaa:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fdb2:	0c1b      	lsrs	r3, r3, #16
 800fdb4:	431a      	orrs	r2, r3
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	691b      	ldr	r3, [r3, #16]
 800fdbe:	3301      	adds	r3, #1
 800fdc0:	029a      	lsls	r2, r3, #10
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fdd4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	661a      	str	r2, [r3, #96]	@ 0x60
 800fdde:	e00f      	b.n	800fe00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	4a58      	ldr	r2, [pc, #352]	@ (800ff48 <HAL_SD_GetCardCSD+0x344>)
 800fde6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	e09d      	b.n	800ff3c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe04:	0b9b      	lsrs	r3, r3, #14
 800fe06:	b2db      	uxtb	r3, r3
 800fe08:	f003 0301 	and.w	r3, r3, #1
 800fe0c:	b2da      	uxtb	r2, r3
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe16:	09db      	lsrs	r3, r3, #7
 800fe18:	b2db      	uxtb	r3, r3
 800fe1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe1e:	b2da      	uxtb	r2, r3
 800fe20:	683b      	ldr	r3, [r7, #0]
 800fe22:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe28:	b2db      	uxtb	r3, r3
 800fe2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe2e:	b2da      	uxtb	r2, r3
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe38:	0fdb      	lsrs	r3, r3, #31
 800fe3a:	b2da      	uxtb	r2, r3
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe44:	0f5b      	lsrs	r3, r3, #29
 800fe46:	b2db      	uxtb	r3, r3
 800fe48:	f003 0303 	and.w	r3, r3, #3
 800fe4c:	b2da      	uxtb	r2, r3
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe56:	0e9b      	lsrs	r3, r3, #26
 800fe58:	b2db      	uxtb	r3, r3
 800fe5a:	f003 0307 	and.w	r3, r3, #7
 800fe5e:	b2da      	uxtb	r2, r3
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe68:	0d9b      	lsrs	r3, r3, #22
 800fe6a:	b2db      	uxtb	r3, r3
 800fe6c:	f003 030f 	and.w	r3, r3, #15
 800fe70:	b2da      	uxtb	r2, r3
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe7a:	0d5b      	lsrs	r3, r3, #21
 800fe7c:	b2db      	uxtb	r3, r3
 800fe7e:	f003 0301 	and.w	r3, r3, #1
 800fe82:	b2da      	uxtb	r2, r3
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe96:	0c1b      	lsrs	r3, r3, #16
 800fe98:	b2db      	uxtb	r3, r3
 800fe9a:	f003 0301 	and.w	r3, r3, #1
 800fe9e:	b2da      	uxtb	r2, r3
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800feaa:	0bdb      	lsrs	r3, r3, #15
 800feac:	b2db      	uxtb	r3, r3
 800feae:	f003 0301 	and.w	r3, r3, #1
 800feb2:	b2da      	uxtb	r2, r3
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800febe:	0b9b      	lsrs	r3, r3, #14
 800fec0:	b2db      	uxtb	r3, r3
 800fec2:	f003 0301 	and.w	r3, r3, #1
 800fec6:	b2da      	uxtb	r2, r3
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fed2:	0b5b      	lsrs	r3, r3, #13
 800fed4:	b2db      	uxtb	r3, r3
 800fed6:	f003 0301 	and.w	r3, r3, #1
 800feda:	b2da      	uxtb	r2, r3
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fee6:	0b1b      	lsrs	r3, r3, #12
 800fee8:	b2db      	uxtb	r3, r3
 800feea:	f003 0301 	and.w	r3, r3, #1
 800feee:	b2da      	uxtb	r2, r3
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fefa:	0a9b      	lsrs	r3, r3, #10
 800fefc:	b2db      	uxtb	r3, r3
 800fefe:	f003 0303 	and.w	r3, r3, #3
 800ff02:	b2da      	uxtb	r2, r3
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff0e:	0a1b      	lsrs	r3, r3, #8
 800ff10:	b2db      	uxtb	r3, r3
 800ff12:	f003 0303 	and.w	r3, r3, #3
 800ff16:	b2da      	uxtb	r2, r3
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff22:	085b      	lsrs	r3, r3, #1
 800ff24:	b2db      	uxtb	r3, r3
 800ff26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff2a:	b2da      	uxtb	r2, r3
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	2201      	movs	r2, #1
 800ff36:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800ff3a:	2300      	movs	r3, #0
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	370c      	adds	r7, #12
 800ff40:	46bd      	mov	sp, r7
 800ff42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff46:	4770      	bx	lr
 800ff48:	004005ff 	.word	0x004005ff

0800ff4c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b083      	sub	sp, #12
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ff96:	2300      	movs	r3, #0
}
 800ff98:	4618      	mov	r0, r3
 800ff9a:	370c      	adds	r7, #12
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa2:	4770      	bx	lr

0800ffa4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b086      	sub	sp, #24
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ffac:	2300      	movs	r3, #0
 800ffae:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ffb0:	f107 030c 	add.w	r3, r7, #12
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f000 fa7e 	bl	80104b8 <SD_SendStatus>
 800ffbc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ffbe:	697b      	ldr	r3, [r7, #20]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d005      	beq.n	800ffd0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	431a      	orrs	r2, r3
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	0a5b      	lsrs	r3, r3, #9
 800ffd4:	f003 030f 	and.w	r3, r3, #15
 800ffd8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ffda:	693b      	ldr	r3, [r7, #16]
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3718      	adds	r7, #24
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}

0800ffe4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ffe4:	b480      	push	{r7}
 800ffe6:	b085      	sub	sp, #20
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fff0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010000:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8010002:	bf00      	nop
 8010004:	3714      	adds	r7, #20
 8010006:	46bd      	mov	sp, r7
 8010008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000c:	4770      	bx	lr

0801000e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801000e:	b580      	push	{r7, lr}
 8010010:	b084      	sub	sp, #16
 8010012:	af00      	add	r7, sp, #0
 8010014:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801001a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010020:	2b82      	cmp	r3, #130	@ 0x82
 8010022:	d111      	bne.n	8010048 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	4618      	mov	r0, r3
 801002a:	f001 fd5d 	bl	8011ae8 <SDMMC_CmdStopTransfer>
 801002e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d008      	beq.n	8010048 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	431a      	orrs	r2, r3
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8010042:	68f8      	ldr	r0, [r7, #12]
 8010044:	f7ff fdd4 	bl	800fbf0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	f022 0208 	bic.w	r2, r2, #8
 8010056:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8010060:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	2201      	movs	r2, #1
 8010066:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	2200      	movs	r2, #0
 801006e:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8010070:	68f8      	ldr	r0, [r7, #12]
 8010072:	f002 f97d 	bl	8012370 <HAL_SD_RxCpltCallback>
#endif
}
 8010076:	bf00      	nop
 8010078:	3710      	adds	r7, #16
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}
	...

08010080 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b086      	sub	sp, #24
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801008c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f7fb fb8a 	bl	800b7a8 <HAL_DMA_GetError>
 8010094:	4603      	mov	r3, r0
 8010096:	2b02      	cmp	r3, #2
 8010098:	d03e      	beq.n	8010118 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801009e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80100a0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80100a8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80100aa:	693b      	ldr	r3, [r7, #16]
 80100ac:	2b01      	cmp	r3, #1
 80100ae:	d002      	beq.n	80100b6 <SD_DMAError+0x36>
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	2b01      	cmp	r3, #1
 80100b4:	d12d      	bne.n	8010112 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	4a19      	ldr	r2, [pc, #100]	@ (8010120 <SD_DMAError+0xa0>)
 80100bc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80100be:	697b      	ldr	r3, [r7, #20]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80100c4:	697b      	ldr	r3, [r7, #20]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80100cc:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100d2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80100da:	6978      	ldr	r0, [r7, #20]
 80100dc:	f7ff ff62 	bl	800ffa4 <HAL_SD_GetCardState>
 80100e0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80100e2:	68bb      	ldr	r3, [r7, #8]
 80100e4:	2b06      	cmp	r3, #6
 80100e6:	d002      	beq.n	80100ee <SD_DMAError+0x6e>
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	2b05      	cmp	r3, #5
 80100ec:	d10a      	bne.n	8010104 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	4618      	mov	r0, r3
 80100f4:	f001 fcf8 	bl	8011ae8 <SDMMC_CmdStopTransfer>
 80100f8:	4602      	mov	r2, r0
 80100fa:	697b      	ldr	r3, [r7, #20]
 80100fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100fe:	431a      	orrs	r2, r3
 8010100:	697b      	ldr	r3, [r7, #20]
 8010102:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	2201      	movs	r2, #1
 8010108:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	2200      	movs	r2, #0
 8010110:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8010112:	6978      	ldr	r0, [r7, #20]
 8010114:	f7ff fd6c 	bl	800fbf0 <HAL_SD_ErrorCallback>
#endif
  }
}
 8010118:	bf00      	nop
 801011a:	3718      	adds	r7, #24
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}
 8010120:	004005ff 	.word	0x004005ff

08010124 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b084      	sub	sp, #16
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010130:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	f240 523a 	movw	r2, #1338	@ 0x53a
 801013a:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 801013c:	68f8      	ldr	r0, [r7, #12]
 801013e:	f7ff ff31 	bl	800ffa4 <HAL_SD_GetCardState>
 8010142:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	2201      	movs	r2, #1
 8010148:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	2200      	movs	r2, #0
 8010150:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	2b06      	cmp	r3, #6
 8010156:	d002      	beq.n	801015e <SD_DMATxAbort+0x3a>
 8010158:	68bb      	ldr	r3, [r7, #8]
 801015a:	2b05      	cmp	r3, #5
 801015c:	d10a      	bne.n	8010174 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	4618      	mov	r0, r3
 8010164:	f001 fcc0 	bl	8011ae8 <SDMMC_CmdStopTransfer>
 8010168:	4602      	mov	r2, r0
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801016e:	431a      	orrs	r2, r3
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010178:	2b00      	cmp	r3, #0
 801017a:	d103      	bne.n	8010184 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 801017c:	68f8      	ldr	r0, [r7, #12]
 801017e:	f002 f8e3 	bl	8012348 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8010182:	e002      	b.n	801018a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8010184:	68f8      	ldr	r0, [r7, #12]
 8010186:	f7ff fd33 	bl	800fbf0 <HAL_SD_ErrorCallback>
}
 801018a:	bf00      	nop
 801018c:	3710      	adds	r7, #16
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}

08010192 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8010192:	b580      	push	{r7, lr}
 8010194:	b084      	sub	sp, #16
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801019e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	f240 523a 	movw	r2, #1338	@ 0x53a
 80101a8:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80101aa:	68f8      	ldr	r0, [r7, #12]
 80101ac:	f7ff fefa 	bl	800ffa4 <HAL_SD_GetCardState>
 80101b0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	2201      	movs	r2, #1
 80101b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	2200      	movs	r2, #0
 80101be:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	2b06      	cmp	r3, #6
 80101c4:	d002      	beq.n	80101cc <SD_DMARxAbort+0x3a>
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	2b05      	cmp	r3, #5
 80101ca:	d10a      	bne.n	80101e2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	4618      	mov	r0, r3
 80101d2:	f001 fc89 	bl	8011ae8 <SDMMC_CmdStopTransfer>
 80101d6:	4602      	mov	r2, r0
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101dc:	431a      	orrs	r2, r3
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d103      	bne.n	80101f2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80101ea:	68f8      	ldr	r0, [r7, #12]
 80101ec:	f002 f8ac 	bl	8012348 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80101f0:	e002      	b.n	80101f8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80101f2:	68f8      	ldr	r0, [r7, #12]
 80101f4:	f7ff fcfc 	bl	800fbf0 <HAL_SD_ErrorCallback>
}
 80101f8:	bf00      	nop
 80101fa:	3710      	adds	r7, #16
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}

08010200 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8010200:	b5b0      	push	{r4, r5, r7, lr}
 8010202:	b094      	sub	sp, #80	@ 0x50
 8010204:	af04      	add	r7, sp, #16
 8010206:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8010208:	2301      	movs	r3, #1
 801020a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	4618      	mov	r0, r3
 8010212:	f001 fb3b 	bl	801188c <SDMMC_GetPowerState>
 8010216:	4603      	mov	r3, r0
 8010218:	2b00      	cmp	r3, #0
 801021a:	d102      	bne.n	8010222 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801021c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8010220:	e0b8      	b.n	8010394 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010226:	2b03      	cmp	r3, #3
 8010228:	d02f      	beq.n	801028a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	4618      	mov	r0, r3
 8010230:	f001 fd22 	bl	8011c78 <SDMMC_CmdSendCID>
 8010234:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8010236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010238:	2b00      	cmp	r3, #0
 801023a:	d001      	beq.n	8010240 <SD_InitCard+0x40>
    {
      return errorstate;
 801023c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801023e:	e0a9      	b.n	8010394 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	2100      	movs	r1, #0
 8010246:	4618      	mov	r0, r3
 8010248:	f001 fb65 	bl	8011916 <SDMMC_GetResponse>
 801024c:	4602      	mov	r2, r0
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	2104      	movs	r1, #4
 8010258:	4618      	mov	r0, r3
 801025a:	f001 fb5c 	bl	8011916 <SDMMC_GetResponse>
 801025e:	4602      	mov	r2, r0
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	2108      	movs	r1, #8
 801026a:	4618      	mov	r0, r3
 801026c:	f001 fb53 	bl	8011916 <SDMMC_GetResponse>
 8010270:	4602      	mov	r2, r0
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	210c      	movs	r1, #12
 801027c:	4618      	mov	r0, r3
 801027e:	f001 fb4a 	bl	8011916 <SDMMC_GetResponse>
 8010282:	4602      	mov	r2, r0
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801028e:	2b03      	cmp	r3, #3
 8010290:	d00d      	beq.n	80102ae <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	f107 020e 	add.w	r2, r7, #14
 801029a:	4611      	mov	r1, r2
 801029c:	4618      	mov	r0, r3
 801029e:	f001 fd28 	bl	8011cf2 <SDMMC_CmdSetRelAdd>
 80102a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80102a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d001      	beq.n	80102ae <SD_InitCard+0xae>
    {
      return errorstate;
 80102aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102ac:	e072      	b.n	8010394 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102b2:	2b03      	cmp	r3, #3
 80102b4:	d036      	beq.n	8010324 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80102b6:	89fb      	ldrh	r3, [r7, #14]
 80102b8:	461a      	mov	r2, r3
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681a      	ldr	r2, [r3, #0]
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80102c6:	041b      	lsls	r3, r3, #16
 80102c8:	4619      	mov	r1, r3
 80102ca:	4610      	mov	r0, r2
 80102cc:	f001 fcf2 	bl	8011cb4 <SDMMC_CmdSendCSD>
 80102d0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80102d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d001      	beq.n	80102dc <SD_InitCard+0xdc>
    {
      return errorstate;
 80102d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102da:	e05b      	b.n	8010394 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	2100      	movs	r1, #0
 80102e2:	4618      	mov	r0, r3
 80102e4:	f001 fb17 	bl	8011916 <SDMMC_GetResponse>
 80102e8:	4602      	mov	r2, r0
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	2104      	movs	r1, #4
 80102f4:	4618      	mov	r0, r3
 80102f6:	f001 fb0e 	bl	8011916 <SDMMC_GetResponse>
 80102fa:	4602      	mov	r2, r0
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	2108      	movs	r1, #8
 8010306:	4618      	mov	r0, r3
 8010308:	f001 fb05 	bl	8011916 <SDMMC_GetResponse>
 801030c:	4602      	mov	r2, r0
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	210c      	movs	r1, #12
 8010318:	4618      	mov	r0, r3
 801031a:	f001 fafc 	bl	8011916 <SDMMC_GetResponse>
 801031e:	4602      	mov	r2, r0
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	2104      	movs	r1, #4
 801032a:	4618      	mov	r0, r3
 801032c:	f001 faf3 	bl	8011916 <SDMMC_GetResponse>
 8010330:	4603      	mov	r3, r0
 8010332:	0d1a      	lsrs	r2, r3, #20
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8010338:	f107 0310 	add.w	r3, r7, #16
 801033c:	4619      	mov	r1, r3
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	f7ff fc60 	bl	800fc04 <HAL_SD_GetCardCSD>
 8010344:	4603      	mov	r3, r0
 8010346:	2b00      	cmp	r3, #0
 8010348:	d002      	beq.n	8010350 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801034a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801034e:	e021      	b.n	8010394 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	6819      	ldr	r1, [r3, #0]
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010358:	041b      	lsls	r3, r3, #16
 801035a:	2200      	movs	r2, #0
 801035c:	461c      	mov	r4, r3
 801035e:	4615      	mov	r5, r2
 8010360:	4622      	mov	r2, r4
 8010362:	462b      	mov	r3, r5
 8010364:	4608      	mov	r0, r1
 8010366:	f001 fbe1 	bl	8011b2c <SDMMC_CmdSelDesel>
 801036a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 801036c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801036e:	2b00      	cmp	r3, #0
 8010370:	d001      	beq.n	8010376 <SD_InitCard+0x176>
  {
    return errorstate;
 8010372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010374:	e00e      	b.n	8010394 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	681d      	ldr	r5, [r3, #0]
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	466c      	mov	r4, sp
 801037e:	f103 0210 	add.w	r2, r3, #16
 8010382:	ca07      	ldmia	r2, {r0, r1, r2}
 8010384:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010388:	3304      	adds	r3, #4
 801038a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801038c:	4628      	mov	r0, r5
 801038e:	f001 fa25 	bl	80117dc <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8010392:	2300      	movs	r3, #0
}
 8010394:	4618      	mov	r0, r3
 8010396:	3740      	adds	r7, #64	@ 0x40
 8010398:	46bd      	mov	sp, r7
 801039a:	bdb0      	pop	{r4, r5, r7, pc}

0801039c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b086      	sub	sp, #24
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80103a4:	2300      	movs	r3, #0
 80103a6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80103a8:	2300      	movs	r3, #0
 80103aa:	617b      	str	r3, [r7, #20]
 80103ac:	2300      	movs	r3, #0
 80103ae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	4618      	mov	r0, r3
 80103b6:	f001 fbdc 	bl	8011b72 <SDMMC_CmdGoIdleState>
 80103ba:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d001      	beq.n	80103c6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	e072      	b.n	80104ac <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	4618      	mov	r0, r3
 80103cc:	f001 fbef 	bl	8011bae <SDMMC_CmdOperCond>
 80103d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d00d      	beq.n	80103f4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2200      	movs	r2, #0
 80103dc:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	4618      	mov	r0, r3
 80103e4:	f001 fbc5 	bl	8011b72 <SDMMC_CmdGoIdleState>
 80103e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d004      	beq.n	80103fa <SD_PowerON+0x5e>
    {
      return errorstate;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	e05b      	b.n	80104ac <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	2201      	movs	r2, #1
 80103f8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80103fe:	2b01      	cmp	r3, #1
 8010400:	d137      	bne.n	8010472 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	2100      	movs	r1, #0
 8010408:	4618      	mov	r0, r3
 801040a:	f001 fbef 	bl	8011bec <SDMMC_CmdAppCommand>
 801040e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d02d      	beq.n	8010472 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010416:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801041a:	e047      	b.n	80104ac <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	2100      	movs	r1, #0
 8010422:	4618      	mov	r0, r3
 8010424:	f001 fbe2 	bl	8011bec <SDMMC_CmdAppCommand>
 8010428:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d001      	beq.n	8010434 <SD_PowerON+0x98>
    {
      return errorstate;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	e03b      	b.n	80104ac <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	491e      	ldr	r1, [pc, #120]	@ (80104b4 <SD_PowerON+0x118>)
 801043a:	4618      	mov	r0, r3
 801043c:	f001 fbf8 	bl	8011c30 <SDMMC_CmdAppOperCommand>
 8010440:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d002      	beq.n	801044e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010448:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801044c:	e02e      	b.n	80104ac <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	2100      	movs	r1, #0
 8010454:	4618      	mov	r0, r3
 8010456:	f001 fa5e 	bl	8011916 <SDMMC_GetResponse>
 801045a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 801045c:	697b      	ldr	r3, [r7, #20]
 801045e:	0fdb      	lsrs	r3, r3, #31
 8010460:	2b01      	cmp	r3, #1
 8010462:	d101      	bne.n	8010468 <SD_PowerON+0xcc>
 8010464:	2301      	movs	r3, #1
 8010466:	e000      	b.n	801046a <SD_PowerON+0xce>
 8010468:	2300      	movs	r3, #0
 801046a:	613b      	str	r3, [r7, #16]

    count++;
 801046c:	68bb      	ldr	r3, [r7, #8]
 801046e:	3301      	adds	r3, #1
 8010470:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010478:	4293      	cmp	r3, r2
 801047a:	d802      	bhi.n	8010482 <SD_PowerON+0xe6>
 801047c:	693b      	ldr	r3, [r7, #16]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d0cc      	beq.n	801041c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010488:	4293      	cmp	r3, r2
 801048a:	d902      	bls.n	8010492 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 801048c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8010490:	e00c      	b.n	80104ac <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010498:	2b00      	cmp	r3, #0
 801049a:	d003      	beq.n	80104a4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2201      	movs	r2, #1
 80104a0:	645a      	str	r2, [r3, #68]	@ 0x44
 80104a2:	e002      	b.n	80104aa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2200      	movs	r2, #0
 80104a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80104aa:	2300      	movs	r3, #0
}
 80104ac:	4618      	mov	r0, r3
 80104ae:	3718      	adds	r7, #24
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}
 80104b4:	c1100000 	.word	0xc1100000

080104b8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b084      	sub	sp, #16
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
 80104c0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80104c2:	683b      	ldr	r3, [r7, #0]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d102      	bne.n	80104ce <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80104c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80104cc:	e018      	b.n	8010500 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	681a      	ldr	r2, [r3, #0]
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80104d6:	041b      	lsls	r3, r3, #16
 80104d8:	4619      	mov	r1, r3
 80104da:	4610      	mov	r0, r2
 80104dc:	f001 fc2a 	bl	8011d34 <SDMMC_CmdSendStatus>
 80104e0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d001      	beq.n	80104ec <SD_SendStatus+0x34>
  {
    return errorstate;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	e009      	b.n	8010500 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	2100      	movs	r1, #0
 80104f2:	4618      	mov	r0, r3
 80104f4:	f001 fa0f 	bl	8011916 <SDMMC_GetResponse>
 80104f8:	4602      	mov	r2, r0
 80104fa:	683b      	ldr	r3, [r7, #0]
 80104fc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80104fe:	2300      	movs	r3, #0
}
 8010500:	4618      	mov	r0, r3
 8010502:	3710      	adds	r7, #16
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}

08010508 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b086      	sub	sp, #24
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010514:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801051a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 801051c:	693b      	ldr	r3, [r7, #16]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d03f      	beq.n	80105a2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8010522:	2300      	movs	r3, #0
 8010524:	617b      	str	r3, [r7, #20]
 8010526:	e033      	b.n	8010590 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	4618      	mov	r0, r3
 801052e:	f001 f981 	bl	8011834 <SDMMC_ReadFIFO>
 8010532:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8010534:	68bb      	ldr	r3, [r7, #8]
 8010536:	b2da      	uxtb	r2, r3
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	3301      	adds	r3, #1
 8010540:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010542:	693b      	ldr	r3, [r7, #16]
 8010544:	3b01      	subs	r3, #1
 8010546:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	0a1b      	lsrs	r3, r3, #8
 801054c:	b2da      	uxtb	r2, r3
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	3301      	adds	r3, #1
 8010556:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010558:	693b      	ldr	r3, [r7, #16]
 801055a:	3b01      	subs	r3, #1
 801055c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	0c1b      	lsrs	r3, r3, #16
 8010562:	b2da      	uxtb	r2, r3
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	3301      	adds	r3, #1
 801056c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	3b01      	subs	r3, #1
 8010572:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	0e1b      	lsrs	r3, r3, #24
 8010578:	b2da      	uxtb	r2, r3
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	701a      	strb	r2, [r3, #0]
      tmp++;
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	3301      	adds	r3, #1
 8010582:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010584:	693b      	ldr	r3, [r7, #16]
 8010586:	3b01      	subs	r3, #1
 8010588:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 801058a:	697b      	ldr	r3, [r7, #20]
 801058c:	3301      	adds	r3, #1
 801058e:	617b      	str	r3, [r7, #20]
 8010590:	697b      	ldr	r3, [r7, #20]
 8010592:	2b07      	cmp	r3, #7
 8010594:	d9c8      	bls.n	8010528 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	68fa      	ldr	r2, [r7, #12]
 801059a:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	693a      	ldr	r2, [r7, #16]
 80105a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 80105a2:	bf00      	nop
 80105a4:	3718      	adds	r7, #24
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}

080105aa <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80105aa:	b580      	push	{r7, lr}
 80105ac:	b086      	sub	sp, #24
 80105ae:	af00      	add	r7, sp, #0
 80105b0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	6a1b      	ldr	r3, [r3, #32]
 80105b6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105bc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80105be:	693b      	ldr	r3, [r7, #16]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d043      	beq.n	801064c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80105c4:	2300      	movs	r3, #0
 80105c6:	617b      	str	r3, [r7, #20]
 80105c8:	e037      	b.n	801063a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	781b      	ldrb	r3, [r3, #0]
 80105ce:	60bb      	str	r3, [r7, #8]
      tmp++;
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	3301      	adds	r3, #1
 80105d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80105d6:	693b      	ldr	r3, [r7, #16]
 80105d8:	3b01      	subs	r3, #1
 80105da:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	781b      	ldrb	r3, [r3, #0]
 80105e0:	021a      	lsls	r2, r3, #8
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	4313      	orrs	r3, r2
 80105e6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	3301      	adds	r3, #1
 80105ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80105ee:	693b      	ldr	r3, [r7, #16]
 80105f0:	3b01      	subs	r3, #1
 80105f2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	041a      	lsls	r2, r3, #16
 80105fa:	68bb      	ldr	r3, [r7, #8]
 80105fc:	4313      	orrs	r3, r2
 80105fe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	3301      	adds	r3, #1
 8010604:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010606:	693b      	ldr	r3, [r7, #16]
 8010608:	3b01      	subs	r3, #1
 801060a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	781b      	ldrb	r3, [r3, #0]
 8010610:	061a      	lsls	r2, r3, #24
 8010612:	68bb      	ldr	r3, [r7, #8]
 8010614:	4313      	orrs	r3, r2
 8010616:	60bb      	str	r3, [r7, #8]
      tmp++;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	3301      	adds	r3, #1
 801061c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801061e:	693b      	ldr	r3, [r7, #16]
 8010620:	3b01      	subs	r3, #1
 8010622:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	f107 0208 	add.w	r2, r7, #8
 801062c:	4611      	mov	r1, r2
 801062e:	4618      	mov	r0, r3
 8010630:	f001 f90d 	bl	801184e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	3301      	adds	r3, #1
 8010638:	617b      	str	r3, [r7, #20]
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	2b07      	cmp	r3, #7
 801063e:	d9c4      	bls.n	80105ca <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	68fa      	ldr	r2, [r7, #12]
 8010644:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	693a      	ldr	r2, [r7, #16]
 801064a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 801064c:	bf00      	nop
 801064e:	3718      	adds	r7, #24
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}

08010654 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b082      	sub	sp, #8
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
 801065c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d101      	bne.n	8010668 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8010664:	2301      	movs	r3, #1
 8010666:	e025      	b.n	80106b4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801066e:	b2db      	uxtb	r3, r3
 8010670:	2b00      	cmp	r3, #0
 8010672:	d106      	bne.n	8010682 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	2200      	movs	r2, #0
 8010678:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f7f8 f8c3 	bl	8008808 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	2202      	movs	r2, #2
 8010686:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681a      	ldr	r2, [r3, #0]
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	3304      	adds	r3, #4
 8010692:	4619      	mov	r1, r3
 8010694:	4610      	mov	r0, r2
 8010696:	f000 ff9f 	bl	80115d8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	6818      	ldr	r0, [r3, #0]
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	685b      	ldr	r3, [r3, #4]
 80106a2:	461a      	mov	r2, r3
 80106a4:	6839      	ldr	r1, [r7, #0]
 80106a6:	f000 fff3 	bl	8011690 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	2201      	movs	r2, #1
 80106ae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80106b2:	2300      	movs	r3, #0
}
 80106b4:	4618      	mov	r0, r3
 80106b6:	3708      	adds	r7, #8
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}

080106bc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b086      	sub	sp, #24
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	60f8      	str	r0, [r7, #12]
 80106c4:	60b9      	str	r1, [r7, #8]
 80106c6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80106ce:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80106d0:	7dfb      	ldrb	r3, [r7, #23]
 80106d2:	2b02      	cmp	r3, #2
 80106d4:	d101      	bne.n	80106da <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80106d6:	2302      	movs	r3, #2
 80106d8:	e021      	b.n	801071e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80106da:	7dfb      	ldrb	r3, [r7, #23]
 80106dc:	2b01      	cmp	r3, #1
 80106de:	d002      	beq.n	80106e6 <HAL_SDRAM_SendCommand+0x2a>
 80106e0:	7dfb      	ldrb	r3, [r7, #23]
 80106e2:	2b05      	cmp	r3, #5
 80106e4:	d118      	bne.n	8010718 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	2202      	movs	r2, #2
 80106ea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	687a      	ldr	r2, [r7, #4]
 80106f4:	68b9      	ldr	r1, [r7, #8]
 80106f6:	4618      	mov	r0, r3
 80106f8:	f001 f834 	bl	8011764 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80106fc:	68bb      	ldr	r3, [r7, #8]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	2b02      	cmp	r3, #2
 8010702:	d104      	bne.n	801070e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	2205      	movs	r2, #5
 8010708:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801070c:	e006      	b.n	801071c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	2201      	movs	r2, #1
 8010712:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8010716:	e001      	b.n	801071c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8010718:	2301      	movs	r3, #1
 801071a:	e000      	b.n	801071e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 801071c:	2300      	movs	r3, #0
}
 801071e:	4618      	mov	r0, r3
 8010720:	3718      	adds	r7, #24
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}

08010726 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8010726:	b580      	push	{r7, lr}
 8010728:	b082      	sub	sp, #8
 801072a:	af00      	add	r7, sp, #0
 801072c:	6078      	str	r0, [r7, #4]
 801072e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010736:	b2db      	uxtb	r3, r3
 8010738:	2b02      	cmp	r3, #2
 801073a:	d101      	bne.n	8010740 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 801073c:	2302      	movs	r3, #2
 801073e:	e016      	b.n	801076e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010746:	b2db      	uxtb	r3, r3
 8010748:	2b01      	cmp	r3, #1
 801074a:	d10f      	bne.n	801076c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2202      	movs	r2, #2
 8010750:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	6839      	ldr	r1, [r7, #0]
 801075a:	4618      	mov	r0, r3
 801075c:	f001 f826 	bl	80117ac <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2201      	movs	r2, #1
 8010764:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8010768:	2300      	movs	r3, #0
 801076a:	e000      	b.n	801076e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 801076c:	2301      	movs	r3, #1
}
 801076e:	4618      	mov	r0, r3
 8010770:	3708      	adds	r7, #8
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}

08010776 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010776:	b580      	push	{r7, lr}
 8010778:	b082      	sub	sp, #8
 801077a:	af00      	add	r7, sp, #0
 801077c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d101      	bne.n	8010788 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010784:	2301      	movs	r3, #1
 8010786:	e049      	b.n	801081c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801078e:	b2db      	uxtb	r3, r3
 8010790:	2b00      	cmp	r3, #0
 8010792:	d106      	bne.n	80107a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	2200      	movs	r2, #0
 8010798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f000 f841 	bl	8010824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	2202      	movs	r2, #2
 80107a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	681a      	ldr	r2, [r3, #0]
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	3304      	adds	r3, #4
 80107b2:	4619      	mov	r1, r3
 80107b4:	4610      	mov	r0, r2
 80107b6:	f000 f9ff 	bl	8010bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	2201      	movs	r2, #1
 80107be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2201      	movs	r2, #1
 80107c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2201      	movs	r2, #1
 80107ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2201      	movs	r2, #1
 80107d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2201      	movs	r2, #1
 80107de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2201      	movs	r2, #1
 80107e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2201      	movs	r2, #1
 80107ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2201      	movs	r2, #1
 80107f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2201      	movs	r2, #1
 80107fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	2201      	movs	r2, #1
 8010806:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2201      	movs	r2, #1
 801080e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	2201      	movs	r2, #1
 8010816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801081a:	2300      	movs	r3, #0
}
 801081c:	4618      	mov	r0, r3
 801081e:	3708      	adds	r7, #8
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}

08010824 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8010824:	b480      	push	{r7}
 8010826:	b083      	sub	sp, #12
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801082c:	bf00      	nop
 801082e:	370c      	adds	r7, #12
 8010830:	46bd      	mov	sp, r7
 8010832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010836:	4770      	bx	lr

08010838 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010838:	b480      	push	{r7}
 801083a:	b085      	sub	sp, #20
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010846:	b2db      	uxtb	r3, r3
 8010848:	2b01      	cmp	r3, #1
 801084a:	d001      	beq.n	8010850 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801084c:	2301      	movs	r3, #1
 801084e:	e054      	b.n	80108fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2202      	movs	r2, #2
 8010854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	68da      	ldr	r2, [r3, #12]
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	f042 0201 	orr.w	r2, r2, #1
 8010866:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	4a26      	ldr	r2, [pc, #152]	@ (8010908 <HAL_TIM_Base_Start_IT+0xd0>)
 801086e:	4293      	cmp	r3, r2
 8010870:	d022      	beq.n	80108b8 <HAL_TIM_Base_Start_IT+0x80>
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801087a:	d01d      	beq.n	80108b8 <HAL_TIM_Base_Start_IT+0x80>
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	4a22      	ldr	r2, [pc, #136]	@ (801090c <HAL_TIM_Base_Start_IT+0xd4>)
 8010882:	4293      	cmp	r3, r2
 8010884:	d018      	beq.n	80108b8 <HAL_TIM_Base_Start_IT+0x80>
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	4a21      	ldr	r2, [pc, #132]	@ (8010910 <HAL_TIM_Base_Start_IT+0xd8>)
 801088c:	4293      	cmp	r3, r2
 801088e:	d013      	beq.n	80108b8 <HAL_TIM_Base_Start_IT+0x80>
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	4a1f      	ldr	r2, [pc, #124]	@ (8010914 <HAL_TIM_Base_Start_IT+0xdc>)
 8010896:	4293      	cmp	r3, r2
 8010898:	d00e      	beq.n	80108b8 <HAL_TIM_Base_Start_IT+0x80>
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	4a1e      	ldr	r2, [pc, #120]	@ (8010918 <HAL_TIM_Base_Start_IT+0xe0>)
 80108a0:	4293      	cmp	r3, r2
 80108a2:	d009      	beq.n	80108b8 <HAL_TIM_Base_Start_IT+0x80>
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	4a1c      	ldr	r2, [pc, #112]	@ (801091c <HAL_TIM_Base_Start_IT+0xe4>)
 80108aa:	4293      	cmp	r3, r2
 80108ac:	d004      	beq.n	80108b8 <HAL_TIM_Base_Start_IT+0x80>
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	4a1b      	ldr	r2, [pc, #108]	@ (8010920 <HAL_TIM_Base_Start_IT+0xe8>)
 80108b4:	4293      	cmp	r3, r2
 80108b6:	d115      	bne.n	80108e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	689a      	ldr	r2, [r3, #8]
 80108be:	4b19      	ldr	r3, [pc, #100]	@ (8010924 <HAL_TIM_Base_Start_IT+0xec>)
 80108c0:	4013      	ands	r3, r2
 80108c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	2b06      	cmp	r3, #6
 80108c8:	d015      	beq.n	80108f6 <HAL_TIM_Base_Start_IT+0xbe>
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80108d0:	d011      	beq.n	80108f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	681a      	ldr	r2, [r3, #0]
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	f042 0201 	orr.w	r2, r2, #1
 80108e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80108e2:	e008      	b.n	80108f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	681a      	ldr	r2, [r3, #0]
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	f042 0201 	orr.w	r2, r2, #1
 80108f2:	601a      	str	r2, [r3, #0]
 80108f4:	e000      	b.n	80108f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80108f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80108f8:	2300      	movs	r3, #0
}
 80108fa:	4618      	mov	r0, r3
 80108fc:	3714      	adds	r7, #20
 80108fe:	46bd      	mov	sp, r7
 8010900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010904:	4770      	bx	lr
 8010906:	bf00      	nop
 8010908:	40010000 	.word	0x40010000
 801090c:	40000400 	.word	0x40000400
 8010910:	40000800 	.word	0x40000800
 8010914:	40000c00 	.word	0x40000c00
 8010918:	40010400 	.word	0x40010400
 801091c:	40014000 	.word	0x40014000
 8010920:	40001800 	.word	0x40001800
 8010924:	00010007 	.word	0x00010007

08010928 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b082      	sub	sp, #8
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	691b      	ldr	r3, [r3, #16]
 8010936:	f003 0302 	and.w	r3, r3, #2
 801093a:	2b02      	cmp	r3, #2
 801093c:	d122      	bne.n	8010984 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	68db      	ldr	r3, [r3, #12]
 8010944:	f003 0302 	and.w	r3, r3, #2
 8010948:	2b02      	cmp	r3, #2
 801094a:	d11b      	bne.n	8010984 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	f06f 0202 	mvn.w	r2, #2
 8010954:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	2201      	movs	r2, #1
 801095a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	699b      	ldr	r3, [r3, #24]
 8010962:	f003 0303 	and.w	r3, r3, #3
 8010966:	2b00      	cmp	r3, #0
 8010968:	d003      	beq.n	8010972 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f000 f905 	bl	8010b7a <HAL_TIM_IC_CaptureCallback>
 8010970:	e005      	b.n	801097e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f000 f8f7 	bl	8010b66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010978:	6878      	ldr	r0, [r7, #4]
 801097a:	f000 f908 	bl	8010b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	2200      	movs	r2, #0
 8010982:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	691b      	ldr	r3, [r3, #16]
 801098a:	f003 0304 	and.w	r3, r3, #4
 801098e:	2b04      	cmp	r3, #4
 8010990:	d122      	bne.n	80109d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	68db      	ldr	r3, [r3, #12]
 8010998:	f003 0304 	and.w	r3, r3, #4
 801099c:	2b04      	cmp	r3, #4
 801099e:	d11b      	bne.n	80109d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	f06f 0204 	mvn.w	r2, #4
 80109a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2202      	movs	r2, #2
 80109ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	699b      	ldr	r3, [r3, #24]
 80109b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d003      	beq.n	80109c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80109be:	6878      	ldr	r0, [r7, #4]
 80109c0:	f000 f8db 	bl	8010b7a <HAL_TIM_IC_CaptureCallback>
 80109c4:	e005      	b.n	80109d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f000 f8cd 	bl	8010b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80109cc:	6878      	ldr	r0, [r7, #4]
 80109ce:	f000 f8de 	bl	8010b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2200      	movs	r2, #0
 80109d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	691b      	ldr	r3, [r3, #16]
 80109de:	f003 0308 	and.w	r3, r3, #8
 80109e2:	2b08      	cmp	r3, #8
 80109e4:	d122      	bne.n	8010a2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	68db      	ldr	r3, [r3, #12]
 80109ec:	f003 0308 	and.w	r3, r3, #8
 80109f0:	2b08      	cmp	r3, #8
 80109f2:	d11b      	bne.n	8010a2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	f06f 0208 	mvn.w	r2, #8
 80109fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2204      	movs	r2, #4
 8010a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	69db      	ldr	r3, [r3, #28]
 8010a0a:	f003 0303 	and.w	r3, r3, #3
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d003      	beq.n	8010a1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f000 f8b1 	bl	8010b7a <HAL_TIM_IC_CaptureCallback>
 8010a18:	e005      	b.n	8010a26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f000 f8a3 	bl	8010b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f000 f8b4 	bl	8010b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2200      	movs	r2, #0
 8010a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	691b      	ldr	r3, [r3, #16]
 8010a32:	f003 0310 	and.w	r3, r3, #16
 8010a36:	2b10      	cmp	r3, #16
 8010a38:	d122      	bne.n	8010a80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	68db      	ldr	r3, [r3, #12]
 8010a40:	f003 0310 	and.w	r3, r3, #16
 8010a44:	2b10      	cmp	r3, #16
 8010a46:	d11b      	bne.n	8010a80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	f06f 0210 	mvn.w	r2, #16
 8010a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2208      	movs	r2, #8
 8010a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	69db      	ldr	r3, [r3, #28]
 8010a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d003      	beq.n	8010a6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010a66:	6878      	ldr	r0, [r7, #4]
 8010a68:	f000 f887 	bl	8010b7a <HAL_TIM_IC_CaptureCallback>
 8010a6c:	e005      	b.n	8010a7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	f000 f879 	bl	8010b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010a74:	6878      	ldr	r0, [r7, #4]
 8010a76:	f000 f88a 	bl	8010b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	691b      	ldr	r3, [r3, #16]
 8010a86:	f003 0301 	and.w	r3, r3, #1
 8010a8a:	2b01      	cmp	r3, #1
 8010a8c:	d10e      	bne.n	8010aac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	68db      	ldr	r3, [r3, #12]
 8010a94:	f003 0301 	and.w	r3, r3, #1
 8010a98:	2b01      	cmp	r3, #1
 8010a9a:	d107      	bne.n	8010aac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	f06f 0201 	mvn.w	r2, #1
 8010aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010aa6:	6878      	ldr	r0, [r7, #4]
 8010aa8:	f7f5 f9ea 	bl	8005e80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	691b      	ldr	r3, [r3, #16]
 8010ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010ab6:	2b80      	cmp	r3, #128	@ 0x80
 8010ab8:	d10e      	bne.n	8010ad8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	68db      	ldr	r3, [r3, #12]
 8010ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010ac4:	2b80      	cmp	r3, #128	@ 0x80
 8010ac6:	d107      	bne.n	8010ad8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8010ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010ad2:	6878      	ldr	r0, [r7, #4]
 8010ad4:	f000 f91a 	bl	8010d0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	691b      	ldr	r3, [r3, #16]
 8010ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010ae2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010ae6:	d10e      	bne.n	8010b06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	68db      	ldr	r3, [r3, #12]
 8010aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010af2:	2b80      	cmp	r3, #128	@ 0x80
 8010af4:	d107      	bne.n	8010b06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8010afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010b00:	6878      	ldr	r0, [r7, #4]
 8010b02:	f000 f90d 	bl	8010d20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	691b      	ldr	r3, [r3, #16]
 8010b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010b10:	2b40      	cmp	r3, #64	@ 0x40
 8010b12:	d10e      	bne.n	8010b32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	68db      	ldr	r3, [r3, #12]
 8010b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010b1e:	2b40      	cmp	r3, #64	@ 0x40
 8010b20:	d107      	bne.n	8010b32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8010b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	f000 f838 	bl	8010ba2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	691b      	ldr	r3, [r3, #16]
 8010b38:	f003 0320 	and.w	r3, r3, #32
 8010b3c:	2b20      	cmp	r3, #32
 8010b3e:	d10e      	bne.n	8010b5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	68db      	ldr	r3, [r3, #12]
 8010b46:	f003 0320 	and.w	r3, r3, #32
 8010b4a:	2b20      	cmp	r3, #32
 8010b4c:	d107      	bne.n	8010b5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	f06f 0220 	mvn.w	r2, #32
 8010b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f000 f8cd 	bl	8010cf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010b5e:	bf00      	nop
 8010b60:	3708      	adds	r7, #8
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}

08010b66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010b66:	b480      	push	{r7}
 8010b68:	b083      	sub	sp, #12
 8010b6a:	af00      	add	r7, sp, #0
 8010b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010b6e:	bf00      	nop
 8010b70:	370c      	adds	r7, #12
 8010b72:	46bd      	mov	sp, r7
 8010b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b78:	4770      	bx	lr

08010b7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010b7a:	b480      	push	{r7}
 8010b7c:	b083      	sub	sp, #12
 8010b7e:	af00      	add	r7, sp, #0
 8010b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010b82:	bf00      	nop
 8010b84:	370c      	adds	r7, #12
 8010b86:	46bd      	mov	sp, r7
 8010b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8c:	4770      	bx	lr

08010b8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010b8e:	b480      	push	{r7}
 8010b90:	b083      	sub	sp, #12
 8010b92:	af00      	add	r7, sp, #0
 8010b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010b96:	bf00      	nop
 8010b98:	370c      	adds	r7, #12
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba0:	4770      	bx	lr

08010ba2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010ba2:	b480      	push	{r7}
 8010ba4:	b083      	sub	sp, #12
 8010ba6:	af00      	add	r7, sp, #0
 8010ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010baa:	bf00      	nop
 8010bac:	370c      	adds	r7, #12
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb4:	4770      	bx	lr
	...

08010bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010bb8:	b480      	push	{r7}
 8010bba:	b085      	sub	sp, #20
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
 8010bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	4a40      	ldr	r2, [pc, #256]	@ (8010ccc <TIM_Base_SetConfig+0x114>)
 8010bcc:	4293      	cmp	r3, r2
 8010bce:	d013      	beq.n	8010bf8 <TIM_Base_SetConfig+0x40>
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010bd6:	d00f      	beq.n	8010bf8 <TIM_Base_SetConfig+0x40>
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	4a3d      	ldr	r2, [pc, #244]	@ (8010cd0 <TIM_Base_SetConfig+0x118>)
 8010bdc:	4293      	cmp	r3, r2
 8010bde:	d00b      	beq.n	8010bf8 <TIM_Base_SetConfig+0x40>
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	4a3c      	ldr	r2, [pc, #240]	@ (8010cd4 <TIM_Base_SetConfig+0x11c>)
 8010be4:	4293      	cmp	r3, r2
 8010be6:	d007      	beq.n	8010bf8 <TIM_Base_SetConfig+0x40>
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	4a3b      	ldr	r2, [pc, #236]	@ (8010cd8 <TIM_Base_SetConfig+0x120>)
 8010bec:	4293      	cmp	r3, r2
 8010bee:	d003      	beq.n	8010bf8 <TIM_Base_SetConfig+0x40>
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	4a3a      	ldr	r2, [pc, #232]	@ (8010cdc <TIM_Base_SetConfig+0x124>)
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d108      	bne.n	8010c0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	685b      	ldr	r3, [r3, #4]
 8010c04:	68fa      	ldr	r2, [r7, #12]
 8010c06:	4313      	orrs	r3, r2
 8010c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	4a2f      	ldr	r2, [pc, #188]	@ (8010ccc <TIM_Base_SetConfig+0x114>)
 8010c0e:	4293      	cmp	r3, r2
 8010c10:	d02b      	beq.n	8010c6a <TIM_Base_SetConfig+0xb2>
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010c18:	d027      	beq.n	8010c6a <TIM_Base_SetConfig+0xb2>
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	4a2c      	ldr	r2, [pc, #176]	@ (8010cd0 <TIM_Base_SetConfig+0x118>)
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	d023      	beq.n	8010c6a <TIM_Base_SetConfig+0xb2>
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	4a2b      	ldr	r2, [pc, #172]	@ (8010cd4 <TIM_Base_SetConfig+0x11c>)
 8010c26:	4293      	cmp	r3, r2
 8010c28:	d01f      	beq.n	8010c6a <TIM_Base_SetConfig+0xb2>
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	4a2a      	ldr	r2, [pc, #168]	@ (8010cd8 <TIM_Base_SetConfig+0x120>)
 8010c2e:	4293      	cmp	r3, r2
 8010c30:	d01b      	beq.n	8010c6a <TIM_Base_SetConfig+0xb2>
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	4a29      	ldr	r2, [pc, #164]	@ (8010cdc <TIM_Base_SetConfig+0x124>)
 8010c36:	4293      	cmp	r3, r2
 8010c38:	d017      	beq.n	8010c6a <TIM_Base_SetConfig+0xb2>
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	4a28      	ldr	r2, [pc, #160]	@ (8010ce0 <TIM_Base_SetConfig+0x128>)
 8010c3e:	4293      	cmp	r3, r2
 8010c40:	d013      	beq.n	8010c6a <TIM_Base_SetConfig+0xb2>
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	4a27      	ldr	r2, [pc, #156]	@ (8010ce4 <TIM_Base_SetConfig+0x12c>)
 8010c46:	4293      	cmp	r3, r2
 8010c48:	d00f      	beq.n	8010c6a <TIM_Base_SetConfig+0xb2>
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	4a26      	ldr	r2, [pc, #152]	@ (8010ce8 <TIM_Base_SetConfig+0x130>)
 8010c4e:	4293      	cmp	r3, r2
 8010c50:	d00b      	beq.n	8010c6a <TIM_Base_SetConfig+0xb2>
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	4a25      	ldr	r2, [pc, #148]	@ (8010cec <TIM_Base_SetConfig+0x134>)
 8010c56:	4293      	cmp	r3, r2
 8010c58:	d007      	beq.n	8010c6a <TIM_Base_SetConfig+0xb2>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	4a24      	ldr	r2, [pc, #144]	@ (8010cf0 <TIM_Base_SetConfig+0x138>)
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	d003      	beq.n	8010c6a <TIM_Base_SetConfig+0xb2>
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	4a23      	ldr	r2, [pc, #140]	@ (8010cf4 <TIM_Base_SetConfig+0x13c>)
 8010c66:	4293      	cmp	r3, r2
 8010c68:	d108      	bne.n	8010c7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	68db      	ldr	r3, [r3, #12]
 8010c76:	68fa      	ldr	r2, [r7, #12]
 8010c78:	4313      	orrs	r3, r2
 8010c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010c82:	683b      	ldr	r3, [r7, #0]
 8010c84:	695b      	ldr	r3, [r3, #20]
 8010c86:	4313      	orrs	r3, r2
 8010c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	68fa      	ldr	r2, [r7, #12]
 8010c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010c90:	683b      	ldr	r3, [r7, #0]
 8010c92:	689a      	ldr	r2, [r3, #8]
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	681a      	ldr	r2, [r3, #0]
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8010ccc <TIM_Base_SetConfig+0x114>)
 8010ca4:	4293      	cmp	r3, r2
 8010ca6:	d003      	beq.n	8010cb0 <TIM_Base_SetConfig+0xf8>
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	4a0c      	ldr	r2, [pc, #48]	@ (8010cdc <TIM_Base_SetConfig+0x124>)
 8010cac:	4293      	cmp	r3, r2
 8010cae:	d103      	bne.n	8010cb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	691a      	ldr	r2, [r3, #16]
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2201      	movs	r2, #1
 8010cbc:	615a      	str	r2, [r3, #20]
}
 8010cbe:	bf00      	nop
 8010cc0:	3714      	adds	r7, #20
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc8:	4770      	bx	lr
 8010cca:	bf00      	nop
 8010ccc:	40010000 	.word	0x40010000
 8010cd0:	40000400 	.word	0x40000400
 8010cd4:	40000800 	.word	0x40000800
 8010cd8:	40000c00 	.word	0x40000c00
 8010cdc:	40010400 	.word	0x40010400
 8010ce0:	40014000 	.word	0x40014000
 8010ce4:	40014400 	.word	0x40014400
 8010ce8:	40014800 	.word	0x40014800
 8010cec:	40001800 	.word	0x40001800
 8010cf0:	40001c00 	.word	0x40001c00
 8010cf4:	40002000 	.word	0x40002000

08010cf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010cf8:	b480      	push	{r7}
 8010cfa:	b083      	sub	sp, #12
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010d00:	bf00      	nop
 8010d02:	370c      	adds	r7, #12
 8010d04:	46bd      	mov	sp, r7
 8010d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0a:	4770      	bx	lr

08010d0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	b083      	sub	sp, #12
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010d14:	bf00      	nop
 8010d16:	370c      	adds	r7, #12
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1e:	4770      	bx	lr

08010d20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010d20:	b480      	push	{r7}
 8010d22:	b083      	sub	sp, #12
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010d28:	bf00      	nop
 8010d2a:	370c      	adds	r7, #12
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d32:	4770      	bx	lr

08010d34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b082      	sub	sp, #8
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d101      	bne.n	8010d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010d42:	2301      	movs	r3, #1
 8010d44:	e040      	b.n	8010dc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d106      	bne.n	8010d5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	2200      	movs	r2, #0
 8010d52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	f7f7 fc32 	bl	80085c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2224      	movs	r2, #36	@ 0x24
 8010d60:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	681a      	ldr	r2, [r3, #0]
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	f022 0201 	bic.w	r2, r2, #1
 8010d70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010d72:	6878      	ldr	r0, [r7, #4]
 8010d74:	f000 f82c 	bl	8010dd0 <UART_SetConfig>
 8010d78:	4603      	mov	r3, r0
 8010d7a:	2b01      	cmp	r3, #1
 8010d7c:	d101      	bne.n	8010d82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8010d7e:	2301      	movs	r3, #1
 8010d80:	e022      	b.n	8010dc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d002      	beq.n	8010d90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8010d8a:	6878      	ldr	r0, [r7, #4]
 8010d8c:	f000 fa84 	bl	8011298 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	685a      	ldr	r2, [r3, #4]
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010d9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	689a      	ldr	r2, [r3, #8]
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010dae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	681a      	ldr	r2, [r3, #0]
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	f042 0201 	orr.w	r2, r2, #1
 8010dbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f000 fb0b 	bl	80113dc <UART_CheckIdleState>
 8010dc6:	4603      	mov	r3, r0
}
 8010dc8:	4618      	mov	r0, r3
 8010dca:	3708      	adds	r7, #8
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}

08010dd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b088      	sub	sp, #32
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	689a      	ldr	r2, [r3, #8]
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	691b      	ldr	r3, [r3, #16]
 8010de4:	431a      	orrs	r2, r3
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	695b      	ldr	r3, [r3, #20]
 8010dea:	431a      	orrs	r2, r3
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	69db      	ldr	r3, [r3, #28]
 8010df0:	4313      	orrs	r3, r2
 8010df2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	681a      	ldr	r2, [r3, #0]
 8010dfa:	4ba6      	ldr	r3, [pc, #664]	@ (8011094 <UART_SetConfig+0x2c4>)
 8010dfc:	4013      	ands	r3, r2
 8010dfe:	687a      	ldr	r2, [r7, #4]
 8010e00:	6812      	ldr	r2, [r2, #0]
 8010e02:	6979      	ldr	r1, [r7, #20]
 8010e04:	430b      	orrs	r3, r1
 8010e06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	68da      	ldr	r2, [r3, #12]
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	430a      	orrs	r2, r1
 8010e1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	699b      	ldr	r3, [r3, #24]
 8010e22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	6a1b      	ldr	r3, [r3, #32]
 8010e28:	697a      	ldr	r2, [r7, #20]
 8010e2a:	4313      	orrs	r3, r2
 8010e2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	689b      	ldr	r3, [r3, #8]
 8010e34:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	697a      	ldr	r2, [r7, #20]
 8010e3e:	430a      	orrs	r2, r1
 8010e40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	4a94      	ldr	r2, [pc, #592]	@ (8011098 <UART_SetConfig+0x2c8>)
 8010e48:	4293      	cmp	r3, r2
 8010e4a:	d120      	bne.n	8010e8e <UART_SetConfig+0xbe>
 8010e4c:	4b93      	ldr	r3, [pc, #588]	@ (801109c <UART_SetConfig+0x2cc>)
 8010e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010e52:	f003 0303 	and.w	r3, r3, #3
 8010e56:	2b03      	cmp	r3, #3
 8010e58:	d816      	bhi.n	8010e88 <UART_SetConfig+0xb8>
 8010e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8010e60 <UART_SetConfig+0x90>)
 8010e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e60:	08010e71 	.word	0x08010e71
 8010e64:	08010e7d 	.word	0x08010e7d
 8010e68:	08010e77 	.word	0x08010e77
 8010e6c:	08010e83 	.word	0x08010e83
 8010e70:	2301      	movs	r3, #1
 8010e72:	77fb      	strb	r3, [r7, #31]
 8010e74:	e150      	b.n	8011118 <UART_SetConfig+0x348>
 8010e76:	2302      	movs	r3, #2
 8010e78:	77fb      	strb	r3, [r7, #31]
 8010e7a:	e14d      	b.n	8011118 <UART_SetConfig+0x348>
 8010e7c:	2304      	movs	r3, #4
 8010e7e:	77fb      	strb	r3, [r7, #31]
 8010e80:	e14a      	b.n	8011118 <UART_SetConfig+0x348>
 8010e82:	2308      	movs	r3, #8
 8010e84:	77fb      	strb	r3, [r7, #31]
 8010e86:	e147      	b.n	8011118 <UART_SetConfig+0x348>
 8010e88:	2310      	movs	r3, #16
 8010e8a:	77fb      	strb	r3, [r7, #31]
 8010e8c:	e144      	b.n	8011118 <UART_SetConfig+0x348>
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	4a83      	ldr	r2, [pc, #524]	@ (80110a0 <UART_SetConfig+0x2d0>)
 8010e94:	4293      	cmp	r3, r2
 8010e96:	d132      	bne.n	8010efe <UART_SetConfig+0x12e>
 8010e98:	4b80      	ldr	r3, [pc, #512]	@ (801109c <UART_SetConfig+0x2cc>)
 8010e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010e9e:	f003 030c 	and.w	r3, r3, #12
 8010ea2:	2b0c      	cmp	r3, #12
 8010ea4:	d828      	bhi.n	8010ef8 <UART_SetConfig+0x128>
 8010ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8010eac <UART_SetConfig+0xdc>)
 8010ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eac:	08010ee1 	.word	0x08010ee1
 8010eb0:	08010ef9 	.word	0x08010ef9
 8010eb4:	08010ef9 	.word	0x08010ef9
 8010eb8:	08010ef9 	.word	0x08010ef9
 8010ebc:	08010eed 	.word	0x08010eed
 8010ec0:	08010ef9 	.word	0x08010ef9
 8010ec4:	08010ef9 	.word	0x08010ef9
 8010ec8:	08010ef9 	.word	0x08010ef9
 8010ecc:	08010ee7 	.word	0x08010ee7
 8010ed0:	08010ef9 	.word	0x08010ef9
 8010ed4:	08010ef9 	.word	0x08010ef9
 8010ed8:	08010ef9 	.word	0x08010ef9
 8010edc:	08010ef3 	.word	0x08010ef3
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	77fb      	strb	r3, [r7, #31]
 8010ee4:	e118      	b.n	8011118 <UART_SetConfig+0x348>
 8010ee6:	2302      	movs	r3, #2
 8010ee8:	77fb      	strb	r3, [r7, #31]
 8010eea:	e115      	b.n	8011118 <UART_SetConfig+0x348>
 8010eec:	2304      	movs	r3, #4
 8010eee:	77fb      	strb	r3, [r7, #31]
 8010ef0:	e112      	b.n	8011118 <UART_SetConfig+0x348>
 8010ef2:	2308      	movs	r3, #8
 8010ef4:	77fb      	strb	r3, [r7, #31]
 8010ef6:	e10f      	b.n	8011118 <UART_SetConfig+0x348>
 8010ef8:	2310      	movs	r3, #16
 8010efa:	77fb      	strb	r3, [r7, #31]
 8010efc:	e10c      	b.n	8011118 <UART_SetConfig+0x348>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	4a68      	ldr	r2, [pc, #416]	@ (80110a4 <UART_SetConfig+0x2d4>)
 8010f04:	4293      	cmp	r3, r2
 8010f06:	d120      	bne.n	8010f4a <UART_SetConfig+0x17a>
 8010f08:	4b64      	ldr	r3, [pc, #400]	@ (801109c <UART_SetConfig+0x2cc>)
 8010f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010f0e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8010f12:	2b30      	cmp	r3, #48	@ 0x30
 8010f14:	d013      	beq.n	8010f3e <UART_SetConfig+0x16e>
 8010f16:	2b30      	cmp	r3, #48	@ 0x30
 8010f18:	d814      	bhi.n	8010f44 <UART_SetConfig+0x174>
 8010f1a:	2b20      	cmp	r3, #32
 8010f1c:	d009      	beq.n	8010f32 <UART_SetConfig+0x162>
 8010f1e:	2b20      	cmp	r3, #32
 8010f20:	d810      	bhi.n	8010f44 <UART_SetConfig+0x174>
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d002      	beq.n	8010f2c <UART_SetConfig+0x15c>
 8010f26:	2b10      	cmp	r3, #16
 8010f28:	d006      	beq.n	8010f38 <UART_SetConfig+0x168>
 8010f2a:	e00b      	b.n	8010f44 <UART_SetConfig+0x174>
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	77fb      	strb	r3, [r7, #31]
 8010f30:	e0f2      	b.n	8011118 <UART_SetConfig+0x348>
 8010f32:	2302      	movs	r3, #2
 8010f34:	77fb      	strb	r3, [r7, #31]
 8010f36:	e0ef      	b.n	8011118 <UART_SetConfig+0x348>
 8010f38:	2304      	movs	r3, #4
 8010f3a:	77fb      	strb	r3, [r7, #31]
 8010f3c:	e0ec      	b.n	8011118 <UART_SetConfig+0x348>
 8010f3e:	2308      	movs	r3, #8
 8010f40:	77fb      	strb	r3, [r7, #31]
 8010f42:	e0e9      	b.n	8011118 <UART_SetConfig+0x348>
 8010f44:	2310      	movs	r3, #16
 8010f46:	77fb      	strb	r3, [r7, #31]
 8010f48:	e0e6      	b.n	8011118 <UART_SetConfig+0x348>
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	4a56      	ldr	r2, [pc, #344]	@ (80110a8 <UART_SetConfig+0x2d8>)
 8010f50:	4293      	cmp	r3, r2
 8010f52:	d120      	bne.n	8010f96 <UART_SetConfig+0x1c6>
 8010f54:	4b51      	ldr	r3, [pc, #324]	@ (801109c <UART_SetConfig+0x2cc>)
 8010f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010f5a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8010f5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8010f60:	d013      	beq.n	8010f8a <UART_SetConfig+0x1ba>
 8010f62:	2bc0      	cmp	r3, #192	@ 0xc0
 8010f64:	d814      	bhi.n	8010f90 <UART_SetConfig+0x1c0>
 8010f66:	2b80      	cmp	r3, #128	@ 0x80
 8010f68:	d009      	beq.n	8010f7e <UART_SetConfig+0x1ae>
 8010f6a:	2b80      	cmp	r3, #128	@ 0x80
 8010f6c:	d810      	bhi.n	8010f90 <UART_SetConfig+0x1c0>
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d002      	beq.n	8010f78 <UART_SetConfig+0x1a8>
 8010f72:	2b40      	cmp	r3, #64	@ 0x40
 8010f74:	d006      	beq.n	8010f84 <UART_SetConfig+0x1b4>
 8010f76:	e00b      	b.n	8010f90 <UART_SetConfig+0x1c0>
 8010f78:	2300      	movs	r3, #0
 8010f7a:	77fb      	strb	r3, [r7, #31]
 8010f7c:	e0cc      	b.n	8011118 <UART_SetConfig+0x348>
 8010f7e:	2302      	movs	r3, #2
 8010f80:	77fb      	strb	r3, [r7, #31]
 8010f82:	e0c9      	b.n	8011118 <UART_SetConfig+0x348>
 8010f84:	2304      	movs	r3, #4
 8010f86:	77fb      	strb	r3, [r7, #31]
 8010f88:	e0c6      	b.n	8011118 <UART_SetConfig+0x348>
 8010f8a:	2308      	movs	r3, #8
 8010f8c:	77fb      	strb	r3, [r7, #31]
 8010f8e:	e0c3      	b.n	8011118 <UART_SetConfig+0x348>
 8010f90:	2310      	movs	r3, #16
 8010f92:	77fb      	strb	r3, [r7, #31]
 8010f94:	e0c0      	b.n	8011118 <UART_SetConfig+0x348>
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	4a44      	ldr	r2, [pc, #272]	@ (80110ac <UART_SetConfig+0x2dc>)
 8010f9c:	4293      	cmp	r3, r2
 8010f9e:	d125      	bne.n	8010fec <UART_SetConfig+0x21c>
 8010fa0:	4b3e      	ldr	r3, [pc, #248]	@ (801109c <UART_SetConfig+0x2cc>)
 8010fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010faa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010fae:	d017      	beq.n	8010fe0 <UART_SetConfig+0x210>
 8010fb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010fb4:	d817      	bhi.n	8010fe6 <UART_SetConfig+0x216>
 8010fb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010fba:	d00b      	beq.n	8010fd4 <UART_SetConfig+0x204>
 8010fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010fc0:	d811      	bhi.n	8010fe6 <UART_SetConfig+0x216>
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d003      	beq.n	8010fce <UART_SetConfig+0x1fe>
 8010fc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010fca:	d006      	beq.n	8010fda <UART_SetConfig+0x20a>
 8010fcc:	e00b      	b.n	8010fe6 <UART_SetConfig+0x216>
 8010fce:	2300      	movs	r3, #0
 8010fd0:	77fb      	strb	r3, [r7, #31]
 8010fd2:	e0a1      	b.n	8011118 <UART_SetConfig+0x348>
 8010fd4:	2302      	movs	r3, #2
 8010fd6:	77fb      	strb	r3, [r7, #31]
 8010fd8:	e09e      	b.n	8011118 <UART_SetConfig+0x348>
 8010fda:	2304      	movs	r3, #4
 8010fdc:	77fb      	strb	r3, [r7, #31]
 8010fde:	e09b      	b.n	8011118 <UART_SetConfig+0x348>
 8010fe0:	2308      	movs	r3, #8
 8010fe2:	77fb      	strb	r3, [r7, #31]
 8010fe4:	e098      	b.n	8011118 <UART_SetConfig+0x348>
 8010fe6:	2310      	movs	r3, #16
 8010fe8:	77fb      	strb	r3, [r7, #31]
 8010fea:	e095      	b.n	8011118 <UART_SetConfig+0x348>
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	4a2f      	ldr	r2, [pc, #188]	@ (80110b0 <UART_SetConfig+0x2e0>)
 8010ff2:	4293      	cmp	r3, r2
 8010ff4:	d125      	bne.n	8011042 <UART_SetConfig+0x272>
 8010ff6:	4b29      	ldr	r3, [pc, #164]	@ (801109c <UART_SetConfig+0x2cc>)
 8010ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010ffc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8011000:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011004:	d017      	beq.n	8011036 <UART_SetConfig+0x266>
 8011006:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801100a:	d817      	bhi.n	801103c <UART_SetConfig+0x26c>
 801100c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011010:	d00b      	beq.n	801102a <UART_SetConfig+0x25a>
 8011012:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011016:	d811      	bhi.n	801103c <UART_SetConfig+0x26c>
 8011018:	2b00      	cmp	r3, #0
 801101a:	d003      	beq.n	8011024 <UART_SetConfig+0x254>
 801101c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011020:	d006      	beq.n	8011030 <UART_SetConfig+0x260>
 8011022:	e00b      	b.n	801103c <UART_SetConfig+0x26c>
 8011024:	2301      	movs	r3, #1
 8011026:	77fb      	strb	r3, [r7, #31]
 8011028:	e076      	b.n	8011118 <UART_SetConfig+0x348>
 801102a:	2302      	movs	r3, #2
 801102c:	77fb      	strb	r3, [r7, #31]
 801102e:	e073      	b.n	8011118 <UART_SetConfig+0x348>
 8011030:	2304      	movs	r3, #4
 8011032:	77fb      	strb	r3, [r7, #31]
 8011034:	e070      	b.n	8011118 <UART_SetConfig+0x348>
 8011036:	2308      	movs	r3, #8
 8011038:	77fb      	strb	r3, [r7, #31]
 801103a:	e06d      	b.n	8011118 <UART_SetConfig+0x348>
 801103c:	2310      	movs	r3, #16
 801103e:	77fb      	strb	r3, [r7, #31]
 8011040:	e06a      	b.n	8011118 <UART_SetConfig+0x348>
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	4a1b      	ldr	r2, [pc, #108]	@ (80110b4 <UART_SetConfig+0x2e4>)
 8011048:	4293      	cmp	r3, r2
 801104a:	d138      	bne.n	80110be <UART_SetConfig+0x2ee>
 801104c:	4b13      	ldr	r3, [pc, #76]	@ (801109c <UART_SetConfig+0x2cc>)
 801104e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011052:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8011056:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801105a:	d017      	beq.n	801108c <UART_SetConfig+0x2bc>
 801105c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8011060:	d82a      	bhi.n	80110b8 <UART_SetConfig+0x2e8>
 8011062:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011066:	d00b      	beq.n	8011080 <UART_SetConfig+0x2b0>
 8011068:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801106c:	d824      	bhi.n	80110b8 <UART_SetConfig+0x2e8>
 801106e:	2b00      	cmp	r3, #0
 8011070:	d003      	beq.n	801107a <UART_SetConfig+0x2aa>
 8011072:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011076:	d006      	beq.n	8011086 <UART_SetConfig+0x2b6>
 8011078:	e01e      	b.n	80110b8 <UART_SetConfig+0x2e8>
 801107a:	2300      	movs	r3, #0
 801107c:	77fb      	strb	r3, [r7, #31]
 801107e:	e04b      	b.n	8011118 <UART_SetConfig+0x348>
 8011080:	2302      	movs	r3, #2
 8011082:	77fb      	strb	r3, [r7, #31]
 8011084:	e048      	b.n	8011118 <UART_SetConfig+0x348>
 8011086:	2304      	movs	r3, #4
 8011088:	77fb      	strb	r3, [r7, #31]
 801108a:	e045      	b.n	8011118 <UART_SetConfig+0x348>
 801108c:	2308      	movs	r3, #8
 801108e:	77fb      	strb	r3, [r7, #31]
 8011090:	e042      	b.n	8011118 <UART_SetConfig+0x348>
 8011092:	bf00      	nop
 8011094:	efff69f3 	.word	0xefff69f3
 8011098:	40011000 	.word	0x40011000
 801109c:	40023800 	.word	0x40023800
 80110a0:	40004400 	.word	0x40004400
 80110a4:	40004800 	.word	0x40004800
 80110a8:	40004c00 	.word	0x40004c00
 80110ac:	40005000 	.word	0x40005000
 80110b0:	40011400 	.word	0x40011400
 80110b4:	40007800 	.word	0x40007800
 80110b8:	2310      	movs	r3, #16
 80110ba:	77fb      	strb	r3, [r7, #31]
 80110bc:	e02c      	b.n	8011118 <UART_SetConfig+0x348>
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	4a72      	ldr	r2, [pc, #456]	@ (801128c <UART_SetConfig+0x4bc>)
 80110c4:	4293      	cmp	r3, r2
 80110c6:	d125      	bne.n	8011114 <UART_SetConfig+0x344>
 80110c8:	4b71      	ldr	r3, [pc, #452]	@ (8011290 <UART_SetConfig+0x4c0>)
 80110ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80110ce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80110d2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80110d6:	d017      	beq.n	8011108 <UART_SetConfig+0x338>
 80110d8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80110dc:	d817      	bhi.n	801110e <UART_SetConfig+0x33e>
 80110de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80110e2:	d00b      	beq.n	80110fc <UART_SetConfig+0x32c>
 80110e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80110e8:	d811      	bhi.n	801110e <UART_SetConfig+0x33e>
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d003      	beq.n	80110f6 <UART_SetConfig+0x326>
 80110ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80110f2:	d006      	beq.n	8011102 <UART_SetConfig+0x332>
 80110f4:	e00b      	b.n	801110e <UART_SetConfig+0x33e>
 80110f6:	2300      	movs	r3, #0
 80110f8:	77fb      	strb	r3, [r7, #31]
 80110fa:	e00d      	b.n	8011118 <UART_SetConfig+0x348>
 80110fc:	2302      	movs	r3, #2
 80110fe:	77fb      	strb	r3, [r7, #31]
 8011100:	e00a      	b.n	8011118 <UART_SetConfig+0x348>
 8011102:	2304      	movs	r3, #4
 8011104:	77fb      	strb	r3, [r7, #31]
 8011106:	e007      	b.n	8011118 <UART_SetConfig+0x348>
 8011108:	2308      	movs	r3, #8
 801110a:	77fb      	strb	r3, [r7, #31]
 801110c:	e004      	b.n	8011118 <UART_SetConfig+0x348>
 801110e:	2310      	movs	r3, #16
 8011110:	77fb      	strb	r3, [r7, #31]
 8011112:	e001      	b.n	8011118 <UART_SetConfig+0x348>
 8011114:	2310      	movs	r3, #16
 8011116:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	69db      	ldr	r3, [r3, #28]
 801111c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011120:	d15b      	bne.n	80111da <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8011122:	7ffb      	ldrb	r3, [r7, #31]
 8011124:	2b08      	cmp	r3, #8
 8011126:	d828      	bhi.n	801117a <UART_SetConfig+0x3aa>
 8011128:	a201      	add	r2, pc, #4	@ (adr r2, 8011130 <UART_SetConfig+0x360>)
 801112a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801112e:	bf00      	nop
 8011130:	08011155 	.word	0x08011155
 8011134:	0801115d 	.word	0x0801115d
 8011138:	08011165 	.word	0x08011165
 801113c:	0801117b 	.word	0x0801117b
 8011140:	0801116b 	.word	0x0801116b
 8011144:	0801117b 	.word	0x0801117b
 8011148:	0801117b 	.word	0x0801117b
 801114c:	0801117b 	.word	0x0801117b
 8011150:	08011173 	.word	0x08011173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011154:	f7fc ff6e 	bl	800e034 <HAL_RCC_GetPCLK1Freq>
 8011158:	61b8      	str	r0, [r7, #24]
        break;
 801115a:	e013      	b.n	8011184 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801115c:	f7fc ff7e 	bl	800e05c <HAL_RCC_GetPCLK2Freq>
 8011160:	61b8      	str	r0, [r7, #24]
        break;
 8011162:	e00f      	b.n	8011184 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011164:	4b4b      	ldr	r3, [pc, #300]	@ (8011294 <UART_SetConfig+0x4c4>)
 8011166:	61bb      	str	r3, [r7, #24]
        break;
 8011168:	e00c      	b.n	8011184 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801116a:	f7fc fe91 	bl	800de90 <HAL_RCC_GetSysClockFreq>
 801116e:	61b8      	str	r0, [r7, #24]
        break;
 8011170:	e008      	b.n	8011184 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011172:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011176:	61bb      	str	r3, [r7, #24]
        break;
 8011178:	e004      	b.n	8011184 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 801117a:	2300      	movs	r3, #0
 801117c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801117e:	2301      	movs	r3, #1
 8011180:	77bb      	strb	r3, [r7, #30]
        break;
 8011182:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011184:	69bb      	ldr	r3, [r7, #24]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d074      	beq.n	8011274 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801118a:	69bb      	ldr	r3, [r7, #24]
 801118c:	005a      	lsls	r2, r3, #1
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	685b      	ldr	r3, [r3, #4]
 8011192:	085b      	lsrs	r3, r3, #1
 8011194:	441a      	add	r2, r3
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	685b      	ldr	r3, [r3, #4]
 801119a:	fbb2 f3f3 	udiv	r3, r2, r3
 801119e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80111a0:	693b      	ldr	r3, [r7, #16]
 80111a2:	2b0f      	cmp	r3, #15
 80111a4:	d916      	bls.n	80111d4 <UART_SetConfig+0x404>
 80111a6:	693b      	ldr	r3, [r7, #16]
 80111a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80111ac:	d212      	bcs.n	80111d4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80111ae:	693b      	ldr	r3, [r7, #16]
 80111b0:	b29b      	uxth	r3, r3
 80111b2:	f023 030f 	bic.w	r3, r3, #15
 80111b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80111b8:	693b      	ldr	r3, [r7, #16]
 80111ba:	085b      	lsrs	r3, r3, #1
 80111bc:	b29b      	uxth	r3, r3
 80111be:	f003 0307 	and.w	r3, r3, #7
 80111c2:	b29a      	uxth	r2, r3
 80111c4:	89fb      	ldrh	r3, [r7, #14]
 80111c6:	4313      	orrs	r3, r2
 80111c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	89fa      	ldrh	r2, [r7, #14]
 80111d0:	60da      	str	r2, [r3, #12]
 80111d2:	e04f      	b.n	8011274 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80111d4:	2301      	movs	r3, #1
 80111d6:	77bb      	strb	r3, [r7, #30]
 80111d8:	e04c      	b.n	8011274 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80111da:	7ffb      	ldrb	r3, [r7, #31]
 80111dc:	2b08      	cmp	r3, #8
 80111de:	d828      	bhi.n	8011232 <UART_SetConfig+0x462>
 80111e0:	a201      	add	r2, pc, #4	@ (adr r2, 80111e8 <UART_SetConfig+0x418>)
 80111e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111e6:	bf00      	nop
 80111e8:	0801120d 	.word	0x0801120d
 80111ec:	08011215 	.word	0x08011215
 80111f0:	0801121d 	.word	0x0801121d
 80111f4:	08011233 	.word	0x08011233
 80111f8:	08011223 	.word	0x08011223
 80111fc:	08011233 	.word	0x08011233
 8011200:	08011233 	.word	0x08011233
 8011204:	08011233 	.word	0x08011233
 8011208:	0801122b 	.word	0x0801122b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801120c:	f7fc ff12 	bl	800e034 <HAL_RCC_GetPCLK1Freq>
 8011210:	61b8      	str	r0, [r7, #24]
        break;
 8011212:	e013      	b.n	801123c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011214:	f7fc ff22 	bl	800e05c <HAL_RCC_GetPCLK2Freq>
 8011218:	61b8      	str	r0, [r7, #24]
        break;
 801121a:	e00f      	b.n	801123c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801121c:	4b1d      	ldr	r3, [pc, #116]	@ (8011294 <UART_SetConfig+0x4c4>)
 801121e:	61bb      	str	r3, [r7, #24]
        break;
 8011220:	e00c      	b.n	801123c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011222:	f7fc fe35 	bl	800de90 <HAL_RCC_GetSysClockFreq>
 8011226:	61b8      	str	r0, [r7, #24]
        break;
 8011228:	e008      	b.n	801123c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801122a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801122e:	61bb      	str	r3, [r7, #24]
        break;
 8011230:	e004      	b.n	801123c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8011232:	2300      	movs	r3, #0
 8011234:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8011236:	2301      	movs	r3, #1
 8011238:	77bb      	strb	r3, [r7, #30]
        break;
 801123a:	bf00      	nop
    }

    if (pclk != 0U)
 801123c:	69bb      	ldr	r3, [r7, #24]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d018      	beq.n	8011274 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	685b      	ldr	r3, [r3, #4]
 8011246:	085a      	lsrs	r2, r3, #1
 8011248:	69bb      	ldr	r3, [r7, #24]
 801124a:	441a      	add	r2, r3
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	685b      	ldr	r3, [r3, #4]
 8011250:	fbb2 f3f3 	udiv	r3, r2, r3
 8011254:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011256:	693b      	ldr	r3, [r7, #16]
 8011258:	2b0f      	cmp	r3, #15
 801125a:	d909      	bls.n	8011270 <UART_SetConfig+0x4a0>
 801125c:	693b      	ldr	r3, [r7, #16]
 801125e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011262:	d205      	bcs.n	8011270 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011264:	693b      	ldr	r3, [r7, #16]
 8011266:	b29a      	uxth	r2, r3
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	60da      	str	r2, [r3, #12]
 801126e:	e001      	b.n	8011274 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8011270:	2301      	movs	r3, #1
 8011272:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	2200      	movs	r2, #0
 8011278:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	2200      	movs	r2, #0
 801127e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8011280:	7fbb      	ldrb	r3, [r7, #30]
}
 8011282:	4618      	mov	r0, r3
 8011284:	3720      	adds	r7, #32
 8011286:	46bd      	mov	sp, r7
 8011288:	bd80      	pop	{r7, pc}
 801128a:	bf00      	nop
 801128c:	40007c00 	.word	0x40007c00
 8011290:	40023800 	.word	0x40023800
 8011294:	00f42400 	.word	0x00f42400

08011298 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011298:	b480      	push	{r7}
 801129a:	b083      	sub	sp, #12
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112a4:	f003 0301 	and.w	r3, r3, #1
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d00a      	beq.n	80112c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	685b      	ldr	r3, [r3, #4]
 80112b2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	430a      	orrs	r2, r1
 80112c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112c6:	f003 0302 	and.w	r3, r3, #2
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d00a      	beq.n	80112e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	685b      	ldr	r3, [r3, #4]
 80112d4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	430a      	orrs	r2, r1
 80112e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112e8:	f003 0304 	and.w	r3, r3, #4
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d00a      	beq.n	8011306 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	685b      	ldr	r3, [r3, #4]
 80112f6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	430a      	orrs	r2, r1
 8011304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801130a:	f003 0308 	and.w	r3, r3, #8
 801130e:	2b00      	cmp	r3, #0
 8011310:	d00a      	beq.n	8011328 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	685b      	ldr	r3, [r3, #4]
 8011318:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	430a      	orrs	r2, r1
 8011326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801132c:	f003 0310 	and.w	r3, r3, #16
 8011330:	2b00      	cmp	r3, #0
 8011332:	d00a      	beq.n	801134a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	689b      	ldr	r3, [r3, #8]
 801133a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	430a      	orrs	r2, r1
 8011348:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801134e:	f003 0320 	and.w	r3, r3, #32
 8011352:	2b00      	cmp	r3, #0
 8011354:	d00a      	beq.n	801136c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	689b      	ldr	r3, [r3, #8]
 801135c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	430a      	orrs	r2, r1
 801136a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011374:	2b00      	cmp	r3, #0
 8011376:	d01a      	beq.n	80113ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	685b      	ldr	r3, [r3, #4]
 801137e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	430a      	orrs	r2, r1
 801138c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011392:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011396:	d10a      	bne.n	80113ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	685b      	ldr	r3, [r3, #4]
 801139e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	430a      	orrs	r2, r1
 80113ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d00a      	beq.n	80113d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	685b      	ldr	r3, [r3, #4]
 80113c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	430a      	orrs	r2, r1
 80113ce:	605a      	str	r2, [r3, #4]
  }
}
 80113d0:	bf00      	nop
 80113d2:	370c      	adds	r7, #12
 80113d4:	46bd      	mov	sp, r7
 80113d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113da:	4770      	bx	lr

080113dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b086      	sub	sp, #24
 80113e0:	af02      	add	r7, sp, #8
 80113e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	2200      	movs	r2, #0
 80113e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80113ec:	f7f9 f9b8 	bl	800a760 <HAL_GetTick>
 80113f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	f003 0308 	and.w	r3, r3, #8
 80113fc:	2b08      	cmp	r3, #8
 80113fe:	d10e      	bne.n	801141e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011400:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011404:	9300      	str	r3, [sp, #0]
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	2200      	movs	r2, #0
 801140a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801140e:	6878      	ldr	r0, [r7, #4]
 8011410:	f000 f81b 	bl	801144a <UART_WaitOnFlagUntilTimeout>
 8011414:	4603      	mov	r3, r0
 8011416:	2b00      	cmp	r3, #0
 8011418:	d001      	beq.n	801141e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801141a:	2303      	movs	r3, #3
 801141c:	e011      	b.n	8011442 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	2220      	movs	r2, #32
 8011422:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	2220      	movs	r2, #32
 8011428:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	2200      	movs	r2, #0
 8011430:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	2200      	movs	r2, #0
 8011436:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2200      	movs	r2, #0
 801143c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8011440:	2300      	movs	r3, #0
}
 8011442:	4618      	mov	r0, r3
 8011444:	3710      	adds	r7, #16
 8011446:	46bd      	mov	sp, r7
 8011448:	bd80      	pop	{r7, pc}

0801144a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801144a:	b580      	push	{r7, lr}
 801144c:	b09c      	sub	sp, #112	@ 0x70
 801144e:	af00      	add	r7, sp, #0
 8011450:	60f8      	str	r0, [r7, #12]
 8011452:	60b9      	str	r1, [r7, #8]
 8011454:	603b      	str	r3, [r7, #0]
 8011456:	4613      	mov	r3, r2
 8011458:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801145a:	e0a7      	b.n	80115ac <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801145c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801145e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011462:	f000 80a3 	beq.w	80115ac <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011466:	f7f9 f97b 	bl	800a760 <HAL_GetTick>
 801146a:	4602      	mov	r2, r0
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	1ad3      	subs	r3, r2, r3
 8011470:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011472:	429a      	cmp	r2, r3
 8011474:	d302      	bcc.n	801147c <UART_WaitOnFlagUntilTimeout+0x32>
 8011476:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011478:	2b00      	cmp	r3, #0
 801147a:	d13f      	bne.n	80114fc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011482:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011484:	e853 3f00 	ldrex	r3, [r3]
 8011488:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801148a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801148c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8011490:	667b      	str	r3, [r7, #100]	@ 0x64
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	461a      	mov	r2, r3
 8011498:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801149a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801149c:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801149e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80114a0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80114a2:	e841 2300 	strex	r3, r2, [r1]
 80114a6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80114a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d1e6      	bne.n	801147c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	3308      	adds	r3, #8
 80114b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114b8:	e853 3f00 	ldrex	r3, [r3]
 80114bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80114be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114c0:	f023 0301 	bic.w	r3, r3, #1
 80114c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	3308      	adds	r3, #8
 80114cc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80114ce:	64ba      	str	r2, [r7, #72]	@ 0x48
 80114d0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80114d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80114d6:	e841 2300 	strex	r3, r2, [r1]
 80114da:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80114dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d1e5      	bne.n	80114ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	2220      	movs	r2, #32
 80114e6:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	2220      	movs	r2, #32
 80114ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	2200      	movs	r2, #0
 80114f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 80114f8:	2303      	movs	r3, #3
 80114fa:	e068      	b.n	80115ce <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	f003 0304 	and.w	r3, r3, #4
 8011506:	2b00      	cmp	r3, #0
 8011508:	d050      	beq.n	80115ac <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	69db      	ldr	r3, [r3, #28]
 8011510:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011514:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011518:	d148      	bne.n	80115ac <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011522:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801152a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801152c:	e853 3f00 	ldrex	r3, [r3]
 8011530:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011534:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8011538:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	461a      	mov	r2, r3
 8011540:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011542:	637b      	str	r3, [r7, #52]	@ 0x34
 8011544:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011546:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011548:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801154a:	e841 2300 	strex	r3, r2, [r1]
 801154e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8011550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011552:	2b00      	cmp	r3, #0
 8011554:	d1e6      	bne.n	8011524 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	3308      	adds	r3, #8
 801155c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801155e:	697b      	ldr	r3, [r7, #20]
 8011560:	e853 3f00 	ldrex	r3, [r3]
 8011564:	613b      	str	r3, [r7, #16]
   return(result);
 8011566:	693b      	ldr	r3, [r7, #16]
 8011568:	f023 0301 	bic.w	r3, r3, #1
 801156c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	3308      	adds	r3, #8
 8011574:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011576:	623a      	str	r2, [r7, #32]
 8011578:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801157a:	69f9      	ldr	r1, [r7, #28]
 801157c:	6a3a      	ldr	r2, [r7, #32]
 801157e:	e841 2300 	strex	r3, r2, [r1]
 8011582:	61bb      	str	r3, [r7, #24]
   return(result);
 8011584:	69bb      	ldr	r3, [r7, #24]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d1e5      	bne.n	8011556 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	2220      	movs	r2, #32
 801158e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	2220      	movs	r2, #32
 8011594:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	2220      	movs	r2, #32
 801159c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	2200      	movs	r2, #0
 80115a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80115a8:	2303      	movs	r3, #3
 80115aa:	e010      	b.n	80115ce <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	69da      	ldr	r2, [r3, #28]
 80115b2:	68bb      	ldr	r3, [r7, #8]
 80115b4:	4013      	ands	r3, r2
 80115b6:	68ba      	ldr	r2, [r7, #8]
 80115b8:	429a      	cmp	r2, r3
 80115ba:	bf0c      	ite	eq
 80115bc:	2301      	moveq	r3, #1
 80115be:	2300      	movne	r3, #0
 80115c0:	b2db      	uxtb	r3, r3
 80115c2:	461a      	mov	r2, r3
 80115c4:	79fb      	ldrb	r3, [r7, #7]
 80115c6:	429a      	cmp	r2, r3
 80115c8:	f43f af48 	beq.w	801145c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80115cc:	2300      	movs	r3, #0
}
 80115ce:	4618      	mov	r0, r3
 80115d0:	3770      	adds	r7, #112	@ 0x70
 80115d2:	46bd      	mov	sp, r7
 80115d4:	bd80      	pop	{r7, pc}
	...

080115d8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80115d8:	b480      	push	{r7}
 80115da:	b083      	sub	sp, #12
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
 80115e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80115e2:	683b      	ldr	r3, [r7, #0]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d121      	bne.n	801162e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681a      	ldr	r2, [r3, #0]
 80115ee:	4b27      	ldr	r3, [pc, #156]	@ (801168c <FMC_SDRAM_Init+0xb4>)
 80115f0:	4013      	ands	r3, r2
 80115f2:	683a      	ldr	r2, [r7, #0]
 80115f4:	6851      	ldr	r1, [r2, #4]
 80115f6:	683a      	ldr	r2, [r7, #0]
 80115f8:	6892      	ldr	r2, [r2, #8]
 80115fa:	4311      	orrs	r1, r2
 80115fc:	683a      	ldr	r2, [r7, #0]
 80115fe:	68d2      	ldr	r2, [r2, #12]
 8011600:	4311      	orrs	r1, r2
 8011602:	683a      	ldr	r2, [r7, #0]
 8011604:	6912      	ldr	r2, [r2, #16]
 8011606:	4311      	orrs	r1, r2
 8011608:	683a      	ldr	r2, [r7, #0]
 801160a:	6952      	ldr	r2, [r2, #20]
 801160c:	4311      	orrs	r1, r2
 801160e:	683a      	ldr	r2, [r7, #0]
 8011610:	6992      	ldr	r2, [r2, #24]
 8011612:	4311      	orrs	r1, r2
 8011614:	683a      	ldr	r2, [r7, #0]
 8011616:	69d2      	ldr	r2, [r2, #28]
 8011618:	4311      	orrs	r1, r2
 801161a:	683a      	ldr	r2, [r7, #0]
 801161c:	6a12      	ldr	r2, [r2, #32]
 801161e:	4311      	orrs	r1, r2
 8011620:	683a      	ldr	r2, [r7, #0]
 8011622:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8011624:	430a      	orrs	r2, r1
 8011626:	431a      	orrs	r2, r3
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	601a      	str	r2, [r3, #0]
 801162c:	e026      	b.n	801167c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8011636:	683b      	ldr	r3, [r7, #0]
 8011638:	69d9      	ldr	r1, [r3, #28]
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	6a1b      	ldr	r3, [r3, #32]
 801163e:	4319      	orrs	r1, r3
 8011640:	683b      	ldr	r3, [r7, #0]
 8011642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011644:	430b      	orrs	r3, r1
 8011646:	431a      	orrs	r2, r3
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	685a      	ldr	r2, [r3, #4]
 8011650:	4b0e      	ldr	r3, [pc, #56]	@ (801168c <FMC_SDRAM_Init+0xb4>)
 8011652:	4013      	ands	r3, r2
 8011654:	683a      	ldr	r2, [r7, #0]
 8011656:	6851      	ldr	r1, [r2, #4]
 8011658:	683a      	ldr	r2, [r7, #0]
 801165a:	6892      	ldr	r2, [r2, #8]
 801165c:	4311      	orrs	r1, r2
 801165e:	683a      	ldr	r2, [r7, #0]
 8011660:	68d2      	ldr	r2, [r2, #12]
 8011662:	4311      	orrs	r1, r2
 8011664:	683a      	ldr	r2, [r7, #0]
 8011666:	6912      	ldr	r2, [r2, #16]
 8011668:	4311      	orrs	r1, r2
 801166a:	683a      	ldr	r2, [r7, #0]
 801166c:	6952      	ldr	r2, [r2, #20]
 801166e:	4311      	orrs	r1, r2
 8011670:	683a      	ldr	r2, [r7, #0]
 8011672:	6992      	ldr	r2, [r2, #24]
 8011674:	430a      	orrs	r2, r1
 8011676:	431a      	orrs	r2, r3
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 801167c:	2300      	movs	r3, #0
}
 801167e:	4618      	mov	r0, r3
 8011680:	370c      	adds	r7, #12
 8011682:	46bd      	mov	sp, r7
 8011684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011688:	4770      	bx	lr
 801168a:	bf00      	nop
 801168c:	ffff8000 	.word	0xffff8000

08011690 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8011690:	b480      	push	{r7}
 8011692:	b085      	sub	sp, #20
 8011694:	af00      	add	r7, sp, #0
 8011696:	60f8      	str	r0, [r7, #12]
 8011698:	60b9      	str	r1, [r7, #8]
 801169a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d128      	bne.n	80116f4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	689b      	ldr	r3, [r3, #8]
 80116a6:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80116aa:	68bb      	ldr	r3, [r7, #8]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	1e59      	subs	r1, r3, #1
 80116b0:	68bb      	ldr	r3, [r7, #8]
 80116b2:	685b      	ldr	r3, [r3, #4]
 80116b4:	3b01      	subs	r3, #1
 80116b6:	011b      	lsls	r3, r3, #4
 80116b8:	4319      	orrs	r1, r3
 80116ba:	68bb      	ldr	r3, [r7, #8]
 80116bc:	689b      	ldr	r3, [r3, #8]
 80116be:	3b01      	subs	r3, #1
 80116c0:	021b      	lsls	r3, r3, #8
 80116c2:	4319      	orrs	r1, r3
 80116c4:	68bb      	ldr	r3, [r7, #8]
 80116c6:	68db      	ldr	r3, [r3, #12]
 80116c8:	3b01      	subs	r3, #1
 80116ca:	031b      	lsls	r3, r3, #12
 80116cc:	4319      	orrs	r1, r3
 80116ce:	68bb      	ldr	r3, [r7, #8]
 80116d0:	691b      	ldr	r3, [r3, #16]
 80116d2:	3b01      	subs	r3, #1
 80116d4:	041b      	lsls	r3, r3, #16
 80116d6:	4319      	orrs	r1, r3
 80116d8:	68bb      	ldr	r3, [r7, #8]
 80116da:	695b      	ldr	r3, [r3, #20]
 80116dc:	3b01      	subs	r3, #1
 80116de:	051b      	lsls	r3, r3, #20
 80116e0:	4319      	orrs	r1, r3
 80116e2:	68bb      	ldr	r3, [r7, #8]
 80116e4:	699b      	ldr	r3, [r3, #24]
 80116e6:	3b01      	subs	r3, #1
 80116e8:	061b      	lsls	r3, r3, #24
 80116ea:	430b      	orrs	r3, r1
 80116ec:	431a      	orrs	r2, r3
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	609a      	str	r2, [r3, #8]
 80116f2:	e02d      	b.n	8011750 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	689a      	ldr	r2, [r3, #8]
 80116f8:	4b19      	ldr	r3, [pc, #100]	@ (8011760 <FMC_SDRAM_Timing_Init+0xd0>)
 80116fa:	4013      	ands	r3, r2
 80116fc:	68ba      	ldr	r2, [r7, #8]
 80116fe:	68d2      	ldr	r2, [r2, #12]
 8011700:	3a01      	subs	r2, #1
 8011702:	0311      	lsls	r1, r2, #12
 8011704:	68ba      	ldr	r2, [r7, #8]
 8011706:	6952      	ldr	r2, [r2, #20]
 8011708:	3a01      	subs	r2, #1
 801170a:	0512      	lsls	r2, r2, #20
 801170c:	430a      	orrs	r2, r1
 801170e:	431a      	orrs	r2, r3
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	68db      	ldr	r3, [r3, #12]
 8011718:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 801171c:	68bb      	ldr	r3, [r7, #8]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	1e59      	subs	r1, r3, #1
 8011722:	68bb      	ldr	r3, [r7, #8]
 8011724:	685b      	ldr	r3, [r3, #4]
 8011726:	3b01      	subs	r3, #1
 8011728:	011b      	lsls	r3, r3, #4
 801172a:	4319      	orrs	r1, r3
 801172c:	68bb      	ldr	r3, [r7, #8]
 801172e:	689b      	ldr	r3, [r3, #8]
 8011730:	3b01      	subs	r3, #1
 8011732:	021b      	lsls	r3, r3, #8
 8011734:	4319      	orrs	r1, r3
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	691b      	ldr	r3, [r3, #16]
 801173a:	3b01      	subs	r3, #1
 801173c:	041b      	lsls	r3, r3, #16
 801173e:	4319      	orrs	r1, r3
 8011740:	68bb      	ldr	r3, [r7, #8]
 8011742:	699b      	ldr	r3, [r3, #24]
 8011744:	3b01      	subs	r3, #1
 8011746:	061b      	lsls	r3, r3, #24
 8011748:	430b      	orrs	r3, r1
 801174a:	431a      	orrs	r2, r3
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8011750:	2300      	movs	r3, #0
}
 8011752:	4618      	mov	r0, r3
 8011754:	3714      	adds	r7, #20
 8011756:	46bd      	mov	sp, r7
 8011758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175c:	4770      	bx	lr
 801175e:	bf00      	nop
 8011760:	ff0f0fff 	.word	0xff0f0fff

08011764 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8011764:	b480      	push	{r7}
 8011766:	b085      	sub	sp, #20
 8011768:	af00      	add	r7, sp, #0
 801176a:	60f8      	str	r0, [r7, #12]
 801176c:	60b9      	str	r1, [r7, #8]
 801176e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	691a      	ldr	r2, [r3, #16]
 8011774:	4b0c      	ldr	r3, [pc, #48]	@ (80117a8 <FMC_SDRAM_SendCommand+0x44>)
 8011776:	4013      	ands	r3, r2
 8011778:	68ba      	ldr	r2, [r7, #8]
 801177a:	6811      	ldr	r1, [r2, #0]
 801177c:	68ba      	ldr	r2, [r7, #8]
 801177e:	6852      	ldr	r2, [r2, #4]
 8011780:	4311      	orrs	r1, r2
 8011782:	68ba      	ldr	r2, [r7, #8]
 8011784:	6892      	ldr	r2, [r2, #8]
 8011786:	3a01      	subs	r2, #1
 8011788:	0152      	lsls	r2, r2, #5
 801178a:	4311      	orrs	r1, r2
 801178c:	68ba      	ldr	r2, [r7, #8]
 801178e:	68d2      	ldr	r2, [r2, #12]
 8011790:	0252      	lsls	r2, r2, #9
 8011792:	430a      	orrs	r2, r1
 8011794:	431a      	orrs	r2, r3
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 801179a:	2300      	movs	r3, #0
}
 801179c:	4618      	mov	r0, r3
 801179e:	3714      	adds	r7, #20
 80117a0:	46bd      	mov	sp, r7
 80117a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a6:	4770      	bx	lr
 80117a8:	ffc00000 	.word	0xffc00000

080117ac <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80117ac:	b480      	push	{r7}
 80117ae:	b083      	sub	sp, #12
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
 80117b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	695a      	ldr	r2, [r3, #20]
 80117ba:	4b07      	ldr	r3, [pc, #28]	@ (80117d8 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 80117bc:	4013      	ands	r3, r2
 80117be:	683a      	ldr	r2, [r7, #0]
 80117c0:	0052      	lsls	r2, r2, #1
 80117c2:	431a      	orrs	r2, r3
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80117c8:	2300      	movs	r3, #0
}
 80117ca:	4618      	mov	r0, r3
 80117cc:	370c      	adds	r7, #12
 80117ce:	46bd      	mov	sp, r7
 80117d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d4:	4770      	bx	lr
 80117d6:	bf00      	nop
 80117d8:	ffffc001 	.word	0xffffc001

080117dc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80117dc:	b084      	sub	sp, #16
 80117de:	b480      	push	{r7}
 80117e0:	b085      	sub	sp, #20
 80117e2:	af00      	add	r7, sp, #0
 80117e4:	6078      	str	r0, [r7, #4]
 80117e6:	f107 001c 	add.w	r0, r7, #28
 80117ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80117ee:	2300      	movs	r3, #0
 80117f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80117f2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80117f4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80117f6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80117f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80117fa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80117fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80117fe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8011800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8011802:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8011806:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8011808:	68fa      	ldr	r2, [r7, #12]
 801180a:	4313      	orrs	r3, r2
 801180c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	685a      	ldr	r2, [r3, #4]
 8011812:	4b07      	ldr	r3, [pc, #28]	@ (8011830 <SDMMC_Init+0x54>)
 8011814:	4013      	ands	r3, r2
 8011816:	68fa      	ldr	r2, [r7, #12]
 8011818:	431a      	orrs	r2, r3
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801181e:	2300      	movs	r3, #0
}
 8011820:	4618      	mov	r0, r3
 8011822:	3714      	adds	r7, #20
 8011824:	46bd      	mov	sp, r7
 8011826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182a:	b004      	add	sp, #16
 801182c:	4770      	bx	lr
 801182e:	bf00      	nop
 8011830:	ffff8100 	.word	0xffff8100

08011834 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011834:	b480      	push	{r7}
 8011836:	b083      	sub	sp, #12
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8011842:	4618      	mov	r0, r3
 8011844:	370c      	adds	r7, #12
 8011846:	46bd      	mov	sp, r7
 8011848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184c:	4770      	bx	lr

0801184e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 801184e:	b480      	push	{r7}
 8011850:	b083      	sub	sp, #12
 8011852:	af00      	add	r7, sp, #0
 8011854:	6078      	str	r0, [r7, #4]
 8011856:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8011858:	683b      	ldr	r3, [r7, #0]
 801185a:	681a      	ldr	r2, [r3, #0]
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8011862:	2300      	movs	r3, #0
}
 8011864:	4618      	mov	r0, r3
 8011866:	370c      	adds	r7, #12
 8011868:	46bd      	mov	sp, r7
 801186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186e:	4770      	bx	lr

08011870 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8011870:	b480      	push	{r7}
 8011872:	b083      	sub	sp, #12
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	2203      	movs	r2, #3
 801187c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801187e:	2300      	movs	r3, #0
}
 8011880:	4618      	mov	r0, r3
 8011882:	370c      	adds	r7, #12
 8011884:	46bd      	mov	sp, r7
 8011886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188a:	4770      	bx	lr

0801188c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 801188c:	b480      	push	{r7}
 801188e:	b083      	sub	sp, #12
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	f003 0303 	and.w	r3, r3, #3
}
 801189c:	4618      	mov	r0, r3
 801189e:	370c      	adds	r7, #12
 80118a0:	46bd      	mov	sp, r7
 80118a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a6:	4770      	bx	lr

080118a8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80118a8:	b480      	push	{r7}
 80118aa:	b085      	sub	sp, #20
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
 80118b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80118b2:	2300      	movs	r3, #0
 80118b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	681a      	ldr	r2, [r3, #0]
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80118be:	683b      	ldr	r3, [r7, #0]
 80118c0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80118c2:	683b      	ldr	r3, [r7, #0]
 80118c4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80118c6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80118c8:	683b      	ldr	r3, [r7, #0]
 80118ca:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80118cc:	431a      	orrs	r2, r3
                       Command->CPSM);
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80118d2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80118d4:	68fa      	ldr	r2, [r7, #12]
 80118d6:	4313      	orrs	r3, r2
 80118d8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	68da      	ldr	r2, [r3, #12]
 80118de:	4b06      	ldr	r3, [pc, #24]	@ (80118f8 <SDMMC_SendCommand+0x50>)
 80118e0:	4013      	ands	r3, r2
 80118e2:	68fa      	ldr	r2, [r7, #12]
 80118e4:	431a      	orrs	r2, r3
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80118ea:	2300      	movs	r3, #0
}
 80118ec:	4618      	mov	r0, r3
 80118ee:	3714      	adds	r7, #20
 80118f0:	46bd      	mov	sp, r7
 80118f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f6:	4770      	bx	lr
 80118f8:	fffff000 	.word	0xfffff000

080118fc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80118fc:	b480      	push	{r7}
 80118fe:	b083      	sub	sp, #12
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	691b      	ldr	r3, [r3, #16]
 8011908:	b2db      	uxtb	r3, r3
}
 801190a:	4618      	mov	r0, r3
 801190c:	370c      	adds	r7, #12
 801190e:	46bd      	mov	sp, r7
 8011910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011914:	4770      	bx	lr

08011916 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011916:	b480      	push	{r7}
 8011918:	b085      	sub	sp, #20
 801191a:	af00      	add	r7, sp, #0
 801191c:	6078      	str	r0, [r7, #4]
 801191e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	3314      	adds	r3, #20
 8011924:	461a      	mov	r2, r3
 8011926:	683b      	ldr	r3, [r7, #0]
 8011928:	4413      	add	r3, r2
 801192a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	681b      	ldr	r3, [r3, #0]
}  
 8011930:	4618      	mov	r0, r3
 8011932:	3714      	adds	r7, #20
 8011934:	46bd      	mov	sp, r7
 8011936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193a:	4770      	bx	lr

0801193c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 801193c:	b480      	push	{r7}
 801193e:	b085      	sub	sp, #20
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
 8011944:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011946:	2300      	movs	r3, #0
 8011948:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	681a      	ldr	r2, [r3, #0]
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	685a      	ldr	r2, [r3, #4]
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801195e:	683b      	ldr	r3, [r7, #0]
 8011960:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011962:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8011964:	683b      	ldr	r3, [r7, #0]
 8011966:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8011968:	431a      	orrs	r2, r3
                       Data->DPSM);
 801196a:	683b      	ldr	r3, [r7, #0]
 801196c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801196e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011970:	68fa      	ldr	r2, [r7, #12]
 8011972:	4313      	orrs	r3, r2
 8011974:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801197a:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	431a      	orrs	r2, r3
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8011986:	2300      	movs	r3, #0

}
 8011988:	4618      	mov	r0, r3
 801198a:	3714      	adds	r7, #20
 801198c:	46bd      	mov	sp, r7
 801198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011992:	4770      	bx	lr

08011994 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b088      	sub	sp, #32
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
 801199c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801199e:	683b      	ldr	r3, [r7, #0]
 80119a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80119a2:	2310      	movs	r3, #16
 80119a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80119a6:	2340      	movs	r3, #64	@ 0x40
 80119a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80119aa:	2300      	movs	r3, #0
 80119ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80119ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80119b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80119b4:	f107 0308 	add.w	r3, r7, #8
 80119b8:	4619      	mov	r1, r3
 80119ba:	6878      	ldr	r0, [r7, #4]
 80119bc:	f7ff ff74 	bl	80118a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80119c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80119c4:	2110      	movs	r1, #16
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f000 f9d6 	bl	8011d78 <SDMMC_GetCmdResp1>
 80119cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80119ce:	69fb      	ldr	r3, [r7, #28]
}
 80119d0:	4618      	mov	r0, r3
 80119d2:	3720      	adds	r7, #32
 80119d4:	46bd      	mov	sp, r7
 80119d6:	bd80      	pop	{r7, pc}

080119d8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b088      	sub	sp, #32
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
 80119e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80119e2:	683b      	ldr	r3, [r7, #0]
 80119e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80119e6:	2311      	movs	r3, #17
 80119e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80119ea:	2340      	movs	r3, #64	@ 0x40
 80119ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80119ee:	2300      	movs	r3, #0
 80119f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80119f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80119f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80119f8:	f107 0308 	add.w	r3, r7, #8
 80119fc:	4619      	mov	r1, r3
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f7ff ff52 	bl	80118a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011a04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011a08:	2111      	movs	r1, #17
 8011a0a:	6878      	ldr	r0, [r7, #4]
 8011a0c:	f000 f9b4 	bl	8011d78 <SDMMC_GetCmdResp1>
 8011a10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a12:	69fb      	ldr	r3, [r7, #28]
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	3720      	adds	r7, #32
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd80      	pop	{r7, pc}

08011a1c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b088      	sub	sp, #32
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
 8011a24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011a2a:	2312      	movs	r3, #18
 8011a2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011a2e:	2340      	movs	r3, #64	@ 0x40
 8011a30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011a32:	2300      	movs	r3, #0
 8011a34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011a36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011a3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011a3c:	f107 0308 	add.w	r3, r7, #8
 8011a40:	4619      	mov	r1, r3
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f7ff ff30 	bl	80118a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011a48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011a4c:	2112      	movs	r1, #18
 8011a4e:	6878      	ldr	r0, [r7, #4]
 8011a50:	f000 f992 	bl	8011d78 <SDMMC_GetCmdResp1>
 8011a54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a56:	69fb      	ldr	r3, [r7, #28]
}
 8011a58:	4618      	mov	r0, r3
 8011a5a:	3720      	adds	r7, #32
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	bd80      	pop	{r7, pc}

08011a60 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b088      	sub	sp, #32
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
 8011a68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011a6a:	683b      	ldr	r3, [r7, #0]
 8011a6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011a6e:	2318      	movs	r3, #24
 8011a70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011a72:	2340      	movs	r3, #64	@ 0x40
 8011a74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011a76:	2300      	movs	r3, #0
 8011a78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011a7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011a7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011a80:	f107 0308 	add.w	r3, r7, #8
 8011a84:	4619      	mov	r1, r3
 8011a86:	6878      	ldr	r0, [r7, #4]
 8011a88:	f7ff ff0e 	bl	80118a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011a8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011a90:	2118      	movs	r1, #24
 8011a92:	6878      	ldr	r0, [r7, #4]
 8011a94:	f000 f970 	bl	8011d78 <SDMMC_GetCmdResp1>
 8011a98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a9a:	69fb      	ldr	r3, [r7, #28]
}
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	3720      	adds	r7, #32
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}

08011aa4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b088      	sub	sp, #32
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011aae:	683b      	ldr	r3, [r7, #0]
 8011ab0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011ab2:	2319      	movs	r3, #25
 8011ab4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ab6:	2340      	movs	r3, #64	@ 0x40
 8011ab8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011aba:	2300      	movs	r3, #0
 8011abc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011abe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011ac2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ac4:	f107 0308 	add.w	r3, r7, #8
 8011ac8:	4619      	mov	r1, r3
 8011aca:	6878      	ldr	r0, [r7, #4]
 8011acc:	f7ff feec 	bl	80118a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011ad4:	2119      	movs	r1, #25
 8011ad6:	6878      	ldr	r0, [r7, #4]
 8011ad8:	f000 f94e 	bl	8011d78 <SDMMC_GetCmdResp1>
 8011adc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ade:	69fb      	ldr	r3, [r7, #28]
}
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	3720      	adds	r7, #32
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd80      	pop	{r7, pc}

08011ae8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b088      	sub	sp, #32
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011af0:	2300      	movs	r3, #0
 8011af2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011af4:	230c      	movs	r3, #12
 8011af6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011af8:	2340      	movs	r3, #64	@ 0x40
 8011afa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011afc:	2300      	movs	r3, #0
 8011afe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011b00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011b04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011b06:	f107 0308 	add.w	r3, r7, #8
 8011b0a:	4619      	mov	r1, r3
 8011b0c:	6878      	ldr	r0, [r7, #4]
 8011b0e:	f7ff fecb 	bl	80118a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011b12:	4a05      	ldr	r2, [pc, #20]	@ (8011b28 <SDMMC_CmdStopTransfer+0x40>)
 8011b14:	210c      	movs	r1, #12
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f000 f92e 	bl	8011d78 <SDMMC_GetCmdResp1>
 8011b1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011b1e:	69fb      	ldr	r3, [r7, #28]
}
 8011b20:	4618      	mov	r0, r3
 8011b22:	3720      	adds	r7, #32
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}
 8011b28:	05f5e100 	.word	0x05f5e100

08011b2c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b08a      	sub	sp, #40	@ 0x28
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	60f8      	str	r0, [r7, #12]
 8011b34:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011b3c:	2307      	movs	r3, #7
 8011b3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011b40:	2340      	movs	r3, #64	@ 0x40
 8011b42:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011b44:	2300      	movs	r3, #0
 8011b46:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011b48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011b4c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011b4e:	f107 0310 	add.w	r3, r7, #16
 8011b52:	4619      	mov	r1, r3
 8011b54:	68f8      	ldr	r0, [r7, #12]
 8011b56:	f7ff fea7 	bl	80118a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011b5e:	2107      	movs	r1, #7
 8011b60:	68f8      	ldr	r0, [r7, #12]
 8011b62:	f000 f909 	bl	8011d78 <SDMMC_GetCmdResp1>
 8011b66:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8011b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3728      	adds	r7, #40	@ 0x28
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}

08011b72 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011b72:	b580      	push	{r7, lr}
 8011b74:	b088      	sub	sp, #32
 8011b76:	af00      	add	r7, sp, #0
 8011b78:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011b7e:	2300      	movs	r3, #0
 8011b80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011b82:	2300      	movs	r3, #0
 8011b84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011b86:	2300      	movs	r3, #0
 8011b88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011b8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011b8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011b90:	f107 0308 	add.w	r3, r7, #8
 8011b94:	4619      	mov	r1, r3
 8011b96:	6878      	ldr	r0, [r7, #4]
 8011b98:	f7ff fe86 	bl	80118a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011b9c:	6878      	ldr	r0, [r7, #4]
 8011b9e:	f000 fb23 	bl	80121e8 <SDMMC_GetCmdError>
 8011ba2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ba4:	69fb      	ldr	r3, [r7, #28]
}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	3720      	adds	r7, #32
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd80      	pop	{r7, pc}

08011bae <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011bae:	b580      	push	{r7, lr}
 8011bb0:	b088      	sub	sp, #32
 8011bb2:	af00      	add	r7, sp, #0
 8011bb4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011bb6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8011bba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011bbc:	2308      	movs	r3, #8
 8011bbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011bc0:	2340      	movs	r3, #64	@ 0x40
 8011bc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011bc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011bcc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011bce:	f107 0308 	add.w	r3, r7, #8
 8011bd2:	4619      	mov	r1, r3
 8011bd4:	6878      	ldr	r0, [r7, #4]
 8011bd6:	f7ff fe67 	bl	80118a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8011bda:	6878      	ldr	r0, [r7, #4]
 8011bdc:	f000 fab6 	bl	801214c <SDMMC_GetCmdResp7>
 8011be0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011be2:	69fb      	ldr	r3, [r7, #28]
}
 8011be4:	4618      	mov	r0, r3
 8011be6:	3720      	adds	r7, #32
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}

08011bec <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b088      	sub	sp, #32
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
 8011bf4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011bfa:	2337      	movs	r3, #55	@ 0x37
 8011bfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011bfe:	2340      	movs	r3, #64	@ 0x40
 8011c00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c02:	2300      	movs	r3, #0
 8011c04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011c0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c0c:	f107 0308 	add.w	r3, r7, #8
 8011c10:	4619      	mov	r1, r3
 8011c12:	6878      	ldr	r0, [r7, #4]
 8011c14:	f7ff fe48 	bl	80118a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011c1c:	2137      	movs	r1, #55	@ 0x37
 8011c1e:	6878      	ldr	r0, [r7, #4]
 8011c20:	f000 f8aa 	bl	8011d78 <SDMMC_GetCmdResp1>
 8011c24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c26:	69fb      	ldr	r3, [r7, #28]
}
 8011c28:	4618      	mov	r0, r3
 8011c2a:	3720      	adds	r7, #32
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}

08011c30 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b088      	sub	sp, #32
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
 8011c38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8011c3a:	683a      	ldr	r2, [r7, #0]
 8011c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8011c74 <SDMMC_CmdAppOperCommand+0x44>)
 8011c3e:	4313      	orrs	r3, r2
 8011c40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011c42:	2329      	movs	r3, #41	@ 0x29
 8011c44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011c46:	2340      	movs	r3, #64	@ 0x40
 8011c48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011c52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c54:	f107 0308 	add.w	r3, r7, #8
 8011c58:	4619      	mov	r1, r3
 8011c5a:	6878      	ldr	r0, [r7, #4]
 8011c5c:	f7ff fe24 	bl	80118a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8011c60:	6878      	ldr	r0, [r7, #4]
 8011c62:	f000 f9bf 	bl	8011fe4 <SDMMC_GetCmdResp3>
 8011c66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c68:	69fb      	ldr	r3, [r7, #28]
}
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	3720      	adds	r7, #32
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}
 8011c72:	bf00      	nop
 8011c74:	80100000 	.word	0x80100000

08011c78 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b088      	sub	sp, #32
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011c80:	2300      	movs	r3, #0
 8011c82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011c84:	2302      	movs	r3, #2
 8011c86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011c88:	23c0      	movs	r3, #192	@ 0xc0
 8011c8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011c94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c96:	f107 0308 	add.w	r3, r7, #8
 8011c9a:	4619      	mov	r1, r3
 8011c9c:	6878      	ldr	r0, [r7, #4]
 8011c9e:	f7ff fe03 	bl	80118a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	f000 f956 	bl	8011f54 <SDMMC_GetCmdResp2>
 8011ca8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011caa:	69fb      	ldr	r3, [r7, #28]
}
 8011cac:	4618      	mov	r0, r3
 8011cae:	3720      	adds	r7, #32
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd80      	pop	{r7, pc}

08011cb4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b088      	sub	sp, #32
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
 8011cbc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011cc2:	2309      	movs	r3, #9
 8011cc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011cc6:	23c0      	movs	r3, #192	@ 0xc0
 8011cc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011cca:	2300      	movs	r3, #0
 8011ccc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011cce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011cd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011cd4:	f107 0308 	add.w	r3, r7, #8
 8011cd8:	4619      	mov	r1, r3
 8011cda:	6878      	ldr	r0, [r7, #4]
 8011cdc:	f7ff fde4 	bl	80118a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011ce0:	6878      	ldr	r0, [r7, #4]
 8011ce2:	f000 f937 	bl	8011f54 <SDMMC_GetCmdResp2>
 8011ce6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ce8:	69fb      	ldr	r3, [r7, #28]
}
 8011cea:	4618      	mov	r0, r3
 8011cec:	3720      	adds	r7, #32
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bd80      	pop	{r7, pc}

08011cf2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8011cf2:	b580      	push	{r7, lr}
 8011cf4:	b088      	sub	sp, #32
 8011cf6:	af00      	add	r7, sp, #0
 8011cf8:	6078      	str	r0, [r7, #4]
 8011cfa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011d00:	2303      	movs	r3, #3
 8011d02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d04:	2340      	movs	r3, #64	@ 0x40
 8011d06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d08:	2300      	movs	r3, #0
 8011d0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011d10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d12:	f107 0308 	add.w	r3, r7, #8
 8011d16:	4619      	mov	r1, r3
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f7ff fdc5 	bl	80118a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011d1e:	683a      	ldr	r2, [r7, #0]
 8011d20:	2103      	movs	r1, #3
 8011d22:	6878      	ldr	r0, [r7, #4]
 8011d24:	f000 f99c 	bl	8012060 <SDMMC_GetCmdResp6>
 8011d28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d2a:	69fb      	ldr	r3, [r7, #28]
}
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	3720      	adds	r7, #32
 8011d30:	46bd      	mov	sp, r7
 8011d32:	bd80      	pop	{r7, pc}

08011d34 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b088      	sub	sp, #32
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
 8011d3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011d42:	230d      	movs	r3, #13
 8011d44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d46:	2340      	movs	r3, #64	@ 0x40
 8011d48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011d52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d54:	f107 0308 	add.w	r3, r7, #8
 8011d58:	4619      	mov	r1, r3
 8011d5a:	6878      	ldr	r0, [r7, #4]
 8011d5c:	f7ff fda4 	bl	80118a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8011d60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011d64:	210d      	movs	r1, #13
 8011d66:	6878      	ldr	r0, [r7, #4]
 8011d68:	f000 f806 	bl	8011d78 <SDMMC_GetCmdResp1>
 8011d6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d6e:	69fb      	ldr	r3, [r7, #28]
}
 8011d70:	4618      	mov	r0, r3
 8011d72:	3720      	adds	r7, #32
 8011d74:	46bd      	mov	sp, r7
 8011d76:	bd80      	pop	{r7, pc}

08011d78 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b088      	sub	sp, #32
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	60f8      	str	r0, [r7, #12]
 8011d80:	460b      	mov	r3, r1
 8011d82:	607a      	str	r2, [r7, #4]
 8011d84:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011d86:	4b70      	ldr	r3, [pc, #448]	@ (8011f48 <SDMMC_GetCmdResp1+0x1d0>)
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	4a70      	ldr	r2, [pc, #448]	@ (8011f4c <SDMMC_GetCmdResp1+0x1d4>)
 8011d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8011d90:	0a5a      	lsrs	r2, r3, #9
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	fb02 f303 	mul.w	r3, r2, r3
 8011d98:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8011d9a:	69fb      	ldr	r3, [r7, #28]
 8011d9c:	1e5a      	subs	r2, r3, #1
 8011d9e:	61fa      	str	r2, [r7, #28]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d102      	bne.n	8011daa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011da4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011da8:	e0c9      	b.n	8011f3e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011dae:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011db0:	69bb      	ldr	r3, [r7, #24]
 8011db2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d0ef      	beq.n	8011d9a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011dba:	69bb      	ldr	r3, [r7, #24]
 8011dbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d1ea      	bne.n	8011d9a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011dc8:	f003 0304 	and.w	r3, r3, #4
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d004      	beq.n	8011dda <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	2204      	movs	r2, #4
 8011dd4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011dd6:	2304      	movs	r3, #4
 8011dd8:	e0b1      	b.n	8011f3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011dde:	f003 0301 	and.w	r3, r3, #1
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d004      	beq.n	8011df0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	2201      	movs	r2, #1
 8011dea:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011dec:	2301      	movs	r3, #1
 8011dee:	e0a6      	b.n	8011f3e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	22c5      	movs	r2, #197	@ 0xc5
 8011df4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011df6:	68f8      	ldr	r0, [r7, #12]
 8011df8:	f7ff fd80 	bl	80118fc <SDMMC_GetCommandResponse>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	461a      	mov	r2, r3
 8011e00:	7afb      	ldrb	r3, [r7, #11]
 8011e02:	4293      	cmp	r3, r2
 8011e04:	d001      	beq.n	8011e0a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011e06:	2301      	movs	r3, #1
 8011e08:	e099      	b.n	8011f3e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011e0a:	2100      	movs	r1, #0
 8011e0c:	68f8      	ldr	r0, [r7, #12]
 8011e0e:	f7ff fd82 	bl	8011916 <SDMMC_GetResponse>
 8011e12:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011e14:	697a      	ldr	r2, [r7, #20]
 8011e16:	4b4e      	ldr	r3, [pc, #312]	@ (8011f50 <SDMMC_GetCmdResp1+0x1d8>)
 8011e18:	4013      	ands	r3, r2
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d101      	bne.n	8011e22 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	e08d      	b.n	8011f3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011e22:	697b      	ldr	r3, [r7, #20]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	da02      	bge.n	8011e2e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011e28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011e2c:	e087      	b.n	8011f3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011e2e:	697b      	ldr	r3, [r7, #20]
 8011e30:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d001      	beq.n	8011e3c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011e38:	2340      	movs	r3, #64	@ 0x40
 8011e3a:	e080      	b.n	8011f3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011e3c:	697b      	ldr	r3, [r7, #20]
 8011e3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d001      	beq.n	8011e4a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011e46:	2380      	movs	r3, #128	@ 0x80
 8011e48:	e079      	b.n	8011f3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011e4a:	697b      	ldr	r3, [r7, #20]
 8011e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d002      	beq.n	8011e5a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011e54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011e58:	e071      	b.n	8011f3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011e5a:	697b      	ldr	r3, [r7, #20]
 8011e5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d002      	beq.n	8011e6a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011e64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011e68:	e069      	b.n	8011f3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011e6a:	697b      	ldr	r3, [r7, #20]
 8011e6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d002      	beq.n	8011e7a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011e74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011e78:	e061      	b.n	8011f3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011e7a:	697b      	ldr	r3, [r7, #20]
 8011e7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d002      	beq.n	8011e8a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011e84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011e88:	e059      	b.n	8011f3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011e8a:	697b      	ldr	r3, [r7, #20]
 8011e8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d002      	beq.n	8011e9a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011e94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011e98:	e051      	b.n	8011f3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011e9a:	697b      	ldr	r3, [r7, #20]
 8011e9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d002      	beq.n	8011eaa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011ea4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011ea8:	e049      	b.n	8011f3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011eaa:	697b      	ldr	r3, [r7, #20]
 8011eac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d002      	beq.n	8011eba <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011eb4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8011eb8:	e041      	b.n	8011f3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011eba:	697b      	ldr	r3, [r7, #20]
 8011ebc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d002      	beq.n	8011eca <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011ec4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011ec8:	e039      	b.n	8011f3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011eca:	697b      	ldr	r3, [r7, #20]
 8011ecc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d002      	beq.n	8011eda <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011ed4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8011ed8:	e031      	b.n	8011f3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011eda:	697b      	ldr	r3, [r7, #20]
 8011edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d002      	beq.n	8011eea <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011ee4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8011ee8:	e029      	b.n	8011f3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011eea:	697b      	ldr	r3, [r7, #20]
 8011eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d002      	beq.n	8011efa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011ef4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011ef8:	e021      	b.n	8011f3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011efa:	697b      	ldr	r3, [r7, #20]
 8011efc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d002      	beq.n	8011f0a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011f04:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011f08:	e019      	b.n	8011f3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011f0a:	697b      	ldr	r3, [r7, #20]
 8011f0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d002      	beq.n	8011f1a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011f14:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8011f18:	e011      	b.n	8011f3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011f1a:	697b      	ldr	r3, [r7, #20]
 8011f1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d002      	beq.n	8011f2a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011f24:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8011f28:	e009      	b.n	8011f3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8011f2a:	697b      	ldr	r3, [r7, #20]
 8011f2c:	f003 0308 	and.w	r3, r3, #8
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d002      	beq.n	8011f3a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011f34:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8011f38:	e001      	b.n	8011f3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011f3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8011f3e:	4618      	mov	r0, r3
 8011f40:	3720      	adds	r7, #32
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}
 8011f46:	bf00      	nop
 8011f48:	20000054 	.word	0x20000054
 8011f4c:	10624dd3 	.word	0x10624dd3
 8011f50:	fdffe008 	.word	0xfdffe008

08011f54 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011f54:	b480      	push	{r7}
 8011f56:	b085      	sub	sp, #20
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8011fdc <SDMMC_GetCmdResp2+0x88>)
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	4a1f      	ldr	r2, [pc, #124]	@ (8011fe0 <SDMMC_GetCmdResp2+0x8c>)
 8011f62:	fba2 2303 	umull	r2, r3, r2, r3
 8011f66:	0a5b      	lsrs	r3, r3, #9
 8011f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011f6c:	fb02 f303 	mul.w	r3, r2, r3
 8011f70:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	1e5a      	subs	r2, r3, #1
 8011f76:	60fa      	str	r2, [r7, #12]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d102      	bne.n	8011f82 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011f7c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011f80:	e026      	b.n	8011fd0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011f86:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011f88:	68bb      	ldr	r3, [r7, #8]
 8011f8a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d0ef      	beq.n	8011f72 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011f92:	68bb      	ldr	r3, [r7, #8]
 8011f94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d1ea      	bne.n	8011f72 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011fa0:	f003 0304 	and.w	r3, r3, #4
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d004      	beq.n	8011fb2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2204      	movs	r2, #4
 8011fac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011fae:	2304      	movs	r3, #4
 8011fb0:	e00e      	b.n	8011fd0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011fb6:	f003 0301 	and.w	r3, r3, #1
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d004      	beq.n	8011fc8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	2201      	movs	r2, #1
 8011fc2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011fc4:	2301      	movs	r3, #1
 8011fc6:	e003      	b.n	8011fd0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	22c5      	movs	r2, #197	@ 0xc5
 8011fcc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8011fce:	2300      	movs	r3, #0
}
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	3714      	adds	r7, #20
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fda:	4770      	bx	lr
 8011fdc:	20000054 	.word	0x20000054
 8011fe0:	10624dd3 	.word	0x10624dd3

08011fe4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011fe4:	b480      	push	{r7}
 8011fe6:	b085      	sub	sp, #20
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011fec:	4b1a      	ldr	r3, [pc, #104]	@ (8012058 <SDMMC_GetCmdResp3+0x74>)
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	4a1a      	ldr	r2, [pc, #104]	@ (801205c <SDMMC_GetCmdResp3+0x78>)
 8011ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8011ff6:	0a5b      	lsrs	r3, r3, #9
 8011ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011ffc:	fb02 f303 	mul.w	r3, r2, r3
 8012000:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	1e5a      	subs	r2, r3, #1
 8012006:	60fa      	str	r2, [r7, #12]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d102      	bne.n	8012012 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801200c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8012010:	e01b      	b.n	801204a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012016:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012018:	68bb      	ldr	r3, [r7, #8]
 801201a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801201e:	2b00      	cmp	r3, #0
 8012020:	d0ef      	beq.n	8012002 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012022:	68bb      	ldr	r3, [r7, #8]
 8012024:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012028:	2b00      	cmp	r3, #0
 801202a:	d1ea      	bne.n	8012002 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012030:	f003 0304 	and.w	r3, r3, #4
 8012034:	2b00      	cmp	r3, #0
 8012036:	d004      	beq.n	8012042 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	2204      	movs	r2, #4
 801203c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801203e:	2304      	movs	r3, #4
 8012040:	e003      	b.n	801204a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	22c5      	movs	r2, #197	@ 0xc5
 8012046:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012048:	2300      	movs	r3, #0
}
 801204a:	4618      	mov	r0, r3
 801204c:	3714      	adds	r7, #20
 801204e:	46bd      	mov	sp, r7
 8012050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012054:	4770      	bx	lr
 8012056:	bf00      	nop
 8012058:	20000054 	.word	0x20000054
 801205c:	10624dd3 	.word	0x10624dd3

08012060 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b088      	sub	sp, #32
 8012064:	af00      	add	r7, sp, #0
 8012066:	60f8      	str	r0, [r7, #12]
 8012068:	460b      	mov	r3, r1
 801206a:	607a      	str	r2, [r7, #4]
 801206c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801206e:	4b35      	ldr	r3, [pc, #212]	@ (8012144 <SDMMC_GetCmdResp6+0xe4>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	4a35      	ldr	r2, [pc, #212]	@ (8012148 <SDMMC_GetCmdResp6+0xe8>)
 8012074:	fba2 2303 	umull	r2, r3, r2, r3
 8012078:	0a5b      	lsrs	r3, r3, #9
 801207a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801207e:	fb02 f303 	mul.w	r3, r2, r3
 8012082:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8012084:	69fb      	ldr	r3, [r7, #28]
 8012086:	1e5a      	subs	r2, r3, #1
 8012088:	61fa      	str	r2, [r7, #28]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d102      	bne.n	8012094 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801208e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8012092:	e052      	b.n	801213a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012098:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801209a:	69bb      	ldr	r3, [r7, #24]
 801209c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d0ef      	beq.n	8012084 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80120a4:	69bb      	ldr	r3, [r7, #24]
 80120a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d1ea      	bne.n	8012084 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80120b2:	f003 0304 	and.w	r3, r3, #4
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d004      	beq.n	80120c4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	2204      	movs	r2, #4
 80120be:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80120c0:	2304      	movs	r3, #4
 80120c2:	e03a      	b.n	801213a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80120c8:	f003 0301 	and.w	r3, r3, #1
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d004      	beq.n	80120da <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	2201      	movs	r2, #1
 80120d4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80120d6:	2301      	movs	r3, #1
 80120d8:	e02f      	b.n	801213a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80120da:	68f8      	ldr	r0, [r7, #12]
 80120dc:	f7ff fc0e 	bl	80118fc <SDMMC_GetCommandResponse>
 80120e0:	4603      	mov	r3, r0
 80120e2:	461a      	mov	r2, r3
 80120e4:	7afb      	ldrb	r3, [r7, #11]
 80120e6:	4293      	cmp	r3, r2
 80120e8:	d001      	beq.n	80120ee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80120ea:	2301      	movs	r3, #1
 80120ec:	e025      	b.n	801213a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	22c5      	movs	r2, #197	@ 0xc5
 80120f2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80120f4:	2100      	movs	r1, #0
 80120f6:	68f8      	ldr	r0, [r7, #12]
 80120f8:	f7ff fc0d 	bl	8011916 <SDMMC_GetResponse>
 80120fc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80120fe:	697b      	ldr	r3, [r7, #20]
 8012100:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8012104:	2b00      	cmp	r3, #0
 8012106:	d106      	bne.n	8012116 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8012108:	697b      	ldr	r3, [r7, #20]
 801210a:	0c1b      	lsrs	r3, r3, #16
 801210c:	b29a      	uxth	r2, r3
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8012112:	2300      	movs	r3, #0
 8012114:	e011      	b.n	801213a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012116:	697b      	ldr	r3, [r7, #20]
 8012118:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801211c:	2b00      	cmp	r3, #0
 801211e:	d002      	beq.n	8012126 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012120:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8012124:	e009      	b.n	801213a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012126:	697b      	ldr	r3, [r7, #20]
 8012128:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801212c:	2b00      	cmp	r3, #0
 801212e:	d002      	beq.n	8012136 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012130:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012134:	e001      	b.n	801213a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012136:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801213a:	4618      	mov	r0, r3
 801213c:	3720      	adds	r7, #32
 801213e:	46bd      	mov	sp, r7
 8012140:	bd80      	pop	{r7, pc}
 8012142:	bf00      	nop
 8012144:	20000054 	.word	0x20000054
 8012148:	10624dd3 	.word	0x10624dd3

0801214c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 801214c:	b480      	push	{r7}
 801214e:	b085      	sub	sp, #20
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012154:	4b22      	ldr	r3, [pc, #136]	@ (80121e0 <SDMMC_GetCmdResp7+0x94>)
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	4a22      	ldr	r2, [pc, #136]	@ (80121e4 <SDMMC_GetCmdResp7+0x98>)
 801215a:	fba2 2303 	umull	r2, r3, r2, r3
 801215e:	0a5b      	lsrs	r3, r3, #9
 8012160:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012164:	fb02 f303 	mul.w	r3, r2, r3
 8012168:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	1e5a      	subs	r2, r3, #1
 801216e:	60fa      	str	r2, [r7, #12]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d102      	bne.n	801217a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012174:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8012178:	e02c      	b.n	80121d4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801217e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012180:	68bb      	ldr	r3, [r7, #8]
 8012182:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8012186:	2b00      	cmp	r3, #0
 8012188:	d0ef      	beq.n	801216a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801218a:	68bb      	ldr	r3, [r7, #8]
 801218c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012190:	2b00      	cmp	r3, #0
 8012192:	d1ea      	bne.n	801216a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012198:	f003 0304 	and.w	r3, r3, #4
 801219c:	2b00      	cmp	r3, #0
 801219e:	d004      	beq.n	80121aa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2204      	movs	r2, #4
 80121a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80121a6:	2304      	movs	r3, #4
 80121a8:	e014      	b.n	80121d4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80121ae:	f003 0301 	and.w	r3, r3, #1
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d004      	beq.n	80121c0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	2201      	movs	r2, #1
 80121ba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80121bc:	2301      	movs	r3, #1
 80121be:	e009      	b.n	80121d4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80121c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d002      	beq.n	80121d2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	2240      	movs	r2, #64	@ 0x40
 80121d0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80121d2:	2300      	movs	r3, #0
  
}
 80121d4:	4618      	mov	r0, r3
 80121d6:	3714      	adds	r7, #20
 80121d8:	46bd      	mov	sp, r7
 80121da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121de:	4770      	bx	lr
 80121e0:	20000054 	.word	0x20000054
 80121e4:	10624dd3 	.word	0x10624dd3

080121e8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80121e8:	b480      	push	{r7}
 80121ea:	b085      	sub	sp, #20
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80121f0:	4b11      	ldr	r3, [pc, #68]	@ (8012238 <SDMMC_GetCmdError+0x50>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	4a11      	ldr	r2, [pc, #68]	@ (801223c <SDMMC_GetCmdError+0x54>)
 80121f6:	fba2 2303 	umull	r2, r3, r2, r3
 80121fa:	0a5b      	lsrs	r3, r3, #9
 80121fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012200:	fb02 f303 	mul.w	r3, r2, r3
 8012204:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	1e5a      	subs	r2, r3, #1
 801220a:	60fa      	str	r2, [r7, #12]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d102      	bne.n	8012216 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012210:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8012214:	e009      	b.n	801222a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801221a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801221e:	2b00      	cmp	r3, #0
 8012220:	d0f1      	beq.n	8012206 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	22c5      	movs	r2, #197	@ 0xc5
 8012226:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8012228:	2300      	movs	r3, #0
}
 801222a:	4618      	mov	r0, r3
 801222c:	3714      	adds	r7, #20
 801222e:	46bd      	mov	sp, r7
 8012230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012234:	4770      	bx	lr
 8012236:	bf00      	nop
 8012238:	20000054 	.word	0x20000054
 801223c:	10624dd3 	.word	0x10624dd3

08012240 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012244:	4904      	ldr	r1, [pc, #16]	@ (8012258 <MX_FATFS_Init+0x18>)
 8012246:	4805      	ldr	r0, [pc, #20]	@ (801225c <MX_FATFS_Init+0x1c>)
 8012248:	f000 fb58 	bl	80128fc <FATFS_LinkDriver>
 801224c:	4603      	mov	r3, r0
 801224e:	461a      	mov	r2, r3
 8012250:	4b03      	ldr	r3, [pc, #12]	@ (8012260 <MX_FATFS_Init+0x20>)
 8012252:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012254:	bf00      	nop
 8012256:	bd80      	pop	{r7, pc}
 8012258:	200010b8 	.word	0x200010b8
 801225c:	080256e4 	.word	0x080256e4
 8012260:	200010b4 	.word	0x200010b4

08012264 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012264:	b480      	push	{r7}
 8012266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8012268:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801226a:	4618      	mov	r0, r3
 801226c:	46bd      	mov	sp, r7
 801226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012272:	4770      	bx	lr

08012274 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b082      	sub	sp, #8
 8012278:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801227a:	2300      	movs	r3, #0
 801227c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801227e:	f000 f888 	bl	8012392 <BSP_SD_IsDetected>
 8012282:	4603      	mov	r3, r0
 8012284:	2b01      	cmp	r3, #1
 8012286:	d001      	beq.n	801228c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8012288:	2302      	movs	r3, #2
 801228a:	e005      	b.n	8012298 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 801228c:	4804      	ldr	r0, [pc, #16]	@ (80122a0 <BSP_SD_Init+0x2c>)
 801228e:	f7fd f8b8 	bl	800f402 <HAL_SD_Init>
 8012292:	4603      	mov	r3, r0
 8012294:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8012296:	79fb      	ldrb	r3, [r7, #7]
}
 8012298:	4618      	mov	r0, r3
 801229a:	3708      	adds	r7, #8
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}
 80122a0:	20000728 	.word	0x20000728

080122a4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b086      	sub	sp, #24
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	60f8      	str	r0, [r7, #12]
 80122ac:	60b9      	str	r1, [r7, #8]
 80122ae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80122b0:	2300      	movs	r3, #0
 80122b2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	68ba      	ldr	r2, [r7, #8]
 80122b8:	68f9      	ldr	r1, [r7, #12]
 80122ba:	4806      	ldr	r0, [pc, #24]	@ (80122d4 <BSP_SD_ReadBlocks_DMA+0x30>)
 80122bc:	f7fd f95a 	bl	800f574 <HAL_SD_ReadBlocks_DMA>
 80122c0:	4603      	mov	r3, r0
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d001      	beq.n	80122ca <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80122c6:	2301      	movs	r3, #1
 80122c8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80122ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80122cc:	4618      	mov	r0, r3
 80122ce:	3718      	adds	r7, #24
 80122d0:	46bd      	mov	sp, r7
 80122d2:	bd80      	pop	{r7, pc}
 80122d4:	20000728 	.word	0x20000728

080122d8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b086      	sub	sp, #24
 80122dc:	af00      	add	r7, sp, #0
 80122de:	60f8      	str	r0, [r7, #12]
 80122e0:	60b9      	str	r1, [r7, #8]
 80122e2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80122e4:	2300      	movs	r3, #0
 80122e6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	68ba      	ldr	r2, [r7, #8]
 80122ec:	68f9      	ldr	r1, [r7, #12]
 80122ee:	4806      	ldr	r0, [pc, #24]	@ (8012308 <BSP_SD_WriteBlocks_DMA+0x30>)
 80122f0:	f7fd fa22 	bl	800f738 <HAL_SD_WriteBlocks_DMA>
 80122f4:	4603      	mov	r3, r0
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d001      	beq.n	80122fe <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80122fa:	2301      	movs	r3, #1
 80122fc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80122fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8012300:	4618      	mov	r0, r3
 8012302:	3718      	adds	r7, #24
 8012304:	46bd      	mov	sp, r7
 8012306:	bd80      	pop	{r7, pc}
 8012308:	20000728 	.word	0x20000728

0801230c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012310:	4805      	ldr	r0, [pc, #20]	@ (8012328 <BSP_SD_GetCardState+0x1c>)
 8012312:	f7fd fe47 	bl	800ffa4 <HAL_SD_GetCardState>
 8012316:	4603      	mov	r3, r0
 8012318:	2b04      	cmp	r3, #4
 801231a:	bf14      	ite	ne
 801231c:	2301      	movne	r3, #1
 801231e:	2300      	moveq	r3, #0
 8012320:	b2db      	uxtb	r3, r3
}
 8012322:	4618      	mov	r0, r3
 8012324:	bd80      	pop	{r7, pc}
 8012326:	bf00      	nop
 8012328:	20000728 	.word	0x20000728

0801232c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b082      	sub	sp, #8
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8012334:	6879      	ldr	r1, [r7, #4]
 8012336:	4803      	ldr	r0, [pc, #12]	@ (8012344 <BSP_SD_GetCardInfo+0x18>)
 8012338:	f7fd fe08 	bl	800ff4c <HAL_SD_GetCardInfo>
}
 801233c:	bf00      	nop
 801233e:	3708      	adds	r7, #8
 8012340:	46bd      	mov	sp, r7
 8012342:	bd80      	pop	{r7, pc}
 8012344:	20000728 	.word	0x20000728

08012348 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b082      	sub	sp, #8
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8012350:	f000 f818 	bl	8012384 <BSP_SD_AbortCallback>
}
 8012354:	bf00      	nop
 8012356:	3708      	adds	r7, #8
 8012358:	46bd      	mov	sp, r7
 801235a:	bd80      	pop	{r7, pc}

0801235c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b082      	sub	sp, #8
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8012364:	f000 f9c4 	bl	80126f0 <BSP_SD_WriteCpltCallback>
}
 8012368:	bf00      	nop
 801236a:	3708      	adds	r7, #8
 801236c:	46bd      	mov	sp, r7
 801236e:	bd80      	pop	{r7, pc}

08012370 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b082      	sub	sp, #8
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8012378:	f000 f9c8 	bl	801270c <BSP_SD_ReadCpltCallback>
}
 801237c:	bf00      	nop
 801237e:	3708      	adds	r7, #8
 8012380:	46bd      	mov	sp, r7
 8012382:	bd80      	pop	{r7, pc}

08012384 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8012384:	b480      	push	{r7}
 8012386:	af00      	add	r7, sp, #0

}
 8012388:	bf00      	nop
 801238a:	46bd      	mov	sp, r7
 801238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012390:	4770      	bx	lr

08012392 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012392:	b580      	push	{r7, lr}
 8012394:	b082      	sub	sp, #8
 8012396:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8012398:	2301      	movs	r3, #1
 801239a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801239c:	f000 f80c 	bl	80123b8 <BSP_PlatformIsDetected>
 80123a0:	4603      	mov	r3, r0
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d101      	bne.n	80123aa <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80123a6:	2300      	movs	r3, #0
 80123a8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80123aa:	79fb      	ldrb	r3, [r7, #7]
 80123ac:	b2db      	uxtb	r3, r3
}
 80123ae:	4618      	mov	r0, r3
 80123b0:	3708      	adds	r7, #8
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}
	...

080123b8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b082      	sub	sp, #8
 80123bc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80123be:	2301      	movs	r3, #1
 80123c0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80123c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80123c6:	4806      	ldr	r0, [pc, #24]	@ (80123e0 <BSP_PlatformIsDetected+0x28>)
 80123c8:	f7fa f81e 	bl	800c408 <HAL_GPIO_ReadPin>
 80123cc:	4603      	mov	r3, r0
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d001      	beq.n	80123d6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80123d2:	2300      	movs	r3, #0
 80123d4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80123d6:	79fb      	ldrb	r3, [r7, #7]
}
 80123d8:	4618      	mov	r0, r3
 80123da:	3708      	adds	r7, #8
 80123dc:	46bd      	mov	sp, r7
 80123de:	bd80      	pop	{r7, pc}
 80123e0:	40020800 	.word	0x40020800

080123e4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b084      	sub	sp, #16
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 80123ec:	f000 fb1e 	bl	8012a2c <osKernelSysTick>
 80123f0:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 80123f2:	e006      	b.n	8012402 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80123f4:	f7ff ff8a 	bl	801230c <BSP_SD_GetCardState>
 80123f8:	4603      	mov	r3, r0
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d101      	bne.n	8012402 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80123fe:	2300      	movs	r3, #0
 8012400:	e009      	b.n	8012416 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8012402:	f000 fb13 	bl	8012a2c <osKernelSysTick>
 8012406:	4602      	mov	r2, r0
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	1ad3      	subs	r3, r2, r3
 801240c:	687a      	ldr	r2, [r7, #4]
 801240e:	429a      	cmp	r2, r3
 8012410:	d8f0      	bhi.n	80123f4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8012412:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012416:	4618      	mov	r0, r3
 8012418:	3710      	adds	r7, #16
 801241a:	46bd      	mov	sp, r7
 801241c:	bd80      	pop	{r7, pc}
	...

08012420 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b082      	sub	sp, #8
 8012424:	af00      	add	r7, sp, #0
 8012426:	4603      	mov	r3, r0
 8012428:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801242a:	4b0b      	ldr	r3, [pc, #44]	@ (8012458 <SD_CheckStatus+0x38>)
 801242c:	2201      	movs	r2, #1
 801242e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012430:	f7ff ff6c 	bl	801230c <BSP_SD_GetCardState>
 8012434:	4603      	mov	r3, r0
 8012436:	2b00      	cmp	r3, #0
 8012438:	d107      	bne.n	801244a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801243a:	4b07      	ldr	r3, [pc, #28]	@ (8012458 <SD_CheckStatus+0x38>)
 801243c:	781b      	ldrb	r3, [r3, #0]
 801243e:	b2db      	uxtb	r3, r3
 8012440:	f023 0301 	bic.w	r3, r3, #1
 8012444:	b2da      	uxtb	r2, r3
 8012446:	4b04      	ldr	r3, [pc, #16]	@ (8012458 <SD_CheckStatus+0x38>)
 8012448:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801244a:	4b03      	ldr	r3, [pc, #12]	@ (8012458 <SD_CheckStatus+0x38>)
 801244c:	781b      	ldrb	r3, [r3, #0]
 801244e:	b2db      	uxtb	r3, r3
}
 8012450:	4618      	mov	r0, r3
 8012452:	3708      	adds	r7, #8
 8012454:	46bd      	mov	sp, r7
 8012456:	bd80      	pop	{r7, pc}
 8012458:	20000099 	.word	0x20000099

0801245c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801245c:	b590      	push	{r4, r7, lr}
 801245e:	b087      	sub	sp, #28
 8012460:	af00      	add	r7, sp, #0
 8012462:	4603      	mov	r3, r0
 8012464:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8012466:	4b20      	ldr	r3, [pc, #128]	@ (80124e8 <SD_initialize+0x8c>)
 8012468:	2201      	movs	r2, #1
 801246a:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 801246c:	f000 fad2 	bl	8012a14 <osKernelRunning>
 8012470:	4603      	mov	r3, r0
 8012472:	2b00      	cmp	r3, #0
 8012474:	d030      	beq.n	80124d8 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8012476:	f7ff fefd 	bl	8012274 <BSP_SD_Init>
 801247a:	4603      	mov	r3, r0
 801247c:	2b00      	cmp	r3, #0
 801247e:	d107      	bne.n	8012490 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8012480:	79fb      	ldrb	r3, [r7, #7]
 8012482:	4618      	mov	r0, r3
 8012484:	f7ff ffcc 	bl	8012420 <SD_CheckStatus>
 8012488:	4603      	mov	r3, r0
 801248a:	461a      	mov	r2, r3
 801248c:	4b16      	ldr	r3, [pc, #88]	@ (80124e8 <SD_initialize+0x8c>)
 801248e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8012490:	4b15      	ldr	r3, [pc, #84]	@ (80124e8 <SD_initialize+0x8c>)
 8012492:	781b      	ldrb	r3, [r3, #0]
 8012494:	b2db      	uxtb	r3, r3
 8012496:	2b01      	cmp	r3, #1
 8012498:	d01e      	beq.n	80124d8 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 801249a:	4b14      	ldr	r3, [pc, #80]	@ (80124ec <SD_initialize+0x90>)
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d10e      	bne.n	80124c0 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80124a2:	4b13      	ldr	r3, [pc, #76]	@ (80124f0 <SD_initialize+0x94>)
 80124a4:	f107 0408 	add.w	r4, r7, #8
 80124a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80124aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80124ae:	f107 0308 	add.w	r3, r7, #8
 80124b2:	2100      	movs	r1, #0
 80124b4:	4618      	mov	r0, r3
 80124b6:	f000 fc0a 	bl	8012cce <osMessageCreate>
 80124ba:	4603      	mov	r3, r0
 80124bc:	4a0b      	ldr	r2, [pc, #44]	@ (80124ec <SD_initialize+0x90>)
 80124be:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 80124c0:	4b0a      	ldr	r3, [pc, #40]	@ (80124ec <SD_initialize+0x90>)
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d107      	bne.n	80124d8 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 80124c8:	4b07      	ldr	r3, [pc, #28]	@ (80124e8 <SD_initialize+0x8c>)
 80124ca:	781b      	ldrb	r3, [r3, #0]
 80124cc:	b2db      	uxtb	r3, r3
 80124ce:	f043 0301 	orr.w	r3, r3, #1
 80124d2:	b2da      	uxtb	r2, r3
 80124d4:	4b04      	ldr	r3, [pc, #16]	@ (80124e8 <SD_initialize+0x8c>)
 80124d6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80124d8:	4b03      	ldr	r3, [pc, #12]	@ (80124e8 <SD_initialize+0x8c>)
 80124da:	781b      	ldrb	r3, [r3, #0]
 80124dc:	b2db      	uxtb	r3, r3
}
 80124de:	4618      	mov	r0, r3
 80124e0:	371c      	adds	r7, #28
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd90      	pop	{r4, r7, pc}
 80124e6:	bf00      	nop
 80124e8:	20000099 	.word	0x20000099
 80124ec:	20001520 	.word	0x20001520
 80124f0:	0801735c 	.word	0x0801735c

080124f4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b082      	sub	sp, #8
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	4603      	mov	r3, r0
 80124fc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80124fe:	79fb      	ldrb	r3, [r7, #7]
 8012500:	4618      	mov	r0, r3
 8012502:	f7ff ff8d 	bl	8012420 <SD_CheckStatus>
 8012506:	4603      	mov	r3, r0
}
 8012508:	4618      	mov	r0, r3
 801250a:	3708      	adds	r7, #8
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}

08012510 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b08a      	sub	sp, #40	@ 0x28
 8012514:	af00      	add	r7, sp, #0
 8012516:	60b9      	str	r1, [r7, #8]
 8012518:	607a      	str	r2, [r7, #4]
 801251a:	603b      	str	r3, [r7, #0]
 801251c:	4603      	mov	r3, r0
 801251e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8012520:	2301      	movs	r3, #1
 8012522:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012526:	f247 5030 	movw	r0, #30000	@ 0x7530
 801252a:	f7ff ff5b 	bl	80123e4 <SD_CheckStatusWithTimeout>
 801252e:	4603      	mov	r3, r0
 8012530:	2b00      	cmp	r3, #0
 8012532:	da02      	bge.n	801253a <SD_read+0x2a>
  {
    return res;
 8012534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012538:	e032      	b.n	80125a0 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 801253a:	683a      	ldr	r2, [r7, #0]
 801253c:	6879      	ldr	r1, [r7, #4]
 801253e:	68b8      	ldr	r0, [r7, #8]
 8012540:	f7ff feb0 	bl	80122a4 <BSP_SD_ReadBlocks_DMA>
 8012544:	4603      	mov	r3, r0
 8012546:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 801254a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801254e:	2b00      	cmp	r3, #0
 8012550:	d124      	bne.n	801259c <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8012552:	4b15      	ldr	r3, [pc, #84]	@ (80125a8 <SD_read+0x98>)
 8012554:	6819      	ldr	r1, [r3, #0]
 8012556:	f107 0314 	add.w	r3, r7, #20
 801255a:	f247 5230 	movw	r2, #30000	@ 0x7530
 801255e:	4618      	mov	r0, r3
 8012560:	f000 fc1e 	bl	8012da0 <osMessageGet>

    if (event.status == osEventMessage)
 8012564:	697b      	ldr	r3, [r7, #20]
 8012566:	2b10      	cmp	r3, #16
 8012568:	d118      	bne.n	801259c <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 801256a:	69bb      	ldr	r3, [r7, #24]
 801256c:	2b01      	cmp	r3, #1
 801256e:	d115      	bne.n	801259c <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8012570:	f000 fa5c 	bl	8012a2c <osKernelSysTick>
 8012574:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8012576:	e008      	b.n	801258a <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012578:	f7ff fec8 	bl	801230c <BSP_SD_GetCardState>
 801257c:	4603      	mov	r3, r0
 801257e:	2b00      	cmp	r3, #0
 8012580:	d103      	bne.n	801258a <SD_read+0x7a>
              {
                res = RES_OK;
 8012582:	2300      	movs	r3, #0
 8012584:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8012588:	e008      	b.n	801259c <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 801258a:	f000 fa4f 	bl	8012a2c <osKernelSysTick>
 801258e:	4602      	mov	r2, r0
 8012590:	6a3b      	ldr	r3, [r7, #32]
 8012592:	1ad3      	subs	r3, r2, r3
 8012594:	f247 522f 	movw	r2, #29999	@ 0x752f
 8012598:	4293      	cmp	r3, r2
 801259a:	d9ed      	bls.n	8012578 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 801259c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80125a0:	4618      	mov	r0, r3
 80125a2:	3728      	adds	r7, #40	@ 0x28
 80125a4:	46bd      	mov	sp, r7
 80125a6:	bd80      	pop	{r7, pc}
 80125a8:	20001520 	.word	0x20001520

080125ac <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b08a      	sub	sp, #40	@ 0x28
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	60b9      	str	r1, [r7, #8]
 80125b4:	607a      	str	r2, [r7, #4]
 80125b6:	603b      	str	r3, [r7, #0]
 80125b8:	4603      	mov	r3, r0
 80125ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80125bc:	2301      	movs	r3, #1
 80125be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80125c2:	f247 5030 	movw	r0, #30000	@ 0x7530
 80125c6:	f7ff ff0d 	bl	80123e4 <SD_CheckStatusWithTimeout>
 80125ca:	4603      	mov	r3, r0
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	da02      	bge.n	80125d6 <SD_write+0x2a>
  {
    return res;
 80125d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80125d4:	e02e      	b.n	8012634 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80125d6:	683a      	ldr	r2, [r7, #0]
 80125d8:	6879      	ldr	r1, [r7, #4]
 80125da:	68b8      	ldr	r0, [r7, #8]
 80125dc:	f7ff fe7c 	bl	80122d8 <BSP_SD_WriteBlocks_DMA>
 80125e0:	4603      	mov	r3, r0
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d124      	bne.n	8012630 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80125e6:	4b15      	ldr	r3, [pc, #84]	@ (801263c <SD_write+0x90>)
 80125e8:	6819      	ldr	r1, [r3, #0]
 80125ea:	f107 0314 	add.w	r3, r7, #20
 80125ee:	f247 5230 	movw	r2, #30000	@ 0x7530
 80125f2:	4618      	mov	r0, r3
 80125f4:	f000 fbd4 	bl	8012da0 <osMessageGet>

    if (event.status == osEventMessage)
 80125f8:	697b      	ldr	r3, [r7, #20]
 80125fa:	2b10      	cmp	r3, #16
 80125fc:	d118      	bne.n	8012630 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 80125fe:	69bb      	ldr	r3, [r7, #24]
 8012600:	2b02      	cmp	r3, #2
 8012602:	d115      	bne.n	8012630 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8012604:	f000 fa12 	bl	8012a2c <osKernelSysTick>
 8012608:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 801260a:	e008      	b.n	801261e <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801260c:	f7ff fe7e 	bl	801230c <BSP_SD_GetCardState>
 8012610:	4603      	mov	r3, r0
 8012612:	2b00      	cmp	r3, #0
 8012614:	d103      	bne.n	801261e <SD_write+0x72>
          {
            res = RES_OK;
 8012616:	2300      	movs	r3, #0
 8012618:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 801261c:	e008      	b.n	8012630 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 801261e:	f000 fa05 	bl	8012a2c <osKernelSysTick>
 8012622:	4602      	mov	r2, r0
 8012624:	6a3b      	ldr	r3, [r7, #32]
 8012626:	1ad3      	subs	r3, r2, r3
 8012628:	f247 522f 	movw	r2, #29999	@ 0x752f
 801262c:	4293      	cmp	r3, r2
 801262e:	d9ed      	bls.n	801260c <SD_write+0x60>
    }

  }
#endif

  return res;
 8012630:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8012634:	4618      	mov	r0, r3
 8012636:	3728      	adds	r7, #40	@ 0x28
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}
 801263c:	20001520 	.word	0x20001520

08012640 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b08c      	sub	sp, #48	@ 0x30
 8012644:	af00      	add	r7, sp, #0
 8012646:	4603      	mov	r3, r0
 8012648:	603a      	str	r2, [r7, #0]
 801264a:	71fb      	strb	r3, [r7, #7]
 801264c:	460b      	mov	r3, r1
 801264e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012650:	2301      	movs	r3, #1
 8012652:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012656:	4b25      	ldr	r3, [pc, #148]	@ (80126ec <SD_ioctl+0xac>)
 8012658:	781b      	ldrb	r3, [r3, #0]
 801265a:	b2db      	uxtb	r3, r3
 801265c:	f003 0301 	and.w	r3, r3, #1
 8012660:	2b00      	cmp	r3, #0
 8012662:	d001      	beq.n	8012668 <SD_ioctl+0x28>
 8012664:	2303      	movs	r3, #3
 8012666:	e03c      	b.n	80126e2 <SD_ioctl+0xa2>

  switch (cmd)
 8012668:	79bb      	ldrb	r3, [r7, #6]
 801266a:	2b03      	cmp	r3, #3
 801266c:	d834      	bhi.n	80126d8 <SD_ioctl+0x98>
 801266e:	a201      	add	r2, pc, #4	@ (adr r2, 8012674 <SD_ioctl+0x34>)
 8012670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012674:	08012685 	.word	0x08012685
 8012678:	0801268d 	.word	0x0801268d
 801267c:	080126a5 	.word	0x080126a5
 8012680:	080126bf 	.word	0x080126bf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012684:	2300      	movs	r3, #0
 8012686:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801268a:	e028      	b.n	80126de <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801268c:	f107 030c 	add.w	r3, r7, #12
 8012690:	4618      	mov	r0, r3
 8012692:	f7ff fe4b 	bl	801232c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801269c:	2300      	movs	r3, #0
 801269e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80126a2:	e01c      	b.n	80126de <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80126a4:	f107 030c 	add.w	r3, r7, #12
 80126a8:	4618      	mov	r0, r3
 80126aa:	f7ff fe3f 	bl	801232c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80126ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126b0:	b29a      	uxth	r2, r3
 80126b2:	683b      	ldr	r3, [r7, #0]
 80126b4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80126b6:	2300      	movs	r3, #0
 80126b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80126bc:	e00f      	b.n	80126de <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80126be:	f107 030c 	add.w	r3, r7, #12
 80126c2:	4618      	mov	r0, r3
 80126c4:	f7ff fe32 	bl	801232c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80126c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126ca:	0a5a      	lsrs	r2, r3, #9
 80126cc:	683b      	ldr	r3, [r7, #0]
 80126ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80126d0:	2300      	movs	r3, #0
 80126d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80126d6:	e002      	b.n	80126de <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80126d8:	2304      	movs	r3, #4
 80126da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80126de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80126e2:	4618      	mov	r0, r3
 80126e4:	3730      	adds	r7, #48	@ 0x30
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd80      	pop	{r7, pc}
 80126ea:	bf00      	nop
 80126ec:	20000099 	.word	0x20000099

080126f0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 80126f4:	4b04      	ldr	r3, [pc, #16]	@ (8012708 <BSP_SD_WriteCpltCallback+0x18>)
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	2200      	movs	r2, #0
 80126fa:	2102      	movs	r1, #2
 80126fc:	4618      	mov	r0, r3
 80126fe:	f000 fb0f 	bl	8012d20 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8012702:	bf00      	nop
 8012704:	bd80      	pop	{r7, pc}
 8012706:	bf00      	nop
 8012708:	20001520 	.word	0x20001520

0801270c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801270c:	b580      	push	{r7, lr}
 801270e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8012710:	4b04      	ldr	r3, [pc, #16]	@ (8012724 <BSP_SD_ReadCpltCallback+0x18>)
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	2200      	movs	r2, #0
 8012716:	2101      	movs	r1, #1
 8012718:	4618      	mov	r0, r3
 801271a:	f000 fb01 	bl	8012d20 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 801271e:	bf00      	nop
 8012720:	bd80      	pop	{r7, pc}
 8012722:	bf00      	nop
 8012724:	20001520 	.word	0x20001520

08012728 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b084      	sub	sp, #16
 801272c:	af00      	add	r7, sp, #0
 801272e:	4603      	mov	r3, r0
 8012730:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012732:	79fb      	ldrb	r3, [r7, #7]
 8012734:	4a08      	ldr	r2, [pc, #32]	@ (8012758 <disk_status+0x30>)
 8012736:	009b      	lsls	r3, r3, #2
 8012738:	4413      	add	r3, r2
 801273a:	685b      	ldr	r3, [r3, #4]
 801273c:	685b      	ldr	r3, [r3, #4]
 801273e:	79fa      	ldrb	r2, [r7, #7]
 8012740:	4905      	ldr	r1, [pc, #20]	@ (8012758 <disk_status+0x30>)
 8012742:	440a      	add	r2, r1
 8012744:	7a12      	ldrb	r2, [r2, #8]
 8012746:	4610      	mov	r0, r2
 8012748:	4798      	blx	r3
 801274a:	4603      	mov	r3, r0
 801274c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801274e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012750:	4618      	mov	r0, r3
 8012752:	3710      	adds	r7, #16
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}
 8012758:	20001524 	.word	0x20001524

0801275c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801275c:	b580      	push	{r7, lr}
 801275e:	b084      	sub	sp, #16
 8012760:	af00      	add	r7, sp, #0
 8012762:	4603      	mov	r3, r0
 8012764:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012766:	2300      	movs	r3, #0
 8012768:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801276a:	79fb      	ldrb	r3, [r7, #7]
 801276c:	4a0d      	ldr	r2, [pc, #52]	@ (80127a4 <disk_initialize+0x48>)
 801276e:	5cd3      	ldrb	r3, [r2, r3]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d111      	bne.n	8012798 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012774:	79fb      	ldrb	r3, [r7, #7]
 8012776:	4a0b      	ldr	r2, [pc, #44]	@ (80127a4 <disk_initialize+0x48>)
 8012778:	2101      	movs	r1, #1
 801277a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801277c:	79fb      	ldrb	r3, [r7, #7]
 801277e:	4a09      	ldr	r2, [pc, #36]	@ (80127a4 <disk_initialize+0x48>)
 8012780:	009b      	lsls	r3, r3, #2
 8012782:	4413      	add	r3, r2
 8012784:	685b      	ldr	r3, [r3, #4]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	79fa      	ldrb	r2, [r7, #7]
 801278a:	4906      	ldr	r1, [pc, #24]	@ (80127a4 <disk_initialize+0x48>)
 801278c:	440a      	add	r2, r1
 801278e:	7a12      	ldrb	r2, [r2, #8]
 8012790:	4610      	mov	r0, r2
 8012792:	4798      	blx	r3
 8012794:	4603      	mov	r3, r0
 8012796:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012798:	7bfb      	ldrb	r3, [r7, #15]
}
 801279a:	4618      	mov	r0, r3
 801279c:	3710      	adds	r7, #16
 801279e:	46bd      	mov	sp, r7
 80127a0:	bd80      	pop	{r7, pc}
 80127a2:	bf00      	nop
 80127a4:	20001524 	.word	0x20001524

080127a8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80127a8:	b590      	push	{r4, r7, lr}
 80127aa:	b087      	sub	sp, #28
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	60b9      	str	r1, [r7, #8]
 80127b0:	607a      	str	r2, [r7, #4]
 80127b2:	603b      	str	r3, [r7, #0]
 80127b4:	4603      	mov	r3, r0
 80127b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80127b8:	7bfb      	ldrb	r3, [r7, #15]
 80127ba:	4a0a      	ldr	r2, [pc, #40]	@ (80127e4 <disk_read+0x3c>)
 80127bc:	009b      	lsls	r3, r3, #2
 80127be:	4413      	add	r3, r2
 80127c0:	685b      	ldr	r3, [r3, #4]
 80127c2:	689c      	ldr	r4, [r3, #8]
 80127c4:	7bfb      	ldrb	r3, [r7, #15]
 80127c6:	4a07      	ldr	r2, [pc, #28]	@ (80127e4 <disk_read+0x3c>)
 80127c8:	4413      	add	r3, r2
 80127ca:	7a18      	ldrb	r0, [r3, #8]
 80127cc:	683b      	ldr	r3, [r7, #0]
 80127ce:	687a      	ldr	r2, [r7, #4]
 80127d0:	68b9      	ldr	r1, [r7, #8]
 80127d2:	47a0      	blx	r4
 80127d4:	4603      	mov	r3, r0
 80127d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80127d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80127da:	4618      	mov	r0, r3
 80127dc:	371c      	adds	r7, #28
 80127de:	46bd      	mov	sp, r7
 80127e0:	bd90      	pop	{r4, r7, pc}
 80127e2:	bf00      	nop
 80127e4:	20001524 	.word	0x20001524

080127e8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80127e8:	b590      	push	{r4, r7, lr}
 80127ea:	b087      	sub	sp, #28
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	60b9      	str	r1, [r7, #8]
 80127f0:	607a      	str	r2, [r7, #4]
 80127f2:	603b      	str	r3, [r7, #0]
 80127f4:	4603      	mov	r3, r0
 80127f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80127f8:	7bfb      	ldrb	r3, [r7, #15]
 80127fa:	4a0a      	ldr	r2, [pc, #40]	@ (8012824 <disk_write+0x3c>)
 80127fc:	009b      	lsls	r3, r3, #2
 80127fe:	4413      	add	r3, r2
 8012800:	685b      	ldr	r3, [r3, #4]
 8012802:	68dc      	ldr	r4, [r3, #12]
 8012804:	7bfb      	ldrb	r3, [r7, #15]
 8012806:	4a07      	ldr	r2, [pc, #28]	@ (8012824 <disk_write+0x3c>)
 8012808:	4413      	add	r3, r2
 801280a:	7a18      	ldrb	r0, [r3, #8]
 801280c:	683b      	ldr	r3, [r7, #0]
 801280e:	687a      	ldr	r2, [r7, #4]
 8012810:	68b9      	ldr	r1, [r7, #8]
 8012812:	47a0      	blx	r4
 8012814:	4603      	mov	r3, r0
 8012816:	75fb      	strb	r3, [r7, #23]
  return res;
 8012818:	7dfb      	ldrb	r3, [r7, #23]
}
 801281a:	4618      	mov	r0, r3
 801281c:	371c      	adds	r7, #28
 801281e:	46bd      	mov	sp, r7
 8012820:	bd90      	pop	{r4, r7, pc}
 8012822:	bf00      	nop
 8012824:	20001524 	.word	0x20001524

08012828 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b084      	sub	sp, #16
 801282c:	af00      	add	r7, sp, #0
 801282e:	4603      	mov	r3, r0
 8012830:	603a      	str	r2, [r7, #0]
 8012832:	71fb      	strb	r3, [r7, #7]
 8012834:	460b      	mov	r3, r1
 8012836:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012838:	79fb      	ldrb	r3, [r7, #7]
 801283a:	4a09      	ldr	r2, [pc, #36]	@ (8012860 <disk_ioctl+0x38>)
 801283c:	009b      	lsls	r3, r3, #2
 801283e:	4413      	add	r3, r2
 8012840:	685b      	ldr	r3, [r3, #4]
 8012842:	691b      	ldr	r3, [r3, #16]
 8012844:	79fa      	ldrb	r2, [r7, #7]
 8012846:	4906      	ldr	r1, [pc, #24]	@ (8012860 <disk_ioctl+0x38>)
 8012848:	440a      	add	r2, r1
 801284a:	7a10      	ldrb	r0, [r2, #8]
 801284c:	79b9      	ldrb	r1, [r7, #6]
 801284e:	683a      	ldr	r2, [r7, #0]
 8012850:	4798      	blx	r3
 8012852:	4603      	mov	r3, r0
 8012854:	73fb      	strb	r3, [r7, #15]
  return res;
 8012856:	7bfb      	ldrb	r3, [r7, #15]
}
 8012858:	4618      	mov	r0, r3
 801285a:	3710      	adds	r7, #16
 801285c:	46bd      	mov	sp, r7
 801285e:	bd80      	pop	{r7, pc}
 8012860:	20001524 	.word	0x20001524

08012864 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012864:	b480      	push	{r7}
 8012866:	b087      	sub	sp, #28
 8012868:	af00      	add	r7, sp, #0
 801286a:	60f8      	str	r0, [r7, #12]
 801286c:	60b9      	str	r1, [r7, #8]
 801286e:	4613      	mov	r3, r2
 8012870:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012872:	2301      	movs	r3, #1
 8012874:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012876:	2300      	movs	r3, #0
 8012878:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801287a:	4b1f      	ldr	r3, [pc, #124]	@ (80128f8 <FATFS_LinkDriverEx+0x94>)
 801287c:	7a5b      	ldrb	r3, [r3, #9]
 801287e:	b2db      	uxtb	r3, r3
 8012880:	2b00      	cmp	r3, #0
 8012882:	d131      	bne.n	80128e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012884:	4b1c      	ldr	r3, [pc, #112]	@ (80128f8 <FATFS_LinkDriverEx+0x94>)
 8012886:	7a5b      	ldrb	r3, [r3, #9]
 8012888:	b2db      	uxtb	r3, r3
 801288a:	461a      	mov	r2, r3
 801288c:	4b1a      	ldr	r3, [pc, #104]	@ (80128f8 <FATFS_LinkDriverEx+0x94>)
 801288e:	2100      	movs	r1, #0
 8012890:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012892:	4b19      	ldr	r3, [pc, #100]	@ (80128f8 <FATFS_LinkDriverEx+0x94>)
 8012894:	7a5b      	ldrb	r3, [r3, #9]
 8012896:	b2db      	uxtb	r3, r3
 8012898:	4a17      	ldr	r2, [pc, #92]	@ (80128f8 <FATFS_LinkDriverEx+0x94>)
 801289a:	009b      	lsls	r3, r3, #2
 801289c:	4413      	add	r3, r2
 801289e:	68fa      	ldr	r2, [r7, #12]
 80128a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80128a2:	4b15      	ldr	r3, [pc, #84]	@ (80128f8 <FATFS_LinkDriverEx+0x94>)
 80128a4:	7a5b      	ldrb	r3, [r3, #9]
 80128a6:	b2db      	uxtb	r3, r3
 80128a8:	461a      	mov	r2, r3
 80128aa:	4b13      	ldr	r3, [pc, #76]	@ (80128f8 <FATFS_LinkDriverEx+0x94>)
 80128ac:	4413      	add	r3, r2
 80128ae:	79fa      	ldrb	r2, [r7, #7]
 80128b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80128b2:	4b11      	ldr	r3, [pc, #68]	@ (80128f8 <FATFS_LinkDriverEx+0x94>)
 80128b4:	7a5b      	ldrb	r3, [r3, #9]
 80128b6:	b2db      	uxtb	r3, r3
 80128b8:	1c5a      	adds	r2, r3, #1
 80128ba:	b2d1      	uxtb	r1, r2
 80128bc:	4a0e      	ldr	r2, [pc, #56]	@ (80128f8 <FATFS_LinkDriverEx+0x94>)
 80128be:	7251      	strb	r1, [r2, #9]
 80128c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80128c2:	7dbb      	ldrb	r3, [r7, #22]
 80128c4:	3330      	adds	r3, #48	@ 0x30
 80128c6:	b2da      	uxtb	r2, r3
 80128c8:	68bb      	ldr	r3, [r7, #8]
 80128ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80128cc:	68bb      	ldr	r3, [r7, #8]
 80128ce:	3301      	adds	r3, #1
 80128d0:	223a      	movs	r2, #58	@ 0x3a
 80128d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80128d4:	68bb      	ldr	r3, [r7, #8]
 80128d6:	3302      	adds	r3, #2
 80128d8:	222f      	movs	r2, #47	@ 0x2f
 80128da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80128dc:	68bb      	ldr	r3, [r7, #8]
 80128de:	3303      	adds	r3, #3
 80128e0:	2200      	movs	r2, #0
 80128e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80128e4:	2300      	movs	r3, #0
 80128e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80128e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80128ea:	4618      	mov	r0, r3
 80128ec:	371c      	adds	r7, #28
 80128ee:	46bd      	mov	sp, r7
 80128f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f4:	4770      	bx	lr
 80128f6:	bf00      	nop
 80128f8:	20001524 	.word	0x20001524

080128fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b082      	sub	sp, #8
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
 8012904:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012906:	2200      	movs	r2, #0
 8012908:	6839      	ldr	r1, [r7, #0]
 801290a:	6878      	ldr	r0, [r7, #4]
 801290c:	f7ff ffaa 	bl	8012864 <FATFS_LinkDriverEx>
 8012910:	4603      	mov	r3, r0
}
 8012912:	4618      	mov	r0, r3
 8012914:	3708      	adds	r7, #8
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}

0801291a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801291a:	b580      	push	{r7, lr}
 801291c:	b086      	sub	sp, #24
 801291e:	af00      	add	r7, sp, #0
 8012920:	4603      	mov	r3, r0
 8012922:	6039      	str	r1, [r7, #0]
 8012924:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8012926:	2300      	movs	r3, #0
 8012928:	60fb      	str	r3, [r7, #12]
 801292a:	2300      	movs	r3, #0
 801292c:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 801292e:	f107 030c 	add.w	r3, r7, #12
 8012932:	2101      	movs	r1, #1
 8012934:	4618      	mov	r0, r3
 8012936:	f000 f901 	bl	8012b3c <osSemaphoreCreate>
 801293a:	4602      	mov	r2, r0
 801293c:	683b      	ldr	r3, [r7, #0]
 801293e:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8012940:	683b      	ldr	r3, [r7, #0]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	2b00      	cmp	r3, #0
 8012946:	bf14      	ite	ne
 8012948:	2301      	movne	r3, #1
 801294a:	2300      	moveq	r3, #0
 801294c:	b2db      	uxtb	r3, r3
 801294e:	617b      	str	r3, [r7, #20]

    return ret;
 8012950:	697b      	ldr	r3, [r7, #20]
}
 8012952:	4618      	mov	r0, r3
 8012954:	3718      	adds	r7, #24
 8012956:	46bd      	mov	sp, r7
 8012958:	bd80      	pop	{r7, pc}

0801295a <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 801295a:	b580      	push	{r7, lr}
 801295c:	b082      	sub	sp, #8
 801295e:	af00      	add	r7, sp, #0
 8012960:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8012962:	6878      	ldr	r0, [r7, #4]
 8012964:	f000 f9a0 	bl	8012ca8 <osSemaphoreDelete>
#endif
    return 1;
 8012968:	2301      	movs	r3, #1
}
 801296a:	4618      	mov	r0, r3
 801296c:	3708      	adds	r7, #8
 801296e:	46bd      	mov	sp, r7
 8012970:	bd80      	pop	{r7, pc}

08012972 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8012972:	b580      	push	{r7, lr}
 8012974:	b084      	sub	sp, #16
 8012976:	af00      	add	r7, sp, #0
 8012978:	6078      	str	r0, [r7, #4]
  int ret = 0;
 801297a:	2300      	movs	r3, #0
 801297c:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 801297e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012982:	6878      	ldr	r0, [r7, #4]
 8012984:	f000 f90c 	bl	8012ba0 <osSemaphoreWait>
 8012988:	4603      	mov	r3, r0
 801298a:	2b00      	cmp	r3, #0
 801298c:	d101      	bne.n	8012992 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 801298e:	2301      	movs	r3, #1
 8012990:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8012992:	68fb      	ldr	r3, [r7, #12]
}
 8012994:	4618      	mov	r0, r3
 8012996:	3710      	adds	r7, #16
 8012998:	46bd      	mov	sp, r7
 801299a:	bd80      	pop	{r7, pc}

0801299c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801299c:	b580      	push	{r7, lr}
 801299e:	b082      	sub	sp, #8
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80129a4:	6878      	ldr	r0, [r7, #4]
 80129a6:	f000 f949 	bl	8012c3c <osSemaphoreRelease>
#endif
}
 80129aa:	bf00      	nop
 80129ac:	3708      	adds	r7, #8
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}

080129b2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80129b2:	b480      	push	{r7}
 80129b4:	b085      	sub	sp, #20
 80129b6:	af00      	add	r7, sp, #0
 80129b8:	4603      	mov	r3, r0
 80129ba:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80129bc:	2300      	movs	r3, #0
 80129be:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80129c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80129c4:	2b84      	cmp	r3, #132	@ 0x84
 80129c6:	d005      	beq.n	80129d4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80129c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	4413      	add	r3, r2
 80129d0:	3303      	adds	r3, #3
 80129d2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80129d4:	68fb      	ldr	r3, [r7, #12]
}
 80129d6:	4618      	mov	r0, r3
 80129d8:	3714      	adds	r7, #20
 80129da:	46bd      	mov	sp, r7
 80129dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e0:	4770      	bx	lr

080129e2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80129e2:	b480      	push	{r7}
 80129e4:	b083      	sub	sp, #12
 80129e6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80129e8:	f3ef 8305 	mrs	r3, IPSR
 80129ec:	607b      	str	r3, [r7, #4]
  return(result);
 80129ee:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	bf14      	ite	ne
 80129f4:	2301      	movne	r3, #1
 80129f6:	2300      	moveq	r3, #0
 80129f8:	b2db      	uxtb	r3, r3
}
 80129fa:	4618      	mov	r0, r3
 80129fc:	370c      	adds	r7, #12
 80129fe:	46bd      	mov	sp, r7
 8012a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a04:	4770      	bx	lr

08012a06 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012a06:	b580      	push	{r7, lr}
 8012a08:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012a0a:	f001 fe81 	bl	8014710 <vTaskStartScheduler>
  
  return osOK;
 8012a0e:	2300      	movs	r3, #0
}
 8012a10:	4618      	mov	r0, r3
 8012a12:	bd80      	pop	{r7, pc}

08012a14 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8012a18:	f002 faf6 	bl	8015008 <xTaskGetSchedulerState>
 8012a1c:	4603      	mov	r3, r0
 8012a1e:	2b01      	cmp	r3, #1
 8012a20:	d101      	bne.n	8012a26 <osKernelRunning+0x12>
    return 0;
 8012a22:	2300      	movs	r3, #0
 8012a24:	e000      	b.n	8012a28 <osKernelRunning+0x14>
  else
    return 1;
 8012a26:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8012a28:	4618      	mov	r0, r3
 8012a2a:	bd80      	pop	{r7, pc}

08012a2c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8012a30:	f7ff ffd7 	bl	80129e2 <inHandlerMode>
 8012a34:	4603      	mov	r3, r0
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d003      	beq.n	8012a42 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8012a3a:	f001 ff95 	bl	8014968 <xTaskGetTickCountFromISR>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	e002      	b.n	8012a48 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8012a42:	f001 ff81 	bl	8014948 <xTaskGetTickCount>
 8012a46:	4603      	mov	r3, r0
  }
}
 8012a48:	4618      	mov	r0, r3
 8012a4a:	bd80      	pop	{r7, pc}

08012a4c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a4e:	b089      	sub	sp, #36	@ 0x24
 8012a50:	af04      	add	r7, sp, #16
 8012a52:	6078      	str	r0, [r7, #4]
 8012a54:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	695b      	ldr	r3, [r3, #20]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d020      	beq.n	8012aa0 <osThreadCreate+0x54>
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	699b      	ldr	r3, [r3, #24]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d01c      	beq.n	8012aa0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	685c      	ldr	r4, [r3, #4]
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	691e      	ldr	r6, [r3, #16]
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012a78:	4618      	mov	r0, r3
 8012a7a:	f7ff ff9a 	bl	80129b2 <makeFreeRtosPriority>
 8012a7e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	695b      	ldr	r3, [r3, #20]
 8012a84:	687a      	ldr	r2, [r7, #4]
 8012a86:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012a88:	9202      	str	r2, [sp, #8]
 8012a8a:	9301      	str	r3, [sp, #4]
 8012a8c:	9100      	str	r1, [sp, #0]
 8012a8e:	683b      	ldr	r3, [r7, #0]
 8012a90:	4632      	mov	r2, r6
 8012a92:	4629      	mov	r1, r5
 8012a94:	4620      	mov	r0, r4
 8012a96:	f001 fa93 	bl	8013fc0 <xTaskCreateStatic>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	60fb      	str	r3, [r7, #12]
 8012a9e:	e01c      	b.n	8012ada <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	685c      	ldr	r4, [r3, #4]
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012aac:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	f7ff ff7c 	bl	80129b2 <makeFreeRtosPriority>
 8012aba:	4602      	mov	r2, r0
 8012abc:	f107 030c 	add.w	r3, r7, #12
 8012ac0:	9301      	str	r3, [sp, #4]
 8012ac2:	9200      	str	r2, [sp, #0]
 8012ac4:	683b      	ldr	r3, [r7, #0]
 8012ac6:	4632      	mov	r2, r6
 8012ac8:	4629      	mov	r1, r5
 8012aca:	4620      	mov	r0, r4
 8012acc:	f001 fade 	bl	801408c <xTaskCreate>
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	2b01      	cmp	r3, #1
 8012ad4:	d001      	beq.n	8012ada <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	e000      	b.n	8012adc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8012ada:	68fb      	ldr	r3, [r7, #12]
}
 8012adc:	4618      	mov	r0, r3
 8012ade:	3714      	adds	r7, #20
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012ae4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b084      	sub	sp, #16
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d001      	beq.n	8012afa <osDelay+0x16>
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	e000      	b.n	8012afc <osDelay+0x18>
 8012afa:	2301      	movs	r3, #1
 8012afc:	4618      	mov	r0, r3
 8012afe:	f001 fca5 	bl	801444c <vTaskDelay>
  
  return osOK;
 8012b02:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012b04:	4618      	mov	r0, r3
 8012b06:	3710      	adds	r7, #16
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	bd80      	pop	{r7, pc}

08012b0c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b082      	sub	sp, #8
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	685b      	ldr	r3, [r3, #4]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d007      	beq.n	8012b2c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	685b      	ldr	r3, [r3, #4]
 8012b20:	4619      	mov	r1, r3
 8012b22:	2001      	movs	r0, #1
 8012b24:	f000 fbeb 	bl	80132fe <xQueueCreateMutexStatic>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	e003      	b.n	8012b34 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012b2c:	2001      	movs	r0, #1
 8012b2e:	f000 fbce 	bl	80132ce <xQueueCreateMutex>
 8012b32:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012b34:	4618      	mov	r0, r3
 8012b36:	3708      	adds	r7, #8
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	bd80      	pop	{r7, pc}

08012b3c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b086      	sub	sp, #24
 8012b40:	af02      	add	r7, sp, #8
 8012b42:	6078      	str	r0, [r7, #4]
 8012b44:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	685b      	ldr	r3, [r3, #4]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d00f      	beq.n	8012b6e <osSemaphoreCreate+0x32>
    if (count == 1) {
 8012b4e:	683b      	ldr	r3, [r7, #0]
 8012b50:	2b01      	cmp	r3, #1
 8012b52:	d10a      	bne.n	8012b6a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	685b      	ldr	r3, [r3, #4]
 8012b58:	2203      	movs	r2, #3
 8012b5a:	9200      	str	r2, [sp, #0]
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	2100      	movs	r1, #0
 8012b60:	2001      	movs	r0, #1
 8012b62:	f000 fab1 	bl	80130c8 <xQueueGenericCreateStatic>
 8012b66:	4603      	mov	r3, r0
 8012b68:	e016      	b.n	8012b98 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	e014      	b.n	8012b98 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8012b6e:	683b      	ldr	r3, [r7, #0]
 8012b70:	2b01      	cmp	r3, #1
 8012b72:	d110      	bne.n	8012b96 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8012b74:	2203      	movs	r2, #3
 8012b76:	2100      	movs	r1, #0
 8012b78:	2001      	movs	r0, #1
 8012b7a:	f000 fb2c 	bl	80131d6 <xQueueGenericCreate>
 8012b7e:	60f8      	str	r0, [r7, #12]
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d005      	beq.n	8012b92 <osSemaphoreCreate+0x56>
 8012b86:	2300      	movs	r3, #0
 8012b88:	2200      	movs	r2, #0
 8012b8a:	2100      	movs	r1, #0
 8012b8c:	68f8      	ldr	r0, [r7, #12]
 8012b8e:	f000 fbd1 	bl	8013334 <xQueueGenericSend>
      return sema;
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	e000      	b.n	8012b98 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8012b96:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8012b98:	4618      	mov	r0, r3
 8012b9a:	3710      	adds	r7, #16
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	bd80      	pop	{r7, pc}

08012ba0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	b084      	sub	sp, #16
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	6078      	str	r0, [r7, #4]
 8012ba8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012baa:	2300      	movs	r3, #0
 8012bac:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d101      	bne.n	8012bb8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8012bb4:	2380      	movs	r3, #128	@ 0x80
 8012bb6:	e03a      	b.n	8012c2e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8012bb8:	2300      	movs	r3, #0
 8012bba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8012bbc:	683b      	ldr	r3, [r7, #0]
 8012bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bc2:	d103      	bne.n	8012bcc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8012bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8012bc8:	60fb      	str	r3, [r7, #12]
 8012bca:	e009      	b.n	8012be0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8012bcc:	683b      	ldr	r3, [r7, #0]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d006      	beq.n	8012be0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8012bd2:	683b      	ldr	r3, [r7, #0]
 8012bd4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d101      	bne.n	8012be0 <osSemaphoreWait+0x40>
      ticks = 1;
 8012bdc:	2301      	movs	r3, #1
 8012bde:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8012be0:	f7ff feff 	bl	80129e2 <inHandlerMode>
 8012be4:	4603      	mov	r3, r0
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d017      	beq.n	8012c1a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012bea:	f107 0308 	add.w	r3, r7, #8
 8012bee:	461a      	mov	r2, r3
 8012bf0:	2100      	movs	r1, #0
 8012bf2:	6878      	ldr	r0, [r7, #4]
 8012bf4:	f000 ffe4 	bl	8013bc0 <xQueueReceiveFromISR>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	2b01      	cmp	r3, #1
 8012bfc:	d001      	beq.n	8012c02 <osSemaphoreWait+0x62>
      return osErrorOS;
 8012bfe:	23ff      	movs	r3, #255	@ 0xff
 8012c00:	e015      	b.n	8012c2e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d011      	beq.n	8012c2c <osSemaphoreWait+0x8c>
 8012c08:	4b0b      	ldr	r3, [pc, #44]	@ (8012c38 <osSemaphoreWait+0x98>)
 8012c0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012c0e:	601a      	str	r2, [r3, #0]
 8012c10:	f3bf 8f4f 	dsb	sy
 8012c14:	f3bf 8f6f 	isb	sy
 8012c18:	e008      	b.n	8012c2c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8012c1a:	68f9      	ldr	r1, [r7, #12]
 8012c1c:	6878      	ldr	r0, [r7, #4]
 8012c1e:	f000 feb7 	bl	8013990 <xQueueSemaphoreTake>
 8012c22:	4603      	mov	r3, r0
 8012c24:	2b01      	cmp	r3, #1
 8012c26:	d001      	beq.n	8012c2c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8012c28:	23ff      	movs	r3, #255	@ 0xff
 8012c2a:	e000      	b.n	8012c2e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8012c2c:	2300      	movs	r3, #0
}
 8012c2e:	4618      	mov	r0, r3
 8012c30:	3710      	adds	r7, #16
 8012c32:	46bd      	mov	sp, r7
 8012c34:	bd80      	pop	{r7, pc}
 8012c36:	bf00      	nop
 8012c38:	e000ed04 	.word	0xe000ed04

08012c3c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b084      	sub	sp, #16
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8012c44:	2300      	movs	r3, #0
 8012c46:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8012c48:	2300      	movs	r3, #0
 8012c4a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8012c4c:	f7ff fec9 	bl	80129e2 <inHandlerMode>
 8012c50:	4603      	mov	r3, r0
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d016      	beq.n	8012c84 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012c56:	f107 0308 	add.w	r3, r7, #8
 8012c5a:	4619      	mov	r1, r3
 8012c5c:	6878      	ldr	r0, [r7, #4]
 8012c5e:	f000 fd16 	bl	801368e <xQueueGiveFromISR>
 8012c62:	4603      	mov	r3, r0
 8012c64:	2b01      	cmp	r3, #1
 8012c66:	d001      	beq.n	8012c6c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8012c68:	23ff      	movs	r3, #255	@ 0xff
 8012c6a:	e017      	b.n	8012c9c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012c6c:	68bb      	ldr	r3, [r7, #8]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d013      	beq.n	8012c9a <osSemaphoreRelease+0x5e>
 8012c72:	4b0c      	ldr	r3, [pc, #48]	@ (8012ca4 <osSemaphoreRelease+0x68>)
 8012c74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012c78:	601a      	str	r2, [r3, #0]
 8012c7a:	f3bf 8f4f 	dsb	sy
 8012c7e:	f3bf 8f6f 	isb	sy
 8012c82:	e00a      	b.n	8012c9a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8012c84:	2300      	movs	r3, #0
 8012c86:	2200      	movs	r2, #0
 8012c88:	2100      	movs	r1, #0
 8012c8a:	6878      	ldr	r0, [r7, #4]
 8012c8c:	f000 fb52 	bl	8013334 <xQueueGenericSend>
 8012c90:	4603      	mov	r3, r0
 8012c92:	2b01      	cmp	r3, #1
 8012c94:	d001      	beq.n	8012c9a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8012c96:	23ff      	movs	r3, #255	@ 0xff
 8012c98:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8012c9a:	68fb      	ldr	r3, [r7, #12]
}
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	3710      	adds	r7, #16
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	bd80      	pop	{r7, pc}
 8012ca4:	e000ed04 	.word	0xe000ed04

08012ca8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b082      	sub	sp, #8
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8012cb0:	f7ff fe97 	bl	80129e2 <inHandlerMode>
 8012cb4:	4603      	mov	r3, r0
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d001      	beq.n	8012cbe <osSemaphoreDelete+0x16>
    return osErrorISR;
 8012cba:	2382      	movs	r3, #130	@ 0x82
 8012cbc:	e003      	b.n	8012cc6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8012cbe:	6878      	ldr	r0, [r7, #4]
 8012cc0:	f001 f806 	bl	8013cd0 <vQueueDelete>

  return osOK; 
 8012cc4:	2300      	movs	r3, #0
}
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	3708      	adds	r7, #8
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	bd80      	pop	{r7, pc}

08012cce <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8012cce:	b590      	push	{r4, r7, lr}
 8012cd0:	b085      	sub	sp, #20
 8012cd2:	af02      	add	r7, sp, #8
 8012cd4:	6078      	str	r0, [r7, #4]
 8012cd6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	689b      	ldr	r3, [r3, #8]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d011      	beq.n	8012d04 <osMessageCreate+0x36>
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	68db      	ldr	r3, [r3, #12]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d00d      	beq.n	8012d04 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	6818      	ldr	r0, [r3, #0]
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	6859      	ldr	r1, [r3, #4]
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	689a      	ldr	r2, [r3, #8]
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	68db      	ldr	r3, [r3, #12]
 8012cf8:	2400      	movs	r4, #0
 8012cfa:	9400      	str	r4, [sp, #0]
 8012cfc:	f000 f9e4 	bl	80130c8 <xQueueGenericCreateStatic>
 8012d00:	4603      	mov	r3, r0
 8012d02:	e008      	b.n	8012d16 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	6818      	ldr	r0, [r3, #0]
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	685b      	ldr	r3, [r3, #4]
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	4619      	mov	r1, r3
 8012d10:	f000 fa61 	bl	80131d6 <xQueueGenericCreate>
 8012d14:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8012d16:	4618      	mov	r0, r3
 8012d18:	370c      	adds	r7, #12
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd90      	pop	{r4, r7, pc}
	...

08012d20 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b086      	sub	sp, #24
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	60f8      	str	r0, [r7, #12]
 8012d28:	60b9      	str	r1, [r7, #8]
 8012d2a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8012d34:	697b      	ldr	r3, [r7, #20]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d101      	bne.n	8012d3e <osMessagePut+0x1e>
    ticks = 1;
 8012d3a:	2301      	movs	r3, #1
 8012d3c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8012d3e:	f7ff fe50 	bl	80129e2 <inHandlerMode>
 8012d42:	4603      	mov	r3, r0
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d018      	beq.n	8012d7a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8012d48:	f107 0210 	add.w	r2, r7, #16
 8012d4c:	f107 0108 	add.w	r1, r7, #8
 8012d50:	2300      	movs	r3, #0
 8012d52:	68f8      	ldr	r0, [r7, #12]
 8012d54:	f000 fbf8 	bl	8013548 <xQueueGenericSendFromISR>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	2b01      	cmp	r3, #1
 8012d5c:	d001      	beq.n	8012d62 <osMessagePut+0x42>
      return osErrorOS;
 8012d5e:	23ff      	movs	r3, #255	@ 0xff
 8012d60:	e018      	b.n	8012d94 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012d62:	693b      	ldr	r3, [r7, #16]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d014      	beq.n	8012d92 <osMessagePut+0x72>
 8012d68:	4b0c      	ldr	r3, [pc, #48]	@ (8012d9c <osMessagePut+0x7c>)
 8012d6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012d6e:	601a      	str	r2, [r3, #0]
 8012d70:	f3bf 8f4f 	dsb	sy
 8012d74:	f3bf 8f6f 	isb	sy
 8012d78:	e00b      	b.n	8012d92 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8012d7a:	f107 0108 	add.w	r1, r7, #8
 8012d7e:	2300      	movs	r3, #0
 8012d80:	697a      	ldr	r2, [r7, #20]
 8012d82:	68f8      	ldr	r0, [r7, #12]
 8012d84:	f000 fad6 	bl	8013334 <xQueueGenericSend>
 8012d88:	4603      	mov	r3, r0
 8012d8a:	2b01      	cmp	r3, #1
 8012d8c:	d001      	beq.n	8012d92 <osMessagePut+0x72>
      return osErrorOS;
 8012d8e:	23ff      	movs	r3, #255	@ 0xff
 8012d90:	e000      	b.n	8012d94 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8012d92:	2300      	movs	r3, #0
}
 8012d94:	4618      	mov	r0, r3
 8012d96:	3718      	adds	r7, #24
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd80      	pop	{r7, pc}
 8012d9c:	e000ed04 	.word	0xe000ed04

08012da0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8012da0:	b590      	push	{r4, r7, lr}
 8012da2:	b08b      	sub	sp, #44	@ 0x2c
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	60f8      	str	r0, [r7, #12]
 8012da8:	60b9      	str	r1, [r7, #8]
 8012daa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8012dac:	68bb      	ldr	r3, [r7, #8]
 8012dae:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8012db0:	2300      	movs	r3, #0
 8012db2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8012db4:	68bb      	ldr	r3, [r7, #8]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d10a      	bne.n	8012dd0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8012dba:	2380      	movs	r3, #128	@ 0x80
 8012dbc:	617b      	str	r3, [r7, #20]
    return event;
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	461c      	mov	r4, r3
 8012dc2:	f107 0314 	add.w	r3, r7, #20
 8012dc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012dca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012dce:	e054      	b.n	8012e7a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dde:	d103      	bne.n	8012de8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8012de0:	f04f 33ff 	mov.w	r3, #4294967295
 8012de4:	627b      	str	r3, [r7, #36]	@ 0x24
 8012de6:	e009      	b.n	8012dfc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d006      	beq.n	8012dfc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8012df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d101      	bne.n	8012dfc <osMessageGet+0x5c>
      ticks = 1;
 8012df8:	2301      	movs	r3, #1
 8012dfa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012dfc:	f7ff fdf1 	bl	80129e2 <inHandlerMode>
 8012e00:	4603      	mov	r3, r0
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d01c      	beq.n	8012e40 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8012e06:	f107 0220 	add.w	r2, r7, #32
 8012e0a:	f107 0314 	add.w	r3, r7, #20
 8012e0e:	3304      	adds	r3, #4
 8012e10:	4619      	mov	r1, r3
 8012e12:	68b8      	ldr	r0, [r7, #8]
 8012e14:	f000 fed4 	bl	8013bc0 <xQueueReceiveFromISR>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	2b01      	cmp	r3, #1
 8012e1c:	d102      	bne.n	8012e24 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8012e1e:	2310      	movs	r3, #16
 8012e20:	617b      	str	r3, [r7, #20]
 8012e22:	e001      	b.n	8012e28 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8012e24:	2300      	movs	r3, #0
 8012e26:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012e28:	6a3b      	ldr	r3, [r7, #32]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d01d      	beq.n	8012e6a <osMessageGet+0xca>
 8012e2e:	4b15      	ldr	r3, [pc, #84]	@ (8012e84 <osMessageGet+0xe4>)
 8012e30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012e34:	601a      	str	r2, [r3, #0]
 8012e36:	f3bf 8f4f 	dsb	sy
 8012e3a:	f3bf 8f6f 	isb	sy
 8012e3e:	e014      	b.n	8012e6a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8012e40:	f107 0314 	add.w	r3, r7, #20
 8012e44:	3304      	adds	r3, #4
 8012e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012e48:	4619      	mov	r1, r3
 8012e4a:	68b8      	ldr	r0, [r7, #8]
 8012e4c:	f000 fcb8 	bl	80137c0 <xQueueReceive>
 8012e50:	4603      	mov	r3, r0
 8012e52:	2b01      	cmp	r3, #1
 8012e54:	d102      	bne.n	8012e5c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8012e56:	2310      	movs	r3, #16
 8012e58:	617b      	str	r3, [r7, #20]
 8012e5a:	e006      	b.n	8012e6a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d101      	bne.n	8012e66 <osMessageGet+0xc6>
 8012e62:	2300      	movs	r3, #0
 8012e64:	e000      	b.n	8012e68 <osMessageGet+0xc8>
 8012e66:	2340      	movs	r3, #64	@ 0x40
 8012e68:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	461c      	mov	r4, r3
 8012e6e:	f107 0314 	add.w	r3, r7, #20
 8012e72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012e76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012e7a:	68f8      	ldr	r0, [r7, #12]
 8012e7c:	372c      	adds	r7, #44	@ 0x2c
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	bd90      	pop	{r4, r7, pc}
 8012e82:	bf00      	nop
 8012e84:	e000ed04 	.word	0xe000ed04

08012e88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012e88:	b480      	push	{r7}
 8012e8a:	b083      	sub	sp, #12
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	f103 0208 	add.w	r2, r3, #8
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8012ea0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	f103 0208 	add.w	r2, r3, #8
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	f103 0208 	add.w	r2, r3, #8
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	2200      	movs	r2, #0
 8012eba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012ebc:	bf00      	nop
 8012ebe:	370c      	adds	r7, #12
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec6:	4770      	bx	lr

08012ec8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012ec8:	b480      	push	{r7}
 8012eca:	b083      	sub	sp, #12
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012ed6:	bf00      	nop
 8012ed8:	370c      	adds	r7, #12
 8012eda:	46bd      	mov	sp, r7
 8012edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee0:	4770      	bx	lr

08012ee2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012ee2:	b480      	push	{r7}
 8012ee4:	b085      	sub	sp, #20
 8012ee6:	af00      	add	r7, sp, #0
 8012ee8:	6078      	str	r0, [r7, #4]
 8012eea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	685b      	ldr	r3, [r3, #4]
 8012ef0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012ef2:	683b      	ldr	r3, [r7, #0]
 8012ef4:	68fa      	ldr	r2, [r7, #12]
 8012ef6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	689a      	ldr	r2, [r3, #8]
 8012efc:	683b      	ldr	r3, [r7, #0]
 8012efe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	689b      	ldr	r3, [r3, #8]
 8012f04:	683a      	ldr	r2, [r7, #0]
 8012f06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	683a      	ldr	r2, [r7, #0]
 8012f0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012f0e:	683b      	ldr	r3, [r7, #0]
 8012f10:	687a      	ldr	r2, [r7, #4]
 8012f12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	1c5a      	adds	r2, r3, #1
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	601a      	str	r2, [r3, #0]
}
 8012f1e:	bf00      	nop
 8012f20:	3714      	adds	r7, #20
 8012f22:	46bd      	mov	sp, r7
 8012f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f28:	4770      	bx	lr

08012f2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012f2a:	b480      	push	{r7}
 8012f2c:	b085      	sub	sp, #20
 8012f2e:	af00      	add	r7, sp, #0
 8012f30:	6078      	str	r0, [r7, #4]
 8012f32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012f34:	683b      	ldr	r3, [r7, #0]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012f3a:	68bb      	ldr	r3, [r7, #8]
 8012f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f40:	d103      	bne.n	8012f4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	691b      	ldr	r3, [r3, #16]
 8012f46:	60fb      	str	r3, [r7, #12]
 8012f48:	e00c      	b.n	8012f64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	3308      	adds	r3, #8
 8012f4e:	60fb      	str	r3, [r7, #12]
 8012f50:	e002      	b.n	8012f58 <vListInsert+0x2e>
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	685b      	ldr	r3, [r3, #4]
 8012f56:	60fb      	str	r3, [r7, #12]
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	685b      	ldr	r3, [r3, #4]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	68ba      	ldr	r2, [r7, #8]
 8012f60:	429a      	cmp	r2, r3
 8012f62:	d2f6      	bcs.n	8012f52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	685a      	ldr	r2, [r3, #4]
 8012f68:	683b      	ldr	r3, [r7, #0]
 8012f6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012f6c:	683b      	ldr	r3, [r7, #0]
 8012f6e:	685b      	ldr	r3, [r3, #4]
 8012f70:	683a      	ldr	r2, [r7, #0]
 8012f72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012f74:	683b      	ldr	r3, [r7, #0]
 8012f76:	68fa      	ldr	r2, [r7, #12]
 8012f78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	683a      	ldr	r2, [r7, #0]
 8012f7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012f80:	683b      	ldr	r3, [r7, #0]
 8012f82:	687a      	ldr	r2, [r7, #4]
 8012f84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	1c5a      	adds	r2, r3, #1
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	601a      	str	r2, [r3, #0]
}
 8012f90:	bf00      	nop
 8012f92:	3714      	adds	r7, #20
 8012f94:	46bd      	mov	sp, r7
 8012f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9a:	4770      	bx	lr

08012f9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012f9c:	b480      	push	{r7}
 8012f9e:	b085      	sub	sp, #20
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	691b      	ldr	r3, [r3, #16]
 8012fa8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	685b      	ldr	r3, [r3, #4]
 8012fae:	687a      	ldr	r2, [r7, #4]
 8012fb0:	6892      	ldr	r2, [r2, #8]
 8012fb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	689b      	ldr	r3, [r3, #8]
 8012fb8:	687a      	ldr	r2, [r7, #4]
 8012fba:	6852      	ldr	r2, [r2, #4]
 8012fbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	685b      	ldr	r3, [r3, #4]
 8012fc2:	687a      	ldr	r2, [r7, #4]
 8012fc4:	429a      	cmp	r2, r3
 8012fc6:	d103      	bne.n	8012fd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	689a      	ldr	r2, [r3, #8]
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	1e5a      	subs	r2, r3, #1
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	681b      	ldr	r3, [r3, #0]
}
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	3714      	adds	r7, #20
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fee:	4770      	bx	lr

08012ff0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b084      	sub	sp, #16
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	6078      	str	r0, [r7, #4]
 8012ff8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d10d      	bne.n	8013020 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013008:	b672      	cpsid	i
 801300a:	f383 8811 	msr	BASEPRI, r3
 801300e:	f3bf 8f6f 	isb	sy
 8013012:	f3bf 8f4f 	dsb	sy
 8013016:	b662      	cpsie	i
 8013018:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801301a:	bf00      	nop
 801301c:	bf00      	nop
 801301e:	e7fd      	b.n	801301c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8013020:	f002 fb44 	bl	80156ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	681a      	ldr	r2, [r3, #0]
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801302c:	68f9      	ldr	r1, [r7, #12]
 801302e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013030:	fb01 f303 	mul.w	r3, r1, r3
 8013034:	441a      	add	r2, r3
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	2200      	movs	r2, #0
 801303e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	681a      	ldr	r2, [r3, #0]
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	681a      	ldr	r2, [r3, #0]
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013050:	3b01      	subs	r3, #1
 8013052:	68f9      	ldr	r1, [r7, #12]
 8013054:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013056:	fb01 f303 	mul.w	r3, r1, r3
 801305a:	441a      	add	r2, r3
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	22ff      	movs	r2, #255	@ 0xff
 8013064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	22ff      	movs	r2, #255	@ 0xff
 801306c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8013070:	683b      	ldr	r3, [r7, #0]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d114      	bne.n	80130a0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	691b      	ldr	r3, [r3, #16]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d01a      	beq.n	80130b4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	3310      	adds	r3, #16
 8013082:	4618      	mov	r0, r3
 8013084:	f001 fdf0 	bl	8014c68 <xTaskRemoveFromEventList>
 8013088:	4603      	mov	r3, r0
 801308a:	2b00      	cmp	r3, #0
 801308c:	d012      	beq.n	80130b4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801308e:	4b0d      	ldr	r3, [pc, #52]	@ (80130c4 <xQueueGenericReset+0xd4>)
 8013090:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013094:	601a      	str	r2, [r3, #0]
 8013096:	f3bf 8f4f 	dsb	sy
 801309a:	f3bf 8f6f 	isb	sy
 801309e:	e009      	b.n	80130b4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	3310      	adds	r3, #16
 80130a4:	4618      	mov	r0, r3
 80130a6:	f7ff feef 	bl	8012e88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	3324      	adds	r3, #36	@ 0x24
 80130ae:	4618      	mov	r0, r3
 80130b0:	f7ff feea 	bl	8012e88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80130b4:	f002 fb30 	bl	8015718 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80130b8:	2301      	movs	r3, #1
}
 80130ba:	4618      	mov	r0, r3
 80130bc:	3710      	adds	r7, #16
 80130be:	46bd      	mov	sp, r7
 80130c0:	bd80      	pop	{r7, pc}
 80130c2:	bf00      	nop
 80130c4:	e000ed04 	.word	0xe000ed04

080130c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b08e      	sub	sp, #56	@ 0x38
 80130cc:	af02      	add	r7, sp, #8
 80130ce:	60f8      	str	r0, [r7, #12]
 80130d0:	60b9      	str	r1, [r7, #8]
 80130d2:	607a      	str	r2, [r7, #4]
 80130d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d10d      	bne.n	80130f8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80130dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130e0:	b672      	cpsid	i
 80130e2:	f383 8811 	msr	BASEPRI, r3
 80130e6:	f3bf 8f6f 	isb	sy
 80130ea:	f3bf 8f4f 	dsb	sy
 80130ee:	b662      	cpsie	i
 80130f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80130f2:	bf00      	nop
 80130f4:	bf00      	nop
 80130f6:	e7fd      	b.n	80130f4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80130f8:	683b      	ldr	r3, [r7, #0]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d10d      	bne.n	801311a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80130fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013102:	b672      	cpsid	i
 8013104:	f383 8811 	msr	BASEPRI, r3
 8013108:	f3bf 8f6f 	isb	sy
 801310c:	f3bf 8f4f 	dsb	sy
 8013110:	b662      	cpsie	i
 8013112:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013114:	bf00      	nop
 8013116:	bf00      	nop
 8013118:	e7fd      	b.n	8013116 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d002      	beq.n	8013126 <xQueueGenericCreateStatic+0x5e>
 8013120:	68bb      	ldr	r3, [r7, #8]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d001      	beq.n	801312a <xQueueGenericCreateStatic+0x62>
 8013126:	2301      	movs	r3, #1
 8013128:	e000      	b.n	801312c <xQueueGenericCreateStatic+0x64>
 801312a:	2300      	movs	r3, #0
 801312c:	2b00      	cmp	r3, #0
 801312e:	d10d      	bne.n	801314c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8013130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013134:	b672      	cpsid	i
 8013136:	f383 8811 	msr	BASEPRI, r3
 801313a:	f3bf 8f6f 	isb	sy
 801313e:	f3bf 8f4f 	dsb	sy
 8013142:	b662      	cpsie	i
 8013144:	623b      	str	r3, [r7, #32]
}
 8013146:	bf00      	nop
 8013148:	bf00      	nop
 801314a:	e7fd      	b.n	8013148 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d102      	bne.n	8013158 <xQueueGenericCreateStatic+0x90>
 8013152:	68bb      	ldr	r3, [r7, #8]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d101      	bne.n	801315c <xQueueGenericCreateStatic+0x94>
 8013158:	2301      	movs	r3, #1
 801315a:	e000      	b.n	801315e <xQueueGenericCreateStatic+0x96>
 801315c:	2300      	movs	r3, #0
 801315e:	2b00      	cmp	r3, #0
 8013160:	d10d      	bne.n	801317e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8013162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013166:	b672      	cpsid	i
 8013168:	f383 8811 	msr	BASEPRI, r3
 801316c:	f3bf 8f6f 	isb	sy
 8013170:	f3bf 8f4f 	dsb	sy
 8013174:	b662      	cpsie	i
 8013176:	61fb      	str	r3, [r7, #28]
}
 8013178:	bf00      	nop
 801317a:	bf00      	nop
 801317c:	e7fd      	b.n	801317a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801317e:	2348      	movs	r3, #72	@ 0x48
 8013180:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013182:	697b      	ldr	r3, [r7, #20]
 8013184:	2b48      	cmp	r3, #72	@ 0x48
 8013186:	d00d      	beq.n	80131a4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8013188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801318c:	b672      	cpsid	i
 801318e:	f383 8811 	msr	BASEPRI, r3
 8013192:	f3bf 8f6f 	isb	sy
 8013196:	f3bf 8f4f 	dsb	sy
 801319a:	b662      	cpsie	i
 801319c:	61bb      	str	r3, [r7, #24]
}
 801319e:	bf00      	nop
 80131a0:	bf00      	nop
 80131a2:	e7fd      	b.n	80131a0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80131a4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80131a6:	683b      	ldr	r3, [r7, #0]
 80131a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80131aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d00d      	beq.n	80131cc <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80131b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131b2:	2201      	movs	r2, #1
 80131b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80131b8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80131bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131be:	9300      	str	r3, [sp, #0]
 80131c0:	4613      	mov	r3, r2
 80131c2:	687a      	ldr	r2, [r7, #4]
 80131c4:	68b9      	ldr	r1, [r7, #8]
 80131c6:	68f8      	ldr	r0, [r7, #12]
 80131c8:	f000 f848 	bl	801325c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80131cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80131ce:	4618      	mov	r0, r3
 80131d0:	3730      	adds	r7, #48	@ 0x30
 80131d2:	46bd      	mov	sp, r7
 80131d4:	bd80      	pop	{r7, pc}

080131d6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80131d6:	b580      	push	{r7, lr}
 80131d8:	b08a      	sub	sp, #40	@ 0x28
 80131da:	af02      	add	r7, sp, #8
 80131dc:	60f8      	str	r0, [r7, #12]
 80131de:	60b9      	str	r1, [r7, #8]
 80131e0:	4613      	mov	r3, r2
 80131e2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d10d      	bne.n	8013206 <xQueueGenericCreate+0x30>
	__asm volatile
 80131ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131ee:	b672      	cpsid	i
 80131f0:	f383 8811 	msr	BASEPRI, r3
 80131f4:	f3bf 8f6f 	isb	sy
 80131f8:	f3bf 8f4f 	dsb	sy
 80131fc:	b662      	cpsie	i
 80131fe:	613b      	str	r3, [r7, #16]
}
 8013200:	bf00      	nop
 8013202:	bf00      	nop
 8013204:	e7fd      	b.n	8013202 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8013206:	68bb      	ldr	r3, [r7, #8]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d102      	bne.n	8013212 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801320c:	2300      	movs	r3, #0
 801320e:	61fb      	str	r3, [r7, #28]
 8013210:	e004      	b.n	801321c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	68ba      	ldr	r2, [r7, #8]
 8013216:	fb02 f303 	mul.w	r3, r2, r3
 801321a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801321c:	69fb      	ldr	r3, [r7, #28]
 801321e:	3348      	adds	r3, #72	@ 0x48
 8013220:	4618      	mov	r0, r3
 8013222:	f002 fb71 	bl	8015908 <pvPortMalloc>
 8013226:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013228:	69bb      	ldr	r3, [r7, #24]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d011      	beq.n	8013252 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801322e:	69bb      	ldr	r3, [r7, #24]
 8013230:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013232:	697b      	ldr	r3, [r7, #20]
 8013234:	3348      	adds	r3, #72	@ 0x48
 8013236:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013238:	69bb      	ldr	r3, [r7, #24]
 801323a:	2200      	movs	r2, #0
 801323c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013240:	79fa      	ldrb	r2, [r7, #7]
 8013242:	69bb      	ldr	r3, [r7, #24]
 8013244:	9300      	str	r3, [sp, #0]
 8013246:	4613      	mov	r3, r2
 8013248:	697a      	ldr	r2, [r7, #20]
 801324a:	68b9      	ldr	r1, [r7, #8]
 801324c:	68f8      	ldr	r0, [r7, #12]
 801324e:	f000 f805 	bl	801325c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013252:	69bb      	ldr	r3, [r7, #24]
	}
 8013254:	4618      	mov	r0, r3
 8013256:	3720      	adds	r7, #32
 8013258:	46bd      	mov	sp, r7
 801325a:	bd80      	pop	{r7, pc}

0801325c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b084      	sub	sp, #16
 8013260:	af00      	add	r7, sp, #0
 8013262:	60f8      	str	r0, [r7, #12]
 8013264:	60b9      	str	r1, [r7, #8]
 8013266:	607a      	str	r2, [r7, #4]
 8013268:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d103      	bne.n	8013278 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013270:	69bb      	ldr	r3, [r7, #24]
 8013272:	69ba      	ldr	r2, [r7, #24]
 8013274:	601a      	str	r2, [r3, #0]
 8013276:	e002      	b.n	801327e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013278:	69bb      	ldr	r3, [r7, #24]
 801327a:	687a      	ldr	r2, [r7, #4]
 801327c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801327e:	69bb      	ldr	r3, [r7, #24]
 8013280:	68fa      	ldr	r2, [r7, #12]
 8013282:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013284:	69bb      	ldr	r3, [r7, #24]
 8013286:	68ba      	ldr	r2, [r7, #8]
 8013288:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801328a:	2101      	movs	r1, #1
 801328c:	69b8      	ldr	r0, [r7, #24]
 801328e:	f7ff feaf 	bl	8012ff0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013292:	bf00      	nop
 8013294:	3710      	adds	r7, #16
 8013296:	46bd      	mov	sp, r7
 8013298:	bd80      	pop	{r7, pc}

0801329a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801329a:	b580      	push	{r7, lr}
 801329c:	b082      	sub	sp, #8
 801329e:	af00      	add	r7, sp, #0
 80132a0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d00e      	beq.n	80132c6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	2200      	movs	r2, #0
 80132ac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	2200      	movs	r2, #0
 80132b2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	2200      	movs	r2, #0
 80132b8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80132ba:	2300      	movs	r3, #0
 80132bc:	2200      	movs	r2, #0
 80132be:	2100      	movs	r1, #0
 80132c0:	6878      	ldr	r0, [r7, #4]
 80132c2:	f000 f837 	bl	8013334 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80132c6:	bf00      	nop
 80132c8:	3708      	adds	r7, #8
 80132ca:	46bd      	mov	sp, r7
 80132cc:	bd80      	pop	{r7, pc}

080132ce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80132ce:	b580      	push	{r7, lr}
 80132d0:	b086      	sub	sp, #24
 80132d2:	af00      	add	r7, sp, #0
 80132d4:	4603      	mov	r3, r0
 80132d6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80132d8:	2301      	movs	r3, #1
 80132da:	617b      	str	r3, [r7, #20]
 80132dc:	2300      	movs	r3, #0
 80132de:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80132e0:	79fb      	ldrb	r3, [r7, #7]
 80132e2:	461a      	mov	r2, r3
 80132e4:	6939      	ldr	r1, [r7, #16]
 80132e6:	6978      	ldr	r0, [r7, #20]
 80132e8:	f7ff ff75 	bl	80131d6 <xQueueGenericCreate>
 80132ec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80132ee:	68f8      	ldr	r0, [r7, #12]
 80132f0:	f7ff ffd3 	bl	801329a <prvInitialiseMutex>

		return xNewQueue;
 80132f4:	68fb      	ldr	r3, [r7, #12]
	}
 80132f6:	4618      	mov	r0, r3
 80132f8:	3718      	adds	r7, #24
 80132fa:	46bd      	mov	sp, r7
 80132fc:	bd80      	pop	{r7, pc}

080132fe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80132fe:	b580      	push	{r7, lr}
 8013300:	b088      	sub	sp, #32
 8013302:	af02      	add	r7, sp, #8
 8013304:	4603      	mov	r3, r0
 8013306:	6039      	str	r1, [r7, #0]
 8013308:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801330a:	2301      	movs	r3, #1
 801330c:	617b      	str	r3, [r7, #20]
 801330e:	2300      	movs	r3, #0
 8013310:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8013312:	79fb      	ldrb	r3, [r7, #7]
 8013314:	9300      	str	r3, [sp, #0]
 8013316:	683b      	ldr	r3, [r7, #0]
 8013318:	2200      	movs	r2, #0
 801331a:	6939      	ldr	r1, [r7, #16]
 801331c:	6978      	ldr	r0, [r7, #20]
 801331e:	f7ff fed3 	bl	80130c8 <xQueueGenericCreateStatic>
 8013322:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013324:	68f8      	ldr	r0, [r7, #12]
 8013326:	f7ff ffb8 	bl	801329a <prvInitialiseMutex>

		return xNewQueue;
 801332a:	68fb      	ldr	r3, [r7, #12]
	}
 801332c:	4618      	mov	r0, r3
 801332e:	3718      	adds	r7, #24
 8013330:	46bd      	mov	sp, r7
 8013332:	bd80      	pop	{r7, pc}

08013334 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013334:	b580      	push	{r7, lr}
 8013336:	b08e      	sub	sp, #56	@ 0x38
 8013338:	af00      	add	r7, sp, #0
 801333a:	60f8      	str	r0, [r7, #12]
 801333c:	60b9      	str	r1, [r7, #8]
 801333e:	607a      	str	r2, [r7, #4]
 8013340:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013342:	2300      	movs	r3, #0
 8013344:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801334a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801334c:	2b00      	cmp	r3, #0
 801334e:	d10d      	bne.n	801336c <xQueueGenericSend+0x38>
	__asm volatile
 8013350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013354:	b672      	cpsid	i
 8013356:	f383 8811 	msr	BASEPRI, r3
 801335a:	f3bf 8f6f 	isb	sy
 801335e:	f3bf 8f4f 	dsb	sy
 8013362:	b662      	cpsie	i
 8013364:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013366:	bf00      	nop
 8013368:	bf00      	nop
 801336a:	e7fd      	b.n	8013368 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801336c:	68bb      	ldr	r3, [r7, #8]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d103      	bne.n	801337a <xQueueGenericSend+0x46>
 8013372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013376:	2b00      	cmp	r3, #0
 8013378:	d101      	bne.n	801337e <xQueueGenericSend+0x4a>
 801337a:	2301      	movs	r3, #1
 801337c:	e000      	b.n	8013380 <xQueueGenericSend+0x4c>
 801337e:	2300      	movs	r3, #0
 8013380:	2b00      	cmp	r3, #0
 8013382:	d10d      	bne.n	80133a0 <xQueueGenericSend+0x6c>
	__asm volatile
 8013384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013388:	b672      	cpsid	i
 801338a:	f383 8811 	msr	BASEPRI, r3
 801338e:	f3bf 8f6f 	isb	sy
 8013392:	f3bf 8f4f 	dsb	sy
 8013396:	b662      	cpsie	i
 8013398:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801339a:	bf00      	nop
 801339c:	bf00      	nop
 801339e:	e7fd      	b.n	801339c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80133a0:	683b      	ldr	r3, [r7, #0]
 80133a2:	2b02      	cmp	r3, #2
 80133a4:	d103      	bne.n	80133ae <xQueueGenericSend+0x7a>
 80133a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80133aa:	2b01      	cmp	r3, #1
 80133ac:	d101      	bne.n	80133b2 <xQueueGenericSend+0x7e>
 80133ae:	2301      	movs	r3, #1
 80133b0:	e000      	b.n	80133b4 <xQueueGenericSend+0x80>
 80133b2:	2300      	movs	r3, #0
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d10d      	bne.n	80133d4 <xQueueGenericSend+0xa0>
	__asm volatile
 80133b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133bc:	b672      	cpsid	i
 80133be:	f383 8811 	msr	BASEPRI, r3
 80133c2:	f3bf 8f6f 	isb	sy
 80133c6:	f3bf 8f4f 	dsb	sy
 80133ca:	b662      	cpsie	i
 80133cc:	623b      	str	r3, [r7, #32]
}
 80133ce:	bf00      	nop
 80133d0:	bf00      	nop
 80133d2:	e7fd      	b.n	80133d0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80133d4:	f001 fe18 	bl	8015008 <xTaskGetSchedulerState>
 80133d8:	4603      	mov	r3, r0
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d102      	bne.n	80133e4 <xQueueGenericSend+0xb0>
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d101      	bne.n	80133e8 <xQueueGenericSend+0xb4>
 80133e4:	2301      	movs	r3, #1
 80133e6:	e000      	b.n	80133ea <xQueueGenericSend+0xb6>
 80133e8:	2300      	movs	r3, #0
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d10d      	bne.n	801340a <xQueueGenericSend+0xd6>
	__asm volatile
 80133ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133f2:	b672      	cpsid	i
 80133f4:	f383 8811 	msr	BASEPRI, r3
 80133f8:	f3bf 8f6f 	isb	sy
 80133fc:	f3bf 8f4f 	dsb	sy
 8013400:	b662      	cpsie	i
 8013402:	61fb      	str	r3, [r7, #28]
}
 8013404:	bf00      	nop
 8013406:	bf00      	nop
 8013408:	e7fd      	b.n	8013406 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801340a:	f002 f94f 	bl	80156ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801340e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013410:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013416:	429a      	cmp	r2, r3
 8013418:	d302      	bcc.n	8013420 <xQueueGenericSend+0xec>
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	2b02      	cmp	r3, #2
 801341e:	d129      	bne.n	8013474 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013420:	683a      	ldr	r2, [r7, #0]
 8013422:	68b9      	ldr	r1, [r7, #8]
 8013424:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013426:	f000 fc91 	bl	8013d4c <prvCopyDataToQueue>
 801342a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801342c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013430:	2b00      	cmp	r3, #0
 8013432:	d010      	beq.n	8013456 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013436:	3324      	adds	r3, #36	@ 0x24
 8013438:	4618      	mov	r0, r3
 801343a:	f001 fc15 	bl	8014c68 <xTaskRemoveFromEventList>
 801343e:	4603      	mov	r3, r0
 8013440:	2b00      	cmp	r3, #0
 8013442:	d013      	beq.n	801346c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013444:	4b3f      	ldr	r3, [pc, #252]	@ (8013544 <xQueueGenericSend+0x210>)
 8013446:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801344a:	601a      	str	r2, [r3, #0]
 801344c:	f3bf 8f4f 	dsb	sy
 8013450:	f3bf 8f6f 	isb	sy
 8013454:	e00a      	b.n	801346c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013458:	2b00      	cmp	r3, #0
 801345a:	d007      	beq.n	801346c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801345c:	4b39      	ldr	r3, [pc, #228]	@ (8013544 <xQueueGenericSend+0x210>)
 801345e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013462:	601a      	str	r2, [r3, #0]
 8013464:	f3bf 8f4f 	dsb	sy
 8013468:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801346c:	f002 f954 	bl	8015718 <vPortExitCritical>
				return pdPASS;
 8013470:	2301      	movs	r3, #1
 8013472:	e063      	b.n	801353c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d103      	bne.n	8013482 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801347a:	f002 f94d 	bl	8015718 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801347e:	2300      	movs	r3, #0
 8013480:	e05c      	b.n	801353c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013484:	2b00      	cmp	r3, #0
 8013486:	d106      	bne.n	8013496 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013488:	f107 0314 	add.w	r3, r7, #20
 801348c:	4618      	mov	r0, r3
 801348e:	f001 fc51 	bl	8014d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013492:	2301      	movs	r3, #1
 8013494:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013496:	f002 f93f 	bl	8015718 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801349a:	f001 f9a7 	bl	80147ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801349e:	f002 f905 	bl	80156ac <vPortEnterCritical>
 80134a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80134a8:	b25b      	sxtb	r3, r3
 80134aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134ae:	d103      	bne.n	80134b8 <xQueueGenericSend+0x184>
 80134b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134b2:	2200      	movs	r2, #0
 80134b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80134b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80134be:	b25b      	sxtb	r3, r3
 80134c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134c4:	d103      	bne.n	80134ce <xQueueGenericSend+0x19a>
 80134c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134c8:	2200      	movs	r2, #0
 80134ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80134ce:	f002 f923 	bl	8015718 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80134d2:	1d3a      	adds	r2, r7, #4
 80134d4:	f107 0314 	add.w	r3, r7, #20
 80134d8:	4611      	mov	r1, r2
 80134da:	4618      	mov	r0, r3
 80134dc:	f001 fc40 	bl	8014d60 <xTaskCheckForTimeOut>
 80134e0:	4603      	mov	r3, r0
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d124      	bne.n	8013530 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80134e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80134e8:	f000 fd28 	bl	8013f3c <prvIsQueueFull>
 80134ec:	4603      	mov	r3, r0
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d018      	beq.n	8013524 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80134f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134f4:	3310      	adds	r3, #16
 80134f6:	687a      	ldr	r2, [r7, #4]
 80134f8:	4611      	mov	r1, r2
 80134fa:	4618      	mov	r0, r3
 80134fc:	f001 fb8c 	bl	8014c18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013500:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013502:	f000 fcb3 	bl	8013e6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013506:	f001 f97f 	bl	8014808 <xTaskResumeAll>
 801350a:	4603      	mov	r3, r0
 801350c:	2b00      	cmp	r3, #0
 801350e:	f47f af7c 	bne.w	801340a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8013512:	4b0c      	ldr	r3, [pc, #48]	@ (8013544 <xQueueGenericSend+0x210>)
 8013514:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013518:	601a      	str	r2, [r3, #0]
 801351a:	f3bf 8f4f 	dsb	sy
 801351e:	f3bf 8f6f 	isb	sy
 8013522:	e772      	b.n	801340a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013524:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013526:	f000 fca1 	bl	8013e6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801352a:	f001 f96d 	bl	8014808 <xTaskResumeAll>
 801352e:	e76c      	b.n	801340a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013530:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013532:	f000 fc9b 	bl	8013e6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013536:	f001 f967 	bl	8014808 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801353a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801353c:	4618      	mov	r0, r3
 801353e:	3738      	adds	r7, #56	@ 0x38
 8013540:	46bd      	mov	sp, r7
 8013542:	bd80      	pop	{r7, pc}
 8013544:	e000ed04 	.word	0xe000ed04

08013548 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013548:	b580      	push	{r7, lr}
 801354a:	b08e      	sub	sp, #56	@ 0x38
 801354c:	af00      	add	r7, sp, #0
 801354e:	60f8      	str	r0, [r7, #12]
 8013550:	60b9      	str	r1, [r7, #8]
 8013552:	607a      	str	r2, [r7, #4]
 8013554:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801355a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801355c:	2b00      	cmp	r3, #0
 801355e:	d10d      	bne.n	801357c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8013560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013564:	b672      	cpsid	i
 8013566:	f383 8811 	msr	BASEPRI, r3
 801356a:	f3bf 8f6f 	isb	sy
 801356e:	f3bf 8f4f 	dsb	sy
 8013572:	b662      	cpsie	i
 8013574:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013576:	bf00      	nop
 8013578:	bf00      	nop
 801357a:	e7fd      	b.n	8013578 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d103      	bne.n	801358a <xQueueGenericSendFromISR+0x42>
 8013582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013586:	2b00      	cmp	r3, #0
 8013588:	d101      	bne.n	801358e <xQueueGenericSendFromISR+0x46>
 801358a:	2301      	movs	r3, #1
 801358c:	e000      	b.n	8013590 <xQueueGenericSendFromISR+0x48>
 801358e:	2300      	movs	r3, #0
 8013590:	2b00      	cmp	r3, #0
 8013592:	d10d      	bne.n	80135b0 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8013594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013598:	b672      	cpsid	i
 801359a:	f383 8811 	msr	BASEPRI, r3
 801359e:	f3bf 8f6f 	isb	sy
 80135a2:	f3bf 8f4f 	dsb	sy
 80135a6:	b662      	cpsie	i
 80135a8:	623b      	str	r3, [r7, #32]
}
 80135aa:	bf00      	nop
 80135ac:	bf00      	nop
 80135ae:	e7fd      	b.n	80135ac <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80135b0:	683b      	ldr	r3, [r7, #0]
 80135b2:	2b02      	cmp	r3, #2
 80135b4:	d103      	bne.n	80135be <xQueueGenericSendFromISR+0x76>
 80135b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80135ba:	2b01      	cmp	r3, #1
 80135bc:	d101      	bne.n	80135c2 <xQueueGenericSendFromISR+0x7a>
 80135be:	2301      	movs	r3, #1
 80135c0:	e000      	b.n	80135c4 <xQueueGenericSendFromISR+0x7c>
 80135c2:	2300      	movs	r3, #0
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d10d      	bne.n	80135e4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80135c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135cc:	b672      	cpsid	i
 80135ce:	f383 8811 	msr	BASEPRI, r3
 80135d2:	f3bf 8f6f 	isb	sy
 80135d6:	f3bf 8f4f 	dsb	sy
 80135da:	b662      	cpsie	i
 80135dc:	61fb      	str	r3, [r7, #28]
}
 80135de:	bf00      	nop
 80135e0:	bf00      	nop
 80135e2:	e7fd      	b.n	80135e0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80135e4:	f002 f94a 	bl	801587c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80135e8:	f3ef 8211 	mrs	r2, BASEPRI
 80135ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135f0:	b672      	cpsid	i
 80135f2:	f383 8811 	msr	BASEPRI, r3
 80135f6:	f3bf 8f6f 	isb	sy
 80135fa:	f3bf 8f4f 	dsb	sy
 80135fe:	b662      	cpsie	i
 8013600:	61ba      	str	r2, [r7, #24]
 8013602:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013604:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013606:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801360a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801360c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801360e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013610:	429a      	cmp	r2, r3
 8013612:	d302      	bcc.n	801361a <xQueueGenericSendFromISR+0xd2>
 8013614:	683b      	ldr	r3, [r7, #0]
 8013616:	2b02      	cmp	r3, #2
 8013618:	d12c      	bne.n	8013674 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801361a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801361c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013620:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013624:	683a      	ldr	r2, [r7, #0]
 8013626:	68b9      	ldr	r1, [r7, #8]
 8013628:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801362a:	f000 fb8f 	bl	8013d4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801362e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8013632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013636:	d112      	bne.n	801365e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801363a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801363c:	2b00      	cmp	r3, #0
 801363e:	d016      	beq.n	801366e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013642:	3324      	adds	r3, #36	@ 0x24
 8013644:	4618      	mov	r0, r3
 8013646:	f001 fb0f 	bl	8014c68 <xTaskRemoveFromEventList>
 801364a:	4603      	mov	r3, r0
 801364c:	2b00      	cmp	r3, #0
 801364e:	d00e      	beq.n	801366e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d00b      	beq.n	801366e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	2201      	movs	r2, #1
 801365a:	601a      	str	r2, [r3, #0]
 801365c:	e007      	b.n	801366e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801365e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8013662:	3301      	adds	r3, #1
 8013664:	b2db      	uxtb	r3, r3
 8013666:	b25a      	sxtb	r2, r3
 8013668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801366a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801366e:	2301      	movs	r3, #1
 8013670:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8013672:	e001      	b.n	8013678 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013674:	2300      	movs	r3, #0
 8013676:	637b      	str	r3, [r7, #52]	@ 0x34
 8013678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801367a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801367c:	693b      	ldr	r3, [r7, #16]
 801367e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013682:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013686:	4618      	mov	r0, r3
 8013688:	3738      	adds	r7, #56	@ 0x38
 801368a:	46bd      	mov	sp, r7
 801368c:	bd80      	pop	{r7, pc}

0801368e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801368e:	b580      	push	{r7, lr}
 8013690:	b08e      	sub	sp, #56	@ 0x38
 8013692:	af00      	add	r7, sp, #0
 8013694:	6078      	str	r0, [r7, #4]
 8013696:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801369c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d10d      	bne.n	80136be <xQueueGiveFromISR+0x30>
	__asm volatile
 80136a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136a6:	b672      	cpsid	i
 80136a8:	f383 8811 	msr	BASEPRI, r3
 80136ac:	f3bf 8f6f 	isb	sy
 80136b0:	f3bf 8f4f 	dsb	sy
 80136b4:	b662      	cpsie	i
 80136b6:	623b      	str	r3, [r7, #32]
}
 80136b8:	bf00      	nop
 80136ba:	bf00      	nop
 80136bc:	e7fd      	b.n	80136ba <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80136be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d00d      	beq.n	80136e2 <xQueueGiveFromISR+0x54>
	__asm volatile
 80136c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136ca:	b672      	cpsid	i
 80136cc:	f383 8811 	msr	BASEPRI, r3
 80136d0:	f3bf 8f6f 	isb	sy
 80136d4:	f3bf 8f4f 	dsb	sy
 80136d8:	b662      	cpsie	i
 80136da:	61fb      	str	r3, [r7, #28]
}
 80136dc:	bf00      	nop
 80136de:	bf00      	nop
 80136e0:	e7fd      	b.n	80136de <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80136e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d103      	bne.n	80136f2 <xQueueGiveFromISR+0x64>
 80136ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136ec:	689b      	ldr	r3, [r3, #8]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d101      	bne.n	80136f6 <xQueueGiveFromISR+0x68>
 80136f2:	2301      	movs	r3, #1
 80136f4:	e000      	b.n	80136f8 <xQueueGiveFromISR+0x6a>
 80136f6:	2300      	movs	r3, #0
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d10d      	bne.n	8013718 <xQueueGiveFromISR+0x8a>
	__asm volatile
 80136fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013700:	b672      	cpsid	i
 8013702:	f383 8811 	msr	BASEPRI, r3
 8013706:	f3bf 8f6f 	isb	sy
 801370a:	f3bf 8f4f 	dsb	sy
 801370e:	b662      	cpsie	i
 8013710:	61bb      	str	r3, [r7, #24]
}
 8013712:	bf00      	nop
 8013714:	bf00      	nop
 8013716:	e7fd      	b.n	8013714 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013718:	f002 f8b0 	bl	801587c <vPortValidateInterruptPriority>
	__asm volatile
 801371c:	f3ef 8211 	mrs	r2, BASEPRI
 8013720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013724:	b672      	cpsid	i
 8013726:	f383 8811 	msr	BASEPRI, r3
 801372a:	f3bf 8f6f 	isb	sy
 801372e:	f3bf 8f4f 	dsb	sy
 8013732:	b662      	cpsie	i
 8013734:	617a      	str	r2, [r7, #20]
 8013736:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013738:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801373a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801373c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801373e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013740:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013746:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013748:	429a      	cmp	r2, r3
 801374a:	d22b      	bcs.n	80137a4 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801374c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801374e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013752:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013758:	1c5a      	adds	r2, r3, #1
 801375a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801375c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801375e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013766:	d112      	bne.n	801378e <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801376c:	2b00      	cmp	r3, #0
 801376e:	d016      	beq.n	801379e <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013772:	3324      	adds	r3, #36	@ 0x24
 8013774:	4618      	mov	r0, r3
 8013776:	f001 fa77 	bl	8014c68 <xTaskRemoveFromEventList>
 801377a:	4603      	mov	r3, r0
 801377c:	2b00      	cmp	r3, #0
 801377e:	d00e      	beq.n	801379e <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013780:	683b      	ldr	r3, [r7, #0]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d00b      	beq.n	801379e <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013786:	683b      	ldr	r3, [r7, #0]
 8013788:	2201      	movs	r2, #1
 801378a:	601a      	str	r2, [r3, #0]
 801378c:	e007      	b.n	801379e <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801378e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013792:	3301      	adds	r3, #1
 8013794:	b2db      	uxtb	r3, r3
 8013796:	b25a      	sxtb	r2, r3
 8013798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801379a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801379e:	2301      	movs	r3, #1
 80137a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80137a2:	e001      	b.n	80137a8 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80137a4:	2300      	movs	r3, #0
 80137a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80137a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137aa:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	f383 8811 	msr	BASEPRI, r3
}
 80137b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80137b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80137b6:	4618      	mov	r0, r3
 80137b8:	3738      	adds	r7, #56	@ 0x38
 80137ba:	46bd      	mov	sp, r7
 80137bc:	bd80      	pop	{r7, pc}
	...

080137c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b08c      	sub	sp, #48	@ 0x30
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	60f8      	str	r0, [r7, #12]
 80137c8:	60b9      	str	r1, [r7, #8]
 80137ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80137cc:	2300      	movs	r3, #0
 80137ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80137d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d10d      	bne.n	80137f6 <xQueueReceive+0x36>
	__asm volatile
 80137da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137de:	b672      	cpsid	i
 80137e0:	f383 8811 	msr	BASEPRI, r3
 80137e4:	f3bf 8f6f 	isb	sy
 80137e8:	f3bf 8f4f 	dsb	sy
 80137ec:	b662      	cpsie	i
 80137ee:	623b      	str	r3, [r7, #32]
}
 80137f0:	bf00      	nop
 80137f2:	bf00      	nop
 80137f4:	e7fd      	b.n	80137f2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80137f6:	68bb      	ldr	r3, [r7, #8]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d103      	bne.n	8013804 <xQueueReceive+0x44>
 80137fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013800:	2b00      	cmp	r3, #0
 8013802:	d101      	bne.n	8013808 <xQueueReceive+0x48>
 8013804:	2301      	movs	r3, #1
 8013806:	e000      	b.n	801380a <xQueueReceive+0x4a>
 8013808:	2300      	movs	r3, #0
 801380a:	2b00      	cmp	r3, #0
 801380c:	d10d      	bne.n	801382a <xQueueReceive+0x6a>
	__asm volatile
 801380e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013812:	b672      	cpsid	i
 8013814:	f383 8811 	msr	BASEPRI, r3
 8013818:	f3bf 8f6f 	isb	sy
 801381c:	f3bf 8f4f 	dsb	sy
 8013820:	b662      	cpsie	i
 8013822:	61fb      	str	r3, [r7, #28]
}
 8013824:	bf00      	nop
 8013826:	bf00      	nop
 8013828:	e7fd      	b.n	8013826 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801382a:	f001 fbed 	bl	8015008 <xTaskGetSchedulerState>
 801382e:	4603      	mov	r3, r0
 8013830:	2b00      	cmp	r3, #0
 8013832:	d102      	bne.n	801383a <xQueueReceive+0x7a>
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d101      	bne.n	801383e <xQueueReceive+0x7e>
 801383a:	2301      	movs	r3, #1
 801383c:	e000      	b.n	8013840 <xQueueReceive+0x80>
 801383e:	2300      	movs	r3, #0
 8013840:	2b00      	cmp	r3, #0
 8013842:	d10d      	bne.n	8013860 <xQueueReceive+0xa0>
	__asm volatile
 8013844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013848:	b672      	cpsid	i
 801384a:	f383 8811 	msr	BASEPRI, r3
 801384e:	f3bf 8f6f 	isb	sy
 8013852:	f3bf 8f4f 	dsb	sy
 8013856:	b662      	cpsie	i
 8013858:	61bb      	str	r3, [r7, #24]
}
 801385a:	bf00      	nop
 801385c:	bf00      	nop
 801385e:	e7fd      	b.n	801385c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013860:	f001 ff24 	bl	80156ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013868:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801386a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801386c:	2b00      	cmp	r3, #0
 801386e:	d01f      	beq.n	80138b0 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013870:	68b9      	ldr	r1, [r7, #8]
 8013872:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013874:	f000 fad4 	bl	8013e20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801387a:	1e5a      	subs	r2, r3, #1
 801387c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801387e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013882:	691b      	ldr	r3, [r3, #16]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d00f      	beq.n	80138a8 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801388a:	3310      	adds	r3, #16
 801388c:	4618      	mov	r0, r3
 801388e:	f001 f9eb 	bl	8014c68 <xTaskRemoveFromEventList>
 8013892:	4603      	mov	r3, r0
 8013894:	2b00      	cmp	r3, #0
 8013896:	d007      	beq.n	80138a8 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013898:	4b3c      	ldr	r3, [pc, #240]	@ (801398c <xQueueReceive+0x1cc>)
 801389a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801389e:	601a      	str	r2, [r3, #0]
 80138a0:	f3bf 8f4f 	dsb	sy
 80138a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80138a8:	f001 ff36 	bl	8015718 <vPortExitCritical>
				return pdPASS;
 80138ac:	2301      	movs	r3, #1
 80138ae:	e069      	b.n	8013984 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d103      	bne.n	80138be <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80138b6:	f001 ff2f 	bl	8015718 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80138ba:	2300      	movs	r3, #0
 80138bc:	e062      	b.n	8013984 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80138be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d106      	bne.n	80138d2 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80138c4:	f107 0310 	add.w	r3, r7, #16
 80138c8:	4618      	mov	r0, r3
 80138ca:	f001 fa33 	bl	8014d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80138ce:	2301      	movs	r3, #1
 80138d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80138d2:	f001 ff21 	bl	8015718 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80138d6:	f000 ff89 	bl	80147ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80138da:	f001 fee7 	bl	80156ac <vPortEnterCritical>
 80138de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80138e4:	b25b      	sxtb	r3, r3
 80138e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138ea:	d103      	bne.n	80138f4 <xQueueReceive+0x134>
 80138ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138ee:	2200      	movs	r2, #0
 80138f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80138f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80138fa:	b25b      	sxtb	r3, r3
 80138fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013900:	d103      	bne.n	801390a <xQueueReceive+0x14a>
 8013902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013904:	2200      	movs	r2, #0
 8013906:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801390a:	f001 ff05 	bl	8015718 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801390e:	1d3a      	adds	r2, r7, #4
 8013910:	f107 0310 	add.w	r3, r7, #16
 8013914:	4611      	mov	r1, r2
 8013916:	4618      	mov	r0, r3
 8013918:	f001 fa22 	bl	8014d60 <xTaskCheckForTimeOut>
 801391c:	4603      	mov	r3, r0
 801391e:	2b00      	cmp	r3, #0
 8013920:	d123      	bne.n	801396a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013922:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013924:	f000 faf4 	bl	8013f10 <prvIsQueueEmpty>
 8013928:	4603      	mov	r3, r0
 801392a:	2b00      	cmp	r3, #0
 801392c:	d017      	beq.n	801395e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801392e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013930:	3324      	adds	r3, #36	@ 0x24
 8013932:	687a      	ldr	r2, [r7, #4]
 8013934:	4611      	mov	r1, r2
 8013936:	4618      	mov	r0, r3
 8013938:	f001 f96e 	bl	8014c18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801393c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801393e:	f000 fa95 	bl	8013e6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013942:	f000 ff61 	bl	8014808 <xTaskResumeAll>
 8013946:	4603      	mov	r3, r0
 8013948:	2b00      	cmp	r3, #0
 801394a:	d189      	bne.n	8013860 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 801394c:	4b0f      	ldr	r3, [pc, #60]	@ (801398c <xQueueReceive+0x1cc>)
 801394e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013952:	601a      	str	r2, [r3, #0]
 8013954:	f3bf 8f4f 	dsb	sy
 8013958:	f3bf 8f6f 	isb	sy
 801395c:	e780      	b.n	8013860 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801395e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013960:	f000 fa84 	bl	8013e6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013964:	f000 ff50 	bl	8014808 <xTaskResumeAll>
 8013968:	e77a      	b.n	8013860 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801396a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801396c:	f000 fa7e 	bl	8013e6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013970:	f000 ff4a 	bl	8014808 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013974:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013976:	f000 facb 	bl	8013f10 <prvIsQueueEmpty>
 801397a:	4603      	mov	r3, r0
 801397c:	2b00      	cmp	r3, #0
 801397e:	f43f af6f 	beq.w	8013860 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013982:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013984:	4618      	mov	r0, r3
 8013986:	3730      	adds	r7, #48	@ 0x30
 8013988:	46bd      	mov	sp, r7
 801398a:	bd80      	pop	{r7, pc}
 801398c:	e000ed04 	.word	0xe000ed04

08013990 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b08e      	sub	sp, #56	@ 0x38
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
 8013998:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801399a:	2300      	movs	r3, #0
 801399c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80139a2:	2300      	movs	r3, #0
 80139a4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80139a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d10d      	bne.n	80139c8 <xQueueSemaphoreTake+0x38>
	__asm volatile
 80139ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139b0:	b672      	cpsid	i
 80139b2:	f383 8811 	msr	BASEPRI, r3
 80139b6:	f3bf 8f6f 	isb	sy
 80139ba:	f3bf 8f4f 	dsb	sy
 80139be:	b662      	cpsie	i
 80139c0:	623b      	str	r3, [r7, #32]
}
 80139c2:	bf00      	nop
 80139c4:	bf00      	nop
 80139c6:	e7fd      	b.n	80139c4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80139c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d00d      	beq.n	80139ec <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80139d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139d4:	b672      	cpsid	i
 80139d6:	f383 8811 	msr	BASEPRI, r3
 80139da:	f3bf 8f6f 	isb	sy
 80139de:	f3bf 8f4f 	dsb	sy
 80139e2:	b662      	cpsie	i
 80139e4:	61fb      	str	r3, [r7, #28]
}
 80139e6:	bf00      	nop
 80139e8:	bf00      	nop
 80139ea:	e7fd      	b.n	80139e8 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80139ec:	f001 fb0c 	bl	8015008 <xTaskGetSchedulerState>
 80139f0:	4603      	mov	r3, r0
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d102      	bne.n	80139fc <xQueueSemaphoreTake+0x6c>
 80139f6:	683b      	ldr	r3, [r7, #0]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d101      	bne.n	8013a00 <xQueueSemaphoreTake+0x70>
 80139fc:	2301      	movs	r3, #1
 80139fe:	e000      	b.n	8013a02 <xQueueSemaphoreTake+0x72>
 8013a00:	2300      	movs	r3, #0
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d10d      	bne.n	8013a22 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8013a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a0a:	b672      	cpsid	i
 8013a0c:	f383 8811 	msr	BASEPRI, r3
 8013a10:	f3bf 8f6f 	isb	sy
 8013a14:	f3bf 8f4f 	dsb	sy
 8013a18:	b662      	cpsie	i
 8013a1a:	61bb      	str	r3, [r7, #24]
}
 8013a1c:	bf00      	nop
 8013a1e:	bf00      	nop
 8013a20:	e7fd      	b.n	8013a1e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013a22:	f001 fe43 	bl	80156ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a2a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d024      	beq.n	8013a7c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a34:	1e5a      	subs	r2, r3, #1
 8013a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a38:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d104      	bne.n	8013a4c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013a42:	f001 fcab 	bl	801539c <pvTaskIncrementMutexHeldCount>
 8013a46:	4602      	mov	r2, r0
 8013a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a4a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a4e:	691b      	ldr	r3, [r3, #16]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d00f      	beq.n	8013a74 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a56:	3310      	adds	r3, #16
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f001 f905 	bl	8014c68 <xTaskRemoveFromEventList>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d007      	beq.n	8013a74 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013a64:	4b55      	ldr	r3, [pc, #340]	@ (8013bbc <xQueueSemaphoreTake+0x22c>)
 8013a66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013a6a:	601a      	str	r2, [r3, #0]
 8013a6c:	f3bf 8f4f 	dsb	sy
 8013a70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013a74:	f001 fe50 	bl	8015718 <vPortExitCritical>
				return pdPASS;
 8013a78:	2301      	movs	r3, #1
 8013a7a:	e09a      	b.n	8013bb2 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013a7c:	683b      	ldr	r3, [r7, #0]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d114      	bne.n	8013aac <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d00d      	beq.n	8013aa4 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8013a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a8c:	b672      	cpsid	i
 8013a8e:	f383 8811 	msr	BASEPRI, r3
 8013a92:	f3bf 8f6f 	isb	sy
 8013a96:	f3bf 8f4f 	dsb	sy
 8013a9a:	b662      	cpsie	i
 8013a9c:	617b      	str	r3, [r7, #20]
}
 8013a9e:	bf00      	nop
 8013aa0:	bf00      	nop
 8013aa2:	e7fd      	b.n	8013aa0 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013aa4:	f001 fe38 	bl	8015718 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	e082      	b.n	8013bb2 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d106      	bne.n	8013ac0 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013ab2:	f107 030c 	add.w	r3, r7, #12
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f001 f93c 	bl	8014d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013abc:	2301      	movs	r3, #1
 8013abe:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013ac0:	f001 fe2a 	bl	8015718 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013ac4:	f000 fe92 	bl	80147ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013ac8:	f001 fdf0 	bl	80156ac <vPortEnterCritical>
 8013acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ace:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013ad2:	b25b      	sxtb	r3, r3
 8013ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ad8:	d103      	bne.n	8013ae2 <xQueueSemaphoreTake+0x152>
 8013ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013adc:	2200      	movs	r2, #0
 8013ade:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013ae8:	b25b      	sxtb	r3, r3
 8013aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aee:	d103      	bne.n	8013af8 <xQueueSemaphoreTake+0x168>
 8013af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013af2:	2200      	movs	r2, #0
 8013af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013af8:	f001 fe0e 	bl	8015718 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013afc:	463a      	mov	r2, r7
 8013afe:	f107 030c 	add.w	r3, r7, #12
 8013b02:	4611      	mov	r1, r2
 8013b04:	4618      	mov	r0, r3
 8013b06:	f001 f92b 	bl	8014d60 <xTaskCheckForTimeOut>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d132      	bne.n	8013b76 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013b10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013b12:	f000 f9fd 	bl	8013f10 <prvIsQueueEmpty>
 8013b16:	4603      	mov	r3, r0
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d026      	beq.n	8013b6a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d109      	bne.n	8013b38 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8013b24:	f001 fdc2 	bl	80156ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b2a:	689b      	ldr	r3, [r3, #8]
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	f001 fa89 	bl	8015044 <xTaskPriorityInherit>
 8013b32:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8013b34:	f001 fdf0 	bl	8015718 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b3a:	3324      	adds	r3, #36	@ 0x24
 8013b3c:	683a      	ldr	r2, [r7, #0]
 8013b3e:	4611      	mov	r1, r2
 8013b40:	4618      	mov	r0, r3
 8013b42:	f001 f869 	bl	8014c18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013b46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013b48:	f000 f990 	bl	8013e6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013b4c:	f000 fe5c 	bl	8014808 <xTaskResumeAll>
 8013b50:	4603      	mov	r3, r0
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	f47f af65 	bne.w	8013a22 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8013b58:	4b18      	ldr	r3, [pc, #96]	@ (8013bbc <xQueueSemaphoreTake+0x22c>)
 8013b5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013b5e:	601a      	str	r2, [r3, #0]
 8013b60:	f3bf 8f4f 	dsb	sy
 8013b64:	f3bf 8f6f 	isb	sy
 8013b68:	e75b      	b.n	8013a22 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013b6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013b6c:	f000 f97e 	bl	8013e6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013b70:	f000 fe4a 	bl	8014808 <xTaskResumeAll>
 8013b74:	e755      	b.n	8013a22 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013b76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013b78:	f000 f978 	bl	8013e6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013b7c:	f000 fe44 	bl	8014808 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013b80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013b82:	f000 f9c5 	bl	8013f10 <prvIsQueueEmpty>
 8013b86:	4603      	mov	r3, r0
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	f43f af4a 	beq.w	8013a22 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d00d      	beq.n	8013bb0 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8013b94:	f001 fd8a 	bl	80156ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013b98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013b9a:	f000 f8bf 	bl	8013d1c <prvGetDisinheritPriorityAfterTimeout>
 8013b9e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ba2:	689b      	ldr	r3, [r3, #8]
 8013ba4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	f001 fb58 	bl	801525c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013bac:	f001 fdb4 	bl	8015718 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013bb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	3738      	adds	r7, #56	@ 0x38
 8013bb6:	46bd      	mov	sp, r7
 8013bb8:	bd80      	pop	{r7, pc}
 8013bba:	bf00      	nop
 8013bbc:	e000ed04 	.word	0xe000ed04

08013bc0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b08e      	sub	sp, #56	@ 0x38
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	60f8      	str	r0, [r7, #12]
 8013bc8:	60b9      	str	r1, [r7, #8]
 8013bca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d10d      	bne.n	8013bf2 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8013bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bda:	b672      	cpsid	i
 8013bdc:	f383 8811 	msr	BASEPRI, r3
 8013be0:	f3bf 8f6f 	isb	sy
 8013be4:	f3bf 8f4f 	dsb	sy
 8013be8:	b662      	cpsie	i
 8013bea:	623b      	str	r3, [r7, #32]
}
 8013bec:	bf00      	nop
 8013bee:	bf00      	nop
 8013bf0:	e7fd      	b.n	8013bee <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013bf2:	68bb      	ldr	r3, [r7, #8]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d103      	bne.n	8013c00 <xQueueReceiveFromISR+0x40>
 8013bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d101      	bne.n	8013c04 <xQueueReceiveFromISR+0x44>
 8013c00:	2301      	movs	r3, #1
 8013c02:	e000      	b.n	8013c06 <xQueueReceiveFromISR+0x46>
 8013c04:	2300      	movs	r3, #0
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d10d      	bne.n	8013c26 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8013c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c0e:	b672      	cpsid	i
 8013c10:	f383 8811 	msr	BASEPRI, r3
 8013c14:	f3bf 8f6f 	isb	sy
 8013c18:	f3bf 8f4f 	dsb	sy
 8013c1c:	b662      	cpsie	i
 8013c1e:	61fb      	str	r3, [r7, #28]
}
 8013c20:	bf00      	nop
 8013c22:	bf00      	nop
 8013c24:	e7fd      	b.n	8013c22 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013c26:	f001 fe29 	bl	801587c <vPortValidateInterruptPriority>
	__asm volatile
 8013c2a:	f3ef 8211 	mrs	r2, BASEPRI
 8013c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c32:	b672      	cpsid	i
 8013c34:	f383 8811 	msr	BASEPRI, r3
 8013c38:	f3bf 8f6f 	isb	sy
 8013c3c:	f3bf 8f4f 	dsb	sy
 8013c40:	b662      	cpsie	i
 8013c42:	61ba      	str	r2, [r7, #24]
 8013c44:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013c46:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c4e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d02f      	beq.n	8013cb6 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013c5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013c60:	68b9      	ldr	r1, [r7, #8]
 8013c62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013c64:	f000 f8dc 	bl	8013e20 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c6a:	1e5a      	subs	r2, r3, #1
 8013c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c6e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013c70:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c78:	d112      	bne.n	8013ca0 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c7c:	691b      	ldr	r3, [r3, #16]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d016      	beq.n	8013cb0 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c84:	3310      	adds	r3, #16
 8013c86:	4618      	mov	r0, r3
 8013c88:	f000 ffee 	bl	8014c68 <xTaskRemoveFromEventList>
 8013c8c:	4603      	mov	r3, r0
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d00e      	beq.n	8013cb0 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d00b      	beq.n	8013cb0 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	2201      	movs	r2, #1
 8013c9c:	601a      	str	r2, [r3, #0]
 8013c9e:	e007      	b.n	8013cb0 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013ca4:	3301      	adds	r3, #1
 8013ca6:	b2db      	uxtb	r3, r3
 8013ca8:	b25a      	sxtb	r2, r3
 8013caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8013cb0:	2301      	movs	r3, #1
 8013cb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8013cb4:	e001      	b.n	8013cba <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8013cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cbc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013cbe:	693b      	ldr	r3, [r7, #16]
 8013cc0:	f383 8811 	msr	BASEPRI, r3
}
 8013cc4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013cc8:	4618      	mov	r0, r3
 8013cca:	3738      	adds	r7, #56	@ 0x38
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	bd80      	pop	{r7, pc}

08013cd0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b084      	sub	sp, #16
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d10d      	bne.n	8013cfe <vQueueDelete+0x2e>
	__asm volatile
 8013ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ce6:	b672      	cpsid	i
 8013ce8:	f383 8811 	msr	BASEPRI, r3
 8013cec:	f3bf 8f6f 	isb	sy
 8013cf0:	f3bf 8f4f 	dsb	sy
 8013cf4:	b662      	cpsie	i
 8013cf6:	60bb      	str	r3, [r7, #8]
}
 8013cf8:	bf00      	nop
 8013cfa:	bf00      	nop
 8013cfc:	e7fd      	b.n	8013cfa <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8013cfe:	68f8      	ldr	r0, [r7, #12]
 8013d00:	f000 f934 	bl	8013f6c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d102      	bne.n	8013d14 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8013d0e:	68f8      	ldr	r0, [r7, #12]
 8013d10:	f001 fecc 	bl	8015aac <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013d14:	bf00      	nop
 8013d16:	3710      	adds	r7, #16
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	bd80      	pop	{r7, pc}

08013d1c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013d1c:	b480      	push	{r7}
 8013d1e:	b085      	sub	sp, #20
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d006      	beq.n	8013d3a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	f1c3 0307 	rsb	r3, r3, #7
 8013d36:	60fb      	str	r3, [r7, #12]
 8013d38:	e001      	b.n	8013d3e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013d3e:	68fb      	ldr	r3, [r7, #12]
	}
 8013d40:	4618      	mov	r0, r3
 8013d42:	3714      	adds	r7, #20
 8013d44:	46bd      	mov	sp, r7
 8013d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d4a:	4770      	bx	lr

08013d4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b086      	sub	sp, #24
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	60f8      	str	r0, [r7, #12]
 8013d54:	60b9      	str	r1, [r7, #8]
 8013d56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013d58:	2300      	movs	r3, #0
 8013d5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d10d      	bne.n	8013d86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d14d      	bne.n	8013e0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	689b      	ldr	r3, [r3, #8]
 8013d76:	4618      	mov	r0, r3
 8013d78:	f001 f9e4 	bl	8015144 <xTaskPriorityDisinherit>
 8013d7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	2200      	movs	r2, #0
 8013d82:	609a      	str	r2, [r3, #8]
 8013d84:	e043      	b.n	8013e0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d119      	bne.n	8013dc0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	6858      	ldr	r0, [r3, #4]
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d94:	461a      	mov	r2, r3
 8013d96:	68b9      	ldr	r1, [r7, #8]
 8013d98:	f002 fa9f 	bl	80162da <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	685a      	ldr	r2, [r3, #4]
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013da4:	441a      	add	r2, r3
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	685a      	ldr	r2, [r3, #4]
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	689b      	ldr	r3, [r3, #8]
 8013db2:	429a      	cmp	r2, r3
 8013db4:	d32b      	bcc.n	8013e0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	681a      	ldr	r2, [r3, #0]
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	605a      	str	r2, [r3, #4]
 8013dbe:	e026      	b.n	8013e0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	68d8      	ldr	r0, [r3, #12]
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013dc8:	461a      	mov	r2, r3
 8013dca:	68b9      	ldr	r1, [r7, #8]
 8013dcc:	f002 fa85 	bl	80162da <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	68da      	ldr	r2, [r3, #12]
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013dd8:	425b      	negs	r3, r3
 8013dda:	441a      	add	r2, r3
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	68da      	ldr	r2, [r3, #12]
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	429a      	cmp	r2, r3
 8013dea:	d207      	bcs.n	8013dfc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	689a      	ldr	r2, [r3, #8]
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013df4:	425b      	negs	r3, r3
 8013df6:	441a      	add	r2, r3
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	2b02      	cmp	r3, #2
 8013e00:	d105      	bne.n	8013e0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013e02:	693b      	ldr	r3, [r7, #16]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d002      	beq.n	8013e0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013e08:	693b      	ldr	r3, [r7, #16]
 8013e0a:	3b01      	subs	r3, #1
 8013e0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013e0e:	693b      	ldr	r3, [r7, #16]
 8013e10:	1c5a      	adds	r2, r3, #1
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8013e16:	697b      	ldr	r3, [r7, #20]
}
 8013e18:	4618      	mov	r0, r3
 8013e1a:	3718      	adds	r7, #24
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	bd80      	pop	{r7, pc}

08013e20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b082      	sub	sp, #8
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
 8013e28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d018      	beq.n	8013e64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	68da      	ldr	r2, [r3, #12]
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e3a:	441a      	add	r2, r3
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	68da      	ldr	r2, [r3, #12]
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	689b      	ldr	r3, [r3, #8]
 8013e48:	429a      	cmp	r2, r3
 8013e4a:	d303      	bcc.n	8013e54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	681a      	ldr	r2, [r3, #0]
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	68d9      	ldr	r1, [r3, #12]
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e5c:	461a      	mov	r2, r3
 8013e5e:	6838      	ldr	r0, [r7, #0]
 8013e60:	f002 fa3b 	bl	80162da <memcpy>
	}
}
 8013e64:	bf00      	nop
 8013e66:	3708      	adds	r7, #8
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bd80      	pop	{r7, pc}

08013e6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b084      	sub	sp, #16
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013e74:	f001 fc1a 	bl	80156ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013e7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013e80:	e011      	b.n	8013ea6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d012      	beq.n	8013eb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	3324      	adds	r3, #36	@ 0x24
 8013e8e:	4618      	mov	r0, r3
 8013e90:	f000 feea 	bl	8014c68 <xTaskRemoveFromEventList>
 8013e94:	4603      	mov	r3, r0
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d001      	beq.n	8013e9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013e9a:	f000 ffc9 	bl	8014e30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013e9e:	7bfb      	ldrb	r3, [r7, #15]
 8013ea0:	3b01      	subs	r3, #1
 8013ea2:	b2db      	uxtb	r3, r3
 8013ea4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	dce9      	bgt.n	8013e82 <prvUnlockQueue+0x16>
 8013eae:	e000      	b.n	8013eb2 <prvUnlockQueue+0x46>
					break;
 8013eb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	22ff      	movs	r2, #255	@ 0xff
 8013eb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8013eba:	f001 fc2d 	bl	8015718 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013ebe:	f001 fbf5 	bl	80156ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013ec8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013eca:	e011      	b.n	8013ef0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	691b      	ldr	r3, [r3, #16]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d012      	beq.n	8013efa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	3310      	adds	r3, #16
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f000 fec5 	bl	8014c68 <xTaskRemoveFromEventList>
 8013ede:	4603      	mov	r3, r0
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d001      	beq.n	8013ee8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013ee4:	f000 ffa4 	bl	8014e30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013ee8:	7bbb      	ldrb	r3, [r7, #14]
 8013eea:	3b01      	subs	r3, #1
 8013eec:	b2db      	uxtb	r3, r3
 8013eee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013ef0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	dce9      	bgt.n	8013ecc <prvUnlockQueue+0x60>
 8013ef8:	e000      	b.n	8013efc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013efa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	22ff      	movs	r2, #255	@ 0xff
 8013f00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013f04:	f001 fc08 	bl	8015718 <vPortExitCritical>
}
 8013f08:	bf00      	nop
 8013f0a:	3710      	adds	r7, #16
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	bd80      	pop	{r7, pc}

08013f10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013f10:	b580      	push	{r7, lr}
 8013f12:	b084      	sub	sp, #16
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013f18:	f001 fbc8 	bl	80156ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d102      	bne.n	8013f2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013f24:	2301      	movs	r3, #1
 8013f26:	60fb      	str	r3, [r7, #12]
 8013f28:	e001      	b.n	8013f2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013f2e:	f001 fbf3 	bl	8015718 <vPortExitCritical>

	return xReturn;
 8013f32:	68fb      	ldr	r3, [r7, #12]
}
 8013f34:	4618      	mov	r0, r3
 8013f36:	3710      	adds	r7, #16
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	bd80      	pop	{r7, pc}

08013f3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b084      	sub	sp, #16
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013f44:	f001 fbb2 	bl	80156ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013f50:	429a      	cmp	r2, r3
 8013f52:	d102      	bne.n	8013f5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013f54:	2301      	movs	r3, #1
 8013f56:	60fb      	str	r3, [r7, #12]
 8013f58:	e001      	b.n	8013f5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013f5e:	f001 fbdb 	bl	8015718 <vPortExitCritical>

	return xReturn;
 8013f62:	68fb      	ldr	r3, [r7, #12]
}
 8013f64:	4618      	mov	r0, r3
 8013f66:	3710      	adds	r7, #16
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	bd80      	pop	{r7, pc}

08013f6c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013f6c:	b480      	push	{r7}
 8013f6e:	b085      	sub	sp, #20
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013f74:	2300      	movs	r3, #0
 8013f76:	60fb      	str	r3, [r7, #12]
 8013f78:	e016      	b.n	8013fa8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013f7a:	4a10      	ldr	r2, [pc, #64]	@ (8013fbc <vQueueUnregisterQueue+0x50>)
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	00db      	lsls	r3, r3, #3
 8013f80:	4413      	add	r3, r2
 8013f82:	685b      	ldr	r3, [r3, #4]
 8013f84:	687a      	ldr	r2, [r7, #4]
 8013f86:	429a      	cmp	r2, r3
 8013f88:	d10b      	bne.n	8013fa2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013f8a:	4a0c      	ldr	r2, [pc, #48]	@ (8013fbc <vQueueUnregisterQueue+0x50>)
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	2100      	movs	r1, #0
 8013f90:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013f94:	4a09      	ldr	r2, [pc, #36]	@ (8013fbc <vQueueUnregisterQueue+0x50>)
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	00db      	lsls	r3, r3, #3
 8013f9a:	4413      	add	r3, r2
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	605a      	str	r2, [r3, #4]
				break;
 8013fa0:	e006      	b.n	8013fb0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	3301      	adds	r3, #1
 8013fa6:	60fb      	str	r3, [r7, #12]
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	2b07      	cmp	r3, #7
 8013fac:	d9e5      	bls.n	8013f7a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013fae:	bf00      	nop
 8013fb0:	bf00      	nop
 8013fb2:	3714      	adds	r7, #20
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fba:	4770      	bx	lr
 8013fbc:	20001530 	.word	0x20001530

08013fc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	b08e      	sub	sp, #56	@ 0x38
 8013fc4:	af04      	add	r7, sp, #16
 8013fc6:	60f8      	str	r0, [r7, #12]
 8013fc8:	60b9      	str	r1, [r7, #8]
 8013fca:	607a      	str	r2, [r7, #4]
 8013fcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d10d      	bne.n	8013ff0 <xTaskCreateStatic+0x30>
	__asm volatile
 8013fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fd8:	b672      	cpsid	i
 8013fda:	f383 8811 	msr	BASEPRI, r3
 8013fde:	f3bf 8f6f 	isb	sy
 8013fe2:	f3bf 8f4f 	dsb	sy
 8013fe6:	b662      	cpsie	i
 8013fe8:	623b      	str	r3, [r7, #32]
}
 8013fea:	bf00      	nop
 8013fec:	bf00      	nop
 8013fee:	e7fd      	b.n	8013fec <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8013ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d10d      	bne.n	8014012 <xTaskCreateStatic+0x52>
	__asm volatile
 8013ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ffa:	b672      	cpsid	i
 8013ffc:	f383 8811 	msr	BASEPRI, r3
 8014000:	f3bf 8f6f 	isb	sy
 8014004:	f3bf 8f4f 	dsb	sy
 8014008:	b662      	cpsie	i
 801400a:	61fb      	str	r3, [r7, #28]
}
 801400c:	bf00      	nop
 801400e:	bf00      	nop
 8014010:	e7fd      	b.n	801400e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014012:	23a0      	movs	r3, #160	@ 0xa0
 8014014:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014016:	693b      	ldr	r3, [r7, #16]
 8014018:	2ba0      	cmp	r3, #160	@ 0xa0
 801401a:	d00d      	beq.n	8014038 <xTaskCreateStatic+0x78>
	__asm volatile
 801401c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014020:	b672      	cpsid	i
 8014022:	f383 8811 	msr	BASEPRI, r3
 8014026:	f3bf 8f6f 	isb	sy
 801402a:	f3bf 8f4f 	dsb	sy
 801402e:	b662      	cpsie	i
 8014030:	61bb      	str	r3, [r7, #24]
}
 8014032:	bf00      	nop
 8014034:	bf00      	nop
 8014036:	e7fd      	b.n	8014034 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014038:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801403a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801403c:	2b00      	cmp	r3, #0
 801403e:	d01e      	beq.n	801407e <xTaskCreateStatic+0xbe>
 8014040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014042:	2b00      	cmp	r3, #0
 8014044:	d01b      	beq.n	801407e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014048:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801404c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801404e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014052:	2202      	movs	r2, #2
 8014054:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014058:	2300      	movs	r3, #0
 801405a:	9303      	str	r3, [sp, #12]
 801405c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801405e:	9302      	str	r3, [sp, #8]
 8014060:	f107 0314 	add.w	r3, r7, #20
 8014064:	9301      	str	r3, [sp, #4]
 8014066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014068:	9300      	str	r3, [sp, #0]
 801406a:	683b      	ldr	r3, [r7, #0]
 801406c:	687a      	ldr	r2, [r7, #4]
 801406e:	68b9      	ldr	r1, [r7, #8]
 8014070:	68f8      	ldr	r0, [r7, #12]
 8014072:	f000 f851 	bl	8014118 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014076:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014078:	f000 f8f8 	bl	801426c <prvAddNewTaskToReadyList>
 801407c:	e001      	b.n	8014082 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 801407e:	2300      	movs	r3, #0
 8014080:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014082:	697b      	ldr	r3, [r7, #20]
	}
 8014084:	4618      	mov	r0, r3
 8014086:	3728      	adds	r7, #40	@ 0x28
 8014088:	46bd      	mov	sp, r7
 801408a:	bd80      	pop	{r7, pc}

0801408c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801408c:	b580      	push	{r7, lr}
 801408e:	b08c      	sub	sp, #48	@ 0x30
 8014090:	af04      	add	r7, sp, #16
 8014092:	60f8      	str	r0, [r7, #12]
 8014094:	60b9      	str	r1, [r7, #8]
 8014096:	603b      	str	r3, [r7, #0]
 8014098:	4613      	mov	r3, r2
 801409a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801409c:	88fb      	ldrh	r3, [r7, #6]
 801409e:	009b      	lsls	r3, r3, #2
 80140a0:	4618      	mov	r0, r3
 80140a2:	f001 fc31 	bl	8015908 <pvPortMalloc>
 80140a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80140a8:	697b      	ldr	r3, [r7, #20]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d00e      	beq.n	80140cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80140ae:	20a0      	movs	r0, #160	@ 0xa0
 80140b0:	f001 fc2a 	bl	8015908 <pvPortMalloc>
 80140b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80140b6:	69fb      	ldr	r3, [r7, #28]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d003      	beq.n	80140c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80140bc:	69fb      	ldr	r3, [r7, #28]
 80140be:	697a      	ldr	r2, [r7, #20]
 80140c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80140c2:	e005      	b.n	80140d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80140c4:	6978      	ldr	r0, [r7, #20]
 80140c6:	f001 fcf1 	bl	8015aac <vPortFree>
 80140ca:	e001      	b.n	80140d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80140cc:	2300      	movs	r3, #0
 80140ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80140d0:	69fb      	ldr	r3, [r7, #28]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d017      	beq.n	8014106 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80140d6:	69fb      	ldr	r3, [r7, #28]
 80140d8:	2200      	movs	r2, #0
 80140da:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80140de:	88fa      	ldrh	r2, [r7, #6]
 80140e0:	2300      	movs	r3, #0
 80140e2:	9303      	str	r3, [sp, #12]
 80140e4:	69fb      	ldr	r3, [r7, #28]
 80140e6:	9302      	str	r3, [sp, #8]
 80140e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140ea:	9301      	str	r3, [sp, #4]
 80140ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140ee:	9300      	str	r3, [sp, #0]
 80140f0:	683b      	ldr	r3, [r7, #0]
 80140f2:	68b9      	ldr	r1, [r7, #8]
 80140f4:	68f8      	ldr	r0, [r7, #12]
 80140f6:	f000 f80f 	bl	8014118 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80140fa:	69f8      	ldr	r0, [r7, #28]
 80140fc:	f000 f8b6 	bl	801426c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014100:	2301      	movs	r3, #1
 8014102:	61bb      	str	r3, [r7, #24]
 8014104:	e002      	b.n	801410c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014106:	f04f 33ff 	mov.w	r3, #4294967295
 801410a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801410c:	69bb      	ldr	r3, [r7, #24]
	}
 801410e:	4618      	mov	r0, r3
 8014110:	3720      	adds	r7, #32
 8014112:	46bd      	mov	sp, r7
 8014114:	bd80      	pop	{r7, pc}
	...

08014118 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b088      	sub	sp, #32
 801411c:	af00      	add	r7, sp, #0
 801411e:	60f8      	str	r0, [r7, #12]
 8014120:	60b9      	str	r1, [r7, #8]
 8014122:	607a      	str	r2, [r7, #4]
 8014124:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014128:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	009b      	lsls	r3, r3, #2
 801412e:	461a      	mov	r2, r3
 8014130:	21a5      	movs	r1, #165	@ 0xa5
 8014132:	f001 fff0 	bl	8016116 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014138:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801413a:	6879      	ldr	r1, [r7, #4]
 801413c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8014140:	440b      	add	r3, r1
 8014142:	009b      	lsls	r3, r3, #2
 8014144:	4413      	add	r3, r2
 8014146:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014148:	69bb      	ldr	r3, [r7, #24]
 801414a:	f023 0307 	bic.w	r3, r3, #7
 801414e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014150:	69bb      	ldr	r3, [r7, #24]
 8014152:	f003 0307 	and.w	r3, r3, #7
 8014156:	2b00      	cmp	r3, #0
 8014158:	d00d      	beq.n	8014176 <prvInitialiseNewTask+0x5e>
	__asm volatile
 801415a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801415e:	b672      	cpsid	i
 8014160:	f383 8811 	msr	BASEPRI, r3
 8014164:	f3bf 8f6f 	isb	sy
 8014168:	f3bf 8f4f 	dsb	sy
 801416c:	b662      	cpsie	i
 801416e:	617b      	str	r3, [r7, #20]
}
 8014170:	bf00      	nop
 8014172:	bf00      	nop
 8014174:	e7fd      	b.n	8014172 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014176:	68bb      	ldr	r3, [r7, #8]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d01f      	beq.n	80141bc <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801417c:	2300      	movs	r3, #0
 801417e:	61fb      	str	r3, [r7, #28]
 8014180:	e012      	b.n	80141a8 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014182:	68ba      	ldr	r2, [r7, #8]
 8014184:	69fb      	ldr	r3, [r7, #28]
 8014186:	4413      	add	r3, r2
 8014188:	7819      	ldrb	r1, [r3, #0]
 801418a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801418c:	69fb      	ldr	r3, [r7, #28]
 801418e:	4413      	add	r3, r2
 8014190:	3334      	adds	r3, #52	@ 0x34
 8014192:	460a      	mov	r2, r1
 8014194:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014196:	68ba      	ldr	r2, [r7, #8]
 8014198:	69fb      	ldr	r3, [r7, #28]
 801419a:	4413      	add	r3, r2
 801419c:	781b      	ldrb	r3, [r3, #0]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d006      	beq.n	80141b0 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80141a2:	69fb      	ldr	r3, [r7, #28]
 80141a4:	3301      	adds	r3, #1
 80141a6:	61fb      	str	r3, [r7, #28]
 80141a8:	69fb      	ldr	r3, [r7, #28]
 80141aa:	2b0f      	cmp	r3, #15
 80141ac:	d9e9      	bls.n	8014182 <prvInitialiseNewTask+0x6a>
 80141ae:	e000      	b.n	80141b2 <prvInitialiseNewTask+0x9a>
			{
				break;
 80141b0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80141b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141b4:	2200      	movs	r2, #0
 80141b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80141ba:	e003      	b.n	80141c4 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80141bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141be:	2200      	movs	r2, #0
 80141c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80141c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141c6:	2b06      	cmp	r3, #6
 80141c8:	d901      	bls.n	80141ce <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80141ca:	2306      	movs	r3, #6
 80141cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80141ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80141d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80141d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80141d8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80141da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141dc:	2200      	movs	r2, #0
 80141de:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80141e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141e2:	3304      	adds	r3, #4
 80141e4:	4618      	mov	r0, r3
 80141e6:	f7fe fe6f 	bl	8012ec8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80141ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141ec:	3318      	adds	r3, #24
 80141ee:	4618      	mov	r0, r3
 80141f0:	f7fe fe6a 	bl	8012ec8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80141f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80141f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80141fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141fc:	f1c3 0207 	rsb	r2, r3, #7
 8014200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014202:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014208:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801420a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801420c:	2200      	movs	r2, #0
 801420e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014214:	2200      	movs	r2, #0
 8014216:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801421a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801421c:	334c      	adds	r3, #76	@ 0x4c
 801421e:	224c      	movs	r2, #76	@ 0x4c
 8014220:	2100      	movs	r1, #0
 8014222:	4618      	mov	r0, r3
 8014224:	f001 ff77 	bl	8016116 <memset>
 8014228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801422a:	4a0d      	ldr	r2, [pc, #52]	@ (8014260 <prvInitialiseNewTask+0x148>)
 801422c:	651a      	str	r2, [r3, #80]	@ 0x50
 801422e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014230:	4a0c      	ldr	r2, [pc, #48]	@ (8014264 <prvInitialiseNewTask+0x14c>)
 8014232:	655a      	str	r2, [r3, #84]	@ 0x54
 8014234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014236:	4a0c      	ldr	r2, [pc, #48]	@ (8014268 <prvInitialiseNewTask+0x150>)
 8014238:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801423a:	683a      	ldr	r2, [r7, #0]
 801423c:	68f9      	ldr	r1, [r7, #12]
 801423e:	69b8      	ldr	r0, [r7, #24]
 8014240:	f001 f926 	bl	8015490 <pxPortInitialiseStack>
 8014244:	4602      	mov	r2, r0
 8014246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014248:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801424a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801424c:	2b00      	cmp	r3, #0
 801424e:	d002      	beq.n	8014256 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014252:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014254:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014256:	bf00      	nop
 8014258:	3720      	adds	r7, #32
 801425a:	46bd      	mov	sp, r7
 801425c:	bd80      	pop	{r7, pc}
 801425e:	bf00      	nop
 8014260:	200096c4 	.word	0x200096c4
 8014264:	2000972c 	.word	0x2000972c
 8014268:	20009794 	.word	0x20009794

0801426c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801426c:	b580      	push	{r7, lr}
 801426e:	b082      	sub	sp, #8
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014274:	f001 fa1a 	bl	80156ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014278:	4b2a      	ldr	r3, [pc, #168]	@ (8014324 <prvAddNewTaskToReadyList+0xb8>)
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	3301      	adds	r3, #1
 801427e:	4a29      	ldr	r2, [pc, #164]	@ (8014324 <prvAddNewTaskToReadyList+0xb8>)
 8014280:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014282:	4b29      	ldr	r3, [pc, #164]	@ (8014328 <prvAddNewTaskToReadyList+0xbc>)
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d109      	bne.n	801429e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801428a:	4a27      	ldr	r2, [pc, #156]	@ (8014328 <prvAddNewTaskToReadyList+0xbc>)
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014290:	4b24      	ldr	r3, [pc, #144]	@ (8014324 <prvAddNewTaskToReadyList+0xb8>)
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	2b01      	cmp	r3, #1
 8014296:	d110      	bne.n	80142ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014298:	f000 fdf0 	bl	8014e7c <prvInitialiseTaskLists>
 801429c:	e00d      	b.n	80142ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801429e:	4b23      	ldr	r3, [pc, #140]	@ (801432c <prvAddNewTaskToReadyList+0xc0>)
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d109      	bne.n	80142ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80142a6:	4b20      	ldr	r3, [pc, #128]	@ (8014328 <prvAddNewTaskToReadyList+0xbc>)
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142b0:	429a      	cmp	r2, r3
 80142b2:	d802      	bhi.n	80142ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80142b4:	4a1c      	ldr	r2, [pc, #112]	@ (8014328 <prvAddNewTaskToReadyList+0xbc>)
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80142ba:	4b1d      	ldr	r3, [pc, #116]	@ (8014330 <prvAddNewTaskToReadyList+0xc4>)
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	3301      	adds	r3, #1
 80142c0:	4a1b      	ldr	r2, [pc, #108]	@ (8014330 <prvAddNewTaskToReadyList+0xc4>)
 80142c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142c8:	2201      	movs	r2, #1
 80142ca:	409a      	lsls	r2, r3
 80142cc:	4b19      	ldr	r3, [pc, #100]	@ (8014334 <prvAddNewTaskToReadyList+0xc8>)
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	4313      	orrs	r3, r2
 80142d2:	4a18      	ldr	r2, [pc, #96]	@ (8014334 <prvAddNewTaskToReadyList+0xc8>)
 80142d4:	6013      	str	r3, [r2, #0]
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80142da:	4613      	mov	r3, r2
 80142dc:	009b      	lsls	r3, r3, #2
 80142de:	4413      	add	r3, r2
 80142e0:	009b      	lsls	r3, r3, #2
 80142e2:	4a15      	ldr	r2, [pc, #84]	@ (8014338 <prvAddNewTaskToReadyList+0xcc>)
 80142e4:	441a      	add	r2, r3
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	3304      	adds	r3, #4
 80142ea:	4619      	mov	r1, r3
 80142ec:	4610      	mov	r0, r2
 80142ee:	f7fe fdf8 	bl	8012ee2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80142f2:	f001 fa11 	bl	8015718 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80142f6:	4b0d      	ldr	r3, [pc, #52]	@ (801432c <prvAddNewTaskToReadyList+0xc0>)
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d00e      	beq.n	801431c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80142fe:	4b0a      	ldr	r3, [pc, #40]	@ (8014328 <prvAddNewTaskToReadyList+0xbc>)
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014308:	429a      	cmp	r2, r3
 801430a:	d207      	bcs.n	801431c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801430c:	4b0b      	ldr	r3, [pc, #44]	@ (801433c <prvAddNewTaskToReadyList+0xd0>)
 801430e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014312:	601a      	str	r2, [r3, #0]
 8014314:	f3bf 8f4f 	dsb	sy
 8014318:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801431c:	bf00      	nop
 801431e:	3708      	adds	r7, #8
 8014320:	46bd      	mov	sp, r7
 8014322:	bd80      	pop	{r7, pc}
 8014324:	20001670 	.word	0x20001670
 8014328:	20001570 	.word	0x20001570
 801432c:	2000167c 	.word	0x2000167c
 8014330:	2000168c 	.word	0x2000168c
 8014334:	20001678 	.word	0x20001678
 8014338:	20001574 	.word	0x20001574
 801433c:	e000ed04 	.word	0xe000ed04

08014340 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8014340:	b580      	push	{r7, lr}
 8014342:	b08a      	sub	sp, #40	@ 0x28
 8014344:	af00      	add	r7, sp, #0
 8014346:	6078      	str	r0, [r7, #4]
 8014348:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801434a:	2300      	movs	r3, #0
 801434c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d10d      	bne.n	8014370 <vTaskDelayUntil+0x30>
	__asm volatile
 8014354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014358:	b672      	cpsid	i
 801435a:	f383 8811 	msr	BASEPRI, r3
 801435e:	f3bf 8f6f 	isb	sy
 8014362:	f3bf 8f4f 	dsb	sy
 8014366:	b662      	cpsie	i
 8014368:	617b      	str	r3, [r7, #20]
}
 801436a:	bf00      	nop
 801436c:	bf00      	nop
 801436e:	e7fd      	b.n	801436c <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8014370:	683b      	ldr	r3, [r7, #0]
 8014372:	2b00      	cmp	r3, #0
 8014374:	d10d      	bne.n	8014392 <vTaskDelayUntil+0x52>
	__asm volatile
 8014376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801437a:	b672      	cpsid	i
 801437c:	f383 8811 	msr	BASEPRI, r3
 8014380:	f3bf 8f6f 	isb	sy
 8014384:	f3bf 8f4f 	dsb	sy
 8014388:	b662      	cpsie	i
 801438a:	613b      	str	r3, [r7, #16]
}
 801438c:	bf00      	nop
 801438e:	bf00      	nop
 8014390:	e7fd      	b.n	801438e <vTaskDelayUntil+0x4e>
		configASSERT( uxSchedulerSuspended == 0 );
 8014392:	4b2b      	ldr	r3, [pc, #172]	@ (8014440 <vTaskDelayUntil+0x100>)
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d00d      	beq.n	80143b6 <vTaskDelayUntil+0x76>
	__asm volatile
 801439a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801439e:	b672      	cpsid	i
 80143a0:	f383 8811 	msr	BASEPRI, r3
 80143a4:	f3bf 8f6f 	isb	sy
 80143a8:	f3bf 8f4f 	dsb	sy
 80143ac:	b662      	cpsie	i
 80143ae:	60fb      	str	r3, [r7, #12]
}
 80143b0:	bf00      	nop
 80143b2:	bf00      	nop
 80143b4:	e7fd      	b.n	80143b2 <vTaskDelayUntil+0x72>

		vTaskSuspendAll();
 80143b6:	f000 fa19 	bl	80147ec <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80143ba:	4b22      	ldr	r3, [pc, #136]	@ (8014444 <vTaskDelayUntil+0x104>)
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	683a      	ldr	r2, [r7, #0]
 80143c6:	4413      	add	r3, r2
 80143c8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	6a3a      	ldr	r2, [r7, #32]
 80143d0:	429a      	cmp	r2, r3
 80143d2:	d20b      	bcs.n	80143ec <vTaskDelayUntil+0xac>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	69fa      	ldr	r2, [r7, #28]
 80143da:	429a      	cmp	r2, r3
 80143dc:	d211      	bcs.n	8014402 <vTaskDelayUntil+0xc2>
 80143de:	69fa      	ldr	r2, [r7, #28]
 80143e0:	6a3b      	ldr	r3, [r7, #32]
 80143e2:	429a      	cmp	r2, r3
 80143e4:	d90d      	bls.n	8014402 <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 80143e6:	2301      	movs	r3, #1
 80143e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80143ea:	e00a      	b.n	8014402 <vTaskDelayUntil+0xc2>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	69fa      	ldr	r2, [r7, #28]
 80143f2:	429a      	cmp	r2, r3
 80143f4:	d303      	bcc.n	80143fe <vTaskDelayUntil+0xbe>
 80143f6:	69fa      	ldr	r2, [r7, #28]
 80143f8:	6a3b      	ldr	r3, [r7, #32]
 80143fa:	429a      	cmp	r2, r3
 80143fc:	d901      	bls.n	8014402 <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 80143fe:	2301      	movs	r3, #1
 8014400:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	69fa      	ldr	r2, [r7, #28]
 8014406:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8014408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801440a:	2b00      	cmp	r3, #0
 801440c:	d006      	beq.n	801441c <vTaskDelayUntil+0xdc>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801440e:	69fa      	ldr	r2, [r7, #28]
 8014410:	6a3b      	ldr	r3, [r7, #32]
 8014412:	1ad3      	subs	r3, r2, r3
 8014414:	2100      	movs	r1, #0
 8014416:	4618      	mov	r0, r3
 8014418:	f000 ffd4 	bl	80153c4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801441c:	f000 f9f4 	bl	8014808 <xTaskResumeAll>
 8014420:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014422:	69bb      	ldr	r3, [r7, #24]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d107      	bne.n	8014438 <vTaskDelayUntil+0xf8>
		{
			portYIELD_WITHIN_API();
 8014428:	4b07      	ldr	r3, [pc, #28]	@ (8014448 <vTaskDelayUntil+0x108>)
 801442a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801442e:	601a      	str	r2, [r3, #0]
 8014430:	f3bf 8f4f 	dsb	sy
 8014434:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014438:	bf00      	nop
 801443a:	3728      	adds	r7, #40	@ 0x28
 801443c:	46bd      	mov	sp, r7
 801443e:	bd80      	pop	{r7, pc}
 8014440:	20001698 	.word	0x20001698
 8014444:	20001674 	.word	0x20001674
 8014448:	e000ed04 	.word	0xe000ed04

0801444c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801444c:	b580      	push	{r7, lr}
 801444e:	b084      	sub	sp, #16
 8014450:	af00      	add	r7, sp, #0
 8014452:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014454:	2300      	movs	r3, #0
 8014456:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d01a      	beq.n	8014494 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801445e:	4b15      	ldr	r3, [pc, #84]	@ (80144b4 <vTaskDelay+0x68>)
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d00d      	beq.n	8014482 <vTaskDelay+0x36>
	__asm volatile
 8014466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801446a:	b672      	cpsid	i
 801446c:	f383 8811 	msr	BASEPRI, r3
 8014470:	f3bf 8f6f 	isb	sy
 8014474:	f3bf 8f4f 	dsb	sy
 8014478:	b662      	cpsie	i
 801447a:	60bb      	str	r3, [r7, #8]
}
 801447c:	bf00      	nop
 801447e:	bf00      	nop
 8014480:	e7fd      	b.n	801447e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8014482:	f000 f9b3 	bl	80147ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014486:	2100      	movs	r1, #0
 8014488:	6878      	ldr	r0, [r7, #4]
 801448a:	f000 ff9b 	bl	80153c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801448e:	f000 f9bb 	bl	8014808 <xTaskResumeAll>
 8014492:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	2b00      	cmp	r3, #0
 8014498:	d107      	bne.n	80144aa <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 801449a:	4b07      	ldr	r3, [pc, #28]	@ (80144b8 <vTaskDelay+0x6c>)
 801449c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80144a0:	601a      	str	r2, [r3, #0]
 80144a2:	f3bf 8f4f 	dsb	sy
 80144a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80144aa:	bf00      	nop
 80144ac:	3710      	adds	r7, #16
 80144ae:	46bd      	mov	sp, r7
 80144b0:	bd80      	pop	{r7, pc}
 80144b2:	bf00      	nop
 80144b4:	20001698 	.word	0x20001698
 80144b8:	e000ed04 	.word	0xe000ed04

080144bc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80144bc:	b580      	push	{r7, lr}
 80144be:	b084      	sub	sp, #16
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80144c4:	f001 f8f2 	bl	80156ac <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d102      	bne.n	80144d4 <vTaskSuspend+0x18>
 80144ce:	4b3e      	ldr	r3, [pc, #248]	@ (80145c8 <vTaskSuspend+0x10c>)
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	e000      	b.n	80144d6 <vTaskSuspend+0x1a>
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	3304      	adds	r3, #4
 80144dc:	4618      	mov	r0, r3
 80144de:	f7fe fd5d 	bl	8012f9c <uxListRemove>
 80144e2:	4603      	mov	r3, r0
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d115      	bne.n	8014514 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80144ec:	4937      	ldr	r1, [pc, #220]	@ (80145cc <vTaskSuspend+0x110>)
 80144ee:	4613      	mov	r3, r2
 80144f0:	009b      	lsls	r3, r3, #2
 80144f2:	4413      	add	r3, r2
 80144f4:	009b      	lsls	r3, r3, #2
 80144f6:	440b      	add	r3, r1
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d10a      	bne.n	8014514 <vTaskSuspend+0x58>
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014502:	2201      	movs	r2, #1
 8014504:	fa02 f303 	lsl.w	r3, r2, r3
 8014508:	43da      	mvns	r2, r3
 801450a:	4b31      	ldr	r3, [pc, #196]	@ (80145d0 <vTaskSuspend+0x114>)
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	4013      	ands	r3, r2
 8014510:	4a2f      	ldr	r2, [pc, #188]	@ (80145d0 <vTaskSuspend+0x114>)
 8014512:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014518:	2b00      	cmp	r3, #0
 801451a:	d004      	beq.n	8014526 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	3318      	adds	r3, #24
 8014520:	4618      	mov	r0, r3
 8014522:	f7fe fd3b 	bl	8012f9c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	3304      	adds	r3, #4
 801452a:	4619      	mov	r1, r3
 801452c:	4829      	ldr	r0, [pc, #164]	@ (80145d4 <vTaskSuspend+0x118>)
 801452e:	f7fe fcd8 	bl	8012ee2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8014538:	b2db      	uxtb	r3, r3
 801453a:	2b01      	cmp	r3, #1
 801453c:	d103      	bne.n	8014546 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	2200      	movs	r2, #0
 8014542:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8014546:	f001 f8e7 	bl	8015718 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801454a:	4b23      	ldr	r3, [pc, #140]	@ (80145d8 <vTaskSuspend+0x11c>)
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d005      	beq.n	801455e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8014552:	f001 f8ab 	bl	80156ac <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8014556:	f000 fd37 	bl	8014fc8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801455a:	f001 f8dd 	bl	8015718 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801455e:	4b1a      	ldr	r3, [pc, #104]	@ (80145c8 <vTaskSuspend+0x10c>)
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	68fa      	ldr	r2, [r7, #12]
 8014564:	429a      	cmp	r2, r3
 8014566:	d12a      	bne.n	80145be <vTaskSuspend+0x102>
		{
			if( xSchedulerRunning != pdFALSE )
 8014568:	4b1b      	ldr	r3, [pc, #108]	@ (80145d8 <vTaskSuspend+0x11c>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d01a      	beq.n	80145a6 <vTaskSuspend+0xea>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8014570:	4b1a      	ldr	r3, [pc, #104]	@ (80145dc <vTaskSuspend+0x120>)
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d00d      	beq.n	8014594 <vTaskSuspend+0xd8>
	__asm volatile
 8014578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801457c:	b672      	cpsid	i
 801457e:	f383 8811 	msr	BASEPRI, r3
 8014582:	f3bf 8f6f 	isb	sy
 8014586:	f3bf 8f4f 	dsb	sy
 801458a:	b662      	cpsie	i
 801458c:	60bb      	str	r3, [r7, #8]
}
 801458e:	bf00      	nop
 8014590:	bf00      	nop
 8014592:	e7fd      	b.n	8014590 <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 8014594:	4b12      	ldr	r3, [pc, #72]	@ (80145e0 <vTaskSuspend+0x124>)
 8014596:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801459a:	601a      	str	r2, [r3, #0]
 801459c:	f3bf 8f4f 	dsb	sy
 80145a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80145a4:	e00b      	b.n	80145be <vTaskSuspend+0x102>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80145a6:	4b0b      	ldr	r3, [pc, #44]	@ (80145d4 <vTaskSuspend+0x118>)
 80145a8:	681a      	ldr	r2, [r3, #0]
 80145aa:	4b0e      	ldr	r3, [pc, #56]	@ (80145e4 <vTaskSuspend+0x128>)
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	429a      	cmp	r2, r3
 80145b0:	d103      	bne.n	80145ba <vTaskSuspend+0xfe>
					pxCurrentTCB = NULL;
 80145b2:	4b05      	ldr	r3, [pc, #20]	@ (80145c8 <vTaskSuspend+0x10c>)
 80145b4:	2200      	movs	r2, #0
 80145b6:	601a      	str	r2, [r3, #0]
	}
 80145b8:	e001      	b.n	80145be <vTaskSuspend+0x102>
					vTaskSwitchContext();
 80145ba:	f000 faa3 	bl	8014b04 <vTaskSwitchContext>
	}
 80145be:	bf00      	nop
 80145c0:	3710      	adds	r7, #16
 80145c2:	46bd      	mov	sp, r7
 80145c4:	bd80      	pop	{r7, pc}
 80145c6:	bf00      	nop
 80145c8:	20001570 	.word	0x20001570
 80145cc:	20001574 	.word	0x20001574
 80145d0:	20001678 	.word	0x20001678
 80145d4:	2000165c 	.word	0x2000165c
 80145d8:	2000167c 	.word	0x2000167c
 80145dc:	20001698 	.word	0x20001698
 80145e0:	e000ed04 	.word	0xe000ed04
 80145e4:	20001670 	.word	0x20001670

080145e8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80145e8:	b480      	push	{r7}
 80145ea:	b087      	sub	sp, #28
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80145f0:	2300      	movs	r3, #0
 80145f2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d10d      	bne.n	801461a <prvTaskIsTaskSuspended+0x32>
	__asm volatile
 80145fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014602:	b672      	cpsid	i
 8014604:	f383 8811 	msr	BASEPRI, r3
 8014608:	f3bf 8f6f 	isb	sy
 801460c:	f3bf 8f4f 	dsb	sy
 8014610:	b662      	cpsie	i
 8014612:	60fb      	str	r3, [r7, #12]
}
 8014614:	bf00      	nop
 8014616:	bf00      	nop
 8014618:	e7fd      	b.n	8014616 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801461a:	693b      	ldr	r3, [r7, #16]
 801461c:	695b      	ldr	r3, [r3, #20]
 801461e:	4a0a      	ldr	r2, [pc, #40]	@ (8014648 <prvTaskIsTaskSuspended+0x60>)
 8014620:	4293      	cmp	r3, r2
 8014622:	d10a      	bne.n	801463a <prvTaskIsTaskSuspended+0x52>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8014624:	693b      	ldr	r3, [r7, #16]
 8014626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014628:	4a08      	ldr	r2, [pc, #32]	@ (801464c <prvTaskIsTaskSuspended+0x64>)
 801462a:	4293      	cmp	r3, r2
 801462c:	d005      	beq.n	801463a <prvTaskIsTaskSuspended+0x52>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801462e:	693b      	ldr	r3, [r7, #16]
 8014630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014632:	2b00      	cmp	r3, #0
 8014634:	d101      	bne.n	801463a <prvTaskIsTaskSuspended+0x52>
				{
					xReturn = pdTRUE;
 8014636:	2301      	movs	r3, #1
 8014638:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801463a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801463c:	4618      	mov	r0, r3
 801463e:	371c      	adds	r7, #28
 8014640:	46bd      	mov	sp, r7
 8014642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014646:	4770      	bx	lr
 8014648:	2000165c 	.word	0x2000165c
 801464c:	20001630 	.word	0x20001630

08014650 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8014650:	b580      	push	{r7, lr}
 8014652:	b084      	sub	sp, #16
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d10d      	bne.n	801467e <vTaskResume+0x2e>
	__asm volatile
 8014662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014666:	b672      	cpsid	i
 8014668:	f383 8811 	msr	BASEPRI, r3
 801466c:	f3bf 8f6f 	isb	sy
 8014670:	f3bf 8f4f 	dsb	sy
 8014674:	b662      	cpsie	i
 8014676:	60bb      	str	r3, [r7, #8]
}
 8014678:	bf00      	nop
 801467a:	bf00      	nop
 801467c:	e7fd      	b.n	801467a <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 801467e:	4b20      	ldr	r3, [pc, #128]	@ (8014700 <vTaskResume+0xb0>)
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	68fa      	ldr	r2, [r7, #12]
 8014684:	429a      	cmp	r2, r3
 8014686:	d037      	beq.n	80146f8 <vTaskResume+0xa8>
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d034      	beq.n	80146f8 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 801468e:	f001 f80d 	bl	80156ac <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8014692:	68f8      	ldr	r0, [r7, #12]
 8014694:	f7ff ffa8 	bl	80145e8 <prvTaskIsTaskSuspended>
 8014698:	4603      	mov	r3, r0
 801469a:	2b00      	cmp	r3, #0
 801469c:	d02a      	beq.n	80146f4 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	3304      	adds	r3, #4
 80146a2:	4618      	mov	r0, r3
 80146a4:	f7fe fc7a 	bl	8012f9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146ac:	2201      	movs	r2, #1
 80146ae:	409a      	lsls	r2, r3
 80146b0:	4b14      	ldr	r3, [pc, #80]	@ (8014704 <vTaskResume+0xb4>)
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	4313      	orrs	r3, r2
 80146b6:	4a13      	ldr	r2, [pc, #76]	@ (8014704 <vTaskResume+0xb4>)
 80146b8:	6013      	str	r3, [r2, #0]
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146be:	4613      	mov	r3, r2
 80146c0:	009b      	lsls	r3, r3, #2
 80146c2:	4413      	add	r3, r2
 80146c4:	009b      	lsls	r3, r3, #2
 80146c6:	4a10      	ldr	r2, [pc, #64]	@ (8014708 <vTaskResume+0xb8>)
 80146c8:	441a      	add	r2, r3
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	3304      	adds	r3, #4
 80146ce:	4619      	mov	r1, r3
 80146d0:	4610      	mov	r0, r2
 80146d2:	f7fe fc06 	bl	8012ee2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146da:	4b09      	ldr	r3, [pc, #36]	@ (8014700 <vTaskResume+0xb0>)
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146e0:	429a      	cmp	r2, r3
 80146e2:	d307      	bcc.n	80146f4 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80146e4:	4b09      	ldr	r3, [pc, #36]	@ (801470c <vTaskResume+0xbc>)
 80146e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80146ea:	601a      	str	r2, [r3, #0]
 80146ec:	f3bf 8f4f 	dsb	sy
 80146f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80146f4:	f001 f810 	bl	8015718 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80146f8:	bf00      	nop
 80146fa:	3710      	adds	r7, #16
 80146fc:	46bd      	mov	sp, r7
 80146fe:	bd80      	pop	{r7, pc}
 8014700:	20001570 	.word	0x20001570
 8014704:	20001678 	.word	0x20001678
 8014708:	20001574 	.word	0x20001574
 801470c:	e000ed04 	.word	0xe000ed04

08014710 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b08a      	sub	sp, #40	@ 0x28
 8014714:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014716:	2300      	movs	r3, #0
 8014718:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801471a:	2300      	movs	r3, #0
 801471c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801471e:	463a      	mov	r2, r7
 8014720:	1d39      	adds	r1, r7, #4
 8014722:	f107 0308 	add.w	r3, r7, #8
 8014726:	4618      	mov	r0, r3
 8014728:	f7ee fec8 	bl	80034bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801472c:	6839      	ldr	r1, [r7, #0]
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	68ba      	ldr	r2, [r7, #8]
 8014732:	9202      	str	r2, [sp, #8]
 8014734:	9301      	str	r3, [sp, #4]
 8014736:	2300      	movs	r3, #0
 8014738:	9300      	str	r3, [sp, #0]
 801473a:	2300      	movs	r3, #0
 801473c:	460a      	mov	r2, r1
 801473e:	4923      	ldr	r1, [pc, #140]	@ (80147cc <vTaskStartScheduler+0xbc>)
 8014740:	4823      	ldr	r0, [pc, #140]	@ (80147d0 <vTaskStartScheduler+0xc0>)
 8014742:	f7ff fc3d 	bl	8013fc0 <xTaskCreateStatic>
 8014746:	4603      	mov	r3, r0
 8014748:	4a22      	ldr	r2, [pc, #136]	@ (80147d4 <vTaskStartScheduler+0xc4>)
 801474a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801474c:	4b21      	ldr	r3, [pc, #132]	@ (80147d4 <vTaskStartScheduler+0xc4>)
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d002      	beq.n	801475a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014754:	2301      	movs	r3, #1
 8014756:	617b      	str	r3, [r7, #20]
 8014758:	e001      	b.n	801475e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801475a:	2300      	movs	r3, #0
 801475c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801475e:	697b      	ldr	r3, [r7, #20]
 8014760:	2b01      	cmp	r3, #1
 8014762:	d11d      	bne.n	80147a0 <vTaskStartScheduler+0x90>
	__asm volatile
 8014764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014768:	b672      	cpsid	i
 801476a:	f383 8811 	msr	BASEPRI, r3
 801476e:	f3bf 8f6f 	isb	sy
 8014772:	f3bf 8f4f 	dsb	sy
 8014776:	b662      	cpsie	i
 8014778:	613b      	str	r3, [r7, #16]
}
 801477a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801477c:	4b16      	ldr	r3, [pc, #88]	@ (80147d8 <vTaskStartScheduler+0xc8>)
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	334c      	adds	r3, #76	@ 0x4c
 8014782:	4a16      	ldr	r2, [pc, #88]	@ (80147dc <vTaskStartScheduler+0xcc>)
 8014784:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014786:	4b16      	ldr	r3, [pc, #88]	@ (80147e0 <vTaskStartScheduler+0xd0>)
 8014788:	f04f 32ff 	mov.w	r2, #4294967295
 801478c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801478e:	4b15      	ldr	r3, [pc, #84]	@ (80147e4 <vTaskStartScheduler+0xd4>)
 8014790:	2201      	movs	r2, #1
 8014792:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014794:	4b14      	ldr	r3, [pc, #80]	@ (80147e8 <vTaskStartScheduler+0xd8>)
 8014796:	2200      	movs	r2, #0
 8014798:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801479a:	f000 ff09 	bl	80155b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801479e:	e011      	b.n	80147c4 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80147a0:	697b      	ldr	r3, [r7, #20]
 80147a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147a6:	d10d      	bne.n	80147c4 <vTaskStartScheduler+0xb4>
	__asm volatile
 80147a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147ac:	b672      	cpsid	i
 80147ae:	f383 8811 	msr	BASEPRI, r3
 80147b2:	f3bf 8f6f 	isb	sy
 80147b6:	f3bf 8f4f 	dsb	sy
 80147ba:	b662      	cpsie	i
 80147bc:	60fb      	str	r3, [r7, #12]
}
 80147be:	bf00      	nop
 80147c0:	bf00      	nop
 80147c2:	e7fd      	b.n	80147c0 <vTaskStartScheduler+0xb0>
}
 80147c4:	bf00      	nop
 80147c6:	3718      	adds	r7, #24
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd80      	pop	{r7, pc}
 80147cc:	0801736c 	.word	0x0801736c
 80147d0:	08014e49 	.word	0x08014e49
 80147d4:	20001694 	.word	0x20001694
 80147d8:	20001570 	.word	0x20001570
 80147dc:	200000ac 	.word	0x200000ac
 80147e0:	20001690 	.word	0x20001690
 80147e4:	2000167c 	.word	0x2000167c
 80147e8:	20001674 	.word	0x20001674

080147ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80147ec:	b480      	push	{r7}
 80147ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80147f0:	4b04      	ldr	r3, [pc, #16]	@ (8014804 <vTaskSuspendAll+0x18>)
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	3301      	adds	r3, #1
 80147f6:	4a03      	ldr	r2, [pc, #12]	@ (8014804 <vTaskSuspendAll+0x18>)
 80147f8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80147fa:	bf00      	nop
 80147fc:	46bd      	mov	sp, r7
 80147fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014802:	4770      	bx	lr
 8014804:	20001698 	.word	0x20001698

08014808 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014808:	b580      	push	{r7, lr}
 801480a:	b084      	sub	sp, #16
 801480c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801480e:	2300      	movs	r3, #0
 8014810:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014812:	2300      	movs	r3, #0
 8014814:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014816:	4b43      	ldr	r3, [pc, #268]	@ (8014924 <xTaskResumeAll+0x11c>)
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d10d      	bne.n	801483a <xTaskResumeAll+0x32>
	__asm volatile
 801481e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014822:	b672      	cpsid	i
 8014824:	f383 8811 	msr	BASEPRI, r3
 8014828:	f3bf 8f6f 	isb	sy
 801482c:	f3bf 8f4f 	dsb	sy
 8014830:	b662      	cpsie	i
 8014832:	603b      	str	r3, [r7, #0]
}
 8014834:	bf00      	nop
 8014836:	bf00      	nop
 8014838:	e7fd      	b.n	8014836 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801483a:	f000 ff37 	bl	80156ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801483e:	4b39      	ldr	r3, [pc, #228]	@ (8014924 <xTaskResumeAll+0x11c>)
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	3b01      	subs	r3, #1
 8014844:	4a37      	ldr	r2, [pc, #220]	@ (8014924 <xTaskResumeAll+0x11c>)
 8014846:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014848:	4b36      	ldr	r3, [pc, #216]	@ (8014924 <xTaskResumeAll+0x11c>)
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	2b00      	cmp	r3, #0
 801484e:	d161      	bne.n	8014914 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014850:	4b35      	ldr	r3, [pc, #212]	@ (8014928 <xTaskResumeAll+0x120>)
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d05d      	beq.n	8014914 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014858:	e02e      	b.n	80148b8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801485a:	4b34      	ldr	r3, [pc, #208]	@ (801492c <xTaskResumeAll+0x124>)
 801485c:	68db      	ldr	r3, [r3, #12]
 801485e:	68db      	ldr	r3, [r3, #12]
 8014860:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	3318      	adds	r3, #24
 8014866:	4618      	mov	r0, r3
 8014868:	f7fe fb98 	bl	8012f9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	3304      	adds	r3, #4
 8014870:	4618      	mov	r0, r3
 8014872:	f7fe fb93 	bl	8012f9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801487a:	2201      	movs	r2, #1
 801487c:	409a      	lsls	r2, r3
 801487e:	4b2c      	ldr	r3, [pc, #176]	@ (8014930 <xTaskResumeAll+0x128>)
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	4313      	orrs	r3, r2
 8014884:	4a2a      	ldr	r2, [pc, #168]	@ (8014930 <xTaskResumeAll+0x128>)
 8014886:	6013      	str	r3, [r2, #0]
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801488c:	4613      	mov	r3, r2
 801488e:	009b      	lsls	r3, r3, #2
 8014890:	4413      	add	r3, r2
 8014892:	009b      	lsls	r3, r3, #2
 8014894:	4a27      	ldr	r2, [pc, #156]	@ (8014934 <xTaskResumeAll+0x12c>)
 8014896:	441a      	add	r2, r3
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	3304      	adds	r3, #4
 801489c:	4619      	mov	r1, r3
 801489e:	4610      	mov	r0, r2
 80148a0:	f7fe fb1f 	bl	8012ee2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80148a8:	4b23      	ldr	r3, [pc, #140]	@ (8014938 <xTaskResumeAll+0x130>)
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148ae:	429a      	cmp	r2, r3
 80148b0:	d302      	bcc.n	80148b8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80148b2:	4b22      	ldr	r3, [pc, #136]	@ (801493c <xTaskResumeAll+0x134>)
 80148b4:	2201      	movs	r2, #1
 80148b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80148b8:	4b1c      	ldr	r3, [pc, #112]	@ (801492c <xTaskResumeAll+0x124>)
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d1cc      	bne.n	801485a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d001      	beq.n	80148ca <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80148c6:	f000 fb7f 	bl	8014fc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80148ca:	4b1d      	ldr	r3, [pc, #116]	@ (8014940 <xTaskResumeAll+0x138>)
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d010      	beq.n	80148f8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80148d6:	f000 f859 	bl	801498c <xTaskIncrementTick>
 80148da:	4603      	mov	r3, r0
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d002      	beq.n	80148e6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80148e0:	4b16      	ldr	r3, [pc, #88]	@ (801493c <xTaskResumeAll+0x134>)
 80148e2:	2201      	movs	r2, #1
 80148e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	3b01      	subs	r3, #1
 80148ea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d1f1      	bne.n	80148d6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80148f2:	4b13      	ldr	r3, [pc, #76]	@ (8014940 <xTaskResumeAll+0x138>)
 80148f4:	2200      	movs	r2, #0
 80148f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80148f8:	4b10      	ldr	r3, [pc, #64]	@ (801493c <xTaskResumeAll+0x134>)
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d009      	beq.n	8014914 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014900:	2301      	movs	r3, #1
 8014902:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014904:	4b0f      	ldr	r3, [pc, #60]	@ (8014944 <xTaskResumeAll+0x13c>)
 8014906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801490a:	601a      	str	r2, [r3, #0]
 801490c:	f3bf 8f4f 	dsb	sy
 8014910:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014914:	f000 ff00 	bl	8015718 <vPortExitCritical>

	return xAlreadyYielded;
 8014918:	68bb      	ldr	r3, [r7, #8]
}
 801491a:	4618      	mov	r0, r3
 801491c:	3710      	adds	r7, #16
 801491e:	46bd      	mov	sp, r7
 8014920:	bd80      	pop	{r7, pc}
 8014922:	bf00      	nop
 8014924:	20001698 	.word	0x20001698
 8014928:	20001670 	.word	0x20001670
 801492c:	20001630 	.word	0x20001630
 8014930:	20001678 	.word	0x20001678
 8014934:	20001574 	.word	0x20001574
 8014938:	20001570 	.word	0x20001570
 801493c:	20001684 	.word	0x20001684
 8014940:	20001680 	.word	0x20001680
 8014944:	e000ed04 	.word	0xe000ed04

08014948 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014948:	b480      	push	{r7}
 801494a:	b083      	sub	sp, #12
 801494c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801494e:	4b05      	ldr	r3, [pc, #20]	@ (8014964 <xTaskGetTickCount+0x1c>)
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014954:	687b      	ldr	r3, [r7, #4]
}
 8014956:	4618      	mov	r0, r3
 8014958:	370c      	adds	r7, #12
 801495a:	46bd      	mov	sp, r7
 801495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014960:	4770      	bx	lr
 8014962:	bf00      	nop
 8014964:	20001674 	.word	0x20001674

08014968 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8014968:	b580      	push	{r7, lr}
 801496a:	b082      	sub	sp, #8
 801496c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801496e:	f000 ff85 	bl	801587c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8014972:	2300      	movs	r3, #0
 8014974:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8014976:	4b04      	ldr	r3, [pc, #16]	@ (8014988 <xTaskGetTickCountFromISR+0x20>)
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801497c:	683b      	ldr	r3, [r7, #0]
}
 801497e:	4618      	mov	r0, r3
 8014980:	3708      	adds	r7, #8
 8014982:	46bd      	mov	sp, r7
 8014984:	bd80      	pop	{r7, pc}
 8014986:	bf00      	nop
 8014988:	20001674 	.word	0x20001674

0801498c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b086      	sub	sp, #24
 8014990:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014992:	2300      	movs	r3, #0
 8014994:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014996:	4b50      	ldr	r3, [pc, #320]	@ (8014ad8 <xTaskIncrementTick+0x14c>)
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	2b00      	cmp	r3, #0
 801499c:	f040 808b 	bne.w	8014ab6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80149a0:	4b4e      	ldr	r3, [pc, #312]	@ (8014adc <xTaskIncrementTick+0x150>)
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	3301      	adds	r3, #1
 80149a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80149a8:	4a4c      	ldr	r2, [pc, #304]	@ (8014adc <xTaskIncrementTick+0x150>)
 80149aa:	693b      	ldr	r3, [r7, #16]
 80149ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80149ae:	693b      	ldr	r3, [r7, #16]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d123      	bne.n	80149fc <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80149b4:	4b4a      	ldr	r3, [pc, #296]	@ (8014ae0 <xTaskIncrementTick+0x154>)
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d00d      	beq.n	80149da <xTaskIncrementTick+0x4e>
	__asm volatile
 80149be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149c2:	b672      	cpsid	i
 80149c4:	f383 8811 	msr	BASEPRI, r3
 80149c8:	f3bf 8f6f 	isb	sy
 80149cc:	f3bf 8f4f 	dsb	sy
 80149d0:	b662      	cpsie	i
 80149d2:	603b      	str	r3, [r7, #0]
}
 80149d4:	bf00      	nop
 80149d6:	bf00      	nop
 80149d8:	e7fd      	b.n	80149d6 <xTaskIncrementTick+0x4a>
 80149da:	4b41      	ldr	r3, [pc, #260]	@ (8014ae0 <xTaskIncrementTick+0x154>)
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	60fb      	str	r3, [r7, #12]
 80149e0:	4b40      	ldr	r3, [pc, #256]	@ (8014ae4 <xTaskIncrementTick+0x158>)
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	4a3e      	ldr	r2, [pc, #248]	@ (8014ae0 <xTaskIncrementTick+0x154>)
 80149e6:	6013      	str	r3, [r2, #0]
 80149e8:	4a3e      	ldr	r2, [pc, #248]	@ (8014ae4 <xTaskIncrementTick+0x158>)
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	6013      	str	r3, [r2, #0]
 80149ee:	4b3e      	ldr	r3, [pc, #248]	@ (8014ae8 <xTaskIncrementTick+0x15c>)
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	3301      	adds	r3, #1
 80149f4:	4a3c      	ldr	r2, [pc, #240]	@ (8014ae8 <xTaskIncrementTick+0x15c>)
 80149f6:	6013      	str	r3, [r2, #0]
 80149f8:	f000 fae6 	bl	8014fc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80149fc:	4b3b      	ldr	r3, [pc, #236]	@ (8014aec <xTaskIncrementTick+0x160>)
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	693a      	ldr	r2, [r7, #16]
 8014a02:	429a      	cmp	r2, r3
 8014a04:	d348      	bcc.n	8014a98 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014a06:	4b36      	ldr	r3, [pc, #216]	@ (8014ae0 <xTaskIncrementTick+0x154>)
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d104      	bne.n	8014a1a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a10:	4b36      	ldr	r3, [pc, #216]	@ (8014aec <xTaskIncrementTick+0x160>)
 8014a12:	f04f 32ff 	mov.w	r2, #4294967295
 8014a16:	601a      	str	r2, [r3, #0]
					break;
 8014a18:	e03e      	b.n	8014a98 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a1a:	4b31      	ldr	r3, [pc, #196]	@ (8014ae0 <xTaskIncrementTick+0x154>)
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	68db      	ldr	r3, [r3, #12]
 8014a20:	68db      	ldr	r3, [r3, #12]
 8014a22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014a24:	68bb      	ldr	r3, [r7, #8]
 8014a26:	685b      	ldr	r3, [r3, #4]
 8014a28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014a2a:	693a      	ldr	r2, [r7, #16]
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	429a      	cmp	r2, r3
 8014a30:	d203      	bcs.n	8014a3a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014a32:	4a2e      	ldr	r2, [pc, #184]	@ (8014aec <xTaskIncrementTick+0x160>)
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014a38:	e02e      	b.n	8014a98 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014a3a:	68bb      	ldr	r3, [r7, #8]
 8014a3c:	3304      	adds	r3, #4
 8014a3e:	4618      	mov	r0, r3
 8014a40:	f7fe faac 	bl	8012f9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014a44:	68bb      	ldr	r3, [r7, #8]
 8014a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d004      	beq.n	8014a56 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014a4c:	68bb      	ldr	r3, [r7, #8]
 8014a4e:	3318      	adds	r3, #24
 8014a50:	4618      	mov	r0, r3
 8014a52:	f7fe faa3 	bl	8012f9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014a56:	68bb      	ldr	r3, [r7, #8]
 8014a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a5a:	2201      	movs	r2, #1
 8014a5c:	409a      	lsls	r2, r3
 8014a5e:	4b24      	ldr	r3, [pc, #144]	@ (8014af0 <xTaskIncrementTick+0x164>)
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	4313      	orrs	r3, r2
 8014a64:	4a22      	ldr	r2, [pc, #136]	@ (8014af0 <xTaskIncrementTick+0x164>)
 8014a66:	6013      	str	r3, [r2, #0]
 8014a68:	68bb      	ldr	r3, [r7, #8]
 8014a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a6c:	4613      	mov	r3, r2
 8014a6e:	009b      	lsls	r3, r3, #2
 8014a70:	4413      	add	r3, r2
 8014a72:	009b      	lsls	r3, r3, #2
 8014a74:	4a1f      	ldr	r2, [pc, #124]	@ (8014af4 <xTaskIncrementTick+0x168>)
 8014a76:	441a      	add	r2, r3
 8014a78:	68bb      	ldr	r3, [r7, #8]
 8014a7a:	3304      	adds	r3, #4
 8014a7c:	4619      	mov	r1, r3
 8014a7e:	4610      	mov	r0, r2
 8014a80:	f7fe fa2f 	bl	8012ee2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014a84:	68bb      	ldr	r3, [r7, #8]
 8014a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a88:	4b1b      	ldr	r3, [pc, #108]	@ (8014af8 <xTaskIncrementTick+0x16c>)
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a8e:	429a      	cmp	r2, r3
 8014a90:	d3b9      	bcc.n	8014a06 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8014a92:	2301      	movs	r3, #1
 8014a94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014a96:	e7b6      	b.n	8014a06 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014a98:	4b17      	ldr	r3, [pc, #92]	@ (8014af8 <xTaskIncrementTick+0x16c>)
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a9e:	4915      	ldr	r1, [pc, #84]	@ (8014af4 <xTaskIncrementTick+0x168>)
 8014aa0:	4613      	mov	r3, r2
 8014aa2:	009b      	lsls	r3, r3, #2
 8014aa4:	4413      	add	r3, r2
 8014aa6:	009b      	lsls	r3, r3, #2
 8014aa8:	440b      	add	r3, r1
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	2b01      	cmp	r3, #1
 8014aae:	d907      	bls.n	8014ac0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8014ab0:	2301      	movs	r3, #1
 8014ab2:	617b      	str	r3, [r7, #20]
 8014ab4:	e004      	b.n	8014ac0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014ab6:	4b11      	ldr	r3, [pc, #68]	@ (8014afc <xTaskIncrementTick+0x170>)
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	3301      	adds	r3, #1
 8014abc:	4a0f      	ldr	r2, [pc, #60]	@ (8014afc <xTaskIncrementTick+0x170>)
 8014abe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8014b00 <xTaskIncrementTick+0x174>)
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d001      	beq.n	8014acc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8014ac8:	2301      	movs	r3, #1
 8014aca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014acc:	697b      	ldr	r3, [r7, #20]
}
 8014ace:	4618      	mov	r0, r3
 8014ad0:	3718      	adds	r7, #24
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	bd80      	pop	{r7, pc}
 8014ad6:	bf00      	nop
 8014ad8:	20001698 	.word	0x20001698
 8014adc:	20001674 	.word	0x20001674
 8014ae0:	20001628 	.word	0x20001628
 8014ae4:	2000162c 	.word	0x2000162c
 8014ae8:	20001688 	.word	0x20001688
 8014aec:	20001690 	.word	0x20001690
 8014af0:	20001678 	.word	0x20001678
 8014af4:	20001574 	.word	0x20001574
 8014af8:	20001570 	.word	0x20001570
 8014afc:	20001680 	.word	0x20001680
 8014b00:	20001684 	.word	0x20001684

08014b04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b088      	sub	sp, #32
 8014b08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014b0a:	4b3d      	ldr	r3, [pc, #244]	@ (8014c00 <vTaskSwitchContext+0xfc>)
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d003      	beq.n	8014b1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014b12:	4b3c      	ldr	r3, [pc, #240]	@ (8014c04 <vTaskSwitchContext+0x100>)
 8014b14:	2201      	movs	r2, #1
 8014b16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014b18:	e06e      	b.n	8014bf8 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 8014b1a:	4b3a      	ldr	r3, [pc, #232]	@ (8014c04 <vTaskSwitchContext+0x100>)
 8014b1c:	2200      	movs	r2, #0
 8014b1e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8014b20:	4b39      	ldr	r3, [pc, #228]	@ (8014c08 <vTaskSwitchContext+0x104>)
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014b26:	61fb      	str	r3, [r7, #28]
 8014b28:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8014b2c:	61bb      	str	r3, [r7, #24]
 8014b2e:	69fb      	ldr	r3, [r7, #28]
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	69ba      	ldr	r2, [r7, #24]
 8014b34:	429a      	cmp	r2, r3
 8014b36:	d111      	bne.n	8014b5c <vTaskSwitchContext+0x58>
 8014b38:	69fb      	ldr	r3, [r7, #28]
 8014b3a:	3304      	adds	r3, #4
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	69ba      	ldr	r2, [r7, #24]
 8014b40:	429a      	cmp	r2, r3
 8014b42:	d10b      	bne.n	8014b5c <vTaskSwitchContext+0x58>
 8014b44:	69fb      	ldr	r3, [r7, #28]
 8014b46:	3308      	adds	r3, #8
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	69ba      	ldr	r2, [r7, #24]
 8014b4c:	429a      	cmp	r2, r3
 8014b4e:	d105      	bne.n	8014b5c <vTaskSwitchContext+0x58>
 8014b50:	69fb      	ldr	r3, [r7, #28]
 8014b52:	330c      	adds	r3, #12
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	69ba      	ldr	r2, [r7, #24]
 8014b58:	429a      	cmp	r2, r3
 8014b5a:	d008      	beq.n	8014b6e <vTaskSwitchContext+0x6a>
 8014b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8014c08 <vTaskSwitchContext+0x104>)
 8014b5e:	681a      	ldr	r2, [r3, #0]
 8014b60:	4b29      	ldr	r3, [pc, #164]	@ (8014c08 <vTaskSwitchContext+0x104>)
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	3334      	adds	r3, #52	@ 0x34
 8014b66:	4619      	mov	r1, r3
 8014b68:	4610      	mov	r0, r2
 8014b6a:	f7ee fc94 	bl	8003496 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b6e:	4b27      	ldr	r3, [pc, #156]	@ (8014c0c <vTaskSwitchContext+0x108>)
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	fab3 f383 	clz	r3, r3
 8014b7a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8014b7c:	7afb      	ldrb	r3, [r7, #11]
 8014b7e:	f1c3 031f 	rsb	r3, r3, #31
 8014b82:	617b      	str	r3, [r7, #20]
 8014b84:	4922      	ldr	r1, [pc, #136]	@ (8014c10 <vTaskSwitchContext+0x10c>)
 8014b86:	697a      	ldr	r2, [r7, #20]
 8014b88:	4613      	mov	r3, r2
 8014b8a:	009b      	lsls	r3, r3, #2
 8014b8c:	4413      	add	r3, r2
 8014b8e:	009b      	lsls	r3, r3, #2
 8014b90:	440b      	add	r3, r1
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d10d      	bne.n	8014bb4 <vTaskSwitchContext+0xb0>
	__asm volatile
 8014b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b9c:	b672      	cpsid	i
 8014b9e:	f383 8811 	msr	BASEPRI, r3
 8014ba2:	f3bf 8f6f 	isb	sy
 8014ba6:	f3bf 8f4f 	dsb	sy
 8014baa:	b662      	cpsie	i
 8014bac:	607b      	str	r3, [r7, #4]
}
 8014bae:	bf00      	nop
 8014bb0:	bf00      	nop
 8014bb2:	e7fd      	b.n	8014bb0 <vTaskSwitchContext+0xac>
 8014bb4:	697a      	ldr	r2, [r7, #20]
 8014bb6:	4613      	mov	r3, r2
 8014bb8:	009b      	lsls	r3, r3, #2
 8014bba:	4413      	add	r3, r2
 8014bbc:	009b      	lsls	r3, r3, #2
 8014bbe:	4a14      	ldr	r2, [pc, #80]	@ (8014c10 <vTaskSwitchContext+0x10c>)
 8014bc0:	4413      	add	r3, r2
 8014bc2:	613b      	str	r3, [r7, #16]
 8014bc4:	693b      	ldr	r3, [r7, #16]
 8014bc6:	685b      	ldr	r3, [r3, #4]
 8014bc8:	685a      	ldr	r2, [r3, #4]
 8014bca:	693b      	ldr	r3, [r7, #16]
 8014bcc:	605a      	str	r2, [r3, #4]
 8014bce:	693b      	ldr	r3, [r7, #16]
 8014bd0:	685a      	ldr	r2, [r3, #4]
 8014bd2:	693b      	ldr	r3, [r7, #16]
 8014bd4:	3308      	adds	r3, #8
 8014bd6:	429a      	cmp	r2, r3
 8014bd8:	d104      	bne.n	8014be4 <vTaskSwitchContext+0xe0>
 8014bda:	693b      	ldr	r3, [r7, #16]
 8014bdc:	685b      	ldr	r3, [r3, #4]
 8014bde:	685a      	ldr	r2, [r3, #4]
 8014be0:	693b      	ldr	r3, [r7, #16]
 8014be2:	605a      	str	r2, [r3, #4]
 8014be4:	693b      	ldr	r3, [r7, #16]
 8014be6:	685b      	ldr	r3, [r3, #4]
 8014be8:	68db      	ldr	r3, [r3, #12]
 8014bea:	4a07      	ldr	r2, [pc, #28]	@ (8014c08 <vTaskSwitchContext+0x104>)
 8014bec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014bee:	4b06      	ldr	r3, [pc, #24]	@ (8014c08 <vTaskSwitchContext+0x104>)
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	334c      	adds	r3, #76	@ 0x4c
 8014bf4:	4a07      	ldr	r2, [pc, #28]	@ (8014c14 <vTaskSwitchContext+0x110>)
 8014bf6:	6013      	str	r3, [r2, #0]
}
 8014bf8:	bf00      	nop
 8014bfa:	3720      	adds	r7, #32
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	bd80      	pop	{r7, pc}
 8014c00:	20001698 	.word	0x20001698
 8014c04:	20001684 	.word	0x20001684
 8014c08:	20001570 	.word	0x20001570
 8014c0c:	20001678 	.word	0x20001678
 8014c10:	20001574 	.word	0x20001574
 8014c14:	200000ac 	.word	0x200000ac

08014c18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b084      	sub	sp, #16
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]
 8014c20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d10d      	bne.n	8014c44 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8014c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c2c:	b672      	cpsid	i
 8014c2e:	f383 8811 	msr	BASEPRI, r3
 8014c32:	f3bf 8f6f 	isb	sy
 8014c36:	f3bf 8f4f 	dsb	sy
 8014c3a:	b662      	cpsie	i
 8014c3c:	60fb      	str	r3, [r7, #12]
}
 8014c3e:	bf00      	nop
 8014c40:	bf00      	nop
 8014c42:	e7fd      	b.n	8014c40 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014c44:	4b07      	ldr	r3, [pc, #28]	@ (8014c64 <vTaskPlaceOnEventList+0x4c>)
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	3318      	adds	r3, #24
 8014c4a:	4619      	mov	r1, r3
 8014c4c:	6878      	ldr	r0, [r7, #4]
 8014c4e:	f7fe f96c 	bl	8012f2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014c52:	2101      	movs	r1, #1
 8014c54:	6838      	ldr	r0, [r7, #0]
 8014c56:	f000 fbb5 	bl	80153c4 <prvAddCurrentTaskToDelayedList>
}
 8014c5a:	bf00      	nop
 8014c5c:	3710      	adds	r7, #16
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bd80      	pop	{r7, pc}
 8014c62:	bf00      	nop
 8014c64:	20001570 	.word	0x20001570

08014c68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b086      	sub	sp, #24
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	68db      	ldr	r3, [r3, #12]
 8014c74:	68db      	ldr	r3, [r3, #12]
 8014c76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014c78:	693b      	ldr	r3, [r7, #16]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d10d      	bne.n	8014c9a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8014c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c82:	b672      	cpsid	i
 8014c84:	f383 8811 	msr	BASEPRI, r3
 8014c88:	f3bf 8f6f 	isb	sy
 8014c8c:	f3bf 8f4f 	dsb	sy
 8014c90:	b662      	cpsie	i
 8014c92:	60fb      	str	r3, [r7, #12]
}
 8014c94:	bf00      	nop
 8014c96:	bf00      	nop
 8014c98:	e7fd      	b.n	8014c96 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014c9a:	693b      	ldr	r3, [r7, #16]
 8014c9c:	3318      	adds	r3, #24
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	f7fe f97c 	bl	8012f9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8014d1c <xTaskRemoveFromEventList+0xb4>)
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d11c      	bne.n	8014ce6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014cac:	693b      	ldr	r3, [r7, #16]
 8014cae:	3304      	adds	r3, #4
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7fe f973 	bl	8012f9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014cb6:	693b      	ldr	r3, [r7, #16]
 8014cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cba:	2201      	movs	r2, #1
 8014cbc:	409a      	lsls	r2, r3
 8014cbe:	4b18      	ldr	r3, [pc, #96]	@ (8014d20 <xTaskRemoveFromEventList+0xb8>)
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	4313      	orrs	r3, r2
 8014cc4:	4a16      	ldr	r2, [pc, #88]	@ (8014d20 <xTaskRemoveFromEventList+0xb8>)
 8014cc6:	6013      	str	r3, [r2, #0]
 8014cc8:	693b      	ldr	r3, [r7, #16]
 8014cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ccc:	4613      	mov	r3, r2
 8014cce:	009b      	lsls	r3, r3, #2
 8014cd0:	4413      	add	r3, r2
 8014cd2:	009b      	lsls	r3, r3, #2
 8014cd4:	4a13      	ldr	r2, [pc, #76]	@ (8014d24 <xTaskRemoveFromEventList+0xbc>)
 8014cd6:	441a      	add	r2, r3
 8014cd8:	693b      	ldr	r3, [r7, #16]
 8014cda:	3304      	adds	r3, #4
 8014cdc:	4619      	mov	r1, r3
 8014cde:	4610      	mov	r0, r2
 8014ce0:	f7fe f8ff 	bl	8012ee2 <vListInsertEnd>
 8014ce4:	e005      	b.n	8014cf2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014ce6:	693b      	ldr	r3, [r7, #16]
 8014ce8:	3318      	adds	r3, #24
 8014cea:	4619      	mov	r1, r3
 8014cec:	480e      	ldr	r0, [pc, #56]	@ (8014d28 <xTaskRemoveFromEventList+0xc0>)
 8014cee:	f7fe f8f8 	bl	8012ee2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014cf2:	693b      	ldr	r3, [r7, #16]
 8014cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8014d2c <xTaskRemoveFromEventList+0xc4>)
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cfc:	429a      	cmp	r2, r3
 8014cfe:	d905      	bls.n	8014d0c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014d00:	2301      	movs	r3, #1
 8014d02:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014d04:	4b0a      	ldr	r3, [pc, #40]	@ (8014d30 <xTaskRemoveFromEventList+0xc8>)
 8014d06:	2201      	movs	r2, #1
 8014d08:	601a      	str	r2, [r3, #0]
 8014d0a:	e001      	b.n	8014d10 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014d10:	697b      	ldr	r3, [r7, #20]
}
 8014d12:	4618      	mov	r0, r3
 8014d14:	3718      	adds	r7, #24
 8014d16:	46bd      	mov	sp, r7
 8014d18:	bd80      	pop	{r7, pc}
 8014d1a:	bf00      	nop
 8014d1c:	20001698 	.word	0x20001698
 8014d20:	20001678 	.word	0x20001678
 8014d24:	20001574 	.word	0x20001574
 8014d28:	20001630 	.word	0x20001630
 8014d2c:	20001570 	.word	0x20001570
 8014d30:	20001684 	.word	0x20001684

08014d34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014d34:	b480      	push	{r7}
 8014d36:	b083      	sub	sp, #12
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014d3c:	4b06      	ldr	r3, [pc, #24]	@ (8014d58 <vTaskInternalSetTimeOutState+0x24>)
 8014d3e:	681a      	ldr	r2, [r3, #0]
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014d44:	4b05      	ldr	r3, [pc, #20]	@ (8014d5c <vTaskInternalSetTimeOutState+0x28>)
 8014d46:	681a      	ldr	r2, [r3, #0]
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	605a      	str	r2, [r3, #4]
}
 8014d4c:	bf00      	nop
 8014d4e:	370c      	adds	r7, #12
 8014d50:	46bd      	mov	sp, r7
 8014d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d56:	4770      	bx	lr
 8014d58:	20001688 	.word	0x20001688
 8014d5c:	20001674 	.word	0x20001674

08014d60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014d60:	b580      	push	{r7, lr}
 8014d62:	b088      	sub	sp, #32
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	6078      	str	r0, [r7, #4]
 8014d68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d10d      	bne.n	8014d8c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8014d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d74:	b672      	cpsid	i
 8014d76:	f383 8811 	msr	BASEPRI, r3
 8014d7a:	f3bf 8f6f 	isb	sy
 8014d7e:	f3bf 8f4f 	dsb	sy
 8014d82:	b662      	cpsie	i
 8014d84:	613b      	str	r3, [r7, #16]
}
 8014d86:	bf00      	nop
 8014d88:	bf00      	nop
 8014d8a:	e7fd      	b.n	8014d88 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8014d8c:	683b      	ldr	r3, [r7, #0]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d10d      	bne.n	8014dae <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8014d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d96:	b672      	cpsid	i
 8014d98:	f383 8811 	msr	BASEPRI, r3
 8014d9c:	f3bf 8f6f 	isb	sy
 8014da0:	f3bf 8f4f 	dsb	sy
 8014da4:	b662      	cpsie	i
 8014da6:	60fb      	str	r3, [r7, #12]
}
 8014da8:	bf00      	nop
 8014daa:	bf00      	nop
 8014dac:	e7fd      	b.n	8014daa <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8014dae:	f000 fc7d 	bl	80156ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014db2:	4b1d      	ldr	r3, [pc, #116]	@ (8014e28 <xTaskCheckForTimeOut+0xc8>)
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	685b      	ldr	r3, [r3, #4]
 8014dbc:	69ba      	ldr	r2, [r7, #24]
 8014dbe:	1ad3      	subs	r3, r2, r3
 8014dc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014dc2:	683b      	ldr	r3, [r7, #0]
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dca:	d102      	bne.n	8014dd2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014dcc:	2300      	movs	r3, #0
 8014dce:	61fb      	str	r3, [r7, #28]
 8014dd0:	e023      	b.n	8014e1a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	681a      	ldr	r2, [r3, #0]
 8014dd6:	4b15      	ldr	r3, [pc, #84]	@ (8014e2c <xTaskCheckForTimeOut+0xcc>)
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	429a      	cmp	r2, r3
 8014ddc:	d007      	beq.n	8014dee <xTaskCheckForTimeOut+0x8e>
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	685b      	ldr	r3, [r3, #4]
 8014de2:	69ba      	ldr	r2, [r7, #24]
 8014de4:	429a      	cmp	r2, r3
 8014de6:	d302      	bcc.n	8014dee <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014de8:	2301      	movs	r3, #1
 8014dea:	61fb      	str	r3, [r7, #28]
 8014dec:	e015      	b.n	8014e1a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014dee:	683b      	ldr	r3, [r7, #0]
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	697a      	ldr	r2, [r7, #20]
 8014df4:	429a      	cmp	r2, r3
 8014df6:	d20b      	bcs.n	8014e10 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014df8:	683b      	ldr	r3, [r7, #0]
 8014dfa:	681a      	ldr	r2, [r3, #0]
 8014dfc:	697b      	ldr	r3, [r7, #20]
 8014dfe:	1ad2      	subs	r2, r2, r3
 8014e00:	683b      	ldr	r3, [r7, #0]
 8014e02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014e04:	6878      	ldr	r0, [r7, #4]
 8014e06:	f7ff ff95 	bl	8014d34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	61fb      	str	r3, [r7, #28]
 8014e0e:	e004      	b.n	8014e1a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8014e10:	683b      	ldr	r3, [r7, #0]
 8014e12:	2200      	movs	r2, #0
 8014e14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014e16:	2301      	movs	r3, #1
 8014e18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014e1a:	f000 fc7d 	bl	8015718 <vPortExitCritical>

	return xReturn;
 8014e1e:	69fb      	ldr	r3, [r7, #28]
}
 8014e20:	4618      	mov	r0, r3
 8014e22:	3720      	adds	r7, #32
 8014e24:	46bd      	mov	sp, r7
 8014e26:	bd80      	pop	{r7, pc}
 8014e28:	20001674 	.word	0x20001674
 8014e2c:	20001688 	.word	0x20001688

08014e30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014e30:	b480      	push	{r7}
 8014e32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014e34:	4b03      	ldr	r3, [pc, #12]	@ (8014e44 <vTaskMissedYield+0x14>)
 8014e36:	2201      	movs	r2, #1
 8014e38:	601a      	str	r2, [r3, #0]
}
 8014e3a:	bf00      	nop
 8014e3c:	46bd      	mov	sp, r7
 8014e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e42:	4770      	bx	lr
 8014e44:	20001684 	.word	0x20001684

08014e48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b082      	sub	sp, #8
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014e50:	f000 f854 	bl	8014efc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014e54:	4b07      	ldr	r3, [pc, #28]	@ (8014e74 <prvIdleTask+0x2c>)
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	2b01      	cmp	r3, #1
 8014e5a:	d907      	bls.n	8014e6c <prvIdleTask+0x24>
			{
				taskYIELD();
 8014e5c:	4b06      	ldr	r3, [pc, #24]	@ (8014e78 <prvIdleTask+0x30>)
 8014e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014e62:	601a      	str	r2, [r3, #0]
 8014e64:	f3bf 8f4f 	dsb	sy
 8014e68:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8014e6c:	f7ee fb0c 	bl	8003488 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8014e70:	e7ee      	b.n	8014e50 <prvIdleTask+0x8>
 8014e72:	bf00      	nop
 8014e74:	20001574 	.word	0x20001574
 8014e78:	e000ed04 	.word	0xe000ed04

08014e7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b082      	sub	sp, #8
 8014e80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014e82:	2300      	movs	r3, #0
 8014e84:	607b      	str	r3, [r7, #4]
 8014e86:	e00c      	b.n	8014ea2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014e88:	687a      	ldr	r2, [r7, #4]
 8014e8a:	4613      	mov	r3, r2
 8014e8c:	009b      	lsls	r3, r3, #2
 8014e8e:	4413      	add	r3, r2
 8014e90:	009b      	lsls	r3, r3, #2
 8014e92:	4a12      	ldr	r2, [pc, #72]	@ (8014edc <prvInitialiseTaskLists+0x60>)
 8014e94:	4413      	add	r3, r2
 8014e96:	4618      	mov	r0, r3
 8014e98:	f7fd fff6 	bl	8012e88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	3301      	adds	r3, #1
 8014ea0:	607b      	str	r3, [r7, #4]
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	2b06      	cmp	r3, #6
 8014ea6:	d9ef      	bls.n	8014e88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014ea8:	480d      	ldr	r0, [pc, #52]	@ (8014ee0 <prvInitialiseTaskLists+0x64>)
 8014eaa:	f7fd ffed 	bl	8012e88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014eae:	480d      	ldr	r0, [pc, #52]	@ (8014ee4 <prvInitialiseTaskLists+0x68>)
 8014eb0:	f7fd ffea 	bl	8012e88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014eb4:	480c      	ldr	r0, [pc, #48]	@ (8014ee8 <prvInitialiseTaskLists+0x6c>)
 8014eb6:	f7fd ffe7 	bl	8012e88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014eba:	480c      	ldr	r0, [pc, #48]	@ (8014eec <prvInitialiseTaskLists+0x70>)
 8014ebc:	f7fd ffe4 	bl	8012e88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014ec0:	480b      	ldr	r0, [pc, #44]	@ (8014ef0 <prvInitialiseTaskLists+0x74>)
 8014ec2:	f7fd ffe1 	bl	8012e88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8014ef4 <prvInitialiseTaskLists+0x78>)
 8014ec8:	4a05      	ldr	r2, [pc, #20]	@ (8014ee0 <prvInitialiseTaskLists+0x64>)
 8014eca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8014ef8 <prvInitialiseTaskLists+0x7c>)
 8014ece:	4a05      	ldr	r2, [pc, #20]	@ (8014ee4 <prvInitialiseTaskLists+0x68>)
 8014ed0:	601a      	str	r2, [r3, #0]
}
 8014ed2:	bf00      	nop
 8014ed4:	3708      	adds	r7, #8
 8014ed6:	46bd      	mov	sp, r7
 8014ed8:	bd80      	pop	{r7, pc}
 8014eda:	bf00      	nop
 8014edc:	20001574 	.word	0x20001574
 8014ee0:	20001600 	.word	0x20001600
 8014ee4:	20001614 	.word	0x20001614
 8014ee8:	20001630 	.word	0x20001630
 8014eec:	20001644 	.word	0x20001644
 8014ef0:	2000165c 	.word	0x2000165c
 8014ef4:	20001628 	.word	0x20001628
 8014ef8:	2000162c 	.word	0x2000162c

08014efc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b082      	sub	sp, #8
 8014f00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014f02:	e019      	b.n	8014f38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014f04:	f000 fbd2 	bl	80156ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f08:	4b10      	ldr	r3, [pc, #64]	@ (8014f4c <prvCheckTasksWaitingTermination+0x50>)
 8014f0a:	68db      	ldr	r3, [r3, #12]
 8014f0c:	68db      	ldr	r3, [r3, #12]
 8014f0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	3304      	adds	r3, #4
 8014f14:	4618      	mov	r0, r3
 8014f16:	f7fe f841 	bl	8012f9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8014f50 <prvCheckTasksWaitingTermination+0x54>)
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	3b01      	subs	r3, #1
 8014f20:	4a0b      	ldr	r2, [pc, #44]	@ (8014f50 <prvCheckTasksWaitingTermination+0x54>)
 8014f22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014f24:	4b0b      	ldr	r3, [pc, #44]	@ (8014f54 <prvCheckTasksWaitingTermination+0x58>)
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	3b01      	subs	r3, #1
 8014f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8014f54 <prvCheckTasksWaitingTermination+0x58>)
 8014f2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014f2e:	f000 fbf3 	bl	8015718 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014f32:	6878      	ldr	r0, [r7, #4]
 8014f34:	f000 f810 	bl	8014f58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014f38:	4b06      	ldr	r3, [pc, #24]	@ (8014f54 <prvCheckTasksWaitingTermination+0x58>)
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d1e1      	bne.n	8014f04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014f40:	bf00      	nop
 8014f42:	bf00      	nop
 8014f44:	3708      	adds	r7, #8
 8014f46:	46bd      	mov	sp, r7
 8014f48:	bd80      	pop	{r7, pc}
 8014f4a:	bf00      	nop
 8014f4c:	20001644 	.word	0x20001644
 8014f50:	20001670 	.word	0x20001670
 8014f54:	20001658 	.word	0x20001658

08014f58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b084      	sub	sp, #16
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	334c      	adds	r3, #76	@ 0x4c
 8014f64:	4618      	mov	r0, r3
 8014f66:	f001 f8ef 	bl	8016148 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d108      	bne.n	8014f86 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014f78:	4618      	mov	r0, r3
 8014f7a:	f000 fd97 	bl	8015aac <vPortFree>
				vPortFree( pxTCB );
 8014f7e:	6878      	ldr	r0, [r7, #4]
 8014f80:	f000 fd94 	bl	8015aac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014f84:	e01b      	b.n	8014fbe <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8014f8c:	2b01      	cmp	r3, #1
 8014f8e:	d103      	bne.n	8014f98 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8014f90:	6878      	ldr	r0, [r7, #4]
 8014f92:	f000 fd8b 	bl	8015aac <vPortFree>
	}
 8014f96:	e012      	b.n	8014fbe <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8014f9e:	2b02      	cmp	r3, #2
 8014fa0:	d00d      	beq.n	8014fbe <prvDeleteTCB+0x66>
	__asm volatile
 8014fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fa6:	b672      	cpsid	i
 8014fa8:	f383 8811 	msr	BASEPRI, r3
 8014fac:	f3bf 8f6f 	isb	sy
 8014fb0:	f3bf 8f4f 	dsb	sy
 8014fb4:	b662      	cpsie	i
 8014fb6:	60fb      	str	r3, [r7, #12]
}
 8014fb8:	bf00      	nop
 8014fba:	bf00      	nop
 8014fbc:	e7fd      	b.n	8014fba <prvDeleteTCB+0x62>
	}
 8014fbe:	bf00      	nop
 8014fc0:	3710      	adds	r7, #16
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	bd80      	pop	{r7, pc}
	...

08014fc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014fc8:	b480      	push	{r7}
 8014fca:	b083      	sub	sp, #12
 8014fcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014fce:	4b0c      	ldr	r3, [pc, #48]	@ (8015000 <prvResetNextTaskUnblockTime+0x38>)
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d104      	bne.n	8014fe2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8015004 <prvResetNextTaskUnblockTime+0x3c>)
 8014fda:	f04f 32ff 	mov.w	r2, #4294967295
 8014fde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014fe0:	e008      	b.n	8014ff4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014fe2:	4b07      	ldr	r3, [pc, #28]	@ (8015000 <prvResetNextTaskUnblockTime+0x38>)
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	68db      	ldr	r3, [r3, #12]
 8014fe8:	68db      	ldr	r3, [r3, #12]
 8014fea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	685b      	ldr	r3, [r3, #4]
 8014ff0:	4a04      	ldr	r2, [pc, #16]	@ (8015004 <prvResetNextTaskUnblockTime+0x3c>)
 8014ff2:	6013      	str	r3, [r2, #0]
}
 8014ff4:	bf00      	nop
 8014ff6:	370c      	adds	r7, #12
 8014ff8:	46bd      	mov	sp, r7
 8014ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ffe:	4770      	bx	lr
 8015000:	20001628 	.word	0x20001628
 8015004:	20001690 	.word	0x20001690

08015008 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015008:	b480      	push	{r7}
 801500a:	b083      	sub	sp, #12
 801500c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801500e:	4b0b      	ldr	r3, [pc, #44]	@ (801503c <xTaskGetSchedulerState+0x34>)
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d102      	bne.n	801501c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015016:	2301      	movs	r3, #1
 8015018:	607b      	str	r3, [r7, #4]
 801501a:	e008      	b.n	801502e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801501c:	4b08      	ldr	r3, [pc, #32]	@ (8015040 <xTaskGetSchedulerState+0x38>)
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	2b00      	cmp	r3, #0
 8015022:	d102      	bne.n	801502a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015024:	2302      	movs	r3, #2
 8015026:	607b      	str	r3, [r7, #4]
 8015028:	e001      	b.n	801502e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801502a:	2300      	movs	r3, #0
 801502c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801502e:	687b      	ldr	r3, [r7, #4]
	}
 8015030:	4618      	mov	r0, r3
 8015032:	370c      	adds	r7, #12
 8015034:	46bd      	mov	sp, r7
 8015036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503a:	4770      	bx	lr
 801503c:	2000167c 	.word	0x2000167c
 8015040:	20001698 	.word	0x20001698

08015044 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015044:	b580      	push	{r7, lr}
 8015046:	b084      	sub	sp, #16
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8015050:	2300      	movs	r3, #0
 8015052:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	2b00      	cmp	r3, #0
 8015058:	d069      	beq.n	801512e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801505a:	68bb      	ldr	r3, [r7, #8]
 801505c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801505e:	4b36      	ldr	r3, [pc, #216]	@ (8015138 <xTaskPriorityInherit+0xf4>)
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015064:	429a      	cmp	r2, r3
 8015066:	d259      	bcs.n	801511c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015068:	68bb      	ldr	r3, [r7, #8]
 801506a:	699b      	ldr	r3, [r3, #24]
 801506c:	2b00      	cmp	r3, #0
 801506e:	db06      	blt.n	801507e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015070:	4b31      	ldr	r3, [pc, #196]	@ (8015138 <xTaskPriorityInherit+0xf4>)
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015076:	f1c3 0207 	rsb	r2, r3, #7
 801507a:	68bb      	ldr	r3, [r7, #8]
 801507c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801507e:	68bb      	ldr	r3, [r7, #8]
 8015080:	6959      	ldr	r1, [r3, #20]
 8015082:	68bb      	ldr	r3, [r7, #8]
 8015084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015086:	4613      	mov	r3, r2
 8015088:	009b      	lsls	r3, r3, #2
 801508a:	4413      	add	r3, r2
 801508c:	009b      	lsls	r3, r3, #2
 801508e:	4a2b      	ldr	r2, [pc, #172]	@ (801513c <xTaskPriorityInherit+0xf8>)
 8015090:	4413      	add	r3, r2
 8015092:	4299      	cmp	r1, r3
 8015094:	d13a      	bne.n	801510c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015096:	68bb      	ldr	r3, [r7, #8]
 8015098:	3304      	adds	r3, #4
 801509a:	4618      	mov	r0, r3
 801509c:	f7fd ff7e 	bl	8012f9c <uxListRemove>
 80150a0:	4603      	mov	r3, r0
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d115      	bne.n	80150d2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80150a6:	68bb      	ldr	r3, [r7, #8]
 80150a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80150aa:	4924      	ldr	r1, [pc, #144]	@ (801513c <xTaskPriorityInherit+0xf8>)
 80150ac:	4613      	mov	r3, r2
 80150ae:	009b      	lsls	r3, r3, #2
 80150b0:	4413      	add	r3, r2
 80150b2:	009b      	lsls	r3, r3, #2
 80150b4:	440b      	add	r3, r1
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d10a      	bne.n	80150d2 <xTaskPriorityInherit+0x8e>
 80150bc:	68bb      	ldr	r3, [r7, #8]
 80150be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150c0:	2201      	movs	r2, #1
 80150c2:	fa02 f303 	lsl.w	r3, r2, r3
 80150c6:	43da      	mvns	r2, r3
 80150c8:	4b1d      	ldr	r3, [pc, #116]	@ (8015140 <xTaskPriorityInherit+0xfc>)
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	4013      	ands	r3, r2
 80150ce:	4a1c      	ldr	r2, [pc, #112]	@ (8015140 <xTaskPriorityInherit+0xfc>)
 80150d0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80150d2:	4b19      	ldr	r3, [pc, #100]	@ (8015138 <xTaskPriorityInherit+0xf4>)
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80150d8:	68bb      	ldr	r3, [r7, #8]
 80150da:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80150dc:	68bb      	ldr	r3, [r7, #8]
 80150de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150e0:	2201      	movs	r2, #1
 80150e2:	409a      	lsls	r2, r3
 80150e4:	4b16      	ldr	r3, [pc, #88]	@ (8015140 <xTaskPriorityInherit+0xfc>)
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	4313      	orrs	r3, r2
 80150ea:	4a15      	ldr	r2, [pc, #84]	@ (8015140 <xTaskPriorityInherit+0xfc>)
 80150ec:	6013      	str	r3, [r2, #0]
 80150ee:	68bb      	ldr	r3, [r7, #8]
 80150f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80150f2:	4613      	mov	r3, r2
 80150f4:	009b      	lsls	r3, r3, #2
 80150f6:	4413      	add	r3, r2
 80150f8:	009b      	lsls	r3, r3, #2
 80150fa:	4a10      	ldr	r2, [pc, #64]	@ (801513c <xTaskPriorityInherit+0xf8>)
 80150fc:	441a      	add	r2, r3
 80150fe:	68bb      	ldr	r3, [r7, #8]
 8015100:	3304      	adds	r3, #4
 8015102:	4619      	mov	r1, r3
 8015104:	4610      	mov	r0, r2
 8015106:	f7fd feec 	bl	8012ee2 <vListInsertEnd>
 801510a:	e004      	b.n	8015116 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801510c:	4b0a      	ldr	r3, [pc, #40]	@ (8015138 <xTaskPriorityInherit+0xf4>)
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015112:	68bb      	ldr	r3, [r7, #8]
 8015114:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8015116:	2301      	movs	r3, #1
 8015118:	60fb      	str	r3, [r7, #12]
 801511a:	e008      	b.n	801512e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801511c:	68bb      	ldr	r3, [r7, #8]
 801511e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015120:	4b05      	ldr	r3, [pc, #20]	@ (8015138 <xTaskPriorityInherit+0xf4>)
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015126:	429a      	cmp	r2, r3
 8015128:	d201      	bcs.n	801512e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801512a:	2301      	movs	r3, #1
 801512c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801512e:	68fb      	ldr	r3, [r7, #12]
	}
 8015130:	4618      	mov	r0, r3
 8015132:	3710      	adds	r7, #16
 8015134:	46bd      	mov	sp, r7
 8015136:	bd80      	pop	{r7, pc}
 8015138:	20001570 	.word	0x20001570
 801513c:	20001574 	.word	0x20001574
 8015140:	20001678 	.word	0x20001678

08015144 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015144:	b580      	push	{r7, lr}
 8015146:	b086      	sub	sp, #24
 8015148:	af00      	add	r7, sp, #0
 801514a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015150:	2300      	movs	r3, #0
 8015152:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d074      	beq.n	8015244 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801515a:	4b3d      	ldr	r3, [pc, #244]	@ (8015250 <xTaskPriorityDisinherit+0x10c>)
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	693a      	ldr	r2, [r7, #16]
 8015160:	429a      	cmp	r2, r3
 8015162:	d00d      	beq.n	8015180 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8015164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015168:	b672      	cpsid	i
 801516a:	f383 8811 	msr	BASEPRI, r3
 801516e:	f3bf 8f6f 	isb	sy
 8015172:	f3bf 8f4f 	dsb	sy
 8015176:	b662      	cpsie	i
 8015178:	60fb      	str	r3, [r7, #12]
}
 801517a:	bf00      	nop
 801517c:	bf00      	nop
 801517e:	e7fd      	b.n	801517c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8015180:	693b      	ldr	r3, [r7, #16]
 8015182:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015184:	2b00      	cmp	r3, #0
 8015186:	d10d      	bne.n	80151a4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8015188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801518c:	b672      	cpsid	i
 801518e:	f383 8811 	msr	BASEPRI, r3
 8015192:	f3bf 8f6f 	isb	sy
 8015196:	f3bf 8f4f 	dsb	sy
 801519a:	b662      	cpsie	i
 801519c:	60bb      	str	r3, [r7, #8]
}
 801519e:	bf00      	nop
 80151a0:	bf00      	nop
 80151a2:	e7fd      	b.n	80151a0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80151a4:	693b      	ldr	r3, [r7, #16]
 80151a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80151a8:	1e5a      	subs	r2, r3, #1
 80151aa:	693b      	ldr	r3, [r7, #16]
 80151ac:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80151ae:	693b      	ldr	r3, [r7, #16]
 80151b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80151b2:	693b      	ldr	r3, [r7, #16]
 80151b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80151b6:	429a      	cmp	r2, r3
 80151b8:	d044      	beq.n	8015244 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80151ba:	693b      	ldr	r3, [r7, #16]
 80151bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d140      	bne.n	8015244 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80151c2:	693b      	ldr	r3, [r7, #16]
 80151c4:	3304      	adds	r3, #4
 80151c6:	4618      	mov	r0, r3
 80151c8:	f7fd fee8 	bl	8012f9c <uxListRemove>
 80151cc:	4603      	mov	r3, r0
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d115      	bne.n	80151fe <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80151d2:	693b      	ldr	r3, [r7, #16]
 80151d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80151d6:	491f      	ldr	r1, [pc, #124]	@ (8015254 <xTaskPriorityDisinherit+0x110>)
 80151d8:	4613      	mov	r3, r2
 80151da:	009b      	lsls	r3, r3, #2
 80151dc:	4413      	add	r3, r2
 80151de:	009b      	lsls	r3, r3, #2
 80151e0:	440b      	add	r3, r1
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d10a      	bne.n	80151fe <xTaskPriorityDisinherit+0xba>
 80151e8:	693b      	ldr	r3, [r7, #16]
 80151ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151ec:	2201      	movs	r2, #1
 80151ee:	fa02 f303 	lsl.w	r3, r2, r3
 80151f2:	43da      	mvns	r2, r3
 80151f4:	4b18      	ldr	r3, [pc, #96]	@ (8015258 <xTaskPriorityDisinherit+0x114>)
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	4013      	ands	r3, r2
 80151fa:	4a17      	ldr	r2, [pc, #92]	@ (8015258 <xTaskPriorityDisinherit+0x114>)
 80151fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80151fe:	693b      	ldr	r3, [r7, #16]
 8015200:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015202:	693b      	ldr	r3, [r7, #16]
 8015204:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015206:	693b      	ldr	r3, [r7, #16]
 8015208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801520a:	f1c3 0207 	rsb	r2, r3, #7
 801520e:	693b      	ldr	r3, [r7, #16]
 8015210:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015212:	693b      	ldr	r3, [r7, #16]
 8015214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015216:	2201      	movs	r2, #1
 8015218:	409a      	lsls	r2, r3
 801521a:	4b0f      	ldr	r3, [pc, #60]	@ (8015258 <xTaskPriorityDisinherit+0x114>)
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	4313      	orrs	r3, r2
 8015220:	4a0d      	ldr	r2, [pc, #52]	@ (8015258 <xTaskPriorityDisinherit+0x114>)
 8015222:	6013      	str	r3, [r2, #0]
 8015224:	693b      	ldr	r3, [r7, #16]
 8015226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015228:	4613      	mov	r3, r2
 801522a:	009b      	lsls	r3, r3, #2
 801522c:	4413      	add	r3, r2
 801522e:	009b      	lsls	r3, r3, #2
 8015230:	4a08      	ldr	r2, [pc, #32]	@ (8015254 <xTaskPriorityDisinherit+0x110>)
 8015232:	441a      	add	r2, r3
 8015234:	693b      	ldr	r3, [r7, #16]
 8015236:	3304      	adds	r3, #4
 8015238:	4619      	mov	r1, r3
 801523a:	4610      	mov	r0, r2
 801523c:	f7fd fe51 	bl	8012ee2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015240:	2301      	movs	r3, #1
 8015242:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015244:	697b      	ldr	r3, [r7, #20]
	}
 8015246:	4618      	mov	r0, r3
 8015248:	3718      	adds	r7, #24
 801524a:	46bd      	mov	sp, r7
 801524c:	bd80      	pop	{r7, pc}
 801524e:	bf00      	nop
 8015250:	20001570 	.word	0x20001570
 8015254:	20001574 	.word	0x20001574
 8015258:	20001678 	.word	0x20001678

0801525c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801525c:	b580      	push	{r7, lr}
 801525e:	b088      	sub	sp, #32
 8015260:	af00      	add	r7, sp, #0
 8015262:	6078      	str	r0, [r7, #4]
 8015264:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801526a:	2301      	movs	r3, #1
 801526c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	2b00      	cmp	r3, #0
 8015272:	f000 8089 	beq.w	8015388 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015276:	69bb      	ldr	r3, [r7, #24]
 8015278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801527a:	2b00      	cmp	r3, #0
 801527c:	d10d      	bne.n	801529a <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 801527e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015282:	b672      	cpsid	i
 8015284:	f383 8811 	msr	BASEPRI, r3
 8015288:	f3bf 8f6f 	isb	sy
 801528c:	f3bf 8f4f 	dsb	sy
 8015290:	b662      	cpsie	i
 8015292:	60fb      	str	r3, [r7, #12]
}
 8015294:	bf00      	nop
 8015296:	bf00      	nop
 8015298:	e7fd      	b.n	8015296 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801529a:	69bb      	ldr	r3, [r7, #24]
 801529c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801529e:	683a      	ldr	r2, [r7, #0]
 80152a0:	429a      	cmp	r2, r3
 80152a2:	d902      	bls.n	80152aa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80152a4:	683b      	ldr	r3, [r7, #0]
 80152a6:	61fb      	str	r3, [r7, #28]
 80152a8:	e002      	b.n	80152b0 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80152aa:	69bb      	ldr	r3, [r7, #24]
 80152ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80152ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80152b0:	69bb      	ldr	r3, [r7, #24]
 80152b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152b4:	69fa      	ldr	r2, [r7, #28]
 80152b6:	429a      	cmp	r2, r3
 80152b8:	d066      	beq.n	8015388 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80152ba:	69bb      	ldr	r3, [r7, #24]
 80152bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80152be:	697a      	ldr	r2, [r7, #20]
 80152c0:	429a      	cmp	r2, r3
 80152c2:	d161      	bne.n	8015388 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80152c4:	4b32      	ldr	r3, [pc, #200]	@ (8015390 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	69ba      	ldr	r2, [r7, #24]
 80152ca:	429a      	cmp	r2, r3
 80152cc:	d10d      	bne.n	80152ea <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 80152ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152d2:	b672      	cpsid	i
 80152d4:	f383 8811 	msr	BASEPRI, r3
 80152d8:	f3bf 8f6f 	isb	sy
 80152dc:	f3bf 8f4f 	dsb	sy
 80152e0:	b662      	cpsie	i
 80152e2:	60bb      	str	r3, [r7, #8]
}
 80152e4:	bf00      	nop
 80152e6:	bf00      	nop
 80152e8:	e7fd      	b.n	80152e6 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80152ea:	69bb      	ldr	r3, [r7, #24]
 80152ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152ee:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80152f0:	69bb      	ldr	r3, [r7, #24]
 80152f2:	69fa      	ldr	r2, [r7, #28]
 80152f4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80152f6:	69bb      	ldr	r3, [r7, #24]
 80152f8:	699b      	ldr	r3, [r3, #24]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	db04      	blt.n	8015308 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80152fe:	69fb      	ldr	r3, [r7, #28]
 8015300:	f1c3 0207 	rsb	r2, r3, #7
 8015304:	69bb      	ldr	r3, [r7, #24]
 8015306:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015308:	69bb      	ldr	r3, [r7, #24]
 801530a:	6959      	ldr	r1, [r3, #20]
 801530c:	693a      	ldr	r2, [r7, #16]
 801530e:	4613      	mov	r3, r2
 8015310:	009b      	lsls	r3, r3, #2
 8015312:	4413      	add	r3, r2
 8015314:	009b      	lsls	r3, r3, #2
 8015316:	4a1f      	ldr	r2, [pc, #124]	@ (8015394 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8015318:	4413      	add	r3, r2
 801531a:	4299      	cmp	r1, r3
 801531c:	d134      	bne.n	8015388 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801531e:	69bb      	ldr	r3, [r7, #24]
 8015320:	3304      	adds	r3, #4
 8015322:	4618      	mov	r0, r3
 8015324:	f7fd fe3a 	bl	8012f9c <uxListRemove>
 8015328:	4603      	mov	r3, r0
 801532a:	2b00      	cmp	r3, #0
 801532c:	d115      	bne.n	801535a <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801532e:	69bb      	ldr	r3, [r7, #24]
 8015330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015332:	4918      	ldr	r1, [pc, #96]	@ (8015394 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8015334:	4613      	mov	r3, r2
 8015336:	009b      	lsls	r3, r3, #2
 8015338:	4413      	add	r3, r2
 801533a:	009b      	lsls	r3, r3, #2
 801533c:	440b      	add	r3, r1
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d10a      	bne.n	801535a <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8015344:	69bb      	ldr	r3, [r7, #24]
 8015346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015348:	2201      	movs	r2, #1
 801534a:	fa02 f303 	lsl.w	r3, r2, r3
 801534e:	43da      	mvns	r2, r3
 8015350:	4b11      	ldr	r3, [pc, #68]	@ (8015398 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	4013      	ands	r3, r2
 8015356:	4a10      	ldr	r2, [pc, #64]	@ (8015398 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8015358:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801535a:	69bb      	ldr	r3, [r7, #24]
 801535c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801535e:	2201      	movs	r2, #1
 8015360:	409a      	lsls	r2, r3
 8015362:	4b0d      	ldr	r3, [pc, #52]	@ (8015398 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	4313      	orrs	r3, r2
 8015368:	4a0b      	ldr	r2, [pc, #44]	@ (8015398 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801536a:	6013      	str	r3, [r2, #0]
 801536c:	69bb      	ldr	r3, [r7, #24]
 801536e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015370:	4613      	mov	r3, r2
 8015372:	009b      	lsls	r3, r3, #2
 8015374:	4413      	add	r3, r2
 8015376:	009b      	lsls	r3, r3, #2
 8015378:	4a06      	ldr	r2, [pc, #24]	@ (8015394 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801537a:	441a      	add	r2, r3
 801537c:	69bb      	ldr	r3, [r7, #24]
 801537e:	3304      	adds	r3, #4
 8015380:	4619      	mov	r1, r3
 8015382:	4610      	mov	r0, r2
 8015384:	f7fd fdad 	bl	8012ee2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015388:	bf00      	nop
 801538a:	3720      	adds	r7, #32
 801538c:	46bd      	mov	sp, r7
 801538e:	bd80      	pop	{r7, pc}
 8015390:	20001570 	.word	0x20001570
 8015394:	20001574 	.word	0x20001574
 8015398:	20001678 	.word	0x20001678

0801539c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801539c:	b480      	push	{r7}
 801539e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80153a0:	4b07      	ldr	r3, [pc, #28]	@ (80153c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d004      	beq.n	80153b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80153a8:	4b05      	ldr	r3, [pc, #20]	@ (80153c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80153ae:	3201      	adds	r2, #1
 80153b0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80153b2:	4b03      	ldr	r3, [pc, #12]	@ (80153c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80153b4:	681b      	ldr	r3, [r3, #0]
	}
 80153b6:	4618      	mov	r0, r3
 80153b8:	46bd      	mov	sp, r7
 80153ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153be:	4770      	bx	lr
 80153c0:	20001570 	.word	0x20001570

080153c4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80153c4:	b580      	push	{r7, lr}
 80153c6:	b084      	sub	sp, #16
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
 80153cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80153ce:	4b29      	ldr	r3, [pc, #164]	@ (8015474 <prvAddCurrentTaskToDelayedList+0xb0>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80153d4:	4b28      	ldr	r3, [pc, #160]	@ (8015478 <prvAddCurrentTaskToDelayedList+0xb4>)
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	3304      	adds	r3, #4
 80153da:	4618      	mov	r0, r3
 80153dc:	f7fd fdde 	bl	8012f9c <uxListRemove>
 80153e0:	4603      	mov	r3, r0
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d10b      	bne.n	80153fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80153e6:	4b24      	ldr	r3, [pc, #144]	@ (8015478 <prvAddCurrentTaskToDelayedList+0xb4>)
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80153ec:	2201      	movs	r2, #1
 80153ee:	fa02 f303 	lsl.w	r3, r2, r3
 80153f2:	43da      	mvns	r2, r3
 80153f4:	4b21      	ldr	r3, [pc, #132]	@ (801547c <prvAddCurrentTaskToDelayedList+0xb8>)
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	4013      	ands	r3, r2
 80153fa:	4a20      	ldr	r2, [pc, #128]	@ (801547c <prvAddCurrentTaskToDelayedList+0xb8>)
 80153fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015404:	d10a      	bne.n	801541c <prvAddCurrentTaskToDelayedList+0x58>
 8015406:	683b      	ldr	r3, [r7, #0]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d007      	beq.n	801541c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801540c:	4b1a      	ldr	r3, [pc, #104]	@ (8015478 <prvAddCurrentTaskToDelayedList+0xb4>)
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	3304      	adds	r3, #4
 8015412:	4619      	mov	r1, r3
 8015414:	481a      	ldr	r0, [pc, #104]	@ (8015480 <prvAddCurrentTaskToDelayedList+0xbc>)
 8015416:	f7fd fd64 	bl	8012ee2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801541a:	e026      	b.n	801546a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801541c:	68fa      	ldr	r2, [r7, #12]
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	4413      	add	r3, r2
 8015422:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015424:	4b14      	ldr	r3, [pc, #80]	@ (8015478 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	68ba      	ldr	r2, [r7, #8]
 801542a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801542c:	68ba      	ldr	r2, [r7, #8]
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	429a      	cmp	r2, r3
 8015432:	d209      	bcs.n	8015448 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015434:	4b13      	ldr	r3, [pc, #76]	@ (8015484 <prvAddCurrentTaskToDelayedList+0xc0>)
 8015436:	681a      	ldr	r2, [r3, #0]
 8015438:	4b0f      	ldr	r3, [pc, #60]	@ (8015478 <prvAddCurrentTaskToDelayedList+0xb4>)
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	3304      	adds	r3, #4
 801543e:	4619      	mov	r1, r3
 8015440:	4610      	mov	r0, r2
 8015442:	f7fd fd72 	bl	8012f2a <vListInsert>
}
 8015446:	e010      	b.n	801546a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015448:	4b0f      	ldr	r3, [pc, #60]	@ (8015488 <prvAddCurrentTaskToDelayedList+0xc4>)
 801544a:	681a      	ldr	r2, [r3, #0]
 801544c:	4b0a      	ldr	r3, [pc, #40]	@ (8015478 <prvAddCurrentTaskToDelayedList+0xb4>)
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	3304      	adds	r3, #4
 8015452:	4619      	mov	r1, r3
 8015454:	4610      	mov	r0, r2
 8015456:	f7fd fd68 	bl	8012f2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801545a:	4b0c      	ldr	r3, [pc, #48]	@ (801548c <prvAddCurrentTaskToDelayedList+0xc8>)
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	68ba      	ldr	r2, [r7, #8]
 8015460:	429a      	cmp	r2, r3
 8015462:	d202      	bcs.n	801546a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8015464:	4a09      	ldr	r2, [pc, #36]	@ (801548c <prvAddCurrentTaskToDelayedList+0xc8>)
 8015466:	68bb      	ldr	r3, [r7, #8]
 8015468:	6013      	str	r3, [r2, #0]
}
 801546a:	bf00      	nop
 801546c:	3710      	adds	r7, #16
 801546e:	46bd      	mov	sp, r7
 8015470:	bd80      	pop	{r7, pc}
 8015472:	bf00      	nop
 8015474:	20001674 	.word	0x20001674
 8015478:	20001570 	.word	0x20001570
 801547c:	20001678 	.word	0x20001678
 8015480:	2000165c 	.word	0x2000165c
 8015484:	2000162c 	.word	0x2000162c
 8015488:	20001628 	.word	0x20001628
 801548c:	20001690 	.word	0x20001690

08015490 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015490:	b480      	push	{r7}
 8015492:	b085      	sub	sp, #20
 8015494:	af00      	add	r7, sp, #0
 8015496:	60f8      	str	r0, [r7, #12]
 8015498:	60b9      	str	r1, [r7, #8]
 801549a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	3b04      	subs	r3, #4
 80154a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80154a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	3b04      	subs	r3, #4
 80154ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80154b0:	68bb      	ldr	r3, [r7, #8]
 80154b2:	f023 0201 	bic.w	r2, r3, #1
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	3b04      	subs	r3, #4
 80154be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80154c0:	4a0c      	ldr	r2, [pc, #48]	@ (80154f4 <pxPortInitialiseStack+0x64>)
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	3b14      	subs	r3, #20
 80154ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80154cc:	687a      	ldr	r2, [r7, #4]
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	3b04      	subs	r3, #4
 80154d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	f06f 0202 	mvn.w	r2, #2
 80154de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	3b20      	subs	r3, #32
 80154e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80154e6:	68fb      	ldr	r3, [r7, #12]
}
 80154e8:	4618      	mov	r0, r3
 80154ea:	3714      	adds	r7, #20
 80154ec:	46bd      	mov	sp, r7
 80154ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f2:	4770      	bx	lr
 80154f4:	080154f9 	.word	0x080154f9

080154f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80154f8:	b480      	push	{r7}
 80154fa:	b085      	sub	sp, #20
 80154fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80154fe:	2300      	movs	r3, #0
 8015500:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015502:	4b15      	ldr	r3, [pc, #84]	@ (8015558 <prvTaskExitError+0x60>)
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	f1b3 3fff 	cmp.w	r3, #4294967295
 801550a:	d00d      	beq.n	8015528 <prvTaskExitError+0x30>
	__asm volatile
 801550c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015510:	b672      	cpsid	i
 8015512:	f383 8811 	msr	BASEPRI, r3
 8015516:	f3bf 8f6f 	isb	sy
 801551a:	f3bf 8f4f 	dsb	sy
 801551e:	b662      	cpsie	i
 8015520:	60fb      	str	r3, [r7, #12]
}
 8015522:	bf00      	nop
 8015524:	bf00      	nop
 8015526:	e7fd      	b.n	8015524 <prvTaskExitError+0x2c>
	__asm volatile
 8015528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801552c:	b672      	cpsid	i
 801552e:	f383 8811 	msr	BASEPRI, r3
 8015532:	f3bf 8f6f 	isb	sy
 8015536:	f3bf 8f4f 	dsb	sy
 801553a:	b662      	cpsie	i
 801553c:	60bb      	str	r3, [r7, #8]
}
 801553e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015540:	bf00      	nop
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d0fc      	beq.n	8015542 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015548:	bf00      	nop
 801554a:	bf00      	nop
 801554c:	3714      	adds	r7, #20
 801554e:	46bd      	mov	sp, r7
 8015550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015554:	4770      	bx	lr
 8015556:	bf00      	nop
 8015558:	2000009c 	.word	0x2000009c
 801555c:	00000000 	.word	0x00000000

08015560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015560:	4b07      	ldr	r3, [pc, #28]	@ (8015580 <pxCurrentTCBConst2>)
 8015562:	6819      	ldr	r1, [r3, #0]
 8015564:	6808      	ldr	r0, [r1, #0]
 8015566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801556a:	f380 8809 	msr	PSP, r0
 801556e:	f3bf 8f6f 	isb	sy
 8015572:	f04f 0000 	mov.w	r0, #0
 8015576:	f380 8811 	msr	BASEPRI, r0
 801557a:	4770      	bx	lr
 801557c:	f3af 8000 	nop.w

08015580 <pxCurrentTCBConst2>:
 8015580:	20001570 	.word	0x20001570
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015584:	bf00      	nop
 8015586:	bf00      	nop

08015588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015588:	4808      	ldr	r0, [pc, #32]	@ (80155ac <prvPortStartFirstTask+0x24>)
 801558a:	6800      	ldr	r0, [r0, #0]
 801558c:	6800      	ldr	r0, [r0, #0]
 801558e:	f380 8808 	msr	MSP, r0
 8015592:	f04f 0000 	mov.w	r0, #0
 8015596:	f380 8814 	msr	CONTROL, r0
 801559a:	b662      	cpsie	i
 801559c:	b661      	cpsie	f
 801559e:	f3bf 8f4f 	dsb	sy
 80155a2:	f3bf 8f6f 	isb	sy
 80155a6:	df00      	svc	0
 80155a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80155aa:	bf00      	nop
 80155ac:	e000ed08 	.word	0xe000ed08

080155b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b084      	sub	sp, #16
 80155b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80155b6:	4b37      	ldr	r3, [pc, #220]	@ (8015694 <xPortStartScheduler+0xe4>)
 80155b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	781b      	ldrb	r3, [r3, #0]
 80155be:	b2db      	uxtb	r3, r3
 80155c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	22ff      	movs	r2, #255	@ 0xff
 80155c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	781b      	ldrb	r3, [r3, #0]
 80155cc:	b2db      	uxtb	r3, r3
 80155ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80155d0:	78fb      	ldrb	r3, [r7, #3]
 80155d2:	b2db      	uxtb	r3, r3
 80155d4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80155d8:	b2da      	uxtb	r2, r3
 80155da:	4b2f      	ldr	r3, [pc, #188]	@ (8015698 <xPortStartScheduler+0xe8>)
 80155dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80155de:	4b2f      	ldr	r3, [pc, #188]	@ (801569c <xPortStartScheduler+0xec>)
 80155e0:	2207      	movs	r2, #7
 80155e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80155e4:	e009      	b.n	80155fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80155e6:	4b2d      	ldr	r3, [pc, #180]	@ (801569c <xPortStartScheduler+0xec>)
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	3b01      	subs	r3, #1
 80155ec:	4a2b      	ldr	r2, [pc, #172]	@ (801569c <xPortStartScheduler+0xec>)
 80155ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80155f0:	78fb      	ldrb	r3, [r7, #3]
 80155f2:	b2db      	uxtb	r3, r3
 80155f4:	005b      	lsls	r3, r3, #1
 80155f6:	b2db      	uxtb	r3, r3
 80155f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80155fa:	78fb      	ldrb	r3, [r7, #3]
 80155fc:	b2db      	uxtb	r3, r3
 80155fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015602:	2b80      	cmp	r3, #128	@ 0x80
 8015604:	d0ef      	beq.n	80155e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015606:	4b25      	ldr	r3, [pc, #148]	@ (801569c <xPortStartScheduler+0xec>)
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	f1c3 0307 	rsb	r3, r3, #7
 801560e:	2b04      	cmp	r3, #4
 8015610:	d00d      	beq.n	801562e <xPortStartScheduler+0x7e>
	__asm volatile
 8015612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015616:	b672      	cpsid	i
 8015618:	f383 8811 	msr	BASEPRI, r3
 801561c:	f3bf 8f6f 	isb	sy
 8015620:	f3bf 8f4f 	dsb	sy
 8015624:	b662      	cpsie	i
 8015626:	60bb      	str	r3, [r7, #8]
}
 8015628:	bf00      	nop
 801562a:	bf00      	nop
 801562c:	e7fd      	b.n	801562a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801562e:	4b1b      	ldr	r3, [pc, #108]	@ (801569c <xPortStartScheduler+0xec>)
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	021b      	lsls	r3, r3, #8
 8015634:	4a19      	ldr	r2, [pc, #100]	@ (801569c <xPortStartScheduler+0xec>)
 8015636:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015638:	4b18      	ldr	r3, [pc, #96]	@ (801569c <xPortStartScheduler+0xec>)
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8015640:	4a16      	ldr	r2, [pc, #88]	@ (801569c <xPortStartScheduler+0xec>)
 8015642:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	b2da      	uxtb	r2, r3
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801564c:	4b14      	ldr	r3, [pc, #80]	@ (80156a0 <xPortStartScheduler+0xf0>)
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	4a13      	ldr	r2, [pc, #76]	@ (80156a0 <xPortStartScheduler+0xf0>)
 8015652:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8015656:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015658:	4b11      	ldr	r3, [pc, #68]	@ (80156a0 <xPortStartScheduler+0xf0>)
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	4a10      	ldr	r2, [pc, #64]	@ (80156a0 <xPortStartScheduler+0xf0>)
 801565e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8015662:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015664:	f000 f8dc 	bl	8015820 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015668:	4b0e      	ldr	r3, [pc, #56]	@ (80156a4 <xPortStartScheduler+0xf4>)
 801566a:	2200      	movs	r2, #0
 801566c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801566e:	f000 f8fb 	bl	8015868 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015672:	4b0d      	ldr	r3, [pc, #52]	@ (80156a8 <xPortStartScheduler+0xf8>)
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	4a0c      	ldr	r2, [pc, #48]	@ (80156a8 <xPortStartScheduler+0xf8>)
 8015678:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801567c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801567e:	f7ff ff83 	bl	8015588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015682:	f7ff fa3f 	bl	8014b04 <vTaskSwitchContext>
	prvTaskExitError();
 8015686:	f7ff ff37 	bl	80154f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801568a:	2300      	movs	r3, #0
}
 801568c:	4618      	mov	r0, r3
 801568e:	3710      	adds	r7, #16
 8015690:	46bd      	mov	sp, r7
 8015692:	bd80      	pop	{r7, pc}
 8015694:	e000e400 	.word	0xe000e400
 8015698:	2000169c 	.word	0x2000169c
 801569c:	200016a0 	.word	0x200016a0
 80156a0:	e000ed20 	.word	0xe000ed20
 80156a4:	2000009c 	.word	0x2000009c
 80156a8:	e000ef34 	.word	0xe000ef34

080156ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80156ac:	b480      	push	{r7}
 80156ae:	b083      	sub	sp, #12
 80156b0:	af00      	add	r7, sp, #0
	__asm volatile
 80156b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156b6:	b672      	cpsid	i
 80156b8:	f383 8811 	msr	BASEPRI, r3
 80156bc:	f3bf 8f6f 	isb	sy
 80156c0:	f3bf 8f4f 	dsb	sy
 80156c4:	b662      	cpsie	i
 80156c6:	607b      	str	r3, [r7, #4]
}
 80156c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80156ca:	4b11      	ldr	r3, [pc, #68]	@ (8015710 <vPortEnterCritical+0x64>)
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	3301      	adds	r3, #1
 80156d0:	4a0f      	ldr	r2, [pc, #60]	@ (8015710 <vPortEnterCritical+0x64>)
 80156d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80156d4:	4b0e      	ldr	r3, [pc, #56]	@ (8015710 <vPortEnterCritical+0x64>)
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	2b01      	cmp	r3, #1
 80156da:	d112      	bne.n	8015702 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80156dc:	4b0d      	ldr	r3, [pc, #52]	@ (8015714 <vPortEnterCritical+0x68>)
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	b2db      	uxtb	r3, r3
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d00d      	beq.n	8015702 <vPortEnterCritical+0x56>
	__asm volatile
 80156e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156ea:	b672      	cpsid	i
 80156ec:	f383 8811 	msr	BASEPRI, r3
 80156f0:	f3bf 8f6f 	isb	sy
 80156f4:	f3bf 8f4f 	dsb	sy
 80156f8:	b662      	cpsie	i
 80156fa:	603b      	str	r3, [r7, #0]
}
 80156fc:	bf00      	nop
 80156fe:	bf00      	nop
 8015700:	e7fd      	b.n	80156fe <vPortEnterCritical+0x52>
	}
}
 8015702:	bf00      	nop
 8015704:	370c      	adds	r7, #12
 8015706:	46bd      	mov	sp, r7
 8015708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801570c:	4770      	bx	lr
 801570e:	bf00      	nop
 8015710:	2000009c 	.word	0x2000009c
 8015714:	e000ed04 	.word	0xe000ed04

08015718 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015718:	b480      	push	{r7}
 801571a:	b083      	sub	sp, #12
 801571c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801571e:	4b13      	ldr	r3, [pc, #76]	@ (801576c <vPortExitCritical+0x54>)
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d10d      	bne.n	8015742 <vPortExitCritical+0x2a>
	__asm volatile
 8015726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801572a:	b672      	cpsid	i
 801572c:	f383 8811 	msr	BASEPRI, r3
 8015730:	f3bf 8f6f 	isb	sy
 8015734:	f3bf 8f4f 	dsb	sy
 8015738:	b662      	cpsie	i
 801573a:	607b      	str	r3, [r7, #4]
}
 801573c:	bf00      	nop
 801573e:	bf00      	nop
 8015740:	e7fd      	b.n	801573e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8015742:	4b0a      	ldr	r3, [pc, #40]	@ (801576c <vPortExitCritical+0x54>)
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	3b01      	subs	r3, #1
 8015748:	4a08      	ldr	r2, [pc, #32]	@ (801576c <vPortExitCritical+0x54>)
 801574a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801574c:	4b07      	ldr	r3, [pc, #28]	@ (801576c <vPortExitCritical+0x54>)
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d105      	bne.n	8015760 <vPortExitCritical+0x48>
 8015754:	2300      	movs	r3, #0
 8015756:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015758:	683b      	ldr	r3, [r7, #0]
 801575a:	f383 8811 	msr	BASEPRI, r3
}
 801575e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015760:	bf00      	nop
 8015762:	370c      	adds	r7, #12
 8015764:	46bd      	mov	sp, r7
 8015766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801576a:	4770      	bx	lr
 801576c:	2000009c 	.word	0x2000009c

08015770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015770:	f3ef 8009 	mrs	r0, PSP
 8015774:	f3bf 8f6f 	isb	sy
 8015778:	4b15      	ldr	r3, [pc, #84]	@ (80157d0 <pxCurrentTCBConst>)
 801577a:	681a      	ldr	r2, [r3, #0]
 801577c:	f01e 0f10 	tst.w	lr, #16
 8015780:	bf08      	it	eq
 8015782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801578a:	6010      	str	r0, [r2, #0]
 801578c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015790:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8015794:	b672      	cpsid	i
 8015796:	f380 8811 	msr	BASEPRI, r0
 801579a:	f3bf 8f4f 	dsb	sy
 801579e:	f3bf 8f6f 	isb	sy
 80157a2:	b662      	cpsie	i
 80157a4:	f7ff f9ae 	bl	8014b04 <vTaskSwitchContext>
 80157a8:	f04f 0000 	mov.w	r0, #0
 80157ac:	f380 8811 	msr	BASEPRI, r0
 80157b0:	bc09      	pop	{r0, r3}
 80157b2:	6819      	ldr	r1, [r3, #0]
 80157b4:	6808      	ldr	r0, [r1, #0]
 80157b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157ba:	f01e 0f10 	tst.w	lr, #16
 80157be:	bf08      	it	eq
 80157c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80157c4:	f380 8809 	msr	PSP, r0
 80157c8:	f3bf 8f6f 	isb	sy
 80157cc:	4770      	bx	lr
 80157ce:	bf00      	nop

080157d0 <pxCurrentTCBConst>:
 80157d0:	20001570 	.word	0x20001570
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80157d4:	bf00      	nop
 80157d6:	bf00      	nop

080157d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	b082      	sub	sp, #8
 80157dc:	af00      	add	r7, sp, #0
	__asm volatile
 80157de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157e2:	b672      	cpsid	i
 80157e4:	f383 8811 	msr	BASEPRI, r3
 80157e8:	f3bf 8f6f 	isb	sy
 80157ec:	f3bf 8f4f 	dsb	sy
 80157f0:	b662      	cpsie	i
 80157f2:	607b      	str	r3, [r7, #4]
}
 80157f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80157f6:	f7ff f8c9 	bl	801498c <xTaskIncrementTick>
 80157fa:	4603      	mov	r3, r0
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d003      	beq.n	8015808 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015800:	4b06      	ldr	r3, [pc, #24]	@ (801581c <SysTick_Handler+0x44>)
 8015802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015806:	601a      	str	r2, [r3, #0]
 8015808:	2300      	movs	r3, #0
 801580a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801580c:	683b      	ldr	r3, [r7, #0]
 801580e:	f383 8811 	msr	BASEPRI, r3
}
 8015812:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015814:	bf00      	nop
 8015816:	3708      	adds	r7, #8
 8015818:	46bd      	mov	sp, r7
 801581a:	bd80      	pop	{r7, pc}
 801581c:	e000ed04 	.word	0xe000ed04

08015820 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015820:	b480      	push	{r7}
 8015822:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015824:	4b0b      	ldr	r3, [pc, #44]	@ (8015854 <vPortSetupTimerInterrupt+0x34>)
 8015826:	2200      	movs	r2, #0
 8015828:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801582a:	4b0b      	ldr	r3, [pc, #44]	@ (8015858 <vPortSetupTimerInterrupt+0x38>)
 801582c:	2200      	movs	r2, #0
 801582e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015830:	4b0a      	ldr	r3, [pc, #40]	@ (801585c <vPortSetupTimerInterrupt+0x3c>)
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	4a0a      	ldr	r2, [pc, #40]	@ (8015860 <vPortSetupTimerInterrupt+0x40>)
 8015836:	fba2 2303 	umull	r2, r3, r2, r3
 801583a:	099b      	lsrs	r3, r3, #6
 801583c:	4a09      	ldr	r2, [pc, #36]	@ (8015864 <vPortSetupTimerInterrupt+0x44>)
 801583e:	3b01      	subs	r3, #1
 8015840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015842:	4b04      	ldr	r3, [pc, #16]	@ (8015854 <vPortSetupTimerInterrupt+0x34>)
 8015844:	2207      	movs	r2, #7
 8015846:	601a      	str	r2, [r3, #0]
}
 8015848:	bf00      	nop
 801584a:	46bd      	mov	sp, r7
 801584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015850:	4770      	bx	lr
 8015852:	bf00      	nop
 8015854:	e000e010 	.word	0xe000e010
 8015858:	e000e018 	.word	0xe000e018
 801585c:	20000054 	.word	0x20000054
 8015860:	10624dd3 	.word	0x10624dd3
 8015864:	e000e014 	.word	0xe000e014

08015868 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015868:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8015878 <vPortEnableVFP+0x10>
 801586c:	6801      	ldr	r1, [r0, #0]
 801586e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8015872:	6001      	str	r1, [r0, #0]
 8015874:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015876:	bf00      	nop
 8015878:	e000ed88 	.word	0xe000ed88

0801587c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801587c:	b480      	push	{r7}
 801587e:	b085      	sub	sp, #20
 8015880:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015882:	f3ef 8305 	mrs	r3, IPSR
 8015886:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	2b0f      	cmp	r3, #15
 801588c:	d917      	bls.n	80158be <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801588e:	4a1a      	ldr	r2, [pc, #104]	@ (80158f8 <vPortValidateInterruptPriority+0x7c>)
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	4413      	add	r3, r2
 8015894:	781b      	ldrb	r3, [r3, #0]
 8015896:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015898:	4b18      	ldr	r3, [pc, #96]	@ (80158fc <vPortValidateInterruptPriority+0x80>)
 801589a:	781b      	ldrb	r3, [r3, #0]
 801589c:	7afa      	ldrb	r2, [r7, #11]
 801589e:	429a      	cmp	r2, r3
 80158a0:	d20d      	bcs.n	80158be <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80158a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158a6:	b672      	cpsid	i
 80158a8:	f383 8811 	msr	BASEPRI, r3
 80158ac:	f3bf 8f6f 	isb	sy
 80158b0:	f3bf 8f4f 	dsb	sy
 80158b4:	b662      	cpsie	i
 80158b6:	607b      	str	r3, [r7, #4]
}
 80158b8:	bf00      	nop
 80158ba:	bf00      	nop
 80158bc:	e7fd      	b.n	80158ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80158be:	4b10      	ldr	r3, [pc, #64]	@ (8015900 <vPortValidateInterruptPriority+0x84>)
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80158c6:	4b0f      	ldr	r3, [pc, #60]	@ (8015904 <vPortValidateInterruptPriority+0x88>)
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	429a      	cmp	r2, r3
 80158cc:	d90d      	bls.n	80158ea <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80158ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158d2:	b672      	cpsid	i
 80158d4:	f383 8811 	msr	BASEPRI, r3
 80158d8:	f3bf 8f6f 	isb	sy
 80158dc:	f3bf 8f4f 	dsb	sy
 80158e0:	b662      	cpsie	i
 80158e2:	603b      	str	r3, [r7, #0]
}
 80158e4:	bf00      	nop
 80158e6:	bf00      	nop
 80158e8:	e7fd      	b.n	80158e6 <vPortValidateInterruptPriority+0x6a>
	}
 80158ea:	bf00      	nop
 80158ec:	3714      	adds	r7, #20
 80158ee:	46bd      	mov	sp, r7
 80158f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f4:	4770      	bx	lr
 80158f6:	bf00      	nop
 80158f8:	e000e3f0 	.word	0xe000e3f0
 80158fc:	2000169c 	.word	0x2000169c
 8015900:	e000ed0c 	.word	0xe000ed0c
 8015904:	200016a0 	.word	0x200016a0

08015908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015908:	b580      	push	{r7, lr}
 801590a:	b08a      	sub	sp, #40	@ 0x28
 801590c:	af00      	add	r7, sp, #0
 801590e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015910:	2300      	movs	r3, #0
 8015912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015914:	f7fe ff6a 	bl	80147ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015918:	4b5f      	ldr	r3, [pc, #380]	@ (8015a98 <pvPortMalloc+0x190>)
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d101      	bne.n	8015924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015920:	f000 f924 	bl	8015b6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015924:	4b5d      	ldr	r3, [pc, #372]	@ (8015a9c <pvPortMalloc+0x194>)
 8015926:	681a      	ldr	r2, [r3, #0]
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	4013      	ands	r3, r2
 801592c:	2b00      	cmp	r3, #0
 801592e:	f040 8094 	bne.w	8015a5a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d020      	beq.n	801597a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8015938:	2208      	movs	r2, #8
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	4413      	add	r3, r2
 801593e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	f003 0307 	and.w	r3, r3, #7
 8015946:	2b00      	cmp	r3, #0
 8015948:	d017      	beq.n	801597a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	f023 0307 	bic.w	r3, r3, #7
 8015950:	3308      	adds	r3, #8
 8015952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	f003 0307 	and.w	r3, r3, #7
 801595a:	2b00      	cmp	r3, #0
 801595c:	d00d      	beq.n	801597a <pvPortMalloc+0x72>
	__asm volatile
 801595e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015962:	b672      	cpsid	i
 8015964:	f383 8811 	msr	BASEPRI, r3
 8015968:	f3bf 8f6f 	isb	sy
 801596c:	f3bf 8f4f 	dsb	sy
 8015970:	b662      	cpsie	i
 8015972:	617b      	str	r3, [r7, #20]
}
 8015974:	bf00      	nop
 8015976:	bf00      	nop
 8015978:	e7fd      	b.n	8015976 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	2b00      	cmp	r3, #0
 801597e:	d06c      	beq.n	8015a5a <pvPortMalloc+0x152>
 8015980:	4b47      	ldr	r3, [pc, #284]	@ (8015aa0 <pvPortMalloc+0x198>)
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	687a      	ldr	r2, [r7, #4]
 8015986:	429a      	cmp	r2, r3
 8015988:	d867      	bhi.n	8015a5a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801598a:	4b46      	ldr	r3, [pc, #280]	@ (8015aa4 <pvPortMalloc+0x19c>)
 801598c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801598e:	4b45      	ldr	r3, [pc, #276]	@ (8015aa4 <pvPortMalloc+0x19c>)
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015994:	e004      	b.n	80159a0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8015996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015998:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801599a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80159a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159a2:	685b      	ldr	r3, [r3, #4]
 80159a4:	687a      	ldr	r2, [r7, #4]
 80159a6:	429a      	cmp	r2, r3
 80159a8:	d903      	bls.n	80159b2 <pvPortMalloc+0xaa>
 80159aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d1f1      	bne.n	8015996 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80159b2:	4b39      	ldr	r3, [pc, #228]	@ (8015a98 <pvPortMalloc+0x190>)
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80159b8:	429a      	cmp	r2, r3
 80159ba:	d04e      	beq.n	8015a5a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80159bc:	6a3b      	ldr	r3, [r7, #32]
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	2208      	movs	r2, #8
 80159c2:	4413      	add	r3, r2
 80159c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80159c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159c8:	681a      	ldr	r2, [r3, #0]
 80159ca:	6a3b      	ldr	r3, [r7, #32]
 80159cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80159ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159d0:	685a      	ldr	r2, [r3, #4]
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	1ad2      	subs	r2, r2, r3
 80159d6:	2308      	movs	r3, #8
 80159d8:	005b      	lsls	r3, r3, #1
 80159da:	429a      	cmp	r2, r3
 80159dc:	d922      	bls.n	8015a24 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80159de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	4413      	add	r3, r2
 80159e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80159e6:	69bb      	ldr	r3, [r7, #24]
 80159e8:	f003 0307 	and.w	r3, r3, #7
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d00d      	beq.n	8015a0c <pvPortMalloc+0x104>
	__asm volatile
 80159f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159f4:	b672      	cpsid	i
 80159f6:	f383 8811 	msr	BASEPRI, r3
 80159fa:	f3bf 8f6f 	isb	sy
 80159fe:	f3bf 8f4f 	dsb	sy
 8015a02:	b662      	cpsie	i
 8015a04:	613b      	str	r3, [r7, #16]
}
 8015a06:	bf00      	nop
 8015a08:	bf00      	nop
 8015a0a:	e7fd      	b.n	8015a08 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a0e:	685a      	ldr	r2, [r3, #4]
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	1ad2      	subs	r2, r2, r3
 8015a14:	69bb      	ldr	r3, [r7, #24]
 8015a16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a1a:	687a      	ldr	r2, [r7, #4]
 8015a1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015a1e:	69b8      	ldr	r0, [r7, #24]
 8015a20:	f000 f906 	bl	8015c30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015a24:	4b1e      	ldr	r3, [pc, #120]	@ (8015aa0 <pvPortMalloc+0x198>)
 8015a26:	681a      	ldr	r2, [r3, #0]
 8015a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a2a:	685b      	ldr	r3, [r3, #4]
 8015a2c:	1ad3      	subs	r3, r2, r3
 8015a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8015aa0 <pvPortMalloc+0x198>)
 8015a30:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015a32:	4b1b      	ldr	r3, [pc, #108]	@ (8015aa0 <pvPortMalloc+0x198>)
 8015a34:	681a      	ldr	r2, [r3, #0]
 8015a36:	4b1c      	ldr	r3, [pc, #112]	@ (8015aa8 <pvPortMalloc+0x1a0>)
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	429a      	cmp	r2, r3
 8015a3c:	d203      	bcs.n	8015a46 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015a3e:	4b18      	ldr	r3, [pc, #96]	@ (8015aa0 <pvPortMalloc+0x198>)
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	4a19      	ldr	r2, [pc, #100]	@ (8015aa8 <pvPortMalloc+0x1a0>)
 8015a44:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a48:	685a      	ldr	r2, [r3, #4]
 8015a4a:	4b14      	ldr	r3, [pc, #80]	@ (8015a9c <pvPortMalloc+0x194>)
 8015a4c:	681b      	ldr	r3, [r3, #0]
 8015a4e:	431a      	orrs	r2, r3
 8015a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a52:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a56:	2200      	movs	r2, #0
 8015a58:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015a5a:	f7fe fed5 	bl	8014808 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8015a5e:	69fb      	ldr	r3, [r7, #28]
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d101      	bne.n	8015a68 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8015a64:	f7ed fd22 	bl	80034ac <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015a68:	69fb      	ldr	r3, [r7, #28]
 8015a6a:	f003 0307 	and.w	r3, r3, #7
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d00d      	beq.n	8015a8e <pvPortMalloc+0x186>
	__asm volatile
 8015a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a76:	b672      	cpsid	i
 8015a78:	f383 8811 	msr	BASEPRI, r3
 8015a7c:	f3bf 8f6f 	isb	sy
 8015a80:	f3bf 8f4f 	dsb	sy
 8015a84:	b662      	cpsie	i
 8015a86:	60fb      	str	r3, [r7, #12]
}
 8015a88:	bf00      	nop
 8015a8a:	bf00      	nop
 8015a8c:	e7fd      	b.n	8015a8a <pvPortMalloc+0x182>
	return pvReturn;
 8015a8e:	69fb      	ldr	r3, [r7, #28]
}
 8015a90:	4618      	mov	r0, r3
 8015a92:	3728      	adds	r7, #40	@ 0x28
 8015a94:	46bd      	mov	sp, r7
 8015a96:	bd80      	pop	{r7, pc}
 8015a98:	200096ac 	.word	0x200096ac
 8015a9c:	200096b8 	.word	0x200096b8
 8015aa0:	200096b0 	.word	0x200096b0
 8015aa4:	200096a4 	.word	0x200096a4
 8015aa8:	200096b4 	.word	0x200096b4

08015aac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015aac:	b580      	push	{r7, lr}
 8015aae:	b086      	sub	sp, #24
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d04e      	beq.n	8015b5c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015abe:	2308      	movs	r3, #8
 8015ac0:	425b      	negs	r3, r3
 8015ac2:	697a      	ldr	r2, [r7, #20]
 8015ac4:	4413      	add	r3, r2
 8015ac6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015ac8:	697b      	ldr	r3, [r7, #20]
 8015aca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015acc:	693b      	ldr	r3, [r7, #16]
 8015ace:	685a      	ldr	r2, [r3, #4]
 8015ad0:	4b24      	ldr	r3, [pc, #144]	@ (8015b64 <vPortFree+0xb8>)
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	4013      	ands	r3, r2
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d10d      	bne.n	8015af6 <vPortFree+0x4a>
	__asm volatile
 8015ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ade:	b672      	cpsid	i
 8015ae0:	f383 8811 	msr	BASEPRI, r3
 8015ae4:	f3bf 8f6f 	isb	sy
 8015ae8:	f3bf 8f4f 	dsb	sy
 8015aec:	b662      	cpsie	i
 8015aee:	60fb      	str	r3, [r7, #12]
}
 8015af0:	bf00      	nop
 8015af2:	bf00      	nop
 8015af4:	e7fd      	b.n	8015af2 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015af6:	693b      	ldr	r3, [r7, #16]
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d00d      	beq.n	8015b1a <vPortFree+0x6e>
	__asm volatile
 8015afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b02:	b672      	cpsid	i
 8015b04:	f383 8811 	msr	BASEPRI, r3
 8015b08:	f3bf 8f6f 	isb	sy
 8015b0c:	f3bf 8f4f 	dsb	sy
 8015b10:	b662      	cpsie	i
 8015b12:	60bb      	str	r3, [r7, #8]
}
 8015b14:	bf00      	nop
 8015b16:	bf00      	nop
 8015b18:	e7fd      	b.n	8015b16 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015b1a:	693b      	ldr	r3, [r7, #16]
 8015b1c:	685a      	ldr	r2, [r3, #4]
 8015b1e:	4b11      	ldr	r3, [pc, #68]	@ (8015b64 <vPortFree+0xb8>)
 8015b20:	681b      	ldr	r3, [r3, #0]
 8015b22:	4013      	ands	r3, r2
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d019      	beq.n	8015b5c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015b28:	693b      	ldr	r3, [r7, #16]
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d115      	bne.n	8015b5c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015b30:	693b      	ldr	r3, [r7, #16]
 8015b32:	685a      	ldr	r2, [r3, #4]
 8015b34:	4b0b      	ldr	r3, [pc, #44]	@ (8015b64 <vPortFree+0xb8>)
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	43db      	mvns	r3, r3
 8015b3a:	401a      	ands	r2, r3
 8015b3c:	693b      	ldr	r3, [r7, #16]
 8015b3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015b40:	f7fe fe54 	bl	80147ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015b44:	693b      	ldr	r3, [r7, #16]
 8015b46:	685a      	ldr	r2, [r3, #4]
 8015b48:	4b07      	ldr	r3, [pc, #28]	@ (8015b68 <vPortFree+0xbc>)
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	4413      	add	r3, r2
 8015b4e:	4a06      	ldr	r2, [pc, #24]	@ (8015b68 <vPortFree+0xbc>)
 8015b50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015b52:	6938      	ldr	r0, [r7, #16]
 8015b54:	f000 f86c 	bl	8015c30 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015b58:	f7fe fe56 	bl	8014808 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015b5c:	bf00      	nop
 8015b5e:	3718      	adds	r7, #24
 8015b60:	46bd      	mov	sp, r7
 8015b62:	bd80      	pop	{r7, pc}
 8015b64:	200096b8 	.word	0x200096b8
 8015b68:	200096b0 	.word	0x200096b0

08015b6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015b6c:	b480      	push	{r7}
 8015b6e:	b085      	sub	sp, #20
 8015b70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015b72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015b76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015b78:	4b27      	ldr	r3, [pc, #156]	@ (8015c18 <prvHeapInit+0xac>)
 8015b7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	f003 0307 	and.w	r3, r3, #7
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d00c      	beq.n	8015ba0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	3307      	adds	r3, #7
 8015b8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	f023 0307 	bic.w	r3, r3, #7
 8015b92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015b94:	68ba      	ldr	r2, [r7, #8]
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	1ad3      	subs	r3, r2, r3
 8015b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8015c18 <prvHeapInit+0xac>)
 8015b9c:	4413      	add	r3, r2
 8015b9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8015c1c <prvHeapInit+0xb0>)
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015baa:	4b1c      	ldr	r3, [pc, #112]	@ (8015c1c <prvHeapInit+0xb0>)
 8015bac:	2200      	movs	r2, #0
 8015bae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	68ba      	ldr	r2, [r7, #8]
 8015bb4:	4413      	add	r3, r2
 8015bb6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015bb8:	2208      	movs	r2, #8
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	1a9b      	subs	r3, r3, r2
 8015bbe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	f023 0307 	bic.w	r3, r3, #7
 8015bc6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	4a15      	ldr	r2, [pc, #84]	@ (8015c20 <prvHeapInit+0xb4>)
 8015bcc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015bce:	4b14      	ldr	r3, [pc, #80]	@ (8015c20 <prvHeapInit+0xb4>)
 8015bd0:	681b      	ldr	r3, [r3, #0]
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015bd6:	4b12      	ldr	r3, [pc, #72]	@ (8015c20 <prvHeapInit+0xb4>)
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	2200      	movs	r2, #0
 8015bdc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015be2:	683b      	ldr	r3, [r7, #0]
 8015be4:	68fa      	ldr	r2, [r7, #12]
 8015be6:	1ad2      	subs	r2, r2, r3
 8015be8:	683b      	ldr	r3, [r7, #0]
 8015bea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015bec:	4b0c      	ldr	r3, [pc, #48]	@ (8015c20 <prvHeapInit+0xb4>)
 8015bee:	681a      	ldr	r2, [r3, #0]
 8015bf0:	683b      	ldr	r3, [r7, #0]
 8015bf2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015bf4:	683b      	ldr	r3, [r7, #0]
 8015bf6:	685b      	ldr	r3, [r3, #4]
 8015bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8015c24 <prvHeapInit+0xb8>)
 8015bfa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015bfc:	683b      	ldr	r3, [r7, #0]
 8015bfe:	685b      	ldr	r3, [r3, #4]
 8015c00:	4a09      	ldr	r2, [pc, #36]	@ (8015c28 <prvHeapInit+0xbc>)
 8015c02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015c04:	4b09      	ldr	r3, [pc, #36]	@ (8015c2c <prvHeapInit+0xc0>)
 8015c06:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8015c0a:	601a      	str	r2, [r3, #0]
}
 8015c0c:	bf00      	nop
 8015c0e:	3714      	adds	r7, #20
 8015c10:	46bd      	mov	sp, r7
 8015c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c16:	4770      	bx	lr
 8015c18:	200016a4 	.word	0x200016a4
 8015c1c:	200096a4 	.word	0x200096a4
 8015c20:	200096ac 	.word	0x200096ac
 8015c24:	200096b4 	.word	0x200096b4
 8015c28:	200096b0 	.word	0x200096b0
 8015c2c:	200096b8 	.word	0x200096b8

08015c30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015c30:	b480      	push	{r7}
 8015c32:	b085      	sub	sp, #20
 8015c34:	af00      	add	r7, sp, #0
 8015c36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015c38:	4b28      	ldr	r3, [pc, #160]	@ (8015cdc <prvInsertBlockIntoFreeList+0xac>)
 8015c3a:	60fb      	str	r3, [r7, #12]
 8015c3c:	e002      	b.n	8015c44 <prvInsertBlockIntoFreeList+0x14>
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	60fb      	str	r3, [r7, #12]
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	687a      	ldr	r2, [r7, #4]
 8015c4a:	429a      	cmp	r2, r3
 8015c4c:	d8f7      	bhi.n	8015c3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	685b      	ldr	r3, [r3, #4]
 8015c56:	68ba      	ldr	r2, [r7, #8]
 8015c58:	4413      	add	r3, r2
 8015c5a:	687a      	ldr	r2, [r7, #4]
 8015c5c:	429a      	cmp	r2, r3
 8015c5e:	d108      	bne.n	8015c72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	685a      	ldr	r2, [r3, #4]
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	685b      	ldr	r3, [r3, #4]
 8015c68:	441a      	add	r2, r3
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	685b      	ldr	r3, [r3, #4]
 8015c7a:	68ba      	ldr	r2, [r7, #8]
 8015c7c:	441a      	add	r2, r3
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	429a      	cmp	r2, r3
 8015c84:	d118      	bne.n	8015cb8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	681a      	ldr	r2, [r3, #0]
 8015c8a:	4b15      	ldr	r3, [pc, #84]	@ (8015ce0 <prvInsertBlockIntoFreeList+0xb0>)
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	429a      	cmp	r2, r3
 8015c90:	d00d      	beq.n	8015cae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	685a      	ldr	r2, [r3, #4]
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	685b      	ldr	r3, [r3, #4]
 8015c9c:	441a      	add	r2, r3
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	681a      	ldr	r2, [r3, #0]
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	601a      	str	r2, [r3, #0]
 8015cac:	e008      	b.n	8015cc0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015cae:	4b0c      	ldr	r3, [pc, #48]	@ (8015ce0 <prvInsertBlockIntoFreeList+0xb0>)
 8015cb0:	681a      	ldr	r2, [r3, #0]
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	601a      	str	r2, [r3, #0]
 8015cb6:	e003      	b.n	8015cc0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	681a      	ldr	r2, [r3, #0]
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015cc0:	68fa      	ldr	r2, [r7, #12]
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	429a      	cmp	r2, r3
 8015cc6:	d002      	beq.n	8015cce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	687a      	ldr	r2, [r7, #4]
 8015ccc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015cce:	bf00      	nop
 8015cd0:	3714      	adds	r7, #20
 8015cd2:	46bd      	mov	sp, r7
 8015cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cd8:	4770      	bx	lr
 8015cda:	bf00      	nop
 8015cdc:	200096a4 	.word	0x200096a4
 8015ce0:	200096ac 	.word	0x200096ac

08015ce4 <malloc>:
 8015ce4:	4b02      	ldr	r3, [pc, #8]	@ (8015cf0 <malloc+0xc>)
 8015ce6:	4601      	mov	r1, r0
 8015ce8:	6818      	ldr	r0, [r3, #0]
 8015cea:	f000 b825 	b.w	8015d38 <_malloc_r>
 8015cee:	bf00      	nop
 8015cf0:	200000ac 	.word	0x200000ac

08015cf4 <sbrk_aligned>:
 8015cf4:	b570      	push	{r4, r5, r6, lr}
 8015cf6:	4e0f      	ldr	r6, [pc, #60]	@ (8015d34 <sbrk_aligned+0x40>)
 8015cf8:	460c      	mov	r4, r1
 8015cfa:	6831      	ldr	r1, [r6, #0]
 8015cfc:	4605      	mov	r5, r0
 8015cfe:	b911      	cbnz	r1, 8015d06 <sbrk_aligned+0x12>
 8015d00:	f000 fa9c 	bl	801623c <_sbrk_r>
 8015d04:	6030      	str	r0, [r6, #0]
 8015d06:	4621      	mov	r1, r4
 8015d08:	4628      	mov	r0, r5
 8015d0a:	f000 fa97 	bl	801623c <_sbrk_r>
 8015d0e:	1c43      	adds	r3, r0, #1
 8015d10:	d103      	bne.n	8015d1a <sbrk_aligned+0x26>
 8015d12:	f04f 34ff 	mov.w	r4, #4294967295
 8015d16:	4620      	mov	r0, r4
 8015d18:	bd70      	pop	{r4, r5, r6, pc}
 8015d1a:	1cc4      	adds	r4, r0, #3
 8015d1c:	f024 0403 	bic.w	r4, r4, #3
 8015d20:	42a0      	cmp	r0, r4
 8015d22:	d0f8      	beq.n	8015d16 <sbrk_aligned+0x22>
 8015d24:	1a21      	subs	r1, r4, r0
 8015d26:	4628      	mov	r0, r5
 8015d28:	f000 fa88 	bl	801623c <_sbrk_r>
 8015d2c:	3001      	adds	r0, #1
 8015d2e:	d1f2      	bne.n	8015d16 <sbrk_aligned+0x22>
 8015d30:	e7ef      	b.n	8015d12 <sbrk_aligned+0x1e>
 8015d32:	bf00      	nop
 8015d34:	200096bc 	.word	0x200096bc

08015d38 <_malloc_r>:
 8015d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d3c:	1ccd      	adds	r5, r1, #3
 8015d3e:	f025 0503 	bic.w	r5, r5, #3
 8015d42:	3508      	adds	r5, #8
 8015d44:	2d0c      	cmp	r5, #12
 8015d46:	bf38      	it	cc
 8015d48:	250c      	movcc	r5, #12
 8015d4a:	2d00      	cmp	r5, #0
 8015d4c:	4606      	mov	r6, r0
 8015d4e:	db01      	blt.n	8015d54 <_malloc_r+0x1c>
 8015d50:	42a9      	cmp	r1, r5
 8015d52:	d904      	bls.n	8015d5e <_malloc_r+0x26>
 8015d54:	230c      	movs	r3, #12
 8015d56:	6033      	str	r3, [r6, #0]
 8015d58:	2000      	movs	r0, #0
 8015d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015e34 <_malloc_r+0xfc>
 8015d62:	f000 f869 	bl	8015e38 <__malloc_lock>
 8015d66:	f8d8 3000 	ldr.w	r3, [r8]
 8015d6a:	461c      	mov	r4, r3
 8015d6c:	bb44      	cbnz	r4, 8015dc0 <_malloc_r+0x88>
 8015d6e:	4629      	mov	r1, r5
 8015d70:	4630      	mov	r0, r6
 8015d72:	f7ff ffbf 	bl	8015cf4 <sbrk_aligned>
 8015d76:	1c43      	adds	r3, r0, #1
 8015d78:	4604      	mov	r4, r0
 8015d7a:	d158      	bne.n	8015e2e <_malloc_r+0xf6>
 8015d7c:	f8d8 4000 	ldr.w	r4, [r8]
 8015d80:	4627      	mov	r7, r4
 8015d82:	2f00      	cmp	r7, #0
 8015d84:	d143      	bne.n	8015e0e <_malloc_r+0xd6>
 8015d86:	2c00      	cmp	r4, #0
 8015d88:	d04b      	beq.n	8015e22 <_malloc_r+0xea>
 8015d8a:	6823      	ldr	r3, [r4, #0]
 8015d8c:	4639      	mov	r1, r7
 8015d8e:	4630      	mov	r0, r6
 8015d90:	eb04 0903 	add.w	r9, r4, r3
 8015d94:	f000 fa52 	bl	801623c <_sbrk_r>
 8015d98:	4581      	cmp	r9, r0
 8015d9a:	d142      	bne.n	8015e22 <_malloc_r+0xea>
 8015d9c:	6821      	ldr	r1, [r4, #0]
 8015d9e:	1a6d      	subs	r5, r5, r1
 8015da0:	4629      	mov	r1, r5
 8015da2:	4630      	mov	r0, r6
 8015da4:	f7ff ffa6 	bl	8015cf4 <sbrk_aligned>
 8015da8:	3001      	adds	r0, #1
 8015daa:	d03a      	beq.n	8015e22 <_malloc_r+0xea>
 8015dac:	6823      	ldr	r3, [r4, #0]
 8015dae:	442b      	add	r3, r5
 8015db0:	6023      	str	r3, [r4, #0]
 8015db2:	f8d8 3000 	ldr.w	r3, [r8]
 8015db6:	685a      	ldr	r2, [r3, #4]
 8015db8:	bb62      	cbnz	r2, 8015e14 <_malloc_r+0xdc>
 8015dba:	f8c8 7000 	str.w	r7, [r8]
 8015dbe:	e00f      	b.n	8015de0 <_malloc_r+0xa8>
 8015dc0:	6822      	ldr	r2, [r4, #0]
 8015dc2:	1b52      	subs	r2, r2, r5
 8015dc4:	d420      	bmi.n	8015e08 <_malloc_r+0xd0>
 8015dc6:	2a0b      	cmp	r2, #11
 8015dc8:	d917      	bls.n	8015dfa <_malloc_r+0xc2>
 8015dca:	1961      	adds	r1, r4, r5
 8015dcc:	42a3      	cmp	r3, r4
 8015dce:	6025      	str	r5, [r4, #0]
 8015dd0:	bf18      	it	ne
 8015dd2:	6059      	strne	r1, [r3, #4]
 8015dd4:	6863      	ldr	r3, [r4, #4]
 8015dd6:	bf08      	it	eq
 8015dd8:	f8c8 1000 	streq.w	r1, [r8]
 8015ddc:	5162      	str	r2, [r4, r5]
 8015dde:	604b      	str	r3, [r1, #4]
 8015de0:	4630      	mov	r0, r6
 8015de2:	f000 f82f 	bl	8015e44 <__malloc_unlock>
 8015de6:	f104 000b 	add.w	r0, r4, #11
 8015dea:	1d23      	adds	r3, r4, #4
 8015dec:	f020 0007 	bic.w	r0, r0, #7
 8015df0:	1ac2      	subs	r2, r0, r3
 8015df2:	bf1c      	itt	ne
 8015df4:	1a1b      	subne	r3, r3, r0
 8015df6:	50a3      	strne	r3, [r4, r2]
 8015df8:	e7af      	b.n	8015d5a <_malloc_r+0x22>
 8015dfa:	6862      	ldr	r2, [r4, #4]
 8015dfc:	42a3      	cmp	r3, r4
 8015dfe:	bf0c      	ite	eq
 8015e00:	f8c8 2000 	streq.w	r2, [r8]
 8015e04:	605a      	strne	r2, [r3, #4]
 8015e06:	e7eb      	b.n	8015de0 <_malloc_r+0xa8>
 8015e08:	4623      	mov	r3, r4
 8015e0a:	6864      	ldr	r4, [r4, #4]
 8015e0c:	e7ae      	b.n	8015d6c <_malloc_r+0x34>
 8015e0e:	463c      	mov	r4, r7
 8015e10:	687f      	ldr	r7, [r7, #4]
 8015e12:	e7b6      	b.n	8015d82 <_malloc_r+0x4a>
 8015e14:	461a      	mov	r2, r3
 8015e16:	685b      	ldr	r3, [r3, #4]
 8015e18:	42a3      	cmp	r3, r4
 8015e1a:	d1fb      	bne.n	8015e14 <_malloc_r+0xdc>
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	6053      	str	r3, [r2, #4]
 8015e20:	e7de      	b.n	8015de0 <_malloc_r+0xa8>
 8015e22:	230c      	movs	r3, #12
 8015e24:	6033      	str	r3, [r6, #0]
 8015e26:	4630      	mov	r0, r6
 8015e28:	f000 f80c 	bl	8015e44 <__malloc_unlock>
 8015e2c:	e794      	b.n	8015d58 <_malloc_r+0x20>
 8015e2e:	6005      	str	r5, [r0, #0]
 8015e30:	e7d6      	b.n	8015de0 <_malloc_r+0xa8>
 8015e32:	bf00      	nop
 8015e34:	200096c0 	.word	0x200096c0

08015e38 <__malloc_lock>:
 8015e38:	4801      	ldr	r0, [pc, #4]	@ (8015e40 <__malloc_lock+0x8>)
 8015e3a:	f000 ba4c 	b.w	80162d6 <__retarget_lock_acquire_recursive>
 8015e3e:	bf00      	nop
 8015e40:	20009804 	.word	0x20009804

08015e44 <__malloc_unlock>:
 8015e44:	4801      	ldr	r0, [pc, #4]	@ (8015e4c <__malloc_unlock+0x8>)
 8015e46:	f000 ba47 	b.w	80162d8 <__retarget_lock_release_recursive>
 8015e4a:	bf00      	nop
 8015e4c:	20009804 	.word	0x20009804

08015e50 <rand>:
 8015e50:	4b16      	ldr	r3, [pc, #88]	@ (8015eac <rand+0x5c>)
 8015e52:	b510      	push	{r4, lr}
 8015e54:	681c      	ldr	r4, [r3, #0]
 8015e56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e58:	b9b3      	cbnz	r3, 8015e88 <rand+0x38>
 8015e5a:	2018      	movs	r0, #24
 8015e5c:	f7ff ff42 	bl	8015ce4 <malloc>
 8015e60:	4602      	mov	r2, r0
 8015e62:	6320      	str	r0, [r4, #48]	@ 0x30
 8015e64:	b920      	cbnz	r0, 8015e70 <rand+0x20>
 8015e66:	4b12      	ldr	r3, [pc, #72]	@ (8015eb0 <rand+0x60>)
 8015e68:	4812      	ldr	r0, [pc, #72]	@ (8015eb4 <rand+0x64>)
 8015e6a:	2152      	movs	r1, #82	@ 0x52
 8015e6c:	f000 fa44 	bl	80162f8 <__assert_func>
 8015e70:	4911      	ldr	r1, [pc, #68]	@ (8015eb8 <rand+0x68>)
 8015e72:	4b12      	ldr	r3, [pc, #72]	@ (8015ebc <rand+0x6c>)
 8015e74:	e9c0 1300 	strd	r1, r3, [r0]
 8015e78:	4b11      	ldr	r3, [pc, #68]	@ (8015ec0 <rand+0x70>)
 8015e7a:	6083      	str	r3, [r0, #8]
 8015e7c:	230b      	movs	r3, #11
 8015e7e:	8183      	strh	r3, [r0, #12]
 8015e80:	2100      	movs	r1, #0
 8015e82:	2001      	movs	r0, #1
 8015e84:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015e88:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015e8a:	480e      	ldr	r0, [pc, #56]	@ (8015ec4 <rand+0x74>)
 8015e8c:	690b      	ldr	r3, [r1, #16]
 8015e8e:	694c      	ldr	r4, [r1, #20]
 8015e90:	4a0d      	ldr	r2, [pc, #52]	@ (8015ec8 <rand+0x78>)
 8015e92:	4358      	muls	r0, r3
 8015e94:	fb02 0004 	mla	r0, r2, r4, r0
 8015e98:	fba3 3202 	umull	r3, r2, r3, r2
 8015e9c:	3301      	adds	r3, #1
 8015e9e:	eb40 0002 	adc.w	r0, r0, r2
 8015ea2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8015ea6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8015eaa:	bd10      	pop	{r4, pc}
 8015eac:	200000ac 	.word	0x200000ac
 8015eb0:	080256f8 	.word	0x080256f8
 8015eb4:	0802570f 	.word	0x0802570f
 8015eb8:	abcd330e 	.word	0xabcd330e
 8015ebc:	e66d1234 	.word	0xe66d1234
 8015ec0:	0005deec 	.word	0x0005deec
 8015ec4:	5851f42d 	.word	0x5851f42d
 8015ec8:	4c957f2d 	.word	0x4c957f2d

08015ecc <std>:
 8015ecc:	2300      	movs	r3, #0
 8015ece:	b510      	push	{r4, lr}
 8015ed0:	4604      	mov	r4, r0
 8015ed2:	e9c0 3300 	strd	r3, r3, [r0]
 8015ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015eda:	6083      	str	r3, [r0, #8]
 8015edc:	8181      	strh	r1, [r0, #12]
 8015ede:	6643      	str	r3, [r0, #100]	@ 0x64
 8015ee0:	81c2      	strh	r2, [r0, #14]
 8015ee2:	6183      	str	r3, [r0, #24]
 8015ee4:	4619      	mov	r1, r3
 8015ee6:	2208      	movs	r2, #8
 8015ee8:	305c      	adds	r0, #92	@ 0x5c
 8015eea:	f000 f914 	bl	8016116 <memset>
 8015eee:	4b0d      	ldr	r3, [pc, #52]	@ (8015f24 <std+0x58>)
 8015ef0:	6263      	str	r3, [r4, #36]	@ 0x24
 8015ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8015f28 <std+0x5c>)
 8015ef4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8015f2c <std+0x60>)
 8015ef8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015efa:	4b0d      	ldr	r3, [pc, #52]	@ (8015f30 <std+0x64>)
 8015efc:	6323      	str	r3, [r4, #48]	@ 0x30
 8015efe:	4b0d      	ldr	r3, [pc, #52]	@ (8015f34 <std+0x68>)
 8015f00:	6224      	str	r4, [r4, #32]
 8015f02:	429c      	cmp	r4, r3
 8015f04:	d006      	beq.n	8015f14 <std+0x48>
 8015f06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015f0a:	4294      	cmp	r4, r2
 8015f0c:	d002      	beq.n	8015f14 <std+0x48>
 8015f0e:	33d0      	adds	r3, #208	@ 0xd0
 8015f10:	429c      	cmp	r4, r3
 8015f12:	d105      	bne.n	8015f20 <std+0x54>
 8015f14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f1c:	f000 b9da 	b.w	80162d4 <__retarget_lock_init_recursive>
 8015f20:	bd10      	pop	{r4, pc}
 8015f22:	bf00      	nop
 8015f24:	08016091 	.word	0x08016091
 8015f28:	080160b3 	.word	0x080160b3
 8015f2c:	080160eb 	.word	0x080160eb
 8015f30:	0801610f 	.word	0x0801610f
 8015f34:	200096c4 	.word	0x200096c4

08015f38 <stdio_exit_handler>:
 8015f38:	4a02      	ldr	r2, [pc, #8]	@ (8015f44 <stdio_exit_handler+0xc>)
 8015f3a:	4903      	ldr	r1, [pc, #12]	@ (8015f48 <stdio_exit_handler+0x10>)
 8015f3c:	4803      	ldr	r0, [pc, #12]	@ (8015f4c <stdio_exit_handler+0x14>)
 8015f3e:	f000 b869 	b.w	8016014 <_fwalk_sglue>
 8015f42:	bf00      	nop
 8015f44:	200000a0 	.word	0x200000a0
 8015f48:	08016a9d 	.word	0x08016a9d
 8015f4c:	200000b0 	.word	0x200000b0

08015f50 <cleanup_stdio>:
 8015f50:	6841      	ldr	r1, [r0, #4]
 8015f52:	4b0c      	ldr	r3, [pc, #48]	@ (8015f84 <cleanup_stdio+0x34>)
 8015f54:	4299      	cmp	r1, r3
 8015f56:	b510      	push	{r4, lr}
 8015f58:	4604      	mov	r4, r0
 8015f5a:	d001      	beq.n	8015f60 <cleanup_stdio+0x10>
 8015f5c:	f000 fd9e 	bl	8016a9c <_fflush_r>
 8015f60:	68a1      	ldr	r1, [r4, #8]
 8015f62:	4b09      	ldr	r3, [pc, #36]	@ (8015f88 <cleanup_stdio+0x38>)
 8015f64:	4299      	cmp	r1, r3
 8015f66:	d002      	beq.n	8015f6e <cleanup_stdio+0x1e>
 8015f68:	4620      	mov	r0, r4
 8015f6a:	f000 fd97 	bl	8016a9c <_fflush_r>
 8015f6e:	68e1      	ldr	r1, [r4, #12]
 8015f70:	4b06      	ldr	r3, [pc, #24]	@ (8015f8c <cleanup_stdio+0x3c>)
 8015f72:	4299      	cmp	r1, r3
 8015f74:	d004      	beq.n	8015f80 <cleanup_stdio+0x30>
 8015f76:	4620      	mov	r0, r4
 8015f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f7c:	f000 bd8e 	b.w	8016a9c <_fflush_r>
 8015f80:	bd10      	pop	{r4, pc}
 8015f82:	bf00      	nop
 8015f84:	200096c4 	.word	0x200096c4
 8015f88:	2000972c 	.word	0x2000972c
 8015f8c:	20009794 	.word	0x20009794

08015f90 <global_stdio_init.part.0>:
 8015f90:	b510      	push	{r4, lr}
 8015f92:	4b0b      	ldr	r3, [pc, #44]	@ (8015fc0 <global_stdio_init.part.0+0x30>)
 8015f94:	4c0b      	ldr	r4, [pc, #44]	@ (8015fc4 <global_stdio_init.part.0+0x34>)
 8015f96:	4a0c      	ldr	r2, [pc, #48]	@ (8015fc8 <global_stdio_init.part.0+0x38>)
 8015f98:	601a      	str	r2, [r3, #0]
 8015f9a:	4620      	mov	r0, r4
 8015f9c:	2200      	movs	r2, #0
 8015f9e:	2104      	movs	r1, #4
 8015fa0:	f7ff ff94 	bl	8015ecc <std>
 8015fa4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015fa8:	2201      	movs	r2, #1
 8015faa:	2109      	movs	r1, #9
 8015fac:	f7ff ff8e 	bl	8015ecc <std>
 8015fb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015fb4:	2202      	movs	r2, #2
 8015fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015fba:	2112      	movs	r1, #18
 8015fbc:	f7ff bf86 	b.w	8015ecc <std>
 8015fc0:	200097fc 	.word	0x200097fc
 8015fc4:	200096c4 	.word	0x200096c4
 8015fc8:	08015f39 	.word	0x08015f39

08015fcc <__sfp_lock_acquire>:
 8015fcc:	4801      	ldr	r0, [pc, #4]	@ (8015fd4 <__sfp_lock_acquire+0x8>)
 8015fce:	f000 b982 	b.w	80162d6 <__retarget_lock_acquire_recursive>
 8015fd2:	bf00      	nop
 8015fd4:	20009805 	.word	0x20009805

08015fd8 <__sfp_lock_release>:
 8015fd8:	4801      	ldr	r0, [pc, #4]	@ (8015fe0 <__sfp_lock_release+0x8>)
 8015fda:	f000 b97d 	b.w	80162d8 <__retarget_lock_release_recursive>
 8015fde:	bf00      	nop
 8015fe0:	20009805 	.word	0x20009805

08015fe4 <__sinit>:
 8015fe4:	b510      	push	{r4, lr}
 8015fe6:	4604      	mov	r4, r0
 8015fe8:	f7ff fff0 	bl	8015fcc <__sfp_lock_acquire>
 8015fec:	6a23      	ldr	r3, [r4, #32]
 8015fee:	b11b      	cbz	r3, 8015ff8 <__sinit+0x14>
 8015ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ff4:	f7ff bff0 	b.w	8015fd8 <__sfp_lock_release>
 8015ff8:	4b04      	ldr	r3, [pc, #16]	@ (801600c <__sinit+0x28>)
 8015ffa:	6223      	str	r3, [r4, #32]
 8015ffc:	4b04      	ldr	r3, [pc, #16]	@ (8016010 <__sinit+0x2c>)
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	2b00      	cmp	r3, #0
 8016002:	d1f5      	bne.n	8015ff0 <__sinit+0xc>
 8016004:	f7ff ffc4 	bl	8015f90 <global_stdio_init.part.0>
 8016008:	e7f2      	b.n	8015ff0 <__sinit+0xc>
 801600a:	bf00      	nop
 801600c:	08015f51 	.word	0x08015f51
 8016010:	200097fc 	.word	0x200097fc

08016014 <_fwalk_sglue>:
 8016014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016018:	4607      	mov	r7, r0
 801601a:	4688      	mov	r8, r1
 801601c:	4614      	mov	r4, r2
 801601e:	2600      	movs	r6, #0
 8016020:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016024:	f1b9 0901 	subs.w	r9, r9, #1
 8016028:	d505      	bpl.n	8016036 <_fwalk_sglue+0x22>
 801602a:	6824      	ldr	r4, [r4, #0]
 801602c:	2c00      	cmp	r4, #0
 801602e:	d1f7      	bne.n	8016020 <_fwalk_sglue+0xc>
 8016030:	4630      	mov	r0, r6
 8016032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016036:	89ab      	ldrh	r3, [r5, #12]
 8016038:	2b01      	cmp	r3, #1
 801603a:	d907      	bls.n	801604c <_fwalk_sglue+0x38>
 801603c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016040:	3301      	adds	r3, #1
 8016042:	d003      	beq.n	801604c <_fwalk_sglue+0x38>
 8016044:	4629      	mov	r1, r5
 8016046:	4638      	mov	r0, r7
 8016048:	47c0      	blx	r8
 801604a:	4306      	orrs	r6, r0
 801604c:	3568      	adds	r5, #104	@ 0x68
 801604e:	e7e9      	b.n	8016024 <_fwalk_sglue+0x10>

08016050 <siprintf>:
 8016050:	b40e      	push	{r1, r2, r3}
 8016052:	b500      	push	{lr}
 8016054:	b09c      	sub	sp, #112	@ 0x70
 8016056:	ab1d      	add	r3, sp, #116	@ 0x74
 8016058:	9002      	str	r0, [sp, #8]
 801605a:	9006      	str	r0, [sp, #24]
 801605c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016060:	4809      	ldr	r0, [pc, #36]	@ (8016088 <siprintf+0x38>)
 8016062:	9107      	str	r1, [sp, #28]
 8016064:	9104      	str	r1, [sp, #16]
 8016066:	4909      	ldr	r1, [pc, #36]	@ (801608c <siprintf+0x3c>)
 8016068:	f853 2b04 	ldr.w	r2, [r3], #4
 801606c:	9105      	str	r1, [sp, #20]
 801606e:	6800      	ldr	r0, [r0, #0]
 8016070:	9301      	str	r3, [sp, #4]
 8016072:	a902      	add	r1, sp, #8
 8016074:	f000 fa04 	bl	8016480 <_svfiprintf_r>
 8016078:	9b02      	ldr	r3, [sp, #8]
 801607a:	2200      	movs	r2, #0
 801607c:	701a      	strb	r2, [r3, #0]
 801607e:	b01c      	add	sp, #112	@ 0x70
 8016080:	f85d eb04 	ldr.w	lr, [sp], #4
 8016084:	b003      	add	sp, #12
 8016086:	4770      	bx	lr
 8016088:	200000ac 	.word	0x200000ac
 801608c:	ffff0208 	.word	0xffff0208

08016090 <__sread>:
 8016090:	b510      	push	{r4, lr}
 8016092:	460c      	mov	r4, r1
 8016094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016098:	f000 f8be 	bl	8016218 <_read_r>
 801609c:	2800      	cmp	r0, #0
 801609e:	bfab      	itete	ge
 80160a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80160a2:	89a3      	ldrhlt	r3, [r4, #12]
 80160a4:	181b      	addge	r3, r3, r0
 80160a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80160aa:	bfac      	ite	ge
 80160ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80160ae:	81a3      	strhlt	r3, [r4, #12]
 80160b0:	bd10      	pop	{r4, pc}

080160b2 <__swrite>:
 80160b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160b6:	461f      	mov	r7, r3
 80160b8:	898b      	ldrh	r3, [r1, #12]
 80160ba:	05db      	lsls	r3, r3, #23
 80160bc:	4605      	mov	r5, r0
 80160be:	460c      	mov	r4, r1
 80160c0:	4616      	mov	r6, r2
 80160c2:	d505      	bpl.n	80160d0 <__swrite+0x1e>
 80160c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160c8:	2302      	movs	r3, #2
 80160ca:	2200      	movs	r2, #0
 80160cc:	f000 f892 	bl	80161f4 <_lseek_r>
 80160d0:	89a3      	ldrh	r3, [r4, #12]
 80160d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80160d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80160da:	81a3      	strh	r3, [r4, #12]
 80160dc:	4632      	mov	r2, r6
 80160de:	463b      	mov	r3, r7
 80160e0:	4628      	mov	r0, r5
 80160e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80160e6:	f000 b8b9 	b.w	801625c <_write_r>

080160ea <__sseek>:
 80160ea:	b510      	push	{r4, lr}
 80160ec:	460c      	mov	r4, r1
 80160ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160f2:	f000 f87f 	bl	80161f4 <_lseek_r>
 80160f6:	1c43      	adds	r3, r0, #1
 80160f8:	89a3      	ldrh	r3, [r4, #12]
 80160fa:	bf15      	itete	ne
 80160fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80160fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016102:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016106:	81a3      	strheq	r3, [r4, #12]
 8016108:	bf18      	it	ne
 801610a:	81a3      	strhne	r3, [r4, #12]
 801610c:	bd10      	pop	{r4, pc}

0801610e <__sclose>:
 801610e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016112:	f000 b809 	b.w	8016128 <_close_r>

08016116 <memset>:
 8016116:	4402      	add	r2, r0
 8016118:	4603      	mov	r3, r0
 801611a:	4293      	cmp	r3, r2
 801611c:	d100      	bne.n	8016120 <memset+0xa>
 801611e:	4770      	bx	lr
 8016120:	f803 1b01 	strb.w	r1, [r3], #1
 8016124:	e7f9      	b.n	801611a <memset+0x4>
	...

08016128 <_close_r>:
 8016128:	b538      	push	{r3, r4, r5, lr}
 801612a:	4d06      	ldr	r5, [pc, #24]	@ (8016144 <_close_r+0x1c>)
 801612c:	2300      	movs	r3, #0
 801612e:	4604      	mov	r4, r0
 8016130:	4608      	mov	r0, r1
 8016132:	602b      	str	r3, [r5, #0]
 8016134:	f7f2 fde2 	bl	8008cfc <_close>
 8016138:	1c43      	adds	r3, r0, #1
 801613a:	d102      	bne.n	8016142 <_close_r+0x1a>
 801613c:	682b      	ldr	r3, [r5, #0]
 801613e:	b103      	cbz	r3, 8016142 <_close_r+0x1a>
 8016140:	6023      	str	r3, [r4, #0]
 8016142:	bd38      	pop	{r3, r4, r5, pc}
 8016144:	20009800 	.word	0x20009800

08016148 <_reclaim_reent>:
 8016148:	4b29      	ldr	r3, [pc, #164]	@ (80161f0 <_reclaim_reent+0xa8>)
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	4283      	cmp	r3, r0
 801614e:	b570      	push	{r4, r5, r6, lr}
 8016150:	4604      	mov	r4, r0
 8016152:	d04b      	beq.n	80161ec <_reclaim_reent+0xa4>
 8016154:	69c3      	ldr	r3, [r0, #28]
 8016156:	b1ab      	cbz	r3, 8016184 <_reclaim_reent+0x3c>
 8016158:	68db      	ldr	r3, [r3, #12]
 801615a:	b16b      	cbz	r3, 8016178 <_reclaim_reent+0x30>
 801615c:	2500      	movs	r5, #0
 801615e:	69e3      	ldr	r3, [r4, #28]
 8016160:	68db      	ldr	r3, [r3, #12]
 8016162:	5959      	ldr	r1, [r3, r5]
 8016164:	2900      	cmp	r1, #0
 8016166:	d13b      	bne.n	80161e0 <_reclaim_reent+0x98>
 8016168:	3504      	adds	r5, #4
 801616a:	2d80      	cmp	r5, #128	@ 0x80
 801616c:	d1f7      	bne.n	801615e <_reclaim_reent+0x16>
 801616e:	69e3      	ldr	r3, [r4, #28]
 8016170:	4620      	mov	r0, r4
 8016172:	68d9      	ldr	r1, [r3, #12]
 8016174:	f000 f8de 	bl	8016334 <_free_r>
 8016178:	69e3      	ldr	r3, [r4, #28]
 801617a:	6819      	ldr	r1, [r3, #0]
 801617c:	b111      	cbz	r1, 8016184 <_reclaim_reent+0x3c>
 801617e:	4620      	mov	r0, r4
 8016180:	f000 f8d8 	bl	8016334 <_free_r>
 8016184:	6961      	ldr	r1, [r4, #20]
 8016186:	b111      	cbz	r1, 801618e <_reclaim_reent+0x46>
 8016188:	4620      	mov	r0, r4
 801618a:	f000 f8d3 	bl	8016334 <_free_r>
 801618e:	69e1      	ldr	r1, [r4, #28]
 8016190:	b111      	cbz	r1, 8016198 <_reclaim_reent+0x50>
 8016192:	4620      	mov	r0, r4
 8016194:	f000 f8ce 	bl	8016334 <_free_r>
 8016198:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801619a:	b111      	cbz	r1, 80161a2 <_reclaim_reent+0x5a>
 801619c:	4620      	mov	r0, r4
 801619e:	f000 f8c9 	bl	8016334 <_free_r>
 80161a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80161a4:	b111      	cbz	r1, 80161ac <_reclaim_reent+0x64>
 80161a6:	4620      	mov	r0, r4
 80161a8:	f000 f8c4 	bl	8016334 <_free_r>
 80161ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80161ae:	b111      	cbz	r1, 80161b6 <_reclaim_reent+0x6e>
 80161b0:	4620      	mov	r0, r4
 80161b2:	f000 f8bf 	bl	8016334 <_free_r>
 80161b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80161b8:	b111      	cbz	r1, 80161c0 <_reclaim_reent+0x78>
 80161ba:	4620      	mov	r0, r4
 80161bc:	f000 f8ba 	bl	8016334 <_free_r>
 80161c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80161c2:	b111      	cbz	r1, 80161ca <_reclaim_reent+0x82>
 80161c4:	4620      	mov	r0, r4
 80161c6:	f000 f8b5 	bl	8016334 <_free_r>
 80161ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80161cc:	b111      	cbz	r1, 80161d4 <_reclaim_reent+0x8c>
 80161ce:	4620      	mov	r0, r4
 80161d0:	f000 f8b0 	bl	8016334 <_free_r>
 80161d4:	6a23      	ldr	r3, [r4, #32]
 80161d6:	b14b      	cbz	r3, 80161ec <_reclaim_reent+0xa4>
 80161d8:	4620      	mov	r0, r4
 80161da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80161de:	4718      	bx	r3
 80161e0:	680e      	ldr	r6, [r1, #0]
 80161e2:	4620      	mov	r0, r4
 80161e4:	f000 f8a6 	bl	8016334 <_free_r>
 80161e8:	4631      	mov	r1, r6
 80161ea:	e7bb      	b.n	8016164 <_reclaim_reent+0x1c>
 80161ec:	bd70      	pop	{r4, r5, r6, pc}
 80161ee:	bf00      	nop
 80161f0:	200000ac 	.word	0x200000ac

080161f4 <_lseek_r>:
 80161f4:	b538      	push	{r3, r4, r5, lr}
 80161f6:	4d07      	ldr	r5, [pc, #28]	@ (8016214 <_lseek_r+0x20>)
 80161f8:	4604      	mov	r4, r0
 80161fa:	4608      	mov	r0, r1
 80161fc:	4611      	mov	r1, r2
 80161fe:	2200      	movs	r2, #0
 8016200:	602a      	str	r2, [r5, #0]
 8016202:	461a      	mov	r2, r3
 8016204:	f7f2 fda1 	bl	8008d4a <_lseek>
 8016208:	1c43      	adds	r3, r0, #1
 801620a:	d102      	bne.n	8016212 <_lseek_r+0x1e>
 801620c:	682b      	ldr	r3, [r5, #0]
 801620e:	b103      	cbz	r3, 8016212 <_lseek_r+0x1e>
 8016210:	6023      	str	r3, [r4, #0]
 8016212:	bd38      	pop	{r3, r4, r5, pc}
 8016214:	20009800 	.word	0x20009800

08016218 <_read_r>:
 8016218:	b538      	push	{r3, r4, r5, lr}
 801621a:	4d07      	ldr	r5, [pc, #28]	@ (8016238 <_read_r+0x20>)
 801621c:	4604      	mov	r4, r0
 801621e:	4608      	mov	r0, r1
 8016220:	4611      	mov	r1, r2
 8016222:	2200      	movs	r2, #0
 8016224:	602a      	str	r2, [r5, #0]
 8016226:	461a      	mov	r2, r3
 8016228:	f7f2 fd2f 	bl	8008c8a <_read>
 801622c:	1c43      	adds	r3, r0, #1
 801622e:	d102      	bne.n	8016236 <_read_r+0x1e>
 8016230:	682b      	ldr	r3, [r5, #0]
 8016232:	b103      	cbz	r3, 8016236 <_read_r+0x1e>
 8016234:	6023      	str	r3, [r4, #0]
 8016236:	bd38      	pop	{r3, r4, r5, pc}
 8016238:	20009800 	.word	0x20009800

0801623c <_sbrk_r>:
 801623c:	b538      	push	{r3, r4, r5, lr}
 801623e:	4d06      	ldr	r5, [pc, #24]	@ (8016258 <_sbrk_r+0x1c>)
 8016240:	2300      	movs	r3, #0
 8016242:	4604      	mov	r4, r0
 8016244:	4608      	mov	r0, r1
 8016246:	602b      	str	r3, [r5, #0]
 8016248:	f7f2 fd8c 	bl	8008d64 <_sbrk>
 801624c:	1c43      	adds	r3, r0, #1
 801624e:	d102      	bne.n	8016256 <_sbrk_r+0x1a>
 8016250:	682b      	ldr	r3, [r5, #0]
 8016252:	b103      	cbz	r3, 8016256 <_sbrk_r+0x1a>
 8016254:	6023      	str	r3, [r4, #0]
 8016256:	bd38      	pop	{r3, r4, r5, pc}
 8016258:	20009800 	.word	0x20009800

0801625c <_write_r>:
 801625c:	b538      	push	{r3, r4, r5, lr}
 801625e:	4d07      	ldr	r5, [pc, #28]	@ (801627c <_write_r+0x20>)
 8016260:	4604      	mov	r4, r0
 8016262:	4608      	mov	r0, r1
 8016264:	4611      	mov	r1, r2
 8016266:	2200      	movs	r2, #0
 8016268:	602a      	str	r2, [r5, #0]
 801626a:	461a      	mov	r2, r3
 801626c:	f7f2 fd2a 	bl	8008cc4 <_write>
 8016270:	1c43      	adds	r3, r0, #1
 8016272:	d102      	bne.n	801627a <_write_r+0x1e>
 8016274:	682b      	ldr	r3, [r5, #0]
 8016276:	b103      	cbz	r3, 801627a <_write_r+0x1e>
 8016278:	6023      	str	r3, [r4, #0]
 801627a:	bd38      	pop	{r3, r4, r5, pc}
 801627c:	20009800 	.word	0x20009800

08016280 <__errno>:
 8016280:	4b01      	ldr	r3, [pc, #4]	@ (8016288 <__errno+0x8>)
 8016282:	6818      	ldr	r0, [r3, #0]
 8016284:	4770      	bx	lr
 8016286:	bf00      	nop
 8016288:	200000ac 	.word	0x200000ac

0801628c <__libc_init_array>:
 801628c:	b570      	push	{r4, r5, r6, lr}
 801628e:	4d0d      	ldr	r5, [pc, #52]	@ (80162c4 <__libc_init_array+0x38>)
 8016290:	4c0d      	ldr	r4, [pc, #52]	@ (80162c8 <__libc_init_array+0x3c>)
 8016292:	1b64      	subs	r4, r4, r5
 8016294:	10a4      	asrs	r4, r4, #2
 8016296:	2600      	movs	r6, #0
 8016298:	42a6      	cmp	r6, r4
 801629a:	d109      	bne.n	80162b0 <__libc_init_array+0x24>
 801629c:	4d0b      	ldr	r5, [pc, #44]	@ (80162cc <__libc_init_array+0x40>)
 801629e:	4c0c      	ldr	r4, [pc, #48]	@ (80162d0 <__libc_init_array+0x44>)
 80162a0:	f000 ff2a 	bl	80170f8 <_init>
 80162a4:	1b64      	subs	r4, r4, r5
 80162a6:	10a4      	asrs	r4, r4, #2
 80162a8:	2600      	movs	r6, #0
 80162aa:	42a6      	cmp	r6, r4
 80162ac:	d105      	bne.n	80162ba <__libc_init_array+0x2e>
 80162ae:	bd70      	pop	{r4, r5, r6, pc}
 80162b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80162b4:	4798      	blx	r3
 80162b6:	3601      	adds	r6, #1
 80162b8:	e7ee      	b.n	8016298 <__libc_init_array+0xc>
 80162ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80162be:	4798      	blx	r3
 80162c0:	3601      	adds	r6, #1
 80162c2:	e7f2      	b.n	80162aa <__libc_init_array+0x1e>
 80162c4:	080257e0 	.word	0x080257e0
 80162c8:	080257e0 	.word	0x080257e0
 80162cc:	080257e0 	.word	0x080257e0
 80162d0:	080257e4 	.word	0x080257e4

080162d4 <__retarget_lock_init_recursive>:
 80162d4:	4770      	bx	lr

080162d6 <__retarget_lock_acquire_recursive>:
 80162d6:	4770      	bx	lr

080162d8 <__retarget_lock_release_recursive>:
 80162d8:	4770      	bx	lr

080162da <memcpy>:
 80162da:	440a      	add	r2, r1
 80162dc:	4291      	cmp	r1, r2
 80162de:	f100 33ff 	add.w	r3, r0, #4294967295
 80162e2:	d100      	bne.n	80162e6 <memcpy+0xc>
 80162e4:	4770      	bx	lr
 80162e6:	b510      	push	{r4, lr}
 80162e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80162ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80162f0:	4291      	cmp	r1, r2
 80162f2:	d1f9      	bne.n	80162e8 <memcpy+0xe>
 80162f4:	bd10      	pop	{r4, pc}
	...

080162f8 <__assert_func>:
 80162f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80162fa:	4614      	mov	r4, r2
 80162fc:	461a      	mov	r2, r3
 80162fe:	4b09      	ldr	r3, [pc, #36]	@ (8016324 <__assert_func+0x2c>)
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	4605      	mov	r5, r0
 8016304:	68d8      	ldr	r0, [r3, #12]
 8016306:	b954      	cbnz	r4, 801631e <__assert_func+0x26>
 8016308:	4b07      	ldr	r3, [pc, #28]	@ (8016328 <__assert_func+0x30>)
 801630a:	461c      	mov	r4, r3
 801630c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016310:	9100      	str	r1, [sp, #0]
 8016312:	462b      	mov	r3, r5
 8016314:	4905      	ldr	r1, [pc, #20]	@ (801632c <__assert_func+0x34>)
 8016316:	f000 fbe9 	bl	8016aec <fiprintf>
 801631a:	f000 fc13 	bl	8016b44 <abort>
 801631e:	4b04      	ldr	r3, [pc, #16]	@ (8016330 <__assert_func+0x38>)
 8016320:	e7f4      	b.n	801630c <__assert_func+0x14>
 8016322:	bf00      	nop
 8016324:	200000ac 	.word	0x200000ac
 8016328:	080257a2 	.word	0x080257a2
 801632c:	08025774 	.word	0x08025774
 8016330:	08025767 	.word	0x08025767

08016334 <_free_r>:
 8016334:	b538      	push	{r3, r4, r5, lr}
 8016336:	4605      	mov	r5, r0
 8016338:	2900      	cmp	r1, #0
 801633a:	d041      	beq.n	80163c0 <_free_r+0x8c>
 801633c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016340:	1f0c      	subs	r4, r1, #4
 8016342:	2b00      	cmp	r3, #0
 8016344:	bfb8      	it	lt
 8016346:	18e4      	addlt	r4, r4, r3
 8016348:	f7ff fd76 	bl	8015e38 <__malloc_lock>
 801634c:	4a1d      	ldr	r2, [pc, #116]	@ (80163c4 <_free_r+0x90>)
 801634e:	6813      	ldr	r3, [r2, #0]
 8016350:	b933      	cbnz	r3, 8016360 <_free_r+0x2c>
 8016352:	6063      	str	r3, [r4, #4]
 8016354:	6014      	str	r4, [r2, #0]
 8016356:	4628      	mov	r0, r5
 8016358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801635c:	f7ff bd72 	b.w	8015e44 <__malloc_unlock>
 8016360:	42a3      	cmp	r3, r4
 8016362:	d908      	bls.n	8016376 <_free_r+0x42>
 8016364:	6820      	ldr	r0, [r4, #0]
 8016366:	1821      	adds	r1, r4, r0
 8016368:	428b      	cmp	r3, r1
 801636a:	bf01      	itttt	eq
 801636c:	6819      	ldreq	r1, [r3, #0]
 801636e:	685b      	ldreq	r3, [r3, #4]
 8016370:	1809      	addeq	r1, r1, r0
 8016372:	6021      	streq	r1, [r4, #0]
 8016374:	e7ed      	b.n	8016352 <_free_r+0x1e>
 8016376:	461a      	mov	r2, r3
 8016378:	685b      	ldr	r3, [r3, #4]
 801637a:	b10b      	cbz	r3, 8016380 <_free_r+0x4c>
 801637c:	42a3      	cmp	r3, r4
 801637e:	d9fa      	bls.n	8016376 <_free_r+0x42>
 8016380:	6811      	ldr	r1, [r2, #0]
 8016382:	1850      	adds	r0, r2, r1
 8016384:	42a0      	cmp	r0, r4
 8016386:	d10b      	bne.n	80163a0 <_free_r+0x6c>
 8016388:	6820      	ldr	r0, [r4, #0]
 801638a:	4401      	add	r1, r0
 801638c:	1850      	adds	r0, r2, r1
 801638e:	4283      	cmp	r3, r0
 8016390:	6011      	str	r1, [r2, #0]
 8016392:	d1e0      	bne.n	8016356 <_free_r+0x22>
 8016394:	6818      	ldr	r0, [r3, #0]
 8016396:	685b      	ldr	r3, [r3, #4]
 8016398:	6053      	str	r3, [r2, #4]
 801639a:	4408      	add	r0, r1
 801639c:	6010      	str	r0, [r2, #0]
 801639e:	e7da      	b.n	8016356 <_free_r+0x22>
 80163a0:	d902      	bls.n	80163a8 <_free_r+0x74>
 80163a2:	230c      	movs	r3, #12
 80163a4:	602b      	str	r3, [r5, #0]
 80163a6:	e7d6      	b.n	8016356 <_free_r+0x22>
 80163a8:	6820      	ldr	r0, [r4, #0]
 80163aa:	1821      	adds	r1, r4, r0
 80163ac:	428b      	cmp	r3, r1
 80163ae:	bf04      	itt	eq
 80163b0:	6819      	ldreq	r1, [r3, #0]
 80163b2:	685b      	ldreq	r3, [r3, #4]
 80163b4:	6063      	str	r3, [r4, #4]
 80163b6:	bf04      	itt	eq
 80163b8:	1809      	addeq	r1, r1, r0
 80163ba:	6021      	streq	r1, [r4, #0]
 80163bc:	6054      	str	r4, [r2, #4]
 80163be:	e7ca      	b.n	8016356 <_free_r+0x22>
 80163c0:	bd38      	pop	{r3, r4, r5, pc}
 80163c2:	bf00      	nop
 80163c4:	200096c0 	.word	0x200096c0

080163c8 <__ssputs_r>:
 80163c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163cc:	688e      	ldr	r6, [r1, #8]
 80163ce:	461f      	mov	r7, r3
 80163d0:	42be      	cmp	r6, r7
 80163d2:	680b      	ldr	r3, [r1, #0]
 80163d4:	4682      	mov	sl, r0
 80163d6:	460c      	mov	r4, r1
 80163d8:	4690      	mov	r8, r2
 80163da:	d82d      	bhi.n	8016438 <__ssputs_r+0x70>
 80163dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80163e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80163e4:	d026      	beq.n	8016434 <__ssputs_r+0x6c>
 80163e6:	6965      	ldr	r5, [r4, #20]
 80163e8:	6909      	ldr	r1, [r1, #16]
 80163ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80163ee:	eba3 0901 	sub.w	r9, r3, r1
 80163f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80163f6:	1c7b      	adds	r3, r7, #1
 80163f8:	444b      	add	r3, r9
 80163fa:	106d      	asrs	r5, r5, #1
 80163fc:	429d      	cmp	r5, r3
 80163fe:	bf38      	it	cc
 8016400:	461d      	movcc	r5, r3
 8016402:	0553      	lsls	r3, r2, #21
 8016404:	d527      	bpl.n	8016456 <__ssputs_r+0x8e>
 8016406:	4629      	mov	r1, r5
 8016408:	f7ff fc96 	bl	8015d38 <_malloc_r>
 801640c:	4606      	mov	r6, r0
 801640e:	b360      	cbz	r0, 801646a <__ssputs_r+0xa2>
 8016410:	6921      	ldr	r1, [r4, #16]
 8016412:	464a      	mov	r2, r9
 8016414:	f7ff ff61 	bl	80162da <memcpy>
 8016418:	89a3      	ldrh	r3, [r4, #12]
 801641a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801641e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016422:	81a3      	strh	r3, [r4, #12]
 8016424:	6126      	str	r6, [r4, #16]
 8016426:	6165      	str	r5, [r4, #20]
 8016428:	444e      	add	r6, r9
 801642a:	eba5 0509 	sub.w	r5, r5, r9
 801642e:	6026      	str	r6, [r4, #0]
 8016430:	60a5      	str	r5, [r4, #8]
 8016432:	463e      	mov	r6, r7
 8016434:	42be      	cmp	r6, r7
 8016436:	d900      	bls.n	801643a <__ssputs_r+0x72>
 8016438:	463e      	mov	r6, r7
 801643a:	6820      	ldr	r0, [r4, #0]
 801643c:	4632      	mov	r2, r6
 801643e:	4641      	mov	r1, r8
 8016440:	f000 fb66 	bl	8016b10 <memmove>
 8016444:	68a3      	ldr	r3, [r4, #8]
 8016446:	1b9b      	subs	r3, r3, r6
 8016448:	60a3      	str	r3, [r4, #8]
 801644a:	6823      	ldr	r3, [r4, #0]
 801644c:	4433      	add	r3, r6
 801644e:	6023      	str	r3, [r4, #0]
 8016450:	2000      	movs	r0, #0
 8016452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016456:	462a      	mov	r2, r5
 8016458:	f000 fb7b 	bl	8016b52 <_realloc_r>
 801645c:	4606      	mov	r6, r0
 801645e:	2800      	cmp	r0, #0
 8016460:	d1e0      	bne.n	8016424 <__ssputs_r+0x5c>
 8016462:	6921      	ldr	r1, [r4, #16]
 8016464:	4650      	mov	r0, sl
 8016466:	f7ff ff65 	bl	8016334 <_free_r>
 801646a:	230c      	movs	r3, #12
 801646c:	f8ca 3000 	str.w	r3, [sl]
 8016470:	89a3      	ldrh	r3, [r4, #12]
 8016472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016476:	81a3      	strh	r3, [r4, #12]
 8016478:	f04f 30ff 	mov.w	r0, #4294967295
 801647c:	e7e9      	b.n	8016452 <__ssputs_r+0x8a>
	...

08016480 <_svfiprintf_r>:
 8016480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016484:	4698      	mov	r8, r3
 8016486:	898b      	ldrh	r3, [r1, #12]
 8016488:	061b      	lsls	r3, r3, #24
 801648a:	b09d      	sub	sp, #116	@ 0x74
 801648c:	4607      	mov	r7, r0
 801648e:	460d      	mov	r5, r1
 8016490:	4614      	mov	r4, r2
 8016492:	d510      	bpl.n	80164b6 <_svfiprintf_r+0x36>
 8016494:	690b      	ldr	r3, [r1, #16]
 8016496:	b973      	cbnz	r3, 80164b6 <_svfiprintf_r+0x36>
 8016498:	2140      	movs	r1, #64	@ 0x40
 801649a:	f7ff fc4d 	bl	8015d38 <_malloc_r>
 801649e:	6028      	str	r0, [r5, #0]
 80164a0:	6128      	str	r0, [r5, #16]
 80164a2:	b930      	cbnz	r0, 80164b2 <_svfiprintf_r+0x32>
 80164a4:	230c      	movs	r3, #12
 80164a6:	603b      	str	r3, [r7, #0]
 80164a8:	f04f 30ff 	mov.w	r0, #4294967295
 80164ac:	b01d      	add	sp, #116	@ 0x74
 80164ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164b2:	2340      	movs	r3, #64	@ 0x40
 80164b4:	616b      	str	r3, [r5, #20]
 80164b6:	2300      	movs	r3, #0
 80164b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80164ba:	2320      	movs	r3, #32
 80164bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80164c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80164c4:	2330      	movs	r3, #48	@ 0x30
 80164c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016664 <_svfiprintf_r+0x1e4>
 80164ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80164ce:	f04f 0901 	mov.w	r9, #1
 80164d2:	4623      	mov	r3, r4
 80164d4:	469a      	mov	sl, r3
 80164d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80164da:	b10a      	cbz	r2, 80164e0 <_svfiprintf_r+0x60>
 80164dc:	2a25      	cmp	r2, #37	@ 0x25
 80164de:	d1f9      	bne.n	80164d4 <_svfiprintf_r+0x54>
 80164e0:	ebba 0b04 	subs.w	fp, sl, r4
 80164e4:	d00b      	beq.n	80164fe <_svfiprintf_r+0x7e>
 80164e6:	465b      	mov	r3, fp
 80164e8:	4622      	mov	r2, r4
 80164ea:	4629      	mov	r1, r5
 80164ec:	4638      	mov	r0, r7
 80164ee:	f7ff ff6b 	bl	80163c8 <__ssputs_r>
 80164f2:	3001      	adds	r0, #1
 80164f4:	f000 80a7 	beq.w	8016646 <_svfiprintf_r+0x1c6>
 80164f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80164fa:	445a      	add	r2, fp
 80164fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80164fe:	f89a 3000 	ldrb.w	r3, [sl]
 8016502:	2b00      	cmp	r3, #0
 8016504:	f000 809f 	beq.w	8016646 <_svfiprintf_r+0x1c6>
 8016508:	2300      	movs	r3, #0
 801650a:	f04f 32ff 	mov.w	r2, #4294967295
 801650e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016512:	f10a 0a01 	add.w	sl, sl, #1
 8016516:	9304      	str	r3, [sp, #16]
 8016518:	9307      	str	r3, [sp, #28]
 801651a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801651e:	931a      	str	r3, [sp, #104]	@ 0x68
 8016520:	4654      	mov	r4, sl
 8016522:	2205      	movs	r2, #5
 8016524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016528:	484e      	ldr	r0, [pc, #312]	@ (8016664 <_svfiprintf_r+0x1e4>)
 801652a:	f7e9 fe71 	bl	8000210 <memchr>
 801652e:	9a04      	ldr	r2, [sp, #16]
 8016530:	b9d8      	cbnz	r0, 801656a <_svfiprintf_r+0xea>
 8016532:	06d0      	lsls	r0, r2, #27
 8016534:	bf44      	itt	mi
 8016536:	2320      	movmi	r3, #32
 8016538:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801653c:	0711      	lsls	r1, r2, #28
 801653e:	bf44      	itt	mi
 8016540:	232b      	movmi	r3, #43	@ 0x2b
 8016542:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016546:	f89a 3000 	ldrb.w	r3, [sl]
 801654a:	2b2a      	cmp	r3, #42	@ 0x2a
 801654c:	d015      	beq.n	801657a <_svfiprintf_r+0xfa>
 801654e:	9a07      	ldr	r2, [sp, #28]
 8016550:	4654      	mov	r4, sl
 8016552:	2000      	movs	r0, #0
 8016554:	f04f 0c0a 	mov.w	ip, #10
 8016558:	4621      	mov	r1, r4
 801655a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801655e:	3b30      	subs	r3, #48	@ 0x30
 8016560:	2b09      	cmp	r3, #9
 8016562:	d94b      	bls.n	80165fc <_svfiprintf_r+0x17c>
 8016564:	b1b0      	cbz	r0, 8016594 <_svfiprintf_r+0x114>
 8016566:	9207      	str	r2, [sp, #28]
 8016568:	e014      	b.n	8016594 <_svfiprintf_r+0x114>
 801656a:	eba0 0308 	sub.w	r3, r0, r8
 801656e:	fa09 f303 	lsl.w	r3, r9, r3
 8016572:	4313      	orrs	r3, r2
 8016574:	9304      	str	r3, [sp, #16]
 8016576:	46a2      	mov	sl, r4
 8016578:	e7d2      	b.n	8016520 <_svfiprintf_r+0xa0>
 801657a:	9b03      	ldr	r3, [sp, #12]
 801657c:	1d19      	adds	r1, r3, #4
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	9103      	str	r1, [sp, #12]
 8016582:	2b00      	cmp	r3, #0
 8016584:	bfbb      	ittet	lt
 8016586:	425b      	neglt	r3, r3
 8016588:	f042 0202 	orrlt.w	r2, r2, #2
 801658c:	9307      	strge	r3, [sp, #28]
 801658e:	9307      	strlt	r3, [sp, #28]
 8016590:	bfb8      	it	lt
 8016592:	9204      	strlt	r2, [sp, #16]
 8016594:	7823      	ldrb	r3, [r4, #0]
 8016596:	2b2e      	cmp	r3, #46	@ 0x2e
 8016598:	d10a      	bne.n	80165b0 <_svfiprintf_r+0x130>
 801659a:	7863      	ldrb	r3, [r4, #1]
 801659c:	2b2a      	cmp	r3, #42	@ 0x2a
 801659e:	d132      	bne.n	8016606 <_svfiprintf_r+0x186>
 80165a0:	9b03      	ldr	r3, [sp, #12]
 80165a2:	1d1a      	adds	r2, r3, #4
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	9203      	str	r2, [sp, #12]
 80165a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80165ac:	3402      	adds	r4, #2
 80165ae:	9305      	str	r3, [sp, #20]
 80165b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016674 <_svfiprintf_r+0x1f4>
 80165b4:	7821      	ldrb	r1, [r4, #0]
 80165b6:	2203      	movs	r2, #3
 80165b8:	4650      	mov	r0, sl
 80165ba:	f7e9 fe29 	bl	8000210 <memchr>
 80165be:	b138      	cbz	r0, 80165d0 <_svfiprintf_r+0x150>
 80165c0:	9b04      	ldr	r3, [sp, #16]
 80165c2:	eba0 000a 	sub.w	r0, r0, sl
 80165c6:	2240      	movs	r2, #64	@ 0x40
 80165c8:	4082      	lsls	r2, r0
 80165ca:	4313      	orrs	r3, r2
 80165cc:	3401      	adds	r4, #1
 80165ce:	9304      	str	r3, [sp, #16]
 80165d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80165d4:	4824      	ldr	r0, [pc, #144]	@ (8016668 <_svfiprintf_r+0x1e8>)
 80165d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80165da:	2206      	movs	r2, #6
 80165dc:	f7e9 fe18 	bl	8000210 <memchr>
 80165e0:	2800      	cmp	r0, #0
 80165e2:	d036      	beq.n	8016652 <_svfiprintf_r+0x1d2>
 80165e4:	4b21      	ldr	r3, [pc, #132]	@ (801666c <_svfiprintf_r+0x1ec>)
 80165e6:	bb1b      	cbnz	r3, 8016630 <_svfiprintf_r+0x1b0>
 80165e8:	9b03      	ldr	r3, [sp, #12]
 80165ea:	3307      	adds	r3, #7
 80165ec:	f023 0307 	bic.w	r3, r3, #7
 80165f0:	3308      	adds	r3, #8
 80165f2:	9303      	str	r3, [sp, #12]
 80165f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80165f6:	4433      	add	r3, r6
 80165f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80165fa:	e76a      	b.n	80164d2 <_svfiprintf_r+0x52>
 80165fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8016600:	460c      	mov	r4, r1
 8016602:	2001      	movs	r0, #1
 8016604:	e7a8      	b.n	8016558 <_svfiprintf_r+0xd8>
 8016606:	2300      	movs	r3, #0
 8016608:	3401      	adds	r4, #1
 801660a:	9305      	str	r3, [sp, #20]
 801660c:	4619      	mov	r1, r3
 801660e:	f04f 0c0a 	mov.w	ip, #10
 8016612:	4620      	mov	r0, r4
 8016614:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016618:	3a30      	subs	r2, #48	@ 0x30
 801661a:	2a09      	cmp	r2, #9
 801661c:	d903      	bls.n	8016626 <_svfiprintf_r+0x1a6>
 801661e:	2b00      	cmp	r3, #0
 8016620:	d0c6      	beq.n	80165b0 <_svfiprintf_r+0x130>
 8016622:	9105      	str	r1, [sp, #20]
 8016624:	e7c4      	b.n	80165b0 <_svfiprintf_r+0x130>
 8016626:	fb0c 2101 	mla	r1, ip, r1, r2
 801662a:	4604      	mov	r4, r0
 801662c:	2301      	movs	r3, #1
 801662e:	e7f0      	b.n	8016612 <_svfiprintf_r+0x192>
 8016630:	ab03      	add	r3, sp, #12
 8016632:	9300      	str	r3, [sp, #0]
 8016634:	462a      	mov	r2, r5
 8016636:	4b0e      	ldr	r3, [pc, #56]	@ (8016670 <_svfiprintf_r+0x1f0>)
 8016638:	a904      	add	r1, sp, #16
 801663a:	4638      	mov	r0, r7
 801663c:	f3af 8000 	nop.w
 8016640:	1c42      	adds	r2, r0, #1
 8016642:	4606      	mov	r6, r0
 8016644:	d1d6      	bne.n	80165f4 <_svfiprintf_r+0x174>
 8016646:	89ab      	ldrh	r3, [r5, #12]
 8016648:	065b      	lsls	r3, r3, #25
 801664a:	f53f af2d 	bmi.w	80164a8 <_svfiprintf_r+0x28>
 801664e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016650:	e72c      	b.n	80164ac <_svfiprintf_r+0x2c>
 8016652:	ab03      	add	r3, sp, #12
 8016654:	9300      	str	r3, [sp, #0]
 8016656:	462a      	mov	r2, r5
 8016658:	4b05      	ldr	r3, [pc, #20]	@ (8016670 <_svfiprintf_r+0x1f0>)
 801665a:	a904      	add	r1, sp, #16
 801665c:	4638      	mov	r0, r7
 801665e:	f000 f879 	bl	8016754 <_printf_i>
 8016662:	e7ed      	b.n	8016640 <_svfiprintf_r+0x1c0>
 8016664:	080257a3 	.word	0x080257a3
 8016668:	080257ad 	.word	0x080257ad
 801666c:	00000000 	.word	0x00000000
 8016670:	080163c9 	.word	0x080163c9
 8016674:	080257a9 	.word	0x080257a9

08016678 <_printf_common>:
 8016678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801667c:	4616      	mov	r6, r2
 801667e:	4698      	mov	r8, r3
 8016680:	688a      	ldr	r2, [r1, #8]
 8016682:	690b      	ldr	r3, [r1, #16]
 8016684:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016688:	4293      	cmp	r3, r2
 801668a:	bfb8      	it	lt
 801668c:	4613      	movlt	r3, r2
 801668e:	6033      	str	r3, [r6, #0]
 8016690:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016694:	4607      	mov	r7, r0
 8016696:	460c      	mov	r4, r1
 8016698:	b10a      	cbz	r2, 801669e <_printf_common+0x26>
 801669a:	3301      	adds	r3, #1
 801669c:	6033      	str	r3, [r6, #0]
 801669e:	6823      	ldr	r3, [r4, #0]
 80166a0:	0699      	lsls	r1, r3, #26
 80166a2:	bf42      	ittt	mi
 80166a4:	6833      	ldrmi	r3, [r6, #0]
 80166a6:	3302      	addmi	r3, #2
 80166a8:	6033      	strmi	r3, [r6, #0]
 80166aa:	6825      	ldr	r5, [r4, #0]
 80166ac:	f015 0506 	ands.w	r5, r5, #6
 80166b0:	d106      	bne.n	80166c0 <_printf_common+0x48>
 80166b2:	f104 0a19 	add.w	sl, r4, #25
 80166b6:	68e3      	ldr	r3, [r4, #12]
 80166b8:	6832      	ldr	r2, [r6, #0]
 80166ba:	1a9b      	subs	r3, r3, r2
 80166bc:	42ab      	cmp	r3, r5
 80166be:	dc26      	bgt.n	801670e <_printf_common+0x96>
 80166c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80166c4:	6822      	ldr	r2, [r4, #0]
 80166c6:	3b00      	subs	r3, #0
 80166c8:	bf18      	it	ne
 80166ca:	2301      	movne	r3, #1
 80166cc:	0692      	lsls	r2, r2, #26
 80166ce:	d42b      	bmi.n	8016728 <_printf_common+0xb0>
 80166d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80166d4:	4641      	mov	r1, r8
 80166d6:	4638      	mov	r0, r7
 80166d8:	47c8      	blx	r9
 80166da:	3001      	adds	r0, #1
 80166dc:	d01e      	beq.n	801671c <_printf_common+0xa4>
 80166de:	6823      	ldr	r3, [r4, #0]
 80166e0:	6922      	ldr	r2, [r4, #16]
 80166e2:	f003 0306 	and.w	r3, r3, #6
 80166e6:	2b04      	cmp	r3, #4
 80166e8:	bf02      	ittt	eq
 80166ea:	68e5      	ldreq	r5, [r4, #12]
 80166ec:	6833      	ldreq	r3, [r6, #0]
 80166ee:	1aed      	subeq	r5, r5, r3
 80166f0:	68a3      	ldr	r3, [r4, #8]
 80166f2:	bf0c      	ite	eq
 80166f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80166f8:	2500      	movne	r5, #0
 80166fa:	4293      	cmp	r3, r2
 80166fc:	bfc4      	itt	gt
 80166fe:	1a9b      	subgt	r3, r3, r2
 8016700:	18ed      	addgt	r5, r5, r3
 8016702:	2600      	movs	r6, #0
 8016704:	341a      	adds	r4, #26
 8016706:	42b5      	cmp	r5, r6
 8016708:	d11a      	bne.n	8016740 <_printf_common+0xc8>
 801670a:	2000      	movs	r0, #0
 801670c:	e008      	b.n	8016720 <_printf_common+0xa8>
 801670e:	2301      	movs	r3, #1
 8016710:	4652      	mov	r2, sl
 8016712:	4641      	mov	r1, r8
 8016714:	4638      	mov	r0, r7
 8016716:	47c8      	blx	r9
 8016718:	3001      	adds	r0, #1
 801671a:	d103      	bne.n	8016724 <_printf_common+0xac>
 801671c:	f04f 30ff 	mov.w	r0, #4294967295
 8016720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016724:	3501      	adds	r5, #1
 8016726:	e7c6      	b.n	80166b6 <_printf_common+0x3e>
 8016728:	18e1      	adds	r1, r4, r3
 801672a:	1c5a      	adds	r2, r3, #1
 801672c:	2030      	movs	r0, #48	@ 0x30
 801672e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016732:	4422      	add	r2, r4
 8016734:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016738:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801673c:	3302      	adds	r3, #2
 801673e:	e7c7      	b.n	80166d0 <_printf_common+0x58>
 8016740:	2301      	movs	r3, #1
 8016742:	4622      	mov	r2, r4
 8016744:	4641      	mov	r1, r8
 8016746:	4638      	mov	r0, r7
 8016748:	47c8      	blx	r9
 801674a:	3001      	adds	r0, #1
 801674c:	d0e6      	beq.n	801671c <_printf_common+0xa4>
 801674e:	3601      	adds	r6, #1
 8016750:	e7d9      	b.n	8016706 <_printf_common+0x8e>
	...

08016754 <_printf_i>:
 8016754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016758:	7e0f      	ldrb	r7, [r1, #24]
 801675a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801675c:	2f78      	cmp	r7, #120	@ 0x78
 801675e:	4691      	mov	r9, r2
 8016760:	4680      	mov	r8, r0
 8016762:	460c      	mov	r4, r1
 8016764:	469a      	mov	sl, r3
 8016766:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801676a:	d807      	bhi.n	801677c <_printf_i+0x28>
 801676c:	2f62      	cmp	r7, #98	@ 0x62
 801676e:	d80a      	bhi.n	8016786 <_printf_i+0x32>
 8016770:	2f00      	cmp	r7, #0
 8016772:	f000 80d2 	beq.w	801691a <_printf_i+0x1c6>
 8016776:	2f58      	cmp	r7, #88	@ 0x58
 8016778:	f000 80b9 	beq.w	80168ee <_printf_i+0x19a>
 801677c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016780:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016784:	e03a      	b.n	80167fc <_printf_i+0xa8>
 8016786:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801678a:	2b15      	cmp	r3, #21
 801678c:	d8f6      	bhi.n	801677c <_printf_i+0x28>
 801678e:	a101      	add	r1, pc, #4	@ (adr r1, 8016794 <_printf_i+0x40>)
 8016790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016794:	080167ed 	.word	0x080167ed
 8016798:	08016801 	.word	0x08016801
 801679c:	0801677d 	.word	0x0801677d
 80167a0:	0801677d 	.word	0x0801677d
 80167a4:	0801677d 	.word	0x0801677d
 80167a8:	0801677d 	.word	0x0801677d
 80167ac:	08016801 	.word	0x08016801
 80167b0:	0801677d 	.word	0x0801677d
 80167b4:	0801677d 	.word	0x0801677d
 80167b8:	0801677d 	.word	0x0801677d
 80167bc:	0801677d 	.word	0x0801677d
 80167c0:	08016901 	.word	0x08016901
 80167c4:	0801682b 	.word	0x0801682b
 80167c8:	080168bb 	.word	0x080168bb
 80167cc:	0801677d 	.word	0x0801677d
 80167d0:	0801677d 	.word	0x0801677d
 80167d4:	08016923 	.word	0x08016923
 80167d8:	0801677d 	.word	0x0801677d
 80167dc:	0801682b 	.word	0x0801682b
 80167e0:	0801677d 	.word	0x0801677d
 80167e4:	0801677d 	.word	0x0801677d
 80167e8:	080168c3 	.word	0x080168c3
 80167ec:	6833      	ldr	r3, [r6, #0]
 80167ee:	1d1a      	adds	r2, r3, #4
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	6032      	str	r2, [r6, #0]
 80167f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80167f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80167fc:	2301      	movs	r3, #1
 80167fe:	e09d      	b.n	801693c <_printf_i+0x1e8>
 8016800:	6833      	ldr	r3, [r6, #0]
 8016802:	6820      	ldr	r0, [r4, #0]
 8016804:	1d19      	adds	r1, r3, #4
 8016806:	6031      	str	r1, [r6, #0]
 8016808:	0606      	lsls	r6, r0, #24
 801680a:	d501      	bpl.n	8016810 <_printf_i+0xbc>
 801680c:	681d      	ldr	r5, [r3, #0]
 801680e:	e003      	b.n	8016818 <_printf_i+0xc4>
 8016810:	0645      	lsls	r5, r0, #25
 8016812:	d5fb      	bpl.n	801680c <_printf_i+0xb8>
 8016814:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016818:	2d00      	cmp	r5, #0
 801681a:	da03      	bge.n	8016824 <_printf_i+0xd0>
 801681c:	232d      	movs	r3, #45	@ 0x2d
 801681e:	426d      	negs	r5, r5
 8016820:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016824:	4859      	ldr	r0, [pc, #356]	@ (801698c <_printf_i+0x238>)
 8016826:	230a      	movs	r3, #10
 8016828:	e011      	b.n	801684e <_printf_i+0xfa>
 801682a:	6821      	ldr	r1, [r4, #0]
 801682c:	6833      	ldr	r3, [r6, #0]
 801682e:	0608      	lsls	r0, r1, #24
 8016830:	f853 5b04 	ldr.w	r5, [r3], #4
 8016834:	d402      	bmi.n	801683c <_printf_i+0xe8>
 8016836:	0649      	lsls	r1, r1, #25
 8016838:	bf48      	it	mi
 801683a:	b2ad      	uxthmi	r5, r5
 801683c:	2f6f      	cmp	r7, #111	@ 0x6f
 801683e:	4853      	ldr	r0, [pc, #332]	@ (801698c <_printf_i+0x238>)
 8016840:	6033      	str	r3, [r6, #0]
 8016842:	bf14      	ite	ne
 8016844:	230a      	movne	r3, #10
 8016846:	2308      	moveq	r3, #8
 8016848:	2100      	movs	r1, #0
 801684a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801684e:	6866      	ldr	r6, [r4, #4]
 8016850:	60a6      	str	r6, [r4, #8]
 8016852:	2e00      	cmp	r6, #0
 8016854:	bfa2      	ittt	ge
 8016856:	6821      	ldrge	r1, [r4, #0]
 8016858:	f021 0104 	bicge.w	r1, r1, #4
 801685c:	6021      	strge	r1, [r4, #0]
 801685e:	b90d      	cbnz	r5, 8016864 <_printf_i+0x110>
 8016860:	2e00      	cmp	r6, #0
 8016862:	d04b      	beq.n	80168fc <_printf_i+0x1a8>
 8016864:	4616      	mov	r6, r2
 8016866:	fbb5 f1f3 	udiv	r1, r5, r3
 801686a:	fb03 5711 	mls	r7, r3, r1, r5
 801686e:	5dc7      	ldrb	r7, [r0, r7]
 8016870:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016874:	462f      	mov	r7, r5
 8016876:	42bb      	cmp	r3, r7
 8016878:	460d      	mov	r5, r1
 801687a:	d9f4      	bls.n	8016866 <_printf_i+0x112>
 801687c:	2b08      	cmp	r3, #8
 801687e:	d10b      	bne.n	8016898 <_printf_i+0x144>
 8016880:	6823      	ldr	r3, [r4, #0]
 8016882:	07df      	lsls	r7, r3, #31
 8016884:	d508      	bpl.n	8016898 <_printf_i+0x144>
 8016886:	6923      	ldr	r3, [r4, #16]
 8016888:	6861      	ldr	r1, [r4, #4]
 801688a:	4299      	cmp	r1, r3
 801688c:	bfde      	ittt	le
 801688e:	2330      	movle	r3, #48	@ 0x30
 8016890:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016894:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016898:	1b92      	subs	r2, r2, r6
 801689a:	6122      	str	r2, [r4, #16]
 801689c:	f8cd a000 	str.w	sl, [sp]
 80168a0:	464b      	mov	r3, r9
 80168a2:	aa03      	add	r2, sp, #12
 80168a4:	4621      	mov	r1, r4
 80168a6:	4640      	mov	r0, r8
 80168a8:	f7ff fee6 	bl	8016678 <_printf_common>
 80168ac:	3001      	adds	r0, #1
 80168ae:	d14a      	bne.n	8016946 <_printf_i+0x1f2>
 80168b0:	f04f 30ff 	mov.w	r0, #4294967295
 80168b4:	b004      	add	sp, #16
 80168b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168ba:	6823      	ldr	r3, [r4, #0]
 80168bc:	f043 0320 	orr.w	r3, r3, #32
 80168c0:	6023      	str	r3, [r4, #0]
 80168c2:	4833      	ldr	r0, [pc, #204]	@ (8016990 <_printf_i+0x23c>)
 80168c4:	2778      	movs	r7, #120	@ 0x78
 80168c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80168ca:	6823      	ldr	r3, [r4, #0]
 80168cc:	6831      	ldr	r1, [r6, #0]
 80168ce:	061f      	lsls	r7, r3, #24
 80168d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80168d4:	d402      	bmi.n	80168dc <_printf_i+0x188>
 80168d6:	065f      	lsls	r7, r3, #25
 80168d8:	bf48      	it	mi
 80168da:	b2ad      	uxthmi	r5, r5
 80168dc:	6031      	str	r1, [r6, #0]
 80168de:	07d9      	lsls	r1, r3, #31
 80168e0:	bf44      	itt	mi
 80168e2:	f043 0320 	orrmi.w	r3, r3, #32
 80168e6:	6023      	strmi	r3, [r4, #0]
 80168e8:	b11d      	cbz	r5, 80168f2 <_printf_i+0x19e>
 80168ea:	2310      	movs	r3, #16
 80168ec:	e7ac      	b.n	8016848 <_printf_i+0xf4>
 80168ee:	4827      	ldr	r0, [pc, #156]	@ (801698c <_printf_i+0x238>)
 80168f0:	e7e9      	b.n	80168c6 <_printf_i+0x172>
 80168f2:	6823      	ldr	r3, [r4, #0]
 80168f4:	f023 0320 	bic.w	r3, r3, #32
 80168f8:	6023      	str	r3, [r4, #0]
 80168fa:	e7f6      	b.n	80168ea <_printf_i+0x196>
 80168fc:	4616      	mov	r6, r2
 80168fe:	e7bd      	b.n	801687c <_printf_i+0x128>
 8016900:	6833      	ldr	r3, [r6, #0]
 8016902:	6825      	ldr	r5, [r4, #0]
 8016904:	6961      	ldr	r1, [r4, #20]
 8016906:	1d18      	adds	r0, r3, #4
 8016908:	6030      	str	r0, [r6, #0]
 801690a:	062e      	lsls	r6, r5, #24
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	d501      	bpl.n	8016914 <_printf_i+0x1c0>
 8016910:	6019      	str	r1, [r3, #0]
 8016912:	e002      	b.n	801691a <_printf_i+0x1c6>
 8016914:	0668      	lsls	r0, r5, #25
 8016916:	d5fb      	bpl.n	8016910 <_printf_i+0x1bc>
 8016918:	8019      	strh	r1, [r3, #0]
 801691a:	2300      	movs	r3, #0
 801691c:	6123      	str	r3, [r4, #16]
 801691e:	4616      	mov	r6, r2
 8016920:	e7bc      	b.n	801689c <_printf_i+0x148>
 8016922:	6833      	ldr	r3, [r6, #0]
 8016924:	1d1a      	adds	r2, r3, #4
 8016926:	6032      	str	r2, [r6, #0]
 8016928:	681e      	ldr	r6, [r3, #0]
 801692a:	6862      	ldr	r2, [r4, #4]
 801692c:	2100      	movs	r1, #0
 801692e:	4630      	mov	r0, r6
 8016930:	f7e9 fc6e 	bl	8000210 <memchr>
 8016934:	b108      	cbz	r0, 801693a <_printf_i+0x1e6>
 8016936:	1b80      	subs	r0, r0, r6
 8016938:	6060      	str	r0, [r4, #4]
 801693a:	6863      	ldr	r3, [r4, #4]
 801693c:	6123      	str	r3, [r4, #16]
 801693e:	2300      	movs	r3, #0
 8016940:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016944:	e7aa      	b.n	801689c <_printf_i+0x148>
 8016946:	6923      	ldr	r3, [r4, #16]
 8016948:	4632      	mov	r2, r6
 801694a:	4649      	mov	r1, r9
 801694c:	4640      	mov	r0, r8
 801694e:	47d0      	blx	sl
 8016950:	3001      	adds	r0, #1
 8016952:	d0ad      	beq.n	80168b0 <_printf_i+0x15c>
 8016954:	6823      	ldr	r3, [r4, #0]
 8016956:	079b      	lsls	r3, r3, #30
 8016958:	d413      	bmi.n	8016982 <_printf_i+0x22e>
 801695a:	68e0      	ldr	r0, [r4, #12]
 801695c:	9b03      	ldr	r3, [sp, #12]
 801695e:	4298      	cmp	r0, r3
 8016960:	bfb8      	it	lt
 8016962:	4618      	movlt	r0, r3
 8016964:	e7a6      	b.n	80168b4 <_printf_i+0x160>
 8016966:	2301      	movs	r3, #1
 8016968:	4632      	mov	r2, r6
 801696a:	4649      	mov	r1, r9
 801696c:	4640      	mov	r0, r8
 801696e:	47d0      	blx	sl
 8016970:	3001      	adds	r0, #1
 8016972:	d09d      	beq.n	80168b0 <_printf_i+0x15c>
 8016974:	3501      	adds	r5, #1
 8016976:	68e3      	ldr	r3, [r4, #12]
 8016978:	9903      	ldr	r1, [sp, #12]
 801697a:	1a5b      	subs	r3, r3, r1
 801697c:	42ab      	cmp	r3, r5
 801697e:	dcf2      	bgt.n	8016966 <_printf_i+0x212>
 8016980:	e7eb      	b.n	801695a <_printf_i+0x206>
 8016982:	2500      	movs	r5, #0
 8016984:	f104 0619 	add.w	r6, r4, #25
 8016988:	e7f5      	b.n	8016976 <_printf_i+0x222>
 801698a:	bf00      	nop
 801698c:	080257b4 	.word	0x080257b4
 8016990:	080257c5 	.word	0x080257c5

08016994 <__sflush_r>:
 8016994:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801699c:	0716      	lsls	r6, r2, #28
 801699e:	4605      	mov	r5, r0
 80169a0:	460c      	mov	r4, r1
 80169a2:	d454      	bmi.n	8016a4e <__sflush_r+0xba>
 80169a4:	684b      	ldr	r3, [r1, #4]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	dc02      	bgt.n	80169b0 <__sflush_r+0x1c>
 80169aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	dd48      	ble.n	8016a42 <__sflush_r+0xae>
 80169b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80169b2:	2e00      	cmp	r6, #0
 80169b4:	d045      	beq.n	8016a42 <__sflush_r+0xae>
 80169b6:	2300      	movs	r3, #0
 80169b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80169bc:	682f      	ldr	r7, [r5, #0]
 80169be:	6a21      	ldr	r1, [r4, #32]
 80169c0:	602b      	str	r3, [r5, #0]
 80169c2:	d030      	beq.n	8016a26 <__sflush_r+0x92>
 80169c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80169c6:	89a3      	ldrh	r3, [r4, #12]
 80169c8:	0759      	lsls	r1, r3, #29
 80169ca:	d505      	bpl.n	80169d8 <__sflush_r+0x44>
 80169cc:	6863      	ldr	r3, [r4, #4]
 80169ce:	1ad2      	subs	r2, r2, r3
 80169d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80169d2:	b10b      	cbz	r3, 80169d8 <__sflush_r+0x44>
 80169d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80169d6:	1ad2      	subs	r2, r2, r3
 80169d8:	2300      	movs	r3, #0
 80169da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80169dc:	6a21      	ldr	r1, [r4, #32]
 80169de:	4628      	mov	r0, r5
 80169e0:	47b0      	blx	r6
 80169e2:	1c43      	adds	r3, r0, #1
 80169e4:	89a3      	ldrh	r3, [r4, #12]
 80169e6:	d106      	bne.n	80169f6 <__sflush_r+0x62>
 80169e8:	6829      	ldr	r1, [r5, #0]
 80169ea:	291d      	cmp	r1, #29
 80169ec:	d82b      	bhi.n	8016a46 <__sflush_r+0xb2>
 80169ee:	4a2a      	ldr	r2, [pc, #168]	@ (8016a98 <__sflush_r+0x104>)
 80169f0:	410a      	asrs	r2, r1
 80169f2:	07d6      	lsls	r6, r2, #31
 80169f4:	d427      	bmi.n	8016a46 <__sflush_r+0xb2>
 80169f6:	2200      	movs	r2, #0
 80169f8:	6062      	str	r2, [r4, #4]
 80169fa:	04d9      	lsls	r1, r3, #19
 80169fc:	6922      	ldr	r2, [r4, #16]
 80169fe:	6022      	str	r2, [r4, #0]
 8016a00:	d504      	bpl.n	8016a0c <__sflush_r+0x78>
 8016a02:	1c42      	adds	r2, r0, #1
 8016a04:	d101      	bne.n	8016a0a <__sflush_r+0x76>
 8016a06:	682b      	ldr	r3, [r5, #0]
 8016a08:	b903      	cbnz	r3, 8016a0c <__sflush_r+0x78>
 8016a0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8016a0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016a0e:	602f      	str	r7, [r5, #0]
 8016a10:	b1b9      	cbz	r1, 8016a42 <__sflush_r+0xae>
 8016a12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016a16:	4299      	cmp	r1, r3
 8016a18:	d002      	beq.n	8016a20 <__sflush_r+0x8c>
 8016a1a:	4628      	mov	r0, r5
 8016a1c:	f7ff fc8a 	bl	8016334 <_free_r>
 8016a20:	2300      	movs	r3, #0
 8016a22:	6363      	str	r3, [r4, #52]	@ 0x34
 8016a24:	e00d      	b.n	8016a42 <__sflush_r+0xae>
 8016a26:	2301      	movs	r3, #1
 8016a28:	4628      	mov	r0, r5
 8016a2a:	47b0      	blx	r6
 8016a2c:	4602      	mov	r2, r0
 8016a2e:	1c50      	adds	r0, r2, #1
 8016a30:	d1c9      	bne.n	80169c6 <__sflush_r+0x32>
 8016a32:	682b      	ldr	r3, [r5, #0]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d0c6      	beq.n	80169c6 <__sflush_r+0x32>
 8016a38:	2b1d      	cmp	r3, #29
 8016a3a:	d001      	beq.n	8016a40 <__sflush_r+0xac>
 8016a3c:	2b16      	cmp	r3, #22
 8016a3e:	d11e      	bne.n	8016a7e <__sflush_r+0xea>
 8016a40:	602f      	str	r7, [r5, #0]
 8016a42:	2000      	movs	r0, #0
 8016a44:	e022      	b.n	8016a8c <__sflush_r+0xf8>
 8016a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016a4a:	b21b      	sxth	r3, r3
 8016a4c:	e01b      	b.n	8016a86 <__sflush_r+0xf2>
 8016a4e:	690f      	ldr	r7, [r1, #16]
 8016a50:	2f00      	cmp	r7, #0
 8016a52:	d0f6      	beq.n	8016a42 <__sflush_r+0xae>
 8016a54:	0793      	lsls	r3, r2, #30
 8016a56:	680e      	ldr	r6, [r1, #0]
 8016a58:	bf08      	it	eq
 8016a5a:	694b      	ldreq	r3, [r1, #20]
 8016a5c:	600f      	str	r7, [r1, #0]
 8016a5e:	bf18      	it	ne
 8016a60:	2300      	movne	r3, #0
 8016a62:	eba6 0807 	sub.w	r8, r6, r7
 8016a66:	608b      	str	r3, [r1, #8]
 8016a68:	f1b8 0f00 	cmp.w	r8, #0
 8016a6c:	dde9      	ble.n	8016a42 <__sflush_r+0xae>
 8016a6e:	6a21      	ldr	r1, [r4, #32]
 8016a70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016a72:	4643      	mov	r3, r8
 8016a74:	463a      	mov	r2, r7
 8016a76:	4628      	mov	r0, r5
 8016a78:	47b0      	blx	r6
 8016a7a:	2800      	cmp	r0, #0
 8016a7c:	dc08      	bgt.n	8016a90 <__sflush_r+0xfc>
 8016a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016a86:	81a3      	strh	r3, [r4, #12]
 8016a88:	f04f 30ff 	mov.w	r0, #4294967295
 8016a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a90:	4407      	add	r7, r0
 8016a92:	eba8 0800 	sub.w	r8, r8, r0
 8016a96:	e7e7      	b.n	8016a68 <__sflush_r+0xd4>
 8016a98:	dfbffffe 	.word	0xdfbffffe

08016a9c <_fflush_r>:
 8016a9c:	b538      	push	{r3, r4, r5, lr}
 8016a9e:	690b      	ldr	r3, [r1, #16]
 8016aa0:	4605      	mov	r5, r0
 8016aa2:	460c      	mov	r4, r1
 8016aa4:	b913      	cbnz	r3, 8016aac <_fflush_r+0x10>
 8016aa6:	2500      	movs	r5, #0
 8016aa8:	4628      	mov	r0, r5
 8016aaa:	bd38      	pop	{r3, r4, r5, pc}
 8016aac:	b118      	cbz	r0, 8016ab6 <_fflush_r+0x1a>
 8016aae:	6a03      	ldr	r3, [r0, #32]
 8016ab0:	b90b      	cbnz	r3, 8016ab6 <_fflush_r+0x1a>
 8016ab2:	f7ff fa97 	bl	8015fe4 <__sinit>
 8016ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d0f3      	beq.n	8016aa6 <_fflush_r+0xa>
 8016abe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016ac0:	07d0      	lsls	r0, r2, #31
 8016ac2:	d404      	bmi.n	8016ace <_fflush_r+0x32>
 8016ac4:	0599      	lsls	r1, r3, #22
 8016ac6:	d402      	bmi.n	8016ace <_fflush_r+0x32>
 8016ac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016aca:	f7ff fc04 	bl	80162d6 <__retarget_lock_acquire_recursive>
 8016ace:	4628      	mov	r0, r5
 8016ad0:	4621      	mov	r1, r4
 8016ad2:	f7ff ff5f 	bl	8016994 <__sflush_r>
 8016ad6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016ad8:	07da      	lsls	r2, r3, #31
 8016ada:	4605      	mov	r5, r0
 8016adc:	d4e4      	bmi.n	8016aa8 <_fflush_r+0xc>
 8016ade:	89a3      	ldrh	r3, [r4, #12]
 8016ae0:	059b      	lsls	r3, r3, #22
 8016ae2:	d4e1      	bmi.n	8016aa8 <_fflush_r+0xc>
 8016ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016ae6:	f7ff fbf7 	bl	80162d8 <__retarget_lock_release_recursive>
 8016aea:	e7dd      	b.n	8016aa8 <_fflush_r+0xc>

08016aec <fiprintf>:
 8016aec:	b40e      	push	{r1, r2, r3}
 8016aee:	b503      	push	{r0, r1, lr}
 8016af0:	4601      	mov	r1, r0
 8016af2:	ab03      	add	r3, sp, #12
 8016af4:	4805      	ldr	r0, [pc, #20]	@ (8016b0c <fiprintf+0x20>)
 8016af6:	f853 2b04 	ldr.w	r2, [r3], #4
 8016afa:	6800      	ldr	r0, [r0, #0]
 8016afc:	9301      	str	r3, [sp, #4]
 8016afe:	f000 f87f 	bl	8016c00 <_vfiprintf_r>
 8016b02:	b002      	add	sp, #8
 8016b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8016b08:	b003      	add	sp, #12
 8016b0a:	4770      	bx	lr
 8016b0c:	200000ac 	.word	0x200000ac

08016b10 <memmove>:
 8016b10:	4288      	cmp	r0, r1
 8016b12:	b510      	push	{r4, lr}
 8016b14:	eb01 0402 	add.w	r4, r1, r2
 8016b18:	d902      	bls.n	8016b20 <memmove+0x10>
 8016b1a:	4284      	cmp	r4, r0
 8016b1c:	4623      	mov	r3, r4
 8016b1e:	d807      	bhi.n	8016b30 <memmove+0x20>
 8016b20:	1e43      	subs	r3, r0, #1
 8016b22:	42a1      	cmp	r1, r4
 8016b24:	d008      	beq.n	8016b38 <memmove+0x28>
 8016b26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016b2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016b2e:	e7f8      	b.n	8016b22 <memmove+0x12>
 8016b30:	4402      	add	r2, r0
 8016b32:	4601      	mov	r1, r0
 8016b34:	428a      	cmp	r2, r1
 8016b36:	d100      	bne.n	8016b3a <memmove+0x2a>
 8016b38:	bd10      	pop	{r4, pc}
 8016b3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016b3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016b42:	e7f7      	b.n	8016b34 <memmove+0x24>

08016b44 <abort>:
 8016b44:	b508      	push	{r3, lr}
 8016b46:	2006      	movs	r0, #6
 8016b48:	f000 fa2e 	bl	8016fa8 <raise>
 8016b4c:	2001      	movs	r0, #1
 8016b4e:	f7f2 f891 	bl	8008c74 <_exit>

08016b52 <_realloc_r>:
 8016b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b56:	4680      	mov	r8, r0
 8016b58:	4615      	mov	r5, r2
 8016b5a:	460c      	mov	r4, r1
 8016b5c:	b921      	cbnz	r1, 8016b68 <_realloc_r+0x16>
 8016b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b62:	4611      	mov	r1, r2
 8016b64:	f7ff b8e8 	b.w	8015d38 <_malloc_r>
 8016b68:	b92a      	cbnz	r2, 8016b76 <_realloc_r+0x24>
 8016b6a:	f7ff fbe3 	bl	8016334 <_free_r>
 8016b6e:	2400      	movs	r4, #0
 8016b70:	4620      	mov	r0, r4
 8016b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b76:	f000 fa33 	bl	8016fe0 <_malloc_usable_size_r>
 8016b7a:	4285      	cmp	r5, r0
 8016b7c:	4606      	mov	r6, r0
 8016b7e:	d802      	bhi.n	8016b86 <_realloc_r+0x34>
 8016b80:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016b84:	d8f4      	bhi.n	8016b70 <_realloc_r+0x1e>
 8016b86:	4629      	mov	r1, r5
 8016b88:	4640      	mov	r0, r8
 8016b8a:	f7ff f8d5 	bl	8015d38 <_malloc_r>
 8016b8e:	4607      	mov	r7, r0
 8016b90:	2800      	cmp	r0, #0
 8016b92:	d0ec      	beq.n	8016b6e <_realloc_r+0x1c>
 8016b94:	42b5      	cmp	r5, r6
 8016b96:	462a      	mov	r2, r5
 8016b98:	4621      	mov	r1, r4
 8016b9a:	bf28      	it	cs
 8016b9c:	4632      	movcs	r2, r6
 8016b9e:	f7ff fb9c 	bl	80162da <memcpy>
 8016ba2:	4621      	mov	r1, r4
 8016ba4:	4640      	mov	r0, r8
 8016ba6:	f7ff fbc5 	bl	8016334 <_free_r>
 8016baa:	463c      	mov	r4, r7
 8016bac:	e7e0      	b.n	8016b70 <_realloc_r+0x1e>

08016bae <__sfputc_r>:
 8016bae:	6893      	ldr	r3, [r2, #8]
 8016bb0:	3b01      	subs	r3, #1
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	b410      	push	{r4}
 8016bb6:	6093      	str	r3, [r2, #8]
 8016bb8:	da08      	bge.n	8016bcc <__sfputc_r+0x1e>
 8016bba:	6994      	ldr	r4, [r2, #24]
 8016bbc:	42a3      	cmp	r3, r4
 8016bbe:	db01      	blt.n	8016bc4 <__sfputc_r+0x16>
 8016bc0:	290a      	cmp	r1, #10
 8016bc2:	d103      	bne.n	8016bcc <__sfputc_r+0x1e>
 8016bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016bc8:	f000 b932 	b.w	8016e30 <__swbuf_r>
 8016bcc:	6813      	ldr	r3, [r2, #0]
 8016bce:	1c58      	adds	r0, r3, #1
 8016bd0:	6010      	str	r0, [r2, #0]
 8016bd2:	7019      	strb	r1, [r3, #0]
 8016bd4:	4608      	mov	r0, r1
 8016bd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016bda:	4770      	bx	lr

08016bdc <__sfputs_r>:
 8016bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bde:	4606      	mov	r6, r0
 8016be0:	460f      	mov	r7, r1
 8016be2:	4614      	mov	r4, r2
 8016be4:	18d5      	adds	r5, r2, r3
 8016be6:	42ac      	cmp	r4, r5
 8016be8:	d101      	bne.n	8016bee <__sfputs_r+0x12>
 8016bea:	2000      	movs	r0, #0
 8016bec:	e007      	b.n	8016bfe <__sfputs_r+0x22>
 8016bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016bf2:	463a      	mov	r2, r7
 8016bf4:	4630      	mov	r0, r6
 8016bf6:	f7ff ffda 	bl	8016bae <__sfputc_r>
 8016bfa:	1c43      	adds	r3, r0, #1
 8016bfc:	d1f3      	bne.n	8016be6 <__sfputs_r+0xa>
 8016bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016c00 <_vfiprintf_r>:
 8016c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c04:	460d      	mov	r5, r1
 8016c06:	b09d      	sub	sp, #116	@ 0x74
 8016c08:	4614      	mov	r4, r2
 8016c0a:	4698      	mov	r8, r3
 8016c0c:	4606      	mov	r6, r0
 8016c0e:	b118      	cbz	r0, 8016c18 <_vfiprintf_r+0x18>
 8016c10:	6a03      	ldr	r3, [r0, #32]
 8016c12:	b90b      	cbnz	r3, 8016c18 <_vfiprintf_r+0x18>
 8016c14:	f7ff f9e6 	bl	8015fe4 <__sinit>
 8016c18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016c1a:	07d9      	lsls	r1, r3, #31
 8016c1c:	d405      	bmi.n	8016c2a <_vfiprintf_r+0x2a>
 8016c1e:	89ab      	ldrh	r3, [r5, #12]
 8016c20:	059a      	lsls	r2, r3, #22
 8016c22:	d402      	bmi.n	8016c2a <_vfiprintf_r+0x2a>
 8016c24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016c26:	f7ff fb56 	bl	80162d6 <__retarget_lock_acquire_recursive>
 8016c2a:	89ab      	ldrh	r3, [r5, #12]
 8016c2c:	071b      	lsls	r3, r3, #28
 8016c2e:	d501      	bpl.n	8016c34 <_vfiprintf_r+0x34>
 8016c30:	692b      	ldr	r3, [r5, #16]
 8016c32:	b99b      	cbnz	r3, 8016c5c <_vfiprintf_r+0x5c>
 8016c34:	4629      	mov	r1, r5
 8016c36:	4630      	mov	r0, r6
 8016c38:	f000 f938 	bl	8016eac <__swsetup_r>
 8016c3c:	b170      	cbz	r0, 8016c5c <_vfiprintf_r+0x5c>
 8016c3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016c40:	07dc      	lsls	r4, r3, #31
 8016c42:	d504      	bpl.n	8016c4e <_vfiprintf_r+0x4e>
 8016c44:	f04f 30ff 	mov.w	r0, #4294967295
 8016c48:	b01d      	add	sp, #116	@ 0x74
 8016c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c4e:	89ab      	ldrh	r3, [r5, #12]
 8016c50:	0598      	lsls	r0, r3, #22
 8016c52:	d4f7      	bmi.n	8016c44 <_vfiprintf_r+0x44>
 8016c54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016c56:	f7ff fb3f 	bl	80162d8 <__retarget_lock_release_recursive>
 8016c5a:	e7f3      	b.n	8016c44 <_vfiprintf_r+0x44>
 8016c5c:	2300      	movs	r3, #0
 8016c5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016c60:	2320      	movs	r3, #32
 8016c62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016c66:	f8cd 800c 	str.w	r8, [sp, #12]
 8016c6a:	2330      	movs	r3, #48	@ 0x30
 8016c6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016e1c <_vfiprintf_r+0x21c>
 8016c70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016c74:	f04f 0901 	mov.w	r9, #1
 8016c78:	4623      	mov	r3, r4
 8016c7a:	469a      	mov	sl, r3
 8016c7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016c80:	b10a      	cbz	r2, 8016c86 <_vfiprintf_r+0x86>
 8016c82:	2a25      	cmp	r2, #37	@ 0x25
 8016c84:	d1f9      	bne.n	8016c7a <_vfiprintf_r+0x7a>
 8016c86:	ebba 0b04 	subs.w	fp, sl, r4
 8016c8a:	d00b      	beq.n	8016ca4 <_vfiprintf_r+0xa4>
 8016c8c:	465b      	mov	r3, fp
 8016c8e:	4622      	mov	r2, r4
 8016c90:	4629      	mov	r1, r5
 8016c92:	4630      	mov	r0, r6
 8016c94:	f7ff ffa2 	bl	8016bdc <__sfputs_r>
 8016c98:	3001      	adds	r0, #1
 8016c9a:	f000 80a7 	beq.w	8016dec <_vfiprintf_r+0x1ec>
 8016c9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016ca0:	445a      	add	r2, fp
 8016ca2:	9209      	str	r2, [sp, #36]	@ 0x24
 8016ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	f000 809f 	beq.w	8016dec <_vfiprintf_r+0x1ec>
 8016cae:	2300      	movs	r3, #0
 8016cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8016cb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016cb8:	f10a 0a01 	add.w	sl, sl, #1
 8016cbc:	9304      	str	r3, [sp, #16]
 8016cbe:	9307      	str	r3, [sp, #28]
 8016cc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016cc4:	931a      	str	r3, [sp, #104]	@ 0x68
 8016cc6:	4654      	mov	r4, sl
 8016cc8:	2205      	movs	r2, #5
 8016cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016cce:	4853      	ldr	r0, [pc, #332]	@ (8016e1c <_vfiprintf_r+0x21c>)
 8016cd0:	f7e9 fa9e 	bl	8000210 <memchr>
 8016cd4:	9a04      	ldr	r2, [sp, #16]
 8016cd6:	b9d8      	cbnz	r0, 8016d10 <_vfiprintf_r+0x110>
 8016cd8:	06d1      	lsls	r1, r2, #27
 8016cda:	bf44      	itt	mi
 8016cdc:	2320      	movmi	r3, #32
 8016cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016ce2:	0713      	lsls	r3, r2, #28
 8016ce4:	bf44      	itt	mi
 8016ce6:	232b      	movmi	r3, #43	@ 0x2b
 8016ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016cec:	f89a 3000 	ldrb.w	r3, [sl]
 8016cf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8016cf2:	d015      	beq.n	8016d20 <_vfiprintf_r+0x120>
 8016cf4:	9a07      	ldr	r2, [sp, #28]
 8016cf6:	4654      	mov	r4, sl
 8016cf8:	2000      	movs	r0, #0
 8016cfa:	f04f 0c0a 	mov.w	ip, #10
 8016cfe:	4621      	mov	r1, r4
 8016d00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016d04:	3b30      	subs	r3, #48	@ 0x30
 8016d06:	2b09      	cmp	r3, #9
 8016d08:	d94b      	bls.n	8016da2 <_vfiprintf_r+0x1a2>
 8016d0a:	b1b0      	cbz	r0, 8016d3a <_vfiprintf_r+0x13a>
 8016d0c:	9207      	str	r2, [sp, #28]
 8016d0e:	e014      	b.n	8016d3a <_vfiprintf_r+0x13a>
 8016d10:	eba0 0308 	sub.w	r3, r0, r8
 8016d14:	fa09 f303 	lsl.w	r3, r9, r3
 8016d18:	4313      	orrs	r3, r2
 8016d1a:	9304      	str	r3, [sp, #16]
 8016d1c:	46a2      	mov	sl, r4
 8016d1e:	e7d2      	b.n	8016cc6 <_vfiprintf_r+0xc6>
 8016d20:	9b03      	ldr	r3, [sp, #12]
 8016d22:	1d19      	adds	r1, r3, #4
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	9103      	str	r1, [sp, #12]
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	bfbb      	ittet	lt
 8016d2c:	425b      	neglt	r3, r3
 8016d2e:	f042 0202 	orrlt.w	r2, r2, #2
 8016d32:	9307      	strge	r3, [sp, #28]
 8016d34:	9307      	strlt	r3, [sp, #28]
 8016d36:	bfb8      	it	lt
 8016d38:	9204      	strlt	r2, [sp, #16]
 8016d3a:	7823      	ldrb	r3, [r4, #0]
 8016d3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8016d3e:	d10a      	bne.n	8016d56 <_vfiprintf_r+0x156>
 8016d40:	7863      	ldrb	r3, [r4, #1]
 8016d42:	2b2a      	cmp	r3, #42	@ 0x2a
 8016d44:	d132      	bne.n	8016dac <_vfiprintf_r+0x1ac>
 8016d46:	9b03      	ldr	r3, [sp, #12]
 8016d48:	1d1a      	adds	r2, r3, #4
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	9203      	str	r2, [sp, #12]
 8016d4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016d52:	3402      	adds	r4, #2
 8016d54:	9305      	str	r3, [sp, #20]
 8016d56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016e2c <_vfiprintf_r+0x22c>
 8016d5a:	7821      	ldrb	r1, [r4, #0]
 8016d5c:	2203      	movs	r2, #3
 8016d5e:	4650      	mov	r0, sl
 8016d60:	f7e9 fa56 	bl	8000210 <memchr>
 8016d64:	b138      	cbz	r0, 8016d76 <_vfiprintf_r+0x176>
 8016d66:	9b04      	ldr	r3, [sp, #16]
 8016d68:	eba0 000a 	sub.w	r0, r0, sl
 8016d6c:	2240      	movs	r2, #64	@ 0x40
 8016d6e:	4082      	lsls	r2, r0
 8016d70:	4313      	orrs	r3, r2
 8016d72:	3401      	adds	r4, #1
 8016d74:	9304      	str	r3, [sp, #16]
 8016d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d7a:	4829      	ldr	r0, [pc, #164]	@ (8016e20 <_vfiprintf_r+0x220>)
 8016d7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016d80:	2206      	movs	r2, #6
 8016d82:	f7e9 fa45 	bl	8000210 <memchr>
 8016d86:	2800      	cmp	r0, #0
 8016d88:	d03f      	beq.n	8016e0a <_vfiprintf_r+0x20a>
 8016d8a:	4b26      	ldr	r3, [pc, #152]	@ (8016e24 <_vfiprintf_r+0x224>)
 8016d8c:	bb1b      	cbnz	r3, 8016dd6 <_vfiprintf_r+0x1d6>
 8016d8e:	9b03      	ldr	r3, [sp, #12]
 8016d90:	3307      	adds	r3, #7
 8016d92:	f023 0307 	bic.w	r3, r3, #7
 8016d96:	3308      	adds	r3, #8
 8016d98:	9303      	str	r3, [sp, #12]
 8016d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016d9c:	443b      	add	r3, r7
 8016d9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016da0:	e76a      	b.n	8016c78 <_vfiprintf_r+0x78>
 8016da2:	fb0c 3202 	mla	r2, ip, r2, r3
 8016da6:	460c      	mov	r4, r1
 8016da8:	2001      	movs	r0, #1
 8016daa:	e7a8      	b.n	8016cfe <_vfiprintf_r+0xfe>
 8016dac:	2300      	movs	r3, #0
 8016dae:	3401      	adds	r4, #1
 8016db0:	9305      	str	r3, [sp, #20]
 8016db2:	4619      	mov	r1, r3
 8016db4:	f04f 0c0a 	mov.w	ip, #10
 8016db8:	4620      	mov	r0, r4
 8016dba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016dbe:	3a30      	subs	r2, #48	@ 0x30
 8016dc0:	2a09      	cmp	r2, #9
 8016dc2:	d903      	bls.n	8016dcc <_vfiprintf_r+0x1cc>
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d0c6      	beq.n	8016d56 <_vfiprintf_r+0x156>
 8016dc8:	9105      	str	r1, [sp, #20]
 8016dca:	e7c4      	b.n	8016d56 <_vfiprintf_r+0x156>
 8016dcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8016dd0:	4604      	mov	r4, r0
 8016dd2:	2301      	movs	r3, #1
 8016dd4:	e7f0      	b.n	8016db8 <_vfiprintf_r+0x1b8>
 8016dd6:	ab03      	add	r3, sp, #12
 8016dd8:	9300      	str	r3, [sp, #0]
 8016dda:	462a      	mov	r2, r5
 8016ddc:	4b12      	ldr	r3, [pc, #72]	@ (8016e28 <_vfiprintf_r+0x228>)
 8016dde:	a904      	add	r1, sp, #16
 8016de0:	4630      	mov	r0, r6
 8016de2:	f3af 8000 	nop.w
 8016de6:	4607      	mov	r7, r0
 8016de8:	1c78      	adds	r0, r7, #1
 8016dea:	d1d6      	bne.n	8016d9a <_vfiprintf_r+0x19a>
 8016dec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016dee:	07d9      	lsls	r1, r3, #31
 8016df0:	d405      	bmi.n	8016dfe <_vfiprintf_r+0x1fe>
 8016df2:	89ab      	ldrh	r3, [r5, #12]
 8016df4:	059a      	lsls	r2, r3, #22
 8016df6:	d402      	bmi.n	8016dfe <_vfiprintf_r+0x1fe>
 8016df8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016dfa:	f7ff fa6d 	bl	80162d8 <__retarget_lock_release_recursive>
 8016dfe:	89ab      	ldrh	r3, [r5, #12]
 8016e00:	065b      	lsls	r3, r3, #25
 8016e02:	f53f af1f 	bmi.w	8016c44 <_vfiprintf_r+0x44>
 8016e06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016e08:	e71e      	b.n	8016c48 <_vfiprintf_r+0x48>
 8016e0a:	ab03      	add	r3, sp, #12
 8016e0c:	9300      	str	r3, [sp, #0]
 8016e0e:	462a      	mov	r2, r5
 8016e10:	4b05      	ldr	r3, [pc, #20]	@ (8016e28 <_vfiprintf_r+0x228>)
 8016e12:	a904      	add	r1, sp, #16
 8016e14:	4630      	mov	r0, r6
 8016e16:	f7ff fc9d 	bl	8016754 <_printf_i>
 8016e1a:	e7e4      	b.n	8016de6 <_vfiprintf_r+0x1e6>
 8016e1c:	080257a3 	.word	0x080257a3
 8016e20:	080257ad 	.word	0x080257ad
 8016e24:	00000000 	.word	0x00000000
 8016e28:	08016bdd 	.word	0x08016bdd
 8016e2c:	080257a9 	.word	0x080257a9

08016e30 <__swbuf_r>:
 8016e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e32:	460e      	mov	r6, r1
 8016e34:	4614      	mov	r4, r2
 8016e36:	4605      	mov	r5, r0
 8016e38:	b118      	cbz	r0, 8016e42 <__swbuf_r+0x12>
 8016e3a:	6a03      	ldr	r3, [r0, #32]
 8016e3c:	b90b      	cbnz	r3, 8016e42 <__swbuf_r+0x12>
 8016e3e:	f7ff f8d1 	bl	8015fe4 <__sinit>
 8016e42:	69a3      	ldr	r3, [r4, #24]
 8016e44:	60a3      	str	r3, [r4, #8]
 8016e46:	89a3      	ldrh	r3, [r4, #12]
 8016e48:	071a      	lsls	r2, r3, #28
 8016e4a:	d501      	bpl.n	8016e50 <__swbuf_r+0x20>
 8016e4c:	6923      	ldr	r3, [r4, #16]
 8016e4e:	b943      	cbnz	r3, 8016e62 <__swbuf_r+0x32>
 8016e50:	4621      	mov	r1, r4
 8016e52:	4628      	mov	r0, r5
 8016e54:	f000 f82a 	bl	8016eac <__swsetup_r>
 8016e58:	b118      	cbz	r0, 8016e62 <__swbuf_r+0x32>
 8016e5a:	f04f 37ff 	mov.w	r7, #4294967295
 8016e5e:	4638      	mov	r0, r7
 8016e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e62:	6823      	ldr	r3, [r4, #0]
 8016e64:	6922      	ldr	r2, [r4, #16]
 8016e66:	1a98      	subs	r0, r3, r2
 8016e68:	6963      	ldr	r3, [r4, #20]
 8016e6a:	b2f6      	uxtb	r6, r6
 8016e6c:	4283      	cmp	r3, r0
 8016e6e:	4637      	mov	r7, r6
 8016e70:	dc05      	bgt.n	8016e7e <__swbuf_r+0x4e>
 8016e72:	4621      	mov	r1, r4
 8016e74:	4628      	mov	r0, r5
 8016e76:	f7ff fe11 	bl	8016a9c <_fflush_r>
 8016e7a:	2800      	cmp	r0, #0
 8016e7c:	d1ed      	bne.n	8016e5a <__swbuf_r+0x2a>
 8016e7e:	68a3      	ldr	r3, [r4, #8]
 8016e80:	3b01      	subs	r3, #1
 8016e82:	60a3      	str	r3, [r4, #8]
 8016e84:	6823      	ldr	r3, [r4, #0]
 8016e86:	1c5a      	adds	r2, r3, #1
 8016e88:	6022      	str	r2, [r4, #0]
 8016e8a:	701e      	strb	r6, [r3, #0]
 8016e8c:	6962      	ldr	r2, [r4, #20]
 8016e8e:	1c43      	adds	r3, r0, #1
 8016e90:	429a      	cmp	r2, r3
 8016e92:	d004      	beq.n	8016e9e <__swbuf_r+0x6e>
 8016e94:	89a3      	ldrh	r3, [r4, #12]
 8016e96:	07db      	lsls	r3, r3, #31
 8016e98:	d5e1      	bpl.n	8016e5e <__swbuf_r+0x2e>
 8016e9a:	2e0a      	cmp	r6, #10
 8016e9c:	d1df      	bne.n	8016e5e <__swbuf_r+0x2e>
 8016e9e:	4621      	mov	r1, r4
 8016ea0:	4628      	mov	r0, r5
 8016ea2:	f7ff fdfb 	bl	8016a9c <_fflush_r>
 8016ea6:	2800      	cmp	r0, #0
 8016ea8:	d0d9      	beq.n	8016e5e <__swbuf_r+0x2e>
 8016eaa:	e7d6      	b.n	8016e5a <__swbuf_r+0x2a>

08016eac <__swsetup_r>:
 8016eac:	b538      	push	{r3, r4, r5, lr}
 8016eae:	4b29      	ldr	r3, [pc, #164]	@ (8016f54 <__swsetup_r+0xa8>)
 8016eb0:	4605      	mov	r5, r0
 8016eb2:	6818      	ldr	r0, [r3, #0]
 8016eb4:	460c      	mov	r4, r1
 8016eb6:	b118      	cbz	r0, 8016ec0 <__swsetup_r+0x14>
 8016eb8:	6a03      	ldr	r3, [r0, #32]
 8016eba:	b90b      	cbnz	r3, 8016ec0 <__swsetup_r+0x14>
 8016ebc:	f7ff f892 	bl	8015fe4 <__sinit>
 8016ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ec4:	0719      	lsls	r1, r3, #28
 8016ec6:	d422      	bmi.n	8016f0e <__swsetup_r+0x62>
 8016ec8:	06da      	lsls	r2, r3, #27
 8016eca:	d407      	bmi.n	8016edc <__swsetup_r+0x30>
 8016ecc:	2209      	movs	r2, #9
 8016ece:	602a      	str	r2, [r5, #0]
 8016ed0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016ed4:	81a3      	strh	r3, [r4, #12]
 8016ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8016eda:	e033      	b.n	8016f44 <__swsetup_r+0x98>
 8016edc:	0758      	lsls	r0, r3, #29
 8016ede:	d512      	bpl.n	8016f06 <__swsetup_r+0x5a>
 8016ee0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016ee2:	b141      	cbz	r1, 8016ef6 <__swsetup_r+0x4a>
 8016ee4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016ee8:	4299      	cmp	r1, r3
 8016eea:	d002      	beq.n	8016ef2 <__swsetup_r+0x46>
 8016eec:	4628      	mov	r0, r5
 8016eee:	f7ff fa21 	bl	8016334 <_free_r>
 8016ef2:	2300      	movs	r3, #0
 8016ef4:	6363      	str	r3, [r4, #52]	@ 0x34
 8016ef6:	89a3      	ldrh	r3, [r4, #12]
 8016ef8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016efc:	81a3      	strh	r3, [r4, #12]
 8016efe:	2300      	movs	r3, #0
 8016f00:	6063      	str	r3, [r4, #4]
 8016f02:	6923      	ldr	r3, [r4, #16]
 8016f04:	6023      	str	r3, [r4, #0]
 8016f06:	89a3      	ldrh	r3, [r4, #12]
 8016f08:	f043 0308 	orr.w	r3, r3, #8
 8016f0c:	81a3      	strh	r3, [r4, #12]
 8016f0e:	6923      	ldr	r3, [r4, #16]
 8016f10:	b94b      	cbnz	r3, 8016f26 <__swsetup_r+0x7a>
 8016f12:	89a3      	ldrh	r3, [r4, #12]
 8016f14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016f18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016f1c:	d003      	beq.n	8016f26 <__swsetup_r+0x7a>
 8016f1e:	4621      	mov	r1, r4
 8016f20:	4628      	mov	r0, r5
 8016f22:	f000 f88b 	bl	801703c <__smakebuf_r>
 8016f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f2a:	f013 0201 	ands.w	r2, r3, #1
 8016f2e:	d00a      	beq.n	8016f46 <__swsetup_r+0x9a>
 8016f30:	2200      	movs	r2, #0
 8016f32:	60a2      	str	r2, [r4, #8]
 8016f34:	6962      	ldr	r2, [r4, #20]
 8016f36:	4252      	negs	r2, r2
 8016f38:	61a2      	str	r2, [r4, #24]
 8016f3a:	6922      	ldr	r2, [r4, #16]
 8016f3c:	b942      	cbnz	r2, 8016f50 <__swsetup_r+0xa4>
 8016f3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016f42:	d1c5      	bne.n	8016ed0 <__swsetup_r+0x24>
 8016f44:	bd38      	pop	{r3, r4, r5, pc}
 8016f46:	0799      	lsls	r1, r3, #30
 8016f48:	bf58      	it	pl
 8016f4a:	6962      	ldrpl	r2, [r4, #20]
 8016f4c:	60a2      	str	r2, [r4, #8]
 8016f4e:	e7f4      	b.n	8016f3a <__swsetup_r+0x8e>
 8016f50:	2000      	movs	r0, #0
 8016f52:	e7f7      	b.n	8016f44 <__swsetup_r+0x98>
 8016f54:	200000ac 	.word	0x200000ac

08016f58 <_raise_r>:
 8016f58:	291f      	cmp	r1, #31
 8016f5a:	b538      	push	{r3, r4, r5, lr}
 8016f5c:	4605      	mov	r5, r0
 8016f5e:	460c      	mov	r4, r1
 8016f60:	d904      	bls.n	8016f6c <_raise_r+0x14>
 8016f62:	2316      	movs	r3, #22
 8016f64:	6003      	str	r3, [r0, #0]
 8016f66:	f04f 30ff 	mov.w	r0, #4294967295
 8016f6a:	bd38      	pop	{r3, r4, r5, pc}
 8016f6c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016f6e:	b112      	cbz	r2, 8016f76 <_raise_r+0x1e>
 8016f70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016f74:	b94b      	cbnz	r3, 8016f8a <_raise_r+0x32>
 8016f76:	4628      	mov	r0, r5
 8016f78:	f000 f830 	bl	8016fdc <_getpid_r>
 8016f7c:	4622      	mov	r2, r4
 8016f7e:	4601      	mov	r1, r0
 8016f80:	4628      	mov	r0, r5
 8016f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f86:	f000 b817 	b.w	8016fb8 <_kill_r>
 8016f8a:	2b01      	cmp	r3, #1
 8016f8c:	d00a      	beq.n	8016fa4 <_raise_r+0x4c>
 8016f8e:	1c59      	adds	r1, r3, #1
 8016f90:	d103      	bne.n	8016f9a <_raise_r+0x42>
 8016f92:	2316      	movs	r3, #22
 8016f94:	6003      	str	r3, [r0, #0]
 8016f96:	2001      	movs	r0, #1
 8016f98:	e7e7      	b.n	8016f6a <_raise_r+0x12>
 8016f9a:	2100      	movs	r1, #0
 8016f9c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016fa0:	4620      	mov	r0, r4
 8016fa2:	4798      	blx	r3
 8016fa4:	2000      	movs	r0, #0
 8016fa6:	e7e0      	b.n	8016f6a <_raise_r+0x12>

08016fa8 <raise>:
 8016fa8:	4b02      	ldr	r3, [pc, #8]	@ (8016fb4 <raise+0xc>)
 8016faa:	4601      	mov	r1, r0
 8016fac:	6818      	ldr	r0, [r3, #0]
 8016fae:	f7ff bfd3 	b.w	8016f58 <_raise_r>
 8016fb2:	bf00      	nop
 8016fb4:	200000ac 	.word	0x200000ac

08016fb8 <_kill_r>:
 8016fb8:	b538      	push	{r3, r4, r5, lr}
 8016fba:	4d07      	ldr	r5, [pc, #28]	@ (8016fd8 <_kill_r+0x20>)
 8016fbc:	2300      	movs	r3, #0
 8016fbe:	4604      	mov	r4, r0
 8016fc0:	4608      	mov	r0, r1
 8016fc2:	4611      	mov	r1, r2
 8016fc4:	602b      	str	r3, [r5, #0]
 8016fc6:	f7f1 fe45 	bl	8008c54 <_kill>
 8016fca:	1c43      	adds	r3, r0, #1
 8016fcc:	d102      	bne.n	8016fd4 <_kill_r+0x1c>
 8016fce:	682b      	ldr	r3, [r5, #0]
 8016fd0:	b103      	cbz	r3, 8016fd4 <_kill_r+0x1c>
 8016fd2:	6023      	str	r3, [r4, #0]
 8016fd4:	bd38      	pop	{r3, r4, r5, pc}
 8016fd6:	bf00      	nop
 8016fd8:	20009800 	.word	0x20009800

08016fdc <_getpid_r>:
 8016fdc:	f7f1 be32 	b.w	8008c44 <_getpid>

08016fe0 <_malloc_usable_size_r>:
 8016fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016fe4:	1f18      	subs	r0, r3, #4
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	bfbc      	itt	lt
 8016fea:	580b      	ldrlt	r3, [r1, r0]
 8016fec:	18c0      	addlt	r0, r0, r3
 8016fee:	4770      	bx	lr

08016ff0 <__swhatbuf_r>:
 8016ff0:	b570      	push	{r4, r5, r6, lr}
 8016ff2:	460c      	mov	r4, r1
 8016ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ff8:	2900      	cmp	r1, #0
 8016ffa:	b096      	sub	sp, #88	@ 0x58
 8016ffc:	4615      	mov	r5, r2
 8016ffe:	461e      	mov	r6, r3
 8017000:	da0d      	bge.n	801701e <__swhatbuf_r+0x2e>
 8017002:	89a3      	ldrh	r3, [r4, #12]
 8017004:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017008:	f04f 0100 	mov.w	r1, #0
 801700c:	bf14      	ite	ne
 801700e:	2340      	movne	r3, #64	@ 0x40
 8017010:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017014:	2000      	movs	r0, #0
 8017016:	6031      	str	r1, [r6, #0]
 8017018:	602b      	str	r3, [r5, #0]
 801701a:	b016      	add	sp, #88	@ 0x58
 801701c:	bd70      	pop	{r4, r5, r6, pc}
 801701e:	466a      	mov	r2, sp
 8017020:	f000 f848 	bl	80170b4 <_fstat_r>
 8017024:	2800      	cmp	r0, #0
 8017026:	dbec      	blt.n	8017002 <__swhatbuf_r+0x12>
 8017028:	9901      	ldr	r1, [sp, #4]
 801702a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801702e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017032:	4259      	negs	r1, r3
 8017034:	4159      	adcs	r1, r3
 8017036:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801703a:	e7eb      	b.n	8017014 <__swhatbuf_r+0x24>

0801703c <__smakebuf_r>:
 801703c:	898b      	ldrh	r3, [r1, #12]
 801703e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017040:	079d      	lsls	r5, r3, #30
 8017042:	4606      	mov	r6, r0
 8017044:	460c      	mov	r4, r1
 8017046:	d507      	bpl.n	8017058 <__smakebuf_r+0x1c>
 8017048:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801704c:	6023      	str	r3, [r4, #0]
 801704e:	6123      	str	r3, [r4, #16]
 8017050:	2301      	movs	r3, #1
 8017052:	6163      	str	r3, [r4, #20]
 8017054:	b003      	add	sp, #12
 8017056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017058:	ab01      	add	r3, sp, #4
 801705a:	466a      	mov	r2, sp
 801705c:	f7ff ffc8 	bl	8016ff0 <__swhatbuf_r>
 8017060:	9f00      	ldr	r7, [sp, #0]
 8017062:	4605      	mov	r5, r0
 8017064:	4639      	mov	r1, r7
 8017066:	4630      	mov	r0, r6
 8017068:	f7fe fe66 	bl	8015d38 <_malloc_r>
 801706c:	b948      	cbnz	r0, 8017082 <__smakebuf_r+0x46>
 801706e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017072:	059a      	lsls	r2, r3, #22
 8017074:	d4ee      	bmi.n	8017054 <__smakebuf_r+0x18>
 8017076:	f023 0303 	bic.w	r3, r3, #3
 801707a:	f043 0302 	orr.w	r3, r3, #2
 801707e:	81a3      	strh	r3, [r4, #12]
 8017080:	e7e2      	b.n	8017048 <__smakebuf_r+0xc>
 8017082:	89a3      	ldrh	r3, [r4, #12]
 8017084:	6020      	str	r0, [r4, #0]
 8017086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801708a:	81a3      	strh	r3, [r4, #12]
 801708c:	9b01      	ldr	r3, [sp, #4]
 801708e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017092:	b15b      	cbz	r3, 80170ac <__smakebuf_r+0x70>
 8017094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017098:	4630      	mov	r0, r6
 801709a:	f000 f81d 	bl	80170d8 <_isatty_r>
 801709e:	b128      	cbz	r0, 80170ac <__smakebuf_r+0x70>
 80170a0:	89a3      	ldrh	r3, [r4, #12]
 80170a2:	f023 0303 	bic.w	r3, r3, #3
 80170a6:	f043 0301 	orr.w	r3, r3, #1
 80170aa:	81a3      	strh	r3, [r4, #12]
 80170ac:	89a3      	ldrh	r3, [r4, #12]
 80170ae:	431d      	orrs	r5, r3
 80170b0:	81a5      	strh	r5, [r4, #12]
 80170b2:	e7cf      	b.n	8017054 <__smakebuf_r+0x18>

080170b4 <_fstat_r>:
 80170b4:	b538      	push	{r3, r4, r5, lr}
 80170b6:	4d07      	ldr	r5, [pc, #28]	@ (80170d4 <_fstat_r+0x20>)
 80170b8:	2300      	movs	r3, #0
 80170ba:	4604      	mov	r4, r0
 80170bc:	4608      	mov	r0, r1
 80170be:	4611      	mov	r1, r2
 80170c0:	602b      	str	r3, [r5, #0]
 80170c2:	f7f1 fe27 	bl	8008d14 <_fstat>
 80170c6:	1c43      	adds	r3, r0, #1
 80170c8:	d102      	bne.n	80170d0 <_fstat_r+0x1c>
 80170ca:	682b      	ldr	r3, [r5, #0]
 80170cc:	b103      	cbz	r3, 80170d0 <_fstat_r+0x1c>
 80170ce:	6023      	str	r3, [r4, #0]
 80170d0:	bd38      	pop	{r3, r4, r5, pc}
 80170d2:	bf00      	nop
 80170d4:	20009800 	.word	0x20009800

080170d8 <_isatty_r>:
 80170d8:	b538      	push	{r3, r4, r5, lr}
 80170da:	4d06      	ldr	r5, [pc, #24]	@ (80170f4 <_isatty_r+0x1c>)
 80170dc:	2300      	movs	r3, #0
 80170de:	4604      	mov	r4, r0
 80170e0:	4608      	mov	r0, r1
 80170e2:	602b      	str	r3, [r5, #0]
 80170e4:	f7f1 fe26 	bl	8008d34 <_isatty>
 80170e8:	1c43      	adds	r3, r0, #1
 80170ea:	d102      	bne.n	80170f2 <_isatty_r+0x1a>
 80170ec:	682b      	ldr	r3, [r5, #0]
 80170ee:	b103      	cbz	r3, 80170f2 <_isatty_r+0x1a>
 80170f0:	6023      	str	r3, [r4, #0]
 80170f2:	bd38      	pop	{r3, r4, r5, pc}
 80170f4:	20009800 	.word	0x20009800

080170f8 <_init>:
 80170f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170fa:	bf00      	nop
 80170fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170fe:	bc08      	pop	{r3}
 8017100:	469e      	mov	lr, r3
 8017102:	4770      	bx	lr

08017104 <_fini>:
 8017104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017106:	bf00      	nop
 8017108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801710a:	bc08      	pop	{r3}
 801710c:	469e      	mov	lr, r3
 801710e:	4770      	bx	lr
