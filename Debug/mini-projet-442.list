
mini-projet-442.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011148  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e5b0  08011318  08011318  00012318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f8c8  0801f8c8  000210b4  2**0
                  CONTENTS
  4 .ARM          00000008  0801f8c8  0801f8c8  000208c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f8d0  0801f8d0  000210b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f8d0  0801f8d0  000208d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f8d4  0801f8d4  000208d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0801f8d8  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c1c  200000b4  0801f98c  000210b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cd0  0801f98c  00021cd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000210b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030bf9  00000000  00000000  000210e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007652  00000000  00000000  00051cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002870  00000000  00000000  00059330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f1f  00000000  00000000  0005bba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031a0e  00000000  00000000  0005dabf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033dc1  00000000  00000000  0008f4cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001175d5  00000000  00000000  000c328e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001da863  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b2ec  00000000  00000000  001da8a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001e5b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011300 	.word	0x08011300

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	08011300 	.word	0x08011300

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000aa0:	f000 b96a 	b.w	8000d78 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14e      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	458c      	cmp	ip, r1
 8000acc:	4686      	mov	lr, r0
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	d962      	bls.n	8000b9a <__udivmoddi4+0xde>
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	4091      	lsls	r1, r2
 8000adc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f f68c 	uxth.w	r6, ip
 8000af2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	fb07 1114 	mls	r1, r7, r4, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb04 f106 	mul.w	r1, r4, r6
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b12:	f080 8112 	bcs.w	8000d3a <__udivmoddi4+0x27e>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 810f 	bls.w	8000d3a <__udivmoddi4+0x27e>
 8000b1c:	3c02      	subs	r4, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	fa1f f38e 	uxth.w	r3, lr
 8000b26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb00 f606 	mul.w	r6, r0, r6
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x94>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b42:	f080 80fc 	bcs.w	8000d3e <__udivmoddi4+0x282>
 8000b46:	429e      	cmp	r6, r3
 8000b48:	f240 80f9 	bls.w	8000d3e <__udivmoddi4+0x282>
 8000b4c:	4463      	add	r3, ip
 8000b4e:	3802      	subs	r0, #2
 8000b50:	1b9b      	subs	r3, r3, r6
 8000b52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b56:	2100      	movs	r1, #0
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa6>
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xba>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb4>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x150>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xcc>
 8000b82:	4290      	cmp	r0, r2
 8000b84:	f0c0 80f0 	bcc.w	8000d68 <__udivmoddi4+0x2ac>
 8000b88:	1a86      	subs	r6, r0, r2
 8000b8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0e6      	beq.n	8000b62 <__udivmoddi4+0xa6>
 8000b94:	e9c5 6300 	strd	r6, r3, [r5]
 8000b98:	e7e3      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	f040 8090 	bne.w	8000cc0 <__udivmoddi4+0x204>
 8000ba0:	eba1 040c 	sub.w	r4, r1, ip
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa1f f78c 	uxth.w	r7, ip
 8000bac:	2101      	movs	r1, #1
 8000bae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	fb07 f006 	mul.w	r0, r7, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x11c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x11a>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000bd6:	4626      	mov	r6, r4
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000be2:	fb08 4410 	mls	r4, r8, r0, r4
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	fb00 f707 	mul.w	r7, r0, r7
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x148>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x146>
 8000bfc:	429f      	cmp	r7, r3
 8000bfe:	f200 80b0 	bhi.w	8000d62 <__udivmoddi4+0x2a6>
 8000c02:	4620      	mov	r0, r4
 8000c04:	1bdb      	subs	r3, r3, r7
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x9c>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c20:	ea43 030c 	orr.w	r3, r3, ip
 8000c24:	40f4      	lsrs	r4, r6
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	0c38      	lsrs	r0, r7, #16
 8000c2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c30:	fbb4 fef0 	udiv	lr, r4, r0
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	fb00 441e 	mls	r4, r0, lr, r4
 8000c3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c40:	fb0e f90c 	mul.w	r9, lr, ip
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x1a6>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c52:	f080 8084 	bcs.w	8000d5e <__udivmoddi4+0x2a2>
 8000c56:	45a1      	cmp	r9, r4
 8000c58:	f240 8081 	bls.w	8000d5e <__udivmoddi4+0x2a2>
 8000c5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	eba4 0409 	sub.w	r4, r4, r9
 8000c66:	fa1f f983 	uxth.w	r9, r3
 8000c6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x1d2>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c84:	d267      	bcs.n	8000d56 <__udivmoddi4+0x29a>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d965      	bls.n	8000d56 <__udivmoddi4+0x29a>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	443c      	add	r4, r7
 8000c8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c92:	fba0 9302 	umull	r9, r3, r0, r2
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	46ce      	mov	lr, r9
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	d351      	bcc.n	8000d46 <__udivmoddi4+0x28a>
 8000ca2:	d04e      	beq.n	8000d42 <__udivmoddi4+0x286>
 8000ca4:	b155      	cbz	r5, 8000cbc <__udivmoddi4+0x200>
 8000ca6:	ebb8 030e 	subs.w	r3, r8, lr
 8000caa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e750      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	430c      	orrs	r4, r1
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce8:	0c23      	lsrs	r3, r4, #16
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f107 	mul.w	r1, r0, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x24c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cfe:	d22c      	bcs.n	8000d5a <__udivmoddi4+0x29e>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d92a      	bls.n	8000d5a <__udivmoddi4+0x29e>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d10:	fb08 3311 	mls	r3, r8, r1, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb01 f307 	mul.w	r3, r1, r7
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x276>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d28:	d213      	bcs.n	8000d52 <__udivmoddi4+0x296>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d911      	bls.n	8000d52 <__udivmoddi4+0x296>
 8000d2e:	3902      	subs	r1, #2
 8000d30:	4464      	add	r4, ip
 8000d32:	1ae4      	subs	r4, r4, r3
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	e739      	b.n	8000bae <__udivmoddi4+0xf2>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	e6f0      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e706      	b.n	8000b50 <__udivmoddi4+0x94>
 8000d42:	45c8      	cmp	r8, r9
 8000d44:	d2ae      	bcs.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d4e:	3801      	subs	r0, #1
 8000d50:	e7a8      	b.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d52:	4631      	mov	r1, r6
 8000d54:	e7ed      	b.n	8000d32 <__udivmoddi4+0x276>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e799      	b.n	8000c8e <__udivmoddi4+0x1d2>
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	e7d4      	b.n	8000d08 <__udivmoddi4+0x24c>
 8000d5e:	46d6      	mov	lr, sl
 8000d60:	e77f      	b.n	8000c62 <__udivmoddi4+0x1a6>
 8000d62:	4463      	add	r3, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	e74d      	b.n	8000c04 <__udivmoddi4+0x148>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e70f      	b.n	8000b90 <__udivmoddi4+0xd4>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	e730      	b.n	8000bd8 <__udivmoddi4+0x11c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d82:	463b      	mov	r3, r7
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d8e:	4b21      	ldr	r3, [pc, #132]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d90:	4a21      	ldr	r2, [pc, #132]	@ (8000e18 <MX_ADC1_Init+0x9c>)
 8000d92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d94:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d96:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000da2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dae:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000db6:	4b17      	ldr	r3, [pc, #92]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dbe:	4a17      	ldr	r2, [pc, #92]	@ (8000e1c <MX_ADC1_Init+0xa0>)
 8000dc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ddc:	480d      	ldr	r0, [pc, #52]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dde:	f004 fda3 	bl	8005928 <HAL_ADC_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000de8:	f002 fb0c 	bl	8003404 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000df0:	2301      	movs	r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df8:	463b      	mov	r3, r7
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dfe:	f004 ff3d 	bl	8005c7c <HAL_ADC_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e08:	f002 fafc 	bl	8003404 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200000d0 	.word	0x200000d0
 8000e18:	40012000 	.word	0x40012000
 8000e1c:	0f000001 	.word	0x0f000001

08000e20 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e26:	463b      	mov	r3, r7
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000e32:	4b21      	ldr	r3, [pc, #132]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e34:	4a21      	ldr	r2, [pc, #132]	@ (8000ebc <MX_ADC3_Init+0x9c>)
 8000e36:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e38:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e3e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e46:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e52:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e5a:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e60:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e62:	4a17      	ldr	r2, [pc, #92]	@ (8000ec0 <MX_ADC3_Init+0xa0>)
 8000e64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e66:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e72:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e80:	480d      	ldr	r0, [pc, #52]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e82:	f004 fd51 	bl	8005928 <HAL_ADC_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000e8c:	f002 faba 	bl	8003404 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e90:	2306      	movs	r3, #6
 8000e92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000ea2:	f004 feeb 	bl	8005c7c <HAL_ADC_ConfigChannel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000eac:	f002 faaa 	bl	8003404 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000118 	.word	0x20000118
 8000ebc:	40012200 	.word	0x40012200
 8000ec0:	0f000001 	.word	0x0f000001

08000ec4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08c      	sub	sp, #48	@ 0x30
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8000f8c <HAL_ADC_MspInit+0xc8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d124      	bne.n	8000f30 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	4a29      	ldr	r2, [pc, #164]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef2:	4b27      	ldr	r3, [pc, #156]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b24      	ldr	r3, [pc, #144]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a23      	ldr	r2, [pc, #140]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b21      	ldr	r3, [pc, #132]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f16:	2301      	movs	r3, #1
 8000f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	481a      	ldr	r0, [pc, #104]	@ (8000f94 <HAL_ADC_MspInit+0xd0>)
 8000f2a:	f006 f957 	bl	80071dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000f2e:	e029      	b.n	8000f84 <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a18      	ldr	r2, [pc, #96]	@ (8000f98 <HAL_ADC_MspInit+0xd4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d124      	bne.n	8000f84 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000f3a:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3e:	4a14      	ldr	r2, [pc, #80]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f46:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f52:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a0e      	ldr	r2, [pc, #56]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f58:	f043 0320 	orr.w	r3, r3, #32
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0320 	and.w	r3, r3, #32
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8000f6a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f70:	2303      	movs	r3, #3
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <HAL_ADC_MspInit+0xd8>)
 8000f80:	f006 f92c 	bl	80071dc <HAL_GPIO_Init>
}
 8000f84:	bf00      	nop
 8000f86:	3730      	adds	r7, #48	@ 0x30
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40012000 	.word	0x40012000
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40012200 	.word	0x40012200
 8000f9c:	40021400 	.word	0x40021400

08000fa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fa6:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <MX_DMA_Init+0x68>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	4a17      	ldr	r2, [pc, #92]	@ (8001008 <MX_DMA_Init+0x68>)
 8000fac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb2:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <MX_DMA_Init+0x68>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2105      	movs	r1, #5
 8000fc2:	203b      	movs	r0, #59	@ 0x3b
 8000fc4:	f005 f962 	bl	800628c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000fc8:	203b      	movs	r0, #59	@ 0x3b
 8000fca:	f005 f97b 	bl	80062c4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2105      	movs	r1, #5
 8000fd2:	203c      	movs	r0, #60	@ 0x3c
 8000fd4:	f005 f95a 	bl	800628c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000fd8:	203c      	movs	r0, #60	@ 0x3c
 8000fda:	f005 f973 	bl	80062c4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2105      	movs	r1, #5
 8000fe2:	2045      	movs	r0, #69	@ 0x45
 8000fe4:	f005 f952 	bl	800628c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000fe8:	2045      	movs	r0, #69	@ 0x45
 8000fea:	f005 f96b 	bl	80062c4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2105      	movs	r1, #5
 8000ff2:	2046      	movs	r0, #70	@ 0x46
 8000ff4:	f005 f94a 	bl	800628c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000ff8:	2046      	movs	r0, #70	@ 0x46
 8000ffa:	f005 f963 	bl	80062c4 <HAL_NVIC_EnableIRQ>

}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800

0800100c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001010:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001012:	4a16      	ldr	r2, [pc, #88]	@ (800106c <MX_DMA2D_Init+0x60>)
 8001014:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001016:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001018:	2200      	movs	r2, #0
 800101a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800101c:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001028:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 800102a:	2200      	movs	r2, #0
 800102c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001030:	2200      	movs	r2, #0
 8001032:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001034:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001036:	2200      	movs	r2, #0
 8001038:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800103a:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 800103c:	2200      	movs	r2, #0
 800103e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001040:	4809      	ldr	r0, [pc, #36]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001042:	f005 fd2f 	bl	8006aa4 <HAL_DMA2D_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800104c:	f002 f9da 	bl	8003404 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001050:	2101      	movs	r1, #1
 8001052:	4805      	ldr	r0, [pc, #20]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001054:	f005 ff94 	bl	8006f80 <HAL_DMA2D_ConfigLayer>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800105e:	f002 f9d1 	bl	8003404 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000160 	.word	0x20000160
 800106c:	4002b000 	.word	0x4002b000

08001070 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0d      	ldr	r2, [pc, #52]	@ (80010b4 <HAL_DMA2D_MspInit+0x44>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d113      	bne.n	80010aa <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001082:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <HAL_DMA2D_MspInit+0x48>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a0c      	ldr	r2, [pc, #48]	@ (80010b8 <HAL_DMA2D_MspInit+0x48>)
 8001088:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <HAL_DMA2D_MspInit+0x48>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2105      	movs	r1, #5
 800109e:	205a      	movs	r0, #90	@ 0x5a
 80010a0:	f005 f8f4 	bl	800628c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80010a4:	205a      	movs	r0, #90	@ 0x5a
 80010a6:	f005 f90d 	bl	80062c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	4002b000 	.word	0x4002b000
 80010b8:	40023800 	.word	0x40023800

080010bc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
 80010d0:	615a      	str	r2, [r3, #20]
 80010d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80010d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001154 <MX_FMC_Init+0x98>)
 80010d6:	4a20      	ldr	r2, [pc, #128]	@ (8001158 <MX_FMC_Init+0x9c>)
 80010d8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80010da:	4b1e      	ldr	r3, [pc, #120]	@ (8001154 <MX_FMC_Init+0x98>)
 80010dc:	2200      	movs	r2, #0
 80010de:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80010e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001154 <MX_FMC_Init+0x98>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <MX_FMC_Init+0x98>)
 80010e8:	2204      	movs	r2, #4
 80010ea:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <MX_FMC_Init+0x98>)
 80010ee:	2210      	movs	r2, #16
 80010f0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80010f2:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <MX_FMC_Init+0x98>)
 80010f4:	2240      	movs	r2, #64	@ 0x40
 80010f6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80010f8:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <MX_FMC_Init+0x98>)
 80010fa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80010fe:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001100:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <MX_FMC_Init+0x98>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001106:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <MX_FMC_Init+0x98>)
 8001108:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800110c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800110e:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <MX_FMC_Init+0x98>)
 8001110:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001114:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001116:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_FMC_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800111c:	2302      	movs	r3, #2
 800111e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001120:	2307      	movs	r3, #7
 8001122:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001124:	2304      	movs	r3, #4
 8001126:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001128:	2307      	movs	r3, #7
 800112a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800112c:	2303      	movs	r3, #3
 800112e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001130:	2302      	movs	r3, #2
 8001132:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001134:	2302      	movs	r3, #2
 8001136:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	@ (8001154 <MX_FMC_Init+0x98>)
 800113e:	f009 fded 	bl	800ad1c <HAL_SDRAM_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001148:	f002 f95c 	bl	8003404 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800114c:	bf00      	nop
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200001a0 	.word	0x200001a0
 8001158:	a0000140 	.word	0xa0000140

0800115c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001170:	4b3a      	ldr	r3, [pc, #232]	@ (800125c <HAL_FMC_MspInit+0x100>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d16d      	bne.n	8001254 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001178:	4b38      	ldr	r3, [pc, #224]	@ (800125c <HAL_FMC_MspInit+0x100>)
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800117e:	4b38      	ldr	r3, [pc, #224]	@ (8001260 <HAL_FMC_MspInit+0x104>)
 8001180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001182:	4a37      	ldr	r2, [pc, #220]	@ (8001260 <HAL_FMC_MspInit+0x104>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6393      	str	r3, [r2, #56]	@ 0x38
 800118a:	4b35      	ldr	r3, [pc, #212]	@ (8001260 <HAL_FMC_MspInit+0x104>)
 800118c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001196:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800119a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011a8:	230c      	movs	r3, #12
 80011aa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	4619      	mov	r1, r3
 80011b0:	482c      	ldr	r0, [pc, #176]	@ (8001264 <HAL_FMC_MspInit+0x108>)
 80011b2:	f006 f813 	bl	80071dc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80011b6:	f248 1333 	movw	r3, #33075	@ 0x8133
 80011ba:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011c8:	230c      	movs	r3, #12
 80011ca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	4619      	mov	r1, r3
 80011d0:	4825      	ldr	r0, [pc, #148]	@ (8001268 <HAL_FMC_MspInit+0x10c>)
 80011d2:	f006 f803 	bl	80071dc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80011d6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80011da:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011e8:	230c      	movs	r3, #12
 80011ea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4619      	mov	r1, r3
 80011f0:	481e      	ldr	r0, [pc, #120]	@ (800126c <HAL_FMC_MspInit+0x110>)
 80011f2:	f005 fff3 	bl	80071dc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80011f6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80011fa:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001208:	230c      	movs	r3, #12
 800120a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	4619      	mov	r1, r3
 8001210:	4817      	ldr	r0, [pc, #92]	@ (8001270 <HAL_FMC_MspInit+0x114>)
 8001212:	f005 ffe3 	bl	80071dc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001216:	2328      	movs	r3, #40	@ 0x28
 8001218:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001226:	230c      	movs	r3, #12
 8001228:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	4619      	mov	r1, r3
 800122e:	4811      	ldr	r0, [pc, #68]	@ (8001274 <HAL_FMC_MspInit+0x118>)
 8001230:	f005 ffd4 	bl	80071dc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001234:	2308      	movs	r3, #8
 8001236:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001244:	230c      	movs	r3, #12
 8001246:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	4619      	mov	r1, r3
 800124c:	480a      	ldr	r0, [pc, #40]	@ (8001278 <HAL_FMC_MspInit+0x11c>)
 800124e:	f005 ffc5 	bl	80071dc <HAL_GPIO_Init>
 8001252:	e000      	b.n	8001256 <HAL_FMC_MspInit+0xfa>
    return;
 8001254:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200001d4 	.word	0x200001d4
 8001260:	40023800 	.word	0x40023800
 8001264:	40021000 	.word	0x40021000
 8001268:	40021800 	.word	0x40021800
 800126c:	40020c00 	.word	0x40020c00
 8001270:	40021400 	.word	0x40021400
 8001274:	40021c00 	.word	0x40021c00
 8001278:	40020800 	.word	0x40020800

0800127c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001284:	f7ff ff6a 	bl	800115c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4a07      	ldr	r2, [pc, #28]	@ (80012bc <vApplicationGetIdleTaskMemory+0x2c>)
 80012a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	4a06      	ldr	r2, [pc, #24]	@ (80012c0 <vApplicationGetIdleTaskMemory+0x30>)
 80012a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2280      	movs	r2, #128	@ 0x80
 80012ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012ae:	bf00      	nop
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	200003b8 	.word	0x200003b8
 80012c0:	20000458 	.word	0x20000458

080012c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012c4:	b5b0      	push	{r4, r5, r7, lr}
 80012c6:	b0a6      	sub	sp, #152	@ 0x98
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of displayMutex */
  osMutexDef(displayMutex);
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  displayMutexHandle = osMutexCreate(osMutex(displayMutex));
 80012d6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80012da:	4618      	mov	r0, r3
 80012dc:	f00c f828 	bl	800d330 <osMutexCreate>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4a31      	ldr	r2, [pc, #196]	@ (80013a8 <MX_FREERTOS_Init+0xe4>)
 80012e4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80012e6:	4b31      	ldr	r3, [pc, #196]	@ (80013ac <MX_FREERTOS_Init+0xe8>)
 80012e8:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80012ec:	461d      	mov	r5, r3
 80012ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80012fa:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f00b ffb5 	bl	800d270 <osThreadCreate>
 8001306:	4603      	mov	r3, r0
 8001308:	4a29      	ldr	r2, [pc, #164]	@ (80013b0 <MX_FREERTOS_Init+0xec>)
 800130a:	6013      	str	r3, [r2, #0]

  /* definition and creation of displayTask */
  osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 1024);
 800130c:	4b29      	ldr	r3, [pc, #164]	@ (80013b4 <MX_FREERTOS_Init+0xf0>)
 800130e:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001312:	461d      	mov	r5, r3
 8001314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001318:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800131c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 8001320:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f00b ffa2 	bl	800d270 <osThreadCreate>
 800132c:	4603      	mov	r3, r0
 800132e:	4a22      	ldr	r2, [pc, #136]	@ (80013b8 <MX_FREERTOS_Init+0xf4>)
 8001330:	6013      	str	r3, [r2, #0]

  /* definition and creation of joystickTask */
  osThreadDef(joystickTask, StartJoystickTask, osPriorityAboveNormal, 0, 128);
 8001332:	4b22      	ldr	r3, [pc, #136]	@ (80013bc <MX_FREERTOS_Init+0xf8>)
 8001334:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001338:	461d      	mov	r5, r3
 800133a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800133c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800133e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001342:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  joystickTaskHandle = osThreadCreate(osThread(joystickTask), NULL);
 8001346:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f00b ff8f 	bl	800d270 <osThreadCreate>
 8001352:	4603      	mov	r3, r0
 8001354:	4a1a      	ldr	r2, [pc, #104]	@ (80013c0 <MX_FREERTOS_Init+0xfc>)
 8001356:	6013      	str	r3, [r2, #0]

  /* definition and creation of manageBodyParts */
  osThreadDef(manageBodyParts, StartManageBodyParts, osPriorityAboveNormal, 0, 128);
 8001358:	4b1a      	ldr	r3, [pc, #104]	@ (80013c4 <MX_FREERTOS_Init+0x100>)
 800135a:	f107 0420 	add.w	r4, r7, #32
 800135e:	461d      	mov	r5, r3
 8001360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001364:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001368:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  manageBodyPartsHandle = osThreadCreate(osThread(manageBodyParts), NULL);
 800136c:	f107 0320 	add.w	r3, r7, #32
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f00b ff7c 	bl	800d270 <osThreadCreate>
 8001378:	4603      	mov	r3, r0
 800137a:	4a13      	ldr	r2, [pc, #76]	@ (80013c8 <MX_FREERTOS_Init+0x104>)
 800137c:	6013      	str	r3, [r2, #0]

  /* definition and creation of tsHandlerTask */
  osThreadDef(tsHandlerTask, StartTsHandlerTask, osPriorityHigh, 0, 512);
 800137e:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <MX_FREERTOS_Init+0x108>)
 8001380:	1d3c      	adds	r4, r7, #4
 8001382:	461d      	mov	r5, r3
 8001384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001388:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800138c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tsHandlerTaskHandle = osThreadCreate(osThread(tsHandlerTask), NULL);
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f00b ff6b 	bl	800d270 <osThreadCreate>
 800139a:	4603      	mov	r3, r0
 800139c:	4a0c      	ldr	r2, [pc, #48]	@ (80013d0 <MX_FREERTOS_Init+0x10c>)
 800139e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80013a0:	bf00      	nop
 80013a2:	3798      	adds	r7, #152	@ 0x98
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bdb0      	pop	{r4, r5, r7, pc}
 80013a8:	200003b4 	.word	0x200003b4
 80013ac:	08011324 	.word	0x08011324
 80013b0:	200003a0 	.word	0x200003a0
 80013b4:	0801134c 	.word	0x0801134c
 80013b8:	200003a4 	.word	0x200003a4
 80013bc:	08011378 	.word	0x08011378
 80013c0:	200003a8 	.word	0x200003a8
 80013c4:	080113a4 	.word	0x080113a4
 80013c8:	200003ac 	.word	0x200003ac
 80013cc:	080113d0 	.word	0x080113d0
 80013d0:	200003b0 	.word	0x200003b0

080013d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80013dc:	2001      	movs	r0, #1
 80013de:	f00b ff93 	bl	800d308 <osDelay>
 80013e2:	e7fb      	b.n	80013dc <StartDefaultTask+0x8>

080013e4 <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void const * argument)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0d0      	sub	sp, #320	@ 0x140
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013ee:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80013f2:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDisplayTask */
  /* Infinite loop */
  for(;;)
  {
    if ((gameOver || gamePaused || !gameStarted) && !lastMove) {
 80013f4:	4bc0      	ldr	r3, [pc, #768]	@ (80016f8 <StartDisplayTask+0x314>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d107      	bne.n	800140c <StartDisplayTask+0x28>
 80013fc:	4bbf      	ldr	r3, [pc, #764]	@ (80016fc <StartDisplayTask+0x318>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d103      	bne.n	800140c <StartDisplayTask+0x28>
 8001404:	4bbe      	ldr	r3, [pc, #760]	@ (8001700 <StartDisplayTask+0x31c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d114      	bne.n	8001436 <StartDisplayTask+0x52>
 800140c:	4bbd      	ldr	r3, [pc, #756]	@ (8001704 <StartDisplayTask+0x320>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d110      	bne.n	8001436 <StartDisplayTask+0x52>
      xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8001414:	4bbc      	ldr	r3, [pc, #752]	@ (8001708 <StartDisplayTask+0x324>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800141c:	4618      	mov	r0, r3
 800141e:	f00c fd67 	bl	800def0 <xQueueSemaphoreTake>
      displayGameStatus();
 8001422:	f000 ff7b 	bl	800231c <displayGameStatus>
      xSemaphoreGive(displayMutexHandle);
 8001426:	4bb8      	ldr	r3, [pc, #736]	@ (8001708 <StartDisplayTask+0x324>)
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	2300      	movs	r3, #0
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	f00c fac8 	bl	800d9c4 <xQueueGenericSend>
 8001434:	e223      	b.n	800187e <StartDisplayTask+0x49a>
    }
    else {
      // On convertit la direction en texte
      char directionText[100];
      switch (direction) {
 8001436:	4bb5      	ldr	r3, [pc, #724]	@ (800170c <StartDisplayTask+0x328>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d826      	bhi.n	800148c <StartDisplayTask+0xa8>
 800143e:	a201      	add	r2, pc, #4	@ (adr r2, 8001444 <StartDisplayTask+0x60>)
 8001440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001444:	08001455 	.word	0x08001455
 8001448:	08001463 	.word	0x08001463
 800144c:	08001471 	.word	0x08001471
 8001450:	0800147f 	.word	0x0800147f
        case Up:
          sprintf(directionText, (char *)"Direction: Up   ");
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	49ad      	ldr	r1, [pc, #692]	@ (8001710 <StartDisplayTask+0x32c>)
 800145a:	4618      	mov	r0, r3
 800145c:	f00e fe46 	bl	80100ec <siprintf>
          break;
 8001460:	e014      	b.n	800148c <StartDisplayTask+0xa8>
        case Down:
          sprintf(directionText, (char *)"Direction: Down ");
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	49ab      	ldr	r1, [pc, #684]	@ (8001714 <StartDisplayTask+0x330>)
 8001468:	4618      	mov	r0, r3
 800146a:	f00e fe3f 	bl	80100ec <siprintf>
          break;
 800146e:	e00d      	b.n	800148c <StartDisplayTask+0xa8>
        case Left:
          sprintf(directionText, (char *)"Direction: Left ");
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	49a8      	ldr	r1, [pc, #672]	@ (8001718 <StartDisplayTask+0x334>)
 8001476:	4618      	mov	r0, r3
 8001478:	f00e fe38 	bl	80100ec <siprintf>
          break;
 800147c:	e006      	b.n	800148c <StartDisplayTask+0xa8>
        case Right:
          sprintf(directionText, (char *)"Direction: Right");
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	49a6      	ldr	r1, [pc, #664]	@ (800171c <StartDisplayTask+0x338>)
 8001484:	4618      	mov	r0, r3
 8001486:	f00e fe31 	bl	80100ec <siprintf>
          break;
 800148a:	bf00      	nop
      }
      // On convertit le score en texte
      char scoreText[100];
      sprintf(scoreText, (char *)"Score: %d", snakeSize);
 800148c:	4ba4      	ldr	r3, [pc, #656]	@ (8001720 <StartDisplayTask+0x33c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001496:	49a3      	ldr	r1, [pc, #652]	@ (8001724 <StartDisplayTask+0x340>)
 8001498:	4618      	mov	r0, r3
 800149a:	f00e fe27 	bl	80100ec <siprintf>

      // On convertit la vitesse en texte
      char speedText[100];
      sprintf(speedText, (char *)"Speed: %d Hz", speed);
 800149e:	4ba2      	ldr	r3, [pc, #648]	@ (8001728 <StartDisplayTask+0x344>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014a8:	49a0      	ldr	r1, [pc, #640]	@ (800172c <StartDisplayTask+0x348>)
 80014aa:	4618      	mov	r0, r3
 80014ac:	f00e fe1e 	bl	80100ec <siprintf>

      xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 80014b0:	4b95      	ldr	r3, [pc, #596]	@ (8001708 <StartDisplayTask+0x324>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014b8:	4618      	mov	r0, r3
 80014ba:	f00c fd19 	bl	800def0 <xQueueSemaphoreTake>
      BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 80014be:	489c      	ldr	r0, [pc, #624]	@ (8001730 <StartDisplayTask+0x34c>)
 80014c0:	f002 fcda 	bl	8003e78 <BSP_LCD_SetTextColor>
      BSP_LCD_DrawHLine(0, 8*32, BSP_LCD_GetXSize());
 80014c4:	f002 fc40 	bl	8003d48 <BSP_LCD_GetXSize>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014d2:	2000      	movs	r0, #0
 80014d4:	f002 fe50 	bl	8004178 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(0, 8*32 + 1, BSP_LCD_GetXSize());
 80014d8:	f002 fc36 	bl	8003d48 <BSP_LCD_GetXSize>
 80014dc:	4603      	mov	r3, r0
 80014de:	b29b      	uxth	r3, r3
 80014e0:	461a      	mov	r2, r3
 80014e2:	f240 1101 	movw	r1, #257	@ 0x101
 80014e6:	2000      	movs	r0, #0
 80014e8:	f002 fe46 	bl	8004178 <BSP_LCD_DrawHLine>

      // On affiche la direction, le score et la vitesse
      BSP_LCD_DisplayStringAt(0, 8*32 + 2, (uint8_t *)directionText, LEFT_MODE);
 80014ec:	f107 020c 	add.w	r2, r7, #12
 80014f0:	2303      	movs	r3, #3
 80014f2:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80014f6:	2000      	movs	r0, #0
 80014f8:	f002 fd76 	bl	8003fe8 <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(200, 8*32 + 2, (uint8_t *)scoreText, LEFT_MODE);
 80014fc:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8001500:	2303      	movs	r3, #3
 8001502:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001506:	20c8      	movs	r0, #200	@ 0xc8
 8001508:	f002 fd6e 	bl	8003fe8 <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(350, 8*32 + 2, (uint8_t *)speedText, LEFT_MODE);
 800150c:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8001510:	2303      	movs	r3, #3
 8001512:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001516:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 800151a:	f002 fd65 	bl	8003fe8 <BSP_LCD_DisplayStringAt>

      // On affiche la tête du snake
      if (!lastMove)
 800151e:	4b79      	ldr	r3, [pc, #484]	@ (8001704 <StartDisplayTask+0x320>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d13e      	bne.n	80015a4 <StartDisplayTask+0x1c0>
        switch (headPart) {
 8001526:	4b83      	ldr	r3, [pc, #524]	@ (8001734 <StartDisplayTask+0x350>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b03      	cmp	r3, #3
 800152c:	d83a      	bhi.n	80015a4 <StartDisplayTask+0x1c0>
 800152e:	a201      	add	r2, pc, #4	@ (adr r2, 8001534 <StartDisplayTask+0x150>)
 8001530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001534:	0800155d 	.word	0x0800155d
 8001538:	08001545 	.word	0x08001545
 800153c:	08001575 	.word	0x08001575
 8001540:	0800158d 	.word	0x0800158d
          case HeadBottom:
            BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_bottom_81CD4B_bmp);
 8001544:	4b7c      	ldr	r3, [pc, #496]	@ (8001738 <StartDisplayTask+0x354>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	015b      	lsls	r3, r3, #5
 800154a:	4618      	mov	r0, r3
 800154c:	4b7a      	ldr	r3, [pc, #488]	@ (8001738 <StartDisplayTask+0x354>)
 800154e:	785b      	ldrb	r3, [r3, #1]
 8001550:	015b      	lsls	r3, r3, #5
 8001552:	4a7a      	ldr	r2, [pc, #488]	@ (800173c <StartDisplayTask+0x358>)
 8001554:	4619      	mov	r1, r3
 8001556:	f002 feb5 	bl	80042c4 <BSP_LCD_DrawBitmap>
            break;
 800155a:	e023      	b.n	80015a4 <StartDisplayTask+0x1c0>
          case HeadTop:
            BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_top_81CD4B_bmp);
 800155c:	4b76      	ldr	r3, [pc, #472]	@ (8001738 <StartDisplayTask+0x354>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	015b      	lsls	r3, r3, #5
 8001562:	4618      	mov	r0, r3
 8001564:	4b74      	ldr	r3, [pc, #464]	@ (8001738 <StartDisplayTask+0x354>)
 8001566:	785b      	ldrb	r3, [r3, #1]
 8001568:	015b      	lsls	r3, r3, #5
 800156a:	4a75      	ldr	r2, [pc, #468]	@ (8001740 <StartDisplayTask+0x35c>)
 800156c:	4619      	mov	r1, r3
 800156e:	f002 fea9 	bl	80042c4 <BSP_LCD_DrawBitmap>
            break;
 8001572:	e017      	b.n	80015a4 <StartDisplayTask+0x1c0>
          case HeadLeft:
            BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_left_81CD4B_bmp);
 8001574:	4b70      	ldr	r3, [pc, #448]	@ (8001738 <StartDisplayTask+0x354>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	015b      	lsls	r3, r3, #5
 800157a:	4618      	mov	r0, r3
 800157c:	4b6e      	ldr	r3, [pc, #440]	@ (8001738 <StartDisplayTask+0x354>)
 800157e:	785b      	ldrb	r3, [r3, #1]
 8001580:	015b      	lsls	r3, r3, #5
 8001582:	4a70      	ldr	r2, [pc, #448]	@ (8001744 <StartDisplayTask+0x360>)
 8001584:	4619      	mov	r1, r3
 8001586:	f002 fe9d 	bl	80042c4 <BSP_LCD_DrawBitmap>
            break;
 800158a:	e00b      	b.n	80015a4 <StartDisplayTask+0x1c0>
          case HeadRight:
            BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_right_81CD4B_bmp);
 800158c:	4b6a      	ldr	r3, [pc, #424]	@ (8001738 <StartDisplayTask+0x354>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	015b      	lsls	r3, r3, #5
 8001592:	4618      	mov	r0, r3
 8001594:	4b68      	ldr	r3, [pc, #416]	@ (8001738 <StartDisplayTask+0x354>)
 8001596:	785b      	ldrb	r3, [r3, #1]
 8001598:	015b      	lsls	r3, r3, #5
 800159a:	4a6b      	ldr	r2, [pc, #428]	@ (8001748 <StartDisplayTask+0x364>)
 800159c:	4619      	mov	r1, r3
 800159e:	f002 fe91 	bl	80042c4 <BSP_LCD_DrawBitmap>
            break;
 80015a2:	bf00      	nop
        }

      // On affiche le corps du snake
      for (int i = 0; i < snakeSize; i++) {
 80015a4:	2300      	movs	r3, #0
 80015a6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80015aa:	e08e      	b.n	80016ca <StartDisplayTask+0x2e6>
        switch (snakeBodyParts[i]) {
 80015ac:	4a67      	ldr	r2, [pc, #412]	@ (800174c <StartDisplayTask+0x368>)
 80015ae:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80015b2:	4413      	add	r3, r2
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b05      	cmp	r3, #5
 80015b8:	f200 8082 	bhi.w	80016c0 <StartDisplayTask+0x2dc>
 80015bc:	a201      	add	r2, pc, #4	@ (adr r2, 80015c4 <StartDisplayTask+0x1e0>)
 80015be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c2:	bf00      	nop
 80015c4:	080015dd 	.word	0x080015dd
 80015c8:	08001603 	.word	0x08001603
 80015cc:	08001629 	.word	0x08001629
 80015d0:	0800164f 	.word	0x0800164f
 80015d4:	08001675 	.word	0x08001675
 80015d8:	0800169b 	.word	0x0800169b
          case BottomLeft:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_left_81CD4B_bmp);
 80015dc:	4a5c      	ldr	r2, [pc, #368]	@ (8001750 <StartDisplayTask+0x36c>)
 80015de:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80015e2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	4618      	mov	r0, r3
 80015ea:	4a59      	ldr	r2, [pc, #356]	@ (8001750 <StartDisplayTask+0x36c>)
 80015ec:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4413      	add	r3, r2
 80015f4:	785b      	ldrb	r3, [r3, #1]
 80015f6:	015b      	lsls	r3, r3, #5
 80015f8:	4a56      	ldr	r2, [pc, #344]	@ (8001754 <StartDisplayTask+0x370>)
 80015fa:	4619      	mov	r1, r3
 80015fc:	f002 fe62 	bl	80042c4 <BSP_LCD_DrawBitmap>
            break;
 8001600:	e05e      	b.n	80016c0 <StartDisplayTask+0x2dc>
          case BottomRight:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_right_81CD4B_bmp);
 8001602:	4a53      	ldr	r2, [pc, #332]	@ (8001750 <StartDisplayTask+0x36c>)
 8001604:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001608:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800160c:	015b      	lsls	r3, r3, #5
 800160e:	4618      	mov	r0, r3
 8001610:	4a4f      	ldr	r2, [pc, #316]	@ (8001750 <StartDisplayTask+0x36c>)
 8001612:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4413      	add	r3, r2
 800161a:	785b      	ldrb	r3, [r3, #1]
 800161c:	015b      	lsls	r3, r3, #5
 800161e:	4a4e      	ldr	r2, [pc, #312]	@ (8001758 <StartDisplayTask+0x374>)
 8001620:	4619      	mov	r1, r3
 8001622:	f002 fe4f 	bl	80042c4 <BSP_LCD_DrawBitmap>
            break;
 8001626:	e04b      	b.n	80016c0 <StartDisplayTask+0x2dc>
          case BottomTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_top_81CD4B_bmp);
 8001628:	4a49      	ldr	r2, [pc, #292]	@ (8001750 <StartDisplayTask+0x36c>)
 800162a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800162e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001632:	015b      	lsls	r3, r3, #5
 8001634:	4618      	mov	r0, r3
 8001636:	4a46      	ldr	r2, [pc, #280]	@ (8001750 <StartDisplayTask+0x36c>)
 8001638:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	785b      	ldrb	r3, [r3, #1]
 8001642:	015b      	lsls	r3, r3, #5
 8001644:	4a45      	ldr	r2, [pc, #276]	@ (800175c <StartDisplayTask+0x378>)
 8001646:	4619      	mov	r1, r3
 8001648:	f002 fe3c 	bl	80042c4 <BSP_LCD_DrawBitmap>
            break;
 800164c:	e038      	b.n	80016c0 <StartDisplayTask+0x2dc>
          case LeftRight:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_left_right_81CD4B_bmp);
 800164e:	4a40      	ldr	r2, [pc, #256]	@ (8001750 <StartDisplayTask+0x36c>)
 8001650:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001654:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001658:	015b      	lsls	r3, r3, #5
 800165a:	4618      	mov	r0, r3
 800165c:	4a3c      	ldr	r2, [pc, #240]	@ (8001750 <StartDisplayTask+0x36c>)
 800165e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	785b      	ldrb	r3, [r3, #1]
 8001668:	015b      	lsls	r3, r3, #5
 800166a:	4a3d      	ldr	r2, [pc, #244]	@ (8001760 <StartDisplayTask+0x37c>)
 800166c:	4619      	mov	r1, r3
 800166e:	f002 fe29 	bl	80042c4 <BSP_LCD_DrawBitmap>
            break;
 8001672:	e025      	b.n	80016c0 <StartDisplayTask+0x2dc>
          case LeftTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_left_top_81CD4B_bmp);
 8001674:	4a36      	ldr	r2, [pc, #216]	@ (8001750 <StartDisplayTask+0x36c>)
 8001676:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800167a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800167e:	015b      	lsls	r3, r3, #5
 8001680:	4618      	mov	r0, r3
 8001682:	4a33      	ldr	r2, [pc, #204]	@ (8001750 <StartDisplayTask+0x36c>)
 8001684:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	785b      	ldrb	r3, [r3, #1]
 800168e:	015b      	lsls	r3, r3, #5
 8001690:	4a34      	ldr	r2, [pc, #208]	@ (8001764 <StartDisplayTask+0x380>)
 8001692:	4619      	mov	r1, r3
 8001694:	f002 fe16 	bl	80042c4 <BSP_LCD_DrawBitmap>
            break;
 8001698:	e012      	b.n	80016c0 <StartDisplayTask+0x2dc>
          case RightTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_right_top_81CD4B_bmp);
 800169a:	4a2d      	ldr	r2, [pc, #180]	@ (8001750 <StartDisplayTask+0x36c>)
 800169c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016a0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80016a4:	015b      	lsls	r3, r3, #5
 80016a6:	4618      	mov	r0, r3
 80016a8:	4a29      	ldr	r2, [pc, #164]	@ (8001750 <StartDisplayTask+0x36c>)
 80016aa:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4413      	add	r3, r2
 80016b2:	785b      	ldrb	r3, [r3, #1]
 80016b4:	015b      	lsls	r3, r3, #5
 80016b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001768 <StartDisplayTask+0x384>)
 80016b8:	4619      	mov	r1, r3
 80016ba:	f002 fe03 	bl	80042c4 <BSP_LCD_DrawBitmap>
            break;
 80016be:	bf00      	nop
      for (int i = 0; i < snakeSize; i++) {
 80016c0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016c4:	3301      	adds	r3, #1
 80016c6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <StartDisplayTask+0x33c>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016d4:	4293      	cmp	r3, r2
 80016d6:	f6ff af69 	blt.w	80015ac <StartDisplayTask+0x1c8>
        }
      }

      // On affiche la queue du snake
      switch (tailPart) {
 80016da:	4b24      	ldr	r3, [pc, #144]	@ (800176c <StartDisplayTask+0x388>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d876      	bhi.n	80017d0 <StartDisplayTask+0x3ec>
 80016e2:	a201      	add	r2, pc, #4	@ (adr r2, 80016e8 <StartDisplayTask+0x304>)
 80016e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e8:	08001771 	.word	0x08001771
 80016ec:	08001789 	.word	0x08001789
 80016f0:	080017a1 	.word	0x080017a1
 80016f4:	080017b9 	.word	0x080017b9
 80016f8:	2000029c 	.word	0x2000029c
 80016fc:	20000298 	.word	0x20000298
 8001700:	20000294 	.word	0x20000294
 8001704:	200002a0 	.word	0x200002a0
 8001708:	200003b4 	.word	0x200003b4
 800170c:	20000210 	.word	0x20000210
 8001710:	080113ec 	.word	0x080113ec
 8001714:	08011400 	.word	0x08011400
 8001718:	08011414 	.word	0x08011414
 800171c:	08011428 	.word	0x08011428
 8001720:	2000028c 	.word	0x2000028c
 8001724:	0801143c 	.word	0x0801143c
 8001728:	20000000 	.word	0x20000000
 800172c:	08011448 	.word	0x08011448
 8001730:	ffa52a2a 	.word	0xffa52a2a
 8001734:	20000211 	.word	0x20000211
 8001738:	20000004 	.word	0x20000004
 800173c:	08014718 	.word	0x08014718
 8001740:	080153a4 	.word	0x080153a4
 8001744:	08016030 	.word	0x08016030
 8001748:	08016cbc 	.word	0x08016cbc
 800174c:	20000214 	.word	0x20000214
 8001750:	200002a4 	.word	0x200002a4
 8001754:	08012174 	.word	0x08012174
 8001758:	08012e00 	.word	0x08012e00
 800175c:	08013a8c 	.word	0x08013a8c
 8001760:	08017948 	.word	0x08017948
 8001764:	080185d4 	.word	0x080185d4
 8001768:	08019260 	.word	0x08019260
 800176c:	20000001 	.word	0x20000001
        case TailBottom:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_bottom_81CD4B_bmp);
 8001770:	4b45      	ldr	r3, [pc, #276]	@ (8001888 <StartDisplayTask+0x4a4>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	015b      	lsls	r3, r3, #5
 8001776:	4618      	mov	r0, r3
 8001778:	4b43      	ldr	r3, [pc, #268]	@ (8001888 <StartDisplayTask+0x4a4>)
 800177a:	785b      	ldrb	r3, [r3, #1]
 800177c:	015b      	lsls	r3, r3, #5
 800177e:	4a43      	ldr	r2, [pc, #268]	@ (800188c <StartDisplayTask+0x4a8>)
 8001780:	4619      	mov	r1, r3
 8001782:	f002 fd9f 	bl	80042c4 <BSP_LCD_DrawBitmap>
          break;
 8001786:	e023      	b.n	80017d0 <StartDisplayTask+0x3ec>
        case TailTop:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_top_81CD4B_bmp);
 8001788:	4b3f      	ldr	r3, [pc, #252]	@ (8001888 <StartDisplayTask+0x4a4>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	015b      	lsls	r3, r3, #5
 800178e:	4618      	mov	r0, r3
 8001790:	4b3d      	ldr	r3, [pc, #244]	@ (8001888 <StartDisplayTask+0x4a4>)
 8001792:	785b      	ldrb	r3, [r3, #1]
 8001794:	015b      	lsls	r3, r3, #5
 8001796:	4a3e      	ldr	r2, [pc, #248]	@ (8001890 <StartDisplayTask+0x4ac>)
 8001798:	4619      	mov	r1, r3
 800179a:	f002 fd93 	bl	80042c4 <BSP_LCD_DrawBitmap>
          break;
 800179e:	e017      	b.n	80017d0 <StartDisplayTask+0x3ec>
        case TailLeft:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_left_81CD4B_bmp);
 80017a0:	4b39      	ldr	r3, [pc, #228]	@ (8001888 <StartDisplayTask+0x4a4>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	015b      	lsls	r3, r3, #5
 80017a6:	4618      	mov	r0, r3
 80017a8:	4b37      	ldr	r3, [pc, #220]	@ (8001888 <StartDisplayTask+0x4a4>)
 80017aa:	785b      	ldrb	r3, [r3, #1]
 80017ac:	015b      	lsls	r3, r3, #5
 80017ae:	4a39      	ldr	r2, [pc, #228]	@ (8001894 <StartDisplayTask+0x4b0>)
 80017b0:	4619      	mov	r1, r3
 80017b2:	f002 fd87 	bl	80042c4 <BSP_LCD_DrawBitmap>
          break;
 80017b6:	e00b      	b.n	80017d0 <StartDisplayTask+0x3ec>
        case TailRight:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_right_81CD4B_bmp);
 80017b8:	4b33      	ldr	r3, [pc, #204]	@ (8001888 <StartDisplayTask+0x4a4>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	015b      	lsls	r3, r3, #5
 80017be:	4618      	mov	r0, r3
 80017c0:	4b31      	ldr	r3, [pc, #196]	@ (8001888 <StartDisplayTask+0x4a4>)
 80017c2:	785b      	ldrb	r3, [r3, #1]
 80017c4:	015b      	lsls	r3, r3, #5
 80017c6:	4a34      	ldr	r2, [pc, #208]	@ (8001898 <StartDisplayTask+0x4b4>)
 80017c8:	4619      	mov	r1, r3
 80017ca:	f002 fd7b 	bl	80042c4 <BSP_LCD_DrawBitmap>
          break;
 80017ce:	bf00      	nop
      }

      // On efface l'ancienne queue avec un carré vert
      if (!appleEaten && (snakeHeadPosition[0] != oldTailPosition[0] || snakeHeadPosition[1] != oldTailPosition[1])) {
 80017d0:	4b32      	ldr	r3, [pc, #200]	@ (800189c <StartDisplayTask+0x4b8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d11a      	bne.n	800180e <StartDisplayTask+0x42a>
 80017d8:	4b31      	ldr	r3, [pc, #196]	@ (80018a0 <StartDisplayTask+0x4bc>)
 80017da:	781a      	ldrb	r2, [r3, #0]
 80017dc:	4b31      	ldr	r3, [pc, #196]	@ (80018a4 <StartDisplayTask+0x4c0>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d105      	bne.n	80017f0 <StartDisplayTask+0x40c>
 80017e4:	4b2e      	ldr	r3, [pc, #184]	@ (80018a0 <StartDisplayTask+0x4bc>)
 80017e6:	785a      	ldrb	r2, [r3, #1]
 80017e8:	4b2e      	ldr	r3, [pc, #184]	@ (80018a4 <StartDisplayTask+0x4c0>)
 80017ea:	785b      	ldrb	r3, [r3, #1]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d00e      	beq.n	800180e <StartDisplayTask+0x42a>
        // On efface l'ancienne queue si:
        //    - le snake a avancé (la queue n'est pas restée à la même position)
        // ou
        //    - la tête n'est pas à la position de l'ancienne queue (le snake suit sa queue)
        BSP_LCD_SetTextColor((uint32_t)0xFF81CD4B); // 0xFF81CD4B
 80017f0:	482d      	ldr	r0, [pc, #180]	@ (80018a8 <StartDisplayTask+0x4c4>)
 80017f2:	f002 fb41 	bl	8003e78 <BSP_LCD_SetTextColor>
        BSP_LCD_FillRect(oldTailPosition[0]*32, oldTailPosition[1]*32, 32, 32);
 80017f6:	4b2b      	ldr	r3, [pc, #172]	@ (80018a4 <StartDisplayTask+0x4c0>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	015b      	lsls	r3, r3, #5
 80017fc:	b298      	uxth	r0, r3
 80017fe:	4b29      	ldr	r3, [pc, #164]	@ (80018a4 <StartDisplayTask+0x4c0>)
 8001800:	785b      	ldrb	r3, [r3, #1]
 8001802:	015b      	lsls	r3, r3, #5
 8001804:	b299      	uxth	r1, r3
 8001806:	2320      	movs	r3, #32
 8001808:	2220      	movs	r2, #32
 800180a:	f002 fe0d 	bl	8004428 <BSP_LCD_FillRect>
      }

      // On affiche les pommes
      for (int i = 0; i < NBApple; i++)
 800180e:	2300      	movs	r3, #0
 8001810:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001814:	e01f      	b.n	8001856 <StartDisplayTask+0x472>
        if (applePosition[i][0] != -1)
 8001816:	4a25      	ldr	r2, [pc, #148]	@ (80018ac <StartDisplayTask+0x4c8>)
 8001818:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800181c:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001820:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001824:	d012      	beq.n	800184c <StartDisplayTask+0x468>
          BSP_LCD_DrawBitmap(applePosition[i][0]*32, applePosition[i][1]*32, (uint8_t*)images_bmp_color_apple_81CD4B_bmp);
 8001826:	4a21      	ldr	r2, [pc, #132]	@ (80018ac <StartDisplayTask+0x4c8>)
 8001828:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800182c:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001830:	015b      	lsls	r3, r3, #5
 8001832:	4618      	mov	r0, r3
 8001834:	4a1d      	ldr	r2, [pc, #116]	@ (80018ac <StartDisplayTask+0x4c8>)
 8001836:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4413      	add	r3, r2
 800183e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001842:	015b      	lsls	r3, r3, #5
 8001844:	4a1a      	ldr	r2, [pc, #104]	@ (80018b0 <StartDisplayTask+0x4cc>)
 8001846:	4619      	mov	r1, r3
 8001848:	f002 fd3c 	bl	80042c4 <BSP_LCD_DrawBitmap>
      for (int i = 0; i < NBApple; i++)
 800184c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001850:	3301      	adds	r3, #1
 8001852:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001856:	2304      	movs	r3, #4
 8001858:	461a      	mov	r2, r3
 800185a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800185e:	4293      	cmp	r3, r2
 8001860:	dbd9      	blt.n	8001816 <StartDisplayTask+0x432>
      xSemaphoreGive(displayMutexHandle);
 8001862:	4b14      	ldr	r3, [pc, #80]	@ (80018b4 <StartDisplayTask+0x4d0>)
 8001864:	6818      	ldr	r0, [r3, #0]
 8001866:	2300      	movs	r3, #0
 8001868:	2200      	movs	r2, #0
 800186a:	2100      	movs	r1, #0
 800186c:	f00c f8aa 	bl	800d9c4 <xQueueGenericSend>

      if (lastMove)
 8001870:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <StartDisplayTask+0x4d4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d002      	beq.n	800187e <StartDisplayTask+0x49a>
        lastMove = 0;
 8001878:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <StartDisplayTask+0x4d4>)
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
    }

    osDelay(100);
 800187e:	2064      	movs	r0, #100	@ 0x64
 8001880:	f00b fd42 	bl	800d308 <osDelay>
    if ((gameOver || gamePaused || !gameStarted) && !lastMove) {
 8001884:	e5b6      	b.n	80013f4 <StartDisplayTask+0x10>
 8001886:	bf00      	nop
 8001888:	20000008 	.word	0x20000008
 800188c:	08019eec 	.word	0x08019eec
 8001890:	0801ab78 	.word	0x0801ab78
 8001894:	0801b804 	.word	0x0801b804
 8001898:	0801c490 	.word	0x0801c490
 800189c:	20000290 	.word	0x20000290
 80018a0:	20000004 	.word	0x20000004
 80018a4:	20000394 	.word	0x20000394
 80018a8:	ff81cd4b 	.word	0xff81cd4b
 80018ac:	20000398 	.word	0x20000398
 80018b0:	080114e8 	.word	0x080114e8
 80018b4:	200003b4 	.word	0x200003b4
 80018b8:	200002a0 	.word	0x200002a0

080018bc <StartJoystickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartJoystickTask */
void StartJoystickTask(void const * argument)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartJoystickTask */
  /* Infinite loop */
  for(;;)
  {
    sConfig.Channel = ADC_CHANNEL_8;
 80018c4:	4b30      	ldr	r3, [pc, #192]	@ (8001988 <StartJoystickTask+0xcc>)
 80018c6:	2208      	movs	r2, #8
 80018c8:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80018ca:	492f      	ldr	r1, [pc, #188]	@ (8001988 <StartJoystickTask+0xcc>)
 80018cc:	482f      	ldr	r0, [pc, #188]	@ (800198c <StartJoystickTask+0xd0>)
 80018ce:	f004 f9d5 	bl	8005c7c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc3);
 80018d2:	482e      	ldr	r0, [pc, #184]	@ (800198c <StartJoystickTask+0xd0>)
 80018d4:	f004 f86c 	bl	80059b0 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 80018d8:	bf00      	nop
 80018da:	2164      	movs	r1, #100	@ 0x64
 80018dc:	482b      	ldr	r0, [pc, #172]	@ (800198c <StartJoystickTask+0xd0>)
 80018de:	f004 f935 	bl	8005b4c <HAL_ADC_PollForConversion>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f8      	bne.n	80018da <StartJoystickTask+0x1e>
	joystick_v = HAL_ADC_GetValue(&hadc3);
 80018e8:	4828      	ldr	r0, [pc, #160]	@ (800198c <StartJoystickTask+0xd0>)
 80018ea:	f004 f9ba 	bl	8005c62 <HAL_ADC_GetValue>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4a27      	ldr	r2, [pc, #156]	@ (8001990 <StartJoystickTask+0xd4>)
 80018f2:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start(&hadc1);
 80018f4:	4827      	ldr	r0, [pc, #156]	@ (8001994 <StartJoystickTask+0xd8>)
 80018f6:	f004 f85b 	bl	80059b0 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 80018fa:	bf00      	nop
 80018fc:	2164      	movs	r1, #100	@ 0x64
 80018fe:	4825      	ldr	r0, [pc, #148]	@ (8001994 <StartJoystickTask+0xd8>)
 8001900:	f004 f924 	bl	8005b4c <HAL_ADC_PollForConversion>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f8      	bne.n	80018fc <StartJoystickTask+0x40>
	joystick_h = HAL_ADC_GetValue(&hadc1);
 800190a:	4822      	ldr	r0, [pc, #136]	@ (8001994 <StartJoystickTask+0xd8>)
 800190c:	f004 f9a9 	bl	8005c62 <HAL_ADC_GetValue>
 8001910:	4603      	mov	r3, r0
 8001912:	4a21      	ldr	r2, [pc, #132]	@ (8001998 <StartJoystickTask+0xdc>)
 8001914:	6013      	str	r3, [r2, #0]

    // max range of joystick is 0 to 4095

    if (joystick_v < 1000 && headPart != HeadTop) {
 8001916:	4b1e      	ldr	r3, [pc, #120]	@ (8001990 <StartJoystickTask+0xd4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800191e:	d207      	bcs.n	8001930 <StartJoystickTask+0x74>
 8001920:	4b1e      	ldr	r3, [pc, #120]	@ (800199c <StartJoystickTask+0xe0>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <StartJoystickTask+0x74>
      direction = Down;
 8001928:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <StartJoystickTask+0xe4>)
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
 800192e:	e027      	b.n	8001980 <StartJoystickTask+0xc4>
    } else if (joystick_v > 3000 && headPart != HeadBottom) {
 8001930:	4b17      	ldr	r3, [pc, #92]	@ (8001990 <StartJoystickTask+0xd4>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001938:	4293      	cmp	r3, r2
 800193a:	d907      	bls.n	800194c <StartJoystickTask+0x90>
 800193c:	4b17      	ldr	r3, [pc, #92]	@ (800199c <StartJoystickTask+0xe0>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d003      	beq.n	800194c <StartJoystickTask+0x90>
      direction = Up;
 8001944:	4b16      	ldr	r3, [pc, #88]	@ (80019a0 <StartJoystickTask+0xe4>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
 800194a:	e019      	b.n	8001980 <StartJoystickTask+0xc4>
    } else if (joystick_h < 1000 && headPart != HeadLeft) {
 800194c:	4b12      	ldr	r3, [pc, #72]	@ (8001998 <StartJoystickTask+0xdc>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001954:	d207      	bcs.n	8001966 <StartJoystickTask+0xaa>
 8001956:	4b11      	ldr	r3, [pc, #68]	@ (800199c <StartJoystickTask+0xe0>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d003      	beq.n	8001966 <StartJoystickTask+0xaa>
      direction = Right;
 800195e:	4b10      	ldr	r3, [pc, #64]	@ (80019a0 <StartJoystickTask+0xe4>)
 8001960:	2203      	movs	r2, #3
 8001962:	701a      	strb	r2, [r3, #0]
 8001964:	e00c      	b.n	8001980 <StartJoystickTask+0xc4>
    } else if (joystick_h > 3000 && headPart != HeadRight) {
 8001966:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <StartJoystickTask+0xdc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800196e:	4293      	cmp	r3, r2
 8001970:	d906      	bls.n	8001980 <StartJoystickTask+0xc4>
 8001972:	4b0a      	ldr	r3, [pc, #40]	@ (800199c <StartJoystickTask+0xe0>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d002      	beq.n	8001980 <StartJoystickTask+0xc4>
      direction = Left;
 800197a:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <StartJoystickTask+0xe4>)
 800197c:	2202      	movs	r2, #2
 800197e:	701a      	strb	r2, [r3, #0]
    }
    osDelay(10);
 8001980:	200a      	movs	r0, #10
 8001982:	f00b fcc1 	bl	800d308 <osDelay>
    sConfig.Channel = ADC_CHANNEL_8;
 8001986:	e79d      	b.n	80018c4 <StartJoystickTask+0x8>
 8001988:	20000708 	.word	0x20000708
 800198c:	20000118 	.word	0x20000118
 8001990:	20000208 	.word	0x20000208
 8001994:	200000d0 	.word	0x200000d0
 8001998:	2000020c 	.word	0x2000020c
 800199c:	20000211 	.word	0x20000211
 80019a0:	20000210 	.word	0x20000210

080019a4 <StartManageBodyParts>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManageBodyParts */
void StartManageBodyParts(void const * argument)
{
 80019a4:	b5b0      	push	{r4, r5, r7, lr}
 80019a6:	b08e      	sub	sp, #56	@ 0x38
 80019a8:	af02      	add	r7, sp, #8
 80019aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManageBodyParts */
  TickType_t xLastWakeTime = xTaskGetTickCount();
 80019ac:	f00d f8fa 	bl	800eba4 <xTaskGetTickCount>
 80019b0:	4603      	mov	r3, r0
 80019b2:	613b      	str	r3, [r7, #16]
  const TickType_t delay = pdMS_TO_TICKS(1000. / speed);
 80019b4:	4b7f      	ldr	r3, [pc, #508]	@ (8001bb4 <StartManageBodyParts+0x210>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fdcb 	bl	8000554 <__aeabi_i2d>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	f04f 0000 	mov.w	r0, #0
 80019c6:	497c      	ldr	r1, [pc, #496]	@ (8001bb8 <StartManageBodyParts+0x214>)
 80019c8:	f7fe ff58 	bl	800087c <__aeabi_ddiv>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7ff f83a 	bl	8000a4c <__aeabi_d2uiz>
 80019d8:	4603      	mov	r3, r0
 80019da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	4a76      	ldr	r2, [pc, #472]	@ (8001bbc <StartManageBodyParts+0x218>)
 80019e4:	fba2 2303 	umull	r2, r3, r2, r3
 80019e8:	099b      	lsrs	r3, r3, #6
 80019ea:	61bb      	str	r3, [r7, #24]

  /* Infinite loop */
  for(;;)
  {
    if (!gameOver && !gamePaused && gameStarted) {
 80019ec:	4b74      	ldr	r3, [pc, #464]	@ (8001bc0 <StartManageBodyParts+0x21c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f040 82ad 	bne.w	8001f50 <StartManageBodyParts+0x5ac>
 80019f6:	4b73      	ldr	r3, [pc, #460]	@ (8001bc4 <StartManageBodyParts+0x220>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f040 82a8 	bne.w	8001f50 <StartManageBodyParts+0x5ac>
 8001a00:	4b71      	ldr	r3, [pc, #452]	@ (8001bc8 <StartManageBodyParts+0x224>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 82a3 	beq.w	8001f50 <StartManageBodyParts+0x5ac>
      // Le jeu est en cours

      // On sauvegarde la position de la queue et de la tête
      oldTailPosition[0] = snakeTailPosition[0];
 8001a0a:	4b70      	ldr	r3, [pc, #448]	@ (8001bcc <StartManageBodyParts+0x228>)
 8001a0c:	781a      	ldrb	r2, [r3, #0]
 8001a0e:	4b70      	ldr	r3, [pc, #448]	@ (8001bd0 <StartManageBodyParts+0x22c>)
 8001a10:	701a      	strb	r2, [r3, #0]
      oldTailPosition[1] = snakeTailPosition[1];
 8001a12:	4b6e      	ldr	r3, [pc, #440]	@ (8001bcc <StartManageBodyParts+0x228>)
 8001a14:	785a      	ldrb	r2, [r3, #1]
 8001a16:	4b6e      	ldr	r3, [pc, #440]	@ (8001bd0 <StartManageBodyParts+0x22c>)
 8001a18:	705a      	strb	r2, [r3, #1]

      uint8_t oldHeadPosition[2];
      oldHeadPosition[0] = snakeHeadPosition[0];
 8001a1a:	4b6e      	ldr	r3, [pc, #440]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	733b      	strb	r3, [r7, #12]
      oldHeadPosition[1] = snakeHeadPosition[1];
 8001a20:	4b6c      	ldr	r3, [pc, #432]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a22:	785b      	ldrb	r3, [r3, #1]
 8001a24:	737b      	strb	r3, [r7, #13]


      // On met a jour la position de la tête en fonction de la direction
      switch (direction) {
 8001a26:	4b6c      	ldr	r3, [pc, #432]	@ (8001bd8 <StartManageBodyParts+0x234>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d832      	bhi.n	8001a94 <StartManageBodyParts+0xf0>
 8001a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a34 <StartManageBodyParts+0x90>)
 8001a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a34:	08001a45 	.word	0x08001a45
 8001a38:	08001a59 	.word	0x08001a59
 8001a3c:	08001a6d 	.word	0x08001a6d
 8001a40:	08001a81 	.word	0x08001a81
        case Up:
          headPart = HeadTop;
 8001a44:	4b65      	ldr	r3, [pc, #404]	@ (8001bdc <StartManageBodyParts+0x238>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[1]--;
 8001a4a:	4b62      	ldr	r3, [pc, #392]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a4c:	785b      	ldrb	r3, [r3, #1]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4b60      	ldr	r3, [pc, #384]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a54:	705a      	strb	r2, [r3, #1]
          break;
 8001a56:	e01d      	b.n	8001a94 <StartManageBodyParts+0xf0>
        case Down:
          headPart = HeadBottom;
 8001a58:	4b60      	ldr	r3, [pc, #384]	@ (8001bdc <StartManageBodyParts+0x238>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[1]++;
 8001a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a60:	785b      	ldrb	r3, [r3, #1]
 8001a62:	3301      	adds	r3, #1
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4b5b      	ldr	r3, [pc, #364]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a68:	705a      	strb	r2, [r3, #1]
          break;
 8001a6a:	e013      	b.n	8001a94 <StartManageBodyParts+0xf0>
        case Left:
          headPart = HeadLeft;
 8001a6c:	4b5b      	ldr	r3, [pc, #364]	@ (8001bdc <StartManageBodyParts+0x238>)
 8001a6e:	2202      	movs	r2, #2
 8001a70:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[0]--;
 8001a72:	4b58      	ldr	r3, [pc, #352]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4b56      	ldr	r3, [pc, #344]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a7c:	701a      	strb	r2, [r3, #0]
          break;
 8001a7e:	e009      	b.n	8001a94 <StartManageBodyParts+0xf0>
        case Right:
          headPart = HeadRight;
 8001a80:	4b56      	ldr	r3, [pc, #344]	@ (8001bdc <StartManageBodyParts+0x238>)
 8001a82:	2203      	movs	r2, #3
 8001a84:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[0]++;
 8001a86:	4b53      	ldr	r3, [pc, #332]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4b51      	ldr	r3, [pc, #324]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a90:	701a      	strb	r2, [r3, #0]
          break;
 8001a92:	bf00      	nop
      }

      // on vérifie si on est mort
      if (snakeHeadPosition[0] >= gridSizeX || snakeHeadPosition[1] >= gridSizeY || snakeHeadPosition[0] < 0 || snakeHeadPosition[1] < 0) {
 8001a94:	4b4f      	ldr	r3, [pc, #316]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	220f      	movs	r2, #15
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d204      	bcs.n	8001aa8 <StartManageBodyParts+0x104>
 8001a9e:	4b4d      	ldr	r3, [pc, #308]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001aa0:	785b      	ldrb	r3, [r3, #1]
 8001aa2:	2208      	movs	r2, #8
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d306      	bcc.n	8001ab6 <StartManageBodyParts+0x112>
        // On a touché un mur
        gameOver = 1;
 8001aa8:	4b45      	ldr	r3, [pc, #276]	@ (8001bc0 <StartManageBodyParts+0x21c>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]
        lastMove = 1;
 8001aae:	4b4c      	ldr	r3, [pc, #304]	@ (8001be0 <StartManageBodyParts+0x23c>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	e022      	b.n	8001afc <StartManageBodyParts+0x158>
      }
      else  {
        for (int i = 0; i < snakeSize; i++) {
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001aba:	e019      	b.n	8001af0 <StartManageBodyParts+0x14c>
          if (snakeHeadPosition[0] == snakeBodyPosition[i][0] && snakeHeadPosition[1] == snakeBodyPosition[i][1]) {
 8001abc:	4b45      	ldr	r3, [pc, #276]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001abe:	781a      	ldrb	r2, [r3, #0]
 8001ac0:	4948      	ldr	r1, [pc, #288]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ac4:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d10e      	bne.n	8001aea <StartManageBodyParts+0x146>
 8001acc:	4b41      	ldr	r3, [pc, #260]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001ace:	785a      	ldrb	r2, [r3, #1]
 8001ad0:	4944      	ldr	r1, [pc, #272]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	440b      	add	r3, r1
 8001ad8:	785b      	ldrb	r3, [r3, #1]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d105      	bne.n	8001aea <StartManageBodyParts+0x146>
            // On a touché notre corps
            gameOver = 1;
 8001ade:	4b38      	ldr	r3, [pc, #224]	@ (8001bc0 <StartManageBodyParts+0x21c>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
            lastMove = 1;
 8001ae4:	4b3e      	ldr	r3, [pc, #248]	@ (8001be0 <StartManageBodyParts+0x23c>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < snakeSize; i++) {
 8001aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aec:	3301      	adds	r3, #1
 8001aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001af0:	4b3d      	ldr	r3, [pc, #244]	@ (8001be8 <StartManageBodyParts+0x244>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001af8:	4293      	cmp	r3, r2
 8001afa:	dbdf      	blt.n	8001abc <StartManageBodyParts+0x118>
      }
      // Note: Inutile de vérifier si on a touché la queue. Celle ci n'a pas encore avancé.

      
      // On vérifie si on a mangé la pomme avant de bouger le corps et la queue
      appleEaten = 0;
 8001afc:	4b3b      	ldr	r3, [pc, #236]	@ (8001bec <StartManageBodyParts+0x248>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < NBApple; i++) {
 8001b02:	2300      	movs	r3, #0
 8001b04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b06:	e0fc      	b.n	8001d02 <StartManageBodyParts+0x35e>
        if (snakeHeadPosition[0] == applePosition[i][0] && snakeHeadPosition[1] == applePosition[i][1]) {
 8001b08:	4b32      	ldr	r3, [pc, #200]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4a38      	ldr	r2, [pc, #224]	@ (8001bf0 <StartManageBodyParts+0x24c>)
 8001b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b12:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001b16:	4299      	cmp	r1, r3
 8001b18:	f040 80f0 	bne.w	8001cfc <StartManageBodyParts+0x358>
 8001b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001b1e:	785b      	ldrb	r3, [r3, #1]
 8001b20:	4619      	mov	r1, r3
 8001b22:	4a33      	ldr	r2, [pc, #204]	@ (8001bf0 <StartManageBodyParts+0x24c>)
 8001b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4413      	add	r3, r2
 8001b2a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001b2e:	4299      	cmp	r1, r3
 8001b30:	f040 80e4 	bne.w	8001cfc <StartManageBodyParts+0x358>
          snakeSize++;
 8001b34:	4b2c      	ldr	r3, [pc, #176]	@ (8001be8 <StartManageBodyParts+0x244>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001be8 <StartManageBodyParts+0x244>)
 8001b3e:	701a      	strb	r2, [r3, #0]
          appleEaten = 1;
 8001b40:	4b2a      	ldr	r3, [pc, #168]	@ (8001bec <StartManageBodyParts+0x248>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	601a      	str	r2, [r3, #0]

          // On ajoute un bodyPart à la queue
          for (int i = snakeSize - 1; i > 0; i--) {
 8001b46:	4b28      	ldr	r3, [pc, #160]	@ (8001be8 <StartManageBodyParts+0x244>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b4e:	e020      	b.n	8001b92 <StartManageBodyParts+0x1ee>
            snakeBodyParts[i] = snakeBodyParts[i - 1];
 8001b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b52:	3b01      	subs	r3, #1
 8001b54:	4a27      	ldr	r2, [pc, #156]	@ (8001bf4 <StartManageBodyParts+0x250>)
 8001b56:	5cd1      	ldrb	r1, [r2, r3]
 8001b58:	4a26      	ldr	r2, [pc, #152]	@ (8001bf4 <StartManageBodyParts+0x250>)
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5c:	4413      	add	r3, r2
 8001b5e:	460a      	mov	r2, r1
 8001b60:	701a      	strb	r2, [r3, #0]
            snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8001b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b64:	3b01      	subs	r3, #1
 8001b66:	4a1f      	ldr	r2, [pc, #124]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001b68:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b70:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
            snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8001b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b76:	3b01      	subs	r3, #1
 8001b78:	4a1a      	ldr	r2, [pc, #104]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	7859      	ldrb	r1, [r3, #1]
 8001b80:	4a18      	ldr	r2, [pc, #96]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	460a      	mov	r2, r1
 8001b8a:	705a      	strb	r2, [r3, #1]
          for (int i = snakeSize - 1; i > 0; i--) {
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	dcdb      	bgt.n	8001b50 <StartManageBodyParts+0x1ac>

          // On met a jour le premier bodyPart
          uint8_t backX;
          uint8_t backY;

          if (snakeSize > 1) {
 8001b98:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <StartManageBodyParts+0x244>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d92b      	bls.n	8001bf8 <StartManageBodyParts+0x254>
            backX = snakeBodyPosition[0][0];
 8001ba0:	4b10      	ldr	r3, [pc, #64]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            backY = snakeBodyPosition[0][1];
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001baa:	785b      	ldrb	r3, [r3, #1]
 8001bac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001bb0:	e02a      	b.n	8001c08 <StartManageBodyParts+0x264>
 8001bb2:	bf00      	nop
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	408f4000 	.word	0x408f4000
 8001bbc:	10624dd3 	.word	0x10624dd3
 8001bc0:	2000029c 	.word	0x2000029c
 8001bc4:	20000298 	.word	0x20000298
 8001bc8:	20000294 	.word	0x20000294
 8001bcc:	20000008 	.word	0x20000008
 8001bd0:	20000394 	.word	0x20000394
 8001bd4:	20000004 	.word	0x20000004
 8001bd8:	20000210 	.word	0x20000210
 8001bdc:	20000211 	.word	0x20000211
 8001be0:	200002a0 	.word	0x200002a0
 8001be4:	200002a4 	.word	0x200002a4
 8001be8:	2000028c 	.word	0x2000028c
 8001bec:	20000290 	.word	0x20000290
 8001bf0:	20000398 	.word	0x20000398
 8001bf4:	20000214 	.word	0x20000214
          }
          else {
            backX = snakeTailPosition[0];
 8001bf8:	4ba8      	ldr	r3, [pc, #672]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            backY = snakeTailPosition[1];
 8001c00:	4ba6      	ldr	r3, [pc, #664]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001c02:	785b      	ldrb	r3, [r3, #1]
 8001c04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
          }

          // Trouve le type de bodyPart à mettre
          snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], backX, backY, oldHeadPosition[0], oldHeadPosition[1]);
 8001c08:	4ba5      	ldr	r3, [pc, #660]	@ (8001ea0 <StartManageBodyParts+0x4fc>)
 8001c0a:	7818      	ldrb	r0, [r3, #0]
 8001c0c:	4ba4      	ldr	r3, [pc, #656]	@ (8001ea0 <StartManageBodyParts+0x4fc>)
 8001c0e:	7859      	ldrb	r1, [r3, #1]
 8001c10:	7b3b      	ldrb	r3, [r7, #12]
 8001c12:	7b7a      	ldrb	r2, [r7, #13]
 8001c14:	f897 5022 	ldrb.w	r5, [r7, #34]	@ 0x22
 8001c18:	f897 4023 	ldrb.w	r4, [r7, #35]	@ 0x23
 8001c1c:	9201      	str	r2, [sp, #4]
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	462b      	mov	r3, r5
 8001c22:	4622      	mov	r2, r4
 8001c24:	f000 fa0c 	bl	8002040 <whatBodyPart>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4b9d      	ldr	r3, [pc, #628]	@ (8001ea4 <StartManageBodyParts+0x500>)
 8001c2e:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][0] = oldHeadPosition[0];
 8001c30:	7b3a      	ldrb	r2, [r7, #12]
 8001c32:	4b9d      	ldr	r3, [pc, #628]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001c34:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][1] = oldHeadPosition[1];
 8001c36:	7b7a      	ldrb	r2, [r7, #13]
 8001c38:	4b9b      	ldr	r3, [pc, #620]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001c3a:	705a      	strb	r2, [r3, #1]

          // Si on a de la place pour une nouvelle pomme
          uint8_t NBFreeCells = gridSizeX * gridSizeY - snakeSize - 1;
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	2308      	movs	r3, #8
 8001c40:	fb12 f303 	smulbb	r3, r2, r3
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4b99      	ldr	r3, [pc, #612]	@ (8001eac <StartManageBodyParts+0x508>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	75fb      	strb	r3, [r7, #23]
          if (NBFreeCells > NBApple) {
 8001c52:	2204      	movs	r2, #4
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d945      	bls.n	8001ce6 <StartManageBodyParts+0x342>
            // On génère une nouvelle pomme à une position aléatoire qui n'est pas sur le snake ou une autre pomme
            do {
              applePosition[i][0] = rand() % gridSizeX;
 8001c5a:	f00e f947 	bl	800feec <rand>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	220f      	movs	r2, #15
 8001c62:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c66:	fb01 f202 	mul.w	r2, r1, r2
 8001c6a:	1a9b      	subs	r3, r3, r2
 8001c6c:	b259      	sxtb	r1, r3
 8001c6e:	4a90      	ldr	r2, [pc, #576]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c72:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
              applePosition[i][1] = rand() % gridSizeY;
 8001c76:	f00e f939 	bl	800feec <rand>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2208      	movs	r2, #8
 8001c7e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c82:	fb01 f202 	mul.w	r2, r1, r2
 8001c86:	1a9b      	subs	r3, r3, r2
 8001c88:	b259      	sxtb	r1, r3
 8001c8a:	4a89      	ldr	r2, [pc, #548]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	460a      	mov	r2, r1
 8001c94:	705a      	strb	r2, [r3, #1]
            } while (isSnakePosition(applePosition[i][0], applePosition[i][1]) 
 8001c96:	4a86      	ldr	r2, [pc, #536]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c9a:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	4983      	ldr	r1, [pc, #524]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	f000 fa27 	bl	8002104 <isSnakePosition>
 8001cb6:	4603      	mov	r3, r0
                  || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1ce      	bne.n	8001c5a <StartManageBodyParts+0x2b6>
 8001cbc:	4a7c      	ldr	r2, [pc, #496]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cc0:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001cc4:	b2d8      	uxtb	r0, r3
 8001cc6:	4a7a      	ldr	r2, [pc, #488]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f000 fa5f 	bl	800219c <isApplePosition>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1ba      	bne.n	8001c5a <StartManageBodyParts+0x2b6>
 8001ce4:	e00a      	b.n	8001cfc <StartManageBodyParts+0x358>
          }
          else {
            applePosition[i][0] = -1;
 8001ce6:	4a72      	ldr	r2, [pc, #456]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cea:	21ff      	movs	r1, #255	@ 0xff
 8001cec:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
            applePosition[i][1] = -1;
 8001cf0:	4a6f      	ldr	r2, [pc, #444]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	22ff      	movs	r2, #255	@ 0xff
 8001cfa:	705a      	strb	r2, [r3, #1]
      for (int i = 0; i < NBApple; i++) {
 8001cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cfe:	3301      	adds	r3, #1
 8001d00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d02:	2304      	movs	r3, #4
 8001d04:	461a      	mov	r2, r3
 8001d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	f6ff aefd 	blt.w	8001b08 <StartManageBodyParts+0x164>
        }
      }


      // On n'a pas mangé de pomme on avance le corps et la queue sans ajouter de bodyPart
      if (!appleEaten) {
 8001d0e:	4b69      	ldr	r3, [pc, #420]	@ (8001eb4 <StartManageBodyParts+0x510>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f040 811c 	bne.w	8001f50 <StartManageBodyParts+0x5ac>
        // on met a jour la position de la queue
        if (snakeSize > 0) {
 8001d18:	4b64      	ldr	r3, [pc, #400]	@ (8001eac <StartManageBodyParts+0x508>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d011      	beq.n	8001d44 <StartManageBodyParts+0x3a0>
          snakeTailPosition[0] = snakeBodyPosition[snakeSize - 1][0];
 8001d20:	4b62      	ldr	r3, [pc, #392]	@ (8001eac <StartManageBodyParts+0x508>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	3b01      	subs	r3, #1
 8001d26:	4a60      	ldr	r2, [pc, #384]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001d28:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001d2c:	4b5b      	ldr	r3, [pc, #364]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001d2e:	701a      	strb	r2, [r3, #0]
          snakeTailPosition[1] = snakeBodyPosition[snakeSize - 1][1];
 8001d30:	4b5e      	ldr	r3, [pc, #376]	@ (8001eac <StartManageBodyParts+0x508>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	4a5c      	ldr	r2, [pc, #368]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	785a      	ldrb	r2, [r3, #1]
 8001d3e:	4b57      	ldr	r3, [pc, #348]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001d40:	705a      	strb	r2, [r3, #1]
 8001d42:	e005      	b.n	8001d50 <StartManageBodyParts+0x3ac>
        }
        else {
          snakeTailPosition[0] = oldHeadPosition[0];
 8001d44:	7b3a      	ldrb	r2, [r7, #12]
 8001d46:	4b55      	ldr	r3, [pc, #340]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001d48:	701a      	strb	r2, [r3, #0]
          snakeTailPosition[1] = oldHeadPosition[1];
 8001d4a:	7b7a      	ldrb	r2, [r7, #13]
 8001d4c:	4b53      	ldr	r3, [pc, #332]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001d4e:	705a      	strb	r2, [r3, #1]
        }


        // On avance le corps
        for (int i = snakeSize - 1; i > 0; i--) {
 8001d50:	4b56      	ldr	r3, [pc, #344]	@ (8001eac <StartManageBodyParts+0x508>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	e020      	b.n	8001d9c <StartManageBodyParts+0x3f8>
          snakeBodyParts[i] = snakeBodyParts[i - 1];
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	4a51      	ldr	r2, [pc, #324]	@ (8001ea4 <StartManageBodyParts+0x500>)
 8001d60:	5cd1      	ldrb	r1, [r2, r3]
 8001d62:	4a50      	ldr	r2, [pc, #320]	@ (8001ea4 <StartManageBodyParts+0x500>)
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	4413      	add	r3, r2
 8001d68:	460a      	mov	r2, r1
 8001d6a:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	4a4d      	ldr	r2, [pc, #308]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001d72:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001d76:	4a4c      	ldr	r2, [pc, #304]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
          snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3b01      	subs	r3, #1
 8001d82:	4a49      	ldr	r2, [pc, #292]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	7859      	ldrb	r1, [r3, #1]
 8001d8a:	4a47      	ldr	r2, [pc, #284]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	460a      	mov	r2, r1
 8001d94:	705a      	strb	r2, [r3, #1]
        for (int i = snakeSize - 1; i > 0; i--) {
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	dcdb      	bgt.n	8001d5a <StartManageBodyParts+0x3b6>
        }


        // On met a jour le corps
        if (snakeSize > 0) {
 8001da2:	4b42      	ldr	r3, [pc, #264]	@ (8001eac <StartManageBodyParts+0x508>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80b2 	beq.w	8001f10 <StartManageBodyParts+0x56c>
          // On trouve le type de bodyPart à mettre juste derrière la tête
          snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], snakeBodyPosition[0][0], snakeBodyPosition[0][1], oldHeadPosition[0], oldHeadPosition[1]);
 8001dac:	4b3c      	ldr	r3, [pc, #240]	@ (8001ea0 <StartManageBodyParts+0x4fc>)
 8001dae:	7818      	ldrb	r0, [r3, #0]
 8001db0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ea0 <StartManageBodyParts+0x4fc>)
 8001db2:	7859      	ldrb	r1, [r3, #1]
 8001db4:	4b3c      	ldr	r3, [pc, #240]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001db6:	781c      	ldrb	r4, [r3, #0]
 8001db8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001dba:	785d      	ldrb	r5, [r3, #1]
 8001dbc:	7b3b      	ldrb	r3, [r7, #12]
 8001dbe:	7b7a      	ldrb	r2, [r7, #13]
 8001dc0:	9201      	str	r2, [sp, #4]
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	462b      	mov	r3, r5
 8001dc6:	4622      	mov	r2, r4
 8001dc8:	f000 f93a 	bl	8002040 <whatBodyPart>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4b34      	ldr	r3, [pc, #208]	@ (8001ea4 <StartManageBodyParts+0x500>)
 8001dd2:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][0] = oldHeadPosition[0];
 8001dd4:	7b3a      	ldrb	r2, [r7, #12]
 8001dd6:	4b34      	ldr	r3, [pc, #208]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001dd8:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][1] = oldHeadPosition[1];
 8001dda:	7b7a      	ldrb	r2, [r7, #13]
 8001ddc:	4b32      	ldr	r3, [pc, #200]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001dde:	705a      	strb	r2, [r3, #1]

          // On met a jour le l'orientation de la queue
          switch (snakeBodyParts[snakeSize - 1]) {
 8001de0:	4b32      	ldr	r3, [pc, #200]	@ (8001eac <StartManageBodyParts+0x508>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	4a2f      	ldr	r2, [pc, #188]	@ (8001ea4 <StartManageBodyParts+0x500>)
 8001de8:	5cd3      	ldrb	r3, [r2, r3]
 8001dea:	2b05      	cmp	r3, #5
 8001dec:	f200 80b0 	bhi.w	8001f50 <StartManageBodyParts+0x5ac>
 8001df0:	a201      	add	r2, pc, #4	@ (adr r2, 8001df8 <StartManageBodyParts+0x454>)
 8001df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df6:	bf00      	nop
 8001df8:	08001e11 	.word	0x08001e11
 8001dfc:	08001e35 	.word	0x08001e35
 8001e00:	08001e59 	.word	0x08001e59
 8001e04:	08001e7f 	.word	0x08001e7f
 8001e08:	08001ec5 	.word	0x08001ec5
 8001e0c:	08001eeb 	.word	0x08001eeb
            case BottomLeft:
              // TailTop ou TailRight
              if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0]) {
 8001e10:	4b26      	ldr	r3, [pc, #152]	@ (8001eac <StartManageBodyParts+0x508>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	3b01      	subs	r3, #1
 8001e16:	4a24      	ldr	r2, [pc, #144]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001e18:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d103      	bne.n	8001e2c <StartManageBodyParts+0x488>
                tailPart = TailTop;
 8001e24:	4b24      	ldr	r3, [pc, #144]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailRight;
              }
              break;
 8001e2a:	e091      	b.n	8001f50 <StartManageBodyParts+0x5ac>
                tailPart = TailRight;
 8001e2c:	4b22      	ldr	r3, [pc, #136]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e2e:	2203      	movs	r2, #3
 8001e30:	701a      	strb	r2, [r3, #0]
              break;
 8001e32:	e08d      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case BottomRight:
              // TailBottom ou TailLeft
              if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0]) {
 8001e34:	4b1d      	ldr	r3, [pc, #116]	@ (8001eac <StartManageBodyParts+0x508>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001e3c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001e40:	4b16      	ldr	r3, [pc, #88]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d103      	bne.n	8001e50 <StartManageBodyParts+0x4ac>
                tailPart = TailTop;
 8001e48:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailLeft;
              }
              break;
 8001e4e:	e07f      	b.n	8001f50 <StartManageBodyParts+0x5ac>
                tailPart = TailLeft;
 8001e50:	4b19      	ldr	r3, [pc, #100]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e52:	2202      	movs	r2, #2
 8001e54:	701a      	strb	r2, [r3, #0]
              break;
 8001e56:	e07b      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case BottomTop:
              // TailTop ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] < snakeTailPosition[1]) {
 8001e58:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <StartManageBodyParts+0x508>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	785a      	ldrb	r2, [r3, #1]
 8001e66:	4b0d      	ldr	r3, [pc, #52]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001e68:	785b      	ldrb	r3, [r3, #1]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d203      	bcs.n	8001e76 <StartManageBodyParts+0x4d2>
                tailPart = TailTop;
 8001e6e:	4b12      	ldr	r3, [pc, #72]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001e74:	e06c      	b.n	8001f50 <StartManageBodyParts+0x5ac>
                tailPart = TailBottom;
 8001e76:	4b10      	ldr	r3, [pc, #64]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
              break;
 8001e7c:	e068      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case LeftRight:
              // TailRight ou TailLeft
              if (snakeBodyPosition[snakeSize - 1][0] < snakeTailPosition[0]) {
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <StartManageBodyParts+0x508>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	4a08      	ldr	r2, [pc, #32]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001e86:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001e8a:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d214      	bcs.n	8001ebc <StartManageBodyParts+0x518>
                tailPart = TailLeft;
 8001e92:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e94:	2202      	movs	r2, #2
 8001e96:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailRight;
              }
              break;
 8001e98:	e05a      	b.n	8001f50 <StartManageBodyParts+0x5ac>
 8001e9a:	bf00      	nop
 8001e9c:	20000008 	.word	0x20000008
 8001ea0:	20000004 	.word	0x20000004
 8001ea4:	20000214 	.word	0x20000214
 8001ea8:	200002a4 	.word	0x200002a4
 8001eac:	2000028c 	.word	0x2000028c
 8001eb0:	20000398 	.word	0x20000398
 8001eb4:	20000290 	.word	0x20000290
 8001eb8:	20000001 	.word	0x20000001
                tailPart = TailRight;
 8001ebc:	4b28      	ldr	r3, [pc, #160]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	701a      	strb	r2, [r3, #0]
              break;
 8001ec2:	e045      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case LeftTop:
              // TailRight ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1]) {
 8001ec4:	4b27      	ldr	r3, [pc, #156]	@ (8001f64 <StartManageBodyParts+0x5c0>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	4a27      	ldr	r2, [pc, #156]	@ (8001f68 <StartManageBodyParts+0x5c4>)
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	785a      	ldrb	r2, [r3, #1]
 8001ed2:	4b26      	ldr	r3, [pc, #152]	@ (8001f6c <StartManageBodyParts+0x5c8>)
 8001ed4:	785b      	ldrb	r3, [r3, #1]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d103      	bne.n	8001ee2 <StartManageBodyParts+0x53e>
                tailPart = TailRight;
 8001eda:	4b21      	ldr	r3, [pc, #132]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001edc:	2203      	movs	r2, #3
 8001ede:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001ee0:	e036      	b.n	8001f50 <StartManageBodyParts+0x5ac>
                tailPart = TailBottom;
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
              break;
 8001ee8:	e032      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case RightTop:
              // TailLeft ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1]) {
 8001eea:	4b1e      	ldr	r3, [pc, #120]	@ (8001f64 <StartManageBodyParts+0x5c0>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f68 <StartManageBodyParts+0x5c4>)
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	4413      	add	r3, r2
 8001ef6:	785a      	ldrb	r2, [r3, #1]
 8001ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f6c <StartManageBodyParts+0x5c8>)
 8001efa:	785b      	ldrb	r3, [r3, #1]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d103      	bne.n	8001f08 <StartManageBodyParts+0x564>
                tailPart = TailLeft;
 8001f00:	4b17      	ldr	r3, [pc, #92]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001f02:	2202      	movs	r2, #2
 8001f04:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001f06:	e023      	b.n	8001f50 <StartManageBodyParts+0x5ac>
                tailPart = TailBottom;
 8001f08:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
              break;
 8001f0e:	e01f      	b.n	8001f50 <StartManageBodyParts+0x5ac>
          }
        }
        else {
          switch (headPart) {
 8001f10:	4b17      	ldr	r3, [pc, #92]	@ (8001f70 <StartManageBodyParts+0x5cc>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d81b      	bhi.n	8001f50 <StartManageBodyParts+0x5ac>
 8001f18:	a201      	add	r2, pc, #4	@ (adr r2, 8001f20 <StartManageBodyParts+0x57c>)
 8001f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1e:	bf00      	nop
 8001f20:	08001f31 	.word	0x08001f31
 8001f24:	08001f39 	.word	0x08001f39
 8001f28:	08001f41 	.word	0x08001f41
 8001f2c:	08001f49 	.word	0x08001f49
            case HeadTop:
              tailPart = TailTop;
 8001f30:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	701a      	strb	r2, [r3, #0]
              break;
 8001f36:	e00b      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case HeadBottom:
              tailPart = TailBottom;
 8001f38:	4b09      	ldr	r3, [pc, #36]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
              break;
 8001f3e:	e007      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case HeadLeft:
              tailPart = TailLeft;
 8001f40:	4b07      	ldr	r3, [pc, #28]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001f42:	2202      	movs	r2, #2
 8001f44:	701a      	strb	r2, [r3, #0]
              break;
 8001f46:	e003      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case HeadRight:
              tailPart = TailRight;
 8001f48:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	701a      	strb	r2, [r3, #0]
              break;
 8001f4e:	bf00      	nop
          }
        }
      }
    }

    vTaskDelayUntil(&xLastWakeTime, delay);
 8001f50:	f107 0310 	add.w	r3, r7, #16
 8001f54:	69b9      	ldr	r1, [r7, #24]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f00c fc4a 	bl	800e7f0 <vTaskDelayUntil>
    if (!gameOver && !gamePaused && gameStarted) {
 8001f5c:	e546      	b.n	80019ec <StartManageBodyParts+0x48>
 8001f5e:	bf00      	nop
 8001f60:	20000001 	.word	0x20000001
 8001f64:	2000028c 	.word	0x2000028c
 8001f68:	200002a4 	.word	0x200002a4
 8001f6c:	20000008 	.word	0x20000008
 8001f70:	20000211 	.word	0x20000211

08001f74 <StartTsHandlerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTsHandlerTask */
void StartTsHandlerTask(void const * argument)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTsHandlerTask */
  /* Infinite loop */
  for(;;)
  {
    if (!gameStarted)
 8001f7c:	4b29      	ldr	r3, [pc, #164]	@ (8002024 <StartTsHandlerTask+0xb0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <StartTsHandlerTask+0x14>
      rand();
 8001f84:	f00d ffb2 	bl	800feec <rand>
    

    BSP_TS_GetState(&TS_State);
 8001f88:	4827      	ldr	r0, [pc, #156]	@ (8002028 <StartTsHandlerTask+0xb4>)
 8001f8a:	f002 ff19 	bl	8004dc0 <BSP_TS_GetState>

    if (!TS_State.touchDetected && screenPressed) {
 8001f8e:	4b26      	ldr	r3, [pc, #152]	@ (8002028 <StartTsHandlerTask+0xb4>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d136      	bne.n	8002004 <StartTsHandlerTask+0x90>
 8001f96:	4b25      	ldr	r3, [pc, #148]	@ (800202c <StartTsHandlerTask+0xb8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d032      	beq.n	8002004 <StartTsHandlerTask+0x90>
      if (gameOver) {
 8001f9e:	4b24      	ldr	r3, [pc, #144]	@ (8002030 <StartTsHandlerTask+0xbc>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d005      	beq.n	8001fb2 <StartTsHandlerTask+0x3e>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8001fa6:	4823      	ldr	r0, [pc, #140]	@ (8002034 <StartTsHandlerTask+0xc0>)
 8001fa8:	f001 ffb2 	bl	8003f10 <BSP_LCD_Clear>
        restartGame();
 8001fac:	f000 f92a 	bl	8002204 <restartGame>
 8001fb0:	e028      	b.n	8002004 <StartTsHandlerTask+0x90>
      }
      else if (gamePaused) {
 8001fb2:	4b21      	ldr	r3, [pc, #132]	@ (8002038 <StartTsHandlerTask+0xc4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d014      	beq.n	8001fe4 <StartTsHandlerTask+0x70>
        xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8001fba:	4b20      	ldr	r3, [pc, #128]	@ (800203c <StartTsHandlerTask+0xc8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f00b ff94 	bl	800def0 <xQueueSemaphoreTake>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8001fc8:	481a      	ldr	r0, [pc, #104]	@ (8002034 <StartTsHandlerTask+0xc0>)
 8001fca:	f001 ffa1 	bl	8003f10 <BSP_LCD_Clear>
        xSemaphoreGive(displayMutexHandle);
 8001fce:	4b1b      	ldr	r3, [pc, #108]	@ (800203c <StartTsHandlerTask+0xc8>)
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	f00b fcf4 	bl	800d9c4 <xQueueGenericSend>
        gamePaused = 0;
 8001fdc:	4b16      	ldr	r3, [pc, #88]	@ (8002038 <StartTsHandlerTask+0xc4>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	e00f      	b.n	8002004 <StartTsHandlerTask+0x90>
      }
      else if (!gameStarted) {
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8002024 <StartTsHandlerTask+0xb0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d108      	bne.n	8001ffe <StartTsHandlerTask+0x8a>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8001fec:	4811      	ldr	r0, [pc, #68]	@ (8002034 <StartTsHandlerTask+0xc0>)
 8001fee:	f001 ff8f 	bl	8003f10 <BSP_LCD_Clear>
        restartGame();
 8001ff2:	f000 f907 	bl	8002204 <restartGame>
        gameStarted = 1;
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8002024 <StartTsHandlerTask+0xb0>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	e002      	b.n	8002004 <StartTsHandlerTask+0x90>
      }
      else {
        gamePaused = 1;
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <StartTsHandlerTask+0xc4>)
 8002000:	2201      	movs	r2, #1
 8002002:	601a      	str	r2, [r3, #0]
      }
    }

    if (TS_State.touchDetected) {
 8002004:	4b08      	ldr	r3, [pc, #32]	@ (8002028 <StartTsHandlerTask+0xb4>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <StartTsHandlerTask+0xa0>
      screenPressed = 1;
 800200c:	4b07      	ldr	r3, [pc, #28]	@ (800202c <StartTsHandlerTask+0xb8>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	e002      	b.n	800201a <StartTsHandlerTask+0xa6>
    }
    else {
      screenPressed = 0;
 8002014:	4b05      	ldr	r3, [pc, #20]	@ (800202c <StartTsHandlerTask+0xb8>)
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
    }

    osDelay(10);
 800201a:	200a      	movs	r0, #10
 800201c:	f00b f974 	bl	800d308 <osDelay>
    if (!gameStarted)
 8002020:	e7ac      	b.n	8001f7c <StartTsHandlerTask+0x8>
 8002022:	bf00      	nop
 8002024:	20000294 	.word	0x20000294
 8002028:	200001d8 	.word	0x200001d8
 800202c:	20000204 	.word	0x20000204
 8002030:	2000029c 	.word	0x2000029c
 8002034:	ff81cd4b 	.word	0xff81cd4b
 8002038:	20000298 	.word	0x20000298
 800203c:	200003b4 	.word	0x200003b4

08002040 <whatBodyPart>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
enum BodyPart whatBodyPart(uint8_t frontX, uint8_t frontY, uint8_t backX, uint8_t backY, uint8_t missingX, uint8_t missingY)
{
 8002040:	b490      	push	{r4, r7}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	4604      	mov	r4, r0
 8002048:	4608      	mov	r0, r1
 800204a:	4611      	mov	r1, r2
 800204c:	461a      	mov	r2, r3
 800204e:	4623      	mov	r3, r4
 8002050:	71fb      	strb	r3, [r7, #7]
 8002052:	4603      	mov	r3, r0
 8002054:	71bb      	strb	r3, [r7, #6]
 8002056:	460b      	mov	r3, r1
 8002058:	717b      	strb	r3, [r7, #5]
 800205a:	4613      	mov	r3, r2
 800205c:	713b      	strb	r3, [r7, #4]
  /*
    . F .
    . X .
    . B .
  */
  if (frontX == backX)
 800205e:	79fa      	ldrb	r2, [r7, #7]
 8002060:	797b      	ldrb	r3, [r7, #5]
 8002062:	429a      	cmp	r2, r3
 8002064:	d101      	bne.n	800206a <whatBodyPart+0x2a>
    return BottomTop;
 8002066:	2302      	movs	r3, #2
 8002068:	e046      	b.n	80020f8 <whatBodyPart+0xb8>
  /*
    . . .
    F X B
    . . .
  */
  if (frontY == backY)
 800206a:	79ba      	ldrb	r2, [r7, #6]
 800206c:	793b      	ldrb	r3, [r7, #4]
 800206e:	429a      	cmp	r2, r3
 8002070:	d101      	bne.n	8002076 <whatBodyPart+0x36>
    return LeftRight;
 8002072:	2303      	movs	r3, #3
 8002074:	e040      	b.n	80020f8 <whatBodyPart+0xb8>
  /*
    . B .       . . .
    F X .       . X B
    . . .       . F .
  */
  if (frontX < backX && frontY > backY) {
 8002076:	79fa      	ldrb	r2, [r7, #7]
 8002078:	797b      	ldrb	r3, [r7, #5]
 800207a:	429a      	cmp	r2, r3
 800207c:	d20b      	bcs.n	8002096 <whatBodyPart+0x56>
 800207e:	79ba      	ldrb	r2, [r7, #6]
 8002080:	793b      	ldrb	r3, [r7, #4]
 8002082:	429a      	cmp	r2, r3
 8002084:	d907      	bls.n	8002096 <whatBodyPart+0x56>
    if (missingX == frontX)
 8002086:	7c3a      	ldrb	r2, [r7, #16]
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	429a      	cmp	r2, r3
 800208c:	d101      	bne.n	8002092 <whatBodyPart+0x52>
      return BottomRight;
 800208e:	2301      	movs	r3, #1
 8002090:	e032      	b.n	80020f8 <whatBodyPart+0xb8>
    else
      return LeftTop;
 8002092:	2304      	movs	r3, #4
 8002094:	e030      	b.n	80020f8 <whatBodyPart+0xb8>
  /*
    . . .       . F .
    F X .       . X B
    . B .       . . .
  */
  if (frontX < backX && frontY < backY) {
 8002096:	79fa      	ldrb	r2, [r7, #7]
 8002098:	797b      	ldrb	r3, [r7, #5]
 800209a:	429a      	cmp	r2, r3
 800209c:	d20b      	bcs.n	80020b6 <whatBodyPart+0x76>
 800209e:	79ba      	ldrb	r2, [r7, #6]
 80020a0:	793b      	ldrb	r3, [r7, #4]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d207      	bcs.n	80020b6 <whatBodyPart+0x76>
    if (missingX == frontX)
 80020a6:	7c3a      	ldrb	r2, [r7, #16]
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d101      	bne.n	80020b2 <whatBodyPart+0x72>
      return RightTop;
 80020ae:	2305      	movs	r3, #5
 80020b0:	e022      	b.n	80020f8 <whatBodyPart+0xb8>
    else
      return BottomLeft;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e020      	b.n	80020f8 <whatBodyPart+0xb8>
  /*
    . . .       . F .
    . X F       B X .
    . B .       . . .
  */
  if (frontX > backX && frontY < backY) {
 80020b6:	79fa      	ldrb	r2, [r7, #7]
 80020b8:	797b      	ldrb	r3, [r7, #5]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d90b      	bls.n	80020d6 <whatBodyPart+0x96>
 80020be:	79ba      	ldrb	r2, [r7, #6]
 80020c0:	793b      	ldrb	r3, [r7, #4]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d207      	bcs.n	80020d6 <whatBodyPart+0x96>
    if (missingX == frontX)
 80020c6:	7c3a      	ldrb	r2, [r7, #16]
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d101      	bne.n	80020d2 <whatBodyPart+0x92>
      return LeftTop;
 80020ce:	2304      	movs	r3, #4
 80020d0:	e012      	b.n	80020f8 <whatBodyPart+0xb8>
    else
      return BottomRight;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e010      	b.n	80020f8 <whatBodyPart+0xb8>
  /*
    . B .       . . .
    . X F       B X .
    . . .       . F .
  */
  if (frontX > backX && frontY > backY) {
 80020d6:	79fa      	ldrb	r2, [r7, #7]
 80020d8:	797b      	ldrb	r3, [r7, #5]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d90b      	bls.n	80020f6 <whatBodyPart+0xb6>
 80020de:	79ba      	ldrb	r2, [r7, #6]
 80020e0:	793b      	ldrb	r3, [r7, #4]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d907      	bls.n	80020f6 <whatBodyPart+0xb6>
    if (missingX == frontX)
 80020e6:	7c3a      	ldrb	r2, [r7, #16]
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d101      	bne.n	80020f2 <whatBodyPart+0xb2>
      return BottomLeft;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e002      	b.n	80020f8 <whatBodyPart+0xb8>
    else
      return RightTop;
 80020f2:	2305      	movs	r3, #5
 80020f4:	e000      	b.n	80020f8 <whatBodyPart+0xb8>
  }

  return BottomTop; // should never happen
 80020f6:	2302      	movs	r3, #2
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc90      	pop	{r4, r7}
 8002100:	4770      	bx	lr
	...

08002104 <isSnakePosition>:


uint8_t isSnakePosition(uint8_t x, uint8_t y)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	460a      	mov	r2, r1
 800210e:	71fb      	strb	r3, [r7, #7]
 8002110:	4613      	mov	r3, r2
 8002112:	71bb      	strb	r3, [r7, #6]
  if (x == snakeHeadPosition[0] && y == snakeHeadPosition[1])
 8002114:	4b1d      	ldr	r3, [pc, #116]	@ (800218c <isSnakePosition+0x88>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	79fa      	ldrb	r2, [r7, #7]
 800211a:	429a      	cmp	r2, r3
 800211c:	d106      	bne.n	800212c <isSnakePosition+0x28>
 800211e:	4b1b      	ldr	r3, [pc, #108]	@ (800218c <isSnakePosition+0x88>)
 8002120:	785b      	ldrb	r3, [r3, #1]
 8002122:	79ba      	ldrb	r2, [r7, #6]
 8002124:	429a      	cmp	r2, r3
 8002126:	d101      	bne.n	800212c <isSnakePosition+0x28>
    return 1;
 8002128:	2301      	movs	r3, #1
 800212a:	e029      	b.n	8002180 <isSnakePosition+0x7c>

  for (int i = 0; i < snakeSize; i++) {
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	e013      	b.n	800215a <isSnakePosition+0x56>
    if (x == snakeBodyPosition[i][0] && y == snakeBodyPosition[i][1])
 8002132:	4a17      	ldr	r2, [pc, #92]	@ (8002190 <isSnakePosition+0x8c>)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800213a:	79fa      	ldrb	r2, [r7, #7]
 800213c:	429a      	cmp	r2, r3
 800213e:	d109      	bne.n	8002154 <isSnakePosition+0x50>
 8002140:	4a13      	ldr	r2, [pc, #76]	@ (8002190 <isSnakePosition+0x8c>)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	785b      	ldrb	r3, [r3, #1]
 800214a:	79ba      	ldrb	r2, [r7, #6]
 800214c:	429a      	cmp	r2, r3
 800214e:	d101      	bne.n	8002154 <isSnakePosition+0x50>
      return 1;
 8002150:	2301      	movs	r3, #1
 8002152:	e015      	b.n	8002180 <isSnakePosition+0x7c>
  for (int i = 0; i < snakeSize; i++) {
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	3301      	adds	r3, #1
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b0e      	ldr	r3, [pc, #56]	@ (8002194 <isSnakePosition+0x90>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4293      	cmp	r3, r2
 8002164:	dbe5      	blt.n	8002132 <isSnakePosition+0x2e>
  }

  if (x == snakeTailPosition[0] && y == snakeTailPosition[1])
 8002166:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <isSnakePosition+0x94>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	79fa      	ldrb	r2, [r7, #7]
 800216c:	429a      	cmp	r2, r3
 800216e:	d106      	bne.n	800217e <isSnakePosition+0x7a>
 8002170:	4b09      	ldr	r3, [pc, #36]	@ (8002198 <isSnakePosition+0x94>)
 8002172:	785b      	ldrb	r3, [r3, #1]
 8002174:	79ba      	ldrb	r2, [r7, #6]
 8002176:	429a      	cmp	r2, r3
 8002178:	d101      	bne.n	800217e <isSnakePosition+0x7a>
    return 1;
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <isSnakePosition+0x7c>

  return 0;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	20000004 	.word	0x20000004
 8002190:	200002a4 	.word	0x200002a4
 8002194:	2000028c 	.word	0x2000028c
 8002198:	20000008 	.word	0x20000008

0800219c <isApplePosition>:

uint8_t isApplePosition(uint8_t x, uint8_t y, uint8_t appleIndex)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
 80021a6:	460b      	mov	r3, r1
 80021a8:	71bb      	strb	r3, [r7, #6]
 80021aa:	4613      	mov	r3, r2
 80021ac:	717b      	strb	r3, [r7, #5]
  for (int i = 0; i < NBApple; i++) {
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	e019      	b.n	80021e8 <isApplePosition+0x4c>
    if (i == appleIndex)
 80021b4:	797b      	ldrb	r3, [r7, #5]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d011      	beq.n	80021e0 <isApplePosition+0x44>
      continue;

    if (x == applePosition[i][0] && y == applePosition[i][1])
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	4910      	ldr	r1, [pc, #64]	@ (8002200 <isApplePosition+0x64>)
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	f911 2012 	ldrsb.w	r2, [r1, r2, lsl #1]
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d10b      	bne.n	80021e2 <isApplePosition+0x46>
 80021ca:	79ba      	ldrb	r2, [r7, #6]
 80021cc:	490c      	ldr	r1, [pc, #48]	@ (8002200 <isApplePosition+0x64>)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	440b      	add	r3, r1
 80021d4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d102      	bne.n	80021e2 <isApplePosition+0x46>
      return 1;
 80021dc:	2301      	movs	r3, #1
 80021de:	e009      	b.n	80021f4 <isApplePosition+0x58>
      continue;
 80021e0:	bf00      	nop
  for (int i = 0; i < NBApple; i++) {
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3301      	adds	r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	2304      	movs	r3, #4
 80021ea:	461a      	mov	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4293      	cmp	r3, r2
 80021f0:	dbe0      	blt.n	80021b4 <isApplePosition+0x18>
  }

  return 0;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	20000398 	.word	0x20000398

08002204 <restartGame>:

void restartGame()
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
  gameOver = 0;
 800220a:	4b3a      	ldr	r3, [pc, #232]	@ (80022f4 <restartGame+0xf0>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
  lastMove = 0;
 8002210:	4b39      	ldr	r3, [pc, #228]	@ (80022f8 <restartGame+0xf4>)
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
  snakeSize = 0;
 8002216:	4b39      	ldr	r3, [pc, #228]	@ (80022fc <restartGame+0xf8>)
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
  snakeHeadPosition[0] = 7;
 800221c:	4b38      	ldr	r3, [pc, #224]	@ (8002300 <restartGame+0xfc>)
 800221e:	2207      	movs	r2, #7
 8002220:	701a      	strb	r2, [r3, #0]
  snakeHeadPosition[1] = 6;
 8002222:	4b37      	ldr	r3, [pc, #220]	@ (8002300 <restartGame+0xfc>)
 8002224:	2206      	movs	r2, #6
 8002226:	705a      	strb	r2, [r3, #1]
  snakeTailPosition[0] = 7;
 8002228:	4b36      	ldr	r3, [pc, #216]	@ (8002304 <restartGame+0x100>)
 800222a:	2207      	movs	r2, #7
 800222c:	701a      	strb	r2, [r3, #0]
  snakeTailPosition[1] = 7;
 800222e:	4b35      	ldr	r3, [pc, #212]	@ (8002304 <restartGame+0x100>)
 8002230:	2207      	movs	r2, #7
 8002232:	705a      	strb	r2, [r3, #1]
  direction = Up;
 8002234:	4b34      	ldr	r3, [pc, #208]	@ (8002308 <restartGame+0x104>)
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
  headPart = HeadTop;
 800223a:	4b34      	ldr	r3, [pc, #208]	@ (800230c <restartGame+0x108>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
  tailPart = TailTop;
 8002240:	4b33      	ldr	r3, [pc, #204]	@ (8002310 <restartGame+0x10c>)
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]

  for (int i = 0; i < NBApple; i++) {
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	e047      	b.n	80022dc <restartGame+0xd8>
    do {
      applePosition[i][0] = rand() % gridSizeX;
 800224c:	f00d fe4e 	bl	800feec <rand>
 8002250:	4603      	mov	r3, r0
 8002252:	220f      	movs	r2, #15
 8002254:	fb93 f1f2 	sdiv	r1, r3, r2
 8002258:	fb01 f202 	mul.w	r2, r1, r2
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	b259      	sxtb	r1, r3
 8002260:	4a2c      	ldr	r2, [pc, #176]	@ (8002314 <restartGame+0x110>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
      applePosition[i][1] = rand() % gridSizeY;
 8002268:	f00d fe40 	bl	800feec <rand>
 800226c:	4603      	mov	r3, r0
 800226e:	2208      	movs	r2, #8
 8002270:	fb93 f1f2 	sdiv	r1, r3, r2
 8002274:	fb01 f202 	mul.w	r2, r1, r2
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	b259      	sxtb	r1, r3
 800227c:	4a25      	ldr	r2, [pc, #148]	@ (8002314 <restartGame+0x110>)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	460a      	mov	r2, r1
 8002286:	705a      	strb	r2, [r3, #1]
    } while (isSnakePosition(applePosition[i][0], applePosition[i][1]) || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 8002288:	4a22      	ldr	r2, [pc, #136]	@ (8002314 <restartGame+0x110>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4920      	ldr	r1, [pc, #128]	@ (8002314 <restartGame+0x110>)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	440b      	add	r3, r1
 800229a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f7ff ff2e 	bl	8002104 <isSnakePosition>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1ce      	bne.n	800224c <restartGame+0x48>
 80022ae:	4a19      	ldr	r2, [pc, #100]	@ (8002314 <restartGame+0x110>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 80022b6:	b2d8      	uxtb	r0, r3
 80022b8:	4a16      	ldr	r2, [pc, #88]	@ (8002314 <restartGame+0x110>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4413      	add	r3, r2
 80022c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	f7ff ff66 	bl	800219c <isApplePosition>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1ba      	bne.n	800224c <restartGame+0x48>
  for (int i = 0; i < NBApple; i++) {
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3301      	adds	r3, #1
 80022da:	607b      	str	r3, [r7, #4]
 80022dc:	2304      	movs	r3, #4
 80022de:	461a      	mov	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4293      	cmp	r3, r2
 80022e4:	dbb2      	blt.n	800224c <restartGame+0x48>
  }

  BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 80022e6:	480c      	ldr	r0, [pc, #48]	@ (8002318 <restartGame+0x114>)
 80022e8:	f001 fe12 	bl	8003f10 <BSP_LCD_Clear>
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	2000029c 	.word	0x2000029c
 80022f8:	200002a0 	.word	0x200002a0
 80022fc:	2000028c 	.word	0x2000028c
 8002300:	20000004 	.word	0x20000004
 8002304:	20000008 	.word	0x20000008
 8002308:	20000210 	.word	0x20000210
 800230c:	20000211 	.word	0x20000211
 8002310:	20000001 	.word	0x20000001
 8002314:	20000398 	.word	0x20000398
 8002318:	ff81cd4b 	.word	0xff81cd4b

0800231c <displayGameStatus>:

void displayGameStatus()
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  if (gameOver) {
 8002320:	4b27      	ldr	r3, [pc, #156]	@ (80023c0 <displayGameStatus+0xa4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d015      	beq.n	8002354 <displayGameStatus+0x38>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8002328:	4826      	ldr	r0, [pc, #152]	@ (80023c4 <displayGameStatus+0xa8>)
 800232a:	f001 fda5 	bl	8003e78 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 800232e:	4826      	ldr	r0, [pc, #152]	@ (80023c8 <displayGameStatus+0xac>)
 8002330:	f001 fdd4 	bl	8003edc <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Over", CENTER_MODE);
 8002334:	2301      	movs	r3, #1
 8002336:	4a25      	ldr	r2, [pc, #148]	@ (80023cc <displayGameStatus+0xb0>)
 8002338:	2164      	movs	r1, #100	@ 0x64
 800233a:	2000      	movs	r0, #0
 800233c:	f001 fe54 	bl	8003fe8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 8002340:	4823      	ldr	r0, [pc, #140]	@ (80023d0 <displayGameStatus+0xb4>)
 8002342:	f001 fdcb 	bl	8003edc <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to restart", CENTER_MODE);
 8002346:	2301      	movs	r3, #1
 8002348:	4a22      	ldr	r2, [pc, #136]	@ (80023d4 <displayGameStatus+0xb8>)
 800234a:	2182      	movs	r1, #130	@ 0x82
 800234c:	2000      	movs	r0, #0
 800234e:	f001 fe4b 	bl	8003fe8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font24);
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
    BSP_LCD_SetFont(&Font16);
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
  }
}
 8002352:	e032      	b.n	80023ba <displayGameStatus+0x9e>
  else if (gamePaused) {
 8002354:	4b20      	ldr	r3, [pc, #128]	@ (80023d8 <displayGameStatus+0xbc>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d015      	beq.n	8002388 <displayGameStatus+0x6c>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 800235c:	4819      	ldr	r0, [pc, #100]	@ (80023c4 <displayGameStatus+0xa8>)
 800235e:	f001 fd8b 	bl	8003e78 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 8002362:	4819      	ldr	r0, [pc, #100]	@ (80023c8 <displayGameStatus+0xac>)
 8002364:	f001 fdba 	bl	8003edc <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Paused", CENTER_MODE);
 8002368:	2301      	movs	r3, #1
 800236a:	4a1c      	ldr	r2, [pc, #112]	@ (80023dc <displayGameStatus+0xc0>)
 800236c:	2164      	movs	r1, #100	@ 0x64
 800236e:	2000      	movs	r0, #0
 8002370:	f001 fe3a 	bl	8003fe8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 8002374:	4816      	ldr	r0, [pc, #88]	@ (80023d0 <displayGameStatus+0xb4>)
 8002376:	f001 fdb1 	bl	8003edc <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to resume", CENTER_MODE);
 800237a:	2301      	movs	r3, #1
 800237c:	4a18      	ldr	r2, [pc, #96]	@ (80023e0 <displayGameStatus+0xc4>)
 800237e:	2182      	movs	r1, #130	@ 0x82
 8002380:	2000      	movs	r0, #0
 8002382:	f001 fe31 	bl	8003fe8 <BSP_LCD_DisplayStringAt>
}
 8002386:	e018      	b.n	80023ba <displayGameStatus+0x9e>
  else if (!gameStarted) {
 8002388:	4b16      	ldr	r3, [pc, #88]	@ (80023e4 <displayGameStatus+0xc8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d114      	bne.n	80023ba <displayGameStatus+0x9e>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8002390:	480c      	ldr	r0, [pc, #48]	@ (80023c4 <displayGameStatus+0xa8>)
 8002392:	f001 fd71 	bl	8003e78 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 8002396:	480c      	ldr	r0, [pc, #48]	@ (80023c8 <displayGameStatus+0xac>)
 8002398:	f001 fda0 	bl	8003edc <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
 800239c:	2301      	movs	r3, #1
 800239e:	4a12      	ldr	r2, [pc, #72]	@ (80023e8 <displayGameStatus+0xcc>)
 80023a0:	2164      	movs	r1, #100	@ 0x64
 80023a2:	2000      	movs	r0, #0
 80023a4:	f001 fe20 	bl	8003fe8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 80023a8:	4809      	ldr	r0, [pc, #36]	@ (80023d0 <displayGameStatus+0xb4>)
 80023aa:	f001 fd97 	bl	8003edc <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
 80023ae:	2301      	movs	r3, #1
 80023b0:	4a0e      	ldr	r2, [pc, #56]	@ (80023ec <displayGameStatus+0xd0>)
 80023b2:	2182      	movs	r1, #130	@ 0x82
 80023b4:	2000      	movs	r0, #0
 80023b6:	f001 fe17 	bl	8003fe8 <BSP_LCD_DisplayStringAt>
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	2000029c 	.word	0x2000029c
 80023c4:	ffa52a2a 	.word	0xffa52a2a
 80023c8:	20000034 	.word	0x20000034
 80023cc:	08011458 	.word	0x08011458
 80023d0:	2000003c 	.word	0x2000003c
 80023d4:	08011464 	.word	0x08011464
 80023d8:	20000298 	.word	0x20000298
 80023dc:	08011480 	.word	0x08011480
 80023e0:	0801148c 	.word	0x0801148c
 80023e4:	20000294 	.word	0x20000294
 80023e8:	080114a8 	.word	0x080114a8
 80023ec:	080114b4 	.word	0x080114b4

080023f0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80023fa:	20c8      	movs	r0, #200	@ 0xc8
 80023fc:	f001 fc28 	bl	8003c50 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002400:	f000 fa7a 	bl	80028f8 <ft5336_I2C_InitializeIfRequired>
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8002434:	2300      	movs	r3, #0
 8002436:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002438:	f000 fa5e 	bl	80028f8 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]
 8002440:	e010      	b.n	8002464 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	21a8      	movs	r1, #168	@ 0xa8
 8002448:	4618      	mov	r0, r3
 800244a:	f001 fbe3 	bl	8003c14 <TS_IO_Read>
 800244e:	4603      	mov	r3, r0
 8002450:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8002452:	7b7b      	ldrb	r3, [r7, #13]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b51      	cmp	r3, #81	@ 0x51
 8002458:	d101      	bne.n	800245e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800245a:	2301      	movs	r3, #1
 800245c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	3301      	adds	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d802      	bhi.n	8002470 <ft5336_ReadID+0x4e>
 800246a:	7bbb      	ldrb	r3, [r7, #14]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0e8      	beq.n	8002442 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8002470:	7b7b      	ldrb	r3, [r7, #13]
 8002472:	b2db      	uxtb	r3, r3
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8002486:	88fb      	ldrh	r3, [r7, #6]
 8002488:	4618      	mov	r0, r3
 800248a:	f000 fa45 	bl	8002918 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	4618      	mov	r0, r3
 8002492:	f000 f933 	bl	80026fc <ft5336_TS_DisableIT>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2102      	movs	r1, #2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f001 fbad 	bl	8003c14 <TS_IO_Read>
 80024ba:	4603      	mov	r3, r0
 80024bc:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b05      	cmp	r3, #5
 80024d0:	d901      	bls.n	80024d6 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	4b05      	ldr	r3, [pc, #20]	@ (80024f0 <ft5336_TS_DetectTouch+0x50>)
 80024dc:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80024de:	4b04      	ldr	r3, [pc, #16]	@ (80024f0 <ft5336_TS_DetectTouch+0x50>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	b2db      	uxtb	r3, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20000658 	.word	0x20000658

080024f4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8002516:	4b6d      	ldr	r3, [pc, #436]	@ (80026cc <ft5336_TS_GetXY+0x1d8>)
 8002518:	789a      	ldrb	r2, [r3, #2]
 800251a:	4b6c      	ldr	r3, [pc, #432]	@ (80026cc <ft5336_TS_GetXY+0x1d8>)
 800251c:	785b      	ldrb	r3, [r3, #1]
 800251e:	429a      	cmp	r2, r3
 8002520:	f080 80cf 	bcs.w	80026c2 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8002524:	4b69      	ldr	r3, [pc, #420]	@ (80026cc <ft5336_TS_GetXY+0x1d8>)
 8002526:	789b      	ldrb	r3, [r3, #2]
 8002528:	2b09      	cmp	r3, #9
 800252a:	d871      	bhi.n	8002610 <ft5336_TS_GetXY+0x11c>
 800252c:	a201      	add	r2, pc, #4	@ (adr r2, 8002534 <ft5336_TS_GetXY+0x40>)
 800252e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002532:	bf00      	nop
 8002534:	0800255d 	.word	0x0800255d
 8002538:	0800256f 	.word	0x0800256f
 800253c:	08002581 	.word	0x08002581
 8002540:	08002593 	.word	0x08002593
 8002544:	080025a5 	.word	0x080025a5
 8002548:	080025b7 	.word	0x080025b7
 800254c:	080025c9 	.word	0x080025c9
 8002550:	080025db 	.word	0x080025db
 8002554:	080025ed 	.word	0x080025ed
 8002558:	080025ff 	.word	0x080025ff
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800255c:	2304      	movs	r3, #4
 800255e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8002560:	2303      	movs	r3, #3
 8002562:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8002564:	2306      	movs	r3, #6
 8002566:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8002568:	2305      	movs	r3, #5
 800256a:	753b      	strb	r3, [r7, #20]
      break;
 800256c:	e051      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800256e:	230a      	movs	r3, #10
 8002570:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8002572:	2309      	movs	r3, #9
 8002574:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8002576:	230c      	movs	r3, #12
 8002578:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800257a:	230b      	movs	r3, #11
 800257c:	753b      	strb	r3, [r7, #20]
      break;
 800257e:	e048      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8002580:	2310      	movs	r3, #16
 8002582:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8002584:	230f      	movs	r3, #15
 8002586:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8002588:	2312      	movs	r3, #18
 800258a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800258c:	2311      	movs	r3, #17
 800258e:	753b      	strb	r3, [r7, #20]
      break;
 8002590:	e03f      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8002592:	2316      	movs	r3, #22
 8002594:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8002596:	2315      	movs	r3, #21
 8002598:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800259a:	2318      	movs	r3, #24
 800259c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800259e:	2317      	movs	r3, #23
 80025a0:	753b      	strb	r3, [r7, #20]
      break;
 80025a2:	e036      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80025a4:	231c      	movs	r3, #28
 80025a6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80025a8:	231b      	movs	r3, #27
 80025aa:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80025ac:	231e      	movs	r3, #30
 80025ae:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80025b0:	231d      	movs	r3, #29
 80025b2:	753b      	strb	r3, [r7, #20]
      break;
 80025b4:	e02d      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80025b6:	2322      	movs	r3, #34	@ 0x22
 80025b8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80025ba:	2321      	movs	r3, #33	@ 0x21
 80025bc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80025be:	2324      	movs	r3, #36	@ 0x24
 80025c0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80025c2:	2323      	movs	r3, #35	@ 0x23
 80025c4:	753b      	strb	r3, [r7, #20]
      break;
 80025c6:	e024      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80025c8:	2328      	movs	r3, #40	@ 0x28
 80025ca:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80025cc:	2327      	movs	r3, #39	@ 0x27
 80025ce:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80025d0:	232a      	movs	r3, #42	@ 0x2a
 80025d2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80025d4:	2329      	movs	r3, #41	@ 0x29
 80025d6:	753b      	strb	r3, [r7, #20]
      break;
 80025d8:	e01b      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80025da:	232e      	movs	r3, #46	@ 0x2e
 80025dc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80025de:	232d      	movs	r3, #45	@ 0x2d
 80025e0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80025e2:	2330      	movs	r3, #48	@ 0x30
 80025e4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80025e6:	232f      	movs	r3, #47	@ 0x2f
 80025e8:	753b      	strb	r3, [r7, #20]
      break;
 80025ea:	e012      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80025ec:	2334      	movs	r3, #52	@ 0x34
 80025ee:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80025f0:	2333      	movs	r3, #51	@ 0x33
 80025f2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80025f4:	2336      	movs	r3, #54	@ 0x36
 80025f6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80025f8:	2335      	movs	r3, #53	@ 0x35
 80025fa:	753b      	strb	r3, [r7, #20]
      break;
 80025fc:	e009      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80025fe:	233a      	movs	r3, #58	@ 0x3a
 8002600:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8002602:	2339      	movs	r3, #57	@ 0x39
 8002604:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8002606:	233c      	movs	r3, #60	@ 0x3c
 8002608:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800260a:	233b      	movs	r3, #59	@ 0x3b
 800260c:	753b      	strb	r3, [r7, #20]
      break;
 800260e:	e000      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8002610:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8002612:	89fb      	ldrh	r3, [r7, #14]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	7dfa      	ldrb	r2, [r7, #23]
 8002618:	4611      	mov	r1, r2
 800261a:	4618      	mov	r0, r3
 800261c:	f001 fafa 	bl	8003c14 <TS_IO_Read>
 8002620:	4603      	mov	r3, r0
 8002622:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	4b29      	ldr	r3, [pc, #164]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 800262c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800262e:	89fb      	ldrh	r3, [r7, #14]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	7dba      	ldrb	r2, [r7, #22]
 8002634:	4611      	mov	r1, r2
 8002636:	4618      	mov	r0, r3
 8002638:	f001 faec 	bl	8003c14 <TS_IO_Read>
 800263c:	4603      	mov	r3, r0
 800263e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8002640:	7cfb      	ldrb	r3, [r7, #19]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	021b      	lsls	r3, r3, #8
 8002646:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800264a:	b21a      	sxth	r2, r3
 800264c:	4b20      	ldr	r3, [pc, #128]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	b21b      	sxth	r3, r3
 8002652:	4313      	orrs	r3, r2
 8002654:	b21b      	sxth	r3, r3
 8002656:	b29a      	uxth	r2, r3
 8002658:	4b1d      	ldr	r3, [pc, #116]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 800265a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800265c:	4b1c      	ldr	r3, [pc, #112]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 800265e:	881a      	ldrh	r2, [r3, #0]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8002664:	89fb      	ldrh	r3, [r7, #14]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	7d7a      	ldrb	r2, [r7, #21]
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f001 fad1 	bl	8003c14 <TS_IO_Read>
 8002672:	4603      	mov	r3, r0
 8002674:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8002676:	7cfb      	ldrb	r3, [r7, #19]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	4b14      	ldr	r3, [pc, #80]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 800267e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8002680:	89fb      	ldrh	r3, [r7, #14]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	7d3a      	ldrb	r2, [r7, #20]
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f001 fac3 	bl	8003c14 <TS_IO_Read>
 800268e:	4603      	mov	r3, r0
 8002690:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8002692:	7cfb      	ldrb	r3, [r7, #19]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800269c:	b21a      	sxth	r2, r3
 800269e:	4b0c      	ldr	r3, [pc, #48]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	b21b      	sxth	r3, r3
 80026a4:	4313      	orrs	r3, r2
 80026a6:	b21b      	sxth	r3, r3
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	4b09      	ldr	r3, [pc, #36]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 80026ac:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80026ae:	4b08      	ldr	r3, [pc, #32]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 80026b0:	881a      	ldrh	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80026b6:	4b05      	ldr	r3, [pc, #20]	@ (80026cc <ft5336_TS_GetXY+0x1d8>)
 80026b8:	789b      	ldrb	r3, [r3, #2]
 80026ba:	3301      	adds	r3, #1
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4b03      	ldr	r3, [pc, #12]	@ (80026cc <ft5336_TS_GetXY+0x1d8>)
 80026c0:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80026c2:	bf00      	nop
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000658 	.word	0x20000658
 80026d0:	2000065c 	.word	0x2000065c

080026d4 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80026e2:	2301      	movs	r3, #1
 80026e4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	7bfa      	ldrb	r2, [r7, #15]
 80026ec:	21a4      	movs	r1, #164	@ 0xa4
 80026ee:	4618      	mov	r0, r3
 80026f0:	f001 fa76 	bl	8003be0 <TS_IO_Write>
}
 80026f4:	bf00      	nop
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800270a:	2300      	movs	r3, #0
 800270c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	b2db      	uxtb	r3, r3
 8002712:	7bfa      	ldrb	r2, [r7, #15]
 8002714:	21a4      	movs	r1, #164	@ 0xa4
 8002716:	4618      	mov	r0, r3
 8002718:	f001 fa62 	bl	8003be0 <TS_IO_Write>
}
 800271c:	bf00      	nop
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	4603      	mov	r3, r0
 800275a:	6039      	str	r1, [r7, #0]
 800275c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2101      	movs	r1, #1
 8002768:	4618      	mov	r0, r3
 800276a:	f001 fa53 	bl	8003c14 <TS_IO_Read>
 800276e:	4603      	mov	r3, r0
 8002770:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	601a      	str	r2, [r3, #0]
}
 800277c:	bf00      	nop
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	4603      	mov	r3, r0
 8002792:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80027a4:	4b4d      	ldr	r3, [pc, #308]	@ (80028dc <ft5336_TS_GetTouchInfo+0x158>)
 80027a6:	785b      	ldrb	r3, [r3, #1]
 80027a8:	461a      	mov	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	4293      	cmp	r3, r2
 80027ae:	f080 8090 	bcs.w	80028d2 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b09      	cmp	r3, #9
 80027b6:	d85d      	bhi.n	8002874 <ft5336_TS_GetTouchInfo+0xf0>
 80027b8:	a201      	add	r2, pc, #4	@ (adr r2, 80027c0 <ft5336_TS_GetTouchInfo+0x3c>)
 80027ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027be:	bf00      	nop
 80027c0:	080027e9 	.word	0x080027e9
 80027c4:	080027f7 	.word	0x080027f7
 80027c8:	08002805 	.word	0x08002805
 80027cc:	08002813 	.word	0x08002813
 80027d0:	08002821 	.word	0x08002821
 80027d4:	0800282f 	.word	0x0800282f
 80027d8:	0800283d 	.word	0x0800283d
 80027dc:	0800284b 	.word	0x0800284b
 80027e0:	08002859 	.word	0x08002859
 80027e4:	08002867 	.word	0x08002867
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80027e8:	2303      	movs	r3, #3
 80027ea:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80027ec:	2307      	movs	r3, #7
 80027ee:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80027f0:	2308      	movs	r3, #8
 80027f2:	757b      	strb	r3, [r7, #21]
      break;
 80027f4:	e03f      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80027f6:	2309      	movs	r3, #9
 80027f8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80027fa:	230d      	movs	r3, #13
 80027fc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80027fe:	230e      	movs	r3, #14
 8002800:	757b      	strb	r3, [r7, #21]
      break;
 8002802:	e038      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8002804:	230f      	movs	r3, #15
 8002806:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8002808:	2313      	movs	r3, #19
 800280a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 800280c:	2314      	movs	r3, #20
 800280e:	757b      	strb	r3, [r7, #21]
      break;
 8002810:	e031      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8002812:	2315      	movs	r3, #21
 8002814:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8002816:	2319      	movs	r3, #25
 8002818:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 800281a:	231a      	movs	r3, #26
 800281c:	757b      	strb	r3, [r7, #21]
      break;
 800281e:	e02a      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8002820:	231b      	movs	r3, #27
 8002822:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8002824:	231f      	movs	r3, #31
 8002826:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8002828:	2320      	movs	r3, #32
 800282a:	757b      	strb	r3, [r7, #21]
      break;
 800282c:	e023      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800282e:	2321      	movs	r3, #33	@ 0x21
 8002830:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8002832:	2325      	movs	r3, #37	@ 0x25
 8002834:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8002836:	2326      	movs	r3, #38	@ 0x26
 8002838:	757b      	strb	r3, [r7, #21]
      break;
 800283a:	e01c      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 800283c:	2327      	movs	r3, #39	@ 0x27
 800283e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8002840:	232b      	movs	r3, #43	@ 0x2b
 8002842:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8002844:	232c      	movs	r3, #44	@ 0x2c
 8002846:	757b      	strb	r3, [r7, #21]
      break;
 8002848:	e015      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 800284a:	232d      	movs	r3, #45	@ 0x2d
 800284c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800284e:	2331      	movs	r3, #49	@ 0x31
 8002850:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8002852:	2332      	movs	r3, #50	@ 0x32
 8002854:	757b      	strb	r3, [r7, #21]
      break;
 8002856:	e00e      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8002858:	2333      	movs	r3, #51	@ 0x33
 800285a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 800285c:	2337      	movs	r3, #55	@ 0x37
 800285e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8002860:	2338      	movs	r3, #56	@ 0x38
 8002862:	757b      	strb	r3, [r7, #21]
      break;
 8002864:	e007      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8002866:	2339      	movs	r3, #57	@ 0x39
 8002868:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 800286a:	233d      	movs	r3, #61	@ 0x3d
 800286c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 800286e:	233e      	movs	r3, #62	@ 0x3e
 8002870:	757b      	strb	r3, [r7, #21]
      break;
 8002872:	e000      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8002874:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8002876:	89fb      	ldrh	r3, [r7, #14]
 8002878:	b2db      	uxtb	r3, r3
 800287a:	7dfa      	ldrb	r2, [r7, #23]
 800287c:	4611      	mov	r1, r2
 800287e:	4618      	mov	r0, r3
 8002880:	f001 f9c8 	bl	8003c14 <TS_IO_Read>
 8002884:	4603      	mov	r3, r0
 8002886:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8002888:	7d3b      	ldrb	r3, [r7, #20]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	119b      	asrs	r3, r3, #6
 800288e:	f003 0203 	and.w	r2, r3, #3
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8002896:	89fb      	ldrh	r3, [r7, #14]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	7dba      	ldrb	r2, [r7, #22]
 800289c:	4611      	mov	r1, r2
 800289e:	4618      	mov	r0, r3
 80028a0:	f001 f9b8 	bl	8003c14 <TS_IO_Read>
 80028a4:	4603      	mov	r3, r0
 80028a6:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80028a8:	7d3b      	ldrb	r3, [r7, #20]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	461a      	mov	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80028b2:	89fb      	ldrh	r3, [r7, #14]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	7d7a      	ldrb	r2, [r7, #21]
 80028b8:	4611      	mov	r1, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f001 f9aa 	bl	8003c14 <TS_IO_Read>
 80028c0:	4603      	mov	r3, r0
 80028c2:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80028c4:	7d3b      	ldrb	r3, [r7, #20]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	111b      	asrs	r3, r3, #4
 80028ca:	f003 0204 	and.w	r2, r3, #4
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000658 	.word	0x20000658

080028e0 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80028e4:	4b03      	ldr	r3, [pc, #12]	@ (80028f4 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	20000658 	.word	0x20000658

080028f8 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80028fc:	f7ff fff0 	bl	80028e0 <ft5336_Get_I2C_InitializedStatus>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d104      	bne.n	8002910 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8002906:	f001 f961 	bl	8003bcc <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800290a:	4b02      	ldr	r3, [pc, #8]	@ (8002914 <ft5336_I2C_InitializeIfRequired+0x1c>)
 800290c:	2201      	movs	r2, #1
 800290e:	701a      	strb	r2, [r3, #0]
  }
}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000658 	.word	0x20000658

08002918 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8002926:	68fb      	ldr	r3, [r7, #12]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b090      	sub	sp, #64	@ 0x40
 8002938:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	605a      	str	r2, [r3, #4]
 8002944:	609a      	str	r2, [r3, #8]
 8002946:	60da      	str	r2, [r3, #12]
 8002948:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800294a:	4baf      	ldr	r3, [pc, #700]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	4aae      	ldr	r2, [pc, #696]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002950:	f043 0310 	orr.w	r3, r3, #16
 8002954:	6313      	str	r3, [r2, #48]	@ 0x30
 8002956:	4bac      	ldr	r3, [pc, #688]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002962:	4ba9      	ldr	r3, [pc, #676]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002966:	4aa8      	ldr	r2, [pc, #672]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800296c:	6313      	str	r3, [r2, #48]	@ 0x30
 800296e:	4ba6      	ldr	r3, [pc, #664]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002976:	627b      	str	r3, [r7, #36]	@ 0x24
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800297a:	4ba3      	ldr	r3, [pc, #652]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	4aa2      	ldr	r2, [pc, #648]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002980:	f043 0302 	orr.w	r3, r3, #2
 8002984:	6313      	str	r3, [r2, #48]	@ 0x30
 8002986:	4ba0      	ldr	r3, [pc, #640]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	623b      	str	r3, [r7, #32]
 8002990:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002992:	4b9d      	ldr	r3, [pc, #628]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	4a9c      	ldr	r2, [pc, #624]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002998:	f043 0308 	orr.w	r3, r3, #8
 800299c:	6313      	str	r3, [r2, #48]	@ 0x30
 800299e:	4b9a      	ldr	r3, [pc, #616]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	61fb      	str	r3, [r7, #28]
 80029a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029aa:	4b97      	ldr	r3, [pc, #604]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	4a96      	ldr	r2, [pc, #600]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029b0:	f043 0304 	orr.w	r3, r3, #4
 80029b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b6:	4b94      	ldr	r3, [pc, #592]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	61bb      	str	r3, [r7, #24]
 80029c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c2:	4b91      	ldr	r3, [pc, #580]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c6:	4a90      	ldr	r2, [pc, #576]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ce:	4b8e      	ldr	r3, [pc, #568]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80029da:	4b8b      	ldr	r3, [pc, #556]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	4a8a      	ldr	r2, [pc, #552]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e6:	4b88      	ldr	r3, [pc, #544]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80029f2:	4b85      	ldr	r3, [pc, #532]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	4a84      	ldr	r2, [pc, #528]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029fe:	4b82      	ldr	r3, [pc, #520]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002a0a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a10:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a16:	4b7c      	ldr	r3, [pc, #496]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a22:	4b79      	ldr	r3, [pc, #484]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	4a78      	ldr	r2, [pc, #480]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a28:	f043 0320 	orr.w	r3, r3, #32
 8002a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2e:	4b76      	ldr	r3, [pc, #472]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	f003 0320 	and.w	r3, r3, #32
 8002a36:	607b      	str	r3, [r7, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a3a:	4b73      	ldr	r3, [pc, #460]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	4a72      	ldr	r2, [pc, #456]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a46:	4b70      	ldr	r3, [pc, #448]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a4e:	603b      	str	r3, [r7, #0]
 8002a50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2160      	movs	r1, #96	@ 0x60
 8002a56:	486d      	ldr	r0, [pc, #436]	@ (8002c0c <MX_GPIO_Init+0x2d8>)
 8002a58:	f004 fd84 	bl	8007564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	2120      	movs	r1, #32
 8002a60:	486b      	ldr	r0, [pc, #428]	@ (8002c10 <MX_GPIO_Init+0x2dc>)
 8002a62:	f004 fd7f 	bl	8007564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8002a66:	2200      	movs	r2, #0
 8002a68:	2108      	movs	r1, #8
 8002a6a:	4869      	ldr	r0, [pc, #420]	@ (8002c10 <MX_GPIO_Init+0x2dc>)
 8002a6c:	f004 fd7a 	bl	8007564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002a70:	2201      	movs	r2, #1
 8002a72:	2108      	movs	r1, #8
 8002a74:	4867      	ldr	r0, [pc, #412]	@ (8002c14 <MX_GPIO_Init+0x2e0>)
 8002a76:	f004 fd75 	bl	8007564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a80:	4865      	ldr	r0, [pc, #404]	@ (8002c18 <MX_GPIO_Init+0x2e4>)
 8002a82:	f004 fd6f 	bl	8007564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8002a86:	2200      	movs	r2, #0
 8002a88:	f645 6140 	movw	r1, #24128	@ 0x5e40
 8002a8c:	4863      	ldr	r0, [pc, #396]	@ (8002c1c <MX_GPIO_Init+0x2e8>)
 8002a8e:	f004 fd69 	bl	8007564 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002a92:	2200      	movs	r2, #0
 8002a94:	21c8      	movs	r1, #200	@ 0xc8
 8002a96:	4862      	ldr	r0, [pc, #392]	@ (8002c20 <MX_GPIO_Init+0x2ec>)
 8002a98:	f004 fd64 	bl	8007564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002a9c:	2308      	movs	r3, #8
 8002a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002aa8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002aac:	4619      	mov	r1, r3
 8002aae:	4857      	ldr	r0, [pc, #348]	@ (8002c0c <MX_GPIO_Init+0x2d8>)
 8002ab0:	f004 fb94 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002ab4:	2304      	movs	r3, #4
 8002ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002ac4:	2309      	movs	r3, #9
 8002ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002ac8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002acc:	4619      	mov	r1, r3
 8002ace:	484f      	ldr	r0, [pc, #316]	@ (8002c0c <MX_GPIO_Init+0x2d8>)
 8002ad0:	f004 fb84 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002ad4:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8002ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ada:	2302      	movs	r3, #2
 8002adc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ae6:	230b      	movs	r3, #11
 8002ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002aea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002aee:	4619      	mov	r1, r3
 8002af0:	484b      	ldr	r0, [pc, #300]	@ (8002c20 <MX_GPIO_Init+0x2ec>)
 8002af2:	f004 fb73 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002af6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002afc:	2312      	movs	r3, #18
 8002afe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b04:	2303      	movs	r3, #3
 8002b06:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b08:	2304      	movs	r3, #4
 8002b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b10:	4619      	mov	r1, r3
 8002b12:	4844      	ldr	r0, [pc, #272]	@ (8002c24 <MX_GPIO_Init+0x2f0>)
 8002b14:	f004 fb62 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8002b18:	f643 0323 	movw	r3, #14371	@ 0x3823
 8002b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b26:	2303      	movs	r3, #3
 8002b28:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002b2a:	230a      	movs	r3, #10
 8002b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b32:	4619      	mov	r1, r3
 8002b34:	483b      	ldr	r0, [pc, #236]	@ (8002c24 <MX_GPIO_Init+0x2f0>)
 8002b36:	f004 fb51 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002b3a:	2380      	movs	r3, #128	@ 0x80
 8002b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002b4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b52:	4619      	mov	r1, r3
 8002b54:	482e      	ldr	r0, [pc, #184]	@ (8002c10 <MX_GPIO_Init+0x2dc>)
 8002b56:	f004 fb41 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 8002b5a:	f248 1340 	movw	r3, #33088	@ 0x8140
 8002b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b60:	2300      	movs	r3, #0
 8002b62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	482e      	ldr	r0, [pc, #184]	@ (8002c28 <MX_GPIO_Init+0x2f4>)
 8002b70:	f004 fb34 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8002b74:	2360      	movs	r3, #96	@ 0x60
 8002b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b80:	2300      	movs	r3, #0
 8002b82:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4820      	ldr	r0, [pc, #128]	@ (8002c0c <MX_GPIO_Init+0x2d8>)
 8002b8c:	f004 fb26 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002b90:	2340      	movs	r3, #64	@ 0x40
 8002b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b94:	2302      	movs	r3, #2
 8002b96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002ba0:	230a      	movs	r3, #10
 8002ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002ba4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ba8:	4619      	mov	r1, r3
 8002baa:	481e      	ldr	r0, [pc, #120]	@ (8002c24 <MX_GPIO_Init+0x2f0>)
 8002bac:	f004 fb16 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002bb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002bbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4819      	ldr	r0, [pc, #100]	@ (8002c2c <MX_GPIO_Init+0x2f8>)
 8002bc6:	f004 fb09 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002bca:	2340      	movs	r3, #64	@ 0x40
 8002bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002bce:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002bd2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002bd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bdc:	4619      	mov	r1, r3
 8002bde:	480c      	ldr	r0, [pc, #48]	@ (8002c10 <MX_GPIO_Init+0x2dc>)
 8002be0:	f004 fafc 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8002be4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bea:	2302      	movs	r3, #2
 8002bec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002bf6:	230a      	movs	r3, #10
 8002bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4809      	ldr	r0, [pc, #36]	@ (8002c28 <MX_GPIO_Init+0x2f4>)
 8002c02:	f004 faeb 	bl	80071dc <HAL_GPIO_Init>
 8002c06:	e013      	b.n	8002c30 <MX_GPIO_Init+0x2fc>
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40020c00 	.word	0x40020c00
 8002c14:	40022800 	.word	0x40022800
 8002c18:	40022000 	.word	0x40022000
 8002c1c:	40021c00 	.word	0x40021c00
 8002c20:	40021800 	.word	0x40021800
 8002c24:	40020400 	.word	0x40020400
 8002c28:	40020000 	.word	0x40020000
 8002c2c:	40022400 	.word	0x40022400

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8002c30:	2328      	movs	r3, #40	@ 0x28
 8002c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c34:	2301      	movs	r3, #1
 8002c36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c44:	4619      	mov	r1, r3
 8002c46:	48b0      	ldr	r0, [pc, #704]	@ (8002f08 <MX_GPIO_Init+0x5d4>)
 8002c48:	f004 fac8 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c4c:	2304      	movs	r3, #4
 8002c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c50:	2302      	movs	r3, #2
 8002c52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002c60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c64:	4619      	mov	r1, r3
 8002c66:	48a9      	ldr	r0, [pc, #676]	@ (8002f0c <MX_GPIO_Init+0x5d8>)
 8002c68:	f004 fab8 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002c6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c72:	2300      	movs	r3, #0
 8002c74:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002c7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c7e:	4619      	mov	r1, r3
 8002c80:	48a3      	ldr	r0, [pc, #652]	@ (8002f10 <MX_GPIO_Init+0x5dc>)
 8002c82:	f004 faab 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002c86:	2308      	movs	r3, #8
 8002c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c92:	2300      	movs	r3, #0
 8002c94:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002c96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	489d      	ldr	r0, [pc, #628]	@ (8002f14 <MX_GPIO_Init+0x5e0>)
 8002c9e:	f004 fa9d 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8002ca2:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4898      	ldr	r0, [pc, #608]	@ (8002f18 <MX_GPIO_Init+0x5e4>)
 8002cb8:	f004 fa90 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002cbc:	2310      	movs	r3, #16
 8002cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002cc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ccc:	4619      	mov	r1, r3
 8002cce:	488e      	ldr	r0, [pc, #568]	@ (8002f08 <MX_GPIO_Init+0x5d4>)
 8002cd0:	f004 fa84 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PH13 PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8002cd4:	f24a 0304 	movw	r3, #40964	@ 0xa004
 8002cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ce2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	488c      	ldr	r0, [pc, #560]	@ (8002f1c <MX_GPIO_Init+0x5e8>)
 8002cea:	f004 fa77 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cfe:	2305      	movs	r3, #5
 8002d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002d02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d06:	4619      	mov	r1, r3
 8002d08:	4880      	ldr	r0, [pc, #512]	@ (8002f0c <MX_GPIO_Init+0x5d8>)
 8002d0a:	f004 fa67 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8002d0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d14:	2301      	movs	r3, #1
 8002d16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8002d20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d24:	4619      	mov	r1, r3
 8002d26:	4879      	ldr	r0, [pc, #484]	@ (8002f0c <MX_GPIO_Init+0x5d8>)
 8002d28:	f004 fa58 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8002d2c:	f645 6340 	movw	r3, #24128	@ 0x5e40
 8002d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d32:	2301      	movs	r3, #1
 8002d34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d42:	4619      	mov	r1, r3
 8002d44:	4875      	ldr	r0, [pc, #468]	@ (8002f1c <MX_GPIO_Init+0x5e8>)
 8002d46:	f004 fa49 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002d4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002d50:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002d54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002d5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d5e:	4619      	mov	r1, r3
 8002d60:	486a      	ldr	r0, [pc, #424]	@ (8002f0c <MX_GPIO_Init+0x5d8>)
 8002d62:	f004 fa3b 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002d66:	23c0      	movs	r3, #192	@ 0xc0
 8002d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d72:	2303      	movs	r3, #3
 8002d74:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d76:	2308      	movs	r3, #8
 8002d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4863      	ldr	r0, [pc, #396]	@ (8002f10 <MX_GPIO_Init+0x5dc>)
 8002d82:	f004 fa2b 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002d86:	2310      	movs	r3, #16
 8002d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d92:	2303      	movs	r3, #3
 8002d94:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002d96:	230a      	movs	r3, #10
 8002d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002d9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d9e:	4619      	mov	r1, r3
 8002da0:	485e      	ldr	r0, [pc, #376]	@ (8002f1c <MX_GPIO_Init+0x5e8>)
 8002da2:	f004 fa1b 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002da6:	23c8      	movs	r3, #200	@ 0xc8
 8002da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002daa:	2301      	movs	r3, #1
 8002dac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db2:	2300      	movs	r3, #0
 8002db4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002db6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4856      	ldr	r0, [pc, #344]	@ (8002f18 <MX_GPIO_Init+0x5e4>)
 8002dbe:	f004 fa0d 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002dc2:	23c0      	movs	r3, #192	@ 0xc0
 8002dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002dd2:	2308      	movs	r3, #8
 8002dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4850      	ldr	r0, [pc, #320]	@ (8002f20 <MX_GPIO_Init+0x5ec>)
 8002dde:	f004 f9fd 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002de2:	2305      	movs	r3, #5
 8002de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de6:	2302      	movs	r3, #2
 8002de8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dee:	2303      	movs	r3, #3
 8002df0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002df2:	230a      	movs	r3, #10
 8002df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002df6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4844      	ldr	r0, [pc, #272]	@ (8002f10 <MX_GPIO_Init+0x5dc>)
 8002dfe:	f004 f9ed 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002e02:	2332      	movs	r3, #50	@ 0x32
 8002e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e06:	2302      	movs	r3, #2
 8002e08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e12:	230b      	movs	r3, #11
 8002e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	483c      	ldr	r0, [pc, #240]	@ (8002f10 <MX_GPIO_Init+0x5dc>)
 8002e1e:	f004 f9dd 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e22:	2304      	movs	r3, #4
 8002e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e26:	2302      	movs	r3, #2
 8002e28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002e32:	2309      	movs	r3, #9
 8002e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4839      	ldr	r0, [pc, #228]	@ (8002f24 <MX_GPIO_Init+0x5f0>)
 8002e3e:	f004 f9cd 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002e42:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e50:	2303      	movs	r3, #3
 8002e52:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002e54:	2309      	movs	r3, #9
 8002e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	482a      	ldr	r0, [pc, #168]	@ (8002f08 <MX_GPIO_Init+0x5d4>)
 8002e60:	f004 f9bc 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002e64:	2386      	movs	r3, #134	@ 0x86
 8002e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e70:	2303      	movs	r3, #3
 8002e72:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e74:	230b      	movs	r3, #11
 8002e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	482a      	ldr	r0, [pc, #168]	@ (8002f28 <MX_GPIO_Init+0x5f4>)
 8002e80:	f004 f9ac 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e84:	2310      	movs	r3, #16
 8002e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e94:	4619      	mov	r1, r3
 8002e96:	4824      	ldr	r0, [pc, #144]	@ (8002f28 <MX_GPIO_Init+0x5f4>)
 8002e98:	f004 f9a0 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002e9c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ea2:	2312      	movs	r3, #18
 8002ea4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002eae:	2304      	movs	r3, #4
 8002eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002eb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4818      	ldr	r0, [pc, #96]	@ (8002f1c <MX_GPIO_Init+0x5e8>)
 8002eba:	f004 f98f 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002ebe:	2328      	movs	r3, #40	@ 0x28
 8002ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002ece:	230a      	movs	r3, #10
 8002ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4813      	ldr	r0, [pc, #76]	@ (8002f28 <MX_GPIO_Init+0x5f4>)
 8002eda:	f004 f97f 	bl	80071dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002ede:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eec:	2300      	movs	r3, #0
 8002eee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ef0:	2305      	movs	r3, #5
 8002ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ef8:	4619      	mov	r1, r3
 8002efa:	480a      	ldr	r0, [pc, #40]	@ (8002f24 <MX_GPIO_Init+0x5f0>)
 8002efc:	f004 f96e 	bl	80071dc <HAL_GPIO_Init>

}
 8002f00:	bf00      	nop
 8002f02:	3740      	adds	r7, #64	@ 0x40
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40020c00 	.word	0x40020c00
 8002f0c:	40022000 	.word	0x40022000
 8002f10:	40020800 	.word	0x40020800
 8002f14:	40022800 	.word	0x40022800
 8002f18:	40021800 	.word	0x40021800
 8002f1c:	40021c00 	.word	0x40021c00
 8002f20:	40021400 	.word	0x40021400
 8002f24:	40020400 	.word	0x40020400
 8002f28:	40020000 	.word	0x40020000

08002f2c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08e      	sub	sp, #56	@ 0x38
 8002f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002f32:	1d3b      	adds	r3, r7, #4
 8002f34:	2234      	movs	r2, #52	@ 0x34
 8002f36:	2100      	movs	r1, #0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f00d f93a 	bl	80101b2 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f40:	4a3a      	ldr	r2, [pc, #232]	@ (800302c <MX_LTDC_Init+0x100>)
 8002f42:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002f44:	4b38      	ldr	r3, [pc, #224]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002f4a:	4b37      	ldr	r3, [pc, #220]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002f50:	4b35      	ldr	r3, [pc, #212]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002f56:	4b34      	ldr	r3, [pc, #208]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8002f5c:	4b32      	ldr	r3, [pc, #200]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f5e:	2228      	movs	r2, #40	@ 0x28
 8002f60:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8002f62:	4b31      	ldr	r3, [pc, #196]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f64:	2209      	movs	r2, #9
 8002f66:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8002f68:	4b2f      	ldr	r3, [pc, #188]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f6a:	2235      	movs	r2, #53	@ 0x35
 8002f6c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8002f6e:	4b2e      	ldr	r3, [pc, #184]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f70:	220b      	movs	r2, #11
 8002f72:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8002f74:	4b2c      	ldr	r3, [pc, #176]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f76:	f240 2215 	movw	r2, #533	@ 0x215
 8002f7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8002f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f7e:	f240 121b 	movw	r2, #283	@ 0x11b
 8002f82:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8002f84:	4b28      	ldr	r3, [pc, #160]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f86:	f240 2235 	movw	r2, #565	@ 0x235
 8002f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8002f8c:	4b26      	ldr	r3, [pc, #152]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f8e:	f240 121d 	movw	r2, #285	@ 0x11d
 8002f92:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002f94:	4b24      	ldr	r3, [pc, #144]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002f9c:	4b22      	ldr	r3, [pc, #136]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002fa4:	4b20      	ldr	r3, [pc, #128]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002fac:	481e      	ldr	r0, [pc, #120]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002fae:	f005 f89d 	bl	80080ec <HAL_LTDC_Init>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8002fb8:	f000 fa24 	bl	8003404 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8002fc0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002fc4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8002fca:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002fce:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002fd4:	23ff      	movs	r3, #255	@ 0xff
 8002fd6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002fdc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002fe0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002fe2:	2307      	movs	r3, #7
 8002fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8002fe6:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8002fea:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8002fec:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8002ff2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002ff6:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800300a:	1d3b      	adds	r3, r7, #4
 800300c:	2200      	movs	r2, #0
 800300e:	4619      	mov	r1, r3
 8003010:	4805      	ldr	r0, [pc, #20]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8003012:	f005 f9fd 	bl	8008410 <HAL_LTDC_ConfigLayer>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800301c:	f000 f9f2 	bl	8003404 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003020:	bf00      	nop
 8003022:	3738      	adds	r7, #56	@ 0x38
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20000660 	.word	0x20000660
 800302c:	40016800 	.word	0x40016800

08003030 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08e      	sub	sp, #56	@ 0x38
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	60da      	str	r2, [r3, #12]
 8003046:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a55      	ldr	r2, [pc, #340]	@ (80031a4 <HAL_LTDC_MspInit+0x174>)
 800304e:	4293      	cmp	r3, r2
 8003050:	f040 80a3 	bne.w	800319a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003054:	4b54      	ldr	r3, [pc, #336]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 8003056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003058:	4a53      	ldr	r2, [pc, #332]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 800305a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800305e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003060:	4b51      	ldr	r3, [pc, #324]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 8003062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003064:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003068:	623b      	str	r3, [r7, #32]
 800306a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800306c:	4b4e      	ldr	r3, [pc, #312]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 800306e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003070:	4a4d      	ldr	r2, [pc, #308]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 8003072:	f043 0310 	orr.w	r3, r3, #16
 8003076:	6313      	str	r3, [r2, #48]	@ 0x30
 8003078:	4b4b      	ldr	r3, [pc, #300]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 800307a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307c:	f003 0310 	and.w	r3, r3, #16
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003084:	4b48      	ldr	r3, [pc, #288]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003088:	4a47      	ldr	r2, [pc, #284]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 800308a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800308e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003090:	4b45      	ldr	r3, [pc, #276]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003094:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800309c:	4b42      	ldr	r3, [pc, #264]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a0:	4a41      	ldr	r2, [pc, #260]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80030a8:	4b3f      	ldr	r3, [pc, #252]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80030b4:	4b3c      	ldr	r3, [pc, #240]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b8:	4a3b      	ldr	r2, [pc, #236]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030be:	6313      	str	r3, [r2, #48]	@ 0x30
 80030c0:	4b39      	ldr	r3, [pc, #228]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80030cc:	4b36      	ldr	r3, [pc, #216]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d0:	4a35      	ldr	r2, [pc, #212]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80030d8:	4b33      	ldr	r3, [pc, #204]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80030e4:	2310      	movs	r3, #16
 80030e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e8:	2302      	movs	r3, #2
 80030ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f0:	2300      	movs	r3, #0
 80030f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80030f4:	230e      	movs	r3, #14
 80030f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80030f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030fc:	4619      	mov	r1, r3
 80030fe:	482b      	ldr	r0, [pc, #172]	@ (80031ac <HAL_LTDC_MspInit+0x17c>)
 8003100:	f004 f86c 	bl	80071dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003104:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8003108:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310a:	2302      	movs	r3, #2
 800310c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310e:	2300      	movs	r3, #0
 8003110:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003112:	2300      	movs	r3, #0
 8003114:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003116:	230e      	movs	r3, #14
 8003118:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800311a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800311e:	4619      	mov	r1, r3
 8003120:	4823      	ldr	r0, [pc, #140]	@ (80031b0 <HAL_LTDC_MspInit+0x180>)
 8003122:	f004 f85b 	bl	80071dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003126:	23f7      	movs	r3, #247	@ 0xf7
 8003128:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312a:	2302      	movs	r3, #2
 800312c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312e:	2300      	movs	r3, #0
 8003130:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003132:	2300      	movs	r3, #0
 8003134:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003136:	230e      	movs	r3, #14
 8003138:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800313a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800313e:	4619      	mov	r1, r3
 8003140:	481c      	ldr	r0, [pc, #112]	@ (80031b4 <HAL_LTDC_MspInit+0x184>)
 8003142:	f004 f84b 	bl	80071dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003146:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800314a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314c:	2302      	movs	r3, #2
 800314e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2300      	movs	r3, #0
 8003152:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003154:	2300      	movs	r3, #0
 8003156:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003158:	2309      	movs	r3, #9
 800315a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800315c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003160:	4619      	mov	r1, r3
 8003162:	4815      	ldr	r0, [pc, #84]	@ (80031b8 <HAL_LTDC_MspInit+0x188>)
 8003164:	f004 f83a 	bl	80071dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003168:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 800316c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316e:	2302      	movs	r3, #2
 8003170:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003172:	2300      	movs	r3, #0
 8003174:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003176:	2300      	movs	r3, #0
 8003178:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800317a:	230e      	movs	r3, #14
 800317c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800317e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003182:	4619      	mov	r1, r3
 8003184:	480d      	ldr	r0, [pc, #52]	@ (80031bc <HAL_LTDC_MspInit+0x18c>)
 8003186:	f004 f829 	bl	80071dc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800318a:	2200      	movs	r2, #0
 800318c:	2105      	movs	r1, #5
 800318e:	2058      	movs	r0, #88	@ 0x58
 8003190:	f003 f87c 	bl	800628c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003194:	2058      	movs	r0, #88	@ 0x58
 8003196:	f003 f895 	bl	80062c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800319a:	bf00      	nop
 800319c:	3738      	adds	r7, #56	@ 0x38
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40016800 	.word	0x40016800
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40022400 	.word	0x40022400
 80031b4:	40022800 	.word	0x40022800
 80031b8:	40021800 	.word	0x40021800
 80031bc:	40022000 	.word	0x40022000

080031c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031c0:	b598      	push	{r3, r4, r7, lr}
 80031c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80031c4:	4b31      	ldr	r3, [pc, #196]	@ (800328c <main+0xcc>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80031ca:	4b30      	ldr	r3, [pc, #192]	@ (800328c <main+0xcc>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031d0:	f002 fb59 	bl	8005886 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031d4:	f000 f862 	bl	800329c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80031d8:	f000 f8d0 	bl	800337c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031dc:	f7ff fbaa 	bl	8002934 <MX_GPIO_Init>
  MX_DMA_Init();
 80031e0:	f7fd fede 	bl	8000fa0 <MX_DMA_Init>
  MX_DMA2D_Init();
 80031e4:	f7fd ff12 	bl	800100c <MX_DMA2D_Init>
  MX_FMC_Init();
 80031e8:	f7fd ff68 	bl	80010bc <MX_FMC_Init>
  MX_LTDC_Init();
 80031ec:	f7ff fe9e 	bl	8002f2c <MX_LTDC_Init>
  MX_TIM5_Init();
 80031f0:	f002 fa00 	bl	80055f4 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80031f4:	f002 fa6c 	bl	80056d0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80031f8:	f7fd fdc0 	bl	8000d7c <MX_ADC1_Init>
  MX_SAI2_Init();
 80031fc:	f000 f908 	bl	8003410 <MX_SAI2_Init>
  MX_ADC3_Init();
 8003200:	f7fd fe0e 	bl	8000e20 <MX_ADC3_Init>
  MX_SDMMC1_SD_Init();
 8003204:	f000 fa8a 	bl	800371c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8003208:	f009 fd48 	bl	800cc9c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 800320c:	f000 fd2c 	bl	8003c68 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8003210:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8003214:	2000      	movs	r0, #0
 8003216:	f000 fdbf 	bl	8003d98 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 800321a:	f000 fd95 	bl	8003d48 <BSP_LCD_GetXSize>
 800321e:	4604      	mov	r4, r0
 8003220:	f000 fda6 	bl	8003d70 <BSP_LCD_GetYSize>
 8003224:	4603      	mov	r3, r0
 8003226:	fb04 f303 	mul.w	r3, r4, r3
 800322a:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4619      	mov	r1, r3
 8003232:	2001      	movs	r0, #1
 8003234:	f000 fdb0 	bl	8003d98 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8003238:	f001 f970 	bl	800451c <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 800323c:	2000      	movs	r0, #0
 800323e:	f000 fe0b 	bl	8003e58 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8003242:	4813      	ldr	r0, [pc, #76]	@ (8003290 <main+0xd0>)
 8003244:	f000 fe64 	bl	8003f10 <BSP_LCD_Clear>
  BSP_LCD_SelectLayer(1);
 8003248:	2001      	movs	r0, #1
 800324a:	f000 fe05 	bl	8003e58 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(00);
 800324e:	2000      	movs	r0, #0
 8003250:	f000 fe5e 	bl	8003f10 <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font16);
 8003254:	480f      	ldr	r0, [pc, #60]	@ (8003294 <main+0xd4>)
 8003256:	f000 fe41 	bl	8003edc <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 800325a:	480f      	ldr	r0, [pc, #60]	@ (8003298 <main+0xd8>)
 800325c:	f000 fe0c 	bl	8003e78 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(00);
 8003260:	2000      	movs	r0, #0
 8003262:	f000 fe21 	bl	8003ea8 <BSP_LCD_SetBackColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8003266:	f000 fd6f 	bl	8003d48 <BSP_LCD_GetXSize>
 800326a:	4603      	mov	r3, r0
 800326c:	b29c      	uxth	r4, r3
 800326e:	f000 fd7f 	bl	8003d70 <BSP_LCD_GetYSize>
 8003272:	4603      	mov	r3, r0
 8003274:	b29b      	uxth	r3, r3
 8003276:	4619      	mov	r1, r3
 8003278:	4620      	mov	r0, r4
 800327a:	f001 fd61 	bl	8004d40 <BSP_TS_Init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800327e:	f7fe f821 	bl	80012c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003282:	f009 ffd2 	bl	800d22a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003286:	bf00      	nop
 8003288:	e7fd      	b.n	8003286 <main+0xc6>
 800328a:	bf00      	nop
 800328c:	20000708 	.word	0x20000708
 8003290:	ff81cd4b 	.word	0xff81cd4b
 8003294:	2000003c 	.word	0x2000003c
 8003298:	ffa52a2a 	.word	0xffa52a2a

0800329c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b094      	sub	sp, #80	@ 0x50
 80032a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032a2:	f107 0320 	add.w	r3, r7, #32
 80032a6:	2230      	movs	r2, #48	@ 0x30
 80032a8:	2100      	movs	r1, #0
 80032aa:	4618      	mov	r0, r3
 80032ac:	f00c ff81 	bl	80101b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032b0:	f107 030c 	add.w	r3, r7, #12
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	60da      	str	r2, [r3, #12]
 80032be:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80032c0:	f005 fa8c 	bl	80087dc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003374 <SystemClock_Config+0xd8>)
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	4a2a      	ldr	r2, [pc, #168]	@ (8003374 <SystemClock_Config+0xd8>)
 80032ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80032d0:	4b28      	ldr	r3, [pc, #160]	@ (8003374 <SystemClock_Config+0xd8>)
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032dc:	4b26      	ldr	r3, [pc, #152]	@ (8003378 <SystemClock_Config+0xdc>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a25      	ldr	r2, [pc, #148]	@ (8003378 <SystemClock_Config+0xdc>)
 80032e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	4b23      	ldr	r3, [pc, #140]	@ (8003378 <SystemClock_Config+0xdc>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80032f0:	607b      	str	r3, [r7, #4]
 80032f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80032f4:	2301      	movs	r3, #1
 80032f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80032fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032fe:	2302      	movs	r3, #2
 8003300:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003302:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003306:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003308:	2319      	movs	r3, #25
 800330a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 800330c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8003310:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003312:	2302      	movs	r3, #2
 8003314:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8003316:	2309      	movs	r3, #9
 8003318:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800331a:	f107 0320 	add.w	r3, r7, #32
 800331e:	4618      	mov	r0, r3
 8003320:	f005 fabc 	bl	800889c <HAL_RCC_OscConfig>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800332a:	f000 f86b 	bl	8003404 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800332e:	f005 fa65 	bl	80087fc <HAL_PWREx_EnableOverDrive>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8003338:	f000 f864 	bl	8003404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800333c:	230f      	movs	r3, #15
 800333e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003340:	2302      	movs	r3, #2
 8003342:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003348:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800334c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800334e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003352:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003354:	f107 030c 	add.w	r3, r7, #12
 8003358:	2106      	movs	r1, #6
 800335a:	4618      	mov	r0, r3
 800335c:	f005 fd42 	bl	8008de4 <HAL_RCC_ClockConfig>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8003366:	f000 f84d 	bl	8003404 <Error_Handler>
  }
}
 800336a:	bf00      	nop
 800336c:	3750      	adds	r7, #80	@ 0x50
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40023800 	.word	0x40023800
 8003378:	40007000 	.word	0x40007000

0800337c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b0a2      	sub	sp, #136	@ 0x88
 8003380:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003382:	1d3b      	adds	r3, r7, #4
 8003384:	2284      	movs	r2, #132	@ 0x84
 8003386:	2100      	movs	r1, #0
 8003388:	4618      	mov	r0, r3
 800338a:	f00c ff12 	bl	80101b2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 800338e:	4b13      	ldr	r3, [pc, #76]	@ (80033dc <PeriphCommonClock_Config+0x60>)
 8003390:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8003392:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003396:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8003398:	2305      	movs	r3, #5
 800339a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800339c:	2302      	movs	r3, #2
 800339e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80033a0:	2303      	movs	r3, #3
 80033a2:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80033a4:	2301      	movs	r3, #1
 80033a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80033a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033ac:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80033ae:	2300      	movs	r3, #0
 80033b0:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80033b2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80033b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80033ba:	2300      	movs	r3, #0
 80033bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033c0:	1d3b      	adds	r3, r7, #4
 80033c2:	4618      	mov	r0, r3
 80033c4:	f005 ff26 	bl	8009214 <HAL_RCCEx_PeriphCLKConfig>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80033ce:	f000 f819 	bl	8003404 <Error_Handler>
  }
}
 80033d2:	bf00      	nop
 80033d4:	3788      	adds	r7, #136	@ 0x88
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	00b00008 	.word	0x00b00008

080033e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a04      	ldr	r2, [pc, #16]	@ (8003400 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80033f2:	f002 fa55 	bl	80058a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40001000 	.word	0x40001000

08003404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003408:	b672      	cpsid	i
}
 800340a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800340c:	bf00      	nop
 800340e:	e7fd      	b.n	800340c <Error_Handler+0x8>

08003410 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8003414:	4b4e      	ldr	r3, [pc, #312]	@ (8003550 <MX_SAI2_Init+0x140>)
 8003416:	4a4f      	ldr	r2, [pc, #316]	@ (8003554 <MX_SAI2_Init+0x144>)
 8003418:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800341a:	4b4d      	ldr	r3, [pc, #308]	@ (8003550 <MX_SAI2_Init+0x140>)
 800341c:	2200      	movs	r2, #0
 800341e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8003420:	4b4b      	ldr	r3, [pc, #300]	@ (8003550 <MX_SAI2_Init+0x140>)
 8003422:	2200      	movs	r2, #0
 8003424:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8003426:	4b4a      	ldr	r3, [pc, #296]	@ (8003550 <MX_SAI2_Init+0x140>)
 8003428:	2240      	movs	r2, #64	@ 0x40
 800342a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800342c:	4b48      	ldr	r3, [pc, #288]	@ (8003550 <MX_SAI2_Init+0x140>)
 800342e:	2200      	movs	r2, #0
 8003430:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8003432:	4b47      	ldr	r3, [pc, #284]	@ (8003550 <MX_SAI2_Init+0x140>)
 8003434:	2200      	movs	r2, #0
 8003436:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8003438:	4b45      	ldr	r3, [pc, #276]	@ (8003550 <MX_SAI2_Init+0x140>)
 800343a:	2200      	movs	r2, #0
 800343c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800343e:	4b44      	ldr	r3, [pc, #272]	@ (8003550 <MX_SAI2_Init+0x140>)
 8003440:	2200      	movs	r2, #0
 8003442:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8003444:	4b42      	ldr	r3, [pc, #264]	@ (8003550 <MX_SAI2_Init+0x140>)
 8003446:	2200      	movs	r2, #0
 8003448:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800344a:	4b41      	ldr	r3, [pc, #260]	@ (8003550 <MX_SAI2_Init+0x140>)
 800344c:	2200      	movs	r2, #0
 800344e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8003450:	4b3f      	ldr	r3, [pc, #252]	@ (8003550 <MX_SAI2_Init+0x140>)
 8003452:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003456:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003458:	4b3d      	ldr	r3, [pc, #244]	@ (8003550 <MX_SAI2_Init+0x140>)
 800345a:	2200      	movs	r2, #0
 800345c:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800345e:	4b3c      	ldr	r3, [pc, #240]	@ (8003550 <MX_SAI2_Init+0x140>)
 8003460:	2200      	movs	r2, #0
 8003462:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8003464:	4b3a      	ldr	r3, [pc, #232]	@ (8003550 <MX_SAI2_Init+0x140>)
 8003466:	2200      	movs	r2, #0
 8003468:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800346a:	4b39      	ldr	r3, [pc, #228]	@ (8003550 <MX_SAI2_Init+0x140>)
 800346c:	2200      	movs	r2, #0
 800346e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8003470:	4b37      	ldr	r3, [pc, #220]	@ (8003550 <MX_SAI2_Init+0x140>)
 8003472:	2208      	movs	r2, #8
 8003474:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8003476:	4b36      	ldr	r3, [pc, #216]	@ (8003550 <MX_SAI2_Init+0x140>)
 8003478:	2201      	movs	r2, #1
 800347a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800347c:	4b34      	ldr	r3, [pc, #208]	@ (8003550 <MX_SAI2_Init+0x140>)
 800347e:	2200      	movs	r2, #0
 8003480:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003482:	4b33      	ldr	r3, [pc, #204]	@ (8003550 <MX_SAI2_Init+0x140>)
 8003484:	2200      	movs	r2, #0
 8003486:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8003488:	4b31      	ldr	r3, [pc, #196]	@ (8003550 <MX_SAI2_Init+0x140>)
 800348a:	2200      	movs	r2, #0
 800348c:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800348e:	4b30      	ldr	r3, [pc, #192]	@ (8003550 <MX_SAI2_Init+0x140>)
 8003490:	2200      	movs	r2, #0
 8003492:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003494:	4b2e      	ldr	r3, [pc, #184]	@ (8003550 <MX_SAI2_Init+0x140>)
 8003496:	2200      	movs	r2, #0
 8003498:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800349a:	4b2d      	ldr	r3, [pc, #180]	@ (8003550 <MX_SAI2_Init+0x140>)
 800349c:	2201      	movs	r2, #1
 800349e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80034a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003550 <MX_SAI2_Init+0x140>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80034a6:	482a      	ldr	r0, [pc, #168]	@ (8003550 <MX_SAI2_Init+0x140>)
 80034a8:	f006 fbe4 	bl	8009c74 <HAL_SAI_Init>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <MX_SAI2_Init+0xa6>
  {
    Error_Handler();
 80034b2:	f7ff ffa7 	bl	8003404 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80034b6:	4b28      	ldr	r3, [pc, #160]	@ (8003558 <MX_SAI2_Init+0x148>)
 80034b8:	4a28      	ldr	r2, [pc, #160]	@ (800355c <MX_SAI2_Init+0x14c>)
 80034ba:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80034bc:	4b26      	ldr	r3, [pc, #152]	@ (8003558 <MX_SAI2_Init+0x148>)
 80034be:	2200      	movs	r2, #0
 80034c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80034c2:	4b25      	ldr	r3, [pc, #148]	@ (8003558 <MX_SAI2_Init+0x148>)
 80034c4:	2203      	movs	r2, #3
 80034c6:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80034c8:	4b23      	ldr	r3, [pc, #140]	@ (8003558 <MX_SAI2_Init+0x148>)
 80034ca:	2240      	movs	r2, #64	@ 0x40
 80034cc:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80034ce:	4b22      	ldr	r3, [pc, #136]	@ (8003558 <MX_SAI2_Init+0x148>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80034d4:	4b20      	ldr	r3, [pc, #128]	@ (8003558 <MX_SAI2_Init+0x148>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80034da:	4b1f      	ldr	r3, [pc, #124]	@ (8003558 <MX_SAI2_Init+0x148>)
 80034dc:	2201      	movs	r2, #1
 80034de:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80034e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003558 <MX_SAI2_Init+0x148>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80034e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003558 <MX_SAI2_Init+0x148>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80034ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003558 <MX_SAI2_Init+0x148>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80034f2:	4b19      	ldr	r3, [pc, #100]	@ (8003558 <MX_SAI2_Init+0x148>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80034f8:	4b17      	ldr	r3, [pc, #92]	@ (8003558 <MX_SAI2_Init+0x148>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80034fe:	4b16      	ldr	r3, [pc, #88]	@ (8003558 <MX_SAI2_Init+0x148>)
 8003500:	2200      	movs	r2, #0
 8003502:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8003504:	4b14      	ldr	r3, [pc, #80]	@ (8003558 <MX_SAI2_Init+0x148>)
 8003506:	2208      	movs	r2, #8
 8003508:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800350a:	4b13      	ldr	r3, [pc, #76]	@ (8003558 <MX_SAI2_Init+0x148>)
 800350c:	2201      	movs	r2, #1
 800350e:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8003510:	4b11      	ldr	r3, [pc, #68]	@ (8003558 <MX_SAI2_Init+0x148>)
 8003512:	2200      	movs	r2, #0
 8003514:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003516:	4b10      	ldr	r3, [pc, #64]	@ (8003558 <MX_SAI2_Init+0x148>)
 8003518:	2200      	movs	r2, #0
 800351a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800351c:	4b0e      	ldr	r3, [pc, #56]	@ (8003558 <MX_SAI2_Init+0x148>)
 800351e:	2200      	movs	r2, #0
 8003520:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8003522:	4b0d      	ldr	r3, [pc, #52]	@ (8003558 <MX_SAI2_Init+0x148>)
 8003524:	2200      	movs	r2, #0
 8003526:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003528:	4b0b      	ldr	r3, [pc, #44]	@ (8003558 <MX_SAI2_Init+0x148>)
 800352a:	2200      	movs	r2, #0
 800352c:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800352e:	4b0a      	ldr	r3, [pc, #40]	@ (8003558 <MX_SAI2_Init+0x148>)
 8003530:	2201      	movs	r2, #1
 8003532:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8003534:	4b08      	ldr	r3, [pc, #32]	@ (8003558 <MX_SAI2_Init+0x148>)
 8003536:	2200      	movs	r2, #0
 8003538:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800353a:	4807      	ldr	r0, [pc, #28]	@ (8003558 <MX_SAI2_Init+0x148>)
 800353c:	f006 fb9a 	bl	8009c74 <HAL_SAI_Init>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <MX_SAI2_Init+0x13a>
  {
    Error_Handler();
 8003546:	f7ff ff5d 	bl	8003404 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000718 	.word	0x20000718
 8003554:	40015c04 	.word	0x40015c04
 8003558:	2000079c 	.word	0x2000079c
 800355c:	40015c24 	.word	0x40015c24

08003560 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08a      	sub	sp, #40	@ 0x28
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a61      	ldr	r2, [pc, #388]	@ (80036f4 <HAL_SAI_MspInit+0x194>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d15b      	bne.n	800362a <HAL_SAI_MspInit+0xca>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8003572:	4b61      	ldr	r3, [pc, #388]	@ (80036f8 <HAL_SAI_MspInit+0x198>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10b      	bne.n	8003592 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800357a:	4b60      	ldr	r3, [pc, #384]	@ (80036fc <HAL_SAI_MspInit+0x19c>)
 800357c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357e:	4a5f      	ldr	r2, [pc, #380]	@ (80036fc <HAL_SAI_MspInit+0x19c>)
 8003580:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003584:	6453      	str	r3, [r2, #68]	@ 0x44
 8003586:	4b5d      	ldr	r3, [pc, #372]	@ (80036fc <HAL_SAI_MspInit+0x19c>)
 8003588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003592:	4b59      	ldr	r3, [pc, #356]	@ (80036f8 <HAL_SAI_MspInit+0x198>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3301      	adds	r3, #1
 8003598:	4a57      	ldr	r2, [pc, #348]	@ (80036f8 <HAL_SAI_MspInit+0x198>)
 800359a:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800359c:	23f0      	movs	r3, #240	@ 0xf0
 800359e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a0:	2302      	movs	r3, #2
 80035a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a8:	2300      	movs	r3, #0
 80035aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80035ac:	230a      	movs	r3, #10
 80035ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80035b0:	f107 0314 	add.w	r3, r7, #20
 80035b4:	4619      	mov	r1, r3
 80035b6:	4852      	ldr	r0, [pc, #328]	@ (8003700 <HAL_SAI_MspInit+0x1a0>)
 80035b8:	f003 fe10 	bl	80071dc <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 80035bc:	4b51      	ldr	r3, [pc, #324]	@ (8003704 <HAL_SAI_MspInit+0x1a4>)
 80035be:	4a52      	ldr	r2, [pc, #328]	@ (8003708 <HAL_SAI_MspInit+0x1a8>)
 80035c0:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 80035c2:	4b50      	ldr	r3, [pc, #320]	@ (8003704 <HAL_SAI_MspInit+0x1a4>)
 80035c4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80035c8:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035ca:	4b4e      	ldr	r3, [pc, #312]	@ (8003704 <HAL_SAI_MspInit+0x1a4>)
 80035cc:	2240      	movs	r2, #64	@ 0x40
 80035ce:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80035d0:	4b4c      	ldr	r3, [pc, #304]	@ (8003704 <HAL_SAI_MspInit+0x1a4>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 80035d6:	4b4b      	ldr	r3, [pc, #300]	@ (8003704 <HAL_SAI_MspInit+0x1a4>)
 80035d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035dc:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035de:	4b49      	ldr	r3, [pc, #292]	@ (8003704 <HAL_SAI_MspInit+0x1a4>)
 80035e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035e4:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035e6:	4b47      	ldr	r3, [pc, #284]	@ (8003704 <HAL_SAI_MspInit+0x1a4>)
 80035e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035ec:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 80035ee:	4b45      	ldr	r3, [pc, #276]	@ (8003704 <HAL_SAI_MspInit+0x1a4>)
 80035f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035f4:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 80035f6:	4b43      	ldr	r3, [pc, #268]	@ (8003704 <HAL_SAI_MspInit+0x1a4>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035fc:	4b41      	ldr	r3, [pc, #260]	@ (8003704 <HAL_SAI_MspInit+0x1a4>)
 80035fe:	2200      	movs	r2, #0
 8003600:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8003602:	4840      	ldr	r0, [pc, #256]	@ (8003704 <HAL_SAI_MspInit+0x1a4>)
 8003604:	f002 fe6c 	bl	80062e0 <HAL_DMA_Init>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <HAL_SAI_MspInit+0xb2>
    {
      Error_Handler();
 800360e:	f7ff fef9 	bl	8003404 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a3b      	ldr	r2, [pc, #236]	@ (8003704 <HAL_SAI_MspInit+0x1a4>)
 8003616:	671a      	str	r2, [r3, #112]	@ 0x70
 8003618:	4a3a      	ldr	r2, [pc, #232]	@ (8003704 <HAL_SAI_MspInit+0x1a4>)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a38      	ldr	r2, [pc, #224]	@ (8003704 <HAL_SAI_MspInit+0x1a4>)
 8003622:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003624:	4a37      	ldr	r2, [pc, #220]	@ (8003704 <HAL_SAI_MspInit+0x1a4>)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6393      	str	r3, [r2, #56]	@ 0x38
    }
    if(saiHandle->Instance==SAI2_Block_B)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a37      	ldr	r2, [pc, #220]	@ (800370c <HAL_SAI_MspInit+0x1ac>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d15b      	bne.n	80036ec <HAL_SAI_MspInit+0x18c>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8003634:	4b30      	ldr	r3, [pc, #192]	@ (80036f8 <HAL_SAI_MspInit+0x198>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10b      	bne.n	8003654 <HAL_SAI_MspInit+0xf4>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800363c:	4b2f      	ldr	r3, [pc, #188]	@ (80036fc <HAL_SAI_MspInit+0x19c>)
 800363e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003640:	4a2e      	ldr	r2, [pc, #184]	@ (80036fc <HAL_SAI_MspInit+0x19c>)
 8003642:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003646:	6453      	str	r3, [r2, #68]	@ 0x44
 8003648:	4b2c      	ldr	r3, [pc, #176]	@ (80036fc <HAL_SAI_MspInit+0x19c>)
 800364a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003654:	4b28      	ldr	r3, [pc, #160]	@ (80036f8 <HAL_SAI_MspInit+0x198>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	3301      	adds	r3, #1
 800365a:	4a27      	ldr	r2, [pc, #156]	@ (80036f8 <HAL_SAI_MspInit+0x198>)
 800365c:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800365e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003664:	2302      	movs	r3, #2
 8003666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003668:	2300      	movs	r3, #0
 800366a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366c:	2300      	movs	r3, #0
 800366e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003670:	230a      	movs	r3, #10
 8003672:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003674:	f107 0314 	add.w	r3, r7, #20
 8003678:	4619      	mov	r1, r3
 800367a:	4825      	ldr	r0, [pc, #148]	@ (8003710 <HAL_SAI_MspInit+0x1b0>)
 800367c:	f003 fdae 	bl	80071dc <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 8003680:	4b24      	ldr	r3, [pc, #144]	@ (8003714 <HAL_SAI_MspInit+0x1b4>)
 8003682:	4a25      	ldr	r2, [pc, #148]	@ (8003718 <HAL_SAI_MspInit+0x1b8>)
 8003684:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 8003686:	4b23      	ldr	r3, [pc, #140]	@ (8003714 <HAL_SAI_MspInit+0x1b4>)
 8003688:	2200      	movs	r2, #0
 800368a:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800368c:	4b21      	ldr	r3, [pc, #132]	@ (8003714 <HAL_SAI_MspInit+0x1b4>)
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8003692:	4b20      	ldr	r3, [pc, #128]	@ (8003714 <HAL_SAI_MspInit+0x1b4>)
 8003694:	2200      	movs	r2, #0
 8003696:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8003698:	4b1e      	ldr	r3, [pc, #120]	@ (8003714 <HAL_SAI_MspInit+0x1b4>)
 800369a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800369e:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003714 <HAL_SAI_MspInit+0x1b4>)
 80036a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036a6:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003714 <HAL_SAI_MspInit+0x1b4>)
 80036aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036ae:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 80036b0:	4b18      	ldr	r3, [pc, #96]	@ (8003714 <HAL_SAI_MspInit+0x1b4>)
 80036b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036b6:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 80036b8:	4b16      	ldr	r3, [pc, #88]	@ (8003714 <HAL_SAI_MspInit+0x1b4>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036be:	4b15      	ldr	r3, [pc, #84]	@ (8003714 <HAL_SAI_MspInit+0x1b4>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80036c4:	4813      	ldr	r0, [pc, #76]	@ (8003714 <HAL_SAI_MspInit+0x1b4>)
 80036c6:	f002 fe0b 	bl	80062e0 <HAL_DMA_Init>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <HAL_SAI_MspInit+0x174>
    {
      Error_Handler();
 80036d0:	f7ff fe98 	bl	8003404 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a0f      	ldr	r2, [pc, #60]	@ (8003714 <HAL_SAI_MspInit+0x1b4>)
 80036d8:	671a      	str	r2, [r3, #112]	@ 0x70
 80036da:	4a0e      	ldr	r2, [pc, #56]	@ (8003714 <HAL_SAI_MspInit+0x1b4>)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a0c      	ldr	r2, [pc, #48]	@ (8003714 <HAL_SAI_MspInit+0x1b4>)
 80036e4:	66da      	str	r2, [r3, #108]	@ 0x6c
 80036e6:	4a0b      	ldr	r2, [pc, #44]	@ (8003714 <HAL_SAI_MspInit+0x1b4>)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 80036ec:	bf00      	nop
 80036ee:	3728      	adds	r7, #40	@ 0x28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40015c04 	.word	0x40015c04
 80036f8:	200008e0 	.word	0x200008e0
 80036fc:	40023800 	.word	0x40023800
 8003700:	40022000 	.word	0x40022000
 8003704:	20000820 	.word	0x20000820
 8003708:	40026470 	.word	0x40026470
 800370c:	40015c24 	.word	0x40015c24
 8003710:	40021800 	.word	0x40021800
 8003714:	20000880 	.word	0x20000880
 8003718:	400264b8 	.word	0x400264b8

0800371c <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003720:	4b0c      	ldr	r3, [pc, #48]	@ (8003754 <MX_SDMMC1_SD_Init+0x38>)
 8003722:	4a0d      	ldr	r2, [pc, #52]	@ (8003758 <MX_SDMMC1_SD_Init+0x3c>)
 8003724:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003726:	4b0b      	ldr	r3, [pc, #44]	@ (8003754 <MX_SDMMC1_SD_Init+0x38>)
 8003728:	2200      	movs	r2, #0
 800372a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800372c:	4b09      	ldr	r3, [pc, #36]	@ (8003754 <MX_SDMMC1_SD_Init+0x38>)
 800372e:	2200      	movs	r2, #0
 8003730:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003732:	4b08      	ldr	r3, [pc, #32]	@ (8003754 <MX_SDMMC1_SD_Init+0x38>)
 8003734:	2200      	movs	r2, #0
 8003736:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8003738:	4b06      	ldr	r3, [pc, #24]	@ (8003754 <MX_SDMMC1_SD_Init+0x38>)
 800373a:	2200      	movs	r2, #0
 800373c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800373e:	4b05      	ldr	r3, [pc, #20]	@ (8003754 <MX_SDMMC1_SD_Init+0x38>)
 8003740:	2200      	movs	r2, #0
 8003742:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8003744:	4b03      	ldr	r3, [pc, #12]	@ (8003754 <MX_SDMMC1_SD_Init+0x38>)
 8003746:	2200      	movs	r2, #0
 8003748:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800374a:	bf00      	nop
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	200008e4 	.word	0x200008e4
 8003758:	40012c00 	.word	0x40012c00

0800375c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08a      	sub	sp, #40	@ 0x28
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003764:	f107 0314 	add.w	r3, r7, #20
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	609a      	str	r2, [r3, #8]
 8003770:	60da      	str	r2, [r3, #12]
 8003772:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a61      	ldr	r2, [pc, #388]	@ (8003900 <HAL_SD_MspInit+0x1a4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	f040 80bb 	bne.w	80038f6 <HAL_SD_MspInit+0x19a>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003780:	4b60      	ldr	r3, [pc, #384]	@ (8003904 <HAL_SD_MspInit+0x1a8>)
 8003782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003784:	4a5f      	ldr	r2, [pc, #380]	@ (8003904 <HAL_SD_MspInit+0x1a8>)
 8003786:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800378a:	6453      	str	r3, [r2, #68]	@ 0x44
 800378c:	4b5d      	ldr	r3, [pc, #372]	@ (8003904 <HAL_SD_MspInit+0x1a8>)
 800378e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003790:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003798:	4b5a      	ldr	r3, [pc, #360]	@ (8003904 <HAL_SD_MspInit+0x1a8>)
 800379a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379c:	4a59      	ldr	r2, [pc, #356]	@ (8003904 <HAL_SD_MspInit+0x1a8>)
 800379e:	f043 0304 	orr.w	r3, r3, #4
 80037a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80037a4:	4b57      	ldr	r3, [pc, #348]	@ (8003904 <HAL_SD_MspInit+0x1a8>)
 80037a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037b0:	4b54      	ldr	r3, [pc, #336]	@ (8003904 <HAL_SD_MspInit+0x1a8>)
 80037b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b4:	4a53      	ldr	r2, [pc, #332]	@ (8003904 <HAL_SD_MspInit+0x1a8>)
 80037b6:	f043 0308 	orr.w	r3, r3, #8
 80037ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80037bc:	4b51      	ldr	r3, [pc, #324]	@ (8003904 <HAL_SD_MspInit+0x1a8>)
 80037be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80037c8:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80037cc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ce:	2302      	movs	r3, #2
 80037d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d2:	2300      	movs	r3, #0
 80037d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037d6:	2303      	movs	r3, #3
 80037d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80037da:	230c      	movs	r3, #12
 80037dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037de:	f107 0314 	add.w	r3, r7, #20
 80037e2:	4619      	mov	r1, r3
 80037e4:	4848      	ldr	r0, [pc, #288]	@ (8003908 <HAL_SD_MspInit+0x1ac>)
 80037e6:	f003 fcf9 	bl	80071dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80037ea:	2304      	movs	r3, #4
 80037ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ee:	2302      	movs	r3, #2
 80037f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037f6:	2303      	movs	r3, #3
 80037f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80037fa:	230c      	movs	r3, #12
 80037fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80037fe:	f107 0314 	add.w	r3, r7, #20
 8003802:	4619      	mov	r1, r3
 8003804:	4841      	ldr	r0, [pc, #260]	@ (800390c <HAL_SD_MspInit+0x1b0>)
 8003806:	f003 fce9 	bl	80071dc <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800380a:	4b41      	ldr	r3, [pc, #260]	@ (8003910 <HAL_SD_MspInit+0x1b4>)
 800380c:	4a41      	ldr	r2, [pc, #260]	@ (8003914 <HAL_SD_MspInit+0x1b8>)
 800380e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8003810:	4b3f      	ldr	r3, [pc, #252]	@ (8003910 <HAL_SD_MspInit+0x1b4>)
 8003812:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003816:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003818:	4b3d      	ldr	r3, [pc, #244]	@ (8003910 <HAL_SD_MspInit+0x1b4>)
 800381a:	2200      	movs	r2, #0
 800381c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800381e:	4b3c      	ldr	r3, [pc, #240]	@ (8003910 <HAL_SD_MspInit+0x1b4>)
 8003820:	2200      	movs	r2, #0
 8003822:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003824:	4b3a      	ldr	r3, [pc, #232]	@ (8003910 <HAL_SD_MspInit+0x1b4>)
 8003826:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800382a:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800382c:	4b38      	ldr	r3, [pc, #224]	@ (8003910 <HAL_SD_MspInit+0x1b4>)
 800382e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003832:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003834:	4b36      	ldr	r3, [pc, #216]	@ (8003910 <HAL_SD_MspInit+0x1b4>)
 8003836:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800383a:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 800383c:	4b34      	ldr	r3, [pc, #208]	@ (8003910 <HAL_SD_MspInit+0x1b4>)
 800383e:	2220      	movs	r2, #32
 8003840:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003842:	4b33      	ldr	r3, [pc, #204]	@ (8003910 <HAL_SD_MspInit+0x1b4>)
 8003844:	2200      	movs	r2, #0
 8003846:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003848:	4b31      	ldr	r3, [pc, #196]	@ (8003910 <HAL_SD_MspInit+0x1b4>)
 800384a:	2204      	movs	r2, #4
 800384c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800384e:	4b30      	ldr	r3, [pc, #192]	@ (8003910 <HAL_SD_MspInit+0x1b4>)
 8003850:	2203      	movs	r2, #3
 8003852:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003854:	4b2e      	ldr	r3, [pc, #184]	@ (8003910 <HAL_SD_MspInit+0x1b4>)
 8003856:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800385a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800385c:	4b2c      	ldr	r3, [pc, #176]	@ (8003910 <HAL_SD_MspInit+0x1b4>)
 800385e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003862:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8003864:	482a      	ldr	r0, [pc, #168]	@ (8003910 <HAL_SD_MspInit+0x1b4>)
 8003866:	f002 fd3b 	bl	80062e0 <HAL_DMA_Init>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8003870:	f7ff fdc8 	bl	8003404 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a26      	ldr	r2, [pc, #152]	@ (8003910 <HAL_SD_MspInit+0x1b4>)
 8003878:	641a      	str	r2, [r3, #64]	@ 0x40
 800387a:	4a25      	ldr	r2, [pc, #148]	@ (8003910 <HAL_SD_MspInit+0x1b4>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8003880:	4b25      	ldr	r3, [pc, #148]	@ (8003918 <HAL_SD_MspInit+0x1bc>)
 8003882:	4a26      	ldr	r2, [pc, #152]	@ (800391c <HAL_SD_MspInit+0x1c0>)
 8003884:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8003886:	4b24      	ldr	r3, [pc, #144]	@ (8003918 <HAL_SD_MspInit+0x1bc>)
 8003888:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800388c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800388e:	4b22      	ldr	r3, [pc, #136]	@ (8003918 <HAL_SD_MspInit+0x1bc>)
 8003890:	2240      	movs	r2, #64	@ 0x40
 8003892:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003894:	4b20      	ldr	r3, [pc, #128]	@ (8003918 <HAL_SD_MspInit+0x1bc>)
 8003896:	2200      	movs	r2, #0
 8003898:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800389a:	4b1f      	ldr	r3, [pc, #124]	@ (8003918 <HAL_SD_MspInit+0x1bc>)
 800389c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038a0:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003918 <HAL_SD_MspInit+0x1bc>)
 80038a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80038a8:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80038aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003918 <HAL_SD_MspInit+0x1bc>)
 80038ac:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80038b0:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80038b2:	4b19      	ldr	r3, [pc, #100]	@ (8003918 <HAL_SD_MspInit+0x1bc>)
 80038b4:	2220      	movs	r2, #32
 80038b6:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80038b8:	4b17      	ldr	r3, [pc, #92]	@ (8003918 <HAL_SD_MspInit+0x1bc>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80038be:	4b16      	ldr	r3, [pc, #88]	@ (8003918 <HAL_SD_MspInit+0x1bc>)
 80038c0:	2204      	movs	r2, #4
 80038c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80038c4:	4b14      	ldr	r3, [pc, #80]	@ (8003918 <HAL_SD_MspInit+0x1bc>)
 80038c6:	2203      	movs	r2, #3
 80038c8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80038ca:	4b13      	ldr	r3, [pc, #76]	@ (8003918 <HAL_SD_MspInit+0x1bc>)
 80038cc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80038d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80038d2:	4b11      	ldr	r3, [pc, #68]	@ (8003918 <HAL_SD_MspInit+0x1bc>)
 80038d4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80038d8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80038da:	480f      	ldr	r0, [pc, #60]	@ (8003918 <HAL_SD_MspInit+0x1bc>)
 80038dc:	f002 fd00 	bl	80062e0 <HAL_DMA_Init>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 80038e6:	f7ff fd8d 	bl	8003404 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003918 <HAL_SD_MspInit+0x1bc>)
 80038ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80038f0:	4a09      	ldr	r2, [pc, #36]	@ (8003918 <HAL_SD_MspInit+0x1bc>)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80038f6:	bf00      	nop
 80038f8:	3728      	adds	r7, #40	@ 0x28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40012c00 	.word	0x40012c00
 8003904:	40023800 	.word	0x40023800
 8003908:	40020800 	.word	0x40020800
 800390c:	40020c00 	.word	0x40020c00
 8003910:	20000968 	.word	0x20000968
 8003914:	40026458 	.word	0x40026458
 8003918:	200009c8 	.word	0x200009c8
 800391c:	400264a0 	.word	0x400264a0

08003920 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08c      	sub	sp, #48	@ 0x30
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a51      	ldr	r2, [pc, #324]	@ (8003a70 <I2Cx_MspInit+0x150>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d14d      	bne.n	80039cc <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003930:	4b50      	ldr	r3, [pc, #320]	@ (8003a74 <I2Cx_MspInit+0x154>)
 8003932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003934:	4a4f      	ldr	r2, [pc, #316]	@ (8003a74 <I2Cx_MspInit+0x154>)
 8003936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800393a:	6313      	str	r3, [r2, #48]	@ 0x30
 800393c:	4b4d      	ldr	r3, [pc, #308]	@ (8003a74 <I2Cx_MspInit+0x154>)
 800393e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003944:	61bb      	str	r3, [r7, #24]
 8003946:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003948:	2380      	movs	r3, #128	@ 0x80
 800394a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800394c:	2312      	movs	r3, #18
 800394e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003950:	2300      	movs	r3, #0
 8003952:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003954:	2302      	movs	r3, #2
 8003956:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8003958:	2304      	movs	r3, #4
 800395a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800395c:	f107 031c 	add.w	r3, r7, #28
 8003960:	4619      	mov	r1, r3
 8003962:	4845      	ldr	r0, [pc, #276]	@ (8003a78 <I2Cx_MspInit+0x158>)
 8003964:	f003 fc3a 	bl	80071dc <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003968:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800396c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800396e:	f107 031c 	add.w	r3, r7, #28
 8003972:	4619      	mov	r1, r3
 8003974:	4840      	ldr	r0, [pc, #256]	@ (8003a78 <I2Cx_MspInit+0x158>)
 8003976:	f003 fc31 	bl	80071dc <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800397a:	4b3e      	ldr	r3, [pc, #248]	@ (8003a74 <I2Cx_MspInit+0x154>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397e:	4a3d      	ldr	r2, [pc, #244]	@ (8003a74 <I2Cx_MspInit+0x154>)
 8003980:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003984:	6413      	str	r3, [r2, #64]	@ 0x40
 8003986:	4b3b      	ldr	r3, [pc, #236]	@ (8003a74 <I2Cx_MspInit+0x154>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003992:	4b38      	ldr	r3, [pc, #224]	@ (8003a74 <I2Cx_MspInit+0x154>)
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	4a37      	ldr	r2, [pc, #220]	@ (8003a74 <I2Cx_MspInit+0x154>)
 8003998:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800399c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800399e:	4b35      	ldr	r3, [pc, #212]	@ (8003a74 <I2Cx_MspInit+0x154>)
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	4a34      	ldr	r2, [pc, #208]	@ (8003a74 <I2Cx_MspInit+0x154>)
 80039a4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80039a8:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80039aa:	2200      	movs	r2, #0
 80039ac:	210f      	movs	r1, #15
 80039ae:	2048      	movs	r0, #72	@ 0x48
 80039b0:	f002 fc6c 	bl	800628c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80039b4:	2048      	movs	r0, #72	@ 0x48
 80039b6:	f002 fc85 	bl	80062c4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80039ba:	2200      	movs	r2, #0
 80039bc:	210f      	movs	r1, #15
 80039be:	2049      	movs	r0, #73	@ 0x49
 80039c0:	f002 fc64 	bl	800628c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80039c4:	2049      	movs	r0, #73	@ 0x49
 80039c6:	f002 fc7d 	bl	80062c4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80039ca:	e04d      	b.n	8003a68 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80039cc:	4b29      	ldr	r3, [pc, #164]	@ (8003a74 <I2Cx_MspInit+0x154>)
 80039ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d0:	4a28      	ldr	r2, [pc, #160]	@ (8003a74 <I2Cx_MspInit+0x154>)
 80039d2:	f043 0302 	orr.w	r3, r3, #2
 80039d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80039d8:	4b26      	ldr	r3, [pc, #152]	@ (8003a74 <I2Cx_MspInit+0x154>)
 80039da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80039e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039e8:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80039ea:	2312      	movs	r3, #18
 80039ec:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80039f2:	2302      	movs	r3, #2
 80039f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80039f6:	2304      	movs	r3, #4
 80039f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80039fa:	f107 031c 	add.w	r3, r7, #28
 80039fe:	4619      	mov	r1, r3
 8003a00:	481e      	ldr	r0, [pc, #120]	@ (8003a7c <I2Cx_MspInit+0x15c>)
 8003a02:	f003 fbeb 	bl	80071dc <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003a06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003a0c:	f107 031c 	add.w	r3, r7, #28
 8003a10:	4619      	mov	r1, r3
 8003a12:	481a      	ldr	r0, [pc, #104]	@ (8003a7c <I2Cx_MspInit+0x15c>)
 8003a14:	f003 fbe2 	bl	80071dc <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003a18:	4b16      	ldr	r3, [pc, #88]	@ (8003a74 <I2Cx_MspInit+0x154>)
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1c:	4a15      	ldr	r2, [pc, #84]	@ (8003a74 <I2Cx_MspInit+0x154>)
 8003a1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003a22:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a24:	4b13      	ldr	r3, [pc, #76]	@ (8003a74 <I2Cx_MspInit+0x154>)
 8003a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a2c:	60fb      	str	r3, [r7, #12]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003a30:	4b10      	ldr	r3, [pc, #64]	@ (8003a74 <I2Cx_MspInit+0x154>)
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	4a0f      	ldr	r2, [pc, #60]	@ (8003a74 <I2Cx_MspInit+0x154>)
 8003a36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003a3a:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a74 <I2Cx_MspInit+0x154>)
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	4a0c      	ldr	r2, [pc, #48]	@ (8003a74 <I2Cx_MspInit+0x154>)
 8003a42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a46:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003a48:	2200      	movs	r2, #0
 8003a4a:	210f      	movs	r1, #15
 8003a4c:	201f      	movs	r0, #31
 8003a4e:	f002 fc1d 	bl	800628c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003a52:	201f      	movs	r0, #31
 8003a54:	f002 fc36 	bl	80062c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003a58:	2200      	movs	r2, #0
 8003a5a:	210f      	movs	r1, #15
 8003a5c:	2020      	movs	r0, #32
 8003a5e:	f002 fc15 	bl	800628c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003a62:	2020      	movs	r0, #32
 8003a64:	f002 fc2e 	bl	80062c4 <HAL_NVIC_EnableIRQ>
}
 8003a68:	bf00      	nop
 8003a6a:	3730      	adds	r7, #48	@ 0x30
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	20000a28 	.word	0x20000a28
 8003a74:	40023800 	.word	0x40023800
 8003a78:	40021c00 	.word	0x40021c00
 8003a7c:	40020400 	.word	0x40020400

08003a80 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f004 f887 	bl	8007b9c <HAL_I2C_GetState>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d125      	bne.n	8003ae0 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a14      	ldr	r2, [pc, #80]	@ (8003ae8 <I2Cx_Init+0x68>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d103      	bne.n	8003aa4 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a13      	ldr	r2, [pc, #76]	@ (8003aec <I2Cx_Init+0x6c>)
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	e002      	b.n	8003aaa <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a12      	ldr	r2, [pc, #72]	@ (8003af0 <I2Cx_Init+0x70>)
 8003aa8:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a11      	ldr	r2, [pc, #68]	@ (8003af4 <I2Cx_Init+0x74>)
 8003aae:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff ff23 	bl	8003920 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f003 fd5c 	bl	8007598 <HAL_I2C_Init>
  }
}
 8003ae0:	bf00      	nop
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20000a28 	.word	0x20000a28
 8003aec:	40005c00 	.word	0x40005c00
 8003af0:	40005400 	.word	0x40005400
 8003af4:	40912732 	.word	0x40912732

08003af8 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08a      	sub	sp, #40	@ 0x28
 8003afc:	af04      	add	r7, sp, #16
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	4608      	mov	r0, r1
 8003b02:	4611      	mov	r1, r2
 8003b04:	461a      	mov	r2, r3
 8003b06:	4603      	mov	r3, r0
 8003b08:	72fb      	strb	r3, [r7, #11]
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	813b      	strh	r3, [r7, #8]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003b16:	7afb      	ldrb	r3, [r7, #11]
 8003b18:	b299      	uxth	r1, r3
 8003b1a:	88f8      	ldrh	r0, [r7, #6]
 8003b1c:	893a      	ldrh	r2, [r7, #8]
 8003b1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b22:	9302      	str	r3, [sp, #8]
 8003b24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003b26:	9301      	str	r3, [sp, #4]
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f003 ff1a 	bl	8007968 <HAL_I2C_Mem_Read>
 8003b34:	4603      	mov	r3, r0
 8003b36:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d004      	beq.n	8003b48 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003b3e:	7afb      	ldrb	r3, [r7, #11]
 8003b40:	4619      	mov	r1, r3
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f832 	bl	8003bac <I2Cx_Error>
  }
  return status;    
 8003b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b08a      	sub	sp, #40	@ 0x28
 8003b56:	af04      	add	r7, sp, #16
 8003b58:	60f8      	str	r0, [r7, #12]
 8003b5a:	4608      	mov	r0, r1
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	461a      	mov	r2, r3
 8003b60:	4603      	mov	r3, r0
 8003b62:	72fb      	strb	r3, [r7, #11]
 8003b64:	460b      	mov	r3, r1
 8003b66:	813b      	strh	r3, [r7, #8]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003b70:	7afb      	ldrb	r3, [r7, #11]
 8003b72:	b299      	uxth	r1, r3
 8003b74:	88f8      	ldrh	r0, [r7, #6]
 8003b76:	893a      	ldrh	r2, [r7, #8]
 8003b78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b7c:	9302      	str	r3, [sp, #8]
 8003b7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003b80:	9301      	str	r3, [sp, #4]
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	4603      	mov	r3, r0
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f003 fdd9 	bl	8007740 <HAL_I2C_Mem_Write>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003b92:	7dfb      	ldrb	r3, [r7, #23]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d004      	beq.n	8003ba2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003b98:	7afb      	ldrb	r3, [r7, #11]
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f805 	bl	8003bac <I2Cx_Error>
  }
  return status;
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f003 fd7d 	bl	80076b8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff ff5e 	bl	8003a80 <I2Cx_Init>
}
 8003bc4:	bf00      	nop
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003bd0:	4802      	ldr	r0, [pc, #8]	@ (8003bdc <TS_IO_Init+0x10>)
 8003bd2:	f7ff ff55 	bl	8003a80 <I2Cx_Init>
}
 8003bd6:	bf00      	nop
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20000a28 	.word	0x20000a28

08003be0 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af02      	add	r7, sp, #8
 8003be6:	4603      	mov	r3, r0
 8003be8:	71fb      	strb	r3, [r7, #7]
 8003bea:	460b      	mov	r3, r1
 8003bec:	71bb      	strb	r3, [r7, #6]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003bf2:	79bb      	ldrb	r3, [r7, #6]
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	79f9      	ldrb	r1, [r7, #7]
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	9301      	str	r3, [sp, #4]
 8003bfc:	1d7b      	adds	r3, r7, #5
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	2301      	movs	r3, #1
 8003c02:	4803      	ldr	r0, [pc, #12]	@ (8003c10 <TS_IO_Write+0x30>)
 8003c04:	f7ff ffa5 	bl	8003b52 <I2Cx_WriteMultiple>
}
 8003c08:	bf00      	nop
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	20000a28 	.word	0x20000a28

08003c14 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	460a      	mov	r2, r1
 8003c1e:	71fb      	strb	r3, [r7, #7]
 8003c20:	4613      	mov	r3, r2
 8003c22:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003c28:	79bb      	ldrb	r3, [r7, #6]
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	79f9      	ldrb	r1, [r7, #7]
 8003c2e:	2301      	movs	r3, #1
 8003c30:	9301      	str	r3, [sp, #4]
 8003c32:	f107 030f 	add.w	r3, r7, #15
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	2301      	movs	r3, #1
 8003c3a:	4804      	ldr	r0, [pc, #16]	@ (8003c4c <TS_IO_Read+0x38>)
 8003c3c:	f7ff ff5c 	bl	8003af8 <I2Cx_ReadMultiple>

  return read_value;
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20000a28 	.word	0x20000a28

08003c50 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f001 fe41 	bl	80058e0 <HAL_Delay>
}
 8003c5e:	bf00      	nop
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
	...

08003c68 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8003c6c:	4b31      	ldr	r3, [pc, #196]	@ (8003d34 <BSP_LCD_Init+0xcc>)
 8003c6e:	2228      	movs	r2, #40	@ 0x28
 8003c70:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003c72:	4b30      	ldr	r3, [pc, #192]	@ (8003d34 <BSP_LCD_Init+0xcc>)
 8003c74:	2209      	movs	r2, #9
 8003c76:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003c78:	4b2e      	ldr	r3, [pc, #184]	@ (8003d34 <BSP_LCD_Init+0xcc>)
 8003c7a:	2235      	movs	r2, #53	@ 0x35
 8003c7c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8003d34 <BSP_LCD_Init+0xcc>)
 8003c80:	220b      	movs	r2, #11
 8003c82:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003c84:	4b2b      	ldr	r3, [pc, #172]	@ (8003d34 <BSP_LCD_Init+0xcc>)
 8003c86:	f240 121b 	movw	r2, #283	@ 0x11b
 8003c8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003c8c:	4b29      	ldr	r3, [pc, #164]	@ (8003d34 <BSP_LCD_Init+0xcc>)
 8003c8e:	f240 2215 	movw	r2, #533	@ 0x215
 8003c92:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8003c94:	4b27      	ldr	r3, [pc, #156]	@ (8003d34 <BSP_LCD_Init+0xcc>)
 8003c96:	f240 121d 	movw	r2, #285	@ 0x11d
 8003c9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003c9c:	4b25      	ldr	r3, [pc, #148]	@ (8003d34 <BSP_LCD_Init+0xcc>)
 8003c9e:	f240 2235 	movw	r2, #565	@ 0x235
 8003ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	4823      	ldr	r0, [pc, #140]	@ (8003d34 <BSP_LCD_Init+0xcc>)
 8003ca8:	f000 fd30 	bl	800470c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8003cac:	4b21      	ldr	r3, [pc, #132]	@ (8003d34 <BSP_LCD_Init+0xcc>)
 8003cae:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003cb2:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8003d34 <BSP_LCD_Init+0xcc>)
 8003cb6:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8003cba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8003d34 <BSP_LCD_Init+0xcc>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d34 <BSP_LCD_Init+0xcc>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8003ccc:	4b19      	ldr	r3, [pc, #100]	@ (8003d34 <BSP_LCD_Init+0xcc>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003cd4:	4b17      	ldr	r3, [pc, #92]	@ (8003d34 <BSP_LCD_Init+0xcc>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8003cda:	4b16      	ldr	r3, [pc, #88]	@ (8003d34 <BSP_LCD_Init+0xcc>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8003ce0:	4b14      	ldr	r3, [pc, #80]	@ (8003d34 <BSP_LCD_Init+0xcc>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003ce6:	4b13      	ldr	r3, [pc, #76]	@ (8003d34 <BSP_LCD_Init+0xcc>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8003cec:	4b11      	ldr	r3, [pc, #68]	@ (8003d34 <BSP_LCD_Init+0xcc>)
 8003cee:	4a12      	ldr	r2, [pc, #72]	@ (8003d38 <BSP_LCD_Init+0xd0>)
 8003cf0:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8003cf2:	4810      	ldr	r0, [pc, #64]	@ (8003d34 <BSP_LCD_Init+0xcc>)
 8003cf4:	f004 fbca 	bl	800848c <HAL_LTDC_GetState>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d103      	bne.n	8003d06 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8003cfe:	2100      	movs	r1, #0
 8003d00:	480c      	ldr	r0, [pc, #48]	@ (8003d34 <BSP_LCD_Init+0xcc>)
 8003d02:	f000 fc29 	bl	8004558 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8003d06:	480b      	ldr	r0, [pc, #44]	@ (8003d34 <BSP_LCD_Init+0xcc>)
 8003d08:	f004 f9f0 	bl	80080ec <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d12:	480a      	ldr	r0, [pc, #40]	@ (8003d3c <BSP_LCD_Init+0xd4>)
 8003d14:	f003 fc26 	bl	8007564 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003d18:	2201      	movs	r2, #1
 8003d1a:	2108      	movs	r1, #8
 8003d1c:	4808      	ldr	r0, [pc, #32]	@ (8003d40 <BSP_LCD_Init+0xd8>)
 8003d1e:	f003 fc21 	bl	8007564 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8003d22:	f000 fe57 	bl	80049d4 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003d26:	4807      	ldr	r0, [pc, #28]	@ (8003d44 <BSP_LCD_Init+0xdc>)
 8003d28:	f000 f8d8 	bl	8003edc <BSP_LCD_SetFont>
  
  return LCD_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000a7c 	.word	0x20000a7c
 8003d38:	40016800 	.word	0x40016800
 8003d3c:	40022000 	.word	0x40022000
 8003d40:	40022800 	.word	0x40022800
 8003d44:	20000034 	.word	0x20000034

08003d48 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003d4c:	4b06      	ldr	r3, [pc, #24]	@ (8003d68 <BSP_LCD_GetXSize+0x20>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a06      	ldr	r2, [pc, #24]	@ (8003d6c <BSP_LCD_GetXSize+0x24>)
 8003d52:	2134      	movs	r1, #52	@ 0x34
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	4413      	add	r3, r2
 8003d5a:	3360      	adds	r3, #96	@ 0x60
 8003d5c:	681b      	ldr	r3, [r3, #0]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	20000b64 	.word	0x20000b64
 8003d6c:	20000a7c 	.word	0x20000a7c

08003d70 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8003d74:	4b06      	ldr	r3, [pc, #24]	@ (8003d90 <BSP_LCD_GetYSize+0x20>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a06      	ldr	r2, [pc, #24]	@ (8003d94 <BSP_LCD_GetYSize+0x24>)
 8003d7a:	2134      	movs	r1, #52	@ 0x34
 8003d7c:	fb01 f303 	mul.w	r3, r1, r3
 8003d80:	4413      	add	r3, r2
 8003d82:	3364      	adds	r3, #100	@ 0x64
 8003d84:	681b      	ldr	r3, [r3, #0]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	20000b64 	.word	0x20000b64
 8003d94:	20000a7c 	.word	0x20000a7c

08003d98 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b090      	sub	sp, #64	@ 0x40
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	6039      	str	r1, [r7, #0]
 8003da2:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8003da4:	2300      	movs	r3, #0
 8003da6:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8003da8:	f7ff ffce 	bl	8003d48 <BSP_LCD_GetXSize>
 8003dac:	4603      	mov	r3, r0
 8003dae:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003db4:	f7ff ffdc 	bl	8003d70 <BSP_LCD_GetYSize>
 8003db8:	4603      	mov	r3, r0
 8003dba:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8003dc4:	23ff      	movs	r3, #255	@ 0xff
 8003dc6:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003dde:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003de4:	2307      	movs	r3, #7
 8003de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8003de8:	f7ff ffae 	bl	8003d48 <BSP_LCD_GetXSize>
 8003dec:	4603      	mov	r3, r0
 8003dee:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8003df0:	f7ff ffbe 	bl	8003d70 <BSP_LCD_GetYSize>
 8003df4:	4603      	mov	r3, r0
 8003df6:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003df8:	88fa      	ldrh	r2, [r7, #6]
 8003dfa:	f107 030c 	add.w	r3, r7, #12
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4812      	ldr	r0, [pc, #72]	@ (8003e4c <BSP_LCD_LayerDefaultInit+0xb4>)
 8003e02:	f004 fb05 	bl	8008410 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003e06:	88fa      	ldrh	r2, [r7, #6]
 8003e08:	4911      	ldr	r1, [pc, #68]	@ (8003e50 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	4413      	add	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	440b      	add	r3, r1
 8003e14:	3304      	adds	r3, #4
 8003e16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e1a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003e1c:	88fa      	ldrh	r2, [r7, #6]
 8003e1e:	490c      	ldr	r1, [pc, #48]	@ (8003e50 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003e20:	4613      	mov	r3, r2
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	4413      	add	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	3308      	adds	r3, #8
 8003e2c:	4a09      	ldr	r2, [pc, #36]	@ (8003e54 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003e2e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003e30:	88fa      	ldrh	r2, [r7, #6]
 8003e32:	4907      	ldr	r1, [pc, #28]	@ (8003e50 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003e34:	4613      	mov	r3, r2
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8003e42:	601a      	str	r2, [r3, #0]
}
 8003e44:	bf00      	nop
 8003e46:	3740      	adds	r7, #64	@ 0x40
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	20000a7c 	.word	0x20000a7c
 8003e50:	20000b68 	.word	0x20000b68
 8003e54:	20000034 	.word	0x20000034

08003e58 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003e60:	4a04      	ldr	r2, [pc, #16]	@ (8003e74 <BSP_LCD_SelectLayer+0x1c>)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6013      	str	r3, [r2, #0]
} 
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	20000b64 	.word	0x20000b64

08003e78 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003e80:	4b07      	ldr	r3, [pc, #28]	@ (8003ea0 <BSP_LCD_SetTextColor+0x28>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	4907      	ldr	r1, [pc, #28]	@ (8003ea4 <BSP_LCD_SetTextColor+0x2c>)
 8003e86:	4613      	mov	r3, r2
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	601a      	str	r2, [r3, #0]
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	20000b64 	.word	0x20000b64
 8003ea4:	20000b68 	.word	0x20000b68

08003ea8 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003eb0:	4b08      	ldr	r3, [pc, #32]	@ (8003ed4 <BSP_LCD_SetBackColor+0x2c>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	4908      	ldr	r1, [pc, #32]	@ (8003ed8 <BSP_LCD_SetBackColor+0x30>)
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	4413      	add	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	440b      	add	r3, r1
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	601a      	str	r2, [r3, #0]
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	20000b64 	.word	0x20000b64
 8003ed8:	20000b68 	.word	0x20000b68

08003edc <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003ee4:	4b08      	ldr	r3, [pc, #32]	@ (8003f08 <BSP_LCD_SetFont+0x2c>)
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	4908      	ldr	r1, [pc, #32]	@ (8003f0c <BSP_LCD_SetFont+0x30>)
 8003eea:	4613      	mov	r3, r2
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	601a      	str	r2, [r3, #0]
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	20000b64 	.word	0x20000b64
 8003f0c:	20000b68 	.word	0x20000b68

08003f10 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af02      	add	r7, sp, #8
 8003f16:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003f18:	4b0f      	ldr	r3, [pc, #60]	@ (8003f58 <BSP_LCD_Clear+0x48>)
 8003f1a:	681c      	ldr	r4, [r3, #0]
 8003f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003f58 <BSP_LCD_Clear+0x48>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a0e      	ldr	r2, [pc, #56]	@ (8003f5c <BSP_LCD_Clear+0x4c>)
 8003f22:	2134      	movs	r1, #52	@ 0x34
 8003f24:	fb01 f303 	mul.w	r3, r1, r3
 8003f28:	4413      	add	r3, r2
 8003f2a:	335c      	adds	r3, #92	@ 0x5c
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	461e      	mov	r6, r3
 8003f30:	f7ff ff0a 	bl	8003d48 <BSP_LCD_GetXSize>
 8003f34:	4605      	mov	r5, r0
 8003f36:	f7ff ff1b 	bl	8003d70 <BSP_LCD_GetYSize>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	9301      	str	r3, [sp, #4]
 8003f40:	2300      	movs	r3, #0
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	462a      	mov	r2, r5
 8003f48:	4631      	mov	r1, r6
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	f000 fcb2 	bl	80048b4 <LL_FillBuffer>
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f58:	20000b64 	.word	0x20000b64
 8003f5c:	20000a7c 	.word	0x20000a7c

08003f60 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003f60:	b590      	push	{r4, r7, lr}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4603      	mov	r3, r0
 8003f68:	80fb      	strh	r3, [r7, #6]
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	80bb      	strh	r3, [r7, #4]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003f72:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe0 <BSP_LCD_DisplayChar+0x80>)
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	491b      	ldr	r1, [pc, #108]	@ (8003fe4 <BSP_LCD_DisplayChar+0x84>)
 8003f78:	4613      	mov	r3, r2
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	3308      	adds	r3, #8
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6819      	ldr	r1, [r3, #0]
 8003f88:	78fb      	ldrb	r3, [r7, #3]
 8003f8a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003f8e:	4b14      	ldr	r3, [pc, #80]	@ (8003fe0 <BSP_LCD_DisplayChar+0x80>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	4c14      	ldr	r4, [pc, #80]	@ (8003fe4 <BSP_LCD_DisplayChar+0x84>)
 8003f94:	4613      	mov	r3, r2
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4423      	add	r3, r4
 8003f9e:	3308      	adds	r3, #8
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003fa4:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe0 <BSP_LCD_DisplayChar+0x80>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	4c0d      	ldr	r4, [pc, #52]	@ (8003fe4 <BSP_LCD_DisplayChar+0x84>)
 8003fae:	4613      	mov	r3, r2
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	4413      	add	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4423      	add	r3, r4
 8003fb8:	3308      	adds	r3, #8
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	889b      	ldrh	r3, [r3, #4]
 8003fbe:	3307      	adds	r3, #7
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	da00      	bge.n	8003fc6 <BSP_LCD_DisplayChar+0x66>
 8003fc4:	3307      	adds	r3, #7
 8003fc6:	10db      	asrs	r3, r3, #3
 8003fc8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003fcc:	18ca      	adds	r2, r1, r3
 8003fce:	88b9      	ldrh	r1, [r7, #4]
 8003fd0:	88fb      	ldrh	r3, [r7, #6]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fbb6 	bl	8004744 <DrawChar>
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd90      	pop	{r4, r7, pc}
 8003fe0:	20000b64 	.word	0x20000b64
 8003fe4:	20000b68 	.word	0x20000b68

08003fe8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003fe8:	b5b0      	push	{r4, r5, r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60ba      	str	r2, [r7, #8]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	81fb      	strh	r3, [r7, #14]
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	81bb      	strh	r3, [r7, #12]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8003ffe:	2301      	movs	r3, #1
 8004000:	83fb      	strh	r3, [r7, #30]
 8004002:	2300      	movs	r3, #0
 8004004:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8004006:	2300      	movs	r3, #0
 8004008:	61bb      	str	r3, [r7, #24]
 800400a:	2300      	movs	r3, #0
 800400c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8004012:	e002      	b.n	800401a <BSP_LCD_DisplayStringAt+0x32>
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	3301      	adds	r3, #1
 8004018:	61bb      	str	r3, [r7, #24]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	617a      	str	r2, [r7, #20]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f6      	bne.n	8004014 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8004026:	f7ff fe8f 	bl	8003d48 <BSP_LCD_GetXSize>
 800402a:	4601      	mov	r1, r0
 800402c:	4b50      	ldr	r3, [pc, #320]	@ (8004170 <BSP_LCD_DisplayStringAt+0x188>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	4850      	ldr	r0, [pc, #320]	@ (8004174 <BSP_LCD_DisplayStringAt+0x18c>)
 8004032:	4613      	mov	r3, r2
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	4413      	add	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4403      	add	r3, r0
 800403c:	3308      	adds	r3, #8
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	889b      	ldrh	r3, [r3, #4]
 8004042:	fbb1 f3f3 	udiv	r3, r1, r3
 8004046:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	2b03      	cmp	r3, #3
 800404c:	d01c      	beq.n	8004088 <BSP_LCD_DisplayStringAt+0xa0>
 800404e:	2b03      	cmp	r3, #3
 8004050:	dc33      	bgt.n	80040ba <BSP_LCD_DisplayStringAt+0xd2>
 8004052:	2b01      	cmp	r3, #1
 8004054:	d002      	beq.n	800405c <BSP_LCD_DisplayStringAt+0x74>
 8004056:	2b02      	cmp	r3, #2
 8004058:	d019      	beq.n	800408e <BSP_LCD_DisplayStringAt+0xa6>
 800405a:	e02e      	b.n	80040ba <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	1ad1      	subs	r1, r2, r3
 8004062:	4b43      	ldr	r3, [pc, #268]	@ (8004170 <BSP_LCD_DisplayStringAt+0x188>)
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	4843      	ldr	r0, [pc, #268]	@ (8004174 <BSP_LCD_DisplayStringAt+0x18c>)
 8004068:	4613      	mov	r3, r2
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	4413      	add	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4403      	add	r3, r0
 8004072:	3308      	adds	r3, #8
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	889b      	ldrh	r3, [r3, #4]
 8004078:	fb01 f303 	mul.w	r3, r1, r3
 800407c:	085b      	lsrs	r3, r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	89fb      	ldrh	r3, [r7, #14]
 8004082:	4413      	add	r3, r2
 8004084:	83fb      	strh	r3, [r7, #30]
      break;
 8004086:	e01b      	b.n	80040c0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8004088:	89fb      	ldrh	r3, [r7, #14]
 800408a:	83fb      	strh	r3, [r7, #30]
      break;
 800408c:	e018      	b.n	80040c0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	b299      	uxth	r1, r3
 8004096:	4b36      	ldr	r3, [pc, #216]	@ (8004170 <BSP_LCD_DisplayStringAt+0x188>)
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	4836      	ldr	r0, [pc, #216]	@ (8004174 <BSP_LCD_DisplayStringAt+0x18c>)
 800409c:	4613      	mov	r3, r2
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4403      	add	r3, r0
 80040a6:	3308      	adds	r3, #8
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	889b      	ldrh	r3, [r3, #4]
 80040ac:	fb11 f303 	smulbb	r3, r1, r3
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	89fb      	ldrh	r3, [r7, #14]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	83fb      	strh	r3, [r7, #30]
      break;
 80040b8:	e002      	b.n	80040c0 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80040ba:	89fb      	ldrh	r3, [r7, #14]
 80040bc:	83fb      	strh	r3, [r7, #30]
      break;
 80040be:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80040c0:	8bfb      	ldrh	r3, [r7, #30]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <BSP_LCD_DisplayStringAt+0xe6>
 80040c6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	da1d      	bge.n	800410a <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80040ce:	2301      	movs	r3, #1
 80040d0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80040d2:	e01a      	b.n	800410a <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	781a      	ldrb	r2, [r3, #0]
 80040d8:	89b9      	ldrh	r1, [r7, #12]
 80040da:	8bfb      	ldrh	r3, [r7, #30]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff ff3f 	bl	8003f60 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80040e2:	4b23      	ldr	r3, [pc, #140]	@ (8004170 <BSP_LCD_DisplayStringAt+0x188>)
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	4923      	ldr	r1, [pc, #140]	@ (8004174 <BSP_LCD_DisplayStringAt+0x18c>)
 80040e8:	4613      	mov	r3, r2
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	4413      	add	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	440b      	add	r3, r1
 80040f2:	3308      	adds	r3, #8
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	889a      	ldrh	r2, [r3, #4]
 80040f8:	8bfb      	ldrh	r3, [r7, #30]
 80040fa:	4413      	add	r3, r2
 80040fc:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	3301      	adds	r3, #1
 8004102:	60bb      	str	r3, [r7, #8]
    i++;
 8004104:	8bbb      	ldrh	r3, [r7, #28]
 8004106:	3301      	adds	r3, #1
 8004108:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	bf14      	ite	ne
 8004112:	2301      	movne	r3, #1
 8004114:	2300      	moveq	r3, #0
 8004116:	b2dc      	uxtb	r4, r3
 8004118:	f7ff fe16 	bl	8003d48 <BSP_LCD_GetXSize>
 800411c:	8bb9      	ldrh	r1, [r7, #28]
 800411e:	4b14      	ldr	r3, [pc, #80]	@ (8004170 <BSP_LCD_DisplayStringAt+0x188>)
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	4d14      	ldr	r5, [pc, #80]	@ (8004174 <BSP_LCD_DisplayStringAt+0x18c>)
 8004124:	4613      	mov	r3, r2
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	4413      	add	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	442b      	add	r3, r5
 800412e:	3308      	adds	r3, #8
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	889b      	ldrh	r3, [r3, #4]
 8004134:	fb01 f303 	mul.w	r3, r1, r3
 8004138:	1ac3      	subs	r3, r0, r3
 800413a:	b299      	uxth	r1, r3
 800413c:	4b0c      	ldr	r3, [pc, #48]	@ (8004170 <BSP_LCD_DisplayStringAt+0x188>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	480c      	ldr	r0, [pc, #48]	@ (8004174 <BSP_LCD_DisplayStringAt+0x18c>)
 8004142:	4613      	mov	r3, r2
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	4413      	add	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4403      	add	r3, r0
 800414c:	3308      	adds	r3, #8
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	889b      	ldrh	r3, [r3, #4]
 8004152:	4299      	cmp	r1, r3
 8004154:	bf2c      	ite	cs
 8004156:	2301      	movcs	r3, #1
 8004158:	2300      	movcc	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	4023      	ands	r3, r4
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1b7      	bne.n	80040d4 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8004164:	bf00      	nop
 8004166:	bf00      	nop
 8004168:	3720      	adds	r7, #32
 800416a:	46bd      	mov	sp, r7
 800416c:	bdb0      	pop	{r4, r5, r7, pc}
 800416e:	bf00      	nop
 8004170:	20000b64 	.word	0x20000b64
 8004174:	20000b68 	.word	0x20000b68

08004178 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004178:	b5b0      	push	{r4, r5, r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af02      	add	r7, sp, #8
 800417e:	4603      	mov	r3, r0
 8004180:	80fb      	strh	r3, [r7, #6]
 8004182:	460b      	mov	r3, r1
 8004184:	80bb      	strh	r3, [r7, #4]
 8004186:	4613      	mov	r3, r2
 8004188:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800418e:	4b26      	ldr	r3, [pc, #152]	@ (8004228 <BSP_LCD_DrawHLine+0xb0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a26      	ldr	r2, [pc, #152]	@ (800422c <BSP_LCD_DrawHLine+0xb4>)
 8004194:	2134      	movs	r1, #52	@ 0x34
 8004196:	fb01 f303 	mul.w	r3, r1, r3
 800419a:	4413      	add	r3, r2
 800419c:	3348      	adds	r3, #72	@ 0x48
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d114      	bne.n	80041ce <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80041a4:	4b20      	ldr	r3, [pc, #128]	@ (8004228 <BSP_LCD_DrawHLine+0xb0>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a20      	ldr	r2, [pc, #128]	@ (800422c <BSP_LCD_DrawHLine+0xb4>)
 80041aa:	2134      	movs	r1, #52	@ 0x34
 80041ac:	fb01 f303 	mul.w	r3, r1, r3
 80041b0:	4413      	add	r3, r2
 80041b2:	335c      	adds	r3, #92	@ 0x5c
 80041b4:	681c      	ldr	r4, [r3, #0]
 80041b6:	f7ff fdc7 	bl	8003d48 <BSP_LCD_GetXSize>
 80041ba:	4602      	mov	r2, r0
 80041bc:	88bb      	ldrh	r3, [r7, #4]
 80041be:	fb03 f202 	mul.w	r2, r3, r2
 80041c2:	88fb      	ldrh	r3, [r7, #6]
 80041c4:	4413      	add	r3, r2
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	4423      	add	r3, r4
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	e013      	b.n	80041f6 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80041ce:	4b16      	ldr	r3, [pc, #88]	@ (8004228 <BSP_LCD_DrawHLine+0xb0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a16      	ldr	r2, [pc, #88]	@ (800422c <BSP_LCD_DrawHLine+0xb4>)
 80041d4:	2134      	movs	r1, #52	@ 0x34
 80041d6:	fb01 f303 	mul.w	r3, r1, r3
 80041da:	4413      	add	r3, r2
 80041dc:	335c      	adds	r3, #92	@ 0x5c
 80041de:	681c      	ldr	r4, [r3, #0]
 80041e0:	f7ff fdb2 	bl	8003d48 <BSP_LCD_GetXSize>
 80041e4:	4602      	mov	r2, r0
 80041e6:	88bb      	ldrh	r3, [r7, #4]
 80041e8:	fb03 f202 	mul.w	r2, r3, r2
 80041ec:	88fb      	ldrh	r3, [r7, #6]
 80041ee:	4413      	add	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4423      	add	r3, r4
 80041f4:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80041f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004228 <BSP_LCD_DrawHLine+0xb0>)
 80041f8:	6818      	ldr	r0, [r3, #0]
 80041fa:	68f9      	ldr	r1, [r7, #12]
 80041fc:	887c      	ldrh	r4, [r7, #2]
 80041fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004228 <BSP_LCD_DrawHLine+0xb0>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4d0b      	ldr	r5, [pc, #44]	@ (8004230 <BSP_LCD_DrawHLine+0xb8>)
 8004204:	4613      	mov	r3, r2
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	4413      	add	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	442b      	add	r3, r5
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	9301      	str	r3, [sp, #4]
 8004212:	2300      	movs	r3, #0
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	2301      	movs	r3, #1
 8004218:	4622      	mov	r2, r4
 800421a:	f000 fb4b 	bl	80048b4 <LL_FillBuffer>
}
 800421e:	bf00      	nop
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bdb0      	pop	{r4, r5, r7, pc}
 8004226:	bf00      	nop
 8004228:	20000b64 	.word	0x20000b64
 800422c:	20000a7c 	.word	0x20000a7c
 8004230:	20000b68 	.word	0x20000b68

08004234 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004234:	b5b0      	push	{r4, r5, r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	603a      	str	r2, [r7, #0]
 800423e:	80fb      	strh	r3, [r7, #6]
 8004240:	460b      	mov	r3, r1
 8004242:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004244:	4b1d      	ldr	r3, [pc, #116]	@ (80042bc <BSP_LCD_DrawPixel+0x88>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a1d      	ldr	r2, [pc, #116]	@ (80042c0 <BSP_LCD_DrawPixel+0x8c>)
 800424a:	2134      	movs	r1, #52	@ 0x34
 800424c:	fb01 f303 	mul.w	r3, r1, r3
 8004250:	4413      	add	r3, r2
 8004252:	3348      	adds	r3, #72	@ 0x48
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b02      	cmp	r3, #2
 8004258:	d116      	bne.n	8004288 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800425a:	4b18      	ldr	r3, [pc, #96]	@ (80042bc <BSP_LCD_DrawPixel+0x88>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a18      	ldr	r2, [pc, #96]	@ (80042c0 <BSP_LCD_DrawPixel+0x8c>)
 8004260:	2134      	movs	r1, #52	@ 0x34
 8004262:	fb01 f303 	mul.w	r3, r1, r3
 8004266:	4413      	add	r3, r2
 8004268:	335c      	adds	r3, #92	@ 0x5c
 800426a:	681c      	ldr	r4, [r3, #0]
 800426c:	88bd      	ldrh	r5, [r7, #4]
 800426e:	f7ff fd6b 	bl	8003d48 <BSP_LCD_GetXSize>
 8004272:	4603      	mov	r3, r0
 8004274:	fb03 f205 	mul.w	r2, r3, r5
 8004278:	88fb      	ldrh	r3, [r7, #6]
 800427a:	4413      	add	r3, r2
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	4423      	add	r3, r4
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	b292      	uxth	r2, r2
 8004284:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8004286:	e015      	b.n	80042b4 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004288:	4b0c      	ldr	r3, [pc, #48]	@ (80042bc <BSP_LCD_DrawPixel+0x88>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a0c      	ldr	r2, [pc, #48]	@ (80042c0 <BSP_LCD_DrawPixel+0x8c>)
 800428e:	2134      	movs	r1, #52	@ 0x34
 8004290:	fb01 f303 	mul.w	r3, r1, r3
 8004294:	4413      	add	r3, r2
 8004296:	335c      	adds	r3, #92	@ 0x5c
 8004298:	681c      	ldr	r4, [r3, #0]
 800429a:	88bd      	ldrh	r5, [r7, #4]
 800429c:	f7ff fd54 	bl	8003d48 <BSP_LCD_GetXSize>
 80042a0:	4603      	mov	r3, r0
 80042a2:	fb03 f205 	mul.w	r2, r3, r5
 80042a6:	88fb      	ldrh	r3, [r7, #6]
 80042a8:	4413      	add	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4423      	add	r3, r4
 80042ae:	461a      	mov	r2, r3
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	6013      	str	r3, [r2, #0]
}
 80042b4:	bf00      	nop
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bdb0      	pop	{r4, r5, r7, pc}
 80042bc:	20000b64 	.word	0x20000b64
 80042c0:	20000a7c 	.word	0x20000a7c

080042c4 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 80042c4:	b590      	push	{r4, r7, lr}
 80042c6:	b08b      	sub	sp, #44	@ 0x2c
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042d4:	2300      	movs	r3, #0
 80042d6:	61bb      	str	r3, [r7, #24]
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	2300      	movs	r3, #0
 80042de:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 80042e0:	2300      	movs	r3, #0
 80042e2:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	330a      	adds	r3, #10
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	330b      	adds	r3, #11
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	441a      	add	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	330c      	adds	r3, #12
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	041b      	lsls	r3, r3, #16
 80042fe:	441a      	add	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	330d      	adds	r3, #13
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	061b      	lsls	r3, r3, #24
 8004308:	4413      	add	r3, r2
 800430a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3312      	adds	r3, #18
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3313      	adds	r3, #19
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	021b      	lsls	r3, r3, #8
 800431c:	441a      	add	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3314      	adds	r3, #20
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	041b      	lsls	r3, r3, #16
 8004326:	441a      	add	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3315      	adds	r3, #21
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	061b      	lsls	r3, r3, #24
 8004330:	4413      	add	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3316      	adds	r3, #22
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3317      	adds	r3, #23
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	021b      	lsls	r3, r3, #8
 8004344:	441a      	add	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3318      	adds	r3, #24
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	041b      	lsls	r3, r3, #16
 800434e:	441a      	add	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3319      	adds	r3, #25
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	061b      	lsls	r3, r3, #24
 8004358:	4413      	add	r3, r2
 800435a:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	331c      	adds	r3, #28
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	331d      	adds	r3, #29
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	021b      	lsls	r3, r3, #8
 800436c:	4413      	add	r3, r2
 800436e:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8004370:	4b2b      	ldr	r3, [pc, #172]	@ (8004420 <BSP_LCD_DrawBitmap+0x15c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a2b      	ldr	r2, [pc, #172]	@ (8004424 <BSP_LCD_DrawBitmap+0x160>)
 8004376:	2134      	movs	r1, #52	@ 0x34
 8004378:	fb01 f303 	mul.w	r3, r1, r3
 800437c:	4413      	add	r3, r2
 800437e:	335c      	adds	r3, #92	@ 0x5c
 8004380:	681c      	ldr	r4, [r3, #0]
 8004382:	f7ff fce1 	bl	8003d48 <BSP_LCD_GetXSize>
 8004386:	4602      	mov	r2, r0
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	fb03 f202 	mul.w	r2, r3, r2
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4413      	add	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4423      	add	r3, r4
 8004396:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	3b20      	subs	r3, #32
 800439c:	2b07      	cmp	r3, #7
 800439e:	d802      	bhi.n	80043a6 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 80043a0:	2300      	movs	r3, #0
 80043a2:	61fb      	str	r3, [r7, #28]
 80043a4:	e008      	b.n	80043b8 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	3b10      	subs	r3, #16
 80043aa:	2b07      	cmp	r3, #7
 80043ac:	d802      	bhi.n	80043b4 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 80043ae:	2302      	movs	r3, #2
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	e001      	b.n	80043b8 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 80043b4:	2301      	movs	r3, #1
 80043b6:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	fb02 f303 	mul.w	r3, r2, r3
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	08d2      	lsrs	r2, r2, #3
 80043c6:	fb03 f202 	mul.w	r2, r3, r2
 80043ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043cc:	4413      	add	r3, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	4413      	add	r3, r2
 80043d2:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80043d4:	2300      	movs	r3, #0
 80043d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80043d8:	e018      	b.n	800440c <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 80043da:	6a39      	ldr	r1, [r7, #32]
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 fab3 	bl	800494c <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 80043e6:	f7ff fcaf 	bl	8003d48 <BSP_LCD_GetXSize>
 80043ea:	4603      	mov	r3, r0
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	6a3a      	ldr	r2, [r7, #32]
 80043f0:	4413      	add	r3, r2
 80043f2:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	08db      	lsrs	r3, r3, #3
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	fb02 f303 	mul.w	r3, r2, r3
 80043fe:	425b      	negs	r3, r3
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	4413      	add	r3, r2
 8004404:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8004406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004408:	3301      	adds	r3, #1
 800440a:	627b      	str	r3, [r7, #36]	@ 0x24
 800440c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	429a      	cmp	r2, r3
 8004412:	d3e2      	bcc.n	80043da <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8004414:	bf00      	nop
 8004416:	bf00      	nop
 8004418:	372c      	adds	r7, #44	@ 0x2c
 800441a:	46bd      	mov	sp, r7
 800441c:	bd90      	pop	{r4, r7, pc}
 800441e:	bf00      	nop
 8004420:	20000b64 	.word	0x20000b64
 8004424:	20000a7c 	.word	0x20000a7c

08004428 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800442c:	b086      	sub	sp, #24
 800442e:	af02      	add	r7, sp, #8
 8004430:	4604      	mov	r4, r0
 8004432:	4608      	mov	r0, r1
 8004434:	4611      	mov	r1, r2
 8004436:	461a      	mov	r2, r3
 8004438:	4623      	mov	r3, r4
 800443a:	80fb      	strh	r3, [r7, #6]
 800443c:	4603      	mov	r3, r0
 800443e:	80bb      	strh	r3, [r7, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	807b      	strh	r3, [r7, #2]
 8004444:	4613      	mov	r3, r2
 8004446:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800444c:	4b30      	ldr	r3, [pc, #192]	@ (8004510 <BSP_LCD_FillRect+0xe8>)
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	4930      	ldr	r1, [pc, #192]	@ (8004514 <BSP_LCD_FillRect+0xec>)
 8004452:	4613      	mov	r3, r2
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	440b      	add	r3, r1
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff fd0a 	bl	8003e78 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004464:	4b2a      	ldr	r3, [pc, #168]	@ (8004510 <BSP_LCD_FillRect+0xe8>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a2b      	ldr	r2, [pc, #172]	@ (8004518 <BSP_LCD_FillRect+0xf0>)
 800446a:	2134      	movs	r1, #52	@ 0x34
 800446c:	fb01 f303 	mul.w	r3, r1, r3
 8004470:	4413      	add	r3, r2
 8004472:	3348      	adds	r3, #72	@ 0x48
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d114      	bne.n	80044a4 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800447a:	4b25      	ldr	r3, [pc, #148]	@ (8004510 <BSP_LCD_FillRect+0xe8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a26      	ldr	r2, [pc, #152]	@ (8004518 <BSP_LCD_FillRect+0xf0>)
 8004480:	2134      	movs	r1, #52	@ 0x34
 8004482:	fb01 f303 	mul.w	r3, r1, r3
 8004486:	4413      	add	r3, r2
 8004488:	335c      	adds	r3, #92	@ 0x5c
 800448a:	681c      	ldr	r4, [r3, #0]
 800448c:	f7ff fc5c 	bl	8003d48 <BSP_LCD_GetXSize>
 8004490:	4602      	mov	r2, r0
 8004492:	88bb      	ldrh	r3, [r7, #4]
 8004494:	fb03 f202 	mul.w	r2, r3, r2
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	4413      	add	r3, r2
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	4423      	add	r3, r4
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	e013      	b.n	80044cc <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80044a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004510 <BSP_LCD_FillRect+0xe8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004518 <BSP_LCD_FillRect+0xf0>)
 80044aa:	2134      	movs	r1, #52	@ 0x34
 80044ac:	fb01 f303 	mul.w	r3, r1, r3
 80044b0:	4413      	add	r3, r2
 80044b2:	335c      	adds	r3, #92	@ 0x5c
 80044b4:	681c      	ldr	r4, [r3, #0]
 80044b6:	f7ff fc47 	bl	8003d48 <BSP_LCD_GetXSize>
 80044ba:	4602      	mov	r2, r0
 80044bc:	88bb      	ldrh	r3, [r7, #4]
 80044be:	fb03 f202 	mul.w	r2, r3, r2
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	4413      	add	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4423      	add	r3, r4
 80044ca:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80044cc:	4b10      	ldr	r3, [pc, #64]	@ (8004510 <BSP_LCD_FillRect+0xe8>)
 80044ce:	681c      	ldr	r4, [r3, #0]
 80044d0:	68fd      	ldr	r5, [r7, #12]
 80044d2:	887e      	ldrh	r6, [r7, #2]
 80044d4:	f8b7 8000 	ldrh.w	r8, [r7]
 80044d8:	f7ff fc36 	bl	8003d48 <BSP_LCD_GetXSize>
 80044dc:	4602      	mov	r2, r0
 80044de:	887b      	ldrh	r3, [r7, #2]
 80044e0:	1ad1      	subs	r1, r2, r3
 80044e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004510 <BSP_LCD_FillRect+0xe8>)
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	480b      	ldr	r0, [pc, #44]	@ (8004514 <BSP_LCD_FillRect+0xec>)
 80044e8:	4613      	mov	r3, r2
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4403      	add	r3, r0
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	9301      	str	r3, [sp, #4]
 80044f6:	9100      	str	r1, [sp, #0]
 80044f8:	4643      	mov	r3, r8
 80044fa:	4632      	mov	r2, r6
 80044fc:	4629      	mov	r1, r5
 80044fe:	4620      	mov	r0, r4
 8004500:	f000 f9d8 	bl	80048b4 <LL_FillBuffer>
}
 8004504:	bf00      	nop
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800450e:	bf00      	nop
 8004510:	20000b64 	.word	0x20000b64
 8004514:	20000b68 	.word	0x20000b68
 8004518:	20000a7c 	.word	0x20000a7c

0800451c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8004520:	4b0a      	ldr	r3, [pc, #40]	@ (800454c <BSP_LCD_DisplayOn+0x30>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	699a      	ldr	r2, [r3, #24]
 8004526:	4b09      	ldr	r3, [pc, #36]	@ (800454c <BSP_LCD_DisplayOn+0x30>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8004530:	2201      	movs	r2, #1
 8004532:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004536:	4806      	ldr	r0, [pc, #24]	@ (8004550 <BSP_LCD_DisplayOn+0x34>)
 8004538:	f003 f814 	bl	8007564 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 800453c:	2201      	movs	r2, #1
 800453e:	2108      	movs	r1, #8
 8004540:	4804      	ldr	r0, [pc, #16]	@ (8004554 <BSP_LCD_DisplayOn+0x38>)
 8004542:	f003 f80f 	bl	8007564 <HAL_GPIO_WritePin>
}
 8004546:	bf00      	nop
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000a7c 	.word	0x20000a7c
 8004550:	40022000 	.word	0x40022000
 8004554:	40022800 	.word	0x40022800

08004558 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b090      	sub	sp, #64	@ 0x40
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004562:	4b64      	ldr	r3, [pc, #400]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 8004564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004566:	4a63      	ldr	r2, [pc, #396]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 8004568:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800456c:	6453      	str	r3, [r2, #68]	@ 0x44
 800456e:	4b61      	ldr	r3, [pc, #388]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 8004570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004572:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004576:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800457a:	4b5e      	ldr	r3, [pc, #376]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 800457c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457e:	4a5d      	ldr	r2, [pc, #372]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 8004580:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004584:	6313      	str	r3, [r2, #48]	@ 0x30
 8004586:	4b5b      	ldr	r3, [pc, #364]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 8004588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800458e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004592:	4b58      	ldr	r3, [pc, #352]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 8004594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004596:	4a57      	ldr	r2, [pc, #348]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 8004598:	f043 0310 	orr.w	r3, r3, #16
 800459c:	6313      	str	r3, [r2, #48]	@ 0x30
 800459e:	4b55      	ldr	r3, [pc, #340]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 80045a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a2:	f003 0310 	and.w	r3, r3, #16
 80045a6:	623b      	str	r3, [r7, #32]
 80045a8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80045aa:	4b52      	ldr	r3, [pc, #328]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ae:	4a51      	ldr	r2, [pc, #324]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 80045b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80045b6:	4b4f      	ldr	r3, [pc, #316]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045be:	61fb      	str	r3, [r7, #28]
 80045c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80045c2:	4b4c      	ldr	r3, [pc, #304]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c6:	4a4b      	ldr	r2, [pc, #300]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 80045c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80045ce:	4b49      	ldr	r3, [pc, #292]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d6:	61bb      	str	r3, [r7, #24]
 80045d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80045da:	4b46      	ldr	r3, [pc, #280]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045de:	4a45      	ldr	r2, [pc, #276]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 80045e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80045e6:	4b43      	ldr	r3, [pc, #268]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80045f2:	4b40      	ldr	r3, [pc, #256]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 80045f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f6:	4a3f      	ldr	r2, [pc, #252]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 80045f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80045fe:	4b3d      	ldr	r3, [pc, #244]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800460a:	4b3a      	ldr	r3, [pc, #232]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460e:	4a39      	ldr	r2, [pc, #228]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 8004610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004614:	6313      	str	r3, [r2, #48]	@ 0x30
 8004616:	4b37      	ldr	r3, [pc, #220]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8004622:	4b34      	ldr	r3, [pc, #208]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004626:	4a33      	ldr	r2, [pc, #204]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 8004628:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800462c:	6313      	str	r3, [r2, #48]	@ 0x30
 800462e:	4b31      	ldr	r3, [pc, #196]	@ (80046f4 <BSP_LCD_MspInit+0x19c>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004636:	60bb      	str	r3, [r7, #8]
 8004638:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800463a:	2310      	movs	r3, #16
 800463c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800463e:	2302      	movs	r3, #2
 8004640:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004642:	2300      	movs	r3, #0
 8004644:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004646:	2302      	movs	r3, #2
 8004648:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800464a:	230e      	movs	r3, #14
 800464c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800464e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004652:	4619      	mov	r1, r3
 8004654:	4828      	ldr	r0, [pc, #160]	@ (80046f8 <BSP_LCD_MspInit+0x1a0>)
 8004656:	f002 fdc1 	bl	80071dc <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800465a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800465e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004660:	2302      	movs	r3, #2
 8004662:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8004664:	2309      	movs	r3, #9
 8004666:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004668:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800466c:	4619      	mov	r1, r3
 800466e:	4823      	ldr	r0, [pc, #140]	@ (80046fc <BSP_LCD_MspInit+0x1a4>)
 8004670:	f002 fdb4 	bl	80071dc <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8004674:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8004678:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800467a:	2302      	movs	r3, #2
 800467c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800467e:	230e      	movs	r3, #14
 8004680:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8004682:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004686:	4619      	mov	r1, r3
 8004688:	481d      	ldr	r0, [pc, #116]	@ (8004700 <BSP_LCD_MspInit+0x1a8>)
 800468a:	f002 fda7 	bl	80071dc <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800468e:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8004692:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004694:	2302      	movs	r3, #2
 8004696:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004698:	230e      	movs	r3, #14
 800469a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800469c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046a0:	4619      	mov	r1, r3
 80046a2:	4818      	ldr	r0, [pc, #96]	@ (8004704 <BSP_LCD_MspInit+0x1ac>)
 80046a4:	f002 fd9a 	bl	80071dc <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80046a8:	23f7      	movs	r3, #247	@ 0xf7
 80046aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80046ac:	2302      	movs	r3, #2
 80046ae:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80046b0:	230e      	movs	r3, #14
 80046b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80046b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046b8:	4619      	mov	r1, r3
 80046ba:	4813      	ldr	r0, [pc, #76]	@ (8004708 <BSP_LCD_MspInit+0x1b0>)
 80046bc:	f002 fd8e 	bl	80071dc <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80046c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80046c6:	2301      	movs	r3, #1
 80046c8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80046ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046ce:	4619      	mov	r1, r3
 80046d0:	480b      	ldr	r0, [pc, #44]	@ (8004700 <BSP_LCD_MspInit+0x1a8>)
 80046d2:	f002 fd83 	bl	80071dc <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80046d6:	2308      	movs	r3, #8
 80046d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80046da:	2301      	movs	r3, #1
 80046dc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80046de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046e2:	4619      	mov	r1, r3
 80046e4:	4808      	ldr	r0, [pc, #32]	@ (8004708 <BSP_LCD_MspInit+0x1b0>)
 80046e6:	f002 fd79 	bl	80071dc <HAL_GPIO_Init>
}
 80046ea:	bf00      	nop
 80046ec:	3740      	adds	r7, #64	@ 0x40
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	40023800 	.word	0x40023800
 80046f8:	40021000 	.word	0x40021000
 80046fc:	40021800 	.word	0x40021800
 8004700:	40022000 	.word	0x40022000
 8004704:	40022400 	.word	0x40022400
 8004708:	40022800 	.word	0x40022800

0800470c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004716:	4b0a      	ldr	r3, [pc, #40]	@ (8004740 <BSP_LCD_ClockConfig+0x34>)
 8004718:	2208      	movs	r2, #8
 800471a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800471c:	4b08      	ldr	r3, [pc, #32]	@ (8004740 <BSP_LCD_ClockConfig+0x34>)
 800471e:	22c0      	movs	r2, #192	@ 0xc0
 8004720:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8004722:	4b07      	ldr	r3, [pc, #28]	@ (8004740 <BSP_LCD_ClockConfig+0x34>)
 8004724:	2205      	movs	r2, #5
 8004726:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8004728:	4b05      	ldr	r3, [pc, #20]	@ (8004740 <BSP_LCD_ClockConfig+0x34>)
 800472a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800472e:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8004730:	4803      	ldr	r0, [pc, #12]	@ (8004740 <BSP_LCD_ClockConfig+0x34>)
 8004732:	f004 fd6f 	bl	8009214 <HAL_RCCEx_PeriphCLKConfig>
}
 8004736:	bf00      	nop
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20000b80 	.word	0x20000b80

08004744 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b088      	sub	sp, #32
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	603a      	str	r2, [r7, #0]
 800474e:	80fb      	strh	r3, [r7, #6]
 8004750:	460b      	mov	r3, r1
 8004752:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004754:	2300      	movs	r3, #0
 8004756:	61fb      	str	r3, [r7, #28]
 8004758:	2300      	movs	r3, #0
 800475a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 800475c:	4b53      	ldr	r3, [pc, #332]	@ (80048ac <DrawChar+0x168>)
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	4953      	ldr	r1, [pc, #332]	@ (80048b0 <DrawChar+0x16c>)
 8004762:	4613      	mov	r3, r2
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	4413      	add	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	440b      	add	r3, r1
 800476c:	3308      	adds	r3, #8
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	88db      	ldrh	r3, [r3, #6]
 8004772:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004774:	4b4d      	ldr	r3, [pc, #308]	@ (80048ac <DrawChar+0x168>)
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	494d      	ldr	r1, [pc, #308]	@ (80048b0 <DrawChar+0x16c>)
 800477a:	4613      	mov	r3, r2
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	440b      	add	r3, r1
 8004784:	3308      	adds	r3, #8
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	889b      	ldrh	r3, [r3, #4]
 800478a:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 800478c:	8a3b      	ldrh	r3, [r7, #16]
 800478e:	3307      	adds	r3, #7
 8004790:	2b00      	cmp	r3, #0
 8004792:	da00      	bge.n	8004796 <DrawChar+0x52>
 8004794:	3307      	adds	r3, #7
 8004796:	10db      	asrs	r3, r3, #3
 8004798:	b2db      	uxtb	r3, r3
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	b2da      	uxtb	r2, r3
 800479e:	8a3b      	ldrh	r3, [r7, #16]
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80047a6:	2300      	movs	r3, #0
 80047a8:	61fb      	str	r3, [r7, #28]
 80047aa:	e076      	b.n	800489a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80047ac:	8a3b      	ldrh	r3, [r7, #16]
 80047ae:	3307      	adds	r3, #7
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	da00      	bge.n	80047b6 <DrawChar+0x72>
 80047b4:	3307      	adds	r3, #7
 80047b6:	10db      	asrs	r3, r3, #3
 80047b8:	461a      	mov	r2, r3
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	fb02 f303 	mul.w	r3, r2, r3
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	4413      	add	r3, r2
 80047c4:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80047c6:	8a3b      	ldrh	r3, [r7, #16]
 80047c8:	3307      	adds	r3, #7
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	da00      	bge.n	80047d0 <DrawChar+0x8c>
 80047ce:	3307      	adds	r3, #7
 80047d0:	10db      	asrs	r3, r3, #3
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d002      	beq.n	80047dc <DrawChar+0x98>
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d004      	beq.n	80047e4 <DrawChar+0xa0>
 80047da:	e00c      	b.n	80047f6 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	617b      	str	r3, [r7, #20]
      break;
 80047e2:	e016      	b.n	8004812 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	3201      	adds	r2, #1
 80047ee:	7812      	ldrb	r2, [r2, #0]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]
      break;
 80047f4:	e00d      	b.n	8004812 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	041a      	lsls	r2, r3, #16
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	3301      	adds	r3, #1
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	021b      	lsls	r3, r3, #8
 8004804:	4313      	orrs	r3, r2
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	3202      	adds	r2, #2
 800480a:	7812      	ldrb	r2, [r2, #0]
 800480c:	4313      	orrs	r3, r2
 800480e:	617b      	str	r3, [r7, #20]
      break;
 8004810:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8004812:	2300      	movs	r3, #0
 8004814:	61bb      	str	r3, [r7, #24]
 8004816:	e036      	b.n	8004886 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004818:	8a3a      	ldrh	r2, [r7, #16]
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	1ad2      	subs	r2, r2, r3
 800481e:	7bfb      	ldrb	r3, [r7, #15]
 8004820:	4413      	add	r3, r2
 8004822:	3b01      	subs	r3, #1
 8004824:	2201      	movs	r2, #1
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	461a      	mov	r2, r3
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	4013      	ands	r3, r2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d012      	beq.n	800485a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	b29a      	uxth	r2, r3
 8004838:	88fb      	ldrh	r3, [r7, #6]
 800483a:	4413      	add	r3, r2
 800483c:	b298      	uxth	r0, r3
 800483e:	4b1b      	ldr	r3, [pc, #108]	@ (80048ac <DrawChar+0x168>)
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	491b      	ldr	r1, [pc, #108]	@ (80048b0 <DrawChar+0x16c>)
 8004844:	4613      	mov	r3, r2
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	4413      	add	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	440b      	add	r3, r1
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	88bb      	ldrh	r3, [r7, #4]
 8004852:	4619      	mov	r1, r3
 8004854:	f7ff fcee 	bl	8004234 <BSP_LCD_DrawPixel>
 8004858:	e012      	b.n	8004880 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	b29a      	uxth	r2, r3
 800485e:	88fb      	ldrh	r3, [r7, #6]
 8004860:	4413      	add	r3, r2
 8004862:	b298      	uxth	r0, r3
 8004864:	4b11      	ldr	r3, [pc, #68]	@ (80048ac <DrawChar+0x168>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	4911      	ldr	r1, [pc, #68]	@ (80048b0 <DrawChar+0x16c>)
 800486a:	4613      	mov	r3, r2
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	4413      	add	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	440b      	add	r3, r1
 8004874:	3304      	adds	r3, #4
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	88bb      	ldrh	r3, [r7, #4]
 800487a:	4619      	mov	r1, r3
 800487c:	f7ff fcda 	bl	8004234 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	3301      	adds	r3, #1
 8004884:	61bb      	str	r3, [r7, #24]
 8004886:	8a3b      	ldrh	r3, [r7, #16]
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	429a      	cmp	r2, r3
 800488c:	d3c4      	bcc.n	8004818 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800488e:	88bb      	ldrh	r3, [r7, #4]
 8004890:	3301      	adds	r3, #1
 8004892:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	3301      	adds	r3, #1
 8004898:	61fb      	str	r3, [r7, #28]
 800489a:	8a7b      	ldrh	r3, [r7, #18]
 800489c:	69fa      	ldr	r2, [r7, #28]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d384      	bcc.n	80047ac <DrawChar+0x68>
  }
}
 80048a2:	bf00      	nop
 80048a4:	bf00      	nop
 80048a6:	3720      	adds	r7, #32
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20000b64 	.word	0x20000b64
 80048b0:	20000b68 	.word	0x20000b68

080048b4 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80048c2:	4b1e      	ldr	r3, [pc, #120]	@ (800493c <LL_FillBuffer+0x88>)
 80048c4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80048c8:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80048ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004940 <LL_FillBuffer+0x8c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a1d      	ldr	r2, [pc, #116]	@ (8004944 <LL_FillBuffer+0x90>)
 80048d0:	2134      	movs	r1, #52	@ 0x34
 80048d2:	fb01 f303 	mul.w	r3, r1, r3
 80048d6:	4413      	add	r3, r2
 80048d8:	3348      	adds	r3, #72	@ 0x48
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d103      	bne.n	80048e8 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80048e0:	4b16      	ldr	r3, [pc, #88]	@ (800493c <LL_FillBuffer+0x88>)
 80048e2:	2202      	movs	r2, #2
 80048e4:	609a      	str	r2, [r3, #8]
 80048e6:	e002      	b.n	80048ee <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80048e8:	4b14      	ldr	r3, [pc, #80]	@ (800493c <LL_FillBuffer+0x88>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80048ee:	4a13      	ldr	r2, [pc, #76]	@ (800493c <LL_FillBuffer+0x88>)
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80048f4:	4b11      	ldr	r3, [pc, #68]	@ (800493c <LL_FillBuffer+0x88>)
 80048f6:	4a14      	ldr	r2, [pc, #80]	@ (8004948 <LL_FillBuffer+0x94>)
 80048f8:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80048fa:	4810      	ldr	r0, [pc, #64]	@ (800493c <LL_FillBuffer+0x88>)
 80048fc:	f002 f8d2 	bl	8006aa4 <HAL_DMA2D_Init>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d115      	bne.n	8004932 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8004906:	68f9      	ldr	r1, [r7, #12]
 8004908:	480c      	ldr	r0, [pc, #48]	@ (800493c <LL_FillBuffer+0x88>)
 800490a:	f002 fb39 	bl	8006f80 <HAL_DMA2D_ConfigLayer>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10e      	bne.n	8004932 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69f9      	ldr	r1, [r7, #28]
 800491e:	4807      	ldr	r0, [pc, #28]	@ (800493c <LL_FillBuffer+0x88>)
 8004920:	f002 f90a 	bl	8006b38 <HAL_DMA2D_Start>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d103      	bne.n	8004932 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800492a:	210a      	movs	r1, #10
 800492c:	4803      	ldr	r0, [pc, #12]	@ (800493c <LL_FillBuffer+0x88>)
 800492e:	f002 f92e 	bl	8006b8e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004932:	bf00      	nop
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	20000b24 	.word	0x20000b24
 8004940:	20000b64 	.word	0x20000b64
 8004944:	20000a7c 	.word	0x20000a7c
 8004948:	4002b000 	.word	0x4002b000

0800494c <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af02      	add	r7, sp, #8
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
 8004958:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 800495a:	4b1c      	ldr	r3, [pc, #112]	@ (80049cc <LL_ConvertLineToARGB8888+0x80>)
 800495c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004960:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004962:	4b1a      	ldr	r3, [pc, #104]	@ (80049cc <LL_ConvertLineToARGB8888+0x80>)
 8004964:	2200      	movs	r2, #0
 8004966:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8004968:	4b18      	ldr	r3, [pc, #96]	@ (80049cc <LL_ConvertLineToARGB8888+0x80>)
 800496a:	2200      	movs	r2, #0
 800496c:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800496e:	4b17      	ldr	r3, [pc, #92]	@ (80049cc <LL_ConvertLineToARGB8888+0x80>)
 8004970:	2200      	movs	r2, #0
 8004972:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8004974:	4b15      	ldr	r3, [pc, #84]	@ (80049cc <LL_ConvertLineToARGB8888+0x80>)
 8004976:	22ff      	movs	r2, #255	@ 0xff
 8004978:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 800497a:	4a14      	ldr	r2, [pc, #80]	@ (80049cc <LL_ConvertLineToARGB8888+0x80>)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8004980:	4b12      	ldr	r3, [pc, #72]	@ (80049cc <LL_ConvertLineToARGB8888+0x80>)
 8004982:	2200      	movs	r2, #0
 8004984:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8004986:	4b11      	ldr	r3, [pc, #68]	@ (80049cc <LL_ConvertLineToARGB8888+0x80>)
 8004988:	4a11      	ldr	r2, [pc, #68]	@ (80049d0 <LL_ConvertLineToARGB8888+0x84>)
 800498a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800498c:	480f      	ldr	r0, [pc, #60]	@ (80049cc <LL_ConvertLineToARGB8888+0x80>)
 800498e:	f002 f889 	bl	8006aa4 <HAL_DMA2D_Init>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d115      	bne.n	80049c4 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8004998:	2101      	movs	r1, #1
 800499a:	480c      	ldr	r0, [pc, #48]	@ (80049cc <LL_ConvertLineToARGB8888+0x80>)
 800499c:	f002 faf0 	bl	8006f80 <HAL_DMA2D_ConfigLayer>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10e      	bne.n	80049c4 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80049a6:	68f9      	ldr	r1, [r7, #12]
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	2301      	movs	r3, #1
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4806      	ldr	r0, [pc, #24]	@ (80049cc <LL_ConvertLineToARGB8888+0x80>)
 80049b2:	f002 f8c1 	bl	8006b38 <HAL_DMA2D_Start>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d103      	bne.n	80049c4 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80049bc:	210a      	movs	r1, #10
 80049be:	4803      	ldr	r0, [pc, #12]	@ (80049cc <LL_ConvertLineToARGB8888+0x80>)
 80049c0:	f002 f8e5 	bl	8006b8e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80049c4:	bf00      	nop
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	20000b24 	.word	0x20000b24
 80049d0:	4002b000 	.word	0x4002b000

080049d4 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80049d8:	4b29      	ldr	r3, [pc, #164]	@ (8004a80 <BSP_SDRAM_Init+0xac>)
 80049da:	4a2a      	ldr	r2, [pc, #168]	@ (8004a84 <BSP_SDRAM_Init+0xb0>)
 80049dc:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80049de:	4b2a      	ldr	r3, [pc, #168]	@ (8004a88 <BSP_SDRAM_Init+0xb4>)
 80049e0:	2202      	movs	r2, #2
 80049e2:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80049e4:	4b28      	ldr	r3, [pc, #160]	@ (8004a88 <BSP_SDRAM_Init+0xb4>)
 80049e6:	2207      	movs	r2, #7
 80049e8:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80049ea:	4b27      	ldr	r3, [pc, #156]	@ (8004a88 <BSP_SDRAM_Init+0xb4>)
 80049ec:	2204      	movs	r2, #4
 80049ee:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80049f0:	4b25      	ldr	r3, [pc, #148]	@ (8004a88 <BSP_SDRAM_Init+0xb4>)
 80049f2:	2207      	movs	r2, #7
 80049f4:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80049f6:	4b24      	ldr	r3, [pc, #144]	@ (8004a88 <BSP_SDRAM_Init+0xb4>)
 80049f8:	2202      	movs	r2, #2
 80049fa:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80049fc:	4b22      	ldr	r3, [pc, #136]	@ (8004a88 <BSP_SDRAM_Init+0xb4>)
 80049fe:	2202      	movs	r2, #2
 8004a00:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8004a02:	4b21      	ldr	r3, [pc, #132]	@ (8004a88 <BSP_SDRAM_Init+0xb4>)
 8004a04:	2202      	movs	r2, #2
 8004a06:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8004a08:	4b1d      	ldr	r3, [pc, #116]	@ (8004a80 <BSP_SDRAM_Init+0xac>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8004a80 <BSP_SDRAM_Init+0xac>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004a14:	4b1a      	ldr	r3, [pc, #104]	@ (8004a80 <BSP_SDRAM_Init+0xac>)
 8004a16:	2204      	movs	r2, #4
 8004a18:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004a1a:	4b19      	ldr	r3, [pc, #100]	@ (8004a80 <BSP_SDRAM_Init+0xac>)
 8004a1c:	2210      	movs	r2, #16
 8004a1e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004a20:	4b17      	ldr	r3, [pc, #92]	@ (8004a80 <BSP_SDRAM_Init+0xac>)
 8004a22:	2240      	movs	r2, #64	@ 0x40
 8004a24:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8004a26:	4b16      	ldr	r3, [pc, #88]	@ (8004a80 <BSP_SDRAM_Init+0xac>)
 8004a28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a2c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004a2e:	4b14      	ldr	r3, [pc, #80]	@ (8004a80 <BSP_SDRAM_Init+0xac>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004a34:	4b12      	ldr	r3, [pc, #72]	@ (8004a80 <BSP_SDRAM_Init+0xac>)
 8004a36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a3a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004a3c:	4b10      	ldr	r3, [pc, #64]	@ (8004a80 <BSP_SDRAM_Init+0xac>)
 8004a3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004a42:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004a44:	4b0e      	ldr	r3, [pc, #56]	@ (8004a80 <BSP_SDRAM_Init+0xac>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	480c      	ldr	r0, [pc, #48]	@ (8004a80 <BSP_SDRAM_Init+0xac>)
 8004a4e:	f000 f87f 	bl	8004b50 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8004a52:	490d      	ldr	r1, [pc, #52]	@ (8004a88 <BSP_SDRAM_Init+0xb4>)
 8004a54:	480a      	ldr	r0, [pc, #40]	@ (8004a80 <BSP_SDRAM_Init+0xac>)
 8004a56:	f006 f961 	bl	800ad1c <HAL_SDRAM_Init>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004a60:	4b0a      	ldr	r3, [pc, #40]	@ (8004a8c <BSP_SDRAM_Init+0xb8>)
 8004a62:	2201      	movs	r2, #1
 8004a64:	701a      	strb	r2, [r3, #0]
 8004a66:	e002      	b.n	8004a6e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004a68:	4b08      	ldr	r3, [pc, #32]	@ (8004a8c <BSP_SDRAM_Init+0xb8>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004a6e:	f240 6003 	movw	r0, #1539	@ 0x603
 8004a72:	f000 f80d 	bl	8004a90 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004a76:	4b05      	ldr	r3, [pc, #20]	@ (8004a8c <BSP_SDRAM_Init+0xb8>)
 8004a78:	781b      	ldrb	r3, [r3, #0]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000c04 	.word	0x20000c04
 8004a84:	a0000140 	.word	0xa0000140
 8004a88:	20000c38 	.word	0x20000c38
 8004a8c:	20000044 	.word	0x20000044

08004a90 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8004b48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004aa2:	4b29      	ldr	r3, [pc, #164]	@ (8004b48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004aa4:	2210      	movs	r2, #16
 8004aa6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004aa8:	4b27      	ldr	r3, [pc, #156]	@ (8004b48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004aaa:	2201      	movs	r2, #1
 8004aac:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004aae:	4b26      	ldr	r3, [pc, #152]	@ (8004b48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004ab4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ab8:	4923      	ldr	r1, [pc, #140]	@ (8004b48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004aba:	4824      	ldr	r0, [pc, #144]	@ (8004b4c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004abc:	f006 f962 	bl	800ad84 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004ac0:	2001      	movs	r0, #1
 8004ac2:	f000 ff0d 	bl	80058e0 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004ac6:	4b20      	ldr	r3, [pc, #128]	@ (8004b48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ac8:	2202      	movs	r2, #2
 8004aca:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004acc:	4b1e      	ldr	r3, [pc, #120]	@ (8004b48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ace:	2210      	movs	r2, #16
 8004ad0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8004b48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8004ade:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ae2:	4919      	ldr	r1, [pc, #100]	@ (8004b48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ae4:	4819      	ldr	r0, [pc, #100]	@ (8004b4c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004ae6:	f006 f94d 	bl	800ad84 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004aea:	4b17      	ldr	r3, [pc, #92]	@ (8004b48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004aec:	2203      	movs	r2, #3
 8004aee:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004af0:	4b15      	ldr	r3, [pc, #84]	@ (8004b48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004af2:	2210      	movs	r2, #16
 8004af4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004af6:	4b14      	ldr	r3, [pc, #80]	@ (8004b48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004af8:	2208      	movs	r2, #8
 8004afa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004afc:	4b12      	ldr	r3, [pc, #72]	@ (8004b48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004b02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b06:	4910      	ldr	r1, [pc, #64]	@ (8004b48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b08:	4810      	ldr	r0, [pc, #64]	@ (8004b4c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004b0a:	f006 f93b 	bl	800ad84 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004b0e:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8004b12:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004b14:	4b0c      	ldr	r3, [pc, #48]	@ (8004b48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b16:	2204      	movs	r2, #4
 8004b18:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b1c:	2210      	movs	r2, #16
 8004b1e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004b20:	4b09      	ldr	r3, [pc, #36]	@ (8004b48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4a07      	ldr	r2, [pc, #28]	@ (8004b48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b2a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004b2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b30:	4905      	ldr	r1, [pc, #20]	@ (8004b48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b32:	4806      	ldr	r0, [pc, #24]	@ (8004b4c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004b34:	f006 f926 	bl	800ad84 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	4804      	ldr	r0, [pc, #16]	@ (8004b4c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004b3c:	f006 f957 	bl	800adee <HAL_SDRAM_ProgramRefreshRate>
}
 8004b40:	bf00      	nop
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	20000c54 	.word	0x20000c54
 8004b4c:	20000c04 	.word	0x20000c04

08004b50 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b090      	sub	sp, #64	@ 0x40
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004b5a:	4b70      	ldr	r3, [pc, #448]	@ (8004d1c <BSP_SDRAM_MspInit+0x1cc>)
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5e:	4a6f      	ldr	r2, [pc, #444]	@ (8004d1c <BSP_SDRAM_MspInit+0x1cc>)
 8004b60:	f043 0301 	orr.w	r3, r3, #1
 8004b64:	6393      	str	r3, [r2, #56]	@ 0x38
 8004b66:	4b6d      	ldr	r3, [pc, #436]	@ (8004d1c <BSP_SDRAM_MspInit+0x1cc>)
 8004b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004b72:	4b6a      	ldr	r3, [pc, #424]	@ (8004d1c <BSP_SDRAM_MspInit+0x1cc>)
 8004b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b76:	4a69      	ldr	r2, [pc, #420]	@ (8004d1c <BSP_SDRAM_MspInit+0x1cc>)
 8004b78:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b7e:	4b67      	ldr	r3, [pc, #412]	@ (8004d1c <BSP_SDRAM_MspInit+0x1cc>)
 8004b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b8a:	4b64      	ldr	r3, [pc, #400]	@ (8004d1c <BSP_SDRAM_MspInit+0x1cc>)
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8e:	4a63      	ldr	r2, [pc, #396]	@ (8004d1c <BSP_SDRAM_MspInit+0x1cc>)
 8004b90:	f043 0304 	orr.w	r3, r3, #4
 8004b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b96:	4b61      	ldr	r3, [pc, #388]	@ (8004d1c <BSP_SDRAM_MspInit+0x1cc>)
 8004b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	623b      	str	r3, [r7, #32]
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ba2:	4b5e      	ldr	r3, [pc, #376]	@ (8004d1c <BSP_SDRAM_MspInit+0x1cc>)
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba6:	4a5d      	ldr	r2, [pc, #372]	@ (8004d1c <BSP_SDRAM_MspInit+0x1cc>)
 8004ba8:	f043 0308 	orr.w	r3, r3, #8
 8004bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bae:	4b5b      	ldr	r3, [pc, #364]	@ (8004d1c <BSP_SDRAM_MspInit+0x1cc>)
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	61fb      	str	r3, [r7, #28]
 8004bb8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004bba:	4b58      	ldr	r3, [pc, #352]	@ (8004d1c <BSP_SDRAM_MspInit+0x1cc>)
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bbe:	4a57      	ldr	r2, [pc, #348]	@ (8004d1c <BSP_SDRAM_MspInit+0x1cc>)
 8004bc0:	f043 0310 	orr.w	r3, r3, #16
 8004bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bc6:	4b55      	ldr	r3, [pc, #340]	@ (8004d1c <BSP_SDRAM_MspInit+0x1cc>)
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bca:	f003 0310 	and.w	r3, r3, #16
 8004bce:	61bb      	str	r3, [r7, #24]
 8004bd0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004bd2:	4b52      	ldr	r3, [pc, #328]	@ (8004d1c <BSP_SDRAM_MspInit+0x1cc>)
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd6:	4a51      	ldr	r2, [pc, #324]	@ (8004d1c <BSP_SDRAM_MspInit+0x1cc>)
 8004bd8:	f043 0320 	orr.w	r3, r3, #32
 8004bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bde:	4b4f      	ldr	r3, [pc, #316]	@ (8004d1c <BSP_SDRAM_MspInit+0x1cc>)
 8004be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004bea:	4b4c      	ldr	r3, [pc, #304]	@ (8004d1c <BSP_SDRAM_MspInit+0x1cc>)
 8004bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bee:	4a4b      	ldr	r2, [pc, #300]	@ (8004d1c <BSP_SDRAM_MspInit+0x1cc>)
 8004bf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bf6:	4b49      	ldr	r3, [pc, #292]	@ (8004d1c <BSP_SDRAM_MspInit+0x1cc>)
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bfe:	613b      	str	r3, [r7, #16]
 8004c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c02:	4b46      	ldr	r3, [pc, #280]	@ (8004d1c <BSP_SDRAM_MspInit+0x1cc>)
 8004c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c06:	4a45      	ldr	r2, [pc, #276]	@ (8004d1c <BSP_SDRAM_MspInit+0x1cc>)
 8004c08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c0e:	4b43      	ldr	r3, [pc, #268]	@ (8004d1c <BSP_SDRAM_MspInit+0x1cc>)
 8004c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004c22:	2302      	movs	r3, #2
 8004c24:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8004c26:	230c      	movs	r3, #12
 8004c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8004c2a:	2308      	movs	r3, #8
 8004c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004c2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c32:	4619      	mov	r1, r3
 8004c34:	483a      	ldr	r0, [pc, #232]	@ (8004d20 <BSP_SDRAM_MspInit+0x1d0>)
 8004c36:	f002 fad1 	bl	80071dc <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8004c3a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004c40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c44:	4619      	mov	r1, r3
 8004c46:	4837      	ldr	r0, [pc, #220]	@ (8004d24 <BSP_SDRAM_MspInit+0x1d4>)
 8004c48:	f002 fac8 	bl	80071dc <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004c4c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004c52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c56:	4619      	mov	r1, r3
 8004c58:	4833      	ldr	r0, [pc, #204]	@ (8004d28 <BSP_SDRAM_MspInit+0x1d8>)
 8004c5a:	f002 fabf 	bl	80071dc <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004c5e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004c64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4830      	ldr	r0, [pc, #192]	@ (8004d2c <BSP_SDRAM_MspInit+0x1dc>)
 8004c6c:	f002 fab6 	bl	80071dc <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004c70:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004c76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	482c      	ldr	r0, [pc, #176]	@ (8004d30 <BSP_SDRAM_MspInit+0x1e0>)
 8004c7e:	f002 faad 	bl	80071dc <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004c82:	2328      	movs	r3, #40	@ 0x28
 8004c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004c86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4829      	ldr	r0, [pc, #164]	@ (8004d34 <BSP_SDRAM_MspInit+0x1e4>)
 8004c8e:	f002 faa5 	bl	80071dc <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004c92:	4b29      	ldr	r3, [pc, #164]	@ (8004d38 <BSP_SDRAM_MspInit+0x1e8>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004c98:	4b27      	ldr	r3, [pc, #156]	@ (8004d38 <BSP_SDRAM_MspInit+0x1e8>)
 8004c9a:	2280      	movs	r2, #128	@ 0x80
 8004c9c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004c9e:	4b26      	ldr	r3, [pc, #152]	@ (8004d38 <BSP_SDRAM_MspInit+0x1e8>)
 8004ca0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ca4:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004ca6:	4b24      	ldr	r3, [pc, #144]	@ (8004d38 <BSP_SDRAM_MspInit+0x1e8>)
 8004ca8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004cac:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004cae:	4b22      	ldr	r3, [pc, #136]	@ (8004d38 <BSP_SDRAM_MspInit+0x1e8>)
 8004cb0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004cb4:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004cb6:	4b20      	ldr	r3, [pc, #128]	@ (8004d38 <BSP_SDRAM_MspInit+0x1e8>)
 8004cb8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004cbc:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8004cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8004d38 <BSP_SDRAM_MspInit+0x1e8>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8004d38 <BSP_SDRAM_MspInit+0x1e8>)
 8004cc6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004cca:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8004d38 <BSP_SDRAM_MspInit+0x1e8>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004cd2:	4b19      	ldr	r3, [pc, #100]	@ (8004d38 <BSP_SDRAM_MspInit+0x1e8>)
 8004cd4:	2203      	movs	r2, #3
 8004cd6:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004cd8:	4b17      	ldr	r3, [pc, #92]	@ (8004d38 <BSP_SDRAM_MspInit+0x1e8>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004cde:	4b16      	ldr	r3, [pc, #88]	@ (8004d38 <BSP_SDRAM_MspInit+0x1e8>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8004ce4:	4b14      	ldr	r3, [pc, #80]	@ (8004d38 <BSP_SDRAM_MspInit+0x1e8>)
 8004ce6:	4a15      	ldr	r2, [pc, #84]	@ (8004d3c <BSP_SDRAM_MspInit+0x1ec>)
 8004ce8:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a12      	ldr	r2, [pc, #72]	@ (8004d38 <BSP_SDRAM_MspInit+0x1e8>)
 8004cee:	631a      	str	r2, [r3, #48]	@ 0x30
 8004cf0:	4a11      	ldr	r2, [pc, #68]	@ (8004d38 <BSP_SDRAM_MspInit+0x1e8>)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8004cf6:	4810      	ldr	r0, [pc, #64]	@ (8004d38 <BSP_SDRAM_MspInit+0x1e8>)
 8004cf8:	f001 fba0 	bl	800643c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004cfc:	480e      	ldr	r0, [pc, #56]	@ (8004d38 <BSP_SDRAM_MspInit+0x1e8>)
 8004cfe:	f001 faef 	bl	80062e0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004d02:	2200      	movs	r2, #0
 8004d04:	210f      	movs	r1, #15
 8004d06:	2038      	movs	r0, #56	@ 0x38
 8004d08:	f001 fac0 	bl	800628c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004d0c:	2038      	movs	r0, #56	@ 0x38
 8004d0e:	f001 fad9 	bl	80062c4 <HAL_NVIC_EnableIRQ>
}
 8004d12:	bf00      	nop
 8004d14:	3740      	adds	r7, #64	@ 0x40
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	40020800 	.word	0x40020800
 8004d24:	40020c00 	.word	0x40020c00
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	40021400 	.word	0x40021400
 8004d30:	40021800 	.word	0x40021800
 8004d34:	40021c00 	.word	0x40021c00
 8004d38:	20000c64 	.word	0x20000c64
 8004d3c:	40026410 	.word	0x40026410

08004d40 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	4603      	mov	r3, r0
 8004d48:	460a      	mov	r2, r1
 8004d4a:	80fb      	strh	r3, [r7, #6]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004d54:	4a14      	ldr	r2, [pc, #80]	@ (8004da8 <BSP_TS_Init+0x68>)
 8004d56:	88fb      	ldrh	r3, [r7, #6]
 8004d58:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8004d5a:	4a14      	ldr	r2, [pc, #80]	@ (8004dac <BSP_TS_Init+0x6c>)
 8004d5c:	88bb      	ldrh	r3, [r7, #4]
 8004d5e:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004d60:	4b13      	ldr	r3, [pc, #76]	@ (8004db0 <BSP_TS_Init+0x70>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2070      	movs	r0, #112	@ 0x70
 8004d66:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8004d68:	4b11      	ldr	r3, [pc, #68]	@ (8004db0 <BSP_TS_Init+0x70>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2070      	movs	r0, #112	@ 0x70
 8004d6e:	4798      	blx	r3
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b51      	cmp	r3, #81	@ 0x51
 8004d74:	d110      	bne.n	8004d98 <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8004d76:	4b0f      	ldr	r3, [pc, #60]	@ (8004db4 <BSP_TS_Init+0x74>)
 8004d78:	4a0d      	ldr	r2, [pc, #52]	@ (8004db0 <BSP_TS_Init+0x70>)
 8004d7a:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8004d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8004db8 <BSP_TS_Init+0x78>)
 8004d7e:	2270      	movs	r2, #112	@ 0x70
 8004d80:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8004d82:	4b0e      	ldr	r3, [pc, #56]	@ (8004dbc <BSP_TS_Init+0x7c>)
 8004d84:	2208      	movs	r2, #8
 8004d86:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004d88:	4b0a      	ldr	r3, [pc, #40]	@ (8004db4 <BSP_TS_Init+0x74>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8004db8 <BSP_TS_Init+0x78>)
 8004d90:	7812      	ldrb	r2, [r2, #0]
 8004d92:	4610      	mov	r0, r2
 8004d94:	4798      	blx	r3
 8004d96:	e001      	b.n	8004d9c <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	20000cc8 	.word	0x20000cc8
 8004dac:	20000cca 	.word	0x20000cca
 8004db0:	2000000c 	.word	0x2000000c
 8004db4:	20000cc4 	.word	0x20000cc4
 8004db8:	20000ccd 	.word	0x20000ccd
 8004dbc:	20000ccc 	.word	0x20000ccc

08004dc0 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8004dc0:	b590      	push	{r4, r7, lr}
 8004dc2:	b097      	sub	sp, #92	@ 0x5c
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8004dda:	4bb8      	ldr	r3, [pc, #736]	@ (80050bc <BSP_TS_GetState+0x2fc>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	4ab7      	ldr	r2, [pc, #732]	@ (80050c0 <BSP_TS_GetState+0x300>)
 8004de2:	7812      	ldrb	r2, [r2, #0]
 8004de4:	4610      	mov	r0, r2
 8004de6:	4798      	blx	r3
 8004de8:	4603      	mov	r3, r0
 8004dea:	461a      	mov	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 8198 	beq.w	800512a <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dfe:	e187      	b.n	8005110 <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8004e00:	4bae      	ldr	r3, [pc, #696]	@ (80050bc <BSP_TS_GetState+0x2fc>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	4aae      	ldr	r2, [pc, #696]	@ (80050c0 <BSP_TS_GetState+0x300>)
 8004e08:	7812      	ldrb	r2, [r2, #0]
 8004e0a:	4614      	mov	r4, r2
 8004e0c:	f107 0120 	add.w	r1, r7, #32
 8004e10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e12:	0052      	lsls	r2, r2, #1
 8004e14:	1888      	adds	r0, r1, r2
 8004e16:	f107 0114 	add.w	r1, r7, #20
 8004e1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e1c:	0052      	lsls	r2, r2, #1
 8004e1e:	440a      	add	r2, r1
 8004e20:	4601      	mov	r1, r0
 8004e22:	4620      	mov	r0, r4
 8004e24:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8004e26:	4ba7      	ldr	r3, [pc, #668]	@ (80050c4 <BSP_TS_GetState+0x304>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d117      	bne.n	8004e5e <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8004e2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	3350      	adds	r3, #80	@ 0x50
 8004e34:	443b      	add	r3, r7
 8004e36:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004e3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	3350      	adds	r3, #80	@ 0x50
 8004e40:	443b      	add	r3, r7
 8004e42:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8004e46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	3350      	adds	r3, #80	@ 0x50
 8004e4c:	443b      	add	r3, r7
 8004e4e:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004e52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	3350      	adds	r3, #80	@ 0x50
 8004e58:	443b      	add	r3, r7
 8004e5a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8004e5e:	4b99      	ldr	r3, [pc, #612]	@ (80050c4 <BSP_TS_GetState+0x304>)
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00e      	beq.n	8004e88 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8004e6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	3350      	adds	r3, #80	@ 0x50
 8004e70:	443b      	add	r3, r7
 8004e72:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8004e76:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	3350      	adds	r3, #80	@ 0x50
 8004e82:	443b      	add	r3, r7
 8004e84:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8004e88:	4b8e      	ldr	r3, [pc, #568]	@ (80050c4 <BSP_TS_GetState+0x304>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00e      	beq.n	8004eb2 <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8004e94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	3350      	adds	r3, #80	@ 0x50
 8004e9a:	443b      	add	r3, r7
 8004e9c:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004ea0:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	3350      	adds	r3, #80	@ 0x50
 8004eac:	443b      	add	r3, r7
 8004eae:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8004eb2:	4b84      	ldr	r3, [pc, #528]	@ (80050c4 <BSP_TS_GetState+0x304>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	f003 0308 	and.w	r3, r3, #8
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d017      	beq.n	8004eee <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8004ebe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	3350      	adds	r3, #80	@ 0x50
 8004ec4:	443b      	add	r3, r7
 8004ec6:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004eca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	3350      	adds	r3, #80	@ 0x50
 8004ed0:	443b      	add	r3, r7
 8004ed2:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8004ed6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	3350      	adds	r3, #80	@ 0x50
 8004edc:	443b      	add	r3, r7
 8004ede:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004ee2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	3350      	adds	r3, #80	@ 0x50
 8004ee8:	443b      	add	r3, r7
 8004eea:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004eee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	3350      	adds	r3, #80	@ 0x50
 8004ef4:	443b      	add	r3, r7
 8004ef6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004efa:	4619      	mov	r1, r3
 8004efc:	4a72      	ldr	r2, [pc, #456]	@ (80050c8 <BSP_TS_GetState+0x308>)
 8004efe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f04:	4299      	cmp	r1, r3
 8004f06:	d90d      	bls.n	8004f24 <BSP_TS_GetState+0x164>
 8004f08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	3350      	adds	r3, #80	@ 0x50
 8004f0e:	443b      	add	r3, r7
 8004f10:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8004f14:	496c      	ldr	r1, [pc, #432]	@ (80050c8 <BSP_TS_GetState+0x308>)
 8004f16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	e00c      	b.n	8004f3e <BSP_TS_GetState+0x17e>
 8004f24:	4a68      	ldr	r2, [pc, #416]	@ (80050c8 <BSP_TS_GetState+0x308>)
 8004f26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	3350      	adds	r3, #80	@ 0x50
 8004f34:	443b      	add	r3, r7
 8004f36:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004f42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	3350      	adds	r3, #80	@ 0x50
 8004f48:	443b      	add	r3, r7
 8004f4a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4a5e      	ldr	r2, [pc, #376]	@ (80050cc <BSP_TS_GetState+0x30c>)
 8004f52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f58:	4299      	cmp	r1, r3
 8004f5a:	d90d      	bls.n	8004f78 <BSP_TS_GetState+0x1b8>
 8004f5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	3350      	adds	r3, #80	@ 0x50
 8004f62:	443b      	add	r3, r7
 8004f64:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8004f68:	4958      	ldr	r1, [pc, #352]	@ (80050cc <BSP_TS_GetState+0x30c>)
 8004f6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	e00c      	b.n	8004f92 <BSP_TS_GetState+0x1d2>
 8004f78:	4a54      	ldr	r2, [pc, #336]	@ (80050cc <BSP_TS_GetState+0x30c>)
 8004f7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	3350      	adds	r3, #80	@ 0x50
 8004f88:	443b      	add	r3, r7
 8004f8a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 8004f96:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8004f9a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004f9e:	4413      	add	r3, r2
 8004fa0:	2b05      	cmp	r3, #5
 8004fa2:	dd15      	ble.n	8004fd0 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8004fa4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	3350      	adds	r3, #80	@ 0x50
 8004faa:	443b      	add	r3, r7
 8004fac:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4a45      	ldr	r2, [pc, #276]	@ (80050c8 <BSP_TS_GetState+0x308>)
 8004fb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8004fba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	3350      	adds	r3, #80	@ 0x50
 8004fc0:	443b      	add	r3, r7
 8004fc2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4a40      	ldr	r2, [pc, #256]	@ (80050cc <BSP_TS_GetState+0x30c>)
 8004fca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fcc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8004fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80050c0 <BSP_TS_GetState+0x300>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2b70      	cmp	r3, #112	@ 0x70
 8004fd6:	d119      	bne.n	800500c <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8004fd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	3350      	adds	r3, #80	@ 0x50
 8004fde:	443b      	add	r3, r7
 8004fe0:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	4413      	add	r3, r2
 8004fec:	460a      	mov	r2, r1
 8004fee:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8004ff0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	3350      	adds	r3, #80	@ 0x50
 8004ff6:	443b      	add	r3, r7
 8004ff8:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005000:	3304      	adds	r3, #4
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	4413      	add	r3, r2
 8005006:	460a      	mov	r2, r1
 8005008:	809a      	strh	r2, [r3, #4]
 800500a:	e022      	b.n	8005052 <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800500c:	4b30      	ldr	r3, [pc, #192]	@ (80050d0 <BSP_TS_GetState+0x310>)
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	4619      	mov	r1, r3
 8005012:	4a2d      	ldr	r2, [pc, #180]	@ (80050c8 <BSP_TS_GetState+0x308>)
 8005014:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800501a:	fb01 f303 	mul.w	r3, r1, r3
 800501e:	0b1b      	lsrs	r3, r3, #12
 8005020:	b299      	uxth	r1, r3
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	4413      	add	r3, r2
 800502a:	460a      	mov	r2, r1
 800502c:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800502e:	4b29      	ldr	r3, [pc, #164]	@ (80050d4 <BSP_TS_GetState+0x314>)
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	4619      	mov	r1, r3
 8005034:	4a25      	ldr	r2, [pc, #148]	@ (80050cc <BSP_TS_GetState+0x30c>)
 8005036:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800503c:	fb01 f303 	mul.w	r3, r1, r3
 8005040:	0b1b      	lsrs	r3, r3, #12
 8005042:	b299      	uxth	r1, r3
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005048:	3304      	adds	r3, #4
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	4413      	add	r3, r2
 800504e:	460a      	mov	r2, r1
 8005050:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8005052:	4b1b      	ldr	r3, [pc, #108]	@ (80050c0 <BSP_TS_GetState+0x300>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	4618      	mov	r0, r3
 8005058:	f107 010c 	add.w	r1, r7, #12
 800505c:	f107 0210 	add.w	r2, r7, #16
 8005060:	f107 0308 	add.w	r3, r7, #8
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	460b      	mov	r3, r1
 8005068:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800506a:	f7fd fb8b 	bl	8002784 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	b2d9      	uxtb	r1, r3
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005076:	4413      	add	r3, r2
 8005078:	3316      	adds	r3, #22
 800507a:	460a      	mov	r2, r1
 800507c:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	b2d9      	uxtb	r1, r3
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005086:	4413      	add	r3, r2
 8005088:	3320      	adds	r3, #32
 800508a:	460a      	mov	r2, r1
 800508c:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b03      	cmp	r3, #3
 8005092:	d836      	bhi.n	8005102 <BSP_TS_GetState+0x342>
 8005094:	a201      	add	r2, pc, #4	@ (adr r2, 800509c <BSP_TS_GetState+0x2dc>)
 8005096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509a:	bf00      	nop
 800509c:	080050ad 	.word	0x080050ad
 80050a0:	080050d9 	.word	0x080050d9
 80050a4:	080050e7 	.word	0x080050e7
 80050a8:	080050f5 	.word	0x080050f5
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050b0:	4413      	add	r3, r2
 80050b2:	331b      	adds	r3, #27
 80050b4:	2201      	movs	r2, #1
 80050b6:	701a      	strb	r2, [r3, #0]
          break;
 80050b8:	e027      	b.n	800510a <BSP_TS_GetState+0x34a>
 80050ba:	bf00      	nop
 80050bc:	20000cc4 	.word	0x20000cc4
 80050c0:	20000ccd 	.word	0x20000ccd
 80050c4:	20000ccc 	.word	0x20000ccc
 80050c8:	20000cd0 	.word	0x20000cd0
 80050cc:	20000ce4 	.word	0x20000ce4
 80050d0:	20000cc8 	.word	0x20000cc8
 80050d4:	20000cca 	.word	0x20000cca
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050dc:	4413      	add	r3, r2
 80050de:	331b      	adds	r3, #27
 80050e0:	2202      	movs	r2, #2
 80050e2:	701a      	strb	r2, [r3, #0]
          break;
 80050e4:	e011      	b.n	800510a <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050ea:	4413      	add	r3, r2
 80050ec:	331b      	adds	r3, #27
 80050ee:	2203      	movs	r2, #3
 80050f0:	701a      	strb	r2, [r3, #0]
          break;
 80050f2:	e00a      	b.n	800510a <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050f8:	4413      	add	r3, r2
 80050fa:	331b      	adds	r3, #27
 80050fc:	2200      	movs	r2, #0
 80050fe:	701a      	strb	r2, [r3, #0]
          break;
 8005100:	e003      	b.n	800510a <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 8005108:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 800510a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800510c:	3301      	adds	r3, #1
 800510e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	461a      	mov	r2, r3
 8005116:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005118:	4293      	cmp	r3, r2
 800511a:	f4ff ae71 	bcc.w	8004e00 <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f80a 	bl	8005138 <BSP_TS_Get_GestureId>
 8005124:	4603      	mov	r3, r0
 8005126:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800512a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800512e:	4618      	mov	r0, r3
 8005130:	3754      	adds	r7, #84	@ 0x54
 8005132:	46bd      	mov	sp, r7
 8005134:	bd90      	pop	{r4, r7, pc}
 8005136:	bf00      	nop

08005138 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8005140:	2300      	movs	r3, #0
 8005142:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8005144:	2300      	movs	r3, #0
 8005146:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8005148:	4b3b      	ldr	r3, [pc, #236]	@ (8005238 <BSP_TS_Get_GestureId+0x100>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	461a      	mov	r2, r3
 800514e:	f107 0308 	add.w	r3, r7, #8
 8005152:	4619      	mov	r1, r3
 8005154:	4610      	mov	r0, r2
 8005156:	f7fd fafc 	bl	8002752 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b49      	cmp	r3, #73	@ 0x49
 800515e:	d05e      	beq.n	800521e <BSP_TS_Get_GestureId+0xe6>
 8005160:	2b49      	cmp	r3, #73	@ 0x49
 8005162:	d860      	bhi.n	8005226 <BSP_TS_Get_GestureId+0xee>
 8005164:	2b1c      	cmp	r3, #28
 8005166:	d83f      	bhi.n	80051e8 <BSP_TS_Get_GestureId+0xb0>
 8005168:	2b1c      	cmp	r3, #28
 800516a:	d85c      	bhi.n	8005226 <BSP_TS_Get_GestureId+0xee>
 800516c:	a201      	add	r2, pc, #4	@ (adr r2, 8005174 <BSP_TS_Get_GestureId+0x3c>)
 800516e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005172:	bf00      	nop
 8005174:	080051ef 	.word	0x080051ef
 8005178:	08005227 	.word	0x08005227
 800517c:	08005227 	.word	0x08005227
 8005180:	08005227 	.word	0x08005227
 8005184:	08005227 	.word	0x08005227
 8005188:	08005227 	.word	0x08005227
 800518c:	08005227 	.word	0x08005227
 8005190:	08005227 	.word	0x08005227
 8005194:	08005227 	.word	0x08005227
 8005198:	08005227 	.word	0x08005227
 800519c:	08005227 	.word	0x08005227
 80051a0:	08005227 	.word	0x08005227
 80051a4:	08005227 	.word	0x08005227
 80051a8:	08005227 	.word	0x08005227
 80051ac:	08005227 	.word	0x08005227
 80051b0:	08005227 	.word	0x08005227
 80051b4:	080051f7 	.word	0x080051f7
 80051b8:	08005227 	.word	0x08005227
 80051bc:	08005227 	.word	0x08005227
 80051c0:	08005227 	.word	0x08005227
 80051c4:	080051ff 	.word	0x080051ff
 80051c8:	08005227 	.word	0x08005227
 80051cc:	08005227 	.word	0x08005227
 80051d0:	08005227 	.word	0x08005227
 80051d4:	08005207 	.word	0x08005207
 80051d8:	08005227 	.word	0x08005227
 80051dc:	08005227 	.word	0x08005227
 80051e0:	08005227 	.word	0x08005227
 80051e4:	0800520f 	.word	0x0800520f
 80051e8:	2b40      	cmp	r3, #64	@ 0x40
 80051ea:	d014      	beq.n	8005216 <BSP_TS_Get_GestureId+0xde>
 80051ec:	e01b      	b.n	8005226 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80051f4:	e01a      	b.n	800522c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80051fc:	e016      	b.n	800522c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2202      	movs	r2, #2
 8005202:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005204:	e012      	b.n	800522c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2203      	movs	r2, #3
 800520a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800520c:	e00e      	b.n	800522c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2204      	movs	r2, #4
 8005212:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005214:	e00a      	b.n	800522c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2205      	movs	r2, #5
 800521a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800521c:	e006      	b.n	800522c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2206      	movs	r2, #6
 8005222:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005224:	e002      	b.n	800522c <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	73fb      	strb	r3, [r7, #15]
      break;
 800522a:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 800522c:	7bfb      	ldrb	r3, [r7, #15]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20000ccd 	.word	0x20000ccd

0800523c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005242:	4b11      	ldr	r3, [pc, #68]	@ (8005288 <HAL_MspInit+0x4c>)
 8005244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005246:	4a10      	ldr	r2, [pc, #64]	@ (8005288 <HAL_MspInit+0x4c>)
 8005248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800524c:	6413      	str	r3, [r2, #64]	@ 0x40
 800524e:	4b0e      	ldr	r3, [pc, #56]	@ (8005288 <HAL_MspInit+0x4c>)
 8005250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005256:	607b      	str	r3, [r7, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800525a:	4b0b      	ldr	r3, [pc, #44]	@ (8005288 <HAL_MspInit+0x4c>)
 800525c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800525e:	4a0a      	ldr	r2, [pc, #40]	@ (8005288 <HAL_MspInit+0x4c>)
 8005260:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005264:	6453      	str	r3, [r2, #68]	@ 0x44
 8005266:	4b08      	ldr	r3, [pc, #32]	@ (8005288 <HAL_MspInit+0x4c>)
 8005268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800526e:	603b      	str	r3, [r7, #0]
 8005270:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005272:	2200      	movs	r2, #0
 8005274:	210f      	movs	r1, #15
 8005276:	f06f 0001 	mvn.w	r0, #1
 800527a:	f001 f807 	bl	800628c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800527e:	bf00      	nop
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	40023800 	.word	0x40023800

0800528c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08e      	sub	sp, #56	@ 0x38
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800529c:	4b33      	ldr	r3, [pc, #204]	@ (800536c <HAL_InitTick+0xe0>)
 800529e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a0:	4a32      	ldr	r2, [pc, #200]	@ (800536c <HAL_InitTick+0xe0>)
 80052a2:	f043 0310 	orr.w	r3, r3, #16
 80052a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80052a8:	4b30      	ldr	r3, [pc, #192]	@ (800536c <HAL_InitTick+0xe0>)
 80052aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ac:	f003 0310 	and.w	r3, r3, #16
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80052b4:	f107 0210 	add.w	r2, r7, #16
 80052b8:	f107 0314 	add.w	r3, r7, #20
 80052bc:	4611      	mov	r1, r2
 80052be:	4618      	mov	r0, r3
 80052c0:	f003 ff76 	bl	80091b0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80052c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d103      	bne.n	80052d6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80052ce:	f003 ff47 	bl	8009160 <HAL_RCC_GetPCLK1Freq>
 80052d2:	6378      	str	r0, [r7, #52]	@ 0x34
 80052d4:	e004      	b.n	80052e0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80052d6:	f003 ff43 	bl	8009160 <HAL_RCC_GetPCLK1Freq>
 80052da:	4603      	mov	r3, r0
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80052e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e2:	4a23      	ldr	r2, [pc, #140]	@ (8005370 <HAL_InitTick+0xe4>)
 80052e4:	fba2 2303 	umull	r2, r3, r2, r3
 80052e8:	0c9b      	lsrs	r3, r3, #18
 80052ea:	3b01      	subs	r3, #1
 80052ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80052ee:	4b21      	ldr	r3, [pc, #132]	@ (8005374 <HAL_InitTick+0xe8>)
 80052f0:	4a21      	ldr	r2, [pc, #132]	@ (8005378 <HAL_InitTick+0xec>)
 80052f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80052f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005374 <HAL_InitTick+0xe8>)
 80052f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80052fa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80052fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005374 <HAL_InitTick+0xe8>)
 80052fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005300:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005302:	4b1c      	ldr	r3, [pc, #112]	@ (8005374 <HAL_InitTick+0xe8>)
 8005304:	2200      	movs	r2, #0
 8005306:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005308:	4b1a      	ldr	r3, [pc, #104]	@ (8005374 <HAL_InitTick+0xe8>)
 800530a:	2200      	movs	r2, #0
 800530c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800530e:	4b19      	ldr	r3, [pc, #100]	@ (8005374 <HAL_InitTick+0xe8>)
 8005310:	2200      	movs	r2, #0
 8005312:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005314:	4817      	ldr	r0, [pc, #92]	@ (8005374 <HAL_InitTick+0xe8>)
 8005316:	f005 fd92 	bl	800ae3e <HAL_TIM_Base_Init>
 800531a:	4603      	mov	r3, r0
 800531c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8005320:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005324:	2b00      	cmp	r3, #0
 8005326:	d11b      	bne.n	8005360 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005328:	4812      	ldr	r0, [pc, #72]	@ (8005374 <HAL_InitTick+0xe8>)
 800532a:	f005 fddf 	bl	800aeec <HAL_TIM_Base_Start_IT>
 800532e:	4603      	mov	r3, r0
 8005330:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8005334:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005338:	2b00      	cmp	r3, #0
 800533a:	d111      	bne.n	8005360 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800533c:	2036      	movs	r0, #54	@ 0x36
 800533e:	f000 ffc1 	bl	80062c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b0f      	cmp	r3, #15
 8005346:	d808      	bhi.n	800535a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005348:	2200      	movs	r2, #0
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	2036      	movs	r0, #54	@ 0x36
 800534e:	f000 ff9d 	bl	800628c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005352:	4a0a      	ldr	r2, [pc, #40]	@ (800537c <HAL_InitTick+0xf0>)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	e002      	b.n	8005360 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005360:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8005364:	4618      	mov	r0, r3
 8005366:	3738      	adds	r7, #56	@ 0x38
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40023800 	.word	0x40023800
 8005370:	431bde83 	.word	0x431bde83
 8005374:	20000cf8 	.word	0x20000cf8
 8005378:	40001000 	.word	0x40001000
 800537c:	2000004c 	.word	0x2000004c

08005380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005384:	bf00      	nop
 8005386:	e7fd      	b.n	8005384 <NMI_Handler+0x4>

08005388 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800538c:	bf00      	nop
 800538e:	e7fd      	b.n	800538c <HardFault_Handler+0x4>

08005390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005394:	bf00      	nop
 8005396:	e7fd      	b.n	8005394 <MemManage_Handler+0x4>

08005398 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005398:	b480      	push	{r7}
 800539a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800539c:	bf00      	nop
 800539e:	e7fd      	b.n	800539c <BusFault_Handler+0x4>

080053a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053a4:	bf00      	nop
 80053a6:	e7fd      	b.n	80053a4 <UsageFault_Handler+0x4>

080053a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053ac:	bf00      	nop
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
	...

080053b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80053bc:	4802      	ldr	r0, [pc, #8]	@ (80053c8 <TIM6_DAC_IRQHandler+0x10>)
 80053be:	f005 fe0d 	bl	800afdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80053c2:	bf00      	nop
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	20000cf8 	.word	0x20000cf8

080053cc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80053d0:	4802      	ldr	r0, [pc, #8]	@ (80053dc <DMA2_Stream3_IRQHandler+0x10>)
 80053d2:	f001 f8f1 	bl	80065b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80053d6:	bf00      	nop
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20000968 	.word	0x20000968

080053e0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 80053e4:	4802      	ldr	r0, [pc, #8]	@ (80053f0 <DMA2_Stream4_IRQHandler+0x10>)
 80053e6:	f001 f8e7 	bl	80065b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80053ea:	bf00      	nop
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20000820 	.word	0x20000820

080053f4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80053f8:	4802      	ldr	r0, [pc, #8]	@ (8005404 <DMA2_Stream6_IRQHandler+0x10>)
 80053fa:	f001 f8dd 	bl	80065b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80053fe:	bf00      	nop
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	200009c8 	.word	0x200009c8

08005408 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 800540c:	4802      	ldr	r0, [pc, #8]	@ (8005418 <DMA2_Stream7_IRQHandler+0x10>)
 800540e:	f001 f8d3 	bl	80065b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8005412:	bf00      	nop
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	20000880 	.word	0x20000880

0800541c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8005420:	4802      	ldr	r0, [pc, #8]	@ (800542c <LTDC_IRQHandler+0x10>)
 8005422:	f002 ff33 	bl	800828c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8005426:	bf00      	nop
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20000660 	.word	0x20000660

08005430 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005434:	4802      	ldr	r0, [pc, #8]	@ (8005440 <DMA2D_IRQHandler+0x10>)
 8005436:	f001 fc93 	bl	8006d60 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800543a:	bf00      	nop
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	20000160 	.word	0x20000160

08005444 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
	return 1;
 8005448:	2301      	movs	r3, #1
}
 800544a:	4618      	mov	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <_kill>:

int _kill(int pid, int sig)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800545e:	f00a ff4d 	bl	80102fc <__errno>
 8005462:	4603      	mov	r3, r0
 8005464:	2216      	movs	r2, #22
 8005466:	601a      	str	r2, [r3, #0]
	return -1;
 8005468:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800546c:	4618      	mov	r0, r3
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <_exit>:

void _exit (int status)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800547c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7ff ffe7 	bl	8005454 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005486:	bf00      	nop
 8005488:	e7fd      	b.n	8005486 <_exit+0x12>

0800548a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b086      	sub	sp, #24
 800548e:	af00      	add	r7, sp, #0
 8005490:	60f8      	str	r0, [r7, #12]
 8005492:	60b9      	str	r1, [r7, #8]
 8005494:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005496:	2300      	movs	r3, #0
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	e00a      	b.n	80054b2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800549c:	f3af 8000 	nop.w
 80054a0:	4601      	mov	r1, r0
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	60ba      	str	r2, [r7, #8]
 80054a8:	b2ca      	uxtb	r2, r1
 80054aa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	3301      	adds	r3, #1
 80054b0:	617b      	str	r3, [r7, #20]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	dbf0      	blt.n	800549c <_read+0x12>
	}

return len;
 80054ba:	687b      	ldr	r3, [r7, #4]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054d0:	2300      	movs	r3, #0
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	e009      	b.n	80054ea <_write+0x26>
	{
		__io_putchar(*ptr++);
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	60ba      	str	r2, [r7, #8]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	3301      	adds	r3, #1
 80054e8:	617b      	str	r3, [r7, #20]
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	dbf1      	blt.n	80054d6 <_write+0x12>
	}
	return len;
 80054f2:	687b      	ldr	r3, [r7, #4]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3718      	adds	r7, #24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <_close>:

int _close(int file)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
	return -1;
 8005504:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005508:	4618      	mov	r0, r3
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005524:	605a      	str	r2, [r3, #4]
	return 0;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <_isatty>:

int _isatty(int file)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
	return 1;
 800553c:	2301      	movs	r3, #1
}
 800553e:	4618      	mov	r0, r3
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800554a:	b480      	push	{r7}
 800554c:	b085      	sub	sp, #20
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	607a      	str	r2, [r7, #4]
	return 0;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800556c:	4a14      	ldr	r2, [pc, #80]	@ (80055c0 <_sbrk+0x5c>)
 800556e:	4b15      	ldr	r3, [pc, #84]	@ (80055c4 <_sbrk+0x60>)
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005578:	4b13      	ldr	r3, [pc, #76]	@ (80055c8 <_sbrk+0x64>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d102      	bne.n	8005586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005580:	4b11      	ldr	r3, [pc, #68]	@ (80055c8 <_sbrk+0x64>)
 8005582:	4a12      	ldr	r2, [pc, #72]	@ (80055cc <_sbrk+0x68>)
 8005584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005586:	4b10      	ldr	r3, [pc, #64]	@ (80055c8 <_sbrk+0x64>)
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4413      	add	r3, r2
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	429a      	cmp	r2, r3
 8005592:	d207      	bcs.n	80055a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005594:	f00a feb2 	bl	80102fc <__errno>
 8005598:	4603      	mov	r3, r0
 800559a:	220c      	movs	r2, #12
 800559c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800559e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80055a2:	e009      	b.n	80055b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80055a4:	4b08      	ldr	r3, [pc, #32]	@ (80055c8 <_sbrk+0x64>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80055aa:	4b07      	ldr	r3, [pc, #28]	@ (80055c8 <_sbrk+0x64>)
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4413      	add	r3, r2
 80055b2:	4a05      	ldr	r2, [pc, #20]	@ (80055c8 <_sbrk+0x64>)
 80055b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80055b6:	68fb      	ldr	r3, [r7, #12]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3718      	adds	r7, #24
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	20050000 	.word	0x20050000
 80055c4:	00000400 	.word	0x00000400
 80055c8:	20000d44 	.word	0x20000d44
 80055cc:	20004cd0 	.word	0x20004cd0

080055d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80055d4:	4b06      	ldr	r3, [pc, #24]	@ (80055f0 <SystemInit+0x20>)
 80055d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055da:	4a05      	ldr	r2, [pc, #20]	@ (80055f0 <SystemInit+0x20>)
 80055dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80055e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055e4:	bf00      	nop
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	e000ed00 	.word	0xe000ed00

080055f4 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b088      	sub	sp, #32
 80055f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80055fa:	f107 0310 	add.w	r3, r7, #16
 80055fe:	2200      	movs	r2, #0
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	605a      	str	r2, [r3, #4]
 8005604:	609a      	str	r2, [r3, #8]
 8005606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005608:	1d3b      	adds	r3, r7, #4
 800560a:	2200      	movs	r2, #0
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	605a      	str	r2, [r3, #4]
 8005610:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005612:	4b1d      	ldr	r3, [pc, #116]	@ (8005688 <MX_TIM5_Init+0x94>)
 8005614:	4a1d      	ldr	r2, [pc, #116]	@ (800568c <MX_TIM5_Init+0x98>)
 8005616:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8005618:	4b1b      	ldr	r3, [pc, #108]	@ (8005688 <MX_TIM5_Init+0x94>)
 800561a:	2200      	movs	r2, #0
 800561c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800561e:	4b1a      	ldr	r3, [pc, #104]	@ (8005688 <MX_TIM5_Init+0x94>)
 8005620:	2200      	movs	r2, #0
 8005622:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8005624:	4b18      	ldr	r3, [pc, #96]	@ (8005688 <MX_TIM5_Init+0x94>)
 8005626:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800562a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800562c:	4b16      	ldr	r3, [pc, #88]	@ (8005688 <MX_TIM5_Init+0x94>)
 800562e:	2200      	movs	r2, #0
 8005630:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005632:	4b15      	ldr	r3, [pc, #84]	@ (8005688 <MX_TIM5_Init+0x94>)
 8005634:	2200      	movs	r2, #0
 8005636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005638:	4813      	ldr	r0, [pc, #76]	@ (8005688 <MX_TIM5_Init+0x94>)
 800563a:	f005 fc00 	bl	800ae3e <HAL_TIM_Base_Init>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005644:	f7fd fede 	bl	8003404 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005648:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800564c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800564e:	f107 0310 	add.w	r3, r7, #16
 8005652:	4619      	mov	r1, r3
 8005654:	480c      	ldr	r0, [pc, #48]	@ (8005688 <MX_TIM5_Init+0x94>)
 8005656:	f005 fde1 	bl	800b21c <HAL_TIM_ConfigClockSource>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8005660:	f7fd fed0 	bl	8003404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005664:	2300      	movs	r3, #0
 8005666:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005668:	2300      	movs	r3, #0
 800566a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800566c:	1d3b      	adds	r3, r7, #4
 800566e:	4619      	mov	r1, r3
 8005670:	4805      	ldr	r0, [pc, #20]	@ (8005688 <MX_TIM5_Init+0x94>)
 8005672:	f005 ffff 	bl	800b674 <HAL_TIMEx_MasterConfigSynchronization>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800567c:	f7fd fec2 	bl	8003404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005680:	bf00      	nop
 8005682:	3720      	adds	r7, #32
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	20000d48 	.word	0x20000d48
 800568c:	40000c00 	.word	0x40000c00

08005690 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a0a      	ldr	r2, [pc, #40]	@ (80056c8 <HAL_TIM_Base_MspInit+0x38>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d10b      	bne.n	80056ba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80056a2:	4b0a      	ldr	r3, [pc, #40]	@ (80056cc <HAL_TIM_Base_MspInit+0x3c>)
 80056a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a6:	4a09      	ldr	r2, [pc, #36]	@ (80056cc <HAL_TIM_Base_MspInit+0x3c>)
 80056a8:	f043 0308 	orr.w	r3, r3, #8
 80056ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80056ae:	4b07      	ldr	r3, [pc, #28]	@ (80056cc <HAL_TIM_Base_MspInit+0x3c>)
 80056b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b2:	f003 0308 	and.w	r3, r3, #8
 80056b6:	60fb      	str	r3, [r7, #12]
 80056b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80056ba:	bf00      	nop
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	40000c00 	.word	0x40000c00
 80056cc:	40023800 	.word	0x40023800

080056d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80056d4:	4b14      	ldr	r3, [pc, #80]	@ (8005728 <MX_USART1_UART_Init+0x58>)
 80056d6:	4a15      	ldr	r2, [pc, #84]	@ (800572c <MX_USART1_UART_Init+0x5c>)
 80056d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80056da:	4b13      	ldr	r3, [pc, #76]	@ (8005728 <MX_USART1_UART_Init+0x58>)
 80056dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80056e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80056e2:	4b11      	ldr	r3, [pc, #68]	@ (8005728 <MX_USART1_UART_Init+0x58>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80056e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005728 <MX_USART1_UART_Init+0x58>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80056ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005728 <MX_USART1_UART_Init+0x58>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80056f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005728 <MX_USART1_UART_Init+0x58>)
 80056f6:	220c      	movs	r2, #12
 80056f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005728 <MX_USART1_UART_Init+0x58>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005700:	4b09      	ldr	r3, [pc, #36]	@ (8005728 <MX_USART1_UART_Init+0x58>)
 8005702:	2200      	movs	r2, #0
 8005704:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005706:	4b08      	ldr	r3, [pc, #32]	@ (8005728 <MX_USART1_UART_Init+0x58>)
 8005708:	2200      	movs	r2, #0
 800570a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800570c:	4b06      	ldr	r3, [pc, #24]	@ (8005728 <MX_USART1_UART_Init+0x58>)
 800570e:	2200      	movs	r2, #0
 8005710:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005712:	4805      	ldr	r0, [pc, #20]	@ (8005728 <MX_USART1_UART_Init+0x58>)
 8005714:	f006 f85a 	bl	800b7cc <HAL_UART_Init>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800571e:	f7fd fe71 	bl	8003404 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005722:	bf00      	nop
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20000d94 	.word	0x20000d94
 800572c:	40011000 	.word	0x40011000

08005730 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b0ac      	sub	sp, #176	@ 0xb0
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005738:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	605a      	str	r2, [r3, #4]
 8005742:	609a      	str	r2, [r3, #8]
 8005744:	60da      	str	r2, [r3, #12]
 8005746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005748:	f107 0318 	add.w	r3, r7, #24
 800574c:	2284      	movs	r2, #132	@ 0x84
 800574e:	2100      	movs	r1, #0
 8005750:	4618      	mov	r0, r3
 8005752:	f00a fd2e 	bl	80101b2 <memset>
  if(uartHandle->Instance==USART1)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a32      	ldr	r2, [pc, #200]	@ (8005824 <HAL_UART_MspInit+0xf4>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d15c      	bne.n	800581a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005760:	2340      	movs	r3, #64	@ 0x40
 8005762:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005764:	2300      	movs	r3, #0
 8005766:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005768:	f107 0318 	add.w	r3, r7, #24
 800576c:	4618      	mov	r0, r3
 800576e:	f003 fd51 	bl	8009214 <HAL_RCCEx_PeriphCLKConfig>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005778:	f7fd fe44 	bl	8003404 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800577c:	4b2a      	ldr	r3, [pc, #168]	@ (8005828 <HAL_UART_MspInit+0xf8>)
 800577e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005780:	4a29      	ldr	r2, [pc, #164]	@ (8005828 <HAL_UART_MspInit+0xf8>)
 8005782:	f043 0310 	orr.w	r3, r3, #16
 8005786:	6453      	str	r3, [r2, #68]	@ 0x44
 8005788:	4b27      	ldr	r3, [pc, #156]	@ (8005828 <HAL_UART_MspInit+0xf8>)
 800578a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800578c:	f003 0310 	and.w	r3, r3, #16
 8005790:	617b      	str	r3, [r7, #20]
 8005792:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005794:	4b24      	ldr	r3, [pc, #144]	@ (8005828 <HAL_UART_MspInit+0xf8>)
 8005796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005798:	4a23      	ldr	r2, [pc, #140]	@ (8005828 <HAL_UART_MspInit+0xf8>)
 800579a:	f043 0302 	orr.w	r3, r3, #2
 800579e:	6313      	str	r3, [r2, #48]	@ 0x30
 80057a0:	4b21      	ldr	r3, [pc, #132]	@ (8005828 <HAL_UART_MspInit+0xf8>)
 80057a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057ac:	4b1e      	ldr	r3, [pc, #120]	@ (8005828 <HAL_UART_MspInit+0xf8>)
 80057ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005828 <HAL_UART_MspInit+0xf8>)
 80057b2:	f043 0301 	orr.w	r3, r3, #1
 80057b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80057b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005828 <HAL_UART_MspInit+0xf8>)
 80057ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	60fb      	str	r3, [r7, #12]
 80057c2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80057c4:	2380      	movs	r3, #128	@ 0x80
 80057c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ca:	2302      	movs	r3, #2
 80057cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d0:	2300      	movs	r3, #0
 80057d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057d6:	2300      	movs	r3, #0
 80057d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80057dc:	2307      	movs	r3, #7
 80057de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80057e2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80057e6:	4619      	mov	r1, r3
 80057e8:	4810      	ldr	r0, [pc, #64]	@ (800582c <HAL_UART_MspInit+0xfc>)
 80057ea:	f001 fcf7 	bl	80071dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80057ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80057f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057f6:	2302      	movs	r3, #2
 80057f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057fc:	2300      	movs	r3, #0
 80057fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005802:	2300      	movs	r3, #0
 8005804:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005808:	2307      	movs	r3, #7
 800580a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800580e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005812:	4619      	mov	r1, r3
 8005814:	4806      	ldr	r0, [pc, #24]	@ (8005830 <HAL_UART_MspInit+0x100>)
 8005816:	f001 fce1 	bl	80071dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800581a:	bf00      	nop
 800581c:	37b0      	adds	r7, #176	@ 0xb0
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	40011000 	.word	0x40011000
 8005828:	40023800 	.word	0x40023800
 800582c:	40020400 	.word	0x40020400
 8005830:	40020000 	.word	0x40020000

08005834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005834:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800586c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005838:	480d      	ldr	r0, [pc, #52]	@ (8005870 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800583a:	490e      	ldr	r1, [pc, #56]	@ (8005874 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800583c:	4a0e      	ldr	r2, [pc, #56]	@ (8005878 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800583e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005840:	e002      	b.n	8005848 <LoopCopyDataInit>

08005842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005846:	3304      	adds	r3, #4

08005848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800584a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800584c:	d3f9      	bcc.n	8005842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800584e:	4a0b      	ldr	r2, [pc, #44]	@ (800587c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005850:	4c0b      	ldr	r4, [pc, #44]	@ (8005880 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005854:	e001      	b.n	800585a <LoopFillZerobss>

08005856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005858:	3204      	adds	r2, #4

0800585a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800585a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800585c:	d3fb      	bcc.n	8005856 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800585e:	f7ff feb7 	bl	80055d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005862:	f00a fd51 	bl	8010308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005866:	f7fd fcab 	bl	80031c0 <main>
  bx  lr    
 800586a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800586c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005874:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8005878:	0801f8d8 	.word	0x0801f8d8
  ldr r2, =_sbss
 800587c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8005880:	20004cd0 	.word	0x20004cd0

08005884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005884:	e7fe      	b.n	8005884 <ADC_IRQHandler>

08005886 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800588a:	2003      	movs	r0, #3
 800588c:	f000 fcf3 	bl	8006276 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005890:	200f      	movs	r0, #15
 8005892:	f7ff fcfb 	bl	800528c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005896:	f7ff fcd1 	bl	800523c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80058a4:	4b06      	ldr	r3, [pc, #24]	@ (80058c0 <HAL_IncTick+0x20>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	461a      	mov	r2, r3
 80058aa:	4b06      	ldr	r3, [pc, #24]	@ (80058c4 <HAL_IncTick+0x24>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4413      	add	r3, r2
 80058b0:	4a04      	ldr	r2, [pc, #16]	@ (80058c4 <HAL_IncTick+0x24>)
 80058b2:	6013      	str	r3, [r2, #0]
}
 80058b4:	bf00      	nop
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	20000050 	.word	0x20000050
 80058c4:	20000e1c 	.word	0x20000e1c

080058c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058c8:	b480      	push	{r7}
 80058ca:	af00      	add	r7, sp, #0
  return uwTick;
 80058cc:	4b03      	ldr	r3, [pc, #12]	@ (80058dc <HAL_GetTick+0x14>)
 80058ce:	681b      	ldr	r3, [r3, #0]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	20000e1c 	.word	0x20000e1c

080058e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80058e8:	f7ff ffee 	bl	80058c8 <HAL_GetTick>
 80058ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058f8:	d005      	beq.n	8005906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80058fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005924 <HAL_Delay+0x44>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4413      	add	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005906:	bf00      	nop
 8005908:	f7ff ffde 	bl	80058c8 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	429a      	cmp	r2, r3
 8005916:	d8f7      	bhi.n	8005908 <HAL_Delay+0x28>
  {
  }
}
 8005918:	bf00      	nop
 800591a:	bf00      	nop
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	20000050 	.word	0x20000050

08005928 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e031      	b.n	80059a2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	d109      	bne.n	800595a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7fb fabc 	bl	8000ec4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595e:	f003 0310 	and.w	r3, r3, #16
 8005962:	2b00      	cmp	r3, #0
 8005964:	d116      	bne.n	8005994 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800596a:	4b10      	ldr	r3, [pc, #64]	@ (80059ac <HAL_ADC_Init+0x84>)
 800596c:	4013      	ands	r3, r2
 800596e:	f043 0202 	orr.w	r2, r3, #2
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fad6 	bl	8005f28 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005986:	f023 0303 	bic.w	r3, r3, #3
 800598a:	f043 0201 	orr.w	r2, r3, #1
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	641a      	str	r2, [r3, #64]	@ 0x40
 8005992:	e001      	b.n	8005998 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	ffffeefd 	.word	0xffffeefd

080059b0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80059b8:	2300      	movs	r3, #0
 80059ba:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_ADC_Start+0x1a>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e0ad      	b.n	8005b26 <HAL_ADC_Start+0x176>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d018      	beq.n	8005a12 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689a      	ldr	r2, [r3, #8]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f042 0201 	orr.w	r2, r2, #1
 80059ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80059f0:	4b50      	ldr	r3, [pc, #320]	@ (8005b34 <HAL_ADC_Start+0x184>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a50      	ldr	r2, [pc, #320]	@ (8005b38 <HAL_ADC_Start+0x188>)
 80059f6:	fba2 2303 	umull	r2, r3, r2, r3
 80059fa:	0c9a      	lsrs	r2, r3, #18
 80059fc:	4613      	mov	r3, r2
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	4413      	add	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005a04:	e002      	b.n	8005a0c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1f9      	bne.n	8005a06 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d175      	bne.n	8005b0c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a24:	4b45      	ldr	r3, [pc, #276]	@ (8005b3c <HAL_ADC_Start+0x18c>)
 8005a26:	4013      	ands	r3, r2
 8005a28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d007      	beq.n	8005a4e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a42:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005a46:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a5a:	d106      	bne.n	8005a6a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a60:	f023 0206 	bic.w	r2, r3, #6
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	645a      	str	r2, [r3, #68]	@ 0x44
 8005a68:	e002      	b.n	8005a70 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005a80:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005a82:	4b2f      	ldr	r3, [pc, #188]	@ (8005b40 <HAL_ADC_Start+0x190>)
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f003 031f 	and.w	r3, r3, #31
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10f      	bne.n	8005aae <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d143      	bne.n	8005b24 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689a      	ldr	r2, [r3, #8]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005aaa:	609a      	str	r2, [r3, #8]
 8005aac:	e03a      	b.n	8005b24 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a24      	ldr	r2, [pc, #144]	@ (8005b44 <HAL_ADC_Start+0x194>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d10e      	bne.n	8005ad6 <HAL_ADC_Start+0x126>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d107      	bne.n	8005ad6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005ad4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8005ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8005b40 <HAL_ADC_Start+0x190>)
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f003 0310 	and.w	r3, r3, #16
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d120      	bne.n	8005b24 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a18      	ldr	r2, [pc, #96]	@ (8005b48 <HAL_ADC_Start+0x198>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d11b      	bne.n	8005b24 <HAL_ADC_Start+0x174>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d114      	bne.n	8005b24 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005b08:	609a      	str	r2, [r3, #8]
 8005b0a:	e00b      	b.n	8005b24 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b10:	f043 0210 	orr.w	r2, r3, #16
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b1c:	f043 0201 	orr.w	r2, r3, #1
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	20000048 	.word	0x20000048
 8005b38:	431bde83 	.word	0x431bde83
 8005b3c:	fffff8fe 	.word	0xfffff8fe
 8005b40:	40012300 	.word	0x40012300
 8005b44:	40012000 	.word	0x40012000
 8005b48:	40012200 	.word	0x40012200

08005b4c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b68:	d113      	bne.n	8005b92 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005b74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b78:	d10b      	bne.n	8005b92 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7e:	f043 0220 	orr.w	r2, r3, #32
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e063      	b.n	8005c5a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005b92:	f7ff fe99 	bl	80058c8 <HAL_GetTick>
 8005b96:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005b98:	e021      	b.n	8005bde <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ba0:	d01d      	beq.n	8005bde <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d007      	beq.n	8005bb8 <HAL_ADC_PollForConversion+0x6c>
 8005ba8:	f7ff fe8e 	bl	80058c8 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d212      	bcs.n	8005bde <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d00b      	beq.n	8005bde <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bca:	f043 0204 	orr.w	r2, r3, #4
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e03d      	b.n	8005c5a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d1d6      	bne.n	8005b9a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f06f 0212 	mvn.w	r2, #18
 8005bf4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d123      	bne.n	8005c58 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d11f      	bne.n	8005c58 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d006      	beq.n	8005c34 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d111      	bne.n	8005c58 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d105      	bne.n	8005c58 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c50:	f043 0201 	orr.w	r2, r3, #1
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005c86:	2300      	movs	r3, #0
 8005c88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d101      	bne.n	8005c98 <HAL_ADC_ConfigChannel+0x1c>
 8005c94:	2302      	movs	r3, #2
 8005c96:	e136      	b.n	8005f06 <HAL_ADC_ConfigChannel+0x28a>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2b09      	cmp	r3, #9
 8005ca6:	d93a      	bls.n	8005d1e <HAL_ADC_ConfigChannel+0xa2>
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cb0:	d035      	beq.n	8005d1e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68d9      	ldr	r1, [r3, #12]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	005b      	lsls	r3, r3, #1
 8005cc4:	4413      	add	r3, r2
 8005cc6:	3b1e      	subs	r3, #30
 8005cc8:	2207      	movs	r2, #7
 8005cca:	fa02 f303 	lsl.w	r3, r2, r3
 8005cce:	43da      	mvns	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	400a      	ands	r2, r1
 8005cd6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a8d      	ldr	r2, [pc, #564]	@ (8005f14 <HAL_ADC_ConfigChannel+0x298>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d10a      	bne.n	8005cf8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68d9      	ldr	r1, [r3, #12]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	061a      	lsls	r2, r3, #24
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005cf6:	e035      	b.n	8005d64 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68d9      	ldr	r1, [r3, #12]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	4618      	mov	r0, r3
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	4403      	add	r3, r0
 8005d10:	3b1e      	subs	r3, #30
 8005d12:	409a      	lsls	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d1c:	e022      	b.n	8005d64 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6919      	ldr	r1, [r3, #16]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	4413      	add	r3, r2
 8005d32:	2207      	movs	r2, #7
 8005d34:	fa02 f303 	lsl.w	r3, r2, r3
 8005d38:	43da      	mvns	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	400a      	ands	r2, r1
 8005d40:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6919      	ldr	r1, [r3, #16]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	4618      	mov	r0, r3
 8005d54:	4603      	mov	r3, r0
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	4403      	add	r3, r0
 8005d5a:	409a      	lsls	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b06      	cmp	r3, #6
 8005d6a:	d824      	bhi.n	8005db6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	4613      	mov	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	3b05      	subs	r3, #5
 8005d7e:	221f      	movs	r2, #31
 8005d80:	fa02 f303 	lsl.w	r3, r2, r3
 8005d84:	43da      	mvns	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	400a      	ands	r2, r1
 8005d8c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	4613      	mov	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	3b05      	subs	r3, #5
 8005da8:	fa00 f203 	lsl.w	r2, r0, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	635a      	str	r2, [r3, #52]	@ 0x34
 8005db4:	e04c      	b.n	8005e50 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	2b0c      	cmp	r3, #12
 8005dbc:	d824      	bhi.n	8005e08 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	3b23      	subs	r3, #35	@ 0x23
 8005dd0:	221f      	movs	r2, #31
 8005dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd6:	43da      	mvns	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	400a      	ands	r2, r1
 8005dde:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	4618      	mov	r0, r3
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	3b23      	subs	r3, #35	@ 0x23
 8005dfa:	fa00 f203 	lsl.w	r2, r0, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e06:	e023      	b.n	8005e50 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	4613      	mov	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	3b41      	subs	r3, #65	@ 0x41
 8005e1a:	221f      	movs	r2, #31
 8005e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e20:	43da      	mvns	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	400a      	ands	r2, r1
 8005e28:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	4618      	mov	r0, r3
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	3b41      	subs	r3, #65	@ 0x41
 8005e44:	fa00 f203 	lsl.w	r2, r0, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a30      	ldr	r2, [pc, #192]	@ (8005f18 <HAL_ADC_ConfigChannel+0x29c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d10a      	bne.n	8005e70 <HAL_ADC_ConfigChannel+0x1f4>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e62:	d105      	bne.n	8005e70 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005e64:	4b2d      	ldr	r3, [pc, #180]	@ (8005f1c <HAL_ADC_ConfigChannel+0x2a0>)
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	4a2c      	ldr	r2, [pc, #176]	@ (8005f1c <HAL_ADC_ConfigChannel+0x2a0>)
 8005e6a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005e6e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a28      	ldr	r2, [pc, #160]	@ (8005f18 <HAL_ADC_ConfigChannel+0x29c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d10f      	bne.n	8005e9a <HAL_ADC_ConfigChannel+0x21e>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b12      	cmp	r3, #18
 8005e80:	d10b      	bne.n	8005e9a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005e82:	4b26      	ldr	r3, [pc, #152]	@ (8005f1c <HAL_ADC_ConfigChannel+0x2a0>)
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	4a25      	ldr	r2, [pc, #148]	@ (8005f1c <HAL_ADC_ConfigChannel+0x2a0>)
 8005e88:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005e8c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005e8e:	4b23      	ldr	r3, [pc, #140]	@ (8005f1c <HAL_ADC_ConfigChannel+0x2a0>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	4a22      	ldr	r2, [pc, #136]	@ (8005f1c <HAL_ADC_ConfigChannel+0x2a0>)
 8005e94:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005e98:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a1e      	ldr	r2, [pc, #120]	@ (8005f18 <HAL_ADC_ConfigChannel+0x29c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d12b      	bne.n	8005efc <HAL_ADC_ConfigChannel+0x280>
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1a      	ldr	r2, [pc, #104]	@ (8005f14 <HAL_ADC_ConfigChannel+0x298>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d003      	beq.n	8005eb6 <HAL_ADC_ConfigChannel+0x23a>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2b11      	cmp	r3, #17
 8005eb4:	d122      	bne.n	8005efc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005eb6:	4b19      	ldr	r3, [pc, #100]	@ (8005f1c <HAL_ADC_ConfigChannel+0x2a0>)
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	4a18      	ldr	r2, [pc, #96]	@ (8005f1c <HAL_ADC_ConfigChannel+0x2a0>)
 8005ebc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005ec0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005ec2:	4b16      	ldr	r3, [pc, #88]	@ (8005f1c <HAL_ADC_ConfigChannel+0x2a0>)
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	4a15      	ldr	r2, [pc, #84]	@ (8005f1c <HAL_ADC_ConfigChannel+0x2a0>)
 8005ec8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005ecc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a10      	ldr	r2, [pc, #64]	@ (8005f14 <HAL_ADC_ConfigChannel+0x298>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d111      	bne.n	8005efc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005ed8:	4b11      	ldr	r3, [pc, #68]	@ (8005f20 <HAL_ADC_ConfigChannel+0x2a4>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a11      	ldr	r2, [pc, #68]	@ (8005f24 <HAL_ADC_ConfigChannel+0x2a8>)
 8005ede:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee2:	0c9a      	lsrs	r2, r3, #18
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005eee:	e002      	b.n	8005ef6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1f9      	bne.n	8005ef0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	10000012 	.word	0x10000012
 8005f18:	40012000 	.word	0x40012000
 8005f1c:	40012300 	.word	0x40012300
 8005f20:	20000048 	.word	0x20000048
 8005f24:	431bde83 	.word	0x431bde83

08005f28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005f30:	4b78      	ldr	r3, [pc, #480]	@ (8006114 <ADC_Init+0x1ec>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	4a77      	ldr	r2, [pc, #476]	@ (8006114 <ADC_Init+0x1ec>)
 8005f36:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005f3a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005f3c:	4b75      	ldr	r3, [pc, #468]	@ (8006114 <ADC_Init+0x1ec>)
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	4973      	ldr	r1, [pc, #460]	@ (8006114 <ADC_Init+0x1ec>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6859      	ldr	r1, [r3, #4]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	021a      	lsls	r2, r3, #8
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005f7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6859      	ldr	r1, [r3, #4]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689a      	ldr	r2, [r3, #8]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6899      	ldr	r1, [r3, #8]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb6:	4a58      	ldr	r2, [pc, #352]	@ (8006118 <ADC_Init+0x1f0>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d022      	beq.n	8006002 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689a      	ldr	r2, [r3, #8]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005fca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6899      	ldr	r1, [r3, #8]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005fec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6899      	ldr	r1, [r3, #8]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	609a      	str	r2, [r3, #8]
 8006000:	e00f      	b.n	8006022 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006010:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006020:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0202 	bic.w	r2, r2, #2
 8006030:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6899      	ldr	r1, [r3, #8]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	005a      	lsls	r2, r3, #1
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	430a      	orrs	r2, r1
 8006044:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 3020 	ldrb.w	r3, [r3, #32]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d01b      	beq.n	8006088 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800605e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800606e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6859      	ldr	r1, [r3, #4]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607a:	3b01      	subs	r3, #1
 800607c:	035a      	lsls	r2, r3, #13
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	605a      	str	r2, [r3, #4]
 8006086:	e007      	b.n	8006098 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006096:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80060a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	051a      	lsls	r2, r3, #20
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80060cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6899      	ldr	r1, [r3, #8]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80060da:	025a      	lsls	r2, r3, #9
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689a      	ldr	r2, [r3, #8]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6899      	ldr	r1, [r3, #8]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	029a      	lsls	r2, r3, #10
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	609a      	str	r2, [r3, #8]
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	40012300 	.word	0x40012300
 8006118:	0f000001 	.word	0x0f000001

0800611c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f003 0307 	and.w	r3, r3, #7
 800612a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800612c:	4b0b      	ldr	r3, [pc, #44]	@ (800615c <__NVIC_SetPriorityGrouping+0x40>)
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006138:	4013      	ands	r3, r2
 800613a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006144:	4b06      	ldr	r3, [pc, #24]	@ (8006160 <__NVIC_SetPriorityGrouping+0x44>)
 8006146:	4313      	orrs	r3, r2
 8006148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800614a:	4a04      	ldr	r2, [pc, #16]	@ (800615c <__NVIC_SetPriorityGrouping+0x40>)
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	60d3      	str	r3, [r2, #12]
}
 8006150:	bf00      	nop
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	e000ed00 	.word	0xe000ed00
 8006160:	05fa0000 	.word	0x05fa0000

08006164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006164:	b480      	push	{r7}
 8006166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006168:	4b04      	ldr	r3, [pc, #16]	@ (800617c <__NVIC_GetPriorityGrouping+0x18>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	0a1b      	lsrs	r3, r3, #8
 800616e:	f003 0307 	and.w	r3, r3, #7
}
 8006172:	4618      	mov	r0, r3
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	e000ed00 	.word	0xe000ed00

08006180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	4603      	mov	r3, r0
 8006188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800618a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800618e:	2b00      	cmp	r3, #0
 8006190:	db0b      	blt.n	80061aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006192:	79fb      	ldrb	r3, [r7, #7]
 8006194:	f003 021f 	and.w	r2, r3, #31
 8006198:	4907      	ldr	r1, [pc, #28]	@ (80061b8 <__NVIC_EnableIRQ+0x38>)
 800619a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800619e:	095b      	lsrs	r3, r3, #5
 80061a0:	2001      	movs	r0, #1
 80061a2:	fa00 f202 	lsl.w	r2, r0, r2
 80061a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80061aa:	bf00      	nop
 80061ac:	370c      	adds	r7, #12
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	e000e100 	.word	0xe000e100

080061bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	4603      	mov	r3, r0
 80061c4:	6039      	str	r1, [r7, #0]
 80061c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	db0a      	blt.n	80061e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	490c      	ldr	r1, [pc, #48]	@ (8006208 <__NVIC_SetPriority+0x4c>)
 80061d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061da:	0112      	lsls	r2, r2, #4
 80061dc:	b2d2      	uxtb	r2, r2
 80061de:	440b      	add	r3, r1
 80061e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80061e4:	e00a      	b.n	80061fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	4908      	ldr	r1, [pc, #32]	@ (800620c <__NVIC_SetPriority+0x50>)
 80061ec:	79fb      	ldrb	r3, [r7, #7]
 80061ee:	f003 030f 	and.w	r3, r3, #15
 80061f2:	3b04      	subs	r3, #4
 80061f4:	0112      	lsls	r2, r2, #4
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	440b      	add	r3, r1
 80061fa:	761a      	strb	r2, [r3, #24]
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	e000e100 	.word	0xe000e100
 800620c:	e000ed00 	.word	0xe000ed00

08006210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006210:	b480      	push	{r7}
 8006212:	b089      	sub	sp, #36	@ 0x24
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f003 0307 	and.w	r3, r3, #7
 8006222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	f1c3 0307 	rsb	r3, r3, #7
 800622a:	2b04      	cmp	r3, #4
 800622c:	bf28      	it	cs
 800622e:	2304      	movcs	r3, #4
 8006230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	3304      	adds	r3, #4
 8006236:	2b06      	cmp	r3, #6
 8006238:	d902      	bls.n	8006240 <NVIC_EncodePriority+0x30>
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	3b03      	subs	r3, #3
 800623e:	e000      	b.n	8006242 <NVIC_EncodePriority+0x32>
 8006240:	2300      	movs	r3, #0
 8006242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006244:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	fa02 f303 	lsl.w	r3, r2, r3
 800624e:	43da      	mvns	r2, r3
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	401a      	ands	r2, r3
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006258:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	fa01 f303 	lsl.w	r3, r1, r3
 8006262:	43d9      	mvns	r1, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006268:	4313      	orrs	r3, r2
         );
}
 800626a:	4618      	mov	r0, r3
 800626c:	3724      	adds	r7, #36	@ 0x24
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b082      	sub	sp, #8
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7ff ff4c 	bl	800611c <__NVIC_SetPriorityGrouping>
}
 8006284:	bf00      	nop
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	4603      	mov	r3, r0
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
 8006298:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800629a:	2300      	movs	r3, #0
 800629c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800629e:	f7ff ff61 	bl	8006164 <__NVIC_GetPriorityGrouping>
 80062a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	68b9      	ldr	r1, [r7, #8]
 80062a8:	6978      	ldr	r0, [r7, #20]
 80062aa:	f7ff ffb1 	bl	8006210 <NVIC_EncodePriority>
 80062ae:	4602      	mov	r2, r0
 80062b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062b4:	4611      	mov	r1, r2
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7ff ff80 	bl	80061bc <__NVIC_SetPriority>
}
 80062bc:	bf00      	nop
 80062be:	3718      	adds	r7, #24
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4603      	mov	r3, r0
 80062cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80062ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7ff ff54 	bl	8006180 <__NVIC_EnableIRQ>
}
 80062d8:	bf00      	nop
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80062ec:	f7ff faec 	bl	80058c8 <HAL_GetTick>
 80062f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d101      	bne.n	80062fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e099      	b.n	8006430 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0201 	bic.w	r2, r2, #1
 800631a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800631c:	e00f      	b.n	800633e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800631e:	f7ff fad3 	bl	80058c8 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b05      	cmp	r3, #5
 800632a:	d908      	bls.n	800633e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2220      	movs	r2, #32
 8006330:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2203      	movs	r2, #3
 8006336:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e078      	b.n	8006430 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1e8      	bne.n	800631e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	4b38      	ldr	r3, [pc, #224]	@ (8006438 <HAL_DMA_Init+0x158>)
 8006358:	4013      	ands	r3, r2
 800635a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800636a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006376:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006382:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4313      	orrs	r3, r2
 800638e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006394:	2b04      	cmp	r3, #4
 8006396:	d107      	bne.n	80063a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a0:	4313      	orrs	r3, r2
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f023 0307 	bic.w	r3, r3, #7
 80063be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ce:	2b04      	cmp	r3, #4
 80063d0:	d117      	bne.n	8006402 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	4313      	orrs	r3, r2
 80063da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00e      	beq.n	8006402 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fae1 	bl	80069ac <DMA_CheckFifoParam>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d008      	beq.n	8006402 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2240      	movs	r2, #64	@ 0x40
 80063f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80063fe:	2301      	movs	r3, #1
 8006400:	e016      	b.n	8006430 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fa98 	bl	8006940 <DMA_CalcBaseAndBitshift>
 8006410:	4603      	mov	r3, r0
 8006412:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006418:	223f      	movs	r2, #63	@ 0x3f
 800641a:	409a      	lsls	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	f010803f 	.word	0xf010803f

0800643c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e050      	b.n	80064f0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b02      	cmp	r3, #2
 8006458:	d101      	bne.n	800645e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800645a:	2302      	movs	r3, #2
 800645c:	e048      	b.n	80064f0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0201 	bic.w	r2, r2, #1
 800646c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2200      	movs	r2, #0
 8006474:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2200      	movs	r2, #0
 800647c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2200      	movs	r2, #0
 8006484:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2200      	movs	r2, #0
 800648c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2200      	movs	r2, #0
 8006494:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2221      	movs	r2, #33	@ 0x21
 800649c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fa4e 	bl	8006940 <DMA_CalcBaseAndBitshift>
 80064a4:	4603      	mov	r3, r0
 80064a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064ac:	223f      	movs	r2, #63	@ 0x3f
 80064ae:	409a      	lsls	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800650e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006516:	2b01      	cmp	r3, #1
 8006518:	d101      	bne.n	800651e <HAL_DMA_Start_IT+0x26>
 800651a:	2302      	movs	r3, #2
 800651c:	e048      	b.n	80065b0 <HAL_DMA_Start_IT+0xb8>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b01      	cmp	r3, #1
 8006530:	d137      	bne.n	80065a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2202      	movs	r2, #2
 8006536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	68b9      	ldr	r1, [r7, #8]
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 f9cc 	bl	80068e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006550:	223f      	movs	r2, #63	@ 0x3f
 8006552:	409a      	lsls	r2, r3
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f042 0216 	orr.w	r2, r2, #22
 8006566:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	695a      	ldr	r2, [r3, #20]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006576:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657c:	2b00      	cmp	r3, #0
 800657e:	d007      	beq.n	8006590 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f042 0208 	orr.w	r2, r2, #8
 800658e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f042 0201 	orr.w	r2, r2, #1
 800659e:	601a      	str	r2, [r3, #0]
 80065a0:	e005      	b.n	80065ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80065aa:	2302      	movs	r3, #2
 80065ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80065ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3718      	adds	r7, #24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80065c4:	4b8e      	ldr	r3, [pc, #568]	@ (8006800 <HAL_DMA_IRQHandler+0x248>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a8e      	ldr	r2, [pc, #568]	@ (8006804 <HAL_DMA_IRQHandler+0x24c>)
 80065ca:	fba2 2303 	umull	r2, r3, r2, r3
 80065ce:	0a9b      	lsrs	r3, r3, #10
 80065d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065e2:	2208      	movs	r2, #8
 80065e4:	409a      	lsls	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4013      	ands	r3, r2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d01a      	beq.n	8006624 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0304 	and.w	r3, r3, #4
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d013      	beq.n	8006624 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0204 	bic.w	r2, r2, #4
 800660a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006610:	2208      	movs	r2, #8
 8006612:	409a      	lsls	r2, r3
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800661c:	f043 0201 	orr.w	r2, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006628:	2201      	movs	r2, #1
 800662a:	409a      	lsls	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4013      	ands	r3, r2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d012      	beq.n	800665a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00b      	beq.n	800665a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006646:	2201      	movs	r2, #1
 8006648:	409a      	lsls	r2, r3
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006652:	f043 0202 	orr.w	r2, r3, #2
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800665e:	2204      	movs	r2, #4
 8006660:	409a      	lsls	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4013      	ands	r3, r2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d012      	beq.n	8006690 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00b      	beq.n	8006690 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800667c:	2204      	movs	r2, #4
 800667e:	409a      	lsls	r2, r3
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006688:	f043 0204 	orr.w	r2, r3, #4
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006694:	2210      	movs	r2, #16
 8006696:	409a      	lsls	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4013      	ands	r3, r2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d043      	beq.n	8006728 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0308 	and.w	r3, r3, #8
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d03c      	beq.n	8006728 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066b2:	2210      	movs	r2, #16
 80066b4:	409a      	lsls	r2, r3
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d018      	beq.n	80066fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d108      	bne.n	80066e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d024      	beq.n	8006728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	4798      	blx	r3
 80066e6:	e01f      	b.n	8006728 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d01b      	beq.n	8006728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	4798      	blx	r3
 80066f8:	e016      	b.n	8006728 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006704:	2b00      	cmp	r3, #0
 8006706:	d107      	bne.n	8006718 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0208 	bic.w	r2, r2, #8
 8006716:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671c:	2b00      	cmp	r3, #0
 800671e:	d003      	beq.n	8006728 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800672c:	2220      	movs	r2, #32
 800672e:	409a      	lsls	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4013      	ands	r3, r2
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 808f 	beq.w	8006858 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0310 	and.w	r3, r3, #16
 8006744:	2b00      	cmp	r3, #0
 8006746:	f000 8087 	beq.w	8006858 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800674e:	2220      	movs	r2, #32
 8006750:	409a      	lsls	r2, r3
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b05      	cmp	r3, #5
 8006760:	d136      	bne.n	80067d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f022 0216 	bic.w	r2, r2, #22
 8006770:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	695a      	ldr	r2, [r3, #20]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006780:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006786:	2b00      	cmp	r3, #0
 8006788:	d103      	bne.n	8006792 <HAL_DMA_IRQHandler+0x1da>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800678e:	2b00      	cmp	r3, #0
 8006790:	d007      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 0208 	bic.w	r2, r2, #8
 80067a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067a6:	223f      	movs	r2, #63	@ 0x3f
 80067a8:	409a      	lsls	r2, r3
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d07e      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	4798      	blx	r3
        }
        return;
 80067ce:	e079      	b.n	80068c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d01d      	beq.n	800681a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10d      	bne.n	8006808 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d031      	beq.n	8006858 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	4798      	blx	r3
 80067fc:	e02c      	b.n	8006858 <HAL_DMA_IRQHandler+0x2a0>
 80067fe:	bf00      	nop
 8006800:	20000048 	.word	0x20000048
 8006804:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800680c:	2b00      	cmp	r3, #0
 800680e:	d023      	beq.n	8006858 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	4798      	blx	r3
 8006818:	e01e      	b.n	8006858 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10f      	bne.n	8006848 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 0210 	bic.w	r2, r2, #16
 8006836:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800684c:	2b00      	cmp	r3, #0
 800684e:	d003      	beq.n	8006858 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800685c:	2b00      	cmp	r3, #0
 800685e:	d032      	beq.n	80068c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006864:	f003 0301 	and.w	r3, r3, #1
 8006868:	2b00      	cmp	r3, #0
 800686a:	d022      	beq.n	80068b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2205      	movs	r2, #5
 8006870:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f022 0201 	bic.w	r2, r2, #1
 8006882:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	3301      	adds	r3, #1
 8006888:	60bb      	str	r3, [r7, #8]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	429a      	cmp	r2, r3
 800688e:	d307      	bcc.n	80068a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1f2      	bne.n	8006884 <HAL_DMA_IRQHandler+0x2cc>
 800689e:	e000      	b.n	80068a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80068a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d005      	beq.n	80068c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	4798      	blx	r3
 80068c2:	e000      	b.n	80068c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80068c4:	bf00      	nop
    }
  }
}
 80068c6:	3718      	adds	r7, #24
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80068d8:	4618      	mov	r0, r3
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
 80068f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006900:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	2b40      	cmp	r3, #64	@ 0x40
 8006910:	d108      	bne.n	8006924 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006922:	e007      	b.n	8006934 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	60da      	str	r2, [r3, #12]
}
 8006934:	bf00      	nop
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	b2db      	uxtb	r3, r3
 800694e:	3b10      	subs	r3, #16
 8006950:	4a13      	ldr	r2, [pc, #76]	@ (80069a0 <DMA_CalcBaseAndBitshift+0x60>)
 8006952:	fba2 2303 	umull	r2, r3, r2, r3
 8006956:	091b      	lsrs	r3, r3, #4
 8006958:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800695a:	4a12      	ldr	r2, [pc, #72]	@ (80069a4 <DMA_CalcBaseAndBitshift+0x64>)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4413      	add	r3, r2
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2b03      	cmp	r3, #3
 800696c:	d908      	bls.n	8006980 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	461a      	mov	r2, r3
 8006974:	4b0c      	ldr	r3, [pc, #48]	@ (80069a8 <DMA_CalcBaseAndBitshift+0x68>)
 8006976:	4013      	ands	r3, r2
 8006978:	1d1a      	adds	r2, r3, #4
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	659a      	str	r2, [r3, #88]	@ 0x58
 800697e:	e006      	b.n	800698e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	461a      	mov	r2, r3
 8006986:	4b08      	ldr	r3, [pc, #32]	@ (80069a8 <DMA_CalcBaseAndBitshift+0x68>)
 8006988:	4013      	ands	r3, r2
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006992:	4618      	mov	r0, r3
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	aaaaaaab 	.word	0xaaaaaaab
 80069a4:	0801f7cc 	.word	0x0801f7cc
 80069a8:	fffffc00 	.word	0xfffffc00

080069ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069b4:	2300      	movs	r3, #0
 80069b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d11f      	bne.n	8006a06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2b03      	cmp	r3, #3
 80069ca:	d856      	bhi.n	8006a7a <DMA_CheckFifoParam+0xce>
 80069cc:	a201      	add	r2, pc, #4	@ (adr r2, 80069d4 <DMA_CheckFifoParam+0x28>)
 80069ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d2:	bf00      	nop
 80069d4:	080069e5 	.word	0x080069e5
 80069d8:	080069f7 	.word	0x080069f7
 80069dc:	080069e5 	.word	0x080069e5
 80069e0:	08006a7b 	.word	0x08006a7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d046      	beq.n	8006a7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069f4:	e043      	b.n	8006a7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80069fe:	d140      	bne.n	8006a82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a04:	e03d      	b.n	8006a82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a0e:	d121      	bne.n	8006a54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2b03      	cmp	r3, #3
 8006a14:	d837      	bhi.n	8006a86 <DMA_CheckFifoParam+0xda>
 8006a16:	a201      	add	r2, pc, #4	@ (adr r2, 8006a1c <DMA_CheckFifoParam+0x70>)
 8006a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1c:	08006a2d 	.word	0x08006a2d
 8006a20:	08006a33 	.word	0x08006a33
 8006a24:	08006a2d 	.word	0x08006a2d
 8006a28:	08006a45 	.word	0x08006a45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a30:	e030      	b.n	8006a94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d025      	beq.n	8006a8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a42:	e022      	b.n	8006a8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a48:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006a4c:	d11f      	bne.n	8006a8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006a52:	e01c      	b.n	8006a8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d903      	bls.n	8006a62 <DMA_CheckFifoParam+0xb6>
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2b03      	cmp	r3, #3
 8006a5e:	d003      	beq.n	8006a68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006a60:	e018      	b.n	8006a94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	73fb      	strb	r3, [r7, #15]
      break;
 8006a66:	e015      	b.n	8006a94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00e      	beq.n	8006a92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	73fb      	strb	r3, [r7, #15]
      break;
 8006a78:	e00b      	b.n	8006a92 <DMA_CheckFifoParam+0xe6>
      break;
 8006a7a:	bf00      	nop
 8006a7c:	e00a      	b.n	8006a94 <DMA_CheckFifoParam+0xe8>
      break;
 8006a7e:	bf00      	nop
 8006a80:	e008      	b.n	8006a94 <DMA_CheckFifoParam+0xe8>
      break;
 8006a82:	bf00      	nop
 8006a84:	e006      	b.n	8006a94 <DMA_CheckFifoParam+0xe8>
      break;
 8006a86:	bf00      	nop
 8006a88:	e004      	b.n	8006a94 <DMA_CheckFifoParam+0xe8>
      break;
 8006a8a:	bf00      	nop
 8006a8c:	e002      	b.n	8006a94 <DMA_CheckFifoParam+0xe8>
      break;   
 8006a8e:	bf00      	nop
 8006a90:	e000      	b.n	8006a94 <DMA_CheckFifoParam+0xe8>
      break;
 8006a92:	bf00      	nop
    }
  } 
  
  return status; 
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop

08006aa4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e039      	b.n	8006b2a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d106      	bne.n	8006ad0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7fa fad0 	bl	8001070 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006af4:	f023 0107 	bic.w	r1, r3, #7
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8006b34 <HAL_DMA2D_Init+0x90>)
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	68d1      	ldr	r1, [r2, #12]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	6812      	ldr	r2, [r2, #0]
 8006b16:	430b      	orrs	r3, r1
 8006b18:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	ffffc000 	.word	0xffffc000

08006b38 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af02      	add	r7, sp, #8
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
 8006b44:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d101      	bne.n	8006b54 <HAL_DMA2D_Start+0x1c>
 8006b50:	2302      	movs	r3, #2
 8006b52:	e018      	b.n	8006b86 <HAL_DMA2D_Start+0x4e>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	68b9      	ldr	r1, [r7, #8]
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f000 fa98 	bl	80070a4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 0201 	orr.w	r2, r2, #1
 8006b82:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b086      	sub	sp, #24
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d056      	beq.n	8006c58 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006baa:	f7fe fe8d 	bl	80058c8 <HAL_GetTick>
 8006bae:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006bb0:	e04b      	b.n	8006c4a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d023      	beq.n	8006c0c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f003 0320 	and.w	r3, r3, #32
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d005      	beq.n	8006bda <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd2:	f043 0202 	orr.w	r2, r3, #2
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d005      	beq.n	8006bf0 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006be8:	f043 0201 	orr.w	r2, r3, #1
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2221      	movs	r2, #33	@ 0x21
 8006bf6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2204      	movs	r2, #4
 8006bfc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e0a5      	b.n	8006d58 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c12:	d01a      	beq.n	8006c4a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006c14:	f7fe fe58 	bl	80058c8 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d302      	bcc.n	8006c2a <HAL_DMA2D_PollForTransfer+0x9c>
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10f      	bne.n	8006c4a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c2e:	f043 0220 	orr.w	r2, r3, #32
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2203      	movs	r2, #3
 8006c3a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e086      	b.n	8006d58 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f003 0302 	and.w	r3, r3, #2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0ac      	beq.n	8006bb2 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	f003 0320 	and.w	r3, r3, #32
 8006c62:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c6a:	f003 0320 	and.w	r3, r3, #32
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d061      	beq.n	8006d3e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c7a:	f7fe fe25 	bl	80058c8 <HAL_GetTick>
 8006c7e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006c80:	e056      	b.n	8006d30 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d02e      	beq.n	8006cf2 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f003 0308 	and.w	r3, r3, #8
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d005      	beq.n	8006caa <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ca2:	f043 0204 	orr.w	r2, r3, #4
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f003 0320 	and.w	r3, r3, #32
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d005      	beq.n	8006cc0 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cb8:	f043 0202 	orr.w	r2, r3, #2
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d005      	beq.n	8006cd6 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cce:	f043 0201 	orr.w	r2, r3, #1
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2229      	movs	r2, #41	@ 0x29
 8006cdc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2204      	movs	r2, #4
 8006ce2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e032      	b.n	8006d58 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006cf8:	d01a      	beq.n	8006d30 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006cfa:	f7fe fde5 	bl	80058c8 <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d302      	bcc.n	8006d10 <HAL_DMA2D_PollForTransfer+0x182>
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10f      	bne.n	8006d30 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d14:	f043 0220 	orr.w	r2, r3, #32
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2203      	movs	r2, #3
 8006d20:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e013      	b.n	8006d58 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f003 0310 	and.w	r3, r3, #16
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d0a1      	beq.n	8006c82 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2212      	movs	r2, #18
 8006d44:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3718      	adds	r7, #24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d026      	beq.n	8006dd0 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d021      	beq.n	8006dd0 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006d9a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006da0:	f043 0201 	orr.w	r2, r3, #1
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2201      	movs	r2, #1
 8006dae:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2204      	movs	r2, #4
 8006db4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d003      	beq.n	8006dd0 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	695b      	ldr	r3, [r3, #20]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f003 0320 	and.w	r3, r3, #32
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d026      	beq.n	8006e28 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d021      	beq.n	8006e28 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006df2:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2220      	movs	r2, #32
 8006dfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e00:	f043 0202 	orr.w	r2, r3, #2
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2204      	movs	r2, #4
 8006e0c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d003      	beq.n	8006e28 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f003 0308 	and.w	r3, r3, #8
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d026      	beq.n	8006e80 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d021      	beq.n	8006e80 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e4a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2208      	movs	r2, #8
 8006e52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e58:	f043 0204 	orr.w	r2, r3, #4
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2204      	movs	r2, #4
 8006e64:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d003      	beq.n	8006e80 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	695b      	ldr	r3, [r3, #20]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f003 0304 	and.w	r3, r3, #4
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d013      	beq.n	8006eb2 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00e      	beq.n	8006eb2 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ea2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2204      	movs	r2, #4
 8006eaa:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f853 	bl	8006f58 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d024      	beq.n	8006f06 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d01f      	beq.n	8006f06 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006ed4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2202      	movs	r2, #2
 8006edc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f003 0310 	and.w	r3, r3, #16
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d01f      	beq.n	8006f50 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d01a      	beq.n	8006f50 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006f28:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2210      	movs	r2, #16
 8006f30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f80e 	bl	8006f6c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006f50:	bf00      	nop
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b087      	sub	sp, #28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d101      	bne.n	8006fa0 <HAL_DMA2D_ConfigLayer+0x20>
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	e079      	b.n	8007094 <HAL_DMA2D_ConfigLayer+0x114>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2202      	movs	r2, #2
 8006fac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	011b      	lsls	r3, r3, #4
 8006fb4:	3318      	adds	r3, #24
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	4413      	add	r3, r2
 8006fba:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	041b      	lsls	r3, r3, #16
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006fca:	4b35      	ldr	r3, [pc, #212]	@ (80070a0 <HAL_DMA2D_ConfigLayer+0x120>)
 8006fcc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	2b0a      	cmp	r3, #10
 8006fd4:	d003      	beq.n	8006fde <HAL_DMA2D_ConfigLayer+0x5e>
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	2b09      	cmp	r3, #9
 8006fdc:	d107      	bne.n	8006fee <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	617b      	str	r3, [r7, #20]
 8006fec:	e005      	b.n	8006ffa <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	061b      	lsls	r3, r3, #24
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d120      	bne.n	8007042 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	43db      	mvns	r3, r3
 800700a:	ea02 0103 	and.w	r1, r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	430a      	orrs	r2, r1
 8007016:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	6812      	ldr	r2, [r2, #0]
 8007020:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	2b0a      	cmp	r3, #10
 8007028:	d003      	beq.n	8007032 <HAL_DMA2D_ConfigLayer+0xb2>
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	2b09      	cmp	r3, #9
 8007030:	d127      	bne.n	8007082 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	68da      	ldr	r2, [r3, #12]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800703e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007040:	e01f      	b.n	8007082 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	69da      	ldr	r2, [r3, #28]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	43db      	mvns	r3, r3
 800704c:	ea02 0103 	and.w	r1, r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	697a      	ldr	r2, [r7, #20]
 8007056:	430a      	orrs	r2, r1
 8007058:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	6812      	ldr	r2, [r2, #0]
 8007062:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	2b0a      	cmp	r3, #10
 800706a:	d003      	beq.n	8007074 <HAL_DMA2D_ConfigLayer+0xf4>
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	2b09      	cmp	r3, #9
 8007072:	d106      	bne.n	8007082 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	68da      	ldr	r2, [r3, #12]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8007080:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	371c      	adds	r7, #28
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	ff03000f 	.word	0xff03000f

080070a4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b08b      	sub	sp, #44	@ 0x2c
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
 80070b0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070b8:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	041a      	lsls	r2, r3, #16
 80070c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c2:	431a      	orrs	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	430a      	orrs	r2, r1
 80070ca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80070dc:	d174      	bne.n	80071c8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80070e4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80070ec:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80070f4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d108      	bne.n	8007116 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007104:	69ba      	ldr	r2, [r7, #24]
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	431a      	orrs	r2, r3
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	4313      	orrs	r3, r2
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	4313      	orrs	r3, r2
 8007112:	627b      	str	r3, [r7, #36]	@ 0x24
 8007114:	e053      	b.n	80071be <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	2b01      	cmp	r3, #1
 800711c:	d106      	bne.n	800712c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	4313      	orrs	r3, r2
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	4313      	orrs	r3, r2
 8007128:	627b      	str	r3, [r7, #36]	@ 0x24
 800712a:	e048      	b.n	80071be <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	2b02      	cmp	r3, #2
 8007132:	d111      	bne.n	8007158 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	0cdb      	lsrs	r3, r3, #19
 8007138:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	0a9b      	lsrs	r3, r3, #10
 800713e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	08db      	lsrs	r3, r3, #3
 8007144:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	02db      	lsls	r3, r3, #11
 800714e:	4313      	orrs	r3, r2
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	4313      	orrs	r3, r2
 8007154:	627b      	str	r3, [r7, #36]	@ 0x24
 8007156:	e032      	b.n	80071be <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	2b03      	cmp	r3, #3
 800715e:	d117      	bne.n	8007190 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007160:	6a3b      	ldr	r3, [r7, #32]
 8007162:	0fdb      	lsrs	r3, r3, #31
 8007164:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	0cdb      	lsrs	r3, r3, #19
 800716a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	0adb      	lsrs	r3, r3, #11
 8007170:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	08db      	lsrs	r3, r3, #3
 8007176:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	029b      	lsls	r3, r3, #10
 8007180:	431a      	orrs	r2, r3
 8007182:	6a3b      	ldr	r3, [r7, #32]
 8007184:	03db      	lsls	r3, r3, #15
 8007186:	4313      	orrs	r3, r2
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	4313      	orrs	r3, r2
 800718c:	627b      	str	r3, [r7, #36]	@ 0x24
 800718e:	e016      	b.n	80071be <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007190:	6a3b      	ldr	r3, [r7, #32]
 8007192:	0f1b      	lsrs	r3, r3, #28
 8007194:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	0d1b      	lsrs	r3, r3, #20
 800719a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	0b1b      	lsrs	r3, r3, #12
 80071a0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	091b      	lsrs	r3, r3, #4
 80071a6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	011a      	lsls	r2, r3, #4
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	021b      	lsls	r3, r3, #8
 80071b0:	431a      	orrs	r2, r3
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	031b      	lsls	r3, r3, #12
 80071b6:	4313      	orrs	r3, r2
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071c4:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80071c6:	e003      	b.n	80071d0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	60da      	str	r2, [r3, #12]
}
 80071d0:	bf00      	nop
 80071d2:	372c      	adds	r7, #44	@ 0x2c
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80071dc:	b480      	push	{r7}
 80071de:	b089      	sub	sp, #36	@ 0x24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80071e6:	2300      	movs	r3, #0
 80071e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80071ea:	2300      	movs	r3, #0
 80071ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80071ee:	2300      	movs	r3, #0
 80071f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80071f2:	2300      	movs	r3, #0
 80071f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80071f6:	2300      	movs	r3, #0
 80071f8:	61fb      	str	r3, [r7, #28]
 80071fa:	e175      	b.n	80074e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80071fc:	2201      	movs	r2, #1
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	fa02 f303 	lsl.w	r3, r2, r3
 8007204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	4013      	ands	r3, r2
 800720e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	429a      	cmp	r2, r3
 8007216:	f040 8164 	bne.w	80074e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f003 0303 	and.w	r3, r3, #3
 8007222:	2b01      	cmp	r3, #1
 8007224:	d005      	beq.n	8007232 <HAL_GPIO_Init+0x56>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f003 0303 	and.w	r3, r3, #3
 800722e:	2b02      	cmp	r3, #2
 8007230:	d130      	bne.n	8007294 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	005b      	lsls	r3, r3, #1
 800723c:	2203      	movs	r2, #3
 800723e:	fa02 f303 	lsl.w	r3, r2, r3
 8007242:	43db      	mvns	r3, r3
 8007244:	69ba      	ldr	r2, [r7, #24]
 8007246:	4013      	ands	r3, r2
 8007248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	68da      	ldr	r2, [r3, #12]
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	005b      	lsls	r3, r3, #1
 8007252:	fa02 f303 	lsl.w	r3, r2, r3
 8007256:	69ba      	ldr	r2, [r7, #24]
 8007258:	4313      	orrs	r3, r2
 800725a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	69ba      	ldr	r2, [r7, #24]
 8007260:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007268:	2201      	movs	r2, #1
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	fa02 f303 	lsl.w	r3, r2, r3
 8007270:	43db      	mvns	r3, r3
 8007272:	69ba      	ldr	r2, [r7, #24]
 8007274:	4013      	ands	r3, r2
 8007276:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	091b      	lsrs	r3, r3, #4
 800727e:	f003 0201 	and.w	r2, r3, #1
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	fa02 f303 	lsl.w	r3, r2, r3
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	4313      	orrs	r3, r2
 800728c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	69ba      	ldr	r2, [r7, #24]
 8007292:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f003 0303 	and.w	r3, r3, #3
 800729c:	2b03      	cmp	r3, #3
 800729e:	d017      	beq.n	80072d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	005b      	lsls	r3, r3, #1
 80072aa:	2203      	movs	r2, #3
 80072ac:	fa02 f303 	lsl.w	r3, r2, r3
 80072b0:	43db      	mvns	r3, r3
 80072b2:	69ba      	ldr	r2, [r7, #24]
 80072b4:	4013      	ands	r3, r2
 80072b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	689a      	ldr	r2, [r3, #8]
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	005b      	lsls	r3, r3, #1
 80072c0:	fa02 f303 	lsl.w	r3, r2, r3
 80072c4:	69ba      	ldr	r2, [r7, #24]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	69ba      	ldr	r2, [r7, #24]
 80072ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f003 0303 	and.w	r3, r3, #3
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d123      	bne.n	8007324 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	08da      	lsrs	r2, r3, #3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3208      	adds	r2, #8
 80072e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	f003 0307 	and.w	r3, r3, #7
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	220f      	movs	r2, #15
 80072f4:	fa02 f303 	lsl.w	r3, r2, r3
 80072f8:	43db      	mvns	r3, r3
 80072fa:	69ba      	ldr	r2, [r7, #24]
 80072fc:	4013      	ands	r3, r2
 80072fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	691a      	ldr	r2, [r3, #16]
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	f003 0307 	and.w	r3, r3, #7
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	fa02 f303 	lsl.w	r3, r2, r3
 8007310:	69ba      	ldr	r2, [r7, #24]
 8007312:	4313      	orrs	r3, r2
 8007314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	08da      	lsrs	r2, r3, #3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	3208      	adds	r2, #8
 800731e:	69b9      	ldr	r1, [r7, #24]
 8007320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	005b      	lsls	r3, r3, #1
 800732e:	2203      	movs	r2, #3
 8007330:	fa02 f303 	lsl.w	r3, r2, r3
 8007334:	43db      	mvns	r3, r3
 8007336:	69ba      	ldr	r2, [r7, #24]
 8007338:	4013      	ands	r3, r2
 800733a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f003 0203 	and.w	r2, r3, #3
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	005b      	lsls	r3, r3, #1
 8007348:	fa02 f303 	lsl.w	r3, r2, r3
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	4313      	orrs	r3, r2
 8007350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 80be 	beq.w	80074e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007366:	4b66      	ldr	r3, [pc, #408]	@ (8007500 <HAL_GPIO_Init+0x324>)
 8007368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800736a:	4a65      	ldr	r2, [pc, #404]	@ (8007500 <HAL_GPIO_Init+0x324>)
 800736c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007370:	6453      	str	r3, [r2, #68]	@ 0x44
 8007372:	4b63      	ldr	r3, [pc, #396]	@ (8007500 <HAL_GPIO_Init+0x324>)
 8007374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007376:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800737e:	4a61      	ldr	r2, [pc, #388]	@ (8007504 <HAL_GPIO_Init+0x328>)
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	089b      	lsrs	r3, r3, #2
 8007384:	3302      	adds	r3, #2
 8007386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800738a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	f003 0303 	and.w	r3, r3, #3
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	220f      	movs	r2, #15
 8007396:	fa02 f303 	lsl.w	r3, r2, r3
 800739a:	43db      	mvns	r3, r3
 800739c:	69ba      	ldr	r2, [r7, #24]
 800739e:	4013      	ands	r3, r2
 80073a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a58      	ldr	r2, [pc, #352]	@ (8007508 <HAL_GPIO_Init+0x32c>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d037      	beq.n	800741a <HAL_GPIO_Init+0x23e>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a57      	ldr	r2, [pc, #348]	@ (800750c <HAL_GPIO_Init+0x330>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d031      	beq.n	8007416 <HAL_GPIO_Init+0x23a>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a56      	ldr	r2, [pc, #344]	@ (8007510 <HAL_GPIO_Init+0x334>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d02b      	beq.n	8007412 <HAL_GPIO_Init+0x236>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a55      	ldr	r2, [pc, #340]	@ (8007514 <HAL_GPIO_Init+0x338>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d025      	beq.n	800740e <HAL_GPIO_Init+0x232>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a54      	ldr	r2, [pc, #336]	@ (8007518 <HAL_GPIO_Init+0x33c>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d01f      	beq.n	800740a <HAL_GPIO_Init+0x22e>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a53      	ldr	r2, [pc, #332]	@ (800751c <HAL_GPIO_Init+0x340>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d019      	beq.n	8007406 <HAL_GPIO_Init+0x22a>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a52      	ldr	r2, [pc, #328]	@ (8007520 <HAL_GPIO_Init+0x344>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d013      	beq.n	8007402 <HAL_GPIO_Init+0x226>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a51      	ldr	r2, [pc, #324]	@ (8007524 <HAL_GPIO_Init+0x348>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d00d      	beq.n	80073fe <HAL_GPIO_Init+0x222>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a50      	ldr	r2, [pc, #320]	@ (8007528 <HAL_GPIO_Init+0x34c>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d007      	beq.n	80073fa <HAL_GPIO_Init+0x21e>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a4f      	ldr	r2, [pc, #316]	@ (800752c <HAL_GPIO_Init+0x350>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d101      	bne.n	80073f6 <HAL_GPIO_Init+0x21a>
 80073f2:	2309      	movs	r3, #9
 80073f4:	e012      	b.n	800741c <HAL_GPIO_Init+0x240>
 80073f6:	230a      	movs	r3, #10
 80073f8:	e010      	b.n	800741c <HAL_GPIO_Init+0x240>
 80073fa:	2308      	movs	r3, #8
 80073fc:	e00e      	b.n	800741c <HAL_GPIO_Init+0x240>
 80073fe:	2307      	movs	r3, #7
 8007400:	e00c      	b.n	800741c <HAL_GPIO_Init+0x240>
 8007402:	2306      	movs	r3, #6
 8007404:	e00a      	b.n	800741c <HAL_GPIO_Init+0x240>
 8007406:	2305      	movs	r3, #5
 8007408:	e008      	b.n	800741c <HAL_GPIO_Init+0x240>
 800740a:	2304      	movs	r3, #4
 800740c:	e006      	b.n	800741c <HAL_GPIO_Init+0x240>
 800740e:	2303      	movs	r3, #3
 8007410:	e004      	b.n	800741c <HAL_GPIO_Init+0x240>
 8007412:	2302      	movs	r3, #2
 8007414:	e002      	b.n	800741c <HAL_GPIO_Init+0x240>
 8007416:	2301      	movs	r3, #1
 8007418:	e000      	b.n	800741c <HAL_GPIO_Init+0x240>
 800741a:	2300      	movs	r3, #0
 800741c:	69fa      	ldr	r2, [r7, #28]
 800741e:	f002 0203 	and.w	r2, r2, #3
 8007422:	0092      	lsls	r2, r2, #2
 8007424:	4093      	lsls	r3, r2
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	4313      	orrs	r3, r2
 800742a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800742c:	4935      	ldr	r1, [pc, #212]	@ (8007504 <HAL_GPIO_Init+0x328>)
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	089b      	lsrs	r3, r3, #2
 8007432:	3302      	adds	r3, #2
 8007434:	69ba      	ldr	r2, [r7, #24]
 8007436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800743a:	4b3d      	ldr	r3, [pc, #244]	@ (8007530 <HAL_GPIO_Init+0x354>)
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	43db      	mvns	r3, r3
 8007444:	69ba      	ldr	r2, [r7, #24]
 8007446:	4013      	ands	r3, r2
 8007448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007456:	69ba      	ldr	r2, [r7, #24]
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	4313      	orrs	r3, r2
 800745c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800745e:	4a34      	ldr	r2, [pc, #208]	@ (8007530 <HAL_GPIO_Init+0x354>)
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007464:	4b32      	ldr	r3, [pc, #200]	@ (8007530 <HAL_GPIO_Init+0x354>)
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	43db      	mvns	r3, r3
 800746e:	69ba      	ldr	r2, [r7, #24]
 8007470:	4013      	ands	r3, r2
 8007472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d003      	beq.n	8007488 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	4313      	orrs	r3, r2
 8007486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007488:	4a29      	ldr	r2, [pc, #164]	@ (8007530 <HAL_GPIO_Init+0x354>)
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800748e:	4b28      	ldr	r3, [pc, #160]	@ (8007530 <HAL_GPIO_Init+0x354>)
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	43db      	mvns	r3, r3
 8007498:	69ba      	ldr	r2, [r7, #24]
 800749a:	4013      	ands	r3, r2
 800749c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80074aa:	69ba      	ldr	r2, [r7, #24]
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80074b2:	4a1f      	ldr	r2, [pc, #124]	@ (8007530 <HAL_GPIO_Init+0x354>)
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80074b8:	4b1d      	ldr	r3, [pc, #116]	@ (8007530 <HAL_GPIO_Init+0x354>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	43db      	mvns	r3, r3
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	4013      	ands	r3, r2
 80074c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d003      	beq.n	80074dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	4313      	orrs	r3, r2
 80074da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80074dc:	4a14      	ldr	r2, [pc, #80]	@ (8007530 <HAL_GPIO_Init+0x354>)
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	3301      	adds	r3, #1
 80074e6:	61fb      	str	r3, [r7, #28]
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	2b0f      	cmp	r3, #15
 80074ec:	f67f ae86 	bls.w	80071fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80074f0:	bf00      	nop
 80074f2:	bf00      	nop
 80074f4:	3724      	adds	r7, #36	@ 0x24
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	40023800 	.word	0x40023800
 8007504:	40013800 	.word	0x40013800
 8007508:	40020000 	.word	0x40020000
 800750c:	40020400 	.word	0x40020400
 8007510:	40020800 	.word	0x40020800
 8007514:	40020c00 	.word	0x40020c00
 8007518:	40021000 	.word	0x40021000
 800751c:	40021400 	.word	0x40021400
 8007520:	40021800 	.word	0x40021800
 8007524:	40021c00 	.word	0x40021c00
 8007528:	40022000 	.word	0x40022000
 800752c:	40022400 	.word	0x40022400
 8007530:	40013c00 	.word	0x40013c00

08007534 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	460b      	mov	r3, r1
 800753e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	691a      	ldr	r2, [r3, #16]
 8007544:	887b      	ldrh	r3, [r7, #2]
 8007546:	4013      	ands	r3, r2
 8007548:	2b00      	cmp	r3, #0
 800754a:	d002      	beq.n	8007552 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800754c:	2301      	movs	r3, #1
 800754e:	73fb      	strb	r3, [r7, #15]
 8007550:	e001      	b.n	8007556 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007552:	2300      	movs	r3, #0
 8007554:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007556:	7bfb      	ldrb	r3, [r7, #15]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	460b      	mov	r3, r1
 800756e:	807b      	strh	r3, [r7, #2]
 8007570:	4613      	mov	r3, r2
 8007572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007574:	787b      	ldrb	r3, [r7, #1]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800757a:	887a      	ldrh	r2, [r7, #2]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007580:	e003      	b.n	800758a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007582:	887b      	ldrh	r3, [r7, #2]
 8007584:	041a      	lsls	r2, r3, #16
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	619a      	str	r2, [r3, #24]
}
 800758a:	bf00      	nop
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
	...

08007598 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d101      	bne.n	80075aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e07f      	b.n	80076aa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d106      	bne.n	80075c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f8a9 	bl	8007716 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2224      	movs	r2, #36	@ 0x24
 80075c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f022 0201 	bic.w	r2, r2, #1
 80075da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80075e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689a      	ldr	r2, [r3, #8]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80075f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d107      	bne.n	8007612 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	689a      	ldr	r2, [r3, #8]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800760e:	609a      	str	r2, [r3, #8]
 8007610:	e006      	b.n	8007620 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	689a      	ldr	r2, [r3, #8]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800761e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	2b02      	cmp	r3, #2
 8007626:	d104      	bne.n	8007632 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007630:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6859      	ldr	r1, [r3, #4]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	4b1d      	ldr	r3, [pc, #116]	@ (80076b4 <HAL_I2C_Init+0x11c>)
 800763e:	430b      	orrs	r3, r1
 8007640:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68da      	ldr	r2, [r3, #12]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007650:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	691a      	ldr	r2, [r3, #16]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	430a      	orrs	r2, r1
 800766a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	69d9      	ldr	r1, [r3, #28]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a1a      	ldr	r2, [r3, #32]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	430a      	orrs	r2, r1
 800767a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f042 0201 	orr.w	r2, r2, #1
 800768a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2220      	movs	r2, #32
 8007696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	02008000 	.word	0x02008000

080076b8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e021      	b.n	800770e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2224      	movs	r2, #36	@ 0x24
 80076ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f022 0201 	bic.w	r2, r2, #1
 80076e0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f821 	bl	800772a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800771e:	bf00      	nop
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8007732:	bf00      	nop
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
	...

08007740 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b088      	sub	sp, #32
 8007744:	af02      	add	r7, sp, #8
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	4608      	mov	r0, r1
 800774a:	4611      	mov	r1, r2
 800774c:	461a      	mov	r2, r3
 800774e:	4603      	mov	r3, r0
 8007750:	817b      	strh	r3, [r7, #10]
 8007752:	460b      	mov	r3, r1
 8007754:	813b      	strh	r3, [r7, #8]
 8007756:	4613      	mov	r3, r2
 8007758:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b20      	cmp	r3, #32
 8007764:	f040 80f9 	bne.w	800795a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007768:	6a3b      	ldr	r3, [r7, #32]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d002      	beq.n	8007774 <HAL_I2C_Mem_Write+0x34>
 800776e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007770:	2b00      	cmp	r3, #0
 8007772:	d105      	bne.n	8007780 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800777a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e0ed      	b.n	800795c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007786:	2b01      	cmp	r3, #1
 8007788:	d101      	bne.n	800778e <HAL_I2C_Mem_Write+0x4e>
 800778a:	2302      	movs	r3, #2
 800778c:	e0e6      	b.n	800795c <HAL_I2C_Mem_Write+0x21c>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007796:	f7fe f897 	bl	80058c8 <HAL_GetTick>
 800779a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	2319      	movs	r3, #25
 80077a2:	2201      	movs	r2, #1
 80077a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f000 fad1 	bl	8007d50 <I2C_WaitOnFlagUntilTimeout>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e0d1      	b.n	800795c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2221      	movs	r2, #33	@ 0x21
 80077bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2240      	movs	r2, #64	@ 0x40
 80077c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6a3a      	ldr	r2, [r7, #32]
 80077d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80077d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80077e0:	88f8      	ldrh	r0, [r7, #6]
 80077e2:	893a      	ldrh	r2, [r7, #8]
 80077e4:	8979      	ldrh	r1, [r7, #10]
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	9301      	str	r3, [sp, #4]
 80077ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	4603      	mov	r3, r0
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 f9e1 	bl	8007bb8 <I2C_RequestMemoryWrite>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d005      	beq.n	8007808 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e0a9      	b.n	800795c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800780c:	b29b      	uxth	r3, r3
 800780e:	2bff      	cmp	r3, #255	@ 0xff
 8007810:	d90e      	bls.n	8007830 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	22ff      	movs	r2, #255	@ 0xff
 8007816:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800781c:	b2da      	uxtb	r2, r3
 800781e:	8979      	ldrh	r1, [r7, #10]
 8007820:	2300      	movs	r3, #0
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f000 fc2d 	bl	8008088 <I2C_TransferConfig>
 800782e:	e00f      	b.n	8007850 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007834:	b29a      	uxth	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800783e:	b2da      	uxtb	r2, r3
 8007840:	8979      	ldrh	r1, [r7, #10]
 8007842:	2300      	movs	r3, #0
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f000 fc1c 	bl	8008088 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f000 fabb 	bl	8007dd0 <I2C_WaitOnTXISFlagUntilTimeout>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d001      	beq.n	8007864 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e07b      	b.n	800795c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007868:	781a      	ldrb	r2, [r3, #0]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007874:	1c5a      	adds	r2, r3, #1
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800787e:	b29b      	uxth	r3, r3
 8007880:	3b01      	subs	r3, #1
 8007882:	b29a      	uxth	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800788c:	3b01      	subs	r3, #1
 800788e:	b29a      	uxth	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007898:	b29b      	uxth	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d034      	beq.n	8007908 <HAL_I2C_Mem_Write+0x1c8>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d130      	bne.n	8007908 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ac:	2200      	movs	r2, #0
 80078ae:	2180      	movs	r1, #128	@ 0x80
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 fa4d 	bl	8007d50 <I2C_WaitOnFlagUntilTimeout>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e04d      	b.n	800795c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	2bff      	cmp	r3, #255	@ 0xff
 80078c8:	d90e      	bls.n	80078e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	22ff      	movs	r2, #255	@ 0xff
 80078ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078d4:	b2da      	uxtb	r2, r3
 80078d6:	8979      	ldrh	r1, [r7, #10]
 80078d8:	2300      	movs	r3, #0
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 fbd1 	bl	8008088 <I2C_TransferConfig>
 80078e6:	e00f      	b.n	8007908 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	8979      	ldrh	r1, [r7, #10]
 80078fa:	2300      	movs	r3, #0
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 fbc0 	bl	8008088 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d19e      	bne.n	8007850 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f000 fa9a 	bl	8007e50 <I2C_WaitOnSTOPFlagUntilTimeout>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e01a      	b.n	800795c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2220      	movs	r2, #32
 800792c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6859      	ldr	r1, [r3, #4]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	4b0a      	ldr	r3, [pc, #40]	@ (8007964 <HAL_I2C_Mem_Write+0x224>)
 800793a:	400b      	ands	r3, r1
 800793c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2220      	movs	r2, #32
 8007942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	e000      	b.n	800795c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800795a:	2302      	movs	r3, #2
  }
}
 800795c:	4618      	mov	r0, r3
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	fe00e800 	.word	0xfe00e800

08007968 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b088      	sub	sp, #32
 800796c:	af02      	add	r7, sp, #8
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	4608      	mov	r0, r1
 8007972:	4611      	mov	r1, r2
 8007974:	461a      	mov	r2, r3
 8007976:	4603      	mov	r3, r0
 8007978:	817b      	strh	r3, [r7, #10]
 800797a:	460b      	mov	r3, r1
 800797c:	813b      	strh	r3, [r7, #8]
 800797e:	4613      	mov	r3, r2
 8007980:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b20      	cmp	r3, #32
 800798c:	f040 80fd 	bne.w	8007b8a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d002      	beq.n	800799c <HAL_I2C_Mem_Read+0x34>
 8007996:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007998:	2b00      	cmp	r3, #0
 800799a:	d105      	bne.n	80079a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079a2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e0f1      	b.n	8007b8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d101      	bne.n	80079b6 <HAL_I2C_Mem_Read+0x4e>
 80079b2:	2302      	movs	r3, #2
 80079b4:	e0ea      	b.n	8007b8c <HAL_I2C_Mem_Read+0x224>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80079be:	f7fd ff83 	bl	80058c8 <HAL_GetTick>
 80079c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	2319      	movs	r3, #25
 80079ca:	2201      	movs	r2, #1
 80079cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f000 f9bd 	bl	8007d50 <I2C_WaitOnFlagUntilTimeout>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d001      	beq.n	80079e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e0d5      	b.n	8007b8c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2222      	movs	r2, #34	@ 0x22
 80079e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2240      	movs	r2, #64	@ 0x40
 80079ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6a3a      	ldr	r2, [r7, #32]
 80079fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007a00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a08:	88f8      	ldrh	r0, [r7, #6]
 8007a0a:	893a      	ldrh	r2, [r7, #8]
 8007a0c:	8979      	ldrh	r1, [r7, #10]
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	9301      	str	r3, [sp, #4]
 8007a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	4603      	mov	r3, r0
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f000 f921 	bl	8007c60 <I2C_RequestMemoryRead>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d005      	beq.n	8007a30 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e0ad      	b.n	8007b8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	2bff      	cmp	r3, #255	@ 0xff
 8007a38:	d90e      	bls.n	8007a58 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	22ff      	movs	r2, #255	@ 0xff
 8007a3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	8979      	ldrh	r1, [r7, #10]
 8007a48:	4b52      	ldr	r3, [pc, #328]	@ (8007b94 <HAL_I2C_Mem_Read+0x22c>)
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f000 fb19 	bl	8008088 <I2C_TransferConfig>
 8007a56:	e00f      	b.n	8007a78 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	8979      	ldrh	r1, [r7, #10]
 8007a6a:	4b4a      	ldr	r3, [pc, #296]	@ (8007b94 <HAL_I2C_Mem_Read+0x22c>)
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f000 fb08 	bl	8008088 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7e:	2200      	movs	r2, #0
 8007a80:	2104      	movs	r1, #4
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f000 f964 	bl	8007d50 <I2C_WaitOnFlagUntilTimeout>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d001      	beq.n	8007a92 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e07c      	b.n	8007b8c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a9c:	b2d2      	uxtb	r2, r2
 8007a9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa4:	1c5a      	adds	r2, r3, #1
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	3b01      	subs	r3, #1
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d034      	beq.n	8007b38 <HAL_I2C_Mem_Read+0x1d0>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d130      	bne.n	8007b38 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	9300      	str	r3, [sp, #0]
 8007ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007adc:	2200      	movs	r2, #0
 8007ade:	2180      	movs	r1, #128	@ 0x80
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 f935 	bl	8007d50 <I2C_WaitOnFlagUntilTimeout>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d001      	beq.n	8007af0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e04d      	b.n	8007b8c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	2bff      	cmp	r3, #255	@ 0xff
 8007af8:	d90e      	bls.n	8007b18 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	22ff      	movs	r2, #255	@ 0xff
 8007afe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	8979      	ldrh	r1, [r7, #10]
 8007b08:	2300      	movs	r3, #0
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f000 fab9 	bl	8008088 <I2C_TransferConfig>
 8007b16:	e00f      	b.n	8007b38 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	8979      	ldrh	r1, [r7, #10]
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f000 faa8 	bl	8008088 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d19a      	bne.n	8007a78 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b42:	697a      	ldr	r2, [r7, #20]
 8007b44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	f000 f982 	bl	8007e50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e01a      	b.n	8007b8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2220      	movs	r2, #32
 8007b5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	6859      	ldr	r1, [r3, #4]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	4b0b      	ldr	r3, [pc, #44]	@ (8007b98 <HAL_I2C_Mem_Read+0x230>)
 8007b6a:	400b      	ands	r3, r1
 8007b6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007b86:	2300      	movs	r3, #0
 8007b88:	e000      	b.n	8007b8c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007b8a:	2302      	movs	r3, #2
  }
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3718      	adds	r7, #24
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	80002400 	.word	0x80002400
 8007b98:	fe00e800 	.word	0xfe00e800

08007b9c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007baa:	b2db      	uxtb	r3, r3
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af02      	add	r7, sp, #8
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	4608      	mov	r0, r1
 8007bc2:	4611      	mov	r1, r2
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	817b      	strh	r3, [r7, #10]
 8007bca:	460b      	mov	r3, r1
 8007bcc:	813b      	strh	r3, [r7, #8]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007bd2:	88fb      	ldrh	r3, [r7, #6]
 8007bd4:	b2da      	uxtb	r2, r3
 8007bd6:	8979      	ldrh	r1, [r7, #10]
 8007bd8:	4b20      	ldr	r3, [pc, #128]	@ (8007c5c <I2C_RequestMemoryWrite+0xa4>)
 8007bda:	9300      	str	r3, [sp, #0]
 8007bdc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 fa51 	bl	8008088 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007be6:	69fa      	ldr	r2, [r7, #28]
 8007be8:	69b9      	ldr	r1, [r7, #24]
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 f8f0 	bl	8007dd0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d001      	beq.n	8007bfa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e02c      	b.n	8007c54 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007bfa:	88fb      	ldrh	r3, [r7, #6]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d105      	bne.n	8007c0c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c00:	893b      	ldrh	r3, [r7, #8]
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c0a:	e015      	b.n	8007c38 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007c0c:	893b      	ldrh	r3, [r7, #8]
 8007c0e:	0a1b      	lsrs	r3, r3, #8
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	69b9      	ldr	r1, [r7, #24]
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f000 f8d6 	bl	8007dd0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d001      	beq.n	8007c2e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e012      	b.n	8007c54 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c2e:	893b      	ldrh	r3, [r7, #8]
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	2180      	movs	r1, #128	@ 0x80
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f000 f884 	bl	8007d50 <I2C_WaitOnFlagUntilTimeout>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e000      	b.n	8007c54 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	80002000 	.word	0x80002000

08007c60 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af02      	add	r7, sp, #8
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	4608      	mov	r0, r1
 8007c6a:	4611      	mov	r1, r2
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	4603      	mov	r3, r0
 8007c70:	817b      	strh	r3, [r7, #10]
 8007c72:	460b      	mov	r3, r1
 8007c74:	813b      	strh	r3, [r7, #8]
 8007c76:	4613      	mov	r3, r2
 8007c78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007c7a:	88fb      	ldrh	r3, [r7, #6]
 8007c7c:	b2da      	uxtb	r2, r3
 8007c7e:	8979      	ldrh	r1, [r7, #10]
 8007c80:	4b20      	ldr	r3, [pc, #128]	@ (8007d04 <I2C_RequestMemoryRead+0xa4>)
 8007c82:	9300      	str	r3, [sp, #0]
 8007c84:	2300      	movs	r3, #0
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f000 f9fe 	bl	8008088 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c8c:	69fa      	ldr	r2, [r7, #28]
 8007c8e:	69b9      	ldr	r1, [r7, #24]
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f000 f89d 	bl	8007dd0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e02c      	b.n	8007cfa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ca0:	88fb      	ldrh	r3, [r7, #6]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d105      	bne.n	8007cb2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ca6:	893b      	ldrh	r3, [r7, #8]
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	629a      	str	r2, [r3, #40]	@ 0x28
 8007cb0:	e015      	b.n	8007cde <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007cb2:	893b      	ldrh	r3, [r7, #8]
 8007cb4:	0a1b      	lsrs	r3, r3, #8
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	b2da      	uxtb	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cc0:	69fa      	ldr	r2, [r7, #28]
 8007cc2:	69b9      	ldr	r1, [r7, #24]
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f000 f883 	bl	8007dd0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d001      	beq.n	8007cd4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e012      	b.n	8007cfa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007cd4:	893b      	ldrh	r3, [r7, #8]
 8007cd6:	b2da      	uxtb	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	2140      	movs	r1, #64	@ 0x40
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f000 f831 	bl	8007d50 <I2C_WaitOnFlagUntilTimeout>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d001      	beq.n	8007cf8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e000      	b.n	8007cfa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	80002000 	.word	0x80002000

08007d08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d103      	bne.n	8007d26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2200      	movs	r2, #0
 8007d24:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d007      	beq.n	8007d44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	699a      	ldr	r2, [r3, #24]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f042 0201 	orr.w	r2, r2, #1
 8007d42:	619a      	str	r2, [r3, #24]
  }
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	603b      	str	r3, [r7, #0]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d60:	e022      	b.n	8007da8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d68:	d01e      	beq.n	8007da8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d6a:	f7fd fdad 	bl	80058c8 <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	683a      	ldr	r2, [r7, #0]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d302      	bcc.n	8007d80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d113      	bne.n	8007da8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d84:	f043 0220 	orr.w	r2, r3, #32
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2220      	movs	r2, #32
 8007d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e00f      	b.n	8007dc8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	699a      	ldr	r2, [r3, #24]
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	4013      	ands	r3, r2
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	bf0c      	ite	eq
 8007db8:	2301      	moveq	r3, #1
 8007dba:	2300      	movne	r3, #0
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	79fb      	ldrb	r3, [r7, #7]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d0cd      	beq.n	8007d62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007ddc:	e02c      	b.n	8007e38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	68b9      	ldr	r1, [r7, #8]
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f000 f870 	bl	8007ec8 <I2C_IsErrorOccurred>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e02a      	b.n	8007e48 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007df8:	d01e      	beq.n	8007e38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dfa:	f7fd fd65 	bl	80058c8 <HAL_GetTick>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d302      	bcc.n	8007e10 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d113      	bne.n	8007e38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e14:	f043 0220 	orr.w	r2, r3, #32
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2220      	movs	r2, #32
 8007e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	e007      	b.n	8007e48 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	f003 0302 	and.w	r3, r3, #2
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d1cb      	bne.n	8007dde <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e5c:	e028      	b.n	8007eb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	68b9      	ldr	r1, [r7, #8]
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f000 f830 	bl	8007ec8 <I2C_IsErrorOccurred>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e026      	b.n	8007ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e72:	f7fd fd29 	bl	80058c8 <HAL_GetTick>
 8007e76:	4602      	mov	r2, r0
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d302      	bcc.n	8007e88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d113      	bne.n	8007eb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e8c:	f043 0220 	orr.w	r2, r3, #32
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2220      	movs	r2, #32
 8007e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e007      	b.n	8007ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	f003 0320 	and.w	r3, r3, #32
 8007eba:	2b20      	cmp	r3, #32
 8007ebc:	d1cf      	bne.n	8007e5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b08a      	sub	sp, #40	@ 0x28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	f003 0310 	and.w	r3, r3, #16
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d068      	beq.n	8007fc6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2210      	movs	r2, #16
 8007efa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007efc:	e049      	b.n	8007f92 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f04:	d045      	beq.n	8007f92 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007f06:	f7fd fcdf 	bl	80058c8 <HAL_GetTick>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	68ba      	ldr	r2, [r7, #8]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d302      	bcc.n	8007f1c <I2C_IsErrorOccurred+0x54>
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d13a      	bne.n	8007f92 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f26:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f2e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f3e:	d121      	bne.n	8007f84 <I2C_IsErrorOccurred+0xbc>
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f46:	d01d      	beq.n	8007f84 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007f48:	7cfb      	ldrb	r3, [r7, #19]
 8007f4a:	2b20      	cmp	r3, #32
 8007f4c:	d01a      	beq.n	8007f84 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	685a      	ldr	r2, [r3, #4]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f5c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007f5e:	f7fd fcb3 	bl	80058c8 <HAL_GetTick>
 8007f62:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f64:	e00e      	b.n	8007f84 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007f66:	f7fd fcaf 	bl	80058c8 <HAL_GetTick>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	2b19      	cmp	r3, #25
 8007f72:	d907      	bls.n	8007f84 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	f043 0320 	orr.w	r3, r3, #32
 8007f7a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007f82:	e006      	b.n	8007f92 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	699b      	ldr	r3, [r3, #24]
 8007f8a:	f003 0320 	and.w	r3, r3, #32
 8007f8e:	2b20      	cmp	r3, #32
 8007f90:	d1e9      	bne.n	8007f66 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	f003 0320 	and.w	r3, r3, #32
 8007f9c:	2b20      	cmp	r3, #32
 8007f9e:	d003      	beq.n	8007fa8 <I2C_IsErrorOccurred+0xe0>
 8007fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d0aa      	beq.n	8007efe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d103      	bne.n	8007fb8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2220      	movs	r2, #32
 8007fb6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007fb8:	6a3b      	ldr	r3, [r7, #32]
 8007fba:	f043 0304 	orr.w	r3, r3, #4
 8007fbe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00b      	beq.n	8007ff0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007fd8:	6a3b      	ldr	r3, [r7, #32]
 8007fda:	f043 0301 	orr.w	r3, r3, #1
 8007fde:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007fe8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00b      	beq.n	8008012 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007ffa:	6a3b      	ldr	r3, [r7, #32]
 8007ffc:	f043 0308 	orr.w	r3, r3, #8
 8008000:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800800a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00b      	beq.n	8008034 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800801c:	6a3b      	ldr	r3, [r7, #32]
 800801e:	f043 0302 	orr.w	r3, r3, #2
 8008022:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800802c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008034:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008038:	2b00      	cmp	r3, #0
 800803a:	d01c      	beq.n	8008076 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f7ff fe63 	bl	8007d08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	6859      	ldr	r1, [r3, #4]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	4b0d      	ldr	r3, [pc, #52]	@ (8008084 <I2C_IsErrorOccurred+0x1bc>)
 800804e:	400b      	ands	r3, r1
 8008050:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	431a      	orrs	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2220      	movs	r2, #32
 8008062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008076:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800807a:	4618      	mov	r0, r3
 800807c:	3728      	adds	r7, #40	@ 0x28
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	fe00e800 	.word	0xfe00e800

08008088 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008088:	b480      	push	{r7}
 800808a:	b087      	sub	sp, #28
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	607b      	str	r3, [r7, #4]
 8008092:	460b      	mov	r3, r1
 8008094:	817b      	strh	r3, [r7, #10]
 8008096:	4613      	mov	r3, r2
 8008098:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800809a:	897b      	ldrh	r3, [r7, #10]
 800809c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80080a0:	7a7b      	ldrb	r3, [r7, #9]
 80080a2:	041b      	lsls	r3, r3, #16
 80080a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80080a8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80080ae:	6a3b      	ldr	r3, [r7, #32]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080b6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	6a3b      	ldr	r3, [r7, #32]
 80080c0:	0d5b      	lsrs	r3, r3, #21
 80080c2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80080c6:	4b08      	ldr	r3, [pc, #32]	@ (80080e8 <I2C_TransferConfig+0x60>)
 80080c8:	430b      	orrs	r3, r1
 80080ca:	43db      	mvns	r3, r3
 80080cc:	ea02 0103 	and.w	r1, r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	697a      	ldr	r2, [r7, #20]
 80080d6:	430a      	orrs	r2, r1
 80080d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80080da:	bf00      	nop
 80080dc:	371c      	adds	r7, #28
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	03ff63ff 	.word	0x03ff63ff

080080ec <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e0bf      	b.n	800827e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	d106      	bne.n	8008118 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7fa ff8c 	bl	8003030 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2202      	movs	r2, #2
 800811c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	699a      	ldr	r2, [r3, #24]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800812e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6999      	ldr	r1, [r3, #24]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685a      	ldr	r2, [r3, #4]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008144:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	430a      	orrs	r2, r1
 8008152:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6899      	ldr	r1, [r3, #8]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	4b4a      	ldr	r3, [pc, #296]	@ (8008288 <HAL_LTDC_Init+0x19c>)
 8008160:	400b      	ands	r3, r1
 8008162:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	695b      	ldr	r3, [r3, #20]
 8008168:	041b      	lsls	r3, r3, #16
 800816a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6899      	ldr	r1, [r3, #8]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	699a      	ldr	r2, [r3, #24]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	431a      	orrs	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	430a      	orrs	r2, r1
 8008180:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68d9      	ldr	r1, [r3, #12]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	4b3e      	ldr	r3, [pc, #248]	@ (8008288 <HAL_LTDC_Init+0x19c>)
 800818e:	400b      	ands	r3, r1
 8008190:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	041b      	lsls	r3, r3, #16
 8008198:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68d9      	ldr	r1, [r3, #12]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a1a      	ldr	r2, [r3, #32]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	431a      	orrs	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	430a      	orrs	r2, r1
 80081ae:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6919      	ldr	r1, [r3, #16]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	4b33      	ldr	r3, [pc, #204]	@ (8008288 <HAL_LTDC_Init+0x19c>)
 80081bc:	400b      	ands	r3, r1
 80081be:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081c4:	041b      	lsls	r3, r3, #16
 80081c6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	6919      	ldr	r1, [r3, #16]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	431a      	orrs	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	430a      	orrs	r2, r1
 80081dc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	6959      	ldr	r1, [r3, #20]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	4b27      	ldr	r3, [pc, #156]	@ (8008288 <HAL_LTDC_Init+0x19c>)
 80081ea:	400b      	ands	r3, r1
 80081ec:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f2:	041b      	lsls	r3, r3, #16
 80081f4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6959      	ldr	r1, [r3, #20]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	431a      	orrs	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	430a      	orrs	r2, r1
 800820a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008212:	021b      	lsls	r3, r3, #8
 8008214:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800821c:	041b      	lsls	r3, r3, #16
 800821e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800822e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	4313      	orrs	r3, r2
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8008242:	431a      	orrs	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	430a      	orrs	r2, r1
 800824a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f042 0206 	orr.w	r2, r2, #6
 800825a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	699a      	ldr	r2, [r3, #24]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f042 0201 	orr.w	r2, r2, #1
 800826a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	f000f800 	.word	0xf000f800

0800828c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800829a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082a2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f003 0304 	and.w	r3, r3, #4
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d023      	beq.n	80082f6 <HAL_LTDC_IRQHandler+0x6a>
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	f003 0304 	and.w	r3, r3, #4
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d01e      	beq.n	80082f6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f022 0204 	bic.w	r2, r2, #4
 80082c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2204      	movs	r2, #4
 80082ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80082d6:	f043 0201 	orr.w	r2, r3, #1
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2204      	movs	r2, #4
 80082e4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 f86f 	bl	80083d4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f003 0302 	and.w	r3, r3, #2
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d023      	beq.n	8008348 <HAL_LTDC_IRQHandler+0xbc>
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	f003 0302 	and.w	r3, r3, #2
 8008306:	2b00      	cmp	r3, #0
 8008308:	d01e      	beq.n	8008348 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f022 0202 	bic.w	r2, r2, #2
 8008318:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2202      	movs	r2, #2
 8008320:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008328:	f043 0202 	orr.w	r2, r3, #2
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2204      	movs	r2, #4
 8008336:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f846 	bl	80083d4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f003 0301 	and.w	r3, r3, #1
 800834e:	2b00      	cmp	r3, #0
 8008350:	d01b      	beq.n	800838a <HAL_LTDC_IRQHandler+0xfe>
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	f003 0301 	and.w	r3, r3, #1
 8008358:	2b00      	cmp	r3, #0
 800835a:	d016      	beq.n	800838a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f022 0201 	bic.w	r2, r2, #1
 800836a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2201      	movs	r2, #1
 8008372:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f82f 	bl	80083e8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f003 0308 	and.w	r3, r3, #8
 8008390:	2b00      	cmp	r3, #0
 8008392:	d01b      	beq.n	80083cc <HAL_LTDC_IRQHandler+0x140>
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	f003 0308 	and.w	r3, r3, #8
 800839a:	2b00      	cmp	r3, #0
 800839c:	d016      	beq.n	80083cc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 0208 	bic.w	r2, r2, #8
 80083ac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2208      	movs	r2, #8
 80083b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f818 	bl	80083fc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80083cc:	bf00      	nop
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008404:	bf00      	nop
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008410:	b5b0      	push	{r4, r5, r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8008422:	2b01      	cmp	r3, #1
 8008424:	d101      	bne.n	800842a <HAL_LTDC_ConfigLayer+0x1a>
 8008426:	2302      	movs	r3, #2
 8008428:	e02c      	b.n	8008484 <HAL_LTDC_ConfigLayer+0x74>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2202      	movs	r2, #2
 8008436:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2134      	movs	r1, #52	@ 0x34
 8008440:	fb01 f303 	mul.w	r3, r1, r3
 8008444:	4413      	add	r3, r2
 8008446:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	4614      	mov	r4, r2
 800844e:	461d      	mov	r5, r3
 8008450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800845a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	68b9      	ldr	r1, [r7, #8]
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f000 f81f 	bl	80084a8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2201      	movs	r2, #1
 8008470:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bdb0      	pop	{r4, r5, r7, pc}

0800848c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800849a:	b2db      	uxtb	r3, r3
}
 800849c:	4618      	mov	r0, r3
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b089      	sub	sp, #36	@ 0x24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	685a      	ldr	r2, [r3, #4]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	0c1b      	lsrs	r3, r3, #16
 80084c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084c4:	4413      	add	r3, r2
 80084c6:	041b      	lsls	r3, r3, #16
 80084c8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	461a      	mov	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	01db      	lsls	r3, r3, #7
 80084d4:	4413      	add	r3, r2
 80084d6:	3384      	adds	r3, #132	@ 0x84
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	6812      	ldr	r2, [r2, #0]
 80084de:	4611      	mov	r1, r2
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	01d2      	lsls	r2, r2, #7
 80084e4:	440a      	add	r2, r1
 80084e6:	3284      	adds	r2, #132	@ 0x84
 80084e8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80084ec:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	0c1b      	lsrs	r3, r3, #16
 80084fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80084fe:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008500:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4619      	mov	r1, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	01db      	lsls	r3, r3, #7
 800850c:	440b      	add	r3, r1
 800850e:	3384      	adds	r3, #132	@ 0x84
 8008510:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008516:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	68da      	ldr	r2, [r3, #12]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008526:	4413      	add	r3, r2
 8008528:	041b      	lsls	r3, r3, #16
 800852a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	461a      	mov	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	01db      	lsls	r3, r3, #7
 8008536:	4413      	add	r3, r2
 8008538:	3384      	adds	r3, #132	@ 0x84
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	6812      	ldr	r2, [r2, #0]
 8008540:	4611      	mov	r1, r2
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	01d2      	lsls	r2, r2, #7
 8008546:	440a      	add	r2, r1
 8008548:	3284      	adds	r2, #132	@ 0x84
 800854a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800854e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	689a      	ldr	r2, [r3, #8]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800855e:	4413      	add	r3, r2
 8008560:	1c5a      	adds	r2, r3, #1
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4619      	mov	r1, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	01db      	lsls	r3, r3, #7
 800856c:	440b      	add	r3, r1
 800856e:	3384      	adds	r3, #132	@ 0x84
 8008570:	4619      	mov	r1, r3
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	4313      	orrs	r3, r2
 8008576:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	461a      	mov	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	01db      	lsls	r3, r3, #7
 8008582:	4413      	add	r3, r2
 8008584:	3384      	adds	r3, #132	@ 0x84
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	6812      	ldr	r2, [r2, #0]
 800858c:	4611      	mov	r1, r2
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	01d2      	lsls	r2, r2, #7
 8008592:	440a      	add	r2, r1
 8008594:	3284      	adds	r2, #132	@ 0x84
 8008596:	f023 0307 	bic.w	r3, r3, #7
 800859a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	461a      	mov	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	01db      	lsls	r3, r3, #7
 80085a6:	4413      	add	r3, r2
 80085a8:	3384      	adds	r3, #132	@ 0x84
 80085aa:	461a      	mov	r2, r3
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80085b8:	021b      	lsls	r3, r3, #8
 80085ba:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80085c2:	041b      	lsls	r3, r3, #16
 80085c4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	061b      	lsls	r3, r3, #24
 80085cc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	461a      	mov	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	01db      	lsls	r3, r3, #7
 80085d8:	4413      	add	r3, r2
 80085da:	3384      	adds	r3, #132	@ 0x84
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	461a      	mov	r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	01db      	lsls	r3, r3, #7
 80085e8:	4413      	add	r3, r2
 80085ea:	3384      	adds	r3, #132	@ 0x84
 80085ec:	461a      	mov	r2, r3
 80085ee:	2300      	movs	r3, #0
 80085f0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80085f8:	461a      	mov	r2, r3
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	431a      	orrs	r2, r3
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	431a      	orrs	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4619      	mov	r1, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	01db      	lsls	r3, r3, #7
 800860c:	440b      	add	r3, r1
 800860e:	3384      	adds	r3, #132	@ 0x84
 8008610:	4619      	mov	r1, r3
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	4313      	orrs	r3, r2
 8008616:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	461a      	mov	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	01db      	lsls	r3, r3, #7
 8008622:	4413      	add	r3, r2
 8008624:	3384      	adds	r3, #132	@ 0x84
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	6812      	ldr	r2, [r2, #0]
 800862c:	4611      	mov	r1, r2
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	01d2      	lsls	r2, r2, #7
 8008632:	440a      	add	r2, r1
 8008634:	3284      	adds	r2, #132	@ 0x84
 8008636:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800863a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	461a      	mov	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	01db      	lsls	r3, r3, #7
 8008646:	4413      	add	r3, r2
 8008648:	3384      	adds	r3, #132	@ 0x84
 800864a:	461a      	mov	r2, r3
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	695b      	ldr	r3, [r3, #20]
 8008650:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	461a      	mov	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	01db      	lsls	r3, r3, #7
 800865c:	4413      	add	r3, r2
 800865e:	3384      	adds	r3, #132	@ 0x84
 8008660:	69da      	ldr	r2, [r3, #28]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4619      	mov	r1, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	01db      	lsls	r3, r3, #7
 800866c:	440b      	add	r3, r1
 800866e:	3384      	adds	r3, #132	@ 0x84
 8008670:	4619      	mov	r1, r3
 8008672:	4b58      	ldr	r3, [pc, #352]	@ (80087d4 <LTDC_SetConfig+0x32c>)
 8008674:	4013      	ands	r3, r2
 8008676:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	69da      	ldr	r2, [r3, #28]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	6a1b      	ldr	r3, [r3, #32]
 8008680:	68f9      	ldr	r1, [r7, #12]
 8008682:	6809      	ldr	r1, [r1, #0]
 8008684:	4608      	mov	r0, r1
 8008686:	6879      	ldr	r1, [r7, #4]
 8008688:	01c9      	lsls	r1, r1, #7
 800868a:	4401      	add	r1, r0
 800868c:	3184      	adds	r1, #132	@ 0x84
 800868e:	4313      	orrs	r3, r2
 8008690:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	461a      	mov	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	01db      	lsls	r3, r3, #7
 800869c:	4413      	add	r3, r2
 800869e:	3384      	adds	r3, #132	@ 0x84
 80086a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	461a      	mov	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	01db      	lsls	r3, r3, #7
 80086ac:	4413      	add	r3, r2
 80086ae:	3384      	adds	r3, #132	@ 0x84
 80086b0:	461a      	mov	r2, r3
 80086b2:	2300      	movs	r3, #0
 80086b4:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	01db      	lsls	r3, r3, #7
 80086c0:	4413      	add	r3, r2
 80086c2:	3384      	adds	r3, #132	@ 0x84
 80086c4:	461a      	mov	r2, r3
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ca:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d102      	bne.n	80086da <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80086d4:	2304      	movs	r3, #4
 80086d6:	61fb      	str	r3, [r7, #28]
 80086d8:	e01b      	b.n	8008712 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d102      	bne.n	80086e8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80086e2:	2303      	movs	r3, #3
 80086e4:	61fb      	str	r3, [r7, #28]
 80086e6:	e014      	b.n	8008712 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	2b04      	cmp	r3, #4
 80086ee:	d00b      	beq.n	8008708 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d007      	beq.n	8008708 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	d003      	beq.n	8008708 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008704:	2b07      	cmp	r3, #7
 8008706:	d102      	bne.n	800870e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008708:	2302      	movs	r3, #2
 800870a:	61fb      	str	r3, [r7, #28]
 800870c:	e001      	b.n	8008712 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800870e:	2301      	movs	r3, #1
 8008710:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	461a      	mov	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	01db      	lsls	r3, r3, #7
 800871c:	4413      	add	r3, r2
 800871e:	3384      	adds	r3, #132	@ 0x84
 8008720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	6812      	ldr	r2, [r2, #0]
 8008726:	4611      	mov	r1, r2
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	01d2      	lsls	r2, r2, #7
 800872c:	440a      	add	r2, r1
 800872e:	3284      	adds	r2, #132	@ 0x84
 8008730:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8008734:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800873a:	69fa      	ldr	r2, [r7, #28]
 800873c:	fb02 f303 	mul.w	r3, r2, r3
 8008740:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	6859      	ldr	r1, [r3, #4]
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	1acb      	subs	r3, r1, r3
 800874c:	69f9      	ldr	r1, [r7, #28]
 800874e:	fb01 f303 	mul.w	r3, r1, r3
 8008752:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008754:	68f9      	ldr	r1, [r7, #12]
 8008756:	6809      	ldr	r1, [r1, #0]
 8008758:	4608      	mov	r0, r1
 800875a:	6879      	ldr	r1, [r7, #4]
 800875c:	01c9      	lsls	r1, r1, #7
 800875e:	4401      	add	r1, r0
 8008760:	3184      	adds	r1, #132	@ 0x84
 8008762:	4313      	orrs	r3, r2
 8008764:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	461a      	mov	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	01db      	lsls	r3, r3, #7
 8008770:	4413      	add	r3, r2
 8008772:	3384      	adds	r3, #132	@ 0x84
 8008774:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4619      	mov	r1, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	01db      	lsls	r3, r3, #7
 8008780:	440b      	add	r3, r1
 8008782:	3384      	adds	r3, #132	@ 0x84
 8008784:	4619      	mov	r1, r3
 8008786:	4b14      	ldr	r3, [pc, #80]	@ (80087d8 <LTDC_SetConfig+0x330>)
 8008788:	4013      	ands	r3, r2
 800878a:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	461a      	mov	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	01db      	lsls	r3, r3, #7
 8008796:	4413      	add	r3, r2
 8008798:	3384      	adds	r3, #132	@ 0x84
 800879a:	461a      	mov	r2, r3
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	461a      	mov	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	01db      	lsls	r3, r3, #7
 80087ac:	4413      	add	r3, r2
 80087ae:	3384      	adds	r3, #132	@ 0x84
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	6812      	ldr	r2, [r2, #0]
 80087b6:	4611      	mov	r1, r2
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	01d2      	lsls	r2, r2, #7
 80087bc:	440a      	add	r2, r1
 80087be:	3284      	adds	r2, #132	@ 0x84
 80087c0:	f043 0301 	orr.w	r3, r3, #1
 80087c4:	6013      	str	r3, [r2, #0]
}
 80087c6:	bf00      	nop
 80087c8:	3724      	adds	r7, #36	@ 0x24
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	fffff8f8 	.word	0xfffff8f8
 80087d8:	fffff800 	.word	0xfffff800

080087dc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80087dc:	b480      	push	{r7}
 80087de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80087e0:	4b05      	ldr	r3, [pc, #20]	@ (80087f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a04      	ldr	r2, [pc, #16]	@ (80087f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80087e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087ea:	6013      	str	r3, [r2, #0]
}
 80087ec:	bf00      	nop
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	40007000 	.word	0x40007000

080087fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008802:	2300      	movs	r3, #0
 8008804:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008806:	4b23      	ldr	r3, [pc, #140]	@ (8008894 <HAL_PWREx_EnableOverDrive+0x98>)
 8008808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800880a:	4a22      	ldr	r2, [pc, #136]	@ (8008894 <HAL_PWREx_EnableOverDrive+0x98>)
 800880c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008810:	6413      	str	r3, [r2, #64]	@ 0x40
 8008812:	4b20      	ldr	r3, [pc, #128]	@ (8008894 <HAL_PWREx_EnableOverDrive+0x98>)
 8008814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800881a:	603b      	str	r3, [r7, #0]
 800881c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800881e:	4b1e      	ldr	r3, [pc, #120]	@ (8008898 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a1d      	ldr	r2, [pc, #116]	@ (8008898 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008828:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800882a:	f7fd f84d 	bl	80058c8 <HAL_GetTick>
 800882e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008830:	e009      	b.n	8008846 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008832:	f7fd f849 	bl	80058c8 <HAL_GetTick>
 8008836:	4602      	mov	r2, r0
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008840:	d901      	bls.n	8008846 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e022      	b.n	800888c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008846:	4b14      	ldr	r3, [pc, #80]	@ (8008898 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800884e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008852:	d1ee      	bne.n	8008832 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008854:	4b10      	ldr	r3, [pc, #64]	@ (8008898 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a0f      	ldr	r2, [pc, #60]	@ (8008898 <HAL_PWREx_EnableOverDrive+0x9c>)
 800885a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800885e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008860:	f7fd f832 	bl	80058c8 <HAL_GetTick>
 8008864:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008866:	e009      	b.n	800887c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008868:	f7fd f82e 	bl	80058c8 <HAL_GetTick>
 800886c:	4602      	mov	r2, r0
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008876:	d901      	bls.n	800887c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e007      	b.n	800888c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800887c:	4b06      	ldr	r3, [pc, #24]	@ (8008898 <HAL_PWREx_EnableOverDrive+0x9c>)
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008884:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008888:	d1ee      	bne.n	8008868 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	40023800 	.word	0x40023800
 8008898:	40007000 	.word	0x40007000

0800889c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80088a4:	2300      	movs	r3, #0
 80088a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d101      	bne.n	80088b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e291      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 0301 	and.w	r3, r3, #1
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f000 8087 	beq.w	80089ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80088c0:	4b96      	ldr	r3, [pc, #600]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	f003 030c 	and.w	r3, r3, #12
 80088c8:	2b04      	cmp	r3, #4
 80088ca:	d00c      	beq.n	80088e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80088cc:	4b93      	ldr	r3, [pc, #588]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	f003 030c 	and.w	r3, r3, #12
 80088d4:	2b08      	cmp	r3, #8
 80088d6:	d112      	bne.n	80088fe <HAL_RCC_OscConfig+0x62>
 80088d8:	4b90      	ldr	r3, [pc, #576]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088e4:	d10b      	bne.n	80088fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088e6:	4b8d      	ldr	r3, [pc, #564]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d06c      	beq.n	80089cc <HAL_RCC_OscConfig+0x130>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d168      	bne.n	80089cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e26b      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008906:	d106      	bne.n	8008916 <HAL_RCC_OscConfig+0x7a>
 8008908:	4b84      	ldr	r3, [pc, #528]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a83      	ldr	r2, [pc, #524]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 800890e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008912:	6013      	str	r3, [r2, #0]
 8008914:	e02e      	b.n	8008974 <HAL_RCC_OscConfig+0xd8>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10c      	bne.n	8008938 <HAL_RCC_OscConfig+0x9c>
 800891e:	4b7f      	ldr	r3, [pc, #508]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a7e      	ldr	r2, [pc, #504]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008924:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008928:	6013      	str	r3, [r2, #0]
 800892a:	4b7c      	ldr	r3, [pc, #496]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a7b      	ldr	r2, [pc, #492]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008930:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008934:	6013      	str	r3, [r2, #0]
 8008936:	e01d      	b.n	8008974 <HAL_RCC_OscConfig+0xd8>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008940:	d10c      	bne.n	800895c <HAL_RCC_OscConfig+0xc0>
 8008942:	4b76      	ldr	r3, [pc, #472]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a75      	ldr	r2, [pc, #468]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008948:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800894c:	6013      	str	r3, [r2, #0]
 800894e:	4b73      	ldr	r3, [pc, #460]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a72      	ldr	r2, [pc, #456]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008958:	6013      	str	r3, [r2, #0]
 800895a:	e00b      	b.n	8008974 <HAL_RCC_OscConfig+0xd8>
 800895c:	4b6f      	ldr	r3, [pc, #444]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a6e      	ldr	r2, [pc, #440]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008962:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008966:	6013      	str	r3, [r2, #0]
 8008968:	4b6c      	ldr	r3, [pc, #432]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a6b      	ldr	r2, [pc, #428]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 800896e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d013      	beq.n	80089a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800897c:	f7fc ffa4 	bl	80058c8 <HAL_GetTick>
 8008980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008982:	e008      	b.n	8008996 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008984:	f7fc ffa0 	bl	80058c8 <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	2b64      	cmp	r3, #100	@ 0x64
 8008990:	d901      	bls.n	8008996 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	e21f      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008996:	4b61      	ldr	r3, [pc, #388]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d0f0      	beq.n	8008984 <HAL_RCC_OscConfig+0xe8>
 80089a2:	e014      	b.n	80089ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089a4:	f7fc ff90 	bl	80058c8 <HAL_GetTick>
 80089a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089aa:	e008      	b.n	80089be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089ac:	f7fc ff8c 	bl	80058c8 <HAL_GetTick>
 80089b0:	4602      	mov	r2, r0
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	2b64      	cmp	r3, #100	@ 0x64
 80089b8:	d901      	bls.n	80089be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e20b      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089be:	4b57      	ldr	r3, [pc, #348]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1f0      	bne.n	80089ac <HAL_RCC_OscConfig+0x110>
 80089ca:	e000      	b.n	80089ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 0302 	and.w	r3, r3, #2
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d069      	beq.n	8008aae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80089da:	4b50      	ldr	r3, [pc, #320]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	f003 030c 	and.w	r3, r3, #12
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00b      	beq.n	80089fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80089e6:	4b4d      	ldr	r3, [pc, #308]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	f003 030c 	and.w	r3, r3, #12
 80089ee:	2b08      	cmp	r3, #8
 80089f0:	d11c      	bne.n	8008a2c <HAL_RCC_OscConfig+0x190>
 80089f2:	4b4a      	ldr	r3, [pc, #296]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d116      	bne.n	8008a2c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80089fe:	4b47      	ldr	r3, [pc, #284]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0302 	and.w	r3, r3, #2
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d005      	beq.n	8008a16 <HAL_RCC_OscConfig+0x17a>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d001      	beq.n	8008a16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e1df      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a16:	4b41      	ldr	r3, [pc, #260]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	00db      	lsls	r3, r3, #3
 8008a24:	493d      	ldr	r1, [pc, #244]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008a26:	4313      	orrs	r3, r2
 8008a28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a2a:	e040      	b.n	8008aae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d023      	beq.n	8008a7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a34:	4b39      	ldr	r3, [pc, #228]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a38      	ldr	r2, [pc, #224]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008a3a:	f043 0301 	orr.w	r3, r3, #1
 8008a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a40:	f7fc ff42 	bl	80058c8 <HAL_GetTick>
 8008a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a46:	e008      	b.n	8008a5a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a48:	f7fc ff3e 	bl	80058c8 <HAL_GetTick>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d901      	bls.n	8008a5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	e1bd      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a5a:	4b30      	ldr	r3, [pc, #192]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 0302 	and.w	r3, r3, #2
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d0f0      	beq.n	8008a48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a66:	4b2d      	ldr	r3, [pc, #180]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	00db      	lsls	r3, r3, #3
 8008a74:	4929      	ldr	r1, [pc, #164]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008a76:	4313      	orrs	r3, r2
 8008a78:	600b      	str	r3, [r1, #0]
 8008a7a:	e018      	b.n	8008aae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a7c:	4b27      	ldr	r3, [pc, #156]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a26      	ldr	r2, [pc, #152]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008a82:	f023 0301 	bic.w	r3, r3, #1
 8008a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a88:	f7fc ff1e 	bl	80058c8 <HAL_GetTick>
 8008a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a8e:	e008      	b.n	8008aa2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a90:	f7fc ff1a 	bl	80058c8 <HAL_GetTick>
 8008a94:	4602      	mov	r2, r0
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d901      	bls.n	8008aa2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e199      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 0302 	and.w	r3, r3, #2
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1f0      	bne.n	8008a90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 0308 	and.w	r3, r3, #8
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d038      	beq.n	8008b2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d019      	beq.n	8008af6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ac2:	4b16      	ldr	r3, [pc, #88]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ac6:	4a15      	ldr	r2, [pc, #84]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008ac8:	f043 0301 	orr.w	r3, r3, #1
 8008acc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ace:	f7fc fefb 	bl	80058c8 <HAL_GetTick>
 8008ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ad4:	e008      	b.n	8008ae8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ad6:	f7fc fef7 	bl	80058c8 <HAL_GetTick>
 8008ada:	4602      	mov	r2, r0
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d901      	bls.n	8008ae8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e176      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008aea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008aec:	f003 0302 	and.w	r3, r3, #2
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d0f0      	beq.n	8008ad6 <HAL_RCC_OscConfig+0x23a>
 8008af4:	e01a      	b.n	8008b2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008af6:	4b09      	ldr	r3, [pc, #36]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008af8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008afa:	4a08      	ldr	r2, [pc, #32]	@ (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008afc:	f023 0301 	bic.w	r3, r3, #1
 8008b00:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b02:	f7fc fee1 	bl	80058c8 <HAL_GetTick>
 8008b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b08:	e00a      	b.n	8008b20 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b0a:	f7fc fedd 	bl	80058c8 <HAL_GetTick>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d903      	bls.n	8008b20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	e15c      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
 8008b1c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b20:	4b91      	ldr	r3, [pc, #580]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008b22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b24:	f003 0302 	and.w	r3, r3, #2
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1ee      	bne.n	8008b0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0304 	and.w	r3, r3, #4
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f000 80a4 	beq.w	8008c82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b3a:	4b8b      	ldr	r3, [pc, #556]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10d      	bne.n	8008b62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b46:	4b88      	ldr	r3, [pc, #544]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b4a:	4a87      	ldr	r2, [pc, #540]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8008b52:	4b85      	ldr	r3, [pc, #532]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b5a:	60bb      	str	r3, [r7, #8]
 8008b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b62:	4b82      	ldr	r3, [pc, #520]	@ (8008d6c <HAL_RCC_OscConfig+0x4d0>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d118      	bne.n	8008ba0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008b6e:	4b7f      	ldr	r3, [pc, #508]	@ (8008d6c <HAL_RCC_OscConfig+0x4d0>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a7e      	ldr	r2, [pc, #504]	@ (8008d6c <HAL_RCC_OscConfig+0x4d0>)
 8008b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b7a:	f7fc fea5 	bl	80058c8 <HAL_GetTick>
 8008b7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b80:	e008      	b.n	8008b94 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b82:	f7fc fea1 	bl	80058c8 <HAL_GetTick>
 8008b86:	4602      	mov	r2, r0
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	2b64      	cmp	r3, #100	@ 0x64
 8008b8e:	d901      	bls.n	8008b94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008b90:	2303      	movs	r3, #3
 8008b92:	e120      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b94:	4b75      	ldr	r3, [pc, #468]	@ (8008d6c <HAL_RCC_OscConfig+0x4d0>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d0f0      	beq.n	8008b82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d106      	bne.n	8008bb6 <HAL_RCC_OscConfig+0x31a>
 8008ba8:	4b6f      	ldr	r3, [pc, #444]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bac:	4a6e      	ldr	r2, [pc, #440]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008bae:	f043 0301 	orr.w	r3, r3, #1
 8008bb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bb4:	e02d      	b.n	8008c12 <HAL_RCC_OscConfig+0x376>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10c      	bne.n	8008bd8 <HAL_RCC_OscConfig+0x33c>
 8008bbe:	4b6a      	ldr	r3, [pc, #424]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bc2:	4a69      	ldr	r2, [pc, #420]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008bc4:	f023 0301 	bic.w	r3, r3, #1
 8008bc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bca:	4b67      	ldr	r3, [pc, #412]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bce:	4a66      	ldr	r2, [pc, #408]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008bd0:	f023 0304 	bic.w	r3, r3, #4
 8008bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bd6:	e01c      	b.n	8008c12 <HAL_RCC_OscConfig+0x376>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	2b05      	cmp	r3, #5
 8008bde:	d10c      	bne.n	8008bfa <HAL_RCC_OscConfig+0x35e>
 8008be0:	4b61      	ldr	r3, [pc, #388]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008be4:	4a60      	ldr	r2, [pc, #384]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008be6:	f043 0304 	orr.w	r3, r3, #4
 8008bea:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bec:	4b5e      	ldr	r3, [pc, #376]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bf0:	4a5d      	ldr	r2, [pc, #372]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008bf2:	f043 0301 	orr.w	r3, r3, #1
 8008bf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bf8:	e00b      	b.n	8008c12 <HAL_RCC_OscConfig+0x376>
 8008bfa:	4b5b      	ldr	r3, [pc, #364]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bfe:	4a5a      	ldr	r2, [pc, #360]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008c00:	f023 0301 	bic.w	r3, r3, #1
 8008c04:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c06:	4b58      	ldr	r3, [pc, #352]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c0a:	4a57      	ldr	r2, [pc, #348]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008c0c:	f023 0304 	bic.w	r3, r3, #4
 8008c10:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d015      	beq.n	8008c46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c1a:	f7fc fe55 	bl	80058c8 <HAL_GetTick>
 8008c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c20:	e00a      	b.n	8008c38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c22:	f7fc fe51 	bl	80058c8 <HAL_GetTick>
 8008c26:	4602      	mov	r2, r0
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d901      	bls.n	8008c38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008c34:	2303      	movs	r3, #3
 8008c36:	e0ce      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c38:	4b4b      	ldr	r3, [pc, #300]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c3c:	f003 0302 	and.w	r3, r3, #2
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d0ee      	beq.n	8008c22 <HAL_RCC_OscConfig+0x386>
 8008c44:	e014      	b.n	8008c70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c46:	f7fc fe3f 	bl	80058c8 <HAL_GetTick>
 8008c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c4c:	e00a      	b.n	8008c64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c4e:	f7fc fe3b 	bl	80058c8 <HAL_GetTick>
 8008c52:	4602      	mov	r2, r0
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d901      	bls.n	8008c64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e0b8      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c64:	4b40      	ldr	r3, [pc, #256]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c68:	f003 0302 	and.w	r3, r3, #2
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1ee      	bne.n	8008c4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008c70:	7dfb      	ldrb	r3, [r7, #23]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d105      	bne.n	8008c82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c76:	4b3c      	ldr	r3, [pc, #240]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c7a:	4a3b      	ldr	r2, [pc, #236]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008c7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c80:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	699b      	ldr	r3, [r3, #24]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f000 80a4 	beq.w	8008dd4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008c8c:	4b36      	ldr	r3, [pc, #216]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	f003 030c 	and.w	r3, r3, #12
 8008c94:	2b08      	cmp	r3, #8
 8008c96:	d06b      	beq.n	8008d70 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d149      	bne.n	8008d34 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ca0:	4b31      	ldr	r3, [pc, #196]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a30      	ldr	r2, [pc, #192]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008ca6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cac:	f7fc fe0c 	bl	80058c8 <HAL_GetTick>
 8008cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cb2:	e008      	b.n	8008cc6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cb4:	f7fc fe08 	bl	80058c8 <HAL_GetTick>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d901      	bls.n	8008cc6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	e087      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cc6:	4b28      	ldr	r3, [pc, #160]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1f0      	bne.n	8008cb4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	69da      	ldr	r2, [r3, #28]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a1b      	ldr	r3, [r3, #32]
 8008cda:	431a      	orrs	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ce0:	019b      	lsls	r3, r3, #6
 8008ce2:	431a      	orrs	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce8:	085b      	lsrs	r3, r3, #1
 8008cea:	3b01      	subs	r3, #1
 8008cec:	041b      	lsls	r3, r3, #16
 8008cee:	431a      	orrs	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cf4:	061b      	lsls	r3, r3, #24
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008cfa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008cfe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d00:	4b19      	ldr	r3, [pc, #100]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a18      	ldr	r2, [pc, #96]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008d06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d0c:	f7fc fddc 	bl	80058c8 <HAL_GetTick>
 8008d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d12:	e008      	b.n	8008d26 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d14:	f7fc fdd8 	bl	80058c8 <HAL_GetTick>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d901      	bls.n	8008d26 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e057      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d26:	4b10      	ldr	r3, [pc, #64]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d0f0      	beq.n	8008d14 <HAL_RCC_OscConfig+0x478>
 8008d32:	e04f      	b.n	8008dd4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d34:	4b0c      	ldr	r3, [pc, #48]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a0b      	ldr	r2, [pc, #44]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008d3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d40:	f7fc fdc2 	bl	80058c8 <HAL_GetTick>
 8008d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d46:	e008      	b.n	8008d5a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d48:	f7fc fdbe 	bl	80058c8 <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d901      	bls.n	8008d5a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008d56:	2303      	movs	r3, #3
 8008d58:	e03d      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d5a:	4b03      	ldr	r3, [pc, #12]	@ (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1f0      	bne.n	8008d48 <HAL_RCC_OscConfig+0x4ac>
 8008d66:	e035      	b.n	8008dd4 <HAL_RCC_OscConfig+0x538>
 8008d68:	40023800 	.word	0x40023800
 8008d6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008d70:	4b1b      	ldr	r3, [pc, #108]	@ (8008de0 <HAL_RCC_OscConfig+0x544>)
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d028      	beq.n	8008dd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d121      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d11a      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008da0:	4013      	ands	r3, r2
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008da6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d111      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db6:	085b      	lsrs	r3, r3, #1
 8008db8:	3b01      	subs	r3, #1
 8008dba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d107      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d001      	beq.n	8008dd4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e000      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3718      	adds	r7, #24
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	40023800 	.word	0x40023800

08008de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008dee:	2300      	movs	r3, #0
 8008df0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d101      	bne.n	8008dfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e0d0      	b.n	8008f9e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008dfc:	4b6a      	ldr	r3, [pc, #424]	@ (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 030f 	and.w	r3, r3, #15
 8008e04:	683a      	ldr	r2, [r7, #0]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d910      	bls.n	8008e2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e0a:	4b67      	ldr	r3, [pc, #412]	@ (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f023 020f 	bic.w	r2, r3, #15
 8008e12:	4965      	ldr	r1, [pc, #404]	@ (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e1a:	4b63      	ldr	r3, [pc, #396]	@ (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 030f 	and.w	r3, r3, #15
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d001      	beq.n	8008e2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e0b8      	b.n	8008f9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 0302 	and.w	r3, r3, #2
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d020      	beq.n	8008e7a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0304 	and.w	r3, r3, #4
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d005      	beq.n	8008e50 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008e44:	4b59      	ldr	r3, [pc, #356]	@ (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	4a58      	ldr	r2, [pc, #352]	@ (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008e4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008e4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 0308 	and.w	r3, r3, #8
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d005      	beq.n	8008e68 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008e5c:	4b53      	ldr	r3, [pc, #332]	@ (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	4a52      	ldr	r2, [pc, #328]	@ (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008e62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008e66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e68:	4b50      	ldr	r3, [pc, #320]	@ (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	494d      	ldr	r1, [pc, #308]	@ (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 0301 	and.w	r3, r3, #1
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d040      	beq.n	8008f08 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d107      	bne.n	8008e9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e8e:	4b47      	ldr	r3, [pc, #284]	@ (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d115      	bne.n	8008ec6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e07f      	b.n	8008f9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	d107      	bne.n	8008eb6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ea6:	4b41      	ldr	r3, [pc, #260]	@ (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d109      	bne.n	8008ec6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e073      	b.n	8008f9e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008eb6:	4b3d      	ldr	r3, [pc, #244]	@ (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f003 0302 	and.w	r3, r3, #2
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d101      	bne.n	8008ec6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e06b      	b.n	8008f9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ec6:	4b39      	ldr	r3, [pc, #228]	@ (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	f023 0203 	bic.w	r2, r3, #3
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	4936      	ldr	r1, [pc, #216]	@ (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ed8:	f7fc fcf6 	bl	80058c8 <HAL_GetTick>
 8008edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ede:	e00a      	b.n	8008ef6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ee0:	f7fc fcf2 	bl	80058c8 <HAL_GetTick>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d901      	bls.n	8008ef6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	e053      	b.n	8008f9e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f003 020c 	and.w	r2, r3, #12
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d1eb      	bne.n	8008ee0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f08:	4b27      	ldr	r3, [pc, #156]	@ (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 030f 	and.w	r3, r3, #15
 8008f10:	683a      	ldr	r2, [r7, #0]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d210      	bcs.n	8008f38 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f16:	4b24      	ldr	r3, [pc, #144]	@ (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f023 020f 	bic.w	r2, r3, #15
 8008f1e:	4922      	ldr	r1, [pc, #136]	@ (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f26:	4b20      	ldr	r3, [pc, #128]	@ (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 030f 	and.w	r3, r3, #15
 8008f2e:	683a      	ldr	r2, [r7, #0]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d001      	beq.n	8008f38 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	e032      	b.n	8008f9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 0304 	and.w	r3, r3, #4
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d008      	beq.n	8008f56 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f44:	4b19      	ldr	r3, [pc, #100]	@ (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	4916      	ldr	r1, [pc, #88]	@ (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008f52:	4313      	orrs	r3, r2
 8008f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f003 0308 	and.w	r3, r3, #8
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d009      	beq.n	8008f76 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008f62:	4b12      	ldr	r3, [pc, #72]	@ (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	00db      	lsls	r3, r3, #3
 8008f70:	490e      	ldr	r1, [pc, #56]	@ (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008f72:	4313      	orrs	r3, r2
 8008f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008f76:	f000 f821 	bl	8008fbc <HAL_RCC_GetSysClockFreq>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	091b      	lsrs	r3, r3, #4
 8008f82:	f003 030f 	and.w	r3, r3, #15
 8008f86:	490a      	ldr	r1, [pc, #40]	@ (8008fb0 <HAL_RCC_ClockConfig+0x1cc>)
 8008f88:	5ccb      	ldrb	r3, [r1, r3]
 8008f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f8e:	4a09      	ldr	r2, [pc, #36]	@ (8008fb4 <HAL_RCC_ClockConfig+0x1d0>)
 8008f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008f92:	4b09      	ldr	r3, [pc, #36]	@ (8008fb8 <HAL_RCC_ClockConfig+0x1d4>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fc f978 	bl	800528c <HAL_InitTick>

  return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	40023c00 	.word	0x40023c00
 8008fac:	40023800 	.word	0x40023800
 8008fb0:	0801f7b4 	.word	0x0801f7b4
 8008fb4:	20000048 	.word	0x20000048
 8008fb8:	2000004c 	.word	0x2000004c

08008fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fc0:	b090      	sub	sp, #64	@ 0x40
 8008fc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fc8:	2300      	movs	r3, #0
 8008fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fcc:	2300      	movs	r3, #0
 8008fce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008fd4:	4b59      	ldr	r3, [pc, #356]	@ (800913c <HAL_RCC_GetSysClockFreq+0x180>)
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	f003 030c 	and.w	r3, r3, #12
 8008fdc:	2b08      	cmp	r3, #8
 8008fde:	d00d      	beq.n	8008ffc <HAL_RCC_GetSysClockFreq+0x40>
 8008fe0:	2b08      	cmp	r3, #8
 8008fe2:	f200 80a1 	bhi.w	8009128 <HAL_RCC_GetSysClockFreq+0x16c>
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d002      	beq.n	8008ff0 <HAL_RCC_GetSysClockFreq+0x34>
 8008fea:	2b04      	cmp	r3, #4
 8008fec:	d003      	beq.n	8008ff6 <HAL_RCC_GetSysClockFreq+0x3a>
 8008fee:	e09b      	b.n	8009128 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ff0:	4b53      	ldr	r3, [pc, #332]	@ (8009140 <HAL_RCC_GetSysClockFreq+0x184>)
 8008ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008ff4:	e09b      	b.n	800912e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ff6:	4b53      	ldr	r3, [pc, #332]	@ (8009144 <HAL_RCC_GetSysClockFreq+0x188>)
 8008ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008ffa:	e098      	b.n	800912e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ffc:	4b4f      	ldr	r3, [pc, #316]	@ (800913c <HAL_RCC_GetSysClockFreq+0x180>)
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009004:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009006:	4b4d      	ldr	r3, [pc, #308]	@ (800913c <HAL_RCC_GetSysClockFreq+0x180>)
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800900e:	2b00      	cmp	r3, #0
 8009010:	d028      	beq.n	8009064 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009012:	4b4a      	ldr	r3, [pc, #296]	@ (800913c <HAL_RCC_GetSysClockFreq+0x180>)
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	099b      	lsrs	r3, r3, #6
 8009018:	2200      	movs	r2, #0
 800901a:	623b      	str	r3, [r7, #32]
 800901c:	627a      	str	r2, [r7, #36]	@ 0x24
 800901e:	6a3b      	ldr	r3, [r7, #32]
 8009020:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009024:	2100      	movs	r1, #0
 8009026:	4b47      	ldr	r3, [pc, #284]	@ (8009144 <HAL_RCC_GetSysClockFreq+0x188>)
 8009028:	fb03 f201 	mul.w	r2, r3, r1
 800902c:	2300      	movs	r3, #0
 800902e:	fb00 f303 	mul.w	r3, r0, r3
 8009032:	4413      	add	r3, r2
 8009034:	4a43      	ldr	r2, [pc, #268]	@ (8009144 <HAL_RCC_GetSysClockFreq+0x188>)
 8009036:	fba0 1202 	umull	r1, r2, r0, r2
 800903a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800903c:	460a      	mov	r2, r1
 800903e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009040:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009042:	4413      	add	r3, r2
 8009044:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009048:	2200      	movs	r2, #0
 800904a:	61bb      	str	r3, [r7, #24]
 800904c:	61fa      	str	r2, [r7, #28]
 800904e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009052:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009056:	f7f7 fd19 	bl	8000a8c <__aeabi_uldivmod>
 800905a:	4602      	mov	r2, r0
 800905c:	460b      	mov	r3, r1
 800905e:	4613      	mov	r3, r2
 8009060:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009062:	e053      	b.n	800910c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009064:	4b35      	ldr	r3, [pc, #212]	@ (800913c <HAL_RCC_GetSysClockFreq+0x180>)
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	099b      	lsrs	r3, r3, #6
 800906a:	2200      	movs	r2, #0
 800906c:	613b      	str	r3, [r7, #16]
 800906e:	617a      	str	r2, [r7, #20]
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009076:	f04f 0b00 	mov.w	fp, #0
 800907a:	4652      	mov	r2, sl
 800907c:	465b      	mov	r3, fp
 800907e:	f04f 0000 	mov.w	r0, #0
 8009082:	f04f 0100 	mov.w	r1, #0
 8009086:	0159      	lsls	r1, r3, #5
 8009088:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800908c:	0150      	lsls	r0, r2, #5
 800908e:	4602      	mov	r2, r0
 8009090:	460b      	mov	r3, r1
 8009092:	ebb2 080a 	subs.w	r8, r2, sl
 8009096:	eb63 090b 	sbc.w	r9, r3, fp
 800909a:	f04f 0200 	mov.w	r2, #0
 800909e:	f04f 0300 	mov.w	r3, #0
 80090a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80090a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80090aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80090ae:	ebb2 0408 	subs.w	r4, r2, r8
 80090b2:	eb63 0509 	sbc.w	r5, r3, r9
 80090b6:	f04f 0200 	mov.w	r2, #0
 80090ba:	f04f 0300 	mov.w	r3, #0
 80090be:	00eb      	lsls	r3, r5, #3
 80090c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80090c4:	00e2      	lsls	r2, r4, #3
 80090c6:	4614      	mov	r4, r2
 80090c8:	461d      	mov	r5, r3
 80090ca:	eb14 030a 	adds.w	r3, r4, sl
 80090ce:	603b      	str	r3, [r7, #0]
 80090d0:	eb45 030b 	adc.w	r3, r5, fp
 80090d4:	607b      	str	r3, [r7, #4]
 80090d6:	f04f 0200 	mov.w	r2, #0
 80090da:	f04f 0300 	mov.w	r3, #0
 80090de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80090e2:	4629      	mov	r1, r5
 80090e4:	028b      	lsls	r3, r1, #10
 80090e6:	4621      	mov	r1, r4
 80090e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80090ec:	4621      	mov	r1, r4
 80090ee:	028a      	lsls	r2, r1, #10
 80090f0:	4610      	mov	r0, r2
 80090f2:	4619      	mov	r1, r3
 80090f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090f6:	2200      	movs	r2, #0
 80090f8:	60bb      	str	r3, [r7, #8]
 80090fa:	60fa      	str	r2, [r7, #12]
 80090fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009100:	f7f7 fcc4 	bl	8000a8c <__aeabi_uldivmod>
 8009104:	4602      	mov	r2, r0
 8009106:	460b      	mov	r3, r1
 8009108:	4613      	mov	r3, r2
 800910a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800910c:	4b0b      	ldr	r3, [pc, #44]	@ (800913c <HAL_RCC_GetSysClockFreq+0x180>)
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	0c1b      	lsrs	r3, r3, #16
 8009112:	f003 0303 	and.w	r3, r3, #3
 8009116:	3301      	adds	r3, #1
 8009118:	005b      	lsls	r3, r3, #1
 800911a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800911c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800911e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009120:	fbb2 f3f3 	udiv	r3, r2, r3
 8009124:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009126:	e002      	b.n	800912e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009128:	4b05      	ldr	r3, [pc, #20]	@ (8009140 <HAL_RCC_GetSysClockFreq+0x184>)
 800912a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800912c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800912e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009130:	4618      	mov	r0, r3
 8009132:	3740      	adds	r7, #64	@ 0x40
 8009134:	46bd      	mov	sp, r7
 8009136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800913a:	bf00      	nop
 800913c:	40023800 	.word	0x40023800
 8009140:	00f42400 	.word	0x00f42400
 8009144:	017d7840 	.word	0x017d7840

08009148 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009148:	b480      	push	{r7}
 800914a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800914c:	4b03      	ldr	r3, [pc, #12]	@ (800915c <HAL_RCC_GetHCLKFreq+0x14>)
 800914e:	681b      	ldr	r3, [r3, #0]
}
 8009150:	4618      	mov	r0, r3
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	20000048 	.word	0x20000048

08009160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009164:	f7ff fff0 	bl	8009148 <HAL_RCC_GetHCLKFreq>
 8009168:	4602      	mov	r2, r0
 800916a:	4b05      	ldr	r3, [pc, #20]	@ (8009180 <HAL_RCC_GetPCLK1Freq+0x20>)
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	0a9b      	lsrs	r3, r3, #10
 8009170:	f003 0307 	and.w	r3, r3, #7
 8009174:	4903      	ldr	r1, [pc, #12]	@ (8009184 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009176:	5ccb      	ldrb	r3, [r1, r3]
 8009178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800917c:	4618      	mov	r0, r3
 800917e:	bd80      	pop	{r7, pc}
 8009180:	40023800 	.word	0x40023800
 8009184:	0801f7c4 	.word	0x0801f7c4

08009188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800918c:	f7ff ffdc 	bl	8009148 <HAL_RCC_GetHCLKFreq>
 8009190:	4602      	mov	r2, r0
 8009192:	4b05      	ldr	r3, [pc, #20]	@ (80091a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	0b5b      	lsrs	r3, r3, #13
 8009198:	f003 0307 	and.w	r3, r3, #7
 800919c:	4903      	ldr	r1, [pc, #12]	@ (80091ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800919e:	5ccb      	ldrb	r3, [r1, r3]
 80091a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	40023800 	.word	0x40023800
 80091ac:	0801f7c4 	.word	0x0801f7c4

080091b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	220f      	movs	r2, #15
 80091be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80091c0:	4b12      	ldr	r3, [pc, #72]	@ (800920c <HAL_RCC_GetClockConfig+0x5c>)
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	f003 0203 	and.w	r2, r3, #3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80091cc:	4b0f      	ldr	r3, [pc, #60]	@ (800920c <HAL_RCC_GetClockConfig+0x5c>)
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80091d8:	4b0c      	ldr	r3, [pc, #48]	@ (800920c <HAL_RCC_GetClockConfig+0x5c>)
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80091e4:	4b09      	ldr	r3, [pc, #36]	@ (800920c <HAL_RCC_GetClockConfig+0x5c>)
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	08db      	lsrs	r3, r3, #3
 80091ea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80091f2:	4b07      	ldr	r3, [pc, #28]	@ (8009210 <HAL_RCC_GetClockConfig+0x60>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 020f 	and.w	r2, r3, #15
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	601a      	str	r2, [r3, #0]
}
 80091fe:	bf00      	nop
 8009200:	370c      	adds	r7, #12
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	40023800 	.word	0x40023800
 8009210:	40023c00 	.word	0x40023c00

08009214 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b088      	sub	sp, #32
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800921c:	2300      	movs	r3, #0
 800921e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009220:	2300      	movs	r3, #0
 8009222:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009224:	2300      	movs	r3, #0
 8009226:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009228:	2300      	movs	r3, #0
 800922a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800922c:	2300      	movs	r3, #0
 800922e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 0301 	and.w	r3, r3, #1
 8009238:	2b00      	cmp	r3, #0
 800923a:	d012      	beq.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800923c:	4b69      	ldr	r3, [pc, #420]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	4a68      	ldr	r2, [pc, #416]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009242:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009246:	6093      	str	r3, [r2, #8]
 8009248:	4b66      	ldr	r3, [pc, #408]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800924a:	689a      	ldr	r2, [r3, #8]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009250:	4964      	ldr	r1, [pc, #400]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009252:	4313      	orrs	r3, r2
 8009254:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800925a:	2b00      	cmp	r3, #0
 800925c:	d101      	bne.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800925e:	2301      	movs	r3, #1
 8009260:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800926a:	2b00      	cmp	r3, #0
 800926c:	d017      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800926e:	4b5d      	ldr	r3, [pc, #372]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009270:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009274:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800927c:	4959      	ldr	r1, [pc, #356]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800927e:	4313      	orrs	r3, r2
 8009280:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009288:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800928c:	d101      	bne.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800928e:	2301      	movs	r3, #1
 8009290:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009296:	2b00      	cmp	r3, #0
 8009298:	d101      	bne.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800929a:	2301      	movs	r3, #1
 800929c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d017      	beq.n	80092da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80092aa:	4b4e      	ldr	r3, [pc, #312]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092b0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092b8:	494a      	ldr	r1, [pc, #296]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092ba:	4313      	orrs	r3, r2
 80092bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80092c8:	d101      	bne.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80092ca:	2301      	movs	r3, #1
 80092cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d101      	bne.n	80092da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80092d6:	2301      	movs	r3, #1
 80092d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80092e6:	2301      	movs	r3, #1
 80092e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f003 0320 	and.w	r3, r3, #32
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f000 808b 	beq.w	800940e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80092f8:	4b3a      	ldr	r3, [pc, #232]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092fc:	4a39      	ldr	r2, [pc, #228]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009302:	6413      	str	r3, [r2, #64]	@ 0x40
 8009304:	4b37      	ldr	r3, [pc, #220]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800930c:	60bb      	str	r3, [r7, #8]
 800930e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009310:	4b35      	ldr	r3, [pc, #212]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a34      	ldr	r2, [pc, #208]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009316:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800931a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800931c:	f7fc fad4 	bl	80058c8 <HAL_GetTick>
 8009320:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009322:	e008      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009324:	f7fc fad0 	bl	80058c8 <HAL_GetTick>
 8009328:	4602      	mov	r2, r0
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	2b64      	cmp	r3, #100	@ 0x64
 8009330:	d901      	bls.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009332:	2303      	movs	r3, #3
 8009334:	e357      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009336:	4b2c      	ldr	r3, [pc, #176]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800933e:	2b00      	cmp	r3, #0
 8009340:	d0f0      	beq.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009342:	4b28      	ldr	r3, [pc, #160]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009346:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800934a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d035      	beq.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009356:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800935a:	693a      	ldr	r2, [r7, #16]
 800935c:	429a      	cmp	r2, r3
 800935e:	d02e      	beq.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009360:	4b20      	ldr	r3, [pc, #128]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009364:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009368:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800936a:	4b1e      	ldr	r3, [pc, #120]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800936c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800936e:	4a1d      	ldr	r2, [pc, #116]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009374:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009376:	4b1b      	ldr	r3, [pc, #108]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800937a:	4a1a      	ldr	r2, [pc, #104]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800937c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009380:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009382:	4a18      	ldr	r2, [pc, #96]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009388:	4b16      	ldr	r3, [pc, #88]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800938a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800938c:	f003 0301 	and.w	r3, r3, #1
 8009390:	2b01      	cmp	r3, #1
 8009392:	d114      	bne.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009394:	f7fc fa98 	bl	80058c8 <HAL_GetTick>
 8009398:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800939a:	e00a      	b.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800939c:	f7fc fa94 	bl	80058c8 <HAL_GetTick>
 80093a0:	4602      	mov	r2, r0
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	1ad3      	subs	r3, r2, r3
 80093a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d901      	bls.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80093ae:	2303      	movs	r3, #3
 80093b0:	e319      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093b2:	4b0c      	ldr	r3, [pc, #48]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093b6:	f003 0302 	and.w	r3, r3, #2
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d0ee      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093ca:	d111      	bne.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80093cc:	4b05      	ldr	r3, [pc, #20]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80093d8:	4b04      	ldr	r3, [pc, #16]	@ (80093ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80093da:	400b      	ands	r3, r1
 80093dc:	4901      	ldr	r1, [pc, #4]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093de:	4313      	orrs	r3, r2
 80093e0:	608b      	str	r3, [r1, #8]
 80093e2:	e00b      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80093e4:	40023800 	.word	0x40023800
 80093e8:	40007000 	.word	0x40007000
 80093ec:	0ffffcff 	.word	0x0ffffcff
 80093f0:	4baa      	ldr	r3, [pc, #680]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	4aa9      	ldr	r2, [pc, #676]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093f6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80093fa:	6093      	str	r3, [r2, #8]
 80093fc:	4ba7      	ldr	r3, [pc, #668]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009408:	49a4      	ldr	r1, [pc, #656]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800940a:	4313      	orrs	r3, r2
 800940c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 0310 	and.w	r3, r3, #16
 8009416:	2b00      	cmp	r3, #0
 8009418:	d010      	beq.n	800943c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800941a:	4ba0      	ldr	r3, [pc, #640]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800941c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009420:	4a9e      	ldr	r2, [pc, #632]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009422:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009426:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800942a:	4b9c      	ldr	r3, [pc, #624]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800942c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009434:	4999      	ldr	r1, [pc, #612]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009436:	4313      	orrs	r3, r2
 8009438:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009444:	2b00      	cmp	r3, #0
 8009446:	d00a      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009448:	4b94      	ldr	r3, [pc, #592]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800944a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800944e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009456:	4991      	ldr	r1, [pc, #580]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009458:	4313      	orrs	r3, r2
 800945a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00a      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800946a:	4b8c      	ldr	r3, [pc, #560]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800946c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009470:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009478:	4988      	ldr	r1, [pc, #544]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800947a:	4313      	orrs	r3, r2
 800947c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00a      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800948c:	4b83      	ldr	r3, [pc, #524]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800948e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009492:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800949a:	4980      	ldr	r1, [pc, #512]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800949c:	4313      	orrs	r3, r2
 800949e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00a      	beq.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80094ae:	4b7b      	ldr	r3, [pc, #492]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094b4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094bc:	4977      	ldr	r1, [pc, #476]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094be:	4313      	orrs	r3, r2
 80094c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00a      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80094d0:	4b72      	ldr	r3, [pc, #456]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094d6:	f023 0203 	bic.w	r2, r3, #3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094de:	496f      	ldr	r1, [pc, #444]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094e0:	4313      	orrs	r3, r2
 80094e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00a      	beq.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80094f2:	4b6a      	ldr	r3, [pc, #424]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094f8:	f023 020c 	bic.w	r2, r3, #12
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009500:	4966      	ldr	r1, [pc, #408]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009502:	4313      	orrs	r3, r2
 8009504:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00a      	beq.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009514:	4b61      	ldr	r3, [pc, #388]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800951a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009522:	495e      	ldr	r1, [pc, #376]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009524:	4313      	orrs	r3, r2
 8009526:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00a      	beq.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009536:	4b59      	ldr	r3, [pc, #356]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800953c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009544:	4955      	ldr	r1, [pc, #340]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009546:	4313      	orrs	r3, r2
 8009548:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00a      	beq.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009558:	4b50      	ldr	r3, [pc, #320]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800955a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800955e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009566:	494d      	ldr	r1, [pc, #308]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009568:	4313      	orrs	r3, r2
 800956a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00a      	beq.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800957a:	4b48      	ldr	r3, [pc, #288]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800957c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009580:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009588:	4944      	ldr	r1, [pc, #272]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800958a:	4313      	orrs	r3, r2
 800958c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009598:	2b00      	cmp	r3, #0
 800959a:	d00a      	beq.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800959c:	4b3f      	ldr	r3, [pc, #252]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800959e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095a2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095aa:	493c      	ldr	r1, [pc, #240]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095ac:	4313      	orrs	r3, r2
 80095ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00a      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80095be:	4b37      	ldr	r3, [pc, #220]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095cc:	4933      	ldr	r1, [pc, #204]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095ce:	4313      	orrs	r3, r2
 80095d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00a      	beq.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80095e0:	4b2e      	ldr	r3, [pc, #184]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095e6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095ee:	492b      	ldr	r1, [pc, #172]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095f0:	4313      	orrs	r3, r2
 80095f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d011      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009602:	4b26      	ldr	r3, [pc, #152]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009608:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009610:	4922      	ldr	r1, [pc, #136]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009612:	4313      	orrs	r3, r2
 8009614:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800961c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009620:	d101      	bne.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009622:	2301      	movs	r3, #1
 8009624:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f003 0308 	and.w	r3, r3, #8
 800962e:	2b00      	cmp	r3, #0
 8009630:	d001      	beq.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009632:	2301      	movs	r3, #1
 8009634:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00a      	beq.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009642:	4b16      	ldr	r3, [pc, #88]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009648:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009650:	4912      	ldr	r1, [pc, #72]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009652:	4313      	orrs	r3, r2
 8009654:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00b      	beq.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009664:	4b0d      	ldr	r3, [pc, #52]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800966a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009674:	4909      	ldr	r1, [pc, #36]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009676:	4313      	orrs	r3, r2
 8009678:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	2b01      	cmp	r3, #1
 8009680:	d006      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800968a:	2b00      	cmp	r3, #0
 800968c:	f000 80d9 	beq.w	8009842 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009690:	4b02      	ldr	r3, [pc, #8]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a01      	ldr	r2, [pc, #4]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009696:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800969a:	e001      	b.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800969c:	40023800 	.word	0x40023800
 80096a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096a2:	f7fc f911 	bl	80058c8 <HAL_GetTick>
 80096a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80096a8:	e008      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80096aa:	f7fc f90d 	bl	80058c8 <HAL_GetTick>
 80096ae:	4602      	mov	r2, r0
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	1ad3      	subs	r3, r2, r3
 80096b4:	2b64      	cmp	r3, #100	@ 0x64
 80096b6:	d901      	bls.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80096b8:	2303      	movs	r3, #3
 80096ba:	e194      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80096bc:	4b6c      	ldr	r3, [pc, #432]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1f0      	bne.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 0301 	and.w	r3, r3, #1
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d021      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d11d      	bne.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80096dc:	4b64      	ldr	r3, [pc, #400]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096e2:	0c1b      	lsrs	r3, r3, #16
 80096e4:	f003 0303 	and.w	r3, r3, #3
 80096e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80096ea:	4b61      	ldr	r3, [pc, #388]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096f0:	0e1b      	lsrs	r3, r3, #24
 80096f2:	f003 030f 	and.w	r3, r3, #15
 80096f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	019a      	lsls	r2, r3, #6
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	041b      	lsls	r3, r3, #16
 8009702:	431a      	orrs	r2, r3
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	061b      	lsls	r3, r3, #24
 8009708:	431a      	orrs	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	071b      	lsls	r3, r3, #28
 8009710:	4957      	ldr	r1, [pc, #348]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009712:	4313      	orrs	r3, r2
 8009714:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009720:	2b00      	cmp	r3, #0
 8009722:	d004      	beq.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009728:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800972c:	d00a      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009736:	2b00      	cmp	r3, #0
 8009738:	d02e      	beq.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800973e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009742:	d129      	bne.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009744:	4b4a      	ldr	r3, [pc, #296]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009746:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800974a:	0c1b      	lsrs	r3, r3, #16
 800974c:	f003 0303 	and.w	r3, r3, #3
 8009750:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009752:	4b47      	ldr	r3, [pc, #284]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009754:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009758:	0f1b      	lsrs	r3, r3, #28
 800975a:	f003 0307 	and.w	r3, r3, #7
 800975e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	019a      	lsls	r2, r3, #6
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	041b      	lsls	r3, r3, #16
 800976a:	431a      	orrs	r2, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	061b      	lsls	r3, r3, #24
 8009772:	431a      	orrs	r2, r3
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	071b      	lsls	r3, r3, #28
 8009778:	493d      	ldr	r1, [pc, #244]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800977a:	4313      	orrs	r3, r2
 800977c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009780:	4b3b      	ldr	r3, [pc, #236]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009782:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009786:	f023 021f 	bic.w	r2, r3, #31
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800978e:	3b01      	subs	r3, #1
 8009790:	4937      	ldr	r1, [pc, #220]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009792:	4313      	orrs	r3, r2
 8009794:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d01d      	beq.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80097a4:	4b32      	ldr	r3, [pc, #200]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097aa:	0e1b      	lsrs	r3, r3, #24
 80097ac:	f003 030f 	and.w	r3, r3, #15
 80097b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80097b2:	4b2f      	ldr	r3, [pc, #188]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097b8:	0f1b      	lsrs	r3, r3, #28
 80097ba:	f003 0307 	and.w	r3, r3, #7
 80097be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	019a      	lsls	r2, r3, #6
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	041b      	lsls	r3, r3, #16
 80097cc:	431a      	orrs	r2, r3
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	061b      	lsls	r3, r3, #24
 80097d2:	431a      	orrs	r2, r3
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	071b      	lsls	r3, r3, #28
 80097d8:	4925      	ldr	r1, [pc, #148]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097da:	4313      	orrs	r3, r2
 80097dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d011      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	019a      	lsls	r2, r3, #6
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	041b      	lsls	r3, r3, #16
 80097f8:	431a      	orrs	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	061b      	lsls	r3, r3, #24
 8009800:	431a      	orrs	r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	071b      	lsls	r3, r3, #28
 8009808:	4919      	ldr	r1, [pc, #100]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800980a:	4313      	orrs	r3, r2
 800980c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009810:	4b17      	ldr	r3, [pc, #92]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a16      	ldr	r2, [pc, #88]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009816:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800981a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800981c:	f7fc f854 	bl	80058c8 <HAL_GetTick>
 8009820:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009822:	e008      	b.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009824:	f7fc f850 	bl	80058c8 <HAL_GetTick>
 8009828:	4602      	mov	r2, r0
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	2b64      	cmp	r3, #100	@ 0x64
 8009830:	d901      	bls.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009832:	2303      	movs	r3, #3
 8009834:	e0d7      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009836:	4b0e      	ldr	r3, [pc, #56]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800983e:	2b00      	cmp	r3, #0
 8009840:	d0f0      	beq.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	2b01      	cmp	r3, #1
 8009846:	f040 80cd 	bne.w	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800984a:	4b09      	ldr	r3, [pc, #36]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a08      	ldr	r2, [pc, #32]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009850:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009856:	f7fc f837 	bl	80058c8 <HAL_GetTick>
 800985a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800985c:	e00a      	b.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800985e:	f7fc f833 	bl	80058c8 <HAL_GetTick>
 8009862:	4602      	mov	r2, r0
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	1ad3      	subs	r3, r2, r3
 8009868:	2b64      	cmp	r3, #100	@ 0x64
 800986a:	d903      	bls.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800986c:	2303      	movs	r3, #3
 800986e:	e0ba      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009870:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009874:	4b5e      	ldr	r3, [pc, #376]	@ (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800987c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009880:	d0ed      	beq.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800988a:	2b00      	cmp	r3, #0
 800988c:	d003      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009892:	2b00      	cmp	r3, #0
 8009894:	d009      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d02e      	beq.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d12a      	bne.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80098aa:	4b51      	ldr	r3, [pc, #324]	@ (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80098ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098b0:	0c1b      	lsrs	r3, r3, #16
 80098b2:	f003 0303 	and.w	r3, r3, #3
 80098b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80098b8:	4b4d      	ldr	r3, [pc, #308]	@ (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80098ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098be:	0f1b      	lsrs	r3, r3, #28
 80098c0:	f003 0307 	and.w	r3, r3, #7
 80098c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	695b      	ldr	r3, [r3, #20]
 80098ca:	019a      	lsls	r2, r3, #6
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	041b      	lsls	r3, r3, #16
 80098d0:	431a      	orrs	r2, r3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	061b      	lsls	r3, r3, #24
 80098d8:	431a      	orrs	r2, r3
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	071b      	lsls	r3, r3, #28
 80098de:	4944      	ldr	r1, [pc, #272]	@ (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80098e0:	4313      	orrs	r3, r2
 80098e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80098e6:	4b42      	ldr	r3, [pc, #264]	@ (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80098e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098ec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098f4:	3b01      	subs	r3, #1
 80098f6:	021b      	lsls	r3, r3, #8
 80098f8:	493d      	ldr	r1, [pc, #244]	@ (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80098fa:	4313      	orrs	r3, r2
 80098fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009908:	2b00      	cmp	r3, #0
 800990a:	d022      	beq.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009910:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009914:	d11d      	bne.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009916:	4b36      	ldr	r3, [pc, #216]	@ (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800991c:	0e1b      	lsrs	r3, r3, #24
 800991e:	f003 030f 	and.w	r3, r3, #15
 8009922:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009924:	4b32      	ldr	r3, [pc, #200]	@ (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800992a:	0f1b      	lsrs	r3, r3, #28
 800992c:	f003 0307 	and.w	r3, r3, #7
 8009930:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	695b      	ldr	r3, [r3, #20]
 8009936:	019a      	lsls	r2, r3, #6
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a1b      	ldr	r3, [r3, #32]
 800993c:	041b      	lsls	r3, r3, #16
 800993e:	431a      	orrs	r2, r3
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	061b      	lsls	r3, r3, #24
 8009944:	431a      	orrs	r2, r3
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	071b      	lsls	r3, r3, #28
 800994a:	4929      	ldr	r1, [pc, #164]	@ (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800994c:	4313      	orrs	r3, r2
 800994e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 0308 	and.w	r3, r3, #8
 800995a:	2b00      	cmp	r3, #0
 800995c:	d028      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800995e:	4b24      	ldr	r3, [pc, #144]	@ (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009964:	0e1b      	lsrs	r3, r3, #24
 8009966:	f003 030f 	and.w	r3, r3, #15
 800996a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800996c:	4b20      	ldr	r3, [pc, #128]	@ (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800996e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009972:	0c1b      	lsrs	r3, r3, #16
 8009974:	f003 0303 	and.w	r3, r3, #3
 8009978:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	695b      	ldr	r3, [r3, #20]
 800997e:	019a      	lsls	r2, r3, #6
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	041b      	lsls	r3, r3, #16
 8009984:	431a      	orrs	r2, r3
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	061b      	lsls	r3, r3, #24
 800998a:	431a      	orrs	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	69db      	ldr	r3, [r3, #28]
 8009990:	071b      	lsls	r3, r3, #28
 8009992:	4917      	ldr	r1, [pc, #92]	@ (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009994:	4313      	orrs	r3, r2
 8009996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800999a:	4b15      	ldr	r3, [pc, #84]	@ (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800999c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a8:	4911      	ldr	r1, [pc, #68]	@ (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099aa:	4313      	orrs	r3, r2
 80099ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80099b0:	4b0f      	ldr	r3, [pc, #60]	@ (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a0e      	ldr	r2, [pc, #56]	@ (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099bc:	f7fb ff84 	bl	80058c8 <HAL_GetTick>
 80099c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80099c2:	e008      	b.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80099c4:	f7fb ff80 	bl	80058c8 <HAL_GetTick>
 80099c8:	4602      	mov	r2, r0
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	2b64      	cmp	r3, #100	@ 0x64
 80099d0:	d901      	bls.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80099d2:	2303      	movs	r3, #3
 80099d4:	e007      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80099d6:	4b06      	ldr	r3, [pc, #24]	@ (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099e2:	d1ef      	bne.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3720      	adds	r7, #32
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	40023800 	.word	0x40023800

080099f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b087      	sub	sp, #28
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80099fc:	2300      	movs	r3, #0
 80099fe:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8009a00:	2300      	movs	r3, #0
 8009a02:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8009a04:	2300      	movs	r3, #0
 8009a06:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009a12:	f040 808d 	bne.w	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009a16:	4b93      	ldr	r3, [pc, #588]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a1c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009a24:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a2c:	d07c      	beq.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a34:	d87b      	bhi.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d004      	beq.n	8009a46 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a42:	d039      	beq.n	8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009a44:	e073      	b.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009a46:	4b87      	ldr	r3, [pc, #540]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d108      	bne.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009a52:	4b84      	ldr	r3, [pc, #528]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a5a:	4a83      	ldr	r2, [pc, #524]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a60:	613b      	str	r3, [r7, #16]
 8009a62:	e007      	b.n	8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009a64:	4b7f      	ldr	r3, [pc, #508]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a6c:	4a7f      	ldr	r2, [pc, #508]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a72:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009a74:	4b7b      	ldr	r3, [pc, #492]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a7a:	0e1b      	lsrs	r3, r3, #24
 8009a7c:	f003 030f 	and.w	r3, r3, #15
 8009a80:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009a82:	4b78      	ldr	r3, [pc, #480]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a88:	099b      	lsrs	r3, r3, #6
 8009a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a8e:	693a      	ldr	r2, [r7, #16]
 8009a90:	fb03 f202 	mul.w	r2, r3, r2
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a9a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009a9c:	4b71      	ldr	r3, [pc, #452]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009aa2:	0a1b      	lsrs	r3, r3, #8
 8009aa4:	f003 031f 	and.w	r3, r3, #31
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009aac:	697a      	ldr	r2, [r7, #20]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ab4:	617b      	str	r3, [r7, #20]
        break;
 8009ab6:	e03b      	b.n	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009ab8:	4b6a      	ldr	r3, [pc, #424]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d108      	bne.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009ac4:	4b67      	ldr	r3, [pc, #412]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009acc:	4a66      	ldr	r2, [pc, #408]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ad2:	613b      	str	r3, [r7, #16]
 8009ad4:	e007      	b.n	8009ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009ad6:	4b63      	ldr	r3, [pc, #396]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ade:	4a63      	ldr	r2, [pc, #396]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ae4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009ae6:	4b5f      	ldr	r3, [pc, #380]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009aec:	0e1b      	lsrs	r3, r3, #24
 8009aee:	f003 030f 	and.w	r3, r3, #15
 8009af2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009af4:	4b5b      	ldr	r3, [pc, #364]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009afa:	099b      	lsrs	r3, r3, #6
 8009afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b00:	693a      	ldr	r2, [r7, #16]
 8009b02:	fb03 f202 	mul.w	r2, r3, r2
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b0c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009b0e:	4b55      	ldr	r3, [pc, #340]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b14:	f003 031f 	and.w	r3, r3, #31
 8009b18:	3301      	adds	r3, #1
 8009b1a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009b1c:	697a      	ldr	r2, [r7, #20]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b24:	617b      	str	r3, [r7, #20]
        break;
 8009b26:	e003      	b.n	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009b28:	4b51      	ldr	r3, [pc, #324]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009b2a:	617b      	str	r3, [r7, #20]
        break;
 8009b2c:	e000      	b.n	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8009b2e:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b36:	f040 808d 	bne.w	8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009b3a:	4b4a      	ldr	r3, [pc, #296]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b40:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8009b48:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009b50:	d07c      	beq.n	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009b58:	d87b      	bhi.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d004      	beq.n	8009b6a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b66:	d039      	beq.n	8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009b68:	e073      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009b6a:	4b3e      	ldr	r3, [pc, #248]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d108      	bne.n	8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009b76:	4b3b      	ldr	r3, [pc, #236]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b7e:	4a3a      	ldr	r2, [pc, #232]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b84:	613b      	str	r3, [r7, #16]
 8009b86:	e007      	b.n	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009b88:	4b36      	ldr	r3, [pc, #216]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b90:	4a36      	ldr	r2, [pc, #216]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b96:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009b98:	4b32      	ldr	r3, [pc, #200]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b9e:	0e1b      	lsrs	r3, r3, #24
 8009ba0:	f003 030f 	and.w	r3, r3, #15
 8009ba4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009ba6:	4b2f      	ldr	r3, [pc, #188]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bac:	099b      	lsrs	r3, r3, #6
 8009bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	fb03 f202 	mul.w	r2, r3, r2
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bbe:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009bc0:	4b28      	ldr	r3, [pc, #160]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bc6:	0a1b      	lsrs	r3, r3, #8
 8009bc8:	f003 031f 	and.w	r3, r3, #31
 8009bcc:	3301      	adds	r3, #1
 8009bce:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009bd0:	697a      	ldr	r2, [r7, #20]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bd8:	617b      	str	r3, [r7, #20]
        break;
 8009bda:	e03b      	b.n	8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009bdc:	4b21      	ldr	r3, [pc, #132]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d108      	bne.n	8009bfa <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009be8:	4b1e      	ldr	r3, [pc, #120]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bf6:	613b      	str	r3, [r7, #16]
 8009bf8:	e007      	b.n	8009c0a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c02:	4a1a      	ldr	r2, [pc, #104]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c08:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009c0a:	4b16      	ldr	r3, [pc, #88]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c10:	0e1b      	lsrs	r3, r3, #24
 8009c12:	f003 030f 	and.w	r3, r3, #15
 8009c16:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009c18:	4b12      	ldr	r3, [pc, #72]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c1e:	099b      	lsrs	r3, r3, #6
 8009c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c24:	693a      	ldr	r2, [r7, #16]
 8009c26:	fb03 f202 	mul.w	r2, r3, r2
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c30:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009c32:	4b0c      	ldr	r3, [pc, #48]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c38:	f003 031f 	and.w	r3, r3, #31
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009c40:	697a      	ldr	r2, [r7, #20]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c48:	617b      	str	r3, [r7, #20]
        break;
 8009c4a:	e003      	b.n	8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009c4c:	4b08      	ldr	r3, [pc, #32]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009c4e:	617b      	str	r3, [r7, #20]
        break;
 8009c50:	e000      	b.n	8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8009c52:	bf00      	nop
      }
    }
  }

  return frequency;
 8009c54:	697b      	ldr	r3, [r7, #20]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	371c      	adds	r7, #28
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	40023800 	.word	0x40023800
 8009c68:	00f42400 	.word	0x00f42400
 8009c6c:	017d7840 	.word	0x017d7840
 8009c70:	00bb8000 	.word	0x00bb8000

08009c74 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b088      	sub	sp, #32
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8009c80:	2300      	movs	r3, #0
 8009c82:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8009c84:	2300      	movs	r3, #0
 8009c86:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d101      	bne.n	8009c92 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e156      	b.n	8009f40 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d106      	bne.n	8009cac <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f7f9 fc5a 	bl	8003560 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2202      	movs	r2, #2
 8009cb0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 f95b 	bl	8009f70 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	d00c      	beq.n	8009cdc <HAL_SAI_Init+0x68>
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d80d      	bhi.n	8009ce2 <HAL_SAI_Init+0x6e>
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d002      	beq.n	8009cd0 <HAL_SAI_Init+0x5c>
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d003      	beq.n	8009cd6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8009cce:	e008      	b.n	8009ce2 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	61fb      	str	r3, [r7, #28]
      break;
 8009cd4:	e006      	b.n	8009ce4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009cd6:	2310      	movs	r3, #16
 8009cd8:	61fb      	str	r3, [r7, #28]
      break;
 8009cda:	e003      	b.n	8009ce4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009cdc:	2320      	movs	r3, #32
 8009cde:	61fb      	str	r3, [r7, #28]
      break;
 8009ce0:	e000      	b.n	8009ce4 <HAL_SAI_Init+0x70>
      break;
 8009ce2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	2b03      	cmp	r3, #3
 8009cea:	d81e      	bhi.n	8009d2a <HAL_SAI_Init+0xb6>
 8009cec:	a201      	add	r2, pc, #4	@ (adr r2, 8009cf4 <HAL_SAI_Init+0x80>)
 8009cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf2:	bf00      	nop
 8009cf4:	08009d05 	.word	0x08009d05
 8009cf8:	08009d0b 	.word	0x08009d0b
 8009cfc:	08009d13 	.word	0x08009d13
 8009d00:	08009d1b 	.word	0x08009d1b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8009d04:	2300      	movs	r3, #0
 8009d06:	617b      	str	r3, [r7, #20]
    }
    break;
 8009d08:	e010      	b.n	8009d2c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009d0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d0e:	617b      	str	r3, [r7, #20]
    }
    break;
 8009d10:	e00c      	b.n	8009d2c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009d12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009d16:	617b      	str	r3, [r7, #20]
    }
    break;
 8009d18:	e008      	b.n	8009d2c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009d1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009d1e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	f043 0301 	orr.w	r3, r3, #1
 8009d26:	61fb      	str	r3, [r7, #28]
    }
    break;
 8009d28:	e000      	b.n	8009d2c <HAL_SAI_Init+0xb8>
    default:
      break;
 8009d2a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a85      	ldr	r2, [pc, #532]	@ (8009f48 <HAL_SAI_Init+0x2d4>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d004      	beq.n	8009d40 <HAL_SAI_Init+0xcc>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a84      	ldr	r2, [pc, #528]	@ (8009f4c <HAL_SAI_Init+0x2d8>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d103      	bne.n	8009d48 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8009d40:	4a83      	ldr	r2, [pc, #524]	@ (8009f50 <HAL_SAI_Init+0x2dc>)
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	6013      	str	r3, [r2, #0]
 8009d46:	e002      	b.n	8009d4e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009d48:	4a82      	ldr	r2, [pc, #520]	@ (8009f54 <HAL_SAI_Init+0x2e0>)
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	69db      	ldr	r3, [r3, #28]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d04c      	beq.n	8009df0 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8009d56:	2300      	movs	r3, #0
 8009d58:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a7a      	ldr	r2, [pc, #488]	@ (8009f48 <HAL_SAI_Init+0x2d4>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d004      	beq.n	8009d6e <HAL_SAI_Init+0xfa>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a78      	ldr	r2, [pc, #480]	@ (8009f4c <HAL_SAI_Init+0x2d8>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d104      	bne.n	8009d78 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009d6e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009d72:	f7ff fe3f 	bl	80099f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009d76:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a76      	ldr	r2, [pc, #472]	@ (8009f58 <HAL_SAI_Init+0x2e4>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d004      	beq.n	8009d8c <HAL_SAI_Init+0x118>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a75      	ldr	r2, [pc, #468]	@ (8009f5c <HAL_SAI_Init+0x2e8>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d104      	bne.n	8009d96 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009d8c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009d90:	f7ff fe30 	bl	80099f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009d94:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	4613      	mov	r3, r2
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	4413      	add	r3, r2
 8009d9e:	005b      	lsls	r3, r3, #1
 8009da0:	461a      	mov	r2, r3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	69db      	ldr	r3, [r3, #28]
 8009da6:	025b      	lsls	r3, r3, #9
 8009da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dac:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	4a6b      	ldr	r2, [pc, #428]	@ (8009f60 <HAL_SAI_Init+0x2ec>)
 8009db2:	fba2 2303 	umull	r2, r3, r2, r3
 8009db6:	08da      	lsrs	r2, r3, #3
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8009dbc:	68f9      	ldr	r1, [r7, #12]
 8009dbe:	4b68      	ldr	r3, [pc, #416]	@ (8009f60 <HAL_SAI_Init+0x2ec>)
 8009dc0:	fba3 2301 	umull	r2, r3, r3, r1
 8009dc4:	08da      	lsrs	r2, r3, #3
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	4413      	add	r3, r2
 8009dcc:	005b      	lsls	r3, r3, #1
 8009dce:	1aca      	subs	r2, r1, r3
 8009dd0:	2a08      	cmp	r2, #8
 8009dd2:	d904      	bls.n	8009dde <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6a1b      	ldr	r3, [r3, #32]
 8009dd8:	1c5a      	adds	r2, r3, #1
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009de2:	2b04      	cmp	r3, #4
 8009de4:	d104      	bne.n	8009df0 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6a1b      	ldr	r3, [r3, #32]
 8009dea:	085a      	lsrs	r2, r3, #1
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d003      	beq.n	8009e00 <HAL_SAI_Init+0x18c>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	2b02      	cmp	r3, #2
 8009dfe:	d109      	bne.n	8009e14 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d101      	bne.n	8009e0c <HAL_SAI_Init+0x198>
 8009e08:	2300      	movs	r3, #0
 8009e0a:	e001      	b.n	8009e10 <HAL_SAI_Init+0x19c>
 8009e0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e10:	61bb      	str	r3, [r7, #24]
 8009e12:	e008      	b.n	8009e26 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d102      	bne.n	8009e22 <HAL_SAI_Init+0x1ae>
 8009e1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e20:	e000      	b.n	8009e24 <HAL_SAI_Init+0x1b0>
 8009e22:	2300      	movs	r3, #0
 8009e24:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6819      	ldr	r1, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	4b4c      	ldr	r3, [pc, #304]	@ (8009f64 <HAL_SAI_Init+0x2f0>)
 8009e32:	400b      	ands	r3, r1
 8009e34:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	6819      	ldr	r1, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	685a      	ldr	r2, [r3, #4]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e44:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009e4a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e50:	431a      	orrs	r2, r3
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8009e5e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	691b      	ldr	r3, [r3, #16]
 8009e64:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009e6a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a1b      	ldr	r3, [r3, #32]
 8009e70:	051b      	lsls	r3, r3, #20
 8009e72:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	430a      	orrs	r2, r1
 8009e7a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	6859      	ldr	r1, [r3, #4]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	4b38      	ldr	r3, [pc, #224]	@ (8009f68 <HAL_SAI_Init+0x2f4>)
 8009e88:	400b      	ands	r3, r1
 8009e8a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	6859      	ldr	r1, [r3, #4]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	699a      	ldr	r2, [r3, #24]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e9a:	431a      	orrs	r2, r3
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ea0:	431a      	orrs	r2, r3
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	430a      	orrs	r2, r1
 8009ea8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	6899      	ldr	r1, [r3, #8]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	4b2d      	ldr	r3, [pc, #180]	@ (8009f6c <HAL_SAI_Init+0x2f8>)
 8009eb6:	400b      	ands	r3, r1
 8009eb8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	6899      	ldr	r1, [r3, #8]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ec4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009eca:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8009ed0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8009ed6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009edc:	3b01      	subs	r3, #1
 8009ede:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009ee0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	430a      	orrs	r2, r1
 8009ee8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	68d9      	ldr	r1, [r3, #12]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8009ef8:	400b      	ands	r3, r1
 8009efa:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68d9      	ldr	r1, [r3, #12]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f0a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f10:	041b      	lsls	r3, r3, #16
 8009f12:	431a      	orrs	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	021b      	lsls	r3, r3, #8
 8009f1c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	430a      	orrs	r2, r1
 8009f24:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2201      	movs	r2, #1
 8009f32:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3720      	adds	r7, #32
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	40015804 	.word	0x40015804
 8009f4c:	40015824 	.word	0x40015824
 8009f50:	40015800 	.word	0x40015800
 8009f54:	40015c00 	.word	0x40015c00
 8009f58:	40015c04 	.word	0x40015c04
 8009f5c:	40015c24 	.word	0x40015c24
 8009f60:	cccccccd 	.word	0xcccccccd
 8009f64:	ff05c010 	.word	0xff05c010
 8009f68:	ffff1ff0 	.word	0xffff1ff0
 8009f6c:	fff88000 	.word	0xfff88000

08009f70 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b085      	sub	sp, #20
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8009f78:	4b17      	ldr	r3, [pc, #92]	@ (8009fd8 <SAI_Disable+0x68>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a17      	ldr	r2, [pc, #92]	@ (8009fdc <SAI_Disable+0x6c>)
 8009f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f82:	0b1b      	lsrs	r3, r3, #12
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009f9a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	1e5a      	subs	r2, r3, #1
 8009fa0:	60fa      	str	r2, [r7, #12]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d10a      	bne.n	8009fbc <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8009fb6:	2303      	movs	r3, #3
 8009fb8:	72fb      	strb	r3, [r7, #11]
      break;
 8009fba:	e006      	b.n	8009fca <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d1e8      	bne.n	8009f9c <SAI_Disable+0x2c>

  return status;
 8009fca:	7afb      	ldrb	r3, [r7, #11]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3714      	adds	r7, #20
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr
 8009fd8:	20000048 	.word	0x20000048
 8009fdc:	95cbec1b 	.word	0x95cbec1b

08009fe0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d101      	bne.n	8009ff2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e022      	b.n	800a038 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d105      	bne.n	800a00a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f7f9 fba9 	bl	800375c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2203      	movs	r2, #3
 800a00e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 f814 	bl	800a040 <HAL_SD_InitCard>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d001      	beq.n	800a022 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	e00a      	b.n	800a038 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2201      	movs	r2, #1
 800a032:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a040:	b5b0      	push	{r4, r5, r7, lr}
 800a042:	b08e      	sub	sp, #56	@ 0x38
 800a044:	af04      	add	r7, sp, #16
 800a046:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a048:	2300      	movs	r3, #0
 800a04a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800a04c:	2300      	movs	r3, #0
 800a04e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a050:	2300      	movs	r3, #0
 800a052:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a054:	2300      	movs	r3, #0
 800a056:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a058:	2300      	movs	r3, #0
 800a05a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800a05c:	2376      	movs	r3, #118	@ 0x76
 800a05e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681d      	ldr	r5, [r3, #0]
 800a064:	466c      	mov	r4, sp
 800a066:	f107 0314 	add.w	r3, r7, #20
 800a06a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a06e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a072:	f107 0308 	add.w	r3, r7, #8
 800a076:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a078:	4628      	mov	r0, r5
 800a07a:	f002 f8fb 	bl	800c274 <SDMMC_Init>
 800a07e:	4603      	mov	r3, r0
 800a080:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800a084:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d001      	beq.n	800a090 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a08c:	2301      	movs	r3, #1
 800a08e:	e059      	b.n	800a144 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	685a      	ldr	r2, [r3, #4]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a09e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f002 f911 	bl	800c2cc <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	685a      	ldr	r2, [r3, #4]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a0b8:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800a0ba:	2002      	movs	r0, #2
 800a0bc:	f7fb fc10 	bl	80058e0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fd75 	bl	800abb0 <SD_PowerON>
 800a0c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0c8:	6a3b      	ldr	r3, [r7, #32]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d00b      	beq.n	800a0e6 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0da:	6a3b      	ldr	r3, [r7, #32]
 800a0dc:	431a      	orrs	r2, r3
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e02e      	b.n	800a144 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 fc94 	bl	800aa14 <SD_InitCard>
 800a0ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0ee:	6a3b      	ldr	r3, [r7, #32]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d00b      	beq.n	800a10c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a100:	6a3b      	ldr	r3, [r7, #32]
 800a102:	431a      	orrs	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	e01b      	b.n	800a144 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a114:	4618      	mov	r0, r3
 800a116:	f002 f96b 	bl	800c3f0 <SDMMC_CmdBlockLength>
 800a11a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a11c:	6a3b      	ldr	r3, [r7, #32]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d00f      	beq.n	800a142 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a09      	ldr	r2, [pc, #36]	@ (800a14c <HAL_SD_InitCard+0x10c>)
 800a128:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a12e:	6a3b      	ldr	r3, [r7, #32]
 800a130:	431a      	orrs	r2, r3
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2201      	movs	r2, #1
 800a13a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e000      	b.n	800a144 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800a142:	2300      	movs	r3, #0
}
 800a144:	4618      	mov	r0, r3
 800a146:	3728      	adds	r7, #40	@ 0x28
 800a148:	46bd      	mov	sp, r7
 800a14a:	bdb0      	pop	{r4, r5, r7, pc}
 800a14c:	004005ff 	.word	0x004005ff

0800a150 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b08c      	sub	sp, #48	@ 0x30
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
 800a15c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d107      	bne.n	800a178 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a16c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	e0c3      	b.n	800a300 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	2b01      	cmp	r3, #1
 800a182:	f040 80bc 	bne.w	800a2fe <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2200      	movs	r2, #0
 800a18a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a18c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	441a      	add	r2, r3
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a196:	429a      	cmp	r2, r3
 800a198:	d907      	bls.n	800a1aa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a19e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e0aa      	b.n	800a300 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2203      	movs	r2, #3
 800a1ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800a1c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1ce:	4a4e      	ldr	r2, [pc, #312]	@ (800a308 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800a1d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1d6:	4a4d      	ldr	r2, [pc, #308]	@ (800a30c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a1d8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1de:	2200      	movs	r2, #0
 800a1e0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1fa:	689a      	ldr	r2, [r3, #8]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	430a      	orrs	r2, r1
 800a204:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	3380      	adds	r3, #128	@ 0x80
 800a210:	4619      	mov	r1, r3
 800a212:	68ba      	ldr	r2, [r7, #8]
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	025b      	lsls	r3, r3, #9
 800a218:	089b      	lsrs	r3, r3, #2
 800a21a:	f7fc f96d 	bl	80064f8 <HAL_DMA_Start_IT>
 800a21e:	4603      	mov	r3, r0
 800a220:	2b00      	cmp	r3, #0
 800a222:	d017      	beq.n	800a254 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800a232:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a35      	ldr	r2, [pc, #212]	@ (800a310 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a23a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a240:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2201      	movs	r2, #1
 800a24c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800a250:	2301      	movs	r3, #1
 800a252:	e055      	b.n	800a300 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f042 0208 	orr.w	r2, r2, #8
 800a262:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d002      	beq.n	800a272 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800a26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a26e:	025b      	lsls	r3, r3, #9
 800a270:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a272:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a276:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	025b      	lsls	r3, r3, #9
 800a27c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a27e:	2390      	movs	r3, #144	@ 0x90
 800a280:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a282:	2302      	movs	r3, #2
 800a284:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a286:	2300      	movs	r3, #0
 800a288:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a28a:	2301      	movs	r3, #1
 800a28c:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f107 0210 	add.w	r2, r7, #16
 800a296:	4611      	mov	r1, r2
 800a298:	4618      	mov	r0, r3
 800a29a:	f002 f87d 	bl	800c398 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d90a      	bls.n	800a2ba <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2282      	movs	r2, #130	@ 0x82
 800a2a8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f002 f8e1 	bl	800c478 <SDMMC_CmdReadMultiBlock>
 800a2b6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a2b8:	e009      	b.n	800a2ce <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2281      	movs	r2, #129	@ 0x81
 800a2be:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f002 f8b4 	bl	800c434 <SDMMC_CmdReadSingleBlock>
 800a2cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a2ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d012      	beq.n	800a2fa <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a0d      	ldr	r2, [pc, #52]	@ (800a310 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a2da:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2e2:	431a      	orrs	r2, r3
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e002      	b.n	800a300 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	e000      	b.n	800a300 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800a2fe:	2302      	movs	r3, #2
  }
}
 800a300:	4618      	mov	r0, r3
 800a302:	3730      	adds	r7, #48	@ 0x30
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	0800a8ff 	.word	0x0800a8ff
 800a30c:	0800a971 	.word	0x0800a971
 800a310:	004005ff 	.word	0x004005ff

0800a314 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b08c      	sub	sp, #48	@ 0x30
 800a318:	af00      	add	r7, sp, #0
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	60b9      	str	r1, [r7, #8]
 800a31e:	607a      	str	r2, [r7, #4]
 800a320:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d107      	bne.n	800a33c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a330:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a338:	2301      	movs	r3, #1
 800a33a:	e0c6      	b.n	800a4ca <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a342:	b2db      	uxtb	r3, r3
 800a344:	2b01      	cmp	r3, #1
 800a346:	f040 80bf 	bne.w	800a4c8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2200      	movs	r2, #0
 800a34e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a350:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	441a      	add	r2, r3
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d907      	bls.n	800a36e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a362:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a36a:	2301      	movs	r3, #1
 800a36c:	e0ad      	b.n	800a4ca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2203      	movs	r2, #3
 800a372:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2200      	movs	r2, #0
 800a37c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f042 021a 	orr.w	r2, r2, #26
 800a38c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a392:	4a50      	ldr	r2, [pc, #320]	@ (800a4d4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800a394:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a39a:	4a4f      	ldr	r2, [pc, #316]	@ (800a4d8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a39c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d002      	beq.n	800a3b4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b0:	025b      	lsls	r3, r3, #9
 800a3b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d90a      	bls.n	800a3d0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	22a0      	movs	r2, #160	@ 0xa0
 800a3be:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f002 f89a 	bl	800c500 <SDMMC_CmdWriteMultiBlock>
 800a3cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a3ce:	e009      	b.n	800a3e4 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2290      	movs	r2, #144	@ 0x90
 800a3d4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f002 f86d 	bl	800c4bc <SDMMC_CmdWriteSingleBlock>
 800a3e2:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d012      	beq.n	800a410 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a3b      	ldr	r2, [pc, #236]	@ (800a4dc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a3f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3f8:	431a      	orrs	r2, r3
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2201      	movs	r2, #1
 800a402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	e05c      	b.n	800a4ca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f042 0208 	orr.w	r2, r2, #8
 800a41e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a424:	2240      	movs	r2, #64	@ 0x40
 800a426:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a438:	689a      	ldr	r2, [r3, #8]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	430a      	orrs	r2, r1
 800a442:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a448:	68b9      	ldr	r1, [r7, #8]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	3380      	adds	r3, #128	@ 0x80
 800a450:	461a      	mov	r2, r3
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	025b      	lsls	r3, r3, #9
 800a456:	089b      	lsrs	r3, r3, #2
 800a458:	f7fc f84e 	bl	80064f8 <HAL_DMA_Start_IT>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d01a      	beq.n	800a498 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f022 021a 	bic.w	r2, r2, #26
 800a470:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a19      	ldr	r2, [pc, #100]	@ (800a4dc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a478:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a47e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2201      	movs	r2, #1
 800a48a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2200      	movs	r2, #0
 800a492:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a494:	2301      	movs	r3, #1
 800a496:	e018      	b.n	800a4ca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a498:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a49c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	025b      	lsls	r3, r3, #9
 800a4a2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a4a4:	2390      	movs	r3, #144	@ 0x90
 800a4a6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f107 0210 	add.w	r2, r7, #16
 800a4bc:	4611      	mov	r1, r2
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f001 ff6a 	bl	800c398 <SDMMC_ConfigData>

      return HAL_OK;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	e000      	b.n	800a4ca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800a4c8:	2302      	movs	r3, #2
  }
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3730      	adds	r7, #48	@ 0x30
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	0800a8d5 	.word	0x0800a8d5
 800a4d8:	0800a971 	.word	0x0800a971
 800a4dc:	004005ff 	.word	0x004005ff

0800a4e0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a4e8:	bf00      	nop
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a502:	0f9b      	lsrs	r3, r3, #30
 800a504:	b2da      	uxtb	r2, r3
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a50e:	0e9b      	lsrs	r3, r3, #26
 800a510:	b2db      	uxtb	r3, r3
 800a512:	f003 030f 	and.w	r3, r3, #15
 800a516:	b2da      	uxtb	r2, r3
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a520:	0e1b      	lsrs	r3, r3, #24
 800a522:	b2db      	uxtb	r3, r3
 800a524:	f003 0303 	and.w	r3, r3, #3
 800a528:	b2da      	uxtb	r2, r3
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a532:	0c1b      	lsrs	r3, r3, #16
 800a534:	b2da      	uxtb	r2, r3
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a53e:	0a1b      	lsrs	r3, r3, #8
 800a540:	b2da      	uxtb	r2, r3
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a54a:	b2da      	uxtb	r2, r3
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a554:	0d1b      	lsrs	r3, r3, #20
 800a556:	b29a      	uxth	r2, r3
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a560:	0c1b      	lsrs	r3, r3, #16
 800a562:	b2db      	uxtb	r3, r3
 800a564:	f003 030f 	and.w	r3, r3, #15
 800a568:	b2da      	uxtb	r2, r3
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a572:	0bdb      	lsrs	r3, r3, #15
 800a574:	b2db      	uxtb	r3, r3
 800a576:	f003 0301 	and.w	r3, r3, #1
 800a57a:	b2da      	uxtb	r2, r3
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a584:	0b9b      	lsrs	r3, r3, #14
 800a586:	b2db      	uxtb	r3, r3
 800a588:	f003 0301 	and.w	r3, r3, #1
 800a58c:	b2da      	uxtb	r2, r3
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a596:	0b5b      	lsrs	r3, r3, #13
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	f003 0301 	and.w	r3, r3, #1
 800a59e:	b2da      	uxtb	r2, r3
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5a8:	0b1b      	lsrs	r3, r3, #12
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	f003 0301 	and.w	r3, r3, #1
 800a5b0:	b2da      	uxtb	r2, r3
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d163      	bne.n	800a68c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5c8:	009a      	lsls	r2, r3, #2
 800a5ca:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a5ce:	4013      	ands	r3, r2
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800a5d4:	0f92      	lsrs	r2, r2, #30
 800a5d6:	431a      	orrs	r2, r3
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5e0:	0edb      	lsrs	r3, r3, #27
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	f003 0307 	and.w	r3, r3, #7
 800a5e8:	b2da      	uxtb	r2, r3
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5f2:	0e1b      	lsrs	r3, r3, #24
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	f003 0307 	and.w	r3, r3, #7
 800a5fa:	b2da      	uxtb	r2, r3
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a604:	0d5b      	lsrs	r3, r3, #21
 800a606:	b2db      	uxtb	r3, r3
 800a608:	f003 0307 	and.w	r3, r3, #7
 800a60c:	b2da      	uxtb	r2, r3
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a616:	0c9b      	lsrs	r3, r3, #18
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	f003 0307 	and.w	r3, r3, #7
 800a61e:	b2da      	uxtb	r2, r3
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a628:	0bdb      	lsrs	r3, r3, #15
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	f003 0307 	and.w	r3, r3, #7
 800a630:	b2da      	uxtb	r2, r3
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	1c5a      	adds	r2, r3, #1
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	7e1b      	ldrb	r3, [r3, #24]
 800a644:	b2db      	uxtb	r3, r3
 800a646:	f003 0307 	and.w	r3, r3, #7
 800a64a:	3302      	adds	r3, #2
 800a64c:	2201      	movs	r2, #1
 800a64e:	fa02 f303 	lsl.w	r3, r2, r3
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a656:	fb03 f202 	mul.w	r2, r3, r2
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	7a1b      	ldrb	r3, [r3, #8]
 800a662:	b2db      	uxtb	r3, r3
 800a664:	f003 030f 	and.w	r3, r3, #15
 800a668:	2201      	movs	r2, #1
 800a66a:	409a      	lsls	r2, r3
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800a678:	0a52      	lsrs	r2, r2, #9
 800a67a:	fb03 f202 	mul.w	r2, r3, r2
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a688:	661a      	str	r2, [r3, #96]	@ 0x60
 800a68a:	e031      	b.n	800a6f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a690:	2b01      	cmp	r3, #1
 800a692:	d11d      	bne.n	800a6d0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a698:	041b      	lsls	r3, r3, #16
 800a69a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6a2:	0c1b      	lsrs	r3, r3, #16
 800a6a4:	431a      	orrs	r2, r3
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	029a      	lsls	r2, r3, #10
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a6c4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	661a      	str	r2, [r3, #96]	@ 0x60
 800a6ce:	e00f      	b.n	800a6f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a58      	ldr	r2, [pc, #352]	@ (800a838 <HAL_SD_GetCardCSD+0x344>)
 800a6d6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	e09d      	b.n	800a82c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6f4:	0b9b      	lsrs	r3, r3, #14
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	f003 0301 	and.w	r3, r3, #1
 800a6fc:	b2da      	uxtb	r2, r3
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a706:	09db      	lsrs	r3, r3, #7
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a70e:	b2da      	uxtb	r2, r3
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a71e:	b2da      	uxtb	r2, r3
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a728:	0fdb      	lsrs	r3, r3, #31
 800a72a:	b2da      	uxtb	r2, r3
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a734:	0f5b      	lsrs	r3, r3, #29
 800a736:	b2db      	uxtb	r3, r3
 800a738:	f003 0303 	and.w	r3, r3, #3
 800a73c:	b2da      	uxtb	r2, r3
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a746:	0e9b      	lsrs	r3, r3, #26
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	f003 0307 	and.w	r3, r3, #7
 800a74e:	b2da      	uxtb	r2, r3
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a758:	0d9b      	lsrs	r3, r3, #22
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	f003 030f 	and.w	r3, r3, #15
 800a760:	b2da      	uxtb	r2, r3
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a76a:	0d5b      	lsrs	r3, r3, #21
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	f003 0301 	and.w	r3, r3, #1
 800a772:	b2da      	uxtb	r2, r3
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a786:	0c1b      	lsrs	r3, r3, #16
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	f003 0301 	and.w	r3, r3, #1
 800a78e:	b2da      	uxtb	r2, r3
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a79a:	0bdb      	lsrs	r3, r3, #15
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	f003 0301 	and.w	r3, r3, #1
 800a7a2:	b2da      	uxtb	r2, r3
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7ae:	0b9b      	lsrs	r3, r3, #14
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	f003 0301 	and.w	r3, r3, #1
 800a7b6:	b2da      	uxtb	r2, r3
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7c2:	0b5b      	lsrs	r3, r3, #13
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	f003 0301 	and.w	r3, r3, #1
 800a7ca:	b2da      	uxtb	r2, r3
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7d6:	0b1b      	lsrs	r3, r3, #12
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	b2da      	uxtb	r2, r3
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7ea:	0a9b      	lsrs	r3, r3, #10
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	f003 0303 	and.w	r3, r3, #3
 800a7f2:	b2da      	uxtb	r2, r3
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7fe:	0a1b      	lsrs	r3, r3, #8
 800a800:	b2db      	uxtb	r3, r3
 800a802:	f003 0303 	and.w	r3, r3, #3
 800a806:	b2da      	uxtb	r2, r3
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a812:	085b      	lsrs	r3, r3, #1
 800a814:	b2db      	uxtb	r3, r3
 800a816:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a81a:	b2da      	uxtb	r2, r3
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	2201      	movs	r2, #1
 800a826:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr
 800a838:	004005ff 	.word	0x004005ff

0800a83c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	370c      	adds	r7, #12
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b086      	sub	sp, #24
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a89c:	2300      	movs	r3, #0
 800a89e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a8a0:	f107 030c 	add.w	r3, r7, #12
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 fa10 	bl	800accc <SD_SendStatus>
 800a8ac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d005      	beq.n	800a8c0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	431a      	orrs	r2, r3
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	0a5b      	lsrs	r3, r3, #9
 800a8c4:	f003 030f 	and.w	r3, r3, #15
 800a8c8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a8ca:	693b      	ldr	r3, [r7, #16]
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3718      	adds	r7, #24
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8e0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a8f0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800a8f2:	bf00      	nop
 800a8f4:	3714      	adds	r7, #20
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr

0800a8fe <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b084      	sub	sp, #16
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a90a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a910:	2b82      	cmp	r3, #130	@ 0x82
 800a912:	d111      	bne.n	800a938 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4618      	mov	r0, r3
 800a91a:	f001 fe13 	bl	800c544 <SDMMC_CmdStopTransfer>
 800a91e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d008      	beq.n	800a938 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	431a      	orrs	r2, r3
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800a932:	68f8      	ldr	r0, [r7, #12]
 800a934:	f7ff fdd4 	bl	800a4e0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f022 0208 	bic.w	r2, r2, #8
 800a946:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a950:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2201      	movs	r2, #1
 800a956:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2200      	movs	r2, #0
 800a95e:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f002 fa17 	bl	800cd94 <HAL_SD_RxCpltCallback>
#endif
}
 800a966:	bf00      	nop
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
	...

0800a970 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a97c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f7fb ffa4 	bl	80068cc <HAL_DMA_GetError>
 800a984:	4603      	mov	r3, r0
 800a986:	2b02      	cmp	r3, #2
 800a988:	d03e      	beq.n	800aa08 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a98e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a990:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a998:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d002      	beq.n	800a9a6 <SD_DMAError+0x36>
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d12d      	bne.n	800aa02 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a19      	ldr	r2, [pc, #100]	@ (800aa10 <SD_DMAError+0xa0>)
 800a9ac:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800a9bc:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9c2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800a9ca:	6978      	ldr	r0, [r7, #20]
 800a9cc:	f7ff ff62 	bl	800a894 <HAL_SD_GetCardState>
 800a9d0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	2b06      	cmp	r3, #6
 800a9d6:	d002      	beq.n	800a9de <SD_DMAError+0x6e>
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	2b05      	cmp	r3, #5
 800a9dc:	d10a      	bne.n	800a9f4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f001 fdae 	bl	800c544 <SDMMC_CmdStopTransfer>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9ee:	431a      	orrs	r2, r3
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800aa02:	6978      	ldr	r0, [r7, #20]
 800aa04:	f7ff fd6c 	bl	800a4e0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800aa08:	bf00      	nop
 800aa0a:	3718      	adds	r7, #24
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	004005ff 	.word	0x004005ff

0800aa14 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800aa14:	b5b0      	push	{r4, r5, r7, lr}
 800aa16:	b094      	sub	sp, #80	@ 0x50
 800aa18:	af04      	add	r7, sp, #16
 800aa1a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4618      	mov	r0, r3
 800aa26:	f001 fc5f 	bl	800c2e8 <SDMMC_GetPowerState>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d102      	bne.n	800aa36 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aa30:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800aa34:	e0b8      	b.n	800aba8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa3a:	2b03      	cmp	r3, #3
 800aa3c:	d02f      	beq.n	800aa9e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4618      	mov	r0, r3
 800aa44:	f001 fe46 	bl	800c6d4 <SDMMC_CmdSendCID>
 800aa48:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d001      	beq.n	800aa54 <SD_InitCard+0x40>
    {
      return errorstate;
 800aa50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa52:	e0a9      	b.n	800aba8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2100      	movs	r1, #0
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f001 fc89 	bl	800c372 <SDMMC_GetResponse>
 800aa60:	4602      	mov	r2, r0
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2104      	movs	r1, #4
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f001 fc80 	bl	800c372 <SDMMC_GetResponse>
 800aa72:	4602      	mov	r2, r0
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2108      	movs	r1, #8
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f001 fc77 	bl	800c372 <SDMMC_GetResponse>
 800aa84:	4602      	mov	r2, r0
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	210c      	movs	r1, #12
 800aa90:	4618      	mov	r0, r3
 800aa92:	f001 fc6e 	bl	800c372 <SDMMC_GetResponse>
 800aa96:	4602      	mov	r2, r0
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aaa2:	2b03      	cmp	r3, #3
 800aaa4:	d00d      	beq.n	800aac2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f107 020e 	add.w	r2, r7, #14
 800aaae:	4611      	mov	r1, r2
 800aab0:	4618      	mov	r0, r3
 800aab2:	f001 fe4c 	bl	800c74e <SDMMC_CmdSetRelAdd>
 800aab6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d001      	beq.n	800aac2 <SD_InitCard+0xae>
    {
      return errorstate;
 800aabe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aac0:	e072      	b.n	800aba8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aac6:	2b03      	cmp	r3, #3
 800aac8:	d036      	beq.n	800ab38 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800aaca:	89fb      	ldrh	r3, [r7, #14]
 800aacc:	461a      	mov	r2, r3
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aada:	041b      	lsls	r3, r3, #16
 800aadc:	4619      	mov	r1, r3
 800aade:	4610      	mov	r0, r2
 800aae0:	f001 fe16 	bl	800c710 <SDMMC_CmdSendCSD>
 800aae4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d001      	beq.n	800aaf0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800aaec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaee:	e05b      	b.n	800aba8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2100      	movs	r1, #0
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f001 fc3b 	bl	800c372 <SDMMC_GetResponse>
 800aafc:	4602      	mov	r2, r0
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2104      	movs	r1, #4
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f001 fc32 	bl	800c372 <SDMMC_GetResponse>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2108      	movs	r1, #8
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f001 fc29 	bl	800c372 <SDMMC_GetResponse>
 800ab20:	4602      	mov	r2, r0
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	210c      	movs	r1, #12
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f001 fc20 	bl	800c372 <SDMMC_GetResponse>
 800ab32:	4602      	mov	r2, r0
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2104      	movs	r1, #4
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f001 fc17 	bl	800c372 <SDMMC_GetResponse>
 800ab44:	4603      	mov	r3, r0
 800ab46:	0d1a      	lsrs	r2, r3, #20
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ab4c:	f107 0310 	add.w	r3, r7, #16
 800ab50:	4619      	mov	r1, r3
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f7ff fcce 	bl	800a4f4 <HAL_SD_GetCardCSD>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d002      	beq.n	800ab64 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab5e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ab62:	e021      	b.n	800aba8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6819      	ldr	r1, [r3, #0]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab6c:	041b      	lsls	r3, r3, #16
 800ab6e:	2200      	movs	r2, #0
 800ab70:	461c      	mov	r4, r3
 800ab72:	4615      	mov	r5, r2
 800ab74:	4622      	mov	r2, r4
 800ab76:	462b      	mov	r3, r5
 800ab78:	4608      	mov	r0, r1
 800ab7a:	f001 fd05 	bl	800c588 <SDMMC_CmdSelDesel>
 800ab7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d001      	beq.n	800ab8a <SD_InitCard+0x176>
  {
    return errorstate;
 800ab86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab88:	e00e      	b.n	800aba8 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681d      	ldr	r5, [r3, #0]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	466c      	mov	r4, sp
 800ab92:	f103 0210 	add.w	r2, r3, #16
 800ab96:	ca07      	ldmia	r2, {r0, r1, r2}
 800ab98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ab9c:	3304      	adds	r3, #4
 800ab9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aba0:	4628      	mov	r0, r5
 800aba2:	f001 fb67 	bl	800c274 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3740      	adds	r7, #64	@ 0x40
 800abac:	46bd      	mov	sp, r7
 800abae:	bdb0      	pop	{r4, r5, r7, pc}

0800abb0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b086      	sub	sp, #24
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800abb8:	2300      	movs	r3, #0
 800abba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800abbc:	2300      	movs	r3, #0
 800abbe:	617b      	str	r3, [r7, #20]
 800abc0:	2300      	movs	r3, #0
 800abc2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4618      	mov	r0, r3
 800abca:	f001 fd00 	bl	800c5ce <SDMMC_CmdGoIdleState>
 800abce:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d001      	beq.n	800abda <SD_PowerON+0x2a>
  {
    return errorstate;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	e072      	b.n	800acc0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4618      	mov	r0, r3
 800abe0:	f001 fd13 	bl	800c60a <SDMMC_CmdOperCond>
 800abe4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d00d      	beq.n	800ac08 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2200      	movs	r2, #0
 800abf0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4618      	mov	r0, r3
 800abf8:	f001 fce9 	bl	800c5ce <SDMMC_CmdGoIdleState>
 800abfc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d004      	beq.n	800ac0e <SD_PowerON+0x5e>
    {
      return errorstate;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	e05b      	b.n	800acc0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d137      	bne.n	800ac86 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f001 fd13 	bl	800c648 <SDMMC_CmdAppCommand>
 800ac22:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d02d      	beq.n	800ac86 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac2a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ac2e:	e047      	b.n	800acc0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2100      	movs	r1, #0
 800ac36:	4618      	mov	r0, r3
 800ac38:	f001 fd06 	bl	800c648 <SDMMC_CmdAppCommand>
 800ac3c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d001      	beq.n	800ac48 <SD_PowerON+0x98>
    {
      return errorstate;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	e03b      	b.n	800acc0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	491e      	ldr	r1, [pc, #120]	@ (800acc8 <SD_PowerON+0x118>)
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f001 fd1c 	bl	800c68c <SDMMC_CmdAppOperCommand>
 800ac54:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d002      	beq.n	800ac62 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac5c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ac60:	e02e      	b.n	800acc0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	2100      	movs	r1, #0
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f001 fb82 	bl	800c372 <SDMMC_GetResponse>
 800ac6e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	0fdb      	lsrs	r3, r3, #31
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d101      	bne.n	800ac7c <SD_PowerON+0xcc>
 800ac78:	2301      	movs	r3, #1
 800ac7a:	e000      	b.n	800ac7e <SD_PowerON+0xce>
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	613b      	str	r3, [r7, #16]

    count++;
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	3301      	adds	r3, #1
 800ac84:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d802      	bhi.n	800ac96 <SD_PowerON+0xe6>
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d0cc      	beq.n	800ac30 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d902      	bls.n	800aca6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800aca0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800aca4:	e00c      	b.n	800acc0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800acac:	2b00      	cmp	r3, #0
 800acae:	d003      	beq.n	800acb8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2201      	movs	r2, #1
 800acb4:	645a      	str	r2, [r3, #68]	@ 0x44
 800acb6:	e002      	b.n	800acbe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800acbe:	2300      	movs	r3, #0
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3718      	adds	r7, #24
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	c1100000 	.word	0xc1100000

0800accc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d102      	bne.n	800ace2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800acdc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ace0:	e018      	b.n	800ad14 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acea:	041b      	lsls	r3, r3, #16
 800acec:	4619      	mov	r1, r3
 800acee:	4610      	mov	r0, r2
 800acf0:	f001 fd4e 	bl	800c790 <SDMMC_CmdSendStatus>
 800acf4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d001      	beq.n	800ad00 <SD_SendStatus+0x34>
  {
    return errorstate;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	e009      	b.n	800ad14 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2100      	movs	r1, #0
 800ad06:	4618      	mov	r0, r3
 800ad08:	f001 fb33 	bl	800c372 <SDMMC_GetResponse>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ad12:	2300      	movs	r3, #0
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3710      	adds	r7, #16
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b082      	sub	sp, #8
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d101      	bne.n	800ad30 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	e025      	b.n	800ad7c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d106      	bne.n	800ad4a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f7f6 fa99 	bl	800127c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2202      	movs	r2, #2
 800ad4e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681a      	ldr	r2, [r3, #0]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	3304      	adds	r3, #4
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	4610      	mov	r0, r2
 800ad5e:	f001 f987 	bl	800c070 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6818      	ldr	r0, [r3, #0]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	6839      	ldr	r1, [r7, #0]
 800ad6e:	f001 f9db 	bl	800c128 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2201      	movs	r2, #1
 800ad76:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800ad7a:	2300      	movs	r3, #0
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3708      	adds	r7, #8
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b086      	sub	sp, #24
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	60b9      	str	r1, [r7, #8]
 800ad8e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ad96:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800ad98:	7dfb      	ldrb	r3, [r7, #23]
 800ad9a:	2b02      	cmp	r3, #2
 800ad9c:	d101      	bne.n	800ada2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800ad9e:	2302      	movs	r3, #2
 800ada0:	e021      	b.n	800ade6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800ada2:	7dfb      	ldrb	r3, [r7, #23]
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d002      	beq.n	800adae <HAL_SDRAM_SendCommand+0x2a>
 800ada8:	7dfb      	ldrb	r3, [r7, #23]
 800adaa:	2b05      	cmp	r3, #5
 800adac:	d118      	bne.n	800ade0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2202      	movs	r2, #2
 800adb2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	68b9      	ldr	r1, [r7, #8]
 800adbe:	4618      	mov	r0, r3
 800adc0:	f001 fa1c 	bl	800c1fc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2b02      	cmp	r3, #2
 800adca:	d104      	bne.n	800add6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2205      	movs	r2, #5
 800add0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800add4:	e006      	b.n	800ade4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2201      	movs	r2, #1
 800adda:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800adde:	e001      	b.n	800ade4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	e000      	b.n	800ade6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3718      	adds	r7, #24
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b082      	sub	sp, #8
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
 800adf6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	2b02      	cmp	r3, #2
 800ae02:	d101      	bne.n	800ae08 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800ae04:	2302      	movs	r3, #2
 800ae06:	e016      	b.n	800ae36 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d10f      	bne.n	800ae34 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2202      	movs	r2, #2
 800ae18:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	6839      	ldr	r1, [r7, #0]
 800ae22:	4618      	mov	r0, r3
 800ae24:	f001 fa0e 	bl	800c244 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800ae30:	2300      	movs	r3, #0
 800ae32:	e000      	b.n	800ae36 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800ae34:	2301      	movs	r3, #1
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3708      	adds	r7, #8
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b082      	sub	sp, #8
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d101      	bne.n	800ae50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e049      	b.n	800aee4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d106      	bne.n	800ae6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f7fa fc13 	bl	8005690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2202      	movs	r2, #2
 800ae6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681a      	ldr	r2, [r3, #0]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	3304      	adds	r3, #4
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	4610      	mov	r0, r2
 800ae7e:	f000 fabf 	bl	800b400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2201      	movs	r2, #1
 800ae86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2201      	movs	r2, #1
 800ae96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2201      	movs	r2, #1
 800aea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2201      	movs	r2, #1
 800aeae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2201      	movs	r2, #1
 800aebe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2201      	movs	r2, #1
 800aec6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2201      	movs	r2, #1
 800aed6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2201      	movs	r2, #1
 800aede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aee2:	2300      	movs	r3, #0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3708      	adds	r7, #8
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b085      	sub	sp, #20
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d001      	beq.n	800af04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800af00:	2301      	movs	r3, #1
 800af02:	e054      	b.n	800afae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2202      	movs	r2, #2
 800af08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	68da      	ldr	r2, [r3, #12]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f042 0201 	orr.w	r2, r2, #1
 800af1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4a26      	ldr	r2, [pc, #152]	@ (800afbc <HAL_TIM_Base_Start_IT+0xd0>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d022      	beq.n	800af6c <HAL_TIM_Base_Start_IT+0x80>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af2e:	d01d      	beq.n	800af6c <HAL_TIM_Base_Start_IT+0x80>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a22      	ldr	r2, [pc, #136]	@ (800afc0 <HAL_TIM_Base_Start_IT+0xd4>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d018      	beq.n	800af6c <HAL_TIM_Base_Start_IT+0x80>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a21      	ldr	r2, [pc, #132]	@ (800afc4 <HAL_TIM_Base_Start_IT+0xd8>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d013      	beq.n	800af6c <HAL_TIM_Base_Start_IT+0x80>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a1f      	ldr	r2, [pc, #124]	@ (800afc8 <HAL_TIM_Base_Start_IT+0xdc>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d00e      	beq.n	800af6c <HAL_TIM_Base_Start_IT+0x80>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4a1e      	ldr	r2, [pc, #120]	@ (800afcc <HAL_TIM_Base_Start_IT+0xe0>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d009      	beq.n	800af6c <HAL_TIM_Base_Start_IT+0x80>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a1c      	ldr	r2, [pc, #112]	@ (800afd0 <HAL_TIM_Base_Start_IT+0xe4>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d004      	beq.n	800af6c <HAL_TIM_Base_Start_IT+0x80>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a1b      	ldr	r2, [pc, #108]	@ (800afd4 <HAL_TIM_Base_Start_IT+0xe8>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d115      	bne.n	800af98 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	689a      	ldr	r2, [r3, #8]
 800af72:	4b19      	ldr	r3, [pc, #100]	@ (800afd8 <HAL_TIM_Base_Start_IT+0xec>)
 800af74:	4013      	ands	r3, r2
 800af76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2b06      	cmp	r3, #6
 800af7c:	d015      	beq.n	800afaa <HAL_TIM_Base_Start_IT+0xbe>
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af84:	d011      	beq.n	800afaa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f042 0201 	orr.w	r2, r2, #1
 800af94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af96:	e008      	b.n	800afaa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f042 0201 	orr.w	r2, r2, #1
 800afa6:	601a      	str	r2, [r3, #0]
 800afa8:	e000      	b.n	800afac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800afac:	2300      	movs	r3, #0
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3714      	adds	r7, #20
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	40010000 	.word	0x40010000
 800afc0:	40000400 	.word	0x40000400
 800afc4:	40000800 	.word	0x40000800
 800afc8:	40000c00 	.word	0x40000c00
 800afcc:	40010400 	.word	0x40010400
 800afd0:	40014000 	.word	0x40014000
 800afd4:	40001800 	.word	0x40001800
 800afd8:	00010007 	.word	0x00010007

0800afdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	691b      	ldr	r3, [r3, #16]
 800afea:	f003 0302 	and.w	r3, r3, #2
 800afee:	2b02      	cmp	r3, #2
 800aff0:	d122      	bne.n	800b038 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	f003 0302 	and.w	r3, r3, #2
 800affc:	2b02      	cmp	r3, #2
 800affe:	d11b      	bne.n	800b038 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f06f 0202 	mvn.w	r2, #2
 800b008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2201      	movs	r2, #1
 800b00e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	699b      	ldr	r3, [r3, #24]
 800b016:	f003 0303 	and.w	r3, r3, #3
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d003      	beq.n	800b026 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 f9d0 	bl	800b3c4 <HAL_TIM_IC_CaptureCallback>
 800b024:	e005      	b.n	800b032 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 f9c2 	bl	800b3b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 f9d3 	bl	800b3d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	691b      	ldr	r3, [r3, #16]
 800b03e:	f003 0304 	and.w	r3, r3, #4
 800b042:	2b04      	cmp	r3, #4
 800b044:	d122      	bne.n	800b08c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	f003 0304 	and.w	r3, r3, #4
 800b050:	2b04      	cmp	r3, #4
 800b052:	d11b      	bne.n	800b08c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f06f 0204 	mvn.w	r2, #4
 800b05c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2202      	movs	r2, #2
 800b062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	699b      	ldr	r3, [r3, #24]
 800b06a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d003      	beq.n	800b07a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 f9a6 	bl	800b3c4 <HAL_TIM_IC_CaptureCallback>
 800b078:	e005      	b.n	800b086 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 f998 	bl	800b3b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 f9a9 	bl	800b3d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	f003 0308 	and.w	r3, r3, #8
 800b096:	2b08      	cmp	r3, #8
 800b098:	d122      	bne.n	800b0e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	68db      	ldr	r3, [r3, #12]
 800b0a0:	f003 0308 	and.w	r3, r3, #8
 800b0a4:	2b08      	cmp	r3, #8
 800b0a6:	d11b      	bne.n	800b0e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f06f 0208 	mvn.w	r2, #8
 800b0b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2204      	movs	r2, #4
 800b0b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	69db      	ldr	r3, [r3, #28]
 800b0be:	f003 0303 	and.w	r3, r3, #3
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d003      	beq.n	800b0ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 f97c 	bl	800b3c4 <HAL_TIM_IC_CaptureCallback>
 800b0cc:	e005      	b.n	800b0da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 f96e 	bl	800b3b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 f97f 	bl	800b3d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	691b      	ldr	r3, [r3, #16]
 800b0e6:	f003 0310 	and.w	r3, r3, #16
 800b0ea:	2b10      	cmp	r3, #16
 800b0ec:	d122      	bne.n	800b134 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	68db      	ldr	r3, [r3, #12]
 800b0f4:	f003 0310 	and.w	r3, r3, #16
 800b0f8:	2b10      	cmp	r3, #16
 800b0fa:	d11b      	bne.n	800b134 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f06f 0210 	mvn.w	r2, #16
 800b104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2208      	movs	r2, #8
 800b10a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	69db      	ldr	r3, [r3, #28]
 800b112:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b116:	2b00      	cmp	r3, #0
 800b118:	d003      	beq.n	800b122 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 f952 	bl	800b3c4 <HAL_TIM_IC_CaptureCallback>
 800b120:	e005      	b.n	800b12e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 f944 	bl	800b3b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 f955 	bl	800b3d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	691b      	ldr	r3, [r3, #16]
 800b13a:	f003 0301 	and.w	r3, r3, #1
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d10e      	bne.n	800b160 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	f003 0301 	and.w	r3, r3, #1
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d107      	bne.n	800b160 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f06f 0201 	mvn.w	r2, #1
 800b158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f7f8 f940 	bl	80033e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	691b      	ldr	r3, [r3, #16]
 800b166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b16a:	2b80      	cmp	r3, #128	@ 0x80
 800b16c:	d10e      	bne.n	800b18c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b178:	2b80      	cmp	r3, #128	@ 0x80
 800b17a:	d107      	bne.n	800b18c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 fb0c 	bl	800b7a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	691b      	ldr	r3, [r3, #16]
 800b192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b19a:	d10e      	bne.n	800b1ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1a6:	2b80      	cmp	r3, #128	@ 0x80
 800b1a8:	d107      	bne.n	800b1ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b1b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 faff 	bl	800b7b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	691b      	ldr	r3, [r3, #16]
 800b1c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1c4:	2b40      	cmp	r3, #64	@ 0x40
 800b1c6:	d10e      	bne.n	800b1e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1d2:	2b40      	cmp	r3, #64	@ 0x40
 800b1d4:	d107      	bne.n	800b1e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b1de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 f903 	bl	800b3ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	691b      	ldr	r3, [r3, #16]
 800b1ec:	f003 0320 	and.w	r3, r3, #32
 800b1f0:	2b20      	cmp	r3, #32
 800b1f2:	d10e      	bne.n	800b212 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	f003 0320 	and.w	r3, r3, #32
 800b1fe:	2b20      	cmp	r3, #32
 800b200:	d107      	bne.n	800b212 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f06f 0220 	mvn.w	r2, #32
 800b20a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f000 fabf 	bl	800b790 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b212:	bf00      	nop
 800b214:	3708      	adds	r7, #8
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
	...

0800b21c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b084      	sub	sp, #16
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b226:	2300      	movs	r3, #0
 800b228:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b230:	2b01      	cmp	r3, #1
 800b232:	d101      	bne.n	800b238 <HAL_TIM_ConfigClockSource+0x1c>
 800b234:	2302      	movs	r3, #2
 800b236:	e0b4      	b.n	800b3a2 <HAL_TIM_ConfigClockSource+0x186>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2201      	movs	r2, #1
 800b23c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2202      	movs	r2, #2
 800b244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	689b      	ldr	r3, [r3, #8]
 800b24e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b250:	68ba      	ldr	r2, [r7, #8]
 800b252:	4b56      	ldr	r3, [pc, #344]	@ (800b3ac <HAL_TIM_ConfigClockSource+0x190>)
 800b254:	4013      	ands	r3, r2
 800b256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b25e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	68ba      	ldr	r2, [r7, #8]
 800b266:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b270:	d03e      	beq.n	800b2f0 <HAL_TIM_ConfigClockSource+0xd4>
 800b272:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b276:	f200 8087 	bhi.w	800b388 <HAL_TIM_ConfigClockSource+0x16c>
 800b27a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b27e:	f000 8086 	beq.w	800b38e <HAL_TIM_ConfigClockSource+0x172>
 800b282:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b286:	d87f      	bhi.n	800b388 <HAL_TIM_ConfigClockSource+0x16c>
 800b288:	2b70      	cmp	r3, #112	@ 0x70
 800b28a:	d01a      	beq.n	800b2c2 <HAL_TIM_ConfigClockSource+0xa6>
 800b28c:	2b70      	cmp	r3, #112	@ 0x70
 800b28e:	d87b      	bhi.n	800b388 <HAL_TIM_ConfigClockSource+0x16c>
 800b290:	2b60      	cmp	r3, #96	@ 0x60
 800b292:	d050      	beq.n	800b336 <HAL_TIM_ConfigClockSource+0x11a>
 800b294:	2b60      	cmp	r3, #96	@ 0x60
 800b296:	d877      	bhi.n	800b388 <HAL_TIM_ConfigClockSource+0x16c>
 800b298:	2b50      	cmp	r3, #80	@ 0x50
 800b29a:	d03c      	beq.n	800b316 <HAL_TIM_ConfigClockSource+0xfa>
 800b29c:	2b50      	cmp	r3, #80	@ 0x50
 800b29e:	d873      	bhi.n	800b388 <HAL_TIM_ConfigClockSource+0x16c>
 800b2a0:	2b40      	cmp	r3, #64	@ 0x40
 800b2a2:	d058      	beq.n	800b356 <HAL_TIM_ConfigClockSource+0x13a>
 800b2a4:	2b40      	cmp	r3, #64	@ 0x40
 800b2a6:	d86f      	bhi.n	800b388 <HAL_TIM_ConfigClockSource+0x16c>
 800b2a8:	2b30      	cmp	r3, #48	@ 0x30
 800b2aa:	d064      	beq.n	800b376 <HAL_TIM_ConfigClockSource+0x15a>
 800b2ac:	2b30      	cmp	r3, #48	@ 0x30
 800b2ae:	d86b      	bhi.n	800b388 <HAL_TIM_ConfigClockSource+0x16c>
 800b2b0:	2b20      	cmp	r3, #32
 800b2b2:	d060      	beq.n	800b376 <HAL_TIM_ConfigClockSource+0x15a>
 800b2b4:	2b20      	cmp	r3, #32
 800b2b6:	d867      	bhi.n	800b388 <HAL_TIM_ConfigClockSource+0x16c>
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d05c      	beq.n	800b376 <HAL_TIM_ConfigClockSource+0x15a>
 800b2bc:	2b10      	cmp	r3, #16
 800b2be:	d05a      	beq.n	800b376 <HAL_TIM_ConfigClockSource+0x15a>
 800b2c0:	e062      	b.n	800b388 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b2d2:	f000 f9af 	bl	800b634 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b2e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	68ba      	ldr	r2, [r7, #8]
 800b2ec:	609a      	str	r2, [r3, #8]
      break;
 800b2ee:	e04f      	b.n	800b390 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b300:	f000 f998 	bl	800b634 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	689a      	ldr	r2, [r3, #8]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b312:	609a      	str	r2, [r3, #8]
      break;
 800b314:	e03c      	b.n	800b390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b322:	461a      	mov	r2, r3
 800b324:	f000 f90c 	bl	800b540 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2150      	movs	r1, #80	@ 0x50
 800b32e:	4618      	mov	r0, r3
 800b330:	f000 f965 	bl	800b5fe <TIM_ITRx_SetConfig>
      break;
 800b334:	e02c      	b.n	800b390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b342:	461a      	mov	r2, r3
 800b344:	f000 f92b 	bl	800b59e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2160      	movs	r1, #96	@ 0x60
 800b34e:	4618      	mov	r0, r3
 800b350:	f000 f955 	bl	800b5fe <TIM_ITRx_SetConfig>
      break;
 800b354:	e01c      	b.n	800b390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b362:	461a      	mov	r2, r3
 800b364:	f000 f8ec 	bl	800b540 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2140      	movs	r1, #64	@ 0x40
 800b36e:	4618      	mov	r0, r3
 800b370:	f000 f945 	bl	800b5fe <TIM_ITRx_SetConfig>
      break;
 800b374:	e00c      	b.n	800b390 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4619      	mov	r1, r3
 800b380:	4610      	mov	r0, r2
 800b382:	f000 f93c 	bl	800b5fe <TIM_ITRx_SetConfig>
      break;
 800b386:	e003      	b.n	800b390 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b388:	2301      	movs	r3, #1
 800b38a:	73fb      	strb	r3, [r7, #15]
      break;
 800b38c:	e000      	b.n	800b390 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b38e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b3a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	fffeff88 	.word	0xfffeff88

0800b3b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b3b8:	bf00      	nop
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b3cc:	bf00      	nop
 800b3ce:	370c      	adds	r7, #12
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b3f4:	bf00      	nop
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b400:	b480      	push	{r7}
 800b402:	b085      	sub	sp, #20
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	4a40      	ldr	r2, [pc, #256]	@ (800b514 <TIM_Base_SetConfig+0x114>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d013      	beq.n	800b440 <TIM_Base_SetConfig+0x40>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b41e:	d00f      	beq.n	800b440 <TIM_Base_SetConfig+0x40>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	4a3d      	ldr	r2, [pc, #244]	@ (800b518 <TIM_Base_SetConfig+0x118>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d00b      	beq.n	800b440 <TIM_Base_SetConfig+0x40>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	4a3c      	ldr	r2, [pc, #240]	@ (800b51c <TIM_Base_SetConfig+0x11c>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d007      	beq.n	800b440 <TIM_Base_SetConfig+0x40>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	4a3b      	ldr	r2, [pc, #236]	@ (800b520 <TIM_Base_SetConfig+0x120>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d003      	beq.n	800b440 <TIM_Base_SetConfig+0x40>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	4a3a      	ldr	r2, [pc, #232]	@ (800b524 <TIM_Base_SetConfig+0x124>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d108      	bne.n	800b452 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	4313      	orrs	r3, r2
 800b450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	4a2f      	ldr	r2, [pc, #188]	@ (800b514 <TIM_Base_SetConfig+0x114>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d02b      	beq.n	800b4b2 <TIM_Base_SetConfig+0xb2>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b460:	d027      	beq.n	800b4b2 <TIM_Base_SetConfig+0xb2>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	4a2c      	ldr	r2, [pc, #176]	@ (800b518 <TIM_Base_SetConfig+0x118>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d023      	beq.n	800b4b2 <TIM_Base_SetConfig+0xb2>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4a2b      	ldr	r2, [pc, #172]	@ (800b51c <TIM_Base_SetConfig+0x11c>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d01f      	beq.n	800b4b2 <TIM_Base_SetConfig+0xb2>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4a2a      	ldr	r2, [pc, #168]	@ (800b520 <TIM_Base_SetConfig+0x120>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d01b      	beq.n	800b4b2 <TIM_Base_SetConfig+0xb2>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	4a29      	ldr	r2, [pc, #164]	@ (800b524 <TIM_Base_SetConfig+0x124>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d017      	beq.n	800b4b2 <TIM_Base_SetConfig+0xb2>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	4a28      	ldr	r2, [pc, #160]	@ (800b528 <TIM_Base_SetConfig+0x128>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d013      	beq.n	800b4b2 <TIM_Base_SetConfig+0xb2>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	4a27      	ldr	r2, [pc, #156]	@ (800b52c <TIM_Base_SetConfig+0x12c>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d00f      	beq.n	800b4b2 <TIM_Base_SetConfig+0xb2>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	4a26      	ldr	r2, [pc, #152]	@ (800b530 <TIM_Base_SetConfig+0x130>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d00b      	beq.n	800b4b2 <TIM_Base_SetConfig+0xb2>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4a25      	ldr	r2, [pc, #148]	@ (800b534 <TIM_Base_SetConfig+0x134>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d007      	beq.n	800b4b2 <TIM_Base_SetConfig+0xb2>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	4a24      	ldr	r2, [pc, #144]	@ (800b538 <TIM_Base_SetConfig+0x138>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d003      	beq.n	800b4b2 <TIM_Base_SetConfig+0xb2>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	4a23      	ldr	r2, [pc, #140]	@ (800b53c <TIM_Base_SetConfig+0x13c>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d108      	bne.n	800b4c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b4b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	68fa      	ldr	r2, [r7, #12]
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	695b      	ldr	r3, [r3, #20]
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	689a      	ldr	r2, [r3, #8]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	4a0a      	ldr	r2, [pc, #40]	@ (800b514 <TIM_Base_SetConfig+0x114>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d003      	beq.n	800b4f8 <TIM_Base_SetConfig+0xf8>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	4a0c      	ldr	r2, [pc, #48]	@ (800b524 <TIM_Base_SetConfig+0x124>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d103      	bne.n	800b500 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	691a      	ldr	r2, [r3, #16]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2201      	movs	r2, #1
 800b504:	615a      	str	r2, [r3, #20]
}
 800b506:	bf00      	nop
 800b508:	3714      	adds	r7, #20
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr
 800b512:	bf00      	nop
 800b514:	40010000 	.word	0x40010000
 800b518:	40000400 	.word	0x40000400
 800b51c:	40000800 	.word	0x40000800
 800b520:	40000c00 	.word	0x40000c00
 800b524:	40010400 	.word	0x40010400
 800b528:	40014000 	.word	0x40014000
 800b52c:	40014400 	.word	0x40014400
 800b530:	40014800 	.word	0x40014800
 800b534:	40001800 	.word	0x40001800
 800b538:	40001c00 	.word	0x40001c00
 800b53c:	40002000 	.word	0x40002000

0800b540 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b540:	b480      	push	{r7}
 800b542:	b087      	sub	sp, #28
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	6a1b      	ldr	r3, [r3, #32]
 800b550:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	6a1b      	ldr	r3, [r3, #32]
 800b556:	f023 0201 	bic.w	r2, r3, #1
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	699b      	ldr	r3, [r3, #24]
 800b562:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b56a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	011b      	lsls	r3, r3, #4
 800b570:	693a      	ldr	r2, [r7, #16]
 800b572:	4313      	orrs	r3, r2
 800b574:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	f023 030a 	bic.w	r3, r3, #10
 800b57c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b57e:	697a      	ldr	r2, [r7, #20]
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	4313      	orrs	r3, r2
 800b584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	693a      	ldr	r2, [r7, #16]
 800b58a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	697a      	ldr	r2, [r7, #20]
 800b590:	621a      	str	r2, [r3, #32]
}
 800b592:	bf00      	nop
 800b594:	371c      	adds	r7, #28
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr

0800b59e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b59e:	b480      	push	{r7}
 800b5a0:	b087      	sub	sp, #28
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	60f8      	str	r0, [r7, #12]
 800b5a6:	60b9      	str	r1, [r7, #8]
 800b5a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	6a1b      	ldr	r3, [r3, #32]
 800b5ae:	f023 0210 	bic.w	r2, r3, #16
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	699b      	ldr	r3, [r3, #24]
 800b5ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	6a1b      	ldr	r3, [r3, #32]
 800b5c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b5c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	031b      	lsls	r3, r3, #12
 800b5ce:	697a      	ldr	r2, [r7, #20]
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b5da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	011b      	lsls	r3, r3, #4
 800b5e0:	693a      	ldr	r2, [r7, #16]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	697a      	ldr	r2, [r7, #20]
 800b5ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	693a      	ldr	r2, [r7, #16]
 800b5f0:	621a      	str	r2, [r3, #32]
}
 800b5f2:	bf00      	nop
 800b5f4:	371c      	adds	r7, #28
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr

0800b5fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b5fe:	b480      	push	{r7}
 800b600:	b085      	sub	sp, #20
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
 800b606:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b614:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b616:	683a      	ldr	r2, [r7, #0]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	4313      	orrs	r3, r2
 800b61c:	f043 0307 	orr.w	r3, r3, #7
 800b620:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	609a      	str	r2, [r3, #8]
}
 800b628:	bf00      	nop
 800b62a:	3714      	adds	r7, #20
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr

0800b634 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b634:	b480      	push	{r7}
 800b636:	b087      	sub	sp, #28
 800b638:	af00      	add	r7, sp, #0
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	60b9      	str	r1, [r7, #8]
 800b63e:	607a      	str	r2, [r7, #4]
 800b640:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	689b      	ldr	r3, [r3, #8]
 800b646:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b64e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	021a      	lsls	r2, r3, #8
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	431a      	orrs	r2, r3
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	697a      	ldr	r2, [r7, #20]
 800b65e:	4313      	orrs	r3, r2
 800b660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	697a      	ldr	r2, [r7, #20]
 800b666:	609a      	str	r2, [r3, #8]
}
 800b668:	bf00      	nop
 800b66a:	371c      	adds	r7, #28
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr

0800b674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b674:	b480      	push	{r7}
 800b676:	b085      	sub	sp, #20
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b684:	2b01      	cmp	r3, #1
 800b686:	d101      	bne.n	800b68c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b688:	2302      	movs	r3, #2
 800b68a:	e06d      	b.n	800b768 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2201      	movs	r2, #1
 800b690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2202      	movs	r2, #2
 800b698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	689b      	ldr	r3, [r3, #8]
 800b6aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4a30      	ldr	r2, [pc, #192]	@ (800b774 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d004      	beq.n	800b6c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4a2f      	ldr	r2, [pc, #188]	@ (800b778 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d108      	bne.n	800b6d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b6c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	68fa      	ldr	r2, [r7, #12]
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	68fa      	ldr	r2, [r7, #12]
 800b6ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a20      	ldr	r2, [pc, #128]	@ (800b774 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d022      	beq.n	800b73c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6fe:	d01d      	beq.n	800b73c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a1d      	ldr	r2, [pc, #116]	@ (800b77c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d018      	beq.n	800b73c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4a1c      	ldr	r2, [pc, #112]	@ (800b780 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d013      	beq.n	800b73c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4a1a      	ldr	r2, [pc, #104]	@ (800b784 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d00e      	beq.n	800b73c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4a15      	ldr	r2, [pc, #84]	@ (800b778 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d009      	beq.n	800b73c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a16      	ldr	r2, [pc, #88]	@ (800b788 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d004      	beq.n	800b73c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4a15      	ldr	r2, [pc, #84]	@ (800b78c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d10c      	bne.n	800b756 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b742:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	68ba      	ldr	r2, [r7, #8]
 800b74a:	4313      	orrs	r3, r2
 800b74c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	68ba      	ldr	r2, [r7, #8]
 800b754:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2201      	movs	r2, #1
 800b75a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2200      	movs	r2, #0
 800b762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b766:	2300      	movs	r3, #0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3714      	adds	r7, #20
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr
 800b774:	40010000 	.word	0x40010000
 800b778:	40010400 	.word	0x40010400
 800b77c:	40000400 	.word	0x40000400
 800b780:	40000800 	.word	0x40000800
 800b784:	40000c00 	.word	0x40000c00
 800b788:	40014000 	.word	0x40014000
 800b78c:	40001800 	.word	0x40001800

0800b790 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b798:	bf00      	nop
 800b79a:	370c      	adds	r7, #12
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr

0800b7a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b7ac:	bf00      	nop
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b7c0:	bf00      	nop
 800b7c2:	370c      	adds	r7, #12
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d101      	bne.n	800b7de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	e040      	b.n	800b860 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d106      	bne.n	800b7f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f7f9 ff9e 	bl	8005730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2224      	movs	r2, #36	@ 0x24
 800b7f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	681a      	ldr	r2, [r3, #0]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f022 0201 	bic.w	r2, r2, #1
 800b808:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 f82c 	bl	800b868 <UART_SetConfig>
 800b810:	4603      	mov	r3, r0
 800b812:	2b01      	cmp	r3, #1
 800b814:	d101      	bne.n	800b81a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b816:	2301      	movs	r3, #1
 800b818:	e022      	b.n	800b860 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d002      	beq.n	800b828 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 fa84 	bl	800bd30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	685a      	ldr	r2, [r3, #4]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b836:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	689a      	ldr	r2, [r3, #8]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b846:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	681a      	ldr	r2, [r3, #0]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f042 0201 	orr.w	r2, r2, #1
 800b856:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f000 fb0b 	bl	800be74 <UART_CheckIdleState>
 800b85e:	4603      	mov	r3, r0
}
 800b860:	4618      	mov	r0, r3
 800b862:	3708      	adds	r7, #8
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b088      	sub	sp, #32
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b870:	2300      	movs	r3, #0
 800b872:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	689a      	ldr	r2, [r3, #8]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	691b      	ldr	r3, [r3, #16]
 800b87c:	431a      	orrs	r2, r3
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	695b      	ldr	r3, [r3, #20]
 800b882:	431a      	orrs	r2, r3
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	69db      	ldr	r3, [r3, #28]
 800b888:	4313      	orrs	r3, r2
 800b88a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	4ba6      	ldr	r3, [pc, #664]	@ (800bb2c <UART_SetConfig+0x2c4>)
 800b894:	4013      	ands	r3, r2
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	6812      	ldr	r2, [r2, #0]
 800b89a:	6979      	ldr	r1, [r7, #20]
 800b89c:	430b      	orrs	r3, r1
 800b89e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	68da      	ldr	r2, [r3, #12]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	430a      	orrs	r2, r1
 800b8b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	699b      	ldr	r3, [r3, #24]
 800b8ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6a1b      	ldr	r3, [r3, #32]
 800b8c0:	697a      	ldr	r2, [r7, #20]
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	689b      	ldr	r3, [r3, #8]
 800b8cc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	697a      	ldr	r2, [r7, #20]
 800b8d6:	430a      	orrs	r2, r1
 800b8d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a94      	ldr	r2, [pc, #592]	@ (800bb30 <UART_SetConfig+0x2c8>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d120      	bne.n	800b926 <UART_SetConfig+0xbe>
 800b8e4:	4b93      	ldr	r3, [pc, #588]	@ (800bb34 <UART_SetConfig+0x2cc>)
 800b8e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8ea:	f003 0303 	and.w	r3, r3, #3
 800b8ee:	2b03      	cmp	r3, #3
 800b8f0:	d816      	bhi.n	800b920 <UART_SetConfig+0xb8>
 800b8f2:	a201      	add	r2, pc, #4	@ (adr r2, 800b8f8 <UART_SetConfig+0x90>)
 800b8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8f8:	0800b909 	.word	0x0800b909
 800b8fc:	0800b915 	.word	0x0800b915
 800b900:	0800b90f 	.word	0x0800b90f
 800b904:	0800b91b 	.word	0x0800b91b
 800b908:	2301      	movs	r3, #1
 800b90a:	77fb      	strb	r3, [r7, #31]
 800b90c:	e150      	b.n	800bbb0 <UART_SetConfig+0x348>
 800b90e:	2302      	movs	r3, #2
 800b910:	77fb      	strb	r3, [r7, #31]
 800b912:	e14d      	b.n	800bbb0 <UART_SetConfig+0x348>
 800b914:	2304      	movs	r3, #4
 800b916:	77fb      	strb	r3, [r7, #31]
 800b918:	e14a      	b.n	800bbb0 <UART_SetConfig+0x348>
 800b91a:	2308      	movs	r3, #8
 800b91c:	77fb      	strb	r3, [r7, #31]
 800b91e:	e147      	b.n	800bbb0 <UART_SetConfig+0x348>
 800b920:	2310      	movs	r3, #16
 800b922:	77fb      	strb	r3, [r7, #31]
 800b924:	e144      	b.n	800bbb0 <UART_SetConfig+0x348>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a83      	ldr	r2, [pc, #524]	@ (800bb38 <UART_SetConfig+0x2d0>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d132      	bne.n	800b996 <UART_SetConfig+0x12e>
 800b930:	4b80      	ldr	r3, [pc, #512]	@ (800bb34 <UART_SetConfig+0x2cc>)
 800b932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b936:	f003 030c 	and.w	r3, r3, #12
 800b93a:	2b0c      	cmp	r3, #12
 800b93c:	d828      	bhi.n	800b990 <UART_SetConfig+0x128>
 800b93e:	a201      	add	r2, pc, #4	@ (adr r2, 800b944 <UART_SetConfig+0xdc>)
 800b940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b944:	0800b979 	.word	0x0800b979
 800b948:	0800b991 	.word	0x0800b991
 800b94c:	0800b991 	.word	0x0800b991
 800b950:	0800b991 	.word	0x0800b991
 800b954:	0800b985 	.word	0x0800b985
 800b958:	0800b991 	.word	0x0800b991
 800b95c:	0800b991 	.word	0x0800b991
 800b960:	0800b991 	.word	0x0800b991
 800b964:	0800b97f 	.word	0x0800b97f
 800b968:	0800b991 	.word	0x0800b991
 800b96c:	0800b991 	.word	0x0800b991
 800b970:	0800b991 	.word	0x0800b991
 800b974:	0800b98b 	.word	0x0800b98b
 800b978:	2300      	movs	r3, #0
 800b97a:	77fb      	strb	r3, [r7, #31]
 800b97c:	e118      	b.n	800bbb0 <UART_SetConfig+0x348>
 800b97e:	2302      	movs	r3, #2
 800b980:	77fb      	strb	r3, [r7, #31]
 800b982:	e115      	b.n	800bbb0 <UART_SetConfig+0x348>
 800b984:	2304      	movs	r3, #4
 800b986:	77fb      	strb	r3, [r7, #31]
 800b988:	e112      	b.n	800bbb0 <UART_SetConfig+0x348>
 800b98a:	2308      	movs	r3, #8
 800b98c:	77fb      	strb	r3, [r7, #31]
 800b98e:	e10f      	b.n	800bbb0 <UART_SetConfig+0x348>
 800b990:	2310      	movs	r3, #16
 800b992:	77fb      	strb	r3, [r7, #31]
 800b994:	e10c      	b.n	800bbb0 <UART_SetConfig+0x348>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4a68      	ldr	r2, [pc, #416]	@ (800bb3c <UART_SetConfig+0x2d4>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d120      	bne.n	800b9e2 <UART_SetConfig+0x17a>
 800b9a0:	4b64      	ldr	r3, [pc, #400]	@ (800bb34 <UART_SetConfig+0x2cc>)
 800b9a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9a6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b9aa:	2b30      	cmp	r3, #48	@ 0x30
 800b9ac:	d013      	beq.n	800b9d6 <UART_SetConfig+0x16e>
 800b9ae:	2b30      	cmp	r3, #48	@ 0x30
 800b9b0:	d814      	bhi.n	800b9dc <UART_SetConfig+0x174>
 800b9b2:	2b20      	cmp	r3, #32
 800b9b4:	d009      	beq.n	800b9ca <UART_SetConfig+0x162>
 800b9b6:	2b20      	cmp	r3, #32
 800b9b8:	d810      	bhi.n	800b9dc <UART_SetConfig+0x174>
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d002      	beq.n	800b9c4 <UART_SetConfig+0x15c>
 800b9be:	2b10      	cmp	r3, #16
 800b9c0:	d006      	beq.n	800b9d0 <UART_SetConfig+0x168>
 800b9c2:	e00b      	b.n	800b9dc <UART_SetConfig+0x174>
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	77fb      	strb	r3, [r7, #31]
 800b9c8:	e0f2      	b.n	800bbb0 <UART_SetConfig+0x348>
 800b9ca:	2302      	movs	r3, #2
 800b9cc:	77fb      	strb	r3, [r7, #31]
 800b9ce:	e0ef      	b.n	800bbb0 <UART_SetConfig+0x348>
 800b9d0:	2304      	movs	r3, #4
 800b9d2:	77fb      	strb	r3, [r7, #31]
 800b9d4:	e0ec      	b.n	800bbb0 <UART_SetConfig+0x348>
 800b9d6:	2308      	movs	r3, #8
 800b9d8:	77fb      	strb	r3, [r7, #31]
 800b9da:	e0e9      	b.n	800bbb0 <UART_SetConfig+0x348>
 800b9dc:	2310      	movs	r3, #16
 800b9de:	77fb      	strb	r3, [r7, #31]
 800b9e0:	e0e6      	b.n	800bbb0 <UART_SetConfig+0x348>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4a56      	ldr	r2, [pc, #344]	@ (800bb40 <UART_SetConfig+0x2d8>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d120      	bne.n	800ba2e <UART_SetConfig+0x1c6>
 800b9ec:	4b51      	ldr	r3, [pc, #324]	@ (800bb34 <UART_SetConfig+0x2cc>)
 800b9ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b9f6:	2bc0      	cmp	r3, #192	@ 0xc0
 800b9f8:	d013      	beq.n	800ba22 <UART_SetConfig+0x1ba>
 800b9fa:	2bc0      	cmp	r3, #192	@ 0xc0
 800b9fc:	d814      	bhi.n	800ba28 <UART_SetConfig+0x1c0>
 800b9fe:	2b80      	cmp	r3, #128	@ 0x80
 800ba00:	d009      	beq.n	800ba16 <UART_SetConfig+0x1ae>
 800ba02:	2b80      	cmp	r3, #128	@ 0x80
 800ba04:	d810      	bhi.n	800ba28 <UART_SetConfig+0x1c0>
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d002      	beq.n	800ba10 <UART_SetConfig+0x1a8>
 800ba0a:	2b40      	cmp	r3, #64	@ 0x40
 800ba0c:	d006      	beq.n	800ba1c <UART_SetConfig+0x1b4>
 800ba0e:	e00b      	b.n	800ba28 <UART_SetConfig+0x1c0>
 800ba10:	2300      	movs	r3, #0
 800ba12:	77fb      	strb	r3, [r7, #31]
 800ba14:	e0cc      	b.n	800bbb0 <UART_SetConfig+0x348>
 800ba16:	2302      	movs	r3, #2
 800ba18:	77fb      	strb	r3, [r7, #31]
 800ba1a:	e0c9      	b.n	800bbb0 <UART_SetConfig+0x348>
 800ba1c:	2304      	movs	r3, #4
 800ba1e:	77fb      	strb	r3, [r7, #31]
 800ba20:	e0c6      	b.n	800bbb0 <UART_SetConfig+0x348>
 800ba22:	2308      	movs	r3, #8
 800ba24:	77fb      	strb	r3, [r7, #31]
 800ba26:	e0c3      	b.n	800bbb0 <UART_SetConfig+0x348>
 800ba28:	2310      	movs	r3, #16
 800ba2a:	77fb      	strb	r3, [r7, #31]
 800ba2c:	e0c0      	b.n	800bbb0 <UART_SetConfig+0x348>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4a44      	ldr	r2, [pc, #272]	@ (800bb44 <UART_SetConfig+0x2dc>)
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d125      	bne.n	800ba84 <UART_SetConfig+0x21c>
 800ba38:	4b3e      	ldr	r3, [pc, #248]	@ (800bb34 <UART_SetConfig+0x2cc>)
 800ba3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba46:	d017      	beq.n	800ba78 <UART_SetConfig+0x210>
 800ba48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba4c:	d817      	bhi.n	800ba7e <UART_SetConfig+0x216>
 800ba4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba52:	d00b      	beq.n	800ba6c <UART_SetConfig+0x204>
 800ba54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba58:	d811      	bhi.n	800ba7e <UART_SetConfig+0x216>
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d003      	beq.n	800ba66 <UART_SetConfig+0x1fe>
 800ba5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba62:	d006      	beq.n	800ba72 <UART_SetConfig+0x20a>
 800ba64:	e00b      	b.n	800ba7e <UART_SetConfig+0x216>
 800ba66:	2300      	movs	r3, #0
 800ba68:	77fb      	strb	r3, [r7, #31]
 800ba6a:	e0a1      	b.n	800bbb0 <UART_SetConfig+0x348>
 800ba6c:	2302      	movs	r3, #2
 800ba6e:	77fb      	strb	r3, [r7, #31]
 800ba70:	e09e      	b.n	800bbb0 <UART_SetConfig+0x348>
 800ba72:	2304      	movs	r3, #4
 800ba74:	77fb      	strb	r3, [r7, #31]
 800ba76:	e09b      	b.n	800bbb0 <UART_SetConfig+0x348>
 800ba78:	2308      	movs	r3, #8
 800ba7a:	77fb      	strb	r3, [r7, #31]
 800ba7c:	e098      	b.n	800bbb0 <UART_SetConfig+0x348>
 800ba7e:	2310      	movs	r3, #16
 800ba80:	77fb      	strb	r3, [r7, #31]
 800ba82:	e095      	b.n	800bbb0 <UART_SetConfig+0x348>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4a2f      	ldr	r2, [pc, #188]	@ (800bb48 <UART_SetConfig+0x2e0>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d125      	bne.n	800bada <UART_SetConfig+0x272>
 800ba8e:	4b29      	ldr	r3, [pc, #164]	@ (800bb34 <UART_SetConfig+0x2cc>)
 800ba90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ba98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ba9c:	d017      	beq.n	800bace <UART_SetConfig+0x266>
 800ba9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800baa2:	d817      	bhi.n	800bad4 <UART_SetConfig+0x26c>
 800baa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800baa8:	d00b      	beq.n	800bac2 <UART_SetConfig+0x25a>
 800baaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800baae:	d811      	bhi.n	800bad4 <UART_SetConfig+0x26c>
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d003      	beq.n	800babc <UART_SetConfig+0x254>
 800bab4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bab8:	d006      	beq.n	800bac8 <UART_SetConfig+0x260>
 800baba:	e00b      	b.n	800bad4 <UART_SetConfig+0x26c>
 800babc:	2301      	movs	r3, #1
 800babe:	77fb      	strb	r3, [r7, #31]
 800bac0:	e076      	b.n	800bbb0 <UART_SetConfig+0x348>
 800bac2:	2302      	movs	r3, #2
 800bac4:	77fb      	strb	r3, [r7, #31]
 800bac6:	e073      	b.n	800bbb0 <UART_SetConfig+0x348>
 800bac8:	2304      	movs	r3, #4
 800baca:	77fb      	strb	r3, [r7, #31]
 800bacc:	e070      	b.n	800bbb0 <UART_SetConfig+0x348>
 800bace:	2308      	movs	r3, #8
 800bad0:	77fb      	strb	r3, [r7, #31]
 800bad2:	e06d      	b.n	800bbb0 <UART_SetConfig+0x348>
 800bad4:	2310      	movs	r3, #16
 800bad6:	77fb      	strb	r3, [r7, #31]
 800bad8:	e06a      	b.n	800bbb0 <UART_SetConfig+0x348>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4a1b      	ldr	r2, [pc, #108]	@ (800bb4c <UART_SetConfig+0x2e4>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d138      	bne.n	800bb56 <UART_SetConfig+0x2ee>
 800bae4:	4b13      	ldr	r3, [pc, #76]	@ (800bb34 <UART_SetConfig+0x2cc>)
 800bae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800baea:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800baee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800baf2:	d017      	beq.n	800bb24 <UART_SetConfig+0x2bc>
 800baf4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800baf8:	d82a      	bhi.n	800bb50 <UART_SetConfig+0x2e8>
 800bafa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bafe:	d00b      	beq.n	800bb18 <UART_SetConfig+0x2b0>
 800bb00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb04:	d824      	bhi.n	800bb50 <UART_SetConfig+0x2e8>
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d003      	beq.n	800bb12 <UART_SetConfig+0x2aa>
 800bb0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb0e:	d006      	beq.n	800bb1e <UART_SetConfig+0x2b6>
 800bb10:	e01e      	b.n	800bb50 <UART_SetConfig+0x2e8>
 800bb12:	2300      	movs	r3, #0
 800bb14:	77fb      	strb	r3, [r7, #31]
 800bb16:	e04b      	b.n	800bbb0 <UART_SetConfig+0x348>
 800bb18:	2302      	movs	r3, #2
 800bb1a:	77fb      	strb	r3, [r7, #31]
 800bb1c:	e048      	b.n	800bbb0 <UART_SetConfig+0x348>
 800bb1e:	2304      	movs	r3, #4
 800bb20:	77fb      	strb	r3, [r7, #31]
 800bb22:	e045      	b.n	800bbb0 <UART_SetConfig+0x348>
 800bb24:	2308      	movs	r3, #8
 800bb26:	77fb      	strb	r3, [r7, #31]
 800bb28:	e042      	b.n	800bbb0 <UART_SetConfig+0x348>
 800bb2a:	bf00      	nop
 800bb2c:	efff69f3 	.word	0xefff69f3
 800bb30:	40011000 	.word	0x40011000
 800bb34:	40023800 	.word	0x40023800
 800bb38:	40004400 	.word	0x40004400
 800bb3c:	40004800 	.word	0x40004800
 800bb40:	40004c00 	.word	0x40004c00
 800bb44:	40005000 	.word	0x40005000
 800bb48:	40011400 	.word	0x40011400
 800bb4c:	40007800 	.word	0x40007800
 800bb50:	2310      	movs	r3, #16
 800bb52:	77fb      	strb	r3, [r7, #31]
 800bb54:	e02c      	b.n	800bbb0 <UART_SetConfig+0x348>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a72      	ldr	r2, [pc, #456]	@ (800bd24 <UART_SetConfig+0x4bc>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d125      	bne.n	800bbac <UART_SetConfig+0x344>
 800bb60:	4b71      	ldr	r3, [pc, #452]	@ (800bd28 <UART_SetConfig+0x4c0>)
 800bb62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb66:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800bb6a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800bb6e:	d017      	beq.n	800bba0 <UART_SetConfig+0x338>
 800bb70:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800bb74:	d817      	bhi.n	800bba6 <UART_SetConfig+0x33e>
 800bb76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb7a:	d00b      	beq.n	800bb94 <UART_SetConfig+0x32c>
 800bb7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb80:	d811      	bhi.n	800bba6 <UART_SetConfig+0x33e>
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d003      	beq.n	800bb8e <UART_SetConfig+0x326>
 800bb86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bb8a:	d006      	beq.n	800bb9a <UART_SetConfig+0x332>
 800bb8c:	e00b      	b.n	800bba6 <UART_SetConfig+0x33e>
 800bb8e:	2300      	movs	r3, #0
 800bb90:	77fb      	strb	r3, [r7, #31]
 800bb92:	e00d      	b.n	800bbb0 <UART_SetConfig+0x348>
 800bb94:	2302      	movs	r3, #2
 800bb96:	77fb      	strb	r3, [r7, #31]
 800bb98:	e00a      	b.n	800bbb0 <UART_SetConfig+0x348>
 800bb9a:	2304      	movs	r3, #4
 800bb9c:	77fb      	strb	r3, [r7, #31]
 800bb9e:	e007      	b.n	800bbb0 <UART_SetConfig+0x348>
 800bba0:	2308      	movs	r3, #8
 800bba2:	77fb      	strb	r3, [r7, #31]
 800bba4:	e004      	b.n	800bbb0 <UART_SetConfig+0x348>
 800bba6:	2310      	movs	r3, #16
 800bba8:	77fb      	strb	r3, [r7, #31]
 800bbaa:	e001      	b.n	800bbb0 <UART_SetConfig+0x348>
 800bbac:	2310      	movs	r3, #16
 800bbae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	69db      	ldr	r3, [r3, #28]
 800bbb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bbb8:	d15b      	bne.n	800bc72 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800bbba:	7ffb      	ldrb	r3, [r7, #31]
 800bbbc:	2b08      	cmp	r3, #8
 800bbbe:	d828      	bhi.n	800bc12 <UART_SetConfig+0x3aa>
 800bbc0:	a201      	add	r2, pc, #4	@ (adr r2, 800bbc8 <UART_SetConfig+0x360>)
 800bbc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc6:	bf00      	nop
 800bbc8:	0800bbed 	.word	0x0800bbed
 800bbcc:	0800bbf5 	.word	0x0800bbf5
 800bbd0:	0800bbfd 	.word	0x0800bbfd
 800bbd4:	0800bc13 	.word	0x0800bc13
 800bbd8:	0800bc03 	.word	0x0800bc03
 800bbdc:	0800bc13 	.word	0x0800bc13
 800bbe0:	0800bc13 	.word	0x0800bc13
 800bbe4:	0800bc13 	.word	0x0800bc13
 800bbe8:	0800bc0b 	.word	0x0800bc0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbec:	f7fd fab8 	bl	8009160 <HAL_RCC_GetPCLK1Freq>
 800bbf0:	61b8      	str	r0, [r7, #24]
        break;
 800bbf2:	e013      	b.n	800bc1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bbf4:	f7fd fac8 	bl	8009188 <HAL_RCC_GetPCLK2Freq>
 800bbf8:	61b8      	str	r0, [r7, #24]
        break;
 800bbfa:	e00f      	b.n	800bc1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bbfc:	4b4b      	ldr	r3, [pc, #300]	@ (800bd2c <UART_SetConfig+0x4c4>)
 800bbfe:	61bb      	str	r3, [r7, #24]
        break;
 800bc00:	e00c      	b.n	800bc1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc02:	f7fd f9db 	bl	8008fbc <HAL_RCC_GetSysClockFreq>
 800bc06:	61b8      	str	r0, [r7, #24]
        break;
 800bc08:	e008      	b.n	800bc1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc0e:	61bb      	str	r3, [r7, #24]
        break;
 800bc10:	e004      	b.n	800bc1c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800bc12:	2300      	movs	r3, #0
 800bc14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	77bb      	strb	r3, [r7, #30]
        break;
 800bc1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bc1c:	69bb      	ldr	r3, [r7, #24]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d074      	beq.n	800bd0c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bc22:	69bb      	ldr	r3, [r7, #24]
 800bc24:	005a      	lsls	r2, r3, #1
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	085b      	lsrs	r3, r3, #1
 800bc2c:	441a      	add	r2, r3
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	2b0f      	cmp	r3, #15
 800bc3c:	d916      	bls.n	800bc6c <UART_SetConfig+0x404>
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc44:	d212      	bcs.n	800bc6c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	f023 030f 	bic.w	r3, r3, #15
 800bc4e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	085b      	lsrs	r3, r3, #1
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	f003 0307 	and.w	r3, r3, #7
 800bc5a:	b29a      	uxth	r2, r3
 800bc5c:	89fb      	ldrh	r3, [r7, #14]
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	89fa      	ldrh	r2, [r7, #14]
 800bc68:	60da      	str	r2, [r3, #12]
 800bc6a:	e04f      	b.n	800bd0c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	77bb      	strb	r3, [r7, #30]
 800bc70:	e04c      	b.n	800bd0c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bc72:	7ffb      	ldrb	r3, [r7, #31]
 800bc74:	2b08      	cmp	r3, #8
 800bc76:	d828      	bhi.n	800bcca <UART_SetConfig+0x462>
 800bc78:	a201      	add	r2, pc, #4	@ (adr r2, 800bc80 <UART_SetConfig+0x418>)
 800bc7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc7e:	bf00      	nop
 800bc80:	0800bca5 	.word	0x0800bca5
 800bc84:	0800bcad 	.word	0x0800bcad
 800bc88:	0800bcb5 	.word	0x0800bcb5
 800bc8c:	0800bccb 	.word	0x0800bccb
 800bc90:	0800bcbb 	.word	0x0800bcbb
 800bc94:	0800bccb 	.word	0x0800bccb
 800bc98:	0800bccb 	.word	0x0800bccb
 800bc9c:	0800bccb 	.word	0x0800bccb
 800bca0:	0800bcc3 	.word	0x0800bcc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bca4:	f7fd fa5c 	bl	8009160 <HAL_RCC_GetPCLK1Freq>
 800bca8:	61b8      	str	r0, [r7, #24]
        break;
 800bcaa:	e013      	b.n	800bcd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bcac:	f7fd fa6c 	bl	8009188 <HAL_RCC_GetPCLK2Freq>
 800bcb0:	61b8      	str	r0, [r7, #24]
        break;
 800bcb2:	e00f      	b.n	800bcd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bcb4:	4b1d      	ldr	r3, [pc, #116]	@ (800bd2c <UART_SetConfig+0x4c4>)
 800bcb6:	61bb      	str	r3, [r7, #24]
        break;
 800bcb8:	e00c      	b.n	800bcd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bcba:	f7fd f97f 	bl	8008fbc <HAL_RCC_GetSysClockFreq>
 800bcbe:	61b8      	str	r0, [r7, #24]
        break;
 800bcc0:	e008      	b.n	800bcd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bcc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bcc6:	61bb      	str	r3, [r7, #24]
        break;
 800bcc8:	e004      	b.n	800bcd4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800bcca:	2300      	movs	r3, #0
 800bccc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bcce:	2301      	movs	r3, #1
 800bcd0:	77bb      	strb	r3, [r7, #30]
        break;
 800bcd2:	bf00      	nop
    }

    if (pclk != 0U)
 800bcd4:	69bb      	ldr	r3, [r7, #24]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d018      	beq.n	800bd0c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	085a      	lsrs	r2, r3, #1
 800bce0:	69bb      	ldr	r3, [r7, #24]
 800bce2:	441a      	add	r2, r3
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	2b0f      	cmp	r3, #15
 800bcf2:	d909      	bls.n	800bd08 <UART_SetConfig+0x4a0>
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bcfa:	d205      	bcs.n	800bd08 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	b29a      	uxth	r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	60da      	str	r2, [r3, #12]
 800bd06:	e001      	b.n	800bd0c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2200      	movs	r2, #0
 800bd16:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800bd18:	7fbb      	ldrb	r3, [r7, #30]
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3720      	adds	r7, #32
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	40007c00 	.word	0x40007c00
 800bd28:	40023800 	.word	0x40023800
 800bd2c:	00f42400 	.word	0x00f42400

0800bd30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd3c:	f003 0301 	and.w	r3, r3, #1
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d00a      	beq.n	800bd5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	430a      	orrs	r2, r1
 800bd58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd5e:	f003 0302 	and.w	r3, r3, #2
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d00a      	beq.n	800bd7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	430a      	orrs	r2, r1
 800bd7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd80:	f003 0304 	and.w	r3, r3, #4
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d00a      	beq.n	800bd9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	430a      	orrs	r2, r1
 800bd9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bda2:	f003 0308 	and.w	r3, r3, #8
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d00a      	beq.n	800bdc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	430a      	orrs	r2, r1
 800bdbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdc4:	f003 0310 	and.w	r3, r3, #16
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d00a      	beq.n	800bde2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	430a      	orrs	r2, r1
 800bde0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bde6:	f003 0320 	and.w	r3, r3, #32
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00a      	beq.n	800be04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	689b      	ldr	r3, [r3, #8]
 800bdf4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	430a      	orrs	r2, r1
 800be02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d01a      	beq.n	800be46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	430a      	orrs	r2, r1
 800be24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be2e:	d10a      	bne.n	800be46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	430a      	orrs	r2, r1
 800be44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d00a      	beq.n	800be68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	430a      	orrs	r2, r1
 800be66:	605a      	str	r2, [r3, #4]
  }
}
 800be68:	bf00      	nop
 800be6a:	370c      	adds	r7, #12
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af02      	add	r7, sp, #8
 800be7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2200      	movs	r2, #0
 800be80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be84:	f7f9 fd20 	bl	80058c8 <HAL_GetTick>
 800be88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f003 0308 	and.w	r3, r3, #8
 800be94:	2b08      	cmp	r3, #8
 800be96:	d10e      	bne.n	800beb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800be9c:	9300      	str	r3, [sp, #0]
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2200      	movs	r2, #0
 800bea2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 f81b 	bl	800bee2 <UART_WaitOnFlagUntilTimeout>
 800beac:	4603      	mov	r3, r0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d001      	beq.n	800beb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800beb2:	2303      	movs	r3, #3
 800beb4:	e011      	b.n	800beda <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2220      	movs	r2, #32
 800beba:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2220      	movs	r2, #32
 800bec0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2200      	movs	r2, #0
 800bec8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2200      	movs	r2, #0
 800bece:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2200      	movs	r2, #0
 800bed4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800bed8:	2300      	movs	r3, #0
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3710      	adds	r7, #16
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b09c      	sub	sp, #112	@ 0x70
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	60f8      	str	r0, [r7, #12]
 800beea:	60b9      	str	r1, [r7, #8]
 800beec:	603b      	str	r3, [r7, #0]
 800beee:	4613      	mov	r3, r2
 800bef0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bef2:	e0a7      	b.n	800c044 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bef4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bef6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800befa:	f000 80a3 	beq.w	800c044 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800befe:	f7f9 fce3 	bl	80058c8 <HAL_GetTick>
 800bf02:	4602      	mov	r2, r0
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	1ad3      	subs	r3, r2, r3
 800bf08:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d302      	bcc.n	800bf14 <UART_WaitOnFlagUntilTimeout+0x32>
 800bf0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d13f      	bne.n	800bf94 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf1c:	e853 3f00 	ldrex	r3, [r3]
 800bf20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800bf22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf24:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800bf28:	667b      	str	r3, [r7, #100]	@ 0x64
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	461a      	mov	r2, r3
 800bf30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bf34:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf36:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bf38:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bf3a:	e841 2300 	strex	r3, r2, [r1]
 800bf3e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800bf40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d1e6      	bne.n	800bf14 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	3308      	adds	r3, #8
 800bf4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf50:	e853 3f00 	ldrex	r3, [r3]
 800bf54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bf56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf58:	f023 0301 	bic.w	r3, r3, #1
 800bf5c:	663b      	str	r3, [r7, #96]	@ 0x60
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	3308      	adds	r3, #8
 800bf64:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bf66:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bf68:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf6a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bf6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf6e:	e841 2300 	strex	r3, r2, [r1]
 800bf72:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bf74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d1e5      	bne.n	800bf46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2220      	movs	r2, #32
 800bf7e:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	2220      	movs	r2, #32
 800bf84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800bf90:	2303      	movs	r3, #3
 800bf92:	e068      	b.n	800c066 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f003 0304 	and.w	r3, r3, #4
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d050      	beq.n	800c044 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	69db      	ldr	r3, [r3, #28]
 800bfa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bfac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bfb0:	d148      	bne.n	800c044 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bfba:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc4:	e853 3f00 	ldrex	r3, [r3]
 800bfc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bfca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfcc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800bfd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfda:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfdc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfde:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bfe0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bfe2:	e841 2300 	strex	r3, r2, [r1]
 800bfe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bfe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d1e6      	bne.n	800bfbc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	3308      	adds	r3, #8
 800bff4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	e853 3f00 	ldrex	r3, [r3]
 800bffc:	613b      	str	r3, [r7, #16]
   return(result);
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	f023 0301 	bic.w	r3, r3, #1
 800c004:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	3308      	adds	r3, #8
 800c00c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c00e:	623a      	str	r2, [r7, #32]
 800c010:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c012:	69f9      	ldr	r1, [r7, #28]
 800c014:	6a3a      	ldr	r2, [r7, #32]
 800c016:	e841 2300 	strex	r3, r2, [r1]
 800c01a:	61bb      	str	r3, [r7, #24]
   return(result);
 800c01c:	69bb      	ldr	r3, [r7, #24]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d1e5      	bne.n	800bfee <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2220      	movs	r2, #32
 800c026:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2220      	movs	r2, #32
 800c02c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2220      	movs	r2, #32
 800c034:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2200      	movs	r2, #0
 800c03c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800c040:	2303      	movs	r3, #3
 800c042:	e010      	b.n	800c066 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	69da      	ldr	r2, [r3, #28]
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	4013      	ands	r3, r2
 800c04e:	68ba      	ldr	r2, [r7, #8]
 800c050:	429a      	cmp	r2, r3
 800c052:	bf0c      	ite	eq
 800c054:	2301      	moveq	r3, #1
 800c056:	2300      	movne	r3, #0
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	461a      	mov	r2, r3
 800c05c:	79fb      	ldrb	r3, [r7, #7]
 800c05e:	429a      	cmp	r2, r3
 800c060:	f43f af48 	beq.w	800bef4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c064:	2300      	movs	r3, #0
}
 800c066:	4618      	mov	r0, r3
 800c068:	3770      	adds	r7, #112	@ 0x70
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
	...

0800c070 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d121      	bne.n	800c0c6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681a      	ldr	r2, [r3, #0]
 800c086:	4b27      	ldr	r3, [pc, #156]	@ (800c124 <FMC_SDRAM_Init+0xb4>)
 800c088:	4013      	ands	r3, r2
 800c08a:	683a      	ldr	r2, [r7, #0]
 800c08c:	6851      	ldr	r1, [r2, #4]
 800c08e:	683a      	ldr	r2, [r7, #0]
 800c090:	6892      	ldr	r2, [r2, #8]
 800c092:	4311      	orrs	r1, r2
 800c094:	683a      	ldr	r2, [r7, #0]
 800c096:	68d2      	ldr	r2, [r2, #12]
 800c098:	4311      	orrs	r1, r2
 800c09a:	683a      	ldr	r2, [r7, #0]
 800c09c:	6912      	ldr	r2, [r2, #16]
 800c09e:	4311      	orrs	r1, r2
 800c0a0:	683a      	ldr	r2, [r7, #0]
 800c0a2:	6952      	ldr	r2, [r2, #20]
 800c0a4:	4311      	orrs	r1, r2
 800c0a6:	683a      	ldr	r2, [r7, #0]
 800c0a8:	6992      	ldr	r2, [r2, #24]
 800c0aa:	4311      	orrs	r1, r2
 800c0ac:	683a      	ldr	r2, [r7, #0]
 800c0ae:	69d2      	ldr	r2, [r2, #28]
 800c0b0:	4311      	orrs	r1, r2
 800c0b2:	683a      	ldr	r2, [r7, #0]
 800c0b4:	6a12      	ldr	r2, [r2, #32]
 800c0b6:	4311      	orrs	r1, r2
 800c0b8:	683a      	ldr	r2, [r7, #0]
 800c0ba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c0bc:	430a      	orrs	r2, r1
 800c0be:	431a      	orrs	r2, r3
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	601a      	str	r2, [r3, #0]
 800c0c4:	e026      	b.n	800c114 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	69d9      	ldr	r1, [r3, #28]
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	6a1b      	ldr	r3, [r3, #32]
 800c0d6:	4319      	orrs	r1, r3
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0dc:	430b      	orrs	r3, r1
 800c0de:	431a      	orrs	r2, r3
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	685a      	ldr	r2, [r3, #4]
 800c0e8:	4b0e      	ldr	r3, [pc, #56]	@ (800c124 <FMC_SDRAM_Init+0xb4>)
 800c0ea:	4013      	ands	r3, r2
 800c0ec:	683a      	ldr	r2, [r7, #0]
 800c0ee:	6851      	ldr	r1, [r2, #4]
 800c0f0:	683a      	ldr	r2, [r7, #0]
 800c0f2:	6892      	ldr	r2, [r2, #8]
 800c0f4:	4311      	orrs	r1, r2
 800c0f6:	683a      	ldr	r2, [r7, #0]
 800c0f8:	68d2      	ldr	r2, [r2, #12]
 800c0fa:	4311      	orrs	r1, r2
 800c0fc:	683a      	ldr	r2, [r7, #0]
 800c0fe:	6912      	ldr	r2, [r2, #16]
 800c100:	4311      	orrs	r1, r2
 800c102:	683a      	ldr	r2, [r7, #0]
 800c104:	6952      	ldr	r2, [r2, #20]
 800c106:	4311      	orrs	r1, r2
 800c108:	683a      	ldr	r2, [r7, #0]
 800c10a:	6992      	ldr	r2, [r2, #24]
 800c10c:	430a      	orrs	r2, r1
 800c10e:	431a      	orrs	r2, r3
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c114:	2300      	movs	r3, #0
}
 800c116:	4618      	mov	r0, r3
 800c118:	370c      	adds	r7, #12
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr
 800c122:	bf00      	nop
 800c124:	ffff8000 	.word	0xffff8000

0800c128 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c128:	b480      	push	{r7}
 800c12a:	b085      	sub	sp, #20
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	60f8      	str	r0, [r7, #12]
 800c130:	60b9      	str	r1, [r7, #8]
 800c132:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d128      	bne.n	800c18c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	689b      	ldr	r3, [r3, #8]
 800c13e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	1e59      	subs	r1, r3, #1
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	3b01      	subs	r3, #1
 800c14e:	011b      	lsls	r3, r3, #4
 800c150:	4319      	orrs	r1, r3
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	689b      	ldr	r3, [r3, #8]
 800c156:	3b01      	subs	r3, #1
 800c158:	021b      	lsls	r3, r3, #8
 800c15a:	4319      	orrs	r1, r3
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	3b01      	subs	r3, #1
 800c162:	031b      	lsls	r3, r3, #12
 800c164:	4319      	orrs	r1, r3
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	3b01      	subs	r3, #1
 800c16c:	041b      	lsls	r3, r3, #16
 800c16e:	4319      	orrs	r1, r3
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	695b      	ldr	r3, [r3, #20]
 800c174:	3b01      	subs	r3, #1
 800c176:	051b      	lsls	r3, r3, #20
 800c178:	4319      	orrs	r1, r3
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	699b      	ldr	r3, [r3, #24]
 800c17e:	3b01      	subs	r3, #1
 800c180:	061b      	lsls	r3, r3, #24
 800c182:	430b      	orrs	r3, r1
 800c184:	431a      	orrs	r2, r3
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	609a      	str	r2, [r3, #8]
 800c18a:	e02d      	b.n	800c1e8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	689a      	ldr	r2, [r3, #8]
 800c190:	4b19      	ldr	r3, [pc, #100]	@ (800c1f8 <FMC_SDRAM_Timing_Init+0xd0>)
 800c192:	4013      	ands	r3, r2
 800c194:	68ba      	ldr	r2, [r7, #8]
 800c196:	68d2      	ldr	r2, [r2, #12]
 800c198:	3a01      	subs	r2, #1
 800c19a:	0311      	lsls	r1, r2, #12
 800c19c:	68ba      	ldr	r2, [r7, #8]
 800c19e:	6952      	ldr	r2, [r2, #20]
 800c1a0:	3a01      	subs	r2, #1
 800c1a2:	0512      	lsls	r2, r2, #20
 800c1a4:	430a      	orrs	r2, r1
 800c1a6:	431a      	orrs	r2, r3
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	68db      	ldr	r3, [r3, #12]
 800c1b0:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	1e59      	subs	r1, r3, #1
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	3b01      	subs	r3, #1
 800c1c0:	011b      	lsls	r3, r3, #4
 800c1c2:	4319      	orrs	r1, r3
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	689b      	ldr	r3, [r3, #8]
 800c1c8:	3b01      	subs	r3, #1
 800c1ca:	021b      	lsls	r3, r3, #8
 800c1cc:	4319      	orrs	r1, r3
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	691b      	ldr	r3, [r3, #16]
 800c1d2:	3b01      	subs	r3, #1
 800c1d4:	041b      	lsls	r3, r3, #16
 800c1d6:	4319      	orrs	r1, r3
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	699b      	ldr	r3, [r3, #24]
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	061b      	lsls	r3, r3, #24
 800c1e0:	430b      	orrs	r3, r1
 800c1e2:	431a      	orrs	r2, r3
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800c1e8:	2300      	movs	r3, #0
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3714      	adds	r7, #20
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr
 800c1f6:	bf00      	nop
 800c1f8:	ff0f0fff 	.word	0xff0f0fff

0800c1fc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b085      	sub	sp, #20
 800c200:	af00      	add	r7, sp, #0
 800c202:	60f8      	str	r0, [r7, #12]
 800c204:	60b9      	str	r1, [r7, #8]
 800c206:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	691a      	ldr	r2, [r3, #16]
 800c20c:	4b0c      	ldr	r3, [pc, #48]	@ (800c240 <FMC_SDRAM_SendCommand+0x44>)
 800c20e:	4013      	ands	r3, r2
 800c210:	68ba      	ldr	r2, [r7, #8]
 800c212:	6811      	ldr	r1, [r2, #0]
 800c214:	68ba      	ldr	r2, [r7, #8]
 800c216:	6852      	ldr	r2, [r2, #4]
 800c218:	4311      	orrs	r1, r2
 800c21a:	68ba      	ldr	r2, [r7, #8]
 800c21c:	6892      	ldr	r2, [r2, #8]
 800c21e:	3a01      	subs	r2, #1
 800c220:	0152      	lsls	r2, r2, #5
 800c222:	4311      	orrs	r1, r2
 800c224:	68ba      	ldr	r2, [r7, #8]
 800c226:	68d2      	ldr	r2, [r2, #12]
 800c228:	0252      	lsls	r2, r2, #9
 800c22a:	430a      	orrs	r2, r1
 800c22c:	431a      	orrs	r2, r3
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800c232:	2300      	movs	r3, #0
}
 800c234:	4618      	mov	r0, r3
 800c236:	3714      	adds	r7, #20
 800c238:	46bd      	mov	sp, r7
 800c23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23e:	4770      	bx	lr
 800c240:	ffc00000 	.word	0xffc00000

0800c244 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c244:	b480      	push	{r7}
 800c246:	b083      	sub	sp, #12
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	695a      	ldr	r2, [r3, #20]
 800c252:	4b07      	ldr	r3, [pc, #28]	@ (800c270 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800c254:	4013      	ands	r3, r2
 800c256:	683a      	ldr	r2, [r7, #0]
 800c258:	0052      	lsls	r2, r2, #1
 800c25a:	431a      	orrs	r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800c260:	2300      	movs	r3, #0
}
 800c262:	4618      	mov	r0, r3
 800c264:	370c      	adds	r7, #12
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	ffffc001 	.word	0xffffc001

0800c274 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c274:	b084      	sub	sp, #16
 800c276:	b480      	push	{r7}
 800c278:	b085      	sub	sp, #20
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
 800c27e:	f107 001c 	add.w	r0, r7, #28
 800c282:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c286:	2300      	movs	r3, #0
 800c288:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c28a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c28c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c28e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800c292:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800c296:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800c29a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800c29e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c2a0:	68fa      	ldr	r2, [r7, #12]
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	685a      	ldr	r2, [r3, #4]
 800c2aa:	4b07      	ldr	r3, [pc, #28]	@ (800c2c8 <SDMMC_Init+0x54>)
 800c2ac:	4013      	ands	r3, r2
 800c2ae:	68fa      	ldr	r2, [r7, #12]
 800c2b0:	431a      	orrs	r2, r3
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c2b6:	2300      	movs	r3, #0
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3714      	adds	r7, #20
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	b004      	add	sp, #16
 800c2c4:	4770      	bx	lr
 800c2c6:	bf00      	nop
 800c2c8:	ffff8100 	.word	0xffff8100

0800c2cc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2203      	movs	r2, #3
 800c2d8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c2da:	2300      	movs	r3, #0
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	370c      	adds	r7, #12
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr

0800c2e8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b083      	sub	sp, #12
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f003 0303 	and.w	r3, r3, #3
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	370c      	adds	r7, #12
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr

0800c304 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c304:	b480      	push	{r7}
 800c306:	b085      	sub	sp, #20
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c30e:	2300      	movs	r3, #0
 800c310:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c322:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c328:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c32e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c330:	68fa      	ldr	r2, [r7, #12]
 800c332:	4313      	orrs	r3, r2
 800c334:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	68da      	ldr	r2, [r3, #12]
 800c33a:	4b06      	ldr	r3, [pc, #24]	@ (800c354 <SDMMC_SendCommand+0x50>)
 800c33c:	4013      	ands	r3, r2
 800c33e:	68fa      	ldr	r2, [r7, #12]
 800c340:	431a      	orrs	r2, r3
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c346:	2300      	movs	r3, #0
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3714      	adds	r7, #20
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr
 800c354:	fffff000 	.word	0xfffff000

0800c358 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c358:	b480      	push	{r7}
 800c35a:	b083      	sub	sp, #12
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	691b      	ldr	r3, [r3, #16]
 800c364:	b2db      	uxtb	r3, r3
}
 800c366:	4618      	mov	r0, r3
 800c368:	370c      	adds	r7, #12
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr

0800c372 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c372:	b480      	push	{r7}
 800c374:	b085      	sub	sp, #20
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
 800c37a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	3314      	adds	r3, #20
 800c380:	461a      	mov	r2, r3
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	4413      	add	r3, r2
 800c386:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
}  
 800c38c:	4618      	mov	r0, r3
 800c38e:	3714      	adds	r7, #20
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr

0800c398 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c398:	b480      	push	{r7}
 800c39a:	b085      	sub	sp, #20
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	685a      	ldr	r2, [r3, #4]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c3be:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c3c4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c3ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3d6:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	431a      	orrs	r2, r3
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c3e2:	2300      	movs	r3, #0

}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3714      	adds	r7, #20
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ee:	4770      	bx	lr

0800c3f0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b088      	sub	sp, #32
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c3fe:	2310      	movs	r3, #16
 800c400:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c402:	2340      	movs	r3, #64	@ 0x40
 800c404:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c406:	2300      	movs	r3, #0
 800c408:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c40a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c40e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c410:	f107 0308 	add.w	r3, r7, #8
 800c414:	4619      	mov	r1, r3
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f7ff ff74 	bl	800c304 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c41c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c420:	2110      	movs	r1, #16
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 f9d6 	bl	800c7d4 <SDMMC_GetCmdResp1>
 800c428:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c42a:	69fb      	ldr	r3, [r7, #28]
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3720      	adds	r7, #32
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b088      	sub	sp, #32
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c442:	2311      	movs	r3, #17
 800c444:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c446:	2340      	movs	r3, #64	@ 0x40
 800c448:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c44a:	2300      	movs	r3, #0
 800c44c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c44e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c452:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c454:	f107 0308 	add.w	r3, r7, #8
 800c458:	4619      	mov	r1, r3
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f7ff ff52 	bl	800c304 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c460:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c464:	2111      	movs	r1, #17
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 f9b4 	bl	800c7d4 <SDMMC_GetCmdResp1>
 800c46c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c46e:	69fb      	ldr	r3, [r7, #28]
}
 800c470:	4618      	mov	r0, r3
 800c472:	3720      	adds	r7, #32
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b088      	sub	sp, #32
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c486:	2312      	movs	r3, #18
 800c488:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c48a:	2340      	movs	r3, #64	@ 0x40
 800c48c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c48e:	2300      	movs	r3, #0
 800c490:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c492:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c496:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c498:	f107 0308 	add.w	r3, r7, #8
 800c49c:	4619      	mov	r1, r3
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f7ff ff30 	bl	800c304 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c4a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c4a8:	2112      	movs	r1, #18
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 f992 	bl	800c7d4 <SDMMC_GetCmdResp1>
 800c4b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4b2:	69fb      	ldr	r3, [r7, #28]
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3720      	adds	r7, #32
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b088      	sub	sp, #32
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c4ca:	2318      	movs	r3, #24
 800c4cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c4ce:	2340      	movs	r3, #64	@ 0x40
 800c4d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c4da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4dc:	f107 0308 	add.w	r3, r7, #8
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f7ff ff0e 	bl	800c304 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c4e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c4ec:	2118      	movs	r1, #24
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f000 f970 	bl	800c7d4 <SDMMC_GetCmdResp1>
 800c4f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4f6:	69fb      	ldr	r3, [r7, #28]
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3720      	adds	r7, #32
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b088      	sub	sp, #32
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c50e:	2319      	movs	r3, #25
 800c510:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c512:	2340      	movs	r3, #64	@ 0x40
 800c514:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c516:	2300      	movs	r3, #0
 800c518:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c51a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c51e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c520:	f107 0308 	add.w	r3, r7, #8
 800c524:	4619      	mov	r1, r3
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f7ff feec 	bl	800c304 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c52c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c530:	2119      	movs	r1, #25
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f000 f94e 	bl	800c7d4 <SDMMC_GetCmdResp1>
 800c538:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c53a:	69fb      	ldr	r3, [r7, #28]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3720      	adds	r7, #32
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b088      	sub	sp, #32
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c54c:	2300      	movs	r3, #0
 800c54e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c550:	230c      	movs	r3, #12
 800c552:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c554:	2340      	movs	r3, #64	@ 0x40
 800c556:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c558:	2300      	movs	r3, #0
 800c55a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c55c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c560:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c562:	f107 0308 	add.w	r3, r7, #8
 800c566:	4619      	mov	r1, r3
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f7ff fecb 	bl	800c304 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c56e:	4a05      	ldr	r2, [pc, #20]	@ (800c584 <SDMMC_CmdStopTransfer+0x40>)
 800c570:	210c      	movs	r1, #12
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 f92e 	bl	800c7d4 <SDMMC_GetCmdResp1>
 800c578:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c57a:	69fb      	ldr	r3, [r7, #28]
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3720      	adds	r7, #32
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	05f5e100 	.word	0x05f5e100

0800c588 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b08a      	sub	sp, #40	@ 0x28
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c598:	2307      	movs	r3, #7
 800c59a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c59c:	2340      	movs	r3, #64	@ 0x40
 800c59e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c5a8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5aa:	f107 0310 	add.w	r3, r7, #16
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	68f8      	ldr	r0, [r7, #12]
 800c5b2:	f7ff fea7 	bl	800c304 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c5b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c5ba:	2107      	movs	r1, #7
 800c5bc:	68f8      	ldr	r0, [r7, #12]
 800c5be:	f000 f909 	bl	800c7d4 <SDMMC_GetCmdResp1>
 800c5c2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800c5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3728      	adds	r7, #40	@ 0x28
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}

0800c5ce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c5ce:	b580      	push	{r7, lr}
 800c5d0:	b088      	sub	sp, #32
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c5ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5ec:	f107 0308 	add.w	r3, r7, #8
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f7ff fe86 	bl	800c304 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f000 fb23 	bl	800cc44 <SDMMC_GetCmdError>
 800c5fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c600:	69fb      	ldr	r3, [r7, #28]
}
 800c602:	4618      	mov	r0, r3
 800c604:	3720      	adds	r7, #32
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}

0800c60a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c60a:	b580      	push	{r7, lr}
 800c60c:	b088      	sub	sp, #32
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c612:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800c616:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c618:	2308      	movs	r3, #8
 800c61a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c61c:	2340      	movs	r3, #64	@ 0x40
 800c61e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c620:	2300      	movs	r3, #0
 800c622:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c624:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c628:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c62a:	f107 0308 	add.w	r3, r7, #8
 800c62e:	4619      	mov	r1, r3
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f7ff fe67 	bl	800c304 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 fab6 	bl	800cba8 <SDMMC_GetCmdResp7>
 800c63c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c63e:	69fb      	ldr	r3, [r7, #28]
}
 800c640:	4618      	mov	r0, r3
 800c642:	3720      	adds	r7, #32
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b088      	sub	sp, #32
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c656:	2337      	movs	r3, #55	@ 0x37
 800c658:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c65a:	2340      	movs	r3, #64	@ 0x40
 800c65c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c65e:	2300      	movs	r3, #0
 800c660:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c662:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c666:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c668:	f107 0308 	add.w	r3, r7, #8
 800c66c:	4619      	mov	r1, r3
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f7ff fe48 	bl	800c304 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c674:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c678:	2137      	movs	r1, #55	@ 0x37
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f000 f8aa 	bl	800c7d4 <SDMMC_GetCmdResp1>
 800c680:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c682:	69fb      	ldr	r3, [r7, #28]
}
 800c684:	4618      	mov	r0, r3
 800c686:	3720      	adds	r7, #32
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b088      	sub	sp, #32
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c696:	683a      	ldr	r2, [r7, #0]
 800c698:	4b0d      	ldr	r3, [pc, #52]	@ (800c6d0 <SDMMC_CmdAppOperCommand+0x44>)
 800c69a:	4313      	orrs	r3, r2
 800c69c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c69e:	2329      	movs	r3, #41	@ 0x29
 800c6a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6a2:	2340      	movs	r3, #64	@ 0x40
 800c6a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6b0:	f107 0308 	add.w	r3, r7, #8
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f7ff fe24 	bl	800c304 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 f9bf 	bl	800ca40 <SDMMC_GetCmdResp3>
 800c6c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6c4:	69fb      	ldr	r3, [r7, #28]
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3720      	adds	r7, #32
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	80100000 	.word	0x80100000

0800c6d4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b088      	sub	sp, #32
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c6e0:	2302      	movs	r3, #2
 800c6e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c6e4:	23c0      	movs	r3, #192	@ 0xc0
 800c6e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6f2:	f107 0308 	add.w	r3, r7, #8
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f7ff fe03 	bl	800c304 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f000 f956 	bl	800c9b0 <SDMMC_GetCmdResp2>
 800c704:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c706:	69fb      	ldr	r3, [r7, #28]
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3720      	adds	r7, #32
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b088      	sub	sp, #32
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c71e:	2309      	movs	r3, #9
 800c720:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c722:	23c0      	movs	r3, #192	@ 0xc0
 800c724:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c726:	2300      	movs	r3, #0
 800c728:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c72a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c72e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c730:	f107 0308 	add.w	r3, r7, #8
 800c734:	4619      	mov	r1, r3
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f7ff fde4 	bl	800c304 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f000 f937 	bl	800c9b0 <SDMMC_GetCmdResp2>
 800c742:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c744:	69fb      	ldr	r3, [r7, #28]
}
 800c746:	4618      	mov	r0, r3
 800c748:	3720      	adds	r7, #32
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}

0800c74e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c74e:	b580      	push	{r7, lr}
 800c750:	b088      	sub	sp, #32
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]
 800c756:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c758:	2300      	movs	r3, #0
 800c75a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c75c:	2303      	movs	r3, #3
 800c75e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c760:	2340      	movs	r3, #64	@ 0x40
 800c762:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c764:	2300      	movs	r3, #0
 800c766:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c768:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c76c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c76e:	f107 0308 	add.w	r3, r7, #8
 800c772:	4619      	mov	r1, r3
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f7ff fdc5 	bl	800c304 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c77a:	683a      	ldr	r2, [r7, #0]
 800c77c:	2103      	movs	r1, #3
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f000 f99c 	bl	800cabc <SDMMC_GetCmdResp6>
 800c784:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c786:	69fb      	ldr	r3, [r7, #28]
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3720      	adds	r7, #32
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b088      	sub	sp, #32
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c79e:	230d      	movs	r3, #13
 800c7a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7a2:	2340      	movs	r3, #64	@ 0x40
 800c7a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c7ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7b0:	f107 0308 	add.w	r3, r7, #8
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f7ff fda4 	bl	800c304 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c7bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c7c0:	210d      	movs	r1, #13
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 f806 	bl	800c7d4 <SDMMC_GetCmdResp1>
 800c7c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7ca:	69fb      	ldr	r3, [r7, #28]
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3720      	adds	r7, #32
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b088      	sub	sp, #32
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	60f8      	str	r0, [r7, #12]
 800c7dc:	460b      	mov	r3, r1
 800c7de:	607a      	str	r2, [r7, #4]
 800c7e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c7e2:	4b70      	ldr	r3, [pc, #448]	@ (800c9a4 <SDMMC_GetCmdResp1+0x1d0>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4a70      	ldr	r2, [pc, #448]	@ (800c9a8 <SDMMC_GetCmdResp1+0x1d4>)
 800c7e8:	fba2 2303 	umull	r2, r3, r2, r3
 800c7ec:	0a5a      	lsrs	r2, r3, #9
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	fb02 f303 	mul.w	r3, r2, r3
 800c7f4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c7f6:	69fb      	ldr	r3, [r7, #28]
 800c7f8:	1e5a      	subs	r2, r3, #1
 800c7fa:	61fa      	str	r2, [r7, #28]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d102      	bne.n	800c806 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c800:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c804:	e0c9      	b.n	800c99a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c80a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c80c:	69bb      	ldr	r3, [r7, #24]
 800c80e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c812:	2b00      	cmp	r3, #0
 800c814:	d0ef      	beq.n	800c7f6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c816:	69bb      	ldr	r3, [r7, #24]
 800c818:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d1ea      	bne.n	800c7f6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c824:	f003 0304 	and.w	r3, r3, #4
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d004      	beq.n	800c836 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2204      	movs	r2, #4
 800c830:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c832:	2304      	movs	r3, #4
 800c834:	e0b1      	b.n	800c99a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c83a:	f003 0301 	and.w	r3, r3, #1
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d004      	beq.n	800c84c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	2201      	movs	r2, #1
 800c846:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c848:	2301      	movs	r3, #1
 800c84a:	e0a6      	b.n	800c99a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	22c5      	movs	r2, #197	@ 0xc5
 800c850:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c852:	68f8      	ldr	r0, [r7, #12]
 800c854:	f7ff fd80 	bl	800c358 <SDMMC_GetCommandResponse>
 800c858:	4603      	mov	r3, r0
 800c85a:	461a      	mov	r2, r3
 800c85c:	7afb      	ldrb	r3, [r7, #11]
 800c85e:	4293      	cmp	r3, r2
 800c860:	d001      	beq.n	800c866 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c862:	2301      	movs	r3, #1
 800c864:	e099      	b.n	800c99a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c866:	2100      	movs	r1, #0
 800c868:	68f8      	ldr	r0, [r7, #12]
 800c86a:	f7ff fd82 	bl	800c372 <SDMMC_GetResponse>
 800c86e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c870:	697a      	ldr	r2, [r7, #20]
 800c872:	4b4e      	ldr	r3, [pc, #312]	@ (800c9ac <SDMMC_GetCmdResp1+0x1d8>)
 800c874:	4013      	ands	r3, r2
 800c876:	2b00      	cmp	r3, #0
 800c878:	d101      	bne.n	800c87e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c87a:	2300      	movs	r3, #0
 800c87c:	e08d      	b.n	800c99a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	2b00      	cmp	r3, #0
 800c882:	da02      	bge.n	800c88a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c884:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c888:	e087      	b.n	800c99a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c890:	2b00      	cmp	r3, #0
 800c892:	d001      	beq.n	800c898 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c894:	2340      	movs	r3, #64	@ 0x40
 800c896:	e080      	b.n	800c99a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d001      	beq.n	800c8a6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c8a2:	2380      	movs	r3, #128	@ 0x80
 800c8a4:	e079      	b.n	800c99a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d002      	beq.n	800c8b6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c8b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c8b4:	e071      	b.n	800c99a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d002      	beq.n	800c8c6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c8c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c8c4:	e069      	b.n	800c99a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d002      	beq.n	800c8d6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c8d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c8d4:	e061      	b.n	800c99a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d002      	beq.n	800c8e6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c8e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c8e4:	e059      	b.n	800c99a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d002      	beq.n	800c8f6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c8f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c8f4:	e051      	b.n	800c99a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d002      	beq.n	800c906 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c900:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c904:	e049      	b.n	800c99a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d002      	beq.n	800c916 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c910:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c914:	e041      	b.n	800c99a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d002      	beq.n	800c926 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c920:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c924:	e039      	b.n	800c99a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d002      	beq.n	800c936 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c930:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c934:	e031      	b.n	800c99a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d002      	beq.n	800c946 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c940:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800c944:	e029      	b.n	800c99a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d002      	beq.n	800c956 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c950:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c954:	e021      	b.n	800c99a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d002      	beq.n	800c966 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c960:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c964:	e019      	b.n	800c99a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d002      	beq.n	800c976 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c970:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800c974:	e011      	b.n	800c99a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d002      	beq.n	800c986 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c980:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c984:	e009      	b.n	800c99a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	f003 0308 	and.w	r3, r3, #8
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d002      	beq.n	800c996 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c990:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800c994:	e001      	b.n	800c99a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c996:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3720      	adds	r7, #32
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}
 800c9a2:	bf00      	nop
 800c9a4:	20000048 	.word	0x20000048
 800c9a8:	10624dd3 	.word	0x10624dd3
 800c9ac:	fdffe008 	.word	0xfdffe008

0800c9b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b085      	sub	sp, #20
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c9b8:	4b1f      	ldr	r3, [pc, #124]	@ (800ca38 <SDMMC_GetCmdResp2+0x88>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4a1f      	ldr	r2, [pc, #124]	@ (800ca3c <SDMMC_GetCmdResp2+0x8c>)
 800c9be:	fba2 2303 	umull	r2, r3, r2, r3
 800c9c2:	0a5b      	lsrs	r3, r3, #9
 800c9c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c9c8:	fb02 f303 	mul.w	r3, r2, r3
 800c9cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	1e5a      	subs	r2, r3, #1
 800c9d2:	60fa      	str	r2, [r7, #12]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d102      	bne.n	800c9de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c9d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c9dc:	e026      	b.n	800ca2c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d0ef      	beq.n	800c9ce <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d1ea      	bne.n	800c9ce <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9fc:	f003 0304 	and.w	r3, r3, #4
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d004      	beq.n	800ca0e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2204      	movs	r2, #4
 800ca08:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca0a:	2304      	movs	r3, #4
 800ca0c:	e00e      	b.n	800ca2c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca12:	f003 0301 	and.w	r3, r3, #1
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d004      	beq.n	800ca24 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca20:	2301      	movs	r3, #1
 800ca22:	e003      	b.n	800ca2c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	22c5      	movs	r2, #197	@ 0xc5
 800ca28:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ca2a:	2300      	movs	r3, #0
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3714      	adds	r7, #20
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr
 800ca38:	20000048 	.word	0x20000048
 800ca3c:	10624dd3 	.word	0x10624dd3

0800ca40 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b085      	sub	sp, #20
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ca48:	4b1a      	ldr	r3, [pc, #104]	@ (800cab4 <SDMMC_GetCmdResp3+0x74>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4a1a      	ldr	r2, [pc, #104]	@ (800cab8 <SDMMC_GetCmdResp3+0x78>)
 800ca4e:	fba2 2303 	umull	r2, r3, r2, r3
 800ca52:	0a5b      	lsrs	r3, r3, #9
 800ca54:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca58:	fb02 f303 	mul.w	r3, r2, r3
 800ca5c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	1e5a      	subs	r2, r3, #1
 800ca62:	60fa      	str	r2, [r7, #12]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d102      	bne.n	800ca6e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca68:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ca6c:	e01b      	b.n	800caa6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca72:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d0ef      	beq.n	800ca5e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d1ea      	bne.n	800ca5e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca8c:	f003 0304 	and.w	r3, r3, #4
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d004      	beq.n	800ca9e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2204      	movs	r2, #4
 800ca98:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca9a:	2304      	movs	r3, #4
 800ca9c:	e003      	b.n	800caa6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	22c5      	movs	r2, #197	@ 0xc5
 800caa2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3714      	adds	r7, #20
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr
 800cab2:	bf00      	nop
 800cab4:	20000048 	.word	0x20000048
 800cab8:	10624dd3 	.word	0x10624dd3

0800cabc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b088      	sub	sp, #32
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	460b      	mov	r3, r1
 800cac6:	607a      	str	r2, [r7, #4]
 800cac8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800caca:	4b35      	ldr	r3, [pc, #212]	@ (800cba0 <SDMMC_GetCmdResp6+0xe4>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	4a35      	ldr	r2, [pc, #212]	@ (800cba4 <SDMMC_GetCmdResp6+0xe8>)
 800cad0:	fba2 2303 	umull	r2, r3, r2, r3
 800cad4:	0a5b      	lsrs	r3, r3, #9
 800cad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cada:	fb02 f303 	mul.w	r3, r2, r3
 800cade:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	1e5a      	subs	r2, r3, #1
 800cae4:	61fa      	str	r2, [r7, #28]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d102      	bne.n	800caf0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800caea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800caee:	e052      	b.n	800cb96 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800caf4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800caf6:	69bb      	ldr	r3, [r7, #24]
 800caf8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d0ef      	beq.n	800cae0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cb00:	69bb      	ldr	r3, [r7, #24]
 800cb02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d1ea      	bne.n	800cae0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb0e:	f003 0304 	and.w	r3, r3, #4
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d004      	beq.n	800cb20 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2204      	movs	r2, #4
 800cb1a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cb1c:	2304      	movs	r3, #4
 800cb1e:	e03a      	b.n	800cb96 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb24:	f003 0301 	and.w	r3, r3, #1
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d004      	beq.n	800cb36 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2201      	movs	r2, #1
 800cb30:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb32:	2301      	movs	r3, #1
 800cb34:	e02f      	b.n	800cb96 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cb36:	68f8      	ldr	r0, [r7, #12]
 800cb38:	f7ff fc0e 	bl	800c358 <SDMMC_GetCommandResponse>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	461a      	mov	r2, r3
 800cb40:	7afb      	ldrb	r3, [r7, #11]
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d001      	beq.n	800cb4a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb46:	2301      	movs	r3, #1
 800cb48:	e025      	b.n	800cb96 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	22c5      	movs	r2, #197	@ 0xc5
 800cb4e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cb50:	2100      	movs	r1, #0
 800cb52:	68f8      	ldr	r0, [r7, #12]
 800cb54:	f7ff fc0d 	bl	800c372 <SDMMC_GetResponse>
 800cb58:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d106      	bne.n	800cb72 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	0c1b      	lsrs	r3, r3, #16
 800cb68:	b29a      	uxth	r2, r3
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	e011      	b.n	800cb96 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d002      	beq.n	800cb82 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cb7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cb80:	e009      	b.n	800cb96 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d002      	beq.n	800cb92 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cb8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cb90:	e001      	b.n	800cb96 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cb92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3720      	adds	r7, #32
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	20000048 	.word	0x20000048
 800cba4:	10624dd3 	.word	0x10624dd3

0800cba8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b085      	sub	sp, #20
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cbb0:	4b22      	ldr	r3, [pc, #136]	@ (800cc3c <SDMMC_GetCmdResp7+0x94>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4a22      	ldr	r2, [pc, #136]	@ (800cc40 <SDMMC_GetCmdResp7+0x98>)
 800cbb6:	fba2 2303 	umull	r2, r3, r2, r3
 800cbba:	0a5b      	lsrs	r3, r3, #9
 800cbbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cbc0:	fb02 f303 	mul.w	r3, r2, r3
 800cbc4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	1e5a      	subs	r2, r3, #1
 800cbca:	60fa      	str	r2, [r7, #12]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d102      	bne.n	800cbd6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cbd0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cbd4:	e02c      	b.n	800cc30 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbda:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d0ef      	beq.n	800cbc6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d1ea      	bne.n	800cbc6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbf4:	f003 0304 	and.w	r3, r3, #4
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d004      	beq.n	800cc06 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2204      	movs	r2, #4
 800cc00:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc02:	2304      	movs	r3, #4
 800cc04:	e014      	b.n	800cc30 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc0a:	f003 0301 	and.w	r3, r3, #1
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d004      	beq.n	800cc1c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2201      	movs	r2, #1
 800cc16:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc18:	2301      	movs	r3, #1
 800cc1a:	e009      	b.n	800cc30 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d002      	beq.n	800cc2e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2240      	movs	r2, #64	@ 0x40
 800cc2c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cc2e:	2300      	movs	r3, #0
  
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3714      	adds	r7, #20
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr
 800cc3c:	20000048 	.word	0x20000048
 800cc40:	10624dd3 	.word	0x10624dd3

0800cc44 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b085      	sub	sp, #20
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc4c:	4b11      	ldr	r3, [pc, #68]	@ (800cc94 <SDMMC_GetCmdError+0x50>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4a11      	ldr	r2, [pc, #68]	@ (800cc98 <SDMMC_GetCmdError+0x54>)
 800cc52:	fba2 2303 	umull	r2, r3, r2, r3
 800cc56:	0a5b      	lsrs	r3, r3, #9
 800cc58:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc5c:	fb02 f303 	mul.w	r3, r2, r3
 800cc60:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	1e5a      	subs	r2, r3, #1
 800cc66:	60fa      	str	r2, [r7, #12]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d102      	bne.n	800cc72 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc6c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cc70:	e009      	b.n	800cc86 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d0f1      	beq.n	800cc62 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	22c5      	movs	r2, #197	@ 0xc5
 800cc82:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800cc84:	2300      	movs	r3, #0
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3714      	adds	r7, #20
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr
 800cc92:	bf00      	nop
 800cc94:	20000048 	.word	0x20000048
 800cc98:	10624dd3 	.word	0x10624dd3

0800cc9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cca0:	4904      	ldr	r1, [pc, #16]	@ (800ccb4 <MX_FATFS_Init+0x18>)
 800cca2:	4805      	ldr	r0, [pc, #20]	@ (800ccb8 <MX_FATFS_Init+0x1c>)
 800cca4:	f000 fa88 	bl	800d1b8 <FATFS_LinkDriver>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	461a      	mov	r2, r3
 800ccac:	4b03      	ldr	r3, [pc, #12]	@ (800ccbc <MX_FATFS_Init+0x20>)
 800ccae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ccb0:	bf00      	nop
 800ccb2:	bd80      	pop	{r7, pc}
 800ccb4:	20000e24 	.word	0x20000e24
 800ccb8:	0801f7d4 	.word	0x0801f7d4
 800ccbc:	20000e20 	.word	0x20000e20

0800ccc0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ccca:	f000 f86d 	bl	800cda8 <BSP_SD_IsDetected>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	2b01      	cmp	r3, #1
 800ccd2:	d001      	beq.n	800ccd8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ccd4:	2302      	movs	r3, #2
 800ccd6:	e005      	b.n	800cce4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ccd8:	4804      	ldr	r0, [pc, #16]	@ (800ccec <BSP_SD_Init+0x2c>)
 800ccda:	f7fd f981 	bl	8009fe0 <HAL_SD_Init>
 800ccde:	4603      	mov	r3, r0
 800cce0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800cce2:	79fb      	ldrb	r3, [r7, #7]
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3708      	adds	r7, #8
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}
 800ccec:	200008e4 	.word	0x200008e4

0800ccf0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b086      	sub	sp, #24
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	60f8      	str	r0, [r7, #12]
 800ccf8:	60b9      	str	r1, [r7, #8]
 800ccfa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	68ba      	ldr	r2, [r7, #8]
 800cd04:	68f9      	ldr	r1, [r7, #12]
 800cd06:	4806      	ldr	r0, [pc, #24]	@ (800cd20 <BSP_SD_ReadBlocks_DMA+0x30>)
 800cd08:	f7fd fa22 	bl	800a150 <HAL_SD_ReadBlocks_DMA>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d001      	beq.n	800cd16 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cd12:	2301      	movs	r3, #1
 800cd14:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cd16:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3718      	adds	r7, #24
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	200008e4 	.word	0x200008e4

0800cd24 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b086      	sub	sp, #24
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cd30:	2300      	movs	r3, #0
 800cd32:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	68ba      	ldr	r2, [r7, #8]
 800cd38:	68f9      	ldr	r1, [r7, #12]
 800cd3a:	4806      	ldr	r0, [pc, #24]	@ (800cd54 <BSP_SD_WriteBlocks_DMA+0x30>)
 800cd3c:	f7fd faea 	bl	800a314 <HAL_SD_WriteBlocks_DMA>
 800cd40:	4603      	mov	r3, r0
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d001      	beq.n	800cd4a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cd46:	2301      	movs	r3, #1
 800cd48:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cd4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3718      	adds	r7, #24
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}
 800cd54:	200008e4 	.word	0x200008e4

0800cd58 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cd5c:	4805      	ldr	r0, [pc, #20]	@ (800cd74 <BSP_SD_GetCardState+0x1c>)
 800cd5e:	f7fd fd99 	bl	800a894 <HAL_SD_GetCardState>
 800cd62:	4603      	mov	r3, r0
 800cd64:	2b04      	cmp	r3, #4
 800cd66:	bf14      	ite	ne
 800cd68:	2301      	movne	r3, #1
 800cd6a:	2300      	moveq	r3, #0
 800cd6c:	b2db      	uxtb	r3, r3
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	200008e4 	.word	0x200008e4

0800cd78 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800cd80:	6879      	ldr	r1, [r7, #4]
 800cd82:	4803      	ldr	r0, [pc, #12]	@ (800cd90 <BSP_SD_GetCardInfo+0x18>)
 800cd84:	f7fd fd5a 	bl	800a83c <HAL_SD_GetCardInfo>
}
 800cd88:	bf00      	nop
 800cd8a:	3708      	adds	r7, #8
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	200008e4 	.word	0x200008e4

0800cd94 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800cd9c:	f000 f9b2 	bl	800d104 <BSP_SD_ReadCpltCallback>
}
 800cda0:	bf00      	nop
 800cda2:	3708      	adds	r7, #8
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}

0800cda8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800cdb2:	f000 f80b 	bl	800cdcc <BSP_PlatformIsDetected>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d101      	bne.n	800cdc0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800cdc0:	79fb      	ldrb	r3, [r7, #7]
 800cdc2:	b2db      	uxtb	r3, r3
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3708      	adds	r7, #8
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b082      	sub	sp, #8
 800cdd0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800cdd6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800cdda:	4806      	ldr	r0, [pc, #24]	@ (800cdf4 <BSP_PlatformIsDetected+0x28>)
 800cddc:	f7fa fbaa 	bl	8007534 <HAL_GPIO_ReadPin>
 800cde0:	4603      	mov	r3, r0
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d001      	beq.n	800cdea <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800cde6:	2300      	movs	r3, #0
 800cde8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800cdea:	79fb      	ldrb	r3, [r7, #7]
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3708      	adds	r7, #8
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}
 800cdf4:	40020800 	.word	0x40020800

0800cdf8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b084      	sub	sp, #16
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800ce00:	f000 fa26 	bl	800d250 <osKernelSysTick>
 800ce04:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800ce06:	e006      	b.n	800ce16 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ce08:	f7ff ffa6 	bl	800cd58 <BSP_SD_GetCardState>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d101      	bne.n	800ce16 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ce12:	2300      	movs	r3, #0
 800ce14:	e009      	b.n	800ce2a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800ce16:	f000 fa1b 	bl	800d250 <osKernelSysTick>
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	1ad3      	subs	r3, r2, r3
 800ce20:	687a      	ldr	r2, [r7, #4]
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d8f0      	bhi.n	800ce08 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ce26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
	...

0800ce34 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b082      	sub	sp, #8
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ce3e:	4b0b      	ldr	r3, [pc, #44]	@ (800ce6c <SD_CheckStatus+0x38>)
 800ce40:	2201      	movs	r2, #1
 800ce42:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ce44:	f7ff ff88 	bl	800cd58 <BSP_SD_GetCardState>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d107      	bne.n	800ce5e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ce4e:	4b07      	ldr	r3, [pc, #28]	@ (800ce6c <SD_CheckStatus+0x38>)
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	b2db      	uxtb	r3, r3
 800ce54:	f023 0301 	bic.w	r3, r3, #1
 800ce58:	b2da      	uxtb	r2, r3
 800ce5a:	4b04      	ldr	r3, [pc, #16]	@ (800ce6c <SD_CheckStatus+0x38>)
 800ce5c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ce5e:	4b03      	ldr	r3, [pc, #12]	@ (800ce6c <SD_CheckStatus+0x38>)
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	b2db      	uxtb	r3, r3
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	20000051 	.word	0x20000051

0800ce70 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ce70:	b590      	push	{r4, r7, lr}
 800ce72:	b087      	sub	sp, #28
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	4603      	mov	r3, r0
 800ce78:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ce7a:	4b20      	ldr	r3, [pc, #128]	@ (800cefc <SD_initialize+0x8c>)
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800ce80:	f000 f9da 	bl	800d238 <osKernelRunning>
 800ce84:	4603      	mov	r3, r0
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d030      	beq.n	800ceec <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800ce8a:	f7ff ff19 	bl	800ccc0 <BSP_SD_Init>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d107      	bne.n	800cea4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800ce94:	79fb      	ldrb	r3, [r7, #7]
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7ff ffcc 	bl	800ce34 <SD_CheckStatus>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	461a      	mov	r2, r3
 800cea0:	4b16      	ldr	r3, [pc, #88]	@ (800cefc <SD_initialize+0x8c>)
 800cea2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800cea4:	4b15      	ldr	r3, [pc, #84]	@ (800cefc <SD_initialize+0x8c>)
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	d01e      	beq.n	800ceec <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800ceae:	4b14      	ldr	r3, [pc, #80]	@ (800cf00 <SD_initialize+0x90>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d10e      	bne.n	800ced4 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800ceb6:	4b13      	ldr	r3, [pc, #76]	@ (800cf04 <SD_initialize+0x94>)
 800ceb8:	f107 0408 	add.w	r4, r7, #8
 800cebc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cebe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800cec2:	f107 0308 	add.w	r3, r7, #8
 800cec6:	2100      	movs	r1, #0
 800cec8:	4618      	mov	r0, r3
 800ceca:	f000 fa49 	bl	800d360 <osMessageCreate>
 800cece:	4603      	mov	r3, r0
 800ced0:	4a0b      	ldr	r2, [pc, #44]	@ (800cf00 <SD_initialize+0x90>)
 800ced2:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800ced4:	4b0a      	ldr	r3, [pc, #40]	@ (800cf00 <SD_initialize+0x90>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d107      	bne.n	800ceec <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800cedc:	4b07      	ldr	r3, [pc, #28]	@ (800cefc <SD_initialize+0x8c>)
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	b2db      	uxtb	r3, r3
 800cee2:	f043 0301 	orr.w	r3, r3, #1
 800cee6:	b2da      	uxtb	r2, r3
 800cee8:	4b04      	ldr	r3, [pc, #16]	@ (800cefc <SD_initialize+0x8c>)
 800ceea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800ceec:	4b03      	ldr	r3, [pc, #12]	@ (800cefc <SD_initialize+0x8c>)
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	b2db      	uxtb	r3, r3
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	371c      	adds	r7, #28
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd90      	pop	{r4, r7, pc}
 800cefa:	bf00      	nop
 800cefc:	20000051 	.word	0x20000051
 800cf00:	20000e28 	.word	0x20000e28
 800cf04:	080114d0 	.word	0x080114d0

0800cf08 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	4603      	mov	r3, r0
 800cf10:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cf12:	79fb      	ldrb	r3, [r7, #7]
 800cf14:	4618      	mov	r0, r3
 800cf16:	f7ff ff8d 	bl	800ce34 <SD_CheckStatus>
 800cf1a:	4603      	mov	r3, r0
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3708      	adds	r7, #8
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b08a      	sub	sp, #40	@ 0x28
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60b9      	str	r1, [r7, #8]
 800cf2c:	607a      	str	r2, [r7, #4]
 800cf2e:	603b      	str	r3, [r7, #0]
 800cf30:	4603      	mov	r3, r0
 800cf32:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800cf34:	2301      	movs	r3, #1
 800cf36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cf3a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800cf3e:	f7ff ff5b 	bl	800cdf8 <SD_CheckStatusWithTimeout>
 800cf42:	4603      	mov	r3, r0
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	da02      	bge.n	800cf4e <SD_read+0x2a>
  {
    return res;
 800cf48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cf4c:	e032      	b.n	800cfb4 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800cf4e:	683a      	ldr	r2, [r7, #0]
 800cf50:	6879      	ldr	r1, [r7, #4]
 800cf52:	68b8      	ldr	r0, [r7, #8]
 800cf54:	f7ff fecc 	bl	800ccf0 <BSP_SD_ReadBlocks_DMA>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800cf5e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d124      	bne.n	800cfb0 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800cf66:	4b15      	ldr	r3, [pc, #84]	@ (800cfbc <SD_read+0x98>)
 800cf68:	6819      	ldr	r1, [r3, #0]
 800cf6a:	f107 0314 	add.w	r3, r7, #20
 800cf6e:	f247 5230 	movw	r2, #30000	@ 0x7530
 800cf72:	4618      	mov	r0, r3
 800cf74:	f000 fa5c 	bl	800d430 <osMessageGet>

    if (event.status == osEventMessage)
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	2b10      	cmp	r3, #16
 800cf7c:	d118      	bne.n	800cfb0 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800cf7e:	69bb      	ldr	r3, [r7, #24]
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	d115      	bne.n	800cfb0 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800cf84:	f000 f964 	bl	800d250 <osKernelSysTick>
 800cf88:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800cf8a:	e008      	b.n	800cf9e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cf8c:	f7ff fee4 	bl	800cd58 <BSP_SD_GetCardState>
 800cf90:	4603      	mov	r3, r0
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d103      	bne.n	800cf9e <SD_read+0x7a>
              {
                res = RES_OK;
 800cf96:	2300      	movs	r3, #0
 800cf98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800cf9c:	e008      	b.n	800cfb0 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800cf9e:	f000 f957 	bl	800d250 <osKernelSysTick>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	6a3b      	ldr	r3, [r7, #32]
 800cfa6:	1ad3      	subs	r3, r2, r3
 800cfa8:	f247 522f 	movw	r2, #29999	@ 0x752f
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d9ed      	bls.n	800cf8c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800cfb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3728      	adds	r7, #40	@ 0x28
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	20000e28 	.word	0x20000e28

0800cfc0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b08a      	sub	sp, #40	@ 0x28
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	60b9      	str	r1, [r7, #8]
 800cfc8:	607a      	str	r2, [r7, #4]
 800cfca:	603b      	str	r3, [r7, #0]
 800cfcc:	4603      	mov	r3, r0
 800cfce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cfd6:	f247 5030 	movw	r0, #30000	@ 0x7530
 800cfda:	f7ff ff0d 	bl	800cdf8 <SD_CheckStatusWithTimeout>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	da02      	bge.n	800cfea <SD_write+0x2a>
  {
    return res;
 800cfe4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cfe8:	e02e      	b.n	800d048 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800cfea:	683a      	ldr	r2, [r7, #0]
 800cfec:	6879      	ldr	r1, [r7, #4]
 800cfee:	68b8      	ldr	r0, [r7, #8]
 800cff0:	f7ff fe98 	bl	800cd24 <BSP_SD_WriteBlocks_DMA>
 800cff4:	4603      	mov	r3, r0
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d124      	bne.n	800d044 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800cffa:	4b15      	ldr	r3, [pc, #84]	@ (800d050 <SD_write+0x90>)
 800cffc:	6819      	ldr	r1, [r3, #0]
 800cffe:	f107 0314 	add.w	r3, r7, #20
 800d002:	f247 5230 	movw	r2, #30000	@ 0x7530
 800d006:	4618      	mov	r0, r3
 800d008:	f000 fa12 	bl	800d430 <osMessageGet>

    if (event.status == osEventMessage)
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	2b10      	cmp	r3, #16
 800d010:	d118      	bne.n	800d044 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800d012:	69bb      	ldr	r3, [r7, #24]
 800d014:	2b02      	cmp	r3, #2
 800d016:	d115      	bne.n	800d044 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800d018:	f000 f91a 	bl	800d250 <osKernelSysTick>
 800d01c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d01e:	e008      	b.n	800d032 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d020:	f7ff fe9a 	bl	800cd58 <BSP_SD_GetCardState>
 800d024:	4603      	mov	r3, r0
 800d026:	2b00      	cmp	r3, #0
 800d028:	d103      	bne.n	800d032 <SD_write+0x72>
          {
            res = RES_OK;
 800d02a:	2300      	movs	r3, #0
 800d02c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800d030:	e008      	b.n	800d044 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d032:	f000 f90d 	bl	800d250 <osKernelSysTick>
 800d036:	4602      	mov	r2, r0
 800d038:	6a3b      	ldr	r3, [r7, #32]
 800d03a:	1ad3      	subs	r3, r2, r3
 800d03c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800d040:	4293      	cmp	r3, r2
 800d042:	d9ed      	bls.n	800d020 <SD_write+0x60>
    }

  }
#endif

  return res;
 800d044:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3728      	adds	r7, #40	@ 0x28
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}
 800d050:	20000e28 	.word	0x20000e28

0800d054 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b08c      	sub	sp, #48	@ 0x30
 800d058:	af00      	add	r7, sp, #0
 800d05a:	4603      	mov	r3, r0
 800d05c:	603a      	str	r2, [r7, #0]
 800d05e:	71fb      	strb	r3, [r7, #7]
 800d060:	460b      	mov	r3, r1
 800d062:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d064:	2301      	movs	r3, #1
 800d066:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d06a:	4b25      	ldr	r3, [pc, #148]	@ (800d100 <SD_ioctl+0xac>)
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	b2db      	uxtb	r3, r3
 800d070:	f003 0301 	and.w	r3, r3, #1
 800d074:	2b00      	cmp	r3, #0
 800d076:	d001      	beq.n	800d07c <SD_ioctl+0x28>
 800d078:	2303      	movs	r3, #3
 800d07a:	e03c      	b.n	800d0f6 <SD_ioctl+0xa2>

  switch (cmd)
 800d07c:	79bb      	ldrb	r3, [r7, #6]
 800d07e:	2b03      	cmp	r3, #3
 800d080:	d834      	bhi.n	800d0ec <SD_ioctl+0x98>
 800d082:	a201      	add	r2, pc, #4	@ (adr r2, 800d088 <SD_ioctl+0x34>)
 800d084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d088:	0800d099 	.word	0x0800d099
 800d08c:	0800d0a1 	.word	0x0800d0a1
 800d090:	0800d0b9 	.word	0x0800d0b9
 800d094:	0800d0d3 	.word	0x0800d0d3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d098:	2300      	movs	r3, #0
 800d09a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d09e:	e028      	b.n	800d0f2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d0a0:	f107 030c 	add.w	r3, r7, #12
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f7ff fe67 	bl	800cd78 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d0aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d0b6:	e01c      	b.n	800d0f2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d0b8:	f107 030c 	add.w	r3, r7, #12
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7ff fe5b 	bl	800cd78 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0c4:	b29a      	uxth	r2, r3
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d0d0:	e00f      	b.n	800d0f2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d0d2:	f107 030c 	add.w	r3, r7, #12
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7ff fe4e 	bl	800cd78 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0de:	0a5a      	lsrs	r2, r3, #9
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d0ea:	e002      	b.n	800d0f2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d0ec:	2304      	movs	r3, #4
 800d0ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800d0f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3730      	adds	r7, #48	@ 0x30
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	20000051 	.word	0x20000051

0800d104 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800d108:	4b04      	ldr	r3, [pc, #16]	@ (800d11c <BSP_SD_ReadCpltCallback+0x18>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	2200      	movs	r2, #0
 800d10e:	2101      	movs	r1, #1
 800d110:	4618      	mov	r0, r3
 800d112:	f000 f94d 	bl	800d3b0 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800d116:	bf00      	nop
 800d118:	bd80      	pop	{r7, pc}
 800d11a:	bf00      	nop
 800d11c:	20000e28 	.word	0x20000e28

0800d120 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d120:	b480      	push	{r7}
 800d122:	b087      	sub	sp, #28
 800d124:	af00      	add	r7, sp, #0
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	4613      	mov	r3, r2
 800d12c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d12e:	2301      	movs	r3, #1
 800d130:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d132:	2300      	movs	r3, #0
 800d134:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d136:	4b1f      	ldr	r3, [pc, #124]	@ (800d1b4 <FATFS_LinkDriverEx+0x94>)
 800d138:	7a5b      	ldrb	r3, [r3, #9]
 800d13a:	b2db      	uxtb	r3, r3
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d131      	bne.n	800d1a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d140:	4b1c      	ldr	r3, [pc, #112]	@ (800d1b4 <FATFS_LinkDriverEx+0x94>)
 800d142:	7a5b      	ldrb	r3, [r3, #9]
 800d144:	b2db      	uxtb	r3, r3
 800d146:	461a      	mov	r2, r3
 800d148:	4b1a      	ldr	r3, [pc, #104]	@ (800d1b4 <FATFS_LinkDriverEx+0x94>)
 800d14a:	2100      	movs	r1, #0
 800d14c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d14e:	4b19      	ldr	r3, [pc, #100]	@ (800d1b4 <FATFS_LinkDriverEx+0x94>)
 800d150:	7a5b      	ldrb	r3, [r3, #9]
 800d152:	b2db      	uxtb	r3, r3
 800d154:	4a17      	ldr	r2, [pc, #92]	@ (800d1b4 <FATFS_LinkDriverEx+0x94>)
 800d156:	009b      	lsls	r3, r3, #2
 800d158:	4413      	add	r3, r2
 800d15a:	68fa      	ldr	r2, [r7, #12]
 800d15c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d15e:	4b15      	ldr	r3, [pc, #84]	@ (800d1b4 <FATFS_LinkDriverEx+0x94>)
 800d160:	7a5b      	ldrb	r3, [r3, #9]
 800d162:	b2db      	uxtb	r3, r3
 800d164:	461a      	mov	r2, r3
 800d166:	4b13      	ldr	r3, [pc, #76]	@ (800d1b4 <FATFS_LinkDriverEx+0x94>)
 800d168:	4413      	add	r3, r2
 800d16a:	79fa      	ldrb	r2, [r7, #7]
 800d16c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d16e:	4b11      	ldr	r3, [pc, #68]	@ (800d1b4 <FATFS_LinkDriverEx+0x94>)
 800d170:	7a5b      	ldrb	r3, [r3, #9]
 800d172:	b2db      	uxtb	r3, r3
 800d174:	1c5a      	adds	r2, r3, #1
 800d176:	b2d1      	uxtb	r1, r2
 800d178:	4a0e      	ldr	r2, [pc, #56]	@ (800d1b4 <FATFS_LinkDriverEx+0x94>)
 800d17a:	7251      	strb	r1, [r2, #9]
 800d17c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d17e:	7dbb      	ldrb	r3, [r7, #22]
 800d180:	3330      	adds	r3, #48	@ 0x30
 800d182:	b2da      	uxtb	r2, r3
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	3301      	adds	r3, #1
 800d18c:	223a      	movs	r2, #58	@ 0x3a
 800d18e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	3302      	adds	r3, #2
 800d194:	222f      	movs	r2, #47	@ 0x2f
 800d196:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	3303      	adds	r3, #3
 800d19c:	2200      	movs	r2, #0
 800d19e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d1a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	371c      	adds	r7, #28
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr
 800d1b2:	bf00      	nop
 800d1b4:	20000e2c 	.word	0x20000e2c

0800d1b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	6839      	ldr	r1, [r7, #0]
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f7ff ffaa 	bl	800d120 <FATFS_LinkDriverEx>
 800d1cc:	4603      	mov	r3, r0
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3708      	adds	r7, #8
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}

0800d1d6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d1d6:	b480      	push	{r7}
 800d1d8:	b085      	sub	sp, #20
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	4603      	mov	r3, r0
 800d1de:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d1e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d1e8:	2b84      	cmp	r3, #132	@ 0x84
 800d1ea:	d005      	beq.n	800d1f8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d1ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	4413      	add	r3, r2
 800d1f4:	3303      	adds	r3, #3
 800d1f6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3714      	adds	r7, #20
 800d1fe:	46bd      	mov	sp, r7
 800d200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d204:	4770      	bx	lr

0800d206 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800d206:	b480      	push	{r7}
 800d208:	b083      	sub	sp, #12
 800d20a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d20c:	f3ef 8305 	mrs	r3, IPSR
 800d210:	607b      	str	r3, [r7, #4]
  return(result);
 800d212:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800d214:	2b00      	cmp	r3, #0
 800d216:	bf14      	ite	ne
 800d218:	2301      	movne	r3, #1
 800d21a:	2300      	moveq	r3, #0
 800d21c:	b2db      	uxtb	r3, r3
}
 800d21e:	4618      	mov	r0, r3
 800d220:	370c      	adds	r7, #12
 800d222:	46bd      	mov	sp, r7
 800d224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d228:	4770      	bx	lr

0800d22a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d22a:	b580      	push	{r7, lr}
 800d22c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d22e:	f001 fb9d 	bl	800e96c <vTaskStartScheduler>
  
  return osOK;
 800d232:	2300      	movs	r3, #0
}
 800d234:	4618      	mov	r0, r3
 800d236:	bd80      	pop	{r7, pc}

0800d238 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800d23c:	f001 ffec 	bl	800f218 <xTaskGetSchedulerState>
 800d240:	4603      	mov	r3, r0
 800d242:	2b01      	cmp	r3, #1
 800d244:	d101      	bne.n	800d24a <osKernelRunning+0x12>
    return 0;
 800d246:	2300      	movs	r3, #0
 800d248:	e000      	b.n	800d24c <osKernelRunning+0x14>
  else
    return 1;
 800d24a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	bd80      	pop	{r7, pc}

0800d250 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800d254:	f7ff ffd7 	bl	800d206 <inHandlerMode>
 800d258:	4603      	mov	r3, r0
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d003      	beq.n	800d266 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800d25e:	f001 fcb1 	bl	800ebc4 <xTaskGetTickCountFromISR>
 800d262:	4603      	mov	r3, r0
 800d264:	e002      	b.n	800d26c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800d266:	f001 fc9d 	bl	800eba4 <xTaskGetTickCount>
 800d26a:	4603      	mov	r3, r0
  }
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d270:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d272:	b089      	sub	sp, #36	@ 0x24
 800d274:	af04      	add	r7, sp, #16
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	695b      	ldr	r3, [r3, #20]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d020      	beq.n	800d2c4 <osThreadCreate+0x54>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	699b      	ldr	r3, [r3, #24]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d01c      	beq.n	800d2c4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	685c      	ldr	r4, [r3, #4]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	691e      	ldr	r6, [r3, #16]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d29c:	4618      	mov	r0, r3
 800d29e:	f7ff ff9a 	bl	800d1d6 <makeFreeRtosPriority>
 800d2a2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	695b      	ldr	r3, [r3, #20]
 800d2a8:	687a      	ldr	r2, [r7, #4]
 800d2aa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d2ac:	9202      	str	r2, [sp, #8]
 800d2ae:	9301      	str	r3, [sp, #4]
 800d2b0:	9100      	str	r1, [sp, #0]
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	4632      	mov	r2, r6
 800d2b6:	4629      	mov	r1, r5
 800d2b8:	4620      	mov	r0, r4
 800d2ba:	f001 f8e1 	bl	800e480 <xTaskCreateStatic>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	60fb      	str	r3, [r7, #12]
 800d2c2:	e01c      	b.n	800d2fe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	685c      	ldr	r4, [r3, #4]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d2d0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f7ff ff7c 	bl	800d1d6 <makeFreeRtosPriority>
 800d2de:	4602      	mov	r2, r0
 800d2e0:	f107 030c 	add.w	r3, r7, #12
 800d2e4:	9301      	str	r3, [sp, #4]
 800d2e6:	9200      	str	r2, [sp, #0]
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	4632      	mov	r2, r6
 800d2ec:	4629      	mov	r1, r5
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	f001 f92c 	bl	800e54c <xTaskCreate>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b01      	cmp	r3, #1
 800d2f8:	d001      	beq.n	800d2fe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	e000      	b.n	800d300 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
}
 800d300:	4618      	mov	r0, r3
 800d302:	3714      	adds	r7, #20
 800d304:	46bd      	mov	sp, r7
 800d306:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d308 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b084      	sub	sp, #16
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d001      	beq.n	800d31e <osDelay+0x16>
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	e000      	b.n	800d320 <osDelay+0x18>
 800d31e:	2301      	movs	r3, #1
 800d320:	4618      	mov	r0, r3
 800d322:	f001 faeb 	bl	800e8fc <vTaskDelay>
  
  return osOK;
 800d326:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3710      	adds	r7, #16
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}

0800d330 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b082      	sub	sp, #8
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	685b      	ldr	r3, [r3, #4]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d007      	beq.n	800d350 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	4619      	mov	r1, r3
 800d346:	2001      	movs	r0, #1
 800d348:	f000 fb21 	bl	800d98e <xQueueCreateMutexStatic>
 800d34c:	4603      	mov	r3, r0
 800d34e:	e003      	b.n	800d358 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800d350:	2001      	movs	r0, #1
 800d352:	f000 fb04 	bl	800d95e <xQueueCreateMutex>
 800d356:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3708      	adds	r7, #8
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800d360:	b590      	push	{r4, r7, lr}
 800d362:	b085      	sub	sp, #20
 800d364:	af02      	add	r7, sp, #8
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	689b      	ldr	r3, [r3, #8]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d011      	beq.n	800d396 <osMessageCreate+0x36>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	68db      	ldr	r3, [r3, #12]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d00d      	beq.n	800d396 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6818      	ldr	r0, [r3, #0]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6859      	ldr	r1, [r3, #4]
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	689a      	ldr	r2, [r3, #8]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	68db      	ldr	r3, [r3, #12]
 800d38a:	2400      	movs	r4, #0
 800d38c:	9400      	str	r4, [sp, #0]
 800d38e:	f000 f9e3 	bl	800d758 <xQueueGenericCreateStatic>
 800d392:	4603      	mov	r3, r0
 800d394:	e008      	b.n	800d3a8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6818      	ldr	r0, [r3, #0]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	685b      	ldr	r3, [r3, #4]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	4619      	mov	r1, r3
 800d3a2:	f000 fa60 	bl	800d866 <xQueueGenericCreate>
 800d3a6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	370c      	adds	r7, #12
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd90      	pop	{r4, r7, pc}

0800d3b0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b086      	sub	sp, #24
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	60f8      	str	r0, [r7, #12]
 800d3b8:	60b9      	str	r1, [r7, #8]
 800d3ba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d101      	bne.n	800d3ce <osMessagePut+0x1e>
    ticks = 1;
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800d3ce:	f7ff ff1a 	bl	800d206 <inHandlerMode>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d018      	beq.n	800d40a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800d3d8:	f107 0210 	add.w	r2, r7, #16
 800d3dc:	f107 0108 	add.w	r1, r7, #8
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	68f8      	ldr	r0, [r7, #12]
 800d3e4:	f000 fbf8 	bl	800dbd8 <xQueueGenericSendFromISR>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	2b01      	cmp	r3, #1
 800d3ec:	d001      	beq.n	800d3f2 <osMessagePut+0x42>
      return osErrorOS;
 800d3ee:	23ff      	movs	r3, #255	@ 0xff
 800d3f0:	e018      	b.n	800d424 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d014      	beq.n	800d422 <osMessagePut+0x72>
 800d3f8:	4b0c      	ldr	r3, [pc, #48]	@ (800d42c <osMessagePut+0x7c>)
 800d3fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3fe:	601a      	str	r2, [r3, #0]
 800d400:	f3bf 8f4f 	dsb	sy
 800d404:	f3bf 8f6f 	isb	sy
 800d408:	e00b      	b.n	800d422 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800d40a:	f107 0108 	add.w	r1, r7, #8
 800d40e:	2300      	movs	r3, #0
 800d410:	697a      	ldr	r2, [r7, #20]
 800d412:	68f8      	ldr	r0, [r7, #12]
 800d414:	f000 fad6 	bl	800d9c4 <xQueueGenericSend>
 800d418:	4603      	mov	r3, r0
 800d41a:	2b01      	cmp	r3, #1
 800d41c:	d001      	beq.n	800d422 <osMessagePut+0x72>
      return osErrorOS;
 800d41e:	23ff      	movs	r3, #255	@ 0xff
 800d420:	e000      	b.n	800d424 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800d422:	2300      	movs	r3, #0
}
 800d424:	4618      	mov	r0, r3
 800d426:	3718      	adds	r7, #24
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	e000ed04 	.word	0xe000ed04

0800d430 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800d430:	b590      	push	{r4, r7, lr}
 800d432:	b08b      	sub	sp, #44	@ 0x2c
 800d434:	af00      	add	r7, sp, #0
 800d436:	60f8      	str	r0, [r7, #12]
 800d438:	60b9      	str	r1, [r7, #8]
 800d43a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800d440:	2300      	movs	r3, #0
 800d442:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d10a      	bne.n	800d460 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800d44a:	2380      	movs	r3, #128	@ 0x80
 800d44c:	617b      	str	r3, [r7, #20]
    return event;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	461c      	mov	r4, r3
 800d452:	f107 0314 	add.w	r3, r7, #20
 800d456:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d45a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d45e:	e054      	b.n	800d50a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800d460:	2300      	movs	r3, #0
 800d462:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800d464:	2300      	movs	r3, #0
 800d466:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d46e:	d103      	bne.n	800d478 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800d470:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d474:	627b      	str	r3, [r7, #36]	@ 0x24
 800d476:	e009      	b.n	800d48c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d006      	beq.n	800d48c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800d482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d484:	2b00      	cmp	r3, #0
 800d486:	d101      	bne.n	800d48c <osMessageGet+0x5c>
      ticks = 1;
 800d488:	2301      	movs	r3, #1
 800d48a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800d48c:	f7ff febb 	bl	800d206 <inHandlerMode>
 800d490:	4603      	mov	r3, r0
 800d492:	2b00      	cmp	r3, #0
 800d494:	d01c      	beq.n	800d4d0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800d496:	f107 0220 	add.w	r2, r7, #32
 800d49a:	f107 0314 	add.w	r3, r7, #20
 800d49e:	3304      	adds	r3, #4
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	68b8      	ldr	r0, [r7, #8]
 800d4a4:	f000 fe3c 	bl	800e120 <xQueueReceiveFromISR>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	2b01      	cmp	r3, #1
 800d4ac:	d102      	bne.n	800d4b4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800d4ae:	2310      	movs	r3, #16
 800d4b0:	617b      	str	r3, [r7, #20]
 800d4b2:	e001      	b.n	800d4b8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d4b8:	6a3b      	ldr	r3, [r7, #32]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d01d      	beq.n	800d4fa <osMessageGet+0xca>
 800d4be:	4b15      	ldr	r3, [pc, #84]	@ (800d514 <osMessageGet+0xe4>)
 800d4c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4c4:	601a      	str	r2, [r3, #0]
 800d4c6:	f3bf 8f4f 	dsb	sy
 800d4ca:	f3bf 8f6f 	isb	sy
 800d4ce:	e014      	b.n	800d4fa <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800d4d0:	f107 0314 	add.w	r3, r7, #20
 800d4d4:	3304      	adds	r3, #4
 800d4d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4d8:	4619      	mov	r1, r3
 800d4da:	68b8      	ldr	r0, [r7, #8]
 800d4dc:	f000 fc20 	bl	800dd20 <xQueueReceive>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	d102      	bne.n	800d4ec <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800d4e6:	2310      	movs	r3, #16
 800d4e8:	617b      	str	r3, [r7, #20]
 800d4ea:	e006      	b.n	800d4fa <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800d4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d101      	bne.n	800d4f6 <osMessageGet+0xc6>
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	e000      	b.n	800d4f8 <osMessageGet+0xc8>
 800d4f6:	2340      	movs	r3, #64	@ 0x40
 800d4f8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	461c      	mov	r4, r3
 800d4fe:	f107 0314 	add.w	r3, r7, #20
 800d502:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d506:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d50a:	68f8      	ldr	r0, [r7, #12]
 800d50c:	372c      	adds	r7, #44	@ 0x2c
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd90      	pop	{r4, r7, pc}
 800d512:	bf00      	nop
 800d514:	e000ed04 	.word	0xe000ed04

0800d518 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d518:	b480      	push	{r7}
 800d51a:	b083      	sub	sp, #12
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f103 0208 	add.w	r2, r3, #8
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d530:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f103 0208 	add.w	r2, r3, #8
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f103 0208 	add.w	r2, r3, #8
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2200      	movs	r2, #0
 800d54a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d54c:	bf00      	nop
 800d54e:	370c      	adds	r7, #12
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr

0800d558 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d558:	b480      	push	{r7}
 800d55a:	b083      	sub	sp, #12
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2200      	movs	r2, #0
 800d564:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d566:	bf00      	nop
 800d568:	370c      	adds	r7, #12
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr

0800d572 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d572:	b480      	push	{r7}
 800d574:	b085      	sub	sp, #20
 800d576:	af00      	add	r7, sp, #0
 800d578:	6078      	str	r0, [r7, #4]
 800d57a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	68fa      	ldr	r2, [r7, #12]
 800d586:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	689a      	ldr	r2, [r3, #8]
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	689b      	ldr	r3, [r3, #8]
 800d594:	683a      	ldr	r2, [r7, #0]
 800d596:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	683a      	ldr	r2, [r7, #0]
 800d59c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	687a      	ldr	r2, [r7, #4]
 800d5a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	1c5a      	adds	r2, r3, #1
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	601a      	str	r2, [r3, #0]
}
 800d5ae:	bf00      	nop
 800d5b0:	3714      	adds	r7, #20
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b8:	4770      	bx	lr

0800d5ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d5ba:	b480      	push	{r7}
 800d5bc:	b085      	sub	sp, #20
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	6078      	str	r0, [r7, #4]
 800d5c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d5d0:	d103      	bne.n	800d5da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	691b      	ldr	r3, [r3, #16]
 800d5d6:	60fb      	str	r3, [r7, #12]
 800d5d8:	e00c      	b.n	800d5f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	3308      	adds	r3, #8
 800d5de:	60fb      	str	r3, [r7, #12]
 800d5e0:	e002      	b.n	800d5e8 <vListInsert+0x2e>
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	60fb      	str	r3, [r7, #12]
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	685b      	ldr	r3, [r3, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	68ba      	ldr	r2, [r7, #8]
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d2f6      	bcs.n	800d5e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	685a      	ldr	r2, [r3, #4]
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	683a      	ldr	r2, [r7, #0]
 800d602:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	68fa      	ldr	r2, [r7, #12]
 800d608:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	683a      	ldr	r2, [r7, #0]
 800d60e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	687a      	ldr	r2, [r7, #4]
 800d614:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	1c5a      	adds	r2, r3, #1
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	601a      	str	r2, [r3, #0]
}
 800d620:	bf00      	nop
 800d622:	3714      	adds	r7, #20
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr

0800d62c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d62c:	b480      	push	{r7}
 800d62e:	b085      	sub	sp, #20
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	691b      	ldr	r3, [r3, #16]
 800d638:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	687a      	ldr	r2, [r7, #4]
 800d640:	6892      	ldr	r2, [r2, #8]
 800d642:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	689b      	ldr	r3, [r3, #8]
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	6852      	ldr	r2, [r2, #4]
 800d64c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	687a      	ldr	r2, [r7, #4]
 800d654:	429a      	cmp	r2, r3
 800d656:	d103      	bne.n	800d660 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	689a      	ldr	r2, [r3, #8]
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2200      	movs	r2, #0
 800d664:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	1e5a      	subs	r2, r3, #1
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
}
 800d674:	4618      	mov	r0, r3
 800d676:	3714      	adds	r7, #20
 800d678:	46bd      	mov	sp, r7
 800d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67e:	4770      	bx	lr

0800d680 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b084      	sub	sp, #16
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d10d      	bne.n	800d6b0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d698:	b672      	cpsid	i
 800d69a:	f383 8811 	msr	BASEPRI, r3
 800d69e:	f3bf 8f6f 	isb	sy
 800d6a2:	f3bf 8f4f 	dsb	sy
 800d6a6:	b662      	cpsie	i
 800d6a8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d6aa:	bf00      	nop
 800d6ac:	bf00      	nop
 800d6ae:	e7fd      	b.n	800d6ac <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800d6b0:	f002 f904 	bl	800f8bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	681a      	ldr	r2, [r3, #0]
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6bc:	68f9      	ldr	r1, [r7, #12]
 800d6be:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d6c0:	fb01 f303 	mul.w	r3, r1, r3
 800d6c4:	441a      	add	r2, r3
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681a      	ldr	r2, [r3, #0]
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6e0:	3b01      	subs	r3, #1
 800d6e2:	68f9      	ldr	r1, [r7, #12]
 800d6e4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d6e6:	fb01 f303 	mul.w	r3, r1, r3
 800d6ea:	441a      	add	r2, r3
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	22ff      	movs	r2, #255	@ 0xff
 800d6f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	22ff      	movs	r2, #255	@ 0xff
 800d6fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d114      	bne.n	800d730 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	691b      	ldr	r3, [r3, #16]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d01a      	beq.n	800d744 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	3310      	adds	r3, #16
 800d712:	4618      	mov	r0, r3
 800d714:	f001 fbb2 	bl	800ee7c <xTaskRemoveFromEventList>
 800d718:	4603      	mov	r3, r0
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d012      	beq.n	800d744 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d71e:	4b0d      	ldr	r3, [pc, #52]	@ (800d754 <xQueueGenericReset+0xd4>)
 800d720:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d724:	601a      	str	r2, [r3, #0]
 800d726:	f3bf 8f4f 	dsb	sy
 800d72a:	f3bf 8f6f 	isb	sy
 800d72e:	e009      	b.n	800d744 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	3310      	adds	r3, #16
 800d734:	4618      	mov	r0, r3
 800d736:	f7ff feef 	bl	800d518 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	3324      	adds	r3, #36	@ 0x24
 800d73e:	4618      	mov	r0, r3
 800d740:	f7ff feea 	bl	800d518 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d744:	f002 f8f0 	bl	800f928 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d748:	2301      	movs	r3, #1
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3710      	adds	r7, #16
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
 800d752:	bf00      	nop
 800d754:	e000ed04 	.word	0xe000ed04

0800d758 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b08e      	sub	sp, #56	@ 0x38
 800d75c:	af02      	add	r7, sp, #8
 800d75e:	60f8      	str	r0, [r7, #12]
 800d760:	60b9      	str	r1, [r7, #8]
 800d762:	607a      	str	r2, [r7, #4]
 800d764:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d10d      	bne.n	800d788 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800d76c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d770:	b672      	cpsid	i
 800d772:	f383 8811 	msr	BASEPRI, r3
 800d776:	f3bf 8f6f 	isb	sy
 800d77a:	f3bf 8f4f 	dsb	sy
 800d77e:	b662      	cpsie	i
 800d780:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d782:	bf00      	nop
 800d784:	bf00      	nop
 800d786:	e7fd      	b.n	800d784 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d10d      	bne.n	800d7aa <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800d78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d792:	b672      	cpsid	i
 800d794:	f383 8811 	msr	BASEPRI, r3
 800d798:	f3bf 8f6f 	isb	sy
 800d79c:	f3bf 8f4f 	dsb	sy
 800d7a0:	b662      	cpsie	i
 800d7a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d7a4:	bf00      	nop
 800d7a6:	bf00      	nop
 800d7a8:	e7fd      	b.n	800d7a6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d002      	beq.n	800d7b6 <xQueueGenericCreateStatic+0x5e>
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d001      	beq.n	800d7ba <xQueueGenericCreateStatic+0x62>
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	e000      	b.n	800d7bc <xQueueGenericCreateStatic+0x64>
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d10d      	bne.n	800d7dc <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800d7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7c4:	b672      	cpsid	i
 800d7c6:	f383 8811 	msr	BASEPRI, r3
 800d7ca:	f3bf 8f6f 	isb	sy
 800d7ce:	f3bf 8f4f 	dsb	sy
 800d7d2:	b662      	cpsie	i
 800d7d4:	623b      	str	r3, [r7, #32]
}
 800d7d6:	bf00      	nop
 800d7d8:	bf00      	nop
 800d7da:	e7fd      	b.n	800d7d8 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d102      	bne.n	800d7e8 <xQueueGenericCreateStatic+0x90>
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d101      	bne.n	800d7ec <xQueueGenericCreateStatic+0x94>
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	e000      	b.n	800d7ee <xQueueGenericCreateStatic+0x96>
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d10d      	bne.n	800d80e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800d7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7f6:	b672      	cpsid	i
 800d7f8:	f383 8811 	msr	BASEPRI, r3
 800d7fc:	f3bf 8f6f 	isb	sy
 800d800:	f3bf 8f4f 	dsb	sy
 800d804:	b662      	cpsie	i
 800d806:	61fb      	str	r3, [r7, #28]
}
 800d808:	bf00      	nop
 800d80a:	bf00      	nop
 800d80c:	e7fd      	b.n	800d80a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d80e:	2348      	movs	r3, #72	@ 0x48
 800d810:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	2b48      	cmp	r3, #72	@ 0x48
 800d816:	d00d      	beq.n	800d834 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800d818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d81c:	b672      	cpsid	i
 800d81e:	f383 8811 	msr	BASEPRI, r3
 800d822:	f3bf 8f6f 	isb	sy
 800d826:	f3bf 8f4f 	dsb	sy
 800d82a:	b662      	cpsie	i
 800d82c:	61bb      	str	r3, [r7, #24]
}
 800d82e:	bf00      	nop
 800d830:	bf00      	nop
 800d832:	e7fd      	b.n	800d830 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d834:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d83a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d00d      	beq.n	800d85c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d842:	2201      	movs	r2, #1
 800d844:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d848:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d84c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d84e:	9300      	str	r3, [sp, #0]
 800d850:	4613      	mov	r3, r2
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	68b9      	ldr	r1, [r7, #8]
 800d856:	68f8      	ldr	r0, [r7, #12]
 800d858:	f000 f848 	bl	800d8ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d85e:	4618      	mov	r0, r3
 800d860:	3730      	adds	r7, #48	@ 0x30
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}

0800d866 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d866:	b580      	push	{r7, lr}
 800d868:	b08a      	sub	sp, #40	@ 0x28
 800d86a:	af02      	add	r7, sp, #8
 800d86c:	60f8      	str	r0, [r7, #12]
 800d86e:	60b9      	str	r1, [r7, #8]
 800d870:	4613      	mov	r3, r2
 800d872:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d10d      	bne.n	800d896 <xQueueGenericCreate+0x30>
	__asm volatile
 800d87a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d87e:	b672      	cpsid	i
 800d880:	f383 8811 	msr	BASEPRI, r3
 800d884:	f3bf 8f6f 	isb	sy
 800d888:	f3bf 8f4f 	dsb	sy
 800d88c:	b662      	cpsie	i
 800d88e:	613b      	str	r3, [r7, #16]
}
 800d890:	bf00      	nop
 800d892:	bf00      	nop
 800d894:	e7fd      	b.n	800d892 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d102      	bne.n	800d8a2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d89c:	2300      	movs	r3, #0
 800d89e:	61fb      	str	r3, [r7, #28]
 800d8a0:	e004      	b.n	800d8ac <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	68ba      	ldr	r2, [r7, #8]
 800d8a6:	fb02 f303 	mul.w	r3, r2, r3
 800d8aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d8ac:	69fb      	ldr	r3, [r7, #28]
 800d8ae:	3348      	adds	r3, #72	@ 0x48
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f002 f931 	bl	800fb18 <pvPortMalloc>
 800d8b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d8b8:	69bb      	ldr	r3, [r7, #24]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d011      	beq.n	800d8e2 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d8be:	69bb      	ldr	r3, [r7, #24]
 800d8c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	3348      	adds	r3, #72	@ 0x48
 800d8c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d8c8:	69bb      	ldr	r3, [r7, #24]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d8d0:	79fa      	ldrb	r2, [r7, #7]
 800d8d2:	69bb      	ldr	r3, [r7, #24]
 800d8d4:	9300      	str	r3, [sp, #0]
 800d8d6:	4613      	mov	r3, r2
 800d8d8:	697a      	ldr	r2, [r7, #20]
 800d8da:	68b9      	ldr	r1, [r7, #8]
 800d8dc:	68f8      	ldr	r0, [r7, #12]
 800d8de:	f000 f805 	bl	800d8ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d8e2:	69bb      	ldr	r3, [r7, #24]
	}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3720      	adds	r7, #32
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	60f8      	str	r0, [r7, #12]
 800d8f4:	60b9      	str	r1, [r7, #8]
 800d8f6:	607a      	str	r2, [r7, #4]
 800d8f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d103      	bne.n	800d908 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d900:	69bb      	ldr	r3, [r7, #24]
 800d902:	69ba      	ldr	r2, [r7, #24]
 800d904:	601a      	str	r2, [r3, #0]
 800d906:	e002      	b.n	800d90e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d908:	69bb      	ldr	r3, [r7, #24]
 800d90a:	687a      	ldr	r2, [r7, #4]
 800d90c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d90e:	69bb      	ldr	r3, [r7, #24]
 800d910:	68fa      	ldr	r2, [r7, #12]
 800d912:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d914:	69bb      	ldr	r3, [r7, #24]
 800d916:	68ba      	ldr	r2, [r7, #8]
 800d918:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d91a:	2101      	movs	r1, #1
 800d91c:	69b8      	ldr	r0, [r7, #24]
 800d91e:	f7ff feaf 	bl	800d680 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d922:	bf00      	nop
 800d924:	3710      	adds	r7, #16
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}

0800d92a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d92a:	b580      	push	{r7, lr}
 800d92c:	b082      	sub	sp, #8
 800d92e:	af00      	add	r7, sp, #0
 800d930:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d00e      	beq.n	800d956 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2200      	movs	r2, #0
 800d93c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2200      	movs	r2, #0
 800d942:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2200      	movs	r2, #0
 800d948:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d94a:	2300      	movs	r3, #0
 800d94c:	2200      	movs	r2, #0
 800d94e:	2100      	movs	r1, #0
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f000 f837 	bl	800d9c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d956:	bf00      	nop
 800d958:	3708      	adds	r7, #8
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}

0800d95e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d95e:	b580      	push	{r7, lr}
 800d960:	b086      	sub	sp, #24
 800d962:	af00      	add	r7, sp, #0
 800d964:	4603      	mov	r3, r0
 800d966:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d968:	2301      	movs	r3, #1
 800d96a:	617b      	str	r3, [r7, #20]
 800d96c:	2300      	movs	r3, #0
 800d96e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d970:	79fb      	ldrb	r3, [r7, #7]
 800d972:	461a      	mov	r2, r3
 800d974:	6939      	ldr	r1, [r7, #16]
 800d976:	6978      	ldr	r0, [r7, #20]
 800d978:	f7ff ff75 	bl	800d866 <xQueueGenericCreate>
 800d97c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d97e:	68f8      	ldr	r0, [r7, #12]
 800d980:	f7ff ffd3 	bl	800d92a <prvInitialiseMutex>

		return xNewQueue;
 800d984:	68fb      	ldr	r3, [r7, #12]
	}
 800d986:	4618      	mov	r0, r3
 800d988:	3718      	adds	r7, #24
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}

0800d98e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d98e:	b580      	push	{r7, lr}
 800d990:	b088      	sub	sp, #32
 800d992:	af02      	add	r7, sp, #8
 800d994:	4603      	mov	r3, r0
 800d996:	6039      	str	r1, [r7, #0]
 800d998:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d99a:	2301      	movs	r3, #1
 800d99c:	617b      	str	r3, [r7, #20]
 800d99e:	2300      	movs	r3, #0
 800d9a0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d9a2:	79fb      	ldrb	r3, [r7, #7]
 800d9a4:	9300      	str	r3, [sp, #0]
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	6939      	ldr	r1, [r7, #16]
 800d9ac:	6978      	ldr	r0, [r7, #20]
 800d9ae:	f7ff fed3 	bl	800d758 <xQueueGenericCreateStatic>
 800d9b2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d9b4:	68f8      	ldr	r0, [r7, #12]
 800d9b6:	f7ff ffb8 	bl	800d92a <prvInitialiseMutex>

		return xNewQueue;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
	}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3718      	adds	r7, #24
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b08e      	sub	sp, #56	@ 0x38
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]
 800d9d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d10d      	bne.n	800d9fc <xQueueGenericSend+0x38>
	__asm volatile
 800d9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9e4:	b672      	cpsid	i
 800d9e6:	f383 8811 	msr	BASEPRI, r3
 800d9ea:	f3bf 8f6f 	isb	sy
 800d9ee:	f3bf 8f4f 	dsb	sy
 800d9f2:	b662      	cpsie	i
 800d9f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d9f6:	bf00      	nop
 800d9f8:	bf00      	nop
 800d9fa:	e7fd      	b.n	800d9f8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d103      	bne.n	800da0a <xQueueGenericSend+0x46>
 800da02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da06:	2b00      	cmp	r3, #0
 800da08:	d101      	bne.n	800da0e <xQueueGenericSend+0x4a>
 800da0a:	2301      	movs	r3, #1
 800da0c:	e000      	b.n	800da10 <xQueueGenericSend+0x4c>
 800da0e:	2300      	movs	r3, #0
 800da10:	2b00      	cmp	r3, #0
 800da12:	d10d      	bne.n	800da30 <xQueueGenericSend+0x6c>
	__asm volatile
 800da14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da18:	b672      	cpsid	i
 800da1a:	f383 8811 	msr	BASEPRI, r3
 800da1e:	f3bf 8f6f 	isb	sy
 800da22:	f3bf 8f4f 	dsb	sy
 800da26:	b662      	cpsie	i
 800da28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800da2a:	bf00      	nop
 800da2c:	bf00      	nop
 800da2e:	e7fd      	b.n	800da2c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	2b02      	cmp	r3, #2
 800da34:	d103      	bne.n	800da3e <xQueueGenericSend+0x7a>
 800da36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da3a:	2b01      	cmp	r3, #1
 800da3c:	d101      	bne.n	800da42 <xQueueGenericSend+0x7e>
 800da3e:	2301      	movs	r3, #1
 800da40:	e000      	b.n	800da44 <xQueueGenericSend+0x80>
 800da42:	2300      	movs	r3, #0
 800da44:	2b00      	cmp	r3, #0
 800da46:	d10d      	bne.n	800da64 <xQueueGenericSend+0xa0>
	__asm volatile
 800da48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da4c:	b672      	cpsid	i
 800da4e:	f383 8811 	msr	BASEPRI, r3
 800da52:	f3bf 8f6f 	isb	sy
 800da56:	f3bf 8f4f 	dsb	sy
 800da5a:	b662      	cpsie	i
 800da5c:	623b      	str	r3, [r7, #32]
}
 800da5e:	bf00      	nop
 800da60:	bf00      	nop
 800da62:	e7fd      	b.n	800da60 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da64:	f001 fbd8 	bl	800f218 <xTaskGetSchedulerState>
 800da68:	4603      	mov	r3, r0
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d102      	bne.n	800da74 <xQueueGenericSend+0xb0>
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d101      	bne.n	800da78 <xQueueGenericSend+0xb4>
 800da74:	2301      	movs	r3, #1
 800da76:	e000      	b.n	800da7a <xQueueGenericSend+0xb6>
 800da78:	2300      	movs	r3, #0
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d10d      	bne.n	800da9a <xQueueGenericSend+0xd6>
	__asm volatile
 800da7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da82:	b672      	cpsid	i
 800da84:	f383 8811 	msr	BASEPRI, r3
 800da88:	f3bf 8f6f 	isb	sy
 800da8c:	f3bf 8f4f 	dsb	sy
 800da90:	b662      	cpsie	i
 800da92:	61fb      	str	r3, [r7, #28]
}
 800da94:	bf00      	nop
 800da96:	bf00      	nop
 800da98:	e7fd      	b.n	800da96 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800da9a:	f001 ff0f 	bl	800f8bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800da9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800daa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800daa6:	429a      	cmp	r2, r3
 800daa8:	d302      	bcc.n	800dab0 <xQueueGenericSend+0xec>
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	2b02      	cmp	r3, #2
 800daae:	d129      	bne.n	800db04 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dab0:	683a      	ldr	r2, [r7, #0]
 800dab2:	68b9      	ldr	r1, [r7, #8]
 800dab4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dab6:	f000 fbd3 	bl	800e260 <prvCopyDataToQueue>
 800daba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dabc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dabe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d010      	beq.n	800dae6 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dac6:	3324      	adds	r3, #36	@ 0x24
 800dac8:	4618      	mov	r0, r3
 800daca:	f001 f9d7 	bl	800ee7c <xTaskRemoveFromEventList>
 800dace:	4603      	mov	r3, r0
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d013      	beq.n	800dafc <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dad4:	4b3f      	ldr	r3, [pc, #252]	@ (800dbd4 <xQueueGenericSend+0x210>)
 800dad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dada:	601a      	str	r2, [r3, #0]
 800dadc:	f3bf 8f4f 	dsb	sy
 800dae0:	f3bf 8f6f 	isb	sy
 800dae4:	e00a      	b.n	800dafc <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d007      	beq.n	800dafc <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800daec:	4b39      	ldr	r3, [pc, #228]	@ (800dbd4 <xQueueGenericSend+0x210>)
 800daee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daf2:	601a      	str	r2, [r3, #0]
 800daf4:	f3bf 8f4f 	dsb	sy
 800daf8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800dafc:	f001 ff14 	bl	800f928 <vPortExitCritical>
				return pdPASS;
 800db00:	2301      	movs	r3, #1
 800db02:	e063      	b.n	800dbcc <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d103      	bne.n	800db12 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800db0a:	f001 ff0d 	bl	800f928 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800db0e:	2300      	movs	r3, #0
 800db10:	e05c      	b.n	800dbcc <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800db12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db14:	2b00      	cmp	r3, #0
 800db16:	d106      	bne.n	800db26 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800db18:	f107 0314 	add.w	r3, r7, #20
 800db1c:	4618      	mov	r0, r3
 800db1e:	f001 fa13 	bl	800ef48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800db22:	2301      	movs	r3, #1
 800db24:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800db26:	f001 feff 	bl	800f928 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800db2a:	f000 ff8d 	bl	800ea48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db2e:	f001 fec5 	bl	800f8bc <vPortEnterCritical>
 800db32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800db38:	b25b      	sxtb	r3, r3
 800db3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800db3e:	d103      	bne.n	800db48 <xQueueGenericSend+0x184>
 800db40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db42:	2200      	movs	r2, #0
 800db44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800db48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800db4e:	b25b      	sxtb	r3, r3
 800db50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800db54:	d103      	bne.n	800db5e <xQueueGenericSend+0x19a>
 800db56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db58:	2200      	movs	r2, #0
 800db5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800db5e:	f001 fee3 	bl	800f928 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800db62:	1d3a      	adds	r2, r7, #4
 800db64:	f107 0314 	add.w	r3, r7, #20
 800db68:	4611      	mov	r1, r2
 800db6a:	4618      	mov	r0, r3
 800db6c:	f001 fa02 	bl	800ef74 <xTaskCheckForTimeOut>
 800db70:	4603      	mov	r3, r0
 800db72:	2b00      	cmp	r3, #0
 800db74:	d124      	bne.n	800dbc0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800db76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800db78:	f000 fc6a 	bl	800e450 <prvIsQueueFull>
 800db7c:	4603      	mov	r3, r0
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d018      	beq.n	800dbb4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800db82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db84:	3310      	adds	r3, #16
 800db86:	687a      	ldr	r2, [r7, #4]
 800db88:	4611      	mov	r1, r2
 800db8a:	4618      	mov	r0, r3
 800db8c:	f001 f94e 	bl	800ee2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800db90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800db92:	f000 fbf5 	bl	800e380 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800db96:	f000 ff65 	bl	800ea64 <xTaskResumeAll>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	f47f af7c 	bne.w	800da9a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800dba2:	4b0c      	ldr	r3, [pc, #48]	@ (800dbd4 <xQueueGenericSend+0x210>)
 800dba4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dba8:	601a      	str	r2, [r3, #0]
 800dbaa:	f3bf 8f4f 	dsb	sy
 800dbae:	f3bf 8f6f 	isb	sy
 800dbb2:	e772      	b.n	800da9a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dbb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dbb6:	f000 fbe3 	bl	800e380 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dbba:	f000 ff53 	bl	800ea64 <xTaskResumeAll>
 800dbbe:	e76c      	b.n	800da9a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dbc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dbc2:	f000 fbdd 	bl	800e380 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dbc6:	f000 ff4d 	bl	800ea64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dbca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3738      	adds	r7, #56	@ 0x38
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}
 800dbd4:	e000ed04 	.word	0xe000ed04

0800dbd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b08e      	sub	sp, #56	@ 0x38
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	60f8      	str	r0, [r7, #12]
 800dbe0:	60b9      	str	r1, [r7, #8]
 800dbe2:	607a      	str	r2, [r7, #4]
 800dbe4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800dbea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d10d      	bne.n	800dc0c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800dbf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbf4:	b672      	cpsid	i
 800dbf6:	f383 8811 	msr	BASEPRI, r3
 800dbfa:	f3bf 8f6f 	isb	sy
 800dbfe:	f3bf 8f4f 	dsb	sy
 800dc02:	b662      	cpsie	i
 800dc04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dc06:	bf00      	nop
 800dc08:	bf00      	nop
 800dc0a:	e7fd      	b.n	800dc08 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d103      	bne.n	800dc1a <xQueueGenericSendFromISR+0x42>
 800dc12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d101      	bne.n	800dc1e <xQueueGenericSendFromISR+0x46>
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	e000      	b.n	800dc20 <xQueueGenericSendFromISR+0x48>
 800dc1e:	2300      	movs	r3, #0
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d10d      	bne.n	800dc40 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800dc24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc28:	b672      	cpsid	i
 800dc2a:	f383 8811 	msr	BASEPRI, r3
 800dc2e:	f3bf 8f6f 	isb	sy
 800dc32:	f3bf 8f4f 	dsb	sy
 800dc36:	b662      	cpsie	i
 800dc38:	623b      	str	r3, [r7, #32]
}
 800dc3a:	bf00      	nop
 800dc3c:	bf00      	nop
 800dc3e:	e7fd      	b.n	800dc3c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	2b02      	cmp	r3, #2
 800dc44:	d103      	bne.n	800dc4e <xQueueGenericSendFromISR+0x76>
 800dc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc4a:	2b01      	cmp	r3, #1
 800dc4c:	d101      	bne.n	800dc52 <xQueueGenericSendFromISR+0x7a>
 800dc4e:	2301      	movs	r3, #1
 800dc50:	e000      	b.n	800dc54 <xQueueGenericSendFromISR+0x7c>
 800dc52:	2300      	movs	r3, #0
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d10d      	bne.n	800dc74 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800dc58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc5c:	b672      	cpsid	i
 800dc5e:	f383 8811 	msr	BASEPRI, r3
 800dc62:	f3bf 8f6f 	isb	sy
 800dc66:	f3bf 8f4f 	dsb	sy
 800dc6a:	b662      	cpsie	i
 800dc6c:	61fb      	str	r3, [r7, #28]
}
 800dc6e:	bf00      	nop
 800dc70:	bf00      	nop
 800dc72:	e7fd      	b.n	800dc70 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dc74:	f001 ff0a 	bl	800fa8c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dc78:	f3ef 8211 	mrs	r2, BASEPRI
 800dc7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc80:	b672      	cpsid	i
 800dc82:	f383 8811 	msr	BASEPRI, r3
 800dc86:	f3bf 8f6f 	isb	sy
 800dc8a:	f3bf 8f4f 	dsb	sy
 800dc8e:	b662      	cpsie	i
 800dc90:	61ba      	str	r2, [r7, #24]
 800dc92:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dc94:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dc96:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dc98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dc9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d302      	bcc.n	800dcaa <xQueueGenericSendFromISR+0xd2>
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	2b02      	cmp	r3, #2
 800dca8:	d12c      	bne.n	800dd04 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dcaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dcb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dcb4:	683a      	ldr	r2, [r7, #0]
 800dcb6:	68b9      	ldr	r1, [r7, #8]
 800dcb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dcba:	f000 fad1 	bl	800e260 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dcbe:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800dcc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dcc6:	d112      	bne.n	800dcee <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dcc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d016      	beq.n	800dcfe <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dcd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcd2:	3324      	adds	r3, #36	@ 0x24
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f001 f8d1 	bl	800ee7c <xTaskRemoveFromEventList>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d00e      	beq.n	800dcfe <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d00b      	beq.n	800dcfe <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2201      	movs	r2, #1
 800dcea:	601a      	str	r2, [r3, #0]
 800dcec:	e007      	b.n	800dcfe <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dcee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	b2db      	uxtb	r3, r3
 800dcf6:	b25a      	sxtb	r2, r3
 800dcf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800dcfe:	2301      	movs	r3, #1
 800dd00:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800dd02:	e001      	b.n	800dd08 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dd04:	2300      	movs	r3, #0
 800dd06:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd0a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dd12:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dd14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3738      	adds	r7, #56	@ 0x38
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
	...

0800dd20 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b08c      	sub	sp, #48	@ 0x30
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	60f8      	str	r0, [r7, #12]
 800dd28:	60b9      	str	r1, [r7, #8]
 800dd2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dd34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d10d      	bne.n	800dd56 <xQueueReceive+0x36>
	__asm volatile
 800dd3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd3e:	b672      	cpsid	i
 800dd40:	f383 8811 	msr	BASEPRI, r3
 800dd44:	f3bf 8f6f 	isb	sy
 800dd48:	f3bf 8f4f 	dsb	sy
 800dd4c:	b662      	cpsie	i
 800dd4e:	623b      	str	r3, [r7, #32]
}
 800dd50:	bf00      	nop
 800dd52:	bf00      	nop
 800dd54:	e7fd      	b.n	800dd52 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d103      	bne.n	800dd64 <xQueueReceive+0x44>
 800dd5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d101      	bne.n	800dd68 <xQueueReceive+0x48>
 800dd64:	2301      	movs	r3, #1
 800dd66:	e000      	b.n	800dd6a <xQueueReceive+0x4a>
 800dd68:	2300      	movs	r3, #0
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d10d      	bne.n	800dd8a <xQueueReceive+0x6a>
	__asm volatile
 800dd6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd72:	b672      	cpsid	i
 800dd74:	f383 8811 	msr	BASEPRI, r3
 800dd78:	f3bf 8f6f 	isb	sy
 800dd7c:	f3bf 8f4f 	dsb	sy
 800dd80:	b662      	cpsie	i
 800dd82:	61fb      	str	r3, [r7, #28]
}
 800dd84:	bf00      	nop
 800dd86:	bf00      	nop
 800dd88:	e7fd      	b.n	800dd86 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd8a:	f001 fa45 	bl	800f218 <xTaskGetSchedulerState>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d102      	bne.n	800dd9a <xQueueReceive+0x7a>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d101      	bne.n	800dd9e <xQueueReceive+0x7e>
 800dd9a:	2301      	movs	r3, #1
 800dd9c:	e000      	b.n	800dda0 <xQueueReceive+0x80>
 800dd9e:	2300      	movs	r3, #0
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d10d      	bne.n	800ddc0 <xQueueReceive+0xa0>
	__asm volatile
 800dda4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dda8:	b672      	cpsid	i
 800ddaa:	f383 8811 	msr	BASEPRI, r3
 800ddae:	f3bf 8f6f 	isb	sy
 800ddb2:	f3bf 8f4f 	dsb	sy
 800ddb6:	b662      	cpsie	i
 800ddb8:	61bb      	str	r3, [r7, #24]
}
 800ddba:	bf00      	nop
 800ddbc:	bf00      	nop
 800ddbe:	e7fd      	b.n	800ddbc <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ddc0:	f001 fd7c 	bl	800f8bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ddc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddc8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ddca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d01f      	beq.n	800de10 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ddd0:	68b9      	ldr	r1, [r7, #8]
 800ddd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ddd4:	f000 faae 	bl	800e334 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ddd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddda:	1e5a      	subs	r2, r3, #1
 800dddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddde:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dde0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dde2:	691b      	ldr	r3, [r3, #16]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d00f      	beq.n	800de08 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dde8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddea:	3310      	adds	r3, #16
 800ddec:	4618      	mov	r0, r3
 800ddee:	f001 f845 	bl	800ee7c <xTaskRemoveFromEventList>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d007      	beq.n	800de08 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ddf8:	4b3c      	ldr	r3, [pc, #240]	@ (800deec <xQueueReceive+0x1cc>)
 800ddfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ddfe:	601a      	str	r2, [r3, #0]
 800de00:	f3bf 8f4f 	dsb	sy
 800de04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800de08:	f001 fd8e 	bl	800f928 <vPortExitCritical>
				return pdPASS;
 800de0c:	2301      	movs	r3, #1
 800de0e:	e069      	b.n	800dee4 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d103      	bne.n	800de1e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800de16:	f001 fd87 	bl	800f928 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800de1a:	2300      	movs	r3, #0
 800de1c:	e062      	b.n	800dee4 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800de1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de20:	2b00      	cmp	r3, #0
 800de22:	d106      	bne.n	800de32 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800de24:	f107 0310 	add.w	r3, r7, #16
 800de28:	4618      	mov	r0, r3
 800de2a:	f001 f88d 	bl	800ef48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800de2e:	2301      	movs	r3, #1
 800de30:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800de32:	f001 fd79 	bl	800f928 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800de36:	f000 fe07 	bl	800ea48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800de3a:	f001 fd3f 	bl	800f8bc <vPortEnterCritical>
 800de3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de44:	b25b      	sxtb	r3, r3
 800de46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de4a:	d103      	bne.n	800de54 <xQueueReceive+0x134>
 800de4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de4e:	2200      	movs	r2, #0
 800de50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800de5a:	b25b      	sxtb	r3, r3
 800de5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de60:	d103      	bne.n	800de6a <xQueueReceive+0x14a>
 800de62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de64:	2200      	movs	r2, #0
 800de66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800de6a:	f001 fd5d 	bl	800f928 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800de6e:	1d3a      	adds	r2, r7, #4
 800de70:	f107 0310 	add.w	r3, r7, #16
 800de74:	4611      	mov	r1, r2
 800de76:	4618      	mov	r0, r3
 800de78:	f001 f87c 	bl	800ef74 <xTaskCheckForTimeOut>
 800de7c:	4603      	mov	r3, r0
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d123      	bne.n	800deca <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de84:	f000 face 	bl	800e424 <prvIsQueueEmpty>
 800de88:	4603      	mov	r3, r0
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d017      	beq.n	800debe <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800de8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de90:	3324      	adds	r3, #36	@ 0x24
 800de92:	687a      	ldr	r2, [r7, #4]
 800de94:	4611      	mov	r1, r2
 800de96:	4618      	mov	r0, r3
 800de98:	f000 ffc8 	bl	800ee2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800de9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de9e:	f000 fa6f 	bl	800e380 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dea2:	f000 fddf 	bl	800ea64 <xTaskResumeAll>
 800dea6:	4603      	mov	r3, r0
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d189      	bne.n	800ddc0 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800deac:	4b0f      	ldr	r3, [pc, #60]	@ (800deec <xQueueReceive+0x1cc>)
 800deae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800deb2:	601a      	str	r2, [r3, #0]
 800deb4:	f3bf 8f4f 	dsb	sy
 800deb8:	f3bf 8f6f 	isb	sy
 800debc:	e780      	b.n	800ddc0 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800debe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dec0:	f000 fa5e 	bl	800e380 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dec4:	f000 fdce 	bl	800ea64 <xTaskResumeAll>
 800dec8:	e77a      	b.n	800ddc0 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800deca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800decc:	f000 fa58 	bl	800e380 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ded0:	f000 fdc8 	bl	800ea64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ded4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ded6:	f000 faa5 	bl	800e424 <prvIsQueueEmpty>
 800deda:	4603      	mov	r3, r0
 800dedc:	2b00      	cmp	r3, #0
 800dede:	f43f af6f 	beq.w	800ddc0 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dee2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3730      	adds	r7, #48	@ 0x30
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}
 800deec:	e000ed04 	.word	0xe000ed04

0800def0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b08e      	sub	sp, #56	@ 0x38
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800defa:	2300      	movs	r3, #0
 800defc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800df02:	2300      	movs	r3, #0
 800df04:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800df06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d10d      	bne.n	800df28 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800df0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df10:	b672      	cpsid	i
 800df12:	f383 8811 	msr	BASEPRI, r3
 800df16:	f3bf 8f6f 	isb	sy
 800df1a:	f3bf 8f4f 	dsb	sy
 800df1e:	b662      	cpsie	i
 800df20:	623b      	str	r3, [r7, #32]
}
 800df22:	bf00      	nop
 800df24:	bf00      	nop
 800df26:	e7fd      	b.n	800df24 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800df28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d00d      	beq.n	800df4c <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800df30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df34:	b672      	cpsid	i
 800df36:	f383 8811 	msr	BASEPRI, r3
 800df3a:	f3bf 8f6f 	isb	sy
 800df3e:	f3bf 8f4f 	dsb	sy
 800df42:	b662      	cpsie	i
 800df44:	61fb      	str	r3, [r7, #28]
}
 800df46:	bf00      	nop
 800df48:	bf00      	nop
 800df4a:	e7fd      	b.n	800df48 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df4c:	f001 f964 	bl	800f218 <xTaskGetSchedulerState>
 800df50:	4603      	mov	r3, r0
 800df52:	2b00      	cmp	r3, #0
 800df54:	d102      	bne.n	800df5c <xQueueSemaphoreTake+0x6c>
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d101      	bne.n	800df60 <xQueueSemaphoreTake+0x70>
 800df5c:	2301      	movs	r3, #1
 800df5e:	e000      	b.n	800df62 <xQueueSemaphoreTake+0x72>
 800df60:	2300      	movs	r3, #0
 800df62:	2b00      	cmp	r3, #0
 800df64:	d10d      	bne.n	800df82 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800df66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df6a:	b672      	cpsid	i
 800df6c:	f383 8811 	msr	BASEPRI, r3
 800df70:	f3bf 8f6f 	isb	sy
 800df74:	f3bf 8f4f 	dsb	sy
 800df78:	b662      	cpsie	i
 800df7a:	61bb      	str	r3, [r7, #24]
}
 800df7c:	bf00      	nop
 800df7e:	bf00      	nop
 800df80:	e7fd      	b.n	800df7e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800df82:	f001 fc9b 	bl	800f8bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800df86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df8a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800df8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d024      	beq.n	800dfdc <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800df92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df94:	1e5a      	subs	r2, r3, #1
 800df96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df98:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d104      	bne.n	800dfac <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dfa2:	f001 fb03 	bl	800f5ac <pvTaskIncrementMutexHeldCount>
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfaa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfae:	691b      	ldr	r3, [r3, #16]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d00f      	beq.n	800dfd4 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfb6:	3310      	adds	r3, #16
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f000 ff5f 	bl	800ee7c <xTaskRemoveFromEventList>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d007      	beq.n	800dfd4 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dfc4:	4b55      	ldr	r3, [pc, #340]	@ (800e11c <xQueueSemaphoreTake+0x22c>)
 800dfc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfca:	601a      	str	r2, [r3, #0]
 800dfcc:	f3bf 8f4f 	dsb	sy
 800dfd0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dfd4:	f001 fca8 	bl	800f928 <vPortExitCritical>
				return pdPASS;
 800dfd8:	2301      	movs	r3, #1
 800dfda:	e09a      	b.n	800e112 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d114      	bne.n	800e00c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dfe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d00d      	beq.n	800e004 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800dfe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfec:	b672      	cpsid	i
 800dfee:	f383 8811 	msr	BASEPRI, r3
 800dff2:	f3bf 8f6f 	isb	sy
 800dff6:	f3bf 8f4f 	dsb	sy
 800dffa:	b662      	cpsie	i
 800dffc:	617b      	str	r3, [r7, #20]
}
 800dffe:	bf00      	nop
 800e000:	bf00      	nop
 800e002:	e7fd      	b.n	800e000 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e004:	f001 fc90 	bl	800f928 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e008:	2300      	movs	r3, #0
 800e00a:	e082      	b.n	800e112 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e00c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d106      	bne.n	800e020 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e012:	f107 030c 	add.w	r3, r7, #12
 800e016:	4618      	mov	r0, r3
 800e018:	f000 ff96 	bl	800ef48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e01c:	2301      	movs	r3, #1
 800e01e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e020:	f001 fc82 	bl	800f928 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e024:	f000 fd10 	bl	800ea48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e028:	f001 fc48 	bl	800f8bc <vPortEnterCritical>
 800e02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e02e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e032:	b25b      	sxtb	r3, r3
 800e034:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e038:	d103      	bne.n	800e042 <xQueueSemaphoreTake+0x152>
 800e03a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e03c:	2200      	movs	r2, #0
 800e03e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e044:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e048:	b25b      	sxtb	r3, r3
 800e04a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e04e:	d103      	bne.n	800e058 <xQueueSemaphoreTake+0x168>
 800e050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e052:	2200      	movs	r2, #0
 800e054:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e058:	f001 fc66 	bl	800f928 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e05c:	463a      	mov	r2, r7
 800e05e:	f107 030c 	add.w	r3, r7, #12
 800e062:	4611      	mov	r1, r2
 800e064:	4618      	mov	r0, r3
 800e066:	f000 ff85 	bl	800ef74 <xTaskCheckForTimeOut>
 800e06a:	4603      	mov	r3, r0
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d132      	bne.n	800e0d6 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e070:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e072:	f000 f9d7 	bl	800e424 <prvIsQueueEmpty>
 800e076:	4603      	mov	r3, r0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d026      	beq.n	800e0ca <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e07c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d109      	bne.n	800e098 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800e084:	f001 fc1a 	bl	800f8bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e08a:	689b      	ldr	r3, [r3, #8]
 800e08c:	4618      	mov	r0, r3
 800e08e:	f001 f8e1 	bl	800f254 <xTaskPriorityInherit>
 800e092:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800e094:	f001 fc48 	bl	800f928 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e09a:	3324      	adds	r3, #36	@ 0x24
 800e09c:	683a      	ldr	r2, [r7, #0]
 800e09e:	4611      	mov	r1, r2
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f000 fec3 	bl	800ee2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e0a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e0a8:	f000 f96a 	bl	800e380 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e0ac:	f000 fcda 	bl	800ea64 <xTaskResumeAll>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	f47f af65 	bne.w	800df82 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800e0b8:	4b18      	ldr	r3, [pc, #96]	@ (800e11c <xQueueSemaphoreTake+0x22c>)
 800e0ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0be:	601a      	str	r2, [r3, #0]
 800e0c0:	f3bf 8f4f 	dsb	sy
 800e0c4:	f3bf 8f6f 	isb	sy
 800e0c8:	e75b      	b.n	800df82 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e0ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e0cc:	f000 f958 	bl	800e380 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e0d0:	f000 fcc8 	bl	800ea64 <xTaskResumeAll>
 800e0d4:	e755      	b.n	800df82 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e0d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e0d8:	f000 f952 	bl	800e380 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e0dc:	f000 fcc2 	bl	800ea64 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e0e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e0e2:	f000 f99f 	bl	800e424 <prvIsQueueEmpty>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	f43f af4a 	beq.w	800df82 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d00d      	beq.n	800e110 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800e0f4:	f001 fbe2 	bl	800f8bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e0f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e0fa:	f000 f899 	bl	800e230 <prvGetDisinheritPriorityAfterTimeout>
 800e0fe:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e102:	689b      	ldr	r3, [r3, #8]
 800e104:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e106:	4618      	mov	r0, r3
 800e108:	f001 f9b0 	bl	800f46c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e10c:	f001 fc0c 	bl	800f928 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e110:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e112:	4618      	mov	r0, r3
 800e114:	3738      	adds	r7, #56	@ 0x38
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	bf00      	nop
 800e11c:	e000ed04 	.word	0xe000ed04

0800e120 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b08e      	sub	sp, #56	@ 0x38
 800e124:	af00      	add	r7, sp, #0
 800e126:	60f8      	str	r0, [r7, #12]
 800e128:	60b9      	str	r1, [r7, #8]
 800e12a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e132:	2b00      	cmp	r3, #0
 800e134:	d10d      	bne.n	800e152 <xQueueReceiveFromISR+0x32>
	__asm volatile
 800e136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e13a:	b672      	cpsid	i
 800e13c:	f383 8811 	msr	BASEPRI, r3
 800e140:	f3bf 8f6f 	isb	sy
 800e144:	f3bf 8f4f 	dsb	sy
 800e148:	b662      	cpsie	i
 800e14a:	623b      	str	r3, [r7, #32]
}
 800e14c:	bf00      	nop
 800e14e:	bf00      	nop
 800e150:	e7fd      	b.n	800e14e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d103      	bne.n	800e160 <xQueueReceiveFromISR+0x40>
 800e158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e15a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d101      	bne.n	800e164 <xQueueReceiveFromISR+0x44>
 800e160:	2301      	movs	r3, #1
 800e162:	e000      	b.n	800e166 <xQueueReceiveFromISR+0x46>
 800e164:	2300      	movs	r3, #0
 800e166:	2b00      	cmp	r3, #0
 800e168:	d10d      	bne.n	800e186 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800e16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e16e:	b672      	cpsid	i
 800e170:	f383 8811 	msr	BASEPRI, r3
 800e174:	f3bf 8f6f 	isb	sy
 800e178:	f3bf 8f4f 	dsb	sy
 800e17c:	b662      	cpsie	i
 800e17e:	61fb      	str	r3, [r7, #28]
}
 800e180:	bf00      	nop
 800e182:	bf00      	nop
 800e184:	e7fd      	b.n	800e182 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e186:	f001 fc81 	bl	800fa8c <vPortValidateInterruptPriority>
	__asm volatile
 800e18a:	f3ef 8211 	mrs	r2, BASEPRI
 800e18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e192:	b672      	cpsid	i
 800e194:	f383 8811 	msr	BASEPRI, r3
 800e198:	f3bf 8f6f 	isb	sy
 800e19c:	f3bf 8f4f 	dsb	sy
 800e1a0:	b662      	cpsie	i
 800e1a2:	61ba      	str	r2, [r7, #24]
 800e1a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e1a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e1a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1ae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d02f      	beq.n	800e216 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e1bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e1c0:	68b9      	ldr	r1, [r7, #8]
 800e1c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e1c4:	f000 f8b6 	bl	800e334 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e1c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1ca:	1e5a      	subs	r2, r3, #1
 800e1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ce:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e1d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e1d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e1d8:	d112      	bne.n	800e200 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1dc:	691b      	ldr	r3, [r3, #16]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d016      	beq.n	800e210 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1e4:	3310      	adds	r3, #16
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f000 fe48 	bl	800ee7c <xTaskRemoveFromEventList>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d00e      	beq.n	800e210 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d00b      	beq.n	800e210 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	601a      	str	r2, [r3, #0]
 800e1fe:	e007      	b.n	800e210 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e200:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e204:	3301      	adds	r3, #1
 800e206:	b2db      	uxtb	r3, r3
 800e208:	b25a      	sxtb	r2, r3
 800e20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e20c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800e210:	2301      	movs	r3, #1
 800e212:	637b      	str	r3, [r7, #52]	@ 0x34
 800e214:	e001      	b.n	800e21a <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800e216:	2300      	movs	r3, #0
 800e218:	637b      	str	r3, [r7, #52]	@ 0x34
 800e21a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e21c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	f383 8811 	msr	BASEPRI, r3
}
 800e224:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e228:	4618      	mov	r0, r3
 800e22a:	3738      	adds	r7, #56	@ 0x38
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}

0800e230 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e230:	b480      	push	{r7}
 800e232:	b085      	sub	sp, #20
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d006      	beq.n	800e24e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f1c3 0307 	rsb	r3, r3, #7
 800e24a:	60fb      	str	r3, [r7, #12]
 800e24c:	e001      	b.n	800e252 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e24e:	2300      	movs	r3, #0
 800e250:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e252:	68fb      	ldr	r3, [r7, #12]
	}
 800e254:	4618      	mov	r0, r3
 800e256:	3714      	adds	r7, #20
 800e258:	46bd      	mov	sp, r7
 800e25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25e:	4770      	bx	lr

0800e260 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b086      	sub	sp, #24
 800e264:	af00      	add	r7, sp, #0
 800e266:	60f8      	str	r0, [r7, #12]
 800e268:	60b9      	str	r1, [r7, #8]
 800e26a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e26c:	2300      	movs	r3, #0
 800e26e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e274:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d10d      	bne.n	800e29a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d14d      	bne.n	800e322 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	689b      	ldr	r3, [r3, #8]
 800e28a:	4618      	mov	r0, r3
 800e28c:	f001 f862 	bl	800f354 <xTaskPriorityDisinherit>
 800e290:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2200      	movs	r2, #0
 800e296:	609a      	str	r2, [r3, #8]
 800e298:	e043      	b.n	800e322 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d119      	bne.n	800e2d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	6858      	ldr	r0, [r3, #4]
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2a8:	461a      	mov	r2, r3
 800e2aa:	68b9      	ldr	r1, [r7, #8]
 800e2ac:	f002 f853 	bl	8010356 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	685a      	ldr	r2, [r3, #4]
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2b8:	441a      	add	r2, r3
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	685a      	ldr	r2, [r3, #4]
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	689b      	ldr	r3, [r3, #8]
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d32b      	bcc.n	800e322 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	681a      	ldr	r2, [r3, #0]
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	605a      	str	r2, [r3, #4]
 800e2d2:	e026      	b.n	800e322 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	68d8      	ldr	r0, [r3, #12]
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2dc:	461a      	mov	r2, r3
 800e2de:	68b9      	ldr	r1, [r7, #8]
 800e2e0:	f002 f839 	bl	8010356 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	68da      	ldr	r2, [r3, #12]
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2ec:	425b      	negs	r3, r3
 800e2ee:	441a      	add	r2, r3
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	68da      	ldr	r2, [r3, #12]
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d207      	bcs.n	800e310 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	689a      	ldr	r2, [r3, #8]
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e308:	425b      	negs	r3, r3
 800e30a:	441a      	add	r2, r3
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2b02      	cmp	r3, #2
 800e314:	d105      	bne.n	800e322 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d002      	beq.n	800e322 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	3b01      	subs	r3, #1
 800e320:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	1c5a      	adds	r2, r3, #1
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e32a:	697b      	ldr	r3, [r7, #20]
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	3718      	adds	r7, #24
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}

0800e334 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b082      	sub	sp, #8
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e342:	2b00      	cmp	r3, #0
 800e344:	d018      	beq.n	800e378 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	68da      	ldr	r2, [r3, #12]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e34e:	441a      	add	r2, r3
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	68da      	ldr	r2, [r3, #12]
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	689b      	ldr	r3, [r3, #8]
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d303      	bcc.n	800e368 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681a      	ldr	r2, [r3, #0]
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	68d9      	ldr	r1, [r3, #12]
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e370:	461a      	mov	r2, r3
 800e372:	6838      	ldr	r0, [r7, #0]
 800e374:	f001 ffef 	bl	8010356 <memcpy>
	}
}
 800e378:	bf00      	nop
 800e37a:	3708      	adds	r7, #8
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b084      	sub	sp, #16
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e388:	f001 fa98 	bl	800f8bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e392:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e394:	e011      	b.n	800e3ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d012      	beq.n	800e3c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	3324      	adds	r3, #36	@ 0x24
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f000 fd6a 	bl	800ee7c <xTaskRemoveFromEventList>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d001      	beq.n	800e3b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e3ae:	f000 fe49 	bl	800f044 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e3b2:	7bfb      	ldrb	r3, [r7, #15]
 800e3b4:	3b01      	subs	r3, #1
 800e3b6:	b2db      	uxtb	r3, r3
 800e3b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e3ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	dce9      	bgt.n	800e396 <prvUnlockQueue+0x16>
 800e3c2:	e000      	b.n	800e3c6 <prvUnlockQueue+0x46>
					break;
 800e3c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	22ff      	movs	r2, #255	@ 0xff
 800e3ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e3ce:	f001 faab 	bl	800f928 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e3d2:	f001 fa73 	bl	800f8bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e3dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e3de:	e011      	b.n	800e404 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	691b      	ldr	r3, [r3, #16]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d012      	beq.n	800e40e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	3310      	adds	r3, #16
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f000 fd45 	bl	800ee7c <xTaskRemoveFromEventList>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d001      	beq.n	800e3fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e3f8:	f000 fe24 	bl	800f044 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e3fc:	7bbb      	ldrb	r3, [r7, #14]
 800e3fe:	3b01      	subs	r3, #1
 800e400:	b2db      	uxtb	r3, r3
 800e402:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e404:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	dce9      	bgt.n	800e3e0 <prvUnlockQueue+0x60>
 800e40c:	e000      	b.n	800e410 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e40e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	22ff      	movs	r2, #255	@ 0xff
 800e414:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e418:	f001 fa86 	bl	800f928 <vPortExitCritical>
}
 800e41c:	bf00      	nop
 800e41e:	3710      	adds	r7, #16
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}

0800e424 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e42c:	f001 fa46 	bl	800f8bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e434:	2b00      	cmp	r3, #0
 800e436:	d102      	bne.n	800e43e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e438:	2301      	movs	r3, #1
 800e43a:	60fb      	str	r3, [r7, #12]
 800e43c:	e001      	b.n	800e442 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e43e:	2300      	movs	r3, #0
 800e440:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e442:	f001 fa71 	bl	800f928 <vPortExitCritical>

	return xReturn;
 800e446:	68fb      	ldr	r3, [r7, #12]
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3710      	adds	r7, #16
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e458:	f001 fa30 	bl	800f8bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e464:	429a      	cmp	r2, r3
 800e466:	d102      	bne.n	800e46e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e468:	2301      	movs	r3, #1
 800e46a:	60fb      	str	r3, [r7, #12]
 800e46c:	e001      	b.n	800e472 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e46e:	2300      	movs	r3, #0
 800e470:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e472:	f001 fa59 	bl	800f928 <vPortExitCritical>

	return xReturn;
 800e476:	68fb      	ldr	r3, [r7, #12]
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3710      	adds	r7, #16
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}

0800e480 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e480:	b580      	push	{r7, lr}
 800e482:	b08e      	sub	sp, #56	@ 0x38
 800e484:	af04      	add	r7, sp, #16
 800e486:	60f8      	str	r0, [r7, #12]
 800e488:	60b9      	str	r1, [r7, #8]
 800e48a:	607a      	str	r2, [r7, #4]
 800e48c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e48e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e490:	2b00      	cmp	r3, #0
 800e492:	d10d      	bne.n	800e4b0 <xTaskCreateStatic+0x30>
	__asm volatile
 800e494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e498:	b672      	cpsid	i
 800e49a:	f383 8811 	msr	BASEPRI, r3
 800e49e:	f3bf 8f6f 	isb	sy
 800e4a2:	f3bf 8f4f 	dsb	sy
 800e4a6:	b662      	cpsie	i
 800e4a8:	623b      	str	r3, [r7, #32]
}
 800e4aa:	bf00      	nop
 800e4ac:	bf00      	nop
 800e4ae:	e7fd      	b.n	800e4ac <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800e4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d10d      	bne.n	800e4d2 <xTaskCreateStatic+0x52>
	__asm volatile
 800e4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4ba:	b672      	cpsid	i
 800e4bc:	f383 8811 	msr	BASEPRI, r3
 800e4c0:	f3bf 8f6f 	isb	sy
 800e4c4:	f3bf 8f4f 	dsb	sy
 800e4c8:	b662      	cpsie	i
 800e4ca:	61fb      	str	r3, [r7, #28]
}
 800e4cc:	bf00      	nop
 800e4ce:	bf00      	nop
 800e4d0:	e7fd      	b.n	800e4ce <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e4d2:	23a0      	movs	r3, #160	@ 0xa0
 800e4d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	2ba0      	cmp	r3, #160	@ 0xa0
 800e4da:	d00d      	beq.n	800e4f8 <xTaskCreateStatic+0x78>
	__asm volatile
 800e4dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4e0:	b672      	cpsid	i
 800e4e2:	f383 8811 	msr	BASEPRI, r3
 800e4e6:	f3bf 8f6f 	isb	sy
 800e4ea:	f3bf 8f4f 	dsb	sy
 800e4ee:	b662      	cpsie	i
 800e4f0:	61bb      	str	r3, [r7, #24]
}
 800e4f2:	bf00      	nop
 800e4f4:	bf00      	nop
 800e4f6:	e7fd      	b.n	800e4f4 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e4f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e4fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d01e      	beq.n	800e53e <xTaskCreateStatic+0xbe>
 800e500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e502:	2b00      	cmp	r3, #0
 800e504:	d01b      	beq.n	800e53e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e508:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e50c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e50e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e512:	2202      	movs	r2, #2
 800e514:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e518:	2300      	movs	r3, #0
 800e51a:	9303      	str	r3, [sp, #12]
 800e51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e51e:	9302      	str	r3, [sp, #8]
 800e520:	f107 0314 	add.w	r3, r7, #20
 800e524:	9301      	str	r3, [sp, #4]
 800e526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e528:	9300      	str	r3, [sp, #0]
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	687a      	ldr	r2, [r7, #4]
 800e52e:	68b9      	ldr	r1, [r7, #8]
 800e530:	68f8      	ldr	r0, [r7, #12]
 800e532:	f000 f851 	bl	800e5d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e536:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e538:	f000 f8f0 	bl	800e71c <prvAddNewTaskToReadyList>
 800e53c:	e001      	b.n	800e542 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800e53e:	2300      	movs	r3, #0
 800e540:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e542:	697b      	ldr	r3, [r7, #20]
	}
 800e544:	4618      	mov	r0, r3
 800e546:	3728      	adds	r7, #40	@ 0x28
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b08c      	sub	sp, #48	@ 0x30
 800e550:	af04      	add	r7, sp, #16
 800e552:	60f8      	str	r0, [r7, #12]
 800e554:	60b9      	str	r1, [r7, #8]
 800e556:	603b      	str	r3, [r7, #0]
 800e558:	4613      	mov	r3, r2
 800e55a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e55c:	88fb      	ldrh	r3, [r7, #6]
 800e55e:	009b      	lsls	r3, r3, #2
 800e560:	4618      	mov	r0, r3
 800e562:	f001 fad9 	bl	800fb18 <pvPortMalloc>
 800e566:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d00e      	beq.n	800e58c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e56e:	20a0      	movs	r0, #160	@ 0xa0
 800e570:	f001 fad2 	bl	800fb18 <pvPortMalloc>
 800e574:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e576:	69fb      	ldr	r3, [r7, #28]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d003      	beq.n	800e584 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e57c:	69fb      	ldr	r3, [r7, #28]
 800e57e:	697a      	ldr	r2, [r7, #20]
 800e580:	631a      	str	r2, [r3, #48]	@ 0x30
 800e582:	e005      	b.n	800e590 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e584:	6978      	ldr	r0, [r7, #20]
 800e586:	f001 fb95 	bl	800fcb4 <vPortFree>
 800e58a:	e001      	b.n	800e590 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e58c:	2300      	movs	r3, #0
 800e58e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e590:	69fb      	ldr	r3, [r7, #28]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d017      	beq.n	800e5c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e596:	69fb      	ldr	r3, [r7, #28]
 800e598:	2200      	movs	r2, #0
 800e59a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e59e:	88fa      	ldrh	r2, [r7, #6]
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	9303      	str	r3, [sp, #12]
 800e5a4:	69fb      	ldr	r3, [r7, #28]
 800e5a6:	9302      	str	r3, [sp, #8]
 800e5a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5aa:	9301      	str	r3, [sp, #4]
 800e5ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5ae:	9300      	str	r3, [sp, #0]
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	68b9      	ldr	r1, [r7, #8]
 800e5b4:	68f8      	ldr	r0, [r7, #12]
 800e5b6:	f000 f80f 	bl	800e5d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e5ba:	69f8      	ldr	r0, [r7, #28]
 800e5bc:	f000 f8ae 	bl	800e71c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	61bb      	str	r3, [r7, #24]
 800e5c4:	e002      	b.n	800e5cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e5c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e5ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e5cc:	69bb      	ldr	r3, [r7, #24]
	}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3720      	adds	r7, #32
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}
	...

0800e5d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b088      	sub	sp, #32
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	60f8      	str	r0, [r7, #12]
 800e5e0:	60b9      	str	r1, [r7, #8]
 800e5e2:	607a      	str	r2, [r7, #4]
 800e5e4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e5ea:	6879      	ldr	r1, [r7, #4]
 800e5ec:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e5f0:	440b      	add	r3, r1
 800e5f2:	009b      	lsls	r3, r3, #2
 800e5f4:	4413      	add	r3, r2
 800e5f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e5f8:	69bb      	ldr	r3, [r7, #24]
 800e5fa:	f023 0307 	bic.w	r3, r3, #7
 800e5fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e600:	69bb      	ldr	r3, [r7, #24]
 800e602:	f003 0307 	and.w	r3, r3, #7
 800e606:	2b00      	cmp	r3, #0
 800e608:	d00d      	beq.n	800e626 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800e60a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e60e:	b672      	cpsid	i
 800e610:	f383 8811 	msr	BASEPRI, r3
 800e614:	f3bf 8f6f 	isb	sy
 800e618:	f3bf 8f4f 	dsb	sy
 800e61c:	b662      	cpsie	i
 800e61e:	617b      	str	r3, [r7, #20]
}
 800e620:	bf00      	nop
 800e622:	bf00      	nop
 800e624:	e7fd      	b.n	800e622 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d01f      	beq.n	800e66c <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e62c:	2300      	movs	r3, #0
 800e62e:	61fb      	str	r3, [r7, #28]
 800e630:	e012      	b.n	800e658 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e632:	68ba      	ldr	r2, [r7, #8]
 800e634:	69fb      	ldr	r3, [r7, #28]
 800e636:	4413      	add	r3, r2
 800e638:	7819      	ldrb	r1, [r3, #0]
 800e63a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e63c:	69fb      	ldr	r3, [r7, #28]
 800e63e:	4413      	add	r3, r2
 800e640:	3334      	adds	r3, #52	@ 0x34
 800e642:	460a      	mov	r2, r1
 800e644:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e646:	68ba      	ldr	r2, [r7, #8]
 800e648:	69fb      	ldr	r3, [r7, #28]
 800e64a:	4413      	add	r3, r2
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d006      	beq.n	800e660 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e652:	69fb      	ldr	r3, [r7, #28]
 800e654:	3301      	adds	r3, #1
 800e656:	61fb      	str	r3, [r7, #28]
 800e658:	69fb      	ldr	r3, [r7, #28]
 800e65a:	2b0f      	cmp	r3, #15
 800e65c:	d9e9      	bls.n	800e632 <prvInitialiseNewTask+0x5a>
 800e65e:	e000      	b.n	800e662 <prvInitialiseNewTask+0x8a>
			{
				break;
 800e660:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e664:	2200      	movs	r2, #0
 800e666:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e66a:	e003      	b.n	800e674 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e66e:	2200      	movs	r2, #0
 800e670:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e676:	2b06      	cmp	r3, #6
 800e678:	d901      	bls.n	800e67e <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e67a:	2306      	movs	r3, #6
 800e67c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e680:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e682:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e686:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e688:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e68c:	2200      	movs	r2, #0
 800e68e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e692:	3304      	adds	r3, #4
 800e694:	4618      	mov	r0, r3
 800e696:	f7fe ff5f 	bl	800d558 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e69a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e69c:	3318      	adds	r3, #24
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f7fe ff5a 	bl	800d558 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e6a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e6a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6ac:	f1c3 0207 	rsb	r2, r3, #7
 800e6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e6b8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6bc:	2200      	movs	r2, #0
 800e6be:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6cc:	334c      	adds	r3, #76	@ 0x4c
 800e6ce:	224c      	movs	r2, #76	@ 0x4c
 800e6d0:	2100      	movs	r1, #0
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f001 fd6d 	bl	80101b2 <memset>
 800e6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6da:	4a0d      	ldr	r2, [pc, #52]	@ (800e710 <prvInitialiseNewTask+0x138>)
 800e6dc:	651a      	str	r2, [r3, #80]	@ 0x50
 800e6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6e0:	4a0c      	ldr	r2, [pc, #48]	@ (800e714 <prvInitialiseNewTask+0x13c>)
 800e6e2:	655a      	str	r2, [r3, #84]	@ 0x54
 800e6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6e6:	4a0c      	ldr	r2, [pc, #48]	@ (800e718 <prvInitialiseNewTask+0x140>)
 800e6e8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e6ea:	683a      	ldr	r2, [r7, #0]
 800e6ec:	68f9      	ldr	r1, [r7, #12]
 800e6ee:	69b8      	ldr	r0, [r7, #24]
 800e6f0:	f000 ffd6 	bl	800f6a0 <pxPortInitialiseStack>
 800e6f4:	4602      	mov	r2, r0
 800e6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e6fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d002      	beq.n	800e706 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e706:	bf00      	nop
 800e708:	3720      	adds	r7, #32
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	bf00      	nop
 800e710:	20004b84 	.word	0x20004b84
 800e714:	20004bec 	.word	0x20004bec
 800e718:	20004c54 	.word	0x20004c54

0800e71c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b082      	sub	sp, #8
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e724:	f001 f8ca 	bl	800f8bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e728:	4b2a      	ldr	r3, [pc, #168]	@ (800e7d4 <prvAddNewTaskToReadyList+0xb8>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	3301      	adds	r3, #1
 800e72e:	4a29      	ldr	r2, [pc, #164]	@ (800e7d4 <prvAddNewTaskToReadyList+0xb8>)
 800e730:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e732:	4b29      	ldr	r3, [pc, #164]	@ (800e7d8 <prvAddNewTaskToReadyList+0xbc>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d109      	bne.n	800e74e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e73a:	4a27      	ldr	r2, [pc, #156]	@ (800e7d8 <prvAddNewTaskToReadyList+0xbc>)
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e740:	4b24      	ldr	r3, [pc, #144]	@ (800e7d4 <prvAddNewTaskToReadyList+0xb8>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	2b01      	cmp	r3, #1
 800e746:	d110      	bne.n	800e76a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e748:	f000 fca0 	bl	800f08c <prvInitialiseTaskLists>
 800e74c:	e00d      	b.n	800e76a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e74e:	4b23      	ldr	r3, [pc, #140]	@ (800e7dc <prvAddNewTaskToReadyList+0xc0>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d109      	bne.n	800e76a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e756:	4b20      	ldr	r3, [pc, #128]	@ (800e7d8 <prvAddNewTaskToReadyList+0xbc>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e760:	429a      	cmp	r2, r3
 800e762:	d802      	bhi.n	800e76a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e764:	4a1c      	ldr	r2, [pc, #112]	@ (800e7d8 <prvAddNewTaskToReadyList+0xbc>)
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e76a:	4b1d      	ldr	r3, [pc, #116]	@ (800e7e0 <prvAddNewTaskToReadyList+0xc4>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	3301      	adds	r3, #1
 800e770:	4a1b      	ldr	r2, [pc, #108]	@ (800e7e0 <prvAddNewTaskToReadyList+0xc4>)
 800e772:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e778:	2201      	movs	r2, #1
 800e77a:	409a      	lsls	r2, r3
 800e77c:	4b19      	ldr	r3, [pc, #100]	@ (800e7e4 <prvAddNewTaskToReadyList+0xc8>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	4313      	orrs	r3, r2
 800e782:	4a18      	ldr	r2, [pc, #96]	@ (800e7e4 <prvAddNewTaskToReadyList+0xc8>)
 800e784:	6013      	str	r3, [r2, #0]
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e78a:	4613      	mov	r3, r2
 800e78c:	009b      	lsls	r3, r3, #2
 800e78e:	4413      	add	r3, r2
 800e790:	009b      	lsls	r3, r3, #2
 800e792:	4a15      	ldr	r2, [pc, #84]	@ (800e7e8 <prvAddNewTaskToReadyList+0xcc>)
 800e794:	441a      	add	r2, r3
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	3304      	adds	r3, #4
 800e79a:	4619      	mov	r1, r3
 800e79c:	4610      	mov	r0, r2
 800e79e:	f7fe fee8 	bl	800d572 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e7a2:	f001 f8c1 	bl	800f928 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e7a6:	4b0d      	ldr	r3, [pc, #52]	@ (800e7dc <prvAddNewTaskToReadyList+0xc0>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d00e      	beq.n	800e7cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e7ae:	4b0a      	ldr	r3, [pc, #40]	@ (800e7d8 <prvAddNewTaskToReadyList+0xbc>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	d207      	bcs.n	800e7cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e7bc:	4b0b      	ldr	r3, [pc, #44]	@ (800e7ec <prvAddNewTaskToReadyList+0xd0>)
 800e7be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e7c2:	601a      	str	r2, [r3, #0]
 800e7c4:	f3bf 8f4f 	dsb	sy
 800e7c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e7cc:	bf00      	nop
 800e7ce:	3708      	adds	r7, #8
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}
 800e7d4:	20000f38 	.word	0x20000f38
 800e7d8:	20000e38 	.word	0x20000e38
 800e7dc:	20000f44 	.word	0x20000f44
 800e7e0:	20000f54 	.word	0x20000f54
 800e7e4:	20000f40 	.word	0x20000f40
 800e7e8:	20000e3c 	.word	0x20000e3c
 800e7ec:	e000ed04 	.word	0xe000ed04

0800e7f0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b08a      	sub	sp, #40	@ 0x28
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d10d      	bne.n	800e820 <vTaskDelayUntil+0x30>
	__asm volatile
 800e804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e808:	b672      	cpsid	i
 800e80a:	f383 8811 	msr	BASEPRI, r3
 800e80e:	f3bf 8f6f 	isb	sy
 800e812:	f3bf 8f4f 	dsb	sy
 800e816:	b662      	cpsie	i
 800e818:	617b      	str	r3, [r7, #20]
}
 800e81a:	bf00      	nop
 800e81c:	bf00      	nop
 800e81e:	e7fd      	b.n	800e81c <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d10d      	bne.n	800e842 <vTaskDelayUntil+0x52>
	__asm volatile
 800e826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e82a:	b672      	cpsid	i
 800e82c:	f383 8811 	msr	BASEPRI, r3
 800e830:	f3bf 8f6f 	isb	sy
 800e834:	f3bf 8f4f 	dsb	sy
 800e838:	b662      	cpsie	i
 800e83a:	613b      	str	r3, [r7, #16]
}
 800e83c:	bf00      	nop
 800e83e:	bf00      	nop
 800e840:	e7fd      	b.n	800e83e <vTaskDelayUntil+0x4e>
		configASSERT( uxSchedulerSuspended == 0 );
 800e842:	4b2b      	ldr	r3, [pc, #172]	@ (800e8f0 <vTaskDelayUntil+0x100>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d00d      	beq.n	800e866 <vTaskDelayUntil+0x76>
	__asm volatile
 800e84a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e84e:	b672      	cpsid	i
 800e850:	f383 8811 	msr	BASEPRI, r3
 800e854:	f3bf 8f6f 	isb	sy
 800e858:	f3bf 8f4f 	dsb	sy
 800e85c:	b662      	cpsie	i
 800e85e:	60fb      	str	r3, [r7, #12]
}
 800e860:	bf00      	nop
 800e862:	bf00      	nop
 800e864:	e7fd      	b.n	800e862 <vTaskDelayUntil+0x72>

		vTaskSuspendAll();
 800e866:	f000 f8ef 	bl	800ea48 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e86a:	4b22      	ldr	r3, [pc, #136]	@ (800e8f4 <vTaskDelayUntil+0x104>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	683a      	ldr	r2, [r7, #0]
 800e876:	4413      	add	r3, r2
 800e878:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	6a3a      	ldr	r2, [r7, #32]
 800e880:	429a      	cmp	r2, r3
 800e882:	d20b      	bcs.n	800e89c <vTaskDelayUntil+0xac>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	69fa      	ldr	r2, [r7, #28]
 800e88a:	429a      	cmp	r2, r3
 800e88c:	d211      	bcs.n	800e8b2 <vTaskDelayUntil+0xc2>
 800e88e:	69fa      	ldr	r2, [r7, #28]
 800e890:	6a3b      	ldr	r3, [r7, #32]
 800e892:	429a      	cmp	r2, r3
 800e894:	d90d      	bls.n	800e8b2 <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 800e896:	2301      	movs	r3, #1
 800e898:	627b      	str	r3, [r7, #36]	@ 0x24
 800e89a:	e00a      	b.n	800e8b2 <vTaskDelayUntil+0xc2>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	69fa      	ldr	r2, [r7, #28]
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d303      	bcc.n	800e8ae <vTaskDelayUntil+0xbe>
 800e8a6:	69fa      	ldr	r2, [r7, #28]
 800e8a8:	6a3b      	ldr	r3, [r7, #32]
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d901      	bls.n	800e8b2 <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	69fa      	ldr	r2, [r7, #28]
 800e8b6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d006      	beq.n	800e8cc <vTaskDelayUntil+0xdc>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e8be:	69fa      	ldr	r2, [r7, #28]
 800e8c0:	6a3b      	ldr	r3, [r7, #32]
 800e8c2:	1ad3      	subs	r3, r2, r3
 800e8c4:	2100      	movs	r1, #0
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f000 fe84 	bl	800f5d4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e8cc:	f000 f8ca 	bl	800ea64 <xTaskResumeAll>
 800e8d0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e8d2:	69bb      	ldr	r3, [r7, #24]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d107      	bne.n	800e8e8 <vTaskDelayUntil+0xf8>
		{
			portYIELD_WITHIN_API();
 800e8d8:	4b07      	ldr	r3, [pc, #28]	@ (800e8f8 <vTaskDelayUntil+0x108>)
 800e8da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8de:	601a      	str	r2, [r3, #0]
 800e8e0:	f3bf 8f4f 	dsb	sy
 800e8e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e8e8:	bf00      	nop
 800e8ea:	3728      	adds	r7, #40	@ 0x28
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd80      	pop	{r7, pc}
 800e8f0:	20000f60 	.word	0x20000f60
 800e8f4:	20000f3c 	.word	0x20000f3c
 800e8f8:	e000ed04 	.word	0xe000ed04

0800e8fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e904:	2300      	movs	r3, #0
 800e906:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d01a      	beq.n	800e944 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e90e:	4b15      	ldr	r3, [pc, #84]	@ (800e964 <vTaskDelay+0x68>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d00d      	beq.n	800e932 <vTaskDelay+0x36>
	__asm volatile
 800e916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e91a:	b672      	cpsid	i
 800e91c:	f383 8811 	msr	BASEPRI, r3
 800e920:	f3bf 8f6f 	isb	sy
 800e924:	f3bf 8f4f 	dsb	sy
 800e928:	b662      	cpsie	i
 800e92a:	60bb      	str	r3, [r7, #8]
}
 800e92c:	bf00      	nop
 800e92e:	bf00      	nop
 800e930:	e7fd      	b.n	800e92e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800e932:	f000 f889 	bl	800ea48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e936:	2100      	movs	r1, #0
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f000 fe4b 	bl	800f5d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e93e:	f000 f891 	bl	800ea64 <xTaskResumeAll>
 800e942:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d107      	bne.n	800e95a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800e94a:	4b07      	ldr	r3, [pc, #28]	@ (800e968 <vTaskDelay+0x6c>)
 800e94c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e950:	601a      	str	r2, [r3, #0]
 800e952:	f3bf 8f4f 	dsb	sy
 800e956:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e95a:	bf00      	nop
 800e95c:	3710      	adds	r7, #16
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	20000f60 	.word	0x20000f60
 800e968:	e000ed04 	.word	0xe000ed04

0800e96c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b08a      	sub	sp, #40	@ 0x28
 800e970:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e972:	2300      	movs	r3, #0
 800e974:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e976:	2300      	movs	r3, #0
 800e978:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e97a:	463a      	mov	r2, r7
 800e97c:	1d39      	adds	r1, r7, #4
 800e97e:	f107 0308 	add.w	r3, r7, #8
 800e982:	4618      	mov	r0, r3
 800e984:	f7f2 fc84 	bl	8001290 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e988:	6839      	ldr	r1, [r7, #0]
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	68ba      	ldr	r2, [r7, #8]
 800e98e:	9202      	str	r2, [sp, #8]
 800e990:	9301      	str	r3, [sp, #4]
 800e992:	2300      	movs	r3, #0
 800e994:	9300      	str	r3, [sp, #0]
 800e996:	2300      	movs	r3, #0
 800e998:	460a      	mov	r2, r1
 800e99a:	4923      	ldr	r1, [pc, #140]	@ (800ea28 <vTaskStartScheduler+0xbc>)
 800e99c:	4823      	ldr	r0, [pc, #140]	@ (800ea2c <vTaskStartScheduler+0xc0>)
 800e99e:	f7ff fd6f 	bl	800e480 <xTaskCreateStatic>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	4a22      	ldr	r2, [pc, #136]	@ (800ea30 <vTaskStartScheduler+0xc4>)
 800e9a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e9a8:	4b21      	ldr	r3, [pc, #132]	@ (800ea30 <vTaskStartScheduler+0xc4>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d002      	beq.n	800e9b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	617b      	str	r3, [r7, #20]
 800e9b4:	e001      	b.n	800e9ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	2b01      	cmp	r3, #1
 800e9be:	d11d      	bne.n	800e9fc <vTaskStartScheduler+0x90>
	__asm volatile
 800e9c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9c4:	b672      	cpsid	i
 800e9c6:	f383 8811 	msr	BASEPRI, r3
 800e9ca:	f3bf 8f6f 	isb	sy
 800e9ce:	f3bf 8f4f 	dsb	sy
 800e9d2:	b662      	cpsie	i
 800e9d4:	613b      	str	r3, [r7, #16]
}
 800e9d6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e9d8:	4b16      	ldr	r3, [pc, #88]	@ (800ea34 <vTaskStartScheduler+0xc8>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	334c      	adds	r3, #76	@ 0x4c
 800e9de:	4a16      	ldr	r2, [pc, #88]	@ (800ea38 <vTaskStartScheduler+0xcc>)
 800e9e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e9e2:	4b16      	ldr	r3, [pc, #88]	@ (800ea3c <vTaskStartScheduler+0xd0>)
 800e9e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e9e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e9ea:	4b15      	ldr	r3, [pc, #84]	@ (800ea40 <vTaskStartScheduler+0xd4>)
 800e9ec:	2201      	movs	r2, #1
 800e9ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e9f0:	4b14      	ldr	r3, [pc, #80]	@ (800ea44 <vTaskStartScheduler+0xd8>)
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e9f6:	f000 fee3 	bl	800f7c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e9fa:	e011      	b.n	800ea20 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ea02:	d10d      	bne.n	800ea20 <vTaskStartScheduler+0xb4>
	__asm volatile
 800ea04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea08:	b672      	cpsid	i
 800ea0a:	f383 8811 	msr	BASEPRI, r3
 800ea0e:	f3bf 8f6f 	isb	sy
 800ea12:	f3bf 8f4f 	dsb	sy
 800ea16:	b662      	cpsie	i
 800ea18:	60fb      	str	r3, [r7, #12]
}
 800ea1a:	bf00      	nop
 800ea1c:	bf00      	nop
 800ea1e:	e7fd      	b.n	800ea1c <vTaskStartScheduler+0xb0>
}
 800ea20:	bf00      	nop
 800ea22:	3718      	adds	r7, #24
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	080114e0 	.word	0x080114e0
 800ea2c:	0800f05d 	.word	0x0800f05d
 800ea30:	20000f5c 	.word	0x20000f5c
 800ea34:	20000e38 	.word	0x20000e38
 800ea38:	20000064 	.word	0x20000064
 800ea3c:	20000f58 	.word	0x20000f58
 800ea40:	20000f44 	.word	0x20000f44
 800ea44:	20000f3c 	.word	0x20000f3c

0800ea48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ea48:	b480      	push	{r7}
 800ea4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ea4c:	4b04      	ldr	r3, [pc, #16]	@ (800ea60 <vTaskSuspendAll+0x18>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	3301      	adds	r3, #1
 800ea52:	4a03      	ldr	r2, [pc, #12]	@ (800ea60 <vTaskSuspendAll+0x18>)
 800ea54:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ea56:	bf00      	nop
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5e:	4770      	bx	lr
 800ea60:	20000f60 	.word	0x20000f60

0800ea64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b084      	sub	sp, #16
 800ea68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ea72:	4b43      	ldr	r3, [pc, #268]	@ (800eb80 <xTaskResumeAll+0x11c>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d10d      	bne.n	800ea96 <xTaskResumeAll+0x32>
	__asm volatile
 800ea7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea7e:	b672      	cpsid	i
 800ea80:	f383 8811 	msr	BASEPRI, r3
 800ea84:	f3bf 8f6f 	isb	sy
 800ea88:	f3bf 8f4f 	dsb	sy
 800ea8c:	b662      	cpsie	i
 800ea8e:	603b      	str	r3, [r7, #0]
}
 800ea90:	bf00      	nop
 800ea92:	bf00      	nop
 800ea94:	e7fd      	b.n	800ea92 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ea96:	f000 ff11 	bl	800f8bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ea9a:	4b39      	ldr	r3, [pc, #228]	@ (800eb80 <xTaskResumeAll+0x11c>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	3b01      	subs	r3, #1
 800eaa0:	4a37      	ldr	r2, [pc, #220]	@ (800eb80 <xTaskResumeAll+0x11c>)
 800eaa2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eaa4:	4b36      	ldr	r3, [pc, #216]	@ (800eb80 <xTaskResumeAll+0x11c>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d161      	bne.n	800eb70 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800eaac:	4b35      	ldr	r3, [pc, #212]	@ (800eb84 <xTaskResumeAll+0x120>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d05d      	beq.n	800eb70 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eab4:	e02e      	b.n	800eb14 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eab6:	4b34      	ldr	r3, [pc, #208]	@ (800eb88 <xTaskResumeAll+0x124>)
 800eab8:	68db      	ldr	r3, [r3, #12]
 800eaba:	68db      	ldr	r3, [r3, #12]
 800eabc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	3318      	adds	r3, #24
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7fe fdb2 	bl	800d62c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	3304      	adds	r3, #4
 800eacc:	4618      	mov	r0, r3
 800eace:	f7fe fdad 	bl	800d62c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ead6:	2201      	movs	r2, #1
 800ead8:	409a      	lsls	r2, r3
 800eada:	4b2c      	ldr	r3, [pc, #176]	@ (800eb8c <xTaskResumeAll+0x128>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	4313      	orrs	r3, r2
 800eae0:	4a2a      	ldr	r2, [pc, #168]	@ (800eb8c <xTaskResumeAll+0x128>)
 800eae2:	6013      	str	r3, [r2, #0]
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eae8:	4613      	mov	r3, r2
 800eaea:	009b      	lsls	r3, r3, #2
 800eaec:	4413      	add	r3, r2
 800eaee:	009b      	lsls	r3, r3, #2
 800eaf0:	4a27      	ldr	r2, [pc, #156]	@ (800eb90 <xTaskResumeAll+0x12c>)
 800eaf2:	441a      	add	r2, r3
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	3304      	adds	r3, #4
 800eaf8:	4619      	mov	r1, r3
 800eafa:	4610      	mov	r0, r2
 800eafc:	f7fe fd39 	bl	800d572 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb04:	4b23      	ldr	r3, [pc, #140]	@ (800eb94 <xTaskResumeAll+0x130>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d302      	bcc.n	800eb14 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800eb0e:	4b22      	ldr	r3, [pc, #136]	@ (800eb98 <xTaskResumeAll+0x134>)
 800eb10:	2201      	movs	r2, #1
 800eb12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eb14:	4b1c      	ldr	r3, [pc, #112]	@ (800eb88 <xTaskResumeAll+0x124>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d1cc      	bne.n	800eab6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d001      	beq.n	800eb26 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800eb22:	f000 fb59 	bl	800f1d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800eb26:	4b1d      	ldr	r3, [pc, #116]	@ (800eb9c <xTaskResumeAll+0x138>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d010      	beq.n	800eb54 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800eb32:	f000 f859 	bl	800ebe8 <xTaskIncrementTick>
 800eb36:	4603      	mov	r3, r0
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d002      	beq.n	800eb42 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800eb3c:	4b16      	ldr	r3, [pc, #88]	@ (800eb98 <xTaskResumeAll+0x134>)
 800eb3e:	2201      	movs	r2, #1
 800eb40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	3b01      	subs	r3, #1
 800eb46:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d1f1      	bne.n	800eb32 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800eb4e:	4b13      	ldr	r3, [pc, #76]	@ (800eb9c <xTaskResumeAll+0x138>)
 800eb50:	2200      	movs	r2, #0
 800eb52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800eb54:	4b10      	ldr	r3, [pc, #64]	@ (800eb98 <xTaskResumeAll+0x134>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d009      	beq.n	800eb70 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800eb60:	4b0f      	ldr	r3, [pc, #60]	@ (800eba0 <xTaskResumeAll+0x13c>)
 800eb62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb66:	601a      	str	r2, [r3, #0]
 800eb68:	f3bf 8f4f 	dsb	sy
 800eb6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eb70:	f000 feda 	bl	800f928 <vPortExitCritical>

	return xAlreadyYielded;
 800eb74:	68bb      	ldr	r3, [r7, #8]
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3710      	adds	r7, #16
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	20000f60 	.word	0x20000f60
 800eb84:	20000f38 	.word	0x20000f38
 800eb88:	20000ef8 	.word	0x20000ef8
 800eb8c:	20000f40 	.word	0x20000f40
 800eb90:	20000e3c 	.word	0x20000e3c
 800eb94:	20000e38 	.word	0x20000e38
 800eb98:	20000f4c 	.word	0x20000f4c
 800eb9c:	20000f48 	.word	0x20000f48
 800eba0:	e000ed04 	.word	0xe000ed04

0800eba4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800eba4:	b480      	push	{r7}
 800eba6:	b083      	sub	sp, #12
 800eba8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ebaa:	4b05      	ldr	r3, [pc, #20]	@ (800ebc0 <xTaskGetTickCount+0x1c>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ebb0:	687b      	ldr	r3, [r7, #4]
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	370c      	adds	r7, #12
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbc:	4770      	bx	lr
 800ebbe:	bf00      	nop
 800ebc0:	20000f3c 	.word	0x20000f3c

0800ebc4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b082      	sub	sp, #8
 800ebc8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ebca:	f000 ff5f 	bl	800fa8c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ebce:	2300      	movs	r3, #0
 800ebd0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ebd2:	4b04      	ldr	r3, [pc, #16]	@ (800ebe4 <xTaskGetTickCountFromISR+0x20>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ebd8:	683b      	ldr	r3, [r7, #0]
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3708      	adds	r7, #8
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}
 800ebe2:	bf00      	nop
 800ebe4:	20000f3c 	.word	0x20000f3c

0800ebe8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b086      	sub	sp, #24
 800ebec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ebf2:	4b50      	ldr	r3, [pc, #320]	@ (800ed34 <xTaskIncrementTick+0x14c>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	f040 808b 	bne.w	800ed12 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ebfc:	4b4e      	ldr	r3, [pc, #312]	@ (800ed38 <xTaskIncrementTick+0x150>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	3301      	adds	r3, #1
 800ec02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ec04:	4a4c      	ldr	r2, [pc, #304]	@ (800ed38 <xTaskIncrementTick+0x150>)
 800ec06:	693b      	ldr	r3, [r7, #16]
 800ec08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d123      	bne.n	800ec58 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800ec10:	4b4a      	ldr	r3, [pc, #296]	@ (800ed3c <xTaskIncrementTick+0x154>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d00d      	beq.n	800ec36 <xTaskIncrementTick+0x4e>
	__asm volatile
 800ec1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec1e:	b672      	cpsid	i
 800ec20:	f383 8811 	msr	BASEPRI, r3
 800ec24:	f3bf 8f6f 	isb	sy
 800ec28:	f3bf 8f4f 	dsb	sy
 800ec2c:	b662      	cpsie	i
 800ec2e:	603b      	str	r3, [r7, #0]
}
 800ec30:	bf00      	nop
 800ec32:	bf00      	nop
 800ec34:	e7fd      	b.n	800ec32 <xTaskIncrementTick+0x4a>
 800ec36:	4b41      	ldr	r3, [pc, #260]	@ (800ed3c <xTaskIncrementTick+0x154>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	60fb      	str	r3, [r7, #12]
 800ec3c:	4b40      	ldr	r3, [pc, #256]	@ (800ed40 <xTaskIncrementTick+0x158>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	4a3e      	ldr	r2, [pc, #248]	@ (800ed3c <xTaskIncrementTick+0x154>)
 800ec42:	6013      	str	r3, [r2, #0]
 800ec44:	4a3e      	ldr	r2, [pc, #248]	@ (800ed40 <xTaskIncrementTick+0x158>)
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	6013      	str	r3, [r2, #0]
 800ec4a:	4b3e      	ldr	r3, [pc, #248]	@ (800ed44 <xTaskIncrementTick+0x15c>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	3301      	adds	r3, #1
 800ec50:	4a3c      	ldr	r2, [pc, #240]	@ (800ed44 <xTaskIncrementTick+0x15c>)
 800ec52:	6013      	str	r3, [r2, #0]
 800ec54:	f000 fac0 	bl	800f1d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ec58:	4b3b      	ldr	r3, [pc, #236]	@ (800ed48 <xTaskIncrementTick+0x160>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	693a      	ldr	r2, [r7, #16]
 800ec5e:	429a      	cmp	r2, r3
 800ec60:	d348      	bcc.n	800ecf4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec62:	4b36      	ldr	r3, [pc, #216]	@ (800ed3c <xTaskIncrementTick+0x154>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d104      	bne.n	800ec76 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec6c:	4b36      	ldr	r3, [pc, #216]	@ (800ed48 <xTaskIncrementTick+0x160>)
 800ec6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ec72:	601a      	str	r2, [r3, #0]
					break;
 800ec74:	e03e      	b.n	800ecf4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec76:	4b31      	ldr	r3, [pc, #196]	@ (800ed3c <xTaskIncrementTick+0x154>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	68db      	ldr	r3, [r3, #12]
 800ec7c:	68db      	ldr	r3, [r3, #12]
 800ec7e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	685b      	ldr	r3, [r3, #4]
 800ec84:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ec86:	693a      	ldr	r2, [r7, #16]
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	d203      	bcs.n	800ec96 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ec8e:	4a2e      	ldr	r2, [pc, #184]	@ (800ed48 <xTaskIncrementTick+0x160>)
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ec94:	e02e      	b.n	800ecf4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	3304      	adds	r3, #4
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f7fe fcc6 	bl	800d62c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d004      	beq.n	800ecb2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	3318      	adds	r3, #24
 800ecac:	4618      	mov	r0, r3
 800ecae:	f7fe fcbd 	bl	800d62c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	409a      	lsls	r2, r3
 800ecba:	4b24      	ldr	r3, [pc, #144]	@ (800ed4c <xTaskIncrementTick+0x164>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	4313      	orrs	r3, r2
 800ecc0:	4a22      	ldr	r2, [pc, #136]	@ (800ed4c <xTaskIncrementTick+0x164>)
 800ecc2:	6013      	str	r3, [r2, #0]
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecc8:	4613      	mov	r3, r2
 800ecca:	009b      	lsls	r3, r3, #2
 800eccc:	4413      	add	r3, r2
 800ecce:	009b      	lsls	r3, r3, #2
 800ecd0:	4a1f      	ldr	r2, [pc, #124]	@ (800ed50 <xTaskIncrementTick+0x168>)
 800ecd2:	441a      	add	r2, r3
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	3304      	adds	r3, #4
 800ecd8:	4619      	mov	r1, r3
 800ecda:	4610      	mov	r0, r2
 800ecdc:	f7fe fc49 	bl	800d572 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ece4:	4b1b      	ldr	r3, [pc, #108]	@ (800ed54 <xTaskIncrementTick+0x16c>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecea:	429a      	cmp	r2, r3
 800ecec:	d3b9      	bcc.n	800ec62 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800ecee:	2301      	movs	r3, #1
 800ecf0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ecf2:	e7b6      	b.n	800ec62 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ecf4:	4b17      	ldr	r3, [pc, #92]	@ (800ed54 <xTaskIncrementTick+0x16c>)
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecfa:	4915      	ldr	r1, [pc, #84]	@ (800ed50 <xTaskIncrementTick+0x168>)
 800ecfc:	4613      	mov	r3, r2
 800ecfe:	009b      	lsls	r3, r3, #2
 800ed00:	4413      	add	r3, r2
 800ed02:	009b      	lsls	r3, r3, #2
 800ed04:	440b      	add	r3, r1
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	2b01      	cmp	r3, #1
 800ed0a:	d907      	bls.n	800ed1c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	617b      	str	r3, [r7, #20]
 800ed10:	e004      	b.n	800ed1c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ed12:	4b11      	ldr	r3, [pc, #68]	@ (800ed58 <xTaskIncrementTick+0x170>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	3301      	adds	r3, #1
 800ed18:	4a0f      	ldr	r2, [pc, #60]	@ (800ed58 <xTaskIncrementTick+0x170>)
 800ed1a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ed1c:	4b0f      	ldr	r3, [pc, #60]	@ (800ed5c <xTaskIncrementTick+0x174>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d001      	beq.n	800ed28 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800ed24:	2301      	movs	r3, #1
 800ed26:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ed28:	697b      	ldr	r3, [r7, #20]
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3718      	adds	r7, #24
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	bf00      	nop
 800ed34:	20000f60 	.word	0x20000f60
 800ed38:	20000f3c 	.word	0x20000f3c
 800ed3c:	20000ef0 	.word	0x20000ef0
 800ed40:	20000ef4 	.word	0x20000ef4
 800ed44:	20000f50 	.word	0x20000f50
 800ed48:	20000f58 	.word	0x20000f58
 800ed4c:	20000f40 	.word	0x20000f40
 800ed50:	20000e3c 	.word	0x20000e3c
 800ed54:	20000e38 	.word	0x20000e38
 800ed58:	20000f48 	.word	0x20000f48
 800ed5c:	20000f4c 	.word	0x20000f4c

0800ed60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ed60:	b480      	push	{r7}
 800ed62:	b087      	sub	sp, #28
 800ed64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ed66:	4b2b      	ldr	r3, [pc, #172]	@ (800ee14 <vTaskSwitchContext+0xb4>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d003      	beq.n	800ed76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ed6e:	4b2a      	ldr	r3, [pc, #168]	@ (800ee18 <vTaskSwitchContext+0xb8>)
 800ed70:	2201      	movs	r2, #1
 800ed72:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ed74:	e047      	b.n	800ee06 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800ed76:	4b28      	ldr	r3, [pc, #160]	@ (800ee18 <vTaskSwitchContext+0xb8>)
 800ed78:	2200      	movs	r2, #0
 800ed7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed7c:	4b27      	ldr	r3, [pc, #156]	@ (800ee1c <vTaskSwitchContext+0xbc>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	fab3 f383 	clz	r3, r3
 800ed88:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ed8a:	7afb      	ldrb	r3, [r7, #11]
 800ed8c:	f1c3 031f 	rsb	r3, r3, #31
 800ed90:	617b      	str	r3, [r7, #20]
 800ed92:	4923      	ldr	r1, [pc, #140]	@ (800ee20 <vTaskSwitchContext+0xc0>)
 800ed94:	697a      	ldr	r2, [r7, #20]
 800ed96:	4613      	mov	r3, r2
 800ed98:	009b      	lsls	r3, r3, #2
 800ed9a:	4413      	add	r3, r2
 800ed9c:	009b      	lsls	r3, r3, #2
 800ed9e:	440b      	add	r3, r1
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d10d      	bne.n	800edc2 <vTaskSwitchContext+0x62>
	__asm volatile
 800eda6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edaa:	b672      	cpsid	i
 800edac:	f383 8811 	msr	BASEPRI, r3
 800edb0:	f3bf 8f6f 	isb	sy
 800edb4:	f3bf 8f4f 	dsb	sy
 800edb8:	b662      	cpsie	i
 800edba:	607b      	str	r3, [r7, #4]
}
 800edbc:	bf00      	nop
 800edbe:	bf00      	nop
 800edc0:	e7fd      	b.n	800edbe <vTaskSwitchContext+0x5e>
 800edc2:	697a      	ldr	r2, [r7, #20]
 800edc4:	4613      	mov	r3, r2
 800edc6:	009b      	lsls	r3, r3, #2
 800edc8:	4413      	add	r3, r2
 800edca:	009b      	lsls	r3, r3, #2
 800edcc:	4a14      	ldr	r2, [pc, #80]	@ (800ee20 <vTaskSwitchContext+0xc0>)
 800edce:	4413      	add	r3, r2
 800edd0:	613b      	str	r3, [r7, #16]
 800edd2:	693b      	ldr	r3, [r7, #16]
 800edd4:	685b      	ldr	r3, [r3, #4]
 800edd6:	685a      	ldr	r2, [r3, #4]
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	605a      	str	r2, [r3, #4]
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	685a      	ldr	r2, [r3, #4]
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	3308      	adds	r3, #8
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d104      	bne.n	800edf2 <vTaskSwitchContext+0x92>
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	685b      	ldr	r3, [r3, #4]
 800edec:	685a      	ldr	r2, [r3, #4]
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	605a      	str	r2, [r3, #4]
 800edf2:	693b      	ldr	r3, [r7, #16]
 800edf4:	685b      	ldr	r3, [r3, #4]
 800edf6:	68db      	ldr	r3, [r3, #12]
 800edf8:	4a0a      	ldr	r2, [pc, #40]	@ (800ee24 <vTaskSwitchContext+0xc4>)
 800edfa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800edfc:	4b09      	ldr	r3, [pc, #36]	@ (800ee24 <vTaskSwitchContext+0xc4>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	334c      	adds	r3, #76	@ 0x4c
 800ee02:	4a09      	ldr	r2, [pc, #36]	@ (800ee28 <vTaskSwitchContext+0xc8>)
 800ee04:	6013      	str	r3, [r2, #0]
}
 800ee06:	bf00      	nop
 800ee08:	371c      	adds	r7, #28
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee10:	4770      	bx	lr
 800ee12:	bf00      	nop
 800ee14:	20000f60 	.word	0x20000f60
 800ee18:	20000f4c 	.word	0x20000f4c
 800ee1c:	20000f40 	.word	0x20000f40
 800ee20:	20000e3c 	.word	0x20000e3c
 800ee24:	20000e38 	.word	0x20000e38
 800ee28:	20000064 	.word	0x20000064

0800ee2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b084      	sub	sp, #16
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d10d      	bne.n	800ee58 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800ee3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee40:	b672      	cpsid	i
 800ee42:	f383 8811 	msr	BASEPRI, r3
 800ee46:	f3bf 8f6f 	isb	sy
 800ee4a:	f3bf 8f4f 	dsb	sy
 800ee4e:	b662      	cpsie	i
 800ee50:	60fb      	str	r3, [r7, #12]
}
 800ee52:	bf00      	nop
 800ee54:	bf00      	nop
 800ee56:	e7fd      	b.n	800ee54 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ee58:	4b07      	ldr	r3, [pc, #28]	@ (800ee78 <vTaskPlaceOnEventList+0x4c>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	3318      	adds	r3, #24
 800ee5e:	4619      	mov	r1, r3
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f7fe fbaa 	bl	800d5ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ee66:	2101      	movs	r1, #1
 800ee68:	6838      	ldr	r0, [r7, #0]
 800ee6a:	f000 fbb3 	bl	800f5d4 <prvAddCurrentTaskToDelayedList>
}
 800ee6e:	bf00      	nop
 800ee70:	3710      	adds	r7, #16
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}
 800ee76:	bf00      	nop
 800ee78:	20000e38 	.word	0x20000e38

0800ee7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b086      	sub	sp, #24
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	68db      	ldr	r3, [r3, #12]
 800ee88:	68db      	ldr	r3, [r3, #12]
 800ee8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ee8c:	693b      	ldr	r3, [r7, #16]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d10d      	bne.n	800eeae <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800ee92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee96:	b672      	cpsid	i
 800ee98:	f383 8811 	msr	BASEPRI, r3
 800ee9c:	f3bf 8f6f 	isb	sy
 800eea0:	f3bf 8f4f 	dsb	sy
 800eea4:	b662      	cpsie	i
 800eea6:	60fb      	str	r3, [r7, #12]
}
 800eea8:	bf00      	nop
 800eeaa:	bf00      	nop
 800eeac:	e7fd      	b.n	800eeaa <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800eeae:	693b      	ldr	r3, [r7, #16]
 800eeb0:	3318      	adds	r3, #24
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7fe fbba 	bl	800d62c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eeb8:	4b1d      	ldr	r3, [pc, #116]	@ (800ef30 <xTaskRemoveFromEventList+0xb4>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d11c      	bne.n	800eefa <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eec0:	693b      	ldr	r3, [r7, #16]
 800eec2:	3304      	adds	r3, #4
 800eec4:	4618      	mov	r0, r3
 800eec6:	f7fe fbb1 	bl	800d62c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eece:	2201      	movs	r2, #1
 800eed0:	409a      	lsls	r2, r3
 800eed2:	4b18      	ldr	r3, [pc, #96]	@ (800ef34 <xTaskRemoveFromEventList+0xb8>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	4313      	orrs	r3, r2
 800eed8:	4a16      	ldr	r2, [pc, #88]	@ (800ef34 <xTaskRemoveFromEventList+0xb8>)
 800eeda:	6013      	str	r3, [r2, #0]
 800eedc:	693b      	ldr	r3, [r7, #16]
 800eede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eee0:	4613      	mov	r3, r2
 800eee2:	009b      	lsls	r3, r3, #2
 800eee4:	4413      	add	r3, r2
 800eee6:	009b      	lsls	r3, r3, #2
 800eee8:	4a13      	ldr	r2, [pc, #76]	@ (800ef38 <xTaskRemoveFromEventList+0xbc>)
 800eeea:	441a      	add	r2, r3
 800eeec:	693b      	ldr	r3, [r7, #16]
 800eeee:	3304      	adds	r3, #4
 800eef0:	4619      	mov	r1, r3
 800eef2:	4610      	mov	r0, r2
 800eef4:	f7fe fb3d 	bl	800d572 <vListInsertEnd>
 800eef8:	e005      	b.n	800ef06 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	3318      	adds	r3, #24
 800eefe:	4619      	mov	r1, r3
 800ef00:	480e      	ldr	r0, [pc, #56]	@ (800ef3c <xTaskRemoveFromEventList+0xc0>)
 800ef02:	f7fe fb36 	bl	800d572 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ef06:	693b      	ldr	r3, [r7, #16]
 800ef08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ef40 <xTaskRemoveFromEventList+0xc4>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d905      	bls.n	800ef20 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ef14:	2301      	movs	r3, #1
 800ef16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ef18:	4b0a      	ldr	r3, [pc, #40]	@ (800ef44 <xTaskRemoveFromEventList+0xc8>)
 800ef1a:	2201      	movs	r2, #1
 800ef1c:	601a      	str	r2, [r3, #0]
 800ef1e:	e001      	b.n	800ef24 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800ef20:	2300      	movs	r3, #0
 800ef22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ef24:	697b      	ldr	r3, [r7, #20]
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	3718      	adds	r7, #24
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}
 800ef2e:	bf00      	nop
 800ef30:	20000f60 	.word	0x20000f60
 800ef34:	20000f40 	.word	0x20000f40
 800ef38:	20000e3c 	.word	0x20000e3c
 800ef3c:	20000ef8 	.word	0x20000ef8
 800ef40:	20000e38 	.word	0x20000e38
 800ef44:	20000f4c 	.word	0x20000f4c

0800ef48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ef48:	b480      	push	{r7}
 800ef4a:	b083      	sub	sp, #12
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ef50:	4b06      	ldr	r3, [pc, #24]	@ (800ef6c <vTaskInternalSetTimeOutState+0x24>)
 800ef52:	681a      	ldr	r2, [r3, #0]
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ef58:	4b05      	ldr	r3, [pc, #20]	@ (800ef70 <vTaskInternalSetTimeOutState+0x28>)
 800ef5a:	681a      	ldr	r2, [r3, #0]
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	605a      	str	r2, [r3, #4]
}
 800ef60:	bf00      	nop
 800ef62:	370c      	adds	r7, #12
 800ef64:	46bd      	mov	sp, r7
 800ef66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6a:	4770      	bx	lr
 800ef6c:	20000f50 	.word	0x20000f50
 800ef70:	20000f3c 	.word	0x20000f3c

0800ef74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b088      	sub	sp, #32
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d10d      	bne.n	800efa0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800ef84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef88:	b672      	cpsid	i
 800ef8a:	f383 8811 	msr	BASEPRI, r3
 800ef8e:	f3bf 8f6f 	isb	sy
 800ef92:	f3bf 8f4f 	dsb	sy
 800ef96:	b662      	cpsie	i
 800ef98:	613b      	str	r3, [r7, #16]
}
 800ef9a:	bf00      	nop
 800ef9c:	bf00      	nop
 800ef9e:	e7fd      	b.n	800ef9c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d10d      	bne.n	800efc2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800efa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efaa:	b672      	cpsid	i
 800efac:	f383 8811 	msr	BASEPRI, r3
 800efb0:	f3bf 8f6f 	isb	sy
 800efb4:	f3bf 8f4f 	dsb	sy
 800efb8:	b662      	cpsie	i
 800efba:	60fb      	str	r3, [r7, #12]
}
 800efbc:	bf00      	nop
 800efbe:	bf00      	nop
 800efc0:	e7fd      	b.n	800efbe <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800efc2:	f000 fc7b 	bl	800f8bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800efc6:	4b1d      	ldr	r3, [pc, #116]	@ (800f03c <xTaskCheckForTimeOut+0xc8>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	685b      	ldr	r3, [r3, #4]
 800efd0:	69ba      	ldr	r2, [r7, #24]
 800efd2:	1ad3      	subs	r3, r2, r3
 800efd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800efde:	d102      	bne.n	800efe6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800efe0:	2300      	movs	r3, #0
 800efe2:	61fb      	str	r3, [r7, #28]
 800efe4:	e023      	b.n	800f02e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681a      	ldr	r2, [r3, #0]
 800efea:	4b15      	ldr	r3, [pc, #84]	@ (800f040 <xTaskCheckForTimeOut+0xcc>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	429a      	cmp	r2, r3
 800eff0:	d007      	beq.n	800f002 <xTaskCheckForTimeOut+0x8e>
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	685b      	ldr	r3, [r3, #4]
 800eff6:	69ba      	ldr	r2, [r7, #24]
 800eff8:	429a      	cmp	r2, r3
 800effa:	d302      	bcc.n	800f002 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800effc:	2301      	movs	r3, #1
 800effe:	61fb      	str	r3, [r7, #28]
 800f000:	e015      	b.n	800f02e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	697a      	ldr	r2, [r7, #20]
 800f008:	429a      	cmp	r2, r3
 800f00a:	d20b      	bcs.n	800f024 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	681a      	ldr	r2, [r3, #0]
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	1ad2      	subs	r2, r2, r3
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f7ff ff95 	bl	800ef48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f01e:	2300      	movs	r3, #0
 800f020:	61fb      	str	r3, [r7, #28]
 800f022:	e004      	b.n	800f02e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	2200      	movs	r2, #0
 800f028:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f02a:	2301      	movs	r3, #1
 800f02c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f02e:	f000 fc7b 	bl	800f928 <vPortExitCritical>

	return xReturn;
 800f032:	69fb      	ldr	r3, [r7, #28]
}
 800f034:	4618      	mov	r0, r3
 800f036:	3720      	adds	r7, #32
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}
 800f03c:	20000f3c 	.word	0x20000f3c
 800f040:	20000f50 	.word	0x20000f50

0800f044 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f044:	b480      	push	{r7}
 800f046:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f048:	4b03      	ldr	r3, [pc, #12]	@ (800f058 <vTaskMissedYield+0x14>)
 800f04a:	2201      	movs	r2, #1
 800f04c:	601a      	str	r2, [r3, #0]
}
 800f04e:	bf00      	nop
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr
 800f058:	20000f4c 	.word	0x20000f4c

0800f05c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b082      	sub	sp, #8
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f064:	f000 f852 	bl	800f10c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f068:	4b06      	ldr	r3, [pc, #24]	@ (800f084 <prvIdleTask+0x28>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	2b01      	cmp	r3, #1
 800f06e:	d9f9      	bls.n	800f064 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f070:	4b05      	ldr	r3, [pc, #20]	@ (800f088 <prvIdleTask+0x2c>)
 800f072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f076:	601a      	str	r2, [r3, #0]
 800f078:	f3bf 8f4f 	dsb	sy
 800f07c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f080:	e7f0      	b.n	800f064 <prvIdleTask+0x8>
 800f082:	bf00      	nop
 800f084:	20000e3c 	.word	0x20000e3c
 800f088:	e000ed04 	.word	0xe000ed04

0800f08c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b082      	sub	sp, #8
 800f090:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f092:	2300      	movs	r3, #0
 800f094:	607b      	str	r3, [r7, #4]
 800f096:	e00c      	b.n	800f0b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f098:	687a      	ldr	r2, [r7, #4]
 800f09a:	4613      	mov	r3, r2
 800f09c:	009b      	lsls	r3, r3, #2
 800f09e:	4413      	add	r3, r2
 800f0a0:	009b      	lsls	r3, r3, #2
 800f0a2:	4a12      	ldr	r2, [pc, #72]	@ (800f0ec <prvInitialiseTaskLists+0x60>)
 800f0a4:	4413      	add	r3, r2
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7fe fa36 	bl	800d518 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	607b      	str	r3, [r7, #4]
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2b06      	cmp	r3, #6
 800f0b6:	d9ef      	bls.n	800f098 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f0b8:	480d      	ldr	r0, [pc, #52]	@ (800f0f0 <prvInitialiseTaskLists+0x64>)
 800f0ba:	f7fe fa2d 	bl	800d518 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f0be:	480d      	ldr	r0, [pc, #52]	@ (800f0f4 <prvInitialiseTaskLists+0x68>)
 800f0c0:	f7fe fa2a 	bl	800d518 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f0c4:	480c      	ldr	r0, [pc, #48]	@ (800f0f8 <prvInitialiseTaskLists+0x6c>)
 800f0c6:	f7fe fa27 	bl	800d518 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f0ca:	480c      	ldr	r0, [pc, #48]	@ (800f0fc <prvInitialiseTaskLists+0x70>)
 800f0cc:	f7fe fa24 	bl	800d518 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f0d0:	480b      	ldr	r0, [pc, #44]	@ (800f100 <prvInitialiseTaskLists+0x74>)
 800f0d2:	f7fe fa21 	bl	800d518 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f0d6:	4b0b      	ldr	r3, [pc, #44]	@ (800f104 <prvInitialiseTaskLists+0x78>)
 800f0d8:	4a05      	ldr	r2, [pc, #20]	@ (800f0f0 <prvInitialiseTaskLists+0x64>)
 800f0da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f0dc:	4b0a      	ldr	r3, [pc, #40]	@ (800f108 <prvInitialiseTaskLists+0x7c>)
 800f0de:	4a05      	ldr	r2, [pc, #20]	@ (800f0f4 <prvInitialiseTaskLists+0x68>)
 800f0e0:	601a      	str	r2, [r3, #0]
}
 800f0e2:	bf00      	nop
 800f0e4:	3708      	adds	r7, #8
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
 800f0ea:	bf00      	nop
 800f0ec:	20000e3c 	.word	0x20000e3c
 800f0f0:	20000ec8 	.word	0x20000ec8
 800f0f4:	20000edc 	.word	0x20000edc
 800f0f8:	20000ef8 	.word	0x20000ef8
 800f0fc:	20000f0c 	.word	0x20000f0c
 800f100:	20000f24 	.word	0x20000f24
 800f104:	20000ef0 	.word	0x20000ef0
 800f108:	20000ef4 	.word	0x20000ef4

0800f10c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b082      	sub	sp, #8
 800f110:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f112:	e019      	b.n	800f148 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f114:	f000 fbd2 	bl	800f8bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f118:	4b10      	ldr	r3, [pc, #64]	@ (800f15c <prvCheckTasksWaitingTermination+0x50>)
 800f11a:	68db      	ldr	r3, [r3, #12]
 800f11c:	68db      	ldr	r3, [r3, #12]
 800f11e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	3304      	adds	r3, #4
 800f124:	4618      	mov	r0, r3
 800f126:	f7fe fa81 	bl	800d62c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f12a:	4b0d      	ldr	r3, [pc, #52]	@ (800f160 <prvCheckTasksWaitingTermination+0x54>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	3b01      	subs	r3, #1
 800f130:	4a0b      	ldr	r2, [pc, #44]	@ (800f160 <prvCheckTasksWaitingTermination+0x54>)
 800f132:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f134:	4b0b      	ldr	r3, [pc, #44]	@ (800f164 <prvCheckTasksWaitingTermination+0x58>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	3b01      	subs	r3, #1
 800f13a:	4a0a      	ldr	r2, [pc, #40]	@ (800f164 <prvCheckTasksWaitingTermination+0x58>)
 800f13c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f13e:	f000 fbf3 	bl	800f928 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f000 f810 	bl	800f168 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f148:	4b06      	ldr	r3, [pc, #24]	@ (800f164 <prvCheckTasksWaitingTermination+0x58>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d1e1      	bne.n	800f114 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f150:	bf00      	nop
 800f152:	bf00      	nop
 800f154:	3708      	adds	r7, #8
 800f156:	46bd      	mov	sp, r7
 800f158:	bd80      	pop	{r7, pc}
 800f15a:	bf00      	nop
 800f15c:	20000f0c 	.word	0x20000f0c
 800f160:	20000f38 	.word	0x20000f38
 800f164:	20000f20 	.word	0x20000f20

0800f168 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b084      	sub	sp, #16
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	334c      	adds	r3, #76	@ 0x4c
 800f174:	4618      	mov	r0, r3
 800f176:	f001 f835 	bl	80101e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800f180:	2b00      	cmp	r3, #0
 800f182:	d108      	bne.n	800f196 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f188:	4618      	mov	r0, r3
 800f18a:	f000 fd93 	bl	800fcb4 <vPortFree>
				vPortFree( pxTCB );
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f000 fd90 	bl	800fcb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f194:	e01b      	b.n	800f1ce <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800f19c:	2b01      	cmp	r3, #1
 800f19e:	d103      	bne.n	800f1a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f000 fd87 	bl	800fcb4 <vPortFree>
	}
 800f1a6:	e012      	b.n	800f1ce <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800f1ae:	2b02      	cmp	r3, #2
 800f1b0:	d00d      	beq.n	800f1ce <prvDeleteTCB+0x66>
	__asm volatile
 800f1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1b6:	b672      	cpsid	i
 800f1b8:	f383 8811 	msr	BASEPRI, r3
 800f1bc:	f3bf 8f6f 	isb	sy
 800f1c0:	f3bf 8f4f 	dsb	sy
 800f1c4:	b662      	cpsie	i
 800f1c6:	60fb      	str	r3, [r7, #12]
}
 800f1c8:	bf00      	nop
 800f1ca:	bf00      	nop
 800f1cc:	e7fd      	b.n	800f1ca <prvDeleteTCB+0x62>
	}
 800f1ce:	bf00      	nop
 800f1d0:	3710      	adds	r7, #16
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}
	...

0800f1d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f1d8:	b480      	push	{r7}
 800f1da:	b083      	sub	sp, #12
 800f1dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f1de:	4b0c      	ldr	r3, [pc, #48]	@ (800f210 <prvResetNextTaskUnblockTime+0x38>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d104      	bne.n	800f1f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f1e8:	4b0a      	ldr	r3, [pc, #40]	@ (800f214 <prvResetNextTaskUnblockTime+0x3c>)
 800f1ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f1ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f1f0:	e008      	b.n	800f204 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1f2:	4b07      	ldr	r3, [pc, #28]	@ (800f210 <prvResetNextTaskUnblockTime+0x38>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	68db      	ldr	r3, [r3, #12]
 800f1f8:	68db      	ldr	r3, [r3, #12]
 800f1fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	685b      	ldr	r3, [r3, #4]
 800f200:	4a04      	ldr	r2, [pc, #16]	@ (800f214 <prvResetNextTaskUnblockTime+0x3c>)
 800f202:	6013      	str	r3, [r2, #0]
}
 800f204:	bf00      	nop
 800f206:	370c      	adds	r7, #12
 800f208:	46bd      	mov	sp, r7
 800f20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20e:	4770      	bx	lr
 800f210:	20000ef0 	.word	0x20000ef0
 800f214:	20000f58 	.word	0x20000f58

0800f218 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f218:	b480      	push	{r7}
 800f21a:	b083      	sub	sp, #12
 800f21c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f21e:	4b0b      	ldr	r3, [pc, #44]	@ (800f24c <xTaskGetSchedulerState+0x34>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d102      	bne.n	800f22c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f226:	2301      	movs	r3, #1
 800f228:	607b      	str	r3, [r7, #4]
 800f22a:	e008      	b.n	800f23e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f22c:	4b08      	ldr	r3, [pc, #32]	@ (800f250 <xTaskGetSchedulerState+0x38>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d102      	bne.n	800f23a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f234:	2302      	movs	r3, #2
 800f236:	607b      	str	r3, [r7, #4]
 800f238:	e001      	b.n	800f23e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f23a:	2300      	movs	r3, #0
 800f23c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f23e:	687b      	ldr	r3, [r7, #4]
	}
 800f240:	4618      	mov	r0, r3
 800f242:	370c      	adds	r7, #12
 800f244:	46bd      	mov	sp, r7
 800f246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24a:	4770      	bx	lr
 800f24c:	20000f44 	.word	0x20000f44
 800f250:	20000f60 	.word	0x20000f60

0800f254 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f254:	b580      	push	{r7, lr}
 800f256:	b084      	sub	sp, #16
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f260:	2300      	movs	r3, #0
 800f262:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d069      	beq.n	800f33e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f26e:	4b36      	ldr	r3, [pc, #216]	@ (800f348 <xTaskPriorityInherit+0xf4>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f274:	429a      	cmp	r2, r3
 800f276:	d259      	bcs.n	800f32c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	699b      	ldr	r3, [r3, #24]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	db06      	blt.n	800f28e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f280:	4b31      	ldr	r3, [pc, #196]	@ (800f348 <xTaskPriorityInherit+0xf4>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f286:	f1c3 0207 	rsb	r2, r3, #7
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	6959      	ldr	r1, [r3, #20]
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f296:	4613      	mov	r3, r2
 800f298:	009b      	lsls	r3, r3, #2
 800f29a:	4413      	add	r3, r2
 800f29c:	009b      	lsls	r3, r3, #2
 800f29e:	4a2b      	ldr	r2, [pc, #172]	@ (800f34c <xTaskPriorityInherit+0xf8>)
 800f2a0:	4413      	add	r3, r2
 800f2a2:	4299      	cmp	r1, r3
 800f2a4:	d13a      	bne.n	800f31c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	3304      	adds	r3, #4
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7fe f9be 	bl	800d62c <uxListRemove>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d115      	bne.n	800f2e2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2ba:	4924      	ldr	r1, [pc, #144]	@ (800f34c <xTaskPriorityInherit+0xf8>)
 800f2bc:	4613      	mov	r3, r2
 800f2be:	009b      	lsls	r3, r3, #2
 800f2c0:	4413      	add	r3, r2
 800f2c2:	009b      	lsls	r3, r3, #2
 800f2c4:	440b      	add	r3, r1
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d10a      	bne.n	800f2e2 <xTaskPriorityInherit+0x8e>
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2d0:	2201      	movs	r2, #1
 800f2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800f2d6:	43da      	mvns	r2, r3
 800f2d8:	4b1d      	ldr	r3, [pc, #116]	@ (800f350 <xTaskPriorityInherit+0xfc>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	4013      	ands	r3, r2
 800f2de:	4a1c      	ldr	r2, [pc, #112]	@ (800f350 <xTaskPriorityInherit+0xfc>)
 800f2e0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f2e2:	4b19      	ldr	r3, [pc, #100]	@ (800f348 <xTaskPriorityInherit+0xf4>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2f0:	2201      	movs	r2, #1
 800f2f2:	409a      	lsls	r2, r3
 800f2f4:	4b16      	ldr	r3, [pc, #88]	@ (800f350 <xTaskPriorityInherit+0xfc>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	4313      	orrs	r3, r2
 800f2fa:	4a15      	ldr	r2, [pc, #84]	@ (800f350 <xTaskPriorityInherit+0xfc>)
 800f2fc:	6013      	str	r3, [r2, #0]
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f302:	4613      	mov	r3, r2
 800f304:	009b      	lsls	r3, r3, #2
 800f306:	4413      	add	r3, r2
 800f308:	009b      	lsls	r3, r3, #2
 800f30a:	4a10      	ldr	r2, [pc, #64]	@ (800f34c <xTaskPriorityInherit+0xf8>)
 800f30c:	441a      	add	r2, r3
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	3304      	adds	r3, #4
 800f312:	4619      	mov	r1, r3
 800f314:	4610      	mov	r0, r2
 800f316:	f7fe f92c 	bl	800d572 <vListInsertEnd>
 800f31a:	e004      	b.n	800f326 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f31c:	4b0a      	ldr	r3, [pc, #40]	@ (800f348 <xTaskPriorityInherit+0xf4>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f326:	2301      	movs	r3, #1
 800f328:	60fb      	str	r3, [r7, #12]
 800f32a:	e008      	b.n	800f33e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f330:	4b05      	ldr	r3, [pc, #20]	@ (800f348 <xTaskPriorityInherit+0xf4>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f336:	429a      	cmp	r2, r3
 800f338:	d201      	bcs.n	800f33e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f33a:	2301      	movs	r3, #1
 800f33c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f33e:	68fb      	ldr	r3, [r7, #12]
	}
 800f340:	4618      	mov	r0, r3
 800f342:	3710      	adds	r7, #16
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}
 800f348:	20000e38 	.word	0x20000e38
 800f34c:	20000e3c 	.word	0x20000e3c
 800f350:	20000f40 	.word	0x20000f40

0800f354 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f354:	b580      	push	{r7, lr}
 800f356:	b086      	sub	sp, #24
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f360:	2300      	movs	r3, #0
 800f362:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d074      	beq.n	800f454 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f36a:	4b3d      	ldr	r3, [pc, #244]	@ (800f460 <xTaskPriorityDisinherit+0x10c>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	693a      	ldr	r2, [r7, #16]
 800f370:	429a      	cmp	r2, r3
 800f372:	d00d      	beq.n	800f390 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800f374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f378:	b672      	cpsid	i
 800f37a:	f383 8811 	msr	BASEPRI, r3
 800f37e:	f3bf 8f6f 	isb	sy
 800f382:	f3bf 8f4f 	dsb	sy
 800f386:	b662      	cpsie	i
 800f388:	60fb      	str	r3, [r7, #12]
}
 800f38a:	bf00      	nop
 800f38c:	bf00      	nop
 800f38e:	e7fd      	b.n	800f38c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800f390:	693b      	ldr	r3, [r7, #16]
 800f392:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f394:	2b00      	cmp	r3, #0
 800f396:	d10d      	bne.n	800f3b4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800f398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f39c:	b672      	cpsid	i
 800f39e:	f383 8811 	msr	BASEPRI, r3
 800f3a2:	f3bf 8f6f 	isb	sy
 800f3a6:	f3bf 8f4f 	dsb	sy
 800f3aa:	b662      	cpsie	i
 800f3ac:	60bb      	str	r3, [r7, #8]
}
 800f3ae:	bf00      	nop
 800f3b0:	bf00      	nop
 800f3b2:	e7fd      	b.n	800f3b0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800f3b4:	693b      	ldr	r3, [r7, #16]
 800f3b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f3b8:	1e5a      	subs	r2, r3, #1
 800f3ba:	693b      	ldr	r3, [r7, #16]
 800f3bc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f3be:	693b      	ldr	r3, [r7, #16]
 800f3c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3c2:	693b      	ldr	r3, [r7, #16]
 800f3c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d044      	beq.n	800f454 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f3ca:	693b      	ldr	r3, [r7, #16]
 800f3cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d140      	bne.n	800f454 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f3d2:	693b      	ldr	r3, [r7, #16]
 800f3d4:	3304      	adds	r3, #4
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7fe f928 	bl	800d62c <uxListRemove>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d115      	bne.n	800f40e <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f3e2:	693b      	ldr	r3, [r7, #16]
 800f3e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3e6:	491f      	ldr	r1, [pc, #124]	@ (800f464 <xTaskPriorityDisinherit+0x110>)
 800f3e8:	4613      	mov	r3, r2
 800f3ea:	009b      	lsls	r3, r3, #2
 800f3ec:	4413      	add	r3, r2
 800f3ee:	009b      	lsls	r3, r3, #2
 800f3f0:	440b      	add	r3, r1
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d10a      	bne.n	800f40e <xTaskPriorityDisinherit+0xba>
 800f3f8:	693b      	ldr	r3, [r7, #16]
 800f3fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3fc:	2201      	movs	r2, #1
 800f3fe:	fa02 f303 	lsl.w	r3, r2, r3
 800f402:	43da      	mvns	r2, r3
 800f404:	4b18      	ldr	r3, [pc, #96]	@ (800f468 <xTaskPriorityDisinherit+0x114>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	4013      	ands	r3, r2
 800f40a:	4a17      	ldr	r2, [pc, #92]	@ (800f468 <xTaskPriorityDisinherit+0x114>)
 800f40c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f40e:	693b      	ldr	r3, [r7, #16]
 800f410:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f412:	693b      	ldr	r3, [r7, #16]
 800f414:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f416:	693b      	ldr	r3, [r7, #16]
 800f418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f41a:	f1c3 0207 	rsb	r2, r3, #7
 800f41e:	693b      	ldr	r3, [r7, #16]
 800f420:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f422:	693b      	ldr	r3, [r7, #16]
 800f424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f426:	2201      	movs	r2, #1
 800f428:	409a      	lsls	r2, r3
 800f42a:	4b0f      	ldr	r3, [pc, #60]	@ (800f468 <xTaskPriorityDisinherit+0x114>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	4313      	orrs	r3, r2
 800f430:	4a0d      	ldr	r2, [pc, #52]	@ (800f468 <xTaskPriorityDisinherit+0x114>)
 800f432:	6013      	str	r3, [r2, #0]
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f438:	4613      	mov	r3, r2
 800f43a:	009b      	lsls	r3, r3, #2
 800f43c:	4413      	add	r3, r2
 800f43e:	009b      	lsls	r3, r3, #2
 800f440:	4a08      	ldr	r2, [pc, #32]	@ (800f464 <xTaskPriorityDisinherit+0x110>)
 800f442:	441a      	add	r2, r3
 800f444:	693b      	ldr	r3, [r7, #16]
 800f446:	3304      	adds	r3, #4
 800f448:	4619      	mov	r1, r3
 800f44a:	4610      	mov	r0, r2
 800f44c:	f7fe f891 	bl	800d572 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f450:	2301      	movs	r3, #1
 800f452:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f454:	697b      	ldr	r3, [r7, #20]
	}
 800f456:	4618      	mov	r0, r3
 800f458:	3718      	adds	r7, #24
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}
 800f45e:	bf00      	nop
 800f460:	20000e38 	.word	0x20000e38
 800f464:	20000e3c 	.word	0x20000e3c
 800f468:	20000f40 	.word	0x20000f40

0800f46c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b088      	sub	sp, #32
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f47a:	2301      	movs	r3, #1
 800f47c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2b00      	cmp	r3, #0
 800f482:	f000 8089 	beq.w	800f598 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f486:	69bb      	ldr	r3, [r7, #24]
 800f488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d10d      	bne.n	800f4aa <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800f48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f492:	b672      	cpsid	i
 800f494:	f383 8811 	msr	BASEPRI, r3
 800f498:	f3bf 8f6f 	isb	sy
 800f49c:	f3bf 8f4f 	dsb	sy
 800f4a0:	b662      	cpsie	i
 800f4a2:	60fb      	str	r3, [r7, #12]
}
 800f4a4:	bf00      	nop
 800f4a6:	bf00      	nop
 800f4a8:	e7fd      	b.n	800f4a6 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f4aa:	69bb      	ldr	r3, [r7, #24]
 800f4ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4ae:	683a      	ldr	r2, [r7, #0]
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	d902      	bls.n	800f4ba <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	61fb      	str	r3, [r7, #28]
 800f4b8:	e002      	b.n	800f4c0 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f4ba:	69bb      	ldr	r3, [r7, #24]
 800f4bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4be:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f4c0:	69bb      	ldr	r3, [r7, #24]
 800f4c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4c4:	69fa      	ldr	r2, [r7, #28]
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d066      	beq.n	800f598 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f4ca:	69bb      	ldr	r3, [r7, #24]
 800f4cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f4ce:	697a      	ldr	r2, [r7, #20]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d161      	bne.n	800f598 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f4d4:	4b32      	ldr	r3, [pc, #200]	@ (800f5a0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	69ba      	ldr	r2, [r7, #24]
 800f4da:	429a      	cmp	r2, r3
 800f4dc:	d10d      	bne.n	800f4fa <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800f4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4e2:	b672      	cpsid	i
 800f4e4:	f383 8811 	msr	BASEPRI, r3
 800f4e8:	f3bf 8f6f 	isb	sy
 800f4ec:	f3bf 8f4f 	dsb	sy
 800f4f0:	b662      	cpsie	i
 800f4f2:	60bb      	str	r3, [r7, #8]
}
 800f4f4:	bf00      	nop
 800f4f6:	bf00      	nop
 800f4f8:	e7fd      	b.n	800f4f6 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f4fa:	69bb      	ldr	r3, [r7, #24]
 800f4fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4fe:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f500:	69bb      	ldr	r3, [r7, #24]
 800f502:	69fa      	ldr	r2, [r7, #28]
 800f504:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f506:	69bb      	ldr	r3, [r7, #24]
 800f508:	699b      	ldr	r3, [r3, #24]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	db04      	blt.n	800f518 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f50e:	69fb      	ldr	r3, [r7, #28]
 800f510:	f1c3 0207 	rsb	r2, r3, #7
 800f514:	69bb      	ldr	r3, [r7, #24]
 800f516:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f518:	69bb      	ldr	r3, [r7, #24]
 800f51a:	6959      	ldr	r1, [r3, #20]
 800f51c:	693a      	ldr	r2, [r7, #16]
 800f51e:	4613      	mov	r3, r2
 800f520:	009b      	lsls	r3, r3, #2
 800f522:	4413      	add	r3, r2
 800f524:	009b      	lsls	r3, r3, #2
 800f526:	4a1f      	ldr	r2, [pc, #124]	@ (800f5a4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f528:	4413      	add	r3, r2
 800f52a:	4299      	cmp	r1, r3
 800f52c:	d134      	bne.n	800f598 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f52e:	69bb      	ldr	r3, [r7, #24]
 800f530:	3304      	adds	r3, #4
 800f532:	4618      	mov	r0, r3
 800f534:	f7fe f87a 	bl	800d62c <uxListRemove>
 800f538:	4603      	mov	r3, r0
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d115      	bne.n	800f56a <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f53e:	69bb      	ldr	r3, [r7, #24]
 800f540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f542:	4918      	ldr	r1, [pc, #96]	@ (800f5a4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f544:	4613      	mov	r3, r2
 800f546:	009b      	lsls	r3, r3, #2
 800f548:	4413      	add	r3, r2
 800f54a:	009b      	lsls	r3, r3, #2
 800f54c:	440b      	add	r3, r1
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d10a      	bne.n	800f56a <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800f554:	69bb      	ldr	r3, [r7, #24]
 800f556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f558:	2201      	movs	r2, #1
 800f55a:	fa02 f303 	lsl.w	r3, r2, r3
 800f55e:	43da      	mvns	r2, r3
 800f560:	4b11      	ldr	r3, [pc, #68]	@ (800f5a8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	4013      	ands	r3, r2
 800f566:	4a10      	ldr	r2, [pc, #64]	@ (800f5a8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f568:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f56a:	69bb      	ldr	r3, [r7, #24]
 800f56c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f56e:	2201      	movs	r2, #1
 800f570:	409a      	lsls	r2, r3
 800f572:	4b0d      	ldr	r3, [pc, #52]	@ (800f5a8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	4313      	orrs	r3, r2
 800f578:	4a0b      	ldr	r2, [pc, #44]	@ (800f5a8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f57a:	6013      	str	r3, [r2, #0]
 800f57c:	69bb      	ldr	r3, [r7, #24]
 800f57e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f580:	4613      	mov	r3, r2
 800f582:	009b      	lsls	r3, r3, #2
 800f584:	4413      	add	r3, r2
 800f586:	009b      	lsls	r3, r3, #2
 800f588:	4a06      	ldr	r2, [pc, #24]	@ (800f5a4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f58a:	441a      	add	r2, r3
 800f58c:	69bb      	ldr	r3, [r7, #24]
 800f58e:	3304      	adds	r3, #4
 800f590:	4619      	mov	r1, r3
 800f592:	4610      	mov	r0, r2
 800f594:	f7fd ffed 	bl	800d572 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f598:	bf00      	nop
 800f59a:	3720      	adds	r7, #32
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}
 800f5a0:	20000e38 	.word	0x20000e38
 800f5a4:	20000e3c 	.word	0x20000e3c
 800f5a8:	20000f40 	.word	0x20000f40

0800f5ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f5ac:	b480      	push	{r7}
 800f5ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f5b0:	4b07      	ldr	r3, [pc, #28]	@ (800f5d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d004      	beq.n	800f5c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f5b8:	4b05      	ldr	r3, [pc, #20]	@ (800f5d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f5be:	3201      	adds	r2, #1
 800f5c0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800f5c2:	4b03      	ldr	r3, [pc, #12]	@ (800f5d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
	}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ce:	4770      	bx	lr
 800f5d0:	20000e38 	.word	0x20000e38

0800f5d4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b084      	sub	sp, #16
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f5de:	4b29      	ldr	r3, [pc, #164]	@ (800f684 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f5e4:	4b28      	ldr	r3, [pc, #160]	@ (800f688 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	3304      	adds	r3, #4
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f7fe f81e 	bl	800d62c <uxListRemove>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d10b      	bne.n	800f60e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f5f6:	4b24      	ldr	r3, [pc, #144]	@ (800f688 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5fc:	2201      	movs	r2, #1
 800f5fe:	fa02 f303 	lsl.w	r3, r2, r3
 800f602:	43da      	mvns	r2, r3
 800f604:	4b21      	ldr	r3, [pc, #132]	@ (800f68c <prvAddCurrentTaskToDelayedList+0xb8>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	4013      	ands	r3, r2
 800f60a:	4a20      	ldr	r2, [pc, #128]	@ (800f68c <prvAddCurrentTaskToDelayedList+0xb8>)
 800f60c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f614:	d10a      	bne.n	800f62c <prvAddCurrentTaskToDelayedList+0x58>
 800f616:	683b      	ldr	r3, [r7, #0]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d007      	beq.n	800f62c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f61c:	4b1a      	ldr	r3, [pc, #104]	@ (800f688 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	3304      	adds	r3, #4
 800f622:	4619      	mov	r1, r3
 800f624:	481a      	ldr	r0, [pc, #104]	@ (800f690 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f626:	f7fd ffa4 	bl	800d572 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f62a:	e026      	b.n	800f67a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f62c:	68fa      	ldr	r2, [r7, #12]
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	4413      	add	r3, r2
 800f632:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f634:	4b14      	ldr	r3, [pc, #80]	@ (800f688 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	68ba      	ldr	r2, [r7, #8]
 800f63a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f63c:	68ba      	ldr	r2, [r7, #8]
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	429a      	cmp	r2, r3
 800f642:	d209      	bcs.n	800f658 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f644:	4b13      	ldr	r3, [pc, #76]	@ (800f694 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f646:	681a      	ldr	r2, [r3, #0]
 800f648:	4b0f      	ldr	r3, [pc, #60]	@ (800f688 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	3304      	adds	r3, #4
 800f64e:	4619      	mov	r1, r3
 800f650:	4610      	mov	r0, r2
 800f652:	f7fd ffb2 	bl	800d5ba <vListInsert>
}
 800f656:	e010      	b.n	800f67a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f658:	4b0f      	ldr	r3, [pc, #60]	@ (800f698 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f65a:	681a      	ldr	r2, [r3, #0]
 800f65c:	4b0a      	ldr	r3, [pc, #40]	@ (800f688 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	3304      	adds	r3, #4
 800f662:	4619      	mov	r1, r3
 800f664:	4610      	mov	r0, r2
 800f666:	f7fd ffa8 	bl	800d5ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f66a:	4b0c      	ldr	r3, [pc, #48]	@ (800f69c <prvAddCurrentTaskToDelayedList+0xc8>)
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	68ba      	ldr	r2, [r7, #8]
 800f670:	429a      	cmp	r2, r3
 800f672:	d202      	bcs.n	800f67a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f674:	4a09      	ldr	r2, [pc, #36]	@ (800f69c <prvAddCurrentTaskToDelayedList+0xc8>)
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	6013      	str	r3, [r2, #0]
}
 800f67a:	bf00      	nop
 800f67c:	3710      	adds	r7, #16
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}
 800f682:	bf00      	nop
 800f684:	20000f3c 	.word	0x20000f3c
 800f688:	20000e38 	.word	0x20000e38
 800f68c:	20000f40 	.word	0x20000f40
 800f690:	20000f24 	.word	0x20000f24
 800f694:	20000ef4 	.word	0x20000ef4
 800f698:	20000ef0 	.word	0x20000ef0
 800f69c:	20000f58 	.word	0x20000f58

0800f6a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f6a0:	b480      	push	{r7}
 800f6a2:	b085      	sub	sp, #20
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	60f8      	str	r0, [r7, #12]
 800f6a8:	60b9      	str	r1, [r7, #8]
 800f6aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	3b04      	subs	r3, #4
 800f6b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f6b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	3b04      	subs	r3, #4
 800f6be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	f023 0201 	bic.w	r2, r3, #1
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	3b04      	subs	r3, #4
 800f6ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f6d0:	4a0c      	ldr	r2, [pc, #48]	@ (800f704 <pxPortInitialiseStack+0x64>)
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	3b14      	subs	r3, #20
 800f6da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f6dc:	687a      	ldr	r2, [r7, #4]
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	3b04      	subs	r3, #4
 800f6e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	f06f 0202 	mvn.w	r2, #2
 800f6ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	3b20      	subs	r3, #32
 800f6f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3714      	adds	r7, #20
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f702:	4770      	bx	lr
 800f704:	0800f709 	.word	0x0800f709

0800f708 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f708:	b480      	push	{r7}
 800f70a:	b085      	sub	sp, #20
 800f70c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f70e:	2300      	movs	r3, #0
 800f710:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f712:	4b15      	ldr	r3, [pc, #84]	@ (800f768 <prvTaskExitError+0x60>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f71a:	d00d      	beq.n	800f738 <prvTaskExitError+0x30>
	__asm volatile
 800f71c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f720:	b672      	cpsid	i
 800f722:	f383 8811 	msr	BASEPRI, r3
 800f726:	f3bf 8f6f 	isb	sy
 800f72a:	f3bf 8f4f 	dsb	sy
 800f72e:	b662      	cpsie	i
 800f730:	60fb      	str	r3, [r7, #12]
}
 800f732:	bf00      	nop
 800f734:	bf00      	nop
 800f736:	e7fd      	b.n	800f734 <prvTaskExitError+0x2c>
	__asm volatile
 800f738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f73c:	b672      	cpsid	i
 800f73e:	f383 8811 	msr	BASEPRI, r3
 800f742:	f3bf 8f6f 	isb	sy
 800f746:	f3bf 8f4f 	dsb	sy
 800f74a:	b662      	cpsie	i
 800f74c:	60bb      	str	r3, [r7, #8]
}
 800f74e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f750:	bf00      	nop
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d0fc      	beq.n	800f752 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f758:	bf00      	nop
 800f75a:	bf00      	nop
 800f75c:	3714      	adds	r7, #20
 800f75e:	46bd      	mov	sp, r7
 800f760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f764:	4770      	bx	lr
 800f766:	bf00      	nop
 800f768:	20000054 	.word	0x20000054
 800f76c:	00000000 	.word	0x00000000

0800f770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f770:	4b07      	ldr	r3, [pc, #28]	@ (800f790 <pxCurrentTCBConst2>)
 800f772:	6819      	ldr	r1, [r3, #0]
 800f774:	6808      	ldr	r0, [r1, #0]
 800f776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f77a:	f380 8809 	msr	PSP, r0
 800f77e:	f3bf 8f6f 	isb	sy
 800f782:	f04f 0000 	mov.w	r0, #0
 800f786:	f380 8811 	msr	BASEPRI, r0
 800f78a:	4770      	bx	lr
 800f78c:	f3af 8000 	nop.w

0800f790 <pxCurrentTCBConst2>:
 800f790:	20000e38 	.word	0x20000e38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f794:	bf00      	nop
 800f796:	bf00      	nop

0800f798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f798:	4808      	ldr	r0, [pc, #32]	@ (800f7bc <prvPortStartFirstTask+0x24>)
 800f79a:	6800      	ldr	r0, [r0, #0]
 800f79c:	6800      	ldr	r0, [r0, #0]
 800f79e:	f380 8808 	msr	MSP, r0
 800f7a2:	f04f 0000 	mov.w	r0, #0
 800f7a6:	f380 8814 	msr	CONTROL, r0
 800f7aa:	b662      	cpsie	i
 800f7ac:	b661      	cpsie	f
 800f7ae:	f3bf 8f4f 	dsb	sy
 800f7b2:	f3bf 8f6f 	isb	sy
 800f7b6:	df00      	svc	0
 800f7b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f7ba:	bf00      	nop
 800f7bc:	e000ed08 	.word	0xe000ed08

0800f7c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b084      	sub	sp, #16
 800f7c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f7c6:	4b37      	ldr	r3, [pc, #220]	@ (800f8a4 <xPortStartScheduler+0xe4>)
 800f7c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	781b      	ldrb	r3, [r3, #0]
 800f7ce:	b2db      	uxtb	r3, r3
 800f7d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	22ff      	movs	r2, #255	@ 0xff
 800f7d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	b2db      	uxtb	r3, r3
 800f7de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f7e0:	78fb      	ldrb	r3, [r7, #3]
 800f7e2:	b2db      	uxtb	r3, r3
 800f7e4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f7e8:	b2da      	uxtb	r2, r3
 800f7ea:	4b2f      	ldr	r3, [pc, #188]	@ (800f8a8 <xPortStartScheduler+0xe8>)
 800f7ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f7ee:	4b2f      	ldr	r3, [pc, #188]	@ (800f8ac <xPortStartScheduler+0xec>)
 800f7f0:	2207      	movs	r2, #7
 800f7f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f7f4:	e009      	b.n	800f80a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800f7f6:	4b2d      	ldr	r3, [pc, #180]	@ (800f8ac <xPortStartScheduler+0xec>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	3b01      	subs	r3, #1
 800f7fc:	4a2b      	ldr	r2, [pc, #172]	@ (800f8ac <xPortStartScheduler+0xec>)
 800f7fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f800:	78fb      	ldrb	r3, [r7, #3]
 800f802:	b2db      	uxtb	r3, r3
 800f804:	005b      	lsls	r3, r3, #1
 800f806:	b2db      	uxtb	r3, r3
 800f808:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f80a:	78fb      	ldrb	r3, [r7, #3]
 800f80c:	b2db      	uxtb	r3, r3
 800f80e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f812:	2b80      	cmp	r3, #128	@ 0x80
 800f814:	d0ef      	beq.n	800f7f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f816:	4b25      	ldr	r3, [pc, #148]	@ (800f8ac <xPortStartScheduler+0xec>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	f1c3 0307 	rsb	r3, r3, #7
 800f81e:	2b04      	cmp	r3, #4
 800f820:	d00d      	beq.n	800f83e <xPortStartScheduler+0x7e>
	__asm volatile
 800f822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f826:	b672      	cpsid	i
 800f828:	f383 8811 	msr	BASEPRI, r3
 800f82c:	f3bf 8f6f 	isb	sy
 800f830:	f3bf 8f4f 	dsb	sy
 800f834:	b662      	cpsie	i
 800f836:	60bb      	str	r3, [r7, #8]
}
 800f838:	bf00      	nop
 800f83a:	bf00      	nop
 800f83c:	e7fd      	b.n	800f83a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f83e:	4b1b      	ldr	r3, [pc, #108]	@ (800f8ac <xPortStartScheduler+0xec>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	021b      	lsls	r3, r3, #8
 800f844:	4a19      	ldr	r2, [pc, #100]	@ (800f8ac <xPortStartScheduler+0xec>)
 800f846:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f848:	4b18      	ldr	r3, [pc, #96]	@ (800f8ac <xPortStartScheduler+0xec>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f850:	4a16      	ldr	r2, [pc, #88]	@ (800f8ac <xPortStartScheduler+0xec>)
 800f852:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	b2da      	uxtb	r2, r3
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f85c:	4b14      	ldr	r3, [pc, #80]	@ (800f8b0 <xPortStartScheduler+0xf0>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	4a13      	ldr	r2, [pc, #76]	@ (800f8b0 <xPortStartScheduler+0xf0>)
 800f862:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f866:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f868:	4b11      	ldr	r3, [pc, #68]	@ (800f8b0 <xPortStartScheduler+0xf0>)
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	4a10      	ldr	r2, [pc, #64]	@ (800f8b0 <xPortStartScheduler+0xf0>)
 800f86e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f872:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f874:	f000 f8dc 	bl	800fa30 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f878:	4b0e      	ldr	r3, [pc, #56]	@ (800f8b4 <xPortStartScheduler+0xf4>)
 800f87a:	2200      	movs	r2, #0
 800f87c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f87e:	f000 f8fb 	bl	800fa78 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f882:	4b0d      	ldr	r3, [pc, #52]	@ (800f8b8 <xPortStartScheduler+0xf8>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	4a0c      	ldr	r2, [pc, #48]	@ (800f8b8 <xPortStartScheduler+0xf8>)
 800f888:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f88c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f88e:	f7ff ff83 	bl	800f798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f892:	f7ff fa65 	bl	800ed60 <vTaskSwitchContext>
	prvTaskExitError();
 800f896:	f7ff ff37 	bl	800f708 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f89a:	2300      	movs	r3, #0
}
 800f89c:	4618      	mov	r0, r3
 800f89e:	3710      	adds	r7, #16
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd80      	pop	{r7, pc}
 800f8a4:	e000e400 	.word	0xe000e400
 800f8a8:	20000f64 	.word	0x20000f64
 800f8ac:	20000f68 	.word	0x20000f68
 800f8b0:	e000ed20 	.word	0xe000ed20
 800f8b4:	20000054 	.word	0x20000054
 800f8b8:	e000ef34 	.word	0xe000ef34

0800f8bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f8bc:	b480      	push	{r7}
 800f8be:	b083      	sub	sp, #12
 800f8c0:	af00      	add	r7, sp, #0
	__asm volatile
 800f8c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8c6:	b672      	cpsid	i
 800f8c8:	f383 8811 	msr	BASEPRI, r3
 800f8cc:	f3bf 8f6f 	isb	sy
 800f8d0:	f3bf 8f4f 	dsb	sy
 800f8d4:	b662      	cpsie	i
 800f8d6:	607b      	str	r3, [r7, #4]
}
 800f8d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f8da:	4b11      	ldr	r3, [pc, #68]	@ (800f920 <vPortEnterCritical+0x64>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	3301      	adds	r3, #1
 800f8e0:	4a0f      	ldr	r2, [pc, #60]	@ (800f920 <vPortEnterCritical+0x64>)
 800f8e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f8e4:	4b0e      	ldr	r3, [pc, #56]	@ (800f920 <vPortEnterCritical+0x64>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	2b01      	cmp	r3, #1
 800f8ea:	d112      	bne.n	800f912 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f8ec:	4b0d      	ldr	r3, [pc, #52]	@ (800f924 <vPortEnterCritical+0x68>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	b2db      	uxtb	r3, r3
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d00d      	beq.n	800f912 <vPortEnterCritical+0x56>
	__asm volatile
 800f8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8fa:	b672      	cpsid	i
 800f8fc:	f383 8811 	msr	BASEPRI, r3
 800f900:	f3bf 8f6f 	isb	sy
 800f904:	f3bf 8f4f 	dsb	sy
 800f908:	b662      	cpsie	i
 800f90a:	603b      	str	r3, [r7, #0]
}
 800f90c:	bf00      	nop
 800f90e:	bf00      	nop
 800f910:	e7fd      	b.n	800f90e <vPortEnterCritical+0x52>
	}
}
 800f912:	bf00      	nop
 800f914:	370c      	adds	r7, #12
 800f916:	46bd      	mov	sp, r7
 800f918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91c:	4770      	bx	lr
 800f91e:	bf00      	nop
 800f920:	20000054 	.word	0x20000054
 800f924:	e000ed04 	.word	0xe000ed04

0800f928 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f928:	b480      	push	{r7}
 800f92a:	b083      	sub	sp, #12
 800f92c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f92e:	4b13      	ldr	r3, [pc, #76]	@ (800f97c <vPortExitCritical+0x54>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d10d      	bne.n	800f952 <vPortExitCritical+0x2a>
	__asm volatile
 800f936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f93a:	b672      	cpsid	i
 800f93c:	f383 8811 	msr	BASEPRI, r3
 800f940:	f3bf 8f6f 	isb	sy
 800f944:	f3bf 8f4f 	dsb	sy
 800f948:	b662      	cpsie	i
 800f94a:	607b      	str	r3, [r7, #4]
}
 800f94c:	bf00      	nop
 800f94e:	bf00      	nop
 800f950:	e7fd      	b.n	800f94e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800f952:	4b0a      	ldr	r3, [pc, #40]	@ (800f97c <vPortExitCritical+0x54>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	3b01      	subs	r3, #1
 800f958:	4a08      	ldr	r2, [pc, #32]	@ (800f97c <vPortExitCritical+0x54>)
 800f95a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f95c:	4b07      	ldr	r3, [pc, #28]	@ (800f97c <vPortExitCritical+0x54>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d105      	bne.n	800f970 <vPortExitCritical+0x48>
 800f964:	2300      	movs	r3, #0
 800f966:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	f383 8811 	msr	BASEPRI, r3
}
 800f96e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f970:	bf00      	nop
 800f972:	370c      	adds	r7, #12
 800f974:	46bd      	mov	sp, r7
 800f976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97a:	4770      	bx	lr
 800f97c:	20000054 	.word	0x20000054

0800f980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f980:	f3ef 8009 	mrs	r0, PSP
 800f984:	f3bf 8f6f 	isb	sy
 800f988:	4b15      	ldr	r3, [pc, #84]	@ (800f9e0 <pxCurrentTCBConst>)
 800f98a:	681a      	ldr	r2, [r3, #0]
 800f98c:	f01e 0f10 	tst.w	lr, #16
 800f990:	bf08      	it	eq
 800f992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f99a:	6010      	str	r0, [r2, #0]
 800f99c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f9a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f9a4:	b672      	cpsid	i
 800f9a6:	f380 8811 	msr	BASEPRI, r0
 800f9aa:	f3bf 8f4f 	dsb	sy
 800f9ae:	f3bf 8f6f 	isb	sy
 800f9b2:	b662      	cpsie	i
 800f9b4:	f7ff f9d4 	bl	800ed60 <vTaskSwitchContext>
 800f9b8:	f04f 0000 	mov.w	r0, #0
 800f9bc:	f380 8811 	msr	BASEPRI, r0
 800f9c0:	bc09      	pop	{r0, r3}
 800f9c2:	6819      	ldr	r1, [r3, #0]
 800f9c4:	6808      	ldr	r0, [r1, #0]
 800f9c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ca:	f01e 0f10 	tst.w	lr, #16
 800f9ce:	bf08      	it	eq
 800f9d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f9d4:	f380 8809 	msr	PSP, r0
 800f9d8:	f3bf 8f6f 	isb	sy
 800f9dc:	4770      	bx	lr
 800f9de:	bf00      	nop

0800f9e0 <pxCurrentTCBConst>:
 800f9e0:	20000e38 	.word	0x20000e38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f9e4:	bf00      	nop
 800f9e6:	bf00      	nop

0800f9e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
	__asm volatile
 800f9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9f2:	b672      	cpsid	i
 800f9f4:	f383 8811 	msr	BASEPRI, r3
 800f9f8:	f3bf 8f6f 	isb	sy
 800f9fc:	f3bf 8f4f 	dsb	sy
 800fa00:	b662      	cpsie	i
 800fa02:	607b      	str	r3, [r7, #4]
}
 800fa04:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fa06:	f7ff f8ef 	bl	800ebe8 <xTaskIncrementTick>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d003      	beq.n	800fa18 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fa10:	4b06      	ldr	r3, [pc, #24]	@ (800fa2c <SysTick_Handler+0x44>)
 800fa12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa16:	601a      	str	r2, [r3, #0]
 800fa18:	2300      	movs	r3, #0
 800fa1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	f383 8811 	msr	BASEPRI, r3
}
 800fa22:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fa24:	bf00      	nop
 800fa26:	3708      	adds	r7, #8
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	bd80      	pop	{r7, pc}
 800fa2c:	e000ed04 	.word	0xe000ed04

0800fa30 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fa30:	b480      	push	{r7}
 800fa32:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fa34:	4b0b      	ldr	r3, [pc, #44]	@ (800fa64 <vPortSetupTimerInterrupt+0x34>)
 800fa36:	2200      	movs	r2, #0
 800fa38:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fa3a:	4b0b      	ldr	r3, [pc, #44]	@ (800fa68 <vPortSetupTimerInterrupt+0x38>)
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fa40:	4b0a      	ldr	r3, [pc, #40]	@ (800fa6c <vPortSetupTimerInterrupt+0x3c>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	4a0a      	ldr	r2, [pc, #40]	@ (800fa70 <vPortSetupTimerInterrupt+0x40>)
 800fa46:	fba2 2303 	umull	r2, r3, r2, r3
 800fa4a:	099b      	lsrs	r3, r3, #6
 800fa4c:	4a09      	ldr	r2, [pc, #36]	@ (800fa74 <vPortSetupTimerInterrupt+0x44>)
 800fa4e:	3b01      	subs	r3, #1
 800fa50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fa52:	4b04      	ldr	r3, [pc, #16]	@ (800fa64 <vPortSetupTimerInterrupt+0x34>)
 800fa54:	2207      	movs	r2, #7
 800fa56:	601a      	str	r2, [r3, #0]
}
 800fa58:	bf00      	nop
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa60:	4770      	bx	lr
 800fa62:	bf00      	nop
 800fa64:	e000e010 	.word	0xe000e010
 800fa68:	e000e018 	.word	0xe000e018
 800fa6c:	20000048 	.word	0x20000048
 800fa70:	10624dd3 	.word	0x10624dd3
 800fa74:	e000e014 	.word	0xe000e014

0800fa78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fa78:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fa88 <vPortEnableVFP+0x10>
 800fa7c:	6801      	ldr	r1, [r0, #0]
 800fa7e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fa82:	6001      	str	r1, [r0, #0]
 800fa84:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fa86:	bf00      	nop
 800fa88:	e000ed88 	.word	0xe000ed88

0800fa8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b085      	sub	sp, #20
 800fa90:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fa92:	f3ef 8305 	mrs	r3, IPSR
 800fa96:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	2b0f      	cmp	r3, #15
 800fa9c:	d917      	bls.n	800face <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fa9e:	4a1a      	ldr	r2, [pc, #104]	@ (800fb08 <vPortValidateInterruptPriority+0x7c>)
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	4413      	add	r3, r2
 800faa4:	781b      	ldrb	r3, [r3, #0]
 800faa6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800faa8:	4b18      	ldr	r3, [pc, #96]	@ (800fb0c <vPortValidateInterruptPriority+0x80>)
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	7afa      	ldrb	r2, [r7, #11]
 800faae:	429a      	cmp	r2, r3
 800fab0:	d20d      	bcs.n	800face <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800fab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fab6:	b672      	cpsid	i
 800fab8:	f383 8811 	msr	BASEPRI, r3
 800fabc:	f3bf 8f6f 	isb	sy
 800fac0:	f3bf 8f4f 	dsb	sy
 800fac4:	b662      	cpsie	i
 800fac6:	607b      	str	r3, [r7, #4]
}
 800fac8:	bf00      	nop
 800faca:	bf00      	nop
 800facc:	e7fd      	b.n	800faca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800face:	4b10      	ldr	r3, [pc, #64]	@ (800fb10 <vPortValidateInterruptPriority+0x84>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fad6:	4b0f      	ldr	r3, [pc, #60]	@ (800fb14 <vPortValidateInterruptPriority+0x88>)
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	429a      	cmp	r2, r3
 800fadc:	d90d      	bls.n	800fafa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800fade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fae2:	b672      	cpsid	i
 800fae4:	f383 8811 	msr	BASEPRI, r3
 800fae8:	f3bf 8f6f 	isb	sy
 800faec:	f3bf 8f4f 	dsb	sy
 800faf0:	b662      	cpsie	i
 800faf2:	603b      	str	r3, [r7, #0]
}
 800faf4:	bf00      	nop
 800faf6:	bf00      	nop
 800faf8:	e7fd      	b.n	800faf6 <vPortValidateInterruptPriority+0x6a>
	}
 800fafa:	bf00      	nop
 800fafc:	3714      	adds	r7, #20
 800fafe:	46bd      	mov	sp, r7
 800fb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb04:	4770      	bx	lr
 800fb06:	bf00      	nop
 800fb08:	e000e3f0 	.word	0xe000e3f0
 800fb0c:	20000f64 	.word	0x20000f64
 800fb10:	e000ed0c 	.word	0xe000ed0c
 800fb14:	20000f68 	.word	0x20000f68

0800fb18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b08a      	sub	sp, #40	@ 0x28
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fb20:	2300      	movs	r3, #0
 800fb22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fb24:	f7fe ff90 	bl	800ea48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fb28:	4b5d      	ldr	r3, [pc, #372]	@ (800fca0 <pvPortMalloc+0x188>)
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d101      	bne.n	800fb34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fb30:	f000 f920 	bl	800fd74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fb34:	4b5b      	ldr	r3, [pc, #364]	@ (800fca4 <pvPortMalloc+0x18c>)
 800fb36:	681a      	ldr	r2, [r3, #0]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	4013      	ands	r3, r2
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	f040 8094 	bne.w	800fc6a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d020      	beq.n	800fb8a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800fb48:	2208      	movs	r2, #8
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	4413      	add	r3, r2
 800fb4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f003 0307 	and.w	r3, r3, #7
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d017      	beq.n	800fb8a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f023 0307 	bic.w	r3, r3, #7
 800fb60:	3308      	adds	r3, #8
 800fb62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f003 0307 	and.w	r3, r3, #7
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d00d      	beq.n	800fb8a <pvPortMalloc+0x72>
	__asm volatile
 800fb6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb72:	b672      	cpsid	i
 800fb74:	f383 8811 	msr	BASEPRI, r3
 800fb78:	f3bf 8f6f 	isb	sy
 800fb7c:	f3bf 8f4f 	dsb	sy
 800fb80:	b662      	cpsie	i
 800fb82:	617b      	str	r3, [r7, #20]
}
 800fb84:	bf00      	nop
 800fb86:	bf00      	nop
 800fb88:	e7fd      	b.n	800fb86 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d06c      	beq.n	800fc6a <pvPortMalloc+0x152>
 800fb90:	4b45      	ldr	r3, [pc, #276]	@ (800fca8 <pvPortMalloc+0x190>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	687a      	ldr	r2, [r7, #4]
 800fb96:	429a      	cmp	r2, r3
 800fb98:	d867      	bhi.n	800fc6a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fb9a:	4b44      	ldr	r3, [pc, #272]	@ (800fcac <pvPortMalloc+0x194>)
 800fb9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fb9e:	4b43      	ldr	r3, [pc, #268]	@ (800fcac <pvPortMalloc+0x194>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fba4:	e004      	b.n	800fbb0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800fba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fba8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fbaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbb2:	685b      	ldr	r3, [r3, #4]
 800fbb4:	687a      	ldr	r2, [r7, #4]
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	d903      	bls.n	800fbc2 <pvPortMalloc+0xaa>
 800fbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d1f1      	bne.n	800fba6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fbc2:	4b37      	ldr	r3, [pc, #220]	@ (800fca0 <pvPortMalloc+0x188>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fbc8:	429a      	cmp	r2, r3
 800fbca:	d04e      	beq.n	800fc6a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fbcc:	6a3b      	ldr	r3, [r7, #32]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	2208      	movs	r2, #8
 800fbd2:	4413      	add	r3, r2
 800fbd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbd8:	681a      	ldr	r2, [r3, #0]
 800fbda:	6a3b      	ldr	r3, [r7, #32]
 800fbdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbe0:	685a      	ldr	r2, [r3, #4]
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	1ad2      	subs	r2, r2, r3
 800fbe6:	2308      	movs	r3, #8
 800fbe8:	005b      	lsls	r3, r3, #1
 800fbea:	429a      	cmp	r2, r3
 800fbec:	d922      	bls.n	800fc34 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fbee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	4413      	add	r3, r2
 800fbf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fbf6:	69bb      	ldr	r3, [r7, #24]
 800fbf8:	f003 0307 	and.w	r3, r3, #7
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d00d      	beq.n	800fc1c <pvPortMalloc+0x104>
	__asm volatile
 800fc00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc04:	b672      	cpsid	i
 800fc06:	f383 8811 	msr	BASEPRI, r3
 800fc0a:	f3bf 8f6f 	isb	sy
 800fc0e:	f3bf 8f4f 	dsb	sy
 800fc12:	b662      	cpsie	i
 800fc14:	613b      	str	r3, [r7, #16]
}
 800fc16:	bf00      	nop
 800fc18:	bf00      	nop
 800fc1a:	e7fd      	b.n	800fc18 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fc1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc1e:	685a      	ldr	r2, [r3, #4]
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	1ad2      	subs	r2, r2, r3
 800fc24:	69bb      	ldr	r3, [r7, #24]
 800fc26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fc28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc2a:	687a      	ldr	r2, [r7, #4]
 800fc2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fc2e:	69b8      	ldr	r0, [r7, #24]
 800fc30:	f000 f902 	bl	800fe38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fc34:	4b1c      	ldr	r3, [pc, #112]	@ (800fca8 <pvPortMalloc+0x190>)
 800fc36:	681a      	ldr	r2, [r3, #0]
 800fc38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc3a:	685b      	ldr	r3, [r3, #4]
 800fc3c:	1ad3      	subs	r3, r2, r3
 800fc3e:	4a1a      	ldr	r2, [pc, #104]	@ (800fca8 <pvPortMalloc+0x190>)
 800fc40:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fc42:	4b19      	ldr	r3, [pc, #100]	@ (800fca8 <pvPortMalloc+0x190>)
 800fc44:	681a      	ldr	r2, [r3, #0]
 800fc46:	4b1a      	ldr	r3, [pc, #104]	@ (800fcb0 <pvPortMalloc+0x198>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d203      	bcs.n	800fc56 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fc4e:	4b16      	ldr	r3, [pc, #88]	@ (800fca8 <pvPortMalloc+0x190>)
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	4a17      	ldr	r2, [pc, #92]	@ (800fcb0 <pvPortMalloc+0x198>)
 800fc54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fc56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc58:	685a      	ldr	r2, [r3, #4]
 800fc5a:	4b12      	ldr	r3, [pc, #72]	@ (800fca4 <pvPortMalloc+0x18c>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	431a      	orrs	r2, r3
 800fc60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc62:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fc64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc66:	2200      	movs	r2, #0
 800fc68:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fc6a:	f7fe fefb 	bl	800ea64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc6e:	69fb      	ldr	r3, [r7, #28]
 800fc70:	f003 0307 	and.w	r3, r3, #7
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d00d      	beq.n	800fc94 <pvPortMalloc+0x17c>
	__asm volatile
 800fc78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc7c:	b672      	cpsid	i
 800fc7e:	f383 8811 	msr	BASEPRI, r3
 800fc82:	f3bf 8f6f 	isb	sy
 800fc86:	f3bf 8f4f 	dsb	sy
 800fc8a:	b662      	cpsie	i
 800fc8c:	60fb      	str	r3, [r7, #12]
}
 800fc8e:	bf00      	nop
 800fc90:	bf00      	nop
 800fc92:	e7fd      	b.n	800fc90 <pvPortMalloc+0x178>
	return pvReturn;
 800fc94:	69fb      	ldr	r3, [r7, #28]
}
 800fc96:	4618      	mov	r0, r3
 800fc98:	3728      	adds	r7, #40	@ 0x28
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}
 800fc9e:	bf00      	nop
 800fca0:	20004b74 	.word	0x20004b74
 800fca4:	20004b80 	.word	0x20004b80
 800fca8:	20004b78 	.word	0x20004b78
 800fcac:	20004b6c 	.word	0x20004b6c
 800fcb0:	20004b7c 	.word	0x20004b7c

0800fcb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b086      	sub	sp, #24
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d04e      	beq.n	800fd64 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fcc6:	2308      	movs	r3, #8
 800fcc8:	425b      	negs	r3, r3
 800fcca:	697a      	ldr	r2, [r7, #20]
 800fccc:	4413      	add	r3, r2
 800fcce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fcd0:	697b      	ldr	r3, [r7, #20]
 800fcd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	685a      	ldr	r2, [r3, #4]
 800fcd8:	4b24      	ldr	r3, [pc, #144]	@ (800fd6c <vPortFree+0xb8>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	4013      	ands	r3, r2
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d10d      	bne.n	800fcfe <vPortFree+0x4a>
	__asm volatile
 800fce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fce6:	b672      	cpsid	i
 800fce8:	f383 8811 	msr	BASEPRI, r3
 800fcec:	f3bf 8f6f 	isb	sy
 800fcf0:	f3bf 8f4f 	dsb	sy
 800fcf4:	b662      	cpsie	i
 800fcf6:	60fb      	str	r3, [r7, #12]
}
 800fcf8:	bf00      	nop
 800fcfa:	bf00      	nop
 800fcfc:	e7fd      	b.n	800fcfa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fcfe:	693b      	ldr	r3, [r7, #16]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d00d      	beq.n	800fd22 <vPortFree+0x6e>
	__asm volatile
 800fd06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd0a:	b672      	cpsid	i
 800fd0c:	f383 8811 	msr	BASEPRI, r3
 800fd10:	f3bf 8f6f 	isb	sy
 800fd14:	f3bf 8f4f 	dsb	sy
 800fd18:	b662      	cpsie	i
 800fd1a:	60bb      	str	r3, [r7, #8]
}
 800fd1c:	bf00      	nop
 800fd1e:	bf00      	nop
 800fd20:	e7fd      	b.n	800fd1e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fd22:	693b      	ldr	r3, [r7, #16]
 800fd24:	685a      	ldr	r2, [r3, #4]
 800fd26:	4b11      	ldr	r3, [pc, #68]	@ (800fd6c <vPortFree+0xb8>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	4013      	ands	r3, r2
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d019      	beq.n	800fd64 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fd30:	693b      	ldr	r3, [r7, #16]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d115      	bne.n	800fd64 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	685a      	ldr	r2, [r3, #4]
 800fd3c:	4b0b      	ldr	r3, [pc, #44]	@ (800fd6c <vPortFree+0xb8>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	43db      	mvns	r3, r3
 800fd42:	401a      	ands	r2, r3
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fd48:	f7fe fe7e 	bl	800ea48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fd4c:	693b      	ldr	r3, [r7, #16]
 800fd4e:	685a      	ldr	r2, [r3, #4]
 800fd50:	4b07      	ldr	r3, [pc, #28]	@ (800fd70 <vPortFree+0xbc>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	4413      	add	r3, r2
 800fd56:	4a06      	ldr	r2, [pc, #24]	@ (800fd70 <vPortFree+0xbc>)
 800fd58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fd5a:	6938      	ldr	r0, [r7, #16]
 800fd5c:	f000 f86c 	bl	800fe38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fd60:	f7fe fe80 	bl	800ea64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fd64:	bf00      	nop
 800fd66:	3718      	adds	r7, #24
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}
 800fd6c:	20004b80 	.word	0x20004b80
 800fd70:	20004b78 	.word	0x20004b78

0800fd74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fd74:	b480      	push	{r7}
 800fd76:	b085      	sub	sp, #20
 800fd78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fd7a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800fd7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fd80:	4b27      	ldr	r3, [pc, #156]	@ (800fe20 <prvHeapInit+0xac>)
 800fd82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	f003 0307 	and.w	r3, r3, #7
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d00c      	beq.n	800fda8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	3307      	adds	r3, #7
 800fd92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	f023 0307 	bic.w	r3, r3, #7
 800fd9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fd9c:	68ba      	ldr	r2, [r7, #8]
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	1ad3      	subs	r3, r2, r3
 800fda2:	4a1f      	ldr	r2, [pc, #124]	@ (800fe20 <prvHeapInit+0xac>)
 800fda4:	4413      	add	r3, r2
 800fda6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fdac:	4a1d      	ldr	r2, [pc, #116]	@ (800fe24 <prvHeapInit+0xb0>)
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fdb2:	4b1c      	ldr	r3, [pc, #112]	@ (800fe24 <prvHeapInit+0xb0>)
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	68ba      	ldr	r2, [r7, #8]
 800fdbc:	4413      	add	r3, r2
 800fdbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fdc0:	2208      	movs	r2, #8
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	1a9b      	subs	r3, r3, r2
 800fdc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	f023 0307 	bic.w	r3, r3, #7
 800fdce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	4a15      	ldr	r2, [pc, #84]	@ (800fe28 <prvHeapInit+0xb4>)
 800fdd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fdd6:	4b14      	ldr	r3, [pc, #80]	@ (800fe28 <prvHeapInit+0xb4>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	2200      	movs	r2, #0
 800fddc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fdde:	4b12      	ldr	r3, [pc, #72]	@ (800fe28 <prvHeapInit+0xb4>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	2200      	movs	r2, #0
 800fde4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	68fa      	ldr	r2, [r7, #12]
 800fdee:	1ad2      	subs	r2, r2, r3
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fdf4:	4b0c      	ldr	r3, [pc, #48]	@ (800fe28 <prvHeapInit+0xb4>)
 800fdf6:	681a      	ldr	r2, [r3, #0]
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	685b      	ldr	r3, [r3, #4]
 800fe00:	4a0a      	ldr	r2, [pc, #40]	@ (800fe2c <prvHeapInit+0xb8>)
 800fe02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	685b      	ldr	r3, [r3, #4]
 800fe08:	4a09      	ldr	r2, [pc, #36]	@ (800fe30 <prvHeapInit+0xbc>)
 800fe0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fe0c:	4b09      	ldr	r3, [pc, #36]	@ (800fe34 <prvHeapInit+0xc0>)
 800fe0e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800fe12:	601a      	str	r2, [r3, #0]
}
 800fe14:	bf00      	nop
 800fe16:	3714      	adds	r7, #20
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1e:	4770      	bx	lr
 800fe20:	20000f6c 	.word	0x20000f6c
 800fe24:	20004b6c 	.word	0x20004b6c
 800fe28:	20004b74 	.word	0x20004b74
 800fe2c:	20004b7c 	.word	0x20004b7c
 800fe30:	20004b78 	.word	0x20004b78
 800fe34:	20004b80 	.word	0x20004b80

0800fe38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fe38:	b480      	push	{r7}
 800fe3a:	b085      	sub	sp, #20
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fe40:	4b28      	ldr	r3, [pc, #160]	@ (800fee4 <prvInsertBlockIntoFreeList+0xac>)
 800fe42:	60fb      	str	r3, [r7, #12]
 800fe44:	e002      	b.n	800fe4c <prvInsertBlockIntoFreeList+0x14>
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	60fb      	str	r3, [r7, #12]
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	687a      	ldr	r2, [r7, #4]
 800fe52:	429a      	cmp	r2, r3
 800fe54:	d8f7      	bhi.n	800fe46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	685b      	ldr	r3, [r3, #4]
 800fe5e:	68ba      	ldr	r2, [r7, #8]
 800fe60:	4413      	add	r3, r2
 800fe62:	687a      	ldr	r2, [r7, #4]
 800fe64:	429a      	cmp	r2, r3
 800fe66:	d108      	bne.n	800fe7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	685a      	ldr	r2, [r3, #4]
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	685b      	ldr	r3, [r3, #4]
 800fe70:	441a      	add	r2, r3
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	685b      	ldr	r3, [r3, #4]
 800fe82:	68ba      	ldr	r2, [r7, #8]
 800fe84:	441a      	add	r2, r3
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	429a      	cmp	r2, r3
 800fe8c:	d118      	bne.n	800fec0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	681a      	ldr	r2, [r3, #0]
 800fe92:	4b15      	ldr	r3, [pc, #84]	@ (800fee8 <prvInsertBlockIntoFreeList+0xb0>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d00d      	beq.n	800feb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	685a      	ldr	r2, [r3, #4]
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	685b      	ldr	r3, [r3, #4]
 800fea4:	441a      	add	r2, r3
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	681a      	ldr	r2, [r3, #0]
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	601a      	str	r2, [r3, #0]
 800feb4:	e008      	b.n	800fec8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800feb6:	4b0c      	ldr	r3, [pc, #48]	@ (800fee8 <prvInsertBlockIntoFreeList+0xb0>)
 800feb8:	681a      	ldr	r2, [r3, #0]
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	601a      	str	r2, [r3, #0]
 800febe:	e003      	b.n	800fec8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	681a      	ldr	r2, [r3, #0]
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fec8:	68fa      	ldr	r2, [r7, #12]
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	429a      	cmp	r2, r3
 800fece:	d002      	beq.n	800fed6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	687a      	ldr	r2, [r7, #4]
 800fed4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fed6:	bf00      	nop
 800fed8:	3714      	adds	r7, #20
 800feda:	46bd      	mov	sp, r7
 800fedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee0:	4770      	bx	lr
 800fee2:	bf00      	nop
 800fee4:	20004b6c 	.word	0x20004b6c
 800fee8:	20004b74 	.word	0x20004b74

0800feec <rand>:
 800feec:	4b16      	ldr	r3, [pc, #88]	@ (800ff48 <rand+0x5c>)
 800feee:	b510      	push	{r4, lr}
 800fef0:	681c      	ldr	r4, [r3, #0]
 800fef2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fef4:	b9b3      	cbnz	r3, 800ff24 <rand+0x38>
 800fef6:	2018      	movs	r0, #24
 800fef8:	f000 faa4 	bl	8010444 <malloc>
 800fefc:	4602      	mov	r2, r0
 800fefe:	6320      	str	r0, [r4, #48]	@ 0x30
 800ff00:	b920      	cbnz	r0, 800ff0c <rand+0x20>
 800ff02:	4b12      	ldr	r3, [pc, #72]	@ (800ff4c <rand+0x60>)
 800ff04:	4812      	ldr	r0, [pc, #72]	@ (800ff50 <rand+0x64>)
 800ff06:	2152      	movs	r1, #82	@ 0x52
 800ff08:	f000 fa34 	bl	8010374 <__assert_func>
 800ff0c:	4911      	ldr	r1, [pc, #68]	@ (800ff54 <rand+0x68>)
 800ff0e:	4b12      	ldr	r3, [pc, #72]	@ (800ff58 <rand+0x6c>)
 800ff10:	e9c0 1300 	strd	r1, r3, [r0]
 800ff14:	4b11      	ldr	r3, [pc, #68]	@ (800ff5c <rand+0x70>)
 800ff16:	6083      	str	r3, [r0, #8]
 800ff18:	230b      	movs	r3, #11
 800ff1a:	8183      	strh	r3, [r0, #12]
 800ff1c:	2100      	movs	r1, #0
 800ff1e:	2001      	movs	r0, #1
 800ff20:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ff24:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ff26:	480e      	ldr	r0, [pc, #56]	@ (800ff60 <rand+0x74>)
 800ff28:	690b      	ldr	r3, [r1, #16]
 800ff2a:	694c      	ldr	r4, [r1, #20]
 800ff2c:	4a0d      	ldr	r2, [pc, #52]	@ (800ff64 <rand+0x78>)
 800ff2e:	4358      	muls	r0, r3
 800ff30:	fb02 0004 	mla	r0, r2, r4, r0
 800ff34:	fba3 3202 	umull	r3, r2, r3, r2
 800ff38:	3301      	adds	r3, #1
 800ff3a:	eb40 0002 	adc.w	r0, r0, r2
 800ff3e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ff42:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800ff46:	bd10      	pop	{r4, pc}
 800ff48:	20000064 	.word	0x20000064
 800ff4c:	0801f7e8 	.word	0x0801f7e8
 800ff50:	0801f7ff 	.word	0x0801f7ff
 800ff54:	abcd330e 	.word	0xabcd330e
 800ff58:	e66d1234 	.word	0xe66d1234
 800ff5c:	0005deec 	.word	0x0005deec
 800ff60:	5851f42d 	.word	0x5851f42d
 800ff64:	4c957f2d 	.word	0x4c957f2d

0800ff68 <std>:
 800ff68:	2300      	movs	r3, #0
 800ff6a:	b510      	push	{r4, lr}
 800ff6c:	4604      	mov	r4, r0
 800ff6e:	e9c0 3300 	strd	r3, r3, [r0]
 800ff72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff76:	6083      	str	r3, [r0, #8]
 800ff78:	8181      	strh	r1, [r0, #12]
 800ff7a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ff7c:	81c2      	strh	r2, [r0, #14]
 800ff7e:	6183      	str	r3, [r0, #24]
 800ff80:	4619      	mov	r1, r3
 800ff82:	2208      	movs	r2, #8
 800ff84:	305c      	adds	r0, #92	@ 0x5c
 800ff86:	f000 f914 	bl	80101b2 <memset>
 800ff8a:	4b0d      	ldr	r3, [pc, #52]	@ (800ffc0 <std+0x58>)
 800ff8c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ff8e:	4b0d      	ldr	r3, [pc, #52]	@ (800ffc4 <std+0x5c>)
 800ff90:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ff92:	4b0d      	ldr	r3, [pc, #52]	@ (800ffc8 <std+0x60>)
 800ff94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ff96:	4b0d      	ldr	r3, [pc, #52]	@ (800ffcc <std+0x64>)
 800ff98:	6323      	str	r3, [r4, #48]	@ 0x30
 800ff9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ffd0 <std+0x68>)
 800ff9c:	6224      	str	r4, [r4, #32]
 800ff9e:	429c      	cmp	r4, r3
 800ffa0:	d006      	beq.n	800ffb0 <std+0x48>
 800ffa2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ffa6:	4294      	cmp	r4, r2
 800ffa8:	d002      	beq.n	800ffb0 <std+0x48>
 800ffaa:	33d0      	adds	r3, #208	@ 0xd0
 800ffac:	429c      	cmp	r4, r3
 800ffae:	d105      	bne.n	800ffbc <std+0x54>
 800ffb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ffb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffb8:	f000 b9ca 	b.w	8010350 <__retarget_lock_init_recursive>
 800ffbc:	bd10      	pop	{r4, pc}
 800ffbe:	bf00      	nop
 800ffc0:	0801012d 	.word	0x0801012d
 800ffc4:	0801014f 	.word	0x0801014f
 800ffc8:	08010187 	.word	0x08010187
 800ffcc:	080101ab 	.word	0x080101ab
 800ffd0:	20004b84 	.word	0x20004b84

0800ffd4 <stdio_exit_handler>:
 800ffd4:	4a02      	ldr	r2, [pc, #8]	@ (800ffe0 <stdio_exit_handler+0xc>)
 800ffd6:	4903      	ldr	r1, [pc, #12]	@ (800ffe4 <stdio_exit_handler+0x10>)
 800ffd8:	4803      	ldr	r0, [pc, #12]	@ (800ffe8 <stdio_exit_handler+0x14>)
 800ffda:	f000 b869 	b.w	80100b0 <_fwalk_sglue>
 800ffde:	bf00      	nop
 800ffe0:	20000058 	.word	0x20000058
 800ffe4:	08010c85 	.word	0x08010c85
 800ffe8:	20000068 	.word	0x20000068

0800ffec <cleanup_stdio>:
 800ffec:	6841      	ldr	r1, [r0, #4]
 800ffee:	4b0c      	ldr	r3, [pc, #48]	@ (8010020 <cleanup_stdio+0x34>)
 800fff0:	4299      	cmp	r1, r3
 800fff2:	b510      	push	{r4, lr}
 800fff4:	4604      	mov	r4, r0
 800fff6:	d001      	beq.n	800fffc <cleanup_stdio+0x10>
 800fff8:	f000 fe44 	bl	8010c84 <_fflush_r>
 800fffc:	68a1      	ldr	r1, [r4, #8]
 800fffe:	4b09      	ldr	r3, [pc, #36]	@ (8010024 <cleanup_stdio+0x38>)
 8010000:	4299      	cmp	r1, r3
 8010002:	d002      	beq.n	801000a <cleanup_stdio+0x1e>
 8010004:	4620      	mov	r0, r4
 8010006:	f000 fe3d 	bl	8010c84 <_fflush_r>
 801000a:	68e1      	ldr	r1, [r4, #12]
 801000c:	4b06      	ldr	r3, [pc, #24]	@ (8010028 <cleanup_stdio+0x3c>)
 801000e:	4299      	cmp	r1, r3
 8010010:	d004      	beq.n	801001c <cleanup_stdio+0x30>
 8010012:	4620      	mov	r0, r4
 8010014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010018:	f000 be34 	b.w	8010c84 <_fflush_r>
 801001c:	bd10      	pop	{r4, pc}
 801001e:	bf00      	nop
 8010020:	20004b84 	.word	0x20004b84
 8010024:	20004bec 	.word	0x20004bec
 8010028:	20004c54 	.word	0x20004c54

0801002c <global_stdio_init.part.0>:
 801002c:	b510      	push	{r4, lr}
 801002e:	4b0b      	ldr	r3, [pc, #44]	@ (801005c <global_stdio_init.part.0+0x30>)
 8010030:	4c0b      	ldr	r4, [pc, #44]	@ (8010060 <global_stdio_init.part.0+0x34>)
 8010032:	4a0c      	ldr	r2, [pc, #48]	@ (8010064 <global_stdio_init.part.0+0x38>)
 8010034:	601a      	str	r2, [r3, #0]
 8010036:	4620      	mov	r0, r4
 8010038:	2200      	movs	r2, #0
 801003a:	2104      	movs	r1, #4
 801003c:	f7ff ff94 	bl	800ff68 <std>
 8010040:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010044:	2201      	movs	r2, #1
 8010046:	2109      	movs	r1, #9
 8010048:	f7ff ff8e 	bl	800ff68 <std>
 801004c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010050:	2202      	movs	r2, #2
 8010052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010056:	2112      	movs	r1, #18
 8010058:	f7ff bf86 	b.w	800ff68 <std>
 801005c:	20004cbc 	.word	0x20004cbc
 8010060:	20004b84 	.word	0x20004b84
 8010064:	0800ffd5 	.word	0x0800ffd5

08010068 <__sfp_lock_acquire>:
 8010068:	4801      	ldr	r0, [pc, #4]	@ (8010070 <__sfp_lock_acquire+0x8>)
 801006a:	f000 b972 	b.w	8010352 <__retarget_lock_acquire_recursive>
 801006e:	bf00      	nop
 8010070:	20004cc5 	.word	0x20004cc5

08010074 <__sfp_lock_release>:
 8010074:	4801      	ldr	r0, [pc, #4]	@ (801007c <__sfp_lock_release+0x8>)
 8010076:	f000 b96d 	b.w	8010354 <__retarget_lock_release_recursive>
 801007a:	bf00      	nop
 801007c:	20004cc5 	.word	0x20004cc5

08010080 <__sinit>:
 8010080:	b510      	push	{r4, lr}
 8010082:	4604      	mov	r4, r0
 8010084:	f7ff fff0 	bl	8010068 <__sfp_lock_acquire>
 8010088:	6a23      	ldr	r3, [r4, #32]
 801008a:	b11b      	cbz	r3, 8010094 <__sinit+0x14>
 801008c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010090:	f7ff bff0 	b.w	8010074 <__sfp_lock_release>
 8010094:	4b04      	ldr	r3, [pc, #16]	@ (80100a8 <__sinit+0x28>)
 8010096:	6223      	str	r3, [r4, #32]
 8010098:	4b04      	ldr	r3, [pc, #16]	@ (80100ac <__sinit+0x2c>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d1f5      	bne.n	801008c <__sinit+0xc>
 80100a0:	f7ff ffc4 	bl	801002c <global_stdio_init.part.0>
 80100a4:	e7f2      	b.n	801008c <__sinit+0xc>
 80100a6:	bf00      	nop
 80100a8:	0800ffed 	.word	0x0800ffed
 80100ac:	20004cbc 	.word	0x20004cbc

080100b0 <_fwalk_sglue>:
 80100b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100b4:	4607      	mov	r7, r0
 80100b6:	4688      	mov	r8, r1
 80100b8:	4614      	mov	r4, r2
 80100ba:	2600      	movs	r6, #0
 80100bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80100c0:	f1b9 0901 	subs.w	r9, r9, #1
 80100c4:	d505      	bpl.n	80100d2 <_fwalk_sglue+0x22>
 80100c6:	6824      	ldr	r4, [r4, #0]
 80100c8:	2c00      	cmp	r4, #0
 80100ca:	d1f7      	bne.n	80100bc <_fwalk_sglue+0xc>
 80100cc:	4630      	mov	r0, r6
 80100ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100d2:	89ab      	ldrh	r3, [r5, #12]
 80100d4:	2b01      	cmp	r3, #1
 80100d6:	d907      	bls.n	80100e8 <_fwalk_sglue+0x38>
 80100d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80100dc:	3301      	adds	r3, #1
 80100de:	d003      	beq.n	80100e8 <_fwalk_sglue+0x38>
 80100e0:	4629      	mov	r1, r5
 80100e2:	4638      	mov	r0, r7
 80100e4:	47c0      	blx	r8
 80100e6:	4306      	orrs	r6, r0
 80100e8:	3568      	adds	r5, #104	@ 0x68
 80100ea:	e7e9      	b.n	80100c0 <_fwalk_sglue+0x10>

080100ec <siprintf>:
 80100ec:	b40e      	push	{r1, r2, r3}
 80100ee:	b500      	push	{lr}
 80100f0:	b09c      	sub	sp, #112	@ 0x70
 80100f2:	ab1d      	add	r3, sp, #116	@ 0x74
 80100f4:	9002      	str	r0, [sp, #8]
 80100f6:	9006      	str	r0, [sp, #24]
 80100f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80100fc:	4809      	ldr	r0, [pc, #36]	@ (8010124 <siprintf+0x38>)
 80100fe:	9107      	str	r1, [sp, #28]
 8010100:	9104      	str	r1, [sp, #16]
 8010102:	4909      	ldr	r1, [pc, #36]	@ (8010128 <siprintf+0x3c>)
 8010104:	f853 2b04 	ldr.w	r2, [r3], #4
 8010108:	9105      	str	r1, [sp, #20]
 801010a:	6800      	ldr	r0, [r0, #0]
 801010c:	9301      	str	r3, [sp, #4]
 801010e:	a902      	add	r1, sp, #8
 8010110:	f000 faaa 	bl	8010668 <_svfiprintf_r>
 8010114:	9b02      	ldr	r3, [sp, #8]
 8010116:	2200      	movs	r2, #0
 8010118:	701a      	strb	r2, [r3, #0]
 801011a:	b01c      	add	sp, #112	@ 0x70
 801011c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010120:	b003      	add	sp, #12
 8010122:	4770      	bx	lr
 8010124:	20000064 	.word	0x20000064
 8010128:	ffff0208 	.word	0xffff0208

0801012c <__sread>:
 801012c:	b510      	push	{r4, lr}
 801012e:	460c      	mov	r4, r1
 8010130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010134:	f000 f8be 	bl	80102b4 <_read_r>
 8010138:	2800      	cmp	r0, #0
 801013a:	bfab      	itete	ge
 801013c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801013e:	89a3      	ldrhlt	r3, [r4, #12]
 8010140:	181b      	addge	r3, r3, r0
 8010142:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010146:	bfac      	ite	ge
 8010148:	6563      	strge	r3, [r4, #84]	@ 0x54
 801014a:	81a3      	strhlt	r3, [r4, #12]
 801014c:	bd10      	pop	{r4, pc}

0801014e <__swrite>:
 801014e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010152:	461f      	mov	r7, r3
 8010154:	898b      	ldrh	r3, [r1, #12]
 8010156:	05db      	lsls	r3, r3, #23
 8010158:	4605      	mov	r5, r0
 801015a:	460c      	mov	r4, r1
 801015c:	4616      	mov	r6, r2
 801015e:	d505      	bpl.n	801016c <__swrite+0x1e>
 8010160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010164:	2302      	movs	r3, #2
 8010166:	2200      	movs	r2, #0
 8010168:	f000 f892 	bl	8010290 <_lseek_r>
 801016c:	89a3      	ldrh	r3, [r4, #12]
 801016e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010172:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010176:	81a3      	strh	r3, [r4, #12]
 8010178:	4632      	mov	r2, r6
 801017a:	463b      	mov	r3, r7
 801017c:	4628      	mov	r0, r5
 801017e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010182:	f000 b8a9 	b.w	80102d8 <_write_r>

08010186 <__sseek>:
 8010186:	b510      	push	{r4, lr}
 8010188:	460c      	mov	r4, r1
 801018a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801018e:	f000 f87f 	bl	8010290 <_lseek_r>
 8010192:	1c43      	adds	r3, r0, #1
 8010194:	89a3      	ldrh	r3, [r4, #12]
 8010196:	bf15      	itete	ne
 8010198:	6560      	strne	r0, [r4, #84]	@ 0x54
 801019a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801019e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80101a2:	81a3      	strheq	r3, [r4, #12]
 80101a4:	bf18      	it	ne
 80101a6:	81a3      	strhne	r3, [r4, #12]
 80101a8:	bd10      	pop	{r4, pc}

080101aa <__sclose>:
 80101aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101ae:	f000 b809 	b.w	80101c4 <_close_r>

080101b2 <memset>:
 80101b2:	4402      	add	r2, r0
 80101b4:	4603      	mov	r3, r0
 80101b6:	4293      	cmp	r3, r2
 80101b8:	d100      	bne.n	80101bc <memset+0xa>
 80101ba:	4770      	bx	lr
 80101bc:	f803 1b01 	strb.w	r1, [r3], #1
 80101c0:	e7f9      	b.n	80101b6 <memset+0x4>
	...

080101c4 <_close_r>:
 80101c4:	b538      	push	{r3, r4, r5, lr}
 80101c6:	4d06      	ldr	r5, [pc, #24]	@ (80101e0 <_close_r+0x1c>)
 80101c8:	2300      	movs	r3, #0
 80101ca:	4604      	mov	r4, r0
 80101cc:	4608      	mov	r0, r1
 80101ce:	602b      	str	r3, [r5, #0]
 80101d0:	f7f5 f994 	bl	80054fc <_close>
 80101d4:	1c43      	adds	r3, r0, #1
 80101d6:	d102      	bne.n	80101de <_close_r+0x1a>
 80101d8:	682b      	ldr	r3, [r5, #0]
 80101da:	b103      	cbz	r3, 80101de <_close_r+0x1a>
 80101dc:	6023      	str	r3, [r4, #0]
 80101de:	bd38      	pop	{r3, r4, r5, pc}
 80101e0:	20004cc0 	.word	0x20004cc0

080101e4 <_reclaim_reent>:
 80101e4:	4b29      	ldr	r3, [pc, #164]	@ (801028c <_reclaim_reent+0xa8>)
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	4283      	cmp	r3, r0
 80101ea:	b570      	push	{r4, r5, r6, lr}
 80101ec:	4604      	mov	r4, r0
 80101ee:	d04b      	beq.n	8010288 <_reclaim_reent+0xa4>
 80101f0:	69c3      	ldr	r3, [r0, #28]
 80101f2:	b1ab      	cbz	r3, 8010220 <_reclaim_reent+0x3c>
 80101f4:	68db      	ldr	r3, [r3, #12]
 80101f6:	b16b      	cbz	r3, 8010214 <_reclaim_reent+0x30>
 80101f8:	2500      	movs	r5, #0
 80101fa:	69e3      	ldr	r3, [r4, #28]
 80101fc:	68db      	ldr	r3, [r3, #12]
 80101fe:	5959      	ldr	r1, [r3, r5]
 8010200:	2900      	cmp	r1, #0
 8010202:	d13b      	bne.n	801027c <_reclaim_reent+0x98>
 8010204:	3504      	adds	r5, #4
 8010206:	2d80      	cmp	r5, #128	@ 0x80
 8010208:	d1f7      	bne.n	80101fa <_reclaim_reent+0x16>
 801020a:	69e3      	ldr	r3, [r4, #28]
 801020c:	4620      	mov	r0, r4
 801020e:	68d9      	ldr	r1, [r3, #12]
 8010210:	f000 f8ce 	bl	80103b0 <_free_r>
 8010214:	69e3      	ldr	r3, [r4, #28]
 8010216:	6819      	ldr	r1, [r3, #0]
 8010218:	b111      	cbz	r1, 8010220 <_reclaim_reent+0x3c>
 801021a:	4620      	mov	r0, r4
 801021c:	f000 f8c8 	bl	80103b0 <_free_r>
 8010220:	6961      	ldr	r1, [r4, #20]
 8010222:	b111      	cbz	r1, 801022a <_reclaim_reent+0x46>
 8010224:	4620      	mov	r0, r4
 8010226:	f000 f8c3 	bl	80103b0 <_free_r>
 801022a:	69e1      	ldr	r1, [r4, #28]
 801022c:	b111      	cbz	r1, 8010234 <_reclaim_reent+0x50>
 801022e:	4620      	mov	r0, r4
 8010230:	f000 f8be 	bl	80103b0 <_free_r>
 8010234:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010236:	b111      	cbz	r1, 801023e <_reclaim_reent+0x5a>
 8010238:	4620      	mov	r0, r4
 801023a:	f000 f8b9 	bl	80103b0 <_free_r>
 801023e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010240:	b111      	cbz	r1, 8010248 <_reclaim_reent+0x64>
 8010242:	4620      	mov	r0, r4
 8010244:	f000 f8b4 	bl	80103b0 <_free_r>
 8010248:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801024a:	b111      	cbz	r1, 8010252 <_reclaim_reent+0x6e>
 801024c:	4620      	mov	r0, r4
 801024e:	f000 f8af 	bl	80103b0 <_free_r>
 8010252:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010254:	b111      	cbz	r1, 801025c <_reclaim_reent+0x78>
 8010256:	4620      	mov	r0, r4
 8010258:	f000 f8aa 	bl	80103b0 <_free_r>
 801025c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801025e:	b111      	cbz	r1, 8010266 <_reclaim_reent+0x82>
 8010260:	4620      	mov	r0, r4
 8010262:	f000 f8a5 	bl	80103b0 <_free_r>
 8010266:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010268:	b111      	cbz	r1, 8010270 <_reclaim_reent+0x8c>
 801026a:	4620      	mov	r0, r4
 801026c:	f000 f8a0 	bl	80103b0 <_free_r>
 8010270:	6a23      	ldr	r3, [r4, #32]
 8010272:	b14b      	cbz	r3, 8010288 <_reclaim_reent+0xa4>
 8010274:	4620      	mov	r0, r4
 8010276:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801027a:	4718      	bx	r3
 801027c:	680e      	ldr	r6, [r1, #0]
 801027e:	4620      	mov	r0, r4
 8010280:	f000 f896 	bl	80103b0 <_free_r>
 8010284:	4631      	mov	r1, r6
 8010286:	e7bb      	b.n	8010200 <_reclaim_reent+0x1c>
 8010288:	bd70      	pop	{r4, r5, r6, pc}
 801028a:	bf00      	nop
 801028c:	20000064 	.word	0x20000064

08010290 <_lseek_r>:
 8010290:	b538      	push	{r3, r4, r5, lr}
 8010292:	4d07      	ldr	r5, [pc, #28]	@ (80102b0 <_lseek_r+0x20>)
 8010294:	4604      	mov	r4, r0
 8010296:	4608      	mov	r0, r1
 8010298:	4611      	mov	r1, r2
 801029a:	2200      	movs	r2, #0
 801029c:	602a      	str	r2, [r5, #0]
 801029e:	461a      	mov	r2, r3
 80102a0:	f7f5 f953 	bl	800554a <_lseek>
 80102a4:	1c43      	adds	r3, r0, #1
 80102a6:	d102      	bne.n	80102ae <_lseek_r+0x1e>
 80102a8:	682b      	ldr	r3, [r5, #0]
 80102aa:	b103      	cbz	r3, 80102ae <_lseek_r+0x1e>
 80102ac:	6023      	str	r3, [r4, #0]
 80102ae:	bd38      	pop	{r3, r4, r5, pc}
 80102b0:	20004cc0 	.word	0x20004cc0

080102b4 <_read_r>:
 80102b4:	b538      	push	{r3, r4, r5, lr}
 80102b6:	4d07      	ldr	r5, [pc, #28]	@ (80102d4 <_read_r+0x20>)
 80102b8:	4604      	mov	r4, r0
 80102ba:	4608      	mov	r0, r1
 80102bc:	4611      	mov	r1, r2
 80102be:	2200      	movs	r2, #0
 80102c0:	602a      	str	r2, [r5, #0]
 80102c2:	461a      	mov	r2, r3
 80102c4:	f7f5 f8e1 	bl	800548a <_read>
 80102c8:	1c43      	adds	r3, r0, #1
 80102ca:	d102      	bne.n	80102d2 <_read_r+0x1e>
 80102cc:	682b      	ldr	r3, [r5, #0]
 80102ce:	b103      	cbz	r3, 80102d2 <_read_r+0x1e>
 80102d0:	6023      	str	r3, [r4, #0]
 80102d2:	bd38      	pop	{r3, r4, r5, pc}
 80102d4:	20004cc0 	.word	0x20004cc0

080102d8 <_write_r>:
 80102d8:	b538      	push	{r3, r4, r5, lr}
 80102da:	4d07      	ldr	r5, [pc, #28]	@ (80102f8 <_write_r+0x20>)
 80102dc:	4604      	mov	r4, r0
 80102de:	4608      	mov	r0, r1
 80102e0:	4611      	mov	r1, r2
 80102e2:	2200      	movs	r2, #0
 80102e4:	602a      	str	r2, [r5, #0]
 80102e6:	461a      	mov	r2, r3
 80102e8:	f7f5 f8ec 	bl	80054c4 <_write>
 80102ec:	1c43      	adds	r3, r0, #1
 80102ee:	d102      	bne.n	80102f6 <_write_r+0x1e>
 80102f0:	682b      	ldr	r3, [r5, #0]
 80102f2:	b103      	cbz	r3, 80102f6 <_write_r+0x1e>
 80102f4:	6023      	str	r3, [r4, #0]
 80102f6:	bd38      	pop	{r3, r4, r5, pc}
 80102f8:	20004cc0 	.word	0x20004cc0

080102fc <__errno>:
 80102fc:	4b01      	ldr	r3, [pc, #4]	@ (8010304 <__errno+0x8>)
 80102fe:	6818      	ldr	r0, [r3, #0]
 8010300:	4770      	bx	lr
 8010302:	bf00      	nop
 8010304:	20000064 	.word	0x20000064

08010308 <__libc_init_array>:
 8010308:	b570      	push	{r4, r5, r6, lr}
 801030a:	4d0d      	ldr	r5, [pc, #52]	@ (8010340 <__libc_init_array+0x38>)
 801030c:	4c0d      	ldr	r4, [pc, #52]	@ (8010344 <__libc_init_array+0x3c>)
 801030e:	1b64      	subs	r4, r4, r5
 8010310:	10a4      	asrs	r4, r4, #2
 8010312:	2600      	movs	r6, #0
 8010314:	42a6      	cmp	r6, r4
 8010316:	d109      	bne.n	801032c <__libc_init_array+0x24>
 8010318:	4d0b      	ldr	r5, [pc, #44]	@ (8010348 <__libc_init_array+0x40>)
 801031a:	4c0c      	ldr	r4, [pc, #48]	@ (801034c <__libc_init_array+0x44>)
 801031c:	f000 fff0 	bl	8011300 <_init>
 8010320:	1b64      	subs	r4, r4, r5
 8010322:	10a4      	asrs	r4, r4, #2
 8010324:	2600      	movs	r6, #0
 8010326:	42a6      	cmp	r6, r4
 8010328:	d105      	bne.n	8010336 <__libc_init_array+0x2e>
 801032a:	bd70      	pop	{r4, r5, r6, pc}
 801032c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010330:	4798      	blx	r3
 8010332:	3601      	adds	r6, #1
 8010334:	e7ee      	b.n	8010314 <__libc_init_array+0xc>
 8010336:	f855 3b04 	ldr.w	r3, [r5], #4
 801033a:	4798      	blx	r3
 801033c:	3601      	adds	r6, #1
 801033e:	e7f2      	b.n	8010326 <__libc_init_array+0x1e>
 8010340:	0801f8d0 	.word	0x0801f8d0
 8010344:	0801f8d0 	.word	0x0801f8d0
 8010348:	0801f8d0 	.word	0x0801f8d0
 801034c:	0801f8d4 	.word	0x0801f8d4

08010350 <__retarget_lock_init_recursive>:
 8010350:	4770      	bx	lr

08010352 <__retarget_lock_acquire_recursive>:
 8010352:	4770      	bx	lr

08010354 <__retarget_lock_release_recursive>:
 8010354:	4770      	bx	lr

08010356 <memcpy>:
 8010356:	440a      	add	r2, r1
 8010358:	4291      	cmp	r1, r2
 801035a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801035e:	d100      	bne.n	8010362 <memcpy+0xc>
 8010360:	4770      	bx	lr
 8010362:	b510      	push	{r4, lr}
 8010364:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010368:	f803 4f01 	strb.w	r4, [r3, #1]!
 801036c:	4291      	cmp	r1, r2
 801036e:	d1f9      	bne.n	8010364 <memcpy+0xe>
 8010370:	bd10      	pop	{r4, pc}
	...

08010374 <__assert_func>:
 8010374:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010376:	4614      	mov	r4, r2
 8010378:	461a      	mov	r2, r3
 801037a:	4b09      	ldr	r3, [pc, #36]	@ (80103a0 <__assert_func+0x2c>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	4605      	mov	r5, r0
 8010380:	68d8      	ldr	r0, [r3, #12]
 8010382:	b954      	cbnz	r4, 801039a <__assert_func+0x26>
 8010384:	4b07      	ldr	r3, [pc, #28]	@ (80103a4 <__assert_func+0x30>)
 8010386:	461c      	mov	r4, r3
 8010388:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801038c:	9100      	str	r1, [sp, #0]
 801038e:	462b      	mov	r3, r5
 8010390:	4905      	ldr	r1, [pc, #20]	@ (80103a8 <__assert_func+0x34>)
 8010392:	f000 fc9f 	bl	8010cd4 <fiprintf>
 8010396:	f000 fcd9 	bl	8010d4c <abort>
 801039a:	4b04      	ldr	r3, [pc, #16]	@ (80103ac <__assert_func+0x38>)
 801039c:	e7f4      	b.n	8010388 <__assert_func+0x14>
 801039e:	bf00      	nop
 80103a0:	20000064 	.word	0x20000064
 80103a4:	0801f892 	.word	0x0801f892
 80103a8:	0801f864 	.word	0x0801f864
 80103ac:	0801f857 	.word	0x0801f857

080103b0 <_free_r>:
 80103b0:	b538      	push	{r3, r4, r5, lr}
 80103b2:	4605      	mov	r5, r0
 80103b4:	2900      	cmp	r1, #0
 80103b6:	d041      	beq.n	801043c <_free_r+0x8c>
 80103b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103bc:	1f0c      	subs	r4, r1, #4
 80103be:	2b00      	cmp	r3, #0
 80103c0:	bfb8      	it	lt
 80103c2:	18e4      	addlt	r4, r4, r3
 80103c4:	f000 f8e8 	bl	8010598 <__malloc_lock>
 80103c8:	4a1d      	ldr	r2, [pc, #116]	@ (8010440 <_free_r+0x90>)
 80103ca:	6813      	ldr	r3, [r2, #0]
 80103cc:	b933      	cbnz	r3, 80103dc <_free_r+0x2c>
 80103ce:	6063      	str	r3, [r4, #4]
 80103d0:	6014      	str	r4, [r2, #0]
 80103d2:	4628      	mov	r0, r5
 80103d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80103d8:	f000 b8e4 	b.w	80105a4 <__malloc_unlock>
 80103dc:	42a3      	cmp	r3, r4
 80103de:	d908      	bls.n	80103f2 <_free_r+0x42>
 80103e0:	6820      	ldr	r0, [r4, #0]
 80103e2:	1821      	adds	r1, r4, r0
 80103e4:	428b      	cmp	r3, r1
 80103e6:	bf01      	itttt	eq
 80103e8:	6819      	ldreq	r1, [r3, #0]
 80103ea:	685b      	ldreq	r3, [r3, #4]
 80103ec:	1809      	addeq	r1, r1, r0
 80103ee:	6021      	streq	r1, [r4, #0]
 80103f0:	e7ed      	b.n	80103ce <_free_r+0x1e>
 80103f2:	461a      	mov	r2, r3
 80103f4:	685b      	ldr	r3, [r3, #4]
 80103f6:	b10b      	cbz	r3, 80103fc <_free_r+0x4c>
 80103f8:	42a3      	cmp	r3, r4
 80103fa:	d9fa      	bls.n	80103f2 <_free_r+0x42>
 80103fc:	6811      	ldr	r1, [r2, #0]
 80103fe:	1850      	adds	r0, r2, r1
 8010400:	42a0      	cmp	r0, r4
 8010402:	d10b      	bne.n	801041c <_free_r+0x6c>
 8010404:	6820      	ldr	r0, [r4, #0]
 8010406:	4401      	add	r1, r0
 8010408:	1850      	adds	r0, r2, r1
 801040a:	4283      	cmp	r3, r0
 801040c:	6011      	str	r1, [r2, #0]
 801040e:	d1e0      	bne.n	80103d2 <_free_r+0x22>
 8010410:	6818      	ldr	r0, [r3, #0]
 8010412:	685b      	ldr	r3, [r3, #4]
 8010414:	6053      	str	r3, [r2, #4]
 8010416:	4408      	add	r0, r1
 8010418:	6010      	str	r0, [r2, #0]
 801041a:	e7da      	b.n	80103d2 <_free_r+0x22>
 801041c:	d902      	bls.n	8010424 <_free_r+0x74>
 801041e:	230c      	movs	r3, #12
 8010420:	602b      	str	r3, [r5, #0]
 8010422:	e7d6      	b.n	80103d2 <_free_r+0x22>
 8010424:	6820      	ldr	r0, [r4, #0]
 8010426:	1821      	adds	r1, r4, r0
 8010428:	428b      	cmp	r3, r1
 801042a:	bf04      	itt	eq
 801042c:	6819      	ldreq	r1, [r3, #0]
 801042e:	685b      	ldreq	r3, [r3, #4]
 8010430:	6063      	str	r3, [r4, #4]
 8010432:	bf04      	itt	eq
 8010434:	1809      	addeq	r1, r1, r0
 8010436:	6021      	streq	r1, [r4, #0]
 8010438:	6054      	str	r4, [r2, #4]
 801043a:	e7ca      	b.n	80103d2 <_free_r+0x22>
 801043c:	bd38      	pop	{r3, r4, r5, pc}
 801043e:	bf00      	nop
 8010440:	20004ccc 	.word	0x20004ccc

08010444 <malloc>:
 8010444:	4b02      	ldr	r3, [pc, #8]	@ (8010450 <malloc+0xc>)
 8010446:	4601      	mov	r1, r0
 8010448:	6818      	ldr	r0, [r3, #0]
 801044a:	f000 b825 	b.w	8010498 <_malloc_r>
 801044e:	bf00      	nop
 8010450:	20000064 	.word	0x20000064

08010454 <sbrk_aligned>:
 8010454:	b570      	push	{r4, r5, r6, lr}
 8010456:	4e0f      	ldr	r6, [pc, #60]	@ (8010494 <sbrk_aligned+0x40>)
 8010458:	460c      	mov	r4, r1
 801045a:	6831      	ldr	r1, [r6, #0]
 801045c:	4605      	mov	r5, r0
 801045e:	b911      	cbnz	r1, 8010466 <sbrk_aligned+0x12>
 8010460:	f000 fc64 	bl	8010d2c <_sbrk_r>
 8010464:	6030      	str	r0, [r6, #0]
 8010466:	4621      	mov	r1, r4
 8010468:	4628      	mov	r0, r5
 801046a:	f000 fc5f 	bl	8010d2c <_sbrk_r>
 801046e:	1c43      	adds	r3, r0, #1
 8010470:	d103      	bne.n	801047a <sbrk_aligned+0x26>
 8010472:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010476:	4620      	mov	r0, r4
 8010478:	bd70      	pop	{r4, r5, r6, pc}
 801047a:	1cc4      	adds	r4, r0, #3
 801047c:	f024 0403 	bic.w	r4, r4, #3
 8010480:	42a0      	cmp	r0, r4
 8010482:	d0f8      	beq.n	8010476 <sbrk_aligned+0x22>
 8010484:	1a21      	subs	r1, r4, r0
 8010486:	4628      	mov	r0, r5
 8010488:	f000 fc50 	bl	8010d2c <_sbrk_r>
 801048c:	3001      	adds	r0, #1
 801048e:	d1f2      	bne.n	8010476 <sbrk_aligned+0x22>
 8010490:	e7ef      	b.n	8010472 <sbrk_aligned+0x1e>
 8010492:	bf00      	nop
 8010494:	20004cc8 	.word	0x20004cc8

08010498 <_malloc_r>:
 8010498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801049c:	1ccd      	adds	r5, r1, #3
 801049e:	f025 0503 	bic.w	r5, r5, #3
 80104a2:	3508      	adds	r5, #8
 80104a4:	2d0c      	cmp	r5, #12
 80104a6:	bf38      	it	cc
 80104a8:	250c      	movcc	r5, #12
 80104aa:	2d00      	cmp	r5, #0
 80104ac:	4606      	mov	r6, r0
 80104ae:	db01      	blt.n	80104b4 <_malloc_r+0x1c>
 80104b0:	42a9      	cmp	r1, r5
 80104b2:	d904      	bls.n	80104be <_malloc_r+0x26>
 80104b4:	230c      	movs	r3, #12
 80104b6:	6033      	str	r3, [r6, #0]
 80104b8:	2000      	movs	r0, #0
 80104ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010594 <_malloc_r+0xfc>
 80104c2:	f000 f869 	bl	8010598 <__malloc_lock>
 80104c6:	f8d8 3000 	ldr.w	r3, [r8]
 80104ca:	461c      	mov	r4, r3
 80104cc:	bb44      	cbnz	r4, 8010520 <_malloc_r+0x88>
 80104ce:	4629      	mov	r1, r5
 80104d0:	4630      	mov	r0, r6
 80104d2:	f7ff ffbf 	bl	8010454 <sbrk_aligned>
 80104d6:	1c43      	adds	r3, r0, #1
 80104d8:	4604      	mov	r4, r0
 80104da:	d158      	bne.n	801058e <_malloc_r+0xf6>
 80104dc:	f8d8 4000 	ldr.w	r4, [r8]
 80104e0:	4627      	mov	r7, r4
 80104e2:	2f00      	cmp	r7, #0
 80104e4:	d143      	bne.n	801056e <_malloc_r+0xd6>
 80104e6:	2c00      	cmp	r4, #0
 80104e8:	d04b      	beq.n	8010582 <_malloc_r+0xea>
 80104ea:	6823      	ldr	r3, [r4, #0]
 80104ec:	4639      	mov	r1, r7
 80104ee:	4630      	mov	r0, r6
 80104f0:	eb04 0903 	add.w	r9, r4, r3
 80104f4:	f000 fc1a 	bl	8010d2c <_sbrk_r>
 80104f8:	4581      	cmp	r9, r0
 80104fa:	d142      	bne.n	8010582 <_malloc_r+0xea>
 80104fc:	6821      	ldr	r1, [r4, #0]
 80104fe:	1a6d      	subs	r5, r5, r1
 8010500:	4629      	mov	r1, r5
 8010502:	4630      	mov	r0, r6
 8010504:	f7ff ffa6 	bl	8010454 <sbrk_aligned>
 8010508:	3001      	adds	r0, #1
 801050a:	d03a      	beq.n	8010582 <_malloc_r+0xea>
 801050c:	6823      	ldr	r3, [r4, #0]
 801050e:	442b      	add	r3, r5
 8010510:	6023      	str	r3, [r4, #0]
 8010512:	f8d8 3000 	ldr.w	r3, [r8]
 8010516:	685a      	ldr	r2, [r3, #4]
 8010518:	bb62      	cbnz	r2, 8010574 <_malloc_r+0xdc>
 801051a:	f8c8 7000 	str.w	r7, [r8]
 801051e:	e00f      	b.n	8010540 <_malloc_r+0xa8>
 8010520:	6822      	ldr	r2, [r4, #0]
 8010522:	1b52      	subs	r2, r2, r5
 8010524:	d420      	bmi.n	8010568 <_malloc_r+0xd0>
 8010526:	2a0b      	cmp	r2, #11
 8010528:	d917      	bls.n	801055a <_malloc_r+0xc2>
 801052a:	1961      	adds	r1, r4, r5
 801052c:	42a3      	cmp	r3, r4
 801052e:	6025      	str	r5, [r4, #0]
 8010530:	bf18      	it	ne
 8010532:	6059      	strne	r1, [r3, #4]
 8010534:	6863      	ldr	r3, [r4, #4]
 8010536:	bf08      	it	eq
 8010538:	f8c8 1000 	streq.w	r1, [r8]
 801053c:	5162      	str	r2, [r4, r5]
 801053e:	604b      	str	r3, [r1, #4]
 8010540:	4630      	mov	r0, r6
 8010542:	f000 f82f 	bl	80105a4 <__malloc_unlock>
 8010546:	f104 000b 	add.w	r0, r4, #11
 801054a:	1d23      	adds	r3, r4, #4
 801054c:	f020 0007 	bic.w	r0, r0, #7
 8010550:	1ac2      	subs	r2, r0, r3
 8010552:	bf1c      	itt	ne
 8010554:	1a1b      	subne	r3, r3, r0
 8010556:	50a3      	strne	r3, [r4, r2]
 8010558:	e7af      	b.n	80104ba <_malloc_r+0x22>
 801055a:	6862      	ldr	r2, [r4, #4]
 801055c:	42a3      	cmp	r3, r4
 801055e:	bf0c      	ite	eq
 8010560:	f8c8 2000 	streq.w	r2, [r8]
 8010564:	605a      	strne	r2, [r3, #4]
 8010566:	e7eb      	b.n	8010540 <_malloc_r+0xa8>
 8010568:	4623      	mov	r3, r4
 801056a:	6864      	ldr	r4, [r4, #4]
 801056c:	e7ae      	b.n	80104cc <_malloc_r+0x34>
 801056e:	463c      	mov	r4, r7
 8010570:	687f      	ldr	r7, [r7, #4]
 8010572:	e7b6      	b.n	80104e2 <_malloc_r+0x4a>
 8010574:	461a      	mov	r2, r3
 8010576:	685b      	ldr	r3, [r3, #4]
 8010578:	42a3      	cmp	r3, r4
 801057a:	d1fb      	bne.n	8010574 <_malloc_r+0xdc>
 801057c:	2300      	movs	r3, #0
 801057e:	6053      	str	r3, [r2, #4]
 8010580:	e7de      	b.n	8010540 <_malloc_r+0xa8>
 8010582:	230c      	movs	r3, #12
 8010584:	6033      	str	r3, [r6, #0]
 8010586:	4630      	mov	r0, r6
 8010588:	f000 f80c 	bl	80105a4 <__malloc_unlock>
 801058c:	e794      	b.n	80104b8 <_malloc_r+0x20>
 801058e:	6005      	str	r5, [r0, #0]
 8010590:	e7d6      	b.n	8010540 <_malloc_r+0xa8>
 8010592:	bf00      	nop
 8010594:	20004ccc 	.word	0x20004ccc

08010598 <__malloc_lock>:
 8010598:	4801      	ldr	r0, [pc, #4]	@ (80105a0 <__malloc_lock+0x8>)
 801059a:	f7ff beda 	b.w	8010352 <__retarget_lock_acquire_recursive>
 801059e:	bf00      	nop
 80105a0:	20004cc4 	.word	0x20004cc4

080105a4 <__malloc_unlock>:
 80105a4:	4801      	ldr	r0, [pc, #4]	@ (80105ac <__malloc_unlock+0x8>)
 80105a6:	f7ff bed5 	b.w	8010354 <__retarget_lock_release_recursive>
 80105aa:	bf00      	nop
 80105ac:	20004cc4 	.word	0x20004cc4

080105b0 <__ssputs_r>:
 80105b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105b4:	688e      	ldr	r6, [r1, #8]
 80105b6:	461f      	mov	r7, r3
 80105b8:	42be      	cmp	r6, r7
 80105ba:	680b      	ldr	r3, [r1, #0]
 80105bc:	4682      	mov	sl, r0
 80105be:	460c      	mov	r4, r1
 80105c0:	4690      	mov	r8, r2
 80105c2:	d82d      	bhi.n	8010620 <__ssputs_r+0x70>
 80105c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80105c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80105cc:	d026      	beq.n	801061c <__ssputs_r+0x6c>
 80105ce:	6965      	ldr	r5, [r4, #20]
 80105d0:	6909      	ldr	r1, [r1, #16]
 80105d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80105d6:	eba3 0901 	sub.w	r9, r3, r1
 80105da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80105de:	1c7b      	adds	r3, r7, #1
 80105e0:	444b      	add	r3, r9
 80105e2:	106d      	asrs	r5, r5, #1
 80105e4:	429d      	cmp	r5, r3
 80105e6:	bf38      	it	cc
 80105e8:	461d      	movcc	r5, r3
 80105ea:	0553      	lsls	r3, r2, #21
 80105ec:	d527      	bpl.n	801063e <__ssputs_r+0x8e>
 80105ee:	4629      	mov	r1, r5
 80105f0:	f7ff ff52 	bl	8010498 <_malloc_r>
 80105f4:	4606      	mov	r6, r0
 80105f6:	b360      	cbz	r0, 8010652 <__ssputs_r+0xa2>
 80105f8:	6921      	ldr	r1, [r4, #16]
 80105fa:	464a      	mov	r2, r9
 80105fc:	f7ff feab 	bl	8010356 <memcpy>
 8010600:	89a3      	ldrh	r3, [r4, #12]
 8010602:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801060a:	81a3      	strh	r3, [r4, #12]
 801060c:	6126      	str	r6, [r4, #16]
 801060e:	6165      	str	r5, [r4, #20]
 8010610:	444e      	add	r6, r9
 8010612:	eba5 0509 	sub.w	r5, r5, r9
 8010616:	6026      	str	r6, [r4, #0]
 8010618:	60a5      	str	r5, [r4, #8]
 801061a:	463e      	mov	r6, r7
 801061c:	42be      	cmp	r6, r7
 801061e:	d900      	bls.n	8010622 <__ssputs_r+0x72>
 8010620:	463e      	mov	r6, r7
 8010622:	6820      	ldr	r0, [r4, #0]
 8010624:	4632      	mov	r2, r6
 8010626:	4641      	mov	r1, r8
 8010628:	f000 fb66 	bl	8010cf8 <memmove>
 801062c:	68a3      	ldr	r3, [r4, #8]
 801062e:	1b9b      	subs	r3, r3, r6
 8010630:	60a3      	str	r3, [r4, #8]
 8010632:	6823      	ldr	r3, [r4, #0]
 8010634:	4433      	add	r3, r6
 8010636:	6023      	str	r3, [r4, #0]
 8010638:	2000      	movs	r0, #0
 801063a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801063e:	462a      	mov	r2, r5
 8010640:	f000 fb8b 	bl	8010d5a <_realloc_r>
 8010644:	4606      	mov	r6, r0
 8010646:	2800      	cmp	r0, #0
 8010648:	d1e0      	bne.n	801060c <__ssputs_r+0x5c>
 801064a:	6921      	ldr	r1, [r4, #16]
 801064c:	4650      	mov	r0, sl
 801064e:	f7ff feaf 	bl	80103b0 <_free_r>
 8010652:	230c      	movs	r3, #12
 8010654:	f8ca 3000 	str.w	r3, [sl]
 8010658:	89a3      	ldrh	r3, [r4, #12]
 801065a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801065e:	81a3      	strh	r3, [r4, #12]
 8010660:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010664:	e7e9      	b.n	801063a <__ssputs_r+0x8a>
	...

08010668 <_svfiprintf_r>:
 8010668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801066c:	4698      	mov	r8, r3
 801066e:	898b      	ldrh	r3, [r1, #12]
 8010670:	061b      	lsls	r3, r3, #24
 8010672:	b09d      	sub	sp, #116	@ 0x74
 8010674:	4607      	mov	r7, r0
 8010676:	460d      	mov	r5, r1
 8010678:	4614      	mov	r4, r2
 801067a:	d510      	bpl.n	801069e <_svfiprintf_r+0x36>
 801067c:	690b      	ldr	r3, [r1, #16]
 801067e:	b973      	cbnz	r3, 801069e <_svfiprintf_r+0x36>
 8010680:	2140      	movs	r1, #64	@ 0x40
 8010682:	f7ff ff09 	bl	8010498 <_malloc_r>
 8010686:	6028      	str	r0, [r5, #0]
 8010688:	6128      	str	r0, [r5, #16]
 801068a:	b930      	cbnz	r0, 801069a <_svfiprintf_r+0x32>
 801068c:	230c      	movs	r3, #12
 801068e:	603b      	str	r3, [r7, #0]
 8010690:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010694:	b01d      	add	sp, #116	@ 0x74
 8010696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801069a:	2340      	movs	r3, #64	@ 0x40
 801069c:	616b      	str	r3, [r5, #20]
 801069e:	2300      	movs	r3, #0
 80106a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80106a2:	2320      	movs	r3, #32
 80106a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80106a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80106ac:	2330      	movs	r3, #48	@ 0x30
 80106ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801084c <_svfiprintf_r+0x1e4>
 80106b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80106b6:	f04f 0901 	mov.w	r9, #1
 80106ba:	4623      	mov	r3, r4
 80106bc:	469a      	mov	sl, r3
 80106be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106c2:	b10a      	cbz	r2, 80106c8 <_svfiprintf_r+0x60>
 80106c4:	2a25      	cmp	r2, #37	@ 0x25
 80106c6:	d1f9      	bne.n	80106bc <_svfiprintf_r+0x54>
 80106c8:	ebba 0b04 	subs.w	fp, sl, r4
 80106cc:	d00b      	beq.n	80106e6 <_svfiprintf_r+0x7e>
 80106ce:	465b      	mov	r3, fp
 80106d0:	4622      	mov	r2, r4
 80106d2:	4629      	mov	r1, r5
 80106d4:	4638      	mov	r0, r7
 80106d6:	f7ff ff6b 	bl	80105b0 <__ssputs_r>
 80106da:	3001      	adds	r0, #1
 80106dc:	f000 80a7 	beq.w	801082e <_svfiprintf_r+0x1c6>
 80106e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80106e2:	445a      	add	r2, fp
 80106e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80106e6:	f89a 3000 	ldrb.w	r3, [sl]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	f000 809f 	beq.w	801082e <_svfiprintf_r+0x1c6>
 80106f0:	2300      	movs	r3, #0
 80106f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80106f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80106fa:	f10a 0a01 	add.w	sl, sl, #1
 80106fe:	9304      	str	r3, [sp, #16]
 8010700:	9307      	str	r3, [sp, #28]
 8010702:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010706:	931a      	str	r3, [sp, #104]	@ 0x68
 8010708:	4654      	mov	r4, sl
 801070a:	2205      	movs	r2, #5
 801070c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010710:	484e      	ldr	r0, [pc, #312]	@ (801084c <_svfiprintf_r+0x1e4>)
 8010712:	f7ef fd7d 	bl	8000210 <memchr>
 8010716:	9a04      	ldr	r2, [sp, #16]
 8010718:	b9d8      	cbnz	r0, 8010752 <_svfiprintf_r+0xea>
 801071a:	06d0      	lsls	r0, r2, #27
 801071c:	bf44      	itt	mi
 801071e:	2320      	movmi	r3, #32
 8010720:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010724:	0711      	lsls	r1, r2, #28
 8010726:	bf44      	itt	mi
 8010728:	232b      	movmi	r3, #43	@ 0x2b
 801072a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801072e:	f89a 3000 	ldrb.w	r3, [sl]
 8010732:	2b2a      	cmp	r3, #42	@ 0x2a
 8010734:	d015      	beq.n	8010762 <_svfiprintf_r+0xfa>
 8010736:	9a07      	ldr	r2, [sp, #28]
 8010738:	4654      	mov	r4, sl
 801073a:	2000      	movs	r0, #0
 801073c:	f04f 0c0a 	mov.w	ip, #10
 8010740:	4621      	mov	r1, r4
 8010742:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010746:	3b30      	subs	r3, #48	@ 0x30
 8010748:	2b09      	cmp	r3, #9
 801074a:	d94b      	bls.n	80107e4 <_svfiprintf_r+0x17c>
 801074c:	b1b0      	cbz	r0, 801077c <_svfiprintf_r+0x114>
 801074e:	9207      	str	r2, [sp, #28]
 8010750:	e014      	b.n	801077c <_svfiprintf_r+0x114>
 8010752:	eba0 0308 	sub.w	r3, r0, r8
 8010756:	fa09 f303 	lsl.w	r3, r9, r3
 801075a:	4313      	orrs	r3, r2
 801075c:	9304      	str	r3, [sp, #16]
 801075e:	46a2      	mov	sl, r4
 8010760:	e7d2      	b.n	8010708 <_svfiprintf_r+0xa0>
 8010762:	9b03      	ldr	r3, [sp, #12]
 8010764:	1d19      	adds	r1, r3, #4
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	9103      	str	r1, [sp, #12]
 801076a:	2b00      	cmp	r3, #0
 801076c:	bfbb      	ittet	lt
 801076e:	425b      	neglt	r3, r3
 8010770:	f042 0202 	orrlt.w	r2, r2, #2
 8010774:	9307      	strge	r3, [sp, #28]
 8010776:	9307      	strlt	r3, [sp, #28]
 8010778:	bfb8      	it	lt
 801077a:	9204      	strlt	r2, [sp, #16]
 801077c:	7823      	ldrb	r3, [r4, #0]
 801077e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010780:	d10a      	bne.n	8010798 <_svfiprintf_r+0x130>
 8010782:	7863      	ldrb	r3, [r4, #1]
 8010784:	2b2a      	cmp	r3, #42	@ 0x2a
 8010786:	d132      	bne.n	80107ee <_svfiprintf_r+0x186>
 8010788:	9b03      	ldr	r3, [sp, #12]
 801078a:	1d1a      	adds	r2, r3, #4
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	9203      	str	r2, [sp, #12]
 8010790:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010794:	3402      	adds	r4, #2
 8010796:	9305      	str	r3, [sp, #20]
 8010798:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801085c <_svfiprintf_r+0x1f4>
 801079c:	7821      	ldrb	r1, [r4, #0]
 801079e:	2203      	movs	r2, #3
 80107a0:	4650      	mov	r0, sl
 80107a2:	f7ef fd35 	bl	8000210 <memchr>
 80107a6:	b138      	cbz	r0, 80107b8 <_svfiprintf_r+0x150>
 80107a8:	9b04      	ldr	r3, [sp, #16]
 80107aa:	eba0 000a 	sub.w	r0, r0, sl
 80107ae:	2240      	movs	r2, #64	@ 0x40
 80107b0:	4082      	lsls	r2, r0
 80107b2:	4313      	orrs	r3, r2
 80107b4:	3401      	adds	r4, #1
 80107b6:	9304      	str	r3, [sp, #16]
 80107b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107bc:	4824      	ldr	r0, [pc, #144]	@ (8010850 <_svfiprintf_r+0x1e8>)
 80107be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80107c2:	2206      	movs	r2, #6
 80107c4:	f7ef fd24 	bl	8000210 <memchr>
 80107c8:	2800      	cmp	r0, #0
 80107ca:	d036      	beq.n	801083a <_svfiprintf_r+0x1d2>
 80107cc:	4b21      	ldr	r3, [pc, #132]	@ (8010854 <_svfiprintf_r+0x1ec>)
 80107ce:	bb1b      	cbnz	r3, 8010818 <_svfiprintf_r+0x1b0>
 80107d0:	9b03      	ldr	r3, [sp, #12]
 80107d2:	3307      	adds	r3, #7
 80107d4:	f023 0307 	bic.w	r3, r3, #7
 80107d8:	3308      	adds	r3, #8
 80107da:	9303      	str	r3, [sp, #12]
 80107dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107de:	4433      	add	r3, r6
 80107e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80107e2:	e76a      	b.n	80106ba <_svfiprintf_r+0x52>
 80107e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80107e8:	460c      	mov	r4, r1
 80107ea:	2001      	movs	r0, #1
 80107ec:	e7a8      	b.n	8010740 <_svfiprintf_r+0xd8>
 80107ee:	2300      	movs	r3, #0
 80107f0:	3401      	adds	r4, #1
 80107f2:	9305      	str	r3, [sp, #20]
 80107f4:	4619      	mov	r1, r3
 80107f6:	f04f 0c0a 	mov.w	ip, #10
 80107fa:	4620      	mov	r0, r4
 80107fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010800:	3a30      	subs	r2, #48	@ 0x30
 8010802:	2a09      	cmp	r2, #9
 8010804:	d903      	bls.n	801080e <_svfiprintf_r+0x1a6>
 8010806:	2b00      	cmp	r3, #0
 8010808:	d0c6      	beq.n	8010798 <_svfiprintf_r+0x130>
 801080a:	9105      	str	r1, [sp, #20]
 801080c:	e7c4      	b.n	8010798 <_svfiprintf_r+0x130>
 801080e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010812:	4604      	mov	r4, r0
 8010814:	2301      	movs	r3, #1
 8010816:	e7f0      	b.n	80107fa <_svfiprintf_r+0x192>
 8010818:	ab03      	add	r3, sp, #12
 801081a:	9300      	str	r3, [sp, #0]
 801081c:	462a      	mov	r2, r5
 801081e:	4b0e      	ldr	r3, [pc, #56]	@ (8010858 <_svfiprintf_r+0x1f0>)
 8010820:	a904      	add	r1, sp, #16
 8010822:	4638      	mov	r0, r7
 8010824:	f3af 8000 	nop.w
 8010828:	1c42      	adds	r2, r0, #1
 801082a:	4606      	mov	r6, r0
 801082c:	d1d6      	bne.n	80107dc <_svfiprintf_r+0x174>
 801082e:	89ab      	ldrh	r3, [r5, #12]
 8010830:	065b      	lsls	r3, r3, #25
 8010832:	f53f af2d 	bmi.w	8010690 <_svfiprintf_r+0x28>
 8010836:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010838:	e72c      	b.n	8010694 <_svfiprintf_r+0x2c>
 801083a:	ab03      	add	r3, sp, #12
 801083c:	9300      	str	r3, [sp, #0]
 801083e:	462a      	mov	r2, r5
 8010840:	4b05      	ldr	r3, [pc, #20]	@ (8010858 <_svfiprintf_r+0x1f0>)
 8010842:	a904      	add	r1, sp, #16
 8010844:	4638      	mov	r0, r7
 8010846:	f000 f879 	bl	801093c <_printf_i>
 801084a:	e7ed      	b.n	8010828 <_svfiprintf_r+0x1c0>
 801084c:	0801f893 	.word	0x0801f893
 8010850:	0801f89d 	.word	0x0801f89d
 8010854:	00000000 	.word	0x00000000
 8010858:	080105b1 	.word	0x080105b1
 801085c:	0801f899 	.word	0x0801f899

08010860 <_printf_common>:
 8010860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010864:	4616      	mov	r6, r2
 8010866:	4698      	mov	r8, r3
 8010868:	688a      	ldr	r2, [r1, #8]
 801086a:	690b      	ldr	r3, [r1, #16]
 801086c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010870:	4293      	cmp	r3, r2
 8010872:	bfb8      	it	lt
 8010874:	4613      	movlt	r3, r2
 8010876:	6033      	str	r3, [r6, #0]
 8010878:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801087c:	4607      	mov	r7, r0
 801087e:	460c      	mov	r4, r1
 8010880:	b10a      	cbz	r2, 8010886 <_printf_common+0x26>
 8010882:	3301      	adds	r3, #1
 8010884:	6033      	str	r3, [r6, #0]
 8010886:	6823      	ldr	r3, [r4, #0]
 8010888:	0699      	lsls	r1, r3, #26
 801088a:	bf42      	ittt	mi
 801088c:	6833      	ldrmi	r3, [r6, #0]
 801088e:	3302      	addmi	r3, #2
 8010890:	6033      	strmi	r3, [r6, #0]
 8010892:	6825      	ldr	r5, [r4, #0]
 8010894:	f015 0506 	ands.w	r5, r5, #6
 8010898:	d106      	bne.n	80108a8 <_printf_common+0x48>
 801089a:	f104 0a19 	add.w	sl, r4, #25
 801089e:	68e3      	ldr	r3, [r4, #12]
 80108a0:	6832      	ldr	r2, [r6, #0]
 80108a2:	1a9b      	subs	r3, r3, r2
 80108a4:	42ab      	cmp	r3, r5
 80108a6:	dc26      	bgt.n	80108f6 <_printf_common+0x96>
 80108a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80108ac:	6822      	ldr	r2, [r4, #0]
 80108ae:	3b00      	subs	r3, #0
 80108b0:	bf18      	it	ne
 80108b2:	2301      	movne	r3, #1
 80108b4:	0692      	lsls	r2, r2, #26
 80108b6:	d42b      	bmi.n	8010910 <_printf_common+0xb0>
 80108b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80108bc:	4641      	mov	r1, r8
 80108be:	4638      	mov	r0, r7
 80108c0:	47c8      	blx	r9
 80108c2:	3001      	adds	r0, #1
 80108c4:	d01e      	beq.n	8010904 <_printf_common+0xa4>
 80108c6:	6823      	ldr	r3, [r4, #0]
 80108c8:	6922      	ldr	r2, [r4, #16]
 80108ca:	f003 0306 	and.w	r3, r3, #6
 80108ce:	2b04      	cmp	r3, #4
 80108d0:	bf02      	ittt	eq
 80108d2:	68e5      	ldreq	r5, [r4, #12]
 80108d4:	6833      	ldreq	r3, [r6, #0]
 80108d6:	1aed      	subeq	r5, r5, r3
 80108d8:	68a3      	ldr	r3, [r4, #8]
 80108da:	bf0c      	ite	eq
 80108dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80108e0:	2500      	movne	r5, #0
 80108e2:	4293      	cmp	r3, r2
 80108e4:	bfc4      	itt	gt
 80108e6:	1a9b      	subgt	r3, r3, r2
 80108e8:	18ed      	addgt	r5, r5, r3
 80108ea:	2600      	movs	r6, #0
 80108ec:	341a      	adds	r4, #26
 80108ee:	42b5      	cmp	r5, r6
 80108f0:	d11a      	bne.n	8010928 <_printf_common+0xc8>
 80108f2:	2000      	movs	r0, #0
 80108f4:	e008      	b.n	8010908 <_printf_common+0xa8>
 80108f6:	2301      	movs	r3, #1
 80108f8:	4652      	mov	r2, sl
 80108fa:	4641      	mov	r1, r8
 80108fc:	4638      	mov	r0, r7
 80108fe:	47c8      	blx	r9
 8010900:	3001      	adds	r0, #1
 8010902:	d103      	bne.n	801090c <_printf_common+0xac>
 8010904:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801090c:	3501      	adds	r5, #1
 801090e:	e7c6      	b.n	801089e <_printf_common+0x3e>
 8010910:	18e1      	adds	r1, r4, r3
 8010912:	1c5a      	adds	r2, r3, #1
 8010914:	2030      	movs	r0, #48	@ 0x30
 8010916:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801091a:	4422      	add	r2, r4
 801091c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010920:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010924:	3302      	adds	r3, #2
 8010926:	e7c7      	b.n	80108b8 <_printf_common+0x58>
 8010928:	2301      	movs	r3, #1
 801092a:	4622      	mov	r2, r4
 801092c:	4641      	mov	r1, r8
 801092e:	4638      	mov	r0, r7
 8010930:	47c8      	blx	r9
 8010932:	3001      	adds	r0, #1
 8010934:	d0e6      	beq.n	8010904 <_printf_common+0xa4>
 8010936:	3601      	adds	r6, #1
 8010938:	e7d9      	b.n	80108ee <_printf_common+0x8e>
	...

0801093c <_printf_i>:
 801093c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010940:	7e0f      	ldrb	r7, [r1, #24]
 8010942:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010944:	2f78      	cmp	r7, #120	@ 0x78
 8010946:	4691      	mov	r9, r2
 8010948:	4680      	mov	r8, r0
 801094a:	460c      	mov	r4, r1
 801094c:	469a      	mov	sl, r3
 801094e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010952:	d807      	bhi.n	8010964 <_printf_i+0x28>
 8010954:	2f62      	cmp	r7, #98	@ 0x62
 8010956:	d80a      	bhi.n	801096e <_printf_i+0x32>
 8010958:	2f00      	cmp	r7, #0
 801095a:	f000 80d2 	beq.w	8010b02 <_printf_i+0x1c6>
 801095e:	2f58      	cmp	r7, #88	@ 0x58
 8010960:	f000 80b9 	beq.w	8010ad6 <_printf_i+0x19a>
 8010964:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010968:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801096c:	e03a      	b.n	80109e4 <_printf_i+0xa8>
 801096e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010972:	2b15      	cmp	r3, #21
 8010974:	d8f6      	bhi.n	8010964 <_printf_i+0x28>
 8010976:	a101      	add	r1, pc, #4	@ (adr r1, 801097c <_printf_i+0x40>)
 8010978:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801097c:	080109d5 	.word	0x080109d5
 8010980:	080109e9 	.word	0x080109e9
 8010984:	08010965 	.word	0x08010965
 8010988:	08010965 	.word	0x08010965
 801098c:	08010965 	.word	0x08010965
 8010990:	08010965 	.word	0x08010965
 8010994:	080109e9 	.word	0x080109e9
 8010998:	08010965 	.word	0x08010965
 801099c:	08010965 	.word	0x08010965
 80109a0:	08010965 	.word	0x08010965
 80109a4:	08010965 	.word	0x08010965
 80109a8:	08010ae9 	.word	0x08010ae9
 80109ac:	08010a13 	.word	0x08010a13
 80109b0:	08010aa3 	.word	0x08010aa3
 80109b4:	08010965 	.word	0x08010965
 80109b8:	08010965 	.word	0x08010965
 80109bc:	08010b0b 	.word	0x08010b0b
 80109c0:	08010965 	.word	0x08010965
 80109c4:	08010a13 	.word	0x08010a13
 80109c8:	08010965 	.word	0x08010965
 80109cc:	08010965 	.word	0x08010965
 80109d0:	08010aab 	.word	0x08010aab
 80109d4:	6833      	ldr	r3, [r6, #0]
 80109d6:	1d1a      	adds	r2, r3, #4
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	6032      	str	r2, [r6, #0]
 80109dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80109e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80109e4:	2301      	movs	r3, #1
 80109e6:	e09d      	b.n	8010b24 <_printf_i+0x1e8>
 80109e8:	6833      	ldr	r3, [r6, #0]
 80109ea:	6820      	ldr	r0, [r4, #0]
 80109ec:	1d19      	adds	r1, r3, #4
 80109ee:	6031      	str	r1, [r6, #0]
 80109f0:	0606      	lsls	r6, r0, #24
 80109f2:	d501      	bpl.n	80109f8 <_printf_i+0xbc>
 80109f4:	681d      	ldr	r5, [r3, #0]
 80109f6:	e003      	b.n	8010a00 <_printf_i+0xc4>
 80109f8:	0645      	lsls	r5, r0, #25
 80109fa:	d5fb      	bpl.n	80109f4 <_printf_i+0xb8>
 80109fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010a00:	2d00      	cmp	r5, #0
 8010a02:	da03      	bge.n	8010a0c <_printf_i+0xd0>
 8010a04:	232d      	movs	r3, #45	@ 0x2d
 8010a06:	426d      	negs	r5, r5
 8010a08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010a0c:	4859      	ldr	r0, [pc, #356]	@ (8010b74 <_printf_i+0x238>)
 8010a0e:	230a      	movs	r3, #10
 8010a10:	e011      	b.n	8010a36 <_printf_i+0xfa>
 8010a12:	6821      	ldr	r1, [r4, #0]
 8010a14:	6833      	ldr	r3, [r6, #0]
 8010a16:	0608      	lsls	r0, r1, #24
 8010a18:	f853 5b04 	ldr.w	r5, [r3], #4
 8010a1c:	d402      	bmi.n	8010a24 <_printf_i+0xe8>
 8010a1e:	0649      	lsls	r1, r1, #25
 8010a20:	bf48      	it	mi
 8010a22:	b2ad      	uxthmi	r5, r5
 8010a24:	2f6f      	cmp	r7, #111	@ 0x6f
 8010a26:	4853      	ldr	r0, [pc, #332]	@ (8010b74 <_printf_i+0x238>)
 8010a28:	6033      	str	r3, [r6, #0]
 8010a2a:	bf14      	ite	ne
 8010a2c:	230a      	movne	r3, #10
 8010a2e:	2308      	moveq	r3, #8
 8010a30:	2100      	movs	r1, #0
 8010a32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010a36:	6866      	ldr	r6, [r4, #4]
 8010a38:	60a6      	str	r6, [r4, #8]
 8010a3a:	2e00      	cmp	r6, #0
 8010a3c:	bfa2      	ittt	ge
 8010a3e:	6821      	ldrge	r1, [r4, #0]
 8010a40:	f021 0104 	bicge.w	r1, r1, #4
 8010a44:	6021      	strge	r1, [r4, #0]
 8010a46:	b90d      	cbnz	r5, 8010a4c <_printf_i+0x110>
 8010a48:	2e00      	cmp	r6, #0
 8010a4a:	d04b      	beq.n	8010ae4 <_printf_i+0x1a8>
 8010a4c:	4616      	mov	r6, r2
 8010a4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010a52:	fb03 5711 	mls	r7, r3, r1, r5
 8010a56:	5dc7      	ldrb	r7, [r0, r7]
 8010a58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010a5c:	462f      	mov	r7, r5
 8010a5e:	42bb      	cmp	r3, r7
 8010a60:	460d      	mov	r5, r1
 8010a62:	d9f4      	bls.n	8010a4e <_printf_i+0x112>
 8010a64:	2b08      	cmp	r3, #8
 8010a66:	d10b      	bne.n	8010a80 <_printf_i+0x144>
 8010a68:	6823      	ldr	r3, [r4, #0]
 8010a6a:	07df      	lsls	r7, r3, #31
 8010a6c:	d508      	bpl.n	8010a80 <_printf_i+0x144>
 8010a6e:	6923      	ldr	r3, [r4, #16]
 8010a70:	6861      	ldr	r1, [r4, #4]
 8010a72:	4299      	cmp	r1, r3
 8010a74:	bfde      	ittt	le
 8010a76:	2330      	movle	r3, #48	@ 0x30
 8010a78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010a7c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8010a80:	1b92      	subs	r2, r2, r6
 8010a82:	6122      	str	r2, [r4, #16]
 8010a84:	f8cd a000 	str.w	sl, [sp]
 8010a88:	464b      	mov	r3, r9
 8010a8a:	aa03      	add	r2, sp, #12
 8010a8c:	4621      	mov	r1, r4
 8010a8e:	4640      	mov	r0, r8
 8010a90:	f7ff fee6 	bl	8010860 <_printf_common>
 8010a94:	3001      	adds	r0, #1
 8010a96:	d14a      	bne.n	8010b2e <_printf_i+0x1f2>
 8010a98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010a9c:	b004      	add	sp, #16
 8010a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010aa2:	6823      	ldr	r3, [r4, #0]
 8010aa4:	f043 0320 	orr.w	r3, r3, #32
 8010aa8:	6023      	str	r3, [r4, #0]
 8010aaa:	4833      	ldr	r0, [pc, #204]	@ (8010b78 <_printf_i+0x23c>)
 8010aac:	2778      	movs	r7, #120	@ 0x78
 8010aae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010ab2:	6823      	ldr	r3, [r4, #0]
 8010ab4:	6831      	ldr	r1, [r6, #0]
 8010ab6:	061f      	lsls	r7, r3, #24
 8010ab8:	f851 5b04 	ldr.w	r5, [r1], #4
 8010abc:	d402      	bmi.n	8010ac4 <_printf_i+0x188>
 8010abe:	065f      	lsls	r7, r3, #25
 8010ac0:	bf48      	it	mi
 8010ac2:	b2ad      	uxthmi	r5, r5
 8010ac4:	6031      	str	r1, [r6, #0]
 8010ac6:	07d9      	lsls	r1, r3, #31
 8010ac8:	bf44      	itt	mi
 8010aca:	f043 0320 	orrmi.w	r3, r3, #32
 8010ace:	6023      	strmi	r3, [r4, #0]
 8010ad0:	b11d      	cbz	r5, 8010ada <_printf_i+0x19e>
 8010ad2:	2310      	movs	r3, #16
 8010ad4:	e7ac      	b.n	8010a30 <_printf_i+0xf4>
 8010ad6:	4827      	ldr	r0, [pc, #156]	@ (8010b74 <_printf_i+0x238>)
 8010ad8:	e7e9      	b.n	8010aae <_printf_i+0x172>
 8010ada:	6823      	ldr	r3, [r4, #0]
 8010adc:	f023 0320 	bic.w	r3, r3, #32
 8010ae0:	6023      	str	r3, [r4, #0]
 8010ae2:	e7f6      	b.n	8010ad2 <_printf_i+0x196>
 8010ae4:	4616      	mov	r6, r2
 8010ae6:	e7bd      	b.n	8010a64 <_printf_i+0x128>
 8010ae8:	6833      	ldr	r3, [r6, #0]
 8010aea:	6825      	ldr	r5, [r4, #0]
 8010aec:	6961      	ldr	r1, [r4, #20]
 8010aee:	1d18      	adds	r0, r3, #4
 8010af0:	6030      	str	r0, [r6, #0]
 8010af2:	062e      	lsls	r6, r5, #24
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	d501      	bpl.n	8010afc <_printf_i+0x1c0>
 8010af8:	6019      	str	r1, [r3, #0]
 8010afa:	e002      	b.n	8010b02 <_printf_i+0x1c6>
 8010afc:	0668      	lsls	r0, r5, #25
 8010afe:	d5fb      	bpl.n	8010af8 <_printf_i+0x1bc>
 8010b00:	8019      	strh	r1, [r3, #0]
 8010b02:	2300      	movs	r3, #0
 8010b04:	6123      	str	r3, [r4, #16]
 8010b06:	4616      	mov	r6, r2
 8010b08:	e7bc      	b.n	8010a84 <_printf_i+0x148>
 8010b0a:	6833      	ldr	r3, [r6, #0]
 8010b0c:	1d1a      	adds	r2, r3, #4
 8010b0e:	6032      	str	r2, [r6, #0]
 8010b10:	681e      	ldr	r6, [r3, #0]
 8010b12:	6862      	ldr	r2, [r4, #4]
 8010b14:	2100      	movs	r1, #0
 8010b16:	4630      	mov	r0, r6
 8010b18:	f7ef fb7a 	bl	8000210 <memchr>
 8010b1c:	b108      	cbz	r0, 8010b22 <_printf_i+0x1e6>
 8010b1e:	1b80      	subs	r0, r0, r6
 8010b20:	6060      	str	r0, [r4, #4]
 8010b22:	6863      	ldr	r3, [r4, #4]
 8010b24:	6123      	str	r3, [r4, #16]
 8010b26:	2300      	movs	r3, #0
 8010b28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010b2c:	e7aa      	b.n	8010a84 <_printf_i+0x148>
 8010b2e:	6923      	ldr	r3, [r4, #16]
 8010b30:	4632      	mov	r2, r6
 8010b32:	4649      	mov	r1, r9
 8010b34:	4640      	mov	r0, r8
 8010b36:	47d0      	blx	sl
 8010b38:	3001      	adds	r0, #1
 8010b3a:	d0ad      	beq.n	8010a98 <_printf_i+0x15c>
 8010b3c:	6823      	ldr	r3, [r4, #0]
 8010b3e:	079b      	lsls	r3, r3, #30
 8010b40:	d413      	bmi.n	8010b6a <_printf_i+0x22e>
 8010b42:	68e0      	ldr	r0, [r4, #12]
 8010b44:	9b03      	ldr	r3, [sp, #12]
 8010b46:	4298      	cmp	r0, r3
 8010b48:	bfb8      	it	lt
 8010b4a:	4618      	movlt	r0, r3
 8010b4c:	e7a6      	b.n	8010a9c <_printf_i+0x160>
 8010b4e:	2301      	movs	r3, #1
 8010b50:	4632      	mov	r2, r6
 8010b52:	4649      	mov	r1, r9
 8010b54:	4640      	mov	r0, r8
 8010b56:	47d0      	blx	sl
 8010b58:	3001      	adds	r0, #1
 8010b5a:	d09d      	beq.n	8010a98 <_printf_i+0x15c>
 8010b5c:	3501      	adds	r5, #1
 8010b5e:	68e3      	ldr	r3, [r4, #12]
 8010b60:	9903      	ldr	r1, [sp, #12]
 8010b62:	1a5b      	subs	r3, r3, r1
 8010b64:	42ab      	cmp	r3, r5
 8010b66:	dcf2      	bgt.n	8010b4e <_printf_i+0x212>
 8010b68:	e7eb      	b.n	8010b42 <_printf_i+0x206>
 8010b6a:	2500      	movs	r5, #0
 8010b6c:	f104 0619 	add.w	r6, r4, #25
 8010b70:	e7f5      	b.n	8010b5e <_printf_i+0x222>
 8010b72:	bf00      	nop
 8010b74:	0801f8a4 	.word	0x0801f8a4
 8010b78:	0801f8b5 	.word	0x0801f8b5

08010b7c <__sflush_r>:
 8010b7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b84:	0716      	lsls	r6, r2, #28
 8010b86:	4605      	mov	r5, r0
 8010b88:	460c      	mov	r4, r1
 8010b8a:	d454      	bmi.n	8010c36 <__sflush_r+0xba>
 8010b8c:	684b      	ldr	r3, [r1, #4]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	dc02      	bgt.n	8010b98 <__sflush_r+0x1c>
 8010b92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	dd48      	ble.n	8010c2a <__sflush_r+0xae>
 8010b98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010b9a:	2e00      	cmp	r6, #0
 8010b9c:	d045      	beq.n	8010c2a <__sflush_r+0xae>
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010ba4:	682f      	ldr	r7, [r5, #0]
 8010ba6:	6a21      	ldr	r1, [r4, #32]
 8010ba8:	602b      	str	r3, [r5, #0]
 8010baa:	d030      	beq.n	8010c0e <__sflush_r+0x92>
 8010bac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010bae:	89a3      	ldrh	r3, [r4, #12]
 8010bb0:	0759      	lsls	r1, r3, #29
 8010bb2:	d505      	bpl.n	8010bc0 <__sflush_r+0x44>
 8010bb4:	6863      	ldr	r3, [r4, #4]
 8010bb6:	1ad2      	subs	r2, r2, r3
 8010bb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010bba:	b10b      	cbz	r3, 8010bc0 <__sflush_r+0x44>
 8010bbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010bbe:	1ad2      	subs	r2, r2, r3
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010bc4:	6a21      	ldr	r1, [r4, #32]
 8010bc6:	4628      	mov	r0, r5
 8010bc8:	47b0      	blx	r6
 8010bca:	1c43      	adds	r3, r0, #1
 8010bcc:	89a3      	ldrh	r3, [r4, #12]
 8010bce:	d106      	bne.n	8010bde <__sflush_r+0x62>
 8010bd0:	6829      	ldr	r1, [r5, #0]
 8010bd2:	291d      	cmp	r1, #29
 8010bd4:	d82b      	bhi.n	8010c2e <__sflush_r+0xb2>
 8010bd6:	4a2a      	ldr	r2, [pc, #168]	@ (8010c80 <__sflush_r+0x104>)
 8010bd8:	410a      	asrs	r2, r1
 8010bda:	07d6      	lsls	r6, r2, #31
 8010bdc:	d427      	bmi.n	8010c2e <__sflush_r+0xb2>
 8010bde:	2200      	movs	r2, #0
 8010be0:	6062      	str	r2, [r4, #4]
 8010be2:	04d9      	lsls	r1, r3, #19
 8010be4:	6922      	ldr	r2, [r4, #16]
 8010be6:	6022      	str	r2, [r4, #0]
 8010be8:	d504      	bpl.n	8010bf4 <__sflush_r+0x78>
 8010bea:	1c42      	adds	r2, r0, #1
 8010bec:	d101      	bne.n	8010bf2 <__sflush_r+0x76>
 8010bee:	682b      	ldr	r3, [r5, #0]
 8010bf0:	b903      	cbnz	r3, 8010bf4 <__sflush_r+0x78>
 8010bf2:	6560      	str	r0, [r4, #84]	@ 0x54
 8010bf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010bf6:	602f      	str	r7, [r5, #0]
 8010bf8:	b1b9      	cbz	r1, 8010c2a <__sflush_r+0xae>
 8010bfa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010bfe:	4299      	cmp	r1, r3
 8010c00:	d002      	beq.n	8010c08 <__sflush_r+0x8c>
 8010c02:	4628      	mov	r0, r5
 8010c04:	f7ff fbd4 	bl	80103b0 <_free_r>
 8010c08:	2300      	movs	r3, #0
 8010c0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8010c0c:	e00d      	b.n	8010c2a <__sflush_r+0xae>
 8010c0e:	2301      	movs	r3, #1
 8010c10:	4628      	mov	r0, r5
 8010c12:	47b0      	blx	r6
 8010c14:	4602      	mov	r2, r0
 8010c16:	1c50      	adds	r0, r2, #1
 8010c18:	d1c9      	bne.n	8010bae <__sflush_r+0x32>
 8010c1a:	682b      	ldr	r3, [r5, #0]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d0c6      	beq.n	8010bae <__sflush_r+0x32>
 8010c20:	2b1d      	cmp	r3, #29
 8010c22:	d001      	beq.n	8010c28 <__sflush_r+0xac>
 8010c24:	2b16      	cmp	r3, #22
 8010c26:	d11e      	bne.n	8010c66 <__sflush_r+0xea>
 8010c28:	602f      	str	r7, [r5, #0]
 8010c2a:	2000      	movs	r0, #0
 8010c2c:	e022      	b.n	8010c74 <__sflush_r+0xf8>
 8010c2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c32:	b21b      	sxth	r3, r3
 8010c34:	e01b      	b.n	8010c6e <__sflush_r+0xf2>
 8010c36:	690f      	ldr	r7, [r1, #16]
 8010c38:	2f00      	cmp	r7, #0
 8010c3a:	d0f6      	beq.n	8010c2a <__sflush_r+0xae>
 8010c3c:	0793      	lsls	r3, r2, #30
 8010c3e:	680e      	ldr	r6, [r1, #0]
 8010c40:	bf08      	it	eq
 8010c42:	694b      	ldreq	r3, [r1, #20]
 8010c44:	600f      	str	r7, [r1, #0]
 8010c46:	bf18      	it	ne
 8010c48:	2300      	movne	r3, #0
 8010c4a:	eba6 0807 	sub.w	r8, r6, r7
 8010c4e:	608b      	str	r3, [r1, #8]
 8010c50:	f1b8 0f00 	cmp.w	r8, #0
 8010c54:	dde9      	ble.n	8010c2a <__sflush_r+0xae>
 8010c56:	6a21      	ldr	r1, [r4, #32]
 8010c58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010c5a:	4643      	mov	r3, r8
 8010c5c:	463a      	mov	r2, r7
 8010c5e:	4628      	mov	r0, r5
 8010c60:	47b0      	blx	r6
 8010c62:	2800      	cmp	r0, #0
 8010c64:	dc08      	bgt.n	8010c78 <__sflush_r+0xfc>
 8010c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c6e:	81a3      	strh	r3, [r4, #12]
 8010c70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c78:	4407      	add	r7, r0
 8010c7a:	eba8 0800 	sub.w	r8, r8, r0
 8010c7e:	e7e7      	b.n	8010c50 <__sflush_r+0xd4>
 8010c80:	dfbffffe 	.word	0xdfbffffe

08010c84 <_fflush_r>:
 8010c84:	b538      	push	{r3, r4, r5, lr}
 8010c86:	690b      	ldr	r3, [r1, #16]
 8010c88:	4605      	mov	r5, r0
 8010c8a:	460c      	mov	r4, r1
 8010c8c:	b913      	cbnz	r3, 8010c94 <_fflush_r+0x10>
 8010c8e:	2500      	movs	r5, #0
 8010c90:	4628      	mov	r0, r5
 8010c92:	bd38      	pop	{r3, r4, r5, pc}
 8010c94:	b118      	cbz	r0, 8010c9e <_fflush_r+0x1a>
 8010c96:	6a03      	ldr	r3, [r0, #32]
 8010c98:	b90b      	cbnz	r3, 8010c9e <_fflush_r+0x1a>
 8010c9a:	f7ff f9f1 	bl	8010080 <__sinit>
 8010c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d0f3      	beq.n	8010c8e <_fflush_r+0xa>
 8010ca6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010ca8:	07d0      	lsls	r0, r2, #31
 8010caa:	d404      	bmi.n	8010cb6 <_fflush_r+0x32>
 8010cac:	0599      	lsls	r1, r3, #22
 8010cae:	d402      	bmi.n	8010cb6 <_fflush_r+0x32>
 8010cb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010cb2:	f7ff fb4e 	bl	8010352 <__retarget_lock_acquire_recursive>
 8010cb6:	4628      	mov	r0, r5
 8010cb8:	4621      	mov	r1, r4
 8010cba:	f7ff ff5f 	bl	8010b7c <__sflush_r>
 8010cbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010cc0:	07da      	lsls	r2, r3, #31
 8010cc2:	4605      	mov	r5, r0
 8010cc4:	d4e4      	bmi.n	8010c90 <_fflush_r+0xc>
 8010cc6:	89a3      	ldrh	r3, [r4, #12]
 8010cc8:	059b      	lsls	r3, r3, #22
 8010cca:	d4e1      	bmi.n	8010c90 <_fflush_r+0xc>
 8010ccc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010cce:	f7ff fb41 	bl	8010354 <__retarget_lock_release_recursive>
 8010cd2:	e7dd      	b.n	8010c90 <_fflush_r+0xc>

08010cd4 <fiprintf>:
 8010cd4:	b40e      	push	{r1, r2, r3}
 8010cd6:	b503      	push	{r0, r1, lr}
 8010cd8:	4601      	mov	r1, r0
 8010cda:	ab03      	add	r3, sp, #12
 8010cdc:	4805      	ldr	r0, [pc, #20]	@ (8010cf4 <fiprintf+0x20>)
 8010cde:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ce2:	6800      	ldr	r0, [r0, #0]
 8010ce4:	9301      	str	r3, [sp, #4]
 8010ce6:	f000 f88f 	bl	8010e08 <_vfiprintf_r>
 8010cea:	b002      	add	sp, #8
 8010cec:	f85d eb04 	ldr.w	lr, [sp], #4
 8010cf0:	b003      	add	sp, #12
 8010cf2:	4770      	bx	lr
 8010cf4:	20000064 	.word	0x20000064

08010cf8 <memmove>:
 8010cf8:	4288      	cmp	r0, r1
 8010cfa:	b510      	push	{r4, lr}
 8010cfc:	eb01 0402 	add.w	r4, r1, r2
 8010d00:	d902      	bls.n	8010d08 <memmove+0x10>
 8010d02:	4284      	cmp	r4, r0
 8010d04:	4623      	mov	r3, r4
 8010d06:	d807      	bhi.n	8010d18 <memmove+0x20>
 8010d08:	1e43      	subs	r3, r0, #1
 8010d0a:	42a1      	cmp	r1, r4
 8010d0c:	d008      	beq.n	8010d20 <memmove+0x28>
 8010d0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010d16:	e7f8      	b.n	8010d0a <memmove+0x12>
 8010d18:	4402      	add	r2, r0
 8010d1a:	4601      	mov	r1, r0
 8010d1c:	428a      	cmp	r2, r1
 8010d1e:	d100      	bne.n	8010d22 <memmove+0x2a>
 8010d20:	bd10      	pop	{r4, pc}
 8010d22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d2a:	e7f7      	b.n	8010d1c <memmove+0x24>

08010d2c <_sbrk_r>:
 8010d2c:	b538      	push	{r3, r4, r5, lr}
 8010d2e:	4d06      	ldr	r5, [pc, #24]	@ (8010d48 <_sbrk_r+0x1c>)
 8010d30:	2300      	movs	r3, #0
 8010d32:	4604      	mov	r4, r0
 8010d34:	4608      	mov	r0, r1
 8010d36:	602b      	str	r3, [r5, #0]
 8010d38:	f7f4 fc14 	bl	8005564 <_sbrk>
 8010d3c:	1c43      	adds	r3, r0, #1
 8010d3e:	d102      	bne.n	8010d46 <_sbrk_r+0x1a>
 8010d40:	682b      	ldr	r3, [r5, #0]
 8010d42:	b103      	cbz	r3, 8010d46 <_sbrk_r+0x1a>
 8010d44:	6023      	str	r3, [r4, #0]
 8010d46:	bd38      	pop	{r3, r4, r5, pc}
 8010d48:	20004cc0 	.word	0x20004cc0

08010d4c <abort>:
 8010d4c:	b508      	push	{r3, lr}
 8010d4e:	2006      	movs	r0, #6
 8010d50:	f000 fa2e 	bl	80111b0 <raise>
 8010d54:	2001      	movs	r0, #1
 8010d56:	f7f4 fb8d 	bl	8005474 <_exit>

08010d5a <_realloc_r>:
 8010d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d5e:	4680      	mov	r8, r0
 8010d60:	4615      	mov	r5, r2
 8010d62:	460c      	mov	r4, r1
 8010d64:	b921      	cbnz	r1, 8010d70 <_realloc_r+0x16>
 8010d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d6a:	4611      	mov	r1, r2
 8010d6c:	f7ff bb94 	b.w	8010498 <_malloc_r>
 8010d70:	b92a      	cbnz	r2, 8010d7e <_realloc_r+0x24>
 8010d72:	f7ff fb1d 	bl	80103b0 <_free_r>
 8010d76:	2400      	movs	r4, #0
 8010d78:	4620      	mov	r0, r4
 8010d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d7e:	f000 fa33 	bl	80111e8 <_malloc_usable_size_r>
 8010d82:	4285      	cmp	r5, r0
 8010d84:	4606      	mov	r6, r0
 8010d86:	d802      	bhi.n	8010d8e <_realloc_r+0x34>
 8010d88:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010d8c:	d8f4      	bhi.n	8010d78 <_realloc_r+0x1e>
 8010d8e:	4629      	mov	r1, r5
 8010d90:	4640      	mov	r0, r8
 8010d92:	f7ff fb81 	bl	8010498 <_malloc_r>
 8010d96:	4607      	mov	r7, r0
 8010d98:	2800      	cmp	r0, #0
 8010d9a:	d0ec      	beq.n	8010d76 <_realloc_r+0x1c>
 8010d9c:	42b5      	cmp	r5, r6
 8010d9e:	462a      	mov	r2, r5
 8010da0:	4621      	mov	r1, r4
 8010da2:	bf28      	it	cs
 8010da4:	4632      	movcs	r2, r6
 8010da6:	f7ff fad6 	bl	8010356 <memcpy>
 8010daa:	4621      	mov	r1, r4
 8010dac:	4640      	mov	r0, r8
 8010dae:	f7ff faff 	bl	80103b0 <_free_r>
 8010db2:	463c      	mov	r4, r7
 8010db4:	e7e0      	b.n	8010d78 <_realloc_r+0x1e>

08010db6 <__sfputc_r>:
 8010db6:	6893      	ldr	r3, [r2, #8]
 8010db8:	3b01      	subs	r3, #1
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	b410      	push	{r4}
 8010dbe:	6093      	str	r3, [r2, #8]
 8010dc0:	da08      	bge.n	8010dd4 <__sfputc_r+0x1e>
 8010dc2:	6994      	ldr	r4, [r2, #24]
 8010dc4:	42a3      	cmp	r3, r4
 8010dc6:	db01      	blt.n	8010dcc <__sfputc_r+0x16>
 8010dc8:	290a      	cmp	r1, #10
 8010dca:	d103      	bne.n	8010dd4 <__sfputc_r+0x1e>
 8010dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010dd0:	f000 b932 	b.w	8011038 <__swbuf_r>
 8010dd4:	6813      	ldr	r3, [r2, #0]
 8010dd6:	1c58      	adds	r0, r3, #1
 8010dd8:	6010      	str	r0, [r2, #0]
 8010dda:	7019      	strb	r1, [r3, #0]
 8010ddc:	4608      	mov	r0, r1
 8010dde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010de2:	4770      	bx	lr

08010de4 <__sfputs_r>:
 8010de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010de6:	4606      	mov	r6, r0
 8010de8:	460f      	mov	r7, r1
 8010dea:	4614      	mov	r4, r2
 8010dec:	18d5      	adds	r5, r2, r3
 8010dee:	42ac      	cmp	r4, r5
 8010df0:	d101      	bne.n	8010df6 <__sfputs_r+0x12>
 8010df2:	2000      	movs	r0, #0
 8010df4:	e007      	b.n	8010e06 <__sfputs_r+0x22>
 8010df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dfa:	463a      	mov	r2, r7
 8010dfc:	4630      	mov	r0, r6
 8010dfe:	f7ff ffda 	bl	8010db6 <__sfputc_r>
 8010e02:	1c43      	adds	r3, r0, #1
 8010e04:	d1f3      	bne.n	8010dee <__sfputs_r+0xa>
 8010e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010e08 <_vfiprintf_r>:
 8010e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e0c:	460d      	mov	r5, r1
 8010e0e:	b09d      	sub	sp, #116	@ 0x74
 8010e10:	4614      	mov	r4, r2
 8010e12:	4698      	mov	r8, r3
 8010e14:	4606      	mov	r6, r0
 8010e16:	b118      	cbz	r0, 8010e20 <_vfiprintf_r+0x18>
 8010e18:	6a03      	ldr	r3, [r0, #32]
 8010e1a:	b90b      	cbnz	r3, 8010e20 <_vfiprintf_r+0x18>
 8010e1c:	f7ff f930 	bl	8010080 <__sinit>
 8010e20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010e22:	07d9      	lsls	r1, r3, #31
 8010e24:	d405      	bmi.n	8010e32 <_vfiprintf_r+0x2a>
 8010e26:	89ab      	ldrh	r3, [r5, #12]
 8010e28:	059a      	lsls	r2, r3, #22
 8010e2a:	d402      	bmi.n	8010e32 <_vfiprintf_r+0x2a>
 8010e2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010e2e:	f7ff fa90 	bl	8010352 <__retarget_lock_acquire_recursive>
 8010e32:	89ab      	ldrh	r3, [r5, #12]
 8010e34:	071b      	lsls	r3, r3, #28
 8010e36:	d501      	bpl.n	8010e3c <_vfiprintf_r+0x34>
 8010e38:	692b      	ldr	r3, [r5, #16]
 8010e3a:	b99b      	cbnz	r3, 8010e64 <_vfiprintf_r+0x5c>
 8010e3c:	4629      	mov	r1, r5
 8010e3e:	4630      	mov	r0, r6
 8010e40:	f000 f938 	bl	80110b4 <__swsetup_r>
 8010e44:	b170      	cbz	r0, 8010e64 <_vfiprintf_r+0x5c>
 8010e46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010e48:	07dc      	lsls	r4, r3, #31
 8010e4a:	d504      	bpl.n	8010e56 <_vfiprintf_r+0x4e>
 8010e4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010e50:	b01d      	add	sp, #116	@ 0x74
 8010e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e56:	89ab      	ldrh	r3, [r5, #12]
 8010e58:	0598      	lsls	r0, r3, #22
 8010e5a:	d4f7      	bmi.n	8010e4c <_vfiprintf_r+0x44>
 8010e5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010e5e:	f7ff fa79 	bl	8010354 <__retarget_lock_release_recursive>
 8010e62:	e7f3      	b.n	8010e4c <_vfiprintf_r+0x44>
 8010e64:	2300      	movs	r3, #0
 8010e66:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e68:	2320      	movs	r3, #32
 8010e6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010e6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e72:	2330      	movs	r3, #48	@ 0x30
 8010e74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011024 <_vfiprintf_r+0x21c>
 8010e78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010e7c:	f04f 0901 	mov.w	r9, #1
 8010e80:	4623      	mov	r3, r4
 8010e82:	469a      	mov	sl, r3
 8010e84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e88:	b10a      	cbz	r2, 8010e8e <_vfiprintf_r+0x86>
 8010e8a:	2a25      	cmp	r2, #37	@ 0x25
 8010e8c:	d1f9      	bne.n	8010e82 <_vfiprintf_r+0x7a>
 8010e8e:	ebba 0b04 	subs.w	fp, sl, r4
 8010e92:	d00b      	beq.n	8010eac <_vfiprintf_r+0xa4>
 8010e94:	465b      	mov	r3, fp
 8010e96:	4622      	mov	r2, r4
 8010e98:	4629      	mov	r1, r5
 8010e9a:	4630      	mov	r0, r6
 8010e9c:	f7ff ffa2 	bl	8010de4 <__sfputs_r>
 8010ea0:	3001      	adds	r0, #1
 8010ea2:	f000 80a7 	beq.w	8010ff4 <_vfiprintf_r+0x1ec>
 8010ea6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010ea8:	445a      	add	r2, fp
 8010eaa:	9209      	str	r2, [sp, #36]	@ 0x24
 8010eac:	f89a 3000 	ldrb.w	r3, [sl]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	f000 809f 	beq.w	8010ff4 <_vfiprintf_r+0x1ec>
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010ebc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ec0:	f10a 0a01 	add.w	sl, sl, #1
 8010ec4:	9304      	str	r3, [sp, #16]
 8010ec6:	9307      	str	r3, [sp, #28]
 8010ec8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010ecc:	931a      	str	r3, [sp, #104]	@ 0x68
 8010ece:	4654      	mov	r4, sl
 8010ed0:	2205      	movs	r2, #5
 8010ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ed6:	4853      	ldr	r0, [pc, #332]	@ (8011024 <_vfiprintf_r+0x21c>)
 8010ed8:	f7ef f99a 	bl	8000210 <memchr>
 8010edc:	9a04      	ldr	r2, [sp, #16]
 8010ede:	b9d8      	cbnz	r0, 8010f18 <_vfiprintf_r+0x110>
 8010ee0:	06d1      	lsls	r1, r2, #27
 8010ee2:	bf44      	itt	mi
 8010ee4:	2320      	movmi	r3, #32
 8010ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010eea:	0713      	lsls	r3, r2, #28
 8010eec:	bf44      	itt	mi
 8010eee:	232b      	movmi	r3, #43	@ 0x2b
 8010ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8010ef8:	2b2a      	cmp	r3, #42	@ 0x2a
 8010efa:	d015      	beq.n	8010f28 <_vfiprintf_r+0x120>
 8010efc:	9a07      	ldr	r2, [sp, #28]
 8010efe:	4654      	mov	r4, sl
 8010f00:	2000      	movs	r0, #0
 8010f02:	f04f 0c0a 	mov.w	ip, #10
 8010f06:	4621      	mov	r1, r4
 8010f08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f0c:	3b30      	subs	r3, #48	@ 0x30
 8010f0e:	2b09      	cmp	r3, #9
 8010f10:	d94b      	bls.n	8010faa <_vfiprintf_r+0x1a2>
 8010f12:	b1b0      	cbz	r0, 8010f42 <_vfiprintf_r+0x13a>
 8010f14:	9207      	str	r2, [sp, #28]
 8010f16:	e014      	b.n	8010f42 <_vfiprintf_r+0x13a>
 8010f18:	eba0 0308 	sub.w	r3, r0, r8
 8010f1c:	fa09 f303 	lsl.w	r3, r9, r3
 8010f20:	4313      	orrs	r3, r2
 8010f22:	9304      	str	r3, [sp, #16]
 8010f24:	46a2      	mov	sl, r4
 8010f26:	e7d2      	b.n	8010ece <_vfiprintf_r+0xc6>
 8010f28:	9b03      	ldr	r3, [sp, #12]
 8010f2a:	1d19      	adds	r1, r3, #4
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	9103      	str	r1, [sp, #12]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	bfbb      	ittet	lt
 8010f34:	425b      	neglt	r3, r3
 8010f36:	f042 0202 	orrlt.w	r2, r2, #2
 8010f3a:	9307      	strge	r3, [sp, #28]
 8010f3c:	9307      	strlt	r3, [sp, #28]
 8010f3e:	bfb8      	it	lt
 8010f40:	9204      	strlt	r2, [sp, #16]
 8010f42:	7823      	ldrb	r3, [r4, #0]
 8010f44:	2b2e      	cmp	r3, #46	@ 0x2e
 8010f46:	d10a      	bne.n	8010f5e <_vfiprintf_r+0x156>
 8010f48:	7863      	ldrb	r3, [r4, #1]
 8010f4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f4c:	d132      	bne.n	8010fb4 <_vfiprintf_r+0x1ac>
 8010f4e:	9b03      	ldr	r3, [sp, #12]
 8010f50:	1d1a      	adds	r2, r3, #4
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	9203      	str	r2, [sp, #12]
 8010f56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010f5a:	3402      	adds	r4, #2
 8010f5c:	9305      	str	r3, [sp, #20]
 8010f5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011034 <_vfiprintf_r+0x22c>
 8010f62:	7821      	ldrb	r1, [r4, #0]
 8010f64:	2203      	movs	r2, #3
 8010f66:	4650      	mov	r0, sl
 8010f68:	f7ef f952 	bl	8000210 <memchr>
 8010f6c:	b138      	cbz	r0, 8010f7e <_vfiprintf_r+0x176>
 8010f6e:	9b04      	ldr	r3, [sp, #16]
 8010f70:	eba0 000a 	sub.w	r0, r0, sl
 8010f74:	2240      	movs	r2, #64	@ 0x40
 8010f76:	4082      	lsls	r2, r0
 8010f78:	4313      	orrs	r3, r2
 8010f7a:	3401      	adds	r4, #1
 8010f7c:	9304      	str	r3, [sp, #16]
 8010f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f82:	4829      	ldr	r0, [pc, #164]	@ (8011028 <_vfiprintf_r+0x220>)
 8010f84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010f88:	2206      	movs	r2, #6
 8010f8a:	f7ef f941 	bl	8000210 <memchr>
 8010f8e:	2800      	cmp	r0, #0
 8010f90:	d03f      	beq.n	8011012 <_vfiprintf_r+0x20a>
 8010f92:	4b26      	ldr	r3, [pc, #152]	@ (801102c <_vfiprintf_r+0x224>)
 8010f94:	bb1b      	cbnz	r3, 8010fde <_vfiprintf_r+0x1d6>
 8010f96:	9b03      	ldr	r3, [sp, #12]
 8010f98:	3307      	adds	r3, #7
 8010f9a:	f023 0307 	bic.w	r3, r3, #7
 8010f9e:	3308      	adds	r3, #8
 8010fa0:	9303      	str	r3, [sp, #12]
 8010fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fa4:	443b      	add	r3, r7
 8010fa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fa8:	e76a      	b.n	8010e80 <_vfiprintf_r+0x78>
 8010faa:	fb0c 3202 	mla	r2, ip, r2, r3
 8010fae:	460c      	mov	r4, r1
 8010fb0:	2001      	movs	r0, #1
 8010fb2:	e7a8      	b.n	8010f06 <_vfiprintf_r+0xfe>
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	3401      	adds	r4, #1
 8010fb8:	9305      	str	r3, [sp, #20]
 8010fba:	4619      	mov	r1, r3
 8010fbc:	f04f 0c0a 	mov.w	ip, #10
 8010fc0:	4620      	mov	r0, r4
 8010fc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010fc6:	3a30      	subs	r2, #48	@ 0x30
 8010fc8:	2a09      	cmp	r2, #9
 8010fca:	d903      	bls.n	8010fd4 <_vfiprintf_r+0x1cc>
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d0c6      	beq.n	8010f5e <_vfiprintf_r+0x156>
 8010fd0:	9105      	str	r1, [sp, #20]
 8010fd2:	e7c4      	b.n	8010f5e <_vfiprintf_r+0x156>
 8010fd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8010fd8:	4604      	mov	r4, r0
 8010fda:	2301      	movs	r3, #1
 8010fdc:	e7f0      	b.n	8010fc0 <_vfiprintf_r+0x1b8>
 8010fde:	ab03      	add	r3, sp, #12
 8010fe0:	9300      	str	r3, [sp, #0]
 8010fe2:	462a      	mov	r2, r5
 8010fe4:	4b12      	ldr	r3, [pc, #72]	@ (8011030 <_vfiprintf_r+0x228>)
 8010fe6:	a904      	add	r1, sp, #16
 8010fe8:	4630      	mov	r0, r6
 8010fea:	f3af 8000 	nop.w
 8010fee:	4607      	mov	r7, r0
 8010ff0:	1c78      	adds	r0, r7, #1
 8010ff2:	d1d6      	bne.n	8010fa2 <_vfiprintf_r+0x19a>
 8010ff4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010ff6:	07d9      	lsls	r1, r3, #31
 8010ff8:	d405      	bmi.n	8011006 <_vfiprintf_r+0x1fe>
 8010ffa:	89ab      	ldrh	r3, [r5, #12]
 8010ffc:	059a      	lsls	r2, r3, #22
 8010ffe:	d402      	bmi.n	8011006 <_vfiprintf_r+0x1fe>
 8011000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011002:	f7ff f9a7 	bl	8010354 <__retarget_lock_release_recursive>
 8011006:	89ab      	ldrh	r3, [r5, #12]
 8011008:	065b      	lsls	r3, r3, #25
 801100a:	f53f af1f 	bmi.w	8010e4c <_vfiprintf_r+0x44>
 801100e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011010:	e71e      	b.n	8010e50 <_vfiprintf_r+0x48>
 8011012:	ab03      	add	r3, sp, #12
 8011014:	9300      	str	r3, [sp, #0]
 8011016:	462a      	mov	r2, r5
 8011018:	4b05      	ldr	r3, [pc, #20]	@ (8011030 <_vfiprintf_r+0x228>)
 801101a:	a904      	add	r1, sp, #16
 801101c:	4630      	mov	r0, r6
 801101e:	f7ff fc8d 	bl	801093c <_printf_i>
 8011022:	e7e4      	b.n	8010fee <_vfiprintf_r+0x1e6>
 8011024:	0801f893 	.word	0x0801f893
 8011028:	0801f89d 	.word	0x0801f89d
 801102c:	00000000 	.word	0x00000000
 8011030:	08010de5 	.word	0x08010de5
 8011034:	0801f899 	.word	0x0801f899

08011038 <__swbuf_r>:
 8011038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801103a:	460e      	mov	r6, r1
 801103c:	4614      	mov	r4, r2
 801103e:	4605      	mov	r5, r0
 8011040:	b118      	cbz	r0, 801104a <__swbuf_r+0x12>
 8011042:	6a03      	ldr	r3, [r0, #32]
 8011044:	b90b      	cbnz	r3, 801104a <__swbuf_r+0x12>
 8011046:	f7ff f81b 	bl	8010080 <__sinit>
 801104a:	69a3      	ldr	r3, [r4, #24]
 801104c:	60a3      	str	r3, [r4, #8]
 801104e:	89a3      	ldrh	r3, [r4, #12]
 8011050:	071a      	lsls	r2, r3, #28
 8011052:	d501      	bpl.n	8011058 <__swbuf_r+0x20>
 8011054:	6923      	ldr	r3, [r4, #16]
 8011056:	b943      	cbnz	r3, 801106a <__swbuf_r+0x32>
 8011058:	4621      	mov	r1, r4
 801105a:	4628      	mov	r0, r5
 801105c:	f000 f82a 	bl	80110b4 <__swsetup_r>
 8011060:	b118      	cbz	r0, 801106a <__swbuf_r+0x32>
 8011062:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011066:	4638      	mov	r0, r7
 8011068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801106a:	6823      	ldr	r3, [r4, #0]
 801106c:	6922      	ldr	r2, [r4, #16]
 801106e:	1a98      	subs	r0, r3, r2
 8011070:	6963      	ldr	r3, [r4, #20]
 8011072:	b2f6      	uxtb	r6, r6
 8011074:	4283      	cmp	r3, r0
 8011076:	4637      	mov	r7, r6
 8011078:	dc05      	bgt.n	8011086 <__swbuf_r+0x4e>
 801107a:	4621      	mov	r1, r4
 801107c:	4628      	mov	r0, r5
 801107e:	f7ff fe01 	bl	8010c84 <_fflush_r>
 8011082:	2800      	cmp	r0, #0
 8011084:	d1ed      	bne.n	8011062 <__swbuf_r+0x2a>
 8011086:	68a3      	ldr	r3, [r4, #8]
 8011088:	3b01      	subs	r3, #1
 801108a:	60a3      	str	r3, [r4, #8]
 801108c:	6823      	ldr	r3, [r4, #0]
 801108e:	1c5a      	adds	r2, r3, #1
 8011090:	6022      	str	r2, [r4, #0]
 8011092:	701e      	strb	r6, [r3, #0]
 8011094:	6962      	ldr	r2, [r4, #20]
 8011096:	1c43      	adds	r3, r0, #1
 8011098:	429a      	cmp	r2, r3
 801109a:	d004      	beq.n	80110a6 <__swbuf_r+0x6e>
 801109c:	89a3      	ldrh	r3, [r4, #12]
 801109e:	07db      	lsls	r3, r3, #31
 80110a0:	d5e1      	bpl.n	8011066 <__swbuf_r+0x2e>
 80110a2:	2e0a      	cmp	r6, #10
 80110a4:	d1df      	bne.n	8011066 <__swbuf_r+0x2e>
 80110a6:	4621      	mov	r1, r4
 80110a8:	4628      	mov	r0, r5
 80110aa:	f7ff fdeb 	bl	8010c84 <_fflush_r>
 80110ae:	2800      	cmp	r0, #0
 80110b0:	d0d9      	beq.n	8011066 <__swbuf_r+0x2e>
 80110b2:	e7d6      	b.n	8011062 <__swbuf_r+0x2a>

080110b4 <__swsetup_r>:
 80110b4:	b538      	push	{r3, r4, r5, lr}
 80110b6:	4b29      	ldr	r3, [pc, #164]	@ (801115c <__swsetup_r+0xa8>)
 80110b8:	4605      	mov	r5, r0
 80110ba:	6818      	ldr	r0, [r3, #0]
 80110bc:	460c      	mov	r4, r1
 80110be:	b118      	cbz	r0, 80110c8 <__swsetup_r+0x14>
 80110c0:	6a03      	ldr	r3, [r0, #32]
 80110c2:	b90b      	cbnz	r3, 80110c8 <__swsetup_r+0x14>
 80110c4:	f7fe ffdc 	bl	8010080 <__sinit>
 80110c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110cc:	0719      	lsls	r1, r3, #28
 80110ce:	d422      	bmi.n	8011116 <__swsetup_r+0x62>
 80110d0:	06da      	lsls	r2, r3, #27
 80110d2:	d407      	bmi.n	80110e4 <__swsetup_r+0x30>
 80110d4:	2209      	movs	r2, #9
 80110d6:	602a      	str	r2, [r5, #0]
 80110d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80110dc:	81a3      	strh	r3, [r4, #12]
 80110de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80110e2:	e033      	b.n	801114c <__swsetup_r+0x98>
 80110e4:	0758      	lsls	r0, r3, #29
 80110e6:	d512      	bpl.n	801110e <__swsetup_r+0x5a>
 80110e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80110ea:	b141      	cbz	r1, 80110fe <__swsetup_r+0x4a>
 80110ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80110f0:	4299      	cmp	r1, r3
 80110f2:	d002      	beq.n	80110fa <__swsetup_r+0x46>
 80110f4:	4628      	mov	r0, r5
 80110f6:	f7ff f95b 	bl	80103b0 <_free_r>
 80110fa:	2300      	movs	r3, #0
 80110fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80110fe:	89a3      	ldrh	r3, [r4, #12]
 8011100:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011104:	81a3      	strh	r3, [r4, #12]
 8011106:	2300      	movs	r3, #0
 8011108:	6063      	str	r3, [r4, #4]
 801110a:	6923      	ldr	r3, [r4, #16]
 801110c:	6023      	str	r3, [r4, #0]
 801110e:	89a3      	ldrh	r3, [r4, #12]
 8011110:	f043 0308 	orr.w	r3, r3, #8
 8011114:	81a3      	strh	r3, [r4, #12]
 8011116:	6923      	ldr	r3, [r4, #16]
 8011118:	b94b      	cbnz	r3, 801112e <__swsetup_r+0x7a>
 801111a:	89a3      	ldrh	r3, [r4, #12]
 801111c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011124:	d003      	beq.n	801112e <__swsetup_r+0x7a>
 8011126:	4621      	mov	r1, r4
 8011128:	4628      	mov	r0, r5
 801112a:	f000 f88b 	bl	8011244 <__smakebuf_r>
 801112e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011132:	f013 0201 	ands.w	r2, r3, #1
 8011136:	d00a      	beq.n	801114e <__swsetup_r+0x9a>
 8011138:	2200      	movs	r2, #0
 801113a:	60a2      	str	r2, [r4, #8]
 801113c:	6962      	ldr	r2, [r4, #20]
 801113e:	4252      	negs	r2, r2
 8011140:	61a2      	str	r2, [r4, #24]
 8011142:	6922      	ldr	r2, [r4, #16]
 8011144:	b942      	cbnz	r2, 8011158 <__swsetup_r+0xa4>
 8011146:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801114a:	d1c5      	bne.n	80110d8 <__swsetup_r+0x24>
 801114c:	bd38      	pop	{r3, r4, r5, pc}
 801114e:	0799      	lsls	r1, r3, #30
 8011150:	bf58      	it	pl
 8011152:	6962      	ldrpl	r2, [r4, #20]
 8011154:	60a2      	str	r2, [r4, #8]
 8011156:	e7f4      	b.n	8011142 <__swsetup_r+0x8e>
 8011158:	2000      	movs	r0, #0
 801115a:	e7f7      	b.n	801114c <__swsetup_r+0x98>
 801115c:	20000064 	.word	0x20000064

08011160 <_raise_r>:
 8011160:	291f      	cmp	r1, #31
 8011162:	b538      	push	{r3, r4, r5, lr}
 8011164:	4605      	mov	r5, r0
 8011166:	460c      	mov	r4, r1
 8011168:	d904      	bls.n	8011174 <_raise_r+0x14>
 801116a:	2316      	movs	r3, #22
 801116c:	6003      	str	r3, [r0, #0]
 801116e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011172:	bd38      	pop	{r3, r4, r5, pc}
 8011174:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011176:	b112      	cbz	r2, 801117e <_raise_r+0x1e>
 8011178:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801117c:	b94b      	cbnz	r3, 8011192 <_raise_r+0x32>
 801117e:	4628      	mov	r0, r5
 8011180:	f000 f830 	bl	80111e4 <_getpid_r>
 8011184:	4622      	mov	r2, r4
 8011186:	4601      	mov	r1, r0
 8011188:	4628      	mov	r0, r5
 801118a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801118e:	f000 b817 	b.w	80111c0 <_kill_r>
 8011192:	2b01      	cmp	r3, #1
 8011194:	d00a      	beq.n	80111ac <_raise_r+0x4c>
 8011196:	1c59      	adds	r1, r3, #1
 8011198:	d103      	bne.n	80111a2 <_raise_r+0x42>
 801119a:	2316      	movs	r3, #22
 801119c:	6003      	str	r3, [r0, #0]
 801119e:	2001      	movs	r0, #1
 80111a0:	e7e7      	b.n	8011172 <_raise_r+0x12>
 80111a2:	2100      	movs	r1, #0
 80111a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80111a8:	4620      	mov	r0, r4
 80111aa:	4798      	blx	r3
 80111ac:	2000      	movs	r0, #0
 80111ae:	e7e0      	b.n	8011172 <_raise_r+0x12>

080111b0 <raise>:
 80111b0:	4b02      	ldr	r3, [pc, #8]	@ (80111bc <raise+0xc>)
 80111b2:	4601      	mov	r1, r0
 80111b4:	6818      	ldr	r0, [r3, #0]
 80111b6:	f7ff bfd3 	b.w	8011160 <_raise_r>
 80111ba:	bf00      	nop
 80111bc:	20000064 	.word	0x20000064

080111c0 <_kill_r>:
 80111c0:	b538      	push	{r3, r4, r5, lr}
 80111c2:	4d07      	ldr	r5, [pc, #28]	@ (80111e0 <_kill_r+0x20>)
 80111c4:	2300      	movs	r3, #0
 80111c6:	4604      	mov	r4, r0
 80111c8:	4608      	mov	r0, r1
 80111ca:	4611      	mov	r1, r2
 80111cc:	602b      	str	r3, [r5, #0]
 80111ce:	f7f4 f941 	bl	8005454 <_kill>
 80111d2:	1c43      	adds	r3, r0, #1
 80111d4:	d102      	bne.n	80111dc <_kill_r+0x1c>
 80111d6:	682b      	ldr	r3, [r5, #0]
 80111d8:	b103      	cbz	r3, 80111dc <_kill_r+0x1c>
 80111da:	6023      	str	r3, [r4, #0]
 80111dc:	bd38      	pop	{r3, r4, r5, pc}
 80111de:	bf00      	nop
 80111e0:	20004cc0 	.word	0x20004cc0

080111e4 <_getpid_r>:
 80111e4:	f7f4 b92e 	b.w	8005444 <_getpid>

080111e8 <_malloc_usable_size_r>:
 80111e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111ec:	1f18      	subs	r0, r3, #4
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	bfbc      	itt	lt
 80111f2:	580b      	ldrlt	r3, [r1, r0]
 80111f4:	18c0      	addlt	r0, r0, r3
 80111f6:	4770      	bx	lr

080111f8 <__swhatbuf_r>:
 80111f8:	b570      	push	{r4, r5, r6, lr}
 80111fa:	460c      	mov	r4, r1
 80111fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011200:	2900      	cmp	r1, #0
 8011202:	b096      	sub	sp, #88	@ 0x58
 8011204:	4615      	mov	r5, r2
 8011206:	461e      	mov	r6, r3
 8011208:	da0d      	bge.n	8011226 <__swhatbuf_r+0x2e>
 801120a:	89a3      	ldrh	r3, [r4, #12]
 801120c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011210:	f04f 0100 	mov.w	r1, #0
 8011214:	bf14      	ite	ne
 8011216:	2340      	movne	r3, #64	@ 0x40
 8011218:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801121c:	2000      	movs	r0, #0
 801121e:	6031      	str	r1, [r6, #0]
 8011220:	602b      	str	r3, [r5, #0]
 8011222:	b016      	add	sp, #88	@ 0x58
 8011224:	bd70      	pop	{r4, r5, r6, pc}
 8011226:	466a      	mov	r2, sp
 8011228:	f000 f848 	bl	80112bc <_fstat_r>
 801122c:	2800      	cmp	r0, #0
 801122e:	dbec      	blt.n	801120a <__swhatbuf_r+0x12>
 8011230:	9901      	ldr	r1, [sp, #4]
 8011232:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011236:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801123a:	4259      	negs	r1, r3
 801123c:	4159      	adcs	r1, r3
 801123e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011242:	e7eb      	b.n	801121c <__swhatbuf_r+0x24>

08011244 <__smakebuf_r>:
 8011244:	898b      	ldrh	r3, [r1, #12]
 8011246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011248:	079d      	lsls	r5, r3, #30
 801124a:	4606      	mov	r6, r0
 801124c:	460c      	mov	r4, r1
 801124e:	d507      	bpl.n	8011260 <__smakebuf_r+0x1c>
 8011250:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011254:	6023      	str	r3, [r4, #0]
 8011256:	6123      	str	r3, [r4, #16]
 8011258:	2301      	movs	r3, #1
 801125a:	6163      	str	r3, [r4, #20]
 801125c:	b003      	add	sp, #12
 801125e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011260:	ab01      	add	r3, sp, #4
 8011262:	466a      	mov	r2, sp
 8011264:	f7ff ffc8 	bl	80111f8 <__swhatbuf_r>
 8011268:	9f00      	ldr	r7, [sp, #0]
 801126a:	4605      	mov	r5, r0
 801126c:	4639      	mov	r1, r7
 801126e:	4630      	mov	r0, r6
 8011270:	f7ff f912 	bl	8010498 <_malloc_r>
 8011274:	b948      	cbnz	r0, 801128a <__smakebuf_r+0x46>
 8011276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801127a:	059a      	lsls	r2, r3, #22
 801127c:	d4ee      	bmi.n	801125c <__smakebuf_r+0x18>
 801127e:	f023 0303 	bic.w	r3, r3, #3
 8011282:	f043 0302 	orr.w	r3, r3, #2
 8011286:	81a3      	strh	r3, [r4, #12]
 8011288:	e7e2      	b.n	8011250 <__smakebuf_r+0xc>
 801128a:	89a3      	ldrh	r3, [r4, #12]
 801128c:	6020      	str	r0, [r4, #0]
 801128e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011292:	81a3      	strh	r3, [r4, #12]
 8011294:	9b01      	ldr	r3, [sp, #4]
 8011296:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801129a:	b15b      	cbz	r3, 80112b4 <__smakebuf_r+0x70>
 801129c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80112a0:	4630      	mov	r0, r6
 80112a2:	f000 f81d 	bl	80112e0 <_isatty_r>
 80112a6:	b128      	cbz	r0, 80112b4 <__smakebuf_r+0x70>
 80112a8:	89a3      	ldrh	r3, [r4, #12]
 80112aa:	f023 0303 	bic.w	r3, r3, #3
 80112ae:	f043 0301 	orr.w	r3, r3, #1
 80112b2:	81a3      	strh	r3, [r4, #12]
 80112b4:	89a3      	ldrh	r3, [r4, #12]
 80112b6:	431d      	orrs	r5, r3
 80112b8:	81a5      	strh	r5, [r4, #12]
 80112ba:	e7cf      	b.n	801125c <__smakebuf_r+0x18>

080112bc <_fstat_r>:
 80112bc:	b538      	push	{r3, r4, r5, lr}
 80112be:	4d07      	ldr	r5, [pc, #28]	@ (80112dc <_fstat_r+0x20>)
 80112c0:	2300      	movs	r3, #0
 80112c2:	4604      	mov	r4, r0
 80112c4:	4608      	mov	r0, r1
 80112c6:	4611      	mov	r1, r2
 80112c8:	602b      	str	r3, [r5, #0]
 80112ca:	f7f4 f923 	bl	8005514 <_fstat>
 80112ce:	1c43      	adds	r3, r0, #1
 80112d0:	d102      	bne.n	80112d8 <_fstat_r+0x1c>
 80112d2:	682b      	ldr	r3, [r5, #0]
 80112d4:	b103      	cbz	r3, 80112d8 <_fstat_r+0x1c>
 80112d6:	6023      	str	r3, [r4, #0]
 80112d8:	bd38      	pop	{r3, r4, r5, pc}
 80112da:	bf00      	nop
 80112dc:	20004cc0 	.word	0x20004cc0

080112e0 <_isatty_r>:
 80112e0:	b538      	push	{r3, r4, r5, lr}
 80112e2:	4d06      	ldr	r5, [pc, #24]	@ (80112fc <_isatty_r+0x1c>)
 80112e4:	2300      	movs	r3, #0
 80112e6:	4604      	mov	r4, r0
 80112e8:	4608      	mov	r0, r1
 80112ea:	602b      	str	r3, [r5, #0]
 80112ec:	f7f4 f922 	bl	8005534 <_isatty>
 80112f0:	1c43      	adds	r3, r0, #1
 80112f2:	d102      	bne.n	80112fa <_isatty_r+0x1a>
 80112f4:	682b      	ldr	r3, [r5, #0]
 80112f6:	b103      	cbz	r3, 80112fa <_isatty_r+0x1a>
 80112f8:	6023      	str	r3, [r4, #0]
 80112fa:	bd38      	pop	{r3, r4, r5, pc}
 80112fc:	20004cc0 	.word	0x20004cc0

08011300 <_init>:
 8011300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011302:	bf00      	nop
 8011304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011306:	bc08      	pop	{r3}
 8011308:	469e      	mov	lr, r3
 801130a:	4770      	bx	lr

0801130c <_fini>:
 801130c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801130e:	bf00      	nop
 8011310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011312:	bc08      	pop	{r3}
 8011314:	469e      	mov	lr, r3
 8011316:	4770      	bx	lr
