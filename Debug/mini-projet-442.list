
mini-projet-442.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015318  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e5cc  080154e8  080154e8  000164e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023ab4  08023ab4  000250f4  2**0
                  CONTENTS
  4 .ARM          00000008  08023ab4  08023ab4  00024ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023abc  08023abc  000250f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023abc  08023abc  00024abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023ac0  08023ac0  00024ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  08023ac4  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000527c  200000f4  08023bb8  000250f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005370  08023bb8  00025370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000250f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035701  00000000  00000000  00025124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008020  00000000  00000000  0005a825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ce8  00000000  00000000  00062848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000229a  00000000  00000000  00065530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032e14  00000000  00000000  000677ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00039f7e  00000000  00000000  0009a5de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119fb3  00000000  00000000  000d455c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ee50f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c5c0  00000000  00000000  001ee554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001fab14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000f4 	.word	0x200000f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080154d0 	.word	0x080154d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000f8 	.word	0x200000f8
 800020c:	080154d0 	.word	0x080154d0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000aa0:	f000 b96a 	b.w	8000d78 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14e      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	458c      	cmp	ip, r1
 8000acc:	4686      	mov	lr, r0
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	d962      	bls.n	8000b9a <__udivmoddi4+0xde>
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	4091      	lsls	r1, r2
 8000adc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f f68c 	uxth.w	r6, ip
 8000af2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	fb07 1114 	mls	r1, r7, r4, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb04 f106 	mul.w	r1, r4, r6
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b12:	f080 8112 	bcs.w	8000d3a <__udivmoddi4+0x27e>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 810f 	bls.w	8000d3a <__udivmoddi4+0x27e>
 8000b1c:	3c02      	subs	r4, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	fa1f f38e 	uxth.w	r3, lr
 8000b26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb00 f606 	mul.w	r6, r0, r6
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x94>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b42:	f080 80fc 	bcs.w	8000d3e <__udivmoddi4+0x282>
 8000b46:	429e      	cmp	r6, r3
 8000b48:	f240 80f9 	bls.w	8000d3e <__udivmoddi4+0x282>
 8000b4c:	4463      	add	r3, ip
 8000b4e:	3802      	subs	r0, #2
 8000b50:	1b9b      	subs	r3, r3, r6
 8000b52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b56:	2100      	movs	r1, #0
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa6>
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xba>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb4>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x150>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xcc>
 8000b82:	4290      	cmp	r0, r2
 8000b84:	f0c0 80f0 	bcc.w	8000d68 <__udivmoddi4+0x2ac>
 8000b88:	1a86      	subs	r6, r0, r2
 8000b8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0e6      	beq.n	8000b62 <__udivmoddi4+0xa6>
 8000b94:	e9c5 6300 	strd	r6, r3, [r5]
 8000b98:	e7e3      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	f040 8090 	bne.w	8000cc0 <__udivmoddi4+0x204>
 8000ba0:	eba1 040c 	sub.w	r4, r1, ip
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa1f f78c 	uxth.w	r7, ip
 8000bac:	2101      	movs	r1, #1
 8000bae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	fb07 f006 	mul.w	r0, r7, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x11c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x11a>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000bd6:	4626      	mov	r6, r4
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000be2:	fb08 4410 	mls	r4, r8, r0, r4
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	fb00 f707 	mul.w	r7, r0, r7
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x148>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x146>
 8000bfc:	429f      	cmp	r7, r3
 8000bfe:	f200 80b0 	bhi.w	8000d62 <__udivmoddi4+0x2a6>
 8000c02:	4620      	mov	r0, r4
 8000c04:	1bdb      	subs	r3, r3, r7
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x9c>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c20:	ea43 030c 	orr.w	r3, r3, ip
 8000c24:	40f4      	lsrs	r4, r6
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	0c38      	lsrs	r0, r7, #16
 8000c2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c30:	fbb4 fef0 	udiv	lr, r4, r0
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	fb00 441e 	mls	r4, r0, lr, r4
 8000c3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c40:	fb0e f90c 	mul.w	r9, lr, ip
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x1a6>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c52:	f080 8084 	bcs.w	8000d5e <__udivmoddi4+0x2a2>
 8000c56:	45a1      	cmp	r9, r4
 8000c58:	f240 8081 	bls.w	8000d5e <__udivmoddi4+0x2a2>
 8000c5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	eba4 0409 	sub.w	r4, r4, r9
 8000c66:	fa1f f983 	uxth.w	r9, r3
 8000c6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x1d2>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c84:	d267      	bcs.n	8000d56 <__udivmoddi4+0x29a>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d965      	bls.n	8000d56 <__udivmoddi4+0x29a>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	443c      	add	r4, r7
 8000c8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c92:	fba0 9302 	umull	r9, r3, r0, r2
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	46ce      	mov	lr, r9
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	d351      	bcc.n	8000d46 <__udivmoddi4+0x28a>
 8000ca2:	d04e      	beq.n	8000d42 <__udivmoddi4+0x286>
 8000ca4:	b155      	cbz	r5, 8000cbc <__udivmoddi4+0x200>
 8000ca6:	ebb8 030e 	subs.w	r3, r8, lr
 8000caa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e750      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	430c      	orrs	r4, r1
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce8:	0c23      	lsrs	r3, r4, #16
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f107 	mul.w	r1, r0, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x24c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cfe:	d22c      	bcs.n	8000d5a <__udivmoddi4+0x29e>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d92a      	bls.n	8000d5a <__udivmoddi4+0x29e>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d10:	fb08 3311 	mls	r3, r8, r1, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb01 f307 	mul.w	r3, r1, r7
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x276>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d28:	d213      	bcs.n	8000d52 <__udivmoddi4+0x296>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d911      	bls.n	8000d52 <__udivmoddi4+0x296>
 8000d2e:	3902      	subs	r1, #2
 8000d30:	4464      	add	r4, ip
 8000d32:	1ae4      	subs	r4, r4, r3
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	e739      	b.n	8000bae <__udivmoddi4+0xf2>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	e6f0      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e706      	b.n	8000b50 <__udivmoddi4+0x94>
 8000d42:	45c8      	cmp	r8, r9
 8000d44:	d2ae      	bcs.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d4e:	3801      	subs	r0, #1
 8000d50:	e7a8      	b.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d52:	4631      	mov	r1, r6
 8000d54:	e7ed      	b.n	8000d32 <__udivmoddi4+0x276>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e799      	b.n	8000c8e <__udivmoddi4+0x1d2>
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	e7d4      	b.n	8000d08 <__udivmoddi4+0x24c>
 8000d5e:	46d6      	mov	lr, sl
 8000d60:	e77f      	b.n	8000c62 <__udivmoddi4+0x1a6>
 8000d62:	4463      	add	r3, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	e74d      	b.n	8000c04 <__udivmoddi4+0x148>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e70f      	b.n	8000b90 <__udivmoddi4+0xd4>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	e730      	b.n	8000bd8 <__udivmoddi4+0x11c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d82:	463b      	mov	r3, r7
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d8e:	4b21      	ldr	r3, [pc, #132]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d90:	4a21      	ldr	r2, [pc, #132]	@ (8000e18 <MX_ADC1_Init+0x9c>)
 8000d92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d94:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d96:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000da2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dae:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000db6:	4b17      	ldr	r3, [pc, #92]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dbe:	4a17      	ldr	r2, [pc, #92]	@ (8000e1c <MX_ADC1_Init+0xa0>)
 8000dc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ddc:	480d      	ldr	r0, [pc, #52]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dde:	f006 feff 	bl	8007be0 <HAL_ADC_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000de8:	f002 fbb6 	bl	8003558 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000df0:	2301      	movs	r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df8:	463b      	mov	r3, r7
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dfe:	f007 f899 	bl	8007f34 <HAL_ADC_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e08:	f002 fba6 	bl	8003558 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000110 	.word	0x20000110
 8000e18:	40012000 	.word	0x40012000
 8000e1c:	0f000001 	.word	0x0f000001

08000e20 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e26:	463b      	mov	r3, r7
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000e32:	4b21      	ldr	r3, [pc, #132]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e34:	4a21      	ldr	r2, [pc, #132]	@ (8000ebc <MX_ADC3_Init+0x9c>)
 8000e36:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e38:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e3e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e46:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e52:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e5a:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e60:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e62:	4a17      	ldr	r2, [pc, #92]	@ (8000ec0 <MX_ADC3_Init+0xa0>)
 8000e64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e66:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e72:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e80:	480d      	ldr	r0, [pc, #52]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e82:	f006 fead 	bl	8007be0 <HAL_ADC_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000e8c:	f002 fb64 	bl	8003558 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e90:	2306      	movs	r3, #6
 8000e92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000ea2:	f007 f847 	bl	8007f34 <HAL_ADC_ConfigChannel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000eac:	f002 fb54 	bl	8003558 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000158 	.word	0x20000158
 8000ebc:	40012200 	.word	0x40012200
 8000ec0:	0f000001 	.word	0x0f000001

08000ec4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08c      	sub	sp, #48	@ 0x30
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8000f8c <HAL_ADC_MspInit+0xc8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d124      	bne.n	8000f30 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	4a29      	ldr	r2, [pc, #164]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef2:	4b27      	ldr	r3, [pc, #156]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b24      	ldr	r3, [pc, #144]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a23      	ldr	r2, [pc, #140]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b21      	ldr	r3, [pc, #132]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f16:	2301      	movs	r3, #1
 8000f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	481a      	ldr	r0, [pc, #104]	@ (8000f94 <HAL_ADC_MspInit+0xd0>)
 8000f2a:	f008 fab3 	bl	8009494 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000f2e:	e029      	b.n	8000f84 <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a18      	ldr	r2, [pc, #96]	@ (8000f98 <HAL_ADC_MspInit+0xd4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d124      	bne.n	8000f84 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000f3a:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3e:	4a14      	ldr	r2, [pc, #80]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f46:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f52:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a0e      	ldr	r2, [pc, #56]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f58:	f043 0320 	orr.w	r3, r3, #32
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0320 	and.w	r3, r3, #32
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8000f6a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f70:	2303      	movs	r3, #3
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <HAL_ADC_MspInit+0xd8>)
 8000f80:	f008 fa88 	bl	8009494 <HAL_GPIO_Init>
}
 8000f84:	bf00      	nop
 8000f86:	3730      	adds	r7, #48	@ 0x30
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40012000 	.word	0x40012000
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40012200 	.word	0x40012200
 8000f9c:	40021400 	.word	0x40021400

08000fa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fa6:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <MX_DMA_Init+0x68>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	4a17      	ldr	r2, [pc, #92]	@ (8001008 <MX_DMA_Init+0x68>)
 8000fac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb2:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <MX_DMA_Init+0x68>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2105      	movs	r1, #5
 8000fc2:	203b      	movs	r0, #59	@ 0x3b
 8000fc4:	f007 fabe 	bl	8008544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000fc8:	203b      	movs	r0, #59	@ 0x3b
 8000fca:	f007 fad7 	bl	800857c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2105      	movs	r1, #5
 8000fd2:	203c      	movs	r0, #60	@ 0x3c
 8000fd4:	f007 fab6 	bl	8008544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000fd8:	203c      	movs	r0, #60	@ 0x3c
 8000fda:	f007 facf 	bl	800857c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2105      	movs	r1, #5
 8000fe2:	2045      	movs	r0, #69	@ 0x45
 8000fe4:	f007 faae 	bl	8008544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000fe8:	2045      	movs	r0, #69	@ 0x45
 8000fea:	f007 fac7 	bl	800857c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2105      	movs	r1, #5
 8000ff2:	2046      	movs	r0, #70	@ 0x46
 8000ff4:	f007 faa6 	bl	8008544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000ff8:	2046      	movs	r0, #70	@ 0x46
 8000ffa:	f007 fabf 	bl	800857c <HAL_NVIC_EnableIRQ>

}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800

0800100c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001010:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001012:	4a16      	ldr	r2, [pc, #88]	@ (800106c <MX_DMA2D_Init+0x60>)
 8001014:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001016:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001018:	2200      	movs	r2, #0
 800101a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800101c:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001028:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 800102a:	2200      	movs	r2, #0
 800102c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001030:	2200      	movs	r2, #0
 8001032:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001034:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001036:	2200      	movs	r2, #0
 8001038:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800103a:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 800103c:	2200      	movs	r2, #0
 800103e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001040:	4809      	ldr	r0, [pc, #36]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001042:	f007 fe8b 	bl	8008d5c <HAL_DMA2D_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800104c:	f002 fa84 	bl	8003558 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001050:	2101      	movs	r1, #1
 8001052:	4805      	ldr	r0, [pc, #20]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001054:	f008 f8f0 	bl	8009238 <HAL_DMA2D_ConfigLayer>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800105e:	f002 fa7b 	bl	8003558 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200001a0 	.word	0x200001a0
 800106c:	4002b000 	.word	0x4002b000

08001070 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0d      	ldr	r2, [pc, #52]	@ (80010b4 <HAL_DMA2D_MspInit+0x44>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d113      	bne.n	80010aa <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001082:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <HAL_DMA2D_MspInit+0x48>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a0c      	ldr	r2, [pc, #48]	@ (80010b8 <HAL_DMA2D_MspInit+0x48>)
 8001088:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <HAL_DMA2D_MspInit+0x48>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2105      	movs	r1, #5
 800109e:	205a      	movs	r0, #90	@ 0x5a
 80010a0:	f007 fa50 	bl	8008544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80010a4:	205a      	movs	r0, #90	@ 0x5a
 80010a6:	f007 fa69 	bl	800857c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	4002b000 	.word	0x4002b000
 80010b8:	40023800 	.word	0x40023800

080010bc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
 80010d0:	615a      	str	r2, [r3, #20]
 80010d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80010d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001154 <MX_FMC_Init+0x98>)
 80010d6:	4a20      	ldr	r2, [pc, #128]	@ (8001158 <MX_FMC_Init+0x9c>)
 80010d8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80010da:	4b1e      	ldr	r3, [pc, #120]	@ (8001154 <MX_FMC_Init+0x98>)
 80010dc:	2200      	movs	r2, #0
 80010de:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80010e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001154 <MX_FMC_Init+0x98>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <MX_FMC_Init+0x98>)
 80010e8:	2204      	movs	r2, #4
 80010ea:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <MX_FMC_Init+0x98>)
 80010ee:	2210      	movs	r2, #16
 80010f0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80010f2:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <MX_FMC_Init+0x98>)
 80010f4:	2240      	movs	r2, #64	@ 0x40
 80010f6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80010f8:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <MX_FMC_Init+0x98>)
 80010fa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80010fe:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001100:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <MX_FMC_Init+0x98>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001106:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <MX_FMC_Init+0x98>)
 8001108:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800110c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800110e:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <MX_FMC_Init+0x98>)
 8001110:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001114:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001116:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_FMC_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800111c:	2302      	movs	r3, #2
 800111e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001120:	2307      	movs	r3, #7
 8001122:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001124:	2304      	movs	r3, #4
 8001126:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001128:	2307      	movs	r3, #7
 800112a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800112c:	2303      	movs	r3, #3
 800112e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001130:	2302      	movs	r3, #2
 8001132:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001134:	2302      	movs	r3, #2
 8001136:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	@ (8001154 <MX_FMC_Init+0x98>)
 800113e:	f00c fafd 	bl	800d73c <HAL_SDRAM_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001148:	f002 fa06 	bl	8003558 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800114c:	bf00      	nop
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200001e0 	.word	0x200001e0
 8001158:	a0000140 	.word	0xa0000140

0800115c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001170:	4b3a      	ldr	r3, [pc, #232]	@ (800125c <HAL_FMC_MspInit+0x100>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d16d      	bne.n	8001254 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001178:	4b38      	ldr	r3, [pc, #224]	@ (800125c <HAL_FMC_MspInit+0x100>)
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800117e:	4b38      	ldr	r3, [pc, #224]	@ (8001260 <HAL_FMC_MspInit+0x104>)
 8001180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001182:	4a37      	ldr	r2, [pc, #220]	@ (8001260 <HAL_FMC_MspInit+0x104>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6393      	str	r3, [r2, #56]	@ 0x38
 800118a:	4b35      	ldr	r3, [pc, #212]	@ (8001260 <HAL_FMC_MspInit+0x104>)
 800118c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001196:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800119a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011a8:	230c      	movs	r3, #12
 80011aa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	4619      	mov	r1, r3
 80011b0:	482c      	ldr	r0, [pc, #176]	@ (8001264 <HAL_FMC_MspInit+0x108>)
 80011b2:	f008 f96f 	bl	8009494 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80011b6:	f248 1333 	movw	r3, #33075	@ 0x8133
 80011ba:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011c8:	230c      	movs	r3, #12
 80011ca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	4619      	mov	r1, r3
 80011d0:	4825      	ldr	r0, [pc, #148]	@ (8001268 <HAL_FMC_MspInit+0x10c>)
 80011d2:	f008 f95f 	bl	8009494 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80011d6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80011da:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011e8:	230c      	movs	r3, #12
 80011ea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4619      	mov	r1, r3
 80011f0:	481e      	ldr	r0, [pc, #120]	@ (800126c <HAL_FMC_MspInit+0x110>)
 80011f2:	f008 f94f 	bl	8009494 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80011f6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80011fa:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001208:	230c      	movs	r3, #12
 800120a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	4619      	mov	r1, r3
 8001210:	4817      	ldr	r0, [pc, #92]	@ (8001270 <HAL_FMC_MspInit+0x114>)
 8001212:	f008 f93f 	bl	8009494 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001216:	2328      	movs	r3, #40	@ 0x28
 8001218:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001226:	230c      	movs	r3, #12
 8001228:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	4619      	mov	r1, r3
 800122e:	4811      	ldr	r0, [pc, #68]	@ (8001274 <HAL_FMC_MspInit+0x118>)
 8001230:	f008 f930 	bl	8009494 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001234:	2308      	movs	r3, #8
 8001236:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001244:	230c      	movs	r3, #12
 8001246:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	4619      	mov	r1, r3
 800124c:	480a      	ldr	r0, [pc, #40]	@ (8001278 <HAL_FMC_MspInit+0x11c>)
 800124e:	f008 f921 	bl	8009494 <HAL_GPIO_Init>
 8001252:	e000      	b.n	8001256 <HAL_FMC_MspInit+0xfa>
    return;
 8001254:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000214 	.word	0x20000214
 8001260:	40023800 	.word	0x40023800
 8001264:	40021000 	.word	0x40021000
 8001268:	40021800 	.word	0x40021800
 800126c:	40020c00 	.word	0x40020c00
 8001270:	40021400 	.word	0x40021400
 8001274:	40021c00 	.word	0x40021c00
 8001278:	40020800 	.word	0x40020800

0800127c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001284:	f7ff ff6a 	bl	800115c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4a07      	ldr	r2, [pc, #28]	@ (80012bc <vApplicationGetIdleTaskMemory+0x2c>)
 80012a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	4a06      	ldr	r2, [pc, #24]	@ (80012c0 <vApplicationGetIdleTaskMemory+0x30>)
 80012a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2280      	movs	r2, #128	@ 0x80
 80012ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012ae:	bf00      	nop
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	200003f8 	.word	0x200003f8
 80012c0:	20000498 	.word	0x20000498

080012c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012c4:	b5b0      	push	{r4, r5, r7, lr}
 80012c6:	b0a6      	sub	sp, #152	@ 0x98
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of displayMutex */
  osMutexDef(displayMutex);
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  displayMutexHandle = osMutexCreate(osMutex(displayMutex));
 80012d6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80012da:	4618      	mov	r0, r3
 80012dc:	f00f ff5e 	bl	801119c <osMutexCreate>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4a31      	ldr	r2, [pc, #196]	@ (80013a8 <MX_FREERTOS_Init+0xe4>)
 80012e4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80012e6:	4b31      	ldr	r3, [pc, #196]	@ (80013ac <MX_FREERTOS_Init+0xe8>)
 80012e8:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80012ec:	461d      	mov	r5, r3
 80012ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80012fa:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f00f feeb 	bl	80110dc <osThreadCreate>
 8001306:	4603      	mov	r3, r0
 8001308:	4a29      	ldr	r2, [pc, #164]	@ (80013b0 <MX_FREERTOS_Init+0xec>)
 800130a:	6013      	str	r3, [r2, #0]

  /* definition and creation of displayTask */
  osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 1024);
 800130c:	4b29      	ldr	r3, [pc, #164]	@ (80013b4 <MX_FREERTOS_Init+0xf0>)
 800130e:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001312:	461d      	mov	r5, r3
 8001314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001318:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800131c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 8001320:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f00f fed8 	bl	80110dc <osThreadCreate>
 800132c:	4603      	mov	r3, r0
 800132e:	4a22      	ldr	r2, [pc, #136]	@ (80013b8 <MX_FREERTOS_Init+0xf4>)
 8001330:	6013      	str	r3, [r2, #0]

  /* definition and creation of joystickTask */
  osThreadDef(joystickTask, StartJoystickTask, osPriorityAboveNormal, 0, 128);
 8001332:	4b22      	ldr	r3, [pc, #136]	@ (80013bc <MX_FREERTOS_Init+0xf8>)
 8001334:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001338:	461d      	mov	r5, r3
 800133a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800133c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800133e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001342:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  joystickTaskHandle = osThreadCreate(osThread(joystickTask), NULL);
 8001346:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f00f fec5 	bl	80110dc <osThreadCreate>
 8001352:	4603      	mov	r3, r0
 8001354:	4a1a      	ldr	r2, [pc, #104]	@ (80013c0 <MX_FREERTOS_Init+0xfc>)
 8001356:	6013      	str	r3, [r2, #0]

  /* definition and creation of manageBodyParts */
  osThreadDef(manageBodyParts, StartManageBodyParts, osPriorityAboveNormal, 0, 128);
 8001358:	4b1a      	ldr	r3, [pc, #104]	@ (80013c4 <MX_FREERTOS_Init+0x100>)
 800135a:	f107 0420 	add.w	r4, r7, #32
 800135e:	461d      	mov	r5, r3
 8001360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001364:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001368:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  manageBodyPartsHandle = osThreadCreate(osThread(manageBodyParts), NULL);
 800136c:	f107 0320 	add.w	r3, r7, #32
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f00f feb2 	bl	80110dc <osThreadCreate>
 8001378:	4603      	mov	r3, r0
 800137a:	4a13      	ldr	r2, [pc, #76]	@ (80013c8 <MX_FREERTOS_Init+0x104>)
 800137c:	6013      	str	r3, [r2, #0]

  /* definition and creation of tsHandlerTask */
  osThreadDef(tsHandlerTask, StartTsHandlerTask, osPriorityHigh, 0, 512);
 800137e:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <MX_FREERTOS_Init+0x108>)
 8001380:	1d3c      	adds	r4, r7, #4
 8001382:	461d      	mov	r5, r3
 8001384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001388:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800138c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tsHandlerTaskHandle = osThreadCreate(osThread(tsHandlerTask), NULL);
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f00f fea1 	bl	80110dc <osThreadCreate>
 800139a:	4603      	mov	r3, r0
 800139c:	4a0c      	ldr	r2, [pc, #48]	@ (80013d0 <MX_FREERTOS_Init+0x10c>)
 800139e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80013a0:	bf00      	nop
 80013a2:	3798      	adds	r7, #152	@ 0x98
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bdb0      	pop	{r4, r5, r7, pc}
 80013a8:	200003f4 	.word	0x200003f4
 80013ac:	080154f4 	.word	0x080154f4
 80013b0:	200003e0 	.word	0x200003e0
 80013b4:	0801551c 	.word	0x0801551c
 80013b8:	200003e4 	.word	0x200003e4
 80013bc:	08015548 	.word	0x08015548
 80013c0:	200003e8 	.word	0x200003e8
 80013c4:	08015574 	.word	0x08015574
 80013c8:	200003ec 	.word	0x200003ec
 80013cc:	080155a0 	.word	0x080155a0
 80013d0:	200003f0 	.word	0x200003f0

080013d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80013dc:	2001      	movs	r0, #1
 80013de:	f00f fec9 	bl	8011174 <osDelay>
 80013e2:	e7fb      	b.n	80013dc <StartDefaultTask+0x8>

080013e4 <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void const * argument)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0d0      	sub	sp, #320	@ 0x140
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013ee:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80013f2:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDisplayTask */
  /* Infinite loop */
  for(;;)
  {
    if ((gameOver || gamePaused || !gameStarted) && !lastMove) {
 80013f4:	4bc0      	ldr	r3, [pc, #768]	@ (80016f8 <StartDisplayTask+0x314>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d107      	bne.n	800140c <StartDisplayTask+0x28>
 80013fc:	4bbf      	ldr	r3, [pc, #764]	@ (80016fc <StartDisplayTask+0x318>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d103      	bne.n	800140c <StartDisplayTask+0x28>
 8001404:	4bbe      	ldr	r3, [pc, #760]	@ (8001700 <StartDisplayTask+0x31c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d114      	bne.n	8001436 <StartDisplayTask+0x52>
 800140c:	4bbd      	ldr	r3, [pc, #756]	@ (8001704 <StartDisplayTask+0x320>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d110      	bne.n	8001436 <StartDisplayTask+0x52>
      xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8001414:	4bbc      	ldr	r3, [pc, #752]	@ (8001708 <StartDisplayTask+0x324>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800141c:	4618      	mov	r0, r3
 800141e:	f010 fdff 	bl	8012020 <xQueueSemaphoreTake>
      displayGameStatus();
 8001422:	f000 ff7b 	bl	800231c <displayGameStatus>
      xSemaphoreGive(displayMutexHandle);
 8001426:	4bb8      	ldr	r3, [pc, #736]	@ (8001708 <StartDisplayTask+0x324>)
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	2300      	movs	r3, #0
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	f010 fac8 	bl	80119c4 <xQueueGenericSend>
 8001434:	e223      	b.n	800187e <StartDisplayTask+0x49a>
    }
    else {
      // On convertit la direction en texte
      char directionText[100];
      switch (direction) {
 8001436:	4bb5      	ldr	r3, [pc, #724]	@ (800170c <StartDisplayTask+0x328>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d826      	bhi.n	800148c <StartDisplayTask+0xa8>
 800143e:	a201      	add	r2, pc, #4	@ (adr r2, 8001444 <StartDisplayTask+0x60>)
 8001440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001444:	08001455 	.word	0x08001455
 8001448:	08001463 	.word	0x08001463
 800144c:	08001471 	.word	0x08001471
 8001450:	0800147f 	.word	0x0800147f
        case Up:
          sprintf(directionText, (char *)"Direction: Up   ");
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	49ad      	ldr	r1, [pc, #692]	@ (8001710 <StartDisplayTask+0x32c>)
 800145a:	4618      	mov	r0, r3
 800145c:	f012 ff2e 	bl	80142bc <siprintf>
          break;
 8001460:	e014      	b.n	800148c <StartDisplayTask+0xa8>
        case Down:
          sprintf(directionText, (char *)"Direction: Down ");
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	49ab      	ldr	r1, [pc, #684]	@ (8001714 <StartDisplayTask+0x330>)
 8001468:	4618      	mov	r0, r3
 800146a:	f012 ff27 	bl	80142bc <siprintf>
          break;
 800146e:	e00d      	b.n	800148c <StartDisplayTask+0xa8>
        case Left:
          sprintf(directionText, (char *)"Direction: Left ");
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	49a8      	ldr	r1, [pc, #672]	@ (8001718 <StartDisplayTask+0x334>)
 8001476:	4618      	mov	r0, r3
 8001478:	f012 ff20 	bl	80142bc <siprintf>
          break;
 800147c:	e006      	b.n	800148c <StartDisplayTask+0xa8>
        case Right:
          sprintf(directionText, (char *)"Direction: Right");
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	49a6      	ldr	r1, [pc, #664]	@ (800171c <StartDisplayTask+0x338>)
 8001484:	4618      	mov	r0, r3
 8001486:	f012 ff19 	bl	80142bc <siprintf>
          break;
 800148a:	bf00      	nop
      }
      // On convertit le score en texte
      char scoreText[100];
      sprintf(scoreText, (char *)"Score: %d", snakeSize);
 800148c:	4ba4      	ldr	r3, [pc, #656]	@ (8001720 <StartDisplayTask+0x33c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001496:	49a3      	ldr	r1, [pc, #652]	@ (8001724 <StartDisplayTask+0x340>)
 8001498:	4618      	mov	r0, r3
 800149a:	f012 ff0f 	bl	80142bc <siprintf>

      // On convertit la vitesse en texte
      char speedText[100];
      sprintf(speedText, (char *)"Speed: %d Hz", speed);
 800149e:	4ba2      	ldr	r3, [pc, #648]	@ (8001728 <StartDisplayTask+0x344>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014a8:	49a0      	ldr	r1, [pc, #640]	@ (800172c <StartDisplayTask+0x348>)
 80014aa:	4618      	mov	r0, r3
 80014ac:	f012 ff06 	bl	80142bc <siprintf>

      xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 80014b0:	4b95      	ldr	r3, [pc, #596]	@ (8001708 <StartDisplayTask+0x324>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014b8:	4618      	mov	r0, r3
 80014ba:	f010 fdb1 	bl	8012020 <xQueueSemaphoreTake>
      BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 80014be:	489c      	ldr	r0, [pc, #624]	@ (8001730 <StartDisplayTask+0x34c>)
 80014c0:	f003 fa38 	bl	8004934 <BSP_LCD_SetTextColor>
      BSP_LCD_DrawHLine(0, 8*32, BSP_LCD_GetXSize());
 80014c4:	f003 f99e 	bl	8004804 <BSP_LCD_GetXSize>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014d2:	2000      	movs	r0, #0
 80014d4:	f003 fbae 	bl	8004c34 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(0, 8*32 + 1, BSP_LCD_GetXSize());
 80014d8:	f003 f994 	bl	8004804 <BSP_LCD_GetXSize>
 80014dc:	4603      	mov	r3, r0
 80014de:	b29b      	uxth	r3, r3
 80014e0:	461a      	mov	r2, r3
 80014e2:	f240 1101 	movw	r1, #257	@ 0x101
 80014e6:	2000      	movs	r0, #0
 80014e8:	f003 fba4 	bl	8004c34 <BSP_LCD_DrawHLine>

      // On affiche la direction, le score et la vitesse
      BSP_LCD_DisplayStringAt(0, 8*32 + 2, (uint8_t *)directionText, LEFT_MODE);
 80014ec:	f107 020c 	add.w	r2, r7, #12
 80014f0:	2303      	movs	r3, #3
 80014f2:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80014f6:	2000      	movs	r0, #0
 80014f8:	f003 fad4 	bl	8004aa4 <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(200, 8*32 + 2, (uint8_t *)scoreText, LEFT_MODE);
 80014fc:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8001500:	2303      	movs	r3, #3
 8001502:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001506:	20c8      	movs	r0, #200	@ 0xc8
 8001508:	f003 facc 	bl	8004aa4 <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(350, 8*32 + 2, (uint8_t *)speedText, LEFT_MODE);
 800150c:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8001510:	2303      	movs	r3, #3
 8001512:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001516:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 800151a:	f003 fac3 	bl	8004aa4 <BSP_LCD_DisplayStringAt>

      // On affiche la tête du snake
      if (!lastMove)
 800151e:	4b79      	ldr	r3, [pc, #484]	@ (8001704 <StartDisplayTask+0x320>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d13e      	bne.n	80015a4 <StartDisplayTask+0x1c0>
        switch (headPart) {
 8001526:	4b83      	ldr	r3, [pc, #524]	@ (8001734 <StartDisplayTask+0x350>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b03      	cmp	r3, #3
 800152c:	d83a      	bhi.n	80015a4 <StartDisplayTask+0x1c0>
 800152e:	a201      	add	r2, pc, #4	@ (adr r2, 8001534 <StartDisplayTask+0x150>)
 8001530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001534:	0800155d 	.word	0x0800155d
 8001538:	08001545 	.word	0x08001545
 800153c:	08001575 	.word	0x08001575
 8001540:	0800158d 	.word	0x0800158d
          case HeadBottom:
            BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_bottom_81CD4B_bmp);
 8001544:	4b7c      	ldr	r3, [pc, #496]	@ (8001738 <StartDisplayTask+0x354>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	015b      	lsls	r3, r3, #5
 800154a:	4618      	mov	r0, r3
 800154c:	4b7a      	ldr	r3, [pc, #488]	@ (8001738 <StartDisplayTask+0x354>)
 800154e:	785b      	ldrb	r3, [r3, #1]
 8001550:	015b      	lsls	r3, r3, #5
 8001552:	4a7a      	ldr	r2, [pc, #488]	@ (800173c <StartDisplayTask+0x358>)
 8001554:	4619      	mov	r1, r3
 8001556:	f003 fc13 	bl	8004d80 <BSP_LCD_DrawBitmap>
            break;
 800155a:	e023      	b.n	80015a4 <StartDisplayTask+0x1c0>
          case HeadTop:
            BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_top_81CD4B_bmp);
 800155c:	4b76      	ldr	r3, [pc, #472]	@ (8001738 <StartDisplayTask+0x354>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	015b      	lsls	r3, r3, #5
 8001562:	4618      	mov	r0, r3
 8001564:	4b74      	ldr	r3, [pc, #464]	@ (8001738 <StartDisplayTask+0x354>)
 8001566:	785b      	ldrb	r3, [r3, #1]
 8001568:	015b      	lsls	r3, r3, #5
 800156a:	4a75      	ldr	r2, [pc, #468]	@ (8001740 <StartDisplayTask+0x35c>)
 800156c:	4619      	mov	r1, r3
 800156e:	f003 fc07 	bl	8004d80 <BSP_LCD_DrawBitmap>
            break;
 8001572:	e017      	b.n	80015a4 <StartDisplayTask+0x1c0>
          case HeadLeft:
            BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_left_81CD4B_bmp);
 8001574:	4b70      	ldr	r3, [pc, #448]	@ (8001738 <StartDisplayTask+0x354>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	015b      	lsls	r3, r3, #5
 800157a:	4618      	mov	r0, r3
 800157c:	4b6e      	ldr	r3, [pc, #440]	@ (8001738 <StartDisplayTask+0x354>)
 800157e:	785b      	ldrb	r3, [r3, #1]
 8001580:	015b      	lsls	r3, r3, #5
 8001582:	4a70      	ldr	r2, [pc, #448]	@ (8001744 <StartDisplayTask+0x360>)
 8001584:	4619      	mov	r1, r3
 8001586:	f003 fbfb 	bl	8004d80 <BSP_LCD_DrawBitmap>
            break;
 800158a:	e00b      	b.n	80015a4 <StartDisplayTask+0x1c0>
          case HeadRight:
            BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_right_81CD4B_bmp);
 800158c:	4b6a      	ldr	r3, [pc, #424]	@ (8001738 <StartDisplayTask+0x354>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	015b      	lsls	r3, r3, #5
 8001592:	4618      	mov	r0, r3
 8001594:	4b68      	ldr	r3, [pc, #416]	@ (8001738 <StartDisplayTask+0x354>)
 8001596:	785b      	ldrb	r3, [r3, #1]
 8001598:	015b      	lsls	r3, r3, #5
 800159a:	4a6b      	ldr	r2, [pc, #428]	@ (8001748 <StartDisplayTask+0x364>)
 800159c:	4619      	mov	r1, r3
 800159e:	f003 fbef 	bl	8004d80 <BSP_LCD_DrawBitmap>
            break;
 80015a2:	bf00      	nop
        }

      // On affiche le corps du snake
      for (int i = 0; i < snakeSize; i++) {
 80015a4:	2300      	movs	r3, #0
 80015a6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80015aa:	e08e      	b.n	80016ca <StartDisplayTask+0x2e6>
        switch (snakeBodyParts[i]) {
 80015ac:	4a67      	ldr	r2, [pc, #412]	@ (800174c <StartDisplayTask+0x368>)
 80015ae:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80015b2:	4413      	add	r3, r2
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b05      	cmp	r3, #5
 80015b8:	f200 8082 	bhi.w	80016c0 <StartDisplayTask+0x2dc>
 80015bc:	a201      	add	r2, pc, #4	@ (adr r2, 80015c4 <StartDisplayTask+0x1e0>)
 80015be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c2:	bf00      	nop
 80015c4:	080015dd 	.word	0x080015dd
 80015c8:	08001603 	.word	0x08001603
 80015cc:	08001629 	.word	0x08001629
 80015d0:	0800164f 	.word	0x0800164f
 80015d4:	08001675 	.word	0x08001675
 80015d8:	0800169b 	.word	0x0800169b
          case BottomLeft:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_left_81CD4B_bmp);
 80015dc:	4a5c      	ldr	r2, [pc, #368]	@ (8001750 <StartDisplayTask+0x36c>)
 80015de:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80015e2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	4618      	mov	r0, r3
 80015ea:	4a59      	ldr	r2, [pc, #356]	@ (8001750 <StartDisplayTask+0x36c>)
 80015ec:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4413      	add	r3, r2
 80015f4:	785b      	ldrb	r3, [r3, #1]
 80015f6:	015b      	lsls	r3, r3, #5
 80015f8:	4a56      	ldr	r2, [pc, #344]	@ (8001754 <StartDisplayTask+0x370>)
 80015fa:	4619      	mov	r1, r3
 80015fc:	f003 fbc0 	bl	8004d80 <BSP_LCD_DrawBitmap>
            break;
 8001600:	e05e      	b.n	80016c0 <StartDisplayTask+0x2dc>
          case BottomRight:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_right_81CD4B_bmp);
 8001602:	4a53      	ldr	r2, [pc, #332]	@ (8001750 <StartDisplayTask+0x36c>)
 8001604:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001608:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800160c:	015b      	lsls	r3, r3, #5
 800160e:	4618      	mov	r0, r3
 8001610:	4a4f      	ldr	r2, [pc, #316]	@ (8001750 <StartDisplayTask+0x36c>)
 8001612:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4413      	add	r3, r2
 800161a:	785b      	ldrb	r3, [r3, #1]
 800161c:	015b      	lsls	r3, r3, #5
 800161e:	4a4e      	ldr	r2, [pc, #312]	@ (8001758 <StartDisplayTask+0x374>)
 8001620:	4619      	mov	r1, r3
 8001622:	f003 fbad 	bl	8004d80 <BSP_LCD_DrawBitmap>
            break;
 8001626:	e04b      	b.n	80016c0 <StartDisplayTask+0x2dc>
          case BottomTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_top_81CD4B_bmp);
 8001628:	4a49      	ldr	r2, [pc, #292]	@ (8001750 <StartDisplayTask+0x36c>)
 800162a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800162e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001632:	015b      	lsls	r3, r3, #5
 8001634:	4618      	mov	r0, r3
 8001636:	4a46      	ldr	r2, [pc, #280]	@ (8001750 <StartDisplayTask+0x36c>)
 8001638:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	785b      	ldrb	r3, [r3, #1]
 8001642:	015b      	lsls	r3, r3, #5
 8001644:	4a45      	ldr	r2, [pc, #276]	@ (800175c <StartDisplayTask+0x378>)
 8001646:	4619      	mov	r1, r3
 8001648:	f003 fb9a 	bl	8004d80 <BSP_LCD_DrawBitmap>
            break;
 800164c:	e038      	b.n	80016c0 <StartDisplayTask+0x2dc>
          case LeftRight:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_left_right_81CD4B_bmp);
 800164e:	4a40      	ldr	r2, [pc, #256]	@ (8001750 <StartDisplayTask+0x36c>)
 8001650:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001654:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001658:	015b      	lsls	r3, r3, #5
 800165a:	4618      	mov	r0, r3
 800165c:	4a3c      	ldr	r2, [pc, #240]	@ (8001750 <StartDisplayTask+0x36c>)
 800165e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	785b      	ldrb	r3, [r3, #1]
 8001668:	015b      	lsls	r3, r3, #5
 800166a:	4a3d      	ldr	r2, [pc, #244]	@ (8001760 <StartDisplayTask+0x37c>)
 800166c:	4619      	mov	r1, r3
 800166e:	f003 fb87 	bl	8004d80 <BSP_LCD_DrawBitmap>
            break;
 8001672:	e025      	b.n	80016c0 <StartDisplayTask+0x2dc>
          case LeftTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_left_top_81CD4B_bmp);
 8001674:	4a36      	ldr	r2, [pc, #216]	@ (8001750 <StartDisplayTask+0x36c>)
 8001676:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800167a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800167e:	015b      	lsls	r3, r3, #5
 8001680:	4618      	mov	r0, r3
 8001682:	4a33      	ldr	r2, [pc, #204]	@ (8001750 <StartDisplayTask+0x36c>)
 8001684:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	785b      	ldrb	r3, [r3, #1]
 800168e:	015b      	lsls	r3, r3, #5
 8001690:	4a34      	ldr	r2, [pc, #208]	@ (8001764 <StartDisplayTask+0x380>)
 8001692:	4619      	mov	r1, r3
 8001694:	f003 fb74 	bl	8004d80 <BSP_LCD_DrawBitmap>
            break;
 8001698:	e012      	b.n	80016c0 <StartDisplayTask+0x2dc>
          case RightTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_right_top_81CD4B_bmp);
 800169a:	4a2d      	ldr	r2, [pc, #180]	@ (8001750 <StartDisplayTask+0x36c>)
 800169c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016a0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80016a4:	015b      	lsls	r3, r3, #5
 80016a6:	4618      	mov	r0, r3
 80016a8:	4a29      	ldr	r2, [pc, #164]	@ (8001750 <StartDisplayTask+0x36c>)
 80016aa:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4413      	add	r3, r2
 80016b2:	785b      	ldrb	r3, [r3, #1]
 80016b4:	015b      	lsls	r3, r3, #5
 80016b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001768 <StartDisplayTask+0x384>)
 80016b8:	4619      	mov	r1, r3
 80016ba:	f003 fb61 	bl	8004d80 <BSP_LCD_DrawBitmap>
            break;
 80016be:	bf00      	nop
      for (int i = 0; i < snakeSize; i++) {
 80016c0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016c4:	3301      	adds	r3, #1
 80016c6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <StartDisplayTask+0x33c>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016d4:	4293      	cmp	r3, r2
 80016d6:	f6ff af69 	blt.w	80015ac <StartDisplayTask+0x1c8>
        }
      }

      // On affiche la queue du snake
      switch (tailPart) {
 80016da:	4b24      	ldr	r3, [pc, #144]	@ (800176c <StartDisplayTask+0x388>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d876      	bhi.n	80017d0 <StartDisplayTask+0x3ec>
 80016e2:	a201      	add	r2, pc, #4	@ (adr r2, 80016e8 <StartDisplayTask+0x304>)
 80016e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e8:	08001771 	.word	0x08001771
 80016ec:	08001789 	.word	0x08001789
 80016f0:	080017a1 	.word	0x080017a1
 80016f4:	080017b9 	.word	0x080017b9
 80016f8:	200002dc 	.word	0x200002dc
 80016fc:	200002d8 	.word	0x200002d8
 8001700:	200002d4 	.word	0x200002d4
 8001704:	200002e0 	.word	0x200002e0
 8001708:	200003f4 	.word	0x200003f4
 800170c:	20000250 	.word	0x20000250
 8001710:	080155bc 	.word	0x080155bc
 8001714:	080155d0 	.word	0x080155d0
 8001718:	080155e4 	.word	0x080155e4
 800171c:	080155f8 	.word	0x080155f8
 8001720:	200002cc 	.word	0x200002cc
 8001724:	0801560c 	.word	0x0801560c
 8001728:	20000000 	.word	0x20000000
 800172c:	08015618 	.word	0x08015618
 8001730:	ffa52a2a 	.word	0xffa52a2a
 8001734:	20000251 	.word	0x20000251
 8001738:	20000004 	.word	0x20000004
 800173c:	08018904 	.word	0x08018904
 8001740:	08019590 	.word	0x08019590
 8001744:	0801a21c 	.word	0x0801a21c
 8001748:	0801aea8 	.word	0x0801aea8
 800174c:	20000254 	.word	0x20000254
 8001750:	200002e4 	.word	0x200002e4
 8001754:	08016360 	.word	0x08016360
 8001758:	08016fec 	.word	0x08016fec
 800175c:	08017c78 	.word	0x08017c78
 8001760:	0801bb34 	.word	0x0801bb34
 8001764:	0801c7c0 	.word	0x0801c7c0
 8001768:	0801d44c 	.word	0x0801d44c
 800176c:	20000001 	.word	0x20000001
        case TailBottom:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_bottom_81CD4B_bmp);
 8001770:	4b45      	ldr	r3, [pc, #276]	@ (8001888 <StartDisplayTask+0x4a4>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	015b      	lsls	r3, r3, #5
 8001776:	4618      	mov	r0, r3
 8001778:	4b43      	ldr	r3, [pc, #268]	@ (8001888 <StartDisplayTask+0x4a4>)
 800177a:	785b      	ldrb	r3, [r3, #1]
 800177c:	015b      	lsls	r3, r3, #5
 800177e:	4a43      	ldr	r2, [pc, #268]	@ (800188c <StartDisplayTask+0x4a8>)
 8001780:	4619      	mov	r1, r3
 8001782:	f003 fafd 	bl	8004d80 <BSP_LCD_DrawBitmap>
          break;
 8001786:	e023      	b.n	80017d0 <StartDisplayTask+0x3ec>
        case TailTop:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_top_81CD4B_bmp);
 8001788:	4b3f      	ldr	r3, [pc, #252]	@ (8001888 <StartDisplayTask+0x4a4>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	015b      	lsls	r3, r3, #5
 800178e:	4618      	mov	r0, r3
 8001790:	4b3d      	ldr	r3, [pc, #244]	@ (8001888 <StartDisplayTask+0x4a4>)
 8001792:	785b      	ldrb	r3, [r3, #1]
 8001794:	015b      	lsls	r3, r3, #5
 8001796:	4a3e      	ldr	r2, [pc, #248]	@ (8001890 <StartDisplayTask+0x4ac>)
 8001798:	4619      	mov	r1, r3
 800179a:	f003 faf1 	bl	8004d80 <BSP_LCD_DrawBitmap>
          break;
 800179e:	e017      	b.n	80017d0 <StartDisplayTask+0x3ec>
        case TailLeft:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_left_81CD4B_bmp);
 80017a0:	4b39      	ldr	r3, [pc, #228]	@ (8001888 <StartDisplayTask+0x4a4>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	015b      	lsls	r3, r3, #5
 80017a6:	4618      	mov	r0, r3
 80017a8:	4b37      	ldr	r3, [pc, #220]	@ (8001888 <StartDisplayTask+0x4a4>)
 80017aa:	785b      	ldrb	r3, [r3, #1]
 80017ac:	015b      	lsls	r3, r3, #5
 80017ae:	4a39      	ldr	r2, [pc, #228]	@ (8001894 <StartDisplayTask+0x4b0>)
 80017b0:	4619      	mov	r1, r3
 80017b2:	f003 fae5 	bl	8004d80 <BSP_LCD_DrawBitmap>
          break;
 80017b6:	e00b      	b.n	80017d0 <StartDisplayTask+0x3ec>
        case TailRight:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_right_81CD4B_bmp);
 80017b8:	4b33      	ldr	r3, [pc, #204]	@ (8001888 <StartDisplayTask+0x4a4>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	015b      	lsls	r3, r3, #5
 80017be:	4618      	mov	r0, r3
 80017c0:	4b31      	ldr	r3, [pc, #196]	@ (8001888 <StartDisplayTask+0x4a4>)
 80017c2:	785b      	ldrb	r3, [r3, #1]
 80017c4:	015b      	lsls	r3, r3, #5
 80017c6:	4a34      	ldr	r2, [pc, #208]	@ (8001898 <StartDisplayTask+0x4b4>)
 80017c8:	4619      	mov	r1, r3
 80017ca:	f003 fad9 	bl	8004d80 <BSP_LCD_DrawBitmap>
          break;
 80017ce:	bf00      	nop
      }

      // On efface l'ancienne queue avec un carré vert
      if (!appleEaten && (snakeHeadPosition[0] != oldTailPosition[0] || snakeHeadPosition[1] != oldTailPosition[1])) {
 80017d0:	4b32      	ldr	r3, [pc, #200]	@ (800189c <StartDisplayTask+0x4b8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d11a      	bne.n	800180e <StartDisplayTask+0x42a>
 80017d8:	4b31      	ldr	r3, [pc, #196]	@ (80018a0 <StartDisplayTask+0x4bc>)
 80017da:	781a      	ldrb	r2, [r3, #0]
 80017dc:	4b31      	ldr	r3, [pc, #196]	@ (80018a4 <StartDisplayTask+0x4c0>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d105      	bne.n	80017f0 <StartDisplayTask+0x40c>
 80017e4:	4b2e      	ldr	r3, [pc, #184]	@ (80018a0 <StartDisplayTask+0x4bc>)
 80017e6:	785a      	ldrb	r2, [r3, #1]
 80017e8:	4b2e      	ldr	r3, [pc, #184]	@ (80018a4 <StartDisplayTask+0x4c0>)
 80017ea:	785b      	ldrb	r3, [r3, #1]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d00e      	beq.n	800180e <StartDisplayTask+0x42a>
        // On efface l'ancienne queue si:
        //    - le snake a avancé (la queue n'est pas restée à la même position)
        // ou
        //    - la tête n'est pas à la position de l'ancienne queue (le snake suit sa queue)
        BSP_LCD_SetTextColor((uint32_t)0xFF81CD4B); // 0xFF81CD4B
 80017f0:	482d      	ldr	r0, [pc, #180]	@ (80018a8 <StartDisplayTask+0x4c4>)
 80017f2:	f003 f89f 	bl	8004934 <BSP_LCD_SetTextColor>
        BSP_LCD_FillRect(oldTailPosition[0]*32, oldTailPosition[1]*32, 32, 32);
 80017f6:	4b2b      	ldr	r3, [pc, #172]	@ (80018a4 <StartDisplayTask+0x4c0>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	015b      	lsls	r3, r3, #5
 80017fc:	b298      	uxth	r0, r3
 80017fe:	4b29      	ldr	r3, [pc, #164]	@ (80018a4 <StartDisplayTask+0x4c0>)
 8001800:	785b      	ldrb	r3, [r3, #1]
 8001802:	015b      	lsls	r3, r3, #5
 8001804:	b299      	uxth	r1, r3
 8001806:	2320      	movs	r3, #32
 8001808:	2220      	movs	r2, #32
 800180a:	f003 fb6b 	bl	8004ee4 <BSP_LCD_FillRect>
      }

      // On affiche les pommes
      for (int i = 0; i < NBApple; i++)
 800180e:	2300      	movs	r3, #0
 8001810:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001814:	e01f      	b.n	8001856 <StartDisplayTask+0x472>
        if (applePosition[i][0] != -1)
 8001816:	4a25      	ldr	r2, [pc, #148]	@ (80018ac <StartDisplayTask+0x4c8>)
 8001818:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800181c:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001820:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001824:	d012      	beq.n	800184c <StartDisplayTask+0x468>
          BSP_LCD_DrawBitmap(applePosition[i][0]*32, applePosition[i][1]*32, (uint8_t*)images_bmp_color_apple_81CD4B_bmp);
 8001826:	4a21      	ldr	r2, [pc, #132]	@ (80018ac <StartDisplayTask+0x4c8>)
 8001828:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800182c:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001830:	015b      	lsls	r3, r3, #5
 8001832:	4618      	mov	r0, r3
 8001834:	4a1d      	ldr	r2, [pc, #116]	@ (80018ac <StartDisplayTask+0x4c8>)
 8001836:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4413      	add	r3, r2
 800183e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001842:	015b      	lsls	r3, r3, #5
 8001844:	4a1a      	ldr	r2, [pc, #104]	@ (80018b0 <StartDisplayTask+0x4cc>)
 8001846:	4619      	mov	r1, r3
 8001848:	f003 fa9a 	bl	8004d80 <BSP_LCD_DrawBitmap>
      for (int i = 0; i < NBApple; i++)
 800184c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001850:	3301      	adds	r3, #1
 8001852:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001856:	2304      	movs	r3, #4
 8001858:	461a      	mov	r2, r3
 800185a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800185e:	4293      	cmp	r3, r2
 8001860:	dbd9      	blt.n	8001816 <StartDisplayTask+0x432>
      xSemaphoreGive(displayMutexHandle);
 8001862:	4b14      	ldr	r3, [pc, #80]	@ (80018b4 <StartDisplayTask+0x4d0>)
 8001864:	6818      	ldr	r0, [r3, #0]
 8001866:	2300      	movs	r3, #0
 8001868:	2200      	movs	r2, #0
 800186a:	2100      	movs	r1, #0
 800186c:	f010 f8aa 	bl	80119c4 <xQueueGenericSend>

      if (lastMove)
 8001870:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <StartDisplayTask+0x4d4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d002      	beq.n	800187e <StartDisplayTask+0x49a>
        lastMove = 0;
 8001878:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <StartDisplayTask+0x4d4>)
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
    }

    osDelay(100);
 800187e:	2064      	movs	r0, #100	@ 0x64
 8001880:	f00f fc78 	bl	8011174 <osDelay>
    if ((gameOver || gamePaused || !gameStarted) && !lastMove) {
 8001884:	e5b6      	b.n	80013f4 <StartDisplayTask+0x10>
 8001886:	bf00      	nop
 8001888:	20000008 	.word	0x20000008
 800188c:	0801e0d8 	.word	0x0801e0d8
 8001890:	0801ed64 	.word	0x0801ed64
 8001894:	0801f9f0 	.word	0x0801f9f0
 8001898:	0802067c 	.word	0x0802067c
 800189c:	200002d0 	.word	0x200002d0
 80018a0:	20000004 	.word	0x20000004
 80018a4:	200003d4 	.word	0x200003d4
 80018a8:	ff81cd4b 	.word	0xff81cd4b
 80018ac:	200003d8 	.word	0x200003d8
 80018b0:	080156d4 	.word	0x080156d4
 80018b4:	200003f4 	.word	0x200003f4
 80018b8:	200002e0 	.word	0x200002e0

080018bc <StartJoystickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartJoystickTask */
void StartJoystickTask(void const * argument)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartJoystickTask */
  /* Infinite loop */
  for(;;)
  {
    sConfig.Channel = ADC_CHANNEL_8;
 80018c4:	4b30      	ldr	r3, [pc, #192]	@ (8001988 <StartJoystickTask+0xcc>)
 80018c6:	2208      	movs	r2, #8
 80018c8:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80018ca:	492f      	ldr	r1, [pc, #188]	@ (8001988 <StartJoystickTask+0xcc>)
 80018cc:	482f      	ldr	r0, [pc, #188]	@ (800198c <StartJoystickTask+0xd0>)
 80018ce:	f006 fb31 	bl	8007f34 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc3);
 80018d2:	482e      	ldr	r0, [pc, #184]	@ (800198c <StartJoystickTask+0xd0>)
 80018d4:	f006 f9c8 	bl	8007c68 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 80018d8:	bf00      	nop
 80018da:	2164      	movs	r1, #100	@ 0x64
 80018dc:	482b      	ldr	r0, [pc, #172]	@ (800198c <StartJoystickTask+0xd0>)
 80018de:	f006 fa91 	bl	8007e04 <HAL_ADC_PollForConversion>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f8      	bne.n	80018da <StartJoystickTask+0x1e>
	joystick_v = HAL_ADC_GetValue(&hadc3);
 80018e8:	4828      	ldr	r0, [pc, #160]	@ (800198c <StartJoystickTask+0xd0>)
 80018ea:	f006 fb16 	bl	8007f1a <HAL_ADC_GetValue>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4a27      	ldr	r2, [pc, #156]	@ (8001990 <StartJoystickTask+0xd4>)
 80018f2:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start(&hadc1);
 80018f4:	4827      	ldr	r0, [pc, #156]	@ (8001994 <StartJoystickTask+0xd8>)
 80018f6:	f006 f9b7 	bl	8007c68 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 80018fa:	bf00      	nop
 80018fc:	2164      	movs	r1, #100	@ 0x64
 80018fe:	4825      	ldr	r0, [pc, #148]	@ (8001994 <StartJoystickTask+0xd8>)
 8001900:	f006 fa80 	bl	8007e04 <HAL_ADC_PollForConversion>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f8      	bne.n	80018fc <StartJoystickTask+0x40>
	joystick_h = HAL_ADC_GetValue(&hadc1);
 800190a:	4822      	ldr	r0, [pc, #136]	@ (8001994 <StartJoystickTask+0xd8>)
 800190c:	f006 fb05 	bl	8007f1a <HAL_ADC_GetValue>
 8001910:	4603      	mov	r3, r0
 8001912:	4a21      	ldr	r2, [pc, #132]	@ (8001998 <StartJoystickTask+0xdc>)
 8001914:	6013      	str	r3, [r2, #0]

    // max range of joystick is 0 to 4095

    if (joystick_v < 1000 && headPart != HeadTop) {
 8001916:	4b1e      	ldr	r3, [pc, #120]	@ (8001990 <StartJoystickTask+0xd4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800191e:	d207      	bcs.n	8001930 <StartJoystickTask+0x74>
 8001920:	4b1e      	ldr	r3, [pc, #120]	@ (800199c <StartJoystickTask+0xe0>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <StartJoystickTask+0x74>
      direction = Down;
 8001928:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <StartJoystickTask+0xe4>)
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
 800192e:	e027      	b.n	8001980 <StartJoystickTask+0xc4>
    } else if (joystick_v > 3000 && headPart != HeadBottom) {
 8001930:	4b17      	ldr	r3, [pc, #92]	@ (8001990 <StartJoystickTask+0xd4>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001938:	4293      	cmp	r3, r2
 800193a:	d907      	bls.n	800194c <StartJoystickTask+0x90>
 800193c:	4b17      	ldr	r3, [pc, #92]	@ (800199c <StartJoystickTask+0xe0>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d003      	beq.n	800194c <StartJoystickTask+0x90>
      direction = Up;
 8001944:	4b16      	ldr	r3, [pc, #88]	@ (80019a0 <StartJoystickTask+0xe4>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
 800194a:	e019      	b.n	8001980 <StartJoystickTask+0xc4>
    } else if (joystick_h < 1000 && headPart != HeadLeft) {
 800194c:	4b12      	ldr	r3, [pc, #72]	@ (8001998 <StartJoystickTask+0xdc>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001954:	d207      	bcs.n	8001966 <StartJoystickTask+0xaa>
 8001956:	4b11      	ldr	r3, [pc, #68]	@ (800199c <StartJoystickTask+0xe0>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d003      	beq.n	8001966 <StartJoystickTask+0xaa>
      direction = Right;
 800195e:	4b10      	ldr	r3, [pc, #64]	@ (80019a0 <StartJoystickTask+0xe4>)
 8001960:	2203      	movs	r2, #3
 8001962:	701a      	strb	r2, [r3, #0]
 8001964:	e00c      	b.n	8001980 <StartJoystickTask+0xc4>
    } else if (joystick_h > 3000 && headPart != HeadRight) {
 8001966:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <StartJoystickTask+0xdc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800196e:	4293      	cmp	r3, r2
 8001970:	d906      	bls.n	8001980 <StartJoystickTask+0xc4>
 8001972:	4b0a      	ldr	r3, [pc, #40]	@ (800199c <StartJoystickTask+0xe0>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d002      	beq.n	8001980 <StartJoystickTask+0xc4>
      direction = Left;
 800197a:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <StartJoystickTask+0xe4>)
 800197c:	2202      	movs	r2, #2
 800197e:	701a      	strb	r2, [r3, #0]
    }
    osDelay(10);
 8001980:	200a      	movs	r0, #10
 8001982:	f00f fbf7 	bl	8011174 <osDelay>
    sConfig.Channel = ADC_CHANNEL_8;
 8001986:	e79d      	b.n	80018c4 <StartJoystickTask+0x8>
 8001988:	20000748 	.word	0x20000748
 800198c:	20000158 	.word	0x20000158
 8001990:	20000248 	.word	0x20000248
 8001994:	20000110 	.word	0x20000110
 8001998:	2000024c 	.word	0x2000024c
 800199c:	20000251 	.word	0x20000251
 80019a0:	20000250 	.word	0x20000250

080019a4 <StartManageBodyParts>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManageBodyParts */
void StartManageBodyParts(void const * argument)
{
 80019a4:	b5b0      	push	{r4, r5, r7, lr}
 80019a6:	b08e      	sub	sp, #56	@ 0x38
 80019a8:	af02      	add	r7, sp, #8
 80019aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManageBodyParts */
  TickType_t xLastWakeTime = xTaskGetTickCount();
 80019ac:	f011 f9e2 	bl	8012d74 <xTaskGetTickCount>
 80019b0:	4603      	mov	r3, r0
 80019b2:	613b      	str	r3, [r7, #16]
  const TickType_t delay = pdMS_TO_TICKS(1000. / speed);
 80019b4:	4b7f      	ldr	r3, [pc, #508]	@ (8001bb4 <StartManageBodyParts+0x210>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fdcb 	bl	8000554 <__aeabi_i2d>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	f04f 0000 	mov.w	r0, #0
 80019c6:	497c      	ldr	r1, [pc, #496]	@ (8001bb8 <StartManageBodyParts+0x214>)
 80019c8:	f7fe ff58 	bl	800087c <__aeabi_ddiv>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7ff f83a 	bl	8000a4c <__aeabi_d2uiz>
 80019d8:	4603      	mov	r3, r0
 80019da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	4a76      	ldr	r2, [pc, #472]	@ (8001bbc <StartManageBodyParts+0x218>)
 80019e4:	fba2 2303 	umull	r2, r3, r2, r3
 80019e8:	099b      	lsrs	r3, r3, #6
 80019ea:	61bb      	str	r3, [r7, #24]

  /* Infinite loop */
  for(;;)
  {
    if (!gameOver && !gamePaused && gameStarted) {
 80019ec:	4b74      	ldr	r3, [pc, #464]	@ (8001bc0 <StartManageBodyParts+0x21c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f040 82ad 	bne.w	8001f50 <StartManageBodyParts+0x5ac>
 80019f6:	4b73      	ldr	r3, [pc, #460]	@ (8001bc4 <StartManageBodyParts+0x220>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f040 82a8 	bne.w	8001f50 <StartManageBodyParts+0x5ac>
 8001a00:	4b71      	ldr	r3, [pc, #452]	@ (8001bc8 <StartManageBodyParts+0x224>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 82a3 	beq.w	8001f50 <StartManageBodyParts+0x5ac>
      // Le jeu est en cours

      // On sauvegarde la position de la queue et de la tête
      oldTailPosition[0] = snakeTailPosition[0];
 8001a0a:	4b70      	ldr	r3, [pc, #448]	@ (8001bcc <StartManageBodyParts+0x228>)
 8001a0c:	781a      	ldrb	r2, [r3, #0]
 8001a0e:	4b70      	ldr	r3, [pc, #448]	@ (8001bd0 <StartManageBodyParts+0x22c>)
 8001a10:	701a      	strb	r2, [r3, #0]
      oldTailPosition[1] = snakeTailPosition[1];
 8001a12:	4b6e      	ldr	r3, [pc, #440]	@ (8001bcc <StartManageBodyParts+0x228>)
 8001a14:	785a      	ldrb	r2, [r3, #1]
 8001a16:	4b6e      	ldr	r3, [pc, #440]	@ (8001bd0 <StartManageBodyParts+0x22c>)
 8001a18:	705a      	strb	r2, [r3, #1]

      uint8_t oldHeadPosition[2];
      oldHeadPosition[0] = snakeHeadPosition[0];
 8001a1a:	4b6e      	ldr	r3, [pc, #440]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	733b      	strb	r3, [r7, #12]
      oldHeadPosition[1] = snakeHeadPosition[1];
 8001a20:	4b6c      	ldr	r3, [pc, #432]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a22:	785b      	ldrb	r3, [r3, #1]
 8001a24:	737b      	strb	r3, [r7, #13]


      // On met a jour la position de la tête en fonction de la direction
      switch (direction) {
 8001a26:	4b6c      	ldr	r3, [pc, #432]	@ (8001bd8 <StartManageBodyParts+0x234>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d832      	bhi.n	8001a94 <StartManageBodyParts+0xf0>
 8001a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a34 <StartManageBodyParts+0x90>)
 8001a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a34:	08001a45 	.word	0x08001a45
 8001a38:	08001a59 	.word	0x08001a59
 8001a3c:	08001a6d 	.word	0x08001a6d
 8001a40:	08001a81 	.word	0x08001a81
        case Up:
          headPart = HeadTop;
 8001a44:	4b65      	ldr	r3, [pc, #404]	@ (8001bdc <StartManageBodyParts+0x238>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[1]--;
 8001a4a:	4b62      	ldr	r3, [pc, #392]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a4c:	785b      	ldrb	r3, [r3, #1]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4b60      	ldr	r3, [pc, #384]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a54:	705a      	strb	r2, [r3, #1]
          break;
 8001a56:	e01d      	b.n	8001a94 <StartManageBodyParts+0xf0>
        case Down:
          headPart = HeadBottom;
 8001a58:	4b60      	ldr	r3, [pc, #384]	@ (8001bdc <StartManageBodyParts+0x238>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[1]++;
 8001a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a60:	785b      	ldrb	r3, [r3, #1]
 8001a62:	3301      	adds	r3, #1
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4b5b      	ldr	r3, [pc, #364]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a68:	705a      	strb	r2, [r3, #1]
          break;
 8001a6a:	e013      	b.n	8001a94 <StartManageBodyParts+0xf0>
        case Left:
          headPart = HeadLeft;
 8001a6c:	4b5b      	ldr	r3, [pc, #364]	@ (8001bdc <StartManageBodyParts+0x238>)
 8001a6e:	2202      	movs	r2, #2
 8001a70:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[0]--;
 8001a72:	4b58      	ldr	r3, [pc, #352]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4b56      	ldr	r3, [pc, #344]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a7c:	701a      	strb	r2, [r3, #0]
          break;
 8001a7e:	e009      	b.n	8001a94 <StartManageBodyParts+0xf0>
        case Right:
          headPart = HeadRight;
 8001a80:	4b56      	ldr	r3, [pc, #344]	@ (8001bdc <StartManageBodyParts+0x238>)
 8001a82:	2203      	movs	r2, #3
 8001a84:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[0]++;
 8001a86:	4b53      	ldr	r3, [pc, #332]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4b51      	ldr	r3, [pc, #324]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a90:	701a      	strb	r2, [r3, #0]
          break;
 8001a92:	bf00      	nop
      }

      // on vérifie si on est mort
      if (snakeHeadPosition[0] >= gridSizeX || snakeHeadPosition[1] >= gridSizeY || snakeHeadPosition[0] < 0 || snakeHeadPosition[1] < 0) {
 8001a94:	4b4f      	ldr	r3, [pc, #316]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	220f      	movs	r2, #15
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d204      	bcs.n	8001aa8 <StartManageBodyParts+0x104>
 8001a9e:	4b4d      	ldr	r3, [pc, #308]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001aa0:	785b      	ldrb	r3, [r3, #1]
 8001aa2:	2208      	movs	r2, #8
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d306      	bcc.n	8001ab6 <StartManageBodyParts+0x112>
        // On a touché un mur
        gameOver = 1;
 8001aa8:	4b45      	ldr	r3, [pc, #276]	@ (8001bc0 <StartManageBodyParts+0x21c>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]
        lastMove = 1;
 8001aae:	4b4c      	ldr	r3, [pc, #304]	@ (8001be0 <StartManageBodyParts+0x23c>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	e022      	b.n	8001afc <StartManageBodyParts+0x158>
      }
      else  {
        for (int i = 0; i < snakeSize; i++) {
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001aba:	e019      	b.n	8001af0 <StartManageBodyParts+0x14c>
          if (snakeHeadPosition[0] == snakeBodyPosition[i][0] && snakeHeadPosition[1] == snakeBodyPosition[i][1]) {
 8001abc:	4b45      	ldr	r3, [pc, #276]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001abe:	781a      	ldrb	r2, [r3, #0]
 8001ac0:	4948      	ldr	r1, [pc, #288]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ac4:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d10e      	bne.n	8001aea <StartManageBodyParts+0x146>
 8001acc:	4b41      	ldr	r3, [pc, #260]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001ace:	785a      	ldrb	r2, [r3, #1]
 8001ad0:	4944      	ldr	r1, [pc, #272]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	440b      	add	r3, r1
 8001ad8:	785b      	ldrb	r3, [r3, #1]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d105      	bne.n	8001aea <StartManageBodyParts+0x146>
            // On a touché notre corps
            gameOver = 1;
 8001ade:	4b38      	ldr	r3, [pc, #224]	@ (8001bc0 <StartManageBodyParts+0x21c>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
            lastMove = 1;
 8001ae4:	4b3e      	ldr	r3, [pc, #248]	@ (8001be0 <StartManageBodyParts+0x23c>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < snakeSize; i++) {
 8001aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aec:	3301      	adds	r3, #1
 8001aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001af0:	4b3d      	ldr	r3, [pc, #244]	@ (8001be8 <StartManageBodyParts+0x244>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001af8:	4293      	cmp	r3, r2
 8001afa:	dbdf      	blt.n	8001abc <StartManageBodyParts+0x118>
      }
      // Note: Inutile de vérifier si on a touché la queue. Celle ci n'a pas encore avancé.

      
      // On vérifie si on a mangé la pomme avant de bouger le corps et la queue
      appleEaten = 0;
 8001afc:	4b3b      	ldr	r3, [pc, #236]	@ (8001bec <StartManageBodyParts+0x248>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < NBApple; i++) {
 8001b02:	2300      	movs	r3, #0
 8001b04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b06:	e0fc      	b.n	8001d02 <StartManageBodyParts+0x35e>
        if (snakeHeadPosition[0] == applePosition[i][0] && snakeHeadPosition[1] == applePosition[i][1]) {
 8001b08:	4b32      	ldr	r3, [pc, #200]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4a38      	ldr	r2, [pc, #224]	@ (8001bf0 <StartManageBodyParts+0x24c>)
 8001b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b12:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001b16:	4299      	cmp	r1, r3
 8001b18:	f040 80f0 	bne.w	8001cfc <StartManageBodyParts+0x358>
 8001b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001b1e:	785b      	ldrb	r3, [r3, #1]
 8001b20:	4619      	mov	r1, r3
 8001b22:	4a33      	ldr	r2, [pc, #204]	@ (8001bf0 <StartManageBodyParts+0x24c>)
 8001b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4413      	add	r3, r2
 8001b2a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001b2e:	4299      	cmp	r1, r3
 8001b30:	f040 80e4 	bne.w	8001cfc <StartManageBodyParts+0x358>
          snakeSize++;
 8001b34:	4b2c      	ldr	r3, [pc, #176]	@ (8001be8 <StartManageBodyParts+0x244>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001be8 <StartManageBodyParts+0x244>)
 8001b3e:	701a      	strb	r2, [r3, #0]
          appleEaten = 1;
 8001b40:	4b2a      	ldr	r3, [pc, #168]	@ (8001bec <StartManageBodyParts+0x248>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	601a      	str	r2, [r3, #0]

          // On ajoute un bodyPart à la queue
          for (int i = snakeSize - 1; i > 0; i--) {
 8001b46:	4b28      	ldr	r3, [pc, #160]	@ (8001be8 <StartManageBodyParts+0x244>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b4e:	e020      	b.n	8001b92 <StartManageBodyParts+0x1ee>
            snakeBodyParts[i] = snakeBodyParts[i - 1];
 8001b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b52:	3b01      	subs	r3, #1
 8001b54:	4a27      	ldr	r2, [pc, #156]	@ (8001bf4 <StartManageBodyParts+0x250>)
 8001b56:	5cd1      	ldrb	r1, [r2, r3]
 8001b58:	4a26      	ldr	r2, [pc, #152]	@ (8001bf4 <StartManageBodyParts+0x250>)
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5c:	4413      	add	r3, r2
 8001b5e:	460a      	mov	r2, r1
 8001b60:	701a      	strb	r2, [r3, #0]
            snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8001b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b64:	3b01      	subs	r3, #1
 8001b66:	4a1f      	ldr	r2, [pc, #124]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001b68:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b70:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
            snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8001b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b76:	3b01      	subs	r3, #1
 8001b78:	4a1a      	ldr	r2, [pc, #104]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	7859      	ldrb	r1, [r3, #1]
 8001b80:	4a18      	ldr	r2, [pc, #96]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	460a      	mov	r2, r1
 8001b8a:	705a      	strb	r2, [r3, #1]
          for (int i = snakeSize - 1; i > 0; i--) {
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	dcdb      	bgt.n	8001b50 <StartManageBodyParts+0x1ac>

          // On met a jour le premier bodyPart
          uint8_t backX;
          uint8_t backY;

          if (snakeSize > 1) {
 8001b98:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <StartManageBodyParts+0x244>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d92b      	bls.n	8001bf8 <StartManageBodyParts+0x254>
            backX = snakeBodyPosition[0][0];
 8001ba0:	4b10      	ldr	r3, [pc, #64]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            backY = snakeBodyPosition[0][1];
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001baa:	785b      	ldrb	r3, [r3, #1]
 8001bac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001bb0:	e02a      	b.n	8001c08 <StartManageBodyParts+0x264>
 8001bb2:	bf00      	nop
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	408f4000 	.word	0x408f4000
 8001bbc:	10624dd3 	.word	0x10624dd3
 8001bc0:	200002dc 	.word	0x200002dc
 8001bc4:	200002d8 	.word	0x200002d8
 8001bc8:	200002d4 	.word	0x200002d4
 8001bcc:	20000008 	.word	0x20000008
 8001bd0:	200003d4 	.word	0x200003d4
 8001bd4:	20000004 	.word	0x20000004
 8001bd8:	20000250 	.word	0x20000250
 8001bdc:	20000251 	.word	0x20000251
 8001be0:	200002e0 	.word	0x200002e0
 8001be4:	200002e4 	.word	0x200002e4
 8001be8:	200002cc 	.word	0x200002cc
 8001bec:	200002d0 	.word	0x200002d0
 8001bf0:	200003d8 	.word	0x200003d8
 8001bf4:	20000254 	.word	0x20000254
          }
          else {
            backX = snakeTailPosition[0];
 8001bf8:	4ba8      	ldr	r3, [pc, #672]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            backY = snakeTailPosition[1];
 8001c00:	4ba6      	ldr	r3, [pc, #664]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001c02:	785b      	ldrb	r3, [r3, #1]
 8001c04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
          }

          // Trouve le type de bodyPart à mettre
          snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], backX, backY, oldHeadPosition[0], oldHeadPosition[1]);
 8001c08:	4ba5      	ldr	r3, [pc, #660]	@ (8001ea0 <StartManageBodyParts+0x4fc>)
 8001c0a:	7818      	ldrb	r0, [r3, #0]
 8001c0c:	4ba4      	ldr	r3, [pc, #656]	@ (8001ea0 <StartManageBodyParts+0x4fc>)
 8001c0e:	7859      	ldrb	r1, [r3, #1]
 8001c10:	7b3b      	ldrb	r3, [r7, #12]
 8001c12:	7b7a      	ldrb	r2, [r7, #13]
 8001c14:	f897 5022 	ldrb.w	r5, [r7, #34]	@ 0x22
 8001c18:	f897 4023 	ldrb.w	r4, [r7, #35]	@ 0x23
 8001c1c:	9201      	str	r2, [sp, #4]
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	462b      	mov	r3, r5
 8001c22:	4622      	mov	r2, r4
 8001c24:	f000 fa0c 	bl	8002040 <whatBodyPart>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4b9d      	ldr	r3, [pc, #628]	@ (8001ea4 <StartManageBodyParts+0x500>)
 8001c2e:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][0] = oldHeadPosition[0];
 8001c30:	7b3a      	ldrb	r2, [r7, #12]
 8001c32:	4b9d      	ldr	r3, [pc, #628]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001c34:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][1] = oldHeadPosition[1];
 8001c36:	7b7a      	ldrb	r2, [r7, #13]
 8001c38:	4b9b      	ldr	r3, [pc, #620]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001c3a:	705a      	strb	r2, [r3, #1]

          // Si on a de la place pour une nouvelle pomme
          uint8_t NBFreeCells = gridSizeX * gridSizeY - snakeSize - 1;
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	2308      	movs	r3, #8
 8001c40:	fb12 f303 	smulbb	r3, r2, r3
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4b99      	ldr	r3, [pc, #612]	@ (8001eac <StartManageBodyParts+0x508>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	75fb      	strb	r3, [r7, #23]
          if (NBFreeCells > NBApple) {
 8001c52:	2204      	movs	r2, #4
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d945      	bls.n	8001ce6 <StartManageBodyParts+0x342>
            // On génère une nouvelle pomme à une position aléatoire qui n'est pas sur le snake ou une autre pomme
            do {
              applePosition[i][0] = rand() % gridSizeX;
 8001c5a:	f012 fa2f 	bl	80140bc <rand>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	220f      	movs	r2, #15
 8001c62:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c66:	fb01 f202 	mul.w	r2, r1, r2
 8001c6a:	1a9b      	subs	r3, r3, r2
 8001c6c:	b259      	sxtb	r1, r3
 8001c6e:	4a90      	ldr	r2, [pc, #576]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c72:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
              applePosition[i][1] = rand() % gridSizeY;
 8001c76:	f012 fa21 	bl	80140bc <rand>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2208      	movs	r2, #8
 8001c7e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c82:	fb01 f202 	mul.w	r2, r1, r2
 8001c86:	1a9b      	subs	r3, r3, r2
 8001c88:	b259      	sxtb	r1, r3
 8001c8a:	4a89      	ldr	r2, [pc, #548]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	460a      	mov	r2, r1
 8001c94:	705a      	strb	r2, [r3, #1]
            } while (isSnakePosition(applePosition[i][0], applePosition[i][1]) 
 8001c96:	4a86      	ldr	r2, [pc, #536]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c9a:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	4983      	ldr	r1, [pc, #524]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	f000 fa27 	bl	8002104 <isSnakePosition>
 8001cb6:	4603      	mov	r3, r0
                  || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1ce      	bne.n	8001c5a <StartManageBodyParts+0x2b6>
 8001cbc:	4a7c      	ldr	r2, [pc, #496]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cc0:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001cc4:	b2d8      	uxtb	r0, r3
 8001cc6:	4a7a      	ldr	r2, [pc, #488]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f000 fa5f 	bl	800219c <isApplePosition>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1ba      	bne.n	8001c5a <StartManageBodyParts+0x2b6>
 8001ce4:	e00a      	b.n	8001cfc <StartManageBodyParts+0x358>
          }
          else {
            applePosition[i][0] = -1;
 8001ce6:	4a72      	ldr	r2, [pc, #456]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cea:	21ff      	movs	r1, #255	@ 0xff
 8001cec:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
            applePosition[i][1] = -1;
 8001cf0:	4a6f      	ldr	r2, [pc, #444]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	22ff      	movs	r2, #255	@ 0xff
 8001cfa:	705a      	strb	r2, [r3, #1]
      for (int i = 0; i < NBApple; i++) {
 8001cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cfe:	3301      	adds	r3, #1
 8001d00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d02:	2304      	movs	r3, #4
 8001d04:	461a      	mov	r2, r3
 8001d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	f6ff aefd 	blt.w	8001b08 <StartManageBodyParts+0x164>
        }
      }


      // On n'a pas mangé de pomme on avance le corps et la queue sans ajouter de bodyPart
      if (!appleEaten) {
 8001d0e:	4b69      	ldr	r3, [pc, #420]	@ (8001eb4 <StartManageBodyParts+0x510>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f040 811c 	bne.w	8001f50 <StartManageBodyParts+0x5ac>
        // on met a jour la position de la queue
        if (snakeSize > 0) {
 8001d18:	4b64      	ldr	r3, [pc, #400]	@ (8001eac <StartManageBodyParts+0x508>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d011      	beq.n	8001d44 <StartManageBodyParts+0x3a0>
          snakeTailPosition[0] = snakeBodyPosition[snakeSize - 1][0];
 8001d20:	4b62      	ldr	r3, [pc, #392]	@ (8001eac <StartManageBodyParts+0x508>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	3b01      	subs	r3, #1
 8001d26:	4a60      	ldr	r2, [pc, #384]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001d28:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001d2c:	4b5b      	ldr	r3, [pc, #364]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001d2e:	701a      	strb	r2, [r3, #0]
          snakeTailPosition[1] = snakeBodyPosition[snakeSize - 1][1];
 8001d30:	4b5e      	ldr	r3, [pc, #376]	@ (8001eac <StartManageBodyParts+0x508>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	4a5c      	ldr	r2, [pc, #368]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	785a      	ldrb	r2, [r3, #1]
 8001d3e:	4b57      	ldr	r3, [pc, #348]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001d40:	705a      	strb	r2, [r3, #1]
 8001d42:	e005      	b.n	8001d50 <StartManageBodyParts+0x3ac>
        }
        else {
          snakeTailPosition[0] = oldHeadPosition[0];
 8001d44:	7b3a      	ldrb	r2, [r7, #12]
 8001d46:	4b55      	ldr	r3, [pc, #340]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001d48:	701a      	strb	r2, [r3, #0]
          snakeTailPosition[1] = oldHeadPosition[1];
 8001d4a:	7b7a      	ldrb	r2, [r7, #13]
 8001d4c:	4b53      	ldr	r3, [pc, #332]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001d4e:	705a      	strb	r2, [r3, #1]
        }


        // On avance le corps
        for (int i = snakeSize - 1; i > 0; i--) {
 8001d50:	4b56      	ldr	r3, [pc, #344]	@ (8001eac <StartManageBodyParts+0x508>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	e020      	b.n	8001d9c <StartManageBodyParts+0x3f8>
          snakeBodyParts[i] = snakeBodyParts[i - 1];
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	4a51      	ldr	r2, [pc, #324]	@ (8001ea4 <StartManageBodyParts+0x500>)
 8001d60:	5cd1      	ldrb	r1, [r2, r3]
 8001d62:	4a50      	ldr	r2, [pc, #320]	@ (8001ea4 <StartManageBodyParts+0x500>)
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	4413      	add	r3, r2
 8001d68:	460a      	mov	r2, r1
 8001d6a:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	4a4d      	ldr	r2, [pc, #308]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001d72:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001d76:	4a4c      	ldr	r2, [pc, #304]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
          snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3b01      	subs	r3, #1
 8001d82:	4a49      	ldr	r2, [pc, #292]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	7859      	ldrb	r1, [r3, #1]
 8001d8a:	4a47      	ldr	r2, [pc, #284]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	460a      	mov	r2, r1
 8001d94:	705a      	strb	r2, [r3, #1]
        for (int i = snakeSize - 1; i > 0; i--) {
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	dcdb      	bgt.n	8001d5a <StartManageBodyParts+0x3b6>
        }


        // On met a jour le corps
        if (snakeSize > 0) {
 8001da2:	4b42      	ldr	r3, [pc, #264]	@ (8001eac <StartManageBodyParts+0x508>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80b2 	beq.w	8001f10 <StartManageBodyParts+0x56c>
          // On trouve le type de bodyPart à mettre juste derrière la tête
          snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], snakeBodyPosition[0][0], snakeBodyPosition[0][1], oldHeadPosition[0], oldHeadPosition[1]);
 8001dac:	4b3c      	ldr	r3, [pc, #240]	@ (8001ea0 <StartManageBodyParts+0x4fc>)
 8001dae:	7818      	ldrb	r0, [r3, #0]
 8001db0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ea0 <StartManageBodyParts+0x4fc>)
 8001db2:	7859      	ldrb	r1, [r3, #1]
 8001db4:	4b3c      	ldr	r3, [pc, #240]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001db6:	781c      	ldrb	r4, [r3, #0]
 8001db8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001dba:	785d      	ldrb	r5, [r3, #1]
 8001dbc:	7b3b      	ldrb	r3, [r7, #12]
 8001dbe:	7b7a      	ldrb	r2, [r7, #13]
 8001dc0:	9201      	str	r2, [sp, #4]
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	462b      	mov	r3, r5
 8001dc6:	4622      	mov	r2, r4
 8001dc8:	f000 f93a 	bl	8002040 <whatBodyPart>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4b34      	ldr	r3, [pc, #208]	@ (8001ea4 <StartManageBodyParts+0x500>)
 8001dd2:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][0] = oldHeadPosition[0];
 8001dd4:	7b3a      	ldrb	r2, [r7, #12]
 8001dd6:	4b34      	ldr	r3, [pc, #208]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001dd8:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][1] = oldHeadPosition[1];
 8001dda:	7b7a      	ldrb	r2, [r7, #13]
 8001ddc:	4b32      	ldr	r3, [pc, #200]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001dde:	705a      	strb	r2, [r3, #1]

          // On met a jour le l'orientation de la queue
          switch (snakeBodyParts[snakeSize - 1]) {
 8001de0:	4b32      	ldr	r3, [pc, #200]	@ (8001eac <StartManageBodyParts+0x508>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	4a2f      	ldr	r2, [pc, #188]	@ (8001ea4 <StartManageBodyParts+0x500>)
 8001de8:	5cd3      	ldrb	r3, [r2, r3]
 8001dea:	2b05      	cmp	r3, #5
 8001dec:	f200 80b0 	bhi.w	8001f50 <StartManageBodyParts+0x5ac>
 8001df0:	a201      	add	r2, pc, #4	@ (adr r2, 8001df8 <StartManageBodyParts+0x454>)
 8001df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df6:	bf00      	nop
 8001df8:	08001e11 	.word	0x08001e11
 8001dfc:	08001e35 	.word	0x08001e35
 8001e00:	08001e59 	.word	0x08001e59
 8001e04:	08001e7f 	.word	0x08001e7f
 8001e08:	08001ec5 	.word	0x08001ec5
 8001e0c:	08001eeb 	.word	0x08001eeb
            case BottomLeft:
              // TailTop ou TailRight
              if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0]) {
 8001e10:	4b26      	ldr	r3, [pc, #152]	@ (8001eac <StartManageBodyParts+0x508>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	3b01      	subs	r3, #1
 8001e16:	4a24      	ldr	r2, [pc, #144]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001e18:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d103      	bne.n	8001e2c <StartManageBodyParts+0x488>
                tailPart = TailTop;
 8001e24:	4b24      	ldr	r3, [pc, #144]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailRight;
              }
              break;
 8001e2a:	e091      	b.n	8001f50 <StartManageBodyParts+0x5ac>
                tailPart = TailRight;
 8001e2c:	4b22      	ldr	r3, [pc, #136]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e2e:	2203      	movs	r2, #3
 8001e30:	701a      	strb	r2, [r3, #0]
              break;
 8001e32:	e08d      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case BottomRight:
              // TailBottom ou TailLeft
              if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0]) {
 8001e34:	4b1d      	ldr	r3, [pc, #116]	@ (8001eac <StartManageBodyParts+0x508>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001e3c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001e40:	4b16      	ldr	r3, [pc, #88]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d103      	bne.n	8001e50 <StartManageBodyParts+0x4ac>
                tailPart = TailTop;
 8001e48:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailLeft;
              }
              break;
 8001e4e:	e07f      	b.n	8001f50 <StartManageBodyParts+0x5ac>
                tailPart = TailLeft;
 8001e50:	4b19      	ldr	r3, [pc, #100]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e52:	2202      	movs	r2, #2
 8001e54:	701a      	strb	r2, [r3, #0]
              break;
 8001e56:	e07b      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case BottomTop:
              // TailTop ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] < snakeTailPosition[1]) {
 8001e58:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <StartManageBodyParts+0x508>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	785a      	ldrb	r2, [r3, #1]
 8001e66:	4b0d      	ldr	r3, [pc, #52]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001e68:	785b      	ldrb	r3, [r3, #1]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d203      	bcs.n	8001e76 <StartManageBodyParts+0x4d2>
                tailPart = TailTop;
 8001e6e:	4b12      	ldr	r3, [pc, #72]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001e74:	e06c      	b.n	8001f50 <StartManageBodyParts+0x5ac>
                tailPart = TailBottom;
 8001e76:	4b10      	ldr	r3, [pc, #64]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
              break;
 8001e7c:	e068      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case LeftRight:
              // TailRight ou TailLeft
              if (snakeBodyPosition[snakeSize - 1][0] < snakeTailPosition[0]) {
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <StartManageBodyParts+0x508>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	4a08      	ldr	r2, [pc, #32]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001e86:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001e8a:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d214      	bcs.n	8001ebc <StartManageBodyParts+0x518>
                tailPart = TailLeft;
 8001e92:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e94:	2202      	movs	r2, #2
 8001e96:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailRight;
              }
              break;
 8001e98:	e05a      	b.n	8001f50 <StartManageBodyParts+0x5ac>
 8001e9a:	bf00      	nop
 8001e9c:	20000008 	.word	0x20000008
 8001ea0:	20000004 	.word	0x20000004
 8001ea4:	20000254 	.word	0x20000254
 8001ea8:	200002e4 	.word	0x200002e4
 8001eac:	200002cc 	.word	0x200002cc
 8001eb0:	200003d8 	.word	0x200003d8
 8001eb4:	200002d0 	.word	0x200002d0
 8001eb8:	20000001 	.word	0x20000001
                tailPart = TailRight;
 8001ebc:	4b28      	ldr	r3, [pc, #160]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	701a      	strb	r2, [r3, #0]
              break;
 8001ec2:	e045      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case LeftTop:
              // TailRight ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1]) {
 8001ec4:	4b27      	ldr	r3, [pc, #156]	@ (8001f64 <StartManageBodyParts+0x5c0>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	4a27      	ldr	r2, [pc, #156]	@ (8001f68 <StartManageBodyParts+0x5c4>)
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	785a      	ldrb	r2, [r3, #1]
 8001ed2:	4b26      	ldr	r3, [pc, #152]	@ (8001f6c <StartManageBodyParts+0x5c8>)
 8001ed4:	785b      	ldrb	r3, [r3, #1]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d103      	bne.n	8001ee2 <StartManageBodyParts+0x53e>
                tailPart = TailRight;
 8001eda:	4b21      	ldr	r3, [pc, #132]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001edc:	2203      	movs	r2, #3
 8001ede:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001ee0:	e036      	b.n	8001f50 <StartManageBodyParts+0x5ac>
                tailPart = TailBottom;
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
              break;
 8001ee8:	e032      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case RightTop:
              // TailLeft ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1]) {
 8001eea:	4b1e      	ldr	r3, [pc, #120]	@ (8001f64 <StartManageBodyParts+0x5c0>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f68 <StartManageBodyParts+0x5c4>)
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	4413      	add	r3, r2
 8001ef6:	785a      	ldrb	r2, [r3, #1]
 8001ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f6c <StartManageBodyParts+0x5c8>)
 8001efa:	785b      	ldrb	r3, [r3, #1]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d103      	bne.n	8001f08 <StartManageBodyParts+0x564>
                tailPart = TailLeft;
 8001f00:	4b17      	ldr	r3, [pc, #92]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001f02:	2202      	movs	r2, #2
 8001f04:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001f06:	e023      	b.n	8001f50 <StartManageBodyParts+0x5ac>
                tailPart = TailBottom;
 8001f08:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
              break;
 8001f0e:	e01f      	b.n	8001f50 <StartManageBodyParts+0x5ac>
          }
        }
        else {
          switch (headPart) {
 8001f10:	4b17      	ldr	r3, [pc, #92]	@ (8001f70 <StartManageBodyParts+0x5cc>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d81b      	bhi.n	8001f50 <StartManageBodyParts+0x5ac>
 8001f18:	a201      	add	r2, pc, #4	@ (adr r2, 8001f20 <StartManageBodyParts+0x57c>)
 8001f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1e:	bf00      	nop
 8001f20:	08001f31 	.word	0x08001f31
 8001f24:	08001f39 	.word	0x08001f39
 8001f28:	08001f41 	.word	0x08001f41
 8001f2c:	08001f49 	.word	0x08001f49
            case HeadTop:
              tailPart = TailTop;
 8001f30:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	701a      	strb	r2, [r3, #0]
              break;
 8001f36:	e00b      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case HeadBottom:
              tailPart = TailBottom;
 8001f38:	4b09      	ldr	r3, [pc, #36]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
              break;
 8001f3e:	e007      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case HeadLeft:
              tailPart = TailLeft;
 8001f40:	4b07      	ldr	r3, [pc, #28]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001f42:	2202      	movs	r2, #2
 8001f44:	701a      	strb	r2, [r3, #0]
              break;
 8001f46:	e003      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case HeadRight:
              tailPart = TailRight;
 8001f48:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	701a      	strb	r2, [r3, #0]
              break;
 8001f4e:	bf00      	nop
          }
        }
      }
    }

    vTaskDelayUntil(&xLastWakeTime, delay);
 8001f50:	f107 0310 	add.w	r3, r7, #16
 8001f54:	69b9      	ldr	r1, [r7, #24]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f010 fd32 	bl	80129c0 <vTaskDelayUntil>
    if (!gameOver && !gamePaused && gameStarted) {
 8001f5c:	e546      	b.n	80019ec <StartManageBodyParts+0x48>
 8001f5e:	bf00      	nop
 8001f60:	20000001 	.word	0x20000001
 8001f64:	200002cc 	.word	0x200002cc
 8001f68:	200002e4 	.word	0x200002e4
 8001f6c:	20000008 	.word	0x20000008
 8001f70:	20000251 	.word	0x20000251

08001f74 <StartTsHandlerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTsHandlerTask */
void StartTsHandlerTask(void const * argument)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTsHandlerTask */
  /* Infinite loop */
  for(;;)
  {
    if (!gameStarted)
 8001f7c:	4b29      	ldr	r3, [pc, #164]	@ (8002024 <StartTsHandlerTask+0xb0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <StartTsHandlerTask+0x14>
      rand();
 8001f84:	f012 f89a 	bl	80140bc <rand>
    

    BSP_TS_GetState(&TS_State);
 8001f88:	4827      	ldr	r0, [pc, #156]	@ (8002028 <StartTsHandlerTask+0xb4>)
 8001f8a:	f003 fc77 	bl	800587c <BSP_TS_GetState>

    if (!TS_State.touchDetected && screenPressed) {
 8001f8e:	4b26      	ldr	r3, [pc, #152]	@ (8002028 <StartTsHandlerTask+0xb4>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d136      	bne.n	8002004 <StartTsHandlerTask+0x90>
 8001f96:	4b25      	ldr	r3, [pc, #148]	@ (800202c <StartTsHandlerTask+0xb8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d032      	beq.n	8002004 <StartTsHandlerTask+0x90>
      if (gameOver) {
 8001f9e:	4b24      	ldr	r3, [pc, #144]	@ (8002030 <StartTsHandlerTask+0xbc>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d005      	beq.n	8001fb2 <StartTsHandlerTask+0x3e>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8001fa6:	4823      	ldr	r0, [pc, #140]	@ (8002034 <StartTsHandlerTask+0xc0>)
 8001fa8:	f002 fd10 	bl	80049cc <BSP_LCD_Clear>
        restartGame();
 8001fac:	f000 f92a 	bl	8002204 <restartGame>
 8001fb0:	e028      	b.n	8002004 <StartTsHandlerTask+0x90>
      }
      else if (gamePaused) {
 8001fb2:	4b21      	ldr	r3, [pc, #132]	@ (8002038 <StartTsHandlerTask+0xc4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d014      	beq.n	8001fe4 <StartTsHandlerTask+0x70>
        xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8001fba:	4b20      	ldr	r3, [pc, #128]	@ (800203c <StartTsHandlerTask+0xc8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f010 f82c 	bl	8012020 <xQueueSemaphoreTake>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8001fc8:	481a      	ldr	r0, [pc, #104]	@ (8002034 <StartTsHandlerTask+0xc0>)
 8001fca:	f002 fcff 	bl	80049cc <BSP_LCD_Clear>
        xSemaphoreGive(displayMutexHandle);
 8001fce:	4b1b      	ldr	r3, [pc, #108]	@ (800203c <StartTsHandlerTask+0xc8>)
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	f00f fcf4 	bl	80119c4 <xQueueGenericSend>
        gamePaused = 0;
 8001fdc:	4b16      	ldr	r3, [pc, #88]	@ (8002038 <StartTsHandlerTask+0xc4>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	e00f      	b.n	8002004 <StartTsHandlerTask+0x90>
      }
      else if (!gameStarted) {
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8002024 <StartTsHandlerTask+0xb0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d108      	bne.n	8001ffe <StartTsHandlerTask+0x8a>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8001fec:	4811      	ldr	r0, [pc, #68]	@ (8002034 <StartTsHandlerTask+0xc0>)
 8001fee:	f002 fced 	bl	80049cc <BSP_LCD_Clear>
        restartGame();
 8001ff2:	f000 f907 	bl	8002204 <restartGame>
        gameStarted = 1;
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8002024 <StartTsHandlerTask+0xb0>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	e002      	b.n	8002004 <StartTsHandlerTask+0x90>
      }
      else {
        gamePaused = 1;
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <StartTsHandlerTask+0xc4>)
 8002000:	2201      	movs	r2, #1
 8002002:	601a      	str	r2, [r3, #0]
      }
    }

    if (TS_State.touchDetected) {
 8002004:	4b08      	ldr	r3, [pc, #32]	@ (8002028 <StartTsHandlerTask+0xb4>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <StartTsHandlerTask+0xa0>
      screenPressed = 1;
 800200c:	4b07      	ldr	r3, [pc, #28]	@ (800202c <StartTsHandlerTask+0xb8>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	e002      	b.n	800201a <StartTsHandlerTask+0xa6>
    }
    else {
      screenPressed = 0;
 8002014:	4b05      	ldr	r3, [pc, #20]	@ (800202c <StartTsHandlerTask+0xb8>)
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
    }

    osDelay(10);
 800201a:	200a      	movs	r0, #10
 800201c:	f00f f8aa 	bl	8011174 <osDelay>
    if (!gameStarted)
 8002020:	e7ac      	b.n	8001f7c <StartTsHandlerTask+0x8>
 8002022:	bf00      	nop
 8002024:	200002d4 	.word	0x200002d4
 8002028:	20000218 	.word	0x20000218
 800202c:	20000244 	.word	0x20000244
 8002030:	200002dc 	.word	0x200002dc
 8002034:	ff81cd4b 	.word	0xff81cd4b
 8002038:	200002d8 	.word	0x200002d8
 800203c:	200003f4 	.word	0x200003f4

08002040 <whatBodyPart>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
enum BodyPart whatBodyPart(uint8_t frontX, uint8_t frontY, uint8_t backX, uint8_t backY, uint8_t missingX, uint8_t missingY)
{
 8002040:	b490      	push	{r4, r7}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	4604      	mov	r4, r0
 8002048:	4608      	mov	r0, r1
 800204a:	4611      	mov	r1, r2
 800204c:	461a      	mov	r2, r3
 800204e:	4623      	mov	r3, r4
 8002050:	71fb      	strb	r3, [r7, #7]
 8002052:	4603      	mov	r3, r0
 8002054:	71bb      	strb	r3, [r7, #6]
 8002056:	460b      	mov	r3, r1
 8002058:	717b      	strb	r3, [r7, #5]
 800205a:	4613      	mov	r3, r2
 800205c:	713b      	strb	r3, [r7, #4]
  /*
    . F .
    . X .
    . B .
  */
  if (frontX == backX)
 800205e:	79fa      	ldrb	r2, [r7, #7]
 8002060:	797b      	ldrb	r3, [r7, #5]
 8002062:	429a      	cmp	r2, r3
 8002064:	d101      	bne.n	800206a <whatBodyPart+0x2a>
    return BottomTop;
 8002066:	2302      	movs	r3, #2
 8002068:	e046      	b.n	80020f8 <whatBodyPart+0xb8>
  /*
    . . .
    F X B
    . . .
  */
  if (frontY == backY)
 800206a:	79ba      	ldrb	r2, [r7, #6]
 800206c:	793b      	ldrb	r3, [r7, #4]
 800206e:	429a      	cmp	r2, r3
 8002070:	d101      	bne.n	8002076 <whatBodyPart+0x36>
    return LeftRight;
 8002072:	2303      	movs	r3, #3
 8002074:	e040      	b.n	80020f8 <whatBodyPart+0xb8>
  /*
    . B .       . . .
    F X .       . X B
    . . .       . F .
  */
  if (frontX < backX && frontY > backY) {
 8002076:	79fa      	ldrb	r2, [r7, #7]
 8002078:	797b      	ldrb	r3, [r7, #5]
 800207a:	429a      	cmp	r2, r3
 800207c:	d20b      	bcs.n	8002096 <whatBodyPart+0x56>
 800207e:	79ba      	ldrb	r2, [r7, #6]
 8002080:	793b      	ldrb	r3, [r7, #4]
 8002082:	429a      	cmp	r2, r3
 8002084:	d907      	bls.n	8002096 <whatBodyPart+0x56>
    if (missingX == frontX)
 8002086:	7c3a      	ldrb	r2, [r7, #16]
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	429a      	cmp	r2, r3
 800208c:	d101      	bne.n	8002092 <whatBodyPart+0x52>
      return BottomRight;
 800208e:	2301      	movs	r3, #1
 8002090:	e032      	b.n	80020f8 <whatBodyPart+0xb8>
    else
      return LeftTop;
 8002092:	2304      	movs	r3, #4
 8002094:	e030      	b.n	80020f8 <whatBodyPart+0xb8>
  /*
    . . .       . F .
    F X .       . X B
    . B .       . . .
  */
  if (frontX < backX && frontY < backY) {
 8002096:	79fa      	ldrb	r2, [r7, #7]
 8002098:	797b      	ldrb	r3, [r7, #5]
 800209a:	429a      	cmp	r2, r3
 800209c:	d20b      	bcs.n	80020b6 <whatBodyPart+0x76>
 800209e:	79ba      	ldrb	r2, [r7, #6]
 80020a0:	793b      	ldrb	r3, [r7, #4]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d207      	bcs.n	80020b6 <whatBodyPart+0x76>
    if (missingX == frontX)
 80020a6:	7c3a      	ldrb	r2, [r7, #16]
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d101      	bne.n	80020b2 <whatBodyPart+0x72>
      return RightTop;
 80020ae:	2305      	movs	r3, #5
 80020b0:	e022      	b.n	80020f8 <whatBodyPart+0xb8>
    else
      return BottomLeft;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e020      	b.n	80020f8 <whatBodyPart+0xb8>
  /*
    . . .       . F .
    . X F       B X .
    . B .       . . .
  */
  if (frontX > backX && frontY < backY) {
 80020b6:	79fa      	ldrb	r2, [r7, #7]
 80020b8:	797b      	ldrb	r3, [r7, #5]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d90b      	bls.n	80020d6 <whatBodyPart+0x96>
 80020be:	79ba      	ldrb	r2, [r7, #6]
 80020c0:	793b      	ldrb	r3, [r7, #4]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d207      	bcs.n	80020d6 <whatBodyPart+0x96>
    if (missingX == frontX)
 80020c6:	7c3a      	ldrb	r2, [r7, #16]
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d101      	bne.n	80020d2 <whatBodyPart+0x92>
      return LeftTop;
 80020ce:	2304      	movs	r3, #4
 80020d0:	e012      	b.n	80020f8 <whatBodyPart+0xb8>
    else
      return BottomRight;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e010      	b.n	80020f8 <whatBodyPart+0xb8>
  /*
    . B .       . . .
    . X F       B X .
    . . .       . F .
  */
  if (frontX > backX && frontY > backY) {
 80020d6:	79fa      	ldrb	r2, [r7, #7]
 80020d8:	797b      	ldrb	r3, [r7, #5]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d90b      	bls.n	80020f6 <whatBodyPart+0xb6>
 80020de:	79ba      	ldrb	r2, [r7, #6]
 80020e0:	793b      	ldrb	r3, [r7, #4]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d907      	bls.n	80020f6 <whatBodyPart+0xb6>
    if (missingX == frontX)
 80020e6:	7c3a      	ldrb	r2, [r7, #16]
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d101      	bne.n	80020f2 <whatBodyPart+0xb2>
      return BottomLeft;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e002      	b.n	80020f8 <whatBodyPart+0xb8>
    else
      return RightTop;
 80020f2:	2305      	movs	r3, #5
 80020f4:	e000      	b.n	80020f8 <whatBodyPart+0xb8>
  }

  return BottomTop; // should never happen
 80020f6:	2302      	movs	r3, #2
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc90      	pop	{r4, r7}
 8002100:	4770      	bx	lr
	...

08002104 <isSnakePosition>:


uint8_t isSnakePosition(uint8_t x, uint8_t y)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	460a      	mov	r2, r1
 800210e:	71fb      	strb	r3, [r7, #7]
 8002110:	4613      	mov	r3, r2
 8002112:	71bb      	strb	r3, [r7, #6]
  if (x == snakeHeadPosition[0] && y == snakeHeadPosition[1])
 8002114:	4b1d      	ldr	r3, [pc, #116]	@ (800218c <isSnakePosition+0x88>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	79fa      	ldrb	r2, [r7, #7]
 800211a:	429a      	cmp	r2, r3
 800211c:	d106      	bne.n	800212c <isSnakePosition+0x28>
 800211e:	4b1b      	ldr	r3, [pc, #108]	@ (800218c <isSnakePosition+0x88>)
 8002120:	785b      	ldrb	r3, [r3, #1]
 8002122:	79ba      	ldrb	r2, [r7, #6]
 8002124:	429a      	cmp	r2, r3
 8002126:	d101      	bne.n	800212c <isSnakePosition+0x28>
    return 1;
 8002128:	2301      	movs	r3, #1
 800212a:	e029      	b.n	8002180 <isSnakePosition+0x7c>

  for (int i = 0; i < snakeSize; i++) {
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	e013      	b.n	800215a <isSnakePosition+0x56>
    if (x == snakeBodyPosition[i][0] && y == snakeBodyPosition[i][1])
 8002132:	4a17      	ldr	r2, [pc, #92]	@ (8002190 <isSnakePosition+0x8c>)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800213a:	79fa      	ldrb	r2, [r7, #7]
 800213c:	429a      	cmp	r2, r3
 800213e:	d109      	bne.n	8002154 <isSnakePosition+0x50>
 8002140:	4a13      	ldr	r2, [pc, #76]	@ (8002190 <isSnakePosition+0x8c>)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	785b      	ldrb	r3, [r3, #1]
 800214a:	79ba      	ldrb	r2, [r7, #6]
 800214c:	429a      	cmp	r2, r3
 800214e:	d101      	bne.n	8002154 <isSnakePosition+0x50>
      return 1;
 8002150:	2301      	movs	r3, #1
 8002152:	e015      	b.n	8002180 <isSnakePosition+0x7c>
  for (int i = 0; i < snakeSize; i++) {
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	3301      	adds	r3, #1
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b0e      	ldr	r3, [pc, #56]	@ (8002194 <isSnakePosition+0x90>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4293      	cmp	r3, r2
 8002164:	dbe5      	blt.n	8002132 <isSnakePosition+0x2e>
  }

  if (x == snakeTailPosition[0] && y == snakeTailPosition[1])
 8002166:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <isSnakePosition+0x94>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	79fa      	ldrb	r2, [r7, #7]
 800216c:	429a      	cmp	r2, r3
 800216e:	d106      	bne.n	800217e <isSnakePosition+0x7a>
 8002170:	4b09      	ldr	r3, [pc, #36]	@ (8002198 <isSnakePosition+0x94>)
 8002172:	785b      	ldrb	r3, [r3, #1]
 8002174:	79ba      	ldrb	r2, [r7, #6]
 8002176:	429a      	cmp	r2, r3
 8002178:	d101      	bne.n	800217e <isSnakePosition+0x7a>
    return 1;
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <isSnakePosition+0x7c>

  return 0;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	20000004 	.word	0x20000004
 8002190:	200002e4 	.word	0x200002e4
 8002194:	200002cc 	.word	0x200002cc
 8002198:	20000008 	.word	0x20000008

0800219c <isApplePosition>:

uint8_t isApplePosition(uint8_t x, uint8_t y, uint8_t appleIndex)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
 80021a6:	460b      	mov	r3, r1
 80021a8:	71bb      	strb	r3, [r7, #6]
 80021aa:	4613      	mov	r3, r2
 80021ac:	717b      	strb	r3, [r7, #5]
  for (int i = 0; i < NBApple; i++) {
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	e019      	b.n	80021e8 <isApplePosition+0x4c>
    if (i == appleIndex)
 80021b4:	797b      	ldrb	r3, [r7, #5]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d011      	beq.n	80021e0 <isApplePosition+0x44>
      continue;

    if (x == applePosition[i][0] && y == applePosition[i][1])
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	4910      	ldr	r1, [pc, #64]	@ (8002200 <isApplePosition+0x64>)
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	f911 2012 	ldrsb.w	r2, [r1, r2, lsl #1]
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d10b      	bne.n	80021e2 <isApplePosition+0x46>
 80021ca:	79ba      	ldrb	r2, [r7, #6]
 80021cc:	490c      	ldr	r1, [pc, #48]	@ (8002200 <isApplePosition+0x64>)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	440b      	add	r3, r1
 80021d4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d102      	bne.n	80021e2 <isApplePosition+0x46>
      return 1;
 80021dc:	2301      	movs	r3, #1
 80021de:	e009      	b.n	80021f4 <isApplePosition+0x58>
      continue;
 80021e0:	bf00      	nop
  for (int i = 0; i < NBApple; i++) {
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3301      	adds	r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	2304      	movs	r3, #4
 80021ea:	461a      	mov	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4293      	cmp	r3, r2
 80021f0:	dbe0      	blt.n	80021b4 <isApplePosition+0x18>
  }

  return 0;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	200003d8 	.word	0x200003d8

08002204 <restartGame>:

void restartGame()
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
  gameOver = 0;
 800220a:	4b3a      	ldr	r3, [pc, #232]	@ (80022f4 <restartGame+0xf0>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
  lastMove = 0;
 8002210:	4b39      	ldr	r3, [pc, #228]	@ (80022f8 <restartGame+0xf4>)
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
  snakeSize = 0;
 8002216:	4b39      	ldr	r3, [pc, #228]	@ (80022fc <restartGame+0xf8>)
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
  snakeHeadPosition[0] = 7;
 800221c:	4b38      	ldr	r3, [pc, #224]	@ (8002300 <restartGame+0xfc>)
 800221e:	2207      	movs	r2, #7
 8002220:	701a      	strb	r2, [r3, #0]
  snakeHeadPosition[1] = 6;
 8002222:	4b37      	ldr	r3, [pc, #220]	@ (8002300 <restartGame+0xfc>)
 8002224:	2206      	movs	r2, #6
 8002226:	705a      	strb	r2, [r3, #1]
  snakeTailPosition[0] = 7;
 8002228:	4b36      	ldr	r3, [pc, #216]	@ (8002304 <restartGame+0x100>)
 800222a:	2207      	movs	r2, #7
 800222c:	701a      	strb	r2, [r3, #0]
  snakeTailPosition[1] = 7;
 800222e:	4b35      	ldr	r3, [pc, #212]	@ (8002304 <restartGame+0x100>)
 8002230:	2207      	movs	r2, #7
 8002232:	705a      	strb	r2, [r3, #1]
  direction = Up;
 8002234:	4b34      	ldr	r3, [pc, #208]	@ (8002308 <restartGame+0x104>)
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
  headPart = HeadTop;
 800223a:	4b34      	ldr	r3, [pc, #208]	@ (800230c <restartGame+0x108>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
  tailPart = TailTop;
 8002240:	4b33      	ldr	r3, [pc, #204]	@ (8002310 <restartGame+0x10c>)
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]

  for (int i = 0; i < NBApple; i++) {
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	e047      	b.n	80022dc <restartGame+0xd8>
    do {
      applePosition[i][0] = rand() % gridSizeX;
 800224c:	f011 ff36 	bl	80140bc <rand>
 8002250:	4603      	mov	r3, r0
 8002252:	220f      	movs	r2, #15
 8002254:	fb93 f1f2 	sdiv	r1, r3, r2
 8002258:	fb01 f202 	mul.w	r2, r1, r2
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	b259      	sxtb	r1, r3
 8002260:	4a2c      	ldr	r2, [pc, #176]	@ (8002314 <restartGame+0x110>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
      applePosition[i][1] = rand() % gridSizeY;
 8002268:	f011 ff28 	bl	80140bc <rand>
 800226c:	4603      	mov	r3, r0
 800226e:	2208      	movs	r2, #8
 8002270:	fb93 f1f2 	sdiv	r1, r3, r2
 8002274:	fb01 f202 	mul.w	r2, r1, r2
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	b259      	sxtb	r1, r3
 800227c:	4a25      	ldr	r2, [pc, #148]	@ (8002314 <restartGame+0x110>)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	460a      	mov	r2, r1
 8002286:	705a      	strb	r2, [r3, #1]
    } while (isSnakePosition(applePosition[i][0], applePosition[i][1]) || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 8002288:	4a22      	ldr	r2, [pc, #136]	@ (8002314 <restartGame+0x110>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4920      	ldr	r1, [pc, #128]	@ (8002314 <restartGame+0x110>)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	440b      	add	r3, r1
 800229a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f7ff ff2e 	bl	8002104 <isSnakePosition>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1ce      	bne.n	800224c <restartGame+0x48>
 80022ae:	4a19      	ldr	r2, [pc, #100]	@ (8002314 <restartGame+0x110>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 80022b6:	b2d8      	uxtb	r0, r3
 80022b8:	4a16      	ldr	r2, [pc, #88]	@ (8002314 <restartGame+0x110>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4413      	add	r3, r2
 80022c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	f7ff ff66 	bl	800219c <isApplePosition>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1ba      	bne.n	800224c <restartGame+0x48>
  for (int i = 0; i < NBApple; i++) {
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3301      	adds	r3, #1
 80022da:	607b      	str	r3, [r7, #4]
 80022dc:	2304      	movs	r3, #4
 80022de:	461a      	mov	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4293      	cmp	r3, r2
 80022e4:	dbb2      	blt.n	800224c <restartGame+0x48>
  }

  BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 80022e6:	480c      	ldr	r0, [pc, #48]	@ (8002318 <restartGame+0x114>)
 80022e8:	f002 fb70 	bl	80049cc <BSP_LCD_Clear>
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	200002dc 	.word	0x200002dc
 80022f8:	200002e0 	.word	0x200002e0
 80022fc:	200002cc 	.word	0x200002cc
 8002300:	20000004 	.word	0x20000004
 8002304:	20000008 	.word	0x20000008
 8002308:	20000250 	.word	0x20000250
 800230c:	20000251 	.word	0x20000251
 8002310:	20000001 	.word	0x20000001
 8002314:	200003d8 	.word	0x200003d8
 8002318:	ff81cd4b 	.word	0xff81cd4b

0800231c <displayGameStatus>:

void displayGameStatus()
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  if (gameOver) {
 8002320:	4b27      	ldr	r3, [pc, #156]	@ (80023c0 <displayGameStatus+0xa4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d015      	beq.n	8002354 <displayGameStatus+0x38>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8002328:	4826      	ldr	r0, [pc, #152]	@ (80023c4 <displayGameStatus+0xa8>)
 800232a:	f002 fb03 	bl	8004934 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 800232e:	4826      	ldr	r0, [pc, #152]	@ (80023c8 <displayGameStatus+0xac>)
 8002330:	f002 fb32 	bl	8004998 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Over", CENTER_MODE);
 8002334:	2301      	movs	r3, #1
 8002336:	4a25      	ldr	r2, [pc, #148]	@ (80023cc <displayGameStatus+0xb0>)
 8002338:	2164      	movs	r1, #100	@ 0x64
 800233a:	2000      	movs	r0, #0
 800233c:	f002 fbb2 	bl	8004aa4 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 8002340:	4823      	ldr	r0, [pc, #140]	@ (80023d0 <displayGameStatus+0xb4>)
 8002342:	f002 fb29 	bl	8004998 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to restart", CENTER_MODE);
 8002346:	2301      	movs	r3, #1
 8002348:	4a22      	ldr	r2, [pc, #136]	@ (80023d4 <displayGameStatus+0xb8>)
 800234a:	2182      	movs	r1, #130	@ 0x82
 800234c:	2000      	movs	r0, #0
 800234e:	f002 fba9 	bl	8004aa4 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font24);
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
    BSP_LCD_SetFont(&Font16);
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
  }
}
 8002352:	e032      	b.n	80023ba <displayGameStatus+0x9e>
  else if (gamePaused) {
 8002354:	4b20      	ldr	r3, [pc, #128]	@ (80023d8 <displayGameStatus+0xbc>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d015      	beq.n	8002388 <displayGameStatus+0x6c>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 800235c:	4819      	ldr	r0, [pc, #100]	@ (80023c4 <displayGameStatus+0xa8>)
 800235e:	f002 fae9 	bl	8004934 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 8002362:	4819      	ldr	r0, [pc, #100]	@ (80023c8 <displayGameStatus+0xac>)
 8002364:	f002 fb18 	bl	8004998 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Paused", CENTER_MODE);
 8002368:	2301      	movs	r3, #1
 800236a:	4a1c      	ldr	r2, [pc, #112]	@ (80023dc <displayGameStatus+0xc0>)
 800236c:	2164      	movs	r1, #100	@ 0x64
 800236e:	2000      	movs	r0, #0
 8002370:	f002 fb98 	bl	8004aa4 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 8002374:	4816      	ldr	r0, [pc, #88]	@ (80023d0 <displayGameStatus+0xb4>)
 8002376:	f002 fb0f 	bl	8004998 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to resume", CENTER_MODE);
 800237a:	2301      	movs	r3, #1
 800237c:	4a18      	ldr	r2, [pc, #96]	@ (80023e0 <displayGameStatus+0xc4>)
 800237e:	2182      	movs	r1, #130	@ 0x82
 8002380:	2000      	movs	r0, #0
 8002382:	f002 fb8f 	bl	8004aa4 <BSP_LCD_DisplayStringAt>
}
 8002386:	e018      	b.n	80023ba <displayGameStatus+0x9e>
  else if (!gameStarted) {
 8002388:	4b16      	ldr	r3, [pc, #88]	@ (80023e4 <displayGameStatus+0xc8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d114      	bne.n	80023ba <displayGameStatus+0x9e>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8002390:	480c      	ldr	r0, [pc, #48]	@ (80023c4 <displayGameStatus+0xa8>)
 8002392:	f002 facf 	bl	8004934 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 8002396:	480c      	ldr	r0, [pc, #48]	@ (80023c8 <displayGameStatus+0xac>)
 8002398:	f002 fafe 	bl	8004998 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
 800239c:	2301      	movs	r3, #1
 800239e:	4a12      	ldr	r2, [pc, #72]	@ (80023e8 <displayGameStatus+0xcc>)
 80023a0:	2164      	movs	r1, #100	@ 0x64
 80023a2:	2000      	movs	r0, #0
 80023a4:	f002 fb7e 	bl	8004aa4 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 80023a8:	4809      	ldr	r0, [pc, #36]	@ (80023d0 <displayGameStatus+0xb4>)
 80023aa:	f002 faf5 	bl	8004998 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
 80023ae:	2301      	movs	r3, #1
 80023b0:	4a0e      	ldr	r2, [pc, #56]	@ (80023ec <displayGameStatus+0xd0>)
 80023b2:	2182      	movs	r1, #130	@ 0x82
 80023b4:	2000      	movs	r0, #0
 80023b6:	f002 fb75 	bl	8004aa4 <BSP_LCD_DisplayStringAt>
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200002dc 	.word	0x200002dc
 80023c4:	ffa52a2a 	.word	0xffa52a2a
 80023c8:	20000038 	.word	0x20000038
 80023cc:	08015628 	.word	0x08015628
 80023d0:	20000040 	.word	0x20000040
 80023d4:	08015634 	.word	0x08015634
 80023d8:	200002d8 	.word	0x200002d8
 80023dc:	08015650 	.word	0x08015650
 80023e0:	0801565c 	.word	0x0801565c
 80023e4:	200002d4 	.word	0x200002d4
 80023e8:	08015678 	.word	0x08015678
 80023ec:	08015684 	.word	0x08015684

080023f0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80023fa:	20c8      	movs	r0, #200	@ 0xc8
 80023fc:	f001 fda0 	bl	8003f40 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002400:	f000 fa7a 	bl	80028f8 <ft5336_I2C_InitializeIfRequired>
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8002434:	2300      	movs	r3, #0
 8002436:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002438:	f000 fa5e 	bl	80028f8 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]
 8002440:	e010      	b.n	8002464 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	21a8      	movs	r1, #168	@ 0xa8
 8002448:	4618      	mov	r0, r3
 800244a:	f001 fd5b 	bl	8003f04 <TS_IO_Read>
 800244e:	4603      	mov	r3, r0
 8002450:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8002452:	7b7b      	ldrb	r3, [r7, #13]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b51      	cmp	r3, #81	@ 0x51
 8002458:	d101      	bne.n	800245e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800245a:	2301      	movs	r3, #1
 800245c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	3301      	adds	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d802      	bhi.n	8002470 <ft5336_ReadID+0x4e>
 800246a:	7bbb      	ldrb	r3, [r7, #14]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0e8      	beq.n	8002442 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8002470:	7b7b      	ldrb	r3, [r7, #13]
 8002472:	b2db      	uxtb	r3, r3
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8002486:	88fb      	ldrh	r3, [r7, #6]
 8002488:	4618      	mov	r0, r3
 800248a:	f000 fa45 	bl	8002918 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	4618      	mov	r0, r3
 8002492:	f000 f933 	bl	80026fc <ft5336_TS_DisableIT>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2102      	movs	r1, #2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f001 fd25 	bl	8003f04 <TS_IO_Read>
 80024ba:	4603      	mov	r3, r0
 80024bc:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b05      	cmp	r3, #5
 80024d0:	d901      	bls.n	80024d6 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	4b05      	ldr	r3, [pc, #20]	@ (80024f0 <ft5336_TS_DetectTouch+0x50>)
 80024dc:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80024de:	4b04      	ldr	r3, [pc, #16]	@ (80024f0 <ft5336_TS_DetectTouch+0x50>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	b2db      	uxtb	r3, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20000698 	.word	0x20000698

080024f4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8002516:	4b6d      	ldr	r3, [pc, #436]	@ (80026cc <ft5336_TS_GetXY+0x1d8>)
 8002518:	789a      	ldrb	r2, [r3, #2]
 800251a:	4b6c      	ldr	r3, [pc, #432]	@ (80026cc <ft5336_TS_GetXY+0x1d8>)
 800251c:	785b      	ldrb	r3, [r3, #1]
 800251e:	429a      	cmp	r2, r3
 8002520:	f080 80cf 	bcs.w	80026c2 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8002524:	4b69      	ldr	r3, [pc, #420]	@ (80026cc <ft5336_TS_GetXY+0x1d8>)
 8002526:	789b      	ldrb	r3, [r3, #2]
 8002528:	2b09      	cmp	r3, #9
 800252a:	d871      	bhi.n	8002610 <ft5336_TS_GetXY+0x11c>
 800252c:	a201      	add	r2, pc, #4	@ (adr r2, 8002534 <ft5336_TS_GetXY+0x40>)
 800252e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002532:	bf00      	nop
 8002534:	0800255d 	.word	0x0800255d
 8002538:	0800256f 	.word	0x0800256f
 800253c:	08002581 	.word	0x08002581
 8002540:	08002593 	.word	0x08002593
 8002544:	080025a5 	.word	0x080025a5
 8002548:	080025b7 	.word	0x080025b7
 800254c:	080025c9 	.word	0x080025c9
 8002550:	080025db 	.word	0x080025db
 8002554:	080025ed 	.word	0x080025ed
 8002558:	080025ff 	.word	0x080025ff
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800255c:	2304      	movs	r3, #4
 800255e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8002560:	2303      	movs	r3, #3
 8002562:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8002564:	2306      	movs	r3, #6
 8002566:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8002568:	2305      	movs	r3, #5
 800256a:	753b      	strb	r3, [r7, #20]
      break;
 800256c:	e051      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800256e:	230a      	movs	r3, #10
 8002570:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8002572:	2309      	movs	r3, #9
 8002574:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8002576:	230c      	movs	r3, #12
 8002578:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800257a:	230b      	movs	r3, #11
 800257c:	753b      	strb	r3, [r7, #20]
      break;
 800257e:	e048      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8002580:	2310      	movs	r3, #16
 8002582:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8002584:	230f      	movs	r3, #15
 8002586:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8002588:	2312      	movs	r3, #18
 800258a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800258c:	2311      	movs	r3, #17
 800258e:	753b      	strb	r3, [r7, #20]
      break;
 8002590:	e03f      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8002592:	2316      	movs	r3, #22
 8002594:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8002596:	2315      	movs	r3, #21
 8002598:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800259a:	2318      	movs	r3, #24
 800259c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800259e:	2317      	movs	r3, #23
 80025a0:	753b      	strb	r3, [r7, #20]
      break;
 80025a2:	e036      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80025a4:	231c      	movs	r3, #28
 80025a6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80025a8:	231b      	movs	r3, #27
 80025aa:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80025ac:	231e      	movs	r3, #30
 80025ae:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80025b0:	231d      	movs	r3, #29
 80025b2:	753b      	strb	r3, [r7, #20]
      break;
 80025b4:	e02d      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80025b6:	2322      	movs	r3, #34	@ 0x22
 80025b8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80025ba:	2321      	movs	r3, #33	@ 0x21
 80025bc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80025be:	2324      	movs	r3, #36	@ 0x24
 80025c0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80025c2:	2323      	movs	r3, #35	@ 0x23
 80025c4:	753b      	strb	r3, [r7, #20]
      break;
 80025c6:	e024      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80025c8:	2328      	movs	r3, #40	@ 0x28
 80025ca:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80025cc:	2327      	movs	r3, #39	@ 0x27
 80025ce:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80025d0:	232a      	movs	r3, #42	@ 0x2a
 80025d2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80025d4:	2329      	movs	r3, #41	@ 0x29
 80025d6:	753b      	strb	r3, [r7, #20]
      break;
 80025d8:	e01b      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80025da:	232e      	movs	r3, #46	@ 0x2e
 80025dc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80025de:	232d      	movs	r3, #45	@ 0x2d
 80025e0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80025e2:	2330      	movs	r3, #48	@ 0x30
 80025e4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80025e6:	232f      	movs	r3, #47	@ 0x2f
 80025e8:	753b      	strb	r3, [r7, #20]
      break;
 80025ea:	e012      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80025ec:	2334      	movs	r3, #52	@ 0x34
 80025ee:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80025f0:	2333      	movs	r3, #51	@ 0x33
 80025f2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80025f4:	2336      	movs	r3, #54	@ 0x36
 80025f6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80025f8:	2335      	movs	r3, #53	@ 0x35
 80025fa:	753b      	strb	r3, [r7, #20]
      break;
 80025fc:	e009      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80025fe:	233a      	movs	r3, #58	@ 0x3a
 8002600:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8002602:	2339      	movs	r3, #57	@ 0x39
 8002604:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8002606:	233c      	movs	r3, #60	@ 0x3c
 8002608:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800260a:	233b      	movs	r3, #59	@ 0x3b
 800260c:	753b      	strb	r3, [r7, #20]
      break;
 800260e:	e000      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8002610:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8002612:	89fb      	ldrh	r3, [r7, #14]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	7dfa      	ldrb	r2, [r7, #23]
 8002618:	4611      	mov	r1, r2
 800261a:	4618      	mov	r0, r3
 800261c:	f001 fc72 	bl	8003f04 <TS_IO_Read>
 8002620:	4603      	mov	r3, r0
 8002622:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	4b29      	ldr	r3, [pc, #164]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 800262c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800262e:	89fb      	ldrh	r3, [r7, #14]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	7dba      	ldrb	r2, [r7, #22]
 8002634:	4611      	mov	r1, r2
 8002636:	4618      	mov	r0, r3
 8002638:	f001 fc64 	bl	8003f04 <TS_IO_Read>
 800263c:	4603      	mov	r3, r0
 800263e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8002640:	7cfb      	ldrb	r3, [r7, #19]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	021b      	lsls	r3, r3, #8
 8002646:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800264a:	b21a      	sxth	r2, r3
 800264c:	4b20      	ldr	r3, [pc, #128]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	b21b      	sxth	r3, r3
 8002652:	4313      	orrs	r3, r2
 8002654:	b21b      	sxth	r3, r3
 8002656:	b29a      	uxth	r2, r3
 8002658:	4b1d      	ldr	r3, [pc, #116]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 800265a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800265c:	4b1c      	ldr	r3, [pc, #112]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 800265e:	881a      	ldrh	r2, [r3, #0]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8002664:	89fb      	ldrh	r3, [r7, #14]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	7d7a      	ldrb	r2, [r7, #21]
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f001 fc49 	bl	8003f04 <TS_IO_Read>
 8002672:	4603      	mov	r3, r0
 8002674:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8002676:	7cfb      	ldrb	r3, [r7, #19]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	4b14      	ldr	r3, [pc, #80]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 800267e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8002680:	89fb      	ldrh	r3, [r7, #14]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	7d3a      	ldrb	r2, [r7, #20]
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f001 fc3b 	bl	8003f04 <TS_IO_Read>
 800268e:	4603      	mov	r3, r0
 8002690:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8002692:	7cfb      	ldrb	r3, [r7, #19]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800269c:	b21a      	sxth	r2, r3
 800269e:	4b0c      	ldr	r3, [pc, #48]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	b21b      	sxth	r3, r3
 80026a4:	4313      	orrs	r3, r2
 80026a6:	b21b      	sxth	r3, r3
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	4b09      	ldr	r3, [pc, #36]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 80026ac:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80026ae:	4b08      	ldr	r3, [pc, #32]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 80026b0:	881a      	ldrh	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80026b6:	4b05      	ldr	r3, [pc, #20]	@ (80026cc <ft5336_TS_GetXY+0x1d8>)
 80026b8:	789b      	ldrb	r3, [r3, #2]
 80026ba:	3301      	adds	r3, #1
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4b03      	ldr	r3, [pc, #12]	@ (80026cc <ft5336_TS_GetXY+0x1d8>)
 80026c0:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80026c2:	bf00      	nop
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000698 	.word	0x20000698
 80026d0:	2000069c 	.word	0x2000069c

080026d4 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80026e2:	2301      	movs	r3, #1
 80026e4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	7bfa      	ldrb	r2, [r7, #15]
 80026ec:	21a4      	movs	r1, #164	@ 0xa4
 80026ee:	4618      	mov	r0, r3
 80026f0:	f001 fbee 	bl	8003ed0 <TS_IO_Write>
}
 80026f4:	bf00      	nop
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800270a:	2300      	movs	r3, #0
 800270c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	b2db      	uxtb	r3, r3
 8002712:	7bfa      	ldrb	r2, [r7, #15]
 8002714:	21a4      	movs	r1, #164	@ 0xa4
 8002716:	4618      	mov	r0, r3
 8002718:	f001 fbda 	bl	8003ed0 <TS_IO_Write>
}
 800271c:	bf00      	nop
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	4603      	mov	r3, r0
 800275a:	6039      	str	r1, [r7, #0]
 800275c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2101      	movs	r1, #1
 8002768:	4618      	mov	r0, r3
 800276a:	f001 fbcb 	bl	8003f04 <TS_IO_Read>
 800276e:	4603      	mov	r3, r0
 8002770:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	601a      	str	r2, [r3, #0]
}
 800277c:	bf00      	nop
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	4603      	mov	r3, r0
 8002792:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80027a4:	4b4d      	ldr	r3, [pc, #308]	@ (80028dc <ft5336_TS_GetTouchInfo+0x158>)
 80027a6:	785b      	ldrb	r3, [r3, #1]
 80027a8:	461a      	mov	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	4293      	cmp	r3, r2
 80027ae:	f080 8090 	bcs.w	80028d2 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b09      	cmp	r3, #9
 80027b6:	d85d      	bhi.n	8002874 <ft5336_TS_GetTouchInfo+0xf0>
 80027b8:	a201      	add	r2, pc, #4	@ (adr r2, 80027c0 <ft5336_TS_GetTouchInfo+0x3c>)
 80027ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027be:	bf00      	nop
 80027c0:	080027e9 	.word	0x080027e9
 80027c4:	080027f7 	.word	0x080027f7
 80027c8:	08002805 	.word	0x08002805
 80027cc:	08002813 	.word	0x08002813
 80027d0:	08002821 	.word	0x08002821
 80027d4:	0800282f 	.word	0x0800282f
 80027d8:	0800283d 	.word	0x0800283d
 80027dc:	0800284b 	.word	0x0800284b
 80027e0:	08002859 	.word	0x08002859
 80027e4:	08002867 	.word	0x08002867
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80027e8:	2303      	movs	r3, #3
 80027ea:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80027ec:	2307      	movs	r3, #7
 80027ee:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80027f0:	2308      	movs	r3, #8
 80027f2:	757b      	strb	r3, [r7, #21]
      break;
 80027f4:	e03f      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80027f6:	2309      	movs	r3, #9
 80027f8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80027fa:	230d      	movs	r3, #13
 80027fc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80027fe:	230e      	movs	r3, #14
 8002800:	757b      	strb	r3, [r7, #21]
      break;
 8002802:	e038      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8002804:	230f      	movs	r3, #15
 8002806:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8002808:	2313      	movs	r3, #19
 800280a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 800280c:	2314      	movs	r3, #20
 800280e:	757b      	strb	r3, [r7, #21]
      break;
 8002810:	e031      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8002812:	2315      	movs	r3, #21
 8002814:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8002816:	2319      	movs	r3, #25
 8002818:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 800281a:	231a      	movs	r3, #26
 800281c:	757b      	strb	r3, [r7, #21]
      break;
 800281e:	e02a      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8002820:	231b      	movs	r3, #27
 8002822:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8002824:	231f      	movs	r3, #31
 8002826:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8002828:	2320      	movs	r3, #32
 800282a:	757b      	strb	r3, [r7, #21]
      break;
 800282c:	e023      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800282e:	2321      	movs	r3, #33	@ 0x21
 8002830:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8002832:	2325      	movs	r3, #37	@ 0x25
 8002834:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8002836:	2326      	movs	r3, #38	@ 0x26
 8002838:	757b      	strb	r3, [r7, #21]
      break;
 800283a:	e01c      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 800283c:	2327      	movs	r3, #39	@ 0x27
 800283e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8002840:	232b      	movs	r3, #43	@ 0x2b
 8002842:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8002844:	232c      	movs	r3, #44	@ 0x2c
 8002846:	757b      	strb	r3, [r7, #21]
      break;
 8002848:	e015      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 800284a:	232d      	movs	r3, #45	@ 0x2d
 800284c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800284e:	2331      	movs	r3, #49	@ 0x31
 8002850:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8002852:	2332      	movs	r3, #50	@ 0x32
 8002854:	757b      	strb	r3, [r7, #21]
      break;
 8002856:	e00e      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8002858:	2333      	movs	r3, #51	@ 0x33
 800285a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 800285c:	2337      	movs	r3, #55	@ 0x37
 800285e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8002860:	2338      	movs	r3, #56	@ 0x38
 8002862:	757b      	strb	r3, [r7, #21]
      break;
 8002864:	e007      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8002866:	2339      	movs	r3, #57	@ 0x39
 8002868:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 800286a:	233d      	movs	r3, #61	@ 0x3d
 800286c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 800286e:	233e      	movs	r3, #62	@ 0x3e
 8002870:	757b      	strb	r3, [r7, #21]
      break;
 8002872:	e000      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8002874:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8002876:	89fb      	ldrh	r3, [r7, #14]
 8002878:	b2db      	uxtb	r3, r3
 800287a:	7dfa      	ldrb	r2, [r7, #23]
 800287c:	4611      	mov	r1, r2
 800287e:	4618      	mov	r0, r3
 8002880:	f001 fb40 	bl	8003f04 <TS_IO_Read>
 8002884:	4603      	mov	r3, r0
 8002886:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8002888:	7d3b      	ldrb	r3, [r7, #20]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	119b      	asrs	r3, r3, #6
 800288e:	f003 0203 	and.w	r2, r3, #3
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8002896:	89fb      	ldrh	r3, [r7, #14]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	7dba      	ldrb	r2, [r7, #22]
 800289c:	4611      	mov	r1, r2
 800289e:	4618      	mov	r0, r3
 80028a0:	f001 fb30 	bl	8003f04 <TS_IO_Read>
 80028a4:	4603      	mov	r3, r0
 80028a6:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80028a8:	7d3b      	ldrb	r3, [r7, #20]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	461a      	mov	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80028b2:	89fb      	ldrh	r3, [r7, #14]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	7d7a      	ldrb	r2, [r7, #21]
 80028b8:	4611      	mov	r1, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f001 fb22 	bl	8003f04 <TS_IO_Read>
 80028c0:	4603      	mov	r3, r0
 80028c2:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80028c4:	7d3b      	ldrb	r3, [r7, #20]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	111b      	asrs	r3, r3, #4
 80028ca:	f003 0204 	and.w	r2, r3, #4
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000698 	.word	0x20000698

080028e0 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80028e4:	4b03      	ldr	r3, [pc, #12]	@ (80028f4 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	20000698 	.word	0x20000698

080028f8 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80028fc:	f7ff fff0 	bl	80028e0 <ft5336_Get_I2C_InitializedStatus>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d104      	bne.n	8002910 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8002906:	f001 fad9 	bl	8003ebc <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800290a:	4b02      	ldr	r3, [pc, #8]	@ (8002914 <ft5336_I2C_InitializeIfRequired+0x1c>)
 800290c:	2201      	movs	r2, #1
 800290e:	701a      	strb	r2, [r3, #0]
  }
}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000698 	.word	0x20000698

08002918 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8002926:	68fb      	ldr	r3, [r7, #12]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b090      	sub	sp, #64	@ 0x40
 8002938:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	605a      	str	r2, [r3, #4]
 8002944:	609a      	str	r2, [r3, #8]
 8002946:	60da      	str	r2, [r3, #12]
 8002948:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800294a:	4baf      	ldr	r3, [pc, #700]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	4aae      	ldr	r2, [pc, #696]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002950:	f043 0310 	orr.w	r3, r3, #16
 8002954:	6313      	str	r3, [r2, #48]	@ 0x30
 8002956:	4bac      	ldr	r3, [pc, #688]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002962:	4ba9      	ldr	r3, [pc, #676]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002966:	4aa8      	ldr	r2, [pc, #672]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800296c:	6313      	str	r3, [r2, #48]	@ 0x30
 800296e:	4ba6      	ldr	r3, [pc, #664]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002976:	627b      	str	r3, [r7, #36]	@ 0x24
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800297a:	4ba3      	ldr	r3, [pc, #652]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	4aa2      	ldr	r2, [pc, #648]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002980:	f043 0302 	orr.w	r3, r3, #2
 8002984:	6313      	str	r3, [r2, #48]	@ 0x30
 8002986:	4ba0      	ldr	r3, [pc, #640]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	623b      	str	r3, [r7, #32]
 8002990:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002992:	4b9d      	ldr	r3, [pc, #628]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	4a9c      	ldr	r2, [pc, #624]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002998:	f043 0308 	orr.w	r3, r3, #8
 800299c:	6313      	str	r3, [r2, #48]	@ 0x30
 800299e:	4b9a      	ldr	r3, [pc, #616]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	61fb      	str	r3, [r7, #28]
 80029a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029aa:	4b97      	ldr	r3, [pc, #604]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	4a96      	ldr	r2, [pc, #600]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029b0:	f043 0304 	orr.w	r3, r3, #4
 80029b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b6:	4b94      	ldr	r3, [pc, #592]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	61bb      	str	r3, [r7, #24]
 80029c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c2:	4b91      	ldr	r3, [pc, #580]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c6:	4a90      	ldr	r2, [pc, #576]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ce:	4b8e      	ldr	r3, [pc, #568]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80029da:	4b8b      	ldr	r3, [pc, #556]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	4a8a      	ldr	r2, [pc, #552]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e6:	4b88      	ldr	r3, [pc, #544]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80029f2:	4b85      	ldr	r3, [pc, #532]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	4a84      	ldr	r2, [pc, #528]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029fe:	4b82      	ldr	r3, [pc, #520]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002a0a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a10:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a16:	4b7c      	ldr	r3, [pc, #496]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a22:	4b79      	ldr	r3, [pc, #484]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	4a78      	ldr	r2, [pc, #480]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a28:	f043 0320 	orr.w	r3, r3, #32
 8002a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2e:	4b76      	ldr	r3, [pc, #472]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	f003 0320 	and.w	r3, r3, #32
 8002a36:	607b      	str	r3, [r7, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a3a:	4b73      	ldr	r3, [pc, #460]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	4a72      	ldr	r2, [pc, #456]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a46:	4b70      	ldr	r3, [pc, #448]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a4e:	603b      	str	r3, [r7, #0]
 8002a50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2160      	movs	r1, #96	@ 0x60
 8002a56:	486d      	ldr	r0, [pc, #436]	@ (8002c0c <MX_GPIO_Init+0x2d8>)
 8002a58:	f006 ffec 	bl	8009a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	2120      	movs	r1, #32
 8002a60:	486b      	ldr	r0, [pc, #428]	@ (8002c10 <MX_GPIO_Init+0x2dc>)
 8002a62:	f006 ffe7 	bl	8009a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8002a66:	2200      	movs	r2, #0
 8002a68:	2108      	movs	r1, #8
 8002a6a:	4869      	ldr	r0, [pc, #420]	@ (8002c10 <MX_GPIO_Init+0x2dc>)
 8002a6c:	f006 ffe2 	bl	8009a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002a70:	2201      	movs	r2, #1
 8002a72:	2108      	movs	r1, #8
 8002a74:	4867      	ldr	r0, [pc, #412]	@ (8002c14 <MX_GPIO_Init+0x2e0>)
 8002a76:	f006 ffdd 	bl	8009a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a80:	4865      	ldr	r0, [pc, #404]	@ (8002c18 <MX_GPIO_Init+0x2e4>)
 8002a82:	f006 ffd7 	bl	8009a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8002a86:	2200      	movs	r2, #0
 8002a88:	f645 6140 	movw	r1, #24128	@ 0x5e40
 8002a8c:	4863      	ldr	r0, [pc, #396]	@ (8002c1c <MX_GPIO_Init+0x2e8>)
 8002a8e:	f006 ffd1 	bl	8009a34 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002a92:	2200      	movs	r2, #0
 8002a94:	21c8      	movs	r1, #200	@ 0xc8
 8002a96:	4862      	ldr	r0, [pc, #392]	@ (8002c20 <MX_GPIO_Init+0x2ec>)
 8002a98:	f006 ffcc 	bl	8009a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002a9c:	2308      	movs	r3, #8
 8002a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002aa8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002aac:	4619      	mov	r1, r3
 8002aae:	4857      	ldr	r0, [pc, #348]	@ (8002c0c <MX_GPIO_Init+0x2d8>)
 8002ab0:	f006 fcf0 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002ab4:	2304      	movs	r3, #4
 8002ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002ac4:	2309      	movs	r3, #9
 8002ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002ac8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002acc:	4619      	mov	r1, r3
 8002ace:	484f      	ldr	r0, [pc, #316]	@ (8002c0c <MX_GPIO_Init+0x2d8>)
 8002ad0:	f006 fce0 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002ad4:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8002ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ada:	2302      	movs	r3, #2
 8002adc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ae6:	230b      	movs	r3, #11
 8002ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002aea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002aee:	4619      	mov	r1, r3
 8002af0:	484b      	ldr	r0, [pc, #300]	@ (8002c20 <MX_GPIO_Init+0x2ec>)
 8002af2:	f006 fccf 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002af6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002afc:	2312      	movs	r3, #18
 8002afe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b04:	2303      	movs	r3, #3
 8002b06:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b08:	2304      	movs	r3, #4
 8002b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b10:	4619      	mov	r1, r3
 8002b12:	4844      	ldr	r0, [pc, #272]	@ (8002c24 <MX_GPIO_Init+0x2f0>)
 8002b14:	f006 fcbe 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8002b18:	f643 0323 	movw	r3, #14371	@ 0x3823
 8002b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b26:	2303      	movs	r3, #3
 8002b28:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002b2a:	230a      	movs	r3, #10
 8002b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b32:	4619      	mov	r1, r3
 8002b34:	483b      	ldr	r0, [pc, #236]	@ (8002c24 <MX_GPIO_Init+0x2f0>)
 8002b36:	f006 fcad 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002b3a:	2380      	movs	r3, #128	@ 0x80
 8002b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002b4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b52:	4619      	mov	r1, r3
 8002b54:	482e      	ldr	r0, [pc, #184]	@ (8002c10 <MX_GPIO_Init+0x2dc>)
 8002b56:	f006 fc9d 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 8002b5a:	f248 1340 	movw	r3, #33088	@ 0x8140
 8002b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b60:	2300      	movs	r3, #0
 8002b62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	482e      	ldr	r0, [pc, #184]	@ (8002c28 <MX_GPIO_Init+0x2f4>)
 8002b70:	f006 fc90 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8002b74:	2360      	movs	r3, #96	@ 0x60
 8002b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b80:	2300      	movs	r3, #0
 8002b82:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4820      	ldr	r0, [pc, #128]	@ (8002c0c <MX_GPIO_Init+0x2d8>)
 8002b8c:	f006 fc82 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002b90:	2340      	movs	r3, #64	@ 0x40
 8002b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b94:	2302      	movs	r3, #2
 8002b96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002ba0:	230a      	movs	r3, #10
 8002ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002ba4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ba8:	4619      	mov	r1, r3
 8002baa:	481e      	ldr	r0, [pc, #120]	@ (8002c24 <MX_GPIO_Init+0x2f0>)
 8002bac:	f006 fc72 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002bb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002bbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4819      	ldr	r0, [pc, #100]	@ (8002c2c <MX_GPIO_Init+0x2f8>)
 8002bc6:	f006 fc65 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002bca:	2340      	movs	r3, #64	@ 0x40
 8002bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002bce:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002bd2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002bd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bdc:	4619      	mov	r1, r3
 8002bde:	480c      	ldr	r0, [pc, #48]	@ (8002c10 <MX_GPIO_Init+0x2dc>)
 8002be0:	f006 fc58 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8002be4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bea:	2302      	movs	r3, #2
 8002bec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002bf6:	230a      	movs	r3, #10
 8002bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4809      	ldr	r0, [pc, #36]	@ (8002c28 <MX_GPIO_Init+0x2f4>)
 8002c02:	f006 fc47 	bl	8009494 <HAL_GPIO_Init>
 8002c06:	e013      	b.n	8002c30 <MX_GPIO_Init+0x2fc>
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40020c00 	.word	0x40020c00
 8002c14:	40022800 	.word	0x40022800
 8002c18:	40022000 	.word	0x40022000
 8002c1c:	40021c00 	.word	0x40021c00
 8002c20:	40021800 	.word	0x40021800
 8002c24:	40020400 	.word	0x40020400
 8002c28:	40020000 	.word	0x40020000
 8002c2c:	40022400 	.word	0x40022400

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8002c30:	2328      	movs	r3, #40	@ 0x28
 8002c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c34:	2301      	movs	r3, #1
 8002c36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c44:	4619      	mov	r1, r3
 8002c46:	48b0      	ldr	r0, [pc, #704]	@ (8002f08 <MX_GPIO_Init+0x5d4>)
 8002c48:	f006 fc24 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c4c:	2304      	movs	r3, #4
 8002c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c50:	2302      	movs	r3, #2
 8002c52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002c60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c64:	4619      	mov	r1, r3
 8002c66:	48a9      	ldr	r0, [pc, #676]	@ (8002f0c <MX_GPIO_Init+0x5d8>)
 8002c68:	f006 fc14 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002c6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c72:	2300      	movs	r3, #0
 8002c74:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002c7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c7e:	4619      	mov	r1, r3
 8002c80:	48a3      	ldr	r0, [pc, #652]	@ (8002f10 <MX_GPIO_Init+0x5dc>)
 8002c82:	f006 fc07 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002c86:	2308      	movs	r3, #8
 8002c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c92:	2300      	movs	r3, #0
 8002c94:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002c96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	489d      	ldr	r0, [pc, #628]	@ (8002f14 <MX_GPIO_Init+0x5e0>)
 8002c9e:	f006 fbf9 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8002ca2:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4898      	ldr	r0, [pc, #608]	@ (8002f18 <MX_GPIO_Init+0x5e4>)
 8002cb8:	f006 fbec 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002cbc:	2310      	movs	r3, #16
 8002cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002cc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ccc:	4619      	mov	r1, r3
 8002cce:	488e      	ldr	r0, [pc, #568]	@ (8002f08 <MX_GPIO_Init+0x5d4>)
 8002cd0:	f006 fbe0 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PH13 PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8002cd4:	f24a 0304 	movw	r3, #40964	@ 0xa004
 8002cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ce2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	488c      	ldr	r0, [pc, #560]	@ (8002f1c <MX_GPIO_Init+0x5e8>)
 8002cea:	f006 fbd3 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cfe:	2305      	movs	r3, #5
 8002d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002d02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d06:	4619      	mov	r1, r3
 8002d08:	4880      	ldr	r0, [pc, #512]	@ (8002f0c <MX_GPIO_Init+0x5d8>)
 8002d0a:	f006 fbc3 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8002d0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d14:	2301      	movs	r3, #1
 8002d16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8002d20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d24:	4619      	mov	r1, r3
 8002d26:	4879      	ldr	r0, [pc, #484]	@ (8002f0c <MX_GPIO_Init+0x5d8>)
 8002d28:	f006 fbb4 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8002d2c:	f645 6340 	movw	r3, #24128	@ 0x5e40
 8002d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d32:	2301      	movs	r3, #1
 8002d34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d42:	4619      	mov	r1, r3
 8002d44:	4875      	ldr	r0, [pc, #468]	@ (8002f1c <MX_GPIO_Init+0x5e8>)
 8002d46:	f006 fba5 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002d4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002d50:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002d54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002d5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d5e:	4619      	mov	r1, r3
 8002d60:	486a      	ldr	r0, [pc, #424]	@ (8002f0c <MX_GPIO_Init+0x5d8>)
 8002d62:	f006 fb97 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002d66:	23c0      	movs	r3, #192	@ 0xc0
 8002d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d72:	2303      	movs	r3, #3
 8002d74:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d76:	2308      	movs	r3, #8
 8002d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4863      	ldr	r0, [pc, #396]	@ (8002f10 <MX_GPIO_Init+0x5dc>)
 8002d82:	f006 fb87 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002d86:	2310      	movs	r3, #16
 8002d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d92:	2303      	movs	r3, #3
 8002d94:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002d96:	230a      	movs	r3, #10
 8002d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002d9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d9e:	4619      	mov	r1, r3
 8002da0:	485e      	ldr	r0, [pc, #376]	@ (8002f1c <MX_GPIO_Init+0x5e8>)
 8002da2:	f006 fb77 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002da6:	23c8      	movs	r3, #200	@ 0xc8
 8002da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002daa:	2301      	movs	r3, #1
 8002dac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db2:	2300      	movs	r3, #0
 8002db4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002db6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4856      	ldr	r0, [pc, #344]	@ (8002f18 <MX_GPIO_Init+0x5e4>)
 8002dbe:	f006 fb69 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002dc2:	23c0      	movs	r3, #192	@ 0xc0
 8002dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002dd2:	2308      	movs	r3, #8
 8002dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4850      	ldr	r0, [pc, #320]	@ (8002f20 <MX_GPIO_Init+0x5ec>)
 8002dde:	f006 fb59 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002de2:	2305      	movs	r3, #5
 8002de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de6:	2302      	movs	r3, #2
 8002de8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dee:	2303      	movs	r3, #3
 8002df0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002df2:	230a      	movs	r3, #10
 8002df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002df6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4844      	ldr	r0, [pc, #272]	@ (8002f10 <MX_GPIO_Init+0x5dc>)
 8002dfe:	f006 fb49 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002e02:	2332      	movs	r3, #50	@ 0x32
 8002e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e06:	2302      	movs	r3, #2
 8002e08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e12:	230b      	movs	r3, #11
 8002e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	483c      	ldr	r0, [pc, #240]	@ (8002f10 <MX_GPIO_Init+0x5dc>)
 8002e1e:	f006 fb39 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e22:	2304      	movs	r3, #4
 8002e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e26:	2302      	movs	r3, #2
 8002e28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002e32:	2309      	movs	r3, #9
 8002e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4839      	ldr	r0, [pc, #228]	@ (8002f24 <MX_GPIO_Init+0x5f0>)
 8002e3e:	f006 fb29 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002e42:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e50:	2303      	movs	r3, #3
 8002e52:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002e54:	2309      	movs	r3, #9
 8002e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	482a      	ldr	r0, [pc, #168]	@ (8002f08 <MX_GPIO_Init+0x5d4>)
 8002e60:	f006 fb18 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002e64:	2386      	movs	r3, #134	@ 0x86
 8002e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e70:	2303      	movs	r3, #3
 8002e72:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e74:	230b      	movs	r3, #11
 8002e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	482a      	ldr	r0, [pc, #168]	@ (8002f28 <MX_GPIO_Init+0x5f4>)
 8002e80:	f006 fb08 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e84:	2310      	movs	r3, #16
 8002e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e94:	4619      	mov	r1, r3
 8002e96:	4824      	ldr	r0, [pc, #144]	@ (8002f28 <MX_GPIO_Init+0x5f4>)
 8002e98:	f006 fafc 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002e9c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ea2:	2312      	movs	r3, #18
 8002ea4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002eae:	2304      	movs	r3, #4
 8002eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002eb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4818      	ldr	r0, [pc, #96]	@ (8002f1c <MX_GPIO_Init+0x5e8>)
 8002eba:	f006 faeb 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002ebe:	2328      	movs	r3, #40	@ 0x28
 8002ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002ece:	230a      	movs	r3, #10
 8002ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4813      	ldr	r0, [pc, #76]	@ (8002f28 <MX_GPIO_Init+0x5f4>)
 8002eda:	f006 fadb 	bl	8009494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002ede:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eec:	2300      	movs	r3, #0
 8002eee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ef0:	2305      	movs	r3, #5
 8002ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ef8:	4619      	mov	r1, r3
 8002efa:	480a      	ldr	r0, [pc, #40]	@ (8002f24 <MX_GPIO_Init+0x5f0>)
 8002efc:	f006 faca 	bl	8009494 <HAL_GPIO_Init>

}
 8002f00:	bf00      	nop
 8002f02:	3740      	adds	r7, #64	@ 0x40
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40020c00 	.word	0x40020c00
 8002f0c:	40022000 	.word	0x40022000
 8002f10:	40020800 	.word	0x40020800
 8002f14:	40022800 	.word	0x40022800
 8002f18:	40021800 	.word	0x40021800
 8002f1c:	40021c00 	.word	0x40021c00
 8002f20:	40021400 	.word	0x40021400
 8002f24:	40020400 	.word	0x40020400
 8002f28:	40020000 	.word	0x40020000

08002f2c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08e      	sub	sp, #56	@ 0x38
 8002f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002f32:	1d3b      	adds	r3, r7, #4
 8002f34:	2234      	movs	r2, #52	@ 0x34
 8002f36:	2100      	movs	r1, #0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f011 fa22 	bl	8014382 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f40:	4a3a      	ldr	r2, [pc, #232]	@ (800302c <MX_LTDC_Init+0x100>)
 8002f42:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002f44:	4b38      	ldr	r3, [pc, #224]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002f4a:	4b37      	ldr	r3, [pc, #220]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002f50:	4b35      	ldr	r3, [pc, #212]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002f56:	4b34      	ldr	r3, [pc, #208]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8002f5c:	4b32      	ldr	r3, [pc, #200]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f5e:	2228      	movs	r2, #40	@ 0x28
 8002f60:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8002f62:	4b31      	ldr	r3, [pc, #196]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f64:	2209      	movs	r2, #9
 8002f66:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8002f68:	4b2f      	ldr	r3, [pc, #188]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f6a:	2235      	movs	r2, #53	@ 0x35
 8002f6c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8002f6e:	4b2e      	ldr	r3, [pc, #184]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f70:	220b      	movs	r2, #11
 8002f72:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8002f74:	4b2c      	ldr	r3, [pc, #176]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f76:	f240 2215 	movw	r2, #533	@ 0x215
 8002f7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8002f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f7e:	f240 121b 	movw	r2, #283	@ 0x11b
 8002f82:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8002f84:	4b28      	ldr	r3, [pc, #160]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f86:	f240 2235 	movw	r2, #565	@ 0x235
 8002f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8002f8c:	4b26      	ldr	r3, [pc, #152]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f8e:	f240 121d 	movw	r2, #285	@ 0x11d
 8002f92:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002f94:	4b24      	ldr	r3, [pc, #144]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002f9c:	4b22      	ldr	r3, [pc, #136]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002fa4:	4b20      	ldr	r3, [pc, #128]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002fac:	481e      	ldr	r0, [pc, #120]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002fae:	f007 fb05 	bl	800a5bc <HAL_LTDC_Init>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8002fb8:	f000 face 	bl	8003558 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8002fc0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002fc4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8002fca:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002fce:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002fd4:	23ff      	movs	r3, #255	@ 0xff
 8002fd6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002fdc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002fe0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002fe2:	2307      	movs	r3, #7
 8002fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8002fe6:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8002fea:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8002fec:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8002ff2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002ff6:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800300a:	1d3b      	adds	r3, r7, #4
 800300c:	2200      	movs	r2, #0
 800300e:	4619      	mov	r1, r3
 8003010:	4805      	ldr	r0, [pc, #20]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8003012:	f007 fc65 	bl	800a8e0 <HAL_LTDC_ConfigLayer>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800301c:	f000 fa9c 	bl	8003558 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003020:	bf00      	nop
 8003022:	3738      	adds	r7, #56	@ 0x38
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	200006a0 	.word	0x200006a0
 800302c:	40016800 	.word	0x40016800

08003030 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08e      	sub	sp, #56	@ 0x38
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	60da      	str	r2, [r3, #12]
 8003046:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a55      	ldr	r2, [pc, #340]	@ (80031a4 <HAL_LTDC_MspInit+0x174>)
 800304e:	4293      	cmp	r3, r2
 8003050:	f040 80a3 	bne.w	800319a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003054:	4b54      	ldr	r3, [pc, #336]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 8003056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003058:	4a53      	ldr	r2, [pc, #332]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 800305a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800305e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003060:	4b51      	ldr	r3, [pc, #324]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 8003062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003064:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003068:	623b      	str	r3, [r7, #32]
 800306a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800306c:	4b4e      	ldr	r3, [pc, #312]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 800306e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003070:	4a4d      	ldr	r2, [pc, #308]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 8003072:	f043 0310 	orr.w	r3, r3, #16
 8003076:	6313      	str	r3, [r2, #48]	@ 0x30
 8003078:	4b4b      	ldr	r3, [pc, #300]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 800307a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307c:	f003 0310 	and.w	r3, r3, #16
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003084:	4b48      	ldr	r3, [pc, #288]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003088:	4a47      	ldr	r2, [pc, #284]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 800308a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800308e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003090:	4b45      	ldr	r3, [pc, #276]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003094:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800309c:	4b42      	ldr	r3, [pc, #264]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a0:	4a41      	ldr	r2, [pc, #260]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80030a8:	4b3f      	ldr	r3, [pc, #252]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80030b4:	4b3c      	ldr	r3, [pc, #240]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b8:	4a3b      	ldr	r2, [pc, #236]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030be:	6313      	str	r3, [r2, #48]	@ 0x30
 80030c0:	4b39      	ldr	r3, [pc, #228]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80030cc:	4b36      	ldr	r3, [pc, #216]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d0:	4a35      	ldr	r2, [pc, #212]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80030d8:	4b33      	ldr	r3, [pc, #204]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80030e4:	2310      	movs	r3, #16
 80030e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e8:	2302      	movs	r3, #2
 80030ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f0:	2300      	movs	r3, #0
 80030f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80030f4:	230e      	movs	r3, #14
 80030f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80030f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030fc:	4619      	mov	r1, r3
 80030fe:	482b      	ldr	r0, [pc, #172]	@ (80031ac <HAL_LTDC_MspInit+0x17c>)
 8003100:	f006 f9c8 	bl	8009494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003104:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8003108:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310a:	2302      	movs	r3, #2
 800310c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310e:	2300      	movs	r3, #0
 8003110:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003112:	2300      	movs	r3, #0
 8003114:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003116:	230e      	movs	r3, #14
 8003118:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800311a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800311e:	4619      	mov	r1, r3
 8003120:	4823      	ldr	r0, [pc, #140]	@ (80031b0 <HAL_LTDC_MspInit+0x180>)
 8003122:	f006 f9b7 	bl	8009494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003126:	23f7      	movs	r3, #247	@ 0xf7
 8003128:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312a:	2302      	movs	r3, #2
 800312c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312e:	2300      	movs	r3, #0
 8003130:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003132:	2300      	movs	r3, #0
 8003134:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003136:	230e      	movs	r3, #14
 8003138:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800313a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800313e:	4619      	mov	r1, r3
 8003140:	481c      	ldr	r0, [pc, #112]	@ (80031b4 <HAL_LTDC_MspInit+0x184>)
 8003142:	f006 f9a7 	bl	8009494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003146:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800314a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314c:	2302      	movs	r3, #2
 800314e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2300      	movs	r3, #0
 8003152:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003154:	2300      	movs	r3, #0
 8003156:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003158:	2309      	movs	r3, #9
 800315a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800315c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003160:	4619      	mov	r1, r3
 8003162:	4815      	ldr	r0, [pc, #84]	@ (80031b8 <HAL_LTDC_MspInit+0x188>)
 8003164:	f006 f996 	bl	8009494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003168:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 800316c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316e:	2302      	movs	r3, #2
 8003170:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003172:	2300      	movs	r3, #0
 8003174:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003176:	2300      	movs	r3, #0
 8003178:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800317a:	230e      	movs	r3, #14
 800317c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800317e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003182:	4619      	mov	r1, r3
 8003184:	480d      	ldr	r0, [pc, #52]	@ (80031bc <HAL_LTDC_MspInit+0x18c>)
 8003186:	f006 f985 	bl	8009494 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800318a:	2200      	movs	r2, #0
 800318c:	2105      	movs	r1, #5
 800318e:	2058      	movs	r0, #88	@ 0x58
 8003190:	f005 f9d8 	bl	8008544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003194:	2058      	movs	r0, #88	@ 0x58
 8003196:	f005 f9f1 	bl	800857c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800319a:	bf00      	nop
 800319c:	3738      	adds	r7, #56	@ 0x38
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40016800 	.word	0x40016800
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40022400 	.word	0x40022400
 80031b4:	40022800 	.word	0x40022800
 80031b8:	40021800 	.word	0x40021800
 80031bc:	40022000 	.word	0x40022000

080031c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80031c4:	4b19      	ldr	r3, [pc, #100]	@ (800322c <main+0x6c>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80031ca:	4b18      	ldr	r3, [pc, #96]	@ (800322c <main+0x6c>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031d0:	f004 fcb5 	bl	8007b3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031d4:	f000 f82e 	bl	8003234 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80031d8:	f000 f89c 	bl	8003314 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031dc:	f7ff fbaa 	bl	8002934 <MX_GPIO_Init>
  MX_DMA_Init();
 80031e0:	f7fd fede 	bl	8000fa0 <MX_DMA_Init>
  MX_DMA2D_Init();
 80031e4:	f7fd ff12 	bl	800100c <MX_DMA2D_Init>
  MX_FMC_Init();
 80031e8:	f7fd ff68 	bl	80010bc <MX_FMC_Init>
  MX_LTDC_Init();
 80031ec:	f7ff fe9e 	bl	8002f2c <MX_LTDC_Init>
  MX_USART1_UART_Init();
 80031f0:	f002 ff5e 	bl	80060b0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80031f4:	f7fd fdc2 	bl	8000d7c <MX_ADC1_Init>
  MX_SAI2_Init();
 80031f8:	f000 f9b4 	bl	8003564 <MX_SAI2_Init>
  MX_ADC3_Init();
 80031fc:	f7fd fe10 	bl	8000e20 <MX_ADC3_Init>
  MX_SDMMC1_SD_Init();
 8003200:	f000 fb90 	bl	8003924 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8003204:	f00c f872 	bl	800f2ec <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  initDisplay();
 8003208:	f000 f8b6 	bl	8003378 <initDisplay>
  initSD();
 800320c:	f000 f8f8 	bl	8003400 <initSD>
  readHeader();
 8003210:	f000 f950 	bl	80034b4 <readHeader>
  initAudio(freqAudio);
 8003214:	4b06      	ldr	r3, [pc, #24]	@ (8003230 <main+0x70>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f000 f915 	bl	8003448 <initAudio>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800321e:	f7fe f851 	bl	80012c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003222:	f00d ff38 	bl	8011096 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003226:	bf00      	nop
 8003228:	e7fd      	b.n	8003226 <main+0x66>
 800322a:	bf00      	nop
 800322c:	20000748 	.word	0x20000748
 8003230:	20000758 	.word	0x20000758

08003234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b094      	sub	sp, #80	@ 0x50
 8003238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800323a:	f107 0320 	add.w	r3, r7, #32
 800323e:	2230      	movs	r2, #48	@ 0x30
 8003240:	2100      	movs	r1, #0
 8003242:	4618      	mov	r0, r3
 8003244:	f011 f89d 	bl	8014382 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003248:	f107 030c 	add.w	r3, r7, #12
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003258:	f007 fd28 	bl	800acac <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800325c:	4b2b      	ldr	r3, [pc, #172]	@ (800330c <SystemClock_Config+0xd8>)
 800325e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003260:	4a2a      	ldr	r2, [pc, #168]	@ (800330c <SystemClock_Config+0xd8>)
 8003262:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003266:	6413      	str	r3, [r2, #64]	@ 0x40
 8003268:	4b28      	ldr	r3, [pc, #160]	@ (800330c <SystemClock_Config+0xd8>)
 800326a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003274:	4b26      	ldr	r3, [pc, #152]	@ (8003310 <SystemClock_Config+0xdc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a25      	ldr	r2, [pc, #148]	@ (8003310 <SystemClock_Config+0xdc>)
 800327a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	4b23      	ldr	r3, [pc, #140]	@ (8003310 <SystemClock_Config+0xdc>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003288:	607b      	str	r3, [r7, #4]
 800328a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800328c:	2301      	movs	r3, #1
 800328e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003290:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003294:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003296:	2302      	movs	r3, #2
 8003298:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800329a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800329e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80032a0:	2319      	movs	r3, #25
 80032a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80032a4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80032a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80032aa:	2302      	movs	r3, #2
 80032ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80032ae:	2309      	movs	r3, #9
 80032b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032b2:	f107 0320 	add.w	r3, r7, #32
 80032b6:	4618      	mov	r0, r3
 80032b8:	f007 fd58 	bl	800ad6c <HAL_RCC_OscConfig>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80032c2:	f000 f949 	bl	8003558 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80032c6:	f007 fd01 	bl	800accc <HAL_PWREx_EnableOverDrive>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80032d0:	f000 f942 	bl	8003558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032d4:	230f      	movs	r3, #15
 80032d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032d8:	2302      	movs	r3, #2
 80032da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80032e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80032e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80032e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80032ec:	f107 030c 	add.w	r3, r7, #12
 80032f0:	2106      	movs	r1, #6
 80032f2:	4618      	mov	r0, r3
 80032f4:	f007 ffde 	bl	800b2b4 <HAL_RCC_ClockConfig>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80032fe:	f000 f92b 	bl	8003558 <Error_Handler>
  }
}
 8003302:	bf00      	nop
 8003304:	3750      	adds	r7, #80	@ 0x50
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800
 8003310:	40007000 	.word	0x40007000

08003314 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b0a2      	sub	sp, #136	@ 0x88
 8003318:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800331a:	1d3b      	adds	r3, r7, #4
 800331c:	2284      	movs	r2, #132	@ 0x84
 800331e:	2100      	movs	r1, #0
 8003320:	4618      	mov	r0, r3
 8003322:	f011 f82e 	bl	8014382 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8003326:	4b13      	ldr	r3, [pc, #76]	@ (8003374 <PeriphCommonClock_Config+0x60>)
 8003328:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800332a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800332e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8003330:	2305      	movs	r3, #5
 8003332:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003334:	2302      	movs	r3, #2
 8003336:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8003338:	2303      	movs	r3, #3
 800333a:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800333c:	2301      	movs	r3, #1
 800333e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003340:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003344:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8003346:	2300      	movs	r3, #0
 8003348:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800334a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800334e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8003352:	2300      	movs	r3, #0
 8003354:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003358:	1d3b      	adds	r3, r7, #4
 800335a:	4618      	mov	r0, r3
 800335c:	f008 f9c2 	bl	800b6e4 <HAL_RCCEx_PeriphCLKConfig>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8003366:	f000 f8f7 	bl	8003558 <Error_Handler>
  }
}
 800336a:	bf00      	nop
 800336c:	3788      	adds	r7, #136	@ 0x88
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	00b00008 	.word	0x00b00008

08003378 <initDisplay>:

/* USER CODE BEGIN 4 */
void initDisplay()
{
 8003378:	b598      	push	{r3, r4, r7, lr}
 800337a:	af00      	add	r7, sp, #0
  BSP_LCD_Init();
 800337c:	f001 f9d2 	bl	8004724 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8003380:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8003384:	2000      	movs	r0, #0
 8003386:	f001 fa65 	bl	8004854 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 800338a:	f001 fa3b 	bl	8004804 <BSP_LCD_GetXSize>
 800338e:	4604      	mov	r4, r0
 8003390:	f001 fa4c 	bl	800482c <BSP_LCD_GetYSize>
 8003394:	4603      	mov	r3, r0
 8003396:	fb04 f303 	mul.w	r3, r4, r3
 800339a:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4619      	mov	r1, r3
 80033a2:	2001      	movs	r0, #1
 80033a4:	f001 fa56 	bl	8004854 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 80033a8:	f001 fe16 	bl	8004fd8 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 80033ac:	2000      	movs	r0, #0
 80033ae:	f001 fab1 	bl	8004914 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 80033b2:	4810      	ldr	r0, [pc, #64]	@ (80033f4 <initDisplay+0x7c>)
 80033b4:	f001 fb0a 	bl	80049cc <BSP_LCD_Clear>
  BSP_LCD_SelectLayer(1);
 80033b8:	2001      	movs	r0, #1
 80033ba:	f001 faab 	bl	8004914 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(00);
 80033be:	2000      	movs	r0, #0
 80033c0:	f001 fb04 	bl	80049cc <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font16);
 80033c4:	480c      	ldr	r0, [pc, #48]	@ (80033f8 <initDisplay+0x80>)
 80033c6:	f001 fae7 	bl	8004998 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 80033ca:	480c      	ldr	r0, [pc, #48]	@ (80033fc <initDisplay+0x84>)
 80033cc:	f001 fab2 	bl	8004934 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(00);
 80033d0:	2000      	movs	r0, #0
 80033d2:	f001 fac7 	bl	8004964 <BSP_LCD_SetBackColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80033d6:	f001 fa15 	bl	8004804 <BSP_LCD_GetXSize>
 80033da:	4603      	mov	r3, r0
 80033dc:	b29c      	uxth	r4, r3
 80033de:	f001 fa25 	bl	800482c <BSP_LCD_GetYSize>
 80033e2:	4603      	mov	r3, r0
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	4619      	mov	r1, r3
 80033e8:	4620      	mov	r0, r4
 80033ea:	f002 fa07 	bl	80057fc <BSP_TS_Init>
}
 80033ee:	bf00      	nop
 80033f0:	bd98      	pop	{r3, r4, r7, pc}
 80033f2:	bf00      	nop
 80033f4:	ff81cd4b 	.word	0xff81cd4b
 80033f8:	20000040 	.word	0x20000040
 80033fc:	ffa52a2a 	.word	0xffa52a2a

08003400 <initSD>:

void initSD()
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
	if (f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK) {
 8003404:	2200      	movs	r2, #0
 8003406:	490c      	ldr	r1, [pc, #48]	@ (8003438 <initSD+0x38>)
 8003408:	480c      	ldr	r0, [pc, #48]	@ (800343c <initSD+0x3c>)
 800340a:	f00d f94d 	bl	80106a8 <f_mount>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <initSD+0x26>
		BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"SD not mounted", CENTER_MODE);
 8003414:	2301      	movs	r3, #1
 8003416:	4a0a      	ldr	r2, [pc, #40]	@ (8003440 <initSD+0x40>)
 8003418:	2100      	movs	r1, #0
 800341a:	2000      	movs	r0, #0
 800341c:	f001 fb42 	bl	8004aa4 <BSP_LCD_DisplayStringAt>
		Error_Handler();
 8003420:	f000 f89a 	bl	8003558 <Error_Handler>
	}
	else {
		BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"SD mounted", CENTER_MODE);
	}
}
 8003424:	e005      	b.n	8003432 <initSD+0x32>
		BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"SD mounted", CENTER_MODE);
 8003426:	2301      	movs	r3, #1
 8003428:	4a06      	ldr	r2, [pc, #24]	@ (8003444 <initSD+0x44>)
 800342a:	2100      	movs	r1, #0
 800342c:	2000      	movs	r0, #0
 800342e:	f001 fb39 	bl	8004aa4 <BSP_LCD_DisplayStringAt>
}
 8003432:	bf00      	nop
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20000ff8 	.word	0x20000ff8
 800343c:	20000ffc 	.word	0x20000ffc
 8003440:	080156a0 	.word	0x080156a0
 8003444:	080156b0 	.word	0x080156b0

08003448 <initAudio>:

void initAudio(uint32_t freq)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af02      	add	r7, sp, #8
 800344e:	6078      	str	r0, [r7, #4]
	static int init = 0;

	if (BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_INPUT_LINE_1, OUTPUT_DEVICE_HEADPHONE, freq, 16, 2) != AUDIO_OK) {
 8003450:	2302      	movs	r3, #2
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	2310      	movs	r3, #16
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	2102      	movs	r1, #2
 800345a:	f44f 7040 	mov.w	r0, #768	@ 0x300
 800345e:	f000 ff5d 	bl	800431c <BSP_AUDIO_IN_OUT_Init>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <initAudio+0x24>
		Error_Handler();
 8003468:	f000 f876 	bl	8003558 <Error_Handler>
	}

	memset((uint16_t*) AUDIO_BUFFER_OUT, 0, AUDIO_BLOCK_SIZE*2);
 800346c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003470:	2100      	movs	r1, #0
 8003472:	480e      	ldr	r0, [pc, #56]	@ (80034ac <initAudio+0x64>)
 8003474:	f010 ff85 	bl	8014382 <memset>

	BSP_AUDIO_OUT_SetVolume(60);
 8003478:	203c      	movs	r0, #60	@ 0x3c
 800347a:	f000 fd97 	bl	8003fac <BSP_AUDIO_OUT_SetVolume>
	BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 800347e:	2005      	movs	r0, #5
 8003480:	f000 fdac 	bl	8003fdc <BSP_AUDIO_OUT_SetAudioFrameSlot>
	if (BSP_AUDIO_OUT_Play((uint16_t*) AUDIO_BUFFER_OUT, AUDIO_BLOCK_SIZE*2) == AUDIO_OK) {
 8003484:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003488:	4808      	ldr	r0, [pc, #32]	@ (80034ac <initAudio+0x64>)
 800348a:	f000 fd65 	bl	8003f58 <BSP_AUDIO_OUT_Play>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d106      	bne.n	80034a2 <initAudio+0x5a>
		if (!init)
 8003494:	4b06      	ldr	r3, [pc, #24]	@ (80034b0 <initAudio+0x68>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d102      	bne.n	80034a2 <initAudio+0x5a>
			init = 1;
 800349c:	4b04      	ldr	r3, [pc, #16]	@ (80034b0 <initAudio+0x68>)
 800349e:	2201      	movs	r2, #1
 80034a0:	601a      	str	r2, [r3, #0]
	}
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	c007fc00 	.word	0xc007fc00
 80034b0:	20000760 	.word	0x20000760

080034b4 <readHeader>:

void readHeader()
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
	uint32_t data=0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	607b      	str	r3, [r7, #4]
	uint32_t bytesread;
	uint32_t taille_octet;


	//Lecture du nombre d'octets
	f_lseek(&SDFile,04);
 80034be:	2104      	movs	r1, #4
 80034c0:	4818      	ldr	r0, [pc, #96]	@ (8003524 <readHeader+0x70>)
 80034c2:	f00d fac3 	bl	8010a4c <f_lseek>
	f_read(&SDFile, &data, 4, (void*) &bytesread);
 80034c6:	463b      	mov	r3, r7
 80034c8:	1d39      	adds	r1, r7, #4
 80034ca:	2204      	movs	r2, #4
 80034cc:	4815      	ldr	r0, [pc, #84]	@ (8003524 <readHeader+0x70>)
 80034ce:	f00d f94f 	bl	8010770 <f_read>
//	taille_fichier=((data|MASK_32_TO_8_0)<<24)|((data|MASK_32_TO_8_1)<<8)|((data|MASK_32_TO_8_2)>>8)|((data|MASK_32_TO_8_3)>>24);
	taille_octet=data;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	60fb      	str	r3, [r7, #12]
	nb_bl=data/512;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	0a5b      	lsrs	r3, r3, #9
 80034da:	60bb      	str	r3, [r7, #8]
	Nb_Bloc=(uint32_t)nb_bl;
 80034dc:	4a12      	ldr	r2, [pc, #72]	@ (8003528 <readHeader+0x74>)
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	6013      	str	r3, [r2, #0]
	data=0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	607b      	str	r3, [r7, #4]

	//Lecture de la fréquence d'échantillonnage
	f_lseek(&SDFile,24);
 80034e6:	2118      	movs	r1, #24
 80034e8:	480e      	ldr	r0, [pc, #56]	@ (8003524 <readHeader+0x70>)
 80034ea:	f00d faaf 	bl	8010a4c <f_lseek>
	f_read(&SDFile, &data, 4 , (void*) &bytesread);
 80034ee:	463b      	mov	r3, r7
 80034f0:	1d39      	adds	r1, r7, #4
 80034f2:	2204      	movs	r2, #4
 80034f4:	480b      	ldr	r0, [pc, #44]	@ (8003524 <readHeader+0x70>)
 80034f6:	f00d f93b 	bl	8010770 <f_read>
//	freq=((data2|MASK_32_TO_8_0)<<24)|((data2|MASK_32_TO_8_1)<<8)|((data2|MASK_32_TO_8_2)>>8)|((data2|MASK_32_TO_8_3)>>24);
	freqAudio=data;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a0b      	ldr	r2, [pc, #44]	@ (800352c <readHeader+0x78>)
 80034fe:	6013      	str	r3, [r2, #0]

	//Nombre d'octets par secondes
	f_lseek(&SDFile,28);
 8003500:	211c      	movs	r1, #28
 8003502:	4808      	ldr	r0, [pc, #32]	@ (8003524 <readHeader+0x70>)
 8003504:	f00d faa2 	bl	8010a4c <f_lseek>
	f_read(&SDFile, (uint8_t*)&data, 4, (void*) &bytesread);
 8003508:	463b      	mov	r3, r7
 800350a:	1d39      	adds	r1, r7, #4
 800350c:	2204      	movs	r2, #4
 800350e:	4805      	ldr	r0, [pc, #20]	@ (8003524 <readHeader+0x70>)
 8003510:	f00d f92e 	bl	8010770 <f_read>
	Nb_octets_seconde=data;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a06      	ldr	r2, [pc, #24]	@ (8003530 <readHeader+0x7c>)
 8003518:	6013      	str	r3, [r2, #0]
}
 800351a:	bf00      	nop
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20001230 	.word	0x20001230
 8003528:	2000075c 	.word	0x2000075c
 800352c:	20000758 	.word	0x20000758
 8003530:	20000034 	.word	0x20000034

08003534 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a04      	ldr	r2, [pc, #16]	@ (8003554 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d101      	bne.n	800354a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003546:	f004 fb07 	bl	8007b58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40001000 	.word	0x40001000

08003558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800355c:	b672      	cpsid	i
}
 800355e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003560:	bf00      	nop
 8003562:	e7fd      	b.n	8003560 <Error_Handler+0x8>

08003564 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8003568:	4b4e      	ldr	r3, [pc, #312]	@ (80036a4 <MX_SAI2_Init+0x140>)
 800356a:	4a4f      	ldr	r2, [pc, #316]	@ (80036a8 <MX_SAI2_Init+0x144>)
 800356c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800356e:	4b4d      	ldr	r3, [pc, #308]	@ (80036a4 <MX_SAI2_Init+0x140>)
 8003570:	2200      	movs	r2, #0
 8003572:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8003574:	4b4b      	ldr	r3, [pc, #300]	@ (80036a4 <MX_SAI2_Init+0x140>)
 8003576:	2200      	movs	r2, #0
 8003578:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800357a:	4b4a      	ldr	r3, [pc, #296]	@ (80036a4 <MX_SAI2_Init+0x140>)
 800357c:	2240      	movs	r2, #64	@ 0x40
 800357e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003580:	4b48      	ldr	r3, [pc, #288]	@ (80036a4 <MX_SAI2_Init+0x140>)
 8003582:	2200      	movs	r2, #0
 8003584:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8003586:	4b47      	ldr	r3, [pc, #284]	@ (80036a4 <MX_SAI2_Init+0x140>)
 8003588:	2200      	movs	r2, #0
 800358a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800358c:	4b45      	ldr	r3, [pc, #276]	@ (80036a4 <MX_SAI2_Init+0x140>)
 800358e:	2200      	movs	r2, #0
 8003590:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8003592:	4b44      	ldr	r3, [pc, #272]	@ (80036a4 <MX_SAI2_Init+0x140>)
 8003594:	2200      	movs	r2, #0
 8003596:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8003598:	4b42      	ldr	r3, [pc, #264]	@ (80036a4 <MX_SAI2_Init+0x140>)
 800359a:	2200      	movs	r2, #0
 800359c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800359e:	4b41      	ldr	r3, [pc, #260]	@ (80036a4 <MX_SAI2_Init+0x140>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80035a4:	4b3f      	ldr	r3, [pc, #252]	@ (80036a4 <MX_SAI2_Init+0x140>)
 80035a6:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80035aa:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80035ac:	4b3d      	ldr	r3, [pc, #244]	@ (80036a4 <MX_SAI2_Init+0x140>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80035b2:	4b3c      	ldr	r3, [pc, #240]	@ (80036a4 <MX_SAI2_Init+0x140>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80035b8:	4b3a      	ldr	r3, [pc, #232]	@ (80036a4 <MX_SAI2_Init+0x140>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80035be:	4b39      	ldr	r3, [pc, #228]	@ (80036a4 <MX_SAI2_Init+0x140>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80035c4:	4b37      	ldr	r3, [pc, #220]	@ (80036a4 <MX_SAI2_Init+0x140>)
 80035c6:	2208      	movs	r2, #8
 80035c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80035ca:	4b36      	ldr	r3, [pc, #216]	@ (80036a4 <MX_SAI2_Init+0x140>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80035d0:	4b34      	ldr	r3, [pc, #208]	@ (80036a4 <MX_SAI2_Init+0x140>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80035d6:	4b33      	ldr	r3, [pc, #204]	@ (80036a4 <MX_SAI2_Init+0x140>)
 80035d8:	2200      	movs	r2, #0
 80035da:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80035dc:	4b31      	ldr	r3, [pc, #196]	@ (80036a4 <MX_SAI2_Init+0x140>)
 80035de:	2200      	movs	r2, #0
 80035e0:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80035e2:	4b30      	ldr	r3, [pc, #192]	@ (80036a4 <MX_SAI2_Init+0x140>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80035e8:	4b2e      	ldr	r3, [pc, #184]	@ (80036a4 <MX_SAI2_Init+0x140>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80035ee:	4b2d      	ldr	r3, [pc, #180]	@ (80036a4 <MX_SAI2_Init+0x140>)
 80035f0:	2201      	movs	r2, #1
 80035f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80035f4:	4b2b      	ldr	r3, [pc, #172]	@ (80036a4 <MX_SAI2_Init+0x140>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80035fa:	482a      	ldr	r0, [pc, #168]	@ (80036a4 <MX_SAI2_Init+0x140>)
 80035fc:	f008 feae 	bl	800c35c <HAL_SAI_Init>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <MX_SAI2_Init+0xa6>
  {
    Error_Handler();
 8003606:	f7ff ffa7 	bl	8003558 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800360a:	4b28      	ldr	r3, [pc, #160]	@ (80036ac <MX_SAI2_Init+0x148>)
 800360c:	4a28      	ldr	r2, [pc, #160]	@ (80036b0 <MX_SAI2_Init+0x14c>)
 800360e:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8003610:	4b26      	ldr	r3, [pc, #152]	@ (80036ac <MX_SAI2_Init+0x148>)
 8003612:	2200      	movs	r2, #0
 8003614:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8003616:	4b25      	ldr	r3, [pc, #148]	@ (80036ac <MX_SAI2_Init+0x148>)
 8003618:	2203      	movs	r2, #3
 800361a:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800361c:	4b23      	ldr	r3, [pc, #140]	@ (80036ac <MX_SAI2_Init+0x148>)
 800361e:	2240      	movs	r2, #64	@ 0x40
 8003620:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003622:	4b22      	ldr	r3, [pc, #136]	@ (80036ac <MX_SAI2_Init+0x148>)
 8003624:	2200      	movs	r2, #0
 8003626:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8003628:	4b20      	ldr	r3, [pc, #128]	@ (80036ac <MX_SAI2_Init+0x148>)
 800362a:	2200      	movs	r2, #0
 800362c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800362e:	4b1f      	ldr	r3, [pc, #124]	@ (80036ac <MX_SAI2_Init+0x148>)
 8003630:	2201      	movs	r2, #1
 8003632:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8003634:	4b1d      	ldr	r3, [pc, #116]	@ (80036ac <MX_SAI2_Init+0x148>)
 8003636:	2200      	movs	r2, #0
 8003638:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800363a:	4b1c      	ldr	r3, [pc, #112]	@ (80036ac <MX_SAI2_Init+0x148>)
 800363c:	2200      	movs	r2, #0
 800363e:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003640:	4b1a      	ldr	r3, [pc, #104]	@ (80036ac <MX_SAI2_Init+0x148>)
 8003642:	2200      	movs	r2, #0
 8003644:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8003646:	4b19      	ldr	r3, [pc, #100]	@ (80036ac <MX_SAI2_Init+0x148>)
 8003648:	2200      	movs	r2, #0
 800364a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800364c:	4b17      	ldr	r3, [pc, #92]	@ (80036ac <MX_SAI2_Init+0x148>)
 800364e:	2200      	movs	r2, #0
 8003650:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003652:	4b16      	ldr	r3, [pc, #88]	@ (80036ac <MX_SAI2_Init+0x148>)
 8003654:	2200      	movs	r2, #0
 8003656:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8003658:	4b14      	ldr	r3, [pc, #80]	@ (80036ac <MX_SAI2_Init+0x148>)
 800365a:	2208      	movs	r2, #8
 800365c:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800365e:	4b13      	ldr	r3, [pc, #76]	@ (80036ac <MX_SAI2_Init+0x148>)
 8003660:	2201      	movs	r2, #1
 8003662:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8003664:	4b11      	ldr	r3, [pc, #68]	@ (80036ac <MX_SAI2_Init+0x148>)
 8003666:	2200      	movs	r2, #0
 8003668:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800366a:	4b10      	ldr	r3, [pc, #64]	@ (80036ac <MX_SAI2_Init+0x148>)
 800366c:	2200      	movs	r2, #0
 800366e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8003670:	4b0e      	ldr	r3, [pc, #56]	@ (80036ac <MX_SAI2_Init+0x148>)
 8003672:	2200      	movs	r2, #0
 8003674:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8003676:	4b0d      	ldr	r3, [pc, #52]	@ (80036ac <MX_SAI2_Init+0x148>)
 8003678:	2200      	movs	r2, #0
 800367a:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800367c:	4b0b      	ldr	r3, [pc, #44]	@ (80036ac <MX_SAI2_Init+0x148>)
 800367e:	2200      	movs	r2, #0
 8003680:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8003682:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <MX_SAI2_Init+0x148>)
 8003684:	2201      	movs	r2, #1
 8003686:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8003688:	4b08      	ldr	r3, [pc, #32]	@ (80036ac <MX_SAI2_Init+0x148>)
 800368a:	2200      	movs	r2, #0
 800368c:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800368e:	4807      	ldr	r0, [pc, #28]	@ (80036ac <MX_SAI2_Init+0x148>)
 8003690:	f008 fe64 	bl	800c35c <HAL_SAI_Init>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <MX_SAI2_Init+0x13a>
  {
    Error_Handler();
 800369a:	f7ff ff5d 	bl	8003558 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800369e:	bf00      	nop
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000764 	.word	0x20000764
 80036a8:	40015c04 	.word	0x40015c04
 80036ac:	200007e8 	.word	0x200007e8
 80036b0:	40015c24 	.word	0x40015c24

080036b4 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	@ 0x28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a61      	ldr	r2, [pc, #388]	@ (8003848 <HAL_SAI_MspInit+0x194>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d15b      	bne.n	800377e <HAL_SAI_MspInit+0xca>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 80036c6:	4b61      	ldr	r3, [pc, #388]	@ (800384c <HAL_SAI_MspInit+0x198>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10b      	bne.n	80036e6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80036ce:	4b60      	ldr	r3, [pc, #384]	@ (8003850 <HAL_SAI_MspInit+0x19c>)
 80036d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d2:	4a5f      	ldr	r2, [pc, #380]	@ (8003850 <HAL_SAI_MspInit+0x19c>)
 80036d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80036da:	4b5d      	ldr	r3, [pc, #372]	@ (8003850 <HAL_SAI_MspInit+0x19c>)
 80036dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80036e6:	4b59      	ldr	r3, [pc, #356]	@ (800384c <HAL_SAI_MspInit+0x198>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3301      	adds	r3, #1
 80036ec:	4a57      	ldr	r2, [pc, #348]	@ (800384c <HAL_SAI_MspInit+0x198>)
 80036ee:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80036f0:	23f0      	movs	r3, #240	@ 0xf0
 80036f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f4:	2302      	movs	r3, #2
 80036f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f8:	2300      	movs	r3, #0
 80036fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036fc:	2300      	movs	r3, #0
 80036fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003700:	230a      	movs	r3, #10
 8003702:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003704:	f107 0314 	add.w	r3, r7, #20
 8003708:	4619      	mov	r1, r3
 800370a:	4852      	ldr	r0, [pc, #328]	@ (8003854 <HAL_SAI_MspInit+0x1a0>)
 800370c:	f005 fec2 	bl	8009494 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8003710:	4b51      	ldr	r3, [pc, #324]	@ (8003858 <HAL_SAI_MspInit+0x1a4>)
 8003712:	4a52      	ldr	r2, [pc, #328]	@ (800385c <HAL_SAI_MspInit+0x1a8>)
 8003714:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8003716:	4b50      	ldr	r3, [pc, #320]	@ (8003858 <HAL_SAI_MspInit+0x1a4>)
 8003718:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800371c:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800371e:	4b4e      	ldr	r3, [pc, #312]	@ (8003858 <HAL_SAI_MspInit+0x1a4>)
 8003720:	2240      	movs	r2, #64	@ 0x40
 8003722:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003724:	4b4c      	ldr	r3, [pc, #304]	@ (8003858 <HAL_SAI_MspInit+0x1a4>)
 8003726:	2200      	movs	r2, #0
 8003728:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 800372a:	4b4b      	ldr	r3, [pc, #300]	@ (8003858 <HAL_SAI_MspInit+0x1a4>)
 800372c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003730:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003732:	4b49      	ldr	r3, [pc, #292]	@ (8003858 <HAL_SAI_MspInit+0x1a4>)
 8003734:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003738:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800373a:	4b47      	ldr	r3, [pc, #284]	@ (8003858 <HAL_SAI_MspInit+0x1a4>)
 800373c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003740:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8003742:	4b45      	ldr	r3, [pc, #276]	@ (8003858 <HAL_SAI_MspInit+0x1a4>)
 8003744:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003748:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 800374a:	4b43      	ldr	r3, [pc, #268]	@ (8003858 <HAL_SAI_MspInit+0x1a4>)
 800374c:	2200      	movs	r2, #0
 800374e:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003750:	4b41      	ldr	r3, [pc, #260]	@ (8003858 <HAL_SAI_MspInit+0x1a4>)
 8003752:	2200      	movs	r2, #0
 8003754:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8003756:	4840      	ldr	r0, [pc, #256]	@ (8003858 <HAL_SAI_MspInit+0x1a4>)
 8003758:	f004 ff1e 	bl	8008598 <HAL_DMA_Init>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_SAI_MspInit+0xb2>
    {
      Error_Handler();
 8003762:	f7ff fef9 	bl	8003558 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a3b      	ldr	r2, [pc, #236]	@ (8003858 <HAL_SAI_MspInit+0x1a4>)
 800376a:	671a      	str	r2, [r3, #112]	@ 0x70
 800376c:	4a3a      	ldr	r2, [pc, #232]	@ (8003858 <HAL_SAI_MspInit+0x1a4>)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a38      	ldr	r2, [pc, #224]	@ (8003858 <HAL_SAI_MspInit+0x1a4>)
 8003776:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003778:	4a37      	ldr	r2, [pc, #220]	@ (8003858 <HAL_SAI_MspInit+0x1a4>)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6393      	str	r3, [r2, #56]	@ 0x38
    }
    if(saiHandle->Instance==SAI2_Block_B)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a37      	ldr	r2, [pc, #220]	@ (8003860 <HAL_SAI_MspInit+0x1ac>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d15b      	bne.n	8003840 <HAL_SAI_MspInit+0x18c>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8003788:	4b30      	ldr	r3, [pc, #192]	@ (800384c <HAL_SAI_MspInit+0x198>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10b      	bne.n	80037a8 <HAL_SAI_MspInit+0xf4>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003790:	4b2f      	ldr	r3, [pc, #188]	@ (8003850 <HAL_SAI_MspInit+0x19c>)
 8003792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003794:	4a2e      	ldr	r2, [pc, #184]	@ (8003850 <HAL_SAI_MspInit+0x19c>)
 8003796:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800379a:	6453      	str	r3, [r2, #68]	@ 0x44
 800379c:	4b2c      	ldr	r3, [pc, #176]	@ (8003850 <HAL_SAI_MspInit+0x19c>)
 800379e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80037a8:	4b28      	ldr	r3, [pc, #160]	@ (800384c <HAL_SAI_MspInit+0x198>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3301      	adds	r3, #1
 80037ae:	4a27      	ldr	r2, [pc, #156]	@ (800384c <HAL_SAI_MspInit+0x198>)
 80037b0:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80037b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b8:	2302      	movs	r3, #2
 80037ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037bc:	2300      	movs	r3, #0
 80037be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c0:	2300      	movs	r3, #0
 80037c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80037c4:	230a      	movs	r3, #10
 80037c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80037c8:	f107 0314 	add.w	r3, r7, #20
 80037cc:	4619      	mov	r1, r3
 80037ce:	4825      	ldr	r0, [pc, #148]	@ (8003864 <HAL_SAI_MspInit+0x1b0>)
 80037d0:	f005 fe60 	bl	8009494 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 80037d4:	4b24      	ldr	r3, [pc, #144]	@ (8003868 <HAL_SAI_MspInit+0x1b4>)
 80037d6:	4a25      	ldr	r2, [pc, #148]	@ (800386c <HAL_SAI_MspInit+0x1b8>)
 80037d8:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 80037da:	4b23      	ldr	r3, [pc, #140]	@ (8003868 <HAL_SAI_MspInit+0x1b4>)
 80037dc:	2200      	movs	r2, #0
 80037de:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037e0:	4b21      	ldr	r3, [pc, #132]	@ (8003868 <HAL_SAI_MspInit+0x1b4>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80037e6:	4b20      	ldr	r3, [pc, #128]	@ (8003868 <HAL_SAI_MspInit+0x1b4>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 80037ec:	4b1e      	ldr	r3, [pc, #120]	@ (8003868 <HAL_SAI_MspInit+0x1b4>)
 80037ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037f2:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80037f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003868 <HAL_SAI_MspInit+0x1b4>)
 80037f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037fa:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80037fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003868 <HAL_SAI_MspInit+0x1b4>)
 80037fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003802:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8003804:	4b18      	ldr	r3, [pc, #96]	@ (8003868 <HAL_SAI_MspInit+0x1b4>)
 8003806:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800380a:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 800380c:	4b16      	ldr	r3, [pc, #88]	@ (8003868 <HAL_SAI_MspInit+0x1b4>)
 800380e:	2200      	movs	r2, #0
 8003810:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003812:	4b15      	ldr	r3, [pc, #84]	@ (8003868 <HAL_SAI_MspInit+0x1b4>)
 8003814:	2200      	movs	r2, #0
 8003816:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8003818:	4813      	ldr	r0, [pc, #76]	@ (8003868 <HAL_SAI_MspInit+0x1b4>)
 800381a:	f004 febd 	bl	8008598 <HAL_DMA_Init>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_SAI_MspInit+0x174>
    {
      Error_Handler();
 8003824:	f7ff fe98 	bl	8003558 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a0f      	ldr	r2, [pc, #60]	@ (8003868 <HAL_SAI_MspInit+0x1b4>)
 800382c:	671a      	str	r2, [r3, #112]	@ 0x70
 800382e:	4a0e      	ldr	r2, [pc, #56]	@ (8003868 <HAL_SAI_MspInit+0x1b4>)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a0c      	ldr	r2, [pc, #48]	@ (8003868 <HAL_SAI_MspInit+0x1b4>)
 8003838:	66da      	str	r2, [r3, #108]	@ 0x6c
 800383a:	4a0b      	ldr	r2, [pc, #44]	@ (8003868 <HAL_SAI_MspInit+0x1b4>)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8003840:	bf00      	nop
 8003842:	3728      	adds	r7, #40	@ 0x28
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40015c04 	.word	0x40015c04
 800384c:	2000092c 	.word	0x2000092c
 8003850:	40023800 	.word	0x40023800
 8003854:	40022000 	.word	0x40022000
 8003858:	2000086c 	.word	0x2000086c
 800385c:	40026470 	.word	0x40026470
 8003860:	40015c24 	.word	0x40015c24
 8003864:	40021800 	.word	0x40021800
 8003868:	200008cc 	.word	0x200008cc
 800386c:	400264b8 	.word	0x400264b8

08003870 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* saiHandle)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]

/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a23      	ldr	r2, [pc, #140]	@ (800390c <HAL_SAI_MspDeInit+0x9c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d11c      	bne.n	80038bc <HAL_SAI_MspDeInit+0x4c>
    {
    SAI2_client --;
 8003882:	4b23      	ldr	r3, [pc, #140]	@ (8003910 <HAL_SAI_MspDeInit+0xa0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3b01      	subs	r3, #1
 8003888:	4a21      	ldr	r2, [pc, #132]	@ (8003910 <HAL_SAI_MspDeInit+0xa0>)
 800388a:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 800388c:	4b20      	ldr	r3, [pc, #128]	@ (8003910 <HAL_SAI_MspDeInit+0xa0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d105      	bne.n	80038a0 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 8003894:	4b1f      	ldr	r3, [pc, #124]	@ (8003914 <HAL_SAI_MspDeInit+0xa4>)
 8003896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003898:	4a1e      	ldr	r2, [pc, #120]	@ (8003914 <HAL_SAI_MspDeInit+0xa4>)
 800389a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800389e:	6453      	str	r3, [r2, #68]	@ 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 80038a0:	21f0      	movs	r1, #240	@ 0xf0
 80038a2:	481d      	ldr	r0, [pc, #116]	@ (8003918 <HAL_SAI_MspDeInit+0xa8>)
 80038a4:	f005 ffa2 	bl	80097ec <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(saiHandle->hdmarx);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ac:	4618      	mov	r0, r3
 80038ae:	f004 ff21 	bl	80086f4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(saiHandle->hdmatx);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038b6:	4618      	mov	r0, r3
 80038b8:	f004 ff1c 	bl	80086f4 <HAL_DMA_DeInit>
    }
    if(saiHandle->Instance==SAI2_Block_B)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a16      	ldr	r2, [pc, #88]	@ (800391c <HAL_SAI_MspDeInit+0xac>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d11d      	bne.n	8003902 <HAL_SAI_MspDeInit+0x92>
    {
    SAI2_client --;
 80038c6:	4b12      	ldr	r3, [pc, #72]	@ (8003910 <HAL_SAI_MspDeInit+0xa0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	4a10      	ldr	r2, [pc, #64]	@ (8003910 <HAL_SAI_MspDeInit+0xa0>)
 80038ce:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 80038d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003910 <HAL_SAI_MspDeInit+0xa0>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d105      	bne.n	80038e4 <HAL_SAI_MspDeInit+0x74>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 80038d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003914 <HAL_SAI_MspDeInit+0xa4>)
 80038da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003914 <HAL_SAI_MspDeInit+0xa4>)
 80038de:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80038e2:	6453      	str	r3, [r2, #68]	@ 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 80038e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80038e8:	480d      	ldr	r0, [pc, #52]	@ (8003920 <HAL_SAI_MspDeInit+0xb0>)
 80038ea:	f005 ff7f 	bl	80097ec <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(saiHandle->hdmarx);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f2:	4618      	mov	r0, r3
 80038f4:	f004 fefe 	bl	80086f4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(saiHandle->hdmatx);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038fc:	4618      	mov	r0, r3
 80038fe:	f004 fef9 	bl	80086f4 <HAL_DMA_DeInit>
    }
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40015c04 	.word	0x40015c04
 8003910:	2000092c 	.word	0x2000092c
 8003914:	40023800 	.word	0x40023800
 8003918:	40022000 	.word	0x40022000
 800391c:	40015c24 	.word	0x40015c24
 8003920:	40021800 	.word	0x40021800

08003924 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003928:	4b0c      	ldr	r3, [pc, #48]	@ (800395c <MX_SDMMC1_SD_Init+0x38>)
 800392a:	4a0d      	ldr	r2, [pc, #52]	@ (8003960 <MX_SDMMC1_SD_Init+0x3c>)
 800392c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800392e:	4b0b      	ldr	r3, [pc, #44]	@ (800395c <MX_SDMMC1_SD_Init+0x38>)
 8003930:	2200      	movs	r2, #0
 8003932:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8003934:	4b09      	ldr	r3, [pc, #36]	@ (800395c <MX_SDMMC1_SD_Init+0x38>)
 8003936:	2200      	movs	r2, #0
 8003938:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800393a:	4b08      	ldr	r3, [pc, #32]	@ (800395c <MX_SDMMC1_SD_Init+0x38>)
 800393c:	2200      	movs	r2, #0
 800393e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8003940:	4b06      	ldr	r3, [pc, #24]	@ (800395c <MX_SDMMC1_SD_Init+0x38>)
 8003942:	2200      	movs	r2, #0
 8003944:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003946:	4b05      	ldr	r3, [pc, #20]	@ (800395c <MX_SDMMC1_SD_Init+0x38>)
 8003948:	2200      	movs	r2, #0
 800394a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800394c:	4b03      	ldr	r3, [pc, #12]	@ (800395c <MX_SDMMC1_SD_Init+0x38>)
 800394e:	2200      	movs	r2, #0
 8003950:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8003952:	bf00      	nop
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	20000930 	.word	0x20000930
 8003960:	40012c00 	.word	0x40012c00

08003964 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08a      	sub	sp, #40	@ 0x28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800396c:	f107 0314 	add.w	r3, r7, #20
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	60da      	str	r2, [r3, #12]
 800397a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a61      	ldr	r2, [pc, #388]	@ (8003b08 <HAL_SD_MspInit+0x1a4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	f040 80bb 	bne.w	8003afe <HAL_SD_MspInit+0x19a>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003988:	4b60      	ldr	r3, [pc, #384]	@ (8003b0c <HAL_SD_MspInit+0x1a8>)
 800398a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398c:	4a5f      	ldr	r2, [pc, #380]	@ (8003b0c <HAL_SD_MspInit+0x1a8>)
 800398e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003992:	6453      	str	r3, [r2, #68]	@ 0x44
 8003994:	4b5d      	ldr	r3, [pc, #372]	@ (8003b0c <HAL_SD_MspInit+0x1a8>)
 8003996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003998:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039a0:	4b5a      	ldr	r3, [pc, #360]	@ (8003b0c <HAL_SD_MspInit+0x1a8>)
 80039a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a4:	4a59      	ldr	r2, [pc, #356]	@ (8003b0c <HAL_SD_MspInit+0x1a8>)
 80039a6:	f043 0304 	orr.w	r3, r3, #4
 80039aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80039ac:	4b57      	ldr	r3, [pc, #348]	@ (8003b0c <HAL_SD_MspInit+0x1a8>)
 80039ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039b8:	4b54      	ldr	r3, [pc, #336]	@ (8003b0c <HAL_SD_MspInit+0x1a8>)
 80039ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039bc:	4a53      	ldr	r2, [pc, #332]	@ (8003b0c <HAL_SD_MspInit+0x1a8>)
 80039be:	f043 0308 	orr.w	r3, r3, #8
 80039c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80039c4:	4b51      	ldr	r3, [pc, #324]	@ (8003b0c <HAL_SD_MspInit+0x1a8>)
 80039c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c8:	f003 0308 	and.w	r3, r3, #8
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80039d0:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80039d4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d6:	2302      	movs	r3, #2
 80039d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039de:	2303      	movs	r3, #3
 80039e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80039e2:	230c      	movs	r3, #12
 80039e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039e6:	f107 0314 	add.w	r3, r7, #20
 80039ea:	4619      	mov	r1, r3
 80039ec:	4848      	ldr	r0, [pc, #288]	@ (8003b10 <HAL_SD_MspInit+0x1ac>)
 80039ee:	f005 fd51 	bl	8009494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80039f2:	2304      	movs	r3, #4
 80039f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f6:	2302      	movs	r3, #2
 80039f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039fe:	2303      	movs	r3, #3
 8003a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003a02:	230c      	movs	r3, #12
 8003a04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003a06:	f107 0314 	add.w	r3, r7, #20
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4841      	ldr	r0, [pc, #260]	@ (8003b14 <HAL_SD_MspInit+0x1b0>)
 8003a0e:	f005 fd41 	bl	8009494 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8003a12:	4b41      	ldr	r3, [pc, #260]	@ (8003b18 <HAL_SD_MspInit+0x1b4>)
 8003a14:	4a41      	ldr	r2, [pc, #260]	@ (8003b1c <HAL_SD_MspInit+0x1b8>)
 8003a16:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8003a18:	4b3f      	ldr	r3, [pc, #252]	@ (8003b18 <HAL_SD_MspInit+0x1b4>)
 8003a1a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003a1e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a20:	4b3d      	ldr	r3, [pc, #244]	@ (8003b18 <HAL_SD_MspInit+0x1b4>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a26:	4b3c      	ldr	r3, [pc, #240]	@ (8003b18 <HAL_SD_MspInit+0x1b4>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a2c:	4b3a      	ldr	r3, [pc, #232]	@ (8003b18 <HAL_SD_MspInit+0x1b4>)
 8003a2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a32:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a34:	4b38      	ldr	r3, [pc, #224]	@ (8003b18 <HAL_SD_MspInit+0x1b4>)
 8003a36:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a3a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003a3c:	4b36      	ldr	r3, [pc, #216]	@ (8003b18 <HAL_SD_MspInit+0x1b4>)
 8003a3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003a42:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8003a44:	4b34      	ldr	r3, [pc, #208]	@ (8003b18 <HAL_SD_MspInit+0x1b4>)
 8003a46:	2220      	movs	r2, #32
 8003a48:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a4a:	4b33      	ldr	r3, [pc, #204]	@ (8003b18 <HAL_SD_MspInit+0x1b4>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003a50:	4b31      	ldr	r3, [pc, #196]	@ (8003b18 <HAL_SD_MspInit+0x1b4>)
 8003a52:	2204      	movs	r2, #4
 8003a54:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003a56:	4b30      	ldr	r3, [pc, #192]	@ (8003b18 <HAL_SD_MspInit+0x1b4>)
 8003a58:	2203      	movs	r2, #3
 8003a5a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8003b18 <HAL_SD_MspInit+0x1b4>)
 8003a5e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003a62:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003a64:	4b2c      	ldr	r3, [pc, #176]	@ (8003b18 <HAL_SD_MspInit+0x1b4>)
 8003a66:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003a6a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8003a6c:	482a      	ldr	r0, [pc, #168]	@ (8003b18 <HAL_SD_MspInit+0x1b4>)
 8003a6e:	f004 fd93 	bl	8008598 <HAL_DMA_Init>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8003a78:	f7ff fd6e 	bl	8003558 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a26      	ldr	r2, [pc, #152]	@ (8003b18 <HAL_SD_MspInit+0x1b4>)
 8003a80:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a82:	4a25      	ldr	r2, [pc, #148]	@ (8003b18 <HAL_SD_MspInit+0x1b4>)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8003a88:	4b25      	ldr	r3, [pc, #148]	@ (8003b20 <HAL_SD_MspInit+0x1bc>)
 8003a8a:	4a26      	ldr	r2, [pc, #152]	@ (8003b24 <HAL_SD_MspInit+0x1c0>)
 8003a8c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8003a8e:	4b24      	ldr	r3, [pc, #144]	@ (8003b20 <HAL_SD_MspInit+0x1bc>)
 8003a90:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003a94:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a96:	4b22      	ldr	r3, [pc, #136]	@ (8003b20 <HAL_SD_MspInit+0x1bc>)
 8003a98:	2240      	movs	r2, #64	@ 0x40
 8003a9a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a9c:	4b20      	ldr	r3, [pc, #128]	@ (8003b20 <HAL_SD_MspInit+0x1bc>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8003b20 <HAL_SD_MspInit+0x1bc>)
 8003aa4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003aa8:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8003b20 <HAL_SD_MspInit+0x1bc>)
 8003aac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003ab0:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8003b20 <HAL_SD_MspInit+0x1bc>)
 8003ab4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003ab8:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8003aba:	4b19      	ldr	r3, [pc, #100]	@ (8003b20 <HAL_SD_MspInit+0x1bc>)
 8003abc:	2220      	movs	r2, #32
 8003abe:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ac0:	4b17      	ldr	r3, [pc, #92]	@ (8003b20 <HAL_SD_MspInit+0x1bc>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003ac6:	4b16      	ldr	r3, [pc, #88]	@ (8003b20 <HAL_SD_MspInit+0x1bc>)
 8003ac8:	2204      	movs	r2, #4
 8003aca:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003acc:	4b14      	ldr	r3, [pc, #80]	@ (8003b20 <HAL_SD_MspInit+0x1bc>)
 8003ace:	2203      	movs	r2, #3
 8003ad0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003ad2:	4b13      	ldr	r3, [pc, #76]	@ (8003b20 <HAL_SD_MspInit+0x1bc>)
 8003ad4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003ada:	4b11      	ldr	r3, [pc, #68]	@ (8003b20 <HAL_SD_MspInit+0x1bc>)
 8003adc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003ae0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8003ae2:	480f      	ldr	r0, [pc, #60]	@ (8003b20 <HAL_SD_MspInit+0x1bc>)
 8003ae4:	f004 fd58 	bl	8008598 <HAL_DMA_Init>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 8003aee:	f7ff fd33 	bl	8003558 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a0a      	ldr	r2, [pc, #40]	@ (8003b20 <HAL_SD_MspInit+0x1bc>)
 8003af6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003af8:	4a09      	ldr	r2, [pc, #36]	@ (8003b20 <HAL_SD_MspInit+0x1bc>)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8003afe:	bf00      	nop
 8003b00:	3728      	adds	r7, #40	@ 0x28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40012c00 	.word	0x40012c00
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	40020800 	.word	0x40020800
 8003b14:	40020c00 	.word	0x40020c00
 8003b18:	200009b4 	.word	0x200009b4
 8003b1c:	40026458 	.word	0x40026458
 8003b20:	20000a14 	.word	0x20000a14
 8003b24:	400264a0 	.word	0x400264a0

08003b28 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08c      	sub	sp, #48	@ 0x30
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a51      	ldr	r2, [pc, #324]	@ (8003c78 <I2Cx_MspInit+0x150>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d14d      	bne.n	8003bd4 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003b38:	4b50      	ldr	r3, [pc, #320]	@ (8003c7c <I2Cx_MspInit+0x154>)
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3c:	4a4f      	ldr	r2, [pc, #316]	@ (8003c7c <I2Cx_MspInit+0x154>)
 8003b3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b42:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b44:	4b4d      	ldr	r3, [pc, #308]	@ (8003c7c <I2Cx_MspInit+0x154>)
 8003b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003b50:	2380      	movs	r3, #128	@ 0x80
 8003b52:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003b54:	2312      	movs	r3, #18
 8003b56:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8003b60:	2304      	movs	r3, #4
 8003b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003b64:	f107 031c 	add.w	r3, r7, #28
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4845      	ldr	r0, [pc, #276]	@ (8003c80 <I2Cx_MspInit+0x158>)
 8003b6c:	f005 fc92 	bl	8009494 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003b70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003b76:	f107 031c 	add.w	r3, r7, #28
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4840      	ldr	r0, [pc, #256]	@ (8003c80 <I2Cx_MspInit+0x158>)
 8003b7e:	f005 fc89 	bl	8009494 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8003b82:	4b3e      	ldr	r3, [pc, #248]	@ (8003c7c <I2Cx_MspInit+0x154>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b86:	4a3d      	ldr	r2, [pc, #244]	@ (8003c7c <I2Cx_MspInit+0x154>)
 8003b88:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c7c <I2Cx_MspInit+0x154>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003b9a:	4b38      	ldr	r3, [pc, #224]	@ (8003c7c <I2Cx_MspInit+0x154>)
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	4a37      	ldr	r2, [pc, #220]	@ (8003c7c <I2Cx_MspInit+0x154>)
 8003ba0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ba4:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003ba6:	4b35      	ldr	r3, [pc, #212]	@ (8003c7c <I2Cx_MspInit+0x154>)
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	4a34      	ldr	r2, [pc, #208]	@ (8003c7c <I2Cx_MspInit+0x154>)
 8003bac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003bb0:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	210f      	movs	r1, #15
 8003bb6:	2048      	movs	r0, #72	@ 0x48
 8003bb8:	f004 fcc4 	bl	8008544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003bbc:	2048      	movs	r0, #72	@ 0x48
 8003bbe:	f004 fcdd 	bl	800857c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	210f      	movs	r1, #15
 8003bc6:	2049      	movs	r0, #73	@ 0x49
 8003bc8:	f004 fcbc 	bl	8008544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003bcc:	2049      	movs	r0, #73	@ 0x49
 8003bce:	f004 fcd5 	bl	800857c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003bd2:	e04d      	b.n	8003c70 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003bd4:	4b29      	ldr	r3, [pc, #164]	@ (8003c7c <I2Cx_MspInit+0x154>)
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd8:	4a28      	ldr	r2, [pc, #160]	@ (8003c7c <I2Cx_MspInit+0x154>)
 8003bda:	f043 0302 	orr.w	r3, r3, #2
 8003bde:	6313      	str	r3, [r2, #48]	@ 0x30
 8003be0:	4b26      	ldr	r3, [pc, #152]	@ (8003c7c <I2Cx_MspInit+0x154>)
 8003be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003bec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003bf0:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003bf2:	2312      	movs	r3, #18
 8003bf4:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003bfe:	2304      	movs	r3, #4
 8003c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003c02:	f107 031c 	add.w	r3, r7, #28
 8003c06:	4619      	mov	r1, r3
 8003c08:	481e      	ldr	r0, [pc, #120]	@ (8003c84 <I2Cx_MspInit+0x15c>)
 8003c0a:	f005 fc43 	bl	8009494 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003c0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003c14:	f107 031c 	add.w	r3, r7, #28
 8003c18:	4619      	mov	r1, r3
 8003c1a:	481a      	ldr	r0, [pc, #104]	@ (8003c84 <I2Cx_MspInit+0x15c>)
 8003c1c:	f005 fc3a 	bl	8009494 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003c20:	4b16      	ldr	r3, [pc, #88]	@ (8003c7c <I2Cx_MspInit+0x154>)
 8003c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c24:	4a15      	ldr	r2, [pc, #84]	@ (8003c7c <I2Cx_MspInit+0x154>)
 8003c26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003c2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c2c:	4b13      	ldr	r3, [pc, #76]	@ (8003c7c <I2Cx_MspInit+0x154>)
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003c38:	4b10      	ldr	r3, [pc, #64]	@ (8003c7c <I2Cx_MspInit+0x154>)
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	4a0f      	ldr	r2, [pc, #60]	@ (8003c7c <I2Cx_MspInit+0x154>)
 8003c3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003c42:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003c44:	4b0d      	ldr	r3, [pc, #52]	@ (8003c7c <I2Cx_MspInit+0x154>)
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	4a0c      	ldr	r2, [pc, #48]	@ (8003c7c <I2Cx_MspInit+0x154>)
 8003c4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c4e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003c50:	2200      	movs	r2, #0
 8003c52:	210f      	movs	r1, #15
 8003c54:	201f      	movs	r0, #31
 8003c56:	f004 fc75 	bl	8008544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003c5a:	201f      	movs	r0, #31
 8003c5c:	f004 fc8e 	bl	800857c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003c60:	2200      	movs	r2, #0
 8003c62:	210f      	movs	r1, #15
 8003c64:	2020      	movs	r0, #32
 8003c66:	f004 fc6d 	bl	8008544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003c6a:	2020      	movs	r0, #32
 8003c6c:	f004 fc86 	bl	800857c <HAL_NVIC_EnableIRQ>
}
 8003c70:	bf00      	nop
 8003c72:	3730      	adds	r7, #48	@ 0x30
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20000a74 	.word	0x20000a74
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40021c00 	.word	0x40021c00
 8003c84:	40020400 	.word	0x40020400

08003c88 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f006 f9eb 	bl	800a06c <HAL_I2C_GetState>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d125      	bne.n	8003ce8 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a14      	ldr	r2, [pc, #80]	@ (8003cf0 <I2Cx_Init+0x68>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d103      	bne.n	8003cac <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a13      	ldr	r2, [pc, #76]	@ (8003cf4 <I2Cx_Init+0x6c>)
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	e002      	b.n	8003cb2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a12      	ldr	r2, [pc, #72]	@ (8003cf8 <I2Cx_Init+0x70>)
 8003cb0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a11      	ldr	r2, [pc, #68]	@ (8003cfc <I2Cx_Init+0x74>)
 8003cb6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff ff23 	bl	8003b28 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f005 fec0 	bl	8009a68 <HAL_I2C_Init>
  }
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20000a74 	.word	0x20000a74
 8003cf4:	40005c00 	.word	0x40005c00
 8003cf8:	40005400 	.word	0x40005400
 8003cfc:	40912732 	.word	0x40912732

08003d00 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08a      	sub	sp, #40	@ 0x28
 8003d04:	af04      	add	r7, sp, #16
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	4608      	mov	r0, r1
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4603      	mov	r3, r0
 8003d10:	72fb      	strb	r3, [r7, #11]
 8003d12:	460b      	mov	r3, r1
 8003d14:	813b      	strh	r3, [r7, #8]
 8003d16:	4613      	mov	r3, r2
 8003d18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003d1e:	7afb      	ldrb	r3, [r7, #11]
 8003d20:	b299      	uxth	r1, r3
 8003d22:	88f8      	ldrh	r0, [r7, #6]
 8003d24:	893a      	ldrh	r2, [r7, #8]
 8003d26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d2a:	9302      	str	r3, [sp, #8]
 8003d2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003d2e:	9301      	str	r3, [sp, #4]
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	4603      	mov	r3, r0
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f006 f87e 	bl	8009e38 <HAL_I2C_Mem_Read>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003d40:	7dfb      	ldrb	r3, [r7, #23]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d004      	beq.n	8003d50 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003d46:	7afb      	ldrb	r3, [r7, #11]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 f832 	bl	8003db4 <I2Cx_Error>
  }
  return status;    
 8003d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b08a      	sub	sp, #40	@ 0x28
 8003d5e:	af04      	add	r7, sp, #16
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	4608      	mov	r0, r1
 8003d64:	4611      	mov	r1, r2
 8003d66:	461a      	mov	r2, r3
 8003d68:	4603      	mov	r3, r0
 8003d6a:	72fb      	strb	r3, [r7, #11]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	813b      	strh	r3, [r7, #8]
 8003d70:	4613      	mov	r3, r2
 8003d72:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003d78:	7afb      	ldrb	r3, [r7, #11]
 8003d7a:	b299      	uxth	r1, r3
 8003d7c:	88f8      	ldrh	r0, [r7, #6]
 8003d7e:	893a      	ldrh	r2, [r7, #8]
 8003d80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d84:	9302      	str	r3, [sp, #8]
 8003d86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003d88:	9301      	str	r3, [sp, #4]
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	4603      	mov	r3, r0
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f005 ff3d 	bl	8009c10 <HAL_I2C_Mem_Write>
 8003d96:	4603      	mov	r3, r0
 8003d98:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003d9a:	7dfb      	ldrb	r3, [r7, #23]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d004      	beq.n	8003daa <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003da0:	7afb      	ldrb	r3, [r7, #11]
 8003da2:	4619      	mov	r1, r3
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 f805 	bl	8003db4 <I2Cx_Error>
  }
  return status;
 8003daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f005 fee1 	bl	8009b88 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7ff ff5e 	bl	8003c88 <I2Cx_Init>
}
 8003dcc:	bf00      	nop
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003dd8:	4802      	ldr	r0, [pc, #8]	@ (8003de4 <AUDIO_IO_Init+0x10>)
 8003dda:	f7ff ff55 	bl	8003c88 <I2Cx_Init>
}
 8003dde:	bf00      	nop
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000a74 	.word	0x20000a74

08003de8 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
}
 8003dec:	bf00      	nop
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
	...

08003df8 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	4603      	mov	r3, r0
 8003e00:	71fb      	strb	r3, [r7, #7]
 8003e02:	460b      	mov	r3, r1
 8003e04:	80bb      	strh	r3, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8003e0a:	887b      	ldrh	r3, [r7, #2]
 8003e0c:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8003e0e:	89fb      	ldrh	r3, [r7, #14]
 8003e10:	0a1b      	lsrs	r3, r3, #8
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8003e16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	b21a      	sxth	r2, r3
 8003e1e:	887b      	ldrh	r3, [r7, #2]
 8003e20:	b21b      	sxth	r3, r3
 8003e22:	4313      	orrs	r3, r2
 8003e24:	b21b      	sxth	r3, r3
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8003e2a:	88ba      	ldrh	r2, [r7, #4]
 8003e2c:	79f9      	ldrb	r1, [r7, #7]
 8003e2e:	2302      	movs	r3, #2
 8003e30:	9301      	str	r3, [sp, #4]
 8003e32:	1cbb      	adds	r3, r7, #2
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	2302      	movs	r3, #2
 8003e38:	4803      	ldr	r0, [pc, #12]	@ (8003e48 <AUDIO_IO_Write+0x50>)
 8003e3a:	f7ff ff8e 	bl	8003d5a <I2Cx_WriteMultiple>
}
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20000a74 	.word	0x20000a74

08003e4c <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	4603      	mov	r3, r0
 8003e54:	460a      	mov	r2, r1
 8003e56:	71fb      	strb	r3, [r7, #7]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	81bb      	strh	r3, [r7, #12]
 8003e60:	2300      	movs	r3, #0
 8003e62:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8003e64:	88ba      	ldrh	r2, [r7, #4]
 8003e66:	79f9      	ldrb	r1, [r7, #7]
 8003e68:	2302      	movs	r3, #2
 8003e6a:	9301      	str	r3, [sp, #4]
 8003e6c:	f107 030c 	add.w	r3, r7, #12
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	2302      	movs	r3, #2
 8003e74:	480a      	ldr	r0, [pc, #40]	@ (8003ea0 <AUDIO_IO_Read+0x54>)
 8003e76:	f7ff ff43 	bl	8003d00 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8003e7a:	89bb      	ldrh	r3, [r7, #12]
 8003e7c:	0a1b      	lsrs	r3, r3, #8
 8003e7e:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8003e80:	89bb      	ldrh	r3, [r7, #12]
 8003e82:	b21b      	sxth	r3, r3
 8003e84:	021b      	lsls	r3, r3, #8
 8003e86:	b21a      	sxth	r2, r3
 8003e88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	b21b      	sxth	r3, r3
 8003e90:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8003e92:	89fb      	ldrh	r3, [r7, #14]
 8003e94:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8003e96:	89bb      	ldrh	r3, [r7, #12]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	20000a74 	.word	0x20000a74

08003ea4 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f003 fe73 	bl	8007b98 <HAL_Delay>
}
 8003eb2:	bf00      	nop
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003ec0:	4802      	ldr	r0, [pc, #8]	@ (8003ecc <TS_IO_Init+0x10>)
 8003ec2:	f7ff fee1 	bl	8003c88 <I2Cx_Init>
}
 8003ec6:	bf00      	nop
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20000a74 	.word	0x20000a74

08003ed0 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	71fb      	strb	r3, [r7, #7]
 8003eda:	460b      	mov	r3, r1
 8003edc:	71bb      	strb	r3, [r7, #6]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003ee2:	79bb      	ldrb	r3, [r7, #6]
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	79f9      	ldrb	r1, [r7, #7]
 8003ee8:	2301      	movs	r3, #1
 8003eea:	9301      	str	r3, [sp, #4]
 8003eec:	1d7b      	adds	r3, r7, #5
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	4803      	ldr	r0, [pc, #12]	@ (8003f00 <TS_IO_Write+0x30>)
 8003ef4:	f7ff ff31 	bl	8003d5a <I2Cx_WriteMultiple>
}
 8003ef8:	bf00      	nop
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	20000a74 	.word	0x20000a74

08003f04 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af02      	add	r7, sp, #8
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	460a      	mov	r2, r1
 8003f0e:	71fb      	strb	r3, [r7, #7]
 8003f10:	4613      	mov	r3, r2
 8003f12:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003f14:	2300      	movs	r3, #0
 8003f16:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003f18:	79bb      	ldrb	r3, [r7, #6]
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	79f9      	ldrb	r1, [r7, #7]
 8003f1e:	2301      	movs	r3, #1
 8003f20:	9301      	str	r3, [sp, #4]
 8003f22:	f107 030f 	add.w	r3, r7, #15
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	2301      	movs	r3, #1
 8003f2a:	4804      	ldr	r0, [pc, #16]	@ (8003f3c <TS_IO_Read+0x38>)
 8003f2c:	f7ff fee8 	bl	8003d00 <I2Cx_ReadMultiple>

  return read_value;
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20000a74 	.word	0x20000a74

08003f40 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f003 fe25 	bl	8007b98 <HAL_Delay>
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <BSP_AUDIO_OUT_Play>:
 * @param  pBuffer: Pointer to the buffer
 * @param  Size: Number of audio data in BYTES unit.
 *         In memory, first element is for left channel, second element is for right channel
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_Play(uint16_t *pBuffer, uint32_t Size) {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
	/* Call the audio Codec Play function */
	if (audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0) {
 8003f62:	4b10      	ldr	r3, [pc, #64]	@ (8003fa4 <BSP_AUDIO_OUT_Play+0x4c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	b292      	uxth	r2, r2
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	2034      	movs	r0, #52	@ 0x34
 8003f70:	4798      	blx	r3
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <BSP_AUDIO_OUT_Play+0x24>
		return AUDIO_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e00f      	b.n	8003f9c <BSP_AUDIO_OUT_Play+0x44>
	} else {
		/* Update the Media layer and enable it for play */
		HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer,
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f82:	d203      	bcs.n	8003f8c <BSP_AUDIO_OUT_Play+0x34>
				DMA_MAX(Size / AUDIODATA_SIZE));
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	085b      	lsrs	r3, r3, #1
		HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer,
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	e001      	b.n	8003f90 <BSP_AUDIO_OUT_Play+0x38>
 8003f8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f90:	461a      	mov	r2, r3
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	4804      	ldr	r0, [pc, #16]	@ (8003fa8 <BSP_AUDIO_OUT_Play+0x50>)
 8003f96:	f008 fb95 	bl	800c6c4 <HAL_SAI_Transmit_DMA>

		return AUDIO_OK;
 8003f9a:	2300      	movs	r3, #0
	}
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20000ac8 	.word	0x20000ac8
 8003fa8:	20000acc 	.word	0x20000acc

08003fac <BSP_AUDIO_OUT_SetVolume>:
 * @brief  Controls the current audio volume level.
 * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for
 *         Mute and 100 for Max volume level).
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_SetVolume(uint8_t Volume) {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	71fb      	strb	r3, [r7, #7]
	/* Call the codec volume control function with converted volume value */
	if (audio_drv->SetVolumeOut(AUDIO_I2C_ADDRESS, Volume) != 0) {
 8003fb6:	4b08      	ldr	r3, [pc, #32]	@ (8003fd8 <BSP_AUDIO_OUT_SetVolume+0x2c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbc:	79fa      	ldrb	r2, [r7, #7]
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	2034      	movs	r0, #52	@ 0x34
 8003fc2:	4798      	blx	r3
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <BSP_AUDIO_OUT_SetVolume+0x22>
		return AUDIO_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <BSP_AUDIO_OUT_SetVolume+0x24>
	} else {
		/* Return AUDIO_OK when all operations are correctly done */
		return AUDIO_OK;
 8003fce:	2300      	movs	r3, #0
	}
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20000ac8 	.word	0x20000ac8

08003fdc <BSP_AUDIO_OUT_SetAudioFrameSlot>:
 *            @arg CODEC_AUDIOFRAME_SLOT_13
 * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
 *         audio frame slot.
 * @retval None
 */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot) {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 8003fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8004018 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	4b0b      	ldr	r3, [pc, #44]	@ (8004018 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003ff2:	601a      	str	r2, [r3, #0]

	/* Update the SAI audio frame slot configuration */
	haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 8003ff4:	4a08      	ldr	r2, [pc, #32]	@ (8004018 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6613      	str	r3, [r2, #96]	@ 0x60
	HAL_SAI_Init(&haudio_out_sai);
 8003ffa:	4807      	ldr	r0, [pc, #28]	@ (8004018 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003ffc:	f008 f9ae 	bl	800c35c <HAL_SAI_Init>

	/* Enable SAI peripheral to generate MCLK */
	__HAL_SAI_ENABLE(&haudio_out_sai);
 8004000:	4b05      	ldr	r3, [pc, #20]	@ (8004018 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	4b04      	ldr	r3, [pc, #16]	@ (8004018 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800400e:	601a      	str	r2, [r3, #0]
}
 8004010:	bf00      	nop
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	20000acc 	.word	0x20000acc

0800401c <HAL_SAI_TxCpltCallback>:
/**
 * @brief  Tx Transfer completed callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
	/* Manage the remaining file size and new address offset: This function
	 should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
	BSP_AUDIO_OUT_TransferComplete_CallBack();
 8004024:	f000 f834 	bl	8004090 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8004028:	bf00      	nop
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_SAI_TxHalfCpltCallback>:
/**
 * @brief  Tx Half Transfer completed callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
	/* Manage the remaining file size and new address offset: This function
	 should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
	BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8004038:	f000 f831 	bl	800409e <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 800403c:	bf00      	nop
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_SAI_ErrorCallback>:
/**
 * @brief  SAI error callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
	HAL_SAI_StateTypeDef audio_out_state;
	HAL_SAI_StateTypeDef audio_in_state;

	audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 800404c:	480e      	ldr	r0, [pc, #56]	@ (8004088 <HAL_SAI_ErrorCallback+0x44>)
 800404e:	f008 fbe9 	bl	800c824 <HAL_SAI_GetState>
 8004052:	4603      	mov	r3, r0
 8004054:	73fb      	strb	r3, [r7, #15]
	audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8004056:	480d      	ldr	r0, [pc, #52]	@ (800408c <HAL_SAI_ErrorCallback+0x48>)
 8004058:	f008 fbe4 	bl	800c824 <HAL_SAI_GetState>
 800405c:	4603      	mov	r3, r0
 800405e:	73bb      	strb	r3, [r7, #14]

	/* Determines if it is an audio out or audio in error */
	if ((audio_out_state == HAL_SAI_STATE_BUSY)
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d002      	beq.n	800406c <HAL_SAI_ErrorCallback+0x28>
			|| (audio_out_state == HAL_SAI_STATE_BUSY_TX)) {
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	2b12      	cmp	r3, #18
 800406a:	d101      	bne.n	8004070 <HAL_SAI_ErrorCallback+0x2c>
		BSP_AUDIO_OUT_Error_CallBack();
 800406c:	f000 f81e 	bl	80040ac <BSP_AUDIO_OUT_Error_CallBack>
	}

	if ((audio_in_state == HAL_SAI_STATE_BUSY)
 8004070:	7bbb      	ldrb	r3, [r7, #14]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d002      	beq.n	800407c <HAL_SAI_ErrorCallback+0x38>
			|| (audio_in_state == HAL_SAI_STATE_BUSY_RX)) {
 8004076:	7bbb      	ldrb	r3, [r7, #14]
 8004078:	2b22      	cmp	r3, #34	@ 0x22
 800407a:	d101      	bne.n	8004080 <HAL_SAI_ErrorCallback+0x3c>
		BSP_AUDIO_IN_Error_CallBack();
 800407c:	f000 f9cc 	bl	8004418 <BSP_AUDIO_IN_Error_CallBack>
	}
}
 8004080:	bf00      	nop
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20000acc 	.word	0x20000acc
 800408c:	20000b50 	.word	0x20000b50

08004090 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
 * @brief  Manages the DMA full Transfer complete event.
 * @retval None
 */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void) {
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
}
 8004094:	bf00      	nop
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <BSP_AUDIO_OUT_HalfTransfer_CallBack>:

/**
 * @brief  Manages the DMA Half Transfer complete event.
 * @retval None
 */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(void) {
 800409e:	b480      	push	{r7}
 80040a0:	af00      	add	r7, sp, #0
}
 80040a2:	bf00      	nop
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <BSP_AUDIO_OUT_Error_CallBack>:

/**
 * @brief  Manages the DMA FIFO error event.
 * @retval None
 */
__weak void BSP_AUDIO_OUT_Error_CallBack(void) {
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
}
 80040b0:	bf00      	nop
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
	...

080040bc <BSP_AUDIO_OUT_MspInit>:
 * @brief  Initializes BSP_AUDIO_OUT MSP.
 * @param  hsai: SAI handle
 * @param  Params
 * @retval None
 */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params) {
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08c      	sub	sp, #48	@ 0x30
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_sai_tx;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable SAI clock */
	AUDIO_OUT_SAIx_CLK_ENABLE();
 80040c6:	4b63      	ldr	r3, [pc, #396]	@ (8004254 <BSP_AUDIO_OUT_MspInit+0x198>)
 80040c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ca:	4a62      	ldr	r2, [pc, #392]	@ (8004254 <BSP_AUDIO_OUT_MspInit+0x198>)
 80040cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80040d2:	4b60      	ldr	r3, [pc, #384]	@ (8004254 <BSP_AUDIO_OUT_MspInit+0x198>)
 80040d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040da:	61bb      	str	r3, [r7, #24]
 80040dc:	69bb      	ldr	r3, [r7, #24]

	/* Enable GPIO clock */
	AUDIO_OUT_SAIx_MCLK_ENABLE();
 80040de:	4b5d      	ldr	r3, [pc, #372]	@ (8004254 <BSP_AUDIO_OUT_MspInit+0x198>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e2:	4a5c      	ldr	r2, [pc, #368]	@ (8004254 <BSP_AUDIO_OUT_MspInit+0x198>)
 80040e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80040ea:	4b5a      	ldr	r3, [pc, #360]	@ (8004254 <BSP_AUDIO_OUT_MspInit+0x198>)
 80040ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	697b      	ldr	r3, [r7, #20]
	AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 80040f6:	4b57      	ldr	r3, [pc, #348]	@ (8004254 <BSP_AUDIO_OUT_MspInit+0x198>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fa:	4a56      	ldr	r2, [pc, #344]	@ (8004254 <BSP_AUDIO_OUT_MspInit+0x198>)
 80040fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004100:	6313      	str	r3, [r2, #48]	@ 0x30
 8004102:	4b54      	ldr	r3, [pc, #336]	@ (8004254 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800410a:	613b      	str	r3, [r7, #16]
 800410c:	693b      	ldr	r3, [r7, #16]
	AUDIO_OUT_SAIx_FS_ENABLE();
 800410e:	4b51      	ldr	r3, [pc, #324]	@ (8004254 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004112:	4a50      	ldr	r2, [pc, #320]	@ (8004254 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004118:	6313      	str	r3, [r2, #48]	@ 0x30
 800411a:	4b4e      	ldr	r3, [pc, #312]	@ (8004254 <BSP_AUDIO_OUT_MspInit+0x198>)
 800411c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	68fb      	ldr	r3, [r7, #12]
	/* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
	gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8004126:	2380      	movs	r3, #128	@ 0x80
 8004128:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800412a:	2302      	movs	r3, #2
 800412c:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800412e:	2300      	movs	r3, #0
 8004130:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004132:	2303      	movs	r3, #3
 8004134:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8004136:	230a      	movs	r3, #10
 8004138:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 800413a:	f107 031c 	add.w	r3, r7, #28
 800413e:	4619      	mov	r1, r3
 8004140:	4845      	ldr	r0, [pc, #276]	@ (8004258 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004142:	f005 f9a7 	bl	8009494 <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8004146:	2320      	movs	r3, #32
 8004148:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800414a:	2302      	movs	r3, #2
 800414c:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800414e:	2300      	movs	r3, #0
 8004150:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004152:	2303      	movs	r3, #3
 8004154:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8004156:	230a      	movs	r3, #10
 8004158:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800415a:	f107 031c 	add.w	r3, r7, #28
 800415e:	4619      	mov	r1, r3
 8004160:	483d      	ldr	r0, [pc, #244]	@ (8004258 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004162:	f005 f997 	bl	8009494 <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_SD_PIN;
 8004166:	2340      	movs	r3, #64	@ 0x40
 8004168:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800416a:	2302      	movs	r3, #2
 800416c:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800416e:	2300      	movs	r3, #0
 8004170:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004172:	2303      	movs	r3, #3
 8004174:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8004176:	230a      	movs	r3, #10
 8004178:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800417a:	f107 031c 	add.w	r3, r7, #28
 800417e:	4619      	mov	r1, r3
 8004180:	4835      	ldr	r0, [pc, #212]	@ (8004258 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004182:	f005 f987 	bl	8009494 <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8004186:	2310      	movs	r3, #16
 8004188:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800418a:	2302      	movs	r3, #2
 800418c:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800418e:	2300      	movs	r3, #0
 8004190:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004192:	2303      	movs	r3, #3
 8004194:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8004196:	230a      	movs	r3, #10
 8004198:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800419a:	f107 031c 	add.w	r3, r7, #28
 800419e:	4619      	mov	r1, r3
 80041a0:	482d      	ldr	r0, [pc, #180]	@ (8004258 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80041a2:	f005 f977 	bl	8009494 <HAL_GPIO_Init>

	/* Enable the DMA clock */
	AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 80041a6:	4b2b      	ldr	r3, [pc, #172]	@ (8004254 <BSP_AUDIO_OUT_MspInit+0x198>)
 80041a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004254 <BSP_AUDIO_OUT_MspInit+0x198>)
 80041ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80041b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80041b2:	4b28      	ldr	r3, [pc, #160]	@ (8004254 <BSP_AUDIO_OUT_MspInit+0x198>)
 80041b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041ba:	60bb      	str	r3, [r7, #8]
 80041bc:	68bb      	ldr	r3, [r7, #8]

	if (hsai->Instance == AUDIO_OUT_SAIx) {
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a26      	ldr	r2, [pc, #152]	@ (800425c <BSP_AUDIO_OUT_MspInit+0x1a0>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d138      	bne.n	800423a <BSP_AUDIO_OUT_MspInit+0x17e>
		/* Configure the hdma_saiTx handle parameters */
		hdma_sai_tx.Init.Channel = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 80041c8:	4b25      	ldr	r3, [pc, #148]	@ (8004260 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80041ca:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80041ce:	605a      	str	r2, [r3, #4]
		hdma_sai_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80041d0:	4b23      	ldr	r3, [pc, #140]	@ (8004260 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80041d2:	2240      	movs	r2, #64	@ 0x40
 80041d4:	609a      	str	r2, [r3, #8]
		hdma_sai_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041d6:	4b22      	ldr	r3, [pc, #136]	@ (8004260 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80041d8:	2200      	movs	r2, #0
 80041da:	60da      	str	r2, [r3, #12]
		hdma_sai_tx.Init.MemInc = DMA_MINC_ENABLE;
 80041dc:	4b20      	ldr	r3, [pc, #128]	@ (8004260 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80041de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041e2:	611a      	str	r2, [r3, #16]
		hdma_sai_tx.Init.PeriphDataAlignment =
 80041e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004260 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80041e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041ea:	615a      	str	r2, [r3, #20]
				AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
		hdma_sai_tx.Init.MemDataAlignment = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 80041ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004260 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80041ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80041f2:	619a      	str	r2, [r3, #24]
		hdma_sai_tx.Init.Mode = DMA_CIRCULAR;
 80041f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004260 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80041f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80041fa:	61da      	str	r2, [r3, #28]
		hdma_sai_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80041fc:	4b18      	ldr	r3, [pc, #96]	@ (8004260 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80041fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004202:	621a      	str	r2, [r3, #32]
		hdma_sai_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004204:	4b16      	ldr	r3, [pc, #88]	@ (8004260 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004206:	2204      	movs	r2, #4
 8004208:	625a      	str	r2, [r3, #36]	@ 0x24
		hdma_sai_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800420a:	4b15      	ldr	r3, [pc, #84]	@ (8004260 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800420c:	2203      	movs	r2, #3
 800420e:	629a      	str	r2, [r3, #40]	@ 0x28
		hdma_sai_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004210:	4b13      	ldr	r3, [pc, #76]	@ (8004260 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004212:	2200      	movs	r2, #0
 8004214:	62da      	str	r2, [r3, #44]	@ 0x2c
		hdma_sai_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004216:	4b12      	ldr	r3, [pc, #72]	@ (8004260 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004218:	2200      	movs	r2, #0
 800421a:	631a      	str	r2, [r3, #48]	@ 0x30

		hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 800421c:	4b10      	ldr	r3, [pc, #64]	@ (8004260 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800421e:	4a11      	ldr	r2, [pc, #68]	@ (8004264 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8004220:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a0e      	ldr	r2, [pc, #56]	@ (8004260 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004226:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004228:	4a0d      	ldr	r2, [pc, #52]	@ (8004260 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6393      	str	r3, [r2, #56]	@ 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_sai_tx);
 800422e:	480c      	ldr	r0, [pc, #48]	@ (8004260 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004230:	f004 fa60 	bl	80086f4 <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_sai_tx);
 8004234:	480a      	ldr	r0, [pc, #40]	@ (8004260 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004236:	f004 f9af 	bl	8008598 <HAL_DMA_Init>
	}

	/* SAI DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800423a:	2200      	movs	r2, #0
 800423c:	210e      	movs	r1, #14
 800423e:	203c      	movs	r0, #60	@ 0x3c
 8004240:	f004 f980 	bl	8008544 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8004244:	203c      	movs	r0, #60	@ 0x3c
 8004246:	f004 f999 	bl	800857c <HAL_NVIC_EnableIRQ>
}
 800424a:	bf00      	nop
 800424c:	3730      	adds	r7, #48	@ 0x30
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40023800 	.word	0x40023800
 8004258:	40022000 	.word	0x40022000
 800425c:	40015c04 	.word	0x40015c04
 8004260:	20000bd4 	.word	0x20000bd4
 8004264:	40026470 	.word	0x40026470

08004268 <BSP_AUDIO_OUT_ClockConfig>:
 * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
 *         Being __weak it can be overwritten by the application
 * @retval None
 */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai,
		uint32_t AudioFreq, void *Params) {
 8004268:	b580      	push	{r7, lr}
 800426a:	b0a6      	sub	sp, #152	@ 0x98
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
	RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

	HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004274:	f107 0314 	add.w	r3, r7, #20
 8004278:	4618      	mov	r0, r3
 800427a:	f007 fe23 	bl	800bec4 <HAL_RCCEx_GetPeriphCLKConfig>

	/* Set the PLL configuration according to the audio frequency */
	if ((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K)
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8004284:	4293      	cmp	r3, r2
 8004286:	d009      	beq.n	800429c <BSP_AUDIO_OUT_ClockConfig+0x34>
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f245 6222 	movw	r2, #22050	@ 0x5622
 800428e:	4293      	cmp	r3, r2
 8004290:	d004      	beq.n	800429c <BSP_AUDIO_OUT_ClockConfig+0x34>
			|| (AudioFreq == AUDIO_FREQUENCY_44K)) {
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8004298:	4293      	cmp	r3, r2
 800429a:	d112      	bne.n	80042c2 <BSP_AUDIO_OUT_ClockConfig+0x5a>
		/* Configure PLLI2S prescalers */
		/* PLLI2S_VCO: VCO_429M
		 I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
		 I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
		rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800429c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80042a0:	617b      	str	r3, [r7, #20]
		rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80042a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80042a6:	657b      	str	r3, [r7, #84]	@ 0x54
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 80042a8:	f240 13ad 	movw	r3, #429	@ 0x1ad
 80042ac:	61bb      	str	r3, [r7, #24]
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 80042ae:	2302      	movs	r3, #2
 80042b0:	623b      	str	r3, [r7, #32]
		rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 80042b2:	2313      	movs	r3, #19
 80042b4:	63bb      	str	r3, [r7, #56]	@ 0x38

		HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80042b6:	f107 0314 	add.w	r3, r7, #20
 80042ba:	4618      	mov	r0, r3
 80042bc:	f007 fa12 	bl	800b6e4 <HAL_RCCEx_PeriphCLKConfig>
 80042c0:	e012      	b.n	80042e8 <BSP_AUDIO_OUT_ClockConfig+0x80>
	{
		/* I2S clock config
		 PLLI2S_VCO: VCO_344M
		 I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
		 I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
		rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80042c2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80042c6:	617b      	str	r3, [r7, #20]
		rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80042c8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80042cc:	657b      	str	r3, [r7, #84]	@ 0x54
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 80042ce:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 80042d2:	61bb      	str	r3, [r7, #24]
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 80042d4:	2307      	movs	r3, #7
 80042d6:	623b      	str	r3, [r7, #32]
		rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 80042d8:	2301      	movs	r3, #1
 80042da:	63bb      	str	r3, [r7, #56]	@ 0x38

		HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80042dc:	f107 0314 	add.w	r3, r7, #20
 80042e0:	4618      	mov	r0, r3
 80042e2:	f007 f9ff 	bl	800b6e4 <HAL_RCCEx_PeriphCLKConfig>
	}
}
 80042e6:	bf00      	nop
 80042e8:	bf00      	nop
 80042ea:	3798      	adds	r7, #152	@ 0x98
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <SAIx_Out_DeInit>:

/**
 * @brief  Deinitializes the output Audio Codec audio interface (SAI).
 * @retval None
 */
static void SAIx_Out_DeInit(void) {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
	/* Initialize the haudio_out_sai Instance parameter */
	haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80042f4:	4b07      	ldr	r3, [pc, #28]	@ (8004314 <SAIx_Out_DeInit+0x24>)
 80042f6:	4a08      	ldr	r2, [pc, #32]	@ (8004318 <SAIx_Out_DeInit+0x28>)
 80042f8:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 80042fa:	4b06      	ldr	r3, [pc, #24]	@ (8004314 <SAIx_Out_DeInit+0x24>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	4b04      	ldr	r3, [pc, #16]	@ (8004314 <SAIx_Out_DeInit+0x24>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004308:	601a      	str	r2, [r3, #0]

	HAL_SAI_DeInit(&haudio_out_sai);
 800430a:	4802      	ldr	r0, [pc, #8]	@ (8004314 <SAIx_Out_DeInit+0x24>)
 800430c:	f008 f9a4 	bl	800c658 <HAL_SAI_DeInit>
}
 8004310:	bf00      	nop
 8004312:	bd80      	pop	{r7, pc}
 8004314:	20000acc 	.word	0x20000acc
 8004318:	40015c04 	.word	0x40015c04

0800431c <BSP_AUDIO_IN_OUT_Init>:
 * @param  BitRes: Audio frequency to be configured.
 * @param  ChnlNbr: Channel number.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_OUT_Init(uint16_t InputDevice, uint16_t OutputDevice,
		uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr) {
 800431c:	b590      	push	{r4, r7, lr}
 800431e:	b089      	sub	sp, #36	@ 0x24
 8004320:	af00      	add	r7, sp, #0
 8004322:	60ba      	str	r2, [r7, #8]
 8004324:	607b      	str	r3, [r7, #4]
 8004326:	4603      	mov	r3, r0
 8004328:	81fb      	strh	r3, [r7, #14]
 800432a:	460b      	mov	r3, r1
 800432c:	81bb      	strh	r3, [r7, #12]
	uint8_t ret = AUDIO_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	77fb      	strb	r3, [r7, #31]
	uint32_t deviceid = 0x00;
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]
	uint32_t slot_active;

	if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1)
 8004336:	89fb      	ldrh	r3, [r7, #14]
 8004338:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800433c:	d006      	beq.n	800434c <BSP_AUDIO_IN_OUT_Init+0x30>
			&& (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2)) /* Only MICROPHONE_2 input supported */
 800433e:	89fb      	ldrh	r3, [r7, #14]
 8004340:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004344:	d002      	beq.n	800434c <BSP_AUDIO_IN_OUT_Init+0x30>
			{
		ret = AUDIO_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	77fb      	strb	r3, [r7, #31]
 800434a:	e054      	b.n	80043f6 <BSP_AUDIO_IN_OUT_Init+0xda>
	} else {
		/* Disable SAI */
		SAIx_In_DeInit();
 800434c:	f000 f9d4 	bl	80046f8 <SAIx_In_DeInit>
		SAIx_Out_DeInit();
 8004350:	f7ff ffce 	bl	80042f0 <SAIx_Out_DeInit>

		/* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
		BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8004354:	2200      	movs	r2, #0
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	4829      	ldr	r0, [pc, #164]	@ (8004400 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 800435a:	f7ff ff85 	bl	8004268 <BSP_AUDIO_OUT_ClockConfig>

		/* SAI data transfer preparation:
		 Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
		haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800435e:	4b28      	ldr	r3, [pc, #160]	@ (8004400 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8004360:	4a28      	ldr	r2, [pc, #160]	@ (8004404 <BSP_AUDIO_IN_OUT_Init+0xe8>)
 8004362:	601a      	str	r2, [r3, #0]
		if (HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET) {
 8004364:	4826      	ldr	r0, [pc, #152]	@ (8004400 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8004366:	f008 fa5d 	bl	800c824 <HAL_SAI_GetState>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d103      	bne.n	8004378 <BSP_AUDIO_IN_OUT_Init+0x5c>
			/* Init the SAI MSP: this __weak function can be redefined by the application*/
			BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8004370:	2100      	movs	r1, #0
 8004372:	4823      	ldr	r0, [pc, #140]	@ (8004400 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8004374:	f000 f858 	bl	8004428 <BSP_AUDIO_IN_MspInit>
		}

		/* SAI data transfer preparation:
		 Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
		haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8004378:	4b23      	ldr	r3, [pc, #140]	@ (8004408 <BSP_AUDIO_IN_OUT_Init+0xec>)
 800437a:	4a24      	ldr	r2, [pc, #144]	@ (800440c <BSP_AUDIO_IN_OUT_Init+0xf0>)
 800437c:	601a      	str	r2, [r3, #0]
		if (HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET) {
 800437e:	4822      	ldr	r0, [pc, #136]	@ (8004408 <BSP_AUDIO_IN_OUT_Init+0xec>)
 8004380:	f008 fa50 	bl	800c824 <HAL_SAI_GetState>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d103      	bne.n	8004392 <BSP_AUDIO_IN_OUT_Init+0x76>
			/* Init the SAI MSP: this __weak function can be redefined by the application*/
			BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 800438a:	2100      	movs	r1, #0
 800438c:	481e      	ldr	r0, [pc, #120]	@ (8004408 <BSP_AUDIO_IN_OUT_Init+0xec>)
 800438e:	f7ff fe95 	bl	80040bc <BSP_AUDIO_OUT_MspInit>

		/* Configure SAI in master mode :
		 *   - SAI2_block_A in master TX mode
		 *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
		 */
		if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2) {
 8004392:	89fb      	ldrh	r3, [r7, #14]
 8004394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004398:	d102      	bne.n	80043a0 <BSP_AUDIO_IN_OUT_Init+0x84>
			slot_active = CODEC_AUDIOFRAME_SLOT_13;
 800439a:	230a      	movs	r3, #10
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	e001      	b.n	80043a4 <BSP_AUDIO_IN_OUT_Init+0x88>
		} else {
			slot_active = CODEC_AUDIOFRAME_SLOT_02;
 80043a0:	2305      	movs	r3, #5
 80043a2:	61bb      	str	r3, [r7, #24]
		}
		SAIx_In_Init(SAI_MODEMASTER_TX, slot_active, AudioFreq);
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	69b9      	ldr	r1, [r7, #24]
 80043a8:	2000      	movs	r0, #0
 80043aa:	f000 f8ef 	bl	800458c <SAIx_In_Init>

		/* wm8994 codec initialization */
		deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 80043ae:	4b18      	ldr	r3, [pc, #96]	@ (8004410 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2034      	movs	r0, #52	@ 0x34
 80043b4:	4798      	blx	r3
 80043b6:	6178      	str	r0, [r7, #20]

		if ((deviceid) == WM8994_ID) {
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f648 1294 	movw	r2, #35220	@ 0x8994
 80043be:	4293      	cmp	r3, r2
 80043c0:	d109      	bne.n	80043d6 <BSP_AUDIO_IN_OUT_Init+0xba>
			/* Reset the Codec Registers */
			wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 80043c2:	4b13      	ldr	r3, [pc, #76]	@ (8004410 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 80043c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043c6:	2034      	movs	r0, #52	@ 0x34
 80043c8:	4798      	blx	r3
			/* Initialize the audio driver structure */
			audio_drv = &wm8994_drv;
 80043ca:	4b12      	ldr	r3, [pc, #72]	@ (8004414 <BSP_AUDIO_IN_OUT_Init+0xf8>)
 80043cc:	4a10      	ldr	r2, [pc, #64]	@ (8004410 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 80043ce:	601a      	str	r2, [r3, #0]
			ret = AUDIO_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	77fb      	strb	r3, [r7, #31]
 80043d4:	e001      	b.n	80043da <BSP_AUDIO_IN_OUT_Init+0xbe>
		} else {
			ret = AUDIO_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	77fb      	strb	r3, [r7, #31]
		}

		if (ret == AUDIO_OK) {
 80043da:	7ffb      	ldrb	r3, [r7, #31]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10a      	bne.n	80043f6 <BSP_AUDIO_IN_OUT_Init+0xda>
			/* Initialize the codec internal registers */
			audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice | OutputDevice, 100,
 80043e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004414 <BSP_AUDIO_IN_OUT_Init+0xf8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681c      	ldr	r4, [r3, #0]
 80043e6:	89fa      	ldrh	r2, [r7, #14]
 80043e8:	89bb      	ldrh	r3, [r7, #12]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	b299      	uxth	r1, r3
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2264      	movs	r2, #100	@ 0x64
 80043f2:	2034      	movs	r0, #52	@ 0x34
 80043f4:	47a0      	blx	r4
					AudioFreq);
		}
	}
	return ret;
 80043f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3724      	adds	r7, #36	@ 0x24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd90      	pop	{r4, r7, pc}
 8004400:	20000b50 	.word	0x20000b50
 8004404:	40015c24 	.word	0x40015c24
 8004408:	20000acc 	.word	0x20000acc
 800440c:	40015c04 	.word	0x40015c04
 8004410:	20000050 	.word	0x20000050
 8004414:	20000ac8 	.word	0x20000ac8

08004418 <BSP_AUDIO_IN_Error_CallBack>:

/**
 * @brief  Audio IN Error callback function.
 * @retval None
 */
__weak void BSP_AUDIO_IN_Error_CallBack(void) {
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
	/* This function is called when an Interrupt due to transfer error on or peripheral
	 error occurs. */
}
 800441c:	bf00      	nop
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
	...

08004428 <BSP_AUDIO_IN_MspInit>:
 * @brief  Initializes BSP_AUDIO_IN MSP.
 * @param  hsai: SAI handle
 * @param  Params
 * @retval None
 */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params) {
 8004428:	b580      	push	{r7, lr}
 800442a:	b08c      	sub	sp, #48	@ 0x30
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_sai_rx;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable SAI clock */
	AUDIO_IN_SAIx_CLK_ENABLE();
 8004432:	4b50      	ldr	r3, [pc, #320]	@ (8004574 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004436:	4a4f      	ldr	r2, [pc, #316]	@ (8004574 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004438:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800443c:	6453      	str	r3, [r2, #68]	@ 0x44
 800443e:	4b4d      	ldr	r3, [pc, #308]	@ (8004574 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004442:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004446:	61bb      	str	r3, [r7, #24]
 8004448:	69bb      	ldr	r3, [r7, #24]

	/* Enable SD GPIO clock */
	AUDIO_IN_SAIx_SD_ENABLE();
 800444a:	4b4a      	ldr	r3, [pc, #296]	@ (8004574 <BSP_AUDIO_IN_MspInit+0x14c>)
 800444c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444e:	4a49      	ldr	r2, [pc, #292]	@ (8004574 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004454:	6313      	str	r3, [r2, #48]	@ 0x30
 8004456:	4b47      	ldr	r3, [pc, #284]	@ (8004574 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800445a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	697b      	ldr	r3, [r7, #20]
	/* CODEC_SAI pin configuration: SD pin */
	gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8004462:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004466:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004468:	2302      	movs	r3, #2
 800446a:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800446c:	2300      	movs	r3, #0
 800446e:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004470:	2302      	movs	r3, #2
 8004472:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8004474:	230a      	movs	r3, #10
 8004476:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8004478:	f107 031c 	add.w	r3, r7, #28
 800447c:	4619      	mov	r1, r3
 800447e:	483e      	ldr	r0, [pc, #248]	@ (8004578 <BSP_AUDIO_IN_MspInit+0x150>)
 8004480:	f005 f808 	bl	8009494 <HAL_GPIO_Init>

	/* Enable Audio INT GPIO clock */
	AUDIO_IN_INT_GPIO_ENABLE();
 8004484:	4b3b      	ldr	r3, [pc, #236]	@ (8004574 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004488:	4a3a      	ldr	r2, [pc, #232]	@ (8004574 <BSP_AUDIO_IN_MspInit+0x14c>)
 800448a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800448e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004490:	4b38      	ldr	r3, [pc, #224]	@ (8004574 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	693b      	ldr	r3, [r7, #16]
	/* Audio INT pin configuration: input */
	gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 800449c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044a0:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80044a2:	2300      	movs	r3, #0
 80044a4:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80044aa:	2302      	movs	r3, #2
 80044ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 80044ae:	f107 031c 	add.w	r3, r7, #28
 80044b2:	4619      	mov	r1, r3
 80044b4:	4831      	ldr	r0, [pc, #196]	@ (800457c <BSP_AUDIO_IN_MspInit+0x154>)
 80044b6:	f004 ffed 	bl	8009494 <HAL_GPIO_Init>

	/* Enable the DMA clock */
	AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 80044ba:	4b2e      	ldr	r3, [pc, #184]	@ (8004574 <BSP_AUDIO_IN_MspInit+0x14c>)
 80044bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044be:	4a2d      	ldr	r2, [pc, #180]	@ (8004574 <BSP_AUDIO_IN_MspInit+0x14c>)
 80044c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80044c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80044c6:	4b2b      	ldr	r3, [pc, #172]	@ (8004574 <BSP_AUDIO_IN_MspInit+0x14c>)
 80044c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	68fb      	ldr	r3, [r7, #12]

	if (hsai->Instance == AUDIO_IN_SAIx) {
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a2a      	ldr	r2, [pc, #168]	@ (8004580 <BSP_AUDIO_IN_MspInit+0x158>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d137      	bne.n	800454c <BSP_AUDIO_IN_MspInit+0x124>
		/* Configure the hdma_sai_rx handle parameters */
		hdma_sai_rx.Init.Channel = AUDIO_IN_SAIx_DMAx_CHANNEL;
 80044dc:	4b29      	ldr	r3, [pc, #164]	@ (8004584 <BSP_AUDIO_IN_MspInit+0x15c>)
 80044de:	2200      	movs	r2, #0
 80044e0:	605a      	str	r2, [r3, #4]
		hdma_sai_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044e2:	4b28      	ldr	r3, [pc, #160]	@ (8004584 <BSP_AUDIO_IN_MspInit+0x15c>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	609a      	str	r2, [r3, #8]
		hdma_sai_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044e8:	4b26      	ldr	r3, [pc, #152]	@ (8004584 <BSP_AUDIO_IN_MspInit+0x15c>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	60da      	str	r2, [r3, #12]
		hdma_sai_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044ee:	4b25      	ldr	r3, [pc, #148]	@ (8004584 <BSP_AUDIO_IN_MspInit+0x15c>)
 80044f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044f4:	611a      	str	r2, [r3, #16]
		hdma_sai_rx.Init.PeriphDataAlignment =
 80044f6:	4b23      	ldr	r3, [pc, #140]	@ (8004584 <BSP_AUDIO_IN_MspInit+0x15c>)
 80044f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044fc:	615a      	str	r2, [r3, #20]
				AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
		hdma_sai_rx.Init.MemDataAlignment = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 80044fe:	4b21      	ldr	r3, [pc, #132]	@ (8004584 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004500:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004504:	619a      	str	r2, [r3, #24]
		hdma_sai_rx.Init.Mode = DMA_CIRCULAR;
 8004506:	4b1f      	ldr	r3, [pc, #124]	@ (8004584 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004508:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800450c:	61da      	str	r2, [r3, #28]
		hdma_sai_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800450e:	4b1d      	ldr	r3, [pc, #116]	@ (8004584 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004510:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004514:	621a      	str	r2, [r3, #32]
		hdma_sai_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004516:	4b1b      	ldr	r3, [pc, #108]	@ (8004584 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004518:	2200      	movs	r2, #0
 800451a:	625a      	str	r2, [r3, #36]	@ 0x24
		hdma_sai_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800451c:	4b19      	ldr	r3, [pc, #100]	@ (8004584 <BSP_AUDIO_IN_MspInit+0x15c>)
 800451e:	2203      	movs	r2, #3
 8004520:	629a      	str	r2, [r3, #40]	@ 0x28
		hdma_sai_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004522:	4b18      	ldr	r3, [pc, #96]	@ (8004584 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004524:	2200      	movs	r2, #0
 8004526:	62da      	str	r2, [r3, #44]	@ 0x2c
		hdma_sai_rx.Init.PeriphBurst = DMA_MBURST_SINGLE;
 8004528:	4b16      	ldr	r3, [pc, #88]	@ (8004584 <BSP_AUDIO_IN_MspInit+0x15c>)
 800452a:	2200      	movs	r2, #0
 800452c:	631a      	str	r2, [r3, #48]	@ 0x30

		hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 800452e:	4b15      	ldr	r3, [pc, #84]	@ (8004584 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004530:	4a15      	ldr	r2, [pc, #84]	@ (8004588 <BSP_AUDIO_IN_MspInit+0x160>)
 8004532:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a13      	ldr	r2, [pc, #76]	@ (8004584 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004538:	671a      	str	r2, [r3, #112]	@ 0x70
 800453a:	4a12      	ldr	r2, [pc, #72]	@ (8004584 <BSP_AUDIO_IN_MspInit+0x15c>)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6393      	str	r3, [r2, #56]	@ 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_sai_rx);
 8004540:	4810      	ldr	r0, [pc, #64]	@ (8004584 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004542:	f004 f8d7 	bl	80086f4 <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_sai_rx);
 8004546:	480f      	ldr	r0, [pc, #60]	@ (8004584 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004548:	f004 f826 	bl	8008598 <HAL_DMA_Init>
	}

	/* SAI DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800454c:	2200      	movs	r2, #0
 800454e:	210f      	movs	r1, #15
 8004550:	2046      	movs	r0, #70	@ 0x46
 8004552:	f003 fff7 	bl	8008544 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8004556:	2046      	movs	r0, #70	@ 0x46
 8004558:	f004 f810 	bl	800857c <HAL_NVIC_EnableIRQ>

	/* Audio INT IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800455c:	2200      	movs	r2, #0
 800455e:	210f      	movs	r1, #15
 8004560:	2028      	movs	r0, #40	@ 0x28
 8004562:	f003 ffef 	bl	8008544 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8004566:	2028      	movs	r0, #40	@ 0x28
 8004568:	f004 f808 	bl	800857c <HAL_NVIC_EnableIRQ>
}
 800456c:	bf00      	nop
 800456e:	3730      	adds	r7, #48	@ 0x30
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40023800 	.word	0x40023800
 8004578:	40021800 	.word	0x40021800
 800457c:	40021c00 	.word	0x40021c00
 8004580:	40015c24 	.word	0x40015c24
 8004584:	20000c34 	.word	0x20000c34
 8004588:	400264b8 	.word	0x400264b8

0800458c <SAIx_In_Init>:
 * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
 * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
 * @retval None
 */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive,
		uint32_t AudioFreq) {
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
	/* Initialize SAI2 block A in MASTER RX */
	/* Initialize the haudio_out_sai Instance parameter */
	haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8004598:	4b53      	ldr	r3, [pc, #332]	@ (80046e8 <SAIx_In_Init+0x15c>)
 800459a:	4a54      	ldr	r2, [pc, #336]	@ (80046ec <SAIx_In_Init+0x160>)
 800459c:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 800459e:	4b52      	ldr	r3, [pc, #328]	@ (80046e8 <SAIx_In_Init+0x15c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	4b50      	ldr	r3, [pc, #320]	@ (80046e8 <SAIx_In_Init+0x15c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80045ac:	601a      	str	r2, [r3, #0]

	/* Configure SAI_Block_x
	 LSBFirst: Disabled
	 DataSize: 16 */
	haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80045ae:	4a4e      	ldr	r2, [pc, #312]	@ (80046e8 <SAIx_In_Init+0x15c>)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	61d3      	str	r3, [r2, #28]
	haudio_out_sai.Init.AudioMode = SaiOutMode;
 80045b4:	4a4c      	ldr	r2, [pc, #304]	@ (80046e8 <SAIx_In_Init+0x15c>)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6053      	str	r3, [r2, #4]
	haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80045ba:	4b4b      	ldr	r3, [pc, #300]	@ (80046e8 <SAIx_In_Init+0x15c>)
 80045bc:	2200      	movs	r2, #0
 80045be:	615a      	str	r2, [r3, #20]
	haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80045c0:	4b49      	ldr	r3, [pc, #292]	@ (80046e8 <SAIx_In_Init+0x15c>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	631a      	str	r2, [r3, #48]	@ 0x30
	haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 80045c6:	4b48      	ldr	r3, [pc, #288]	@ (80046e8 <SAIx_In_Init+0x15c>)
 80045c8:	2280      	movs	r2, #128	@ 0x80
 80045ca:	635a      	str	r2, [r3, #52]	@ 0x34
	haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80045cc:	4b46      	ldr	r3, [pc, #280]	@ (80046e8 <SAIx_In_Init+0x15c>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	639a      	str	r2, [r3, #56]	@ 0x38
	haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80045d2:	4b45      	ldr	r3, [pc, #276]	@ (80046e8 <SAIx_In_Init+0x15c>)
 80045d4:	2201      	movs	r2, #1
 80045d6:	63da      	str	r2, [r3, #60]	@ 0x3c
	haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 80045d8:	4b43      	ldr	r3, [pc, #268]	@ (80046e8 <SAIx_In_Init+0x15c>)
 80045da:	2200      	movs	r2, #0
 80045dc:	609a      	str	r2, [r3, #8]
	haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 80045de:	4b42      	ldr	r3, [pc, #264]	@ (80046e8 <SAIx_In_Init+0x15c>)
 80045e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80045e4:	611a      	str	r2, [r3, #16]
	haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80045e6:	4b40      	ldr	r3, [pc, #256]	@ (80046e8 <SAIx_In_Init+0x15c>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	619a      	str	r2, [r3, #24]
	 Frame Length: 64
	 Frame active Length: 32
	 FS Definition: Start frame + Channel Side identification
	 FS Polarity: FS active Low
	 FS Offset: FS asserted one bit before the first bit of slot 0 */
	haudio_out_sai.FrameInit.FrameLength = 64;
 80045ec:	4b3e      	ldr	r3, [pc, #248]	@ (80046e8 <SAIx_In_Init+0x15c>)
 80045ee:	2240      	movs	r2, #64	@ 0x40
 80045f0:	641a      	str	r2, [r3, #64]	@ 0x40
	haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80045f2:	4b3d      	ldr	r3, [pc, #244]	@ (80046e8 <SAIx_In_Init+0x15c>)
 80045f4:	2220      	movs	r2, #32
 80045f6:	645a      	str	r2, [r3, #68]	@ 0x44
	haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80045f8:	4b3b      	ldr	r3, [pc, #236]	@ (80046e8 <SAIx_In_Init+0x15c>)
 80045fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80045fe:	649a      	str	r2, [r3, #72]	@ 0x48
	haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004600:	4b39      	ldr	r3, [pc, #228]	@ (80046e8 <SAIx_In_Init+0x15c>)
 8004602:	2200      	movs	r2, #0
 8004604:	64da      	str	r2, [r3, #76]	@ 0x4c
	haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8004606:	4b38      	ldr	r3, [pc, #224]	@ (80046e8 <SAIx_In_Init+0x15c>)
 8004608:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800460c:	651a      	str	r2, [r3, #80]	@ 0x50
	/* Configure SAI Block_x Slot
	 Slot First Bit Offset: 0
	 Slot Size  : 16
	 Slot Number: 4
	 Slot Active: All slot actives */
	haudio_out_sai.SlotInit.FirstBitOffset = 0;
 800460e:	4b36      	ldr	r3, [pc, #216]	@ (80046e8 <SAIx_In_Init+0x15c>)
 8004610:	2200      	movs	r2, #0
 8004612:	655a      	str	r2, [r3, #84]	@ 0x54
	haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004614:	4b34      	ldr	r3, [pc, #208]	@ (80046e8 <SAIx_In_Init+0x15c>)
 8004616:	2200      	movs	r2, #0
 8004618:	659a      	str	r2, [r3, #88]	@ 0x58
	haudio_out_sai.SlotInit.SlotNumber = 4;
 800461a:	4b33      	ldr	r3, [pc, #204]	@ (80046e8 <SAIx_In_Init+0x15c>)
 800461c:	2204      	movs	r2, #4
 800461e:	65da      	str	r2, [r3, #92]	@ 0x5c
	haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8004620:	4a31      	ldr	r2, [pc, #196]	@ (80046e8 <SAIx_In_Init+0x15c>)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	6613      	str	r3, [r2, #96]	@ 0x60

	HAL_SAI_Init(&haudio_out_sai);
 8004626:	4830      	ldr	r0, [pc, #192]	@ (80046e8 <SAIx_In_Init+0x15c>)
 8004628:	f007 fe98 	bl	800c35c <HAL_SAI_Init>

	/* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
	/* Initialize the haudio_in_sai Instance parameter */
	haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800462c:	4b30      	ldr	r3, [pc, #192]	@ (80046f0 <SAIx_In_Init+0x164>)
 800462e:	4a31      	ldr	r2, [pc, #196]	@ (80046f4 <SAIx_In_Init+0x168>)
 8004630:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_in_sai);
 8004632:	4b2f      	ldr	r3, [pc, #188]	@ (80046f0 <SAIx_In_Init+0x164>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	4b2d      	ldr	r3, [pc, #180]	@ (80046f0 <SAIx_In_Init+0x164>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004640:	601a      	str	r2, [r3, #0]

	/* Configure SAI_Block_x
	 LSBFirst: Disabled
	 DataSize: 16 */
	haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8004642:	4a2b      	ldr	r2, [pc, #172]	@ (80046f0 <SAIx_In_Init+0x164>)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	61d3      	str	r3, [r2, #28]
	haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8004648:	4b29      	ldr	r3, [pc, #164]	@ (80046f0 <SAIx_In_Init+0x164>)
 800464a:	2203      	movs	r2, #3
 800464c:	605a      	str	r2, [r3, #4]
	haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800464e:	4b28      	ldr	r3, [pc, #160]	@ (80046f0 <SAIx_In_Init+0x164>)
 8004650:	2200      	movs	r2, #0
 8004652:	615a      	str	r2, [r3, #20]
	haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8004654:	4b26      	ldr	r3, [pc, #152]	@ (80046f0 <SAIx_In_Init+0x164>)
 8004656:	2200      	movs	r2, #0
 8004658:	631a      	str	r2, [r3, #48]	@ 0x30
	haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 800465a:	4b25      	ldr	r3, [pc, #148]	@ (80046f0 <SAIx_In_Init+0x164>)
 800465c:	2280      	movs	r2, #128	@ 0x80
 800465e:	635a      	str	r2, [r3, #52]	@ 0x34
	haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004660:	4b23      	ldr	r3, [pc, #140]	@ (80046f0 <SAIx_In_Init+0x164>)
 8004662:	2200      	movs	r2, #0
 8004664:	639a      	str	r2, [r3, #56]	@ 0x38
	haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8004666:	4b22      	ldr	r3, [pc, #136]	@ (80046f0 <SAIx_In_Init+0x164>)
 8004668:	2201      	movs	r2, #1
 800466a:	63da      	str	r2, [r3, #60]	@ 0x3c
	haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 800466c:	4b20      	ldr	r3, [pc, #128]	@ (80046f0 <SAIx_In_Init+0x164>)
 800466e:	2201      	movs	r2, #1
 8004670:	609a      	str	r2, [r3, #8]
	haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8004672:	4b1f      	ldr	r3, [pc, #124]	@ (80046f0 <SAIx_In_Init+0x164>)
 8004674:	2200      	movs	r2, #0
 8004676:	611a      	str	r2, [r3, #16]
	haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8004678:	4b1d      	ldr	r3, [pc, #116]	@ (80046f0 <SAIx_In_Init+0x164>)
 800467a:	2201      	movs	r2, #1
 800467c:	619a      	str	r2, [r3, #24]
	 Frame Length: 64
	 Frame active Length: 32
	 FS Definition: Start frame + Channel Side identification
	 FS Polarity: FS active Low
	 FS Offset: FS asserted one bit before the first bit of slot 0 */
	haudio_in_sai.FrameInit.FrameLength = 64;
 800467e:	4b1c      	ldr	r3, [pc, #112]	@ (80046f0 <SAIx_In_Init+0x164>)
 8004680:	2240      	movs	r2, #64	@ 0x40
 8004682:	641a      	str	r2, [r3, #64]	@ 0x40
	haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8004684:	4b1a      	ldr	r3, [pc, #104]	@ (80046f0 <SAIx_In_Init+0x164>)
 8004686:	2220      	movs	r2, #32
 8004688:	645a      	str	r2, [r3, #68]	@ 0x44
	haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800468a:	4b19      	ldr	r3, [pc, #100]	@ (80046f0 <SAIx_In_Init+0x164>)
 800468c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004690:	649a      	str	r2, [r3, #72]	@ 0x48
	haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004692:	4b17      	ldr	r3, [pc, #92]	@ (80046f0 <SAIx_In_Init+0x164>)
 8004694:	2200      	movs	r2, #0
 8004696:	64da      	str	r2, [r3, #76]	@ 0x4c
	haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8004698:	4b15      	ldr	r3, [pc, #84]	@ (80046f0 <SAIx_In_Init+0x164>)
 800469a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800469e:	651a      	str	r2, [r3, #80]	@ 0x50
	/* Configure SAI Block_x Slot
	 Slot First Bit Offset: 0
	 Slot Size  : 16
	 Slot Number: 4
	 Slot Active: All slot active */
	haudio_in_sai.SlotInit.FirstBitOffset = 0;
 80046a0:	4b13      	ldr	r3, [pc, #76]	@ (80046f0 <SAIx_In_Init+0x164>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	655a      	str	r2, [r3, #84]	@ 0x54
	haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80046a6:	4b12      	ldr	r3, [pc, #72]	@ (80046f0 <SAIx_In_Init+0x164>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	659a      	str	r2, [r3, #88]	@ 0x58
	haudio_in_sai.SlotInit.SlotNumber = 4;
 80046ac:	4b10      	ldr	r3, [pc, #64]	@ (80046f0 <SAIx_In_Init+0x164>)
 80046ae:	2204      	movs	r2, #4
 80046b0:	65da      	str	r2, [r3, #92]	@ 0x5c
	haudio_in_sai.SlotInit.SlotActive = SlotActive;
 80046b2:	4a0f      	ldr	r2, [pc, #60]	@ (80046f0 <SAIx_In_Init+0x164>)
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	6613      	str	r3, [r2, #96]	@ 0x60

	HAL_SAI_Init(&haudio_in_sai);
 80046b8:	480d      	ldr	r0, [pc, #52]	@ (80046f0 <SAIx_In_Init+0x164>)
 80046ba:	f007 fe4f 	bl	800c35c <HAL_SAI_Init>

	/* Enable SAI peripheral to generate MCLK */
	__HAL_SAI_ENABLE(&haudio_out_sai);
 80046be:	4b0a      	ldr	r3, [pc, #40]	@ (80046e8 <SAIx_In_Init+0x15c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	4b08      	ldr	r3, [pc, #32]	@ (80046e8 <SAIx_In_Init+0x15c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80046cc:	601a      	str	r2, [r3, #0]

	/* Enable SAI peripheral */
	__HAL_SAI_ENABLE(&haudio_in_sai);
 80046ce:	4b08      	ldr	r3, [pc, #32]	@ (80046f0 <SAIx_In_Init+0x164>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	4b06      	ldr	r3, [pc, #24]	@ (80046f0 <SAIx_In_Init+0x164>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80046dc:	601a      	str	r2, [r3, #0]
}
 80046de:	bf00      	nop
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000acc 	.word	0x20000acc
 80046ec:	40015c04 	.word	0x40015c04
 80046f0:	20000b50 	.word	0x20000b50
 80046f4:	40015c24 	.word	0x40015c24

080046f8 <SAIx_In_DeInit>:

/**
 * @brief  Deinitializes the output Audio Codec audio interface (SAI).
 * @retval None
 */
static void SAIx_In_DeInit(void) {
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
	/* Initialize the haudio_in_sai Instance parameter */
	haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80046fc:	4b07      	ldr	r3, [pc, #28]	@ (800471c <SAIx_In_DeInit+0x24>)
 80046fe:	4a08      	ldr	r2, [pc, #32]	@ (8004720 <SAIx_In_DeInit+0x28>)
 8004700:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral */
	__HAL_SAI_DISABLE(&haudio_in_sai);
 8004702:	4b06      	ldr	r3, [pc, #24]	@ (800471c <SAIx_In_DeInit+0x24>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	4b04      	ldr	r3, [pc, #16]	@ (800471c <SAIx_In_DeInit+0x24>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004710:	601a      	str	r2, [r3, #0]

	HAL_SAI_DeInit(&haudio_in_sai);
 8004712:	4802      	ldr	r0, [pc, #8]	@ (800471c <SAIx_In_DeInit+0x24>)
 8004714:	f007 ffa0 	bl	800c658 <HAL_SAI_DeInit>
}
 8004718:	bf00      	nop
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000b50 	.word	0x20000b50
 8004720:	40015c24 	.word	0x40015c24

08004724 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8004728:	4b31      	ldr	r3, [pc, #196]	@ (80047f0 <BSP_LCD_Init+0xcc>)
 800472a:	2228      	movs	r2, #40	@ 0x28
 800472c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800472e:	4b30      	ldr	r3, [pc, #192]	@ (80047f0 <BSP_LCD_Init+0xcc>)
 8004730:	2209      	movs	r2, #9
 8004732:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004734:	4b2e      	ldr	r3, [pc, #184]	@ (80047f0 <BSP_LCD_Init+0xcc>)
 8004736:	2235      	movs	r2, #53	@ 0x35
 8004738:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800473a:	4b2d      	ldr	r3, [pc, #180]	@ (80047f0 <BSP_LCD_Init+0xcc>)
 800473c:	220b      	movs	r2, #11
 800473e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004740:	4b2b      	ldr	r3, [pc, #172]	@ (80047f0 <BSP_LCD_Init+0xcc>)
 8004742:	f240 121b 	movw	r2, #283	@ 0x11b
 8004746:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004748:	4b29      	ldr	r3, [pc, #164]	@ (80047f0 <BSP_LCD_Init+0xcc>)
 800474a:	f240 2215 	movw	r2, #533	@ 0x215
 800474e:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8004750:	4b27      	ldr	r3, [pc, #156]	@ (80047f0 <BSP_LCD_Init+0xcc>)
 8004752:	f240 121d 	movw	r2, #285	@ 0x11d
 8004756:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8004758:	4b25      	ldr	r3, [pc, #148]	@ (80047f0 <BSP_LCD_Init+0xcc>)
 800475a:	f240 2235 	movw	r2, #565	@ 0x235
 800475e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8004760:	2100      	movs	r1, #0
 8004762:	4823      	ldr	r0, [pc, #140]	@ (80047f0 <BSP_LCD_Init+0xcc>)
 8004764:	f000 fd30 	bl	80051c8 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8004768:	4b21      	ldr	r3, [pc, #132]	@ (80047f0 <BSP_LCD_Init+0xcc>)
 800476a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800476e:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8004770:	4b1f      	ldr	r3, [pc, #124]	@ (80047f0 <BSP_LCD_Init+0xcc>)
 8004772:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8004776:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8004778:	4b1d      	ldr	r3, [pc, #116]	@ (80047f0 <BSP_LCD_Init+0xcc>)
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8004780:	4b1b      	ldr	r3, [pc, #108]	@ (80047f0 <BSP_LCD_Init+0xcc>)
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8004788:	4b19      	ldr	r3, [pc, #100]	@ (80047f0 <BSP_LCD_Init+0xcc>)
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004790:	4b17      	ldr	r3, [pc, #92]	@ (80047f0 <BSP_LCD_Init+0xcc>)
 8004792:	2200      	movs	r2, #0
 8004794:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8004796:	4b16      	ldr	r3, [pc, #88]	@ (80047f0 <BSP_LCD_Init+0xcc>)
 8004798:	2200      	movs	r2, #0
 800479a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800479c:	4b14      	ldr	r3, [pc, #80]	@ (80047f0 <BSP_LCD_Init+0xcc>)
 800479e:	2200      	movs	r2, #0
 80047a0:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80047a2:	4b13      	ldr	r3, [pc, #76]	@ (80047f0 <BSP_LCD_Init+0xcc>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80047a8:	4b11      	ldr	r3, [pc, #68]	@ (80047f0 <BSP_LCD_Init+0xcc>)
 80047aa:	4a12      	ldr	r2, [pc, #72]	@ (80047f4 <BSP_LCD_Init+0xd0>)
 80047ac:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80047ae:	4810      	ldr	r0, [pc, #64]	@ (80047f0 <BSP_LCD_Init+0xcc>)
 80047b0:	f006 f8d4 	bl	800a95c <HAL_LTDC_GetState>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d103      	bne.n	80047c2 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80047ba:	2100      	movs	r1, #0
 80047bc:	480c      	ldr	r0, [pc, #48]	@ (80047f0 <BSP_LCD_Init+0xcc>)
 80047be:	f000 fc29 	bl	8005014 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80047c2:	480b      	ldr	r0, [pc, #44]	@ (80047f0 <BSP_LCD_Init+0xcc>)
 80047c4:	f005 fefa 	bl	800a5bc <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80047c8:	2201      	movs	r2, #1
 80047ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80047ce:	480a      	ldr	r0, [pc, #40]	@ (80047f8 <BSP_LCD_Init+0xd4>)
 80047d0:	f005 f930 	bl	8009a34 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80047d4:	2201      	movs	r2, #1
 80047d6:	2108      	movs	r1, #8
 80047d8:	4808      	ldr	r0, [pc, #32]	@ (80047fc <BSP_LCD_Init+0xd8>)
 80047da:	f005 f92b 	bl	8009a34 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80047de:	f000 fe57 	bl	8005490 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80047e2:	4807      	ldr	r0, [pc, #28]	@ (8004800 <BSP_LCD_Init+0xdc>)
 80047e4:	f000 f8d8 	bl	8004998 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	20000c94 	.word	0x20000c94
 80047f4:	40016800 	.word	0x40016800
 80047f8:	40022000 	.word	0x40022000
 80047fc:	40022800 	.word	0x40022800
 8004800:	20000038 	.word	0x20000038

08004804 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8004808:	4b06      	ldr	r3, [pc, #24]	@ (8004824 <BSP_LCD_GetXSize+0x20>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a06      	ldr	r2, [pc, #24]	@ (8004828 <BSP_LCD_GetXSize+0x24>)
 800480e:	2134      	movs	r1, #52	@ 0x34
 8004810:	fb01 f303 	mul.w	r3, r1, r3
 8004814:	4413      	add	r3, r2
 8004816:	3360      	adds	r3, #96	@ 0x60
 8004818:	681b      	ldr	r3, [r3, #0]
}
 800481a:	4618      	mov	r0, r3
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	20000d7c 	.word	0x20000d7c
 8004828:	20000c94 	.word	0x20000c94

0800482c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8004830:	4b06      	ldr	r3, [pc, #24]	@ (800484c <BSP_LCD_GetYSize+0x20>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a06      	ldr	r2, [pc, #24]	@ (8004850 <BSP_LCD_GetYSize+0x24>)
 8004836:	2134      	movs	r1, #52	@ 0x34
 8004838:	fb01 f303 	mul.w	r3, r1, r3
 800483c:	4413      	add	r3, r2
 800483e:	3364      	adds	r3, #100	@ 0x64
 8004840:	681b      	ldr	r3, [r3, #0]
}
 8004842:	4618      	mov	r0, r3
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	20000d7c 	.word	0x20000d7c
 8004850:	20000c94 	.word	0x20000c94

08004854 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8004854:	b580      	push	{r7, lr}
 8004856:	b090      	sub	sp, #64	@ 0x40
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	6039      	str	r1, [r7, #0]
 800485e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8004860:	2300      	movs	r3, #0
 8004862:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8004864:	f7ff ffce 	bl	8004804 <BSP_LCD_GetXSize>
 8004868:	4603      	mov	r3, r0
 800486a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004870:	f7ff ffdc 	bl	800482c <BSP_LCD_GetYSize>
 8004874:	4603      	mov	r3, r0
 8004876:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004878:	2300      	movs	r3, #0
 800487a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8004880:	23ff      	movs	r3, #255	@ 0xff
 8004882:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8004884:	2300      	movs	r3, #0
 8004886:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 800488e:	2300      	movs	r3, #0
 8004890:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8004894:	2300      	movs	r3, #0
 8004896:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800489a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800489e:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80048a0:	2307      	movs	r3, #7
 80048a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80048a4:	f7ff ffae 	bl	8004804 <BSP_LCD_GetXSize>
 80048a8:	4603      	mov	r3, r0
 80048aa:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80048ac:	f7ff ffbe 	bl	800482c <BSP_LCD_GetYSize>
 80048b0:	4603      	mov	r3, r0
 80048b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80048b4:	88fa      	ldrh	r2, [r7, #6]
 80048b6:	f107 030c 	add.w	r3, r7, #12
 80048ba:	4619      	mov	r1, r3
 80048bc:	4812      	ldr	r0, [pc, #72]	@ (8004908 <BSP_LCD_LayerDefaultInit+0xb4>)
 80048be:	f006 f80f 	bl	800a8e0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80048c2:	88fa      	ldrh	r2, [r7, #6]
 80048c4:	4911      	ldr	r1, [pc, #68]	@ (800490c <BSP_LCD_LayerDefaultInit+0xb8>)
 80048c6:	4613      	mov	r3, r2
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	4413      	add	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	440b      	add	r3, r1
 80048d0:	3304      	adds	r3, #4
 80048d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048d6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80048d8:	88fa      	ldrh	r2, [r7, #6]
 80048da:	490c      	ldr	r1, [pc, #48]	@ (800490c <BSP_LCD_LayerDefaultInit+0xb8>)
 80048dc:	4613      	mov	r3, r2
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	4413      	add	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	440b      	add	r3, r1
 80048e6:	3308      	adds	r3, #8
 80048e8:	4a09      	ldr	r2, [pc, #36]	@ (8004910 <BSP_LCD_LayerDefaultInit+0xbc>)
 80048ea:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80048ec:	88fa      	ldrh	r2, [r7, #6]
 80048ee:	4907      	ldr	r1, [pc, #28]	@ (800490c <BSP_LCD_LayerDefaultInit+0xb8>)
 80048f0:	4613      	mov	r3, r2
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	4413      	add	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	440b      	add	r3, r1
 80048fa:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80048fe:	601a      	str	r2, [r3, #0]
}
 8004900:	bf00      	nop
 8004902:	3740      	adds	r7, #64	@ 0x40
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	20000c94 	.word	0x20000c94
 800490c:	20000d80 	.word	0x20000d80
 8004910:	20000038 	.word	0x20000038

08004914 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800491c:	4a04      	ldr	r2, [pc, #16]	@ (8004930 <BSP_LCD_SelectLayer+0x1c>)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6013      	str	r3, [r2, #0]
} 
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	20000d7c 	.word	0x20000d7c

08004934 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800493c:	4b07      	ldr	r3, [pc, #28]	@ (800495c <BSP_LCD_SetTextColor+0x28>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	4907      	ldr	r1, [pc, #28]	@ (8004960 <BSP_LCD_SetTextColor+0x2c>)
 8004942:	4613      	mov	r3, r2
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	4413      	add	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	440b      	add	r3, r1
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	601a      	str	r2, [r3, #0]
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	20000d7c 	.word	0x20000d7c
 8004960:	20000d80 	.word	0x20000d80

08004964 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800496c:	4b08      	ldr	r3, [pc, #32]	@ (8004990 <BSP_LCD_SetBackColor+0x2c>)
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	4908      	ldr	r1, [pc, #32]	@ (8004994 <BSP_LCD_SetBackColor+0x30>)
 8004972:	4613      	mov	r3, r2
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	4413      	add	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	3304      	adds	r3, #4
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	601a      	str	r2, [r3, #0]
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	20000d7c 	.word	0x20000d7c
 8004994:	20000d80 	.word	0x20000d80

08004998 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80049a0:	4b08      	ldr	r3, [pc, #32]	@ (80049c4 <BSP_LCD_SetFont+0x2c>)
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	4908      	ldr	r1, [pc, #32]	@ (80049c8 <BSP_LCD_SetFont+0x30>)
 80049a6:	4613      	mov	r3, r2
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	4413      	add	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	440b      	add	r3, r1
 80049b0:	3308      	adds	r3, #8
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	601a      	str	r2, [r3, #0]
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	20000d7c 	.word	0x20000d7c
 80049c8:	20000d80 	.word	0x20000d80

080049cc <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80049cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80049d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004a14 <BSP_LCD_Clear+0x48>)
 80049d6:	681c      	ldr	r4, [r3, #0]
 80049d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004a14 <BSP_LCD_Clear+0x48>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a0e      	ldr	r2, [pc, #56]	@ (8004a18 <BSP_LCD_Clear+0x4c>)
 80049de:	2134      	movs	r1, #52	@ 0x34
 80049e0:	fb01 f303 	mul.w	r3, r1, r3
 80049e4:	4413      	add	r3, r2
 80049e6:	335c      	adds	r3, #92	@ 0x5c
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	461e      	mov	r6, r3
 80049ec:	f7ff ff0a 	bl	8004804 <BSP_LCD_GetXSize>
 80049f0:	4605      	mov	r5, r0
 80049f2:	f7ff ff1b 	bl	800482c <BSP_LCD_GetYSize>
 80049f6:	4602      	mov	r2, r0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	9301      	str	r3, [sp, #4]
 80049fc:	2300      	movs	r3, #0
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	4613      	mov	r3, r2
 8004a02:	462a      	mov	r2, r5
 8004a04:	4631      	mov	r1, r6
 8004a06:	4620      	mov	r0, r4
 8004a08:	f000 fcb2 	bl	8005370 <LL_FillBuffer>
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a14:	20000d7c 	.word	0x20000d7c
 8004a18:	20000c94 	.word	0x20000c94

08004a1c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8004a1c:	b590      	push	{r4, r7, lr}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	80fb      	strh	r3, [r7, #6]
 8004a26:	460b      	mov	r3, r1
 8004a28:	80bb      	strh	r3, [r7, #4]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8004a9c <BSP_LCD_DisplayChar+0x80>)
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	491b      	ldr	r1, [pc, #108]	@ (8004aa0 <BSP_LCD_DisplayChar+0x84>)
 8004a34:	4613      	mov	r3, r2
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	4413      	add	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	3308      	adds	r3, #8
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6819      	ldr	r1, [r3, #0]
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004a4a:	4b14      	ldr	r3, [pc, #80]	@ (8004a9c <BSP_LCD_DisplayChar+0x80>)
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	4c14      	ldr	r4, [pc, #80]	@ (8004aa0 <BSP_LCD_DisplayChar+0x84>)
 8004a50:	4613      	mov	r3, r2
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	4413      	add	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4423      	add	r3, r4
 8004a5a:	3308      	adds	r3, #8
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004a60:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004a64:	4b0d      	ldr	r3, [pc, #52]	@ (8004a9c <BSP_LCD_DisplayChar+0x80>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	4c0d      	ldr	r4, [pc, #52]	@ (8004aa0 <BSP_LCD_DisplayChar+0x84>)
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	4413      	add	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4423      	add	r3, r4
 8004a74:	3308      	adds	r3, #8
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	889b      	ldrh	r3, [r3, #4]
 8004a7a:	3307      	adds	r3, #7
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	da00      	bge.n	8004a82 <BSP_LCD_DisplayChar+0x66>
 8004a80:	3307      	adds	r3, #7
 8004a82:	10db      	asrs	r3, r3, #3
 8004a84:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004a88:	18ca      	adds	r2, r1, r3
 8004a8a:	88b9      	ldrh	r1, [r7, #4]
 8004a8c:	88fb      	ldrh	r3, [r7, #6]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fbb6 	bl	8005200 <DrawChar>
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd90      	pop	{r4, r7, pc}
 8004a9c:	20000d7c 	.word	0x20000d7c
 8004aa0:	20000d80 	.word	0x20000d80

08004aa4 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8004aa4:	b5b0      	push	{r4, r5, r7, lr}
 8004aa6:	b088      	sub	sp, #32
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60ba      	str	r2, [r7, #8]
 8004aac:	461a      	mov	r2, r3
 8004aae:	4603      	mov	r3, r0
 8004ab0:	81fb      	strh	r3, [r7, #14]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	81bb      	strh	r3, [r7, #12]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8004aba:	2301      	movs	r3, #1
 8004abc:	83fb      	strh	r3, [r7, #30]
 8004abe:	2300      	movs	r3, #0
 8004ac0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61bb      	str	r3, [r7, #24]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8004ace:	e002      	b.n	8004ad6 <BSP_LCD_DisplayStringAt+0x32>
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	61bb      	str	r3, [r7, #24]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	617a      	str	r2, [r7, #20]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1f6      	bne.n	8004ad0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8004ae2:	f7ff fe8f 	bl	8004804 <BSP_LCD_GetXSize>
 8004ae6:	4601      	mov	r1, r0
 8004ae8:	4b50      	ldr	r3, [pc, #320]	@ (8004c2c <BSP_LCD_DisplayStringAt+0x188>)
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	4850      	ldr	r0, [pc, #320]	@ (8004c30 <BSP_LCD_DisplayStringAt+0x18c>)
 8004aee:	4613      	mov	r3, r2
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	4413      	add	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4403      	add	r3, r0
 8004af8:	3308      	adds	r3, #8
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	889b      	ldrh	r3, [r3, #4]
 8004afe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b02:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d01c      	beq.n	8004b44 <BSP_LCD_DisplayStringAt+0xa0>
 8004b0a:	2b03      	cmp	r3, #3
 8004b0c:	dc33      	bgt.n	8004b76 <BSP_LCD_DisplayStringAt+0xd2>
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d002      	beq.n	8004b18 <BSP_LCD_DisplayStringAt+0x74>
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d019      	beq.n	8004b4a <BSP_LCD_DisplayStringAt+0xa6>
 8004b16:	e02e      	b.n	8004b76 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	1ad1      	subs	r1, r2, r3
 8004b1e:	4b43      	ldr	r3, [pc, #268]	@ (8004c2c <BSP_LCD_DisplayStringAt+0x188>)
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	4843      	ldr	r0, [pc, #268]	@ (8004c30 <BSP_LCD_DisplayStringAt+0x18c>)
 8004b24:	4613      	mov	r3, r2
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	4413      	add	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4403      	add	r3, r0
 8004b2e:	3308      	adds	r3, #8
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	889b      	ldrh	r3, [r3, #4]
 8004b34:	fb01 f303 	mul.w	r3, r1, r3
 8004b38:	085b      	lsrs	r3, r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	89fb      	ldrh	r3, [r7, #14]
 8004b3e:	4413      	add	r3, r2
 8004b40:	83fb      	strh	r3, [r7, #30]
      break;
 8004b42:	e01b      	b.n	8004b7c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8004b44:	89fb      	ldrh	r3, [r7, #14]
 8004b46:	83fb      	strh	r3, [r7, #30]
      break;
 8004b48:	e018      	b.n	8004b7c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	b299      	uxth	r1, r3
 8004b52:	4b36      	ldr	r3, [pc, #216]	@ (8004c2c <BSP_LCD_DisplayStringAt+0x188>)
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	4836      	ldr	r0, [pc, #216]	@ (8004c30 <BSP_LCD_DisplayStringAt+0x18c>)
 8004b58:	4613      	mov	r3, r2
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4403      	add	r3, r0
 8004b62:	3308      	adds	r3, #8
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	889b      	ldrh	r3, [r3, #4]
 8004b68:	fb11 f303 	smulbb	r3, r1, r3
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	89fb      	ldrh	r3, [r7, #14]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	83fb      	strh	r3, [r7, #30]
      break;
 8004b74:	e002      	b.n	8004b7c <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8004b76:	89fb      	ldrh	r3, [r7, #14]
 8004b78:	83fb      	strh	r3, [r7, #30]
      break;
 8004b7a:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8004b7c:	8bfb      	ldrh	r3, [r7, #30]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <BSP_LCD_DisplayStringAt+0xe6>
 8004b82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	da1d      	bge.n	8004bc6 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004b8e:	e01a      	b.n	8004bc6 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	781a      	ldrb	r2, [r3, #0]
 8004b94:	89b9      	ldrh	r1, [r7, #12]
 8004b96:	8bfb      	ldrh	r3, [r7, #30]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7ff ff3f 	bl	8004a1c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8004b9e:	4b23      	ldr	r3, [pc, #140]	@ (8004c2c <BSP_LCD_DisplayStringAt+0x188>)
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	4923      	ldr	r1, [pc, #140]	@ (8004c30 <BSP_LCD_DisplayStringAt+0x18c>)
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	4413      	add	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	3308      	adds	r3, #8
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	889a      	ldrh	r2, [r3, #4]
 8004bb4:	8bfb      	ldrh	r3, [r7, #30]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	60bb      	str	r3, [r7, #8]
    i++;
 8004bc0:	8bbb      	ldrh	r3, [r7, #28]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	bf14      	ite	ne
 8004bce:	2301      	movne	r3, #1
 8004bd0:	2300      	moveq	r3, #0
 8004bd2:	b2dc      	uxtb	r4, r3
 8004bd4:	f7ff fe16 	bl	8004804 <BSP_LCD_GetXSize>
 8004bd8:	8bb9      	ldrh	r1, [r7, #28]
 8004bda:	4b14      	ldr	r3, [pc, #80]	@ (8004c2c <BSP_LCD_DisplayStringAt+0x188>)
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	4d14      	ldr	r5, [pc, #80]	@ (8004c30 <BSP_LCD_DisplayStringAt+0x18c>)
 8004be0:	4613      	mov	r3, r2
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	4413      	add	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	442b      	add	r3, r5
 8004bea:	3308      	adds	r3, #8
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	889b      	ldrh	r3, [r3, #4]
 8004bf0:	fb01 f303 	mul.w	r3, r1, r3
 8004bf4:	1ac3      	subs	r3, r0, r3
 8004bf6:	b299      	uxth	r1, r3
 8004bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8004c2c <BSP_LCD_DisplayStringAt+0x188>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	480c      	ldr	r0, [pc, #48]	@ (8004c30 <BSP_LCD_DisplayStringAt+0x18c>)
 8004bfe:	4613      	mov	r3, r2
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4403      	add	r3, r0
 8004c08:	3308      	adds	r3, #8
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	889b      	ldrh	r3, [r3, #4]
 8004c0e:	4299      	cmp	r1, r3
 8004c10:	bf2c      	ite	cs
 8004c12:	2301      	movcs	r3, #1
 8004c14:	2300      	movcc	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	4023      	ands	r3, r4
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1b7      	bne.n	8004b90 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8004c20:	bf00      	nop
 8004c22:	bf00      	nop
 8004c24:	3720      	adds	r7, #32
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bdb0      	pop	{r4, r5, r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000d7c 	.word	0x20000d7c
 8004c30:	20000d80 	.word	0x20000d80

08004c34 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004c34:	b5b0      	push	{r4, r5, r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af02      	add	r7, sp, #8
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	80fb      	strh	r3, [r7, #6]
 8004c3e:	460b      	mov	r3, r1
 8004c40:	80bb      	strh	r3, [r7, #4]
 8004c42:	4613      	mov	r3, r2
 8004c44:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004c4a:	4b26      	ldr	r3, [pc, #152]	@ (8004ce4 <BSP_LCD_DrawHLine+0xb0>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a26      	ldr	r2, [pc, #152]	@ (8004ce8 <BSP_LCD_DrawHLine+0xb4>)
 8004c50:	2134      	movs	r1, #52	@ 0x34
 8004c52:	fb01 f303 	mul.w	r3, r1, r3
 8004c56:	4413      	add	r3, r2
 8004c58:	3348      	adds	r3, #72	@ 0x48
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d114      	bne.n	8004c8a <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004c60:	4b20      	ldr	r3, [pc, #128]	@ (8004ce4 <BSP_LCD_DrawHLine+0xb0>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a20      	ldr	r2, [pc, #128]	@ (8004ce8 <BSP_LCD_DrawHLine+0xb4>)
 8004c66:	2134      	movs	r1, #52	@ 0x34
 8004c68:	fb01 f303 	mul.w	r3, r1, r3
 8004c6c:	4413      	add	r3, r2
 8004c6e:	335c      	adds	r3, #92	@ 0x5c
 8004c70:	681c      	ldr	r4, [r3, #0]
 8004c72:	f7ff fdc7 	bl	8004804 <BSP_LCD_GetXSize>
 8004c76:	4602      	mov	r2, r0
 8004c78:	88bb      	ldrh	r3, [r7, #4]
 8004c7a:	fb03 f202 	mul.w	r2, r3, r2
 8004c7e:	88fb      	ldrh	r3, [r7, #6]
 8004c80:	4413      	add	r3, r2
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	4423      	add	r3, r4
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	e013      	b.n	8004cb2 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004c8a:	4b16      	ldr	r3, [pc, #88]	@ (8004ce4 <BSP_LCD_DrawHLine+0xb0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a16      	ldr	r2, [pc, #88]	@ (8004ce8 <BSP_LCD_DrawHLine+0xb4>)
 8004c90:	2134      	movs	r1, #52	@ 0x34
 8004c92:	fb01 f303 	mul.w	r3, r1, r3
 8004c96:	4413      	add	r3, r2
 8004c98:	335c      	adds	r3, #92	@ 0x5c
 8004c9a:	681c      	ldr	r4, [r3, #0]
 8004c9c:	f7ff fdb2 	bl	8004804 <BSP_LCD_GetXSize>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	88bb      	ldrh	r3, [r7, #4]
 8004ca4:	fb03 f202 	mul.w	r2, r3, r2
 8004ca8:	88fb      	ldrh	r3, [r7, #6]
 8004caa:	4413      	add	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4423      	add	r3, r4
 8004cb0:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8004cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce4 <BSP_LCD_DrawHLine+0xb0>)
 8004cb4:	6818      	ldr	r0, [r3, #0]
 8004cb6:	68f9      	ldr	r1, [r7, #12]
 8004cb8:	887c      	ldrh	r4, [r7, #2]
 8004cba:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce4 <BSP_LCD_DrawHLine+0xb0>)
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	4d0b      	ldr	r5, [pc, #44]	@ (8004cec <BSP_LCD_DrawHLine+0xb8>)
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	4413      	add	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	442b      	add	r3, r5
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	9301      	str	r3, [sp, #4]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	4622      	mov	r2, r4
 8004cd6:	f000 fb4b 	bl	8005370 <LL_FillBuffer>
}
 8004cda:	bf00      	nop
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	20000d7c 	.word	0x20000d7c
 8004ce8:	20000c94 	.word	0x20000c94
 8004cec:	20000d80 	.word	0x20000d80

08004cf0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004cf0:	b5b0      	push	{r4, r5, r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	603a      	str	r2, [r7, #0]
 8004cfa:	80fb      	strh	r3, [r7, #6]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004d00:	4b1d      	ldr	r3, [pc, #116]	@ (8004d78 <BSP_LCD_DrawPixel+0x88>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a1d      	ldr	r2, [pc, #116]	@ (8004d7c <BSP_LCD_DrawPixel+0x8c>)
 8004d06:	2134      	movs	r1, #52	@ 0x34
 8004d08:	fb01 f303 	mul.w	r3, r1, r3
 8004d0c:	4413      	add	r3, r2
 8004d0e:	3348      	adds	r3, #72	@ 0x48
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d116      	bne.n	8004d44 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8004d16:	4b18      	ldr	r3, [pc, #96]	@ (8004d78 <BSP_LCD_DrawPixel+0x88>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a18      	ldr	r2, [pc, #96]	@ (8004d7c <BSP_LCD_DrawPixel+0x8c>)
 8004d1c:	2134      	movs	r1, #52	@ 0x34
 8004d1e:	fb01 f303 	mul.w	r3, r1, r3
 8004d22:	4413      	add	r3, r2
 8004d24:	335c      	adds	r3, #92	@ 0x5c
 8004d26:	681c      	ldr	r4, [r3, #0]
 8004d28:	88bd      	ldrh	r5, [r7, #4]
 8004d2a:	f7ff fd6b 	bl	8004804 <BSP_LCD_GetXSize>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	fb03 f205 	mul.w	r2, r3, r5
 8004d34:	88fb      	ldrh	r3, [r7, #6]
 8004d36:	4413      	add	r3, r2
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	4423      	add	r3, r4
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	b292      	uxth	r2, r2
 8004d40:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8004d42:	e015      	b.n	8004d70 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004d44:	4b0c      	ldr	r3, [pc, #48]	@ (8004d78 <BSP_LCD_DrawPixel+0x88>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a0c      	ldr	r2, [pc, #48]	@ (8004d7c <BSP_LCD_DrawPixel+0x8c>)
 8004d4a:	2134      	movs	r1, #52	@ 0x34
 8004d4c:	fb01 f303 	mul.w	r3, r1, r3
 8004d50:	4413      	add	r3, r2
 8004d52:	335c      	adds	r3, #92	@ 0x5c
 8004d54:	681c      	ldr	r4, [r3, #0]
 8004d56:	88bd      	ldrh	r5, [r7, #4]
 8004d58:	f7ff fd54 	bl	8004804 <BSP_LCD_GetXSize>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	fb03 f205 	mul.w	r2, r3, r5
 8004d62:	88fb      	ldrh	r3, [r7, #6]
 8004d64:	4413      	add	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4423      	add	r3, r4
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	6013      	str	r3, [r2, #0]
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bdb0      	pop	{r4, r5, r7, pc}
 8004d78:	20000d7c 	.word	0x20000d7c
 8004d7c:	20000c94 	.word	0x20000c94

08004d80 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8004d80:	b590      	push	{r4, r7, lr}
 8004d82:	b08b      	sub	sp, #44	@ 0x2c
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d90:	2300      	movs	r3, #0
 8004d92:	61bb      	str	r3, [r7, #24]
 8004d94:	2300      	movs	r3, #0
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	330a      	adds	r3, #10
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	330b      	adds	r3, #11
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	021b      	lsls	r3, r3, #8
 8004db0:	441a      	add	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	330c      	adds	r3, #12
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	041b      	lsls	r3, r3, #16
 8004dba:	441a      	add	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	330d      	adds	r3, #13
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	061b      	lsls	r3, r3, #24
 8004dc4:	4413      	add	r3, r2
 8004dc6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3312      	adds	r3, #18
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	3313      	adds	r3, #19
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	441a      	add	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3314      	adds	r3, #20
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	041b      	lsls	r3, r3, #16
 8004de2:	441a      	add	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3315      	adds	r3, #21
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	061b      	lsls	r3, r3, #24
 8004dec:	4413      	add	r3, r2
 8004dee:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3316      	adds	r3, #22
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3317      	adds	r3, #23
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	021b      	lsls	r3, r3, #8
 8004e00:	441a      	add	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	3318      	adds	r3, #24
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	041b      	lsls	r3, r3, #16
 8004e0a:	441a      	add	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3319      	adds	r3, #25
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	061b      	lsls	r3, r3, #24
 8004e14:	4413      	add	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	331c      	adds	r3, #28
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	331d      	adds	r3, #29
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	021b      	lsls	r3, r3, #8
 8004e28:	4413      	add	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8004e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004edc <BSP_LCD_DrawBitmap+0x15c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a2b      	ldr	r2, [pc, #172]	@ (8004ee0 <BSP_LCD_DrawBitmap+0x160>)
 8004e32:	2134      	movs	r1, #52	@ 0x34
 8004e34:	fb01 f303 	mul.w	r3, r1, r3
 8004e38:	4413      	add	r3, r2
 8004e3a:	335c      	adds	r3, #92	@ 0x5c
 8004e3c:	681c      	ldr	r4, [r3, #0]
 8004e3e:	f7ff fce1 	bl	8004804 <BSP_LCD_GetXSize>
 8004e42:	4602      	mov	r2, r0
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	fb03 f202 	mul.w	r2, r3, r2
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4423      	add	r3, r4
 8004e52:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	3b20      	subs	r3, #32
 8004e58:	2b07      	cmp	r3, #7
 8004e5a:	d802      	bhi.n	8004e62 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	61fb      	str	r3, [r7, #28]
 8004e60:	e008      	b.n	8004e74 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	3b10      	subs	r3, #16
 8004e66:	2b07      	cmp	r3, #7
 8004e68:	d802      	bhi.n	8004e70 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	61fb      	str	r3, [r7, #28]
 8004e6e:	e001      	b.n	8004e74 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8004e70:	2301      	movs	r3, #1
 8004e72:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	fb02 f303 	mul.w	r3, r2, r3
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	08d2      	lsrs	r2, r2, #3
 8004e82:	fb03 f202 	mul.w	r2, r3, r2
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	4413      	add	r3, r2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8004e90:	2300      	movs	r3, #0
 8004e92:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e94:	e018      	b.n	8004ec8 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8004e96:	6a39      	ldr	r1, [r7, #32]
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 fab3 	bl	8005408 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8004ea2:	f7ff fcaf 	bl	8004804 <BSP_LCD_GetXSize>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	6a3a      	ldr	r2, [r7, #32]
 8004eac:	4413      	add	r3, r2
 8004eae:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	08db      	lsrs	r3, r3, #3
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	fb02 f303 	mul.w	r3, r2, r3
 8004eba:	425b      	negs	r3, r3
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d3e2      	bcc.n	8004e96 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	372c      	adds	r7, #44	@ 0x2c
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd90      	pop	{r4, r7, pc}
 8004eda:	bf00      	nop
 8004edc:	20000d7c 	.word	0x20000d7c
 8004ee0:	20000c94 	.word	0x20000c94

08004ee4 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee8:	b086      	sub	sp, #24
 8004eea:	af02      	add	r7, sp, #8
 8004eec:	4604      	mov	r4, r0
 8004eee:	4608      	mov	r0, r1
 8004ef0:	4611      	mov	r1, r2
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	4623      	mov	r3, r4
 8004ef6:	80fb      	strh	r3, [r7, #6]
 8004ef8:	4603      	mov	r3, r0
 8004efa:	80bb      	strh	r3, [r7, #4]
 8004efc:	460b      	mov	r3, r1
 8004efe:	807b      	strh	r3, [r7, #2]
 8004f00:	4613      	mov	r3, r2
 8004f02:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004f08:	4b30      	ldr	r3, [pc, #192]	@ (8004fcc <BSP_LCD_FillRect+0xe8>)
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	4930      	ldr	r1, [pc, #192]	@ (8004fd0 <BSP_LCD_FillRect+0xec>)
 8004f0e:	4613      	mov	r3, r2
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	4413      	add	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	440b      	add	r3, r1
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff fd0a 	bl	8004934 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004f20:	4b2a      	ldr	r3, [pc, #168]	@ (8004fcc <BSP_LCD_FillRect+0xe8>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a2b      	ldr	r2, [pc, #172]	@ (8004fd4 <BSP_LCD_FillRect+0xf0>)
 8004f26:	2134      	movs	r1, #52	@ 0x34
 8004f28:	fb01 f303 	mul.w	r3, r1, r3
 8004f2c:	4413      	add	r3, r2
 8004f2e:	3348      	adds	r3, #72	@ 0x48
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d114      	bne.n	8004f60 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004f36:	4b25      	ldr	r3, [pc, #148]	@ (8004fcc <BSP_LCD_FillRect+0xe8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a26      	ldr	r2, [pc, #152]	@ (8004fd4 <BSP_LCD_FillRect+0xf0>)
 8004f3c:	2134      	movs	r1, #52	@ 0x34
 8004f3e:	fb01 f303 	mul.w	r3, r1, r3
 8004f42:	4413      	add	r3, r2
 8004f44:	335c      	adds	r3, #92	@ 0x5c
 8004f46:	681c      	ldr	r4, [r3, #0]
 8004f48:	f7ff fc5c 	bl	8004804 <BSP_LCD_GetXSize>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	88bb      	ldrh	r3, [r7, #4]
 8004f50:	fb03 f202 	mul.w	r2, r3, r2
 8004f54:	88fb      	ldrh	r3, [r7, #6]
 8004f56:	4413      	add	r3, r2
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	4423      	add	r3, r4
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	e013      	b.n	8004f88 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004f60:	4b1a      	ldr	r3, [pc, #104]	@ (8004fcc <BSP_LCD_FillRect+0xe8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a1b      	ldr	r2, [pc, #108]	@ (8004fd4 <BSP_LCD_FillRect+0xf0>)
 8004f66:	2134      	movs	r1, #52	@ 0x34
 8004f68:	fb01 f303 	mul.w	r3, r1, r3
 8004f6c:	4413      	add	r3, r2
 8004f6e:	335c      	adds	r3, #92	@ 0x5c
 8004f70:	681c      	ldr	r4, [r3, #0]
 8004f72:	f7ff fc47 	bl	8004804 <BSP_LCD_GetXSize>
 8004f76:	4602      	mov	r2, r0
 8004f78:	88bb      	ldrh	r3, [r7, #4]
 8004f7a:	fb03 f202 	mul.w	r2, r3, r2
 8004f7e:	88fb      	ldrh	r3, [r7, #6]
 8004f80:	4413      	add	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4423      	add	r3, r4
 8004f86:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8004f88:	4b10      	ldr	r3, [pc, #64]	@ (8004fcc <BSP_LCD_FillRect+0xe8>)
 8004f8a:	681c      	ldr	r4, [r3, #0]
 8004f8c:	68fd      	ldr	r5, [r7, #12]
 8004f8e:	887e      	ldrh	r6, [r7, #2]
 8004f90:	f8b7 8000 	ldrh.w	r8, [r7]
 8004f94:	f7ff fc36 	bl	8004804 <BSP_LCD_GetXSize>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	887b      	ldrh	r3, [r7, #2]
 8004f9c:	1ad1      	subs	r1, r2, r3
 8004f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004fcc <BSP_LCD_FillRect+0xe8>)
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	480b      	ldr	r0, [pc, #44]	@ (8004fd0 <BSP_LCD_FillRect+0xec>)
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	4413      	add	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4403      	add	r3, r0
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	9301      	str	r3, [sp, #4]
 8004fb2:	9100      	str	r1, [sp, #0]
 8004fb4:	4643      	mov	r3, r8
 8004fb6:	4632      	mov	r2, r6
 8004fb8:	4629      	mov	r1, r5
 8004fba:	4620      	mov	r0, r4
 8004fbc:	f000 f9d8 	bl	8005370 <LL_FillBuffer>
}
 8004fc0:	bf00      	nop
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fca:	bf00      	nop
 8004fcc:	20000d7c 	.word	0x20000d7c
 8004fd0:	20000d80 	.word	0x20000d80
 8004fd4:	20000c94 	.word	0x20000c94

08004fd8 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8004fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8005008 <BSP_LCD_DisplayOn+0x30>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699a      	ldr	r2, [r3, #24]
 8004fe2:	4b09      	ldr	r3, [pc, #36]	@ (8005008 <BSP_LCD_DisplayOn+0x30>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0201 	orr.w	r2, r2, #1
 8004fea:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8004fec:	2201      	movs	r2, #1
 8004fee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004ff2:	4806      	ldr	r0, [pc, #24]	@ (800500c <BSP_LCD_DisplayOn+0x34>)
 8004ff4:	f004 fd1e 	bl	8009a34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	2108      	movs	r1, #8
 8004ffc:	4804      	ldr	r0, [pc, #16]	@ (8005010 <BSP_LCD_DisplayOn+0x38>)
 8004ffe:	f004 fd19 	bl	8009a34 <HAL_GPIO_WritePin>
}
 8005002:	bf00      	nop
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	20000c94 	.word	0x20000c94
 800500c:	40022000 	.word	0x40022000
 8005010:	40022800 	.word	0x40022800

08005014 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b090      	sub	sp, #64	@ 0x40
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800501e:	4b64      	ldr	r3, [pc, #400]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 8005020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005022:	4a63      	ldr	r2, [pc, #396]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 8005024:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005028:	6453      	str	r3, [r2, #68]	@ 0x44
 800502a:	4b61      	ldr	r3, [pc, #388]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 800502c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005032:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8005036:	4b5e      	ldr	r3, [pc, #376]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 8005038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800503a:	4a5d      	ldr	r2, [pc, #372]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 800503c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005040:	6313      	str	r3, [r2, #48]	@ 0x30
 8005042:	4b5b      	ldr	r3, [pc, #364]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 8005044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005046:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800504a:	627b      	str	r3, [r7, #36]	@ 0x24
 800504c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800504e:	4b58      	ldr	r3, [pc, #352]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 8005050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005052:	4a57      	ldr	r2, [pc, #348]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 8005054:	f043 0310 	orr.w	r3, r3, #16
 8005058:	6313      	str	r3, [r2, #48]	@ 0x30
 800505a:	4b55      	ldr	r3, [pc, #340]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 800505c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800505e:	f003 0310 	and.w	r3, r3, #16
 8005062:	623b      	str	r3, [r7, #32]
 8005064:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005066:	4b52      	ldr	r3, [pc, #328]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 8005068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506a:	4a51      	ldr	r2, [pc, #324]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 800506c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005070:	6313      	str	r3, [r2, #48]	@ 0x30
 8005072:	4b4f      	ldr	r3, [pc, #316]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 8005074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800507a:	61fb      	str	r3, [r7, #28]
 800507c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800507e:	4b4c      	ldr	r3, [pc, #304]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 8005080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005082:	4a4b      	ldr	r2, [pc, #300]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 8005084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005088:	6313      	str	r3, [r2, #48]	@ 0x30
 800508a:	4b49      	ldr	r3, [pc, #292]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 800508c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005092:	61bb      	str	r3, [r7, #24]
 8005094:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8005096:	4b46      	ldr	r3, [pc, #280]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 8005098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509a:	4a45      	ldr	r2, [pc, #276]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 800509c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80050a2:	4b43      	ldr	r3, [pc, #268]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 80050a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050aa:	617b      	str	r3, [r7, #20]
 80050ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80050ae:	4b40      	ldr	r3, [pc, #256]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 80050b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b2:	4a3f      	ldr	r2, [pc, #252]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 80050b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80050ba:	4b3d      	ldr	r3, [pc, #244]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 80050bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050c2:	613b      	str	r3, [r7, #16]
 80050c4:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80050c6:	4b3a      	ldr	r3, [pc, #232]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 80050c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ca:	4a39      	ldr	r2, [pc, #228]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 80050cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80050d2:	4b37      	ldr	r3, [pc, #220]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 80050d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80050de:	4b34      	ldr	r3, [pc, #208]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e2:	4a33      	ldr	r2, [pc, #204]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 80050e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80050ea:	4b31      	ldr	r3, [pc, #196]	@ (80051b0 <BSP_LCD_MspInit+0x19c>)
 80050ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050f2:	60bb      	str	r3, [r7, #8]
 80050f4:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80050f6:	2310      	movs	r3, #16
 80050f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80050fa:	2302      	movs	r3, #2
 80050fc:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80050fe:	2300      	movs	r3, #0
 8005100:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8005102:	2302      	movs	r3, #2
 8005104:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8005106:	230e      	movs	r3, #14
 8005108:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800510a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800510e:	4619      	mov	r1, r3
 8005110:	4828      	ldr	r0, [pc, #160]	@ (80051b4 <BSP_LCD_MspInit+0x1a0>)
 8005112:	f004 f9bf 	bl	8009494 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8005116:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800511a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800511c:	2302      	movs	r3, #2
 800511e:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8005120:	2309      	movs	r3, #9
 8005122:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005124:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005128:	4619      	mov	r1, r3
 800512a:	4823      	ldr	r0, [pc, #140]	@ (80051b8 <BSP_LCD_MspInit+0x1a4>)
 800512c:	f004 f9b2 	bl	8009494 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8005130:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8005134:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005136:	2302      	movs	r3, #2
 8005138:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800513a:	230e      	movs	r3, #14
 800513c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800513e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005142:	4619      	mov	r1, r3
 8005144:	481d      	ldr	r0, [pc, #116]	@ (80051bc <BSP_LCD_MspInit+0x1a8>)
 8005146:	f004 f9a5 	bl	8009494 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800514a:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800514e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005150:	2302      	movs	r3, #2
 8005152:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005154:	230e      	movs	r3, #14
 8005156:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8005158:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800515c:	4619      	mov	r1, r3
 800515e:	4818      	ldr	r0, [pc, #96]	@ (80051c0 <BSP_LCD_MspInit+0x1ac>)
 8005160:	f004 f998 	bl	8009494 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8005164:	23f7      	movs	r3, #247	@ 0xf7
 8005166:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005168:	2302      	movs	r3, #2
 800516a:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800516c:	230e      	movs	r3, #14
 800516e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8005170:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005174:	4619      	mov	r1, r3
 8005176:	4813      	ldr	r0, [pc, #76]	@ (80051c4 <BSP_LCD_MspInit+0x1b0>)
 8005178:	f004 f98c 	bl	8009494 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 800517c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005180:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005182:	2301      	movs	r3, #1
 8005184:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8005186:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800518a:	4619      	mov	r1, r3
 800518c:	480b      	ldr	r0, [pc, #44]	@ (80051bc <BSP_LCD_MspInit+0x1a8>)
 800518e:	f004 f981 	bl	8009494 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8005192:	2308      	movs	r3, #8
 8005194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005196:	2301      	movs	r3, #1
 8005198:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800519a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800519e:	4619      	mov	r1, r3
 80051a0:	4808      	ldr	r0, [pc, #32]	@ (80051c4 <BSP_LCD_MspInit+0x1b0>)
 80051a2:	f004 f977 	bl	8009494 <HAL_GPIO_Init>
}
 80051a6:	bf00      	nop
 80051a8:	3740      	adds	r7, #64	@ 0x40
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	40023800 	.word	0x40023800
 80051b4:	40021000 	.word	0x40021000
 80051b8:	40021800 	.word	0x40021800
 80051bc:	40022000 	.word	0x40022000
 80051c0:	40022400 	.word	0x40022400
 80051c4:	40022800 	.word	0x40022800

080051c8 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80051d2:	4b0a      	ldr	r3, [pc, #40]	@ (80051fc <BSP_LCD_ClockConfig+0x34>)
 80051d4:	2208      	movs	r2, #8
 80051d6:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80051d8:	4b08      	ldr	r3, [pc, #32]	@ (80051fc <BSP_LCD_ClockConfig+0x34>)
 80051da:	22c0      	movs	r2, #192	@ 0xc0
 80051dc:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80051de:	4b07      	ldr	r3, [pc, #28]	@ (80051fc <BSP_LCD_ClockConfig+0x34>)
 80051e0:	2205      	movs	r2, #5
 80051e2:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80051e4:	4b05      	ldr	r3, [pc, #20]	@ (80051fc <BSP_LCD_ClockConfig+0x34>)
 80051e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80051ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80051ec:	4803      	ldr	r0, [pc, #12]	@ (80051fc <BSP_LCD_ClockConfig+0x34>)
 80051ee:	f006 fa79 	bl	800b6e4 <HAL_RCCEx_PeriphCLKConfig>
}
 80051f2:	bf00      	nop
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	20000d98 	.word	0x20000d98

08005200 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b088      	sub	sp, #32
 8005204:	af00      	add	r7, sp, #0
 8005206:	4603      	mov	r3, r0
 8005208:	603a      	str	r2, [r7, #0]
 800520a:	80fb      	strh	r3, [r7, #6]
 800520c:	460b      	mov	r3, r1
 800520e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8005210:	2300      	movs	r3, #0
 8005212:	61fb      	str	r3, [r7, #28]
 8005214:	2300      	movs	r3, #0
 8005216:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8005218:	4b53      	ldr	r3, [pc, #332]	@ (8005368 <DrawChar+0x168>)
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	4953      	ldr	r1, [pc, #332]	@ (800536c <DrawChar+0x16c>)
 800521e:	4613      	mov	r3, r2
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	4413      	add	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	3308      	adds	r3, #8
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	88db      	ldrh	r3, [r3, #6]
 800522e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8005230:	4b4d      	ldr	r3, [pc, #308]	@ (8005368 <DrawChar+0x168>)
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	494d      	ldr	r1, [pc, #308]	@ (800536c <DrawChar+0x16c>)
 8005236:	4613      	mov	r3, r2
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	4413      	add	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	440b      	add	r3, r1
 8005240:	3308      	adds	r3, #8
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	889b      	ldrh	r3, [r3, #4]
 8005246:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8005248:	8a3b      	ldrh	r3, [r7, #16]
 800524a:	3307      	adds	r3, #7
 800524c:	2b00      	cmp	r3, #0
 800524e:	da00      	bge.n	8005252 <DrawChar+0x52>
 8005250:	3307      	adds	r3, #7
 8005252:	10db      	asrs	r3, r3, #3
 8005254:	b2db      	uxtb	r3, r3
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	b2da      	uxtb	r2, r3
 800525a:	8a3b      	ldrh	r3, [r7, #16]
 800525c:	b2db      	uxtb	r3, r3
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8005262:	2300      	movs	r3, #0
 8005264:	61fb      	str	r3, [r7, #28]
 8005266:	e076      	b.n	8005356 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8005268:	8a3b      	ldrh	r3, [r7, #16]
 800526a:	3307      	adds	r3, #7
 800526c:	2b00      	cmp	r3, #0
 800526e:	da00      	bge.n	8005272 <DrawChar+0x72>
 8005270:	3307      	adds	r3, #7
 8005272:	10db      	asrs	r3, r3, #3
 8005274:	461a      	mov	r2, r3
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	fb02 f303 	mul.w	r3, r2, r3
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	4413      	add	r3, r2
 8005280:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8005282:	8a3b      	ldrh	r3, [r7, #16]
 8005284:	3307      	adds	r3, #7
 8005286:	2b00      	cmp	r3, #0
 8005288:	da00      	bge.n	800528c <DrawChar+0x8c>
 800528a:	3307      	adds	r3, #7
 800528c:	10db      	asrs	r3, r3, #3
 800528e:	2b01      	cmp	r3, #1
 8005290:	d002      	beq.n	8005298 <DrawChar+0x98>
 8005292:	2b02      	cmp	r3, #2
 8005294:	d004      	beq.n	80052a0 <DrawChar+0xa0>
 8005296:	e00c      	b.n	80052b2 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	617b      	str	r3, [r7, #20]
      break;
 800529e:	e016      	b.n	80052ce <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	021b      	lsls	r3, r3, #8
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	3201      	adds	r2, #1
 80052aa:	7812      	ldrb	r2, [r2, #0]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	617b      	str	r3, [r7, #20]
      break;
 80052b0:	e00d      	b.n	80052ce <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	041a      	lsls	r2, r3, #16
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	3301      	adds	r3, #1
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	4313      	orrs	r3, r2
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	3202      	adds	r2, #2
 80052c6:	7812      	ldrb	r2, [r2, #0]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]
      break;
 80052cc:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80052ce:	2300      	movs	r3, #0
 80052d0:	61bb      	str	r3, [r7, #24]
 80052d2:	e036      	b.n	8005342 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80052d4:	8a3a      	ldrh	r2, [r7, #16]
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	1ad2      	subs	r2, r2, r3
 80052da:	7bfb      	ldrb	r3, [r7, #15]
 80052dc:	4413      	add	r3, r2
 80052de:	3b01      	subs	r3, #1
 80052e0:	2201      	movs	r2, #1
 80052e2:	fa02 f303 	lsl.w	r3, r2, r3
 80052e6:	461a      	mov	r2, r3
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	4013      	ands	r3, r2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d012      	beq.n	8005316 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	88fb      	ldrh	r3, [r7, #6]
 80052f6:	4413      	add	r3, r2
 80052f8:	b298      	uxth	r0, r3
 80052fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005368 <DrawChar+0x168>)
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	491b      	ldr	r1, [pc, #108]	@ (800536c <DrawChar+0x16c>)
 8005300:	4613      	mov	r3, r2
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	4413      	add	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	88bb      	ldrh	r3, [r7, #4]
 800530e:	4619      	mov	r1, r3
 8005310:	f7ff fcee 	bl	8004cf0 <BSP_LCD_DrawPixel>
 8005314:	e012      	b.n	800533c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	b29a      	uxth	r2, r3
 800531a:	88fb      	ldrh	r3, [r7, #6]
 800531c:	4413      	add	r3, r2
 800531e:	b298      	uxth	r0, r3
 8005320:	4b11      	ldr	r3, [pc, #68]	@ (8005368 <DrawChar+0x168>)
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	4911      	ldr	r1, [pc, #68]	@ (800536c <DrawChar+0x16c>)
 8005326:	4613      	mov	r3, r2
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	4413      	add	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	440b      	add	r3, r1
 8005330:	3304      	adds	r3, #4
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	88bb      	ldrh	r3, [r7, #4]
 8005336:	4619      	mov	r1, r3
 8005338:	f7ff fcda 	bl	8004cf0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	3301      	adds	r3, #1
 8005340:	61bb      	str	r3, [r7, #24]
 8005342:	8a3b      	ldrh	r3, [r7, #16]
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	429a      	cmp	r2, r3
 8005348:	d3c4      	bcc.n	80052d4 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800534a:	88bb      	ldrh	r3, [r7, #4]
 800534c:	3301      	adds	r3, #1
 800534e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	3301      	adds	r3, #1
 8005354:	61fb      	str	r3, [r7, #28]
 8005356:	8a7b      	ldrh	r3, [r7, #18]
 8005358:	69fa      	ldr	r2, [r7, #28]
 800535a:	429a      	cmp	r2, r3
 800535c:	d384      	bcc.n	8005268 <DrawChar+0x68>
  }
}
 800535e:	bf00      	nop
 8005360:	bf00      	nop
 8005362:	3720      	adds	r7, #32
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	20000d7c 	.word	0x20000d7c
 800536c:	20000d80 	.word	0x20000d80

08005370 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af02      	add	r7, sp, #8
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800537e:	4b1e      	ldr	r3, [pc, #120]	@ (80053f8 <LL_FillBuffer+0x88>)
 8005380:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005384:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8005386:	4b1d      	ldr	r3, [pc, #116]	@ (80053fc <LL_FillBuffer+0x8c>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a1d      	ldr	r2, [pc, #116]	@ (8005400 <LL_FillBuffer+0x90>)
 800538c:	2134      	movs	r1, #52	@ 0x34
 800538e:	fb01 f303 	mul.w	r3, r1, r3
 8005392:	4413      	add	r3, r2
 8005394:	3348      	adds	r3, #72	@ 0x48
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b02      	cmp	r3, #2
 800539a:	d103      	bne.n	80053a4 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 800539c:	4b16      	ldr	r3, [pc, #88]	@ (80053f8 <LL_FillBuffer+0x88>)
 800539e:	2202      	movs	r2, #2
 80053a0:	609a      	str	r2, [r3, #8]
 80053a2:	e002      	b.n	80053aa <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80053a4:	4b14      	ldr	r3, [pc, #80]	@ (80053f8 <LL_FillBuffer+0x88>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80053aa:	4a13      	ldr	r2, [pc, #76]	@ (80053f8 <LL_FillBuffer+0x88>)
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80053b0:	4b11      	ldr	r3, [pc, #68]	@ (80053f8 <LL_FillBuffer+0x88>)
 80053b2:	4a14      	ldr	r2, [pc, #80]	@ (8005404 <LL_FillBuffer+0x94>)
 80053b4:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80053b6:	4810      	ldr	r0, [pc, #64]	@ (80053f8 <LL_FillBuffer+0x88>)
 80053b8:	f003 fcd0 	bl	8008d5c <HAL_DMA2D_Init>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d115      	bne.n	80053ee <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80053c2:	68f9      	ldr	r1, [r7, #12]
 80053c4:	480c      	ldr	r0, [pc, #48]	@ (80053f8 <LL_FillBuffer+0x88>)
 80053c6:	f003 ff37 	bl	8009238 <HAL_DMA2D_ConfigLayer>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10e      	bne.n	80053ee <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	69f9      	ldr	r1, [r7, #28]
 80053da:	4807      	ldr	r0, [pc, #28]	@ (80053f8 <LL_FillBuffer+0x88>)
 80053dc:	f003 fd08 	bl	8008df0 <HAL_DMA2D_Start>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d103      	bne.n	80053ee <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80053e6:	210a      	movs	r1, #10
 80053e8:	4803      	ldr	r0, [pc, #12]	@ (80053f8 <LL_FillBuffer+0x88>)
 80053ea:	f003 fd2c 	bl	8008e46 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80053ee:	bf00      	nop
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	20000d3c 	.word	0x20000d3c
 80053fc:	20000d7c 	.word	0x20000d7c
 8005400:	20000c94 	.word	0x20000c94
 8005404:	4002b000 	.word	0x4002b000

08005408 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af02      	add	r7, sp, #8
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8005416:	4b1c      	ldr	r3, [pc, #112]	@ (8005488 <LL_ConvertLineToARGB8888+0x80>)
 8005418:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800541c:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800541e:	4b1a      	ldr	r3, [pc, #104]	@ (8005488 <LL_ConvertLineToARGB8888+0x80>)
 8005420:	2200      	movs	r2, #0
 8005422:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8005424:	4b18      	ldr	r3, [pc, #96]	@ (8005488 <LL_ConvertLineToARGB8888+0x80>)
 8005426:	2200      	movs	r2, #0
 8005428:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800542a:	4b17      	ldr	r3, [pc, #92]	@ (8005488 <LL_ConvertLineToARGB8888+0x80>)
 800542c:	2200      	movs	r2, #0
 800542e:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8005430:	4b15      	ldr	r3, [pc, #84]	@ (8005488 <LL_ConvertLineToARGB8888+0x80>)
 8005432:	22ff      	movs	r2, #255	@ 0xff
 8005434:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8005436:	4a14      	ldr	r2, [pc, #80]	@ (8005488 <LL_ConvertLineToARGB8888+0x80>)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 800543c:	4b12      	ldr	r3, [pc, #72]	@ (8005488 <LL_ConvertLineToARGB8888+0x80>)
 800543e:	2200      	movs	r2, #0
 8005440:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8005442:	4b11      	ldr	r3, [pc, #68]	@ (8005488 <LL_ConvertLineToARGB8888+0x80>)
 8005444:	4a11      	ldr	r2, [pc, #68]	@ (800548c <LL_ConvertLineToARGB8888+0x84>)
 8005446:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8005448:	480f      	ldr	r0, [pc, #60]	@ (8005488 <LL_ConvertLineToARGB8888+0x80>)
 800544a:	f003 fc87 	bl	8008d5c <HAL_DMA2D_Init>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d115      	bne.n	8005480 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8005454:	2101      	movs	r1, #1
 8005456:	480c      	ldr	r0, [pc, #48]	@ (8005488 <LL_ConvertLineToARGB8888+0x80>)
 8005458:	f003 feee 	bl	8009238 <HAL_DMA2D_ConfigLayer>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10e      	bne.n	8005480 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8005462:	68f9      	ldr	r1, [r7, #12]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	2301      	movs	r3, #1
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4806      	ldr	r0, [pc, #24]	@ (8005488 <LL_ConvertLineToARGB8888+0x80>)
 800546e:	f003 fcbf 	bl	8008df0 <HAL_DMA2D_Start>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d103      	bne.n	8005480 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8005478:	210a      	movs	r1, #10
 800547a:	4803      	ldr	r0, [pc, #12]	@ (8005488 <LL_ConvertLineToARGB8888+0x80>)
 800547c:	f003 fce3 	bl	8008e46 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8005480:	bf00      	nop
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	20000d3c 	.word	0x20000d3c
 800548c:	4002b000 	.word	0x4002b000

08005490 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8005494:	4b29      	ldr	r3, [pc, #164]	@ (800553c <BSP_SDRAM_Init+0xac>)
 8005496:	4a2a      	ldr	r2, [pc, #168]	@ (8005540 <BSP_SDRAM_Init+0xb0>)
 8005498:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800549a:	4b2a      	ldr	r3, [pc, #168]	@ (8005544 <BSP_SDRAM_Init+0xb4>)
 800549c:	2202      	movs	r2, #2
 800549e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80054a0:	4b28      	ldr	r3, [pc, #160]	@ (8005544 <BSP_SDRAM_Init+0xb4>)
 80054a2:	2207      	movs	r2, #7
 80054a4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80054a6:	4b27      	ldr	r3, [pc, #156]	@ (8005544 <BSP_SDRAM_Init+0xb4>)
 80054a8:	2204      	movs	r2, #4
 80054aa:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80054ac:	4b25      	ldr	r3, [pc, #148]	@ (8005544 <BSP_SDRAM_Init+0xb4>)
 80054ae:	2207      	movs	r2, #7
 80054b0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80054b2:	4b24      	ldr	r3, [pc, #144]	@ (8005544 <BSP_SDRAM_Init+0xb4>)
 80054b4:	2202      	movs	r2, #2
 80054b6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80054b8:	4b22      	ldr	r3, [pc, #136]	@ (8005544 <BSP_SDRAM_Init+0xb4>)
 80054ba:	2202      	movs	r2, #2
 80054bc:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80054be:	4b21      	ldr	r3, [pc, #132]	@ (8005544 <BSP_SDRAM_Init+0xb4>)
 80054c0:	2202      	movs	r2, #2
 80054c2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80054c4:	4b1d      	ldr	r3, [pc, #116]	@ (800553c <BSP_SDRAM_Init+0xac>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80054ca:	4b1c      	ldr	r3, [pc, #112]	@ (800553c <BSP_SDRAM_Init+0xac>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80054d0:	4b1a      	ldr	r3, [pc, #104]	@ (800553c <BSP_SDRAM_Init+0xac>)
 80054d2:	2204      	movs	r2, #4
 80054d4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80054d6:	4b19      	ldr	r3, [pc, #100]	@ (800553c <BSP_SDRAM_Init+0xac>)
 80054d8:	2210      	movs	r2, #16
 80054da:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80054dc:	4b17      	ldr	r3, [pc, #92]	@ (800553c <BSP_SDRAM_Init+0xac>)
 80054de:	2240      	movs	r2, #64	@ 0x40
 80054e0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80054e2:	4b16      	ldr	r3, [pc, #88]	@ (800553c <BSP_SDRAM_Init+0xac>)
 80054e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80054e8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80054ea:	4b14      	ldr	r3, [pc, #80]	@ (800553c <BSP_SDRAM_Init+0xac>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80054f0:	4b12      	ldr	r3, [pc, #72]	@ (800553c <BSP_SDRAM_Init+0xac>)
 80054f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054f6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80054f8:	4b10      	ldr	r3, [pc, #64]	@ (800553c <BSP_SDRAM_Init+0xac>)
 80054fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80054fe:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005500:	4b0e      	ldr	r3, [pc, #56]	@ (800553c <BSP_SDRAM_Init+0xac>)
 8005502:	2200      	movs	r2, #0
 8005504:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8005506:	2100      	movs	r1, #0
 8005508:	480c      	ldr	r0, [pc, #48]	@ (800553c <BSP_SDRAM_Init+0xac>)
 800550a:	f000 f87f 	bl	800560c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800550e:	490d      	ldr	r1, [pc, #52]	@ (8005544 <BSP_SDRAM_Init+0xb4>)
 8005510:	480a      	ldr	r0, [pc, #40]	@ (800553c <BSP_SDRAM_Init+0xac>)
 8005512:	f008 f913 	bl	800d73c <HAL_SDRAM_Init>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800551c:	4b0a      	ldr	r3, [pc, #40]	@ (8005548 <BSP_SDRAM_Init+0xb8>)
 800551e:	2201      	movs	r2, #1
 8005520:	701a      	strb	r2, [r3, #0]
 8005522:	e002      	b.n	800552a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8005524:	4b08      	ldr	r3, [pc, #32]	@ (8005548 <BSP_SDRAM_Init+0xb8>)
 8005526:	2200      	movs	r2, #0
 8005528:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800552a:	f240 6003 	movw	r0, #1539	@ 0x603
 800552e:	f000 f80d 	bl	800554c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8005532:	4b05      	ldr	r3, [pc, #20]	@ (8005548 <BSP_SDRAM_Init+0xb8>)
 8005534:	781b      	ldrb	r3, [r3, #0]
}
 8005536:	4618      	mov	r0, r3
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	20000e1c 	.word	0x20000e1c
 8005540:	a0000140 	.word	0xa0000140
 8005544:	20000e50 	.word	0x20000e50
 8005548:	20000048 	.word	0x20000048

0800554c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8005558:	4b2a      	ldr	r3, [pc, #168]	@ (8005604 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800555a:	2201      	movs	r2, #1
 800555c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800555e:	4b29      	ldr	r3, [pc, #164]	@ (8005604 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005560:	2210      	movs	r2, #16
 8005562:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005564:	4b27      	ldr	r3, [pc, #156]	@ (8005604 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005566:	2201      	movs	r2, #1
 8005568:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800556a:	4b26      	ldr	r3, [pc, #152]	@ (8005604 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800556c:	2200      	movs	r2, #0
 800556e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005570:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005574:	4923      	ldr	r1, [pc, #140]	@ (8005604 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005576:	4824      	ldr	r0, [pc, #144]	@ (8005608 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005578:	f008 f914 	bl	800d7a4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800557c:	2001      	movs	r0, #1
 800557e:	f002 fb0b 	bl	8007b98 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8005582:	4b20      	ldr	r3, [pc, #128]	@ (8005604 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005584:	2202      	movs	r2, #2
 8005586:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005588:	4b1e      	ldr	r3, [pc, #120]	@ (8005604 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800558a:	2210      	movs	r2, #16
 800558c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800558e:	4b1d      	ldr	r3, [pc, #116]	@ (8005604 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005590:	2201      	movs	r2, #1
 8005592:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005594:	4b1b      	ldr	r3, [pc, #108]	@ (8005604 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005596:	2200      	movs	r2, #0
 8005598:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800559a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800559e:	4919      	ldr	r1, [pc, #100]	@ (8005604 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055a0:	4819      	ldr	r0, [pc, #100]	@ (8005608 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80055a2:	f008 f8ff 	bl	800d7a4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80055a6:	4b17      	ldr	r3, [pc, #92]	@ (8005604 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055a8:	2203      	movs	r2, #3
 80055aa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80055ac:	4b15      	ldr	r3, [pc, #84]	@ (8005604 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055ae:	2210      	movs	r2, #16
 80055b0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80055b2:	4b14      	ldr	r3, [pc, #80]	@ (8005604 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055b4:	2208      	movs	r2, #8
 80055b6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80055b8:	4b12      	ldr	r3, [pc, #72]	@ (8005604 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80055be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80055c2:	4910      	ldr	r1, [pc, #64]	@ (8005604 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055c4:	4810      	ldr	r0, [pc, #64]	@ (8005608 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80055c6:	f008 f8ed 	bl	800d7a4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80055ca:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80055ce:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80055d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005604 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055d2:	2204      	movs	r2, #4
 80055d4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80055d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005604 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055d8:	2210      	movs	r2, #16
 80055da:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80055dc:	4b09      	ldr	r3, [pc, #36]	@ (8005604 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055de:	2201      	movs	r2, #1
 80055e0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4a07      	ldr	r2, [pc, #28]	@ (8005604 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055e6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80055e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80055ec:	4905      	ldr	r1, [pc, #20]	@ (8005604 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055ee:	4806      	ldr	r0, [pc, #24]	@ (8005608 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80055f0:	f008 f8d8 	bl	800d7a4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	4804      	ldr	r0, [pc, #16]	@ (8005608 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80055f8:	f008 f909 	bl	800d80e <HAL_SDRAM_ProgramRefreshRate>
}
 80055fc:	bf00      	nop
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	20000e6c 	.word	0x20000e6c
 8005608:	20000e1c 	.word	0x20000e1c

0800560c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800560c:	b580      	push	{r7, lr}
 800560e:	b090      	sub	sp, #64	@ 0x40
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005616:	4b70      	ldr	r3, [pc, #448]	@ (80057d8 <BSP_SDRAM_MspInit+0x1cc>)
 8005618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800561a:	4a6f      	ldr	r2, [pc, #444]	@ (80057d8 <BSP_SDRAM_MspInit+0x1cc>)
 800561c:	f043 0301 	orr.w	r3, r3, #1
 8005620:	6393      	str	r3, [r2, #56]	@ 0x38
 8005622:	4b6d      	ldr	r3, [pc, #436]	@ (80057d8 <BSP_SDRAM_MspInit+0x1cc>)
 8005624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800562c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800562e:	4b6a      	ldr	r3, [pc, #424]	@ (80057d8 <BSP_SDRAM_MspInit+0x1cc>)
 8005630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005632:	4a69      	ldr	r2, [pc, #420]	@ (80057d8 <BSP_SDRAM_MspInit+0x1cc>)
 8005634:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005638:	6313      	str	r3, [r2, #48]	@ 0x30
 800563a:	4b67      	ldr	r3, [pc, #412]	@ (80057d8 <BSP_SDRAM_MspInit+0x1cc>)
 800563c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800563e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005642:	627b      	str	r3, [r7, #36]	@ 0x24
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005646:	4b64      	ldr	r3, [pc, #400]	@ (80057d8 <BSP_SDRAM_MspInit+0x1cc>)
 8005648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800564a:	4a63      	ldr	r2, [pc, #396]	@ (80057d8 <BSP_SDRAM_MspInit+0x1cc>)
 800564c:	f043 0304 	orr.w	r3, r3, #4
 8005650:	6313      	str	r3, [r2, #48]	@ 0x30
 8005652:	4b61      	ldr	r3, [pc, #388]	@ (80057d8 <BSP_SDRAM_MspInit+0x1cc>)
 8005654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005656:	f003 0304 	and.w	r3, r3, #4
 800565a:	623b      	str	r3, [r7, #32]
 800565c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800565e:	4b5e      	ldr	r3, [pc, #376]	@ (80057d8 <BSP_SDRAM_MspInit+0x1cc>)
 8005660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005662:	4a5d      	ldr	r2, [pc, #372]	@ (80057d8 <BSP_SDRAM_MspInit+0x1cc>)
 8005664:	f043 0308 	orr.w	r3, r3, #8
 8005668:	6313      	str	r3, [r2, #48]	@ 0x30
 800566a:	4b5b      	ldr	r3, [pc, #364]	@ (80057d8 <BSP_SDRAM_MspInit+0x1cc>)
 800566c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	61fb      	str	r3, [r7, #28]
 8005674:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005676:	4b58      	ldr	r3, [pc, #352]	@ (80057d8 <BSP_SDRAM_MspInit+0x1cc>)
 8005678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800567a:	4a57      	ldr	r2, [pc, #348]	@ (80057d8 <BSP_SDRAM_MspInit+0x1cc>)
 800567c:	f043 0310 	orr.w	r3, r3, #16
 8005680:	6313      	str	r3, [r2, #48]	@ 0x30
 8005682:	4b55      	ldr	r3, [pc, #340]	@ (80057d8 <BSP_SDRAM_MspInit+0x1cc>)
 8005684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005686:	f003 0310 	and.w	r3, r3, #16
 800568a:	61bb      	str	r3, [r7, #24]
 800568c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800568e:	4b52      	ldr	r3, [pc, #328]	@ (80057d8 <BSP_SDRAM_MspInit+0x1cc>)
 8005690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005692:	4a51      	ldr	r2, [pc, #324]	@ (80057d8 <BSP_SDRAM_MspInit+0x1cc>)
 8005694:	f043 0320 	orr.w	r3, r3, #32
 8005698:	6313      	str	r3, [r2, #48]	@ 0x30
 800569a:	4b4f      	ldr	r3, [pc, #316]	@ (80057d8 <BSP_SDRAM_MspInit+0x1cc>)
 800569c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569e:	f003 0320 	and.w	r3, r3, #32
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80056a6:	4b4c      	ldr	r3, [pc, #304]	@ (80057d8 <BSP_SDRAM_MspInit+0x1cc>)
 80056a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056aa:	4a4b      	ldr	r2, [pc, #300]	@ (80057d8 <BSP_SDRAM_MspInit+0x1cc>)
 80056ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80056b2:	4b49      	ldr	r3, [pc, #292]	@ (80057d8 <BSP_SDRAM_MspInit+0x1cc>)
 80056b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ba:	613b      	str	r3, [r7, #16]
 80056bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80056be:	4b46      	ldr	r3, [pc, #280]	@ (80057d8 <BSP_SDRAM_MspInit+0x1cc>)
 80056c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c2:	4a45      	ldr	r2, [pc, #276]	@ (80057d8 <BSP_SDRAM_MspInit+0x1cc>)
 80056c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80056ca:	4b43      	ldr	r3, [pc, #268]	@ (80057d8 <BSP_SDRAM_MspInit+0x1cc>)
 80056cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80056d6:	2302      	movs	r3, #2
 80056d8:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80056da:	2301      	movs	r3, #1
 80056dc:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80056de:	2302      	movs	r3, #2
 80056e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80056e2:	230c      	movs	r3, #12
 80056e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80056e6:	2308      	movs	r3, #8
 80056e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80056ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80056ee:	4619      	mov	r1, r3
 80056f0:	483a      	ldr	r0, [pc, #232]	@ (80057dc <BSP_SDRAM_MspInit+0x1d0>)
 80056f2:	f003 fecf 	bl	8009494 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80056f6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80056fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80056fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005700:	4619      	mov	r1, r3
 8005702:	4837      	ldr	r0, [pc, #220]	@ (80057e0 <BSP_SDRAM_MspInit+0x1d4>)
 8005704:	f003 fec6 	bl	8009494 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005708:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800570c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800570e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005712:	4619      	mov	r1, r3
 8005714:	4833      	ldr	r0, [pc, #204]	@ (80057e4 <BSP_SDRAM_MspInit+0x1d8>)
 8005716:	f003 febd 	bl	8009494 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800571a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800571e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005720:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005724:	4619      	mov	r1, r3
 8005726:	4830      	ldr	r0, [pc, #192]	@ (80057e8 <BSP_SDRAM_MspInit+0x1dc>)
 8005728:	f003 feb4 	bl	8009494 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800572c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8005730:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005732:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005736:	4619      	mov	r1, r3
 8005738:	482c      	ldr	r0, [pc, #176]	@ (80057ec <BSP_SDRAM_MspInit+0x1e0>)
 800573a:	f003 feab 	bl	8009494 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800573e:	2328      	movs	r3, #40	@ 0x28
 8005740:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8005742:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005746:	4619      	mov	r1, r3
 8005748:	4829      	ldr	r0, [pc, #164]	@ (80057f0 <BSP_SDRAM_MspInit+0x1e4>)
 800574a:	f003 fea3 	bl	8009494 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800574e:	4b29      	ldr	r3, [pc, #164]	@ (80057f4 <BSP_SDRAM_MspInit+0x1e8>)
 8005750:	2200      	movs	r2, #0
 8005752:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8005754:	4b27      	ldr	r3, [pc, #156]	@ (80057f4 <BSP_SDRAM_MspInit+0x1e8>)
 8005756:	2280      	movs	r2, #128	@ 0x80
 8005758:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800575a:	4b26      	ldr	r3, [pc, #152]	@ (80057f4 <BSP_SDRAM_MspInit+0x1e8>)
 800575c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005760:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8005762:	4b24      	ldr	r3, [pc, #144]	@ (80057f4 <BSP_SDRAM_MspInit+0x1e8>)
 8005764:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005768:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800576a:	4b22      	ldr	r3, [pc, #136]	@ (80057f4 <BSP_SDRAM_MspInit+0x1e8>)
 800576c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005770:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8005772:	4b20      	ldr	r3, [pc, #128]	@ (80057f4 <BSP_SDRAM_MspInit+0x1e8>)
 8005774:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005778:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800577a:	4b1e      	ldr	r3, [pc, #120]	@ (80057f4 <BSP_SDRAM_MspInit+0x1e8>)
 800577c:	2200      	movs	r2, #0
 800577e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8005780:	4b1c      	ldr	r3, [pc, #112]	@ (80057f4 <BSP_SDRAM_MspInit+0x1e8>)
 8005782:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005786:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8005788:	4b1a      	ldr	r3, [pc, #104]	@ (80057f4 <BSP_SDRAM_MspInit+0x1e8>)
 800578a:	2200      	movs	r2, #0
 800578c:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800578e:	4b19      	ldr	r3, [pc, #100]	@ (80057f4 <BSP_SDRAM_MspInit+0x1e8>)
 8005790:	2203      	movs	r2, #3
 8005792:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005794:	4b17      	ldr	r3, [pc, #92]	@ (80057f4 <BSP_SDRAM_MspInit+0x1e8>)
 8005796:	2200      	movs	r2, #0
 8005798:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800579a:	4b16      	ldr	r3, [pc, #88]	@ (80057f4 <BSP_SDRAM_MspInit+0x1e8>)
 800579c:	2200      	movs	r2, #0
 800579e:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80057a0:	4b14      	ldr	r3, [pc, #80]	@ (80057f4 <BSP_SDRAM_MspInit+0x1e8>)
 80057a2:	4a15      	ldr	r2, [pc, #84]	@ (80057f8 <BSP_SDRAM_MspInit+0x1ec>)
 80057a4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a12      	ldr	r2, [pc, #72]	@ (80057f4 <BSP_SDRAM_MspInit+0x1e8>)
 80057aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80057ac:	4a11      	ldr	r2, [pc, #68]	@ (80057f4 <BSP_SDRAM_MspInit+0x1e8>)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80057b2:	4810      	ldr	r0, [pc, #64]	@ (80057f4 <BSP_SDRAM_MspInit+0x1e8>)
 80057b4:	f002 ff9e 	bl	80086f4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80057b8:	480e      	ldr	r0, [pc, #56]	@ (80057f4 <BSP_SDRAM_MspInit+0x1e8>)
 80057ba:	f002 feed 	bl	8008598 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80057be:	2200      	movs	r2, #0
 80057c0:	210f      	movs	r1, #15
 80057c2:	2038      	movs	r0, #56	@ 0x38
 80057c4:	f002 febe 	bl	8008544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80057c8:	2038      	movs	r0, #56	@ 0x38
 80057ca:	f002 fed7 	bl	800857c <HAL_NVIC_EnableIRQ>
}
 80057ce:	bf00      	nop
 80057d0:	3740      	adds	r7, #64	@ 0x40
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	40023800 	.word	0x40023800
 80057dc:	40020800 	.word	0x40020800
 80057e0:	40020c00 	.word	0x40020c00
 80057e4:	40021000 	.word	0x40021000
 80057e8:	40021400 	.word	0x40021400
 80057ec:	40021800 	.word	0x40021800
 80057f0:	40021c00 	.word	0x40021c00
 80057f4:	20000e7c 	.word	0x20000e7c
 80057f8:	40026410 	.word	0x40026410

080057fc <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	4603      	mov	r3, r0
 8005804:	460a      	mov	r2, r1
 8005806:	80fb      	strh	r3, [r7, #6]
 8005808:	4613      	mov	r3, r2
 800580a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8005810:	4a14      	ldr	r2, [pc, #80]	@ (8005864 <BSP_TS_Init+0x68>)
 8005812:	88fb      	ldrh	r3, [r7, #6]
 8005814:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8005816:	4a14      	ldr	r2, [pc, #80]	@ (8005868 <BSP_TS_Init+0x6c>)
 8005818:	88bb      	ldrh	r3, [r7, #4]
 800581a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800581c:	4b13      	ldr	r3, [pc, #76]	@ (800586c <BSP_TS_Init+0x70>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2070      	movs	r0, #112	@ 0x70
 8005822:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8005824:	4b11      	ldr	r3, [pc, #68]	@ (800586c <BSP_TS_Init+0x70>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	2070      	movs	r0, #112	@ 0x70
 800582a:	4798      	blx	r3
 800582c:	4603      	mov	r3, r0
 800582e:	2b51      	cmp	r3, #81	@ 0x51
 8005830:	d110      	bne.n	8005854 <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8005832:	4b0f      	ldr	r3, [pc, #60]	@ (8005870 <BSP_TS_Init+0x74>)
 8005834:	4a0d      	ldr	r2, [pc, #52]	@ (800586c <BSP_TS_Init+0x70>)
 8005836:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8005838:	4b0e      	ldr	r3, [pc, #56]	@ (8005874 <BSP_TS_Init+0x78>)
 800583a:	2270      	movs	r2, #112	@ 0x70
 800583c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800583e:	4b0e      	ldr	r3, [pc, #56]	@ (8005878 <BSP_TS_Init+0x7c>)
 8005840:	2208      	movs	r2, #8
 8005842:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8005844:	4b0a      	ldr	r3, [pc, #40]	@ (8005870 <BSP_TS_Init+0x74>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	4a0a      	ldr	r2, [pc, #40]	@ (8005874 <BSP_TS_Init+0x78>)
 800584c:	7812      	ldrb	r2, [r2, #0]
 800584e:	4610      	mov	r0, r2
 8005850:	4798      	blx	r3
 8005852:	e001      	b.n	8005858 <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8005854:	2303      	movs	r3, #3
 8005856:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005858:	7bfb      	ldrb	r3, [r7, #15]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	20000ee0 	.word	0x20000ee0
 8005868:	20000ee2 	.word	0x20000ee2
 800586c:	2000000c 	.word	0x2000000c
 8005870:	20000edc 	.word	0x20000edc
 8005874:	20000ee5 	.word	0x20000ee5
 8005878:	20000ee4 	.word	0x20000ee4

0800587c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800587c:	b590      	push	{r4, r7, lr}
 800587e:	b097      	sub	sp, #92	@ 0x5c
 8005880:	af02      	add	r7, sp, #8
 8005882:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8005884:	2300      	movs	r3, #0
 8005886:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800588a:	2300      	movs	r3, #0
 800588c:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8005892:	2300      	movs	r3, #0
 8005894:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8005896:	4bb8      	ldr	r3, [pc, #736]	@ (8005b78 <BSP_TS_GetState+0x2fc>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	4ab7      	ldr	r2, [pc, #732]	@ (8005b7c <BSP_TS_GetState+0x300>)
 800589e:	7812      	ldrb	r2, [r2, #0]
 80058a0:	4610      	mov	r0, r2
 80058a2:	4798      	blx	r3
 80058a4:	4603      	mov	r3, r0
 80058a6:	461a      	mov	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 8198 	beq.w	8005be6 <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80058b6:	2300      	movs	r3, #0
 80058b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058ba:	e187      	b.n	8005bcc <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80058bc:	4bae      	ldr	r3, [pc, #696]	@ (8005b78 <BSP_TS_GetState+0x2fc>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	4aae      	ldr	r2, [pc, #696]	@ (8005b7c <BSP_TS_GetState+0x300>)
 80058c4:	7812      	ldrb	r2, [r2, #0]
 80058c6:	4614      	mov	r4, r2
 80058c8:	f107 0120 	add.w	r1, r7, #32
 80058cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058ce:	0052      	lsls	r2, r2, #1
 80058d0:	1888      	adds	r0, r1, r2
 80058d2:	f107 0114 	add.w	r1, r7, #20
 80058d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058d8:	0052      	lsls	r2, r2, #1
 80058da:	440a      	add	r2, r1
 80058dc:	4601      	mov	r1, r0
 80058de:	4620      	mov	r0, r4
 80058e0:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80058e2:	4ba7      	ldr	r3, [pc, #668]	@ (8005b80 <BSP_TS_GetState+0x304>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d117      	bne.n	800591a <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 80058ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	3350      	adds	r3, #80	@ 0x50
 80058f0:	443b      	add	r3, r7
 80058f2:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80058f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	3350      	adds	r3, #80	@ 0x50
 80058fc:	443b      	add	r3, r7
 80058fe:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8005902:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	3350      	adds	r3, #80	@ 0x50
 8005908:	443b      	add	r3, r7
 800590a:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800590e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	3350      	adds	r3, #80	@ 0x50
 8005914:	443b      	add	r3, r7
 8005916:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800591a:	4b99      	ldr	r3, [pc, #612]	@ (8005b80 <BSP_TS_GetState+0x304>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00e      	beq.n	8005944 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8005926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	3350      	adds	r3, #80	@ 0x50
 800592c:	443b      	add	r3, r7
 800592e:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8005932:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005936:	b29a      	uxth	r2, r3
 8005938:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	3350      	adds	r3, #80	@ 0x50
 800593e:	443b      	add	r3, r7
 8005940:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8005944:	4b8e      	ldr	r3, [pc, #568]	@ (8005b80 <BSP_TS_GetState+0x304>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00e      	beq.n	800596e <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8005950:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	3350      	adds	r3, #80	@ 0x50
 8005956:	443b      	add	r3, r7
 8005958:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800595c:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005960:	b29a      	uxth	r2, r3
 8005962:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	3350      	adds	r3, #80	@ 0x50
 8005968:	443b      	add	r3, r7
 800596a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800596e:	4b84      	ldr	r3, [pc, #528]	@ (8005b80 <BSP_TS_GetState+0x304>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	f003 0308 	and.w	r3, r3, #8
 8005976:	2b00      	cmp	r3, #0
 8005978:	d017      	beq.n	80059aa <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 800597a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	3350      	adds	r3, #80	@ 0x50
 8005980:	443b      	add	r3, r7
 8005982:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005986:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	3350      	adds	r3, #80	@ 0x50
 800598c:	443b      	add	r3, r7
 800598e:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8005992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	3350      	adds	r3, #80	@ 0x50
 8005998:	443b      	add	r3, r7
 800599a:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800599e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	3350      	adds	r3, #80	@ 0x50
 80059a4:	443b      	add	r3, r7
 80059a6:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80059aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	3350      	adds	r3, #80	@ 0x50
 80059b0:	443b      	add	r3, r7
 80059b2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80059b6:	4619      	mov	r1, r3
 80059b8:	4a72      	ldr	r2, [pc, #456]	@ (8005b84 <BSP_TS_GetState+0x308>)
 80059ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059c0:	4299      	cmp	r1, r3
 80059c2:	d90d      	bls.n	80059e0 <BSP_TS_GetState+0x164>
 80059c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	3350      	adds	r3, #80	@ 0x50
 80059ca:	443b      	add	r3, r7
 80059cc:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80059d0:	496c      	ldr	r1, [pc, #432]	@ (8005b84 <BSP_TS_GetState+0x308>)
 80059d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	b29b      	uxth	r3, r3
 80059de:	e00c      	b.n	80059fa <BSP_TS_GetState+0x17e>
 80059e0:	4a68      	ldr	r2, [pc, #416]	@ (8005b84 <BSP_TS_GetState+0x308>)
 80059e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	3350      	adds	r3, #80	@ 0x50
 80059f0:	443b      	add	r3, r7
 80059f2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80059fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	3350      	adds	r3, #80	@ 0x50
 8005a04:	443b      	add	r3, r7
 8005a06:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4a5e      	ldr	r2, [pc, #376]	@ (8005b88 <BSP_TS_GetState+0x30c>)
 8005a0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a14:	4299      	cmp	r1, r3
 8005a16:	d90d      	bls.n	8005a34 <BSP_TS_GetState+0x1b8>
 8005a18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	3350      	adds	r3, #80	@ 0x50
 8005a1e:	443b      	add	r3, r7
 8005a20:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8005a24:	4958      	ldr	r1, [pc, #352]	@ (8005b88 <BSP_TS_GetState+0x30c>)
 8005a26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	e00c      	b.n	8005a4e <BSP_TS_GetState+0x1d2>
 8005a34:	4a54      	ldr	r2, [pc, #336]	@ (8005b88 <BSP_TS_GetState+0x30c>)
 8005a36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	3350      	adds	r3, #80	@ 0x50
 8005a44:	443b      	add	r3, r7
 8005a46:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 8005a52:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8005a56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005a5a:	4413      	add	r3, r2
 8005a5c:	2b05      	cmp	r3, #5
 8005a5e:	dd15      	ble.n	8005a8c <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8005a60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	3350      	adds	r3, #80	@ 0x50
 8005a66:	443b      	add	r3, r7
 8005a68:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4a45      	ldr	r2, [pc, #276]	@ (8005b84 <BSP_TS_GetState+0x308>)
 8005a70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8005a76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	3350      	adds	r3, #80	@ 0x50
 8005a7c:	443b      	add	r3, r7
 8005a7e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005a82:	4619      	mov	r1, r3
 8005a84:	4a40      	ldr	r2, [pc, #256]	@ (8005b88 <BSP_TS_GetState+0x30c>)
 8005a86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8005a8c:	4b3b      	ldr	r3, [pc, #236]	@ (8005b7c <BSP_TS_GetState+0x300>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	2b70      	cmp	r3, #112	@ 0x70
 8005a92:	d119      	bne.n	8005ac8 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8005a94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	3350      	adds	r3, #80	@ 0x50
 8005a9a:	443b      	add	r3, r7
 8005a9c:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	4413      	add	r3, r2
 8005aa8:	460a      	mov	r2, r1
 8005aaa:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8005aac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	3350      	adds	r3, #80	@ 0x50
 8005ab2:	443b      	add	r3, r7
 8005ab4:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005abc:	3304      	adds	r3, #4
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	4413      	add	r3, r2
 8005ac2:	460a      	mov	r2, r1
 8005ac4:	809a      	strh	r2, [r3, #4]
 8005ac6:	e022      	b.n	8005b0e <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8005ac8:	4b30      	ldr	r3, [pc, #192]	@ (8005b8c <BSP_TS_GetState+0x310>)
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	4619      	mov	r1, r3
 8005ace:	4a2d      	ldr	r2, [pc, #180]	@ (8005b84 <BSP_TS_GetState+0x308>)
 8005ad0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ad6:	fb01 f303 	mul.w	r3, r1, r3
 8005ada:	0b1b      	lsrs	r3, r3, #12
 8005adc:	b299      	uxth	r1, r3
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	4413      	add	r3, r2
 8005ae6:	460a      	mov	r2, r1
 8005ae8:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8005aea:	4b29      	ldr	r3, [pc, #164]	@ (8005b90 <BSP_TS_GetState+0x314>)
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	4619      	mov	r1, r3
 8005af0:	4a25      	ldr	r2, [pc, #148]	@ (8005b88 <BSP_TS_GetState+0x30c>)
 8005af2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005af8:	fb01 f303 	mul.w	r3, r1, r3
 8005afc:	0b1b      	lsrs	r3, r3, #12
 8005afe:	b299      	uxth	r1, r3
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b04:	3304      	adds	r3, #4
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	4413      	add	r3, r2
 8005b0a:	460a      	mov	r2, r1
 8005b0c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8005b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8005b7c <BSP_TS_GetState+0x300>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f107 010c 	add.w	r1, r7, #12
 8005b18:	f107 0210 	add.w	r2, r7, #16
 8005b1c:	f107 0308 	add.w	r3, r7, #8
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	460b      	mov	r3, r1
 8005b24:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005b26:	f7fc fe2d 	bl	8002784 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	b2d9      	uxtb	r1, r3
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b32:	4413      	add	r3, r2
 8005b34:	3316      	adds	r3, #22
 8005b36:	460a      	mov	r2, r1
 8005b38:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	b2d9      	uxtb	r1, r3
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b42:	4413      	add	r3, r2
 8005b44:	3320      	adds	r3, #32
 8005b46:	460a      	mov	r2, r1
 8005b48:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d836      	bhi.n	8005bbe <BSP_TS_GetState+0x342>
 8005b50:	a201      	add	r2, pc, #4	@ (adr r2, 8005b58 <BSP_TS_GetState+0x2dc>)
 8005b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b56:	bf00      	nop
 8005b58:	08005b69 	.word	0x08005b69
 8005b5c:	08005b95 	.word	0x08005b95
 8005b60:	08005ba3 	.word	0x08005ba3
 8005b64:	08005bb1 	.word	0x08005bb1
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b6c:	4413      	add	r3, r2
 8005b6e:	331b      	adds	r3, #27
 8005b70:	2201      	movs	r2, #1
 8005b72:	701a      	strb	r2, [r3, #0]
          break;
 8005b74:	e027      	b.n	8005bc6 <BSP_TS_GetState+0x34a>
 8005b76:	bf00      	nop
 8005b78:	20000edc 	.word	0x20000edc
 8005b7c:	20000ee5 	.word	0x20000ee5
 8005b80:	20000ee4 	.word	0x20000ee4
 8005b84:	20000ee8 	.word	0x20000ee8
 8005b88:	20000efc 	.word	0x20000efc
 8005b8c:	20000ee0 	.word	0x20000ee0
 8005b90:	20000ee2 	.word	0x20000ee2
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b98:	4413      	add	r3, r2
 8005b9a:	331b      	adds	r3, #27
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	701a      	strb	r2, [r3, #0]
          break;
 8005ba0:	e011      	b.n	8005bc6 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ba6:	4413      	add	r3, r2
 8005ba8:	331b      	adds	r3, #27
 8005baa:	2203      	movs	r2, #3
 8005bac:	701a      	strb	r2, [r3, #0]
          break;
 8005bae:	e00a      	b.n	8005bc6 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bb4:	4413      	add	r3, r2
 8005bb6:	331b      	adds	r3, #27
 8005bb8:	2200      	movs	r2, #0
 8005bba:	701a      	strb	r2, [r3, #0]
          break;
 8005bbc:	e003      	b.n	8005bc6 <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 8005bc4:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8005bc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bc8:	3301      	adds	r3, #1
 8005bca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	f4ff ae71 	bcc.w	80058bc <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f80a 	bl	8005bf4 <BSP_TS_Get_GestureId>
 8005be0:	4603      	mov	r3, r0
 8005be2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8005be6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3754      	adds	r7, #84	@ 0x54
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd90      	pop	{r4, r7, pc}
 8005bf2:	bf00      	nop

08005bf4 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8005c04:	4b3b      	ldr	r3, [pc, #236]	@ (8005cf4 <BSP_TS_Get_GestureId+0x100>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	461a      	mov	r2, r3
 8005c0a:	f107 0308 	add.w	r3, r7, #8
 8005c0e:	4619      	mov	r1, r3
 8005c10:	4610      	mov	r0, r2
 8005c12:	f7fc fd9e 	bl	8002752 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2b49      	cmp	r3, #73	@ 0x49
 8005c1a:	d05e      	beq.n	8005cda <BSP_TS_Get_GestureId+0xe6>
 8005c1c:	2b49      	cmp	r3, #73	@ 0x49
 8005c1e:	d860      	bhi.n	8005ce2 <BSP_TS_Get_GestureId+0xee>
 8005c20:	2b1c      	cmp	r3, #28
 8005c22:	d83f      	bhi.n	8005ca4 <BSP_TS_Get_GestureId+0xb0>
 8005c24:	2b1c      	cmp	r3, #28
 8005c26:	d85c      	bhi.n	8005ce2 <BSP_TS_Get_GestureId+0xee>
 8005c28:	a201      	add	r2, pc, #4	@ (adr r2, 8005c30 <BSP_TS_Get_GestureId+0x3c>)
 8005c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2e:	bf00      	nop
 8005c30:	08005cab 	.word	0x08005cab
 8005c34:	08005ce3 	.word	0x08005ce3
 8005c38:	08005ce3 	.word	0x08005ce3
 8005c3c:	08005ce3 	.word	0x08005ce3
 8005c40:	08005ce3 	.word	0x08005ce3
 8005c44:	08005ce3 	.word	0x08005ce3
 8005c48:	08005ce3 	.word	0x08005ce3
 8005c4c:	08005ce3 	.word	0x08005ce3
 8005c50:	08005ce3 	.word	0x08005ce3
 8005c54:	08005ce3 	.word	0x08005ce3
 8005c58:	08005ce3 	.word	0x08005ce3
 8005c5c:	08005ce3 	.word	0x08005ce3
 8005c60:	08005ce3 	.word	0x08005ce3
 8005c64:	08005ce3 	.word	0x08005ce3
 8005c68:	08005ce3 	.word	0x08005ce3
 8005c6c:	08005ce3 	.word	0x08005ce3
 8005c70:	08005cb3 	.word	0x08005cb3
 8005c74:	08005ce3 	.word	0x08005ce3
 8005c78:	08005ce3 	.word	0x08005ce3
 8005c7c:	08005ce3 	.word	0x08005ce3
 8005c80:	08005cbb 	.word	0x08005cbb
 8005c84:	08005ce3 	.word	0x08005ce3
 8005c88:	08005ce3 	.word	0x08005ce3
 8005c8c:	08005ce3 	.word	0x08005ce3
 8005c90:	08005cc3 	.word	0x08005cc3
 8005c94:	08005ce3 	.word	0x08005ce3
 8005c98:	08005ce3 	.word	0x08005ce3
 8005c9c:	08005ce3 	.word	0x08005ce3
 8005ca0:	08005ccb 	.word	0x08005ccb
 8005ca4:	2b40      	cmp	r3, #64	@ 0x40
 8005ca6:	d014      	beq.n	8005cd2 <BSP_TS_Get_GestureId+0xde>
 8005ca8:	e01b      	b.n	8005ce2 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005cb0:	e01a      	b.n	8005ce8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005cb8:	e016      	b.n	8005ce8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005cc0:	e012      	b.n	8005ce8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2203      	movs	r2, #3
 8005cc6:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005cc8:	e00e      	b.n	8005ce8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2204      	movs	r2, #4
 8005cce:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005cd0:	e00a      	b.n	8005ce8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2205      	movs	r2, #5
 8005cd6:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005cd8:	e006      	b.n	8005ce8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2206      	movs	r2, #6
 8005cde:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005ce0:	e002      	b.n	8005ce8 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	73fb      	strb	r3, [r7, #15]
      break;
 8005ce6:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	20000ee5 	.word	0x20000ee5

08005cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005cfe:	4b11      	ldr	r3, [pc, #68]	@ (8005d44 <HAL_MspInit+0x4c>)
 8005d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d02:	4a10      	ldr	r2, [pc, #64]	@ (8005d44 <HAL_MspInit+0x4c>)
 8005d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8005d44 <HAL_MspInit+0x4c>)
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d12:	607b      	str	r3, [r7, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d16:	4b0b      	ldr	r3, [pc, #44]	@ (8005d44 <HAL_MspInit+0x4c>)
 8005d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8005d44 <HAL_MspInit+0x4c>)
 8005d1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d22:	4b08      	ldr	r3, [pc, #32]	@ (8005d44 <HAL_MspInit+0x4c>)
 8005d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d2a:	603b      	str	r3, [r7, #0]
 8005d2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005d2e:	2200      	movs	r2, #0
 8005d30:	210f      	movs	r1, #15
 8005d32:	f06f 0001 	mvn.w	r0, #1
 8005d36:	f002 fc05 	bl	8008544 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d3a:	bf00      	nop
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	40023800 	.word	0x40023800

08005d48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08e      	sub	sp, #56	@ 0x38
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005d58:	4b33      	ldr	r3, [pc, #204]	@ (8005e28 <HAL_InitTick+0xe0>)
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5c:	4a32      	ldr	r2, [pc, #200]	@ (8005e28 <HAL_InitTick+0xe0>)
 8005d5e:	f043 0310 	orr.w	r3, r3, #16
 8005d62:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d64:	4b30      	ldr	r3, [pc, #192]	@ (8005e28 <HAL_InitTick+0xe0>)
 8005d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d68:	f003 0310 	and.w	r3, r3, #16
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005d70:	f107 0210 	add.w	r2, r7, #16
 8005d74:	f107 0314 	add.w	r3, r7, #20
 8005d78:	4611      	mov	r1, r2
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f005 fc80 	bl	800b680 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d103      	bne.n	8005d92 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005d8a:	f005 fc51 	bl	800b630 <HAL_RCC_GetPCLK1Freq>
 8005d8e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005d90:	e004      	b.n	8005d9c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005d92:	f005 fc4d 	bl	800b630 <HAL_RCC_GetPCLK1Freq>
 8005d96:	4603      	mov	r3, r0
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d9e:	4a23      	ldr	r2, [pc, #140]	@ (8005e2c <HAL_InitTick+0xe4>)
 8005da0:	fba2 2303 	umull	r2, r3, r2, r3
 8005da4:	0c9b      	lsrs	r3, r3, #18
 8005da6:	3b01      	subs	r3, #1
 8005da8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005daa:	4b21      	ldr	r3, [pc, #132]	@ (8005e30 <HAL_InitTick+0xe8>)
 8005dac:	4a21      	ldr	r2, [pc, #132]	@ (8005e34 <HAL_InitTick+0xec>)
 8005dae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005db0:	4b1f      	ldr	r3, [pc, #124]	@ (8005e30 <HAL_InitTick+0xe8>)
 8005db2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005db6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005db8:	4a1d      	ldr	r2, [pc, #116]	@ (8005e30 <HAL_InitTick+0xe8>)
 8005dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dbc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8005e30 <HAL_InitTick+0xe8>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8005e30 <HAL_InitTick+0xe8>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005dca:	4b19      	ldr	r3, [pc, #100]	@ (8005e30 <HAL_InitTick+0xe8>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005dd0:	4817      	ldr	r0, [pc, #92]	@ (8005e30 <HAL_InitTick+0xe8>)
 8005dd2:	f007 fd44 	bl	800d85e <HAL_TIM_Base_Init>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8005ddc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d11b      	bne.n	8005e1c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005de4:	4812      	ldr	r0, [pc, #72]	@ (8005e30 <HAL_InitTick+0xe8>)
 8005de6:	f007 fd9b 	bl	800d920 <HAL_TIM_Base_Start_IT>
 8005dea:	4603      	mov	r3, r0
 8005dec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8005df0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d111      	bne.n	8005e1c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005df8:	2036      	movs	r0, #54	@ 0x36
 8005dfa:	f002 fbbf 	bl	800857c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b0f      	cmp	r3, #15
 8005e02:	d808      	bhi.n	8005e16 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005e04:	2200      	movs	r2, #0
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	2036      	movs	r0, #54	@ 0x36
 8005e0a:	f002 fb9b 	bl	8008544 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8005e38 <HAL_InitTick+0xf0>)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6013      	str	r3, [r2, #0]
 8005e14:	e002      	b.n	8005e1c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005e1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3738      	adds	r7, #56	@ 0x38
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	40023800 	.word	0x40023800
 8005e2c:	431bde83 	.word	0x431bde83
 8005e30:	20000f10 	.word	0x20000f10
 8005e34:	40001000 	.word	0x40001000
 8005e38:	2000008c 	.word	0x2000008c

08005e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005e40:	bf00      	nop
 8005e42:	e7fd      	b.n	8005e40 <NMI_Handler+0x4>

08005e44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e48:	bf00      	nop
 8005e4a:	e7fd      	b.n	8005e48 <HardFault_Handler+0x4>

08005e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e50:	bf00      	nop
 8005e52:	e7fd      	b.n	8005e50 <MemManage_Handler+0x4>

08005e54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e54:	b480      	push	{r7}
 8005e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e58:	bf00      	nop
 8005e5a:	e7fd      	b.n	8005e58 <BusFault_Handler+0x4>

08005e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e60:	bf00      	nop
 8005e62:	e7fd      	b.n	8005e60 <UsageFault_Handler+0x4>

08005e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e64:	b480      	push	{r7}
 8005e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e68:	bf00      	nop
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
	...

08005e74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005e78:	4802      	ldr	r0, [pc, #8]	@ (8005e84 <TIM6_DAC_IRQHandler+0x10>)
 8005e7a:	f007 fdc9 	bl	800da10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005e7e:	bf00      	nop
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	20000f10 	.word	0x20000f10

08005e88 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8005e8c:	4802      	ldr	r0, [pc, #8]	@ (8005e98 <DMA2_Stream3_IRQHandler+0x10>)
 8005e8e:	f002 fcef 	bl	8008870 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005e92:	bf00      	nop
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	200009b4 	.word	0x200009b4

08005e9c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8005ea0:	4802      	ldr	r0, [pc, #8]	@ (8005eac <DMA2_Stream4_IRQHandler+0x10>)
 8005ea2:	f002 fce5 	bl	8008870 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8005ea6:	bf00      	nop
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	2000086c 	.word	0x2000086c

08005eb0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8005eb4:	4802      	ldr	r0, [pc, #8]	@ (8005ec0 <DMA2_Stream6_IRQHandler+0x10>)
 8005eb6:	f002 fcdb 	bl	8008870 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005eba:	bf00      	nop
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20000a14 	.word	0x20000a14

08005ec4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8005ec8:	4802      	ldr	r0, [pc, #8]	@ (8005ed4 <DMA2_Stream7_IRQHandler+0x10>)
 8005eca:	f002 fcd1 	bl	8008870 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8005ece:	bf00      	nop
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	200008cc 	.word	0x200008cc

08005ed8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8005edc:	4802      	ldr	r0, [pc, #8]	@ (8005ee8 <LTDC_IRQHandler+0x10>)
 8005ede:	f004 fc3d 	bl	800a75c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8005ee2:	bf00      	nop
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	200006a0 	.word	0x200006a0

08005eec <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005ef0:	4802      	ldr	r0, [pc, #8]	@ (8005efc <DMA2D_IRQHandler+0x10>)
 8005ef2:	f003 f891 	bl	8009018 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8005ef6:	bf00      	nop
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	200001a0 	.word	0x200001a0

08005f00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
	return 1;
 8005f04:	2301      	movs	r3, #1
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <_kill>:

int _kill(int pid, int sig)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005f1a:	f00e fad7 	bl	80144cc <__errno>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2216      	movs	r2, #22
 8005f22:	601a      	str	r2, [r3, #0]
	return -1;
 8005f24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <_exit>:

void _exit (int status)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005f38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f7ff ffe7 	bl	8005f10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005f42:	bf00      	nop
 8005f44:	e7fd      	b.n	8005f42 <_exit+0x12>

08005f46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b086      	sub	sp, #24
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f52:	2300      	movs	r3, #0
 8005f54:	617b      	str	r3, [r7, #20]
 8005f56:	e00a      	b.n	8005f6e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005f58:	f3af 8000 	nop.w
 8005f5c:	4601      	mov	r1, r0
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	1c5a      	adds	r2, r3, #1
 8005f62:	60ba      	str	r2, [r7, #8]
 8005f64:	b2ca      	uxtb	r2, r1
 8005f66:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	617b      	str	r3, [r7, #20]
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	dbf0      	blt.n	8005f58 <_read+0x12>
	}

return len;
 8005f76:	687b      	ldr	r3, [r7, #4]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	e009      	b.n	8005fa6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	60ba      	str	r2, [r7, #8]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	617b      	str	r3, [r7, #20]
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	dbf1      	blt.n	8005f92 <_write+0x12>
	}
	return len;
 8005fae:	687b      	ldr	r3, [r7, #4]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3718      	adds	r7, #24
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <_close>:

int _close(int file)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
	return -1;
 8005fc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005fe0:	605a      	str	r2, [r3, #4]
	return 0;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <_isatty>:

int _isatty(int file)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
	return 1;
 8005ff8:	2301      	movs	r3, #1
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006006:	b480      	push	{r7}
 8006008:	b085      	sub	sp, #20
 800600a:	af00      	add	r7, sp, #0
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	607a      	str	r2, [r7, #4]
	return 0;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006028:	4a14      	ldr	r2, [pc, #80]	@ (800607c <_sbrk+0x5c>)
 800602a:	4b15      	ldr	r3, [pc, #84]	@ (8006080 <_sbrk+0x60>)
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006034:	4b13      	ldr	r3, [pc, #76]	@ (8006084 <_sbrk+0x64>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d102      	bne.n	8006042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800603c:	4b11      	ldr	r3, [pc, #68]	@ (8006084 <_sbrk+0x64>)
 800603e:	4a12      	ldr	r2, [pc, #72]	@ (8006088 <_sbrk+0x68>)
 8006040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006042:	4b10      	ldr	r3, [pc, #64]	@ (8006084 <_sbrk+0x64>)
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4413      	add	r3, r2
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	429a      	cmp	r2, r3
 800604e:	d207      	bcs.n	8006060 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006050:	f00e fa3c 	bl	80144cc <__errno>
 8006054:	4603      	mov	r3, r0
 8006056:	220c      	movs	r2, #12
 8006058:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800605a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800605e:	e009      	b.n	8006074 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006060:	4b08      	ldr	r3, [pc, #32]	@ (8006084 <_sbrk+0x64>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006066:	4b07      	ldr	r3, [pc, #28]	@ (8006084 <_sbrk+0x64>)
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4413      	add	r3, r2
 800606e:	4a05      	ldr	r2, [pc, #20]	@ (8006084 <_sbrk+0x64>)
 8006070:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006072:	68fb      	ldr	r3, [r7, #12]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	20050000 	.word	0x20050000
 8006080:	00000400 	.word	0x00000400
 8006084:	20000f5c 	.word	0x20000f5c
 8006088:	20005370 	.word	0x20005370

0800608c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006090:	4b06      	ldr	r3, [pc, #24]	@ (80060ac <SystemInit+0x20>)
 8006092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006096:	4a05      	ldr	r2, [pc, #20]	@ (80060ac <SystemInit+0x20>)
 8006098:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800609c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80060a0:	bf00      	nop
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	e000ed00 	.word	0xe000ed00

080060b0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80060b4:	4b14      	ldr	r3, [pc, #80]	@ (8006108 <MX_USART1_UART_Init+0x58>)
 80060b6:	4a15      	ldr	r2, [pc, #84]	@ (800610c <MX_USART1_UART_Init+0x5c>)
 80060b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80060ba:	4b13      	ldr	r3, [pc, #76]	@ (8006108 <MX_USART1_UART_Init+0x58>)
 80060bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80060c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80060c2:	4b11      	ldr	r3, [pc, #68]	@ (8006108 <MX_USART1_UART_Init+0x58>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80060c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006108 <MX_USART1_UART_Init+0x58>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80060ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006108 <MX_USART1_UART_Init+0x58>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80060d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006108 <MX_USART1_UART_Init+0x58>)
 80060d6:	220c      	movs	r2, #12
 80060d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060da:	4b0b      	ldr	r3, [pc, #44]	@ (8006108 <MX_USART1_UART_Init+0x58>)
 80060dc:	2200      	movs	r2, #0
 80060de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80060e0:	4b09      	ldr	r3, [pc, #36]	@ (8006108 <MX_USART1_UART_Init+0x58>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80060e6:	4b08      	ldr	r3, [pc, #32]	@ (8006108 <MX_USART1_UART_Init+0x58>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80060ec:	4b06      	ldr	r3, [pc, #24]	@ (8006108 <MX_USART1_UART_Init+0x58>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80060f2:	4805      	ldr	r0, [pc, #20]	@ (8006108 <MX_USART1_UART_Init+0x58>)
 80060f4:	f007 fe92 	bl	800de1c <HAL_UART_Init>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80060fe:	f7fd fa2b 	bl	8003558 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006102:	bf00      	nop
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	20000f60 	.word	0x20000f60
 800610c:	40011000 	.word	0x40011000

08006110 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b0ac      	sub	sp, #176	@ 0xb0
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006118:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800611c:	2200      	movs	r2, #0
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	605a      	str	r2, [r3, #4]
 8006122:	609a      	str	r2, [r3, #8]
 8006124:	60da      	str	r2, [r3, #12]
 8006126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006128:	f107 0318 	add.w	r3, r7, #24
 800612c:	2284      	movs	r2, #132	@ 0x84
 800612e:	2100      	movs	r1, #0
 8006130:	4618      	mov	r0, r3
 8006132:	f00e f926 	bl	8014382 <memset>
  if(uartHandle->Instance==USART1)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a32      	ldr	r2, [pc, #200]	@ (8006204 <HAL_UART_MspInit+0xf4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d15c      	bne.n	80061fa <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006140:	2340      	movs	r3, #64	@ 0x40
 8006142:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006144:	2300      	movs	r3, #0
 8006146:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006148:	f107 0318 	add.w	r3, r7, #24
 800614c:	4618      	mov	r0, r3
 800614e:	f005 fac9 	bl	800b6e4 <HAL_RCCEx_PeriphCLKConfig>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006158:	f7fd f9fe 	bl	8003558 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800615c:	4b2a      	ldr	r3, [pc, #168]	@ (8006208 <HAL_UART_MspInit+0xf8>)
 800615e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006160:	4a29      	ldr	r2, [pc, #164]	@ (8006208 <HAL_UART_MspInit+0xf8>)
 8006162:	f043 0310 	orr.w	r3, r3, #16
 8006166:	6453      	str	r3, [r2, #68]	@ 0x44
 8006168:	4b27      	ldr	r3, [pc, #156]	@ (8006208 <HAL_UART_MspInit+0xf8>)
 800616a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616c:	f003 0310 	and.w	r3, r3, #16
 8006170:	617b      	str	r3, [r7, #20]
 8006172:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006174:	4b24      	ldr	r3, [pc, #144]	@ (8006208 <HAL_UART_MspInit+0xf8>)
 8006176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006178:	4a23      	ldr	r2, [pc, #140]	@ (8006208 <HAL_UART_MspInit+0xf8>)
 800617a:	f043 0302 	orr.w	r3, r3, #2
 800617e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006180:	4b21      	ldr	r3, [pc, #132]	@ (8006208 <HAL_UART_MspInit+0xf8>)
 8006182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	613b      	str	r3, [r7, #16]
 800618a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800618c:	4b1e      	ldr	r3, [pc, #120]	@ (8006208 <HAL_UART_MspInit+0xf8>)
 800618e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006190:	4a1d      	ldr	r2, [pc, #116]	@ (8006208 <HAL_UART_MspInit+0xf8>)
 8006192:	f043 0301 	orr.w	r3, r3, #1
 8006196:	6313      	str	r3, [r2, #48]	@ 0x30
 8006198:	4b1b      	ldr	r3, [pc, #108]	@ (8006208 <HAL_UART_MspInit+0xf8>)
 800619a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	60fb      	str	r3, [r7, #12]
 80061a2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80061a4:	2380      	movs	r3, #128	@ 0x80
 80061a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061aa:	2302      	movs	r3, #2
 80061ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061b0:	2300      	movs	r3, #0
 80061b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061b6:	2300      	movs	r3, #0
 80061b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80061bc:	2307      	movs	r3, #7
 80061be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80061c2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80061c6:	4619      	mov	r1, r3
 80061c8:	4810      	ldr	r0, [pc, #64]	@ (800620c <HAL_UART_MspInit+0xfc>)
 80061ca:	f003 f963 	bl	8009494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80061ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061d6:	2302      	movs	r3, #2
 80061d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061dc:	2300      	movs	r3, #0
 80061de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061e2:	2300      	movs	r3, #0
 80061e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80061e8:	2307      	movs	r3, #7
 80061ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80061ee:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80061f2:	4619      	mov	r1, r3
 80061f4:	4806      	ldr	r0, [pc, #24]	@ (8006210 <HAL_UART_MspInit+0x100>)
 80061f6:	f003 f94d 	bl	8009494 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80061fa:	bf00      	nop
 80061fc:	37b0      	adds	r7, #176	@ 0xb0
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	40011000 	.word	0x40011000
 8006208:	40023800 	.word	0x40023800
 800620c:	40020400 	.word	0x40020400
 8006210:	40020000 	.word	0x40020000

08006214 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b088      	sub	sp, #32
 8006218:	af00      	add	r7, sp, #0
 800621a:	607b      	str	r3, [r7, #4]
 800621c:	4603      	mov	r3, r0
 800621e:	81fb      	strh	r3, [r7, #14]
 8006220:	460b      	mov	r3, r1
 8006222:	81bb      	strh	r3, [r7, #12]
 8006224:	4613      	mov	r3, r2
 8006226:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8006228:	2300      	movs	r3, #0
 800622a:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 800622c:	89bb      	ldrh	r3, [r7, #12]
 800622e:	b2db      	uxtb	r3, r3
 8006230:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8006232:	89bb      	ldrh	r3, [r7, #12]
 8006234:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006238:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 800623a:	2300      	movs	r3, #0
 800623c:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 800623e:	f7fd fdc9 	bl	8003dd4 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8006242:	89fb      	ldrh	r3, [r7, #14]
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2203      	movs	r2, #3
 8006248:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800624c:	4618      	mov	r0, r3
 800624e:	f001 fc35 	bl	8007abc <CODEC_IO_Write>
 8006252:	4603      	mov	r3, r0
 8006254:	461a      	mov	r2, r3
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	4413      	add	r3, r2
 800625a:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 800625c:	89fb      	ldrh	r3, [r7, #14]
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2200      	movs	r2, #0
 8006262:	f640 0117 	movw	r1, #2071	@ 0x817
 8006266:	4618      	mov	r0, r3
 8006268:	f001 fc28 	bl	8007abc <CODEC_IO_Write>
 800626c:	4603      	mov	r3, r0
 800626e:	461a      	mov	r2, r3
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	4413      	add	r3, r2
 8006274:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8006276:	89fb      	ldrh	r3, [r7, #14]
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2200      	movs	r2, #0
 800627c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8006280:	4618      	mov	r0, r3
 8006282:	f001 fc1b 	bl	8007abc <CODEC_IO_Write>
 8006286:	4603      	mov	r3, r0
 8006288:	461a      	mov	r2, r3
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	4413      	add	r3, r2
 800628e:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8006290:	89fb      	ldrh	r3, [r7, #14]
 8006292:	b2db      	uxtb	r3, r3
 8006294:	226c      	movs	r2, #108	@ 0x6c
 8006296:	2139      	movs	r1, #57	@ 0x39
 8006298:	4618      	mov	r0, r3
 800629a:	f001 fc0f 	bl	8007abc <CODEC_IO_Write>
 800629e:	4603      	mov	r3, r0
 80062a0:	461a      	mov	r2, r3
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	4413      	add	r3, r2
 80062a6:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 80062a8:	8afb      	ldrh	r3, [r7, #22]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00c      	beq.n	80062c8 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 80062ae:	89fb      	ldrh	r3, [r7, #14]
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2213      	movs	r2, #19
 80062b4:	2101      	movs	r1, #1
 80062b6:	4618      	mov	r0, r3
 80062b8:	f001 fc00 	bl	8007abc <CODEC_IO_Write>
 80062bc:	4603      	mov	r3, r0
 80062be:	461a      	mov	r2, r3
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	4413      	add	r3, r2
 80062c4:	61fb      	str	r3, [r7, #28]
 80062c6:	e00b      	b.n	80062e0 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 80062c8:	89fb      	ldrh	r3, [r7, #14]
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2203      	movs	r2, #3
 80062ce:	2101      	movs	r1, #1
 80062d0:	4618      	mov	r0, r3
 80062d2:	f001 fbf3 	bl	8007abc <CODEC_IO_Write>
 80062d6:	4603      	mov	r3, r0
 80062d8:	461a      	mov	r2, r3
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	4413      	add	r3, r2
 80062de:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 80062e0:	2032      	movs	r0, #50	@ 0x32
 80062e2:	f7fd fddf 	bl	8003ea4 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 80062e6:	8b3b      	ldrh	r3, [r7, #24]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 815f 	beq.w	80065ac <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 80062ee:	4bae      	ldr	r3, [pc, #696]	@ (80065a8 <wm8994_Init+0x394>)
 80062f0:	2201      	movs	r2, #1
 80062f2:	601a      	str	r2, [r3, #0]

    switch (output_device)
 80062f4:	8b3b      	ldrh	r3, [r7, #24]
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	f000 808c 	beq.w	8006414 <wm8994_Init+0x200>
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	f300 8111 	bgt.w	8006524 <wm8994_Init+0x310>
 8006302:	2b01      	cmp	r3, #1
 8006304:	d002      	beq.n	800630c <wm8994_Init+0xf8>
 8006306:	2b02      	cmp	r3, #2
 8006308:	d042      	beq.n	8006390 <wm8994_Init+0x17c>
 800630a:	e10b      	b.n	8006524 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 800630c:	89fb      	ldrh	r3, [r7, #14]
 800630e:	b2db      	uxtb	r3, r3
 8006310:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8006314:	2105      	movs	r1, #5
 8006316:	4618      	mov	r0, r3
 8006318:	f001 fbd0 	bl	8007abc <CODEC_IO_Write>
 800631c:	4603      	mov	r3, r0
 800631e:	461a      	mov	r2, r3
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	4413      	add	r3, r2
 8006324:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8006326:	89fb      	ldrh	r3, [r7, #14]
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2200      	movs	r2, #0
 800632c:	f240 6101 	movw	r1, #1537	@ 0x601
 8006330:	4618      	mov	r0, r3
 8006332:	f001 fbc3 	bl	8007abc <CODEC_IO_Write>
 8006336:	4603      	mov	r3, r0
 8006338:	461a      	mov	r2, r3
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	4413      	add	r3, r2
 800633e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8006340:	89fb      	ldrh	r3, [r7, #14]
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2200      	movs	r2, #0
 8006346:	f240 6102 	movw	r1, #1538	@ 0x602
 800634a:	4618      	mov	r0, r3
 800634c:	f001 fbb6 	bl	8007abc <CODEC_IO_Write>
 8006350:	4603      	mov	r3, r0
 8006352:	461a      	mov	r2, r3
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	4413      	add	r3, r2
 8006358:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800635a:	89fb      	ldrh	r3, [r7, #14]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2202      	movs	r2, #2
 8006360:	f240 6104 	movw	r1, #1540	@ 0x604
 8006364:	4618      	mov	r0, r3
 8006366:	f001 fba9 	bl	8007abc <CODEC_IO_Write>
 800636a:	4603      	mov	r3, r0
 800636c:	461a      	mov	r2, r3
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	4413      	add	r3, r2
 8006372:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8006374:	89fb      	ldrh	r3, [r7, #14]
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2202      	movs	r2, #2
 800637a:	f240 6105 	movw	r1, #1541	@ 0x605
 800637e:	4618      	mov	r0, r3
 8006380:	f001 fb9c 	bl	8007abc <CODEC_IO_Write>
 8006384:	4603      	mov	r3, r0
 8006386:	461a      	mov	r2, r3
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	4413      	add	r3, r2
 800638c:	61fb      	str	r3, [r7, #28]
      break;
 800638e:	e110      	b.n	80065b2 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8006390:	89fb      	ldrh	r3, [r7, #14]
 8006392:	b2db      	uxtb	r3, r3
 8006394:	f240 3203 	movw	r2, #771	@ 0x303
 8006398:	2105      	movs	r1, #5
 800639a:	4618      	mov	r0, r3
 800639c:	f001 fb8e 	bl	8007abc <CODEC_IO_Write>
 80063a0:	4603      	mov	r3, r0
 80063a2:	461a      	mov	r2, r3
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	4413      	add	r3, r2
 80063a8:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80063aa:	89fb      	ldrh	r3, [r7, #14]
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2201      	movs	r2, #1
 80063b0:	f240 6101 	movw	r1, #1537	@ 0x601
 80063b4:	4618      	mov	r0, r3
 80063b6:	f001 fb81 	bl	8007abc <CODEC_IO_Write>
 80063ba:	4603      	mov	r3, r0
 80063bc:	461a      	mov	r2, r3
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	4413      	add	r3, r2
 80063c2:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80063c4:	89fb      	ldrh	r3, [r7, #14]
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2201      	movs	r2, #1
 80063ca:	f240 6102 	movw	r1, #1538	@ 0x602
 80063ce:	4618      	mov	r0, r3
 80063d0:	f001 fb74 	bl	8007abc <CODEC_IO_Write>
 80063d4:	4603      	mov	r3, r0
 80063d6:	461a      	mov	r2, r3
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	4413      	add	r3, r2
 80063dc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80063de:	89fb      	ldrh	r3, [r7, #14]
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2200      	movs	r2, #0
 80063e4:	f240 6104 	movw	r1, #1540	@ 0x604
 80063e8:	4618      	mov	r0, r3
 80063ea:	f001 fb67 	bl	8007abc <CODEC_IO_Write>
 80063ee:	4603      	mov	r3, r0
 80063f0:	461a      	mov	r2, r3
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	4413      	add	r3, r2
 80063f6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80063f8:	89fb      	ldrh	r3, [r7, #14]
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2200      	movs	r2, #0
 80063fe:	f240 6105 	movw	r1, #1541	@ 0x605
 8006402:	4618      	mov	r0, r3
 8006404:	f001 fb5a 	bl	8007abc <CODEC_IO_Write>
 8006408:	4603      	mov	r3, r0
 800640a:	461a      	mov	r2, r3
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	4413      	add	r3, r2
 8006410:	61fb      	str	r3, [r7, #28]
      break;
 8006412:	e0ce      	b.n	80065b2 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8006414:	8afb      	ldrh	r3, [r7, #22]
 8006416:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800641a:	d141      	bne.n	80064a0 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800641c:	89fb      	ldrh	r3, [r7, #14]
 800641e:	b2db      	uxtb	r3, r3
 8006420:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8006424:	2105      	movs	r1, #5
 8006426:	4618      	mov	r0, r3
 8006428:	f001 fb48 	bl	8007abc <CODEC_IO_Write>
 800642c:	4603      	mov	r3, r0
 800642e:	461a      	mov	r2, r3
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	4413      	add	r3, r2
 8006434:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8006436:	89fb      	ldrh	r3, [r7, #14]
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2203      	movs	r2, #3
 800643c:	f240 6101 	movw	r1, #1537	@ 0x601
 8006440:	4618      	mov	r0, r3
 8006442:	f001 fb3b 	bl	8007abc <CODEC_IO_Write>
 8006446:	4603      	mov	r3, r0
 8006448:	461a      	mov	r2, r3
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	4413      	add	r3, r2
 800644e:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8006450:	89fb      	ldrh	r3, [r7, #14]
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2203      	movs	r2, #3
 8006456:	f240 6102 	movw	r1, #1538	@ 0x602
 800645a:	4618      	mov	r0, r3
 800645c:	f001 fb2e 	bl	8007abc <CODEC_IO_Write>
 8006460:	4603      	mov	r3, r0
 8006462:	461a      	mov	r2, r3
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	4413      	add	r3, r2
 8006468:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 800646a:	89fb      	ldrh	r3, [r7, #14]
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2203      	movs	r2, #3
 8006470:	f240 6104 	movw	r1, #1540	@ 0x604
 8006474:	4618      	mov	r0, r3
 8006476:	f001 fb21 	bl	8007abc <CODEC_IO_Write>
 800647a:	4603      	mov	r3, r0
 800647c:	461a      	mov	r2, r3
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	4413      	add	r3, r2
 8006482:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8006484:	89fb      	ldrh	r3, [r7, #14]
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2203      	movs	r2, #3
 800648a:	f240 6105 	movw	r1, #1541	@ 0x605
 800648e:	4618      	mov	r0, r3
 8006490:	f001 fb14 	bl	8007abc <CODEC_IO_Write>
 8006494:	4603      	mov	r3, r0
 8006496:	461a      	mov	r2, r3
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	4413      	add	r3, r2
 800649c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 800649e:	e088      	b.n	80065b2 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80064a0:	89fb      	ldrh	r3, [r7, #14]
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80064a8:	2105      	movs	r1, #5
 80064aa:	4618      	mov	r0, r3
 80064ac:	f001 fb06 	bl	8007abc <CODEC_IO_Write>
 80064b0:	4603      	mov	r3, r0
 80064b2:	461a      	mov	r2, r3
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	4413      	add	r3, r2
 80064b8:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80064ba:	89fb      	ldrh	r3, [r7, #14]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2201      	movs	r2, #1
 80064c0:	f240 6101 	movw	r1, #1537	@ 0x601
 80064c4:	4618      	mov	r0, r3
 80064c6:	f001 faf9 	bl	8007abc <CODEC_IO_Write>
 80064ca:	4603      	mov	r3, r0
 80064cc:	461a      	mov	r2, r3
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	4413      	add	r3, r2
 80064d2:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80064d4:	89fb      	ldrh	r3, [r7, #14]
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2201      	movs	r2, #1
 80064da:	f240 6102 	movw	r1, #1538	@ 0x602
 80064de:	4618      	mov	r0, r3
 80064e0:	f001 faec 	bl	8007abc <CODEC_IO_Write>
 80064e4:	4603      	mov	r3, r0
 80064e6:	461a      	mov	r2, r3
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	4413      	add	r3, r2
 80064ec:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80064ee:	89fb      	ldrh	r3, [r7, #14]
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2202      	movs	r2, #2
 80064f4:	f240 6104 	movw	r1, #1540	@ 0x604
 80064f8:	4618      	mov	r0, r3
 80064fa:	f001 fadf 	bl	8007abc <CODEC_IO_Write>
 80064fe:	4603      	mov	r3, r0
 8006500:	461a      	mov	r2, r3
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	4413      	add	r3, r2
 8006506:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8006508:	89fb      	ldrh	r3, [r7, #14]
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2202      	movs	r2, #2
 800650e:	f240 6105 	movw	r1, #1541	@ 0x605
 8006512:	4618      	mov	r0, r3
 8006514:	f001 fad2 	bl	8007abc <CODEC_IO_Write>
 8006518:	4603      	mov	r3, r0
 800651a:	461a      	mov	r2, r3
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	4413      	add	r3, r2
 8006520:	61fb      	str	r3, [r7, #28]
      break;
 8006522:	e046      	b.n	80065b2 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8006524:	89fb      	ldrh	r3, [r7, #14]
 8006526:	b2db      	uxtb	r3, r3
 8006528:	f240 3203 	movw	r2, #771	@ 0x303
 800652c:	2105      	movs	r1, #5
 800652e:	4618      	mov	r0, r3
 8006530:	f001 fac4 	bl	8007abc <CODEC_IO_Write>
 8006534:	4603      	mov	r3, r0
 8006536:	461a      	mov	r2, r3
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	4413      	add	r3, r2
 800653c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800653e:	89fb      	ldrh	r3, [r7, #14]
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2201      	movs	r2, #1
 8006544:	f240 6101 	movw	r1, #1537	@ 0x601
 8006548:	4618      	mov	r0, r3
 800654a:	f001 fab7 	bl	8007abc <CODEC_IO_Write>
 800654e:	4603      	mov	r3, r0
 8006550:	461a      	mov	r2, r3
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	4413      	add	r3, r2
 8006556:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8006558:	89fb      	ldrh	r3, [r7, #14]
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2201      	movs	r2, #1
 800655e:	f240 6102 	movw	r1, #1538	@ 0x602
 8006562:	4618      	mov	r0, r3
 8006564:	f001 faaa 	bl	8007abc <CODEC_IO_Write>
 8006568:	4603      	mov	r3, r0
 800656a:	461a      	mov	r2, r3
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	4413      	add	r3, r2
 8006570:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8006572:	89fb      	ldrh	r3, [r7, #14]
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2200      	movs	r2, #0
 8006578:	f240 6104 	movw	r1, #1540	@ 0x604
 800657c:	4618      	mov	r0, r3
 800657e:	f001 fa9d 	bl	8007abc <CODEC_IO_Write>
 8006582:	4603      	mov	r3, r0
 8006584:	461a      	mov	r2, r3
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	4413      	add	r3, r2
 800658a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800658c:	89fb      	ldrh	r3, [r7, #14]
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2200      	movs	r2, #0
 8006592:	f240 6105 	movw	r1, #1541	@ 0x605
 8006596:	4618      	mov	r0, r3
 8006598:	f001 fa90 	bl	8007abc <CODEC_IO_Write>
 800659c:	4603      	mov	r3, r0
 800659e:	461a      	mov	r2, r3
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	4413      	add	r3, r2
 80065a4:	61fb      	str	r3, [r7, #28]
      break;
 80065a6:	e004      	b.n	80065b2 <wm8994_Init+0x39e>
 80065a8:	20000fe8 	.word	0x20000fe8
    }
  }
  else
  {
    outputEnabled = 0;
 80065ac:	4ba5      	ldr	r3, [pc, #660]	@ (8006844 <wm8994_Init+0x630>)
 80065ae:	2200      	movs	r2, #0
 80065b0:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 80065b2:	8afb      	ldrh	r3, [r7, #22]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 81c3 	beq.w	8006940 <wm8994_Init+0x72c>
  {
    inputEnabled = 1;
 80065ba:	4ba3      	ldr	r3, [pc, #652]	@ (8006848 <wm8994_Init+0x634>)
 80065bc:	2201      	movs	r2, #1
 80065be:	601a      	str	r2, [r3, #0]
    switch (input_device)
 80065c0:	8afb      	ldrh	r3, [r7, #22]
 80065c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065c6:	f000 8141 	beq.w	800684c <wm8994_Init+0x638>
 80065ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065ce:	f300 81b3 	bgt.w	8006938 <wm8994_Init+0x724>
 80065d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065d6:	d05a      	beq.n	800668e <wm8994_Init+0x47a>
 80065d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065dc:	f300 81ac 	bgt.w	8006938 <wm8994_Init+0x724>
 80065e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065e4:	f000 80de 	beq.w	80067a4 <wm8994_Init+0x590>
 80065e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065ec:	f040 81a4 	bne.w	8006938 <wm8994_Init+0x724>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80065f0:	89fb      	ldrh	r3, [r7, #14]
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 80065f8:	2104      	movs	r1, #4
 80065fa:	4618      	mov	r0, r3
 80065fc:	f001 fa5e 	bl	8007abc <CODEC_IO_Write>
 8006600:	4603      	mov	r3, r0
 8006602:	461a      	mov	r2, r3
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	4413      	add	r3, r2
 8006608:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800660a:	89fb      	ldrh	r3, [r7, #14]
 800660c:	b2db      	uxtb	r3, r3
 800660e:	22db      	movs	r2, #219	@ 0xdb
 8006610:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8006614:	4618      	mov	r0, r3
 8006616:	f001 fa51 	bl	8007abc <CODEC_IO_Write>
 800661a:	4603      	mov	r3, r0
 800661c:	461a      	mov	r2, r3
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	4413      	add	r3, r2
 8006622:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8006624:	89fb      	ldrh	r3, [r7, #14]
 8006626:	b2db      	uxtb	r3, r3
 8006628:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 800662c:	2102      	movs	r1, #2
 800662e:	4618      	mov	r0, r3
 8006630:	f001 fa44 	bl	8007abc <CODEC_IO_Write>
 8006634:	4603      	mov	r3, r0
 8006636:	461a      	mov	r2, r3
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	4413      	add	r3, r2
 800663c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800663e:	89fb      	ldrh	r3, [r7, #14]
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2202      	movs	r2, #2
 8006644:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8006648:	4618      	mov	r0, r3
 800664a:	f001 fa37 	bl	8007abc <CODEC_IO_Write>
 800664e:	4603      	mov	r3, r0
 8006650:	461a      	mov	r2, r3
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	4413      	add	r3, r2
 8006656:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8006658:	89fb      	ldrh	r3, [r7, #14]
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2202      	movs	r2, #2
 800665e:	f240 6109 	movw	r1, #1545	@ 0x609
 8006662:	4618      	mov	r0, r3
 8006664:	f001 fa2a 	bl	8007abc <CODEC_IO_Write>
 8006668:	4603      	mov	r3, r0
 800666a:	461a      	mov	r2, r3
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	4413      	add	r3, r2
 8006670:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8006672:	89fb      	ldrh	r3, [r7, #14]
 8006674:	b2db      	uxtb	r3, r3
 8006676:	220e      	movs	r2, #14
 8006678:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800667c:	4618      	mov	r0, r3
 800667e:	f001 fa1d 	bl	8007abc <CODEC_IO_Write>
 8006682:	4603      	mov	r3, r0
 8006684:	461a      	mov	r2, r3
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	4413      	add	r3, r2
 800668a:	61fb      	str	r3, [r7, #28]
      break;
 800668c:	e15b      	b.n	8006946 <wm8994_Init+0x732>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 800668e:	89fb      	ldrh	r3, [r7, #14]
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2211      	movs	r2, #17
 8006694:	2128      	movs	r1, #40	@ 0x28
 8006696:	4618      	mov	r0, r3
 8006698:	f001 fa10 	bl	8007abc <CODEC_IO_Write>
 800669c:	4603      	mov	r3, r0
 800669e:	461a      	mov	r2, r3
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	4413      	add	r3, r2
 80066a4:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +0dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 80066a6:	89fb      	ldrh	r3, [r7, #14]
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2220      	movs	r2, #32
 80066ac:	2129      	movs	r1, #41	@ 0x29
 80066ae:	4618      	mov	r0, r3
 80066b0:	f001 fa04 	bl	8007abc <CODEC_IO_Write>
 80066b4:	4603      	mov	r3, r0
 80066b6:	461a      	mov	r2, r3
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	4413      	add	r3, r2
 80066bc:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 80066be:	89fb      	ldrh	r3, [r7, #14]
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2220      	movs	r2, #32
 80066c4:	212a      	movs	r1, #42	@ 0x2a
 80066c6:	4618      	mov	r0, r3
 80066c8:	f001 f9f8 	bl	8007abc <CODEC_IO_Write>
 80066cc:	4603      	mov	r3, r0
 80066ce:	461a      	mov	r2, r3
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	4413      	add	r3, r2
 80066d4:	61fb      	str	r3, [r7, #28]
      counter += CODEC_IO_Write(DeviceAddr, 0x2B, 0x0000);
 80066d6:	89fb      	ldrh	r3, [r7, #14]
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2200      	movs	r2, #0
 80066dc:	212b      	movs	r1, #43	@ 0x2b
 80066de:	4618      	mov	r0, r3
 80066e0:	f001 f9ec 	bl	8007abc <CODEC_IO_Write>
 80066e4:	4603      	mov	r3, r0
 80066e6:	461a      	mov	r2, r3
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	4413      	add	r3, r2
 80066ec:	61fb      	str	r3, [r7, #28]
      counter += CODEC_IO_Write(DeviceAddr, 0x2C, 0x0000);
 80066ee:	89fb      	ldrh	r3, [r7, #14]
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2200      	movs	r2, #0
 80066f4:	212c      	movs	r1, #44	@ 0x2c
 80066f6:	4618      	mov	r0, r3
 80066f8:	f001 f9e0 	bl	8007abc <CODEC_IO_Write>
 80066fc:	4603      	mov	r3, r0
 80066fe:	461a      	mov	r2, r3
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	4413      	add	r3, r2
 8006704:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8006706:	89fb      	ldrh	r3, [r7, #14]
 8006708:	b2db      	uxtb	r3, r3
 800670a:	f240 3203 	movw	r2, #771	@ 0x303
 800670e:	2104      	movs	r1, #4
 8006710:	4618      	mov	r0, r3
 8006712:	f001 f9d3 	bl	8007abc <CODEC_IO_Write>
 8006716:	4603      	mov	r3, r0
 8006718:	461a      	mov	r2, r3
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	4413      	add	r3, r2
 800671e:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8006720:	89fb      	ldrh	r3, [r7, #14]
 8006722:	b2db      	uxtb	r3, r3
 8006724:	22db      	movs	r2, #219	@ 0xdb
 8006726:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800672a:	4618      	mov	r0, r3
 800672c:	f001 f9c6 	bl	8007abc <CODEC_IO_Write>
 8006730:	4603      	mov	r3, r0
 8006732:	461a      	mov	r2, r3
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	4413      	add	r3, r2
 8006738:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800673a:	89fb      	ldrh	r3, [r7, #14]
 800673c:	b2db      	uxtb	r3, r3
 800673e:	f246 3250 	movw	r2, #25424	@ 0x6350
 8006742:	2102      	movs	r1, #2
 8006744:	4618      	mov	r0, r3
 8006746:	f001 f9b9 	bl	8007abc <CODEC_IO_Write>
 800674a:	4603      	mov	r3, r0
 800674c:	461a      	mov	r2, r3
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	4413      	add	r3, r2
 8006752:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8006754:	89fb      	ldrh	r3, [r7, #14]
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2202      	movs	r2, #2
 800675a:	f240 6106 	movw	r1, #1542	@ 0x606
 800675e:	4618      	mov	r0, r3
 8006760:	f001 f9ac 	bl	8007abc <CODEC_IO_Write>
 8006764:	4603      	mov	r3, r0
 8006766:	461a      	mov	r2, r3
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	4413      	add	r3, r2
 800676c:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800676e:	89fb      	ldrh	r3, [r7, #14]
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2202      	movs	r2, #2
 8006774:	f240 6107 	movw	r1, #1543	@ 0x607
 8006778:	4618      	mov	r0, r3
 800677a:	f001 f99f 	bl	8007abc <CODEC_IO_Write>
 800677e:	4603      	mov	r3, r0
 8006780:	461a      	mov	r2, r3
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	4413      	add	r3, r2
 8006786:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8006788:	89fb      	ldrh	r3, [r7, #14]
 800678a:	b2db      	uxtb	r3, r3
 800678c:	220d      	movs	r2, #13
 800678e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8006792:	4618      	mov	r0, r3
 8006794:	f001 f992 	bl	8007abc <CODEC_IO_Write>
 8006798:	4603      	mov	r3, r0
 800679a:	461a      	mov	r2, r3
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	4413      	add	r3, r2
 80067a0:	61fb      	str	r3, [r7, #28]
      break;
 80067a2:	e0d0      	b.n	8006946 <wm8994_Init+0x732>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80067a4:	89fb      	ldrh	r3, [r7, #14]
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 80067ac:	2104      	movs	r1, #4
 80067ae:	4618      	mov	r0, r3
 80067b0:	f001 f984 	bl	8007abc <CODEC_IO_Write>
 80067b4:	4603      	mov	r3, r0
 80067b6:	461a      	mov	r2, r3
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	4413      	add	r3, r2
 80067bc:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80067be:	89fb      	ldrh	r3, [r7, #14]
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	22db      	movs	r2, #219	@ 0xdb
 80067c4:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80067c8:	4618      	mov	r0, r3
 80067ca:	f001 f977 	bl	8007abc <CODEC_IO_Write>
 80067ce:	4603      	mov	r3, r0
 80067d0:	461a      	mov	r2, r3
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	4413      	add	r3, r2
 80067d6:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80067d8:	89fb      	ldrh	r3, [r7, #14]
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	f246 3250 	movw	r2, #25424	@ 0x6350
 80067e0:	2102      	movs	r1, #2
 80067e2:	4618      	mov	r0, r3
 80067e4:	f001 f96a 	bl	8007abc <CODEC_IO_Write>
 80067e8:	4603      	mov	r3, r0
 80067ea:	461a      	mov	r2, r3
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	4413      	add	r3, r2
 80067f0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80067f2:	89fb      	ldrh	r3, [r7, #14]
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2202      	movs	r2, #2
 80067f8:	f240 6106 	movw	r1, #1542	@ 0x606
 80067fc:	4618      	mov	r0, r3
 80067fe:	f001 f95d 	bl	8007abc <CODEC_IO_Write>
 8006802:	4603      	mov	r3, r0
 8006804:	461a      	mov	r2, r3
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	4413      	add	r3, r2
 800680a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800680c:	89fb      	ldrh	r3, [r7, #14]
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2202      	movs	r2, #2
 8006812:	f240 6107 	movw	r1, #1543	@ 0x607
 8006816:	4618      	mov	r0, r3
 8006818:	f001 f950 	bl	8007abc <CODEC_IO_Write>
 800681c:	4603      	mov	r3, r0
 800681e:	461a      	mov	r2, r3
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	4413      	add	r3, r2
 8006824:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8006826:	89fb      	ldrh	r3, [r7, #14]
 8006828:	b2db      	uxtb	r3, r3
 800682a:	220d      	movs	r2, #13
 800682c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8006830:	4618      	mov	r0, r3
 8006832:	f001 f943 	bl	8007abc <CODEC_IO_Write>
 8006836:	4603      	mov	r3, r0
 8006838:	461a      	mov	r2, r3
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	4413      	add	r3, r2
 800683e:	61fb      	str	r3, [r7, #28]
      break; 
 8006840:	e081      	b.n	8006946 <wm8994_Init+0x732>
 8006842:	bf00      	nop
 8006844:	20000fe8 	.word	0x20000fe8
 8006848:	20000fec 	.word	0x20000fec
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 800684c:	89fb      	ldrh	r3, [r7, #14]
 800684e:	b2db      	uxtb	r3, r3
 8006850:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8006854:	2104      	movs	r1, #4
 8006856:	4618      	mov	r0, r3
 8006858:	f001 f930 	bl	8007abc <CODEC_IO_Write>
 800685c:	4603      	mov	r3, r0
 800685e:	461a      	mov	r2, r3
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	4413      	add	r3, r2
 8006864:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8006866:	89fb      	ldrh	r3, [r7, #14]
 8006868:	b2db      	uxtb	r3, r3
 800686a:	22db      	movs	r2, #219	@ 0xdb
 800686c:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8006870:	4618      	mov	r0, r3
 8006872:	f001 f923 	bl	8007abc <CODEC_IO_Write>
 8006876:	4603      	mov	r3, r0
 8006878:	461a      	mov	r2, r3
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	4413      	add	r3, r2
 800687e:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8006880:	89fb      	ldrh	r3, [r7, #14]
 8006882:	b2db      	uxtb	r3, r3
 8006884:	22db      	movs	r2, #219	@ 0xdb
 8006886:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800688a:	4618      	mov	r0, r3
 800688c:	f001 f916 	bl	8007abc <CODEC_IO_Write>
 8006890:	4603      	mov	r3, r0
 8006892:	461a      	mov	r2, r3
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	4413      	add	r3, r2
 8006898:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 800689a:	89fb      	ldrh	r3, [r7, #14]
 800689c:	b2db      	uxtb	r3, r3
 800689e:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 80068a2:	2102      	movs	r1, #2
 80068a4:	4618      	mov	r0, r3
 80068a6:	f001 f909 	bl	8007abc <CODEC_IO_Write>
 80068aa:	4603      	mov	r3, r0
 80068ac:	461a      	mov	r2, r3
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	4413      	add	r3, r2
 80068b2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80068b4:	89fb      	ldrh	r3, [r7, #14]
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2202      	movs	r2, #2
 80068ba:	f240 6106 	movw	r1, #1542	@ 0x606
 80068be:	4618      	mov	r0, r3
 80068c0:	f001 f8fc 	bl	8007abc <CODEC_IO_Write>
 80068c4:	4603      	mov	r3, r0
 80068c6:	461a      	mov	r2, r3
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	4413      	add	r3, r2
 80068cc:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80068ce:	89fb      	ldrh	r3, [r7, #14]
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2202      	movs	r2, #2
 80068d4:	f240 6107 	movw	r1, #1543	@ 0x607
 80068d8:	4618      	mov	r0, r3
 80068da:	f001 f8ef 	bl	8007abc <CODEC_IO_Write>
 80068de:	4603      	mov	r3, r0
 80068e0:	461a      	mov	r2, r3
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	4413      	add	r3, r2
 80068e6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80068e8:	89fb      	ldrh	r3, [r7, #14]
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2202      	movs	r2, #2
 80068ee:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80068f2:	4618      	mov	r0, r3
 80068f4:	f001 f8e2 	bl	8007abc <CODEC_IO_Write>
 80068f8:	4603      	mov	r3, r0
 80068fa:	461a      	mov	r2, r3
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	4413      	add	r3, r2
 8006900:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8006902:	89fb      	ldrh	r3, [r7, #14]
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2202      	movs	r2, #2
 8006908:	f240 6109 	movw	r1, #1545	@ 0x609
 800690c:	4618      	mov	r0, r3
 800690e:	f001 f8d5 	bl	8007abc <CODEC_IO_Write>
 8006912:	4603      	mov	r3, r0
 8006914:	461a      	mov	r2, r3
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	4413      	add	r3, r2
 800691a:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800691c:	89fb      	ldrh	r3, [r7, #14]
 800691e:	b2db      	uxtb	r3, r3
 8006920:	220d      	movs	r2, #13
 8006922:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8006926:	4618      	mov	r0, r3
 8006928:	f001 f8c8 	bl	8007abc <CODEC_IO_Write>
 800692c:	4603      	mov	r3, r0
 800692e:	461a      	mov	r2, r3
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	4413      	add	r3, r2
 8006934:	61fb      	str	r3, [r7, #28]
      break;    
 8006936:	e006      	b.n	8006946 <wm8994_Init+0x732>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	3301      	adds	r3, #1
 800693c:	61fb      	str	r3, [r7, #28]
      break;
 800693e:	e002      	b.n	8006946 <wm8994_Init+0x732>
    }
  }
  else
  {
    inputEnabled = 0;
 8006940:	4ba4      	ldr	r3, [pc, #656]	@ (8006bd4 <wm8994_Init+0x9c0>)
 8006942:	2200      	movs	r2, #0
 8006944:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4aa3      	ldr	r2, [pc, #652]	@ (8006bd8 <wm8994_Init+0x9c4>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d079      	beq.n	8006a42 <wm8994_Init+0x82e>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4aa1      	ldr	r2, [pc, #644]	@ (8006bd8 <wm8994_Init+0x9c4>)
 8006952:	4293      	cmp	r3, r2
 8006954:	f200 80ad 	bhi.w	8006ab2 <wm8994_Init+0x89e>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800695e:	4293      	cmp	r3, r2
 8006960:	d061      	beq.n	8006a26 <wm8994_Init+0x812>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8006968:	4293      	cmp	r3, r2
 800696a:	f200 80a2 	bhi.w	8006ab2 <wm8994_Init+0x89e>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8006974:	4293      	cmp	r3, r2
 8006976:	f000 808e 	beq.w	8006a96 <wm8994_Init+0x882>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8006980:	4293      	cmp	r3, r2
 8006982:	f200 8096 	bhi.w	8006ab2 <wm8994_Init+0x89e>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800698c:	d03d      	beq.n	8006a0a <wm8994_Init+0x7f6>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8006994:	f200 808d 	bhi.w	8006ab2 <wm8994_Init+0x89e>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f245 6222 	movw	r2, #22050	@ 0x5622
 800699e:	4293      	cmp	r3, r2
 80069a0:	d06b      	beq.n	8006a7a <wm8994_Init+0x866>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f245 6222 	movw	r2, #22050	@ 0x5622
 80069a8:	4293      	cmp	r3, r2
 80069aa:	f200 8082 	bhi.w	8006ab2 <wm8994_Init+0x89e>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80069b4:	d01b      	beq.n	80069ee <wm8994_Init+0x7da>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80069bc:	d879      	bhi.n	8006ab2 <wm8994_Init+0x89e>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80069c4:	d005      	beq.n	80069d2 <wm8994_Init+0x7be>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d046      	beq.n	8006a5e <wm8994_Init+0x84a>
 80069d0:	e06f      	b.n	8006ab2 <wm8994_Init+0x89e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80069d2:	89fb      	ldrh	r3, [r7, #14]
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2203      	movs	r2, #3
 80069d8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80069dc:	4618      	mov	r0, r3
 80069de:	f001 f86d 	bl	8007abc <CODEC_IO_Write>
 80069e2:	4603      	mov	r3, r0
 80069e4:	461a      	mov	r2, r3
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	4413      	add	r3, r2
 80069ea:	61fb      	str	r3, [r7, #28]
    break;
 80069ec:	e06f      	b.n	8006ace <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80069ee:	89fb      	ldrh	r3, [r7, #14]
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2233      	movs	r2, #51	@ 0x33
 80069f4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80069f8:	4618      	mov	r0, r3
 80069fa:	f001 f85f 	bl	8007abc <CODEC_IO_Write>
 80069fe:	4603      	mov	r3, r0
 8006a00:	461a      	mov	r2, r3
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	4413      	add	r3, r2
 8006a06:	61fb      	str	r3, [r7, #28]
    break;
 8006a08:	e061      	b.n	8006ace <wm8994_Init+0x8ba>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8006a0a:	89fb      	ldrh	r3, [r7, #14]
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2263      	movs	r2, #99	@ 0x63
 8006a10:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8006a14:	4618      	mov	r0, r3
 8006a16:	f001 f851 	bl	8007abc <CODEC_IO_Write>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	4413      	add	r3, r2
 8006a22:	61fb      	str	r3, [r7, #28]
    break;
 8006a24:	e053      	b.n	8006ace <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8006a26:	89fb      	ldrh	r3, [r7, #14]
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2283      	movs	r2, #131	@ 0x83
 8006a2c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8006a30:	4618      	mov	r0, r3
 8006a32:	f001 f843 	bl	8007abc <CODEC_IO_Write>
 8006a36:	4603      	mov	r3, r0
 8006a38:	461a      	mov	r2, r3
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	61fb      	str	r3, [r7, #28]
    break;
 8006a40:	e045      	b.n	8006ace <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8006a42:	89fb      	ldrh	r3, [r7, #14]
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	22a3      	movs	r2, #163	@ 0xa3
 8006a48:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f001 f835 	bl	8007abc <CODEC_IO_Write>
 8006a52:	4603      	mov	r3, r0
 8006a54:	461a      	mov	r2, r3
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	4413      	add	r3, r2
 8006a5a:	61fb      	str	r3, [r7, #28]
    break;
 8006a5c:	e037      	b.n	8006ace <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8006a5e:	89fb      	ldrh	r3, [r7, #14]
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2213      	movs	r2, #19
 8006a64:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f001 f827 	bl	8007abc <CODEC_IO_Write>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	461a      	mov	r2, r3
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	4413      	add	r3, r2
 8006a76:	61fb      	str	r3, [r7, #28]
    break;
 8006a78:	e029      	b.n	8006ace <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8006a7a:	89fb      	ldrh	r3, [r7, #14]
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2243      	movs	r2, #67	@ 0x43
 8006a80:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8006a84:	4618      	mov	r0, r3
 8006a86:	f001 f819 	bl	8007abc <CODEC_IO_Write>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	4413      	add	r3, r2
 8006a92:	61fb      	str	r3, [r7, #28]
    break;
 8006a94:	e01b      	b.n	8006ace <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8006a96:	89fb      	ldrh	r3, [r7, #14]
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2273      	movs	r2, #115	@ 0x73
 8006a9c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f001 f80b 	bl	8007abc <CODEC_IO_Write>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	4413      	add	r3, r2
 8006aae:	61fb      	str	r3, [r7, #28]
    break; 
 8006ab0:	e00d      	b.n	8006ace <wm8994_Init+0x8ba>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8006ab2:	89fb      	ldrh	r3, [r7, #14]
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2283      	movs	r2, #131	@ 0x83
 8006ab8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8006abc:	4618      	mov	r0, r3
 8006abe:	f000 fffd 	bl	8007abc <CODEC_IO_Write>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	4413      	add	r3, r2
 8006aca:	61fb      	str	r3, [r7, #28]
    break; 
 8006acc:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8006ace:	8afb      	ldrh	r3, [r7, #22]
 8006ad0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ad4:	d10e      	bne.n	8006af4 <wm8994_Init+0x8e0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8006ad6:	89fb      	ldrh	r3, [r7, #14]
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	f244 0218 	movw	r2, #16408	@ 0x4018
 8006ade:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 ffea 	bl	8007abc <CODEC_IO_Write>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	461a      	mov	r2, r3
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	4413      	add	r3, r2
 8006af0:	61fb      	str	r3, [r7, #28]
 8006af2:	e00d      	b.n	8006b10 <wm8994_Init+0x8fc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8006af4:	89fb      	ldrh	r3, [r7, #14]
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	f244 0210 	movw	r2, #16400	@ 0x4010
 8006afc:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 ffdb 	bl	8007abc <CODEC_IO_Write>
 8006b06:	4603      	mov	r3, r0
 8006b08:	461a      	mov	r2, r3
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8006b10:	89fb      	ldrh	r3, [r7, #14]
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2200      	movs	r2, #0
 8006b16:	f240 3102 	movw	r1, #770	@ 0x302
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 ffce 	bl	8007abc <CODEC_IO_Write>
 8006b20:	4603      	mov	r3, r0
 8006b22:	461a      	mov	r2, r3
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	4413      	add	r3, r2
 8006b28:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8006b2a:	89fb      	ldrh	r3, [r7, #14]
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	220a      	movs	r2, #10
 8006b30:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 ffc1 	bl	8007abc <CODEC_IO_Write>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	4413      	add	r3, r2
 8006b42:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8006b44:	89fb      	ldrh	r3, [r7, #14]
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 ffb4 	bl	8007abc <CODEC_IO_Write>
 8006b54:	4603      	mov	r3, r0
 8006b56:	461a      	mov	r2, r3
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8006b5e:	8b3b      	ldrh	r3, [r7, #24]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 817b 	beq.w	8006e5c <wm8994_Init+0xc48>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8006b66:	8b3b      	ldrh	r3, [r7, #24]
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d157      	bne.n	8006c1c <wm8994_Init+0xa08>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8006b6c:	89fb      	ldrh	r3, [r7, #14]
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b74:	212d      	movs	r1, #45	@ 0x2d
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 ffa0 	bl	8007abc <CODEC_IO_Write>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	461a      	mov	r2, r3
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	4413      	add	r3, r2
 8006b84:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8006b86:	89fb      	ldrh	r3, [r7, #14]
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b8e:	212e      	movs	r1, #46	@ 0x2e
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 ff93 	bl	8007abc <CODEC_IO_Write>
 8006b96:	4603      	mov	r3, r0
 8006b98:	461a      	mov	r2, r3
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8006ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8006bdc <wm8994_Init+0x9c8>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d01b      	beq.n	8006be0 <wm8994_Init+0x9cc>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8006ba8:	89fb      	ldrh	r3, [r7, #14]
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 8006bb0:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 ff81 	bl	8007abc <CODEC_IO_Write>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8006bc4:	4b05      	ldr	r3, [pc, #20]	@ (8006bdc <wm8994_Init+0x9c8>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8006bca:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8006bce:	f7fd f969 	bl	8003ea4 <AUDIO_IO_Delay>
 8006bd2:	e016      	b.n	8006c02 <wm8994_Init+0x9ee>
 8006bd4:	20000fec 	.word	0x20000fec
 8006bd8:	00017700 	.word	0x00017700
 8006bdc:	20000088 	.word	0x20000088
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8006be0:	89fb      	ldrh	r3, [r7, #14]
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	f248 1208 	movw	r2, #33032	@ 0x8108
 8006be8:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 ff65 	bl	8007abc <CODEC_IO_Write>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8006bfc:	2032      	movs	r0, #50	@ 0x32
 8006bfe:	f7fd f951 	bl	8003ea4 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8006c02:	89fb      	ldrh	r3, [r7, #14]
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2200      	movs	r2, #0
 8006c08:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 ff55 	bl	8007abc <CODEC_IO_Write>
 8006c12:	4603      	mov	r3, r0
 8006c14:	461a      	mov	r2, r3
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	4413      	add	r3, r2
 8006c1a:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8006c1c:	89fb      	ldrh	r3, [r7, #14]
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8006c24:	2103      	movs	r1, #3
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 ff48 	bl	8007abc <CODEC_IO_Write>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	461a      	mov	r2, r3
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	4413      	add	r3, r2
 8006c34:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8006c36:	89fb      	ldrh	r3, [r7, #14]
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	2122      	movs	r1, #34	@ 0x22
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 ff3c 	bl	8007abc <CODEC_IO_Write>
 8006c44:	4603      	mov	r3, r0
 8006c46:	461a      	mov	r2, r3
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8006c4e:	89fb      	ldrh	r3, [r7, #14]
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2200      	movs	r2, #0
 8006c54:	2123      	movs	r1, #35	@ 0x23
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 ff30 	bl	8007abc <CODEC_IO_Write>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	461a      	mov	r2, r3
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	4413      	add	r3, r2
 8006c64:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8006c66:	89fb      	ldrh	r3, [r7, #14]
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8006c6e:	2136      	movs	r1, #54	@ 0x36
 8006c70:	4618      	mov	r0, r3
 8006c72:	f000 ff23 	bl	8007abc <CODEC_IO_Write>
 8006c76:	4603      	mov	r3, r0
 8006c78:	461a      	mov	r2, r3
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8006c80:	89fb      	ldrh	r3, [r7, #14]
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	f243 0203 	movw	r2, #12291	@ 0x3003
 8006c88:	2101      	movs	r1, #1
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 ff16 	bl	8007abc <CODEC_IO_Write>
 8006c90:	4603      	mov	r3, r0
 8006c92:	461a      	mov	r2, r3
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	4413      	add	r3, r2
 8006c98:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8006c9a:	8afb      	ldrh	r3, [r7, #22]
 8006c9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ca0:	d10d      	bne.n	8006cbe <wm8994_Init+0xaaa>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8006ca2:	89fb      	ldrh	r3, [r7, #14]
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	f240 2205 	movw	r2, #517	@ 0x205
 8006caa:	2151      	movs	r1, #81	@ 0x51
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 ff05 	bl	8007abc <CODEC_IO_Write>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	4413      	add	r3, r2
 8006cba:	61fb      	str	r3, [r7, #28]
 8006cbc:	e00b      	b.n	8006cd6 <wm8994_Init+0xac2>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8006cbe:	89fb      	ldrh	r3, [r7, #14]
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2205      	movs	r2, #5
 8006cc4:	2151      	movs	r1, #81	@ 0x51
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 fef8 	bl	8007abc <CODEC_IO_Write>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	461a      	mov	r2, r3
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8006cd6:	8b7b      	ldrh	r3, [r7, #26]
 8006cd8:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 8006cdc:	f043 0303 	orr.w	r3, r3, #3
 8006ce0:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8006ce2:	89fb      	ldrh	r3, [r7, #14]
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	8b7a      	ldrh	r2, [r7, #26]
 8006ce8:	2101      	movs	r1, #1
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 fee6 	bl	8007abc <CODEC_IO_Write>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8006cfa:	89fb      	ldrh	r3, [r7, #14]
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2222      	movs	r2, #34	@ 0x22
 8006d00:	2160      	movs	r1, #96	@ 0x60
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 feda 	bl	8007abc <CODEC_IO_Write>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	4413      	add	r3, r2
 8006d10:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8006d12:	89fb      	ldrh	r3, [r7, #14]
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8006d1a:	214c      	movs	r1, #76	@ 0x4c
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f000 fecd 	bl	8007abc <CODEC_IO_Write>
 8006d22:	4603      	mov	r3, r0
 8006d24:	461a      	mov	r2, r3
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	4413      	add	r3, r2
 8006d2a:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8006d2c:	200f      	movs	r0, #15
 8006d2e:	f7fd f8b9 	bl	8003ea4 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8006d32:	89fb      	ldrh	r3, [r7, #14]
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2201      	movs	r2, #1
 8006d38:	212d      	movs	r1, #45	@ 0x2d
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 febe 	bl	8007abc <CODEC_IO_Write>
 8006d40:	4603      	mov	r3, r0
 8006d42:	461a      	mov	r2, r3
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	4413      	add	r3, r2
 8006d48:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8006d4a:	89fb      	ldrh	r3, [r7, #14]
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2201      	movs	r2, #1
 8006d50:	212e      	movs	r1, #46	@ 0x2e
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 feb2 	bl	8007abc <CODEC_IO_Write>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	4413      	add	r3, r2
 8006d60:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8006d62:	89fb      	ldrh	r3, [r7, #14]
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8006d6a:	2103      	movs	r1, #3
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 fea5 	bl	8007abc <CODEC_IO_Write>
 8006d72:	4603      	mov	r3, r0
 8006d74:	461a      	mov	r2, r3
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	4413      	add	r3, r2
 8006d7a:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8006d7c:	89fb      	ldrh	r3, [r7, #14]
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2233      	movs	r2, #51	@ 0x33
 8006d82:	2154      	movs	r1, #84	@ 0x54
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 fe99 	bl	8007abc <CODEC_IO_Write>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	4413      	add	r3, r2
 8006d92:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8006d94:	f240 1001 	movw	r0, #257	@ 0x101
 8006d98:	f7fd f884 	bl	8003ea4 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8006d9c:	89fb      	ldrh	r3, [r7, #14]
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	22ee      	movs	r2, #238	@ 0xee
 8006da2:	2160      	movs	r1, #96	@ 0x60
 8006da4:	4618      	mov	r0, r3
 8006da6:	f000 fe89 	bl	8007abc <CODEC_IO_Write>
 8006daa:	4603      	mov	r3, r0
 8006dac:	461a      	mov	r2, r3
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	4413      	add	r3, r2
 8006db2:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8006db4:	89fb      	ldrh	r3, [r7, #14]
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	22c0      	movs	r2, #192	@ 0xc0
 8006dba:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fe7c 	bl	8007abc <CODEC_IO_Write>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	4413      	add	r3, r2
 8006dcc:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8006dce:	89fb      	ldrh	r3, [r7, #14]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	22c0      	movs	r2, #192	@ 0xc0
 8006dd4:	f240 6111 	movw	r1, #1553	@ 0x611
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 fe6f 	bl	8007abc <CODEC_IO_Write>
 8006dde:	4603      	mov	r3, r0
 8006de0:	461a      	mov	r2, r3
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	4413      	add	r3, r2
 8006de6:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8006de8:	89fb      	ldrh	r3, [r7, #14]
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2210      	movs	r2, #16
 8006dee:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fe62 	bl	8007abc <CODEC_IO_Write>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	4413      	add	r3, r2
 8006e00:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8006e02:	89fb      	ldrh	r3, [r7, #14]
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	22c0      	movs	r2, #192	@ 0xc0
 8006e08:	f240 6112 	movw	r1, #1554	@ 0x612
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 fe55 	bl	8007abc <CODEC_IO_Write>
 8006e12:	4603      	mov	r3, r0
 8006e14:	461a      	mov	r2, r3
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	4413      	add	r3, r2
 8006e1a:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8006e1c:	89fb      	ldrh	r3, [r7, #14]
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	22c0      	movs	r2, #192	@ 0xc0
 8006e22:	f240 6113 	movw	r1, #1555	@ 0x613
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 fe48 	bl	8007abc <CODEC_IO_Write>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	461a      	mov	r2, r3
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	4413      	add	r3, r2
 8006e34:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8006e36:	89fb      	ldrh	r3, [r7, #14]
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2210      	movs	r2, #16
 8006e3c:	f240 4122 	movw	r1, #1058	@ 0x422
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 fe3b 	bl	8007abc <CODEC_IO_Write>
 8006e46:	4603      	mov	r3, r0
 8006e48:	461a      	mov	r2, r3
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8006e50:	7afa      	ldrb	r2, [r7, #11]
 8006e52:	89fb      	ldrh	r3, [r7, #14]
 8006e54:	4611      	mov	r1, r2
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 f984 	bl	8007164 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8006e5c:	8afb      	ldrh	r3, [r7, #22]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f000 80a6 	beq.w	8006fb0 <wm8994_Init+0xd9c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8006e64:	8afb      	ldrh	r3, [r7, #22]
 8006e66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e6a:	d003      	beq.n	8006e74 <wm8994_Init+0xc60>
 8006e6c:	8afb      	ldrh	r3, [r7, #22]
 8006e6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e72:	d12b      	bne.n	8006ecc <wm8994_Init+0xcb8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8006e74:	8b7b      	ldrh	r3, [r7, #26]
 8006e76:	f043 0313 	orr.w	r3, r3, #19
 8006e7a:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8006e7c:	89fb      	ldrh	r3, [r7, #14]
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	8b7a      	ldrh	r2, [r7, #26]
 8006e82:	2101      	movs	r1, #1
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 fe19 	bl	8007abc <CODEC_IO_Write>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	4413      	add	r3, r2
 8006e92:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8006e94:	89fb      	ldrh	r3, [r7, #14]
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2202      	movs	r2, #2
 8006e9a:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 fe0c 	bl	8007abc <CODEC_IO_Write>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	4413      	add	r3, r2
 8006eac:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8006eae:	89fb      	ldrh	r3, [r7, #14]
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8006eb6:	f240 4111 	movw	r1, #1041	@ 0x411
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 fdfe 	bl	8007abc <CODEC_IO_Write>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	61fb      	str	r3, [r7, #28]
 8006eca:	e06b      	b.n	8006fa4 <wm8994_Init+0xd90>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8006ecc:	8afb      	ldrh	r3, [r7, #22]
 8006ece:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ed2:	d139      	bne.n	8006f48 <wm8994_Init+0xd34>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8006ed4:	8b7b      	ldrh	r3, [r7, #26]
 8006ed6:	f043 0313 	orr.w	r3, r3, #19
 8006eda:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8006edc:	89fb      	ldrh	r3, [r7, #14]
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	8b7a      	ldrh	r2, [r7, #26]
 8006ee2:	2101      	movs	r1, #1
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f000 fde9 	bl	8007abc <CODEC_IO_Write>
 8006eea:	4603      	mov	r3, r0
 8006eec:	461a      	mov	r2, r3
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8006ef4:	89fb      	ldrh	r3, [r7, #14]
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2202      	movs	r2, #2
 8006efa:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fddc 	bl	8007abc <CODEC_IO_Write>
 8006f04:	4603      	mov	r3, r0
 8006f06:	461a      	mov	r2, r3
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8006f0e:	89fb      	ldrh	r3, [r7, #14]
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8006f16:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 fdce 	bl	8007abc <CODEC_IO_Write>
 8006f20:	4603      	mov	r3, r0
 8006f22:	461a      	mov	r2, r3
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	4413      	add	r3, r2
 8006f28:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8006f2a:	89fb      	ldrh	r3, [r7, #14]
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8006f32:	f240 4111 	movw	r1, #1041	@ 0x411
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 fdc0 	bl	8007abc <CODEC_IO_Write>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	461a      	mov	r2, r3
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	4413      	add	r3, r2
 8006f44:	61fb      	str	r3, [r7, #28]
 8006f46:	e02d      	b.n	8006fa4 <wm8994_Init+0xd90>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8006f48:	8afb      	ldrh	r3, [r7, #22]
 8006f4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f4e:	d003      	beq.n	8006f58 <wm8994_Init+0xd44>
 8006f50:	8afb      	ldrh	r3, [r7, #22]
 8006f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f56:	d125      	bne.n	8006fa4 <wm8994_Init+0xd90>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x008B);
 8006f58:	89fb      	ldrh	r3, [r7, #14]
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	228b      	movs	r2, #139	@ 0x8b
 8006f5e:	2118      	movs	r1, #24
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 fdab 	bl	8007abc <CODEC_IO_Write>
 8006f66:	4603      	mov	r3, r0
 8006f68:	461a      	mov	r2, r3
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x008B);
 8006f70:	89fb      	ldrh	r3, [r7, #14]
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	228b      	movs	r2, #139	@ 0x8b
 8006f76:	211a      	movs	r1, #26
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 fd9f 	bl	8007abc <CODEC_IO_Write>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	461a      	mov	r2, r3
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	4413      	add	r3, r2
 8006f86:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8006f88:	89fb      	ldrh	r3, [r7, #14]
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8006f90:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8006f94:	4618      	mov	r0, r3
 8006f96:	f000 fd91 	bl	8007abc <CODEC_IO_Write>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8006fa4:	7afa      	ldrb	r2, [r7, #11]
 8006fa6:	89fb      	ldrh	r3, [r7, #14]
 8006fa8:	4611      	mov	r1, r2
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 f8da 	bl	8007164 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8006fb0:	69fb      	ldr	r3, [r7, #28]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3720      	adds	r7, #32
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop

08006fbc <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8006fc0:	f7fc ff12 	bl	8003de8 <AUDIO_IO_DeInit>
}
 8006fc4:	bf00      	nop
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	4603      	mov	r3, r0
 8006fd0:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8006fd2:	f7fc feff 	bl	8003dd4 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8006fd6:	88fb      	ldrh	r3, [r7, #6]
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2100      	movs	r1, #0
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7fc ff35 	bl	8003e4c <AUDIO_IO_Read>
 8006fe2:	4603      	mov	r3, r0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	6039      	str	r1, [r7, #0]
 8006ff6:	80fb      	strh	r3, [r7, #6]
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8007000:	88fb      	ldrh	r3, [r7, #6]
 8007002:	2100      	movs	r1, #0
 8007004:	4618      	mov	r0, r3
 8007006:	f000 faf3 	bl	80075f0 <wm8994_SetMute>
 800700a:	4602      	mov	r2, r0
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	4413      	add	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8007012:	68fb      	ldr	r3, [r7, #12]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	4603      	mov	r3, r0
 8007024:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8007026:	2300      	movs	r3, #0
 8007028:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800702a:	88fb      	ldrh	r3, [r7, #6]
 800702c:	2101      	movs	r1, #1
 800702e:	4618      	mov	r0, r3
 8007030:	f000 fade 	bl	80075f0 <wm8994_SetMute>
 8007034:	4602      	mov	r2, r0
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4413      	add	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 800703c:	88fb      	ldrh	r3, [r7, #6]
 800703e:	b2db      	uxtb	r3, r3
 8007040:	2201      	movs	r2, #1
 8007042:	2102      	movs	r1, #2
 8007044:	4618      	mov	r0, r3
 8007046:	f000 fd39 	bl	8007abc <CODEC_IO_Write>
 800704a:	4603      	mov	r3, r0
 800704c:	461a      	mov	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	4413      	add	r3, r2
 8007052:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8007054:	68fb      	ldr	r3, [r7, #12]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b084      	sub	sp, #16
 8007062:	af00      	add	r7, sp, #0
 8007064:	4603      	mov	r3, r0
 8007066:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8007068:	2300      	movs	r3, #0
 800706a:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800706c:	88fb      	ldrh	r3, [r7, #6]
 800706e:	2100      	movs	r1, #0
 8007070:	4618      	mov	r0, r3
 8007072:	f000 fabd 	bl	80075f0 <wm8994_SetMute>
 8007076:	4602      	mov	r2, r0
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	4413      	add	r3, r2
 800707c:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800707e:	68fb      	ldr	r3, [r7, #12]
}
 8007080:	4618      	mov	r0, r3
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	4603      	mov	r3, r0
 8007090:	6039      	str	r1, [r7, #0]
 8007092:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8007094:	2300      	movs	r3, #0
 8007096:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8007098:	4b31      	ldr	r3, [pc, #196]	@ (8007160 <wm8994_Stop+0xd8>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d05a      	beq.n	8007156 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80070a0:	88fb      	ldrh	r3, [r7, #6]
 80070a2:	2101      	movs	r1, #1
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 faa3 	bl	80075f0 <wm8994_SetMute>
 80070aa:	4602      	mov	r2, r0
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4413      	add	r3, r2
 80070b0:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d04e      	beq.n	8007156 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80070b8:	88fb      	ldrh	r3, [r7, #6]
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070c0:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80070c4:	4618      	mov	r0, r3
 80070c6:	f000 fcf9 	bl	8007abc <CODEC_IO_Write>
 80070ca:	4603      	mov	r3, r0
 80070cc:	461a      	mov	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	4413      	add	r3, r2
 80070d2:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80070d4:	88fb      	ldrh	r3, [r7, #6]
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070dc:	f240 4122 	movw	r1, #1058	@ 0x422
 80070e0:	4618      	mov	r0, r3
 80070e2:	f000 fceb 	bl	8007abc <CODEC_IO_Write>
 80070e6:	4603      	mov	r3, r0
 80070e8:	461a      	mov	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	4413      	add	r3, r2
 80070ee:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80070f0:	88fb      	ldrh	r3, [r7, #6]
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2200      	movs	r2, #0
 80070f6:	212d      	movs	r1, #45	@ 0x2d
 80070f8:	4618      	mov	r0, r3
 80070fa:	f000 fcdf 	bl	8007abc <CODEC_IO_Write>
 80070fe:	4603      	mov	r3, r0
 8007100:	461a      	mov	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	4413      	add	r3, r2
 8007106:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8007108:	88fb      	ldrh	r3, [r7, #6]
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2200      	movs	r2, #0
 800710e:	212e      	movs	r1, #46	@ 0x2e
 8007110:	4618      	mov	r0, r3
 8007112:	f000 fcd3 	bl	8007abc <CODEC_IO_Write>
 8007116:	4603      	mov	r3, r0
 8007118:	461a      	mov	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	4413      	add	r3, r2
 800711e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8007120:	88fb      	ldrh	r3, [r7, #6]
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2200      	movs	r2, #0
 8007126:	2105      	movs	r1, #5
 8007128:	4618      	mov	r0, r3
 800712a:	f000 fcc7 	bl	8007abc <CODEC_IO_Write>
 800712e:	4603      	mov	r3, r0
 8007130:	461a      	mov	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	4413      	add	r3, r2
 8007136:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8007138:	88fb      	ldrh	r3, [r7, #6]
 800713a:	b2db      	uxtb	r3, r3
 800713c:	2200      	movs	r2, #0
 800713e:	2100      	movs	r1, #0
 8007140:	4618      	mov	r0, r3
 8007142:	f000 fcbb 	bl	8007abc <CODEC_IO_Write>
 8007146:	4603      	mov	r3, r0
 8007148:	461a      	mov	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	4413      	add	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8007150:	4b03      	ldr	r3, [pc, #12]	@ (8007160 <wm8994_Stop+0xd8>)
 8007152:	2200      	movs	r2, #0
 8007154:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8007156:	68fb      	ldr	r3, [r7, #12]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	20000fe8 	.word	0x20000fe8

08007164 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	4603      	mov	r3, r0
 800716c:	460a      	mov	r2, r1
 800716e:	80fb      	strh	r3, [r7, #6]
 8007170:	4613      	mov	r3, r2
 8007172:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8007174:	2300      	movs	r3, #0
 8007176:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8007178:	797b      	ldrb	r3, [r7, #5]
 800717a:	2b64      	cmp	r3, #100	@ 0x64
 800717c:	d80b      	bhi.n	8007196 <wm8994_SetVolume+0x32>
 800717e:	797a      	ldrb	r2, [r7, #5]
 8007180:	4613      	mov	r3, r2
 8007182:	019b      	lsls	r3, r3, #6
 8007184:	1a9b      	subs	r3, r3, r2
 8007186:	4a86      	ldr	r2, [pc, #536]	@ (80073a0 <wm8994_SetVolume+0x23c>)
 8007188:	fb82 1203 	smull	r1, r2, r2, r3
 800718c:	1152      	asrs	r2, r2, #5
 800718e:	17db      	asrs	r3, r3, #31
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	b2db      	uxtb	r3, r3
 8007194:	e000      	b.n	8007198 <wm8994_SetVolume+0x34>
 8007196:	2364      	movs	r3, #100	@ 0x64
 8007198:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 800719a:	4b82      	ldr	r3, [pc, #520]	@ (80073a4 <wm8994_SetVolume+0x240>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f000 809b 	beq.w	80072da <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 80071a4:	7afb      	ldrb	r3, [r7, #11]
 80071a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80071a8:	d93d      	bls.n	8007226 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80071aa:	88fb      	ldrh	r3, [r7, #6]
 80071ac:	2100      	movs	r1, #0
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 fa1e 	bl	80075f0 <wm8994_SetMute>
 80071b4:	4602      	mov	r2, r0
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4413      	add	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80071bc:	88fb      	ldrh	r3, [r7, #6]
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	f240 127f 	movw	r2, #383	@ 0x17f
 80071c4:	211c      	movs	r1, #28
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 fc78 	bl	8007abc <CODEC_IO_Write>
 80071cc:	4603      	mov	r3, r0
 80071ce:	461a      	mov	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	4413      	add	r3, r2
 80071d4:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80071d6:	88fb      	ldrh	r3, [r7, #6]
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	f240 127f 	movw	r2, #383	@ 0x17f
 80071de:	211d      	movs	r1, #29
 80071e0:	4618      	mov	r0, r3
 80071e2:	f000 fc6b 	bl	8007abc <CODEC_IO_Write>
 80071e6:	4603      	mov	r3, r0
 80071e8:	461a      	mov	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	4413      	add	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80071f0:	88fb      	ldrh	r3, [r7, #6]
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	f240 127f 	movw	r2, #383	@ 0x17f
 80071f8:	2126      	movs	r1, #38	@ 0x26
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 fc5e 	bl	8007abc <CODEC_IO_Write>
 8007200:	4603      	mov	r3, r0
 8007202:	461a      	mov	r2, r3
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4413      	add	r3, r2
 8007208:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 800720a:	88fb      	ldrh	r3, [r7, #6]
 800720c:	b2db      	uxtb	r3, r3
 800720e:	f240 127f 	movw	r2, #383	@ 0x17f
 8007212:	2127      	movs	r1, #39	@ 0x27
 8007214:	4618      	mov	r0, r3
 8007216:	f000 fc51 	bl	8007abc <CODEC_IO_Write>
 800721a:	4603      	mov	r3, r0
 800721c:	461a      	mov	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	4413      	add	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	e059      	b.n	80072da <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8007226:	797b      	ldrb	r3, [r7, #5]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d109      	bne.n	8007240 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800722c:	88fb      	ldrh	r3, [r7, #6]
 800722e:	2101      	movs	r1, #1
 8007230:	4618      	mov	r0, r3
 8007232:	f000 f9dd 	bl	80075f0 <wm8994_SetMute>
 8007236:	4602      	mov	r2, r0
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4413      	add	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]
 800723e:	e04c      	b.n	80072da <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8007240:	88fb      	ldrh	r3, [r7, #6]
 8007242:	2100      	movs	r1, #0
 8007244:	4618      	mov	r0, r3
 8007246:	f000 f9d3 	bl	80075f0 <wm8994_SetMute>
 800724a:	4602      	mov	r2, r0
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4413      	add	r3, r2
 8007250:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8007252:	88fb      	ldrh	r3, [r7, #6]
 8007254:	b2d8      	uxtb	r0, r3
 8007256:	7afb      	ldrb	r3, [r7, #11]
 8007258:	b21b      	sxth	r3, r3
 800725a:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800725e:	b21b      	sxth	r3, r3
 8007260:	b29b      	uxth	r3, r3
 8007262:	461a      	mov	r2, r3
 8007264:	211c      	movs	r1, #28
 8007266:	f000 fc29 	bl	8007abc <CODEC_IO_Write>
 800726a:	4603      	mov	r3, r0
 800726c:	461a      	mov	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	4413      	add	r3, r2
 8007272:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8007274:	88fb      	ldrh	r3, [r7, #6]
 8007276:	b2d8      	uxtb	r0, r3
 8007278:	7afb      	ldrb	r3, [r7, #11]
 800727a:	b21b      	sxth	r3, r3
 800727c:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8007280:	b21b      	sxth	r3, r3
 8007282:	b29b      	uxth	r3, r3
 8007284:	461a      	mov	r2, r3
 8007286:	211d      	movs	r1, #29
 8007288:	f000 fc18 	bl	8007abc <CODEC_IO_Write>
 800728c:	4603      	mov	r3, r0
 800728e:	461a      	mov	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4413      	add	r3, r2
 8007294:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8007296:	88fb      	ldrh	r3, [r7, #6]
 8007298:	b2d8      	uxtb	r0, r3
 800729a:	7afb      	ldrb	r3, [r7, #11]
 800729c:	b21b      	sxth	r3, r3
 800729e:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80072a2:	b21b      	sxth	r3, r3
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	461a      	mov	r2, r3
 80072a8:	2126      	movs	r1, #38	@ 0x26
 80072aa:	f000 fc07 	bl	8007abc <CODEC_IO_Write>
 80072ae:	4603      	mov	r3, r0
 80072b0:	461a      	mov	r2, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	4413      	add	r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 80072b8:	88fb      	ldrh	r3, [r7, #6]
 80072ba:	b2d8      	uxtb	r0, r3
 80072bc:	7afb      	ldrb	r3, [r7, #11]
 80072be:	b21b      	sxth	r3, r3
 80072c0:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80072c4:	b21b      	sxth	r3, r3
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	461a      	mov	r2, r3
 80072ca:	2127      	movs	r1, #39	@ 0x27
 80072cc:	f000 fbf6 	bl	8007abc <CODEC_IO_Write>
 80072d0:	4603      	mov	r3, r0
 80072d2:	461a      	mov	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	4413      	add	r3, r2
 80072d8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 80072da:	4b33      	ldr	r3, [pc, #204]	@ (80073a8 <wm8994_SetVolume+0x244>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d059      	beq.n	8007396 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80072e2:	797b      	ldrb	r3, [r7, #5]
 80072e4:	2b63      	cmp	r3, #99	@ 0x63
 80072e6:	d80c      	bhi.n	8007302 <wm8994_SetVolume+0x19e>
 80072e8:	797a      	ldrb	r2, [r7, #5]
 80072ea:	4613      	mov	r3, r2
 80072ec:	011b      	lsls	r3, r3, #4
 80072ee:	1a9b      	subs	r3, r3, r2
 80072f0:	011b      	lsls	r3, r3, #4
 80072f2:	4a2b      	ldr	r2, [pc, #172]	@ (80073a0 <wm8994_SetVolume+0x23c>)
 80072f4:	fb82 1203 	smull	r1, r2, r2, r3
 80072f8:	1152      	asrs	r2, r2, #5
 80072fa:	17db      	asrs	r3, r3, #31
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	e000      	b.n	8007304 <wm8994_SetVolume+0x1a0>
 8007302:	23ef      	movs	r3, #239	@ 0xef
 8007304:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8007306:	88fb      	ldrh	r3, [r7, #6]
 8007308:	b2d8      	uxtb	r0, r3
 800730a:	7afb      	ldrb	r3, [r7, #11]
 800730c:	b21b      	sxth	r3, r3
 800730e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007312:	b21b      	sxth	r3, r3
 8007314:	b29b      	uxth	r3, r3
 8007316:	461a      	mov	r2, r3
 8007318:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800731c:	f000 fbce 	bl	8007abc <CODEC_IO_Write>
 8007320:	4603      	mov	r3, r0
 8007322:	461a      	mov	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	4413      	add	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 800732a:	88fb      	ldrh	r3, [r7, #6]
 800732c:	b2d8      	uxtb	r0, r3
 800732e:	7afb      	ldrb	r3, [r7, #11]
 8007330:	b21b      	sxth	r3, r3
 8007332:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007336:	b21b      	sxth	r3, r3
 8007338:	b29b      	uxth	r3, r3
 800733a:	461a      	mov	r2, r3
 800733c:	f240 4101 	movw	r1, #1025	@ 0x401
 8007340:	f000 fbbc 	bl	8007abc <CODEC_IO_Write>
 8007344:	4603      	mov	r3, r0
 8007346:	461a      	mov	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4413      	add	r3, r2
 800734c:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 800734e:	88fb      	ldrh	r3, [r7, #6]
 8007350:	b2d8      	uxtb	r0, r3
 8007352:	7afb      	ldrb	r3, [r7, #11]
 8007354:	b21b      	sxth	r3, r3
 8007356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800735a:	b21b      	sxth	r3, r3
 800735c:	b29b      	uxth	r3, r3
 800735e:	461a      	mov	r2, r3
 8007360:	f240 4104 	movw	r1, #1028	@ 0x404
 8007364:	f000 fbaa 	bl	8007abc <CODEC_IO_Write>
 8007368:	4603      	mov	r3, r0
 800736a:	461a      	mov	r2, r3
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4413      	add	r3, r2
 8007370:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8007372:	88fb      	ldrh	r3, [r7, #6]
 8007374:	b2d8      	uxtb	r0, r3
 8007376:	7afb      	ldrb	r3, [r7, #11]
 8007378:	b21b      	sxth	r3, r3
 800737a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800737e:	b21b      	sxth	r3, r3
 8007380:	b29b      	uxth	r3, r3
 8007382:	461a      	mov	r2, r3
 8007384:	f240 4105 	movw	r1, #1029	@ 0x405
 8007388:	f000 fb98 	bl	8007abc <CODEC_IO_Write>
 800738c:	4603      	mov	r3, r0
 800738e:	461a      	mov	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	4413      	add	r3, r2
 8007394:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8007396:	68fb      	ldr	r3, [r7, #12]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	51eb851f 	.word	0x51eb851f
 80073a4:	20000fe8 	.word	0x20000fe8
 80073a8:	20000fec 	.word	0x20000fec

080073ac <wm8994_SetVolumeOut>:
uint32_t wm8994_SetVolumeOut(uint16_t DeviceAddr, uint8_t Volume) {
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	4603      	mov	r3, r0
 80073b4:	460a      	mov	r2, r1
 80073b6:	80fb      	strh	r3, [r7, #6]
 80073b8:	4613      	mov	r3, r2
 80073ba:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 80073bc:	2300      	movs	r3, #0
 80073be:	60fb      	str	r3, [r7, #12]
	uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80073c0:	797b      	ldrb	r3, [r7, #5]
 80073c2:	2b64      	cmp	r3, #100	@ 0x64
 80073c4:	d80b      	bhi.n	80073de <wm8994_SetVolumeOut+0x32>
 80073c6:	797a      	ldrb	r2, [r7, #5]
 80073c8:	4613      	mov	r3, r2
 80073ca:	019b      	lsls	r3, r3, #6
 80073cc:	1a9b      	subs	r3, r3, r2
 80073ce:	4a57      	ldr	r2, [pc, #348]	@ (800752c <wm8994_SetVolumeOut+0x180>)
 80073d0:	fb82 1203 	smull	r1, r2, r2, r3
 80073d4:	1152      	asrs	r2, r2, #5
 80073d6:	17db      	asrs	r3, r3, #31
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	e000      	b.n	80073e0 <wm8994_SetVolumeOut+0x34>
 80073de:	2364      	movs	r3, #100	@ 0x64
 80073e0:	72fb      	strb	r3, [r7, #11]

	/* Output volume */
	if (outputEnabled != 0) {
 80073e2:	4b53      	ldr	r3, [pc, #332]	@ (8007530 <wm8994_SetVolumeOut+0x184>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 809b 	beq.w	8007522 <wm8994_SetVolumeOut+0x176>
		if (convertedvol > 0x3E) {
 80073ec:	7afb      	ldrb	r3, [r7, #11]
 80073ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80073f0:	d93d      	bls.n	800746e <wm8994_SetVolumeOut+0xc2>
			/* Unmute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80073f2:	88fb      	ldrh	r3, [r7, #6]
 80073f4:	2100      	movs	r1, #0
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 f8fa 	bl	80075f0 <wm8994_SetMute>
 80073fc:	4602      	mov	r2, r0
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	4413      	add	r3, r2
 8007402:	60fb      	str	r3, [r7, #12]

			/* Left Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8007404:	88fb      	ldrh	r3, [r7, #6]
 8007406:	b2db      	uxtb	r3, r3
 8007408:	f240 127f 	movw	r2, #383	@ 0x17f
 800740c:	211c      	movs	r1, #28
 800740e:	4618      	mov	r0, r3
 8007410:	f000 fb54 	bl	8007abc <CODEC_IO_Write>
 8007414:	4603      	mov	r3, r0
 8007416:	461a      	mov	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	4413      	add	r3, r2
 800741c:	60fb      	str	r3, [r7, #12]

			/* Right Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 800741e:	88fb      	ldrh	r3, [r7, #6]
 8007420:	b2db      	uxtb	r3, r3
 8007422:	f240 127f 	movw	r2, #383	@ 0x17f
 8007426:	211d      	movs	r1, #29
 8007428:	4618      	mov	r0, r3
 800742a:	f000 fb47 	bl	8007abc <CODEC_IO_Write>
 800742e:	4603      	mov	r3, r0
 8007430:	461a      	mov	r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	4413      	add	r3, r2
 8007436:	60fb      	str	r3, [r7, #12]

			/* Left Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8007438:	88fb      	ldrh	r3, [r7, #6]
 800743a:	b2db      	uxtb	r3, r3
 800743c:	f240 127f 	movw	r2, #383	@ 0x17f
 8007440:	2126      	movs	r1, #38	@ 0x26
 8007442:	4618      	mov	r0, r3
 8007444:	f000 fb3a 	bl	8007abc <CODEC_IO_Write>
 8007448:	4603      	mov	r3, r0
 800744a:	461a      	mov	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4413      	add	r3, r2
 8007450:	60fb      	str	r3, [r7, #12]

			/* Right Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8007452:	88fb      	ldrh	r3, [r7, #6]
 8007454:	b2db      	uxtb	r3, r3
 8007456:	f240 127f 	movw	r2, #383	@ 0x17f
 800745a:	2127      	movs	r1, #39	@ 0x27
 800745c:	4618      	mov	r0, r3
 800745e:	f000 fb2d 	bl	8007abc <CODEC_IO_Write>
 8007462:	4603      	mov	r3, r0
 8007464:	461a      	mov	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	4413      	add	r3, r2
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	e059      	b.n	8007522 <wm8994_SetVolumeOut+0x176>
		} else if (Volume == 0) {
 800746e:	797b      	ldrb	r3, [r7, #5]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d109      	bne.n	8007488 <wm8994_SetVolumeOut+0xdc>
			/* Mute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8007474:	88fb      	ldrh	r3, [r7, #6]
 8007476:	2101      	movs	r1, #1
 8007478:	4618      	mov	r0, r3
 800747a:	f000 f8b9 	bl	80075f0 <wm8994_SetMute>
 800747e:	4602      	mov	r2, r0
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4413      	add	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]
 8007486:	e04c      	b.n	8007522 <wm8994_SetVolumeOut+0x176>
		} else {
			/* Unmute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8007488:	88fb      	ldrh	r3, [r7, #6]
 800748a:	2100      	movs	r1, #0
 800748c:	4618      	mov	r0, r3
 800748e:	f000 f8af 	bl	80075f0 <wm8994_SetMute>
 8007492:	4602      	mov	r2, r0
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4413      	add	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]

			/* Left Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800749a:	88fb      	ldrh	r3, [r7, #6]
 800749c:	b2d8      	uxtb	r0, r3
 800749e:	7afb      	ldrb	r3, [r7, #11]
 80074a0:	b21b      	sxth	r3, r3
 80074a2:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80074a6:	b21b      	sxth	r3, r3
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	461a      	mov	r2, r3
 80074ac:	211c      	movs	r1, #28
 80074ae:	f000 fb05 	bl	8007abc <CODEC_IO_Write>
 80074b2:	4603      	mov	r3, r0
 80074b4:	461a      	mov	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	4413      	add	r3, r2
 80074ba:	60fb      	str	r3, [r7, #12]

			/* Right Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 80074bc:	88fb      	ldrh	r3, [r7, #6]
 80074be:	b2d8      	uxtb	r0, r3
 80074c0:	7afb      	ldrb	r3, [r7, #11]
 80074c2:	b21b      	sxth	r3, r3
 80074c4:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80074c8:	b21b      	sxth	r3, r3
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	461a      	mov	r2, r3
 80074ce:	211d      	movs	r1, #29
 80074d0:	f000 faf4 	bl	8007abc <CODEC_IO_Write>
 80074d4:	4603      	mov	r3, r0
 80074d6:	461a      	mov	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	4413      	add	r3, r2
 80074dc:	60fb      	str	r3, [r7, #12]

			/* Left Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 80074de:	88fb      	ldrh	r3, [r7, #6]
 80074e0:	b2d8      	uxtb	r0, r3
 80074e2:	7afb      	ldrb	r3, [r7, #11]
 80074e4:	b21b      	sxth	r3, r3
 80074e6:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80074ea:	b21b      	sxth	r3, r3
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	461a      	mov	r2, r3
 80074f0:	2126      	movs	r1, #38	@ 0x26
 80074f2:	f000 fae3 	bl	8007abc <CODEC_IO_Write>
 80074f6:	4603      	mov	r3, r0
 80074f8:	461a      	mov	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	4413      	add	r3, r2
 80074fe:	60fb      	str	r3, [r7, #12]

			/* Right Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8007500:	88fb      	ldrh	r3, [r7, #6]
 8007502:	b2d8      	uxtb	r0, r3
 8007504:	7afb      	ldrb	r3, [r7, #11]
 8007506:	b21b      	sxth	r3, r3
 8007508:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800750c:	b21b      	sxth	r3, r3
 800750e:	b29b      	uxth	r3, r3
 8007510:	461a      	mov	r2, r3
 8007512:	2127      	movs	r1, #39	@ 0x27
 8007514:	f000 fad2 	bl	8007abc <CODEC_IO_Write>
 8007518:	4603      	mov	r3, r0
 800751a:	461a      	mov	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	4413      	add	r3, r2
 8007520:	60fb      	str	r3, [r7, #12]
		}
	}
	return counter;
 8007522:	68fb      	ldr	r3, [r7, #12]
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	51eb851f 	.word	0x51eb851f
 8007530:	20000fe8 	.word	0x20000fe8

08007534 <wm8994_SetVolumeIn>:
uint32_t wm8994_SetVolumeIn(uint16_t DeviceAddr, uint8_t Volume) {
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	4603      	mov	r3, r0
 800753c:	460a      	mov	r2, r1
 800753e:	80fb      	strh	r3, [r7, #6]
 8007540:	4613      	mov	r3, r2
 8007542:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 8007544:	2300      	movs	r3, #0
 8007546:	60fb      	str	r3, [r7, #12]
	if (inputEnabled != 0) {
 8007548:	4b28      	ldr	r3, [pc, #160]	@ (80075ec <wm8994_SetVolumeIn+0xb8>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d047      	beq.n	80075e0 <wm8994_SetVolumeIn+0xac>
		// B1 = 0dB
		/* Left AIF1 ADC1 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x400, Volume | 0x100);
 8007550:	88fb      	ldrh	r3, [r7, #6]
 8007552:	b2d8      	uxtb	r0, r3
 8007554:	797b      	ldrb	r3, [r7, #5]
 8007556:	b21b      	sxth	r3, r3
 8007558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800755c:	b21b      	sxth	r3, r3
 800755e:	b29b      	uxth	r3, r3
 8007560:	461a      	mov	r2, r3
 8007562:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007566:	f000 faa9 	bl	8007abc <CODEC_IO_Write>
 800756a:	4603      	mov	r3, r0
 800756c:	461a      	mov	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	4413      	add	r3, r2
 8007572:	60fb      	str	r3, [r7, #12]

		/* Right AIF1 ADC1 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x401, Volume | 0x100);
 8007574:	88fb      	ldrh	r3, [r7, #6]
 8007576:	b2d8      	uxtb	r0, r3
 8007578:	797b      	ldrb	r3, [r7, #5]
 800757a:	b21b      	sxth	r3, r3
 800757c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007580:	b21b      	sxth	r3, r3
 8007582:	b29b      	uxth	r3, r3
 8007584:	461a      	mov	r2, r3
 8007586:	f240 4101 	movw	r1, #1025	@ 0x401
 800758a:	f000 fa97 	bl	8007abc <CODEC_IO_Write>
 800758e:	4603      	mov	r3, r0
 8007590:	461a      	mov	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	4413      	add	r3, r2
 8007596:	60fb      	str	r3, [r7, #12]

		/* Left AIF1 ADC2 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x404, Volume | 0x100);
 8007598:	88fb      	ldrh	r3, [r7, #6]
 800759a:	b2d8      	uxtb	r0, r3
 800759c:	797b      	ldrb	r3, [r7, #5]
 800759e:	b21b      	sxth	r3, r3
 80075a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075a4:	b21b      	sxth	r3, r3
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	461a      	mov	r2, r3
 80075aa:	f240 4104 	movw	r1, #1028	@ 0x404
 80075ae:	f000 fa85 	bl	8007abc <CODEC_IO_Write>
 80075b2:	4603      	mov	r3, r0
 80075b4:	461a      	mov	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	4413      	add	r3, r2
 80075ba:	60fb      	str	r3, [r7, #12]

		/* Right AIF1 ADC2 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x405, Volume | 0x100);
 80075bc:	88fb      	ldrh	r3, [r7, #6]
 80075be:	b2d8      	uxtb	r0, r3
 80075c0:	797b      	ldrb	r3, [r7, #5]
 80075c2:	b21b      	sxth	r3, r3
 80075c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075c8:	b21b      	sxth	r3, r3
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	461a      	mov	r2, r3
 80075ce:	f240 4105 	movw	r1, #1029	@ 0x405
 80075d2:	f000 fa73 	bl	8007abc <CODEC_IO_Write>
 80075d6:	4603      	mov	r3, r0
 80075d8:	461a      	mov	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4413      	add	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]
	}
	return counter;
 80075e0:	68fb      	ldr	r3, [r7, #12]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	20000fec 	.word	0x20000fec

080075f0 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	4603      	mov	r3, r0
 80075f8:	6039      	str	r1, [r7, #0]
 80075fa:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80075fc:	2300      	movs	r3, #0
 80075fe:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8007600:	4b21      	ldr	r3, [pc, #132]	@ (8007688 <wm8994_SetMute+0x98>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d039      	beq.n	800767c <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d11c      	bne.n	8007648 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800760e:	88fb      	ldrh	r3, [r7, #6]
 8007610:	b2db      	uxtb	r3, r3
 8007612:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007616:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800761a:	4618      	mov	r0, r3
 800761c:	f000 fa4e 	bl	8007abc <CODEC_IO_Write>
 8007620:	4603      	mov	r3, r0
 8007622:	461a      	mov	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	4413      	add	r3, r2
 8007628:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 800762a:	88fb      	ldrh	r3, [r7, #6]
 800762c:	b2db      	uxtb	r3, r3
 800762e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007632:	f240 4122 	movw	r1, #1058	@ 0x422
 8007636:	4618      	mov	r0, r3
 8007638:	f000 fa40 	bl	8007abc <CODEC_IO_Write>
 800763c:	4603      	mov	r3, r0
 800763e:	461a      	mov	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4413      	add	r3, r2
 8007644:	60fb      	str	r3, [r7, #12]
 8007646:	e019      	b.n	800767c <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8007648:	88fb      	ldrh	r3, [r7, #6]
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2210      	movs	r2, #16
 800764e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fa32 	bl	8007abc <CODEC_IO_Write>
 8007658:	4603      	mov	r3, r0
 800765a:	461a      	mov	r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4413      	add	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8007662:	88fb      	ldrh	r3, [r7, #6]
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2210      	movs	r2, #16
 8007668:	f240 4122 	movw	r1, #1058	@ 0x422
 800766c:	4618      	mov	r0, r3
 800766e:	f000 fa25 	bl	8007abc <CODEC_IO_Write>
 8007672:	4603      	mov	r3, r0
 8007674:	461a      	mov	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	4413      	add	r3, r2
 800767a:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 800767c:	68fb      	ldr	r3, [r7, #12]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	20000fe8 	.word	0x20000fe8

0800768c <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	4603      	mov	r3, r0
 8007694:	460a      	mov	r2, r1
 8007696:	80fb      	strh	r3, [r7, #6]
 8007698:	4613      	mov	r3, r2
 800769a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 800769c:	2300      	movs	r3, #0
 800769e:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80076a0:	797b      	ldrb	r3, [r7, #5]
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	f000 808c 	beq.w	80077c0 <wm8994_SetOutputMode+0x134>
 80076a8:	2b03      	cmp	r3, #3
 80076aa:	f300 80cb 	bgt.w	8007844 <wm8994_SetOutputMode+0x1b8>
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d002      	beq.n	80076b8 <wm8994_SetOutputMode+0x2c>
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d042      	beq.n	800773c <wm8994_SetOutputMode+0xb0>
 80076b6:	e0c5      	b.n	8007844 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80076b8:	88fb      	ldrh	r3, [r7, #6]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	f640 420c 	movw	r2, #3084	@ 0xc0c
 80076c0:	2105      	movs	r1, #5
 80076c2:	4618      	mov	r0, r3
 80076c4:	f000 f9fa 	bl	8007abc <CODEC_IO_Write>
 80076c8:	4603      	mov	r3, r0
 80076ca:	461a      	mov	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4413      	add	r3, r2
 80076d0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80076d2:	88fb      	ldrh	r3, [r7, #6]
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2200      	movs	r2, #0
 80076d8:	f240 6101 	movw	r1, #1537	@ 0x601
 80076dc:	4618      	mov	r0, r3
 80076de:	f000 f9ed 	bl	8007abc <CODEC_IO_Write>
 80076e2:	4603      	mov	r3, r0
 80076e4:	461a      	mov	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	4413      	add	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80076ec:	88fb      	ldrh	r3, [r7, #6]
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2200      	movs	r2, #0
 80076f2:	f240 6102 	movw	r1, #1538	@ 0x602
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 f9e0 	bl	8007abc <CODEC_IO_Write>
 80076fc:	4603      	mov	r3, r0
 80076fe:	461a      	mov	r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	4413      	add	r3, r2
 8007704:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8007706:	88fb      	ldrh	r3, [r7, #6]
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2202      	movs	r2, #2
 800770c:	f240 6104 	movw	r1, #1540	@ 0x604
 8007710:	4618      	mov	r0, r3
 8007712:	f000 f9d3 	bl	8007abc <CODEC_IO_Write>
 8007716:	4603      	mov	r3, r0
 8007718:	461a      	mov	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	4413      	add	r3, r2
 800771e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8007720:	88fb      	ldrh	r3, [r7, #6]
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2202      	movs	r2, #2
 8007726:	f240 6105 	movw	r1, #1541	@ 0x605
 800772a:	4618      	mov	r0, r3
 800772c:	f000 f9c6 	bl	8007abc <CODEC_IO_Write>
 8007730:	4603      	mov	r3, r0
 8007732:	461a      	mov	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	4413      	add	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]
    break;
 800773a:	e0c5      	b.n	80078c8 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800773c:	88fb      	ldrh	r3, [r7, #6]
 800773e:	b2db      	uxtb	r3, r3
 8007740:	f240 3203 	movw	r2, #771	@ 0x303
 8007744:	2105      	movs	r1, #5
 8007746:	4618      	mov	r0, r3
 8007748:	f000 f9b8 	bl	8007abc <CODEC_IO_Write>
 800774c:	4603      	mov	r3, r0
 800774e:	461a      	mov	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4413      	add	r3, r2
 8007754:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8007756:	88fb      	ldrh	r3, [r7, #6]
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2201      	movs	r2, #1
 800775c:	f240 6101 	movw	r1, #1537	@ 0x601
 8007760:	4618      	mov	r0, r3
 8007762:	f000 f9ab 	bl	8007abc <CODEC_IO_Write>
 8007766:	4603      	mov	r3, r0
 8007768:	461a      	mov	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	4413      	add	r3, r2
 800776e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8007770:	88fb      	ldrh	r3, [r7, #6]
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2201      	movs	r2, #1
 8007776:	f240 6102 	movw	r1, #1538	@ 0x602
 800777a:	4618      	mov	r0, r3
 800777c:	f000 f99e 	bl	8007abc <CODEC_IO_Write>
 8007780:	4603      	mov	r3, r0
 8007782:	461a      	mov	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4413      	add	r3, r2
 8007788:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800778a:	88fb      	ldrh	r3, [r7, #6]
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2200      	movs	r2, #0
 8007790:	f240 6104 	movw	r1, #1540	@ 0x604
 8007794:	4618      	mov	r0, r3
 8007796:	f000 f991 	bl	8007abc <CODEC_IO_Write>
 800779a:	4603      	mov	r3, r0
 800779c:	461a      	mov	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	4413      	add	r3, r2
 80077a2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80077a4:	88fb      	ldrh	r3, [r7, #6]
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2200      	movs	r2, #0
 80077aa:	f240 6105 	movw	r1, #1541	@ 0x605
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 f984 	bl	8007abc <CODEC_IO_Write>
 80077b4:	4603      	mov	r3, r0
 80077b6:	461a      	mov	r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4413      	add	r3, r2
 80077bc:	60fb      	str	r3, [r7, #12]
    break;
 80077be:	e083      	b.n	80078c8 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80077c0:	88fb      	ldrh	r3, [r7, #6]
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80077c8:	2105      	movs	r1, #5
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 f976 	bl	8007abc <CODEC_IO_Write>
 80077d0:	4603      	mov	r3, r0
 80077d2:	461a      	mov	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	4413      	add	r3, r2
 80077d8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80077da:	88fb      	ldrh	r3, [r7, #6]
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2201      	movs	r2, #1
 80077e0:	f240 6101 	movw	r1, #1537	@ 0x601
 80077e4:	4618      	mov	r0, r3
 80077e6:	f000 f969 	bl	8007abc <CODEC_IO_Write>
 80077ea:	4603      	mov	r3, r0
 80077ec:	461a      	mov	r2, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	4413      	add	r3, r2
 80077f2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80077f4:	88fb      	ldrh	r3, [r7, #6]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	2201      	movs	r2, #1
 80077fa:	f240 6102 	movw	r1, #1538	@ 0x602
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 f95c 	bl	8007abc <CODEC_IO_Write>
 8007804:	4603      	mov	r3, r0
 8007806:	461a      	mov	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	4413      	add	r3, r2
 800780c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800780e:	88fb      	ldrh	r3, [r7, #6]
 8007810:	b2db      	uxtb	r3, r3
 8007812:	2202      	movs	r2, #2
 8007814:	f240 6104 	movw	r1, #1540	@ 0x604
 8007818:	4618      	mov	r0, r3
 800781a:	f000 f94f 	bl	8007abc <CODEC_IO_Write>
 800781e:	4603      	mov	r3, r0
 8007820:	461a      	mov	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	4413      	add	r3, r2
 8007826:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8007828:	88fb      	ldrh	r3, [r7, #6]
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2202      	movs	r2, #2
 800782e:	f240 6105 	movw	r1, #1541	@ 0x605
 8007832:	4618      	mov	r0, r3
 8007834:	f000 f942 	bl	8007abc <CODEC_IO_Write>
 8007838:	4603      	mov	r3, r0
 800783a:	461a      	mov	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	4413      	add	r3, r2
 8007840:	60fb      	str	r3, [r7, #12]
    break;
 8007842:	e041      	b.n	80078c8 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8007844:	88fb      	ldrh	r3, [r7, #6]
 8007846:	b2db      	uxtb	r3, r3
 8007848:	f240 3203 	movw	r2, #771	@ 0x303
 800784c:	2105      	movs	r1, #5
 800784e:	4618      	mov	r0, r3
 8007850:	f000 f934 	bl	8007abc <CODEC_IO_Write>
 8007854:	4603      	mov	r3, r0
 8007856:	461a      	mov	r2, r3
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	4413      	add	r3, r2
 800785c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800785e:	88fb      	ldrh	r3, [r7, #6]
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2201      	movs	r2, #1
 8007864:	f240 6101 	movw	r1, #1537	@ 0x601
 8007868:	4618      	mov	r0, r3
 800786a:	f000 f927 	bl	8007abc <CODEC_IO_Write>
 800786e:	4603      	mov	r3, r0
 8007870:	461a      	mov	r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	4413      	add	r3, r2
 8007876:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8007878:	88fb      	ldrh	r3, [r7, #6]
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2201      	movs	r2, #1
 800787e:	f240 6102 	movw	r1, #1538	@ 0x602
 8007882:	4618      	mov	r0, r3
 8007884:	f000 f91a 	bl	8007abc <CODEC_IO_Write>
 8007888:	4603      	mov	r3, r0
 800788a:	461a      	mov	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	4413      	add	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8007892:	88fb      	ldrh	r3, [r7, #6]
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2200      	movs	r2, #0
 8007898:	f240 6104 	movw	r1, #1540	@ 0x604
 800789c:	4618      	mov	r0, r3
 800789e:	f000 f90d 	bl	8007abc <CODEC_IO_Write>
 80078a2:	4603      	mov	r3, r0
 80078a4:	461a      	mov	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	4413      	add	r3, r2
 80078aa:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80078ac:	88fb      	ldrh	r3, [r7, #6]
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2200      	movs	r2, #0
 80078b2:	f240 6105 	movw	r1, #1541	@ 0x605
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 f900 	bl	8007abc <CODEC_IO_Write>
 80078bc:	4603      	mov	r3, r0
 80078be:	461a      	mov	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	4413      	add	r3, r2
 80078c4:	60fb      	str	r3, [r7, #12]
    break;    
 80078c6:	bf00      	nop
  }  
  return counter;
 80078c8:	68fb      	ldr	r3, [r7, #12]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
	...

080078d4 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	4603      	mov	r3, r0
 80078dc:	6039      	str	r1, [r7, #0]
 80078de:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80078e0:	2300      	movs	r3, #0
 80078e2:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	4a64      	ldr	r2, [pc, #400]	@ (8007a78 <wm8994_SetFrequency+0x1a4>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d079      	beq.n	80079e0 <wm8994_SetFrequency+0x10c>
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	4a62      	ldr	r2, [pc, #392]	@ (8007a78 <wm8994_SetFrequency+0x1a4>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	f200 80ad 	bhi.w	8007a50 <wm8994_SetFrequency+0x17c>
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d061      	beq.n	80079c4 <wm8994_SetFrequency+0xf0>
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8007906:	4293      	cmp	r3, r2
 8007908:	f200 80a2 	bhi.w	8007a50 <wm8994_SetFrequency+0x17c>
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8007912:	4293      	cmp	r3, r2
 8007914:	f000 808e 	beq.w	8007a34 <wm8994_SetFrequency+0x160>
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800791e:	4293      	cmp	r3, r2
 8007920:	f200 8096 	bhi.w	8007a50 <wm8994_SetFrequency+0x17c>
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800792a:	d03d      	beq.n	80079a8 <wm8994_SetFrequency+0xd4>
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8007932:	f200 808d 	bhi.w	8007a50 <wm8994_SetFrequency+0x17c>
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	f245 6222 	movw	r2, #22050	@ 0x5622
 800793c:	4293      	cmp	r3, r2
 800793e:	d06b      	beq.n	8007a18 <wm8994_SetFrequency+0x144>
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	f245 6222 	movw	r2, #22050	@ 0x5622
 8007946:	4293      	cmp	r3, r2
 8007948:	f200 8082 	bhi.w	8007a50 <wm8994_SetFrequency+0x17c>
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8007952:	d01b      	beq.n	800798c <wm8994_SetFrequency+0xb8>
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800795a:	d879      	bhi.n	8007a50 <wm8994_SetFrequency+0x17c>
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8007962:	d005      	beq.n	8007970 <wm8994_SetFrequency+0x9c>
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800796a:	4293      	cmp	r3, r2
 800796c:	d046      	beq.n	80079fc <wm8994_SetFrequency+0x128>
 800796e:	e06f      	b.n	8007a50 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8007970:	88fb      	ldrh	r3, [r7, #6]
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2203      	movs	r2, #3
 8007976:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800797a:	4618      	mov	r0, r3
 800797c:	f000 f89e 	bl	8007abc <CODEC_IO_Write>
 8007980:	4603      	mov	r3, r0
 8007982:	461a      	mov	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4413      	add	r3, r2
 8007988:	60fb      	str	r3, [r7, #12]
    break;
 800798a:	e06f      	b.n	8007a6c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800798c:	88fb      	ldrh	r3, [r7, #6]
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2233      	movs	r2, #51	@ 0x33
 8007992:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8007996:	4618      	mov	r0, r3
 8007998:	f000 f890 	bl	8007abc <CODEC_IO_Write>
 800799c:	4603      	mov	r3, r0
 800799e:	461a      	mov	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	4413      	add	r3, r2
 80079a4:	60fb      	str	r3, [r7, #12]
    break;
 80079a6:	e061      	b.n	8007a6c <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80079a8:	88fb      	ldrh	r3, [r7, #6]
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2263      	movs	r2, #99	@ 0x63
 80079ae:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 f882 	bl	8007abc <CODEC_IO_Write>
 80079b8:	4603      	mov	r3, r0
 80079ba:	461a      	mov	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	4413      	add	r3, r2
 80079c0:	60fb      	str	r3, [r7, #12]
    break;
 80079c2:	e053      	b.n	8007a6c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80079c4:	88fb      	ldrh	r3, [r7, #6]
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	2283      	movs	r2, #131	@ 0x83
 80079ca:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 f874 	bl	8007abc <CODEC_IO_Write>
 80079d4:	4603      	mov	r3, r0
 80079d6:	461a      	mov	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4413      	add	r3, r2
 80079dc:	60fb      	str	r3, [r7, #12]
    break;
 80079de:	e045      	b.n	8007a6c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80079e0:	88fb      	ldrh	r3, [r7, #6]
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	22a3      	movs	r2, #163	@ 0xa3
 80079e6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80079ea:	4618      	mov	r0, r3
 80079ec:	f000 f866 	bl	8007abc <CODEC_IO_Write>
 80079f0:	4603      	mov	r3, r0
 80079f2:	461a      	mov	r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	4413      	add	r3, r2
 80079f8:	60fb      	str	r3, [r7, #12]
    break;
 80079fa:	e037      	b.n	8007a6c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80079fc:	88fb      	ldrh	r3, [r7, #6]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2213      	movs	r2, #19
 8007a02:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 f858 	bl	8007abc <CODEC_IO_Write>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	461a      	mov	r2, r3
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	4413      	add	r3, r2
 8007a14:	60fb      	str	r3, [r7, #12]
    break;
 8007a16:	e029      	b.n	8007a6c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8007a18:	88fb      	ldrh	r3, [r7, #6]
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2243      	movs	r2, #67	@ 0x43
 8007a1e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 f84a 	bl	8007abc <CODEC_IO_Write>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	4413      	add	r3, r2
 8007a30:	60fb      	str	r3, [r7, #12]
    break;
 8007a32:	e01b      	b.n	8007a6c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8007a34:	88fb      	ldrh	r3, [r7, #6]
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2273      	movs	r2, #115	@ 0x73
 8007a3a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 f83c 	bl	8007abc <CODEC_IO_Write>
 8007a44:	4603      	mov	r3, r0
 8007a46:	461a      	mov	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	60fb      	str	r3, [r7, #12]
    break; 
 8007a4e:	e00d      	b.n	8007a6c <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8007a50:	88fb      	ldrh	r3, [r7, #6]
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	2283      	movs	r2, #131	@ 0x83
 8007a56:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 f82e 	bl	8007abc <CODEC_IO_Write>
 8007a60:	4603      	mov	r3, r0
 8007a62:	461a      	mov	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	4413      	add	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]
    break; 
 8007a6a:	bf00      	nop
  }
  return counter;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	00017700 	.word	0x00017700

08007a7c <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	4603      	mov	r3, r0
 8007a84:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8007a86:	2300      	movs	r3, #0
 8007a88:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8007a8a:	88fb      	ldrh	r3, [r7, #6]
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2200      	movs	r2, #0
 8007a90:	2100      	movs	r1, #0
 8007a92:	4618      	mov	r0, r3
 8007a94:	f000 f812 	bl	8007abc <CODEC_IO_Write>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8007a9c:	4b05      	ldr	r3, [pc, #20]	@ (8007ab4 <wm8994_Reset+0x38>)
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8007aa2:	4b05      	ldr	r3, [pc, #20]	@ (8007ab8 <wm8994_Reset+0x3c>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	601a      	str	r2, [r3, #0]

  return counter;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20000fe8 	.word	0x20000fe8
 8007ab8:	20000fec 	.word	0x20000fec

08007abc <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	71fb      	strb	r3, [r7, #7]
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	80bb      	strh	r3, [r7, #4]
 8007aca:	4613      	mov	r3, r2
 8007acc:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8007ad2:	887a      	ldrh	r2, [r7, #2]
 8007ad4:	88b9      	ldrh	r1, [r7, #4]
 8007ad6:	79fb      	ldrb	r3, [r7, #7]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fc f98d 	bl	8003df8 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	b2db      	uxtb	r3, r3
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
	...

08007aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007aec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007b24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007af0:	480d      	ldr	r0, [pc, #52]	@ (8007b28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007af2:	490e      	ldr	r1, [pc, #56]	@ (8007b2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007af4:	4a0e      	ldr	r2, [pc, #56]	@ (8007b30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007af8:	e002      	b.n	8007b00 <LoopCopyDataInit>

08007afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007afe:	3304      	adds	r3, #4

08007b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007b04:	d3f9      	bcc.n	8007afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007b06:	4a0b      	ldr	r2, [pc, #44]	@ (8007b34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007b08:	4c0b      	ldr	r4, [pc, #44]	@ (8007b38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007b0c:	e001      	b.n	8007b12 <LoopFillZerobss>

08007b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007b10:	3204      	adds	r2, #4

08007b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007b14:	d3fb      	bcc.n	8007b0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007b16:	f7fe fab9 	bl	800608c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007b1a:	f00c fcdd 	bl	80144d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007b1e:	f7fb fb4f 	bl	80031c0 <main>
  bx  lr    
 8007b22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007b24:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8007b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007b2c:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8007b30:	08023ac4 	.word	0x08023ac4
  ldr r2, =_sbss
 8007b34:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 8007b38:	20005370 	.word	0x20005370

08007b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007b3c:	e7fe      	b.n	8007b3c <ADC_IRQHandler>

08007b3e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007b42:	2003      	movs	r0, #3
 8007b44:	f000 fcf3 	bl	800852e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007b48:	200f      	movs	r0, #15
 8007b4a:	f7fe f8fd 	bl	8005d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007b4e:	f7fe f8d3 	bl	8005cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007b5c:	4b06      	ldr	r3, [pc, #24]	@ (8007b78 <HAL_IncTick+0x20>)
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	461a      	mov	r2, r3
 8007b62:	4b06      	ldr	r3, [pc, #24]	@ (8007b7c <HAL_IncTick+0x24>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4413      	add	r3, r2
 8007b68:	4a04      	ldr	r2, [pc, #16]	@ (8007b7c <HAL_IncTick+0x24>)
 8007b6a:	6013      	str	r3, [r2, #0]
}
 8007b6c:	bf00      	nop
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	20000090 	.word	0x20000090
 8007b7c:	20000ff0 	.word	0x20000ff0

08007b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007b80:	b480      	push	{r7}
 8007b82:	af00      	add	r7, sp, #0
  return uwTick;
 8007b84:	4b03      	ldr	r3, [pc, #12]	@ (8007b94 <HAL_GetTick+0x14>)
 8007b86:	681b      	ldr	r3, [r3, #0]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	20000ff0 	.word	0x20000ff0

08007b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007ba0:	f7ff ffee 	bl	8007b80 <HAL_GetTick>
 8007ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bb0:	d005      	beq.n	8007bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8007bdc <HAL_Delay+0x44>)
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	4413      	add	r3, r2
 8007bbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007bbe:	bf00      	nop
 8007bc0:	f7ff ffde 	bl	8007b80 <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d8f7      	bhi.n	8007bc0 <HAL_Delay+0x28>
  {
  }
}
 8007bd0:	bf00      	nop
 8007bd2:	bf00      	nop
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	20000090 	.word	0x20000090

08007be0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007be8:	2300      	movs	r3, #0
 8007bea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d101      	bne.n	8007bf6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e031      	b.n	8007c5a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d109      	bne.n	8007c12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7f9 f960 	bl	8000ec4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c16:	f003 0310 	and.w	r3, r3, #16
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d116      	bne.n	8007c4c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c22:	4b10      	ldr	r3, [pc, #64]	@ (8007c64 <HAL_ADC_Init+0x84>)
 8007c24:	4013      	ands	r3, r2
 8007c26:	f043 0202 	orr.w	r2, r3, #2
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fad6 	bl	80081e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c3e:	f023 0303 	bic.w	r3, r3, #3
 8007c42:	f043 0201 	orr.w	r2, r3, #1
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	641a      	str	r2, [r3, #64]	@ 0x40
 8007c4a:	e001      	b.n	8007c50 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	ffffeefd 	.word	0xffffeefd

08007c68 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8007c70:	2300      	movs	r3, #0
 8007c72:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d101      	bne.n	8007c82 <HAL_ADC_Start+0x1a>
 8007c7e:	2302      	movs	r3, #2
 8007c80:	e0ad      	b.n	8007dde <HAL_ADC_Start+0x176>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f003 0301 	and.w	r3, r3, #1
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d018      	beq.n	8007cca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689a      	ldr	r2, [r3, #8]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f042 0201 	orr.w	r2, r2, #1
 8007ca6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007ca8:	4b50      	ldr	r3, [pc, #320]	@ (8007dec <HAL_ADC_Start+0x184>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a50      	ldr	r2, [pc, #320]	@ (8007df0 <HAL_ADC_Start+0x188>)
 8007cae:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb2:	0c9a      	lsrs	r2, r3, #18
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	005b      	lsls	r3, r3, #1
 8007cb8:	4413      	add	r3, r2
 8007cba:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8007cbc:	e002      	b.n	8007cc4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1f9      	bne.n	8007cbe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d175      	bne.n	8007dc4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007cdc:	4b45      	ldr	r3, [pc, #276]	@ (8007df4 <HAL_ADC_Start+0x18c>)
 8007cde:	4013      	ands	r3, r2
 8007ce0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d007      	beq.n	8007d06 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cfa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007cfe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d12:	d106      	bne.n	8007d22 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d18:	f023 0206 	bic.w	r2, r3, #6
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	645a      	str	r2, [r3, #68]	@ 0x44
 8007d20:	e002      	b.n	8007d28 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8007d38:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8007d3a:	4b2f      	ldr	r3, [pc, #188]	@ (8007df8 <HAL_ADC_Start+0x190>)
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	f003 031f 	and.w	r3, r3, #31
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10f      	bne.n	8007d66 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d143      	bne.n	8007ddc <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	689a      	ldr	r2, [r3, #8]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007d62:	609a      	str	r2, [r3, #8]
 8007d64:	e03a      	b.n	8007ddc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a24      	ldr	r2, [pc, #144]	@ (8007dfc <HAL_ADC_Start+0x194>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d10e      	bne.n	8007d8e <HAL_ADC_Start+0x126>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d107      	bne.n	8007d8e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	689a      	ldr	r2, [r3, #8]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007d8c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8007d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8007df8 <HAL_ADC_Start+0x190>)
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	f003 0310 	and.w	r3, r3, #16
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d120      	bne.n	8007ddc <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a18      	ldr	r2, [pc, #96]	@ (8007e00 <HAL_ADC_Start+0x198>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d11b      	bne.n	8007ddc <HAL_ADC_Start+0x174>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d114      	bne.n	8007ddc <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	689a      	ldr	r2, [r3, #8]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007dc0:	609a      	str	r2, [r3, #8]
 8007dc2:	e00b      	b.n	8007ddc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dc8:	f043 0210 	orr.w	r2, r3, #16
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dd4:	f043 0201 	orr.w	r2, r3, #1
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3714      	adds	r7, #20
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	2000004c 	.word	0x2000004c
 8007df0:	431bde83 	.word	0x431bde83
 8007df4:	fffff8fe 	.word	0xfffff8fe
 8007df8:	40012300 	.word	0x40012300
 8007dfc:	40012000 	.word	0x40012000
 8007e00:	40012200 	.word	0x40012200

08007e04 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e20:	d113      	bne.n	8007e4a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007e2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e30:	d10b      	bne.n	8007e4a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e36:	f043 0220 	orr.w	r2, r3, #32
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e063      	b.n	8007f12 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007e4a:	f7ff fe99 	bl	8007b80 <HAL_GetTick>
 8007e4e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007e50:	e021      	b.n	8007e96 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e58:	d01d      	beq.n	8007e96 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d007      	beq.n	8007e70 <HAL_ADC_PollForConversion+0x6c>
 8007e60:	f7ff fe8e 	bl	8007b80 <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d212      	bcs.n	8007e96 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0302 	and.w	r3, r3, #2
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d00b      	beq.n	8007e96 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e82:	f043 0204 	orr.w	r2, r3, #4
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e03d      	b.n	8007f12 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0302 	and.w	r3, r3, #2
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d1d6      	bne.n	8007e52 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f06f 0212 	mvn.w	r2, #18
 8007eac:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eb2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d123      	bne.n	8007f10 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d11f      	bne.n	8007f10 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d006      	beq.n	8007eec <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d111      	bne.n	8007f10 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007efc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d105      	bne.n	8007f10 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f08:	f043 0201 	orr.w	r2, r3, #1
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8007f1a:	b480      	push	{r7}
 8007f1c:	b083      	sub	sp, #12
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d101      	bne.n	8007f50 <HAL_ADC_ConfigChannel+0x1c>
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	e136      	b.n	80081be <HAL_ADC_ConfigChannel+0x28a>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2b09      	cmp	r3, #9
 8007f5e:	d93a      	bls.n	8007fd6 <HAL_ADC_ConfigChannel+0xa2>
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f68:	d035      	beq.n	8007fd6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68d9      	ldr	r1, [r3, #12]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	461a      	mov	r2, r3
 8007f78:	4613      	mov	r3, r2
 8007f7a:	005b      	lsls	r3, r3, #1
 8007f7c:	4413      	add	r3, r2
 8007f7e:	3b1e      	subs	r3, #30
 8007f80:	2207      	movs	r2, #7
 8007f82:	fa02 f303 	lsl.w	r3, r2, r3
 8007f86:	43da      	mvns	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	400a      	ands	r2, r1
 8007f8e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a8d      	ldr	r2, [pc, #564]	@ (80081cc <HAL_ADC_ConfigChannel+0x298>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d10a      	bne.n	8007fb0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68d9      	ldr	r1, [r3, #12]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	061a      	lsls	r2, r3, #24
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	430a      	orrs	r2, r1
 8007fac:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007fae:	e035      	b.n	800801c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68d9      	ldr	r1, [r3, #12]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	689a      	ldr	r2, [r3, #8]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	005b      	lsls	r3, r3, #1
 8007fc6:	4403      	add	r3, r0
 8007fc8:	3b1e      	subs	r3, #30
 8007fca:	409a      	lsls	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007fd4:	e022      	b.n	800801c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6919      	ldr	r1, [r3, #16]
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	005b      	lsls	r3, r3, #1
 8007fe8:	4413      	add	r3, r2
 8007fea:	2207      	movs	r2, #7
 8007fec:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff0:	43da      	mvns	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	400a      	ands	r2, r1
 8007ff8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6919      	ldr	r1, [r3, #16]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	689a      	ldr	r2, [r3, #8]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	b29b      	uxth	r3, r3
 800800a:	4618      	mov	r0, r3
 800800c:	4603      	mov	r3, r0
 800800e:	005b      	lsls	r3, r3, #1
 8008010:	4403      	add	r3, r0
 8008012:	409a      	lsls	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	430a      	orrs	r2, r1
 800801a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	2b06      	cmp	r3, #6
 8008022:	d824      	bhi.n	800806e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	4613      	mov	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	4413      	add	r3, r2
 8008034:	3b05      	subs	r3, #5
 8008036:	221f      	movs	r2, #31
 8008038:	fa02 f303 	lsl.w	r3, r2, r3
 800803c:	43da      	mvns	r2, r3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	400a      	ands	r2, r1
 8008044:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	b29b      	uxth	r3, r3
 8008052:	4618      	mov	r0, r3
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	685a      	ldr	r2, [r3, #4]
 8008058:	4613      	mov	r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	4413      	add	r3, r2
 800805e:	3b05      	subs	r3, #5
 8008060:	fa00 f203 	lsl.w	r2, r0, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	430a      	orrs	r2, r1
 800806a:	635a      	str	r2, [r3, #52]	@ 0x34
 800806c:	e04c      	b.n	8008108 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	2b0c      	cmp	r3, #12
 8008074:	d824      	bhi.n	80080c0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	685a      	ldr	r2, [r3, #4]
 8008080:	4613      	mov	r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	3b23      	subs	r3, #35	@ 0x23
 8008088:	221f      	movs	r2, #31
 800808a:	fa02 f303 	lsl.w	r3, r2, r3
 800808e:	43da      	mvns	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	400a      	ands	r2, r1
 8008096:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	4618      	mov	r0, r3
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	4613      	mov	r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	3b23      	subs	r3, #35	@ 0x23
 80080b2:	fa00 f203 	lsl.w	r2, r0, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	430a      	orrs	r2, r1
 80080bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80080be:	e023      	b.n	8008108 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	685a      	ldr	r2, [r3, #4]
 80080ca:	4613      	mov	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	3b41      	subs	r3, #65	@ 0x41
 80080d2:	221f      	movs	r2, #31
 80080d4:	fa02 f303 	lsl.w	r3, r2, r3
 80080d8:	43da      	mvns	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	400a      	ands	r2, r1
 80080e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	4618      	mov	r0, r3
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	685a      	ldr	r2, [r3, #4]
 80080f4:	4613      	mov	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	3b41      	subs	r3, #65	@ 0x41
 80080fc:	fa00 f203 	lsl.w	r2, r0, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	430a      	orrs	r2, r1
 8008106:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a30      	ldr	r2, [pc, #192]	@ (80081d0 <HAL_ADC_ConfigChannel+0x29c>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d10a      	bne.n	8008128 <HAL_ADC_ConfigChannel+0x1f4>
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800811a:	d105      	bne.n	8008128 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800811c:	4b2d      	ldr	r3, [pc, #180]	@ (80081d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	4a2c      	ldr	r2, [pc, #176]	@ (80081d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8008122:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8008126:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a28      	ldr	r2, [pc, #160]	@ (80081d0 <HAL_ADC_ConfigChannel+0x29c>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d10f      	bne.n	8008152 <HAL_ADC_ConfigChannel+0x21e>
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b12      	cmp	r3, #18
 8008138:	d10b      	bne.n	8008152 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800813a:	4b26      	ldr	r3, [pc, #152]	@ (80081d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	4a25      	ldr	r2, [pc, #148]	@ (80081d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8008140:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008144:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8008146:	4b23      	ldr	r3, [pc, #140]	@ (80081d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	4a22      	ldr	r2, [pc, #136]	@ (80081d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800814c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008150:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a1e      	ldr	r2, [pc, #120]	@ (80081d0 <HAL_ADC_ConfigChannel+0x29c>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d12b      	bne.n	80081b4 <HAL_ADC_ConfigChannel+0x280>
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a1a      	ldr	r2, [pc, #104]	@ (80081cc <HAL_ADC_ConfigChannel+0x298>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d003      	beq.n	800816e <HAL_ADC_ConfigChannel+0x23a>
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2b11      	cmp	r3, #17
 800816c:	d122      	bne.n	80081b4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800816e:	4b19      	ldr	r3, [pc, #100]	@ (80081d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	4a18      	ldr	r2, [pc, #96]	@ (80081d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8008174:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8008178:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800817a:	4b16      	ldr	r3, [pc, #88]	@ (80081d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	4a15      	ldr	r2, [pc, #84]	@ (80081d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8008180:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008184:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a10      	ldr	r2, [pc, #64]	@ (80081cc <HAL_ADC_ConfigChannel+0x298>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d111      	bne.n	80081b4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8008190:	4b11      	ldr	r3, [pc, #68]	@ (80081d8 <HAL_ADC_ConfigChannel+0x2a4>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a11      	ldr	r2, [pc, #68]	@ (80081dc <HAL_ADC_ConfigChannel+0x2a8>)
 8008196:	fba2 2303 	umull	r2, r3, r2, r3
 800819a:	0c9a      	lsrs	r2, r3, #18
 800819c:	4613      	mov	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4413      	add	r3, r2
 80081a2:	005b      	lsls	r3, r3, #1
 80081a4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80081a6:	e002      	b.n	80081ae <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1f9      	bne.n	80081a8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3714      	adds	r7, #20
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	10000012 	.word	0x10000012
 80081d0:	40012000 	.word	0x40012000
 80081d4:	40012300 	.word	0x40012300
 80081d8:	2000004c 	.word	0x2000004c
 80081dc:	431bde83 	.word	0x431bde83

080081e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80081e8:	4b78      	ldr	r3, [pc, #480]	@ (80083cc <ADC_Init+0x1ec>)
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	4a77      	ldr	r2, [pc, #476]	@ (80083cc <ADC_Init+0x1ec>)
 80081ee:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80081f2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80081f4:	4b75      	ldr	r3, [pc, #468]	@ (80083cc <ADC_Init+0x1ec>)
 80081f6:	685a      	ldr	r2, [r3, #4]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	4973      	ldr	r1, [pc, #460]	@ (80083cc <ADC_Init+0x1ec>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008210:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	6859      	ldr	r1, [r3, #4]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	021a      	lsls	r2, r3, #8
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	430a      	orrs	r2, r1
 8008224:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	685a      	ldr	r2, [r3, #4]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8008234:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6859      	ldr	r1, [r3, #4]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	689a      	ldr	r2, [r3, #8]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	430a      	orrs	r2, r1
 8008246:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	689a      	ldr	r2, [r3, #8]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008256:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6899      	ldr	r1, [r3, #8]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	68da      	ldr	r2, [r3, #12]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	430a      	orrs	r2, r1
 8008268:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800826e:	4a58      	ldr	r2, [pc, #352]	@ (80083d0 <ADC_Init+0x1f0>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d022      	beq.n	80082ba <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	689a      	ldr	r2, [r3, #8]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008282:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	6899      	ldr	r1, [r3, #8]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	430a      	orrs	r2, r1
 8008294:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	689a      	ldr	r2, [r3, #8]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80082a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6899      	ldr	r1, [r3, #8]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	430a      	orrs	r2, r1
 80082b6:	609a      	str	r2, [r3, #8]
 80082b8:	e00f      	b.n	80082da <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	689a      	ldr	r2, [r3, #8]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80082c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	689a      	ldr	r2, [r3, #8]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80082d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	689a      	ldr	r2, [r3, #8]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f022 0202 	bic.w	r2, r2, #2
 80082e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	6899      	ldr	r1, [r3, #8]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	005a      	lsls	r2, r3, #1
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	430a      	orrs	r2, r1
 80082fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d01b      	beq.n	8008340 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	685a      	ldr	r2, [r3, #4]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008316:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8008326:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6859      	ldr	r1, [r3, #4]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008332:	3b01      	subs	r3, #1
 8008334:	035a      	lsls	r2, r3, #13
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	430a      	orrs	r2, r1
 800833c:	605a      	str	r2, [r3, #4]
 800833e:	e007      	b.n	8008350 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800834e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800835e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	3b01      	subs	r3, #1
 800836c:	051a      	lsls	r2, r3, #20
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	430a      	orrs	r2, r1
 8008374:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	689a      	ldr	r2, [r3, #8]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008384:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	6899      	ldr	r1, [r3, #8]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008392:	025a      	lsls	r2, r3, #9
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	430a      	orrs	r2, r1
 800839a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	689a      	ldr	r2, [r3, #8]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6899      	ldr	r1, [r3, #8]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	029a      	lsls	r2, r3, #10
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	430a      	orrs	r2, r1
 80083be:	609a      	str	r2, [r3, #8]
}
 80083c0:	bf00      	nop
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr
 80083cc:	40012300 	.word	0x40012300
 80083d0:	0f000001 	.word	0x0f000001

080083d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f003 0307 	and.w	r3, r3, #7
 80083e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80083e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008414 <__NVIC_SetPriorityGrouping+0x40>)
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80083f0:	4013      	ands	r3, r2
 80083f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80083fc:	4b06      	ldr	r3, [pc, #24]	@ (8008418 <__NVIC_SetPriorityGrouping+0x44>)
 80083fe:	4313      	orrs	r3, r2
 8008400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008402:	4a04      	ldr	r2, [pc, #16]	@ (8008414 <__NVIC_SetPriorityGrouping+0x40>)
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	60d3      	str	r3, [r2, #12]
}
 8008408:	bf00      	nop
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	e000ed00 	.word	0xe000ed00
 8008418:	05fa0000 	.word	0x05fa0000

0800841c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800841c:	b480      	push	{r7}
 800841e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008420:	4b04      	ldr	r3, [pc, #16]	@ (8008434 <__NVIC_GetPriorityGrouping+0x18>)
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	0a1b      	lsrs	r3, r3, #8
 8008426:	f003 0307 	and.w	r3, r3, #7
}
 800842a:	4618      	mov	r0, r3
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	e000ed00 	.word	0xe000ed00

08008438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	4603      	mov	r3, r0
 8008440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008446:	2b00      	cmp	r3, #0
 8008448:	db0b      	blt.n	8008462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800844a:	79fb      	ldrb	r3, [r7, #7]
 800844c:	f003 021f 	and.w	r2, r3, #31
 8008450:	4907      	ldr	r1, [pc, #28]	@ (8008470 <__NVIC_EnableIRQ+0x38>)
 8008452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008456:	095b      	lsrs	r3, r3, #5
 8008458:	2001      	movs	r0, #1
 800845a:	fa00 f202 	lsl.w	r2, r0, r2
 800845e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008462:	bf00      	nop
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	e000e100 	.word	0xe000e100

08008474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	4603      	mov	r3, r0
 800847c:	6039      	str	r1, [r7, #0]
 800847e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008484:	2b00      	cmp	r3, #0
 8008486:	db0a      	blt.n	800849e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	b2da      	uxtb	r2, r3
 800848c:	490c      	ldr	r1, [pc, #48]	@ (80084c0 <__NVIC_SetPriority+0x4c>)
 800848e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008492:	0112      	lsls	r2, r2, #4
 8008494:	b2d2      	uxtb	r2, r2
 8008496:	440b      	add	r3, r1
 8008498:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800849c:	e00a      	b.n	80084b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	b2da      	uxtb	r2, r3
 80084a2:	4908      	ldr	r1, [pc, #32]	@ (80084c4 <__NVIC_SetPriority+0x50>)
 80084a4:	79fb      	ldrb	r3, [r7, #7]
 80084a6:	f003 030f 	and.w	r3, r3, #15
 80084aa:	3b04      	subs	r3, #4
 80084ac:	0112      	lsls	r2, r2, #4
 80084ae:	b2d2      	uxtb	r2, r2
 80084b0:	440b      	add	r3, r1
 80084b2:	761a      	strb	r2, [r3, #24]
}
 80084b4:	bf00      	nop
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr
 80084c0:	e000e100 	.word	0xe000e100
 80084c4:	e000ed00 	.word	0xe000ed00

080084c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b089      	sub	sp, #36	@ 0x24
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f003 0307 	and.w	r3, r3, #7
 80084da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	f1c3 0307 	rsb	r3, r3, #7
 80084e2:	2b04      	cmp	r3, #4
 80084e4:	bf28      	it	cs
 80084e6:	2304      	movcs	r3, #4
 80084e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	3304      	adds	r3, #4
 80084ee:	2b06      	cmp	r3, #6
 80084f0:	d902      	bls.n	80084f8 <NVIC_EncodePriority+0x30>
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	3b03      	subs	r3, #3
 80084f6:	e000      	b.n	80084fa <NVIC_EncodePriority+0x32>
 80084f8:	2300      	movs	r3, #0
 80084fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	fa02 f303 	lsl.w	r3, r2, r3
 8008506:	43da      	mvns	r2, r3
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	401a      	ands	r2, r3
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008510:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	fa01 f303 	lsl.w	r3, r1, r3
 800851a:	43d9      	mvns	r1, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008520:	4313      	orrs	r3, r2
         );
}
 8008522:	4618      	mov	r0, r3
 8008524:	3724      	adds	r7, #36	@ 0x24
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b082      	sub	sp, #8
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7ff ff4c 	bl	80083d4 <__NVIC_SetPriorityGrouping>
}
 800853c:	bf00      	nop
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af00      	add	r7, sp, #0
 800854a:	4603      	mov	r3, r0
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
 8008550:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008552:	2300      	movs	r3, #0
 8008554:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008556:	f7ff ff61 	bl	800841c <__NVIC_GetPriorityGrouping>
 800855a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	68b9      	ldr	r1, [r7, #8]
 8008560:	6978      	ldr	r0, [r7, #20]
 8008562:	f7ff ffb1 	bl	80084c8 <NVIC_EncodePriority>
 8008566:	4602      	mov	r2, r0
 8008568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800856c:	4611      	mov	r1, r2
 800856e:	4618      	mov	r0, r3
 8008570:	f7ff ff80 	bl	8008474 <__NVIC_SetPriority>
}
 8008574:	bf00      	nop
 8008576:	3718      	adds	r7, #24
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	4603      	mov	r3, r0
 8008584:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800858a:	4618      	mov	r0, r3
 800858c:	f7ff ff54 	bl	8008438 <__NVIC_EnableIRQ>
}
 8008590:	bf00      	nop
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80085a0:	2300      	movs	r3, #0
 80085a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80085a4:	f7ff faec 	bl	8007b80 <HAL_GetTick>
 80085a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d101      	bne.n	80085b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e099      	b.n	80086e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2202      	movs	r2, #2
 80085b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f022 0201 	bic.w	r2, r2, #1
 80085d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80085d4:	e00f      	b.n	80085f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80085d6:	f7ff fad3 	bl	8007b80 <HAL_GetTick>
 80085da:	4602      	mov	r2, r0
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	2b05      	cmp	r3, #5
 80085e2:	d908      	bls.n	80085f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2220      	movs	r2, #32
 80085e8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2203      	movs	r2, #3
 80085ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e078      	b.n	80086e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0301 	and.w	r3, r3, #1
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1e8      	bne.n	80085d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800860c:	697a      	ldr	r2, [r7, #20]
 800860e:	4b38      	ldr	r3, [pc, #224]	@ (80086f0 <HAL_DMA_Init+0x158>)
 8008610:	4013      	ands	r3, r2
 8008612:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685a      	ldr	r2, [r3, #4]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008622:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800862e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800863a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a1b      	ldr	r3, [r3, #32]
 8008640:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	4313      	orrs	r3, r2
 8008646:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800864c:	2b04      	cmp	r3, #4
 800864e:	d107      	bne.n	8008660 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008658:	4313      	orrs	r3, r2
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	4313      	orrs	r3, r2
 800865e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	697a      	ldr	r2, [r7, #20]
 8008666:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	f023 0307 	bic.w	r3, r3, #7
 8008676:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	4313      	orrs	r3, r2
 8008680:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008686:	2b04      	cmp	r3, #4
 8008688:	d117      	bne.n	80086ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	4313      	orrs	r3, r2
 8008692:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008698:	2b00      	cmp	r3, #0
 800869a:	d00e      	beq.n	80086ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fae1 	bl	8008c64 <DMA_CheckFifoParam>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d008      	beq.n	80086ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2240      	movs	r2, #64	@ 0x40
 80086ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80086b6:	2301      	movs	r3, #1
 80086b8:	e016      	b.n	80086e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	697a      	ldr	r2, [r7, #20]
 80086c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fa98 	bl	8008bf8 <DMA_CalcBaseAndBitshift>
 80086c8:	4603      	mov	r3, r0
 80086ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086d0:	223f      	movs	r2, #63	@ 0x3f
 80086d2:	409a      	lsls	r2, r3
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2201      	movs	r2, #1
 80086e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3718      	adds	r7, #24
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	f010803f 	.word	0xf010803f

080086f4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d101      	bne.n	8008706 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	e050      	b.n	80087a8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800870c:	b2db      	uxtb	r3, r3
 800870e:	2b02      	cmp	r3, #2
 8008710:	d101      	bne.n	8008716 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8008712:	2302      	movs	r3, #2
 8008714:	e048      	b.n	80087a8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f022 0201 	bic.w	r2, r2, #1
 8008724:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2200      	movs	r2, #0
 800872c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2200      	movs	r2, #0
 8008734:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2200      	movs	r2, #0
 800873c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2200      	movs	r2, #0
 8008744:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2200      	movs	r2, #0
 800874c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2221      	movs	r2, #33	@ 0x21
 8008754:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 fa4e 	bl	8008bf8 <DMA_CalcBaseAndBitshift>
 800875c:	4603      	mov	r3, r0
 800875e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008764:	223f      	movs	r2, #63	@ 0x3f
 8008766:	409a      	lsls	r2, r3
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
 80087bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087be:	2300      	movs	r3, #0
 80087c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d101      	bne.n	80087d6 <HAL_DMA_Start_IT+0x26>
 80087d2:	2302      	movs	r3, #2
 80087d4:	e048      	b.n	8008868 <HAL_DMA_Start_IT+0xb8>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d137      	bne.n	800885a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2202      	movs	r2, #2
 80087ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	68b9      	ldr	r1, [r7, #8]
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f000 f9cc 	bl	8008b9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008808:	223f      	movs	r2, #63	@ 0x3f
 800880a:	409a      	lsls	r2, r3
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f042 0216 	orr.w	r2, r2, #22
 800881e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	695a      	ldr	r2, [r3, #20]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800882e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008834:	2b00      	cmp	r3, #0
 8008836:	d007      	beq.n	8008848 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f042 0208 	orr.w	r2, r2, #8
 8008846:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f042 0201 	orr.w	r2, r2, #1
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	e005      	b.n	8008866 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008862:	2302      	movs	r3, #2
 8008864:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008866:	7dfb      	ldrb	r3, [r7, #23]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3718      	adds	r7, #24
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8008878:	2300      	movs	r3, #0
 800887a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800887c:	4b8e      	ldr	r3, [pc, #568]	@ (8008ab8 <HAL_DMA_IRQHandler+0x248>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a8e      	ldr	r2, [pc, #568]	@ (8008abc <HAL_DMA_IRQHandler+0x24c>)
 8008882:	fba2 2303 	umull	r2, r3, r2, r3
 8008886:	0a9b      	lsrs	r3, r3, #10
 8008888:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800888e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800889a:	2208      	movs	r2, #8
 800889c:	409a      	lsls	r2, r3
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	4013      	ands	r3, r2
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d01a      	beq.n	80088dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 0304 	and.w	r3, r3, #4
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d013      	beq.n	80088dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f022 0204 	bic.w	r2, r2, #4
 80088c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088c8:	2208      	movs	r2, #8
 80088ca:	409a      	lsls	r2, r3
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088d4:	f043 0201 	orr.w	r2, r3, #1
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088e0:	2201      	movs	r2, #1
 80088e2:	409a      	lsls	r2, r3
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	4013      	ands	r3, r2
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d012      	beq.n	8008912 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00b      	beq.n	8008912 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088fe:	2201      	movs	r2, #1
 8008900:	409a      	lsls	r2, r3
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800890a:	f043 0202 	orr.w	r2, r3, #2
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008916:	2204      	movs	r2, #4
 8008918:	409a      	lsls	r2, r3
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	4013      	ands	r3, r2
 800891e:	2b00      	cmp	r3, #0
 8008920:	d012      	beq.n	8008948 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 0302 	and.w	r3, r3, #2
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00b      	beq.n	8008948 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008934:	2204      	movs	r2, #4
 8008936:	409a      	lsls	r2, r3
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008940:	f043 0204 	orr.w	r2, r3, #4
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800894c:	2210      	movs	r2, #16
 800894e:	409a      	lsls	r2, r3
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4013      	ands	r3, r2
 8008954:	2b00      	cmp	r3, #0
 8008956:	d043      	beq.n	80089e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 0308 	and.w	r3, r3, #8
 8008962:	2b00      	cmp	r3, #0
 8008964:	d03c      	beq.n	80089e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800896a:	2210      	movs	r2, #16
 800896c:	409a      	lsls	r2, r3
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800897c:	2b00      	cmp	r3, #0
 800897e:	d018      	beq.n	80089b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800898a:	2b00      	cmp	r3, #0
 800898c:	d108      	bne.n	80089a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008992:	2b00      	cmp	r3, #0
 8008994:	d024      	beq.n	80089e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	4798      	blx	r3
 800899e:	e01f      	b.n	80089e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d01b      	beq.n	80089e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	4798      	blx	r3
 80089b0:	e016      	b.n	80089e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d107      	bne.n	80089d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f022 0208 	bic.w	r2, r2, #8
 80089ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d003      	beq.n	80089e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089e4:	2220      	movs	r2, #32
 80089e6:	409a      	lsls	r2, r3
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	4013      	ands	r3, r2
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f000 808f 	beq.w	8008b10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 0310 	and.w	r3, r3, #16
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f000 8087 	beq.w	8008b10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a06:	2220      	movs	r2, #32
 8008a08:	409a      	lsls	r2, r3
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	2b05      	cmp	r3, #5
 8008a18:	d136      	bne.n	8008a88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f022 0216 	bic.w	r2, r2, #22
 8008a28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	695a      	ldr	r2, [r3, #20]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008a38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d103      	bne.n	8008a4a <HAL_DMA_IRQHandler+0x1da>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d007      	beq.n	8008a5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f022 0208 	bic.w	r2, r2, #8
 8008a58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a5e:	223f      	movs	r2, #63	@ 0x3f
 8008a60:	409a      	lsls	r2, r3
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d07e      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	4798      	blx	r3
        }
        return;
 8008a86:	e079      	b.n	8008b7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d01d      	beq.n	8008ad2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d10d      	bne.n	8008ac0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d031      	beq.n	8008b10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	4798      	blx	r3
 8008ab4:	e02c      	b.n	8008b10 <HAL_DMA_IRQHandler+0x2a0>
 8008ab6:	bf00      	nop
 8008ab8:	2000004c 	.word	0x2000004c
 8008abc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d023      	beq.n	8008b10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	4798      	blx	r3
 8008ad0:	e01e      	b.n	8008b10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10f      	bne.n	8008b00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f022 0210 	bic.w	r2, r2, #16
 8008aee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d003      	beq.n	8008b10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d032      	beq.n	8008b7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b1c:	f003 0301 	and.w	r3, r3, #1
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d022      	beq.n	8008b6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2205      	movs	r2, #5
 8008b28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f022 0201 	bic.w	r2, r2, #1
 8008b3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	60bb      	str	r3, [r7, #8]
 8008b42:	697a      	ldr	r2, [r7, #20]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d307      	bcc.n	8008b58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1f2      	bne.n	8008b3c <HAL_DMA_IRQHandler+0x2cc>
 8008b56:	e000      	b.n	8008b5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008b58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d005      	beq.n	8008b7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	4798      	blx	r3
 8008b7a:	e000      	b.n	8008b7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8008b7c:	bf00      	nop
    }
  }
}
 8008b7e:	3718      	adds	r7, #24
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
 8008ba8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008bb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	2b40      	cmp	r3, #64	@ 0x40
 8008bc8:	d108      	bne.n	8008bdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68ba      	ldr	r2, [r7, #8]
 8008bd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008bda:	e007      	b.n	8008bec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	60da      	str	r2, [r3, #12]
}
 8008bec:	bf00      	nop
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	3b10      	subs	r3, #16
 8008c08:	4a13      	ldr	r2, [pc, #76]	@ (8008c58 <DMA_CalcBaseAndBitshift+0x60>)
 8008c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c0e:	091b      	lsrs	r3, r3, #4
 8008c10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008c12:	4a12      	ldr	r2, [pc, #72]	@ (8008c5c <DMA_CalcBaseAndBitshift+0x64>)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	4413      	add	r3, r2
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2b03      	cmp	r3, #3
 8008c24:	d908      	bls.n	8008c38 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8008c60 <DMA_CalcBaseAndBitshift+0x68>)
 8008c2e:	4013      	ands	r3, r2
 8008c30:	1d1a      	adds	r2, r3, #4
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	659a      	str	r2, [r3, #88]	@ 0x58
 8008c36:	e006      	b.n	8008c46 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	4b08      	ldr	r3, [pc, #32]	@ (8008c60 <DMA_CalcBaseAndBitshift+0x68>)
 8008c40:	4013      	ands	r3, r2
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3714      	adds	r7, #20
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	aaaaaaab 	.word	0xaaaaaaab
 8008c5c:	080239b8 	.word	0x080239b8
 8008c60:	fffffc00 	.word	0xfffffc00

08008c64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d11f      	bne.n	8008cbe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	2b03      	cmp	r3, #3
 8008c82:	d856      	bhi.n	8008d32 <DMA_CheckFifoParam+0xce>
 8008c84:	a201      	add	r2, pc, #4	@ (adr r2, 8008c8c <DMA_CheckFifoParam+0x28>)
 8008c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8a:	bf00      	nop
 8008c8c:	08008c9d 	.word	0x08008c9d
 8008c90:	08008caf 	.word	0x08008caf
 8008c94:	08008c9d 	.word	0x08008c9d
 8008c98:	08008d33 	.word	0x08008d33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d046      	beq.n	8008d36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008cac:	e043      	b.n	8008d36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cb2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008cb6:	d140      	bne.n	8008d3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008cbc:	e03d      	b.n	8008d3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cc6:	d121      	bne.n	8008d0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	2b03      	cmp	r3, #3
 8008ccc:	d837      	bhi.n	8008d3e <DMA_CheckFifoParam+0xda>
 8008cce:	a201      	add	r2, pc, #4	@ (adr r2, 8008cd4 <DMA_CheckFifoParam+0x70>)
 8008cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd4:	08008ce5 	.word	0x08008ce5
 8008cd8:	08008ceb 	.word	0x08008ceb
 8008cdc:	08008ce5 	.word	0x08008ce5
 8008ce0:	08008cfd 	.word	0x08008cfd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ce8:	e030      	b.n	8008d4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d025      	beq.n	8008d42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008cfa:	e022      	b.n	8008d42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d00:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008d04:	d11f      	bne.n	8008d46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008d0a:	e01c      	b.n	8008d46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d903      	bls.n	8008d1a <DMA_CheckFifoParam+0xb6>
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	2b03      	cmp	r3, #3
 8008d16:	d003      	beq.n	8008d20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008d18:	e018      	b.n	8008d4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d1e:	e015      	b.n	8008d4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d00e      	beq.n	8008d4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d30:	e00b      	b.n	8008d4a <DMA_CheckFifoParam+0xe6>
      break;
 8008d32:	bf00      	nop
 8008d34:	e00a      	b.n	8008d4c <DMA_CheckFifoParam+0xe8>
      break;
 8008d36:	bf00      	nop
 8008d38:	e008      	b.n	8008d4c <DMA_CheckFifoParam+0xe8>
      break;
 8008d3a:	bf00      	nop
 8008d3c:	e006      	b.n	8008d4c <DMA_CheckFifoParam+0xe8>
      break;
 8008d3e:	bf00      	nop
 8008d40:	e004      	b.n	8008d4c <DMA_CheckFifoParam+0xe8>
      break;
 8008d42:	bf00      	nop
 8008d44:	e002      	b.n	8008d4c <DMA_CheckFifoParam+0xe8>
      break;   
 8008d46:	bf00      	nop
 8008d48:	e000      	b.n	8008d4c <DMA_CheckFifoParam+0xe8>
      break;
 8008d4a:	bf00      	nop
    }
  } 
  
  return status; 
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3714      	adds	r7, #20
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop

08008d5c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d101      	bne.n	8008d6e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e039      	b.n	8008de2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d106      	bne.n	8008d88 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f7f8 f974 	bl	8001070 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2202      	movs	r2, #2
 8008d8c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	685a      	ldr	r2, [r3, #4]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	430a      	orrs	r2, r1
 8008da4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dac:	f023 0107 	bic.w	r1, r3, #7
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	689a      	ldr	r2, [r3, #8]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	430a      	orrs	r2, r1
 8008dba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8008dec <HAL_DMA2D_Init+0x90>)
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	68d1      	ldr	r1, [r2, #12]
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	6812      	ldr	r2, [r2, #0]
 8008dce:	430b      	orrs	r3, r1
 8008dd0:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	ffffc000 	.word	0xffffc000

08008df0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b086      	sub	sp, #24
 8008df4:	af02      	add	r7, sp, #8
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
 8008dfc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d101      	bne.n	8008e0c <HAL_DMA2D_Start+0x1c>
 8008e08:	2302      	movs	r3, #2
 8008e0a:	e018      	b.n	8008e3e <HAL_DMA2D_Start+0x4e>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2202      	movs	r2, #2
 8008e18:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	68b9      	ldr	r1, [r7, #8]
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f000 fa98 	bl	800935c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f042 0201 	orr.w	r2, r2, #1
 8008e3a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b086      	sub	sp, #24
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8008e50:	2300      	movs	r3, #0
 8008e52:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 0301 	and.w	r3, r3, #1
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d056      	beq.n	8008f10 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008e62:	f7fe fe8d 	bl	8007b80 <HAL_GetTick>
 8008e66:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008e68:	e04b      	b.n	8008f02 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d023      	beq.n	8008ec4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f003 0320 	and.w	r3, r3, #32
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d005      	beq.n	8008e92 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e8a:	f043 0202 	orr.w	r2, r3, #2
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f003 0301 	and.w	r3, r3, #1
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d005      	beq.n	8008ea8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ea0:	f043 0201 	orr.w	r2, r3, #1
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2221      	movs	r2, #33	@ 0x21
 8008eae:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2204      	movs	r2, #4
 8008eb4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e0a5      	b.n	8009010 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008eca:	d01a      	beq.n	8008f02 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008ecc:	f7fe fe58 	bl	8007b80 <HAL_GetTick>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d302      	bcc.n	8008ee2 <HAL_DMA2D_PollForTransfer+0x9c>
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d10f      	bne.n	8008f02 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ee6:	f043 0220 	orr.w	r2, r3, #32
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2203      	movs	r2, #3
 8008ef2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8008efe:	2303      	movs	r3, #3
 8008f00:	e086      	b.n	8009010 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	f003 0302 	and.w	r3, r3, #2
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d0ac      	beq.n	8008e6a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	69db      	ldr	r3, [r3, #28]
 8008f16:	f003 0320 	and.w	r3, r3, #32
 8008f1a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f22:	f003 0320 	and.w	r3, r3, #32
 8008f26:	693a      	ldr	r2, [r7, #16]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d061      	beq.n	8008ff6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f32:	f7fe fe25 	bl	8007b80 <HAL_GetTick>
 8008f36:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8008f38:	e056      	b.n	8008fe8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d02e      	beq.n	8008faa <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f003 0308 	and.w	r3, r3, #8
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d005      	beq.n	8008f62 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f5a:	f043 0204 	orr.w	r2, r3, #4
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f003 0320 	and.w	r3, r3, #32
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d005      	beq.n	8008f78 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f70:	f043 0202 	orr.w	r2, r3, #2
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d005      	beq.n	8008f8e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f86:	f043 0201 	orr.w	r2, r3, #1
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2229      	movs	r2, #41	@ 0x29
 8008f94:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2204      	movs	r2, #4
 8008f9a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e032      	b.n	8009010 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008fb0:	d01a      	beq.n	8008fe8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008fb2:	f7fe fde5 	bl	8007b80 <HAL_GetTick>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	683a      	ldr	r2, [r7, #0]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d302      	bcc.n	8008fc8 <HAL_DMA2D_PollForTransfer+0x182>
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d10f      	bne.n	8008fe8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fcc:	f043 0220 	orr.w	r2, r3, #32
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2203      	movs	r2, #3
 8008fd8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e013      	b.n	8009010 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	f003 0310 	and.w	r3, r3, #16
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d0a1      	beq.n	8008f3a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2212      	movs	r2, #18
 8008ffc:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2201      	movs	r2, #1
 8009002:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3718      	adds	r7, #24
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	2b00      	cmp	r3, #0
 8009038:	d026      	beq.n	8009088 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009040:	2b00      	cmp	r3, #0
 8009042:	d021      	beq.n	8009088 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009052:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009058:	f043 0201 	orr.w	r2, r3, #1
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2201      	movs	r2, #1
 8009066:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2204      	movs	r2, #4
 800906c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d003      	beq.n	8009088 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	695b      	ldr	r3, [r3, #20]
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f003 0320 	and.w	r3, r3, #32
 800908e:	2b00      	cmp	r3, #0
 8009090:	d026      	beq.n	80090e0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009098:	2b00      	cmp	r3, #0
 800909a:	d021      	beq.n	80090e0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80090aa:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2220      	movs	r2, #32
 80090b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090b8:	f043 0202 	orr.w	r2, r3, #2
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2204      	movs	r2, #4
 80090c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	695b      	ldr	r3, [r3, #20]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d003      	beq.n	80090e0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	695b      	ldr	r3, [r3, #20]
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f003 0308 	and.w	r3, r3, #8
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d026      	beq.n	8009138 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d021      	beq.n	8009138 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009102:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2208      	movs	r2, #8
 800910a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009110:	f043 0204 	orr.w	r2, r3, #4
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2204      	movs	r2, #4
 800911c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	695b      	ldr	r3, [r3, #20]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d003      	beq.n	8009138 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	695b      	ldr	r3, [r3, #20]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f003 0304 	and.w	r3, r3, #4
 800913e:	2b00      	cmp	r3, #0
 8009140:	d013      	beq.n	800916a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00e      	beq.n	800916a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800915a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2204      	movs	r2, #4
 8009162:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f853 	bl	8009210 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f003 0302 	and.w	r3, r3, #2
 8009170:	2b00      	cmp	r3, #0
 8009172:	d024      	beq.n	80091be <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800917a:	2b00      	cmp	r3, #0
 800917c:	d01f      	beq.n	80091be <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800918c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2202      	movs	r2, #2
 8009194:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d003      	beq.n	80091be <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f003 0310 	and.w	r3, r3, #16
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d01f      	beq.n	8009208 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d01a      	beq.n	8009208 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80091e0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2210      	movs	r2, #16
 80091e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f80e 	bl	8009224 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8009208:	bf00      	nop
 800920a:	3710      	adds	r7, #16
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800922c:	bf00      	nop
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8009238:	b480      	push	{r7}
 800923a:	b087      	sub	sp, #28
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009250:	2b01      	cmp	r3, #1
 8009252:	d101      	bne.n	8009258 <HAL_DMA2D_ConfigLayer+0x20>
 8009254:	2302      	movs	r3, #2
 8009256:	e079      	b.n	800934c <HAL_DMA2D_ConfigLayer+0x114>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2202      	movs	r2, #2
 8009264:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	011b      	lsls	r3, r3, #4
 800926c:	3318      	adds	r3, #24
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	4413      	add	r3, r2
 8009272:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	685a      	ldr	r2, [r3, #4]
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	041b      	lsls	r3, r3, #16
 800927e:	4313      	orrs	r3, r2
 8009280:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8009282:	4b35      	ldr	r3, [pc, #212]	@ (8009358 <HAL_DMA2D_ConfigLayer+0x120>)
 8009284:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	2b0a      	cmp	r3, #10
 800928c:	d003      	beq.n	8009296 <HAL_DMA2D_ConfigLayer+0x5e>
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	2b09      	cmp	r3, #9
 8009294:	d107      	bne.n	80092a6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	617b      	str	r3, [r7, #20]
 80092a4:	e005      	b.n	80092b2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	061b      	lsls	r3, r3, #24
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d120      	bne.n	80092fa <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	43db      	mvns	r3, r3
 80092c2:	ea02 0103 	and.w	r1, r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	697a      	ldr	r2, [r7, #20]
 80092cc:	430a      	orrs	r2, r1
 80092ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	693a      	ldr	r2, [r7, #16]
 80092d6:	6812      	ldr	r2, [r2, #0]
 80092d8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	2b0a      	cmp	r3, #10
 80092e0:	d003      	beq.n	80092ea <HAL_DMA2D_ConfigLayer+0xb2>
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	2b09      	cmp	r3, #9
 80092e8:	d127      	bne.n	800933a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	68da      	ldr	r2, [r3, #12]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80092f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80092f8:	e01f      	b.n	800933a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	69da      	ldr	r2, [r3, #28]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	43db      	mvns	r3, r3
 8009304:	ea02 0103 	and.w	r1, r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	697a      	ldr	r2, [r7, #20]
 800930e:	430a      	orrs	r2, r1
 8009310:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	6812      	ldr	r2, [r2, #0]
 800931a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	2b0a      	cmp	r3, #10
 8009322:	d003      	beq.n	800932c <HAL_DMA2D_ConfigLayer+0xf4>
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	2b09      	cmp	r3, #9
 800932a:	d106      	bne.n	800933a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	68da      	ldr	r2, [r3, #12]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8009338:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2201      	movs	r2, #1
 800933e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	371c      	adds	r7, #28
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr
 8009358:	ff03000f 	.word	0xff03000f

0800935c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800935c:	b480      	push	{r7}
 800935e:	b08b      	sub	sp, #44	@ 0x2c
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	607a      	str	r2, [r7, #4]
 8009368:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009370:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	041a      	lsls	r2, r3, #16
 8009378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937a:	431a      	orrs	r2, r3
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	430a      	orrs	r2, r1
 8009382:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009394:	d174      	bne.n	8009480 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800939c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80093a4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80093ac:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d108      	bne.n	80093ce <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80093bc:	69ba      	ldr	r2, [r7, #24]
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	431a      	orrs	r2, r3
 80093c2:	6a3b      	ldr	r3, [r7, #32]
 80093c4:	4313      	orrs	r3, r2
 80093c6:	697a      	ldr	r2, [r7, #20]
 80093c8:	4313      	orrs	r3, r2
 80093ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80093cc:	e053      	b.n	8009476 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d106      	bne.n	80093e4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80093d6:	69ba      	ldr	r2, [r7, #24]
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	4313      	orrs	r3, r2
 80093dc:	697a      	ldr	r2, [r7, #20]
 80093de:	4313      	orrs	r3, r2
 80093e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80093e2:	e048      	b.n	8009476 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	d111      	bne.n	8009410 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	0cdb      	lsrs	r3, r3, #19
 80093f0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	0a9b      	lsrs	r3, r3, #10
 80093f6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	08db      	lsrs	r3, r3, #3
 80093fc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	015a      	lsls	r2, r3, #5
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	02db      	lsls	r3, r3, #11
 8009406:	4313      	orrs	r3, r2
 8009408:	697a      	ldr	r2, [r7, #20]
 800940a:	4313      	orrs	r3, r2
 800940c:	627b      	str	r3, [r7, #36]	@ 0x24
 800940e:	e032      	b.n	8009476 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	2b03      	cmp	r3, #3
 8009416:	d117      	bne.n	8009448 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8009418:	6a3b      	ldr	r3, [r7, #32]
 800941a:	0fdb      	lsrs	r3, r3, #31
 800941c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	0cdb      	lsrs	r3, r3, #19
 8009422:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8009424:	69bb      	ldr	r3, [r7, #24]
 8009426:	0adb      	lsrs	r3, r3, #11
 8009428:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	08db      	lsrs	r3, r3, #3
 800942e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	015a      	lsls	r2, r3, #5
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	029b      	lsls	r3, r3, #10
 8009438:	431a      	orrs	r2, r3
 800943a:	6a3b      	ldr	r3, [r7, #32]
 800943c:	03db      	lsls	r3, r3, #15
 800943e:	4313      	orrs	r3, r2
 8009440:	697a      	ldr	r2, [r7, #20]
 8009442:	4313      	orrs	r3, r2
 8009444:	627b      	str	r3, [r7, #36]	@ 0x24
 8009446:	e016      	b.n	8009476 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8009448:	6a3b      	ldr	r3, [r7, #32]
 800944a:	0f1b      	lsrs	r3, r3, #28
 800944c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	0d1b      	lsrs	r3, r3, #20
 8009452:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	0b1b      	lsrs	r3, r3, #12
 8009458:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	091b      	lsrs	r3, r3, #4
 800945e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	011a      	lsls	r2, r3, #4
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	021b      	lsls	r3, r3, #8
 8009468:	431a      	orrs	r2, r3
 800946a:	6a3b      	ldr	r3, [r7, #32]
 800946c:	031b      	lsls	r3, r3, #12
 800946e:	4313      	orrs	r3, r2
 8009470:	697a      	ldr	r2, [r7, #20]
 8009472:	4313      	orrs	r3, r2
 8009474:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800947c:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800947e:	e003      	b.n	8009488 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	60da      	str	r2, [r3, #12]
}
 8009488:	bf00      	nop
 800948a:	372c      	adds	r7, #44	@ 0x2c
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009494:	b480      	push	{r7}
 8009496:	b089      	sub	sp, #36	@ 0x24
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800949e:	2300      	movs	r3, #0
 80094a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80094a2:	2300      	movs	r3, #0
 80094a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80094a6:	2300      	movs	r3, #0
 80094a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80094aa:	2300      	movs	r3, #0
 80094ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80094ae:	2300      	movs	r3, #0
 80094b0:	61fb      	str	r3, [r7, #28]
 80094b2:	e175      	b.n	80097a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80094b4:	2201      	movs	r2, #1
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	fa02 f303 	lsl.w	r3, r2, r3
 80094bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	697a      	ldr	r2, [r7, #20]
 80094c4:	4013      	ands	r3, r2
 80094c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80094c8:	693a      	ldr	r2, [r7, #16]
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	f040 8164 	bne.w	800979a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	f003 0303 	and.w	r3, r3, #3
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d005      	beq.n	80094ea <HAL_GPIO_Init+0x56>
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	f003 0303 	and.w	r3, r3, #3
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d130      	bne.n	800954c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	005b      	lsls	r3, r3, #1
 80094f4:	2203      	movs	r2, #3
 80094f6:	fa02 f303 	lsl.w	r3, r2, r3
 80094fa:	43db      	mvns	r3, r3
 80094fc:	69ba      	ldr	r2, [r7, #24]
 80094fe:	4013      	ands	r3, r2
 8009500:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	68da      	ldr	r2, [r3, #12]
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	005b      	lsls	r3, r3, #1
 800950a:	fa02 f303 	lsl.w	r3, r2, r3
 800950e:	69ba      	ldr	r2, [r7, #24]
 8009510:	4313      	orrs	r3, r2
 8009512:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	69ba      	ldr	r2, [r7, #24]
 8009518:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009520:	2201      	movs	r2, #1
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	fa02 f303 	lsl.w	r3, r2, r3
 8009528:	43db      	mvns	r3, r3
 800952a:	69ba      	ldr	r2, [r7, #24]
 800952c:	4013      	ands	r3, r2
 800952e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	091b      	lsrs	r3, r3, #4
 8009536:	f003 0201 	and.w	r2, r3, #1
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	fa02 f303 	lsl.w	r3, r2, r3
 8009540:	69ba      	ldr	r2, [r7, #24]
 8009542:	4313      	orrs	r3, r2
 8009544:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	69ba      	ldr	r2, [r7, #24]
 800954a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	f003 0303 	and.w	r3, r3, #3
 8009554:	2b03      	cmp	r3, #3
 8009556:	d017      	beq.n	8009588 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	005b      	lsls	r3, r3, #1
 8009562:	2203      	movs	r2, #3
 8009564:	fa02 f303 	lsl.w	r3, r2, r3
 8009568:	43db      	mvns	r3, r3
 800956a:	69ba      	ldr	r2, [r7, #24]
 800956c:	4013      	ands	r3, r2
 800956e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	689a      	ldr	r2, [r3, #8]
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	005b      	lsls	r3, r3, #1
 8009578:	fa02 f303 	lsl.w	r3, r2, r3
 800957c:	69ba      	ldr	r2, [r7, #24]
 800957e:	4313      	orrs	r3, r2
 8009580:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	69ba      	ldr	r2, [r7, #24]
 8009586:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	f003 0303 	and.w	r3, r3, #3
 8009590:	2b02      	cmp	r3, #2
 8009592:	d123      	bne.n	80095dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	08da      	lsrs	r2, r3, #3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	3208      	adds	r2, #8
 800959c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	f003 0307 	and.w	r3, r3, #7
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	220f      	movs	r2, #15
 80095ac:	fa02 f303 	lsl.w	r3, r2, r3
 80095b0:	43db      	mvns	r3, r3
 80095b2:	69ba      	ldr	r2, [r7, #24]
 80095b4:	4013      	ands	r3, r2
 80095b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	691a      	ldr	r2, [r3, #16]
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	f003 0307 	and.w	r3, r3, #7
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	fa02 f303 	lsl.w	r3, r2, r3
 80095c8:	69ba      	ldr	r2, [r7, #24]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	08da      	lsrs	r2, r3, #3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	3208      	adds	r2, #8
 80095d6:	69b9      	ldr	r1, [r7, #24]
 80095d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	005b      	lsls	r3, r3, #1
 80095e6:	2203      	movs	r2, #3
 80095e8:	fa02 f303 	lsl.w	r3, r2, r3
 80095ec:	43db      	mvns	r3, r3
 80095ee:	69ba      	ldr	r2, [r7, #24]
 80095f0:	4013      	ands	r3, r2
 80095f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	f003 0203 	and.w	r2, r3, #3
 80095fc:	69fb      	ldr	r3, [r7, #28]
 80095fe:	005b      	lsls	r3, r3, #1
 8009600:	fa02 f303 	lsl.w	r3, r2, r3
 8009604:	69ba      	ldr	r2, [r7, #24]
 8009606:	4313      	orrs	r3, r2
 8009608:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	69ba      	ldr	r2, [r7, #24]
 800960e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 80be 	beq.w	800979a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800961e:	4b66      	ldr	r3, [pc, #408]	@ (80097b8 <HAL_GPIO_Init+0x324>)
 8009620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009622:	4a65      	ldr	r2, [pc, #404]	@ (80097b8 <HAL_GPIO_Init+0x324>)
 8009624:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009628:	6453      	str	r3, [r2, #68]	@ 0x44
 800962a:	4b63      	ldr	r3, [pc, #396]	@ (80097b8 <HAL_GPIO_Init+0x324>)
 800962c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800962e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009632:	60fb      	str	r3, [r7, #12]
 8009634:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8009636:	4a61      	ldr	r2, [pc, #388]	@ (80097bc <HAL_GPIO_Init+0x328>)
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	089b      	lsrs	r3, r3, #2
 800963c:	3302      	adds	r3, #2
 800963e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009642:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	f003 0303 	and.w	r3, r3, #3
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	220f      	movs	r2, #15
 800964e:	fa02 f303 	lsl.w	r3, r2, r3
 8009652:	43db      	mvns	r3, r3
 8009654:	69ba      	ldr	r2, [r7, #24]
 8009656:	4013      	ands	r3, r2
 8009658:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a58      	ldr	r2, [pc, #352]	@ (80097c0 <HAL_GPIO_Init+0x32c>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d037      	beq.n	80096d2 <HAL_GPIO_Init+0x23e>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a57      	ldr	r2, [pc, #348]	@ (80097c4 <HAL_GPIO_Init+0x330>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d031      	beq.n	80096ce <HAL_GPIO_Init+0x23a>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a56      	ldr	r2, [pc, #344]	@ (80097c8 <HAL_GPIO_Init+0x334>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d02b      	beq.n	80096ca <HAL_GPIO_Init+0x236>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a55      	ldr	r2, [pc, #340]	@ (80097cc <HAL_GPIO_Init+0x338>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d025      	beq.n	80096c6 <HAL_GPIO_Init+0x232>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a54      	ldr	r2, [pc, #336]	@ (80097d0 <HAL_GPIO_Init+0x33c>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d01f      	beq.n	80096c2 <HAL_GPIO_Init+0x22e>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a53      	ldr	r2, [pc, #332]	@ (80097d4 <HAL_GPIO_Init+0x340>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d019      	beq.n	80096be <HAL_GPIO_Init+0x22a>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a52      	ldr	r2, [pc, #328]	@ (80097d8 <HAL_GPIO_Init+0x344>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d013      	beq.n	80096ba <HAL_GPIO_Init+0x226>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a51      	ldr	r2, [pc, #324]	@ (80097dc <HAL_GPIO_Init+0x348>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d00d      	beq.n	80096b6 <HAL_GPIO_Init+0x222>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a50      	ldr	r2, [pc, #320]	@ (80097e0 <HAL_GPIO_Init+0x34c>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d007      	beq.n	80096b2 <HAL_GPIO_Init+0x21e>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a4f      	ldr	r2, [pc, #316]	@ (80097e4 <HAL_GPIO_Init+0x350>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d101      	bne.n	80096ae <HAL_GPIO_Init+0x21a>
 80096aa:	2309      	movs	r3, #9
 80096ac:	e012      	b.n	80096d4 <HAL_GPIO_Init+0x240>
 80096ae:	230a      	movs	r3, #10
 80096b0:	e010      	b.n	80096d4 <HAL_GPIO_Init+0x240>
 80096b2:	2308      	movs	r3, #8
 80096b4:	e00e      	b.n	80096d4 <HAL_GPIO_Init+0x240>
 80096b6:	2307      	movs	r3, #7
 80096b8:	e00c      	b.n	80096d4 <HAL_GPIO_Init+0x240>
 80096ba:	2306      	movs	r3, #6
 80096bc:	e00a      	b.n	80096d4 <HAL_GPIO_Init+0x240>
 80096be:	2305      	movs	r3, #5
 80096c0:	e008      	b.n	80096d4 <HAL_GPIO_Init+0x240>
 80096c2:	2304      	movs	r3, #4
 80096c4:	e006      	b.n	80096d4 <HAL_GPIO_Init+0x240>
 80096c6:	2303      	movs	r3, #3
 80096c8:	e004      	b.n	80096d4 <HAL_GPIO_Init+0x240>
 80096ca:	2302      	movs	r3, #2
 80096cc:	e002      	b.n	80096d4 <HAL_GPIO_Init+0x240>
 80096ce:	2301      	movs	r3, #1
 80096d0:	e000      	b.n	80096d4 <HAL_GPIO_Init+0x240>
 80096d2:	2300      	movs	r3, #0
 80096d4:	69fa      	ldr	r2, [r7, #28]
 80096d6:	f002 0203 	and.w	r2, r2, #3
 80096da:	0092      	lsls	r2, r2, #2
 80096dc:	4093      	lsls	r3, r2
 80096de:	69ba      	ldr	r2, [r7, #24]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80096e4:	4935      	ldr	r1, [pc, #212]	@ (80097bc <HAL_GPIO_Init+0x328>)
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	089b      	lsrs	r3, r3, #2
 80096ea:	3302      	adds	r3, #2
 80096ec:	69ba      	ldr	r2, [r7, #24]
 80096ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80096f2:	4b3d      	ldr	r3, [pc, #244]	@ (80097e8 <HAL_GPIO_Init+0x354>)
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	43db      	mvns	r3, r3
 80096fc:	69ba      	ldr	r2, [r7, #24]
 80096fe:	4013      	ands	r3, r2
 8009700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800970a:	2b00      	cmp	r3, #0
 800970c:	d003      	beq.n	8009716 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800970e:	69ba      	ldr	r2, [r7, #24]
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	4313      	orrs	r3, r2
 8009714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009716:	4a34      	ldr	r2, [pc, #208]	@ (80097e8 <HAL_GPIO_Init+0x354>)
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800971c:	4b32      	ldr	r3, [pc, #200]	@ (80097e8 <HAL_GPIO_Init+0x354>)
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	43db      	mvns	r3, r3
 8009726:	69ba      	ldr	r2, [r7, #24]
 8009728:	4013      	ands	r3, r2
 800972a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009734:	2b00      	cmp	r3, #0
 8009736:	d003      	beq.n	8009740 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009738:	69ba      	ldr	r2, [r7, #24]
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	4313      	orrs	r3, r2
 800973e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009740:	4a29      	ldr	r2, [pc, #164]	@ (80097e8 <HAL_GPIO_Init+0x354>)
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009746:	4b28      	ldr	r3, [pc, #160]	@ (80097e8 <HAL_GPIO_Init+0x354>)
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	43db      	mvns	r3, r3
 8009750:	69ba      	ldr	r2, [r7, #24]
 8009752:	4013      	ands	r3, r2
 8009754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800975e:	2b00      	cmp	r3, #0
 8009760:	d003      	beq.n	800976a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009762:	69ba      	ldr	r2, [r7, #24]
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	4313      	orrs	r3, r2
 8009768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800976a:	4a1f      	ldr	r2, [pc, #124]	@ (80097e8 <HAL_GPIO_Init+0x354>)
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009770:	4b1d      	ldr	r3, [pc, #116]	@ (80097e8 <HAL_GPIO_Init+0x354>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	43db      	mvns	r3, r3
 800977a:	69ba      	ldr	r2, [r7, #24]
 800977c:	4013      	ands	r3, r2
 800977e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009788:	2b00      	cmp	r3, #0
 800978a:	d003      	beq.n	8009794 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800978c:	69ba      	ldr	r2, [r7, #24]
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	4313      	orrs	r3, r2
 8009792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009794:	4a14      	ldr	r2, [pc, #80]	@ (80097e8 <HAL_GPIO_Init+0x354>)
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	3301      	adds	r3, #1
 800979e:	61fb      	str	r3, [r7, #28]
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	2b0f      	cmp	r3, #15
 80097a4:	f67f ae86 	bls.w	80094b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80097a8:	bf00      	nop
 80097aa:	bf00      	nop
 80097ac:	3724      	adds	r7, #36	@ 0x24
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	40023800 	.word	0x40023800
 80097bc:	40013800 	.word	0x40013800
 80097c0:	40020000 	.word	0x40020000
 80097c4:	40020400 	.word	0x40020400
 80097c8:	40020800 	.word	0x40020800
 80097cc:	40020c00 	.word	0x40020c00
 80097d0:	40021000 	.word	0x40021000
 80097d4:	40021400 	.word	0x40021400
 80097d8:	40021800 	.word	0x40021800
 80097dc:	40021c00 	.word	0x40021c00
 80097e0:	40022000 	.word	0x40022000
 80097e4:	40022400 	.word	0x40022400
 80097e8:	40013c00 	.word	0x40013c00

080097ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b087      	sub	sp, #28
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80097f6:	2300      	movs	r3, #0
 80097f8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80097fa:	2300      	movs	r3, #0
 80097fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80097fe:	2300      	movs	r3, #0
 8009800:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8009802:	2300      	movs	r3, #0
 8009804:	617b      	str	r3, [r7, #20]
 8009806:	e0d9      	b.n	80099bc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8009808:	2201      	movs	r2, #1
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	fa02 f303 	lsl.w	r3, r2, r3
 8009810:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8009812:	683a      	ldr	r2, [r7, #0]
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	4013      	ands	r3, r2
 8009818:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	429a      	cmp	r2, r3
 8009820:	f040 80c9 	bne.w	80099b6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8009824:	4a6b      	ldr	r2, [pc, #428]	@ (80099d4 <HAL_GPIO_DeInit+0x1e8>)
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	089b      	lsrs	r3, r3, #2
 800982a:	3302      	adds	r3, #2
 800982c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009830:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f003 0303 	and.w	r3, r3, #3
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	220f      	movs	r2, #15
 800983c:	fa02 f303 	lsl.w	r3, r2, r3
 8009840:	68ba      	ldr	r2, [r7, #8]
 8009842:	4013      	ands	r3, r2
 8009844:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a63      	ldr	r2, [pc, #396]	@ (80099d8 <HAL_GPIO_DeInit+0x1ec>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d037      	beq.n	80098be <HAL_GPIO_DeInit+0xd2>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a62      	ldr	r2, [pc, #392]	@ (80099dc <HAL_GPIO_DeInit+0x1f0>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d031      	beq.n	80098ba <HAL_GPIO_DeInit+0xce>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a61      	ldr	r2, [pc, #388]	@ (80099e0 <HAL_GPIO_DeInit+0x1f4>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d02b      	beq.n	80098b6 <HAL_GPIO_DeInit+0xca>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4a60      	ldr	r2, [pc, #384]	@ (80099e4 <HAL_GPIO_DeInit+0x1f8>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d025      	beq.n	80098b2 <HAL_GPIO_DeInit+0xc6>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4a5f      	ldr	r2, [pc, #380]	@ (80099e8 <HAL_GPIO_DeInit+0x1fc>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d01f      	beq.n	80098ae <HAL_GPIO_DeInit+0xc2>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4a5e      	ldr	r2, [pc, #376]	@ (80099ec <HAL_GPIO_DeInit+0x200>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d019      	beq.n	80098aa <HAL_GPIO_DeInit+0xbe>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4a5d      	ldr	r2, [pc, #372]	@ (80099f0 <HAL_GPIO_DeInit+0x204>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d013      	beq.n	80098a6 <HAL_GPIO_DeInit+0xba>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	4a5c      	ldr	r2, [pc, #368]	@ (80099f4 <HAL_GPIO_DeInit+0x208>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d00d      	beq.n	80098a2 <HAL_GPIO_DeInit+0xb6>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4a5b      	ldr	r2, [pc, #364]	@ (80099f8 <HAL_GPIO_DeInit+0x20c>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d007      	beq.n	800989e <HAL_GPIO_DeInit+0xb2>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4a5a      	ldr	r2, [pc, #360]	@ (80099fc <HAL_GPIO_DeInit+0x210>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d101      	bne.n	800989a <HAL_GPIO_DeInit+0xae>
 8009896:	2309      	movs	r3, #9
 8009898:	e012      	b.n	80098c0 <HAL_GPIO_DeInit+0xd4>
 800989a:	230a      	movs	r3, #10
 800989c:	e010      	b.n	80098c0 <HAL_GPIO_DeInit+0xd4>
 800989e:	2308      	movs	r3, #8
 80098a0:	e00e      	b.n	80098c0 <HAL_GPIO_DeInit+0xd4>
 80098a2:	2307      	movs	r3, #7
 80098a4:	e00c      	b.n	80098c0 <HAL_GPIO_DeInit+0xd4>
 80098a6:	2306      	movs	r3, #6
 80098a8:	e00a      	b.n	80098c0 <HAL_GPIO_DeInit+0xd4>
 80098aa:	2305      	movs	r3, #5
 80098ac:	e008      	b.n	80098c0 <HAL_GPIO_DeInit+0xd4>
 80098ae:	2304      	movs	r3, #4
 80098b0:	e006      	b.n	80098c0 <HAL_GPIO_DeInit+0xd4>
 80098b2:	2303      	movs	r3, #3
 80098b4:	e004      	b.n	80098c0 <HAL_GPIO_DeInit+0xd4>
 80098b6:	2302      	movs	r3, #2
 80098b8:	e002      	b.n	80098c0 <HAL_GPIO_DeInit+0xd4>
 80098ba:	2301      	movs	r3, #1
 80098bc:	e000      	b.n	80098c0 <HAL_GPIO_DeInit+0xd4>
 80098be:	2300      	movs	r3, #0
 80098c0:	697a      	ldr	r2, [r7, #20]
 80098c2:	f002 0203 	and.w	r2, r2, #3
 80098c6:	0092      	lsls	r2, r2, #2
 80098c8:	4093      	lsls	r3, r2
 80098ca:	68ba      	ldr	r2, [r7, #8]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d132      	bne.n	8009936 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80098d0:	4b4b      	ldr	r3, [pc, #300]	@ (8009a00 <HAL_GPIO_DeInit+0x214>)
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	43db      	mvns	r3, r3
 80098d8:	4949      	ldr	r1, [pc, #292]	@ (8009a00 <HAL_GPIO_DeInit+0x214>)
 80098da:	4013      	ands	r3, r2
 80098dc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80098de:	4b48      	ldr	r3, [pc, #288]	@ (8009a00 <HAL_GPIO_DeInit+0x214>)
 80098e0:	685a      	ldr	r2, [r3, #4]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	43db      	mvns	r3, r3
 80098e6:	4946      	ldr	r1, [pc, #280]	@ (8009a00 <HAL_GPIO_DeInit+0x214>)
 80098e8:	4013      	ands	r3, r2
 80098ea:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80098ec:	4b44      	ldr	r3, [pc, #272]	@ (8009a00 <HAL_GPIO_DeInit+0x214>)
 80098ee:	68da      	ldr	r2, [r3, #12]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	43db      	mvns	r3, r3
 80098f4:	4942      	ldr	r1, [pc, #264]	@ (8009a00 <HAL_GPIO_DeInit+0x214>)
 80098f6:	4013      	ands	r3, r2
 80098f8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80098fa:	4b41      	ldr	r3, [pc, #260]	@ (8009a00 <HAL_GPIO_DeInit+0x214>)
 80098fc:	689a      	ldr	r2, [r3, #8]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	43db      	mvns	r3, r3
 8009902:	493f      	ldr	r1, [pc, #252]	@ (8009a00 <HAL_GPIO_DeInit+0x214>)
 8009904:	4013      	ands	r3, r2
 8009906:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	f003 0303 	and.w	r3, r3, #3
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	220f      	movs	r2, #15
 8009912:	fa02 f303 	lsl.w	r3, r2, r3
 8009916:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8009918:	4a2e      	ldr	r2, [pc, #184]	@ (80099d4 <HAL_GPIO_DeInit+0x1e8>)
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	089b      	lsrs	r3, r3, #2
 800991e:	3302      	adds	r3, #2
 8009920:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	43da      	mvns	r2, r3
 8009928:	482a      	ldr	r0, [pc, #168]	@ (80099d4 <HAL_GPIO_DeInit+0x1e8>)
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	089b      	lsrs	r3, r3, #2
 800992e:	400a      	ands	r2, r1
 8009930:	3302      	adds	r3, #2
 8009932:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	005b      	lsls	r3, r3, #1
 800993e:	2103      	movs	r1, #3
 8009940:	fa01 f303 	lsl.w	r3, r1, r3
 8009944:	43db      	mvns	r3, r3
 8009946:	401a      	ands	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	08da      	lsrs	r2, r3, #3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	3208      	adds	r2, #8
 8009954:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	f003 0307 	and.w	r3, r3, #7
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	220f      	movs	r2, #15
 8009962:	fa02 f303 	lsl.w	r3, r2, r3
 8009966:	43db      	mvns	r3, r3
 8009968:	697a      	ldr	r2, [r7, #20]
 800996a:	08d2      	lsrs	r2, r2, #3
 800996c:	4019      	ands	r1, r3
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	3208      	adds	r2, #8
 8009972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	68da      	ldr	r2, [r3, #12]
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	005b      	lsls	r3, r3, #1
 800997e:	2103      	movs	r1, #3
 8009980:	fa01 f303 	lsl.w	r3, r1, r3
 8009984:	43db      	mvns	r3, r3
 8009986:	401a      	ands	r2, r3
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	685a      	ldr	r2, [r3, #4]
 8009990:	2101      	movs	r1, #1
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	fa01 f303 	lsl.w	r3, r1, r3
 8009998:	43db      	mvns	r3, r3
 800999a:	401a      	ands	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	689a      	ldr	r2, [r3, #8]
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	005b      	lsls	r3, r3, #1
 80099a8:	2103      	movs	r1, #3
 80099aa:	fa01 f303 	lsl.w	r3, r1, r3
 80099ae:	43db      	mvns	r3, r3
 80099b0:	401a      	ands	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	3301      	adds	r3, #1
 80099ba:	617b      	str	r3, [r7, #20]
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	2b0f      	cmp	r3, #15
 80099c0:	f67f af22 	bls.w	8009808 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80099c4:	bf00      	nop
 80099c6:	bf00      	nop
 80099c8:	371c      	adds	r7, #28
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	40013800 	.word	0x40013800
 80099d8:	40020000 	.word	0x40020000
 80099dc:	40020400 	.word	0x40020400
 80099e0:	40020800 	.word	0x40020800
 80099e4:	40020c00 	.word	0x40020c00
 80099e8:	40021000 	.word	0x40021000
 80099ec:	40021400 	.word	0x40021400
 80099f0:	40021800 	.word	0x40021800
 80099f4:	40021c00 	.word	0x40021c00
 80099f8:	40022000 	.word	0x40022000
 80099fc:	40022400 	.word	0x40022400
 8009a00:	40013c00 	.word	0x40013c00

08009a04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	691a      	ldr	r2, [r3, #16]
 8009a14:	887b      	ldrh	r3, [r7, #2]
 8009a16:	4013      	ands	r3, r2
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d002      	beq.n	8009a22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	73fb      	strb	r3, [r7, #15]
 8009a20:	e001      	b.n	8009a26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009a22:	2300      	movs	r3, #0
 8009a24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	807b      	strh	r3, [r7, #2]
 8009a40:	4613      	mov	r3, r2
 8009a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009a44:	787b      	ldrb	r3, [r7, #1]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d003      	beq.n	8009a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009a4a:	887a      	ldrh	r2, [r7, #2]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8009a50:	e003      	b.n	8009a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009a52:	887b      	ldrh	r3, [r7, #2]
 8009a54:	041a      	lsls	r2, r3, #16
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	619a      	str	r2, [r3, #24]
}
 8009a5a:	bf00      	nop
 8009a5c:	370c      	adds	r7, #12
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr
	...

08009a68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d101      	bne.n	8009a7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	e07f      	b.n	8009b7a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d106      	bne.n	8009a94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 f8a9 	bl	8009be6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2224      	movs	r2, #36	@ 0x24
 8009a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f022 0201 	bic.w	r2, r2, #1
 8009aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	685a      	ldr	r2, [r3, #4]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009ab8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	689a      	ldr	r2, [r3, #8]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009ac8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d107      	bne.n	8009ae2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	689a      	ldr	r2, [r3, #8]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009ade:	609a      	str	r2, [r3, #8]
 8009ae0:	e006      	b.n	8009af0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	689a      	ldr	r2, [r3, #8]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009aee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	2b02      	cmp	r3, #2
 8009af6:	d104      	bne.n	8009b02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009b00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	6859      	ldr	r1, [r3, #4]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8009b84 <HAL_I2C_Init+0x11c>)
 8009b0e:	430b      	orrs	r3, r1
 8009b10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68da      	ldr	r2, [r3, #12]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009b20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	691a      	ldr	r2, [r3, #16]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	695b      	ldr	r3, [r3, #20]
 8009b2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	430a      	orrs	r2, r1
 8009b3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	69d9      	ldr	r1, [r3, #28]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6a1a      	ldr	r2, [r3, #32]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	430a      	orrs	r2, r1
 8009b4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f042 0201 	orr.w	r2, r2, #1
 8009b5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2220      	movs	r2, #32
 8009b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009b78:	2300      	movs	r3, #0
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	02008000 	.word	0x02008000

08009b88 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d101      	bne.n	8009b9a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	e021      	b.n	8009bde <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2224      	movs	r2, #36	@ 0x24
 8009b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f022 0201 	bic.w	r2, r2, #1
 8009bb0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f821 	bl	8009bfa <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3708      	adds	r7, #8
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009be6:	b480      	push	{r7}
 8009be8:	b083      	sub	sp, #12
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8009bee:	bf00      	nop
 8009bf0:	370c      	adds	r7, #12
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr

08009bfa <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8009bfa:	b480      	push	{r7}
 8009bfc:	b083      	sub	sp, #12
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8009c02:	bf00      	nop
 8009c04:	370c      	adds	r7, #12
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
	...

08009c10 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b088      	sub	sp, #32
 8009c14:	af02      	add	r7, sp, #8
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	4608      	mov	r0, r1
 8009c1a:	4611      	mov	r1, r2
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	4603      	mov	r3, r0
 8009c20:	817b      	strh	r3, [r7, #10]
 8009c22:	460b      	mov	r3, r1
 8009c24:	813b      	strh	r3, [r7, #8]
 8009c26:	4613      	mov	r3, r2
 8009c28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	2b20      	cmp	r3, #32
 8009c34:	f040 80f9 	bne.w	8009e2a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c38:	6a3b      	ldr	r3, [r7, #32]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d002      	beq.n	8009c44 <HAL_I2C_Mem_Write+0x34>
 8009c3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d105      	bne.n	8009c50 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c4a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e0ed      	b.n	8009e2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d101      	bne.n	8009c5e <HAL_I2C_Mem_Write+0x4e>
 8009c5a:	2302      	movs	r3, #2
 8009c5c:	e0e6      	b.n	8009e2c <HAL_I2C_Mem_Write+0x21c>
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2201      	movs	r2, #1
 8009c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009c66:	f7fd ff8b 	bl	8007b80 <HAL_GetTick>
 8009c6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	2319      	movs	r3, #25
 8009c72:	2201      	movs	r2, #1
 8009c74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009c78:	68f8      	ldr	r0, [r7, #12]
 8009c7a:	f000 fad1 	bl	800a220 <I2C_WaitOnFlagUntilTimeout>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d001      	beq.n	8009c88 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	e0d1      	b.n	8009e2c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2221      	movs	r2, #33	@ 0x21
 8009c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2240      	movs	r2, #64	@ 0x40
 8009c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6a3a      	ldr	r2, [r7, #32]
 8009ca2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009cb0:	88f8      	ldrh	r0, [r7, #6]
 8009cb2:	893a      	ldrh	r2, [r7, #8]
 8009cb4:	8979      	ldrh	r1, [r7, #10]
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	9301      	str	r3, [sp, #4]
 8009cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cbc:	9300      	str	r3, [sp, #0]
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f000 f9e1 	bl	800a088 <I2C_RequestMemoryWrite>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d005      	beq.n	8009cd8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e0a9      	b.n	8009e2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	2bff      	cmp	r3, #255	@ 0xff
 8009ce0:	d90e      	bls.n	8009d00 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	22ff      	movs	r2, #255	@ 0xff
 8009ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009cec:	b2da      	uxtb	r2, r3
 8009cee:	8979      	ldrh	r1, [r7, #10]
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	9300      	str	r3, [sp, #0]
 8009cf4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f000 fc2d 	bl	800a558 <I2C_TransferConfig>
 8009cfe:	e00f      	b.n	8009d20 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d0e:	b2da      	uxtb	r2, r3
 8009d10:	8979      	ldrh	r1, [r7, #10]
 8009d12:	2300      	movs	r3, #0
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f000 fc1c 	bl	800a558 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d20:	697a      	ldr	r2, [r7, #20]
 8009d22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d24:	68f8      	ldr	r0, [r7, #12]
 8009d26:	f000 fabb 	bl	800a2a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d001      	beq.n	8009d34 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	e07b      	b.n	8009e2c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d38:	781a      	ldrb	r2, [r3, #0]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d44:	1c5a      	adds	r2, r3, #1
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	3b01      	subs	r3, #1
 8009d52:	b29a      	uxth	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	b29a      	uxth	r2, r3
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d034      	beq.n	8009dd8 <HAL_I2C_Mem_Write+0x1c8>
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d130      	bne.n	8009dd8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	9300      	str	r3, [sp, #0]
 8009d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	2180      	movs	r1, #128	@ 0x80
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f000 fa4d 	bl	800a220 <I2C_WaitOnFlagUntilTimeout>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d001      	beq.n	8009d90 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e04d      	b.n	8009e2c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	2bff      	cmp	r3, #255	@ 0xff
 8009d98:	d90e      	bls.n	8009db8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	22ff      	movs	r2, #255	@ 0xff
 8009d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009da4:	b2da      	uxtb	r2, r3
 8009da6:	8979      	ldrh	r1, [r7, #10]
 8009da8:	2300      	movs	r3, #0
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f000 fbd1 	bl	800a558 <I2C_TransferConfig>
 8009db6:	e00f      	b.n	8009dd8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009dc6:	b2da      	uxtb	r2, r3
 8009dc8:	8979      	ldrh	r1, [r7, #10]
 8009dca:	2300      	movs	r3, #0
 8009dcc:	9300      	str	r3, [sp, #0]
 8009dce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	f000 fbc0 	bl	800a558 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d19e      	bne.n	8009d20 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009de2:	697a      	ldr	r2, [r7, #20]
 8009de4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009de6:	68f8      	ldr	r0, [r7, #12]
 8009de8:	f000 fa9a 	bl	800a320 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e01a      	b.n	8009e2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2220      	movs	r2, #32
 8009dfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	6859      	ldr	r1, [r3, #4]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	4b0a      	ldr	r3, [pc, #40]	@ (8009e34 <HAL_I2C_Mem_Write+0x224>)
 8009e0a:	400b      	ands	r3, r1
 8009e0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2220      	movs	r2, #32
 8009e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009e26:	2300      	movs	r3, #0
 8009e28:	e000      	b.n	8009e2c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009e2a:	2302      	movs	r3, #2
  }
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3718      	adds	r7, #24
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	fe00e800 	.word	0xfe00e800

08009e38 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b088      	sub	sp, #32
 8009e3c:	af02      	add	r7, sp, #8
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	4608      	mov	r0, r1
 8009e42:	4611      	mov	r1, r2
 8009e44:	461a      	mov	r2, r3
 8009e46:	4603      	mov	r3, r0
 8009e48:	817b      	strh	r3, [r7, #10]
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	813b      	strh	r3, [r7, #8]
 8009e4e:	4613      	mov	r3, r2
 8009e50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	2b20      	cmp	r3, #32
 8009e5c:	f040 80fd 	bne.w	800a05a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e60:	6a3b      	ldr	r3, [r7, #32]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d002      	beq.n	8009e6c <HAL_I2C_Mem_Read+0x34>
 8009e66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d105      	bne.n	8009e78 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e72:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009e74:	2301      	movs	r3, #1
 8009e76:	e0f1      	b.n	800a05c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d101      	bne.n	8009e86 <HAL_I2C_Mem_Read+0x4e>
 8009e82:	2302      	movs	r3, #2
 8009e84:	e0ea      	b.n	800a05c <HAL_I2C_Mem_Read+0x224>
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009e8e:	f7fd fe77 	bl	8007b80 <HAL_GetTick>
 8009e92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	9300      	str	r3, [sp, #0]
 8009e98:	2319      	movs	r3, #25
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009ea0:	68f8      	ldr	r0, [r7, #12]
 8009ea2:	f000 f9bd 	bl	800a220 <I2C_WaitOnFlagUntilTimeout>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d001      	beq.n	8009eb0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	e0d5      	b.n	800a05c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2222      	movs	r2, #34	@ 0x22
 8009eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2240      	movs	r2, #64	@ 0x40
 8009ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6a3a      	ldr	r2, [r7, #32]
 8009eca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009ed8:	88f8      	ldrh	r0, [r7, #6]
 8009eda:	893a      	ldrh	r2, [r7, #8]
 8009edc:	8979      	ldrh	r1, [r7, #10]
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	9301      	str	r3, [sp, #4]
 8009ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee4:	9300      	str	r3, [sp, #0]
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f000 f921 	bl	800a130 <I2C_RequestMemoryRead>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d005      	beq.n	8009f00 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	e0ad      	b.n	800a05c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	2bff      	cmp	r3, #255	@ 0xff
 8009f08:	d90e      	bls.n	8009f28 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	22ff      	movs	r2, #255	@ 0xff
 8009f0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f14:	b2da      	uxtb	r2, r3
 8009f16:	8979      	ldrh	r1, [r7, #10]
 8009f18:	4b52      	ldr	r3, [pc, #328]	@ (800a064 <HAL_I2C_Mem_Read+0x22c>)
 8009f1a:	9300      	str	r3, [sp, #0]
 8009f1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f000 fb19 	bl	800a558 <I2C_TransferConfig>
 8009f26:	e00f      	b.n	8009f48 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f36:	b2da      	uxtb	r2, r3
 8009f38:	8979      	ldrh	r1, [r7, #10]
 8009f3a:	4b4a      	ldr	r3, [pc, #296]	@ (800a064 <HAL_I2C_Mem_Read+0x22c>)
 8009f3c:	9300      	str	r3, [sp, #0]
 8009f3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f000 fb08 	bl	800a558 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f4e:	2200      	movs	r2, #0
 8009f50:	2104      	movs	r1, #4
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	f000 f964 	bl	800a220 <I2C_WaitOnFlagUntilTimeout>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d001      	beq.n	8009f62 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e07c      	b.n	800a05c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f6c:	b2d2      	uxtb	r2, r2
 8009f6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f74:	1c5a      	adds	r2, r3, #1
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	b29a      	uxth	r2, r3
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d034      	beq.n	800a008 <HAL_I2C_Mem_Read+0x1d0>
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d130      	bne.n	800a008 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fac:	2200      	movs	r2, #0
 8009fae:	2180      	movs	r1, #128	@ 0x80
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f000 f935 	bl	800a220 <I2C_WaitOnFlagUntilTimeout>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d001      	beq.n	8009fc0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e04d      	b.n	800a05c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	2bff      	cmp	r3, #255	@ 0xff
 8009fc8:	d90e      	bls.n	8009fe8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	22ff      	movs	r2, #255	@ 0xff
 8009fce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fd4:	b2da      	uxtb	r2, r3
 8009fd6:	8979      	ldrh	r1, [r7, #10]
 8009fd8:	2300      	movs	r3, #0
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f000 fab9 	bl	800a558 <I2C_TransferConfig>
 8009fe6:	e00f      	b.n	800a008 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ff6:	b2da      	uxtb	r2, r3
 8009ff8:	8979      	ldrh	r1, [r7, #10]
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	9300      	str	r3, [sp, #0]
 8009ffe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	f000 faa8 	bl	800a558 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d19a      	bne.n	8009f48 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a012:	697a      	ldr	r2, [r7, #20]
 800a014:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f000 f982 	bl	800a320 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a022:	2301      	movs	r3, #1
 800a024:	e01a      	b.n	800a05c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2220      	movs	r2, #32
 800a02c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	6859      	ldr	r1, [r3, #4]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	4b0b      	ldr	r3, [pc, #44]	@ (800a068 <HAL_I2C_Mem_Read+0x230>)
 800a03a:	400b      	ands	r3, r1
 800a03c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2220      	movs	r2, #32
 800a042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2200      	movs	r2, #0
 800a052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a056:	2300      	movs	r3, #0
 800a058:	e000      	b.n	800a05c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a05a:	2302      	movs	r3, #2
  }
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3718      	adds	r7, #24
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}
 800a064:	80002400 	.word	0x80002400
 800a068:	fe00e800 	.word	0xfe00e800

0800a06c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a07a:	b2db      	uxtb	r3, r3
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b086      	sub	sp, #24
 800a08c:	af02      	add	r7, sp, #8
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	4608      	mov	r0, r1
 800a092:	4611      	mov	r1, r2
 800a094:	461a      	mov	r2, r3
 800a096:	4603      	mov	r3, r0
 800a098:	817b      	strh	r3, [r7, #10]
 800a09a:	460b      	mov	r3, r1
 800a09c:	813b      	strh	r3, [r7, #8]
 800a09e:	4613      	mov	r3, r2
 800a0a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a0a2:	88fb      	ldrh	r3, [r7, #6]
 800a0a4:	b2da      	uxtb	r2, r3
 800a0a6:	8979      	ldrh	r1, [r7, #10]
 800a0a8:	4b20      	ldr	r3, [pc, #128]	@ (800a12c <I2C_RequestMemoryWrite+0xa4>)
 800a0aa:	9300      	str	r3, [sp, #0]
 800a0ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f000 fa51 	bl	800a558 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0b6:	69fa      	ldr	r2, [r7, #28]
 800a0b8:	69b9      	ldr	r1, [r7, #24]
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f000 f8f0 	bl	800a2a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d001      	beq.n	800a0ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e02c      	b.n	800a124 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a0ca:	88fb      	ldrh	r3, [r7, #6]
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d105      	bne.n	800a0dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a0d0:	893b      	ldrh	r3, [r7, #8]
 800a0d2:	b2da      	uxtb	r2, r3
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	629a      	str	r2, [r3, #40]	@ 0x28
 800a0da:	e015      	b.n	800a108 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a0dc:	893b      	ldrh	r3, [r7, #8]
 800a0de:	0a1b      	lsrs	r3, r3, #8
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	b2da      	uxtb	r2, r3
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0ea:	69fa      	ldr	r2, [r7, #28]
 800a0ec:	69b9      	ldr	r1, [r7, #24]
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f000 f8d6 	bl	800a2a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e012      	b.n	800a124 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a0fe:	893b      	ldrh	r3, [r7, #8]
 800a100:	b2da      	uxtb	r2, r3
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	2200      	movs	r2, #0
 800a110:	2180      	movs	r1, #128	@ 0x80
 800a112:	68f8      	ldr	r0, [r7, #12]
 800a114:	f000 f884 	bl	800a220 <I2C_WaitOnFlagUntilTimeout>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d001      	beq.n	800a122 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	e000      	b.n	800a124 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3710      	adds	r7, #16
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	80002000 	.word	0x80002000

0800a130 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b086      	sub	sp, #24
 800a134:	af02      	add	r7, sp, #8
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	4608      	mov	r0, r1
 800a13a:	4611      	mov	r1, r2
 800a13c:	461a      	mov	r2, r3
 800a13e:	4603      	mov	r3, r0
 800a140:	817b      	strh	r3, [r7, #10]
 800a142:	460b      	mov	r3, r1
 800a144:	813b      	strh	r3, [r7, #8]
 800a146:	4613      	mov	r3, r2
 800a148:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a14a:	88fb      	ldrh	r3, [r7, #6]
 800a14c:	b2da      	uxtb	r2, r3
 800a14e:	8979      	ldrh	r1, [r7, #10]
 800a150:	4b20      	ldr	r3, [pc, #128]	@ (800a1d4 <I2C_RequestMemoryRead+0xa4>)
 800a152:	9300      	str	r3, [sp, #0]
 800a154:	2300      	movs	r3, #0
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	f000 f9fe 	bl	800a558 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a15c:	69fa      	ldr	r2, [r7, #28]
 800a15e:	69b9      	ldr	r1, [r7, #24]
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f000 f89d 	bl	800a2a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d001      	beq.n	800a170 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a16c:	2301      	movs	r3, #1
 800a16e:	e02c      	b.n	800a1ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a170:	88fb      	ldrh	r3, [r7, #6]
 800a172:	2b01      	cmp	r3, #1
 800a174:	d105      	bne.n	800a182 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a176:	893b      	ldrh	r3, [r7, #8]
 800a178:	b2da      	uxtb	r2, r3
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	629a      	str	r2, [r3, #40]	@ 0x28
 800a180:	e015      	b.n	800a1ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a182:	893b      	ldrh	r3, [r7, #8]
 800a184:	0a1b      	lsrs	r3, r3, #8
 800a186:	b29b      	uxth	r3, r3
 800a188:	b2da      	uxtb	r2, r3
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a190:	69fa      	ldr	r2, [r7, #28]
 800a192:	69b9      	ldr	r1, [r7, #24]
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f000 f883 	bl	800a2a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d001      	beq.n	800a1a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e012      	b.n	800a1ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a1a4:	893b      	ldrh	r3, [r7, #8]
 800a1a6:	b2da      	uxtb	r2, r3
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	2140      	movs	r1, #64	@ 0x40
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f000 f831 	bl	800a220 <I2C_WaitOnFlagUntilTimeout>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d001      	beq.n	800a1c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	e000      	b.n	800a1ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	80002000 	.word	0x80002000

0800a1d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	699b      	ldr	r3, [r3, #24]
 800a1e6:	f003 0302 	and.w	r3, r3, #2
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	d103      	bne.n	800a1f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	699b      	ldr	r3, [r3, #24]
 800a1fc:	f003 0301 	and.w	r3, r3, #1
 800a200:	2b01      	cmp	r3, #1
 800a202:	d007      	beq.n	800a214 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	699a      	ldr	r2, [r3, #24]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f042 0201 	orr.w	r2, r2, #1
 800a212:	619a      	str	r2, [r3, #24]
  }
}
 800a214:	bf00      	nop
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	603b      	str	r3, [r7, #0]
 800a22c:	4613      	mov	r3, r2
 800a22e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a230:	e022      	b.n	800a278 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a238:	d01e      	beq.n	800a278 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a23a:	f7fd fca1 	bl	8007b80 <HAL_GetTick>
 800a23e:	4602      	mov	r2, r0
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	1ad3      	subs	r3, r2, r3
 800a244:	683a      	ldr	r2, [r7, #0]
 800a246:	429a      	cmp	r2, r3
 800a248:	d302      	bcc.n	800a250 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d113      	bne.n	800a278 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a254:	f043 0220 	orr.w	r2, r3, #32
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2220      	movs	r2, #32
 800a260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2200      	movs	r2, #0
 800a268:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800a274:	2301      	movs	r3, #1
 800a276:	e00f      	b.n	800a298 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	699a      	ldr	r2, [r3, #24]
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	4013      	ands	r3, r2
 800a282:	68ba      	ldr	r2, [r7, #8]
 800a284:	429a      	cmp	r2, r3
 800a286:	bf0c      	ite	eq
 800a288:	2301      	moveq	r3, #1
 800a28a:	2300      	movne	r3, #0
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	461a      	mov	r2, r3
 800a290:	79fb      	ldrb	r3, [r7, #7]
 800a292:	429a      	cmp	r2, r3
 800a294:	d0cd      	beq.n	800a232 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a2ac:	e02c      	b.n	800a308 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	68b9      	ldr	r1, [r7, #8]
 800a2b2:	68f8      	ldr	r0, [r7, #12]
 800a2b4:	f000 f870 	bl	800a398 <I2C_IsErrorOccurred>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d001      	beq.n	800a2c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e02a      	b.n	800a318 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a2c8:	d01e      	beq.n	800a308 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2ca:	f7fd fc59 	bl	8007b80 <HAL_GetTick>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	1ad3      	subs	r3, r2, r3
 800a2d4:	68ba      	ldr	r2, [r7, #8]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d302      	bcc.n	800a2e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d113      	bne.n	800a308 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2e4:	f043 0220 	orr.w	r2, r3, #32
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2220      	movs	r2, #32
 800a2f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2200      	movs	r2, #0
 800a300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800a304:	2301      	movs	r3, #1
 800a306:	e007      	b.n	800a318 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	699b      	ldr	r3, [r3, #24]
 800a30e:	f003 0302 	and.w	r3, r3, #2
 800a312:	2b02      	cmp	r3, #2
 800a314:	d1cb      	bne.n	800a2ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3710      	adds	r7, #16
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a32c:	e028      	b.n	800a380 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	68b9      	ldr	r1, [r7, #8]
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f000 f830 	bl	800a398 <I2C_IsErrorOccurred>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d001      	beq.n	800a342 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a33e:	2301      	movs	r3, #1
 800a340:	e026      	b.n	800a390 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a342:	f7fd fc1d 	bl	8007b80 <HAL_GetTick>
 800a346:	4602      	mov	r2, r0
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	1ad3      	subs	r3, r2, r3
 800a34c:	68ba      	ldr	r2, [r7, #8]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d302      	bcc.n	800a358 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d113      	bne.n	800a380 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a35c:	f043 0220 	orr.w	r2, r3, #32
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2220      	movs	r2, #32
 800a368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2200      	movs	r2, #0
 800a370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2200      	movs	r2, #0
 800a378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	e007      	b.n	800a390 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	699b      	ldr	r3, [r3, #24]
 800a386:	f003 0320 	and.w	r3, r3, #32
 800a38a:	2b20      	cmp	r3, #32
 800a38c:	d1cf      	bne.n	800a32e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a38e:	2300      	movs	r3, #0
}
 800a390:	4618      	mov	r0, r3
 800a392:	3710      	adds	r7, #16
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b08a      	sub	sp, #40	@ 0x28
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	699b      	ldr	r3, [r3, #24]
 800a3b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	f003 0310 	and.w	r3, r3, #16
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d068      	beq.n	800a496 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2210      	movs	r2, #16
 800a3ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a3cc:	e049      	b.n	800a462 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3d4:	d045      	beq.n	800a462 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a3d6:	f7fd fbd3 	bl	8007b80 <HAL_GetTick>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	1ad3      	subs	r3, r2, r3
 800a3e0:	68ba      	ldr	r2, [r7, #8]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d302      	bcc.n	800a3ec <I2C_IsErrorOccurred+0x54>
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d13a      	bne.n	800a462 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a3fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	699b      	ldr	r3, [r3, #24]
 800a406:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a40a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a40e:	d121      	bne.n	800a454 <I2C_IsErrorOccurred+0xbc>
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a416:	d01d      	beq.n	800a454 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a418:	7cfb      	ldrb	r3, [r7, #19]
 800a41a:	2b20      	cmp	r3, #32
 800a41c:	d01a      	beq.n	800a454 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	685a      	ldr	r2, [r3, #4]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a42c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a42e:	f7fd fba7 	bl	8007b80 <HAL_GetTick>
 800a432:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a434:	e00e      	b.n	800a454 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a436:	f7fd fba3 	bl	8007b80 <HAL_GetTick>
 800a43a:	4602      	mov	r2, r0
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	1ad3      	subs	r3, r2, r3
 800a440:	2b19      	cmp	r3, #25
 800a442:	d907      	bls.n	800a454 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800a444:	6a3b      	ldr	r3, [r7, #32]
 800a446:	f043 0320 	orr.w	r3, r3, #32
 800a44a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a44c:	2301      	movs	r3, #1
 800a44e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800a452:	e006      	b.n	800a462 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	699b      	ldr	r3, [r3, #24]
 800a45a:	f003 0320 	and.w	r3, r3, #32
 800a45e:	2b20      	cmp	r3, #32
 800a460:	d1e9      	bne.n	800a436 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	699b      	ldr	r3, [r3, #24]
 800a468:	f003 0320 	and.w	r3, r3, #32
 800a46c:	2b20      	cmp	r3, #32
 800a46e:	d003      	beq.n	800a478 <I2C_IsErrorOccurred+0xe0>
 800a470:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a474:	2b00      	cmp	r3, #0
 800a476:	d0aa      	beq.n	800a3ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a478:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d103      	bne.n	800a488 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2220      	movs	r2, #32
 800a486:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a488:	6a3b      	ldr	r3, [r7, #32]
 800a48a:	f043 0304 	orr.w	r3, r3, #4
 800a48e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a490:	2301      	movs	r3, #1
 800a492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	699b      	ldr	r3, [r3, #24]
 800a49c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00b      	beq.n	800a4c0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a4a8:	6a3b      	ldr	r3, [r7, #32]
 800a4aa:	f043 0301 	orr.w	r3, r3, #1
 800a4ae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a4b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00b      	beq.n	800a4e2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a4ca:	6a3b      	ldr	r3, [r7, #32]
 800a4cc:	f043 0308 	orr.w	r3, r3, #8
 800a4d0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a4da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00b      	beq.n	800a504 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a4ec:	6a3b      	ldr	r3, [r7, #32]
 800a4ee:	f043 0302 	orr.w	r3, r3, #2
 800a4f2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a4fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800a504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d01c      	beq.n	800a546 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a50c:	68f8      	ldr	r0, [r7, #12]
 800a50e:	f7ff fe63 	bl	800a1d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	6859      	ldr	r1, [r3, #4]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	4b0d      	ldr	r3, [pc, #52]	@ (800a554 <I2C_IsErrorOccurred+0x1bc>)
 800a51e:	400b      	ands	r3, r1
 800a520:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a526:	6a3b      	ldr	r3, [r7, #32]
 800a528:	431a      	orrs	r2, r3
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2220      	movs	r2, #32
 800a532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2200      	movs	r2, #0
 800a53a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2200      	movs	r2, #0
 800a542:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800a546:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3728      	adds	r7, #40	@ 0x28
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	fe00e800 	.word	0xfe00e800

0800a558 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a558:	b480      	push	{r7}
 800a55a:	b087      	sub	sp, #28
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	607b      	str	r3, [r7, #4]
 800a562:	460b      	mov	r3, r1
 800a564:	817b      	strh	r3, [r7, #10]
 800a566:	4613      	mov	r3, r2
 800a568:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a56a:	897b      	ldrh	r3, [r7, #10]
 800a56c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a570:	7a7b      	ldrb	r3, [r7, #9]
 800a572:	041b      	lsls	r3, r3, #16
 800a574:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a578:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a57e:	6a3b      	ldr	r3, [r7, #32]
 800a580:	4313      	orrs	r3, r2
 800a582:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a586:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	685a      	ldr	r2, [r3, #4]
 800a58e:	6a3b      	ldr	r3, [r7, #32]
 800a590:	0d5b      	lsrs	r3, r3, #21
 800a592:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800a596:	4b08      	ldr	r3, [pc, #32]	@ (800a5b8 <I2C_TransferConfig+0x60>)
 800a598:	430b      	orrs	r3, r1
 800a59a:	43db      	mvns	r3, r3
 800a59c:	ea02 0103 	and.w	r1, r2, r3
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	697a      	ldr	r2, [r7, #20]
 800a5a6:	430a      	orrs	r2, r1
 800a5a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a5aa:	bf00      	nop
 800a5ac:	371c      	adds	r7, #28
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop
 800a5b8:	03ff63ff 	.word	0x03ff63ff

0800a5bc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d101      	bne.n	800a5ce <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e0bf      	b.n	800a74e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d106      	bne.n	800a5e8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f7f8 fd24 	bl	8003030 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2202      	movs	r2, #2
 800a5ec:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	699a      	ldr	r2, [r3, #24]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800a5fe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	6999      	ldr	r1, [r3, #24]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	685a      	ldr	r2, [r3, #4]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a614:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	430a      	orrs	r2, r1
 800a622:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	6899      	ldr	r1, [r3, #8]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	4b4a      	ldr	r3, [pc, #296]	@ (800a758 <HAL_LTDC_Init+0x19c>)
 800a630:	400b      	ands	r3, r1
 800a632:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	695b      	ldr	r3, [r3, #20]
 800a638:	041b      	lsls	r3, r3, #16
 800a63a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	6899      	ldr	r1, [r3, #8]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	699a      	ldr	r2, [r3, #24]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	431a      	orrs	r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	430a      	orrs	r2, r1
 800a650:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	68d9      	ldr	r1, [r3, #12]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	4b3e      	ldr	r3, [pc, #248]	@ (800a758 <HAL_LTDC_Init+0x19c>)
 800a65e:	400b      	ands	r3, r1
 800a660:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	69db      	ldr	r3, [r3, #28]
 800a666:	041b      	lsls	r3, r3, #16
 800a668:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	68d9      	ldr	r1, [r3, #12]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6a1a      	ldr	r2, [r3, #32]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	431a      	orrs	r2, r3
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	430a      	orrs	r2, r1
 800a67e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	6919      	ldr	r1, [r3, #16]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	4b33      	ldr	r3, [pc, #204]	@ (800a758 <HAL_LTDC_Init+0x19c>)
 800a68c:	400b      	ands	r3, r1
 800a68e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a694:	041b      	lsls	r3, r3, #16
 800a696:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	6919      	ldr	r1, [r3, #16]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	431a      	orrs	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	430a      	orrs	r2, r1
 800a6ac:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	6959      	ldr	r1, [r3, #20]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	4b27      	ldr	r3, [pc, #156]	@ (800a758 <HAL_LTDC_Init+0x19c>)
 800a6ba:	400b      	ands	r3, r1
 800a6bc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6c2:	041b      	lsls	r3, r3, #16
 800a6c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	6959      	ldr	r1, [r3, #20]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	431a      	orrs	r2, r3
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	430a      	orrs	r2, r1
 800a6da:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a6e2:	021b      	lsls	r3, r3, #8
 800a6e4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800a6ec:	041b      	lsls	r3, r3, #16
 800a6ee:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800a6fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a706:	68ba      	ldr	r2, [r7, #8]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	4313      	orrs	r3, r2
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800a712:	431a      	orrs	r2, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	430a      	orrs	r2, r1
 800a71a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f042 0206 	orr.w	r2, r2, #6
 800a72a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	699a      	ldr	r2, [r3, #24]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f042 0201 	orr.w	r2, r2, #1
 800a73a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	f000f800 	.word	0xf000f800

0800a75c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a76a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a772:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f003 0304 	and.w	r3, r3, #4
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d023      	beq.n	800a7c6 <HAL_LTDC_IRQHandler+0x6a>
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	f003 0304 	and.w	r3, r3, #4
 800a784:	2b00      	cmp	r3, #0
 800a786:	d01e      	beq.n	800a7c6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f022 0204 	bic.w	r2, r2, #4
 800a796:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	2204      	movs	r2, #4
 800a79e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a7a6:	f043 0201 	orr.w	r2, r3, #1
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2204      	movs	r2, #4
 800a7b4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 f86f 	bl	800a8a4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f003 0302 	and.w	r3, r3, #2
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d023      	beq.n	800a818 <HAL_LTDC_IRQHandler+0xbc>
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	f003 0302 	and.w	r3, r3, #2
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d01e      	beq.n	800a818 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f022 0202 	bic.w	r2, r2, #2
 800a7e8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2202      	movs	r2, #2
 800a7f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a7f8:	f043 0202 	orr.w	r2, r3, #2
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2204      	movs	r2, #4
 800a806:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 f846 	bl	800a8a4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f003 0301 	and.w	r3, r3, #1
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d01b      	beq.n	800a85a <HAL_LTDC_IRQHandler+0xfe>
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	f003 0301 	and.w	r3, r3, #1
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d016      	beq.n	800a85a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f022 0201 	bic.w	r2, r2, #1
 800a83a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2201      	movs	r2, #1
 800a842:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 f82f 	bl	800a8b8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f003 0308 	and.w	r3, r3, #8
 800a860:	2b00      	cmp	r3, #0
 800a862:	d01b      	beq.n	800a89c <HAL_LTDC_IRQHandler+0x140>
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	f003 0308 	and.w	r3, r3, #8
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d016      	beq.n	800a89c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f022 0208 	bic.w	r2, r2, #8
 800a87c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2208      	movs	r2, #8
 800a884:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2201      	movs	r2, #1
 800a88a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 f818 	bl	800a8cc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800a89c:	bf00      	nop
 800a89e:	3710      	adds	r7, #16
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800a8ac:	bf00      	nop
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800a8c0:	bf00      	nop
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800a8d4:	bf00      	nop
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a8e0:	b5b0      	push	{r4, r5, r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d101      	bne.n	800a8fa <HAL_LTDC_ConfigLayer+0x1a>
 800a8f6:	2302      	movs	r3, #2
 800a8f8:	e02c      	b.n	800a954 <HAL_LTDC_ConfigLayer+0x74>
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2202      	movs	r2, #2
 800a906:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2134      	movs	r1, #52	@ 0x34
 800a910:	fb01 f303 	mul.w	r3, r1, r3
 800a914:	4413      	add	r3, r2
 800a916:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	4614      	mov	r4, r2
 800a91e:	461d      	mov	r5, r3
 800a920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a92a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a92c:	682b      	ldr	r3, [r5, #0]
 800a92e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	68b9      	ldr	r1, [r7, #8]
 800a934:	68f8      	ldr	r0, [r7, #12]
 800a936:	f000 f81f 	bl	800a978 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2201      	movs	r2, #1
 800a940:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2201      	movs	r2, #1
 800a946:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bdb0      	pop	{r4, r5, r7, pc}

0800a95c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800a96a:	b2db      	uxtb	r3, r3
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	370c      	adds	r7, #12
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr

0800a978 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a978:	b480      	push	{r7}
 800a97a:	b089      	sub	sp, #36	@ 0x24
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	685a      	ldr	r2, [r3, #4]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	0c1b      	lsrs	r3, r3, #16
 800a990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a994:	4413      	add	r3, r2
 800a996:	041b      	lsls	r3, r3, #16
 800a998:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	01db      	lsls	r3, r3, #7
 800a9a4:	4413      	add	r3, r2
 800a9a6:	3384      	adds	r3, #132	@ 0x84
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	6812      	ldr	r2, [r2, #0]
 800a9ae:	4611      	mov	r1, r2
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	01d2      	lsls	r2, r2, #7
 800a9b4:	440a      	add	r2, r1
 800a9b6:	3284      	adds	r2, #132	@ 0x84
 800a9b8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a9bc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	0c1b      	lsrs	r3, r3, #16
 800a9ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a9ce:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a9d0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	01db      	lsls	r3, r3, #7
 800a9dc:	440b      	add	r3, r1
 800a9de:	3384      	adds	r3, #132	@ 0x84
 800a9e0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a9e6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	68da      	ldr	r2, [r3, #12]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a9f6:	4413      	add	r3, r2
 800a9f8:	041b      	lsls	r3, r3, #16
 800a9fa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	461a      	mov	r2, r3
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	01db      	lsls	r3, r3, #7
 800aa06:	4413      	add	r3, r2
 800aa08:	3384      	adds	r3, #132	@ 0x84
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	6812      	ldr	r2, [r2, #0]
 800aa10:	4611      	mov	r1, r2
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	01d2      	lsls	r2, r2, #7
 800aa16:	440a      	add	r2, r1
 800aa18:	3284      	adds	r2, #132	@ 0x84
 800aa1a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800aa1e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	689a      	ldr	r2, [r3, #8]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa2e:	4413      	add	r3, r2
 800aa30:	1c5a      	adds	r2, r3, #1
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4619      	mov	r1, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	01db      	lsls	r3, r3, #7
 800aa3c:	440b      	add	r3, r1
 800aa3e:	3384      	adds	r3, #132	@ 0x84
 800aa40:	4619      	mov	r1, r3
 800aa42:	69fb      	ldr	r3, [r7, #28]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	01db      	lsls	r3, r3, #7
 800aa52:	4413      	add	r3, r2
 800aa54:	3384      	adds	r3, #132	@ 0x84
 800aa56:	691b      	ldr	r3, [r3, #16]
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	6812      	ldr	r2, [r2, #0]
 800aa5c:	4611      	mov	r1, r2
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	01d2      	lsls	r2, r2, #7
 800aa62:	440a      	add	r2, r1
 800aa64:	3284      	adds	r2, #132	@ 0x84
 800aa66:	f023 0307 	bic.w	r3, r3, #7
 800aa6a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	461a      	mov	r2, r3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	01db      	lsls	r3, r3, #7
 800aa76:	4413      	add	r3, r2
 800aa78:	3384      	adds	r3, #132	@ 0x84
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	691b      	ldr	r3, [r3, #16]
 800aa80:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800aa88:	021b      	lsls	r3, r3, #8
 800aa8a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800aa92:	041b      	lsls	r3, r3, #16
 800aa94:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	699b      	ldr	r3, [r3, #24]
 800aa9a:	061b      	lsls	r3, r3, #24
 800aa9c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	01db      	lsls	r3, r3, #7
 800aaa8:	4413      	add	r3, r2
 800aaaa:	3384      	adds	r3, #132	@ 0x84
 800aaac:	699b      	ldr	r3, [r3, #24]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	461a      	mov	r2, r3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	01db      	lsls	r3, r3, #7
 800aab8:	4413      	add	r3, r2
 800aaba:	3384      	adds	r3, #132	@ 0x84
 800aabc:	461a      	mov	r2, r3
 800aabe:	2300      	movs	r3, #0
 800aac0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800aac8:	461a      	mov	r2, r3
 800aaca:	69fb      	ldr	r3, [r7, #28]
 800aacc:	431a      	orrs	r2, r3
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	431a      	orrs	r2, r3
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4619      	mov	r1, r3
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	01db      	lsls	r3, r3, #7
 800aadc:	440b      	add	r3, r1
 800aade:	3384      	adds	r3, #132	@ 0x84
 800aae0:	4619      	mov	r1, r3
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	4313      	orrs	r3, r2
 800aae6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	461a      	mov	r2, r3
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	01db      	lsls	r3, r3, #7
 800aaf2:	4413      	add	r3, r2
 800aaf4:	3384      	adds	r3, #132	@ 0x84
 800aaf6:	695b      	ldr	r3, [r3, #20]
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	6812      	ldr	r2, [r2, #0]
 800aafc:	4611      	mov	r1, r2
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	01d2      	lsls	r2, r2, #7
 800ab02:	440a      	add	r2, r1
 800ab04:	3284      	adds	r2, #132	@ 0x84
 800ab06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ab0a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	461a      	mov	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	01db      	lsls	r3, r3, #7
 800ab16:	4413      	add	r3, r2
 800ab18:	3384      	adds	r3, #132	@ 0x84
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	695b      	ldr	r3, [r3, #20]
 800ab20:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	461a      	mov	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	01db      	lsls	r3, r3, #7
 800ab2c:	4413      	add	r3, r2
 800ab2e:	3384      	adds	r3, #132	@ 0x84
 800ab30:	69da      	ldr	r2, [r3, #28]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4619      	mov	r1, r3
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	01db      	lsls	r3, r3, #7
 800ab3c:	440b      	add	r3, r1
 800ab3e:	3384      	adds	r3, #132	@ 0x84
 800ab40:	4619      	mov	r1, r3
 800ab42:	4b58      	ldr	r3, [pc, #352]	@ (800aca4 <LTDC_SetConfig+0x32c>)
 800ab44:	4013      	ands	r3, r2
 800ab46:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	69da      	ldr	r2, [r3, #28]
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	6a1b      	ldr	r3, [r3, #32]
 800ab50:	68f9      	ldr	r1, [r7, #12]
 800ab52:	6809      	ldr	r1, [r1, #0]
 800ab54:	4608      	mov	r0, r1
 800ab56:	6879      	ldr	r1, [r7, #4]
 800ab58:	01c9      	lsls	r1, r1, #7
 800ab5a:	4401      	add	r1, r0
 800ab5c:	3184      	adds	r1, #132	@ 0x84
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	461a      	mov	r2, r3
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	01db      	lsls	r3, r3, #7
 800ab6c:	4413      	add	r3, r2
 800ab6e:	3384      	adds	r3, #132	@ 0x84
 800ab70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	461a      	mov	r2, r3
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	01db      	lsls	r3, r3, #7
 800ab7c:	4413      	add	r3, r2
 800ab7e:	3384      	adds	r3, #132	@ 0x84
 800ab80:	461a      	mov	r2, r3
 800ab82:	2300      	movs	r3, #0
 800ab84:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	01db      	lsls	r3, r3, #7
 800ab90:	4413      	add	r3, r2
 800ab92:	3384      	adds	r3, #132	@ 0x84
 800ab94:	461a      	mov	r2, r3
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab9a:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	691b      	ldr	r3, [r3, #16]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d102      	bne.n	800abaa <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800aba4:	2304      	movs	r3, #4
 800aba6:	61fb      	str	r3, [r7, #28]
 800aba8:	e01b      	b.n	800abe2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	691b      	ldr	r3, [r3, #16]
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d102      	bne.n	800abb8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800abb2:	2303      	movs	r3, #3
 800abb4:	61fb      	str	r3, [r7, #28]
 800abb6:	e014      	b.n	800abe2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	2b04      	cmp	r3, #4
 800abbe:	d00b      	beq.n	800abd8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	d007      	beq.n	800abd8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800abcc:	2b03      	cmp	r3, #3
 800abce:	d003      	beq.n	800abd8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800abd4:	2b07      	cmp	r3, #7
 800abd6:	d102      	bne.n	800abde <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800abd8:	2302      	movs	r3, #2
 800abda:	61fb      	str	r3, [r7, #28]
 800abdc:	e001      	b.n	800abe2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800abde:	2301      	movs	r3, #1
 800abe0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	461a      	mov	r2, r3
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	01db      	lsls	r3, r3, #7
 800abec:	4413      	add	r3, r2
 800abee:	3384      	adds	r3, #132	@ 0x84
 800abf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	6812      	ldr	r2, [r2, #0]
 800abf6:	4611      	mov	r1, r2
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	01d2      	lsls	r2, r2, #7
 800abfc:	440a      	add	r2, r1
 800abfe:	3284      	adds	r2, #132	@ 0x84
 800ac00:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800ac04:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac0a:	69fa      	ldr	r2, [r7, #28]
 800ac0c:	fb02 f303 	mul.w	r3, r2, r3
 800ac10:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	6859      	ldr	r1, [r3, #4]
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	1acb      	subs	r3, r1, r3
 800ac1c:	69f9      	ldr	r1, [r7, #28]
 800ac1e:	fb01 f303 	mul.w	r3, r1, r3
 800ac22:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800ac24:	68f9      	ldr	r1, [r7, #12]
 800ac26:	6809      	ldr	r1, [r1, #0]
 800ac28:	4608      	mov	r0, r1
 800ac2a:	6879      	ldr	r1, [r7, #4]
 800ac2c:	01c9      	lsls	r1, r1, #7
 800ac2e:	4401      	add	r1, r0
 800ac30:	3184      	adds	r1, #132	@ 0x84
 800ac32:	4313      	orrs	r3, r2
 800ac34:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	01db      	lsls	r3, r3, #7
 800ac40:	4413      	add	r3, r2
 800ac42:	3384      	adds	r3, #132	@ 0x84
 800ac44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	01db      	lsls	r3, r3, #7
 800ac50:	440b      	add	r3, r1
 800ac52:	3384      	adds	r3, #132	@ 0x84
 800ac54:	4619      	mov	r1, r3
 800ac56:	4b14      	ldr	r3, [pc, #80]	@ (800aca8 <LTDC_SetConfig+0x330>)
 800ac58:	4013      	ands	r3, r2
 800ac5a:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	461a      	mov	r2, r3
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	01db      	lsls	r3, r3, #7
 800ac66:	4413      	add	r3, r2
 800ac68:	3384      	adds	r3, #132	@ 0x84
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac70:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	461a      	mov	r2, r3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	01db      	lsls	r3, r3, #7
 800ac7c:	4413      	add	r3, r2
 800ac7e:	3384      	adds	r3, #132	@ 0x84
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	68fa      	ldr	r2, [r7, #12]
 800ac84:	6812      	ldr	r2, [r2, #0]
 800ac86:	4611      	mov	r1, r2
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	01d2      	lsls	r2, r2, #7
 800ac8c:	440a      	add	r2, r1
 800ac8e:	3284      	adds	r2, #132	@ 0x84
 800ac90:	f043 0301 	orr.w	r3, r3, #1
 800ac94:	6013      	str	r3, [r2, #0]
}
 800ac96:	bf00      	nop
 800ac98:	3724      	adds	r7, #36	@ 0x24
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr
 800aca2:	bf00      	nop
 800aca4:	fffff8f8 	.word	0xfffff8f8
 800aca8:	fffff800 	.word	0xfffff800

0800acac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800acac:	b480      	push	{r7}
 800acae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800acb0:	4b05      	ldr	r3, [pc, #20]	@ (800acc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a04      	ldr	r2, [pc, #16]	@ (800acc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800acb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800acba:	6013      	str	r3, [r2, #0]
}
 800acbc:	bf00      	nop
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop
 800acc8:	40007000 	.word	0x40007000

0800accc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800acd2:	2300      	movs	r3, #0
 800acd4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800acd6:	4b23      	ldr	r3, [pc, #140]	@ (800ad64 <HAL_PWREx_EnableOverDrive+0x98>)
 800acd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acda:	4a22      	ldr	r2, [pc, #136]	@ (800ad64 <HAL_PWREx_EnableOverDrive+0x98>)
 800acdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ace0:	6413      	str	r3, [r2, #64]	@ 0x40
 800ace2:	4b20      	ldr	r3, [pc, #128]	@ (800ad64 <HAL_PWREx_EnableOverDrive+0x98>)
 800ace4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ace6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800acea:	603b      	str	r3, [r7, #0]
 800acec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800acee:	4b1e      	ldr	r3, [pc, #120]	@ (800ad68 <HAL_PWREx_EnableOverDrive+0x9c>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a1d      	ldr	r2, [pc, #116]	@ (800ad68 <HAL_PWREx_EnableOverDrive+0x9c>)
 800acf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800acf8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800acfa:	f7fc ff41 	bl	8007b80 <HAL_GetTick>
 800acfe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ad00:	e009      	b.n	800ad16 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ad02:	f7fc ff3d 	bl	8007b80 <HAL_GetTick>
 800ad06:	4602      	mov	r2, r0
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	1ad3      	subs	r3, r2, r3
 800ad0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ad10:	d901      	bls.n	800ad16 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800ad12:	2303      	movs	r3, #3
 800ad14:	e022      	b.n	800ad5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ad16:	4b14      	ldr	r3, [pc, #80]	@ (800ad68 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad22:	d1ee      	bne.n	800ad02 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ad24:	4b10      	ldr	r3, [pc, #64]	@ (800ad68 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a0f      	ldr	r2, [pc, #60]	@ (800ad68 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ad2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad2e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ad30:	f7fc ff26 	bl	8007b80 <HAL_GetTick>
 800ad34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ad36:	e009      	b.n	800ad4c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ad38:	f7fc ff22 	bl	8007b80 <HAL_GetTick>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	1ad3      	subs	r3, r2, r3
 800ad42:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ad46:	d901      	bls.n	800ad4c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800ad48:	2303      	movs	r3, #3
 800ad4a:	e007      	b.n	800ad5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ad4c:	4b06      	ldr	r3, [pc, #24]	@ (800ad68 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad58:	d1ee      	bne.n	800ad38 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800ad5a:	2300      	movs	r3, #0
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3708      	adds	r7, #8
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	40023800 	.word	0x40023800
 800ad68:	40007000 	.word	0x40007000

0800ad6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b086      	sub	sp, #24
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800ad74:	2300      	movs	r3, #0
 800ad76:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d101      	bne.n	800ad82 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e291      	b.n	800b2a6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f003 0301 	and.w	r3, r3, #1
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f000 8087 	beq.w	800ae9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ad90:	4b96      	ldr	r3, [pc, #600]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800ad92:	689b      	ldr	r3, [r3, #8]
 800ad94:	f003 030c 	and.w	r3, r3, #12
 800ad98:	2b04      	cmp	r3, #4
 800ad9a:	d00c      	beq.n	800adb6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ad9c:	4b93      	ldr	r3, [pc, #588]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	f003 030c 	and.w	r3, r3, #12
 800ada4:	2b08      	cmp	r3, #8
 800ada6:	d112      	bne.n	800adce <HAL_RCC_OscConfig+0x62>
 800ada8:	4b90      	ldr	r3, [pc, #576]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800adb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800adb4:	d10b      	bne.n	800adce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800adb6:	4b8d      	ldr	r3, [pc, #564]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d06c      	beq.n	800ae9c <HAL_RCC_OscConfig+0x130>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d168      	bne.n	800ae9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800adca:	2301      	movs	r3, #1
 800adcc:	e26b      	b.n	800b2a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800add6:	d106      	bne.n	800ade6 <HAL_RCC_OscConfig+0x7a>
 800add8:	4b84      	ldr	r3, [pc, #528]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a83      	ldr	r2, [pc, #524]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800adde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ade2:	6013      	str	r3, [r2, #0]
 800ade4:	e02e      	b.n	800ae44 <HAL_RCC_OscConfig+0xd8>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d10c      	bne.n	800ae08 <HAL_RCC_OscConfig+0x9c>
 800adee:	4b7f      	ldr	r3, [pc, #508]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a7e      	ldr	r2, [pc, #504]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800adf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800adf8:	6013      	str	r3, [r2, #0]
 800adfa:	4b7c      	ldr	r3, [pc, #496]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a7b      	ldr	r2, [pc, #492]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800ae00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ae04:	6013      	str	r3, [r2, #0]
 800ae06:	e01d      	b.n	800ae44 <HAL_RCC_OscConfig+0xd8>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ae10:	d10c      	bne.n	800ae2c <HAL_RCC_OscConfig+0xc0>
 800ae12:	4b76      	ldr	r3, [pc, #472]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a75      	ldr	r2, [pc, #468]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800ae18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ae1c:	6013      	str	r3, [r2, #0]
 800ae1e:	4b73      	ldr	r3, [pc, #460]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4a72      	ldr	r2, [pc, #456]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800ae24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ae28:	6013      	str	r3, [r2, #0]
 800ae2a:	e00b      	b.n	800ae44 <HAL_RCC_OscConfig+0xd8>
 800ae2c:	4b6f      	ldr	r3, [pc, #444]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a6e      	ldr	r2, [pc, #440]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800ae32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ae36:	6013      	str	r3, [r2, #0]
 800ae38:	4b6c      	ldr	r3, [pc, #432]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a6b      	ldr	r2, [pc, #428]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800ae3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ae42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d013      	beq.n	800ae74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae4c:	f7fc fe98 	bl	8007b80 <HAL_GetTick>
 800ae50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae52:	e008      	b.n	800ae66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ae54:	f7fc fe94 	bl	8007b80 <HAL_GetTick>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	1ad3      	subs	r3, r2, r3
 800ae5e:	2b64      	cmp	r3, #100	@ 0x64
 800ae60:	d901      	bls.n	800ae66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ae62:	2303      	movs	r3, #3
 800ae64:	e21f      	b.n	800b2a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae66:	4b61      	ldr	r3, [pc, #388]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d0f0      	beq.n	800ae54 <HAL_RCC_OscConfig+0xe8>
 800ae72:	e014      	b.n	800ae9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae74:	f7fc fe84 	bl	8007b80 <HAL_GetTick>
 800ae78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ae7a:	e008      	b.n	800ae8e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ae7c:	f7fc fe80 	bl	8007b80 <HAL_GetTick>
 800ae80:	4602      	mov	r2, r0
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	2b64      	cmp	r3, #100	@ 0x64
 800ae88:	d901      	bls.n	800ae8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800ae8a:	2303      	movs	r3, #3
 800ae8c:	e20b      	b.n	800b2a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ae8e:	4b57      	ldr	r3, [pc, #348]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d1f0      	bne.n	800ae7c <HAL_RCC_OscConfig+0x110>
 800ae9a:	e000      	b.n	800ae9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f003 0302 	and.w	r3, r3, #2
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d069      	beq.n	800af7e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800aeaa:	4b50      	ldr	r3, [pc, #320]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	f003 030c 	and.w	r3, r3, #12
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d00b      	beq.n	800aece <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aeb6:	4b4d      	ldr	r3, [pc, #308]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	f003 030c 	and.w	r3, r3, #12
 800aebe:	2b08      	cmp	r3, #8
 800aec0:	d11c      	bne.n	800aefc <HAL_RCC_OscConfig+0x190>
 800aec2:	4b4a      	ldr	r3, [pc, #296]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d116      	bne.n	800aefc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aece:	4b47      	ldr	r3, [pc, #284]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f003 0302 	and.w	r3, r3, #2
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d005      	beq.n	800aee6 <HAL_RCC_OscConfig+0x17a>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d001      	beq.n	800aee6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800aee2:	2301      	movs	r3, #1
 800aee4:	e1df      	b.n	800b2a6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aee6:	4b41      	ldr	r3, [pc, #260]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	691b      	ldr	r3, [r3, #16]
 800aef2:	00db      	lsls	r3, r3, #3
 800aef4:	493d      	ldr	r1, [pc, #244]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800aef6:	4313      	orrs	r3, r2
 800aef8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aefa:	e040      	b.n	800af7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d023      	beq.n	800af4c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800af04:	4b39      	ldr	r3, [pc, #228]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a38      	ldr	r2, [pc, #224]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800af0a:	f043 0301 	orr.w	r3, r3, #1
 800af0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af10:	f7fc fe36 	bl	8007b80 <HAL_GetTick>
 800af14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af16:	e008      	b.n	800af2a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800af18:	f7fc fe32 	bl	8007b80 <HAL_GetTick>
 800af1c:	4602      	mov	r2, r0
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	1ad3      	subs	r3, r2, r3
 800af22:	2b02      	cmp	r3, #2
 800af24:	d901      	bls.n	800af2a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800af26:	2303      	movs	r3, #3
 800af28:	e1bd      	b.n	800b2a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af2a:	4b30      	ldr	r3, [pc, #192]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f003 0302 	and.w	r3, r3, #2
 800af32:	2b00      	cmp	r3, #0
 800af34:	d0f0      	beq.n	800af18 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af36:	4b2d      	ldr	r3, [pc, #180]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	00db      	lsls	r3, r3, #3
 800af44:	4929      	ldr	r1, [pc, #164]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800af46:	4313      	orrs	r3, r2
 800af48:	600b      	str	r3, [r1, #0]
 800af4a:	e018      	b.n	800af7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800af4c:	4b27      	ldr	r3, [pc, #156]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a26      	ldr	r2, [pc, #152]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800af52:	f023 0301 	bic.w	r3, r3, #1
 800af56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af58:	f7fc fe12 	bl	8007b80 <HAL_GetTick>
 800af5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800af5e:	e008      	b.n	800af72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800af60:	f7fc fe0e 	bl	8007b80 <HAL_GetTick>
 800af64:	4602      	mov	r2, r0
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	1ad3      	subs	r3, r2, r3
 800af6a:	2b02      	cmp	r3, #2
 800af6c:	d901      	bls.n	800af72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800af6e:	2303      	movs	r3, #3
 800af70:	e199      	b.n	800b2a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800af72:	4b1e      	ldr	r3, [pc, #120]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f003 0302 	and.w	r3, r3, #2
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d1f0      	bne.n	800af60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f003 0308 	and.w	r3, r3, #8
 800af86:	2b00      	cmp	r3, #0
 800af88:	d038      	beq.n	800affc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	695b      	ldr	r3, [r3, #20]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d019      	beq.n	800afc6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800af92:	4b16      	ldr	r3, [pc, #88]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800af94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af96:	4a15      	ldr	r2, [pc, #84]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800af98:	f043 0301 	orr.w	r3, r3, #1
 800af9c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af9e:	f7fc fdef 	bl	8007b80 <HAL_GetTick>
 800afa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800afa4:	e008      	b.n	800afb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800afa6:	f7fc fdeb 	bl	8007b80 <HAL_GetTick>
 800afaa:	4602      	mov	r2, r0
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	1ad3      	subs	r3, r2, r3
 800afb0:	2b02      	cmp	r3, #2
 800afb2:	d901      	bls.n	800afb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800afb4:	2303      	movs	r3, #3
 800afb6:	e176      	b.n	800b2a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800afb8:	4b0c      	ldr	r3, [pc, #48]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800afba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afbc:	f003 0302 	and.w	r3, r3, #2
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d0f0      	beq.n	800afa6 <HAL_RCC_OscConfig+0x23a>
 800afc4:	e01a      	b.n	800affc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800afc6:	4b09      	ldr	r3, [pc, #36]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800afc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afca:	4a08      	ldr	r2, [pc, #32]	@ (800afec <HAL_RCC_OscConfig+0x280>)
 800afcc:	f023 0301 	bic.w	r3, r3, #1
 800afd0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afd2:	f7fc fdd5 	bl	8007b80 <HAL_GetTick>
 800afd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800afd8:	e00a      	b.n	800aff0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800afda:	f7fc fdd1 	bl	8007b80 <HAL_GetTick>
 800afde:	4602      	mov	r2, r0
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	1ad3      	subs	r3, r2, r3
 800afe4:	2b02      	cmp	r3, #2
 800afe6:	d903      	bls.n	800aff0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800afe8:	2303      	movs	r3, #3
 800afea:	e15c      	b.n	800b2a6 <HAL_RCC_OscConfig+0x53a>
 800afec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aff0:	4b91      	ldr	r3, [pc, #580]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800aff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aff4:	f003 0302 	and.w	r3, r3, #2
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d1ee      	bne.n	800afda <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f003 0304 	and.w	r3, r3, #4
 800b004:	2b00      	cmp	r3, #0
 800b006:	f000 80a4 	beq.w	800b152 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b00a:	4b8b      	ldr	r3, [pc, #556]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b00c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b00e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b012:	2b00      	cmp	r3, #0
 800b014:	d10d      	bne.n	800b032 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b016:	4b88      	ldr	r3, [pc, #544]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b01a:	4a87      	ldr	r2, [pc, #540]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b01c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b020:	6413      	str	r3, [r2, #64]	@ 0x40
 800b022:	4b85      	ldr	r3, [pc, #532]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b02a:	60bb      	str	r3, [r7, #8]
 800b02c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b02e:	2301      	movs	r3, #1
 800b030:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b032:	4b82      	ldr	r3, [pc, #520]	@ (800b23c <HAL_RCC_OscConfig+0x4d0>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d118      	bne.n	800b070 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b03e:	4b7f      	ldr	r3, [pc, #508]	@ (800b23c <HAL_RCC_OscConfig+0x4d0>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4a7e      	ldr	r2, [pc, #504]	@ (800b23c <HAL_RCC_OscConfig+0x4d0>)
 800b044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b04a:	f7fc fd99 	bl	8007b80 <HAL_GetTick>
 800b04e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b050:	e008      	b.n	800b064 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b052:	f7fc fd95 	bl	8007b80 <HAL_GetTick>
 800b056:	4602      	mov	r2, r0
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	1ad3      	subs	r3, r2, r3
 800b05c:	2b64      	cmp	r3, #100	@ 0x64
 800b05e:	d901      	bls.n	800b064 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b060:	2303      	movs	r3, #3
 800b062:	e120      	b.n	800b2a6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b064:	4b75      	ldr	r3, [pc, #468]	@ (800b23c <HAL_RCC_OscConfig+0x4d0>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d0f0      	beq.n	800b052 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	2b01      	cmp	r3, #1
 800b076:	d106      	bne.n	800b086 <HAL_RCC_OscConfig+0x31a>
 800b078:	4b6f      	ldr	r3, [pc, #444]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b07a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b07c:	4a6e      	ldr	r2, [pc, #440]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b07e:	f043 0301 	orr.w	r3, r3, #1
 800b082:	6713      	str	r3, [r2, #112]	@ 0x70
 800b084:	e02d      	b.n	800b0e2 <HAL_RCC_OscConfig+0x376>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d10c      	bne.n	800b0a8 <HAL_RCC_OscConfig+0x33c>
 800b08e:	4b6a      	ldr	r3, [pc, #424]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b092:	4a69      	ldr	r2, [pc, #420]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b094:	f023 0301 	bic.w	r3, r3, #1
 800b098:	6713      	str	r3, [r2, #112]	@ 0x70
 800b09a:	4b67      	ldr	r3, [pc, #412]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b09c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b09e:	4a66      	ldr	r2, [pc, #408]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b0a0:	f023 0304 	bic.w	r3, r3, #4
 800b0a4:	6713      	str	r3, [r2, #112]	@ 0x70
 800b0a6:	e01c      	b.n	800b0e2 <HAL_RCC_OscConfig+0x376>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	2b05      	cmp	r3, #5
 800b0ae:	d10c      	bne.n	800b0ca <HAL_RCC_OscConfig+0x35e>
 800b0b0:	4b61      	ldr	r3, [pc, #388]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b0b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0b4:	4a60      	ldr	r2, [pc, #384]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b0b6:	f043 0304 	orr.w	r3, r3, #4
 800b0ba:	6713      	str	r3, [r2, #112]	@ 0x70
 800b0bc:	4b5e      	ldr	r3, [pc, #376]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b0be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0c0:	4a5d      	ldr	r2, [pc, #372]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b0c2:	f043 0301 	orr.w	r3, r3, #1
 800b0c6:	6713      	str	r3, [r2, #112]	@ 0x70
 800b0c8:	e00b      	b.n	800b0e2 <HAL_RCC_OscConfig+0x376>
 800b0ca:	4b5b      	ldr	r3, [pc, #364]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b0cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0ce:	4a5a      	ldr	r2, [pc, #360]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b0d0:	f023 0301 	bic.w	r3, r3, #1
 800b0d4:	6713      	str	r3, [r2, #112]	@ 0x70
 800b0d6:	4b58      	ldr	r3, [pc, #352]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b0d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0da:	4a57      	ldr	r2, [pc, #348]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b0dc:	f023 0304 	bic.w	r3, r3, #4
 800b0e0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d015      	beq.n	800b116 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0ea:	f7fc fd49 	bl	8007b80 <HAL_GetTick>
 800b0ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b0f0:	e00a      	b.n	800b108 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0f2:	f7fc fd45 	bl	8007b80 <HAL_GetTick>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	1ad3      	subs	r3, r2, r3
 800b0fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b100:	4293      	cmp	r3, r2
 800b102:	d901      	bls.n	800b108 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b104:	2303      	movs	r3, #3
 800b106:	e0ce      	b.n	800b2a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b108:	4b4b      	ldr	r3, [pc, #300]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b10a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b10c:	f003 0302 	and.w	r3, r3, #2
 800b110:	2b00      	cmp	r3, #0
 800b112:	d0ee      	beq.n	800b0f2 <HAL_RCC_OscConfig+0x386>
 800b114:	e014      	b.n	800b140 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b116:	f7fc fd33 	bl	8007b80 <HAL_GetTick>
 800b11a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b11c:	e00a      	b.n	800b134 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b11e:	f7fc fd2f 	bl	8007b80 <HAL_GetTick>
 800b122:	4602      	mov	r2, r0
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	1ad3      	subs	r3, r2, r3
 800b128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d901      	bls.n	800b134 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b130:	2303      	movs	r3, #3
 800b132:	e0b8      	b.n	800b2a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b134:	4b40      	ldr	r3, [pc, #256]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b138:	f003 0302 	and.w	r3, r3, #2
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d1ee      	bne.n	800b11e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b140:	7dfb      	ldrb	r3, [r7, #23]
 800b142:	2b01      	cmp	r3, #1
 800b144:	d105      	bne.n	800b152 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b146:	4b3c      	ldr	r3, [pc, #240]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b14a:	4a3b      	ldr	r2, [pc, #236]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b14c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b150:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	699b      	ldr	r3, [r3, #24]
 800b156:	2b00      	cmp	r3, #0
 800b158:	f000 80a4 	beq.w	800b2a4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b15c:	4b36      	ldr	r3, [pc, #216]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	f003 030c 	and.w	r3, r3, #12
 800b164:	2b08      	cmp	r3, #8
 800b166:	d06b      	beq.n	800b240 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	699b      	ldr	r3, [r3, #24]
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	d149      	bne.n	800b204 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b170:	4b31      	ldr	r3, [pc, #196]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	4a30      	ldr	r2, [pc, #192]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b176:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b17a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b17c:	f7fc fd00 	bl	8007b80 <HAL_GetTick>
 800b180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b182:	e008      	b.n	800b196 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b184:	f7fc fcfc 	bl	8007b80 <HAL_GetTick>
 800b188:	4602      	mov	r2, r0
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	1ad3      	subs	r3, r2, r3
 800b18e:	2b02      	cmp	r3, #2
 800b190:	d901      	bls.n	800b196 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b192:	2303      	movs	r3, #3
 800b194:	e087      	b.n	800b2a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b196:	4b28      	ldr	r3, [pc, #160]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d1f0      	bne.n	800b184 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	69da      	ldr	r2, [r3, #28]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6a1b      	ldr	r3, [r3, #32]
 800b1aa:	431a      	orrs	r2, r3
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1b0:	019b      	lsls	r3, r3, #6
 800b1b2:	431a      	orrs	r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1b8:	085b      	lsrs	r3, r3, #1
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	041b      	lsls	r3, r3, #16
 800b1be:	431a      	orrs	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1c4:	061b      	lsls	r3, r3, #24
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	4a1b      	ldr	r2, [pc, #108]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b1ca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b1ce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b1d0:	4b19      	ldr	r3, [pc, #100]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a18      	ldr	r2, [pc, #96]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b1d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b1da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1dc:	f7fc fcd0 	bl	8007b80 <HAL_GetTick>
 800b1e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b1e2:	e008      	b.n	800b1f6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b1e4:	f7fc fccc 	bl	8007b80 <HAL_GetTick>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	1ad3      	subs	r3, r2, r3
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	d901      	bls.n	800b1f6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800b1f2:	2303      	movs	r3, #3
 800b1f4:	e057      	b.n	800b2a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b1f6:	4b10      	ldr	r3, [pc, #64]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d0f0      	beq.n	800b1e4 <HAL_RCC_OscConfig+0x478>
 800b202:	e04f      	b.n	800b2a4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b204:	4b0c      	ldr	r3, [pc, #48]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a0b      	ldr	r2, [pc, #44]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b20a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b20e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b210:	f7fc fcb6 	bl	8007b80 <HAL_GetTick>
 800b214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b216:	e008      	b.n	800b22a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b218:	f7fc fcb2 	bl	8007b80 <HAL_GetTick>
 800b21c:	4602      	mov	r2, r0
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	1ad3      	subs	r3, r2, r3
 800b222:	2b02      	cmp	r3, #2
 800b224:	d901      	bls.n	800b22a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800b226:	2303      	movs	r3, #3
 800b228:	e03d      	b.n	800b2a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b22a:	4b03      	ldr	r3, [pc, #12]	@ (800b238 <HAL_RCC_OscConfig+0x4cc>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1f0      	bne.n	800b218 <HAL_RCC_OscConfig+0x4ac>
 800b236:	e035      	b.n	800b2a4 <HAL_RCC_OscConfig+0x538>
 800b238:	40023800 	.word	0x40023800
 800b23c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b240:	4b1b      	ldr	r3, [pc, #108]	@ (800b2b0 <HAL_RCC_OscConfig+0x544>)
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	699b      	ldr	r3, [r3, #24]
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d028      	beq.n	800b2a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b258:	429a      	cmp	r2, r3
 800b25a:	d121      	bne.n	800b2a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b266:	429a      	cmp	r2, r3
 800b268:	d11a      	bne.n	800b2a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b270:	4013      	ands	r3, r2
 800b272:	687a      	ldr	r2, [r7, #4]
 800b274:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b276:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b278:	4293      	cmp	r3, r2
 800b27a:	d111      	bne.n	800b2a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b286:	085b      	lsrs	r3, r3, #1
 800b288:	3b01      	subs	r3, #1
 800b28a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d107      	bne.n	800b2a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b29a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d001      	beq.n	800b2a4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e000      	b.n	800b2a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800b2a4:	2300      	movs	r3, #0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3718      	adds	r7, #24
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	40023800 	.word	0x40023800

0800b2b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d101      	bne.n	800b2cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e0d0      	b.n	800b46e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b2cc:	4b6a      	ldr	r3, [pc, #424]	@ (800b478 <HAL_RCC_ClockConfig+0x1c4>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f003 030f 	and.w	r3, r3, #15
 800b2d4:	683a      	ldr	r2, [r7, #0]
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d910      	bls.n	800b2fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2da:	4b67      	ldr	r3, [pc, #412]	@ (800b478 <HAL_RCC_ClockConfig+0x1c4>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f023 020f 	bic.w	r2, r3, #15
 800b2e2:	4965      	ldr	r1, [pc, #404]	@ (800b478 <HAL_RCC_ClockConfig+0x1c4>)
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2ea:	4b63      	ldr	r3, [pc, #396]	@ (800b478 <HAL_RCC_ClockConfig+0x1c4>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f003 030f 	and.w	r3, r3, #15
 800b2f2:	683a      	ldr	r2, [r7, #0]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d001      	beq.n	800b2fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	e0b8      	b.n	800b46e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f003 0302 	and.w	r3, r3, #2
 800b304:	2b00      	cmp	r3, #0
 800b306:	d020      	beq.n	800b34a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f003 0304 	and.w	r3, r3, #4
 800b310:	2b00      	cmp	r3, #0
 800b312:	d005      	beq.n	800b320 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b314:	4b59      	ldr	r3, [pc, #356]	@ (800b47c <HAL_RCC_ClockConfig+0x1c8>)
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	4a58      	ldr	r2, [pc, #352]	@ (800b47c <HAL_RCC_ClockConfig+0x1c8>)
 800b31a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b31e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f003 0308 	and.w	r3, r3, #8
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d005      	beq.n	800b338 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b32c:	4b53      	ldr	r3, [pc, #332]	@ (800b47c <HAL_RCC_ClockConfig+0x1c8>)
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	4a52      	ldr	r2, [pc, #328]	@ (800b47c <HAL_RCC_ClockConfig+0x1c8>)
 800b332:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b336:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b338:	4b50      	ldr	r3, [pc, #320]	@ (800b47c <HAL_RCC_ClockConfig+0x1c8>)
 800b33a:	689b      	ldr	r3, [r3, #8]
 800b33c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	494d      	ldr	r1, [pc, #308]	@ (800b47c <HAL_RCC_ClockConfig+0x1c8>)
 800b346:	4313      	orrs	r3, r2
 800b348:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f003 0301 	and.w	r3, r3, #1
 800b352:	2b00      	cmp	r3, #0
 800b354:	d040      	beq.n	800b3d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d107      	bne.n	800b36e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b35e:	4b47      	ldr	r3, [pc, #284]	@ (800b47c <HAL_RCC_ClockConfig+0x1c8>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b366:	2b00      	cmp	r3, #0
 800b368:	d115      	bne.n	800b396 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b36a:	2301      	movs	r3, #1
 800b36c:	e07f      	b.n	800b46e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	2b02      	cmp	r3, #2
 800b374:	d107      	bne.n	800b386 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b376:	4b41      	ldr	r3, [pc, #260]	@ (800b47c <HAL_RCC_ClockConfig+0x1c8>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d109      	bne.n	800b396 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b382:	2301      	movs	r3, #1
 800b384:	e073      	b.n	800b46e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b386:	4b3d      	ldr	r3, [pc, #244]	@ (800b47c <HAL_RCC_ClockConfig+0x1c8>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f003 0302 	and.w	r3, r3, #2
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d101      	bne.n	800b396 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b392:	2301      	movs	r3, #1
 800b394:	e06b      	b.n	800b46e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b396:	4b39      	ldr	r3, [pc, #228]	@ (800b47c <HAL_RCC_ClockConfig+0x1c8>)
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	f023 0203 	bic.w	r2, r3, #3
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	4936      	ldr	r1, [pc, #216]	@ (800b47c <HAL_RCC_ClockConfig+0x1c8>)
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3a8:	f7fc fbea 	bl	8007b80 <HAL_GetTick>
 800b3ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b3ae:	e00a      	b.n	800b3c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b3b0:	f7fc fbe6 	bl	8007b80 <HAL_GetTick>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	1ad3      	subs	r3, r2, r3
 800b3ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d901      	bls.n	800b3c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b3c2:	2303      	movs	r3, #3
 800b3c4:	e053      	b.n	800b46e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b3c6:	4b2d      	ldr	r3, [pc, #180]	@ (800b47c <HAL_RCC_ClockConfig+0x1c8>)
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	f003 020c 	and.w	r2, r3, #12
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d1eb      	bne.n	800b3b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b3d8:	4b27      	ldr	r3, [pc, #156]	@ (800b478 <HAL_RCC_ClockConfig+0x1c4>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f003 030f 	and.w	r3, r3, #15
 800b3e0:	683a      	ldr	r2, [r7, #0]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d210      	bcs.n	800b408 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3e6:	4b24      	ldr	r3, [pc, #144]	@ (800b478 <HAL_RCC_ClockConfig+0x1c4>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f023 020f 	bic.w	r2, r3, #15
 800b3ee:	4922      	ldr	r1, [pc, #136]	@ (800b478 <HAL_RCC_ClockConfig+0x1c4>)
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3f6:	4b20      	ldr	r3, [pc, #128]	@ (800b478 <HAL_RCC_ClockConfig+0x1c4>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f003 030f 	and.w	r3, r3, #15
 800b3fe:	683a      	ldr	r2, [r7, #0]
 800b400:	429a      	cmp	r2, r3
 800b402:	d001      	beq.n	800b408 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b404:	2301      	movs	r3, #1
 800b406:	e032      	b.n	800b46e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f003 0304 	and.w	r3, r3, #4
 800b410:	2b00      	cmp	r3, #0
 800b412:	d008      	beq.n	800b426 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b414:	4b19      	ldr	r3, [pc, #100]	@ (800b47c <HAL_RCC_ClockConfig+0x1c8>)
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	4916      	ldr	r1, [pc, #88]	@ (800b47c <HAL_RCC_ClockConfig+0x1c8>)
 800b422:	4313      	orrs	r3, r2
 800b424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f003 0308 	and.w	r3, r3, #8
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d009      	beq.n	800b446 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b432:	4b12      	ldr	r3, [pc, #72]	@ (800b47c <HAL_RCC_ClockConfig+0x1c8>)
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	00db      	lsls	r3, r3, #3
 800b440:	490e      	ldr	r1, [pc, #56]	@ (800b47c <HAL_RCC_ClockConfig+0x1c8>)
 800b442:	4313      	orrs	r3, r2
 800b444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b446:	f000 f821 	bl	800b48c <HAL_RCC_GetSysClockFreq>
 800b44a:	4602      	mov	r2, r0
 800b44c:	4b0b      	ldr	r3, [pc, #44]	@ (800b47c <HAL_RCC_ClockConfig+0x1c8>)
 800b44e:	689b      	ldr	r3, [r3, #8]
 800b450:	091b      	lsrs	r3, r3, #4
 800b452:	f003 030f 	and.w	r3, r3, #15
 800b456:	490a      	ldr	r1, [pc, #40]	@ (800b480 <HAL_RCC_ClockConfig+0x1cc>)
 800b458:	5ccb      	ldrb	r3, [r1, r3]
 800b45a:	fa22 f303 	lsr.w	r3, r2, r3
 800b45e:	4a09      	ldr	r2, [pc, #36]	@ (800b484 <HAL_RCC_ClockConfig+0x1d0>)
 800b460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b462:	4b09      	ldr	r3, [pc, #36]	@ (800b488 <HAL_RCC_ClockConfig+0x1d4>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4618      	mov	r0, r3
 800b468:	f7fa fc6e 	bl	8005d48 <HAL_InitTick>

  return HAL_OK;
 800b46c:	2300      	movs	r3, #0
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	40023c00 	.word	0x40023c00
 800b47c:	40023800 	.word	0x40023800
 800b480:	080239a0 	.word	0x080239a0
 800b484:	2000004c 	.word	0x2000004c
 800b488:	2000008c 	.word	0x2000008c

0800b48c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b48c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b490:	b090      	sub	sp, #64	@ 0x40
 800b492:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b494:	2300      	movs	r3, #0
 800b496:	637b      	str	r3, [r7, #52]	@ 0x34
 800b498:	2300      	movs	r3, #0
 800b49a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b49c:	2300      	movs	r3, #0
 800b49e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b4a4:	4b59      	ldr	r3, [pc, #356]	@ (800b60c <HAL_RCC_GetSysClockFreq+0x180>)
 800b4a6:	689b      	ldr	r3, [r3, #8]
 800b4a8:	f003 030c 	and.w	r3, r3, #12
 800b4ac:	2b08      	cmp	r3, #8
 800b4ae:	d00d      	beq.n	800b4cc <HAL_RCC_GetSysClockFreq+0x40>
 800b4b0:	2b08      	cmp	r3, #8
 800b4b2:	f200 80a1 	bhi.w	800b5f8 <HAL_RCC_GetSysClockFreq+0x16c>
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d002      	beq.n	800b4c0 <HAL_RCC_GetSysClockFreq+0x34>
 800b4ba:	2b04      	cmp	r3, #4
 800b4bc:	d003      	beq.n	800b4c6 <HAL_RCC_GetSysClockFreq+0x3a>
 800b4be:	e09b      	b.n	800b5f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b4c0:	4b53      	ldr	r3, [pc, #332]	@ (800b610 <HAL_RCC_GetSysClockFreq+0x184>)
 800b4c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b4c4:	e09b      	b.n	800b5fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b4c6:	4b53      	ldr	r3, [pc, #332]	@ (800b614 <HAL_RCC_GetSysClockFreq+0x188>)
 800b4c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b4ca:	e098      	b.n	800b5fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b4cc:	4b4f      	ldr	r3, [pc, #316]	@ (800b60c <HAL_RCC_GetSysClockFreq+0x180>)
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b4d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b4d6:	4b4d      	ldr	r3, [pc, #308]	@ (800b60c <HAL_RCC_GetSysClockFreq+0x180>)
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d028      	beq.n	800b534 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b4e2:	4b4a      	ldr	r3, [pc, #296]	@ (800b60c <HAL_RCC_GetSysClockFreq+0x180>)
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	099b      	lsrs	r3, r3, #6
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	623b      	str	r3, [r7, #32]
 800b4ec:	627a      	str	r2, [r7, #36]	@ 0x24
 800b4ee:	6a3b      	ldr	r3, [r7, #32]
 800b4f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	4b47      	ldr	r3, [pc, #284]	@ (800b614 <HAL_RCC_GetSysClockFreq+0x188>)
 800b4f8:	fb03 f201 	mul.w	r2, r3, r1
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	fb00 f303 	mul.w	r3, r0, r3
 800b502:	4413      	add	r3, r2
 800b504:	4a43      	ldr	r2, [pc, #268]	@ (800b614 <HAL_RCC_GetSysClockFreq+0x188>)
 800b506:	fba0 1202 	umull	r1, r2, r0, r2
 800b50a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b50c:	460a      	mov	r2, r1
 800b50e:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b510:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b512:	4413      	add	r3, r2
 800b514:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b518:	2200      	movs	r2, #0
 800b51a:	61bb      	str	r3, [r7, #24]
 800b51c:	61fa      	str	r2, [r7, #28]
 800b51e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b522:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800b526:	f7f5 fab1 	bl	8000a8c <__aeabi_uldivmod>
 800b52a:	4602      	mov	r2, r0
 800b52c:	460b      	mov	r3, r1
 800b52e:	4613      	mov	r3, r2
 800b530:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b532:	e053      	b.n	800b5dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b534:	4b35      	ldr	r3, [pc, #212]	@ (800b60c <HAL_RCC_GetSysClockFreq+0x180>)
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	099b      	lsrs	r3, r3, #6
 800b53a:	2200      	movs	r2, #0
 800b53c:	613b      	str	r3, [r7, #16]
 800b53e:	617a      	str	r2, [r7, #20]
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800b546:	f04f 0b00 	mov.w	fp, #0
 800b54a:	4652      	mov	r2, sl
 800b54c:	465b      	mov	r3, fp
 800b54e:	f04f 0000 	mov.w	r0, #0
 800b552:	f04f 0100 	mov.w	r1, #0
 800b556:	0159      	lsls	r1, r3, #5
 800b558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b55c:	0150      	lsls	r0, r2, #5
 800b55e:	4602      	mov	r2, r0
 800b560:	460b      	mov	r3, r1
 800b562:	ebb2 080a 	subs.w	r8, r2, sl
 800b566:	eb63 090b 	sbc.w	r9, r3, fp
 800b56a:	f04f 0200 	mov.w	r2, #0
 800b56e:	f04f 0300 	mov.w	r3, #0
 800b572:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800b576:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800b57a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800b57e:	ebb2 0408 	subs.w	r4, r2, r8
 800b582:	eb63 0509 	sbc.w	r5, r3, r9
 800b586:	f04f 0200 	mov.w	r2, #0
 800b58a:	f04f 0300 	mov.w	r3, #0
 800b58e:	00eb      	lsls	r3, r5, #3
 800b590:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b594:	00e2      	lsls	r2, r4, #3
 800b596:	4614      	mov	r4, r2
 800b598:	461d      	mov	r5, r3
 800b59a:	eb14 030a 	adds.w	r3, r4, sl
 800b59e:	603b      	str	r3, [r7, #0]
 800b5a0:	eb45 030b 	adc.w	r3, r5, fp
 800b5a4:	607b      	str	r3, [r7, #4]
 800b5a6:	f04f 0200 	mov.w	r2, #0
 800b5aa:	f04f 0300 	mov.w	r3, #0
 800b5ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b5b2:	4629      	mov	r1, r5
 800b5b4:	028b      	lsls	r3, r1, #10
 800b5b6:	4621      	mov	r1, r4
 800b5b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b5bc:	4621      	mov	r1, r4
 800b5be:	028a      	lsls	r2, r1, #10
 800b5c0:	4610      	mov	r0, r2
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	60bb      	str	r3, [r7, #8]
 800b5ca:	60fa      	str	r2, [r7, #12]
 800b5cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b5d0:	f7f5 fa5c 	bl	8000a8c <__aeabi_uldivmod>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	4613      	mov	r3, r2
 800b5da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b5dc:	4b0b      	ldr	r3, [pc, #44]	@ (800b60c <HAL_RCC_GetSysClockFreq+0x180>)
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	0c1b      	lsrs	r3, r3, #16
 800b5e2:	f003 0303 	and.w	r3, r3, #3
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	005b      	lsls	r3, r3, #1
 800b5ea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800b5ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b5f6:	e002      	b.n	800b5fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b5f8:	4b05      	ldr	r3, [pc, #20]	@ (800b610 <HAL_RCC_GetSysClockFreq+0x184>)
 800b5fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b5fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b5fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800b600:	4618      	mov	r0, r3
 800b602:	3740      	adds	r7, #64	@ 0x40
 800b604:	46bd      	mov	sp, r7
 800b606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b60a:	bf00      	nop
 800b60c:	40023800 	.word	0x40023800
 800b610:	00f42400 	.word	0x00f42400
 800b614:	017d7840 	.word	0x017d7840

0800b618 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b618:	b480      	push	{r7}
 800b61a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b61c:	4b03      	ldr	r3, [pc, #12]	@ (800b62c <HAL_RCC_GetHCLKFreq+0x14>)
 800b61e:	681b      	ldr	r3, [r3, #0]
}
 800b620:	4618      	mov	r0, r3
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr
 800b62a:	bf00      	nop
 800b62c:	2000004c 	.word	0x2000004c

0800b630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b634:	f7ff fff0 	bl	800b618 <HAL_RCC_GetHCLKFreq>
 800b638:	4602      	mov	r2, r0
 800b63a:	4b05      	ldr	r3, [pc, #20]	@ (800b650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b63c:	689b      	ldr	r3, [r3, #8]
 800b63e:	0a9b      	lsrs	r3, r3, #10
 800b640:	f003 0307 	and.w	r3, r3, #7
 800b644:	4903      	ldr	r1, [pc, #12]	@ (800b654 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b646:	5ccb      	ldrb	r3, [r1, r3]
 800b648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	40023800 	.word	0x40023800
 800b654:	080239b0 	.word	0x080239b0

0800b658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b65c:	f7ff ffdc 	bl	800b618 <HAL_RCC_GetHCLKFreq>
 800b660:	4602      	mov	r2, r0
 800b662:	4b05      	ldr	r3, [pc, #20]	@ (800b678 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	0b5b      	lsrs	r3, r3, #13
 800b668:	f003 0307 	and.w	r3, r3, #7
 800b66c:	4903      	ldr	r1, [pc, #12]	@ (800b67c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b66e:	5ccb      	ldrb	r3, [r1, r3]
 800b670:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b674:	4618      	mov	r0, r3
 800b676:	bd80      	pop	{r7, pc}
 800b678:	40023800 	.word	0x40023800
 800b67c:	080239b0 	.word	0x080239b0

0800b680 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b680:	b480      	push	{r7}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	220f      	movs	r2, #15
 800b68e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b690:	4b12      	ldr	r3, [pc, #72]	@ (800b6dc <HAL_RCC_GetClockConfig+0x5c>)
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	f003 0203 	and.w	r2, r3, #3
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b69c:	4b0f      	ldr	r3, [pc, #60]	@ (800b6dc <HAL_RCC_GetClockConfig+0x5c>)
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b6a8:	4b0c      	ldr	r3, [pc, #48]	@ (800b6dc <HAL_RCC_GetClockConfig+0x5c>)
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b6b4:	4b09      	ldr	r3, [pc, #36]	@ (800b6dc <HAL_RCC_GetClockConfig+0x5c>)
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	08db      	lsrs	r3, r3, #3
 800b6ba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b6c2:	4b07      	ldr	r3, [pc, #28]	@ (800b6e0 <HAL_RCC_GetClockConfig+0x60>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f003 020f 	and.w	r2, r3, #15
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	601a      	str	r2, [r3, #0]
}
 800b6ce:	bf00      	nop
 800b6d0:	370c      	adds	r7, #12
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d8:	4770      	bx	lr
 800b6da:	bf00      	nop
 800b6dc:	40023800 	.word	0x40023800
 800b6e0:	40023c00 	.word	0x40023c00

0800b6e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b088      	sub	sp, #32
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f003 0301 	and.w	r3, r3, #1
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d012      	beq.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b70c:	4b69      	ldr	r3, [pc, #420]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	4a68      	ldr	r2, [pc, #416]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b712:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b716:	6093      	str	r3, [r2, #8]
 800b718:	4b66      	ldr	r3, [pc, #408]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b71a:	689a      	ldr	r2, [r3, #8]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b720:	4964      	ldr	r1, [pc, #400]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b722:	4313      	orrs	r3, r2
 800b724:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d101      	bne.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800b72e:	2301      	movs	r3, #1
 800b730:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d017      	beq.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b73e:	4b5d      	ldr	r3, [pc, #372]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b740:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b744:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b74c:	4959      	ldr	r1, [pc, #356]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b74e:	4313      	orrs	r3, r2
 800b750:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b758:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b75c:	d101      	bne.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800b75e:	2301      	movs	r3, #1
 800b760:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b766:	2b00      	cmp	r3, #0
 800b768:	d101      	bne.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800b76a:	2301      	movs	r3, #1
 800b76c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b776:	2b00      	cmp	r3, #0
 800b778:	d017      	beq.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b77a:	4b4e      	ldr	r3, [pc, #312]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b77c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b780:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b788:	494a      	ldr	r1, [pc, #296]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b78a:	4313      	orrs	r3, r2
 800b78c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b794:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b798:	d101      	bne.n	800b79e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800b79a:	2301      	movs	r3, #1
 800b79c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d101      	bne.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d001      	beq.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f003 0320 	and.w	r3, r3, #32
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	f000 808b 	beq.w	800b8de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b7c8:	4b3a      	ldr	r3, [pc, #232]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b7ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7cc:	4a39      	ldr	r2, [pc, #228]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b7ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b7d2:	6413      	str	r3, [r2, #64]	@ 0x40
 800b7d4:	4b37      	ldr	r3, [pc, #220]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b7d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b7dc:	60bb      	str	r3, [r7, #8]
 800b7de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b7e0:	4b35      	ldr	r3, [pc, #212]	@ (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4a34      	ldr	r2, [pc, #208]	@ (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b7e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b7ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7ec:	f7fc f9c8 	bl	8007b80 <HAL_GetTick>
 800b7f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b7f2:	e008      	b.n	800b806 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b7f4:	f7fc f9c4 	bl	8007b80 <HAL_GetTick>
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	1ad3      	subs	r3, r2, r3
 800b7fe:	2b64      	cmp	r3, #100	@ 0x64
 800b800:	d901      	bls.n	800b806 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800b802:	2303      	movs	r3, #3
 800b804:	e357      	b.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b806:	4b2c      	ldr	r3, [pc, #176]	@ (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d0f0      	beq.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b812:	4b28      	ldr	r3, [pc, #160]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b816:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b81a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d035      	beq.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b826:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b82a:	693a      	ldr	r2, [r7, #16]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d02e      	beq.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b830:	4b20      	ldr	r3, [pc, #128]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b834:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b838:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b83a:	4b1e      	ldr	r3, [pc, #120]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b83c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b83e:	4a1d      	ldr	r2, [pc, #116]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b844:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b846:	4b1b      	ldr	r3, [pc, #108]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b84a:	4a1a      	ldr	r2, [pc, #104]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b84c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b850:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800b852:	4a18      	ldr	r2, [pc, #96]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b858:	4b16      	ldr	r3, [pc, #88]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b85a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b85c:	f003 0301 	and.w	r3, r3, #1
 800b860:	2b01      	cmp	r3, #1
 800b862:	d114      	bne.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b864:	f7fc f98c 	bl	8007b80 <HAL_GetTick>
 800b868:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b86a:	e00a      	b.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b86c:	f7fc f988 	bl	8007b80 <HAL_GetTick>
 800b870:	4602      	mov	r2, r0
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	1ad3      	subs	r3, r2, r3
 800b876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d901      	bls.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800b87e:	2303      	movs	r3, #3
 800b880:	e319      	b.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b882:	4b0c      	ldr	r3, [pc, #48]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b886:	f003 0302 	and.w	r3, r3, #2
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d0ee      	beq.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b892:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b896:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b89a:	d111      	bne.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800b89c:	4b05      	ldr	r3, [pc, #20]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b89e:	689b      	ldr	r3, [r3, #8]
 800b8a0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800b8a8:	4b04      	ldr	r3, [pc, #16]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b8aa:	400b      	ands	r3, r1
 800b8ac:	4901      	ldr	r1, [pc, #4]	@ (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	608b      	str	r3, [r1, #8]
 800b8b2:	e00b      	b.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800b8b4:	40023800 	.word	0x40023800
 800b8b8:	40007000 	.word	0x40007000
 800b8bc:	0ffffcff 	.word	0x0ffffcff
 800b8c0:	4baa      	ldr	r3, [pc, #680]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	4aa9      	ldr	r2, [pc, #676]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8c6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800b8ca:	6093      	str	r3, [r2, #8]
 800b8cc:	4ba7      	ldr	r3, [pc, #668]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b8d8:	49a4      	ldr	r1, [pc, #656]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f003 0310 	and.w	r3, r3, #16
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d010      	beq.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b8ea:	4ba0      	ldr	r3, [pc, #640]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b8f0:	4a9e      	ldr	r2, [pc, #632]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b8f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b8fa:	4b9c      	ldr	r3, [pc, #624]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b904:	4999      	ldr	r1, [pc, #612]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b906:	4313      	orrs	r3, r2
 800b908:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b914:	2b00      	cmp	r3, #0
 800b916:	d00a      	beq.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b918:	4b94      	ldr	r3, [pc, #592]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b91a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b91e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b926:	4991      	ldr	r1, [pc, #580]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b928:	4313      	orrs	r3, r2
 800b92a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b936:	2b00      	cmp	r3, #0
 800b938:	d00a      	beq.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b93a:	4b8c      	ldr	r3, [pc, #560]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b93c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b940:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b948:	4988      	ldr	r1, [pc, #544]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b94a:	4313      	orrs	r3, r2
 800b94c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d00a      	beq.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b95c:	4b83      	ldr	r3, [pc, #524]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b95e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b962:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b96a:	4980      	ldr	r1, [pc, #512]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b96c:	4313      	orrs	r3, r2
 800b96e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d00a      	beq.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b97e:	4b7b      	ldr	r3, [pc, #492]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b984:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b98c:	4977      	ldr	r1, [pc, #476]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b98e:	4313      	orrs	r3, r2
 800b990:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d00a      	beq.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b9a0:	4b72      	ldr	r3, [pc, #456]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b9a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9a6:	f023 0203 	bic.w	r2, r3, #3
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9ae:	496f      	ldr	r1, [pc, #444]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d00a      	beq.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b9c2:	4b6a      	ldr	r3, [pc, #424]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b9c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9c8:	f023 020c 	bic.w	r2, r3, #12
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b9d0:	4966      	ldr	r1, [pc, #408]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d00a      	beq.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b9e4:	4b61      	ldr	r3, [pc, #388]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b9e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9ea:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9f2:	495e      	ldr	r1, [pc, #376]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d00a      	beq.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ba06:	4b59      	ldr	r3, [pc, #356]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba0c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba14:	4955      	ldr	r1, [pc, #340]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba16:	4313      	orrs	r3, r2
 800ba18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d00a      	beq.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ba28:	4b50      	ldr	r3, [pc, #320]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba2e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba36:	494d      	ldr	r1, [pc, #308]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba38:	4313      	orrs	r3, r2
 800ba3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d00a      	beq.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800ba4a:	4b48      	ldr	r3, [pc, #288]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba50:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba58:	4944      	ldr	r1, [pc, #272]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d00a      	beq.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800ba6c:	4b3f      	ldr	r3, [pc, #252]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba72:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba7a:	493c      	ldr	r1, [pc, #240]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00a      	beq.n	800baa4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800ba8e:	4b37      	ldr	r3, [pc, #220]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba94:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba9c:	4933      	ldr	r1, [pc, #204]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800baac:	2b00      	cmp	r3, #0
 800baae:	d00a      	beq.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bab0:	4b2e      	ldr	r3, [pc, #184]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bab6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800babe:	492b      	ldr	r1, [pc, #172]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bac0:	4313      	orrs	r3, r2
 800bac2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d011      	beq.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bad2:	4b26      	ldr	r3, [pc, #152]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bad8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bae0:	4922      	ldr	r1, [pc, #136]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bae2:	4313      	orrs	r3, r2
 800bae4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800baec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800baf0:	d101      	bne.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800baf2:	2301      	movs	r3, #1
 800baf4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f003 0308 	and.w	r3, r3, #8
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d001      	beq.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800bb02:	2301      	movs	r3, #1
 800bb04:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d00a      	beq.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bb12:	4b16      	ldr	r3, [pc, #88]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bb14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb18:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb20:	4912      	ldr	r1, [pc, #72]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bb22:	4313      	orrs	r3, r2
 800bb24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d00b      	beq.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800bb34:	4b0d      	ldr	r3, [pc, #52]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bb36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb3a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb44:	4909      	ldr	r1, [pc, #36]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bb46:	4313      	orrs	r3, r2
 800bb48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d006      	beq.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	f000 80d9 	beq.w	800bd12 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bb60:	4b02      	ldr	r3, [pc, #8]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4a01      	ldr	r2, [pc, #4]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bb66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bb6a:	e001      	b.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800bb6c:	40023800 	.word	0x40023800
 800bb70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb72:	f7fc f805 	bl	8007b80 <HAL_GetTick>
 800bb76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bb78:	e008      	b.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bb7a:	f7fc f801 	bl	8007b80 <HAL_GetTick>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	1ad3      	subs	r3, r2, r3
 800bb84:	2b64      	cmp	r3, #100	@ 0x64
 800bb86:	d901      	bls.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bb88:	2303      	movs	r3, #3
 800bb8a:	e194      	b.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bb8c:	4b6c      	ldr	r3, [pc, #432]	@ (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1f0      	bne.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f003 0301 	and.w	r3, r3, #1
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d021      	beq.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d11d      	bne.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bbac:	4b64      	ldr	r3, [pc, #400]	@ (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bbae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bbb2:	0c1b      	lsrs	r3, r3, #16
 800bbb4:	f003 0303 	and.w	r3, r3, #3
 800bbb8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bbba:	4b61      	ldr	r3, [pc, #388]	@ (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bbbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bbc0:	0e1b      	lsrs	r3, r3, #24
 800bbc2:	f003 030f 	and.w	r3, r3, #15
 800bbc6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	685b      	ldr	r3, [r3, #4]
 800bbcc:	019a      	lsls	r2, r3, #6
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	041b      	lsls	r3, r3, #16
 800bbd2:	431a      	orrs	r2, r3
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	061b      	lsls	r3, r3, #24
 800bbd8:	431a      	orrs	r2, r3
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	071b      	lsls	r3, r3, #28
 800bbe0:	4957      	ldr	r1, [pc, #348]	@ (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d004      	beq.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbf8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bbfc:	d00a      	beq.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d02e      	beq.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bc12:	d129      	bne.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bc14:	4b4a      	ldr	r3, [pc, #296]	@ (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bc16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc1a:	0c1b      	lsrs	r3, r3, #16
 800bc1c:	f003 0303 	and.w	r3, r3, #3
 800bc20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bc22:	4b47      	ldr	r3, [pc, #284]	@ (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bc24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc28:	0f1b      	lsrs	r3, r3, #28
 800bc2a:	f003 0307 	and.w	r3, r3, #7
 800bc2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	019a      	lsls	r2, r3, #6
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	041b      	lsls	r3, r3, #16
 800bc3a:	431a      	orrs	r2, r3
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	061b      	lsls	r3, r3, #24
 800bc42:	431a      	orrs	r2, r3
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	071b      	lsls	r3, r3, #28
 800bc48:	493d      	ldr	r1, [pc, #244]	@ (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bc50:	4b3b      	ldr	r3, [pc, #236]	@ (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bc52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc56:	f023 021f 	bic.w	r2, r3, #31
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc5e:	3b01      	subs	r3, #1
 800bc60:	4937      	ldr	r1, [pc, #220]	@ (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bc62:	4313      	orrs	r3, r2
 800bc64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d01d      	beq.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bc74:	4b32      	ldr	r3, [pc, #200]	@ (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bc76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc7a:	0e1b      	lsrs	r3, r3, #24
 800bc7c:	f003 030f 	and.w	r3, r3, #15
 800bc80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bc82:	4b2f      	ldr	r3, [pc, #188]	@ (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bc84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc88:	0f1b      	lsrs	r3, r3, #28
 800bc8a:	f003 0307 	and.w	r3, r3, #7
 800bc8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	019a      	lsls	r2, r3, #6
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	691b      	ldr	r3, [r3, #16]
 800bc9a:	041b      	lsls	r3, r3, #16
 800bc9c:	431a      	orrs	r2, r3
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	061b      	lsls	r3, r3, #24
 800bca2:	431a      	orrs	r2, r3
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	071b      	lsls	r3, r3, #28
 800bca8:	4925      	ldr	r1, [pc, #148]	@ (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d011      	beq.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	685b      	ldr	r3, [r3, #4]
 800bcc0:	019a      	lsls	r2, r3, #6
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	691b      	ldr	r3, [r3, #16]
 800bcc6:	041b      	lsls	r3, r3, #16
 800bcc8:	431a      	orrs	r2, r3
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	68db      	ldr	r3, [r3, #12]
 800bcce:	061b      	lsls	r3, r3, #24
 800bcd0:	431a      	orrs	r2, r3
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	689b      	ldr	r3, [r3, #8]
 800bcd6:	071b      	lsls	r3, r3, #28
 800bcd8:	4919      	ldr	r1, [pc, #100]	@ (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bce0:	4b17      	ldr	r3, [pc, #92]	@ (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a16      	ldr	r2, [pc, #88]	@ (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bce6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bcea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcec:	f7fb ff48 	bl	8007b80 <HAL_GetTick>
 800bcf0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bcf2:	e008      	b.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bcf4:	f7fb ff44 	bl	8007b80 <HAL_GetTick>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	1ad3      	subs	r3, r2, r3
 800bcfe:	2b64      	cmp	r3, #100	@ 0x64
 800bd00:	d901      	bls.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bd02:	2303      	movs	r3, #3
 800bd04:	e0d7      	b.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bd06:	4b0e      	ldr	r3, [pc, #56]	@ (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d0f0      	beq.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	f040 80cd 	bne.w	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800bd1a:	4b09      	ldr	r3, [pc, #36]	@ (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a08      	ldr	r2, [pc, #32]	@ (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bd20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bd24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd26:	f7fb ff2b 	bl	8007b80 <HAL_GetTick>
 800bd2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bd2c:	e00a      	b.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bd2e:	f7fb ff27 	bl	8007b80 <HAL_GetTick>
 800bd32:	4602      	mov	r2, r0
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	1ad3      	subs	r3, r2, r3
 800bd38:	2b64      	cmp	r3, #100	@ 0x64
 800bd3a:	d903      	bls.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bd3c:	2303      	movs	r3, #3
 800bd3e:	e0ba      	b.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800bd40:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bd44:	4b5e      	ldr	r3, [pc, #376]	@ (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bd4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd50:	d0ed      	beq.n	800bd2e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d003      	beq.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d009      	beq.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d02e      	beq.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d12a      	bne.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bd7a:	4b51      	ldr	r3, [pc, #324]	@ (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bd7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd80:	0c1b      	lsrs	r3, r3, #16
 800bd82:	f003 0303 	and.w	r3, r3, #3
 800bd86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bd88:	4b4d      	ldr	r3, [pc, #308]	@ (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bd8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd8e:	0f1b      	lsrs	r3, r3, #28
 800bd90:	f003 0307 	and.w	r3, r3, #7
 800bd94:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	695b      	ldr	r3, [r3, #20]
 800bd9a:	019a      	lsls	r2, r3, #6
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	041b      	lsls	r3, r3, #16
 800bda0:	431a      	orrs	r2, r3
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	699b      	ldr	r3, [r3, #24]
 800bda6:	061b      	lsls	r3, r3, #24
 800bda8:	431a      	orrs	r2, r3
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	071b      	lsls	r3, r3, #28
 800bdae:	4944      	ldr	r1, [pc, #272]	@ (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800bdb6:	4b42      	ldr	r3, [pc, #264]	@ (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bdb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bdbc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdc4:	3b01      	subs	r3, #1
 800bdc6:	021b      	lsls	r3, r3, #8
 800bdc8:	493d      	ldr	r1, [pc, #244]	@ (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d022      	beq.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bde0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bde4:	d11d      	bne.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bde6:	4b36      	ldr	r3, [pc, #216]	@ (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bde8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdec:	0e1b      	lsrs	r3, r3, #24
 800bdee:	f003 030f 	and.w	r3, r3, #15
 800bdf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bdf4:	4b32      	ldr	r3, [pc, #200]	@ (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bdf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdfa:	0f1b      	lsrs	r3, r3, #28
 800bdfc:	f003 0307 	and.w	r3, r3, #7
 800be00:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	695b      	ldr	r3, [r3, #20]
 800be06:	019a      	lsls	r2, r3, #6
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6a1b      	ldr	r3, [r3, #32]
 800be0c:	041b      	lsls	r3, r3, #16
 800be0e:	431a      	orrs	r2, r3
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	061b      	lsls	r3, r3, #24
 800be14:	431a      	orrs	r2, r3
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	071b      	lsls	r3, r3, #28
 800be1a:	4929      	ldr	r1, [pc, #164]	@ (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800be1c:	4313      	orrs	r3, r2
 800be1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f003 0308 	and.w	r3, r3, #8
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d028      	beq.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800be2e:	4b24      	ldr	r3, [pc, #144]	@ (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800be30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be34:	0e1b      	lsrs	r3, r3, #24
 800be36:	f003 030f 	and.w	r3, r3, #15
 800be3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800be3c:	4b20      	ldr	r3, [pc, #128]	@ (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800be3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be42:	0c1b      	lsrs	r3, r3, #16
 800be44:	f003 0303 	and.w	r3, r3, #3
 800be48:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	695b      	ldr	r3, [r3, #20]
 800be4e:	019a      	lsls	r2, r3, #6
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	041b      	lsls	r3, r3, #16
 800be54:	431a      	orrs	r2, r3
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	061b      	lsls	r3, r3, #24
 800be5a:	431a      	orrs	r2, r3
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	69db      	ldr	r3, [r3, #28]
 800be60:	071b      	lsls	r3, r3, #28
 800be62:	4917      	ldr	r1, [pc, #92]	@ (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800be64:	4313      	orrs	r3, r2
 800be66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800be6a:	4b15      	ldr	r3, [pc, #84]	@ (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800be6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be70:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be78:	4911      	ldr	r1, [pc, #68]	@ (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800be7a:	4313      	orrs	r3, r2
 800be7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800be80:	4b0f      	ldr	r3, [pc, #60]	@ (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a0e      	ldr	r2, [pc, #56]	@ (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800be86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800be8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be8c:	f7fb fe78 	bl	8007b80 <HAL_GetTick>
 800be90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800be92:	e008      	b.n	800bea6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800be94:	f7fb fe74 	bl	8007b80 <HAL_GetTick>
 800be98:	4602      	mov	r2, r0
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	1ad3      	subs	r3, r2, r3
 800be9e:	2b64      	cmp	r3, #100	@ 0x64
 800bea0:	d901      	bls.n	800bea6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bea2:	2303      	movs	r3, #3
 800bea4:	e007      	b.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bea6:	4b06      	ldr	r3, [pc, #24]	@ (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800beae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800beb2:	d1ef      	bne.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3720      	adds	r7, #32
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	40023800 	.word	0x40023800

0800bec4 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b085      	sub	sp, #20
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800becc:	2300      	movs	r3, #0
 800bece:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	4a80      	ldr	r2, [pc, #512]	@ (800c0d4 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 800bed4:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800bed6:	4b80      	ldr	r3, [pc, #512]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bedc:	099b      	lsrs	r3, r3, #6
 800bede:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bee6:	4b7c      	ldr	r3, [pc, #496]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800beec:	0c1b      	lsrs	r3, r3, #16
 800beee:	f003 0203 	and.w	r2, r3, #3
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bef6:	4b78      	ldr	r3, [pc, #480]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800befc:	0e1b      	lsrs	r3, r3, #24
 800befe:	f003 020f 	and.w	r2, r3, #15
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bf06:	4b74      	ldr	r3, [pc, #464]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bf08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf0c:	0f1b      	lsrs	r3, r3, #28
 800bf0e:	f003 0207 	and.w	r2, r3, #7
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800bf16:	4b70      	ldr	r3, [pc, #448]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bf18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf1c:	099b      	lsrs	r3, r3, #6
 800bf1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bf26:	4b6c      	ldr	r3, [pc, #432]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bf28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf2c:	0c1b      	lsrs	r3, r3, #16
 800bf2e:	f003 0203 	and.w	r2, r3, #3
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bf36:	4b68      	ldr	r3, [pc, #416]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bf38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf3c:	0e1b      	lsrs	r3, r3, #24
 800bf3e:	f003 020f 	and.w	r2, r3, #15
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bf46:	4b64      	ldr	r3, [pc, #400]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bf48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf4c:	0f1b      	lsrs	r3, r3, #28
 800bf4e:	f003 0207 	and.w	r2, r3, #7
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800bf56:	4b60      	ldr	r3, [pc, #384]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bf58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf5c:	f003 021f 	and.w	r2, r3, #31
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800bf64:	4b5c      	ldr	r3, [pc, #368]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bf66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf6a:	0a1b      	lsrs	r3, r3, #8
 800bf6c:	f003 021f 	and.w	r2, r3, #31
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800bf74:	4b58      	ldr	r3, [pc, #352]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bf76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf7a:	0c1b      	lsrs	r3, r3, #16
 800bf7c:	f003 0203 	and.w	r2, r3, #3
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800bf84:	4b54      	ldr	r3, [pc, #336]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bf86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf8a:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800bf92:	4b51      	ldr	r3, [pc, #324]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bf94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf98:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800bfa0:	4b4d      	ldr	r3, [pc, #308]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bfa2:	689b      	ldr	r3, [r3, #8]
 800bfa4:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800bfac:	4b4a      	ldr	r3, [pc, #296]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bfae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfb2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800bfba:	4b47      	ldr	r3, [pc, #284]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bfbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfc0:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800bfc8:	4b43      	ldr	r3, [pc, #268]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bfca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfce:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800bfd6:	4b40      	ldr	r3, [pc, #256]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bfd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfdc:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800bfe4:	4b3c      	ldr	r3, [pc, #240]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bfe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfea:	f003 0203 	and.w	r2, r3, #3
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800bff2:	4b39      	ldr	r3, [pc, #228]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bff8:	f003 020c 	and.w	r2, r3, #12
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800c000:	4b35      	ldr	r3, [pc, #212]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c006:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800c00e:	4b32      	ldr	r3, [pc, #200]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c014:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800c01c:	4b2e      	ldr	r3, [pc, #184]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c01e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c022:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800c02a:	4b2b      	ldr	r3, [pc, #172]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c030:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800c038:	4b27      	ldr	r3, [pc, #156]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c03a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c03e:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800c046:	4b24      	ldr	r3, [pc, #144]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c04c:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800c054:	4b20      	ldr	r3, [pc, #128]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c05a:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800c062:	4b1d      	ldr	r3, [pc, #116]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c068:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800c070:	4b19      	ldr	r3, [pc, #100]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c076:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800c07e:	4b16      	ldr	r3, [pc, #88]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c084:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800c08e:	4b12      	ldr	r3, [pc, #72]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c090:	689b      	ldr	r3, [r3, #8]
 800c092:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c096:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800c098:	4b0f      	ldr	r3, [pc, #60]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c09a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c09c:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	431a      	orrs	r2, r3
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800c0a8:	4b0b      	ldr	r3, [pc, #44]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c0aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c0ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d103      	bne.n	800c0be <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800c0bc:	e003      	b.n	800c0c6 <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c0c4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800c0c6:	bf00      	nop
 800c0c8:	3714      	adds	r7, #20
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr
 800c0d2:	bf00      	nop
 800c0d4:	00fffff1 	.word	0x00fffff1
 800c0d8:	40023800 	.word	0x40023800

0800c0dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b087      	sub	sp, #28
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c0fa:	f040 808d 	bne.w	800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c0fe:	4b93      	ldr	r3, [pc, #588]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c100:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c104:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800c10c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c114:	d07c      	beq.n	800c210 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c11c:	d87b      	bhi.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d004      	beq.n	800c12e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c12a:	d039      	beq.n	800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c12c:	e073      	b.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c12e:	4b87      	ldr	r3, [pc, #540]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c136:	2b00      	cmp	r3, #0
 800c138:	d108      	bne.n	800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c13a:	4b84      	ldr	r3, [pc, #528]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c142:	4a83      	ldr	r2, [pc, #524]	@ (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800c144:	fbb2 f3f3 	udiv	r3, r2, r3
 800c148:	613b      	str	r3, [r7, #16]
 800c14a:	e007      	b.n	800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c14c:	4b7f      	ldr	r3, [pc, #508]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c14e:	685b      	ldr	r3, [r3, #4]
 800c150:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c154:	4a7f      	ldr	r2, [pc, #508]	@ (800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c156:	fbb2 f3f3 	udiv	r3, r2, r3
 800c15a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c15c:	4b7b      	ldr	r3, [pc, #492]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c15e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c162:	0e1b      	lsrs	r3, r3, #24
 800c164:	f003 030f 	and.w	r3, r3, #15
 800c168:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c16a:	4b78      	ldr	r3, [pc, #480]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c16c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c170:	099b      	lsrs	r3, r3, #6
 800c172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c176:	693a      	ldr	r2, [r7, #16]
 800c178:	fb03 f202 	mul.w	r2, r3, r2
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c182:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c184:	4b71      	ldr	r3, [pc, #452]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c186:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c18a:	0a1b      	lsrs	r3, r3, #8
 800c18c:	f003 031f 	and.w	r3, r3, #31
 800c190:	3301      	adds	r3, #1
 800c192:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c194:	697a      	ldr	r2, [r7, #20]
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	fbb2 f3f3 	udiv	r3, r2, r3
 800c19c:	617b      	str	r3, [r7, #20]
        break;
 800c19e:	e03b      	b.n	800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c1a0:	4b6a      	ldr	r3, [pc, #424]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c1a2:	685b      	ldr	r3, [r3, #4]
 800c1a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d108      	bne.n	800c1be <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c1ac:	4b67      	ldr	r3, [pc, #412]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c1b4:	4a66      	ldr	r2, [pc, #408]	@ (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800c1b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1ba:	613b      	str	r3, [r7, #16]
 800c1bc:	e007      	b.n	800c1ce <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c1be:	4b63      	ldr	r3, [pc, #396]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c1c0:	685b      	ldr	r3, [r3, #4]
 800c1c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c1c6:	4a63      	ldr	r2, [pc, #396]	@ (800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c1c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1cc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c1ce:	4b5f      	ldr	r3, [pc, #380]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c1d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1d4:	0e1b      	lsrs	r3, r3, #24
 800c1d6:	f003 030f 	and.w	r3, r3, #15
 800c1da:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c1dc:	4b5b      	ldr	r3, [pc, #364]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c1de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1e2:	099b      	lsrs	r3, r3, #6
 800c1e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1e8:	693a      	ldr	r2, [r7, #16]
 800c1ea:	fb03 f202 	mul.w	r2, r3, r2
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1f4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c1f6:	4b55      	ldr	r3, [pc, #340]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c1f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c1fc:	f003 031f 	and.w	r3, r3, #31
 800c200:	3301      	adds	r3, #1
 800c202:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c204:	697a      	ldr	r2, [r7, #20]
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	fbb2 f3f3 	udiv	r3, r2, r3
 800c20c:	617b      	str	r3, [r7, #20]
        break;
 800c20e:	e003      	b.n	800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c210:	4b51      	ldr	r3, [pc, #324]	@ (800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c212:	617b      	str	r3, [r7, #20]
        break;
 800c214:	e000      	b.n	800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800c216:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c21e:	f040 808d 	bne.w	800c33c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c222:	4b4a      	ldr	r3, [pc, #296]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c224:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c228:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800c230:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c238:	d07c      	beq.n	800c334 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c240:	d87b      	bhi.n	800c33a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d004      	beq.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c24e:	d039      	beq.n	800c2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c250:	e073      	b.n	800c33a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c252:	4b3e      	ldr	r3, [pc, #248]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d108      	bne.n	800c270 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c25e:	4b3b      	ldr	r3, [pc, #236]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c266:	4a3a      	ldr	r2, [pc, #232]	@ (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800c268:	fbb2 f3f3 	udiv	r3, r2, r3
 800c26c:	613b      	str	r3, [r7, #16]
 800c26e:	e007      	b.n	800c280 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c270:	4b36      	ldr	r3, [pc, #216]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c278:	4a36      	ldr	r2, [pc, #216]	@ (800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c27a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c27e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c280:	4b32      	ldr	r3, [pc, #200]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c286:	0e1b      	lsrs	r3, r3, #24
 800c288:	f003 030f 	and.w	r3, r3, #15
 800c28c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c28e:	4b2f      	ldr	r3, [pc, #188]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c294:	099b      	lsrs	r3, r3, #6
 800c296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c29a:	693a      	ldr	r2, [r7, #16]
 800c29c:	fb03 f202 	mul.w	r2, r3, r2
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2a6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c2a8:	4b28      	ldr	r3, [pc, #160]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c2aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c2ae:	0a1b      	lsrs	r3, r3, #8
 800c2b0:	f003 031f 	and.w	r3, r3, #31
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c2b8:	697a      	ldr	r2, [r7, #20]
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2c0:	617b      	str	r3, [r7, #20]
        break;
 800c2c2:	e03b      	b.n	800c33c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c2c4:	4b21      	ldr	r3, [pc, #132]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d108      	bne.n	800c2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c2d0:	4b1e      	ldr	r3, [pc, #120]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c2d8:	4a1d      	ldr	r2, [pc, #116]	@ (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800c2da:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2de:	613b      	str	r3, [r7, #16]
 800c2e0:	e007      	b.n	800c2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c2e2:	4b1a      	ldr	r3, [pc, #104]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c2ea:	4a1a      	ldr	r2, [pc, #104]	@ (800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c2ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2f0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c2f2:	4b16      	ldr	r3, [pc, #88]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c2f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2f8:	0e1b      	lsrs	r3, r3, #24
 800c2fa:	f003 030f 	and.w	r3, r3, #15
 800c2fe:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c300:	4b12      	ldr	r3, [pc, #72]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c302:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c306:	099b      	lsrs	r3, r3, #6
 800c308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c30c:	693a      	ldr	r2, [r7, #16]
 800c30e:	fb03 f202 	mul.w	r2, r3, r2
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	fbb2 f3f3 	udiv	r3, r2, r3
 800c318:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c31a:	4b0c      	ldr	r3, [pc, #48]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c31c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c320:	f003 031f 	and.w	r3, r3, #31
 800c324:	3301      	adds	r3, #1
 800c326:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c328:	697a      	ldr	r2, [r7, #20]
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c330:	617b      	str	r3, [r7, #20]
        break;
 800c332:	e003      	b.n	800c33c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c334:	4b08      	ldr	r3, [pc, #32]	@ (800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c336:	617b      	str	r3, [r7, #20]
        break;
 800c338:	e000      	b.n	800c33c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800c33a:	bf00      	nop
      }
    }
  }

  return frequency;
 800c33c:	697b      	ldr	r3, [r7, #20]
}
 800c33e:	4618      	mov	r0, r3
 800c340:	371c      	adds	r7, #28
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr
 800c34a:	bf00      	nop
 800c34c:	40023800 	.word	0x40023800
 800c350:	00f42400 	.word	0x00f42400
 800c354:	017d7840 	.word	0x017d7840
 800c358:	00bb8000 	.word	0x00bb8000

0800c35c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b088      	sub	sp, #32
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800c364:	2300      	movs	r3, #0
 800c366:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800c368:	2300      	movs	r3, #0
 800c36a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800c36c:	2300      	movs	r3, #0
 800c36e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d101      	bne.n	800c37a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800c376:	2301      	movs	r3, #1
 800c378:	e156      	b.n	800c628 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c380:	b2db      	uxtb	r3, r3
 800c382:	2b00      	cmp	r3, #0
 800c384:	d106      	bne.n	800c394 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2200      	movs	r2, #0
 800c38a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f7f7 f990 	bl	80036b4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2202      	movs	r2, #2
 800c398:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f000 fa85 	bl	800c8ac <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	68db      	ldr	r3, [r3, #12]
 800c3a6:	2b02      	cmp	r3, #2
 800c3a8:	d00c      	beq.n	800c3c4 <HAL_SAI_Init+0x68>
 800c3aa:	2b02      	cmp	r3, #2
 800c3ac:	d80d      	bhi.n	800c3ca <HAL_SAI_Init+0x6e>
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d002      	beq.n	800c3b8 <HAL_SAI_Init+0x5c>
 800c3b2:	2b01      	cmp	r3, #1
 800c3b4:	d003      	beq.n	800c3be <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800c3b6:	e008      	b.n	800c3ca <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	61fb      	str	r3, [r7, #28]
      break;
 800c3bc:	e006      	b.n	800c3cc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800c3be:	2310      	movs	r3, #16
 800c3c0:	61fb      	str	r3, [r7, #28]
      break;
 800c3c2:	e003      	b.n	800c3cc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800c3c4:	2320      	movs	r3, #32
 800c3c6:	61fb      	str	r3, [r7, #28]
      break;
 800c3c8:	e000      	b.n	800c3cc <HAL_SAI_Init+0x70>
      break;
 800c3ca:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	689b      	ldr	r3, [r3, #8]
 800c3d0:	2b03      	cmp	r3, #3
 800c3d2:	d81e      	bhi.n	800c412 <HAL_SAI_Init+0xb6>
 800c3d4:	a201      	add	r2, pc, #4	@ (adr r2, 800c3dc <HAL_SAI_Init+0x80>)
 800c3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3da:	bf00      	nop
 800c3dc:	0800c3ed 	.word	0x0800c3ed
 800c3e0:	0800c3f3 	.word	0x0800c3f3
 800c3e4:	0800c3fb 	.word	0x0800c3fb
 800c3e8:	0800c403 	.word	0x0800c403
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	617b      	str	r3, [r7, #20]
    }
    break;
 800c3f0:	e010      	b.n	800c414 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800c3f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c3f6:	617b      	str	r3, [r7, #20]
    }
    break;
 800c3f8:	e00c      	b.n	800c414 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c3fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c3fe:	617b      	str	r3, [r7, #20]
    }
    break;
 800c400:	e008      	b.n	800c414 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c402:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c406:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800c408:	69fb      	ldr	r3, [r7, #28]
 800c40a:	f043 0301 	orr.w	r3, r3, #1
 800c40e:	61fb      	str	r3, [r7, #28]
    }
    break;
 800c410:	e000      	b.n	800c414 <HAL_SAI_Init+0xb8>
    default:
      break;
 800c412:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a85      	ldr	r2, [pc, #532]	@ (800c630 <HAL_SAI_Init+0x2d4>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d004      	beq.n	800c428 <HAL_SAI_Init+0xcc>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a84      	ldr	r2, [pc, #528]	@ (800c634 <HAL_SAI_Init+0x2d8>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d103      	bne.n	800c430 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800c428:	4a83      	ldr	r2, [pc, #524]	@ (800c638 <HAL_SAI_Init+0x2dc>)
 800c42a:	69fb      	ldr	r3, [r7, #28]
 800c42c:	6013      	str	r3, [r2, #0]
 800c42e:	e002      	b.n	800c436 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800c430:	4a82      	ldr	r2, [pc, #520]	@ (800c63c <HAL_SAI_Init+0x2e0>)
 800c432:	69fb      	ldr	r3, [r7, #28]
 800c434:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	69db      	ldr	r3, [r3, #28]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d04c      	beq.n	800c4d8 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800c43e:	2300      	movs	r3, #0
 800c440:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a7a      	ldr	r2, [pc, #488]	@ (800c630 <HAL_SAI_Init+0x2d4>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d004      	beq.n	800c456 <HAL_SAI_Init+0xfa>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a78      	ldr	r2, [pc, #480]	@ (800c634 <HAL_SAI_Init+0x2d8>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d104      	bne.n	800c460 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800c456:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800c45a:	f7ff fe3f 	bl	800c0dc <HAL_RCCEx_GetPeriphCLKFreq>
 800c45e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a76      	ldr	r2, [pc, #472]	@ (800c640 <HAL_SAI_Init+0x2e4>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d004      	beq.n	800c474 <HAL_SAI_Init+0x118>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	4a75      	ldr	r2, [pc, #468]	@ (800c644 <HAL_SAI_Init+0x2e8>)
 800c470:	4293      	cmp	r3, r2
 800c472:	d104      	bne.n	800c47e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800c474:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c478:	f7ff fe30 	bl	800c0dc <HAL_RCCEx_GetPeriphCLKFreq>
 800c47c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800c47e:	693a      	ldr	r2, [r7, #16]
 800c480:	4613      	mov	r3, r2
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	4413      	add	r3, r2
 800c486:	005b      	lsls	r3, r3, #1
 800c488:	461a      	mov	r2, r3
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	69db      	ldr	r3, [r3, #28]
 800c48e:	025b      	lsls	r3, r3, #9
 800c490:	fbb2 f3f3 	udiv	r3, r2, r3
 800c494:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	4a6b      	ldr	r2, [pc, #428]	@ (800c648 <HAL_SAI_Init+0x2ec>)
 800c49a:	fba2 2303 	umull	r2, r3, r2, r3
 800c49e:	08da      	lsrs	r2, r3, #3
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800c4a4:	68f9      	ldr	r1, [r7, #12]
 800c4a6:	4b68      	ldr	r3, [pc, #416]	@ (800c648 <HAL_SAI_Init+0x2ec>)
 800c4a8:	fba3 2301 	umull	r2, r3, r3, r1
 800c4ac:	08da      	lsrs	r2, r3, #3
 800c4ae:	4613      	mov	r3, r2
 800c4b0:	009b      	lsls	r3, r3, #2
 800c4b2:	4413      	add	r3, r2
 800c4b4:	005b      	lsls	r3, r3, #1
 800c4b6:	1aca      	subs	r2, r1, r3
 800c4b8:	2a08      	cmp	r2, #8
 800c4ba:	d904      	bls.n	800c4c6 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6a1b      	ldr	r3, [r3, #32]
 800c4c0:	1c5a      	adds	r2, r3, #1
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4ca:	2b04      	cmp	r3, #4
 800c4cc:	d104      	bne.n	800c4d8 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6a1b      	ldr	r3, [r3, #32]
 800c4d2:	085a      	lsrs	r2, r3, #1
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d003      	beq.n	800c4e8 <HAL_SAI_Init+0x18c>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	2b02      	cmp	r3, #2
 800c4e6:	d109      	bne.n	800c4fc <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	d101      	bne.n	800c4f4 <HAL_SAI_Init+0x198>
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	e001      	b.n	800c4f8 <HAL_SAI_Init+0x19c>
 800c4f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c4f8:	61bb      	str	r3, [r7, #24]
 800c4fa:	e008      	b.n	800c50e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c500:	2b01      	cmp	r3, #1
 800c502:	d102      	bne.n	800c50a <HAL_SAI_Init+0x1ae>
 800c504:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c508:	e000      	b.n	800c50c <HAL_SAI_Init+0x1b0>
 800c50a:	2300      	movs	r3, #0
 800c50c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	6819      	ldr	r1, [r3, #0]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681a      	ldr	r2, [r3, #0]
 800c518:	4b4c      	ldr	r3, [pc, #304]	@ (800c64c <HAL_SAI_Init+0x2f0>)
 800c51a:	400b      	ands	r3, r1
 800c51c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	6819      	ldr	r1, [r3, #0]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	685a      	ldr	r2, [r3, #4]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c52c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c532:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c538:	431a      	orrs	r2, r3
 800c53a:	69bb      	ldr	r3, [r7, #24]
 800c53c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800c546:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	691b      	ldr	r3, [r3, #16]
 800c54c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c552:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6a1b      	ldr	r3, [r3, #32]
 800c558:	051b      	lsls	r3, r3, #20
 800c55a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	430a      	orrs	r2, r1
 800c562:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	6859      	ldr	r1, [r3, #4]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681a      	ldr	r2, [r3, #0]
 800c56e:	4b38      	ldr	r3, [pc, #224]	@ (800c650 <HAL_SAI_Init+0x2f4>)
 800c570:	400b      	ands	r3, r1
 800c572:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	6859      	ldr	r1, [r3, #4]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	699a      	ldr	r2, [r3, #24]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c582:	431a      	orrs	r2, r3
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c588:	431a      	orrs	r2, r3
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	430a      	orrs	r2, r1
 800c590:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	6899      	ldr	r1, [r3, #8]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681a      	ldr	r2, [r3, #0]
 800c59c:	4b2d      	ldr	r3, [pc, #180]	@ (800c654 <HAL_SAI_Init+0x2f8>)
 800c59e:	400b      	ands	r3, r1
 800c5a0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	6899      	ldr	r1, [r3, #8]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5ac:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c5b2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800c5b8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800c5be:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5c4:	3b01      	subs	r3, #1
 800c5c6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800c5c8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	430a      	orrs	r2, r1
 800c5d0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	68d9      	ldr	r1, [r3, #12]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800c5e0:	400b      	ands	r3, r1
 800c5e2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	68d9      	ldr	r1, [r3, #12]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5f2:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c5f8:	041b      	lsls	r3, r3, #16
 800c5fa:	431a      	orrs	r2, r3
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c600:	3b01      	subs	r3, #1
 800c602:	021b      	lsls	r3, r3, #8
 800c604:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	430a      	orrs	r2, r1
 800c60c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2200      	movs	r2, #0
 800c612:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2201      	movs	r2, #1
 800c61a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2200      	movs	r2, #0
 800c622:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800c626:	2300      	movs	r3, #0
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3720      	adds	r7, #32
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	40015804 	.word	0x40015804
 800c634:	40015824 	.word	0x40015824
 800c638:	40015800 	.word	0x40015800
 800c63c:	40015c00 	.word	0x40015c00
 800c640:	40015c04 	.word	0x40015c04
 800c644:	40015c24 	.word	0x40015c24
 800c648:	cccccccd 	.word	0xcccccccd
 800c64c:	ff05c010 	.word	0xff05c010
 800c650:	ffff1ff0 	.word	0xffff1ff0
 800c654:	fff88000 	.word	0xfff88000

0800c658 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d101      	bne.n	800c66a <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800c666:	2301      	movs	r3, #1
 800c668:	e027      	b.n	800c6ba <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2202      	movs	r2, #2
 800c66e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2200      	movs	r2, #0
 800c678:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c682:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f000 f911 	bl	800c8ac <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	685a      	ldr	r2, [r3, #4]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f042 0208 	orr.w	r2, r2, #8
 800c698:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f7f7 f8e8 	bl	8003870 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800c6b8:	2300      	movs	r3, #0
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3708      	adds	r7, #8
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
	...

0800c6c4 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b086      	sub	sp, #24
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	60f8      	str	r0, [r7, #12]
 800c6cc:	60b9      	str	r1, [r7, #8]
 800c6ce:	4613      	mov	r3, r2
 800c6d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800c6d2:	f7fb fa55 	bl	8007b80 <HAL_GetTick>
 800c6d6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d002      	beq.n	800c6e4 <HAL_SAI_Transmit_DMA+0x20>
 800c6de:	88fb      	ldrh	r3, [r7, #6]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d101      	bne.n	800c6e8 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	e093      	b.n	800c810 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c6ee:	b2db      	uxtb	r3, r3
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	f040 808c 	bne.w	800c80e <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	d101      	bne.n	800c704 <HAL_SAI_Transmit_DMA+0x40>
 800c700:	2302      	movs	r3, #2
 800c702:	e085      	b.n	800c810 <HAL_SAI_Transmit_DMA+0x14c>
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2201      	movs	r2, #1
 800c708:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	68ba      	ldr	r2, [r7, #8]
 800c710:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	88fa      	ldrh	r2, [r7, #6]
 800c716:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	88fa      	ldrh	r2, [r7, #6]
 800c71e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2200      	movs	r2, #0
 800c726:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	2212      	movs	r2, #18
 800c72e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c736:	4a38      	ldr	r2, [pc, #224]	@ (800c818 <HAL_SAI_Transmit_DMA+0x154>)
 800c738:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c73e:	4a37      	ldr	r2, [pc, #220]	@ (800c81c <HAL_SAI_Transmit_DMA+0x158>)
 800c740:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c746:	4a36      	ldr	r2, [pc, #216]	@ (800c820 <HAL_SAI_Transmit_DMA+0x15c>)
 800c748:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c74e:	2200      	movs	r2, #0
 800c750:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c75a:	4619      	mov	r1, r3
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	331c      	adds	r3, #28
 800c762:	461a      	mov	r2, r3
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c76a:	f7fc f821 	bl	80087b0 <HAL_DMA_Start_IT>
 800c76e:	4603      	mov	r3, r0
 800c770:	2b00      	cmp	r3, #0
 800c772:	d005      	beq.n	800c780 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	2200      	movs	r2, #0
 800c778:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 800c77c:	2301      	movs	r3, #1
 800c77e:	e047      	b.n	800c810 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c780:	2100      	movs	r1, #0
 800c782:	68f8      	ldr	r0, [r7, #12]
 800c784:	f000 f85c 	bl	800c840 <SAI_InterruptFlag>
 800c788:	4601      	mov	r1, r0
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	691a      	ldr	r2, [r3, #16]
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	430a      	orrs	r2, r1
 800c796:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	681a      	ldr	r2, [r3, #0]
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c7a6:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800c7a8:	e015      	b.n	800c7d6 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800c7aa:	f7fb f9e9 	bl	8007b80 <HAL_GetTick>
 800c7ae:	4602      	mov	r2, r0
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	1ad3      	subs	r3, r2, r3
 800c7b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c7b8:	d90d      	bls.n	800c7d6 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7c0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800c7d2:	2303      	movs	r3, #3
 800c7d4:	e01c      	b.n	800c810 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	695b      	ldr	r3, [r3, #20]
 800c7dc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d0e2      	beq.n	800c7aa <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d107      	bne.n	800c802 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800c800:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2200      	movs	r2, #0
 800c806:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800c80a:	2300      	movs	r3, #0
 800c80c:	e000      	b.n	800c810 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800c80e:	2302      	movs	r3, #2
  }
}
 800c810:	4618      	mov	r0, r3
 800c812:	3718      	adds	r7, #24
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}
 800c818:	0800c97d 	.word	0x0800c97d
 800c81c:	0800c91d 	.word	0x0800c91d
 800c820:	0800c999 	.word	0x0800c999

0800c824 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c832:	b2db      	uxtb	r3, r3
}
 800c834:	4618      	mov	r0, r3
 800c836:	370c      	adds	r7, #12
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr

0800c840 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800c840:	b480      	push	{r7}
 800c842:	b085      	sub	sp, #20
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800c84a:	2301      	movs	r3, #1
 800c84c:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	2b01      	cmp	r3, #1
 800c852:	d103      	bne.n	800c85c <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f043 0308 	orr.w	r3, r3, #8
 800c85a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c860:	2b08      	cmp	r3, #8
 800c862:	d10b      	bne.n	800c87c <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800c868:	2b03      	cmp	r3, #3
 800c86a:	d003      	beq.n	800c874 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	685b      	ldr	r3, [r3, #4]
 800c870:	2b01      	cmp	r3, #1
 800c872:	d103      	bne.n	800c87c <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f043 0310 	orr.w	r3, r3, #16
 800c87a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	685b      	ldr	r3, [r3, #4]
 800c880:	2b03      	cmp	r3, #3
 800c882:	d003      	beq.n	800c88c <SAI_InterruptFlag+0x4c>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	2b02      	cmp	r3, #2
 800c88a:	d104      	bne.n	800c896 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800c892:	60fb      	str	r3, [r7, #12]
 800c894:	e003      	b.n	800c89e <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	f043 0304 	orr.w	r3, r3, #4
 800c89c:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800c89e:	68fb      	ldr	r3, [r7, #12]
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3714      	adds	r7, #20
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr

0800c8ac <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b085      	sub	sp, #20
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800c8b4:	4b17      	ldr	r3, [pc, #92]	@ (800c914 <SAI_Disable+0x68>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4a17      	ldr	r2, [pc, #92]	@ (800c918 <SAI_Disable+0x6c>)
 800c8ba:	fba2 2303 	umull	r2, r3, r2, r3
 800c8be:	0b1b      	lsrs	r3, r3, #12
 800c8c0:	009b      	lsls	r3, r3, #2
 800c8c2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800c8d6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	1e5a      	subs	r2, r3, #1
 800c8dc:	60fa      	str	r2, [r7, #12]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d10a      	bne.n	800c8f8 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8e8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800c8f2:	2303      	movs	r3, #3
 800c8f4:	72fb      	strb	r3, [r7, #11]
      break;
 800c8f6:	e006      	b.n	800c906 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c902:	2b00      	cmp	r3, #0
 800c904:	d1e8      	bne.n	800c8d8 <SAI_Disable+0x2c>

  return status;
 800c906:	7afb      	ldrb	r3, [r7, #11]
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3714      	adds	r7, #20
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr
 800c914:	2000004c 	.word	0x2000004c
 800c918:	95cbec1b 	.word	0x95cbec1b

0800c91c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c928:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	69db      	ldr	r3, [r3, #28]
 800c92e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c932:	d01c      	beq.n	800c96e <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	2200      	movs	r2, #0
 800c938:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800c94a:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c94c:	2100      	movs	r1, #0
 800c94e:	68f8      	ldr	r0, [r7, #12]
 800c950:	f7ff ff76 	bl	800c840 <SAI_InterruptFlag>
 800c954:	4603      	mov	r3, r0
 800c956:	43d9      	mvns	r1, r3
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	691a      	ldr	r2, [r3, #16]
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	400a      	ands	r2, r1
 800c964:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2201      	movs	r2, #1
 800c96a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800c96e:	68f8      	ldr	r0, [r7, #12]
 800c970:	f7f7 fb54 	bl	800401c <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800c974:	bf00      	nop
 800c976:	3710      	adds	r7, #16
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c988:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800c98a:	68f8      	ldr	r0, [r7, #12]
 800c98c:	f7f7 fb50 	bl	8004030 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800c990:	bf00      	nop
 800c992:	3710      	adds	r7, #16
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9a4:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9ac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d004      	beq.n	800c9ca <SAI_DMAError+0x32>
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c9c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d112      	bne.n	800c9f0 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800c9d8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800c9da:	68f8      	ldr	r0, [r7, #12]
 800c9dc:	f7ff ff66 	bl	800c8ac <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800c9f0:	68f8      	ldr	r0, [r7, #12]
 800c9f2:	f7f7 fb27 	bl	8004044 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800c9f6:	bf00      	nop
 800c9f8:	3710      	adds	r7, #16
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b082      	sub	sp, #8
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d101      	bne.n	800ca10 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	e022      	b.n	800ca56 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d105      	bne.n	800ca28 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f7f6 ff9e 	bl	8003964 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2203      	movs	r2, #3
 800ca2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f000 f815 	bl	800ca60 <HAL_SD_InitCard>
 800ca36:	4603      	mov	r3, r0
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d001      	beq.n	800ca40 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	e00a      	b.n	800ca56 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2201      	movs	r2, #1
 800ca50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ca54:	2300      	movs	r3, #0
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3708      	adds	r7, #8
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
	...

0800ca60 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ca60:	b5b0      	push	{r4, r5, r7, lr}
 800ca62:	b08e      	sub	sp, #56	@ 0x38
 800ca64:	af04      	add	r7, sp, #16
 800ca66:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800ca70:	2300      	movs	r3, #0
 800ca72:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800ca74:	2300      	movs	r3, #0
 800ca76:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800ca7c:	2376      	movs	r3, #118	@ 0x76
 800ca7e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681d      	ldr	r5, [r3, #0]
 800ca84:	466c      	mov	r4, sp
 800ca86:	f107 0314 	add.w	r3, r7, #20
 800ca8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ca8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ca92:	f107 0308 	add.w	r3, r7, #8
 800ca96:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ca98:	4628      	mov	r0, r5
 800ca9a:	f001 ff13 	bl	800e8c4 <SDMMC_Init>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800caa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d001      	beq.n	800cab0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800caac:	2301      	movs	r3, #1
 800caae:	e059      	b.n	800cb64 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	685a      	ldr	r2, [r3, #4]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cabe:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4618      	mov	r0, r3
 800cac6:	f001 ff29 	bl	800e91c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	685a      	ldr	r2, [r3, #4]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cad8:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800cada:	2002      	movs	r0, #2
 800cadc:	f7fb f85c 	bl	8007b98 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f000 fd75 	bl	800d5d0 <SD_PowerON>
 800cae6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cae8:	6a3b      	ldr	r3, [r7, #32]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d00b      	beq.n	800cb06 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2201      	movs	r2, #1
 800caf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cafa:	6a3b      	ldr	r3, [r7, #32]
 800cafc:	431a      	orrs	r2, r3
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cb02:	2301      	movs	r3, #1
 800cb04:	e02e      	b.n	800cb64 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f000 fc94 	bl	800d434 <SD_InitCard>
 800cb0c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb0e:	6a3b      	ldr	r3, [r7, #32]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d00b      	beq.n	800cb2c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2201      	movs	r2, #1
 800cb18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb20:	6a3b      	ldr	r3, [r7, #32]
 800cb22:	431a      	orrs	r2, r3
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cb28:	2301      	movs	r3, #1
 800cb2a:	e01b      	b.n	800cb64 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cb34:	4618      	mov	r0, r3
 800cb36:	f001 ff83 	bl	800ea40 <SDMMC_CmdBlockLength>
 800cb3a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb3c:	6a3b      	ldr	r3, [r7, #32]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d00f      	beq.n	800cb62 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	4a09      	ldr	r2, [pc, #36]	@ (800cb6c <HAL_SD_InitCard+0x10c>)
 800cb48:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb4e:	6a3b      	ldr	r3, [r7, #32]
 800cb50:	431a      	orrs	r2, r3
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2201      	movs	r2, #1
 800cb5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	e000      	b.n	800cb64 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800cb62:	2300      	movs	r3, #0
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3728      	adds	r7, #40	@ 0x28
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bdb0      	pop	{r4, r5, r7, pc}
 800cb6c:	004005ff 	.word	0x004005ff

0800cb70 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b08c      	sub	sp, #48	@ 0x30
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	60f8      	str	r0, [r7, #12]
 800cb78:	60b9      	str	r1, [r7, #8]
 800cb7a:	607a      	str	r2, [r7, #4]
 800cb7c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d107      	bne.n	800cb98 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb8c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cb94:	2301      	movs	r3, #1
 800cb96:	e0c3      	b.n	800cd20 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cb9e:	b2db      	uxtb	r3, r3
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	f040 80bc 	bne.w	800cd1e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cbac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	441a      	add	r2, r3
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d907      	bls.n	800cbca <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbbe:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	e0aa      	b.n	800cd20 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	2203      	movs	r2, #3
 800cbce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800cbe8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbee:	4a4e      	ldr	r2, [pc, #312]	@ (800cd28 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800cbf0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbf6:	4a4d      	ldr	r2, [pc, #308]	@ (800cd2c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800cbf8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbfe:	2200      	movs	r2, #0
 800cc00:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc06:	2200      	movs	r2, #0
 800cc08:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc1a:	689a      	ldr	r2, [r3, #8]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	430a      	orrs	r2, r1
 800cc24:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	3380      	adds	r3, #128	@ 0x80
 800cc30:	4619      	mov	r1, r3
 800cc32:	68ba      	ldr	r2, [r7, #8]
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	025b      	lsls	r3, r3, #9
 800cc38:	089b      	lsrs	r3, r3, #2
 800cc3a:	f7fb fdb9 	bl	80087b0 <HAL_DMA_Start_IT>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d017      	beq.n	800cc74 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800cc52:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4a35      	ldr	r2, [pc, #212]	@ (800cd30 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800cc5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc60:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800cc70:	2301      	movs	r3, #1
 800cc72:	e055      	b.n	800cd20 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f042 0208 	orr.w	r2, r2, #8
 800cc82:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d002      	beq.n	800cc92 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800cc8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc8e:	025b      	lsls	r3, r3, #9
 800cc90:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cc92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cc96:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	025b      	lsls	r3, r3, #9
 800cc9c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cc9e:	2390      	movs	r3, #144	@ 0x90
 800cca0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cca2:	2302      	movs	r3, #2
 800cca4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cca6:	2300      	movs	r3, #0
 800cca8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800ccaa:	2301      	movs	r3, #1
 800ccac:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f107 0210 	add.w	r2, r7, #16
 800ccb6:	4611      	mov	r1, r2
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f001 fe95 	bl	800e9e8 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d90a      	bls.n	800ccda <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2282      	movs	r2, #130	@ 0x82
 800ccc8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f001 fef9 	bl	800eac8 <SDMMC_CmdReadMultiBlock>
 800ccd6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800ccd8:	e009      	b.n	800ccee <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2281      	movs	r2, #129	@ 0x81
 800ccde:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cce6:	4618      	mov	r0, r3
 800cce8:	f001 fecc 	bl	800ea84 <SDMMC_CmdReadSingleBlock>
 800ccec:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800ccee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d012      	beq.n	800cd1a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	4a0d      	ldr	r2, [pc, #52]	@ (800cd30 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800ccfa:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd02:	431a      	orrs	r2, r3
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2200      	movs	r2, #0
 800cd14:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800cd16:	2301      	movs	r3, #1
 800cd18:	e002      	b.n	800cd20 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	e000      	b.n	800cd20 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800cd1e:	2302      	movs	r3, #2
  }
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3730      	adds	r7, #48	@ 0x30
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	0800d31f 	.word	0x0800d31f
 800cd2c:	0800d391 	.word	0x0800d391
 800cd30:	004005ff 	.word	0x004005ff

0800cd34 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b08c      	sub	sp, #48	@ 0x30
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	607a      	str	r2, [r7, #4]
 800cd40:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d107      	bne.n	800cd5c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd50:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cd58:	2301      	movs	r3, #1
 800cd5a:	e0c6      	b.n	800ceea <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	f040 80bf 	bne.w	800cee8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cd70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	441a      	add	r2, r3
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d907      	bls.n	800cd8e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd82:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e0ad      	b.n	800ceea <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	2203      	movs	r2, #3
 800cd92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f042 021a 	orr.w	r2, r2, #26
 800cdac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdb2:	4a50      	ldr	r2, [pc, #320]	@ (800cef4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800cdb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdba:	4a4f      	ldr	r2, [pc, #316]	@ (800cef8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800cdbc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdca:	2b01      	cmp	r3, #1
 800cdcc:	d002      	beq.n	800cdd4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800cdce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdd0:	025b      	lsls	r3, r3, #9
 800cdd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	2b01      	cmp	r3, #1
 800cdd8:	d90a      	bls.n	800cdf0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	22a0      	movs	r2, #160	@ 0xa0
 800cdde:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cde6:	4618      	mov	r0, r3
 800cde8:	f001 feb2 	bl	800eb50 <SDMMC_CmdWriteMultiBlock>
 800cdec:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800cdee:	e009      	b.n	800ce04 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2290      	movs	r2, #144	@ 0x90
 800cdf4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f001 fe85 	bl	800eb0c <SDMMC_CmdWriteSingleBlock>
 800ce02:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ce04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d012      	beq.n	800ce30 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4a3b      	ldr	r2, [pc, #236]	@ (800cefc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800ce10:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce18:	431a      	orrs	r2, r3
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	2201      	movs	r2, #1
 800ce22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	e05c      	b.n	800ceea <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f042 0208 	orr.w	r2, r2, #8
 800ce3e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce44:	2240      	movs	r2, #64	@ 0x40
 800ce46:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce58:	689a      	ldr	r2, [r3, #8]
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	430a      	orrs	r2, r1
 800ce62:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ce68:	68b9      	ldr	r1, [r7, #8]
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	3380      	adds	r3, #128	@ 0x80
 800ce70:	461a      	mov	r2, r3
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	025b      	lsls	r3, r3, #9
 800ce76:	089b      	lsrs	r3, r3, #2
 800ce78:	f7fb fc9a 	bl	80087b0 <HAL_DMA_Start_IT>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d01a      	beq.n	800ceb8 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f022 021a 	bic.w	r2, r2, #26
 800ce90:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	4a19      	ldr	r2, [pc, #100]	@ (800cefc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800ce98:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce9e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2201      	movs	r2, #1
 800ceaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	e018      	b.n	800ceea <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ceb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cebc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	025b      	lsls	r3, r3, #9
 800cec2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cec4:	2390      	movs	r3, #144	@ 0x90
 800cec6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800cec8:	2300      	movs	r3, #0
 800ceca:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cecc:	2300      	movs	r3, #0
 800cece:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800ced0:	2301      	movs	r3, #1
 800ced2:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f107 0210 	add.w	r2, r7, #16
 800cedc:	4611      	mov	r1, r2
 800cede:	4618      	mov	r0, r3
 800cee0:	f001 fd82 	bl	800e9e8 <SDMMC_ConfigData>

      return HAL_OK;
 800cee4:	2300      	movs	r3, #0
 800cee6:	e000      	b.n	800ceea <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800cee8:	2302      	movs	r3, #2
  }
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3730      	adds	r7, #48	@ 0x30
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	0800d2f5 	.word	0x0800d2f5
 800cef8:	0800d391 	.word	0x0800d391
 800cefc:	004005ff 	.word	0x004005ff

0800cf00 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b083      	sub	sp, #12
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800cf08:	bf00      	nop
 800cf0a:	370c      	adds	r7, #12
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr

0800cf14 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800cf14:	b480      	push	{r7}
 800cf16:	b083      	sub	sp, #12
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf22:	0f9b      	lsrs	r3, r3, #30
 800cf24:	b2da      	uxtb	r2, r3
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf2e:	0e9b      	lsrs	r3, r3, #26
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	f003 030f 	and.w	r3, r3, #15
 800cf36:	b2da      	uxtb	r2, r3
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf40:	0e1b      	lsrs	r3, r3, #24
 800cf42:	b2db      	uxtb	r3, r3
 800cf44:	f003 0303 	and.w	r3, r3, #3
 800cf48:	b2da      	uxtb	r2, r3
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf52:	0c1b      	lsrs	r3, r3, #16
 800cf54:	b2da      	uxtb	r2, r3
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf5e:	0a1b      	lsrs	r3, r3, #8
 800cf60:	b2da      	uxtb	r2, r3
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf6a:	b2da      	uxtb	r2, r3
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf74:	0d1b      	lsrs	r3, r3, #20
 800cf76:	b29a      	uxth	r2, r3
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf80:	0c1b      	lsrs	r3, r3, #16
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	f003 030f 	and.w	r3, r3, #15
 800cf88:	b2da      	uxtb	r2, r3
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf92:	0bdb      	lsrs	r3, r3, #15
 800cf94:	b2db      	uxtb	r3, r3
 800cf96:	f003 0301 	and.w	r3, r3, #1
 800cf9a:	b2da      	uxtb	r2, r3
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cfa4:	0b9b      	lsrs	r3, r3, #14
 800cfa6:	b2db      	uxtb	r3, r3
 800cfa8:	f003 0301 	and.w	r3, r3, #1
 800cfac:	b2da      	uxtb	r2, r3
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cfb6:	0b5b      	lsrs	r3, r3, #13
 800cfb8:	b2db      	uxtb	r3, r3
 800cfba:	f003 0301 	and.w	r3, r3, #1
 800cfbe:	b2da      	uxtb	r2, r3
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cfc8:	0b1b      	lsrs	r3, r3, #12
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	f003 0301 	and.w	r3, r3, #1
 800cfd0:	b2da      	uxtb	r2, r3
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d163      	bne.n	800d0ac <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cfe8:	009a      	lsls	r2, r3, #2
 800cfea:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800cfee:	4013      	ands	r3, r2
 800cff0:	687a      	ldr	r2, [r7, #4]
 800cff2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800cff4:	0f92      	lsrs	r2, r2, #30
 800cff6:	431a      	orrs	r2, r3
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d000:	0edb      	lsrs	r3, r3, #27
 800d002:	b2db      	uxtb	r3, r3
 800d004:	f003 0307 	and.w	r3, r3, #7
 800d008:	b2da      	uxtb	r2, r3
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d012:	0e1b      	lsrs	r3, r3, #24
 800d014:	b2db      	uxtb	r3, r3
 800d016:	f003 0307 	and.w	r3, r3, #7
 800d01a:	b2da      	uxtb	r2, r3
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d024:	0d5b      	lsrs	r3, r3, #21
 800d026:	b2db      	uxtb	r3, r3
 800d028:	f003 0307 	and.w	r3, r3, #7
 800d02c:	b2da      	uxtb	r2, r3
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d036:	0c9b      	lsrs	r3, r3, #18
 800d038:	b2db      	uxtb	r3, r3
 800d03a:	f003 0307 	and.w	r3, r3, #7
 800d03e:	b2da      	uxtb	r2, r3
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d048:	0bdb      	lsrs	r3, r3, #15
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	f003 0307 	and.w	r3, r3, #7
 800d050:	b2da      	uxtb	r2, r3
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	691b      	ldr	r3, [r3, #16]
 800d05a:	1c5a      	adds	r2, r3, #1
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	7e1b      	ldrb	r3, [r3, #24]
 800d064:	b2db      	uxtb	r3, r3
 800d066:	f003 0307 	and.w	r3, r3, #7
 800d06a:	3302      	adds	r3, #2
 800d06c:	2201      	movs	r2, #1
 800d06e:	fa02 f303 	lsl.w	r3, r2, r3
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800d076:	fb03 f202 	mul.w	r2, r3, r2
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	7a1b      	ldrb	r3, [r3, #8]
 800d082:	b2db      	uxtb	r3, r3
 800d084:	f003 030f 	and.w	r3, r3, #15
 800d088:	2201      	movs	r2, #1
 800d08a:	409a      	lsls	r2, r3
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800d098:	0a52      	lsrs	r2, r2, #9
 800d09a:	fb03 f202 	mul.w	r2, r3, r2
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d0a8:	661a      	str	r2, [r3, #96]	@ 0x60
 800d0aa:	e031      	b.n	800d110 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d11d      	bne.n	800d0f0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d0b8:	041b      	lsls	r3, r3, #16
 800d0ba:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0c2:	0c1b      	lsrs	r3, r3, #16
 800d0c4:	431a      	orrs	r2, r3
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	691b      	ldr	r3, [r3, #16]
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	029a      	lsls	r2, r3, #10
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d0e4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	661a      	str	r2, [r3, #96]	@ 0x60
 800d0ee:	e00f      	b.n	800d110 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a58      	ldr	r2, [pc, #352]	@ (800d258 <HAL_SD_GetCardCSD+0x344>)
 800d0f6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0fc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2201      	movs	r2, #1
 800d108:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d10c:	2301      	movs	r3, #1
 800d10e:	e09d      	b.n	800d24c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d114:	0b9b      	lsrs	r3, r3, #14
 800d116:	b2db      	uxtb	r3, r3
 800d118:	f003 0301 	and.w	r3, r3, #1
 800d11c:	b2da      	uxtb	r2, r3
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d126:	09db      	lsrs	r3, r3, #7
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d12e:	b2da      	uxtb	r2, r3
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d138:	b2db      	uxtb	r3, r3
 800d13a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d13e:	b2da      	uxtb	r2, r3
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d148:	0fdb      	lsrs	r3, r3, #31
 800d14a:	b2da      	uxtb	r2, r3
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d154:	0f5b      	lsrs	r3, r3, #29
 800d156:	b2db      	uxtb	r3, r3
 800d158:	f003 0303 	and.w	r3, r3, #3
 800d15c:	b2da      	uxtb	r2, r3
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d166:	0e9b      	lsrs	r3, r3, #26
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	f003 0307 	and.w	r3, r3, #7
 800d16e:	b2da      	uxtb	r2, r3
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d178:	0d9b      	lsrs	r3, r3, #22
 800d17a:	b2db      	uxtb	r3, r3
 800d17c:	f003 030f 	and.w	r3, r3, #15
 800d180:	b2da      	uxtb	r2, r3
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d18a:	0d5b      	lsrs	r3, r3, #21
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	f003 0301 	and.w	r3, r3, #1
 800d192:	b2da      	uxtb	r2, r3
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	2200      	movs	r2, #0
 800d19e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1a6:	0c1b      	lsrs	r3, r3, #16
 800d1a8:	b2db      	uxtb	r3, r3
 800d1aa:	f003 0301 	and.w	r3, r3, #1
 800d1ae:	b2da      	uxtb	r2, r3
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1ba:	0bdb      	lsrs	r3, r3, #15
 800d1bc:	b2db      	uxtb	r3, r3
 800d1be:	f003 0301 	and.w	r3, r3, #1
 800d1c2:	b2da      	uxtb	r2, r3
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1ce:	0b9b      	lsrs	r3, r3, #14
 800d1d0:	b2db      	uxtb	r3, r3
 800d1d2:	f003 0301 	and.w	r3, r3, #1
 800d1d6:	b2da      	uxtb	r2, r3
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1e2:	0b5b      	lsrs	r3, r3, #13
 800d1e4:	b2db      	uxtb	r3, r3
 800d1e6:	f003 0301 	and.w	r3, r3, #1
 800d1ea:	b2da      	uxtb	r2, r3
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1f6:	0b1b      	lsrs	r3, r3, #12
 800d1f8:	b2db      	uxtb	r3, r3
 800d1fa:	f003 0301 	and.w	r3, r3, #1
 800d1fe:	b2da      	uxtb	r2, r3
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d20a:	0a9b      	lsrs	r3, r3, #10
 800d20c:	b2db      	uxtb	r3, r3
 800d20e:	f003 0303 	and.w	r3, r3, #3
 800d212:	b2da      	uxtb	r2, r3
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d21e:	0a1b      	lsrs	r3, r3, #8
 800d220:	b2db      	uxtb	r3, r3
 800d222:	f003 0303 	and.w	r3, r3, #3
 800d226:	b2da      	uxtb	r2, r3
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d232:	085b      	lsrs	r3, r3, #1
 800d234:	b2db      	uxtb	r3, r3
 800d236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d23a:	b2da      	uxtb	r2, r3
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	2201      	movs	r2, #1
 800d246:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800d24a:	2300      	movs	r3, #0
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	370c      	adds	r7, #12
 800d250:	46bd      	mov	sp, r7
 800d252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d256:	4770      	bx	lr
 800d258:	004005ff 	.word	0x004005ff

0800d25c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d25c:	b480      	push	{r7}
 800d25e:	b083      	sub	sp, #12
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d2a6:	2300      	movs	r3, #0
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	370c      	adds	r7, #12
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b2:	4770      	bx	lr

0800d2b4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b086      	sub	sp, #24
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d2c0:	f107 030c 	add.w	r3, r7, #12
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f000 fa10 	bl	800d6ec <SD_SendStatus>
 800d2cc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d005      	beq.n	800d2e0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	431a      	orrs	r2, r3
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	0a5b      	lsrs	r3, r3, #9
 800d2e4:	f003 030f 	and.w	r3, r3, #15
 800d2e8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d2ea:	693b      	ldr	r3, [r7, #16]
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3718      	adds	r7, #24
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b085      	sub	sp, #20
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d300:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d310:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800d312:	bf00      	nop
 800d314:	3714      	adds	r7, #20
 800d316:	46bd      	mov	sp, r7
 800d318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31c:	4770      	bx	lr

0800d31e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d31e:	b580      	push	{r7, lr}
 800d320:	b084      	sub	sp, #16
 800d322:	af00      	add	r7, sp, #0
 800d324:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d32a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d330:	2b82      	cmp	r3, #130	@ 0x82
 800d332:	d111      	bne.n	800d358 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4618      	mov	r0, r3
 800d33a:	f001 fc2b 	bl	800eb94 <SDMMC_CmdStopTransfer>
 800d33e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d008      	beq.n	800d358 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	431a      	orrs	r2, r3
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d352:	68f8      	ldr	r0, [r7, #12]
 800d354:	f7ff fdd4 	bl	800cf00 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f022 0208 	bic.w	r2, r2, #8
 800d366:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d370:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	2201      	movs	r2, #1
 800d376:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2200      	movs	r2, #0
 800d37e:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d380:	68f8      	ldr	r0, [r7, #12]
 800d382:	f002 f82f 	bl	800f3e4 <HAL_SD_RxCpltCallback>
#endif
}
 800d386:	bf00      	nop
 800d388:	3710      	adds	r7, #16
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
	...

0800d390 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b086      	sub	sp, #24
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d39c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f7fb fbf0 	bl	8008b84 <HAL_DMA_GetError>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	2b02      	cmp	r3, #2
 800d3a8:	d03e      	beq.n	800d428 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3b0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3b8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	d002      	beq.n	800d3c6 <SD_DMAError+0x36>
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	d12d      	bne.n	800d422 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	4a19      	ldr	r2, [pc, #100]	@ (800d430 <SD_DMAError+0xa0>)
 800d3cc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800d3dc:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3e2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d3ea:	6978      	ldr	r0, [r7, #20]
 800d3ec:	f7ff ff62 	bl	800d2b4 <HAL_SD_GetCardState>
 800d3f0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	2b06      	cmp	r3, #6
 800d3f6:	d002      	beq.n	800d3fe <SD_DMAError+0x6e>
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	2b05      	cmp	r3, #5
 800d3fc:	d10a      	bne.n	800d414 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	4618      	mov	r0, r3
 800d404:	f001 fbc6 	bl	800eb94 <SDMMC_CmdStopTransfer>
 800d408:	4602      	mov	r2, r0
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d40e:	431a      	orrs	r2, r3
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	2201      	movs	r2, #1
 800d418:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	2200      	movs	r2, #0
 800d420:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d422:	6978      	ldr	r0, [r7, #20]
 800d424:	f7ff fd6c 	bl	800cf00 <HAL_SD_ErrorCallback>
#endif
  }
}
 800d428:	bf00      	nop
 800d42a:	3718      	adds	r7, #24
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	004005ff 	.word	0x004005ff

0800d434 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d434:	b5b0      	push	{r4, r5, r7, lr}
 800d436:	b094      	sub	sp, #80	@ 0x50
 800d438:	af04      	add	r7, sp, #16
 800d43a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d43c:	2301      	movs	r3, #1
 800d43e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	4618      	mov	r0, r3
 800d446:	f001 fa77 	bl	800e938 <SDMMC_GetPowerState>
 800d44a:	4603      	mov	r3, r0
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d102      	bne.n	800d456 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d450:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d454:	e0b8      	b.n	800d5c8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d45a:	2b03      	cmp	r3, #3
 800d45c:	d02f      	beq.n	800d4be <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	4618      	mov	r0, r3
 800d464:	f001 fc5e 	bl	800ed24 <SDMMC_CmdSendCID>
 800d468:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d46a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d001      	beq.n	800d474 <SD_InitCard+0x40>
    {
      return errorstate;
 800d470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d472:	e0a9      	b.n	800d5c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	2100      	movs	r1, #0
 800d47a:	4618      	mov	r0, r3
 800d47c:	f001 faa1 	bl	800e9c2 <SDMMC_GetResponse>
 800d480:	4602      	mov	r2, r0
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	2104      	movs	r1, #4
 800d48c:	4618      	mov	r0, r3
 800d48e:	f001 fa98 	bl	800e9c2 <SDMMC_GetResponse>
 800d492:	4602      	mov	r2, r0
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	2108      	movs	r1, #8
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f001 fa8f 	bl	800e9c2 <SDMMC_GetResponse>
 800d4a4:	4602      	mov	r2, r0
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	210c      	movs	r1, #12
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f001 fa86 	bl	800e9c2 <SDMMC_GetResponse>
 800d4b6:	4602      	mov	r2, r0
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4c2:	2b03      	cmp	r3, #3
 800d4c4:	d00d      	beq.n	800d4e2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	f107 020e 	add.w	r2, r7, #14
 800d4ce:	4611      	mov	r1, r2
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f001 fc64 	bl	800ed9e <SDMMC_CmdSetRelAdd>
 800d4d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d4d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d001      	beq.n	800d4e2 <SD_InitCard+0xae>
    {
      return errorstate;
 800d4de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4e0:	e072      	b.n	800d5c8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4e6:	2b03      	cmp	r3, #3
 800d4e8:	d036      	beq.n	800d558 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d4ea:	89fb      	ldrh	r3, [r7, #14]
 800d4ec:	461a      	mov	r2, r3
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681a      	ldr	r2, [r3, #0]
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d4fa:	041b      	lsls	r3, r3, #16
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	4610      	mov	r0, r2
 800d500:	f001 fc2e 	bl	800ed60 <SDMMC_CmdSendCSD>
 800d504:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d001      	beq.n	800d510 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d50c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d50e:	e05b      	b.n	800d5c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	2100      	movs	r1, #0
 800d516:	4618      	mov	r0, r3
 800d518:	f001 fa53 	bl	800e9c2 <SDMMC_GetResponse>
 800d51c:	4602      	mov	r2, r0
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2104      	movs	r1, #4
 800d528:	4618      	mov	r0, r3
 800d52a:	f001 fa4a 	bl	800e9c2 <SDMMC_GetResponse>
 800d52e:	4602      	mov	r2, r0
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2108      	movs	r1, #8
 800d53a:	4618      	mov	r0, r3
 800d53c:	f001 fa41 	bl	800e9c2 <SDMMC_GetResponse>
 800d540:	4602      	mov	r2, r0
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	210c      	movs	r1, #12
 800d54c:	4618      	mov	r0, r3
 800d54e:	f001 fa38 	bl	800e9c2 <SDMMC_GetResponse>
 800d552:	4602      	mov	r2, r0
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	2104      	movs	r1, #4
 800d55e:	4618      	mov	r0, r3
 800d560:	f001 fa2f 	bl	800e9c2 <SDMMC_GetResponse>
 800d564:	4603      	mov	r3, r0
 800d566:	0d1a      	lsrs	r2, r3, #20
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d56c:	f107 0310 	add.w	r3, r7, #16
 800d570:	4619      	mov	r1, r3
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f7ff fcce 	bl	800cf14 <HAL_SD_GetCardCSD>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d002      	beq.n	800d584 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d57e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d582:	e021      	b.n	800d5c8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6819      	ldr	r1, [r3, #0]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d58c:	041b      	lsls	r3, r3, #16
 800d58e:	2200      	movs	r2, #0
 800d590:	461c      	mov	r4, r3
 800d592:	4615      	mov	r5, r2
 800d594:	4622      	mov	r2, r4
 800d596:	462b      	mov	r3, r5
 800d598:	4608      	mov	r0, r1
 800d59a:	f001 fb1d 	bl	800ebd8 <SDMMC_CmdSelDesel>
 800d59e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d5a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d001      	beq.n	800d5aa <SD_InitCard+0x176>
  {
    return errorstate;
 800d5a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5a8:	e00e      	b.n	800d5c8 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681d      	ldr	r5, [r3, #0]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	466c      	mov	r4, sp
 800d5b2:	f103 0210 	add.w	r2, r3, #16
 800d5b6:	ca07      	ldmia	r2, {r0, r1, r2}
 800d5b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d5bc:	3304      	adds	r3, #4
 800d5be:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d5c0:	4628      	mov	r0, r5
 800d5c2:	f001 f97f 	bl	800e8c4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d5c6:	2300      	movs	r3, #0
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3740      	adds	r7, #64	@ 0x40
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bdb0      	pop	{r4, r5, r7, pc}

0800d5d0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b086      	sub	sp, #24
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	617b      	str	r3, [r7, #20]
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f001 fb18 	bl	800ec1e <SDMMC_CmdGoIdleState>
 800d5ee:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d001      	beq.n	800d5fa <SD_PowerON+0x2a>
  {
    return errorstate;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	e072      	b.n	800d6e0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4618      	mov	r0, r3
 800d600:	f001 fb2b 	bl	800ec5a <SDMMC_CmdOperCond>
 800d604:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d00d      	beq.n	800d628 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2200      	movs	r2, #0
 800d610:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4618      	mov	r0, r3
 800d618:	f001 fb01 	bl	800ec1e <SDMMC_CmdGoIdleState>
 800d61c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d004      	beq.n	800d62e <SD_PowerON+0x5e>
    {
      return errorstate;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	e05b      	b.n	800d6e0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2201      	movs	r2, #1
 800d62c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d632:	2b01      	cmp	r3, #1
 800d634:	d137      	bne.n	800d6a6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	2100      	movs	r1, #0
 800d63c:	4618      	mov	r0, r3
 800d63e:	f001 fb2b 	bl	800ec98 <SDMMC_CmdAppCommand>
 800d642:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d02d      	beq.n	800d6a6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d64a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d64e:	e047      	b.n	800d6e0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	2100      	movs	r1, #0
 800d656:	4618      	mov	r0, r3
 800d658:	f001 fb1e 	bl	800ec98 <SDMMC_CmdAppCommand>
 800d65c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d001      	beq.n	800d668 <SD_PowerON+0x98>
    {
      return errorstate;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	e03b      	b.n	800d6e0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	491e      	ldr	r1, [pc, #120]	@ (800d6e8 <SD_PowerON+0x118>)
 800d66e:	4618      	mov	r0, r3
 800d670:	f001 fb34 	bl	800ecdc <SDMMC_CmdAppOperCommand>
 800d674:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d002      	beq.n	800d682 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d67c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d680:	e02e      	b.n	800d6e0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2100      	movs	r1, #0
 800d688:	4618      	mov	r0, r3
 800d68a:	f001 f99a 	bl	800e9c2 <SDMMC_GetResponse>
 800d68e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	0fdb      	lsrs	r3, r3, #31
 800d694:	2b01      	cmp	r3, #1
 800d696:	d101      	bne.n	800d69c <SD_PowerON+0xcc>
 800d698:	2301      	movs	r3, #1
 800d69a:	e000      	b.n	800d69e <SD_PowerON+0xce>
 800d69c:	2300      	movs	r3, #0
 800d69e:	613b      	str	r3, [r7, #16]

    count++;
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	d802      	bhi.n	800d6b6 <SD_PowerON+0xe6>
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d0cc      	beq.n	800d650 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d902      	bls.n	800d6c6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d6c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d6c4:	e00c      	b.n	800d6e0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d003      	beq.n	800d6d8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	645a      	str	r2, [r3, #68]	@ 0x44
 800d6d6:	e002      	b.n	800d6de <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d6de:	2300      	movs	r3, #0
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3718      	adds	r7, #24
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}
 800d6e8:	c1100000 	.word	0xc1100000

0800d6ec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d102      	bne.n	800d702 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d6fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d700:	e018      	b.n	800d734 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681a      	ldr	r2, [r3, #0]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d70a:	041b      	lsls	r3, r3, #16
 800d70c:	4619      	mov	r1, r3
 800d70e:	4610      	mov	r0, r2
 800d710:	f001 fb66 	bl	800ede0 <SDMMC_CmdSendStatus>
 800d714:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d001      	beq.n	800d720 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	e009      	b.n	800d734 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	2100      	movs	r1, #0
 800d726:	4618      	mov	r0, r3
 800d728:	f001 f94b 	bl	800e9c2 <SDMMC_GetResponse>
 800d72c:	4602      	mov	r2, r0
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d732:	2300      	movs	r3, #0
}
 800d734:	4618      	mov	r0, r3
 800d736:	3710      	adds	r7, #16
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}

0800d73c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b082      	sub	sp, #8
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d101      	bne.n	800d750 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d74c:	2301      	movs	r3, #1
 800d74e:	e025      	b.n	800d79c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d756:	b2db      	uxtb	r3, r3
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d106      	bne.n	800d76a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2200      	movs	r2, #0
 800d760:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f7f3 fd89 	bl	800127c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2202      	movs	r2, #2
 800d76e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681a      	ldr	r2, [r3, #0]
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	3304      	adds	r3, #4
 800d77a:	4619      	mov	r1, r3
 800d77c:	4610      	mov	r0, r2
 800d77e:	f000 ff9f 	bl	800e6c0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6818      	ldr	r0, [r3, #0]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	685b      	ldr	r3, [r3, #4]
 800d78a:	461a      	mov	r2, r3
 800d78c:	6839      	ldr	r1, [r7, #0]
 800d78e:	f000 fff3 	bl	800e778 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2201      	movs	r2, #1
 800d796:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d79a:	2300      	movs	r3, #0
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3708      	adds	r7, #8
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}

0800d7a4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b086      	sub	sp, #24
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	60f8      	str	r0, [r7, #12]
 800d7ac:	60b9      	str	r1, [r7, #8]
 800d7ae:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d7b6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d7b8:	7dfb      	ldrb	r3, [r7, #23]
 800d7ba:	2b02      	cmp	r3, #2
 800d7bc:	d101      	bne.n	800d7c2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800d7be:	2302      	movs	r3, #2
 800d7c0:	e021      	b.n	800d806 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d7c2:	7dfb      	ldrb	r3, [r7, #23]
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d002      	beq.n	800d7ce <HAL_SDRAM_SendCommand+0x2a>
 800d7c8:	7dfb      	ldrb	r3, [r7, #23]
 800d7ca:	2b05      	cmp	r3, #5
 800d7cc:	d118      	bne.n	800d800 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2202      	movs	r2, #2
 800d7d2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	687a      	ldr	r2, [r7, #4]
 800d7dc:	68b9      	ldr	r1, [r7, #8]
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f001 f834 	bl	800e84c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	2b02      	cmp	r3, #2
 800d7ea:	d104      	bne.n	800d7f6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	2205      	movs	r2, #5
 800d7f0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d7f4:	e006      	b.n	800d804 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d7fe:	e001      	b.n	800d804 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800d800:	2301      	movs	r3, #1
 800d802:	e000      	b.n	800d806 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800d804:	2300      	movs	r3, #0
}
 800d806:	4618      	mov	r0, r3
 800d808:	3718      	adds	r7, #24
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}

0800d80e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d80e:	b580      	push	{r7, lr}
 800d810:	b082      	sub	sp, #8
 800d812:	af00      	add	r7, sp, #0
 800d814:	6078      	str	r0, [r7, #4]
 800d816:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d81e:	b2db      	uxtb	r3, r3
 800d820:	2b02      	cmp	r3, #2
 800d822:	d101      	bne.n	800d828 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800d824:	2302      	movs	r3, #2
 800d826:	e016      	b.n	800d856 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d82e:	b2db      	uxtb	r3, r3
 800d830:	2b01      	cmp	r3, #1
 800d832:	d10f      	bne.n	800d854 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2202      	movs	r2, #2
 800d838:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	6839      	ldr	r1, [r7, #0]
 800d842:	4618      	mov	r0, r3
 800d844:	f001 f826 	bl	800e894 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2201      	movs	r2, #1
 800d84c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d850:	2300      	movs	r3, #0
 800d852:	e000      	b.n	800d856 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800d854:	2301      	movs	r3, #1
}
 800d856:	4618      	mov	r0, r3
 800d858:	3708      	adds	r7, #8
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}

0800d85e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d85e:	b580      	push	{r7, lr}
 800d860:	b082      	sub	sp, #8
 800d862:	af00      	add	r7, sp, #0
 800d864:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d101      	bne.n	800d870 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d86c:	2301      	movs	r3, #1
 800d86e:	e049      	b.n	800d904 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d876:	b2db      	uxtb	r3, r3
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d106      	bne.n	800d88a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2200      	movs	r2, #0
 800d880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f000 f841 	bl	800d90c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2202      	movs	r2, #2
 800d88e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	3304      	adds	r3, #4
 800d89a:	4619      	mov	r1, r3
 800d89c:	4610      	mov	r0, r2
 800d89e:	f000 f9ff 	bl	800dca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2201      	movs	r2, #1
 800d8a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2201      	movs	r2, #1
 800d8ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2201      	movs	r2, #1
 800d8be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2201      	movs	r2, #1
 800d8c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2201      	movs	r2, #1
 800d8d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2201      	movs	r2, #1
 800d8de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2201      	movs	r2, #1
 800d8e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2201      	movs	r2, #1
 800d8fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d902:	2300      	movs	r3, #0
}
 800d904:	4618      	mov	r0, r3
 800d906:	3708      	adds	r7, #8
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d90c:	b480      	push	{r7}
 800d90e:	b083      	sub	sp, #12
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d914:	bf00      	nop
 800d916:	370c      	adds	r7, #12
 800d918:	46bd      	mov	sp, r7
 800d91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91e:	4770      	bx	lr

0800d920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d920:	b480      	push	{r7}
 800d922:	b085      	sub	sp, #20
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	2b01      	cmp	r3, #1
 800d932:	d001      	beq.n	800d938 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d934:	2301      	movs	r3, #1
 800d936:	e054      	b.n	800d9e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2202      	movs	r2, #2
 800d93c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	68da      	ldr	r2, [r3, #12]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f042 0201 	orr.w	r2, r2, #1
 800d94e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	4a26      	ldr	r2, [pc, #152]	@ (800d9f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800d956:	4293      	cmp	r3, r2
 800d958:	d022      	beq.n	800d9a0 <HAL_TIM_Base_Start_IT+0x80>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d962:	d01d      	beq.n	800d9a0 <HAL_TIM_Base_Start_IT+0x80>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4a22      	ldr	r2, [pc, #136]	@ (800d9f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d018      	beq.n	800d9a0 <HAL_TIM_Base_Start_IT+0x80>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	4a21      	ldr	r2, [pc, #132]	@ (800d9f8 <HAL_TIM_Base_Start_IT+0xd8>)
 800d974:	4293      	cmp	r3, r2
 800d976:	d013      	beq.n	800d9a0 <HAL_TIM_Base_Start_IT+0x80>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4a1f      	ldr	r2, [pc, #124]	@ (800d9fc <HAL_TIM_Base_Start_IT+0xdc>)
 800d97e:	4293      	cmp	r3, r2
 800d980:	d00e      	beq.n	800d9a0 <HAL_TIM_Base_Start_IT+0x80>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	4a1e      	ldr	r2, [pc, #120]	@ (800da00 <HAL_TIM_Base_Start_IT+0xe0>)
 800d988:	4293      	cmp	r3, r2
 800d98a:	d009      	beq.n	800d9a0 <HAL_TIM_Base_Start_IT+0x80>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a1c      	ldr	r2, [pc, #112]	@ (800da04 <HAL_TIM_Base_Start_IT+0xe4>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d004      	beq.n	800d9a0 <HAL_TIM_Base_Start_IT+0x80>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	4a1b      	ldr	r2, [pc, #108]	@ (800da08 <HAL_TIM_Base_Start_IT+0xe8>)
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d115      	bne.n	800d9cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	689a      	ldr	r2, [r3, #8]
 800d9a6:	4b19      	ldr	r3, [pc, #100]	@ (800da0c <HAL_TIM_Base_Start_IT+0xec>)
 800d9a8:	4013      	ands	r3, r2
 800d9aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	2b06      	cmp	r3, #6
 800d9b0:	d015      	beq.n	800d9de <HAL_TIM_Base_Start_IT+0xbe>
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d9b8:	d011      	beq.n	800d9de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	681a      	ldr	r2, [r3, #0]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f042 0201 	orr.w	r2, r2, #1
 800d9c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9ca:	e008      	b.n	800d9de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	681a      	ldr	r2, [r3, #0]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	f042 0201 	orr.w	r2, r2, #1
 800d9da:	601a      	str	r2, [r3, #0]
 800d9dc:	e000      	b.n	800d9e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d9e0:	2300      	movs	r3, #0
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3714      	adds	r7, #20
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ec:	4770      	bx	lr
 800d9ee:	bf00      	nop
 800d9f0:	40010000 	.word	0x40010000
 800d9f4:	40000400 	.word	0x40000400
 800d9f8:	40000800 	.word	0x40000800
 800d9fc:	40000c00 	.word	0x40000c00
 800da00:	40010400 	.word	0x40010400
 800da04:	40014000 	.word	0x40014000
 800da08:	40001800 	.word	0x40001800
 800da0c:	00010007 	.word	0x00010007

0800da10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b082      	sub	sp, #8
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	691b      	ldr	r3, [r3, #16]
 800da1e:	f003 0302 	and.w	r3, r3, #2
 800da22:	2b02      	cmp	r3, #2
 800da24:	d122      	bne.n	800da6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	68db      	ldr	r3, [r3, #12]
 800da2c:	f003 0302 	and.w	r3, r3, #2
 800da30:	2b02      	cmp	r3, #2
 800da32:	d11b      	bne.n	800da6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f06f 0202 	mvn.w	r2, #2
 800da3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2201      	movs	r2, #1
 800da42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	699b      	ldr	r3, [r3, #24]
 800da4a:	f003 0303 	and.w	r3, r3, #3
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d003      	beq.n	800da5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f000 f905 	bl	800dc62 <HAL_TIM_IC_CaptureCallback>
 800da58:	e005      	b.n	800da66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f000 f8f7 	bl	800dc4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f000 f908 	bl	800dc76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2200      	movs	r2, #0
 800da6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	691b      	ldr	r3, [r3, #16]
 800da72:	f003 0304 	and.w	r3, r3, #4
 800da76:	2b04      	cmp	r3, #4
 800da78:	d122      	bne.n	800dac0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	68db      	ldr	r3, [r3, #12]
 800da80:	f003 0304 	and.w	r3, r3, #4
 800da84:	2b04      	cmp	r3, #4
 800da86:	d11b      	bne.n	800dac0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f06f 0204 	mvn.w	r2, #4
 800da90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2202      	movs	r2, #2
 800da96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	699b      	ldr	r3, [r3, #24]
 800da9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d003      	beq.n	800daae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f000 f8db 	bl	800dc62 <HAL_TIM_IC_CaptureCallback>
 800daac:	e005      	b.n	800daba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f000 f8cd 	bl	800dc4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 f8de 	bl	800dc76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2200      	movs	r2, #0
 800dabe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	691b      	ldr	r3, [r3, #16]
 800dac6:	f003 0308 	and.w	r3, r3, #8
 800daca:	2b08      	cmp	r3, #8
 800dacc:	d122      	bne.n	800db14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	68db      	ldr	r3, [r3, #12]
 800dad4:	f003 0308 	and.w	r3, r3, #8
 800dad8:	2b08      	cmp	r3, #8
 800dada:	d11b      	bne.n	800db14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	f06f 0208 	mvn.w	r2, #8
 800dae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2204      	movs	r2, #4
 800daea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	69db      	ldr	r3, [r3, #28]
 800daf2:	f003 0303 	and.w	r3, r3, #3
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d003      	beq.n	800db02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 f8b1 	bl	800dc62 <HAL_TIM_IC_CaptureCallback>
 800db00:	e005      	b.n	800db0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f000 f8a3 	bl	800dc4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f000 f8b4 	bl	800dc76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2200      	movs	r2, #0
 800db12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	691b      	ldr	r3, [r3, #16]
 800db1a:	f003 0310 	and.w	r3, r3, #16
 800db1e:	2b10      	cmp	r3, #16
 800db20:	d122      	bne.n	800db68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	68db      	ldr	r3, [r3, #12]
 800db28:	f003 0310 	and.w	r3, r3, #16
 800db2c:	2b10      	cmp	r3, #16
 800db2e:	d11b      	bne.n	800db68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	f06f 0210 	mvn.w	r2, #16
 800db38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2208      	movs	r2, #8
 800db3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	69db      	ldr	r3, [r3, #28]
 800db46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d003      	beq.n	800db56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f000 f887 	bl	800dc62 <HAL_TIM_IC_CaptureCallback>
 800db54:	e005      	b.n	800db62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 f879 	bl	800dc4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f000 f88a 	bl	800dc76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2200      	movs	r2, #0
 800db66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	691b      	ldr	r3, [r3, #16]
 800db6e:	f003 0301 	and.w	r3, r3, #1
 800db72:	2b01      	cmp	r3, #1
 800db74:	d10e      	bne.n	800db94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	68db      	ldr	r3, [r3, #12]
 800db7c:	f003 0301 	and.w	r3, r3, #1
 800db80:	2b01      	cmp	r3, #1
 800db82:	d107      	bne.n	800db94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	f06f 0201 	mvn.w	r2, #1
 800db8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f7f5 fcd0 	bl	8003534 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	691b      	ldr	r3, [r3, #16]
 800db9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db9e:	2b80      	cmp	r3, #128	@ 0x80
 800dba0:	d10e      	bne.n	800dbc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	68db      	ldr	r3, [r3, #12]
 800dba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dbac:	2b80      	cmp	r3, #128	@ 0x80
 800dbae:	d107      	bne.n	800dbc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800dbb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f000 f91a 	bl	800ddf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	691b      	ldr	r3, [r3, #16]
 800dbc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dbca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dbce:	d10e      	bne.n	800dbee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	68db      	ldr	r3, [r3, #12]
 800dbd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dbda:	2b80      	cmp	r3, #128	@ 0x80
 800dbdc:	d107      	bne.n	800dbee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800dbe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f000 f90d 	bl	800de08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	691b      	ldr	r3, [r3, #16]
 800dbf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbf8:	2b40      	cmp	r3, #64	@ 0x40
 800dbfa:	d10e      	bne.n	800dc1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	68db      	ldr	r3, [r3, #12]
 800dc02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc06:	2b40      	cmp	r3, #64	@ 0x40
 800dc08:	d107      	bne.n	800dc1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800dc12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f000 f838 	bl	800dc8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	691b      	ldr	r3, [r3, #16]
 800dc20:	f003 0320 	and.w	r3, r3, #32
 800dc24:	2b20      	cmp	r3, #32
 800dc26:	d10e      	bne.n	800dc46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	68db      	ldr	r3, [r3, #12]
 800dc2e:	f003 0320 	and.w	r3, r3, #32
 800dc32:	2b20      	cmp	r3, #32
 800dc34:	d107      	bne.n	800dc46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	f06f 0220 	mvn.w	r2, #32
 800dc3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f000 f8cd 	bl	800dde0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dc46:	bf00      	nop
 800dc48:	3708      	adds	r7, #8
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}

0800dc4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dc4e:	b480      	push	{r7}
 800dc50:	b083      	sub	sp, #12
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dc56:	bf00      	nop
 800dc58:	370c      	adds	r7, #12
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc60:	4770      	bx	lr

0800dc62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dc62:	b480      	push	{r7}
 800dc64:	b083      	sub	sp, #12
 800dc66:	af00      	add	r7, sp, #0
 800dc68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dc6a:	bf00      	nop
 800dc6c:	370c      	adds	r7, #12
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc74:	4770      	bx	lr

0800dc76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dc76:	b480      	push	{r7}
 800dc78:	b083      	sub	sp, #12
 800dc7a:	af00      	add	r7, sp, #0
 800dc7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dc7e:	bf00      	nop
 800dc80:	370c      	adds	r7, #12
 800dc82:	46bd      	mov	sp, r7
 800dc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc88:	4770      	bx	lr

0800dc8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dc8a:	b480      	push	{r7}
 800dc8c:	b083      	sub	sp, #12
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dc92:	bf00      	nop
 800dc94:	370c      	adds	r7, #12
 800dc96:	46bd      	mov	sp, r7
 800dc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9c:	4770      	bx	lr
	...

0800dca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b085      	sub	sp, #20
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	4a40      	ldr	r2, [pc, #256]	@ (800ddb4 <TIM_Base_SetConfig+0x114>)
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	d013      	beq.n	800dce0 <TIM_Base_SetConfig+0x40>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dcbe:	d00f      	beq.n	800dce0 <TIM_Base_SetConfig+0x40>
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	4a3d      	ldr	r2, [pc, #244]	@ (800ddb8 <TIM_Base_SetConfig+0x118>)
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	d00b      	beq.n	800dce0 <TIM_Base_SetConfig+0x40>
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	4a3c      	ldr	r2, [pc, #240]	@ (800ddbc <TIM_Base_SetConfig+0x11c>)
 800dccc:	4293      	cmp	r3, r2
 800dcce:	d007      	beq.n	800dce0 <TIM_Base_SetConfig+0x40>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	4a3b      	ldr	r2, [pc, #236]	@ (800ddc0 <TIM_Base_SetConfig+0x120>)
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d003      	beq.n	800dce0 <TIM_Base_SetConfig+0x40>
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	4a3a      	ldr	r2, [pc, #232]	@ (800ddc4 <TIM_Base_SetConfig+0x124>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d108      	bne.n	800dcf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	685b      	ldr	r3, [r3, #4]
 800dcec:	68fa      	ldr	r2, [r7, #12]
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	4a2f      	ldr	r2, [pc, #188]	@ (800ddb4 <TIM_Base_SetConfig+0x114>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d02b      	beq.n	800dd52 <TIM_Base_SetConfig+0xb2>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd00:	d027      	beq.n	800dd52 <TIM_Base_SetConfig+0xb2>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	4a2c      	ldr	r2, [pc, #176]	@ (800ddb8 <TIM_Base_SetConfig+0x118>)
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d023      	beq.n	800dd52 <TIM_Base_SetConfig+0xb2>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	4a2b      	ldr	r2, [pc, #172]	@ (800ddbc <TIM_Base_SetConfig+0x11c>)
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d01f      	beq.n	800dd52 <TIM_Base_SetConfig+0xb2>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	4a2a      	ldr	r2, [pc, #168]	@ (800ddc0 <TIM_Base_SetConfig+0x120>)
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d01b      	beq.n	800dd52 <TIM_Base_SetConfig+0xb2>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	4a29      	ldr	r2, [pc, #164]	@ (800ddc4 <TIM_Base_SetConfig+0x124>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d017      	beq.n	800dd52 <TIM_Base_SetConfig+0xb2>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	4a28      	ldr	r2, [pc, #160]	@ (800ddc8 <TIM_Base_SetConfig+0x128>)
 800dd26:	4293      	cmp	r3, r2
 800dd28:	d013      	beq.n	800dd52 <TIM_Base_SetConfig+0xb2>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	4a27      	ldr	r2, [pc, #156]	@ (800ddcc <TIM_Base_SetConfig+0x12c>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d00f      	beq.n	800dd52 <TIM_Base_SetConfig+0xb2>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	4a26      	ldr	r2, [pc, #152]	@ (800ddd0 <TIM_Base_SetConfig+0x130>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d00b      	beq.n	800dd52 <TIM_Base_SetConfig+0xb2>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	4a25      	ldr	r2, [pc, #148]	@ (800ddd4 <TIM_Base_SetConfig+0x134>)
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d007      	beq.n	800dd52 <TIM_Base_SetConfig+0xb2>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	4a24      	ldr	r2, [pc, #144]	@ (800ddd8 <TIM_Base_SetConfig+0x138>)
 800dd46:	4293      	cmp	r3, r2
 800dd48:	d003      	beq.n	800dd52 <TIM_Base_SetConfig+0xb2>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	4a23      	ldr	r2, [pc, #140]	@ (800dddc <TIM_Base_SetConfig+0x13c>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d108      	bne.n	800dd64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dd58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	68db      	ldr	r3, [r3, #12]
 800dd5e:	68fa      	ldr	r2, [r7, #12]
 800dd60:	4313      	orrs	r3, r2
 800dd62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	695b      	ldr	r3, [r3, #20]
 800dd6e:	4313      	orrs	r3, r2
 800dd70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	68fa      	ldr	r2, [r7, #12]
 800dd76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	689a      	ldr	r2, [r3, #8]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	681a      	ldr	r2, [r3, #0]
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	4a0a      	ldr	r2, [pc, #40]	@ (800ddb4 <TIM_Base_SetConfig+0x114>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d003      	beq.n	800dd98 <TIM_Base_SetConfig+0xf8>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	4a0c      	ldr	r2, [pc, #48]	@ (800ddc4 <TIM_Base_SetConfig+0x124>)
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d103      	bne.n	800dda0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	691a      	ldr	r2, [r3, #16]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2201      	movs	r2, #1
 800dda4:	615a      	str	r2, [r3, #20]
}
 800dda6:	bf00      	nop
 800dda8:	3714      	adds	r7, #20
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb0:	4770      	bx	lr
 800ddb2:	bf00      	nop
 800ddb4:	40010000 	.word	0x40010000
 800ddb8:	40000400 	.word	0x40000400
 800ddbc:	40000800 	.word	0x40000800
 800ddc0:	40000c00 	.word	0x40000c00
 800ddc4:	40010400 	.word	0x40010400
 800ddc8:	40014000 	.word	0x40014000
 800ddcc:	40014400 	.word	0x40014400
 800ddd0:	40014800 	.word	0x40014800
 800ddd4:	40001800 	.word	0x40001800
 800ddd8:	40001c00 	.word	0x40001c00
 800dddc:	40002000 	.word	0x40002000

0800dde0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dde0:	b480      	push	{r7}
 800dde2:	b083      	sub	sp, #12
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dde8:	bf00      	nop
 800ddea:	370c      	adds	r7, #12
 800ddec:	46bd      	mov	sp, r7
 800ddee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf2:	4770      	bx	lr

0800ddf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b083      	sub	sp, #12
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ddfc:	bf00      	nop
 800ddfe:	370c      	adds	r7, #12
 800de00:	46bd      	mov	sp, r7
 800de02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de06:	4770      	bx	lr

0800de08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800de08:	b480      	push	{r7}
 800de0a:	b083      	sub	sp, #12
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800de10:	bf00      	nop
 800de12:	370c      	adds	r7, #12
 800de14:	46bd      	mov	sp, r7
 800de16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1a:	4770      	bx	lr

0800de1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d101      	bne.n	800de2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800de2a:	2301      	movs	r3, #1
 800de2c:	e040      	b.n	800deb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800de32:	2b00      	cmp	r3, #0
 800de34:	d106      	bne.n	800de44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2200      	movs	r2, #0
 800de3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f7f8 f966 	bl	8006110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2224      	movs	r2, #36	@ 0x24
 800de48:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	681a      	ldr	r2, [r3, #0]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	f022 0201 	bic.w	r2, r2, #1
 800de58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f000 f82c 	bl	800deb8 <UART_SetConfig>
 800de60:	4603      	mov	r3, r0
 800de62:	2b01      	cmp	r3, #1
 800de64:	d101      	bne.n	800de6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800de66:	2301      	movs	r3, #1
 800de68:	e022      	b.n	800deb0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d002      	beq.n	800de78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f000 fa84 	bl	800e380 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	685a      	ldr	r2, [r3, #4]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800de86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	689a      	ldr	r2, [r3, #8]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800de96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	681a      	ldr	r2, [r3, #0]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	f042 0201 	orr.w	r2, r2, #1
 800dea6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f000 fb0b 	bl	800e4c4 <UART_CheckIdleState>
 800deae:	4603      	mov	r3, r0
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3708      	adds	r7, #8
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b088      	sub	sp, #32
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dec0:	2300      	movs	r3, #0
 800dec2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	689a      	ldr	r2, [r3, #8]
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	691b      	ldr	r3, [r3, #16]
 800decc:	431a      	orrs	r2, r3
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	695b      	ldr	r3, [r3, #20]
 800ded2:	431a      	orrs	r2, r3
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	69db      	ldr	r3, [r3, #28]
 800ded8:	4313      	orrs	r3, r2
 800deda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	681a      	ldr	r2, [r3, #0]
 800dee2:	4ba6      	ldr	r3, [pc, #664]	@ (800e17c <UART_SetConfig+0x2c4>)
 800dee4:	4013      	ands	r3, r2
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	6812      	ldr	r2, [r2, #0]
 800deea:	6979      	ldr	r1, [r7, #20]
 800deec:	430b      	orrs	r3, r1
 800deee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	685b      	ldr	r3, [r3, #4]
 800def6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	68da      	ldr	r2, [r3, #12]
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	430a      	orrs	r2, r1
 800df04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	699b      	ldr	r3, [r3, #24]
 800df0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6a1b      	ldr	r3, [r3, #32]
 800df10:	697a      	ldr	r2, [r7, #20]
 800df12:	4313      	orrs	r3, r2
 800df14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	689b      	ldr	r3, [r3, #8]
 800df1c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	697a      	ldr	r2, [r7, #20]
 800df26:	430a      	orrs	r2, r1
 800df28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	4a94      	ldr	r2, [pc, #592]	@ (800e180 <UART_SetConfig+0x2c8>)
 800df30:	4293      	cmp	r3, r2
 800df32:	d120      	bne.n	800df76 <UART_SetConfig+0xbe>
 800df34:	4b93      	ldr	r3, [pc, #588]	@ (800e184 <UART_SetConfig+0x2cc>)
 800df36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df3a:	f003 0303 	and.w	r3, r3, #3
 800df3e:	2b03      	cmp	r3, #3
 800df40:	d816      	bhi.n	800df70 <UART_SetConfig+0xb8>
 800df42:	a201      	add	r2, pc, #4	@ (adr r2, 800df48 <UART_SetConfig+0x90>)
 800df44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df48:	0800df59 	.word	0x0800df59
 800df4c:	0800df65 	.word	0x0800df65
 800df50:	0800df5f 	.word	0x0800df5f
 800df54:	0800df6b 	.word	0x0800df6b
 800df58:	2301      	movs	r3, #1
 800df5a:	77fb      	strb	r3, [r7, #31]
 800df5c:	e150      	b.n	800e200 <UART_SetConfig+0x348>
 800df5e:	2302      	movs	r3, #2
 800df60:	77fb      	strb	r3, [r7, #31]
 800df62:	e14d      	b.n	800e200 <UART_SetConfig+0x348>
 800df64:	2304      	movs	r3, #4
 800df66:	77fb      	strb	r3, [r7, #31]
 800df68:	e14a      	b.n	800e200 <UART_SetConfig+0x348>
 800df6a:	2308      	movs	r3, #8
 800df6c:	77fb      	strb	r3, [r7, #31]
 800df6e:	e147      	b.n	800e200 <UART_SetConfig+0x348>
 800df70:	2310      	movs	r3, #16
 800df72:	77fb      	strb	r3, [r7, #31]
 800df74:	e144      	b.n	800e200 <UART_SetConfig+0x348>
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	4a83      	ldr	r2, [pc, #524]	@ (800e188 <UART_SetConfig+0x2d0>)
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d132      	bne.n	800dfe6 <UART_SetConfig+0x12e>
 800df80:	4b80      	ldr	r3, [pc, #512]	@ (800e184 <UART_SetConfig+0x2cc>)
 800df82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df86:	f003 030c 	and.w	r3, r3, #12
 800df8a:	2b0c      	cmp	r3, #12
 800df8c:	d828      	bhi.n	800dfe0 <UART_SetConfig+0x128>
 800df8e:	a201      	add	r2, pc, #4	@ (adr r2, 800df94 <UART_SetConfig+0xdc>)
 800df90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df94:	0800dfc9 	.word	0x0800dfc9
 800df98:	0800dfe1 	.word	0x0800dfe1
 800df9c:	0800dfe1 	.word	0x0800dfe1
 800dfa0:	0800dfe1 	.word	0x0800dfe1
 800dfa4:	0800dfd5 	.word	0x0800dfd5
 800dfa8:	0800dfe1 	.word	0x0800dfe1
 800dfac:	0800dfe1 	.word	0x0800dfe1
 800dfb0:	0800dfe1 	.word	0x0800dfe1
 800dfb4:	0800dfcf 	.word	0x0800dfcf
 800dfb8:	0800dfe1 	.word	0x0800dfe1
 800dfbc:	0800dfe1 	.word	0x0800dfe1
 800dfc0:	0800dfe1 	.word	0x0800dfe1
 800dfc4:	0800dfdb 	.word	0x0800dfdb
 800dfc8:	2300      	movs	r3, #0
 800dfca:	77fb      	strb	r3, [r7, #31]
 800dfcc:	e118      	b.n	800e200 <UART_SetConfig+0x348>
 800dfce:	2302      	movs	r3, #2
 800dfd0:	77fb      	strb	r3, [r7, #31]
 800dfd2:	e115      	b.n	800e200 <UART_SetConfig+0x348>
 800dfd4:	2304      	movs	r3, #4
 800dfd6:	77fb      	strb	r3, [r7, #31]
 800dfd8:	e112      	b.n	800e200 <UART_SetConfig+0x348>
 800dfda:	2308      	movs	r3, #8
 800dfdc:	77fb      	strb	r3, [r7, #31]
 800dfde:	e10f      	b.n	800e200 <UART_SetConfig+0x348>
 800dfe0:	2310      	movs	r3, #16
 800dfe2:	77fb      	strb	r3, [r7, #31]
 800dfe4:	e10c      	b.n	800e200 <UART_SetConfig+0x348>
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	4a68      	ldr	r2, [pc, #416]	@ (800e18c <UART_SetConfig+0x2d4>)
 800dfec:	4293      	cmp	r3, r2
 800dfee:	d120      	bne.n	800e032 <UART_SetConfig+0x17a>
 800dff0:	4b64      	ldr	r3, [pc, #400]	@ (800e184 <UART_SetConfig+0x2cc>)
 800dff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dff6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800dffa:	2b30      	cmp	r3, #48	@ 0x30
 800dffc:	d013      	beq.n	800e026 <UART_SetConfig+0x16e>
 800dffe:	2b30      	cmp	r3, #48	@ 0x30
 800e000:	d814      	bhi.n	800e02c <UART_SetConfig+0x174>
 800e002:	2b20      	cmp	r3, #32
 800e004:	d009      	beq.n	800e01a <UART_SetConfig+0x162>
 800e006:	2b20      	cmp	r3, #32
 800e008:	d810      	bhi.n	800e02c <UART_SetConfig+0x174>
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d002      	beq.n	800e014 <UART_SetConfig+0x15c>
 800e00e:	2b10      	cmp	r3, #16
 800e010:	d006      	beq.n	800e020 <UART_SetConfig+0x168>
 800e012:	e00b      	b.n	800e02c <UART_SetConfig+0x174>
 800e014:	2300      	movs	r3, #0
 800e016:	77fb      	strb	r3, [r7, #31]
 800e018:	e0f2      	b.n	800e200 <UART_SetConfig+0x348>
 800e01a:	2302      	movs	r3, #2
 800e01c:	77fb      	strb	r3, [r7, #31]
 800e01e:	e0ef      	b.n	800e200 <UART_SetConfig+0x348>
 800e020:	2304      	movs	r3, #4
 800e022:	77fb      	strb	r3, [r7, #31]
 800e024:	e0ec      	b.n	800e200 <UART_SetConfig+0x348>
 800e026:	2308      	movs	r3, #8
 800e028:	77fb      	strb	r3, [r7, #31]
 800e02a:	e0e9      	b.n	800e200 <UART_SetConfig+0x348>
 800e02c:	2310      	movs	r3, #16
 800e02e:	77fb      	strb	r3, [r7, #31]
 800e030:	e0e6      	b.n	800e200 <UART_SetConfig+0x348>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	4a56      	ldr	r2, [pc, #344]	@ (800e190 <UART_SetConfig+0x2d8>)
 800e038:	4293      	cmp	r3, r2
 800e03a:	d120      	bne.n	800e07e <UART_SetConfig+0x1c6>
 800e03c:	4b51      	ldr	r3, [pc, #324]	@ (800e184 <UART_SetConfig+0x2cc>)
 800e03e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e042:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800e046:	2bc0      	cmp	r3, #192	@ 0xc0
 800e048:	d013      	beq.n	800e072 <UART_SetConfig+0x1ba>
 800e04a:	2bc0      	cmp	r3, #192	@ 0xc0
 800e04c:	d814      	bhi.n	800e078 <UART_SetConfig+0x1c0>
 800e04e:	2b80      	cmp	r3, #128	@ 0x80
 800e050:	d009      	beq.n	800e066 <UART_SetConfig+0x1ae>
 800e052:	2b80      	cmp	r3, #128	@ 0x80
 800e054:	d810      	bhi.n	800e078 <UART_SetConfig+0x1c0>
 800e056:	2b00      	cmp	r3, #0
 800e058:	d002      	beq.n	800e060 <UART_SetConfig+0x1a8>
 800e05a:	2b40      	cmp	r3, #64	@ 0x40
 800e05c:	d006      	beq.n	800e06c <UART_SetConfig+0x1b4>
 800e05e:	e00b      	b.n	800e078 <UART_SetConfig+0x1c0>
 800e060:	2300      	movs	r3, #0
 800e062:	77fb      	strb	r3, [r7, #31]
 800e064:	e0cc      	b.n	800e200 <UART_SetConfig+0x348>
 800e066:	2302      	movs	r3, #2
 800e068:	77fb      	strb	r3, [r7, #31]
 800e06a:	e0c9      	b.n	800e200 <UART_SetConfig+0x348>
 800e06c:	2304      	movs	r3, #4
 800e06e:	77fb      	strb	r3, [r7, #31]
 800e070:	e0c6      	b.n	800e200 <UART_SetConfig+0x348>
 800e072:	2308      	movs	r3, #8
 800e074:	77fb      	strb	r3, [r7, #31]
 800e076:	e0c3      	b.n	800e200 <UART_SetConfig+0x348>
 800e078:	2310      	movs	r3, #16
 800e07a:	77fb      	strb	r3, [r7, #31]
 800e07c:	e0c0      	b.n	800e200 <UART_SetConfig+0x348>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	4a44      	ldr	r2, [pc, #272]	@ (800e194 <UART_SetConfig+0x2dc>)
 800e084:	4293      	cmp	r3, r2
 800e086:	d125      	bne.n	800e0d4 <UART_SetConfig+0x21c>
 800e088:	4b3e      	ldr	r3, [pc, #248]	@ (800e184 <UART_SetConfig+0x2cc>)
 800e08a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e08e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e092:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e096:	d017      	beq.n	800e0c8 <UART_SetConfig+0x210>
 800e098:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e09c:	d817      	bhi.n	800e0ce <UART_SetConfig+0x216>
 800e09e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e0a2:	d00b      	beq.n	800e0bc <UART_SetConfig+0x204>
 800e0a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e0a8:	d811      	bhi.n	800e0ce <UART_SetConfig+0x216>
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d003      	beq.n	800e0b6 <UART_SetConfig+0x1fe>
 800e0ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e0b2:	d006      	beq.n	800e0c2 <UART_SetConfig+0x20a>
 800e0b4:	e00b      	b.n	800e0ce <UART_SetConfig+0x216>
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	77fb      	strb	r3, [r7, #31]
 800e0ba:	e0a1      	b.n	800e200 <UART_SetConfig+0x348>
 800e0bc:	2302      	movs	r3, #2
 800e0be:	77fb      	strb	r3, [r7, #31]
 800e0c0:	e09e      	b.n	800e200 <UART_SetConfig+0x348>
 800e0c2:	2304      	movs	r3, #4
 800e0c4:	77fb      	strb	r3, [r7, #31]
 800e0c6:	e09b      	b.n	800e200 <UART_SetConfig+0x348>
 800e0c8:	2308      	movs	r3, #8
 800e0ca:	77fb      	strb	r3, [r7, #31]
 800e0cc:	e098      	b.n	800e200 <UART_SetConfig+0x348>
 800e0ce:	2310      	movs	r3, #16
 800e0d0:	77fb      	strb	r3, [r7, #31]
 800e0d2:	e095      	b.n	800e200 <UART_SetConfig+0x348>
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	4a2f      	ldr	r2, [pc, #188]	@ (800e198 <UART_SetConfig+0x2e0>)
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	d125      	bne.n	800e12a <UART_SetConfig+0x272>
 800e0de:	4b29      	ldr	r3, [pc, #164]	@ (800e184 <UART_SetConfig+0x2cc>)
 800e0e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e0e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e0e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e0ec:	d017      	beq.n	800e11e <UART_SetConfig+0x266>
 800e0ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e0f2:	d817      	bhi.n	800e124 <UART_SetConfig+0x26c>
 800e0f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e0f8:	d00b      	beq.n	800e112 <UART_SetConfig+0x25a>
 800e0fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e0fe:	d811      	bhi.n	800e124 <UART_SetConfig+0x26c>
 800e100:	2b00      	cmp	r3, #0
 800e102:	d003      	beq.n	800e10c <UART_SetConfig+0x254>
 800e104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e108:	d006      	beq.n	800e118 <UART_SetConfig+0x260>
 800e10a:	e00b      	b.n	800e124 <UART_SetConfig+0x26c>
 800e10c:	2301      	movs	r3, #1
 800e10e:	77fb      	strb	r3, [r7, #31]
 800e110:	e076      	b.n	800e200 <UART_SetConfig+0x348>
 800e112:	2302      	movs	r3, #2
 800e114:	77fb      	strb	r3, [r7, #31]
 800e116:	e073      	b.n	800e200 <UART_SetConfig+0x348>
 800e118:	2304      	movs	r3, #4
 800e11a:	77fb      	strb	r3, [r7, #31]
 800e11c:	e070      	b.n	800e200 <UART_SetConfig+0x348>
 800e11e:	2308      	movs	r3, #8
 800e120:	77fb      	strb	r3, [r7, #31]
 800e122:	e06d      	b.n	800e200 <UART_SetConfig+0x348>
 800e124:	2310      	movs	r3, #16
 800e126:	77fb      	strb	r3, [r7, #31]
 800e128:	e06a      	b.n	800e200 <UART_SetConfig+0x348>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	4a1b      	ldr	r2, [pc, #108]	@ (800e19c <UART_SetConfig+0x2e4>)
 800e130:	4293      	cmp	r3, r2
 800e132:	d138      	bne.n	800e1a6 <UART_SetConfig+0x2ee>
 800e134:	4b13      	ldr	r3, [pc, #76]	@ (800e184 <UART_SetConfig+0x2cc>)
 800e136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e13a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800e13e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e142:	d017      	beq.n	800e174 <UART_SetConfig+0x2bc>
 800e144:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e148:	d82a      	bhi.n	800e1a0 <UART_SetConfig+0x2e8>
 800e14a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e14e:	d00b      	beq.n	800e168 <UART_SetConfig+0x2b0>
 800e150:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e154:	d824      	bhi.n	800e1a0 <UART_SetConfig+0x2e8>
 800e156:	2b00      	cmp	r3, #0
 800e158:	d003      	beq.n	800e162 <UART_SetConfig+0x2aa>
 800e15a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e15e:	d006      	beq.n	800e16e <UART_SetConfig+0x2b6>
 800e160:	e01e      	b.n	800e1a0 <UART_SetConfig+0x2e8>
 800e162:	2300      	movs	r3, #0
 800e164:	77fb      	strb	r3, [r7, #31]
 800e166:	e04b      	b.n	800e200 <UART_SetConfig+0x348>
 800e168:	2302      	movs	r3, #2
 800e16a:	77fb      	strb	r3, [r7, #31]
 800e16c:	e048      	b.n	800e200 <UART_SetConfig+0x348>
 800e16e:	2304      	movs	r3, #4
 800e170:	77fb      	strb	r3, [r7, #31]
 800e172:	e045      	b.n	800e200 <UART_SetConfig+0x348>
 800e174:	2308      	movs	r3, #8
 800e176:	77fb      	strb	r3, [r7, #31]
 800e178:	e042      	b.n	800e200 <UART_SetConfig+0x348>
 800e17a:	bf00      	nop
 800e17c:	efff69f3 	.word	0xefff69f3
 800e180:	40011000 	.word	0x40011000
 800e184:	40023800 	.word	0x40023800
 800e188:	40004400 	.word	0x40004400
 800e18c:	40004800 	.word	0x40004800
 800e190:	40004c00 	.word	0x40004c00
 800e194:	40005000 	.word	0x40005000
 800e198:	40011400 	.word	0x40011400
 800e19c:	40007800 	.word	0x40007800
 800e1a0:	2310      	movs	r3, #16
 800e1a2:	77fb      	strb	r3, [r7, #31]
 800e1a4:	e02c      	b.n	800e200 <UART_SetConfig+0x348>
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	4a72      	ldr	r2, [pc, #456]	@ (800e374 <UART_SetConfig+0x4bc>)
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	d125      	bne.n	800e1fc <UART_SetConfig+0x344>
 800e1b0:	4b71      	ldr	r3, [pc, #452]	@ (800e378 <UART_SetConfig+0x4c0>)
 800e1b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1b6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800e1ba:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e1be:	d017      	beq.n	800e1f0 <UART_SetConfig+0x338>
 800e1c0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e1c4:	d817      	bhi.n	800e1f6 <UART_SetConfig+0x33e>
 800e1c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e1ca:	d00b      	beq.n	800e1e4 <UART_SetConfig+0x32c>
 800e1cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e1d0:	d811      	bhi.n	800e1f6 <UART_SetConfig+0x33e>
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d003      	beq.n	800e1de <UART_SetConfig+0x326>
 800e1d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e1da:	d006      	beq.n	800e1ea <UART_SetConfig+0x332>
 800e1dc:	e00b      	b.n	800e1f6 <UART_SetConfig+0x33e>
 800e1de:	2300      	movs	r3, #0
 800e1e0:	77fb      	strb	r3, [r7, #31]
 800e1e2:	e00d      	b.n	800e200 <UART_SetConfig+0x348>
 800e1e4:	2302      	movs	r3, #2
 800e1e6:	77fb      	strb	r3, [r7, #31]
 800e1e8:	e00a      	b.n	800e200 <UART_SetConfig+0x348>
 800e1ea:	2304      	movs	r3, #4
 800e1ec:	77fb      	strb	r3, [r7, #31]
 800e1ee:	e007      	b.n	800e200 <UART_SetConfig+0x348>
 800e1f0:	2308      	movs	r3, #8
 800e1f2:	77fb      	strb	r3, [r7, #31]
 800e1f4:	e004      	b.n	800e200 <UART_SetConfig+0x348>
 800e1f6:	2310      	movs	r3, #16
 800e1f8:	77fb      	strb	r3, [r7, #31]
 800e1fa:	e001      	b.n	800e200 <UART_SetConfig+0x348>
 800e1fc:	2310      	movs	r3, #16
 800e1fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	69db      	ldr	r3, [r3, #28]
 800e204:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e208:	d15b      	bne.n	800e2c2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800e20a:	7ffb      	ldrb	r3, [r7, #31]
 800e20c:	2b08      	cmp	r3, #8
 800e20e:	d828      	bhi.n	800e262 <UART_SetConfig+0x3aa>
 800e210:	a201      	add	r2, pc, #4	@ (adr r2, 800e218 <UART_SetConfig+0x360>)
 800e212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e216:	bf00      	nop
 800e218:	0800e23d 	.word	0x0800e23d
 800e21c:	0800e245 	.word	0x0800e245
 800e220:	0800e24d 	.word	0x0800e24d
 800e224:	0800e263 	.word	0x0800e263
 800e228:	0800e253 	.word	0x0800e253
 800e22c:	0800e263 	.word	0x0800e263
 800e230:	0800e263 	.word	0x0800e263
 800e234:	0800e263 	.word	0x0800e263
 800e238:	0800e25b 	.word	0x0800e25b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e23c:	f7fd f9f8 	bl	800b630 <HAL_RCC_GetPCLK1Freq>
 800e240:	61b8      	str	r0, [r7, #24]
        break;
 800e242:	e013      	b.n	800e26c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e244:	f7fd fa08 	bl	800b658 <HAL_RCC_GetPCLK2Freq>
 800e248:	61b8      	str	r0, [r7, #24]
        break;
 800e24a:	e00f      	b.n	800e26c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e24c:	4b4b      	ldr	r3, [pc, #300]	@ (800e37c <UART_SetConfig+0x4c4>)
 800e24e:	61bb      	str	r3, [r7, #24]
        break;
 800e250:	e00c      	b.n	800e26c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e252:	f7fd f91b 	bl	800b48c <HAL_RCC_GetSysClockFreq>
 800e256:	61b8      	str	r0, [r7, #24]
        break;
 800e258:	e008      	b.n	800e26c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e25a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e25e:	61bb      	str	r3, [r7, #24]
        break;
 800e260:	e004      	b.n	800e26c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800e262:	2300      	movs	r3, #0
 800e264:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e266:	2301      	movs	r3, #1
 800e268:	77bb      	strb	r3, [r7, #30]
        break;
 800e26a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e26c:	69bb      	ldr	r3, [r7, #24]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d074      	beq.n	800e35c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e272:	69bb      	ldr	r3, [r7, #24]
 800e274:	005a      	lsls	r2, r3, #1
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	685b      	ldr	r3, [r3, #4]
 800e27a:	085b      	lsrs	r3, r3, #1
 800e27c:	441a      	add	r2, r3
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	685b      	ldr	r3, [r3, #4]
 800e282:	fbb2 f3f3 	udiv	r3, r2, r3
 800e286:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	2b0f      	cmp	r3, #15
 800e28c:	d916      	bls.n	800e2bc <UART_SetConfig+0x404>
 800e28e:	693b      	ldr	r3, [r7, #16]
 800e290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e294:	d212      	bcs.n	800e2bc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	b29b      	uxth	r3, r3
 800e29a:	f023 030f 	bic.w	r3, r3, #15
 800e29e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	085b      	lsrs	r3, r3, #1
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	f003 0307 	and.w	r3, r3, #7
 800e2aa:	b29a      	uxth	r2, r3
 800e2ac:	89fb      	ldrh	r3, [r7, #14]
 800e2ae:	4313      	orrs	r3, r2
 800e2b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	89fa      	ldrh	r2, [r7, #14]
 800e2b8:	60da      	str	r2, [r3, #12]
 800e2ba:	e04f      	b.n	800e35c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e2bc:	2301      	movs	r3, #1
 800e2be:	77bb      	strb	r3, [r7, #30]
 800e2c0:	e04c      	b.n	800e35c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e2c2:	7ffb      	ldrb	r3, [r7, #31]
 800e2c4:	2b08      	cmp	r3, #8
 800e2c6:	d828      	bhi.n	800e31a <UART_SetConfig+0x462>
 800e2c8:	a201      	add	r2, pc, #4	@ (adr r2, 800e2d0 <UART_SetConfig+0x418>)
 800e2ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ce:	bf00      	nop
 800e2d0:	0800e2f5 	.word	0x0800e2f5
 800e2d4:	0800e2fd 	.word	0x0800e2fd
 800e2d8:	0800e305 	.word	0x0800e305
 800e2dc:	0800e31b 	.word	0x0800e31b
 800e2e0:	0800e30b 	.word	0x0800e30b
 800e2e4:	0800e31b 	.word	0x0800e31b
 800e2e8:	0800e31b 	.word	0x0800e31b
 800e2ec:	0800e31b 	.word	0x0800e31b
 800e2f0:	0800e313 	.word	0x0800e313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e2f4:	f7fd f99c 	bl	800b630 <HAL_RCC_GetPCLK1Freq>
 800e2f8:	61b8      	str	r0, [r7, #24]
        break;
 800e2fa:	e013      	b.n	800e324 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e2fc:	f7fd f9ac 	bl	800b658 <HAL_RCC_GetPCLK2Freq>
 800e300:	61b8      	str	r0, [r7, #24]
        break;
 800e302:	e00f      	b.n	800e324 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e304:	4b1d      	ldr	r3, [pc, #116]	@ (800e37c <UART_SetConfig+0x4c4>)
 800e306:	61bb      	str	r3, [r7, #24]
        break;
 800e308:	e00c      	b.n	800e324 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e30a:	f7fd f8bf 	bl	800b48c <HAL_RCC_GetSysClockFreq>
 800e30e:	61b8      	str	r0, [r7, #24]
        break;
 800e310:	e008      	b.n	800e324 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e312:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e316:	61bb      	str	r3, [r7, #24]
        break;
 800e318:	e004      	b.n	800e324 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800e31a:	2300      	movs	r3, #0
 800e31c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e31e:	2301      	movs	r3, #1
 800e320:	77bb      	strb	r3, [r7, #30]
        break;
 800e322:	bf00      	nop
    }

    if (pclk != 0U)
 800e324:	69bb      	ldr	r3, [r7, #24]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d018      	beq.n	800e35c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	685b      	ldr	r3, [r3, #4]
 800e32e:	085a      	lsrs	r2, r3, #1
 800e330:	69bb      	ldr	r3, [r7, #24]
 800e332:	441a      	add	r2, r3
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	685b      	ldr	r3, [r3, #4]
 800e338:	fbb2 f3f3 	udiv	r3, r2, r3
 800e33c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	2b0f      	cmp	r3, #15
 800e342:	d909      	bls.n	800e358 <UART_SetConfig+0x4a0>
 800e344:	693b      	ldr	r3, [r7, #16]
 800e346:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e34a:	d205      	bcs.n	800e358 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e34c:	693b      	ldr	r3, [r7, #16]
 800e34e:	b29a      	uxth	r2, r3
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	60da      	str	r2, [r3, #12]
 800e356:	e001      	b.n	800e35c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e358:	2301      	movs	r3, #1
 800e35a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2200      	movs	r2, #0
 800e360:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2200      	movs	r2, #0
 800e366:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800e368:	7fbb      	ldrb	r3, [r7, #30]
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3720      	adds	r7, #32
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	40007c00 	.word	0x40007c00
 800e378:	40023800 	.word	0x40023800
 800e37c:	00f42400 	.word	0x00f42400

0800e380 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e380:	b480      	push	{r7}
 800e382:	b083      	sub	sp, #12
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e38c:	f003 0301 	and.w	r3, r3, #1
 800e390:	2b00      	cmp	r3, #0
 800e392:	d00a      	beq.n	800e3aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	430a      	orrs	r2, r1
 800e3a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3ae:	f003 0302 	and.w	r3, r3, #2
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d00a      	beq.n	800e3cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	685b      	ldr	r3, [r3, #4]
 800e3bc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	430a      	orrs	r2, r1
 800e3ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3d0:	f003 0304 	and.w	r3, r3, #4
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d00a      	beq.n	800e3ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	685b      	ldr	r3, [r3, #4]
 800e3de:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	430a      	orrs	r2, r1
 800e3ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3f2:	f003 0308 	and.w	r3, r3, #8
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d00a      	beq.n	800e410 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	685b      	ldr	r3, [r3, #4]
 800e400:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	430a      	orrs	r2, r1
 800e40e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e414:	f003 0310 	and.w	r3, r3, #16
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d00a      	beq.n	800e432 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	689b      	ldr	r3, [r3, #8]
 800e422:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	430a      	orrs	r2, r1
 800e430:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e436:	f003 0320 	and.w	r3, r3, #32
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d00a      	beq.n	800e454 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	689b      	ldr	r3, [r3, #8]
 800e444:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	430a      	orrs	r2, r1
 800e452:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d01a      	beq.n	800e496 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	685b      	ldr	r3, [r3, #4]
 800e466:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	430a      	orrs	r2, r1
 800e474:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e47a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e47e:	d10a      	bne.n	800e496 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	685b      	ldr	r3, [r3, #4]
 800e486:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	430a      	orrs	r2, r1
 800e494:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e49a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d00a      	beq.n	800e4b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	685b      	ldr	r3, [r3, #4]
 800e4a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	430a      	orrs	r2, r1
 800e4b6:	605a      	str	r2, [r3, #4]
  }
}
 800e4b8:	bf00      	nop
 800e4ba:	370c      	adds	r7, #12
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr

0800e4c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b086      	sub	sp, #24
 800e4c8:	af02      	add	r7, sp, #8
 800e4ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e4d4:	f7f9 fb54 	bl	8007b80 <HAL_GetTick>
 800e4d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	f003 0308 	and.w	r3, r3, #8
 800e4e4:	2b08      	cmp	r3, #8
 800e4e6:	d10e      	bne.n	800e506 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e4e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e4ec:	9300      	str	r3, [sp, #0]
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f000 f81b 	bl	800e532 <UART_WaitOnFlagUntilTimeout>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d001      	beq.n	800e506 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e502:	2303      	movs	r3, #3
 800e504:	e011      	b.n	800e52a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2220      	movs	r2, #32
 800e50a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2220      	movs	r2, #32
 800e510:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2200      	movs	r2, #0
 800e518:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2200      	movs	r2, #0
 800e51e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2200      	movs	r2, #0
 800e524:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800e528:	2300      	movs	r3, #0
}
 800e52a:	4618      	mov	r0, r3
 800e52c:	3710      	adds	r7, #16
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}

0800e532 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e532:	b580      	push	{r7, lr}
 800e534:	b09c      	sub	sp, #112	@ 0x70
 800e536:	af00      	add	r7, sp, #0
 800e538:	60f8      	str	r0, [r7, #12]
 800e53a:	60b9      	str	r1, [r7, #8]
 800e53c:	603b      	str	r3, [r7, #0]
 800e53e:	4613      	mov	r3, r2
 800e540:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e542:	e0a7      	b.n	800e694 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e544:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e546:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e54a:	f000 80a3 	beq.w	800e694 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e54e:	f7f9 fb17 	bl	8007b80 <HAL_GetTick>
 800e552:	4602      	mov	r2, r0
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	1ad3      	subs	r3, r2, r3
 800e558:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d302      	bcc.n	800e564 <UART_WaitOnFlagUntilTimeout+0x32>
 800e55e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e560:	2b00      	cmp	r3, #0
 800e562:	d13f      	bne.n	800e5e4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e56a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e56c:	e853 3f00 	ldrex	r3, [r3]
 800e570:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e574:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800e578:	667b      	str	r3, [r7, #100]	@ 0x64
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	461a      	mov	r2, r3
 800e580:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e582:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e584:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e586:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e588:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e58a:	e841 2300 	strex	r3, r2, [r1]
 800e58e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800e590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e592:	2b00      	cmp	r3, #0
 800e594:	d1e6      	bne.n	800e564 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	3308      	adds	r3, #8
 800e59c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e59e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5a0:	e853 3f00 	ldrex	r3, [r3]
 800e5a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5a8:	f023 0301 	bic.w	r3, r3, #1
 800e5ac:	663b      	str	r3, [r7, #96]	@ 0x60
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	3308      	adds	r3, #8
 800e5b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e5b6:	64ba      	str	r2, [r7, #72]	@ 0x48
 800e5b8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e5bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e5be:	e841 2300 	strex	r3, r2, [r1]
 800e5c2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e5c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d1e5      	bne.n	800e596 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2220      	movs	r2, #32
 800e5ce:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2220      	movs	r2, #32
 800e5d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2200      	movs	r2, #0
 800e5dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800e5e0:	2303      	movs	r3, #3
 800e5e2:	e068      	b.n	800e6b6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	f003 0304 	and.w	r3, r3, #4
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d050      	beq.n	800e694 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	69db      	ldr	r3, [r3, #28]
 800e5f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e5fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e600:	d148      	bne.n	800e694 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e60a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e614:	e853 3f00 	ldrex	r3, [r3]
 800e618:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e61c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800e620:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	461a      	mov	r2, r3
 800e628:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e62a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e62c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e62e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e630:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e632:	e841 2300 	strex	r3, r2, [r1]
 800e636:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d1e6      	bne.n	800e60c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	3308      	adds	r3, #8
 800e644:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	e853 3f00 	ldrex	r3, [r3]
 800e64c:	613b      	str	r3, [r7, #16]
   return(result);
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	f023 0301 	bic.w	r3, r3, #1
 800e654:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	3308      	adds	r3, #8
 800e65c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e65e:	623a      	str	r2, [r7, #32]
 800e660:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e662:	69f9      	ldr	r1, [r7, #28]
 800e664:	6a3a      	ldr	r2, [r7, #32]
 800e666:	e841 2300 	strex	r3, r2, [r1]
 800e66a:	61bb      	str	r3, [r7, #24]
   return(result);
 800e66c:	69bb      	ldr	r3, [r7, #24]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d1e5      	bne.n	800e63e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	2220      	movs	r2, #32
 800e676:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	2220      	movs	r2, #32
 800e67c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	2220      	movs	r2, #32
 800e684:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	2200      	movs	r2, #0
 800e68c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800e690:	2303      	movs	r3, #3
 800e692:	e010      	b.n	800e6b6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	69da      	ldr	r2, [r3, #28]
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	4013      	ands	r3, r2
 800e69e:	68ba      	ldr	r2, [r7, #8]
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	bf0c      	ite	eq
 800e6a4:	2301      	moveq	r3, #1
 800e6a6:	2300      	movne	r3, #0
 800e6a8:	b2db      	uxtb	r3, r3
 800e6aa:	461a      	mov	r2, r3
 800e6ac:	79fb      	ldrb	r3, [r7, #7]
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	f43f af48 	beq.w	800e544 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e6b4:	2300      	movs	r3, #0
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	3770      	adds	r7, #112	@ 0x70
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}
	...

0800e6c0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	b083      	sub	sp, #12
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d121      	bne.n	800e716 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681a      	ldr	r2, [r3, #0]
 800e6d6:	4b27      	ldr	r3, [pc, #156]	@ (800e774 <FMC_SDRAM_Init+0xb4>)
 800e6d8:	4013      	ands	r3, r2
 800e6da:	683a      	ldr	r2, [r7, #0]
 800e6dc:	6851      	ldr	r1, [r2, #4]
 800e6de:	683a      	ldr	r2, [r7, #0]
 800e6e0:	6892      	ldr	r2, [r2, #8]
 800e6e2:	4311      	orrs	r1, r2
 800e6e4:	683a      	ldr	r2, [r7, #0]
 800e6e6:	68d2      	ldr	r2, [r2, #12]
 800e6e8:	4311      	orrs	r1, r2
 800e6ea:	683a      	ldr	r2, [r7, #0]
 800e6ec:	6912      	ldr	r2, [r2, #16]
 800e6ee:	4311      	orrs	r1, r2
 800e6f0:	683a      	ldr	r2, [r7, #0]
 800e6f2:	6952      	ldr	r2, [r2, #20]
 800e6f4:	4311      	orrs	r1, r2
 800e6f6:	683a      	ldr	r2, [r7, #0]
 800e6f8:	6992      	ldr	r2, [r2, #24]
 800e6fa:	4311      	orrs	r1, r2
 800e6fc:	683a      	ldr	r2, [r7, #0]
 800e6fe:	69d2      	ldr	r2, [r2, #28]
 800e700:	4311      	orrs	r1, r2
 800e702:	683a      	ldr	r2, [r7, #0]
 800e704:	6a12      	ldr	r2, [r2, #32]
 800e706:	4311      	orrs	r1, r2
 800e708:	683a      	ldr	r2, [r7, #0]
 800e70a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e70c:	430a      	orrs	r2, r1
 800e70e:	431a      	orrs	r2, r3
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	601a      	str	r2, [r3, #0]
 800e714:	e026      	b.n	800e764 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	69d9      	ldr	r1, [r3, #28]
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	6a1b      	ldr	r3, [r3, #32]
 800e726:	4319      	orrs	r1, r3
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e72c:	430b      	orrs	r3, r1
 800e72e:	431a      	orrs	r2, r3
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	685a      	ldr	r2, [r3, #4]
 800e738:	4b0e      	ldr	r3, [pc, #56]	@ (800e774 <FMC_SDRAM_Init+0xb4>)
 800e73a:	4013      	ands	r3, r2
 800e73c:	683a      	ldr	r2, [r7, #0]
 800e73e:	6851      	ldr	r1, [r2, #4]
 800e740:	683a      	ldr	r2, [r7, #0]
 800e742:	6892      	ldr	r2, [r2, #8]
 800e744:	4311      	orrs	r1, r2
 800e746:	683a      	ldr	r2, [r7, #0]
 800e748:	68d2      	ldr	r2, [r2, #12]
 800e74a:	4311      	orrs	r1, r2
 800e74c:	683a      	ldr	r2, [r7, #0]
 800e74e:	6912      	ldr	r2, [r2, #16]
 800e750:	4311      	orrs	r1, r2
 800e752:	683a      	ldr	r2, [r7, #0]
 800e754:	6952      	ldr	r2, [r2, #20]
 800e756:	4311      	orrs	r1, r2
 800e758:	683a      	ldr	r2, [r7, #0]
 800e75a:	6992      	ldr	r2, [r2, #24]
 800e75c:	430a      	orrs	r2, r1
 800e75e:	431a      	orrs	r2, r3
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800e764:	2300      	movs	r3, #0
}
 800e766:	4618      	mov	r0, r3
 800e768:	370c      	adds	r7, #12
 800e76a:	46bd      	mov	sp, r7
 800e76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e770:	4770      	bx	lr
 800e772:	bf00      	nop
 800e774:	ffff8000 	.word	0xffff8000

0800e778 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e778:	b480      	push	{r7}
 800e77a:	b085      	sub	sp, #20
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	60f8      	str	r0, [r7, #12]
 800e780:	60b9      	str	r1, [r7, #8]
 800e782:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d128      	bne.n	800e7dc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	689b      	ldr	r3, [r3, #8]
 800e78e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	1e59      	subs	r1, r3, #1
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	685b      	ldr	r3, [r3, #4]
 800e79c:	3b01      	subs	r3, #1
 800e79e:	011b      	lsls	r3, r3, #4
 800e7a0:	4319      	orrs	r1, r3
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	689b      	ldr	r3, [r3, #8]
 800e7a6:	3b01      	subs	r3, #1
 800e7a8:	021b      	lsls	r3, r3, #8
 800e7aa:	4319      	orrs	r1, r3
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	68db      	ldr	r3, [r3, #12]
 800e7b0:	3b01      	subs	r3, #1
 800e7b2:	031b      	lsls	r3, r3, #12
 800e7b4:	4319      	orrs	r1, r3
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	691b      	ldr	r3, [r3, #16]
 800e7ba:	3b01      	subs	r3, #1
 800e7bc:	041b      	lsls	r3, r3, #16
 800e7be:	4319      	orrs	r1, r3
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	695b      	ldr	r3, [r3, #20]
 800e7c4:	3b01      	subs	r3, #1
 800e7c6:	051b      	lsls	r3, r3, #20
 800e7c8:	4319      	orrs	r1, r3
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	699b      	ldr	r3, [r3, #24]
 800e7ce:	3b01      	subs	r3, #1
 800e7d0:	061b      	lsls	r3, r3, #24
 800e7d2:	430b      	orrs	r3, r1
 800e7d4:	431a      	orrs	r2, r3
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	609a      	str	r2, [r3, #8]
 800e7da:	e02d      	b.n	800e838 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	689a      	ldr	r2, [r3, #8]
 800e7e0:	4b19      	ldr	r3, [pc, #100]	@ (800e848 <FMC_SDRAM_Timing_Init+0xd0>)
 800e7e2:	4013      	ands	r3, r2
 800e7e4:	68ba      	ldr	r2, [r7, #8]
 800e7e6:	68d2      	ldr	r2, [r2, #12]
 800e7e8:	3a01      	subs	r2, #1
 800e7ea:	0311      	lsls	r1, r2, #12
 800e7ec:	68ba      	ldr	r2, [r7, #8]
 800e7ee:	6952      	ldr	r2, [r2, #20]
 800e7f0:	3a01      	subs	r2, #1
 800e7f2:	0512      	lsls	r2, r2, #20
 800e7f4:	430a      	orrs	r2, r1
 800e7f6:	431a      	orrs	r2, r3
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	68db      	ldr	r3, [r3, #12]
 800e800:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	1e59      	subs	r1, r3, #1
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	3b01      	subs	r3, #1
 800e810:	011b      	lsls	r3, r3, #4
 800e812:	4319      	orrs	r1, r3
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	689b      	ldr	r3, [r3, #8]
 800e818:	3b01      	subs	r3, #1
 800e81a:	021b      	lsls	r3, r3, #8
 800e81c:	4319      	orrs	r1, r3
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	691b      	ldr	r3, [r3, #16]
 800e822:	3b01      	subs	r3, #1
 800e824:	041b      	lsls	r3, r3, #16
 800e826:	4319      	orrs	r1, r3
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	699b      	ldr	r3, [r3, #24]
 800e82c:	3b01      	subs	r3, #1
 800e82e:	061b      	lsls	r3, r3, #24
 800e830:	430b      	orrs	r3, r1
 800e832:	431a      	orrs	r2, r3
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800e838:	2300      	movs	r3, #0
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3714      	adds	r7, #20
 800e83e:	46bd      	mov	sp, r7
 800e840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e844:	4770      	bx	lr
 800e846:	bf00      	nop
 800e848:	ff0f0fff 	.word	0xff0f0fff

0800e84c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800e84c:	b480      	push	{r7}
 800e84e:	b085      	sub	sp, #20
 800e850:	af00      	add	r7, sp, #0
 800e852:	60f8      	str	r0, [r7, #12]
 800e854:	60b9      	str	r1, [r7, #8]
 800e856:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	691a      	ldr	r2, [r3, #16]
 800e85c:	4b0c      	ldr	r3, [pc, #48]	@ (800e890 <FMC_SDRAM_SendCommand+0x44>)
 800e85e:	4013      	ands	r3, r2
 800e860:	68ba      	ldr	r2, [r7, #8]
 800e862:	6811      	ldr	r1, [r2, #0]
 800e864:	68ba      	ldr	r2, [r7, #8]
 800e866:	6852      	ldr	r2, [r2, #4]
 800e868:	4311      	orrs	r1, r2
 800e86a:	68ba      	ldr	r2, [r7, #8]
 800e86c:	6892      	ldr	r2, [r2, #8]
 800e86e:	3a01      	subs	r2, #1
 800e870:	0152      	lsls	r2, r2, #5
 800e872:	4311      	orrs	r1, r2
 800e874:	68ba      	ldr	r2, [r7, #8]
 800e876:	68d2      	ldr	r2, [r2, #12]
 800e878:	0252      	lsls	r2, r2, #9
 800e87a:	430a      	orrs	r2, r1
 800e87c:	431a      	orrs	r2, r3
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800e882:	2300      	movs	r3, #0
}
 800e884:	4618      	mov	r0, r3
 800e886:	3714      	adds	r7, #20
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr
 800e890:	ffc00000 	.word	0xffc00000

0800e894 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800e894:	b480      	push	{r7}
 800e896:	b083      	sub	sp, #12
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	695a      	ldr	r2, [r3, #20]
 800e8a2:	4b07      	ldr	r3, [pc, #28]	@ (800e8c0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800e8a4:	4013      	ands	r3, r2
 800e8a6:	683a      	ldr	r2, [r7, #0]
 800e8a8:	0052      	lsls	r2, r2, #1
 800e8aa:	431a      	orrs	r2, r3
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800e8b0:	2300      	movs	r3, #0
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	370c      	adds	r7, #12
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8bc:	4770      	bx	lr
 800e8be:	bf00      	nop
 800e8c0:	ffffc001 	.word	0xffffc001

0800e8c4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e8c4:	b084      	sub	sp, #16
 800e8c6:	b480      	push	{r7}
 800e8c8:	b085      	sub	sp, #20
 800e8ca:	af00      	add	r7, sp, #0
 800e8cc:	6078      	str	r0, [r7, #4]
 800e8ce:	f107 001c 	add.w	r0, r7, #28
 800e8d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e8da:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e8dc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e8de:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800e8e2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e8e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800e8e6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800e8ea:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800e8ee:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e8f0:	68fa      	ldr	r2, [r7, #12]
 800e8f2:	4313      	orrs	r3, r2
 800e8f4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	685a      	ldr	r2, [r3, #4]
 800e8fa:	4b07      	ldr	r3, [pc, #28]	@ (800e918 <SDMMC_Init+0x54>)
 800e8fc:	4013      	ands	r3, r2
 800e8fe:	68fa      	ldr	r2, [r7, #12]
 800e900:	431a      	orrs	r2, r3
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e906:	2300      	movs	r3, #0
}
 800e908:	4618      	mov	r0, r3
 800e90a:	3714      	adds	r7, #20
 800e90c:	46bd      	mov	sp, r7
 800e90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e912:	b004      	add	sp, #16
 800e914:	4770      	bx	lr
 800e916:	bf00      	nop
 800e918:	ffff8100 	.word	0xffff8100

0800e91c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800e91c:	b480      	push	{r7}
 800e91e:	b083      	sub	sp, #12
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2203      	movs	r2, #3
 800e928:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e92a:	2300      	movs	r3, #0
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	370c      	adds	r7, #12
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr

0800e938 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800e938:	b480      	push	{r7}
 800e93a:	b083      	sub	sp, #12
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	f003 0303 	and.w	r3, r3, #3
}
 800e948:	4618      	mov	r0, r3
 800e94a:	370c      	adds	r7, #12
 800e94c:	46bd      	mov	sp, r7
 800e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e952:	4770      	bx	lr

0800e954 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e954:	b480      	push	{r7}
 800e956:	b085      	sub	sp, #20
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
 800e95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e95e:	2300      	movs	r3, #0
 800e960:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	681a      	ldr	r2, [r3, #0]
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e972:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e978:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e97e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e980:	68fa      	ldr	r2, [r7, #12]
 800e982:	4313      	orrs	r3, r2
 800e984:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	68da      	ldr	r2, [r3, #12]
 800e98a:	4b06      	ldr	r3, [pc, #24]	@ (800e9a4 <SDMMC_SendCommand+0x50>)
 800e98c:	4013      	ands	r3, r2
 800e98e:	68fa      	ldr	r2, [r7, #12]
 800e990:	431a      	orrs	r2, r3
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e996:	2300      	movs	r3, #0
}
 800e998:	4618      	mov	r0, r3
 800e99a:	3714      	adds	r7, #20
 800e99c:	46bd      	mov	sp, r7
 800e99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a2:	4770      	bx	lr
 800e9a4:	fffff000 	.word	0xfffff000

0800e9a8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b083      	sub	sp, #12
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	691b      	ldr	r3, [r3, #16]
 800e9b4:	b2db      	uxtb	r3, r3
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	370c      	adds	r7, #12
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c0:	4770      	bx	lr

0800e9c2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e9c2:	b480      	push	{r7}
 800e9c4:	b085      	sub	sp, #20
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	6078      	str	r0, [r7, #4]
 800e9ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	3314      	adds	r3, #20
 800e9d0:	461a      	mov	r2, r3
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	4413      	add	r3, r2
 800e9d6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	681b      	ldr	r3, [r3, #0]
}  
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3714      	adds	r7, #20
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr

0800e9e8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b085      	sub	sp, #20
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	681a      	ldr	r2, [r3, #0]
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	685a      	ldr	r2, [r3, #4]
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ea0e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ea14:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ea1a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ea1c:	68fa      	ldr	r2, [r7, #12]
 800ea1e:	4313      	orrs	r3, r2
 800ea20:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea26:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	431a      	orrs	r2, r3
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800ea32:	2300      	movs	r3, #0

}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3714      	adds	r7, #20
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3e:	4770      	bx	lr

0800ea40 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b088      	sub	sp, #32
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ea4e:	2310      	movs	r3, #16
 800ea50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ea52:	2340      	movs	r3, #64	@ 0x40
 800ea54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ea56:	2300      	movs	r3, #0
 800ea58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ea5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ea5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ea60:	f107 0308 	add.w	r3, r7, #8
 800ea64:	4619      	mov	r1, r3
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	f7ff ff74 	bl	800e954 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ea6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ea70:	2110      	movs	r1, #16
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f000 f9d6 	bl	800ee24 <SDMMC_GetCmdResp1>
 800ea78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea7a:	69fb      	ldr	r3, [r7, #28]
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3720      	adds	r7, #32
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}

0800ea84 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b088      	sub	sp, #32
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ea92:	2311      	movs	r3, #17
 800ea94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ea96:	2340      	movs	r3, #64	@ 0x40
 800ea98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ea9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eaa2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eaa4:	f107 0308 	add.w	r3, r7, #8
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f7ff ff52 	bl	800e954 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800eab0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eab4:	2111      	movs	r1, #17
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f000 f9b4 	bl	800ee24 <SDMMC_GetCmdResp1>
 800eabc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eabe:	69fb      	ldr	r3, [r7, #28]
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	3720      	adds	r7, #32
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}

0800eac8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b088      	sub	sp, #32
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ead6:	2312      	movs	r3, #18
 800ead8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eada:	2340      	movs	r3, #64	@ 0x40
 800eadc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eade:	2300      	movs	r3, #0
 800eae0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eae2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eae6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eae8:	f107 0308 	add.w	r3, r7, #8
 800eaec:	4619      	mov	r1, r3
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f7ff ff30 	bl	800e954 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800eaf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eaf8:	2112      	movs	r1, #18
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f000 f992 	bl	800ee24 <SDMMC_GetCmdResp1>
 800eb00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb02:	69fb      	ldr	r3, [r7, #28]
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3720      	adds	r7, #32
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}

0800eb0c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b088      	sub	sp, #32
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
 800eb14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800eb1a:	2318      	movs	r3, #24
 800eb1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eb1e:	2340      	movs	r3, #64	@ 0x40
 800eb20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eb22:	2300      	movs	r3, #0
 800eb24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eb26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eb2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eb2c:	f107 0308 	add.w	r3, r7, #8
 800eb30:	4619      	mov	r1, r3
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f7ff ff0e 	bl	800e954 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800eb38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eb3c:	2118      	movs	r1, #24
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f000 f970 	bl	800ee24 <SDMMC_GetCmdResp1>
 800eb44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb46:	69fb      	ldr	r3, [r7, #28]
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3720      	adds	r7, #32
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b088      	sub	sp, #32
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800eb5e:	2319      	movs	r3, #25
 800eb60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eb62:	2340      	movs	r3, #64	@ 0x40
 800eb64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eb66:	2300      	movs	r3, #0
 800eb68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eb6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eb6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eb70:	f107 0308 	add.w	r3, r7, #8
 800eb74:	4619      	mov	r1, r3
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f7ff feec 	bl	800e954 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800eb7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eb80:	2119      	movs	r1, #25
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f000 f94e 	bl	800ee24 <SDMMC_GetCmdResp1>
 800eb88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb8a:	69fb      	ldr	r3, [r7, #28]
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3720      	adds	r7, #32
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}

0800eb94 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b088      	sub	sp, #32
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800eba0:	230c      	movs	r3, #12
 800eba2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eba4:	2340      	movs	r3, #64	@ 0x40
 800eba6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ebac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ebb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ebb2:	f107 0308 	add.w	r3, r7, #8
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f7ff fecb 	bl	800e954 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ebbe:	4a05      	ldr	r2, [pc, #20]	@ (800ebd4 <SDMMC_CmdStopTransfer+0x40>)
 800ebc0:	210c      	movs	r1, #12
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f000 f92e 	bl	800ee24 <SDMMC_GetCmdResp1>
 800ebc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ebca:	69fb      	ldr	r3, [r7, #28]
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3720      	adds	r7, #32
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}
 800ebd4:	05f5e100 	.word	0x05f5e100

0800ebd8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b08a      	sub	sp, #40	@ 0x28
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	60f8      	str	r0, [r7, #12]
 800ebe0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ebe8:	2307      	movs	r3, #7
 800ebea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ebec:	2340      	movs	r3, #64	@ 0x40
 800ebee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ebf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ebf8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ebfa:	f107 0310 	add.w	r3, r7, #16
 800ebfe:	4619      	mov	r1, r3
 800ec00:	68f8      	ldr	r0, [r7, #12]
 800ec02:	f7ff fea7 	bl	800e954 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ec06:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec0a:	2107      	movs	r1, #7
 800ec0c:	68f8      	ldr	r0, [r7, #12]
 800ec0e:	f000 f909 	bl	800ee24 <SDMMC_GetCmdResp1>
 800ec12:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800ec14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3728      	adds	r7, #40	@ 0x28
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}

0800ec1e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ec1e:	b580      	push	{r7, lr}
 800ec20:	b088      	sub	sp, #32
 800ec22:	af00      	add	r7, sp, #0
 800ec24:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ec26:	2300      	movs	r3, #0
 800ec28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec32:	2300      	movs	r3, #0
 800ec34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ec3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec3c:	f107 0308 	add.w	r3, r7, #8
 800ec40:	4619      	mov	r1, r3
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f7ff fe86 	bl	800e954 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f000 fb23 	bl	800f294 <SDMMC_GetCmdError>
 800ec4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec50:	69fb      	ldr	r3, [r7, #28]
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3720      	adds	r7, #32
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}

0800ec5a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ec5a:	b580      	push	{r7, lr}
 800ec5c:	b088      	sub	sp, #32
 800ec5e:	af00      	add	r7, sp, #0
 800ec60:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ec62:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800ec66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ec68:	2308      	movs	r3, #8
 800ec6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec6c:	2340      	movs	r3, #64	@ 0x40
 800ec6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec70:	2300      	movs	r3, #0
 800ec72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ec78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec7a:	f107 0308 	add.w	r3, r7, #8
 800ec7e:	4619      	mov	r1, r3
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f7ff fe67 	bl	800e954 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f000 fab6 	bl	800f1f8 <SDMMC_GetCmdResp7>
 800ec8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec8e:	69fb      	ldr	r3, [r7, #28]
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3720      	adds	r7, #32
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}

0800ec98 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b088      	sub	sp, #32
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
 800eca0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800eca6:	2337      	movs	r3, #55	@ 0x37
 800eca8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ecaa:	2340      	movs	r3, #64	@ 0x40
 800ecac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ecb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ecb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ecb8:	f107 0308 	add.w	r3, r7, #8
 800ecbc:	4619      	mov	r1, r3
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f7ff fe48 	bl	800e954 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ecc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ecc8:	2137      	movs	r1, #55	@ 0x37
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f000 f8aa 	bl	800ee24 <SDMMC_GetCmdResp1>
 800ecd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ecd2:	69fb      	ldr	r3, [r7, #28]
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	3720      	adds	r7, #32
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}

0800ecdc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b088      	sub	sp, #32
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ece6:	683a      	ldr	r2, [r7, #0]
 800ece8:	4b0d      	ldr	r3, [pc, #52]	@ (800ed20 <SDMMC_CmdAppOperCommand+0x44>)
 800ecea:	4313      	orrs	r3, r2
 800ecec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ecee:	2329      	movs	r3, #41	@ 0x29
 800ecf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ecf2:	2340      	movs	r3, #64	@ 0x40
 800ecf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ecfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ecfe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed00:	f107 0308 	add.w	r3, r7, #8
 800ed04:	4619      	mov	r1, r3
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f7ff fe24 	bl	800e954 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f000 f9bf 	bl	800f090 <SDMMC_GetCmdResp3>
 800ed12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed14:	69fb      	ldr	r3, [r7, #28]
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	3720      	adds	r7, #32
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd80      	pop	{r7, pc}
 800ed1e:	bf00      	nop
 800ed20:	80100000 	.word	0x80100000

0800ed24 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b088      	sub	sp, #32
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ed30:	2302      	movs	r3, #2
 800ed32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ed34:	23c0      	movs	r3, #192	@ 0xc0
 800ed36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed42:	f107 0308 	add.w	r3, r7, #8
 800ed46:	4619      	mov	r1, r3
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	f7ff fe03 	bl	800e954 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f000 f956 	bl	800f000 <SDMMC_GetCmdResp2>
 800ed54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed56:	69fb      	ldr	r3, [r7, #28]
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3720      	adds	r7, #32
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}

0800ed60 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b088      	sub	sp, #32
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ed6e:	2309      	movs	r3, #9
 800ed70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ed72:	23c0      	movs	r3, #192	@ 0xc0
 800ed74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed76:	2300      	movs	r3, #0
 800ed78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed80:	f107 0308 	add.w	r3, r7, #8
 800ed84:	4619      	mov	r1, r3
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f7ff fde4 	bl	800e954 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f000 f937 	bl	800f000 <SDMMC_GetCmdResp2>
 800ed92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed94:	69fb      	ldr	r3, [r7, #28]
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3720      	adds	r7, #32
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}

0800ed9e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ed9e:	b580      	push	{r7, lr}
 800eda0:	b088      	sub	sp, #32
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]
 800eda6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800eda8:	2300      	movs	r3, #0
 800edaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800edac:	2303      	movs	r3, #3
 800edae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800edb0:	2340      	movs	r3, #64	@ 0x40
 800edb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800edb4:	2300      	movs	r3, #0
 800edb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800edb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800edbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800edbe:	f107 0308 	add.w	r3, r7, #8
 800edc2:	4619      	mov	r1, r3
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f7ff fdc5 	bl	800e954 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800edca:	683a      	ldr	r2, [r7, #0]
 800edcc:	2103      	movs	r1, #3
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f000 f99c 	bl	800f10c <SDMMC_GetCmdResp6>
 800edd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800edd6:	69fb      	ldr	r3, [r7, #28]
}
 800edd8:	4618      	mov	r0, r3
 800edda:	3720      	adds	r7, #32
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}

0800ede0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b088      	sub	sp, #32
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
 800ede8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800edee:	230d      	movs	r3, #13
 800edf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800edf2:	2340      	movs	r3, #64	@ 0x40
 800edf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800edf6:	2300      	movs	r3, #0
 800edf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800edfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800edfe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee00:	f107 0308 	add.w	r3, r7, #8
 800ee04:	4619      	mov	r1, r3
 800ee06:	6878      	ldr	r0, [r7, #4]
 800ee08:	f7ff fda4 	bl	800e954 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ee0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ee10:	210d      	movs	r1, #13
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f000 f806 	bl	800ee24 <SDMMC_GetCmdResp1>
 800ee18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee1a:	69fb      	ldr	r3, [r7, #28]
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3720      	adds	r7, #32
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}

0800ee24 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b088      	sub	sp, #32
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	60f8      	str	r0, [r7, #12]
 800ee2c:	460b      	mov	r3, r1
 800ee2e:	607a      	str	r2, [r7, #4]
 800ee30:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ee32:	4b70      	ldr	r3, [pc, #448]	@ (800eff4 <SDMMC_GetCmdResp1+0x1d0>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	4a70      	ldr	r2, [pc, #448]	@ (800eff8 <SDMMC_GetCmdResp1+0x1d4>)
 800ee38:	fba2 2303 	umull	r2, r3, r2, r3
 800ee3c:	0a5a      	lsrs	r2, r3, #9
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	fb02 f303 	mul.w	r3, r2, r3
 800ee44:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ee46:	69fb      	ldr	r3, [r7, #28]
 800ee48:	1e5a      	subs	r2, r3, #1
 800ee4a:	61fa      	str	r2, [r7, #28]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d102      	bne.n	800ee56 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ee50:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ee54:	e0c9      	b.n	800efea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee5a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ee5c:	69bb      	ldr	r3, [r7, #24]
 800ee5e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d0ef      	beq.n	800ee46 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ee66:	69bb      	ldr	r3, [r7, #24]
 800ee68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d1ea      	bne.n	800ee46 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee74:	f003 0304 	and.w	r3, r3, #4
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d004      	beq.n	800ee86 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	2204      	movs	r2, #4
 800ee80:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ee82:	2304      	movs	r3, #4
 800ee84:	e0b1      	b.n	800efea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee8a:	f003 0301 	and.w	r3, r3, #1
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d004      	beq.n	800ee9c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	2201      	movs	r2, #1
 800ee96:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ee98:	2301      	movs	r3, #1
 800ee9a:	e0a6      	b.n	800efea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	22c5      	movs	r2, #197	@ 0xc5
 800eea0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800eea2:	68f8      	ldr	r0, [r7, #12]
 800eea4:	f7ff fd80 	bl	800e9a8 <SDMMC_GetCommandResponse>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	461a      	mov	r2, r3
 800eeac:	7afb      	ldrb	r3, [r7, #11]
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d001      	beq.n	800eeb6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eeb2:	2301      	movs	r3, #1
 800eeb4:	e099      	b.n	800efea <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800eeb6:	2100      	movs	r1, #0
 800eeb8:	68f8      	ldr	r0, [r7, #12]
 800eeba:	f7ff fd82 	bl	800e9c2 <SDMMC_GetResponse>
 800eebe:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800eec0:	697a      	ldr	r2, [r7, #20]
 800eec2:	4b4e      	ldr	r3, [pc, #312]	@ (800effc <SDMMC_GetCmdResp1+0x1d8>)
 800eec4:	4013      	ands	r3, r2
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d101      	bne.n	800eece <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800eeca:	2300      	movs	r3, #0
 800eecc:	e08d      	b.n	800efea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	da02      	bge.n	800eeda <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800eed4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800eed8:	e087      	b.n	800efea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d001      	beq.n	800eee8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800eee4:	2340      	movs	r3, #64	@ 0x40
 800eee6:	e080      	b.n	800efea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d001      	beq.n	800eef6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800eef2:	2380      	movs	r3, #128	@ 0x80
 800eef4:	e079      	b.n	800efea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d002      	beq.n	800ef06 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ef00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ef04:	e071      	b.n	800efea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d002      	beq.n	800ef16 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ef10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ef14:	e069      	b.n	800efea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ef16:	697b      	ldr	r3, [r7, #20]
 800ef18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d002      	beq.n	800ef26 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ef20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ef24:	e061      	b.n	800efea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d002      	beq.n	800ef36 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ef30:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ef34:	e059      	b.n	800efea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d002      	beq.n	800ef46 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ef40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ef44:	e051      	b.n	800efea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ef46:	697b      	ldr	r3, [r7, #20]
 800ef48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d002      	beq.n	800ef56 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ef50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ef54:	e049      	b.n	800efea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d002      	beq.n	800ef66 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ef60:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ef64:	e041      	b.n	800efea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d002      	beq.n	800ef76 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ef70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ef74:	e039      	b.n	800efea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d002      	beq.n	800ef86 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ef80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ef84:	e031      	b.n	800efea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d002      	beq.n	800ef96 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ef90:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ef94:	e029      	b.n	800efea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d002      	beq.n	800efa6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800efa0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800efa4:	e021      	b.n	800efea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800efac:	2b00      	cmp	r3, #0
 800efae:	d002      	beq.n	800efb6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800efb0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800efb4:	e019      	b.n	800efea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d002      	beq.n	800efc6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800efc0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800efc4:	e011      	b.n	800efea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d002      	beq.n	800efd6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800efd0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800efd4:	e009      	b.n	800efea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	f003 0308 	and.w	r3, r3, #8
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d002      	beq.n	800efe6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800efe0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800efe4:	e001      	b.n	800efea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800efe6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800efea:	4618      	mov	r0, r3
 800efec:	3720      	adds	r7, #32
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}
 800eff2:	bf00      	nop
 800eff4:	2000004c 	.word	0x2000004c
 800eff8:	10624dd3 	.word	0x10624dd3
 800effc:	fdffe008 	.word	0xfdffe008

0800f000 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800f000:	b480      	push	{r7}
 800f002:	b085      	sub	sp, #20
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f008:	4b1f      	ldr	r3, [pc, #124]	@ (800f088 <SDMMC_GetCmdResp2+0x88>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	4a1f      	ldr	r2, [pc, #124]	@ (800f08c <SDMMC_GetCmdResp2+0x8c>)
 800f00e:	fba2 2303 	umull	r2, r3, r2, r3
 800f012:	0a5b      	lsrs	r3, r3, #9
 800f014:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f018:	fb02 f303 	mul.w	r3, r2, r3
 800f01c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	1e5a      	subs	r2, r3, #1
 800f022:	60fa      	str	r2, [r7, #12]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d102      	bne.n	800f02e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f028:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f02c:	e026      	b.n	800f07c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f032:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d0ef      	beq.n	800f01e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f044:	2b00      	cmp	r3, #0
 800f046:	d1ea      	bne.n	800f01e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f04c:	f003 0304 	and.w	r3, r3, #4
 800f050:	2b00      	cmp	r3, #0
 800f052:	d004      	beq.n	800f05e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2204      	movs	r2, #4
 800f058:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f05a:	2304      	movs	r3, #4
 800f05c:	e00e      	b.n	800f07c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f062:	f003 0301 	and.w	r3, r3, #1
 800f066:	2b00      	cmp	r3, #0
 800f068:	d004      	beq.n	800f074 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2201      	movs	r2, #1
 800f06e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f070:	2301      	movs	r3, #1
 800f072:	e003      	b.n	800f07c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	22c5      	movs	r2, #197	@ 0xc5
 800f078:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800f07a:	2300      	movs	r3, #0
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	3714      	adds	r7, #20
 800f080:	46bd      	mov	sp, r7
 800f082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f086:	4770      	bx	lr
 800f088:	2000004c 	.word	0x2000004c
 800f08c:	10624dd3 	.word	0x10624dd3

0800f090 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800f090:	b480      	push	{r7}
 800f092:	b085      	sub	sp, #20
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f098:	4b1a      	ldr	r3, [pc, #104]	@ (800f104 <SDMMC_GetCmdResp3+0x74>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	4a1a      	ldr	r2, [pc, #104]	@ (800f108 <SDMMC_GetCmdResp3+0x78>)
 800f09e:	fba2 2303 	umull	r2, r3, r2, r3
 800f0a2:	0a5b      	lsrs	r3, r3, #9
 800f0a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f0a8:	fb02 f303 	mul.w	r3, r2, r3
 800f0ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	1e5a      	subs	r2, r3, #1
 800f0b2:	60fa      	str	r2, [r7, #12]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d102      	bne.n	800f0be <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f0b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f0bc:	e01b      	b.n	800f0f6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d0ef      	beq.n	800f0ae <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d1ea      	bne.n	800f0ae <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0dc:	f003 0304 	and.w	r3, r3, #4
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d004      	beq.n	800f0ee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2204      	movs	r2, #4
 800f0e8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f0ea:	2304      	movs	r3, #4
 800f0ec:	e003      	b.n	800f0f6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	22c5      	movs	r2, #197	@ 0xc5
 800f0f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f0f4:	2300      	movs	r3, #0
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3714      	adds	r7, #20
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f100:	4770      	bx	lr
 800f102:	bf00      	nop
 800f104:	2000004c 	.word	0x2000004c
 800f108:	10624dd3 	.word	0x10624dd3

0800f10c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b088      	sub	sp, #32
 800f110:	af00      	add	r7, sp, #0
 800f112:	60f8      	str	r0, [r7, #12]
 800f114:	460b      	mov	r3, r1
 800f116:	607a      	str	r2, [r7, #4]
 800f118:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f11a:	4b35      	ldr	r3, [pc, #212]	@ (800f1f0 <SDMMC_GetCmdResp6+0xe4>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	4a35      	ldr	r2, [pc, #212]	@ (800f1f4 <SDMMC_GetCmdResp6+0xe8>)
 800f120:	fba2 2303 	umull	r2, r3, r2, r3
 800f124:	0a5b      	lsrs	r3, r3, #9
 800f126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f12a:	fb02 f303 	mul.w	r3, r2, r3
 800f12e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800f130:	69fb      	ldr	r3, [r7, #28]
 800f132:	1e5a      	subs	r2, r3, #1
 800f134:	61fa      	str	r2, [r7, #28]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d102      	bne.n	800f140 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f13a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f13e:	e052      	b.n	800f1e6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f144:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f146:	69bb      	ldr	r3, [r7, #24]
 800f148:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d0ef      	beq.n	800f130 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f150:	69bb      	ldr	r3, [r7, #24]
 800f152:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f156:	2b00      	cmp	r3, #0
 800f158:	d1ea      	bne.n	800f130 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f15e:	f003 0304 	and.w	r3, r3, #4
 800f162:	2b00      	cmp	r3, #0
 800f164:	d004      	beq.n	800f170 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	2204      	movs	r2, #4
 800f16a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f16c:	2304      	movs	r3, #4
 800f16e:	e03a      	b.n	800f1e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f174:	f003 0301 	and.w	r3, r3, #1
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d004      	beq.n	800f186 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	2201      	movs	r2, #1
 800f180:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f182:	2301      	movs	r3, #1
 800f184:	e02f      	b.n	800f1e6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f186:	68f8      	ldr	r0, [r7, #12]
 800f188:	f7ff fc0e 	bl	800e9a8 <SDMMC_GetCommandResponse>
 800f18c:	4603      	mov	r3, r0
 800f18e:	461a      	mov	r2, r3
 800f190:	7afb      	ldrb	r3, [r7, #11]
 800f192:	4293      	cmp	r3, r2
 800f194:	d001      	beq.n	800f19a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f196:	2301      	movs	r3, #1
 800f198:	e025      	b.n	800f1e6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	22c5      	movs	r2, #197	@ 0xc5
 800f19e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f1a0:	2100      	movs	r1, #0
 800f1a2:	68f8      	ldr	r0, [r7, #12]
 800f1a4:	f7ff fc0d 	bl	800e9c2 <SDMMC_GetResponse>
 800f1a8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d106      	bne.n	800f1c2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	0c1b      	lsrs	r3, r3, #16
 800f1b8:	b29a      	uxth	r2, r3
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	e011      	b.n	800f1e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d002      	beq.n	800f1d2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f1cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f1d0:	e009      	b.n	800f1e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d002      	beq.n	800f1e2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f1dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f1e0:	e001      	b.n	800f1e6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f1e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3720      	adds	r7, #32
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}
 800f1ee:	bf00      	nop
 800f1f0:	2000004c 	.word	0x2000004c
 800f1f4:	10624dd3 	.word	0x10624dd3

0800f1f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800f1f8:	b480      	push	{r7}
 800f1fa:	b085      	sub	sp, #20
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f200:	4b22      	ldr	r3, [pc, #136]	@ (800f28c <SDMMC_GetCmdResp7+0x94>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	4a22      	ldr	r2, [pc, #136]	@ (800f290 <SDMMC_GetCmdResp7+0x98>)
 800f206:	fba2 2303 	umull	r2, r3, r2, r3
 800f20a:	0a5b      	lsrs	r3, r3, #9
 800f20c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f210:	fb02 f303 	mul.w	r3, r2, r3
 800f214:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	1e5a      	subs	r2, r3, #1
 800f21a:	60fa      	str	r2, [r7, #12]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d102      	bne.n	800f226 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f220:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f224:	e02c      	b.n	800f280 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f22a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f232:	2b00      	cmp	r3, #0
 800f234:	d0ef      	beq.n	800f216 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d1ea      	bne.n	800f216 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f244:	f003 0304 	and.w	r3, r3, #4
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d004      	beq.n	800f256 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2204      	movs	r2, #4
 800f250:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f252:	2304      	movs	r3, #4
 800f254:	e014      	b.n	800f280 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f25a:	f003 0301 	and.w	r3, r3, #1
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d004      	beq.n	800f26c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2201      	movs	r2, #1
 800f266:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f268:	2301      	movs	r3, #1
 800f26a:	e009      	b.n	800f280 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f274:	2b00      	cmp	r3, #0
 800f276:	d002      	beq.n	800f27e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2240      	movs	r2, #64	@ 0x40
 800f27c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f27e:	2300      	movs	r3, #0
  
}
 800f280:	4618      	mov	r0, r3
 800f282:	3714      	adds	r7, #20
 800f284:	46bd      	mov	sp, r7
 800f286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28a:	4770      	bx	lr
 800f28c:	2000004c 	.word	0x2000004c
 800f290:	10624dd3 	.word	0x10624dd3

0800f294 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f294:	b480      	push	{r7}
 800f296:	b085      	sub	sp, #20
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f29c:	4b11      	ldr	r3, [pc, #68]	@ (800f2e4 <SDMMC_GetCmdError+0x50>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	4a11      	ldr	r2, [pc, #68]	@ (800f2e8 <SDMMC_GetCmdError+0x54>)
 800f2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800f2a6:	0a5b      	lsrs	r3, r3, #9
 800f2a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f2ac:	fb02 f303 	mul.w	r3, r2, r3
 800f2b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	1e5a      	subs	r2, r3, #1
 800f2b6:	60fa      	str	r2, [r7, #12]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d102      	bne.n	800f2c2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f2bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f2c0:	e009      	b.n	800f2d6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d0f1      	beq.n	800f2b2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	22c5      	movs	r2, #197	@ 0xc5
 800f2d2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800f2d4:	2300      	movs	r3, #0
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3714      	adds	r7, #20
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e0:	4770      	bx	lr
 800f2e2:	bf00      	nop
 800f2e4:	2000004c 	.word	0x2000004c
 800f2e8:	10624dd3 	.word	0x10624dd3

0800f2ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f2f0:	4904      	ldr	r1, [pc, #16]	@ (800f304 <MX_FATFS_Init+0x18>)
 800f2f2:	4805      	ldr	r0, [pc, #20]	@ (800f308 <MX_FATFS_Init+0x1c>)
 800f2f4:	f001 fe4a 	bl	8010f8c <FATFS_LinkDriver>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	4b03      	ldr	r3, [pc, #12]	@ (800f30c <MX_FATFS_Init+0x20>)
 800f2fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f300:	bf00      	nop
 800f302:	bd80      	pop	{r7, pc}
 800f304:	20000ff8 	.word	0x20000ff8
 800f308:	080239c0 	.word	0x080239c0
 800f30c:	20000ff4 	.word	0x20000ff4

0800f310 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b082      	sub	sp, #8
 800f314:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f316:	2300      	movs	r3, #0
 800f318:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f31a:	f000 f86d 	bl	800f3f8 <BSP_SD_IsDetected>
 800f31e:	4603      	mov	r3, r0
 800f320:	2b01      	cmp	r3, #1
 800f322:	d001      	beq.n	800f328 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800f324:	2302      	movs	r3, #2
 800f326:	e005      	b.n	800f334 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800f328:	4804      	ldr	r0, [pc, #16]	@ (800f33c <BSP_SD_Init+0x2c>)
 800f32a:	f7fd fb68 	bl	800c9fe <HAL_SD_Init>
 800f32e:	4603      	mov	r3, r0
 800f330:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800f332:	79fb      	ldrb	r3, [r7, #7]
}
 800f334:	4618      	mov	r0, r3
 800f336:	3708      	adds	r7, #8
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}
 800f33c:	20000930 	.word	0x20000930

0800f340 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b086      	sub	sp, #24
 800f344:	af00      	add	r7, sp, #0
 800f346:	60f8      	str	r0, [r7, #12]
 800f348:	60b9      	str	r1, [r7, #8]
 800f34a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f34c:	2300      	movs	r3, #0
 800f34e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	68ba      	ldr	r2, [r7, #8]
 800f354:	68f9      	ldr	r1, [r7, #12]
 800f356:	4806      	ldr	r0, [pc, #24]	@ (800f370 <BSP_SD_ReadBlocks_DMA+0x30>)
 800f358:	f7fd fc0a 	bl	800cb70 <HAL_SD_ReadBlocks_DMA>
 800f35c:	4603      	mov	r3, r0
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d001      	beq.n	800f366 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f362:	2301      	movs	r3, #1
 800f364:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f366:	7dfb      	ldrb	r3, [r7, #23]
}
 800f368:	4618      	mov	r0, r3
 800f36a:	3718      	adds	r7, #24
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}
 800f370:	20000930 	.word	0x20000930

0800f374 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b086      	sub	sp, #24
 800f378:	af00      	add	r7, sp, #0
 800f37a:	60f8      	str	r0, [r7, #12]
 800f37c:	60b9      	str	r1, [r7, #8]
 800f37e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f380:	2300      	movs	r3, #0
 800f382:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	68ba      	ldr	r2, [r7, #8]
 800f388:	68f9      	ldr	r1, [r7, #12]
 800f38a:	4806      	ldr	r0, [pc, #24]	@ (800f3a4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800f38c:	f7fd fcd2 	bl	800cd34 <HAL_SD_WriteBlocks_DMA>
 800f390:	4603      	mov	r3, r0
 800f392:	2b00      	cmp	r3, #0
 800f394:	d001      	beq.n	800f39a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f396:	2301      	movs	r3, #1
 800f398:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f39a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	3718      	adds	r7, #24
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}
 800f3a4:	20000930 	.word	0x20000930

0800f3a8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f3ac:	4805      	ldr	r0, [pc, #20]	@ (800f3c4 <BSP_SD_GetCardState+0x1c>)
 800f3ae:	f7fd ff81 	bl	800d2b4 <HAL_SD_GetCardState>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	2b04      	cmp	r3, #4
 800f3b6:	bf14      	ite	ne
 800f3b8:	2301      	movne	r3, #1
 800f3ba:	2300      	moveq	r3, #0
 800f3bc:	b2db      	uxtb	r3, r3
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	bd80      	pop	{r7, pc}
 800f3c2:	bf00      	nop
 800f3c4:	20000930 	.word	0x20000930

0800f3c8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b082      	sub	sp, #8
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f3d0:	6879      	ldr	r1, [r7, #4]
 800f3d2:	4803      	ldr	r0, [pc, #12]	@ (800f3e0 <BSP_SD_GetCardInfo+0x18>)
 800f3d4:	f7fd ff42 	bl	800d25c <HAL_SD_GetCardInfo>
}
 800f3d8:	bf00      	nop
 800f3da:	3708      	adds	r7, #8
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}
 800f3e0:	20000930 	.word	0x20000930

0800f3e4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b082      	sub	sp, #8
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800f3ec:	f000 f9b2 	bl	800f754 <BSP_SD_ReadCpltCallback>
}
 800f3f0:	bf00      	nop
 800f3f2:	3708      	adds	r7, #8
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}

0800f3f8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b082      	sub	sp, #8
 800f3fc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f3fe:	2301      	movs	r3, #1
 800f400:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f402:	f000 f80b 	bl	800f41c <BSP_PlatformIsDetected>
 800f406:	4603      	mov	r3, r0
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d101      	bne.n	800f410 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f40c:	2300      	movs	r3, #0
 800f40e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f410:	79fb      	ldrb	r3, [r7, #7]
 800f412:	b2db      	uxtb	r3, r3
}
 800f414:	4618      	mov	r0, r3
 800f416:	3708      	adds	r7, #8
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}

0800f41c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b082      	sub	sp, #8
 800f420:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f422:	2301      	movs	r3, #1
 800f424:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f426:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f42a:	4806      	ldr	r0, [pc, #24]	@ (800f444 <BSP_PlatformIsDetected+0x28>)
 800f42c:	f7fa faea 	bl	8009a04 <HAL_GPIO_ReadPin>
 800f430:	4603      	mov	r3, r0
 800f432:	2b00      	cmp	r3, #0
 800f434:	d001      	beq.n	800f43a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800f436:	2300      	movs	r3, #0
 800f438:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f43a:	79fb      	ldrb	r3, [r7, #7]
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	3708      	adds	r7, #8
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}
 800f444:	40020800 	.word	0x40020800

0800f448 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b084      	sub	sp, #16
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800f450:	f001 fe34 	bl	80110bc <osKernelSysTick>
 800f454:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800f456:	e006      	b.n	800f466 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f458:	f7ff ffa6 	bl	800f3a8 <BSP_SD_GetCardState>
 800f45c:	4603      	mov	r3, r0
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d101      	bne.n	800f466 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800f462:	2300      	movs	r3, #0
 800f464:	e009      	b.n	800f47a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800f466:	f001 fe29 	bl	80110bc <osKernelSysTick>
 800f46a:	4602      	mov	r2, r0
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	1ad3      	subs	r3, r2, r3
 800f470:	687a      	ldr	r2, [r7, #4]
 800f472:	429a      	cmp	r2, r3
 800f474:	d8f0      	bhi.n	800f458 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800f476:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3710      	adds	r7, #16
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}
	...

0800f484 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b082      	sub	sp, #8
 800f488:	af00      	add	r7, sp, #0
 800f48a:	4603      	mov	r3, r0
 800f48c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f48e:	4b0b      	ldr	r3, [pc, #44]	@ (800f4bc <SD_CheckStatus+0x38>)
 800f490:	2201      	movs	r2, #1
 800f492:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f494:	f7ff ff88 	bl	800f3a8 <BSP_SD_GetCardState>
 800f498:	4603      	mov	r3, r0
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d107      	bne.n	800f4ae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f49e:	4b07      	ldr	r3, [pc, #28]	@ (800f4bc <SD_CheckStatus+0x38>)
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	b2db      	uxtb	r3, r3
 800f4a4:	f023 0301 	bic.w	r3, r3, #1
 800f4a8:	b2da      	uxtb	r2, r3
 800f4aa:	4b04      	ldr	r3, [pc, #16]	@ (800f4bc <SD_CheckStatus+0x38>)
 800f4ac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f4ae:	4b03      	ldr	r3, [pc, #12]	@ (800f4bc <SD_CheckStatus+0x38>)
 800f4b0:	781b      	ldrb	r3, [r3, #0]
 800f4b2:	b2db      	uxtb	r3, r3
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3708      	adds	r7, #8
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}
 800f4bc:	20000091 	.word	0x20000091

0800f4c0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f4c0:	b590      	push	{r4, r7, lr}
 800f4c2:	b087      	sub	sp, #28
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f4ca:	4b20      	ldr	r3, [pc, #128]	@ (800f54c <SD_initialize+0x8c>)
 800f4cc:	2201      	movs	r2, #1
 800f4ce:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800f4d0:	f001 fde8 	bl	80110a4 <osKernelRunning>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d030      	beq.n	800f53c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800f4da:	f7ff ff19 	bl	800f310 <BSP_SD_Init>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d107      	bne.n	800f4f4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800f4e4:	79fb      	ldrb	r3, [r7, #7]
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7ff ffcc 	bl	800f484 <SD_CheckStatus>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	461a      	mov	r2, r3
 800f4f0:	4b16      	ldr	r3, [pc, #88]	@ (800f54c <SD_initialize+0x8c>)
 800f4f2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800f4f4:	4b15      	ldr	r3, [pc, #84]	@ (800f54c <SD_initialize+0x8c>)
 800f4f6:	781b      	ldrb	r3, [r3, #0]
 800f4f8:	b2db      	uxtb	r3, r3
 800f4fa:	2b01      	cmp	r3, #1
 800f4fc:	d01e      	beq.n	800f53c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800f4fe:	4b14      	ldr	r3, [pc, #80]	@ (800f550 <SD_initialize+0x90>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d10e      	bne.n	800f524 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800f506:	4b13      	ldr	r3, [pc, #76]	@ (800f554 <SD_initialize+0x94>)
 800f508:	f107 0408 	add.w	r4, r7, #8
 800f50c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f50e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800f512:	f107 0308 	add.w	r3, r7, #8
 800f516:	2100      	movs	r1, #0
 800f518:	4618      	mov	r0, r3
 800f51a:	f001 ff20 	bl	801135e <osMessageCreate>
 800f51e:	4603      	mov	r3, r0
 800f520:	4a0b      	ldr	r2, [pc, #44]	@ (800f550 <SD_initialize+0x90>)
 800f522:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800f524:	4b0a      	ldr	r3, [pc, #40]	@ (800f550 <SD_initialize+0x90>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d107      	bne.n	800f53c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800f52c:	4b07      	ldr	r3, [pc, #28]	@ (800f54c <SD_initialize+0x8c>)
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	b2db      	uxtb	r3, r3
 800f532:	f043 0301 	orr.w	r3, r3, #1
 800f536:	b2da      	uxtb	r2, r3
 800f538:	4b04      	ldr	r3, [pc, #16]	@ (800f54c <SD_initialize+0x8c>)
 800f53a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800f53c:	4b03      	ldr	r3, [pc, #12]	@ (800f54c <SD_initialize+0x8c>)
 800f53e:	781b      	ldrb	r3, [r3, #0]
 800f540:	b2db      	uxtb	r3, r3
}
 800f542:	4618      	mov	r0, r3
 800f544:	371c      	adds	r7, #28
 800f546:	46bd      	mov	sp, r7
 800f548:	bd90      	pop	{r4, r7, pc}
 800f54a:	bf00      	nop
 800f54c:	20000091 	.word	0x20000091
 800f550:	20001460 	.word	0x20001460
 800f554:	080156bc 	.word	0x080156bc

0800f558 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b082      	sub	sp, #8
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	4603      	mov	r3, r0
 800f560:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f562:	79fb      	ldrb	r3, [r7, #7]
 800f564:	4618      	mov	r0, r3
 800f566:	f7ff ff8d 	bl	800f484 <SD_CheckStatus>
 800f56a:	4603      	mov	r3, r0
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	3708      	adds	r7, #8
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}

0800f574 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b08a      	sub	sp, #40	@ 0x28
 800f578:	af00      	add	r7, sp, #0
 800f57a:	60b9      	str	r1, [r7, #8]
 800f57c:	607a      	str	r2, [r7, #4]
 800f57e:	603b      	str	r3, [r7, #0]
 800f580:	4603      	mov	r3, r0
 800f582:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800f584:	2301      	movs	r3, #1
 800f586:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f58a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f58e:	f7ff ff5b 	bl	800f448 <SD_CheckStatusWithTimeout>
 800f592:	4603      	mov	r3, r0
 800f594:	2b00      	cmp	r3, #0
 800f596:	da02      	bge.n	800f59e <SD_read+0x2a>
  {
    return res;
 800f598:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f59c:	e032      	b.n	800f604 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800f59e:	683a      	ldr	r2, [r7, #0]
 800f5a0:	6879      	ldr	r1, [r7, #4]
 800f5a2:	68b8      	ldr	r0, [r7, #8]
 800f5a4:	f7ff fecc 	bl	800f340 <BSP_SD_ReadBlocks_DMA>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800f5ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d124      	bne.n	800f600 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800f5b6:	4b15      	ldr	r3, [pc, #84]	@ (800f60c <SD_read+0x98>)
 800f5b8:	6819      	ldr	r1, [r3, #0]
 800f5ba:	f107 0314 	add.w	r3, r7, #20
 800f5be:	f247 5230 	movw	r2, #30000	@ 0x7530
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f001 ff34 	bl	8011430 <osMessageGet>

    if (event.status == osEventMessage)
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	2b10      	cmp	r3, #16
 800f5cc:	d118      	bne.n	800f600 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800f5ce:	69bb      	ldr	r3, [r7, #24]
 800f5d0:	2b01      	cmp	r3, #1
 800f5d2:	d115      	bne.n	800f600 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800f5d4:	f001 fd72 	bl	80110bc <osKernelSysTick>
 800f5d8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800f5da:	e008      	b.n	800f5ee <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f5dc:	f7ff fee4 	bl	800f3a8 <BSP_SD_GetCardState>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d103      	bne.n	800f5ee <SD_read+0x7a>
              {
                res = RES_OK;
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800f5ec:	e008      	b.n	800f600 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800f5ee:	f001 fd65 	bl	80110bc <osKernelSysTick>
 800f5f2:	4602      	mov	r2, r0
 800f5f4:	6a3b      	ldr	r3, [r7, #32]
 800f5f6:	1ad3      	subs	r3, r2, r3
 800f5f8:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f5fc:	4293      	cmp	r3, r2
 800f5fe:	d9ed      	bls.n	800f5dc <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800f600:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f604:	4618      	mov	r0, r3
 800f606:	3728      	adds	r7, #40	@ 0x28
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}
 800f60c:	20001460 	.word	0x20001460

0800f610 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b08a      	sub	sp, #40	@ 0x28
 800f614:	af00      	add	r7, sp, #0
 800f616:	60b9      	str	r1, [r7, #8]
 800f618:	607a      	str	r2, [r7, #4]
 800f61a:	603b      	str	r3, [r7, #0]
 800f61c:	4603      	mov	r3, r0
 800f61e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f620:	2301      	movs	r3, #1
 800f622:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f626:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f62a:	f7ff ff0d 	bl	800f448 <SD_CheckStatusWithTimeout>
 800f62e:	4603      	mov	r3, r0
 800f630:	2b00      	cmp	r3, #0
 800f632:	da02      	bge.n	800f63a <SD_write+0x2a>
  {
    return res;
 800f634:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f638:	e02e      	b.n	800f698 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f63a:	683a      	ldr	r2, [r7, #0]
 800f63c:	6879      	ldr	r1, [r7, #4]
 800f63e:	68b8      	ldr	r0, [r7, #8]
 800f640:	f7ff fe98 	bl	800f374 <BSP_SD_WriteBlocks_DMA>
 800f644:	4603      	mov	r3, r0
 800f646:	2b00      	cmp	r3, #0
 800f648:	d124      	bne.n	800f694 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800f64a:	4b15      	ldr	r3, [pc, #84]	@ (800f6a0 <SD_write+0x90>)
 800f64c:	6819      	ldr	r1, [r3, #0]
 800f64e:	f107 0314 	add.w	r3, r7, #20
 800f652:	f247 5230 	movw	r2, #30000	@ 0x7530
 800f656:	4618      	mov	r0, r3
 800f658:	f001 feea 	bl	8011430 <osMessageGet>

    if (event.status == osEventMessage)
 800f65c:	697b      	ldr	r3, [r7, #20]
 800f65e:	2b10      	cmp	r3, #16
 800f660:	d118      	bne.n	800f694 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800f662:	69bb      	ldr	r3, [r7, #24]
 800f664:	2b02      	cmp	r3, #2
 800f666:	d115      	bne.n	800f694 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800f668:	f001 fd28 	bl	80110bc <osKernelSysTick>
 800f66c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800f66e:	e008      	b.n	800f682 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f670:	f7ff fe9a 	bl	800f3a8 <BSP_SD_GetCardState>
 800f674:	4603      	mov	r3, r0
 800f676:	2b00      	cmp	r3, #0
 800f678:	d103      	bne.n	800f682 <SD_write+0x72>
          {
            res = RES_OK;
 800f67a:	2300      	movs	r3, #0
 800f67c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800f680:	e008      	b.n	800f694 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800f682:	f001 fd1b 	bl	80110bc <osKernelSysTick>
 800f686:	4602      	mov	r2, r0
 800f688:	6a3b      	ldr	r3, [r7, #32]
 800f68a:	1ad3      	subs	r3, r2, r3
 800f68c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f690:	4293      	cmp	r3, r2
 800f692:	d9ed      	bls.n	800f670 <SD_write+0x60>
    }

  }
#endif

  return res;
 800f694:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f698:	4618      	mov	r0, r3
 800f69a:	3728      	adds	r7, #40	@ 0x28
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}
 800f6a0:	20001460 	.word	0x20001460

0800f6a4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b08c      	sub	sp, #48	@ 0x30
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	603a      	str	r2, [r7, #0]
 800f6ae:	71fb      	strb	r3, [r7, #7]
 800f6b0:	460b      	mov	r3, r1
 800f6b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f6ba:	4b25      	ldr	r3, [pc, #148]	@ (800f750 <SD_ioctl+0xac>)
 800f6bc:	781b      	ldrb	r3, [r3, #0]
 800f6be:	b2db      	uxtb	r3, r3
 800f6c0:	f003 0301 	and.w	r3, r3, #1
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d001      	beq.n	800f6cc <SD_ioctl+0x28>
 800f6c8:	2303      	movs	r3, #3
 800f6ca:	e03c      	b.n	800f746 <SD_ioctl+0xa2>

  switch (cmd)
 800f6cc:	79bb      	ldrb	r3, [r7, #6]
 800f6ce:	2b03      	cmp	r3, #3
 800f6d0:	d834      	bhi.n	800f73c <SD_ioctl+0x98>
 800f6d2:	a201      	add	r2, pc, #4	@ (adr r2, 800f6d8 <SD_ioctl+0x34>)
 800f6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6d8:	0800f6e9 	.word	0x0800f6e9
 800f6dc:	0800f6f1 	.word	0x0800f6f1
 800f6e0:	0800f709 	.word	0x0800f709
 800f6e4:	0800f723 	.word	0x0800f723
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f6ee:	e028      	b.n	800f742 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f6f0:	f107 030c 	add.w	r3, r7, #12
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7ff fe67 	bl	800f3c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f6fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f700:	2300      	movs	r3, #0
 800f702:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f706:	e01c      	b.n	800f742 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f708:	f107 030c 	add.w	r3, r7, #12
 800f70c:	4618      	mov	r0, r3
 800f70e:	f7ff fe5b 	bl	800f3c8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f714:	b29a      	uxth	r2, r3
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f71a:	2300      	movs	r3, #0
 800f71c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f720:	e00f      	b.n	800f742 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f722:	f107 030c 	add.w	r3, r7, #12
 800f726:	4618      	mov	r0, r3
 800f728:	f7ff fe4e 	bl	800f3c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f72c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f72e:	0a5a      	lsrs	r2, r3, #9
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f734:	2300      	movs	r3, #0
 800f736:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f73a:	e002      	b.n	800f742 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f73c:	2304      	movs	r3, #4
 800f73e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800f742:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f746:	4618      	mov	r0, r3
 800f748:	3730      	adds	r7, #48	@ 0x30
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}
 800f74e:	bf00      	nop
 800f750:	20000091 	.word	0x20000091

0800f754 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800f758:	4b04      	ldr	r3, [pc, #16]	@ (800f76c <BSP_SD_ReadCpltCallback+0x18>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	2200      	movs	r2, #0
 800f75e:	2101      	movs	r1, #1
 800f760:	4618      	mov	r0, r3
 800f762:	f001 fe25 	bl	80113b0 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800f766:	bf00      	nop
 800f768:	bd80      	pop	{r7, pc}
 800f76a:	bf00      	nop
 800f76c:	20001460 	.word	0x20001460

0800f770 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b084      	sub	sp, #16
 800f774:	af00      	add	r7, sp, #0
 800f776:	4603      	mov	r3, r0
 800f778:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f77a:	79fb      	ldrb	r3, [r7, #7]
 800f77c:	4a08      	ldr	r2, [pc, #32]	@ (800f7a0 <disk_status+0x30>)
 800f77e:	009b      	lsls	r3, r3, #2
 800f780:	4413      	add	r3, r2
 800f782:	685b      	ldr	r3, [r3, #4]
 800f784:	685b      	ldr	r3, [r3, #4]
 800f786:	79fa      	ldrb	r2, [r7, #7]
 800f788:	4905      	ldr	r1, [pc, #20]	@ (800f7a0 <disk_status+0x30>)
 800f78a:	440a      	add	r2, r1
 800f78c:	7a12      	ldrb	r2, [r2, #8]
 800f78e:	4610      	mov	r0, r2
 800f790:	4798      	blx	r3
 800f792:	4603      	mov	r3, r0
 800f794:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f796:	7bfb      	ldrb	r3, [r7, #15]
}
 800f798:	4618      	mov	r0, r3
 800f79a:	3710      	adds	r7, #16
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd80      	pop	{r7, pc}
 800f7a0:	2000148c 	.word	0x2000148c

0800f7a4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f7b2:	79fb      	ldrb	r3, [r7, #7]
 800f7b4:	4a0d      	ldr	r2, [pc, #52]	@ (800f7ec <disk_initialize+0x48>)
 800f7b6:	5cd3      	ldrb	r3, [r2, r3]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d111      	bne.n	800f7e0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f7bc:	79fb      	ldrb	r3, [r7, #7]
 800f7be:	4a0b      	ldr	r2, [pc, #44]	@ (800f7ec <disk_initialize+0x48>)
 800f7c0:	2101      	movs	r1, #1
 800f7c2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f7c4:	79fb      	ldrb	r3, [r7, #7]
 800f7c6:	4a09      	ldr	r2, [pc, #36]	@ (800f7ec <disk_initialize+0x48>)
 800f7c8:	009b      	lsls	r3, r3, #2
 800f7ca:	4413      	add	r3, r2
 800f7cc:	685b      	ldr	r3, [r3, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	79fa      	ldrb	r2, [r7, #7]
 800f7d2:	4906      	ldr	r1, [pc, #24]	@ (800f7ec <disk_initialize+0x48>)
 800f7d4:	440a      	add	r2, r1
 800f7d6:	7a12      	ldrb	r2, [r2, #8]
 800f7d8:	4610      	mov	r0, r2
 800f7da:	4798      	blx	r3
 800f7dc:	4603      	mov	r3, r0
 800f7de:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	3710      	adds	r7, #16
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}
 800f7ea:	bf00      	nop
 800f7ec:	2000148c 	.word	0x2000148c

0800f7f0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f7f0:	b590      	push	{r4, r7, lr}
 800f7f2:	b087      	sub	sp, #28
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	60b9      	str	r1, [r7, #8]
 800f7f8:	607a      	str	r2, [r7, #4]
 800f7fa:	603b      	str	r3, [r7, #0]
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f800:	7bfb      	ldrb	r3, [r7, #15]
 800f802:	4a0a      	ldr	r2, [pc, #40]	@ (800f82c <disk_read+0x3c>)
 800f804:	009b      	lsls	r3, r3, #2
 800f806:	4413      	add	r3, r2
 800f808:	685b      	ldr	r3, [r3, #4]
 800f80a:	689c      	ldr	r4, [r3, #8]
 800f80c:	7bfb      	ldrb	r3, [r7, #15]
 800f80e:	4a07      	ldr	r2, [pc, #28]	@ (800f82c <disk_read+0x3c>)
 800f810:	4413      	add	r3, r2
 800f812:	7a18      	ldrb	r0, [r3, #8]
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	687a      	ldr	r2, [r7, #4]
 800f818:	68b9      	ldr	r1, [r7, #8]
 800f81a:	47a0      	blx	r4
 800f81c:	4603      	mov	r3, r0
 800f81e:	75fb      	strb	r3, [r7, #23]
  return res;
 800f820:	7dfb      	ldrb	r3, [r7, #23]
}
 800f822:	4618      	mov	r0, r3
 800f824:	371c      	adds	r7, #28
 800f826:	46bd      	mov	sp, r7
 800f828:	bd90      	pop	{r4, r7, pc}
 800f82a:	bf00      	nop
 800f82c:	2000148c 	.word	0x2000148c

0800f830 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f830:	b590      	push	{r4, r7, lr}
 800f832:	b087      	sub	sp, #28
 800f834:	af00      	add	r7, sp, #0
 800f836:	60b9      	str	r1, [r7, #8]
 800f838:	607a      	str	r2, [r7, #4]
 800f83a:	603b      	str	r3, [r7, #0]
 800f83c:	4603      	mov	r3, r0
 800f83e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f840:	7bfb      	ldrb	r3, [r7, #15]
 800f842:	4a0a      	ldr	r2, [pc, #40]	@ (800f86c <disk_write+0x3c>)
 800f844:	009b      	lsls	r3, r3, #2
 800f846:	4413      	add	r3, r2
 800f848:	685b      	ldr	r3, [r3, #4]
 800f84a:	68dc      	ldr	r4, [r3, #12]
 800f84c:	7bfb      	ldrb	r3, [r7, #15]
 800f84e:	4a07      	ldr	r2, [pc, #28]	@ (800f86c <disk_write+0x3c>)
 800f850:	4413      	add	r3, r2
 800f852:	7a18      	ldrb	r0, [r3, #8]
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	68b9      	ldr	r1, [r7, #8]
 800f85a:	47a0      	blx	r4
 800f85c:	4603      	mov	r3, r0
 800f85e:	75fb      	strb	r3, [r7, #23]
  return res;
 800f860:	7dfb      	ldrb	r3, [r7, #23]
}
 800f862:	4618      	mov	r0, r3
 800f864:	371c      	adds	r7, #28
 800f866:	46bd      	mov	sp, r7
 800f868:	bd90      	pop	{r4, r7, pc}
 800f86a:	bf00      	nop
 800f86c:	2000148c 	.word	0x2000148c

0800f870 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f870:	b480      	push	{r7}
 800f872:	b085      	sub	sp, #20
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	3301      	adds	r3, #1
 800f87c:	781b      	ldrb	r3, [r3, #0]
 800f87e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f880:	89fb      	ldrh	r3, [r7, #14]
 800f882:	021b      	lsls	r3, r3, #8
 800f884:	b21a      	sxth	r2, r3
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	781b      	ldrb	r3, [r3, #0]
 800f88a:	b21b      	sxth	r3, r3
 800f88c:	4313      	orrs	r3, r2
 800f88e:	b21b      	sxth	r3, r3
 800f890:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f892:	89fb      	ldrh	r3, [r7, #14]
}
 800f894:	4618      	mov	r0, r3
 800f896:	3714      	adds	r7, #20
 800f898:	46bd      	mov	sp, r7
 800f89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89e:	4770      	bx	lr

0800f8a0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f8a0:	b480      	push	{r7}
 800f8a2:	b085      	sub	sp, #20
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	3303      	adds	r3, #3
 800f8ac:	781b      	ldrb	r3, [r3, #0]
 800f8ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	021b      	lsls	r3, r3, #8
 800f8b4:	687a      	ldr	r2, [r7, #4]
 800f8b6:	3202      	adds	r2, #2
 800f8b8:	7812      	ldrb	r2, [r2, #0]
 800f8ba:	4313      	orrs	r3, r2
 800f8bc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	021b      	lsls	r3, r3, #8
 800f8c2:	687a      	ldr	r2, [r7, #4]
 800f8c4:	3201      	adds	r2, #1
 800f8c6:	7812      	ldrb	r2, [r2, #0]
 800f8c8:	4313      	orrs	r3, r2
 800f8ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	021b      	lsls	r3, r3, #8
 800f8d0:	687a      	ldr	r2, [r7, #4]
 800f8d2:	7812      	ldrb	r2, [r2, #0]
 800f8d4:	4313      	orrs	r3, r2
 800f8d6:	60fb      	str	r3, [r7, #12]
	return rv;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
}
 800f8da:	4618      	mov	r0, r3
 800f8dc:	3714      	adds	r7, #20
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e4:	4770      	bx	lr

0800f8e6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f8e6:	b480      	push	{r7}
 800f8e8:	b083      	sub	sp, #12
 800f8ea:	af00      	add	r7, sp, #0
 800f8ec:	6078      	str	r0, [r7, #4]
 800f8ee:	460b      	mov	r3, r1
 800f8f0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	1c5a      	adds	r2, r3, #1
 800f8f6:	607a      	str	r2, [r7, #4]
 800f8f8:	887a      	ldrh	r2, [r7, #2]
 800f8fa:	b2d2      	uxtb	r2, r2
 800f8fc:	701a      	strb	r2, [r3, #0]
 800f8fe:	887b      	ldrh	r3, [r7, #2]
 800f900:	0a1b      	lsrs	r3, r3, #8
 800f902:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	1c5a      	adds	r2, r3, #1
 800f908:	607a      	str	r2, [r7, #4]
 800f90a:	887a      	ldrh	r2, [r7, #2]
 800f90c:	b2d2      	uxtb	r2, r2
 800f90e:	701a      	strb	r2, [r3, #0]
}
 800f910:	bf00      	nop
 800f912:	370c      	adds	r7, #12
 800f914:	46bd      	mov	sp, r7
 800f916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91a:	4770      	bx	lr

0800f91c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f91c:	b480      	push	{r7}
 800f91e:	b083      	sub	sp, #12
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
 800f924:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	1c5a      	adds	r2, r3, #1
 800f92a:	607a      	str	r2, [r7, #4]
 800f92c:	683a      	ldr	r2, [r7, #0]
 800f92e:	b2d2      	uxtb	r2, r2
 800f930:	701a      	strb	r2, [r3, #0]
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	0a1b      	lsrs	r3, r3, #8
 800f936:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	1c5a      	adds	r2, r3, #1
 800f93c:	607a      	str	r2, [r7, #4]
 800f93e:	683a      	ldr	r2, [r7, #0]
 800f940:	b2d2      	uxtb	r2, r2
 800f942:	701a      	strb	r2, [r3, #0]
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	0a1b      	lsrs	r3, r3, #8
 800f948:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	1c5a      	adds	r2, r3, #1
 800f94e:	607a      	str	r2, [r7, #4]
 800f950:	683a      	ldr	r2, [r7, #0]
 800f952:	b2d2      	uxtb	r2, r2
 800f954:	701a      	strb	r2, [r3, #0]
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	0a1b      	lsrs	r3, r3, #8
 800f95a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	1c5a      	adds	r2, r3, #1
 800f960:	607a      	str	r2, [r7, #4]
 800f962:	683a      	ldr	r2, [r7, #0]
 800f964:	b2d2      	uxtb	r2, r2
 800f966:	701a      	strb	r2, [r3, #0]
}
 800f968:	bf00      	nop
 800f96a:	370c      	adds	r7, #12
 800f96c:	46bd      	mov	sp, r7
 800f96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f972:	4770      	bx	lr

0800f974 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f974:	b480      	push	{r7}
 800f976:	b087      	sub	sp, #28
 800f978:	af00      	add	r7, sp, #0
 800f97a:	60f8      	str	r0, [r7, #12]
 800f97c:	60b9      	str	r1, [r7, #8]
 800f97e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d00d      	beq.n	800f9aa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f98e:	693a      	ldr	r2, [r7, #16]
 800f990:	1c53      	adds	r3, r2, #1
 800f992:	613b      	str	r3, [r7, #16]
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	1c59      	adds	r1, r3, #1
 800f998:	6179      	str	r1, [r7, #20]
 800f99a:	7812      	ldrb	r2, [r2, #0]
 800f99c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	3b01      	subs	r3, #1
 800f9a2:	607b      	str	r3, [r7, #4]
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d1f1      	bne.n	800f98e <mem_cpy+0x1a>
	}
}
 800f9aa:	bf00      	nop
 800f9ac:	371c      	adds	r7, #28
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b4:	4770      	bx	lr

0800f9b6 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800f9b6:	b580      	push	{r7, lr}
 800f9b8:	b082      	sub	sp, #8
 800f9ba:	af00      	add	r7, sp, #0
 800f9bc:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d009      	beq.n	800f9d8 <lock_fs+0x22>
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	68db      	ldr	r3, [r3, #12]
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f001 fb1a 	bl	8011002 <ff_req_grant>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d001      	beq.n	800f9d8 <lock_fs+0x22>
 800f9d4:	2301      	movs	r3, #1
 800f9d6:	e000      	b.n	800f9da <lock_fs+0x24>
 800f9d8:	2300      	movs	r3, #0
}
 800f9da:	4618      	mov	r0, r3
 800f9dc:	3708      	adds	r7, #8
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd80      	pop	{r7, pc}

0800f9e2 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800f9e2:	b580      	push	{r7, lr}
 800f9e4:	b082      	sub	sp, #8
 800f9e6:	af00      	add	r7, sp, #0
 800f9e8:	6078      	str	r0, [r7, #4]
 800f9ea:	460b      	mov	r3, r1
 800f9ec:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d00d      	beq.n	800fa10 <unlock_fs+0x2e>
 800f9f4:	78fb      	ldrb	r3, [r7, #3]
 800f9f6:	2b0c      	cmp	r3, #12
 800f9f8:	d00a      	beq.n	800fa10 <unlock_fs+0x2e>
 800f9fa:	78fb      	ldrb	r3, [r7, #3]
 800f9fc:	2b0b      	cmp	r3, #11
 800f9fe:	d007      	beq.n	800fa10 <unlock_fs+0x2e>
 800fa00:	78fb      	ldrb	r3, [r7, #3]
 800fa02:	2b0f      	cmp	r3, #15
 800fa04:	d004      	beq.n	800fa10 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	68db      	ldr	r3, [r3, #12]
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f001 fb0e 	bl	801102c <ff_rel_grant>
	}
}
 800fa10:	bf00      	nop
 800fa12:	3708      	adds	r7, #8
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}

0800fa18 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fa18:	b480      	push	{r7}
 800fa1a:	b085      	sub	sp, #20
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fa20:	2300      	movs	r3, #0
 800fa22:	60fb      	str	r3, [r7, #12]
 800fa24:	e010      	b.n	800fa48 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fa26:	4a0d      	ldr	r2, [pc, #52]	@ (800fa5c <clear_lock+0x44>)
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	011b      	lsls	r3, r3, #4
 800fa2c:	4413      	add	r3, r2
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	687a      	ldr	r2, [r7, #4]
 800fa32:	429a      	cmp	r2, r3
 800fa34:	d105      	bne.n	800fa42 <clear_lock+0x2a>
 800fa36:	4a09      	ldr	r2, [pc, #36]	@ (800fa5c <clear_lock+0x44>)
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	011b      	lsls	r3, r3, #4
 800fa3c:	4413      	add	r3, r2
 800fa3e:	2200      	movs	r2, #0
 800fa40:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	3301      	adds	r3, #1
 800fa46:	60fb      	str	r3, [r7, #12]
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	2b01      	cmp	r3, #1
 800fa4c:	d9eb      	bls.n	800fa26 <clear_lock+0xe>
	}
}
 800fa4e:	bf00      	nop
 800fa50:	bf00      	nop
 800fa52:	3714      	adds	r7, #20
 800fa54:	46bd      	mov	sp, r7
 800fa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5a:	4770      	bx	lr
 800fa5c:	2000146c 	.word	0x2000146c

0800fa60 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b086      	sub	sp, #24
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fa68:	2300      	movs	r3, #0
 800fa6a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	78db      	ldrb	r3, [r3, #3]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d034      	beq.n	800fade <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa78:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	7858      	ldrb	r0, [r3, #1]
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800fa84:	2301      	movs	r3, #1
 800fa86:	697a      	ldr	r2, [r7, #20]
 800fa88:	f7ff fed2 	bl	800f830 <disk_write>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d002      	beq.n	800fa98 <sync_window+0x38>
			res = FR_DISK_ERR;
 800fa92:	2301      	movs	r3, #1
 800fa94:	73fb      	strb	r3, [r7, #15]
 800fa96:	e022      	b.n	800fade <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800faa2:	697a      	ldr	r2, [r7, #20]
 800faa4:	1ad2      	subs	r2, r2, r3
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	69db      	ldr	r3, [r3, #28]
 800faaa:	429a      	cmp	r2, r3
 800faac:	d217      	bcs.n	800fade <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	789b      	ldrb	r3, [r3, #2]
 800fab2:	613b      	str	r3, [r7, #16]
 800fab4:	e010      	b.n	800fad8 <sync_window+0x78>
					wsect += fs->fsize;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	69db      	ldr	r3, [r3, #28]
 800faba:	697a      	ldr	r2, [r7, #20]
 800fabc:	4413      	add	r3, r2
 800fabe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	7858      	ldrb	r0, [r3, #1]
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800faca:	2301      	movs	r3, #1
 800facc:	697a      	ldr	r2, [r7, #20]
 800face:	f7ff feaf 	bl	800f830 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	3b01      	subs	r3, #1
 800fad6:	613b      	str	r3, [r7, #16]
 800fad8:	693b      	ldr	r3, [r7, #16]
 800fada:	2b01      	cmp	r3, #1
 800fadc:	d8eb      	bhi.n	800fab6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fade:	7bfb      	ldrb	r3, [r7, #15]
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3718      	adds	r7, #24
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}

0800fae8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b084      	sub	sp, #16
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
 800faf0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800faf2:	2300      	movs	r3, #0
 800faf4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fafa:	683a      	ldr	r2, [r7, #0]
 800fafc:	429a      	cmp	r2, r3
 800fafe:	d01b      	beq.n	800fb38 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fb00:	6878      	ldr	r0, [r7, #4]
 800fb02:	f7ff ffad 	bl	800fa60 <sync_window>
 800fb06:	4603      	mov	r3, r0
 800fb08:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fb0a:	7bfb      	ldrb	r3, [r7, #15]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d113      	bne.n	800fb38 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	7858      	ldrb	r0, [r3, #1]
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	683a      	ldr	r2, [r7, #0]
 800fb1e:	f7ff fe67 	bl	800f7f0 <disk_read>
 800fb22:	4603      	mov	r3, r0
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d004      	beq.n	800fb32 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fb28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fb2c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fb2e:	2301      	movs	r3, #1
 800fb30:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	683a      	ldr	r2, [r7, #0]
 800fb36:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800fb38:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	3710      	adds	r7, #16
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	bd80      	pop	{r7, pc}

0800fb42 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fb42:	b480      	push	{r7}
 800fb44:	b083      	sub	sp, #12
 800fb46:	af00      	add	r7, sp, #0
 800fb48:	6078      	str	r0, [r7, #4]
 800fb4a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	3b02      	subs	r3, #2
 800fb50:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	699b      	ldr	r3, [r3, #24]
 800fb56:	3b02      	subs	r3, #2
 800fb58:	683a      	ldr	r2, [r7, #0]
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d301      	bcc.n	800fb62 <clust2sect+0x20>
 800fb5e:	2300      	movs	r3, #0
 800fb60:	e008      	b.n	800fb74 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	895b      	ldrh	r3, [r3, #10]
 800fb66:	461a      	mov	r2, r3
 800fb68:	683b      	ldr	r3, [r7, #0]
 800fb6a:	fb03 f202 	mul.w	r2, r3, r2
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb72:	4413      	add	r3, r2
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	370c      	adds	r7, #12
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7e:	4770      	bx	lr

0800fb80 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b086      	sub	sp, #24
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	2b01      	cmp	r3, #1
 800fb94:	d904      	bls.n	800fba0 <get_fat+0x20>
 800fb96:	693b      	ldr	r3, [r7, #16]
 800fb98:	699b      	ldr	r3, [r3, #24]
 800fb9a:	683a      	ldr	r2, [r7, #0]
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	d302      	bcc.n	800fba6 <get_fat+0x26>
		val = 1;	/* Internal error */
 800fba0:	2301      	movs	r3, #1
 800fba2:	617b      	str	r3, [r7, #20]
 800fba4:	e08e      	b.n	800fcc4 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fba6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fbaa:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	781b      	ldrb	r3, [r3, #0]
 800fbb0:	2b03      	cmp	r3, #3
 800fbb2:	d061      	beq.n	800fc78 <get_fat+0xf8>
 800fbb4:	2b03      	cmp	r3, #3
 800fbb6:	dc7b      	bgt.n	800fcb0 <get_fat+0x130>
 800fbb8:	2b01      	cmp	r3, #1
 800fbba:	d002      	beq.n	800fbc2 <get_fat+0x42>
 800fbbc:	2b02      	cmp	r3, #2
 800fbbe:	d041      	beq.n	800fc44 <get_fat+0xc4>
 800fbc0:	e076      	b.n	800fcb0 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	60fb      	str	r3, [r7, #12]
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	085b      	lsrs	r3, r3, #1
 800fbca:	68fa      	ldr	r2, [r7, #12]
 800fbcc:	4413      	add	r3, r2
 800fbce:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	0a5b      	lsrs	r3, r3, #9
 800fbd8:	4413      	add	r3, r2
 800fbda:	4619      	mov	r1, r3
 800fbdc:	6938      	ldr	r0, [r7, #16]
 800fbde:	f7ff ff83 	bl	800fae8 <move_window>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d166      	bne.n	800fcb6 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	1c5a      	adds	r2, r3, #1
 800fbec:	60fa      	str	r2, [r7, #12]
 800fbee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbf2:	693a      	ldr	r2, [r7, #16]
 800fbf4:	4413      	add	r3, r2
 800fbf6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fbfa:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fbfc:	693b      	ldr	r3, [r7, #16]
 800fbfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	0a5b      	lsrs	r3, r3, #9
 800fc04:	4413      	add	r3, r2
 800fc06:	4619      	mov	r1, r3
 800fc08:	6938      	ldr	r0, [r7, #16]
 800fc0a:	f7ff ff6d 	bl	800fae8 <move_window>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d152      	bne.n	800fcba <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc1a:	693a      	ldr	r2, [r7, #16]
 800fc1c:	4413      	add	r3, r2
 800fc1e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fc22:	021b      	lsls	r3, r3, #8
 800fc24:	68ba      	ldr	r2, [r7, #8]
 800fc26:	4313      	orrs	r3, r2
 800fc28:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	f003 0301 	and.w	r3, r3, #1
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d002      	beq.n	800fc3a <get_fat+0xba>
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	091b      	lsrs	r3, r3, #4
 800fc38:	e002      	b.n	800fc40 <get_fat+0xc0>
 800fc3a:	68bb      	ldr	r3, [r7, #8]
 800fc3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fc40:	617b      	str	r3, [r7, #20]
			break;
 800fc42:	e03f      	b.n	800fcc4 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	0a1b      	lsrs	r3, r3, #8
 800fc4c:	4413      	add	r3, r2
 800fc4e:	4619      	mov	r1, r3
 800fc50:	6938      	ldr	r0, [r7, #16]
 800fc52:	f7ff ff49 	bl	800fae8 <move_window>
 800fc56:	4603      	mov	r3, r0
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d130      	bne.n	800fcbe <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fc5c:	693b      	ldr	r3, [r7, #16]
 800fc5e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	005b      	lsls	r3, r3, #1
 800fc66:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800fc6a:	4413      	add	r3, r2
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f7ff fdff 	bl	800f870 <ld_word>
 800fc72:	4603      	mov	r3, r0
 800fc74:	617b      	str	r3, [r7, #20]
			break;
 800fc76:	e025      	b.n	800fcc4 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fc78:	693b      	ldr	r3, [r7, #16]
 800fc7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc7c:	683b      	ldr	r3, [r7, #0]
 800fc7e:	09db      	lsrs	r3, r3, #7
 800fc80:	4413      	add	r3, r2
 800fc82:	4619      	mov	r1, r3
 800fc84:	6938      	ldr	r0, [r7, #16]
 800fc86:	f7ff ff2f 	bl	800fae8 <move_window>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d118      	bne.n	800fcc2 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fc90:	693b      	ldr	r3, [r7, #16]
 800fc92:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	009b      	lsls	r3, r3, #2
 800fc9a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fc9e:	4413      	add	r3, r2
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7ff fdfd 	bl	800f8a0 <ld_dword>
 800fca6:	4603      	mov	r3, r0
 800fca8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800fcac:	617b      	str	r3, [r7, #20]
			break;
 800fcae:	e009      	b.n	800fcc4 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	617b      	str	r3, [r7, #20]
 800fcb4:	e006      	b.n	800fcc4 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fcb6:	bf00      	nop
 800fcb8:	e004      	b.n	800fcc4 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fcba:	bf00      	nop
 800fcbc:	e002      	b.n	800fcc4 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fcbe:	bf00      	nop
 800fcc0:	e000      	b.n	800fcc4 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fcc2:	bf00      	nop
		}
	}

	return val;
 800fcc4:	697b      	ldr	r3, [r7, #20]
}
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	3718      	adds	r7, #24
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}

0800fcce <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fcce:	b590      	push	{r4, r7, lr}
 800fcd0:	b089      	sub	sp, #36	@ 0x24
 800fcd2:	af00      	add	r7, sp, #0
 800fcd4:	60f8      	str	r0, [r7, #12]
 800fcd6:	60b9      	str	r1, [r7, #8]
 800fcd8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fcda:	2302      	movs	r3, #2
 800fcdc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	2b01      	cmp	r3, #1
 800fce2:	f240 80d9 	bls.w	800fe98 <put_fat+0x1ca>
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	699b      	ldr	r3, [r3, #24]
 800fcea:	68ba      	ldr	r2, [r7, #8]
 800fcec:	429a      	cmp	r2, r3
 800fcee:	f080 80d3 	bcs.w	800fe98 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	781b      	ldrb	r3, [r3, #0]
 800fcf6:	2b03      	cmp	r3, #3
 800fcf8:	f000 8096 	beq.w	800fe28 <put_fat+0x15a>
 800fcfc:	2b03      	cmp	r3, #3
 800fcfe:	f300 80cb 	bgt.w	800fe98 <put_fat+0x1ca>
 800fd02:	2b01      	cmp	r3, #1
 800fd04:	d002      	beq.n	800fd0c <put_fat+0x3e>
 800fd06:	2b02      	cmp	r3, #2
 800fd08:	d06e      	beq.n	800fde8 <put_fat+0x11a>
 800fd0a:	e0c5      	b.n	800fe98 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fd0c:	68bb      	ldr	r3, [r7, #8]
 800fd0e:	61bb      	str	r3, [r7, #24]
 800fd10:	69bb      	ldr	r3, [r7, #24]
 800fd12:	085b      	lsrs	r3, r3, #1
 800fd14:	69ba      	ldr	r2, [r7, #24]
 800fd16:	4413      	add	r3, r2
 800fd18:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd1e:	69bb      	ldr	r3, [r7, #24]
 800fd20:	0a5b      	lsrs	r3, r3, #9
 800fd22:	4413      	add	r3, r2
 800fd24:	4619      	mov	r1, r3
 800fd26:	68f8      	ldr	r0, [r7, #12]
 800fd28:	f7ff fede 	bl	800fae8 <move_window>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fd30:	7ffb      	ldrb	r3, [r7, #31]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	f040 80a9 	bne.w	800fe8a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fd3e:	69bb      	ldr	r3, [r7, #24]
 800fd40:	1c59      	adds	r1, r3, #1
 800fd42:	61b9      	str	r1, [r7, #24]
 800fd44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd48:	4413      	add	r3, r2
 800fd4a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	f003 0301 	and.w	r3, r3, #1
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d00d      	beq.n	800fd72 <put_fat+0xa4>
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	781b      	ldrb	r3, [r3, #0]
 800fd5a:	b25b      	sxtb	r3, r3
 800fd5c:	f003 030f 	and.w	r3, r3, #15
 800fd60:	b25a      	sxtb	r2, r3
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	b2db      	uxtb	r3, r3
 800fd66:	011b      	lsls	r3, r3, #4
 800fd68:	b25b      	sxtb	r3, r3
 800fd6a:	4313      	orrs	r3, r2
 800fd6c:	b25b      	sxtb	r3, r3
 800fd6e:	b2db      	uxtb	r3, r3
 800fd70:	e001      	b.n	800fd76 <put_fat+0xa8>
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	b2db      	uxtb	r3, r3
 800fd76:	697a      	ldr	r2, [r7, #20]
 800fd78:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	2201      	movs	r2, #1
 800fd7e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd84:	69bb      	ldr	r3, [r7, #24]
 800fd86:	0a5b      	lsrs	r3, r3, #9
 800fd88:	4413      	add	r3, r2
 800fd8a:	4619      	mov	r1, r3
 800fd8c:	68f8      	ldr	r0, [r7, #12]
 800fd8e:	f7ff feab 	bl	800fae8 <move_window>
 800fd92:	4603      	mov	r3, r0
 800fd94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fd96:	7ffb      	ldrb	r3, [r7, #31]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d178      	bne.n	800fe8e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fda2:	69bb      	ldr	r3, [r7, #24]
 800fda4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fda8:	4413      	add	r3, r2
 800fdaa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	f003 0301 	and.w	r3, r3, #1
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d003      	beq.n	800fdbe <put_fat+0xf0>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	091b      	lsrs	r3, r3, #4
 800fdba:	b2db      	uxtb	r3, r3
 800fdbc:	e00e      	b.n	800fddc <put_fat+0x10e>
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	781b      	ldrb	r3, [r3, #0]
 800fdc2:	b25b      	sxtb	r3, r3
 800fdc4:	f023 030f 	bic.w	r3, r3, #15
 800fdc8:	b25a      	sxtb	r2, r3
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	0a1b      	lsrs	r3, r3, #8
 800fdce:	b25b      	sxtb	r3, r3
 800fdd0:	f003 030f 	and.w	r3, r3, #15
 800fdd4:	b25b      	sxtb	r3, r3
 800fdd6:	4313      	orrs	r3, r2
 800fdd8:	b25b      	sxtb	r3, r3
 800fdda:	b2db      	uxtb	r3, r3
 800fddc:	697a      	ldr	r2, [r7, #20]
 800fdde:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	2201      	movs	r2, #1
 800fde4:	70da      	strb	r2, [r3, #3]
			break;
 800fde6:	e057      	b.n	800fe98 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	0a1b      	lsrs	r3, r3, #8
 800fdf0:	4413      	add	r3, r2
 800fdf2:	4619      	mov	r1, r3
 800fdf4:	68f8      	ldr	r0, [r7, #12]
 800fdf6:	f7ff fe77 	bl	800fae8 <move_window>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fdfe:	7ffb      	ldrb	r3, [r7, #31]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d146      	bne.n	800fe92 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fe0a:	68bb      	ldr	r3, [r7, #8]
 800fe0c:	005b      	lsls	r3, r3, #1
 800fe0e:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800fe12:	4413      	add	r3, r2
 800fe14:	687a      	ldr	r2, [r7, #4]
 800fe16:	b292      	uxth	r2, r2
 800fe18:	4611      	mov	r1, r2
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f7ff fd63 	bl	800f8e6 <st_word>
			fs->wflag = 1;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	2201      	movs	r2, #1
 800fe24:	70da      	strb	r2, [r3, #3]
			break;
 800fe26:	e037      	b.n	800fe98 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	09db      	lsrs	r3, r3, #7
 800fe30:	4413      	add	r3, r2
 800fe32:	4619      	mov	r1, r3
 800fe34:	68f8      	ldr	r0, [r7, #12]
 800fe36:	f7ff fe57 	bl	800fae8 <move_window>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fe3e:	7ffb      	ldrb	r3, [r7, #31]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d128      	bne.n	800fe96 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	009b      	lsls	r3, r3, #2
 800fe54:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fe58:	4413      	add	r3, r2
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f7ff fd20 	bl	800f8a0 <ld_dword>
 800fe60:	4603      	mov	r3, r0
 800fe62:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800fe66:	4323      	orrs	r3, r4
 800fe68:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	009b      	lsls	r3, r3, #2
 800fe74:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fe78:	4413      	add	r3, r2
 800fe7a:	6879      	ldr	r1, [r7, #4]
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f7ff fd4d 	bl	800f91c <st_dword>
			fs->wflag = 1;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	2201      	movs	r2, #1
 800fe86:	70da      	strb	r2, [r3, #3]
			break;
 800fe88:	e006      	b.n	800fe98 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fe8a:	bf00      	nop
 800fe8c:	e004      	b.n	800fe98 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fe8e:	bf00      	nop
 800fe90:	e002      	b.n	800fe98 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fe92:	bf00      	nop
 800fe94:	e000      	b.n	800fe98 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fe96:	bf00      	nop
		}
	}
	return res;
 800fe98:	7ffb      	ldrb	r3, [r7, #31]
}
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	3724      	adds	r7, #36	@ 0x24
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd90      	pop	{r4, r7, pc}

0800fea2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fea2:	b580      	push	{r7, lr}
 800fea4:	b088      	sub	sp, #32
 800fea6:	af00      	add	r7, sp, #0
 800fea8:	6078      	str	r0, [r7, #4]
 800feaa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d10d      	bne.n	800fed4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800feb8:	693b      	ldr	r3, [r7, #16]
 800feba:	691b      	ldr	r3, [r3, #16]
 800febc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800febe:	69bb      	ldr	r3, [r7, #24]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d004      	beq.n	800fece <create_chain+0x2c>
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	699b      	ldr	r3, [r3, #24]
 800fec8:	69ba      	ldr	r2, [r7, #24]
 800feca:	429a      	cmp	r2, r3
 800fecc:	d31b      	bcc.n	800ff06 <create_chain+0x64>
 800fece:	2301      	movs	r3, #1
 800fed0:	61bb      	str	r3, [r7, #24]
 800fed2:	e018      	b.n	800ff06 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fed4:	6839      	ldr	r1, [r7, #0]
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f7ff fe52 	bl	800fb80 <get_fat>
 800fedc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	2b01      	cmp	r3, #1
 800fee2:	d801      	bhi.n	800fee8 <create_chain+0x46>
 800fee4:	2301      	movs	r3, #1
 800fee6:	e070      	b.n	800ffca <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800feee:	d101      	bne.n	800fef4 <create_chain+0x52>
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	e06a      	b.n	800ffca <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fef4:	693b      	ldr	r3, [r7, #16]
 800fef6:	699b      	ldr	r3, [r3, #24]
 800fef8:	68fa      	ldr	r2, [r7, #12]
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d201      	bcs.n	800ff02 <create_chain+0x60>
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	e063      	b.n	800ffca <create_chain+0x128>
		scl = clst;
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ff06:	69bb      	ldr	r3, [r7, #24]
 800ff08:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ff0a:	69fb      	ldr	r3, [r7, #28]
 800ff0c:	3301      	adds	r3, #1
 800ff0e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	699b      	ldr	r3, [r3, #24]
 800ff14:	69fa      	ldr	r2, [r7, #28]
 800ff16:	429a      	cmp	r2, r3
 800ff18:	d307      	bcc.n	800ff2a <create_chain+0x88>
				ncl = 2;
 800ff1a:	2302      	movs	r3, #2
 800ff1c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ff1e:	69fa      	ldr	r2, [r7, #28]
 800ff20:	69bb      	ldr	r3, [r7, #24]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d901      	bls.n	800ff2a <create_chain+0x88>
 800ff26:	2300      	movs	r3, #0
 800ff28:	e04f      	b.n	800ffca <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ff2a:	69f9      	ldr	r1, [r7, #28]
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f7ff fe27 	bl	800fb80 <get_fat>
 800ff32:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d00e      	beq.n	800ff58 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	2b01      	cmp	r3, #1
 800ff3e:	d003      	beq.n	800ff48 <create_chain+0xa6>
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ff46:	d101      	bne.n	800ff4c <create_chain+0xaa>
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	e03e      	b.n	800ffca <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ff4c:	69fa      	ldr	r2, [r7, #28]
 800ff4e:	69bb      	ldr	r3, [r7, #24]
 800ff50:	429a      	cmp	r2, r3
 800ff52:	d1da      	bne.n	800ff0a <create_chain+0x68>
 800ff54:	2300      	movs	r3, #0
 800ff56:	e038      	b.n	800ffca <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ff58:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ff5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ff5e:	69f9      	ldr	r1, [r7, #28]
 800ff60:	6938      	ldr	r0, [r7, #16]
 800ff62:	f7ff feb4 	bl	800fcce <put_fat>
 800ff66:	4603      	mov	r3, r0
 800ff68:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ff6a:	7dfb      	ldrb	r3, [r7, #23]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d109      	bne.n	800ff84 <create_chain+0xe2>
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d006      	beq.n	800ff84 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ff76:	69fa      	ldr	r2, [r7, #28]
 800ff78:	6839      	ldr	r1, [r7, #0]
 800ff7a:	6938      	ldr	r0, [r7, #16]
 800ff7c:	f7ff fea7 	bl	800fcce <put_fat>
 800ff80:	4603      	mov	r3, r0
 800ff82:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ff84:	7dfb      	ldrb	r3, [r7, #23]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d116      	bne.n	800ffb8 <create_chain+0x116>
		fs->last_clst = ncl;
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	69fa      	ldr	r2, [r7, #28]
 800ff8e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ff90:	693b      	ldr	r3, [r7, #16]
 800ff92:	695a      	ldr	r2, [r3, #20]
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	699b      	ldr	r3, [r3, #24]
 800ff98:	3b02      	subs	r3, #2
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d804      	bhi.n	800ffa8 <create_chain+0x106>
 800ff9e:	693b      	ldr	r3, [r7, #16]
 800ffa0:	695b      	ldr	r3, [r3, #20]
 800ffa2:	1e5a      	subs	r2, r3, #1
 800ffa4:	693b      	ldr	r3, [r7, #16]
 800ffa6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ffa8:	693b      	ldr	r3, [r7, #16]
 800ffaa:	791b      	ldrb	r3, [r3, #4]
 800ffac:	f043 0301 	orr.w	r3, r3, #1
 800ffb0:	b2da      	uxtb	r2, r3
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	711a      	strb	r2, [r3, #4]
 800ffb6:	e007      	b.n	800ffc8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ffb8:	7dfb      	ldrb	r3, [r7, #23]
 800ffba:	2b01      	cmp	r3, #1
 800ffbc:	d102      	bne.n	800ffc4 <create_chain+0x122>
 800ffbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ffc2:	e000      	b.n	800ffc6 <create_chain+0x124>
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ffc8:	69fb      	ldr	r3, [r7, #28]
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	3720      	adds	r7, #32
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}

0800ffd2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ffd2:	b480      	push	{r7}
 800ffd4:	b087      	sub	sp, #28
 800ffd6:	af00      	add	r7, sp, #0
 800ffd8:	6078      	str	r0, [r7, #4]
 800ffda:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffe6:	3304      	adds	r3, #4
 800ffe8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	0a5b      	lsrs	r3, r3, #9
 800ffee:	68fa      	ldr	r2, [r7, #12]
 800fff0:	8952      	ldrh	r2, [r2, #10]
 800fff2:	fbb3 f3f2 	udiv	r3, r3, r2
 800fff6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	1d1a      	adds	r2, r3, #4
 800fffc:	613a      	str	r2, [r7, #16]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d101      	bne.n	801000c <clmt_clust+0x3a>
 8010008:	2300      	movs	r3, #0
 801000a:	e010      	b.n	801002e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801000c:	697a      	ldr	r2, [r7, #20]
 801000e:	68bb      	ldr	r3, [r7, #8]
 8010010:	429a      	cmp	r2, r3
 8010012:	d307      	bcc.n	8010024 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8010014:	697a      	ldr	r2, [r7, #20]
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	1ad3      	subs	r3, r2, r3
 801001a:	617b      	str	r3, [r7, #20]
 801001c:	693b      	ldr	r3, [r7, #16]
 801001e:	3304      	adds	r3, #4
 8010020:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010022:	e7e9      	b.n	800fff8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010024:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010026:	693b      	ldr	r3, [r7, #16]
 8010028:	681a      	ldr	r2, [r3, #0]
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	4413      	add	r3, r2
}
 801002e:	4618      	mov	r0, r3
 8010030:	371c      	adds	r7, #28
 8010032:	46bd      	mov	sp, r7
 8010034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010038:	4770      	bx	lr

0801003a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801003a:	b480      	push	{r7}
 801003c:	b087      	sub	sp, #28
 801003e:	af00      	add	r7, sp, #0
 8010040:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010042:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010046:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d031      	beq.n	80100b4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	617b      	str	r3, [r7, #20]
 8010056:	e002      	b.n	801005e <get_ldnumber+0x24>
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	3301      	adds	r3, #1
 801005c:	617b      	str	r3, [r7, #20]
 801005e:	697b      	ldr	r3, [r7, #20]
 8010060:	781b      	ldrb	r3, [r3, #0]
 8010062:	2b20      	cmp	r3, #32
 8010064:	d903      	bls.n	801006e <get_ldnumber+0x34>
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	781b      	ldrb	r3, [r3, #0]
 801006a:	2b3a      	cmp	r3, #58	@ 0x3a
 801006c:	d1f4      	bne.n	8010058 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801006e:	697b      	ldr	r3, [r7, #20]
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	2b3a      	cmp	r3, #58	@ 0x3a
 8010074:	d11c      	bne.n	80100b0 <get_ldnumber+0x76>
			tp = *path;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	1c5a      	adds	r2, r3, #1
 8010080:	60fa      	str	r2, [r7, #12]
 8010082:	781b      	ldrb	r3, [r3, #0]
 8010084:	3b30      	subs	r3, #48	@ 0x30
 8010086:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	2b09      	cmp	r3, #9
 801008c:	d80e      	bhi.n	80100ac <get_ldnumber+0x72>
 801008e:	68fa      	ldr	r2, [r7, #12]
 8010090:	697b      	ldr	r3, [r7, #20]
 8010092:	429a      	cmp	r2, r3
 8010094:	d10a      	bne.n	80100ac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d107      	bne.n	80100ac <get_ldnumber+0x72>
					vol = (int)i;
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80100a0:	697b      	ldr	r3, [r7, #20]
 80100a2:	3301      	adds	r3, #1
 80100a4:	617b      	str	r3, [r7, #20]
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	697a      	ldr	r2, [r7, #20]
 80100aa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80100ac:	693b      	ldr	r3, [r7, #16]
 80100ae:	e002      	b.n	80100b6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80100b0:	2300      	movs	r3, #0
 80100b2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80100b4:	693b      	ldr	r3, [r7, #16]
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	371c      	adds	r7, #28
 80100ba:	46bd      	mov	sp, r7
 80100bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c0:	4770      	bx	lr
	...

080100c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b082      	sub	sp, #8
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
 80100cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	2200      	movs	r2, #0
 80100d2:	70da      	strb	r2, [r3, #3]
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80100da:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80100dc:	6839      	ldr	r1, [r7, #0]
 80100de:	6878      	ldr	r0, [r7, #4]
 80100e0:	f7ff fd02 	bl	800fae8 <move_window>
 80100e4:	4603      	mov	r3, r0
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d001      	beq.n	80100ee <check_fs+0x2a>
 80100ea:	2304      	movs	r3, #4
 80100ec:	e038      	b.n	8010160 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	3334      	adds	r3, #52	@ 0x34
 80100f2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80100f6:	4618      	mov	r0, r3
 80100f8:	f7ff fbba 	bl	800f870 <ld_word>
 80100fc:	4603      	mov	r3, r0
 80100fe:	461a      	mov	r2, r3
 8010100:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010104:	429a      	cmp	r2, r3
 8010106:	d001      	beq.n	801010c <check_fs+0x48>
 8010108:	2303      	movs	r3, #3
 801010a:	e029      	b.n	8010160 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010112:	2be9      	cmp	r3, #233	@ 0xe9
 8010114:	d009      	beq.n	801012a <check_fs+0x66>
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801011c:	2beb      	cmp	r3, #235	@ 0xeb
 801011e:	d11e      	bne.n	801015e <check_fs+0x9a>
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8010126:	2b90      	cmp	r3, #144	@ 0x90
 8010128:	d119      	bne.n	801015e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	3334      	adds	r3, #52	@ 0x34
 801012e:	3336      	adds	r3, #54	@ 0x36
 8010130:	4618      	mov	r0, r3
 8010132:	f7ff fbb5 	bl	800f8a0 <ld_dword>
 8010136:	4603      	mov	r3, r0
 8010138:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801013c:	4a0a      	ldr	r2, [pc, #40]	@ (8010168 <check_fs+0xa4>)
 801013e:	4293      	cmp	r3, r2
 8010140:	d101      	bne.n	8010146 <check_fs+0x82>
 8010142:	2300      	movs	r3, #0
 8010144:	e00c      	b.n	8010160 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	3334      	adds	r3, #52	@ 0x34
 801014a:	3352      	adds	r3, #82	@ 0x52
 801014c:	4618      	mov	r0, r3
 801014e:	f7ff fba7 	bl	800f8a0 <ld_dword>
 8010152:	4603      	mov	r3, r0
 8010154:	4a05      	ldr	r2, [pc, #20]	@ (801016c <check_fs+0xa8>)
 8010156:	4293      	cmp	r3, r2
 8010158:	d101      	bne.n	801015e <check_fs+0x9a>
 801015a:	2300      	movs	r3, #0
 801015c:	e000      	b.n	8010160 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801015e:	2302      	movs	r3, #2
}
 8010160:	4618      	mov	r0, r3
 8010162:	3708      	adds	r7, #8
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}
 8010168:	00544146 	.word	0x00544146
 801016c:	33544146 	.word	0x33544146

08010170 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b096      	sub	sp, #88	@ 0x58
 8010174:	af00      	add	r7, sp, #0
 8010176:	60f8      	str	r0, [r7, #12]
 8010178:	60b9      	str	r1, [r7, #8]
 801017a:	4613      	mov	r3, r2
 801017c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	2200      	movs	r2, #0
 8010182:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010184:	68f8      	ldr	r0, [r7, #12]
 8010186:	f7ff ff58 	bl	801003a <get_ldnumber>
 801018a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801018c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801018e:	2b00      	cmp	r3, #0
 8010190:	da01      	bge.n	8010196 <find_volume+0x26>
 8010192:	230b      	movs	r3, #11
 8010194:	e235      	b.n	8010602 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010196:	4aa5      	ldr	r2, [pc, #660]	@ (801042c <find_volume+0x2bc>)
 8010198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801019a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801019e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80101a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d101      	bne.n	80101aa <find_volume+0x3a>
 80101a6:	230c      	movs	r3, #12
 80101a8:	e22b      	b.n	8010602 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 80101aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80101ac:	f7ff fc03 	bl	800f9b6 <lock_fs>
 80101b0:	4603      	mov	r3, r0
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d101      	bne.n	80101ba <find_volume+0x4a>
 80101b6:	230f      	movs	r3, #15
 80101b8:	e223      	b.n	8010602 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 80101ba:	68bb      	ldr	r3, [r7, #8]
 80101bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80101be:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80101c0:	79fb      	ldrb	r3, [r7, #7]
 80101c2:	f023 0301 	bic.w	r3, r3, #1
 80101c6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80101c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101ca:	781b      	ldrb	r3, [r3, #0]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d01a      	beq.n	8010206 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80101d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101d2:	785b      	ldrb	r3, [r3, #1]
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7ff facb 	bl	800f770 <disk_status>
 80101da:	4603      	mov	r3, r0
 80101dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80101e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80101e4:	f003 0301 	and.w	r3, r3, #1
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d10c      	bne.n	8010206 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80101ec:	79fb      	ldrb	r3, [r7, #7]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d007      	beq.n	8010202 <find_volume+0x92>
 80101f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80101f6:	f003 0304 	and.w	r3, r3, #4
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d001      	beq.n	8010202 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80101fe:	230a      	movs	r3, #10
 8010200:	e1ff      	b.n	8010602 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8010202:	2300      	movs	r3, #0
 8010204:	e1fd      	b.n	8010602 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010208:	2200      	movs	r2, #0
 801020a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801020c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801020e:	b2da      	uxtb	r2, r3
 8010210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010212:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010216:	785b      	ldrb	r3, [r3, #1]
 8010218:	4618      	mov	r0, r3
 801021a:	f7ff fac3 	bl	800f7a4 <disk_initialize>
 801021e:	4603      	mov	r3, r0
 8010220:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010224:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010228:	f003 0301 	and.w	r3, r3, #1
 801022c:	2b00      	cmp	r3, #0
 801022e:	d001      	beq.n	8010234 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010230:	2303      	movs	r3, #3
 8010232:	e1e6      	b.n	8010602 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010234:	79fb      	ldrb	r3, [r7, #7]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d007      	beq.n	801024a <find_volume+0xda>
 801023a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801023e:	f003 0304 	and.w	r3, r3, #4
 8010242:	2b00      	cmp	r3, #0
 8010244:	d001      	beq.n	801024a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8010246:	230a      	movs	r3, #10
 8010248:	e1db      	b.n	8010602 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801024a:	2300      	movs	r3, #0
 801024c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801024e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010250:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010252:	f7ff ff37 	bl	80100c4 <check_fs>
 8010256:	4603      	mov	r3, r0
 8010258:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801025c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010260:	2b02      	cmp	r3, #2
 8010262:	d149      	bne.n	80102f8 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010264:	2300      	movs	r3, #0
 8010266:	643b      	str	r3, [r7, #64]	@ 0x40
 8010268:	e01e      	b.n	80102a8 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801026a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801026c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010270:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010272:	011b      	lsls	r3, r3, #4
 8010274:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8010278:	4413      	add	r3, r2
 801027a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801027c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801027e:	3304      	adds	r3, #4
 8010280:	781b      	ldrb	r3, [r3, #0]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d006      	beq.n	8010294 <find_volume+0x124>
 8010286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010288:	3308      	adds	r3, #8
 801028a:	4618      	mov	r0, r3
 801028c:	f7ff fb08 	bl	800f8a0 <ld_dword>
 8010290:	4602      	mov	r2, r0
 8010292:	e000      	b.n	8010296 <find_volume+0x126>
 8010294:	2200      	movs	r2, #0
 8010296:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010298:	009b      	lsls	r3, r3, #2
 801029a:	3358      	adds	r3, #88	@ 0x58
 801029c:	443b      	add	r3, r7
 801029e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80102a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80102a4:	3301      	adds	r3, #1
 80102a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80102a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80102aa:	2b03      	cmp	r3, #3
 80102ac:	d9dd      	bls.n	801026a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80102ae:	2300      	movs	r3, #0
 80102b0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80102b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d002      	beq.n	80102be <find_volume+0x14e>
 80102b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80102ba:	3b01      	subs	r3, #1
 80102bc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80102be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80102c0:	009b      	lsls	r3, r3, #2
 80102c2:	3358      	adds	r3, #88	@ 0x58
 80102c4:	443b      	add	r3, r7
 80102c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80102ca:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80102cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d005      	beq.n	80102de <find_volume+0x16e>
 80102d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80102d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80102d6:	f7ff fef5 	bl	80100c4 <check_fs>
 80102da:	4603      	mov	r3, r0
 80102dc:	e000      	b.n	80102e0 <find_volume+0x170>
 80102de:	2303      	movs	r3, #3
 80102e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80102e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80102e8:	2b01      	cmp	r3, #1
 80102ea:	d905      	bls.n	80102f8 <find_volume+0x188>
 80102ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80102ee:	3301      	adds	r3, #1
 80102f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80102f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80102f4:	2b03      	cmp	r3, #3
 80102f6:	d9e2      	bls.n	80102be <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80102f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80102fc:	2b04      	cmp	r3, #4
 80102fe:	d101      	bne.n	8010304 <find_volume+0x194>
 8010300:	2301      	movs	r3, #1
 8010302:	e17e      	b.n	8010602 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010304:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010308:	2b01      	cmp	r3, #1
 801030a:	d901      	bls.n	8010310 <find_volume+0x1a0>
 801030c:	230d      	movs	r3, #13
 801030e:	e178      	b.n	8010602 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010312:	3334      	adds	r3, #52	@ 0x34
 8010314:	330b      	adds	r3, #11
 8010316:	4618      	mov	r0, r3
 8010318:	f7ff faaa 	bl	800f870 <ld_word>
 801031c:	4603      	mov	r3, r0
 801031e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010322:	d001      	beq.n	8010328 <find_volume+0x1b8>
 8010324:	230d      	movs	r3, #13
 8010326:	e16c      	b.n	8010602 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801032a:	3334      	adds	r3, #52	@ 0x34
 801032c:	3316      	adds	r3, #22
 801032e:	4618      	mov	r0, r3
 8010330:	f7ff fa9e 	bl	800f870 <ld_word>
 8010334:	4603      	mov	r3, r0
 8010336:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010338:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801033a:	2b00      	cmp	r3, #0
 801033c:	d106      	bne.n	801034c <find_volume+0x1dc>
 801033e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010340:	3334      	adds	r3, #52	@ 0x34
 8010342:	3324      	adds	r3, #36	@ 0x24
 8010344:	4618      	mov	r0, r3
 8010346:	f7ff faab 	bl	800f8a0 <ld_dword>
 801034a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801034c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801034e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010350:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010354:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8010358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801035a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801035c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801035e:	789b      	ldrb	r3, [r3, #2]
 8010360:	2b01      	cmp	r3, #1
 8010362:	d005      	beq.n	8010370 <find_volume+0x200>
 8010364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010366:	789b      	ldrb	r3, [r3, #2]
 8010368:	2b02      	cmp	r3, #2
 801036a:	d001      	beq.n	8010370 <find_volume+0x200>
 801036c:	230d      	movs	r3, #13
 801036e:	e148      	b.n	8010602 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010372:	789b      	ldrb	r3, [r3, #2]
 8010374:	461a      	mov	r2, r3
 8010376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010378:	fb02 f303 	mul.w	r3, r2, r3
 801037c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801037e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010384:	461a      	mov	r2, r3
 8010386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010388:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801038a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801038c:	895b      	ldrh	r3, [r3, #10]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d008      	beq.n	80103a4 <find_volume+0x234>
 8010392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010394:	895b      	ldrh	r3, [r3, #10]
 8010396:	461a      	mov	r2, r3
 8010398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801039a:	895b      	ldrh	r3, [r3, #10]
 801039c:	3b01      	subs	r3, #1
 801039e:	4013      	ands	r3, r2
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d001      	beq.n	80103a8 <find_volume+0x238>
 80103a4:	230d      	movs	r3, #13
 80103a6:	e12c      	b.n	8010602 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80103a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103aa:	3334      	adds	r3, #52	@ 0x34
 80103ac:	3311      	adds	r3, #17
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7ff fa5e 	bl	800f870 <ld_word>
 80103b4:	4603      	mov	r3, r0
 80103b6:	461a      	mov	r2, r3
 80103b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80103bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103be:	891b      	ldrh	r3, [r3, #8]
 80103c0:	f003 030f 	and.w	r3, r3, #15
 80103c4:	b29b      	uxth	r3, r3
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d001      	beq.n	80103ce <find_volume+0x25e>
 80103ca:	230d      	movs	r3, #13
 80103cc:	e119      	b.n	8010602 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80103ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103d0:	3334      	adds	r3, #52	@ 0x34
 80103d2:	3313      	adds	r3, #19
 80103d4:	4618      	mov	r0, r3
 80103d6:	f7ff fa4b 	bl	800f870 <ld_word>
 80103da:	4603      	mov	r3, r0
 80103dc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80103de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d106      	bne.n	80103f2 <find_volume+0x282>
 80103e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103e6:	3334      	adds	r3, #52	@ 0x34
 80103e8:	3320      	adds	r3, #32
 80103ea:	4618      	mov	r0, r3
 80103ec:	f7ff fa58 	bl	800f8a0 <ld_dword>
 80103f0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80103f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103f4:	3334      	adds	r3, #52	@ 0x34
 80103f6:	330e      	adds	r3, #14
 80103f8:	4618      	mov	r0, r3
 80103fa:	f7ff fa39 	bl	800f870 <ld_word>
 80103fe:	4603      	mov	r3, r0
 8010400:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010402:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010404:	2b00      	cmp	r3, #0
 8010406:	d101      	bne.n	801040c <find_volume+0x29c>
 8010408:	230d      	movs	r3, #13
 801040a:	e0fa      	b.n	8010602 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801040c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801040e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010410:	4413      	add	r3, r2
 8010412:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010414:	8912      	ldrh	r2, [r2, #8]
 8010416:	0912      	lsrs	r2, r2, #4
 8010418:	b292      	uxth	r2, r2
 801041a:	4413      	add	r3, r2
 801041c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801041e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010422:	429a      	cmp	r2, r3
 8010424:	d204      	bcs.n	8010430 <find_volume+0x2c0>
 8010426:	230d      	movs	r3, #13
 8010428:	e0eb      	b.n	8010602 <find_volume+0x492>
 801042a:	bf00      	nop
 801042c:	20001464 	.word	0x20001464
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010430:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010434:	1ad3      	subs	r3, r2, r3
 8010436:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010438:	8952      	ldrh	r2, [r2, #10]
 801043a:	fbb3 f3f2 	udiv	r3, r3, r2
 801043e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010442:	2b00      	cmp	r3, #0
 8010444:	d101      	bne.n	801044a <find_volume+0x2da>
 8010446:	230d      	movs	r3, #13
 8010448:	e0db      	b.n	8010602 <find_volume+0x492>
		fmt = FS_FAT32;
 801044a:	2303      	movs	r3, #3
 801044c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010452:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010456:	4293      	cmp	r3, r2
 8010458:	d802      	bhi.n	8010460 <find_volume+0x2f0>
 801045a:	2302      	movs	r3, #2
 801045c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010462:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010466:	4293      	cmp	r3, r2
 8010468:	d802      	bhi.n	8010470 <find_volume+0x300>
 801046a:	2301      	movs	r3, #1
 801046c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010472:	1c9a      	adds	r2, r3, #2
 8010474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010476:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801047a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801047c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801047e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010480:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010482:	441a      	add	r2, r3
 8010484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010486:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8010488:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801048a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801048c:	441a      	add	r2, r3
 801048e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010490:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8010492:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010496:	2b03      	cmp	r3, #3
 8010498:	d11e      	bne.n	80104d8 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801049a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801049c:	3334      	adds	r3, #52	@ 0x34
 801049e:	332a      	adds	r3, #42	@ 0x2a
 80104a0:	4618      	mov	r0, r3
 80104a2:	f7ff f9e5 	bl	800f870 <ld_word>
 80104a6:	4603      	mov	r3, r0
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d001      	beq.n	80104b0 <find_volume+0x340>
 80104ac:	230d      	movs	r3, #13
 80104ae:	e0a8      	b.n	8010602 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80104b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104b2:	891b      	ldrh	r3, [r3, #8]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d001      	beq.n	80104bc <find_volume+0x34c>
 80104b8:	230d      	movs	r3, #13
 80104ba:	e0a2      	b.n	8010602 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80104bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104be:	3334      	adds	r3, #52	@ 0x34
 80104c0:	332c      	adds	r3, #44	@ 0x2c
 80104c2:	4618      	mov	r0, r3
 80104c4:	f7ff f9ec 	bl	800f8a0 <ld_dword>
 80104c8:	4602      	mov	r2, r0
 80104ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104cc:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80104ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104d0:	699b      	ldr	r3, [r3, #24]
 80104d2:	009b      	lsls	r3, r3, #2
 80104d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80104d6:	e01f      	b.n	8010518 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80104d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104da:	891b      	ldrh	r3, [r3, #8]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d101      	bne.n	80104e4 <find_volume+0x374>
 80104e0:	230d      	movs	r3, #13
 80104e2:	e08e      	b.n	8010602 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80104e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80104e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80104ea:	441a      	add	r2, r3
 80104ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104ee:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80104f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80104f4:	2b02      	cmp	r3, #2
 80104f6:	d103      	bne.n	8010500 <find_volume+0x390>
 80104f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104fa:	699b      	ldr	r3, [r3, #24]
 80104fc:	005b      	lsls	r3, r3, #1
 80104fe:	e00a      	b.n	8010516 <find_volume+0x3a6>
 8010500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010502:	699a      	ldr	r2, [r3, #24]
 8010504:	4613      	mov	r3, r2
 8010506:	005b      	lsls	r3, r3, #1
 8010508:	4413      	add	r3, r2
 801050a:	085a      	lsrs	r2, r3, #1
 801050c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801050e:	699b      	ldr	r3, [r3, #24]
 8010510:	f003 0301 	and.w	r3, r3, #1
 8010514:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010516:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801051a:	69da      	ldr	r2, [r3, #28]
 801051c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801051e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8010522:	0a5b      	lsrs	r3, r3, #9
 8010524:	429a      	cmp	r2, r3
 8010526:	d201      	bcs.n	801052c <find_volume+0x3bc>
 8010528:	230d      	movs	r3, #13
 801052a:	e06a      	b.n	8010602 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801052c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801052e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010532:	615a      	str	r2, [r3, #20]
 8010534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010536:	695a      	ldr	r2, [r3, #20]
 8010538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801053a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801053c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801053e:	2280      	movs	r2, #128	@ 0x80
 8010540:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010542:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010546:	2b03      	cmp	r3, #3
 8010548:	d149      	bne.n	80105de <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801054a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801054c:	3334      	adds	r3, #52	@ 0x34
 801054e:	3330      	adds	r3, #48	@ 0x30
 8010550:	4618      	mov	r0, r3
 8010552:	f7ff f98d 	bl	800f870 <ld_word>
 8010556:	4603      	mov	r3, r0
 8010558:	2b01      	cmp	r3, #1
 801055a:	d140      	bne.n	80105de <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801055c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801055e:	3301      	adds	r3, #1
 8010560:	4619      	mov	r1, r3
 8010562:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010564:	f7ff fac0 	bl	800fae8 <move_window>
 8010568:	4603      	mov	r3, r0
 801056a:	2b00      	cmp	r3, #0
 801056c:	d137      	bne.n	80105de <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 801056e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010570:	2200      	movs	r2, #0
 8010572:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010576:	3334      	adds	r3, #52	@ 0x34
 8010578:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801057c:	4618      	mov	r0, r3
 801057e:	f7ff f977 	bl	800f870 <ld_word>
 8010582:	4603      	mov	r3, r0
 8010584:	461a      	mov	r2, r3
 8010586:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801058a:	429a      	cmp	r2, r3
 801058c:	d127      	bne.n	80105de <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801058e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010590:	3334      	adds	r3, #52	@ 0x34
 8010592:	4618      	mov	r0, r3
 8010594:	f7ff f984 	bl	800f8a0 <ld_dword>
 8010598:	4603      	mov	r3, r0
 801059a:	4a1c      	ldr	r2, [pc, #112]	@ (801060c <find_volume+0x49c>)
 801059c:	4293      	cmp	r3, r2
 801059e:	d11e      	bne.n	80105de <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80105a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105a2:	3334      	adds	r3, #52	@ 0x34
 80105a4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80105a8:	4618      	mov	r0, r3
 80105aa:	f7ff f979 	bl	800f8a0 <ld_dword>
 80105ae:	4603      	mov	r3, r0
 80105b0:	4a17      	ldr	r2, [pc, #92]	@ (8010610 <find_volume+0x4a0>)
 80105b2:	4293      	cmp	r3, r2
 80105b4:	d113      	bne.n	80105de <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80105b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105b8:	3334      	adds	r3, #52	@ 0x34
 80105ba:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80105be:	4618      	mov	r0, r3
 80105c0:	f7ff f96e 	bl	800f8a0 <ld_dword>
 80105c4:	4602      	mov	r2, r0
 80105c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105c8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80105ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105cc:	3334      	adds	r3, #52	@ 0x34
 80105ce:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80105d2:	4618      	mov	r0, r3
 80105d4:	f7ff f964 	bl	800f8a0 <ld_dword>
 80105d8:	4602      	mov	r2, r0
 80105da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105dc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80105de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105e0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80105e4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80105e6:	4b0b      	ldr	r3, [pc, #44]	@ (8010614 <find_volume+0x4a4>)
 80105e8:	881b      	ldrh	r3, [r3, #0]
 80105ea:	3301      	adds	r3, #1
 80105ec:	b29a      	uxth	r2, r3
 80105ee:	4b09      	ldr	r3, [pc, #36]	@ (8010614 <find_volume+0x4a4>)
 80105f0:	801a      	strh	r2, [r3, #0]
 80105f2:	4b08      	ldr	r3, [pc, #32]	@ (8010614 <find_volume+0x4a4>)
 80105f4:	881a      	ldrh	r2, [r3, #0]
 80105f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105f8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80105fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80105fc:	f7ff fa0c 	bl	800fa18 <clear_lock>
#endif
	return FR_OK;
 8010600:	2300      	movs	r3, #0
}
 8010602:	4618      	mov	r0, r3
 8010604:	3758      	adds	r7, #88	@ 0x58
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}
 801060a:	bf00      	nop
 801060c:	41615252 	.word	0x41615252
 8010610:	61417272 	.word	0x61417272
 8010614:	20001468 	.word	0x20001468

08010618 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b084      	sub	sp, #16
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010622:	2309      	movs	r3, #9
 8010624:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d02e      	beq.n	801068a <validate+0x72>
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d02a      	beq.n	801068a <validate+0x72>
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	781b      	ldrb	r3, [r3, #0]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d025      	beq.n	801068a <validate+0x72>
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	889a      	ldrh	r2, [r3, #4]
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	88db      	ldrh	r3, [r3, #6]
 8010648:	429a      	cmp	r2, r3
 801064a:	d11e      	bne.n	801068a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	4618      	mov	r0, r3
 8010652:	f7ff f9b0 	bl	800f9b6 <lock_fs>
 8010656:	4603      	mov	r3, r0
 8010658:	2b00      	cmp	r3, #0
 801065a:	d014      	beq.n	8010686 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	785b      	ldrb	r3, [r3, #1]
 8010662:	4618      	mov	r0, r3
 8010664:	f7ff f884 	bl	800f770 <disk_status>
 8010668:	4603      	mov	r3, r0
 801066a:	f003 0301 	and.w	r3, r3, #1
 801066e:	2b00      	cmp	r3, #0
 8010670:	d102      	bne.n	8010678 <validate+0x60>
				res = FR_OK;
 8010672:	2300      	movs	r3, #0
 8010674:	73fb      	strb	r3, [r7, #15]
 8010676:	e008      	b.n	801068a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	2100      	movs	r1, #0
 801067e:	4618      	mov	r0, r3
 8010680:	f7ff f9af 	bl	800f9e2 <unlock_fs>
 8010684:	e001      	b.n	801068a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8010686:	230f      	movs	r3, #15
 8010688:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801068a:	7bfb      	ldrb	r3, [r7, #15]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d102      	bne.n	8010696 <validate+0x7e>
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	e000      	b.n	8010698 <validate+0x80>
 8010696:	2300      	movs	r3, #0
 8010698:	683a      	ldr	r2, [r7, #0]
 801069a:	6013      	str	r3, [r2, #0]
	return res;
 801069c:	7bfb      	ldrb	r3, [r7, #15]
}
 801069e:	4618      	mov	r0, r3
 80106a0:	3710      	adds	r7, #16
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}
	...

080106a8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b088      	sub	sp, #32
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	60f8      	str	r0, [r7, #12]
 80106b0:	60b9      	str	r1, [r7, #8]
 80106b2:	4613      	mov	r3, r2
 80106b4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80106b6:	68bb      	ldr	r3, [r7, #8]
 80106b8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80106ba:	f107 0310 	add.w	r3, r7, #16
 80106be:	4618      	mov	r0, r3
 80106c0:	f7ff fcbb 	bl	801003a <get_ldnumber>
 80106c4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80106c6:	69fb      	ldr	r3, [r7, #28]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	da01      	bge.n	80106d0 <f_mount+0x28>
 80106cc:	230b      	movs	r3, #11
 80106ce:	e048      	b.n	8010762 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80106d0:	4a26      	ldr	r2, [pc, #152]	@ (801076c <f_mount+0xc4>)
 80106d2:	69fb      	ldr	r3, [r7, #28]
 80106d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106d8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80106da:	69bb      	ldr	r3, [r7, #24]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d00f      	beq.n	8010700 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80106e0:	69b8      	ldr	r0, [r7, #24]
 80106e2:	f7ff f999 	bl	800fa18 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80106e6:	69bb      	ldr	r3, [r7, #24]
 80106e8:	68db      	ldr	r3, [r3, #12]
 80106ea:	4618      	mov	r0, r3
 80106ec:	f000 fc7d 	bl	8010fea <ff_del_syncobj>
 80106f0:	4603      	mov	r3, r0
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d101      	bne.n	80106fa <f_mount+0x52>
 80106f6:	2302      	movs	r3, #2
 80106f8:	e033      	b.n	8010762 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80106fa:	69bb      	ldr	r3, [r7, #24]
 80106fc:	2200      	movs	r2, #0
 80106fe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d00f      	beq.n	8010726 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	2200      	movs	r2, #0
 801070a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 801070c:	69fb      	ldr	r3, [r7, #28]
 801070e:	b2da      	uxtb	r2, r3
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	330c      	adds	r3, #12
 8010714:	4619      	mov	r1, r3
 8010716:	4610      	mov	r0, r2
 8010718:	f000 fc47 	bl	8010faa <ff_cre_syncobj>
 801071c:	4603      	mov	r3, r0
 801071e:	2b00      	cmp	r3, #0
 8010720:	d101      	bne.n	8010726 <f_mount+0x7e>
 8010722:	2302      	movs	r3, #2
 8010724:	e01d      	b.n	8010762 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010726:	68fa      	ldr	r2, [r7, #12]
 8010728:	4910      	ldr	r1, [pc, #64]	@ (801076c <f_mount+0xc4>)
 801072a:	69fb      	ldr	r3, [r7, #28]
 801072c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d002      	beq.n	801073c <f_mount+0x94>
 8010736:	79fb      	ldrb	r3, [r7, #7]
 8010738:	2b01      	cmp	r3, #1
 801073a:	d001      	beq.n	8010740 <f_mount+0x98>
 801073c:	2300      	movs	r3, #0
 801073e:	e010      	b.n	8010762 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010740:	f107 010c 	add.w	r1, r7, #12
 8010744:	f107 0308 	add.w	r3, r7, #8
 8010748:	2200      	movs	r2, #0
 801074a:	4618      	mov	r0, r3
 801074c:	f7ff fd10 	bl	8010170 <find_volume>
 8010750:	4603      	mov	r3, r0
 8010752:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	7dfa      	ldrb	r2, [r7, #23]
 8010758:	4611      	mov	r1, r2
 801075a:	4618      	mov	r0, r3
 801075c:	f7ff f941 	bl	800f9e2 <unlock_fs>
 8010760:	7dfb      	ldrb	r3, [r7, #23]
}
 8010762:	4618      	mov	r0, r3
 8010764:	3720      	adds	r7, #32
 8010766:	46bd      	mov	sp, r7
 8010768:	bd80      	pop	{r7, pc}
 801076a:	bf00      	nop
 801076c:	20001464 	.word	0x20001464

08010770 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b08e      	sub	sp, #56	@ 0x38
 8010774:	af00      	add	r7, sp, #0
 8010776:	60f8      	str	r0, [r7, #12]
 8010778:	60b9      	str	r1, [r7, #8]
 801077a:	607a      	str	r2, [r7, #4]
 801077c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	2200      	movs	r2, #0
 8010786:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	f107 0214 	add.w	r2, r7, #20
 801078e:	4611      	mov	r1, r2
 8010790:	4618      	mov	r0, r3
 8010792:	f7ff ff41 	bl	8010618 <validate>
 8010796:	4603      	mov	r3, r0
 8010798:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801079c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d107      	bne.n	80107b4 <f_read+0x44>
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	7d5b      	ldrb	r3, [r3, #21]
 80107a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80107ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d009      	beq.n	80107c8 <f_read+0x58>
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80107ba:	4611      	mov	r1, r2
 80107bc:	4618      	mov	r0, r3
 80107be:	f7ff f910 	bl	800f9e2 <unlock_fs>
 80107c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80107c6:	e13d      	b.n	8010a44 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	7d1b      	ldrb	r3, [r3, #20]
 80107cc:	f003 0301 	and.w	r3, r3, #1
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d106      	bne.n	80107e2 <f_read+0x72>
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	2107      	movs	r1, #7
 80107d8:	4618      	mov	r0, r3
 80107da:	f7ff f902 	bl	800f9e2 <unlock_fs>
 80107de:	2307      	movs	r3, #7
 80107e0:	e130      	b.n	8010a44 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	68da      	ldr	r2, [r3, #12]
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	699b      	ldr	r3, [r3, #24]
 80107ea:	1ad3      	subs	r3, r2, r3
 80107ec:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80107ee:	687a      	ldr	r2, [r7, #4]
 80107f0:	6a3b      	ldr	r3, [r7, #32]
 80107f2:	429a      	cmp	r2, r3
 80107f4:	f240 811c 	bls.w	8010a30 <f_read+0x2c0>
 80107f8:	6a3b      	ldr	r3, [r7, #32]
 80107fa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80107fc:	e118      	b.n	8010a30 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	699b      	ldr	r3, [r3, #24]
 8010802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010806:	2b00      	cmp	r3, #0
 8010808:	f040 80e4 	bne.w	80109d4 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	699b      	ldr	r3, [r3, #24]
 8010810:	0a5b      	lsrs	r3, r3, #9
 8010812:	697a      	ldr	r2, [r7, #20]
 8010814:	8952      	ldrh	r2, [r2, #10]
 8010816:	3a01      	subs	r2, #1
 8010818:	4013      	ands	r3, r2
 801081a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801081c:	69fb      	ldr	r3, [r7, #28]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d139      	bne.n	8010896 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	699b      	ldr	r3, [r3, #24]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d103      	bne.n	8010832 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	689b      	ldr	r3, [r3, #8]
 801082e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010830:	e013      	b.n	801085a <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010836:	2b00      	cmp	r3, #0
 8010838:	d007      	beq.n	801084a <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	699b      	ldr	r3, [r3, #24]
 801083e:	4619      	mov	r1, r3
 8010840:	68f8      	ldr	r0, [r7, #12]
 8010842:	f7ff fbc6 	bl	800ffd2 <clmt_clust>
 8010846:	6338      	str	r0, [r7, #48]	@ 0x30
 8010848:	e007      	b.n	801085a <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801084a:	68fa      	ldr	r2, [r7, #12]
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	69db      	ldr	r3, [r3, #28]
 8010850:	4619      	mov	r1, r3
 8010852:	4610      	mov	r0, r2
 8010854:	f7ff f994 	bl	800fb80 <get_fat>
 8010858:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801085a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801085c:	2b01      	cmp	r3, #1
 801085e:	d809      	bhi.n	8010874 <f_read+0x104>
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	2202      	movs	r2, #2
 8010864:	755a      	strb	r2, [r3, #21]
 8010866:	697b      	ldr	r3, [r7, #20]
 8010868:	2102      	movs	r1, #2
 801086a:	4618      	mov	r0, r3
 801086c:	f7ff f8b9 	bl	800f9e2 <unlock_fs>
 8010870:	2302      	movs	r3, #2
 8010872:	e0e7      	b.n	8010a44 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010876:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801087a:	d109      	bne.n	8010890 <f_read+0x120>
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	2201      	movs	r2, #1
 8010880:	755a      	strb	r2, [r3, #21]
 8010882:	697b      	ldr	r3, [r7, #20]
 8010884:	2101      	movs	r1, #1
 8010886:	4618      	mov	r0, r3
 8010888:	f7ff f8ab 	bl	800f9e2 <unlock_fs>
 801088c:	2301      	movs	r3, #1
 801088e:	e0d9      	b.n	8010a44 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010894:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010896:	697a      	ldr	r2, [r7, #20]
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	69db      	ldr	r3, [r3, #28]
 801089c:	4619      	mov	r1, r3
 801089e:	4610      	mov	r0, r2
 80108a0:	f7ff f94f 	bl	800fb42 <clust2sect>
 80108a4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80108a6:	69bb      	ldr	r3, [r7, #24]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d109      	bne.n	80108c0 <f_read+0x150>
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	2202      	movs	r2, #2
 80108b0:	755a      	strb	r2, [r3, #21]
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	2102      	movs	r1, #2
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7ff f893 	bl	800f9e2 <unlock_fs>
 80108bc:	2302      	movs	r3, #2
 80108be:	e0c1      	b.n	8010a44 <f_read+0x2d4>
			sect += csect;
 80108c0:	69ba      	ldr	r2, [r7, #24]
 80108c2:	69fb      	ldr	r3, [r7, #28]
 80108c4:	4413      	add	r3, r2
 80108c6:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	0a5b      	lsrs	r3, r3, #9
 80108cc:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80108ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d03e      	beq.n	8010952 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80108d4:	69fa      	ldr	r2, [r7, #28]
 80108d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108d8:	4413      	add	r3, r2
 80108da:	697a      	ldr	r2, [r7, #20]
 80108dc:	8952      	ldrh	r2, [r2, #10]
 80108de:	4293      	cmp	r3, r2
 80108e0:	d905      	bls.n	80108ee <f_read+0x17e>
					cc = fs->csize - csect;
 80108e2:	697b      	ldr	r3, [r7, #20]
 80108e4:	895b      	ldrh	r3, [r3, #10]
 80108e6:	461a      	mov	r2, r3
 80108e8:	69fb      	ldr	r3, [r7, #28]
 80108ea:	1ad3      	subs	r3, r2, r3
 80108ec:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	7858      	ldrb	r0, [r3, #1]
 80108f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108f4:	69ba      	ldr	r2, [r7, #24]
 80108f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80108f8:	f7fe ff7a 	bl	800f7f0 <disk_read>
 80108fc:	4603      	mov	r3, r0
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d009      	beq.n	8010916 <f_read+0x1a6>
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	2201      	movs	r2, #1
 8010906:	755a      	strb	r2, [r3, #21]
 8010908:	697b      	ldr	r3, [r7, #20]
 801090a:	2101      	movs	r1, #1
 801090c:	4618      	mov	r0, r3
 801090e:	f7ff f868 	bl	800f9e2 <unlock_fs>
 8010912:	2301      	movs	r3, #1
 8010914:	e096      	b.n	8010a44 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	7d1b      	ldrb	r3, [r3, #20]
 801091a:	b25b      	sxtb	r3, r3
 801091c:	2b00      	cmp	r3, #0
 801091e:	da14      	bge.n	801094a <f_read+0x1da>
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	6a1a      	ldr	r2, [r3, #32]
 8010924:	69bb      	ldr	r3, [r7, #24]
 8010926:	1ad3      	subs	r3, r2, r3
 8010928:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801092a:	429a      	cmp	r2, r3
 801092c:	d90d      	bls.n	801094a <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	6a1a      	ldr	r2, [r3, #32]
 8010932:	69bb      	ldr	r3, [r7, #24]
 8010934:	1ad3      	subs	r3, r2, r3
 8010936:	025b      	lsls	r3, r3, #9
 8010938:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801093a:	18d0      	adds	r0, r2, r3
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	3330      	adds	r3, #48	@ 0x30
 8010940:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010944:	4619      	mov	r1, r3
 8010946:	f7ff f815 	bl	800f974 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801094a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801094c:	025b      	lsls	r3, r3, #9
 801094e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8010950:	e05a      	b.n	8010a08 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	6a1b      	ldr	r3, [r3, #32]
 8010956:	69ba      	ldr	r2, [r7, #24]
 8010958:	429a      	cmp	r2, r3
 801095a:	d038      	beq.n	80109ce <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	7d1b      	ldrb	r3, [r3, #20]
 8010960:	b25b      	sxtb	r3, r3
 8010962:	2b00      	cmp	r3, #0
 8010964:	da1d      	bge.n	80109a2 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010966:	697b      	ldr	r3, [r7, #20]
 8010968:	7858      	ldrb	r0, [r3, #1]
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	6a1a      	ldr	r2, [r3, #32]
 8010974:	2301      	movs	r3, #1
 8010976:	f7fe ff5b 	bl	800f830 <disk_write>
 801097a:	4603      	mov	r3, r0
 801097c:	2b00      	cmp	r3, #0
 801097e:	d009      	beq.n	8010994 <f_read+0x224>
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	2201      	movs	r2, #1
 8010984:	755a      	strb	r2, [r3, #21]
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	2101      	movs	r1, #1
 801098a:	4618      	mov	r0, r3
 801098c:	f7ff f829 	bl	800f9e2 <unlock_fs>
 8010990:	2301      	movs	r3, #1
 8010992:	e057      	b.n	8010a44 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	7d1b      	ldrb	r3, [r3, #20]
 8010998:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801099c:	b2da      	uxtb	r2, r3
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	7858      	ldrb	r0, [r3, #1]
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80109ac:	2301      	movs	r3, #1
 80109ae:	69ba      	ldr	r2, [r7, #24]
 80109b0:	f7fe ff1e 	bl	800f7f0 <disk_read>
 80109b4:	4603      	mov	r3, r0
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d009      	beq.n	80109ce <f_read+0x25e>
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	2201      	movs	r2, #1
 80109be:	755a      	strb	r2, [r3, #21]
 80109c0:	697b      	ldr	r3, [r7, #20]
 80109c2:	2101      	movs	r1, #1
 80109c4:	4618      	mov	r0, r3
 80109c6:	f7ff f80c 	bl	800f9e2 <unlock_fs>
 80109ca:	2301      	movs	r3, #1
 80109cc:	e03a      	b.n	8010a44 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	69ba      	ldr	r2, [r7, #24]
 80109d2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	699b      	ldr	r3, [r3, #24]
 80109d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109dc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80109e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80109e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	429a      	cmp	r2, r3
 80109e8:	d901      	bls.n	80109ee <f_read+0x27e>
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	699b      	ldr	r3, [r3, #24]
 80109f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109fc:	4413      	add	r3, r2
 80109fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a00:	4619      	mov	r1, r3
 8010a02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010a04:	f7fe ffb6 	bl	800f974 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a0c:	4413      	add	r3, r2
 8010a0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	699a      	ldr	r2, [r3, #24]
 8010a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a16:	441a      	add	r2, r3
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	619a      	str	r2, [r3, #24]
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	681a      	ldr	r2, [r3, #0]
 8010a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a22:	441a      	add	r2, r3
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	601a      	str	r2, [r3, #0]
 8010a28:	687a      	ldr	r2, [r7, #4]
 8010a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a2c:	1ad3      	subs	r3, r2, r3
 8010a2e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	f47f aee3 	bne.w	80107fe <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010a38:	697b      	ldr	r3, [r7, #20]
 8010a3a:	2100      	movs	r1, #0
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f7fe ffd0 	bl	800f9e2 <unlock_fs>
 8010a42:	2300      	movs	r3, #0
}
 8010a44:	4618      	mov	r0, r3
 8010a46:	3738      	adds	r7, #56	@ 0x38
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}

08010a4c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b090      	sub	sp, #64	@ 0x40
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
 8010a54:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f107 0208 	add.w	r2, r7, #8
 8010a5c:	4611      	mov	r1, r2
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f7ff fdda 	bl	8010618 <validate>
 8010a64:	4603      	mov	r3, r0
 8010a66:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010a6a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d103      	bne.n	8010a7a <f_lseek+0x2e>
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	7d5b      	ldrb	r3, [r3, #21]
 8010a76:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010a7a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d009      	beq.n	8010a96 <f_lseek+0x4a>
 8010a82:	68bb      	ldr	r3, [r7, #8]
 8010a84:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8010a88:	4611      	mov	r1, r2
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f7fe ffa9 	bl	800f9e2 <unlock_fs>
 8010a90:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010a94:	e229      	b.n	8010eea <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	f000 80ea 	beq.w	8010c74 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010aa6:	d164      	bne.n	8010b72 <f_lseek+0x126>
			tbl = fp->cltbl;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010aac:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ab0:	1d1a      	adds	r2, r3, #4
 8010ab2:	627a      	str	r2, [r7, #36]	@ 0x24
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	617b      	str	r3, [r7, #20]
 8010ab8:	2302      	movs	r3, #2
 8010aba:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	689b      	ldr	r3, [r3, #8]
 8010ac0:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8010ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d044      	beq.n	8010b52 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010aca:	613b      	str	r3, [r7, #16]
 8010acc:	2300      	movs	r3, #0
 8010ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ad2:	3302      	adds	r3, #2
 8010ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8010ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ad8:	60fb      	str	r3, [r7, #12]
 8010ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010adc:	3301      	adds	r3, #1
 8010ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7ff f84b 	bl	800fb80 <get_fat>
 8010aea:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010aee:	2b01      	cmp	r3, #1
 8010af0:	d809      	bhi.n	8010b06 <f_lseek+0xba>
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	2202      	movs	r2, #2
 8010af6:	755a      	strb	r2, [r3, #21]
 8010af8:	68bb      	ldr	r3, [r7, #8]
 8010afa:	2102      	movs	r1, #2
 8010afc:	4618      	mov	r0, r3
 8010afe:	f7fe ff70 	bl	800f9e2 <unlock_fs>
 8010b02:	2302      	movs	r3, #2
 8010b04:	e1f1      	b.n	8010eea <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010b0c:	d109      	bne.n	8010b22 <f_lseek+0xd6>
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	2201      	movs	r2, #1
 8010b12:	755a      	strb	r2, [r3, #21]
 8010b14:	68bb      	ldr	r3, [r7, #8]
 8010b16:	2101      	movs	r1, #1
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f7fe ff62 	bl	800f9e2 <unlock_fs>
 8010b1e:	2301      	movs	r3, #1
 8010b20:	e1e3      	b.n	8010eea <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	3301      	adds	r3, #1
 8010b26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b28:	429a      	cmp	r2, r3
 8010b2a:	d0d4      	beq.n	8010ad6 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010b2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010b2e:	697b      	ldr	r3, [r7, #20]
 8010b30:	429a      	cmp	r2, r3
 8010b32:	d809      	bhi.n	8010b48 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8010b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b36:	1d1a      	adds	r2, r3, #4
 8010b38:	627a      	str	r2, [r7, #36]	@ 0x24
 8010b3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b3c:	601a      	str	r2, [r3, #0]
 8010b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b40:	1d1a      	adds	r2, r3, #4
 8010b42:	627a      	str	r2, [r7, #36]	@ 0x24
 8010b44:	693a      	ldr	r2, [r7, #16]
 8010b46:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	699b      	ldr	r3, [r3, #24]
 8010b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b4e:	429a      	cmp	r2, r3
 8010b50:	d3ba      	bcc.n	8010ac8 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010b58:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010b5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010b5c:	697b      	ldr	r3, [r7, #20]
 8010b5e:	429a      	cmp	r2, r3
 8010b60:	d803      	bhi.n	8010b6a <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8010b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b64:	2200      	movs	r2, #0
 8010b66:	601a      	str	r2, [r3, #0]
 8010b68:	e1b6      	b.n	8010ed8 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010b6a:	2311      	movs	r3, #17
 8010b6c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8010b70:	e1b2      	b.n	8010ed8 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	68db      	ldr	r3, [r3, #12]
 8010b76:	683a      	ldr	r2, [r7, #0]
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	d902      	bls.n	8010b82 <f_lseek+0x136>
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	68db      	ldr	r3, [r3, #12]
 8010b80:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	683a      	ldr	r2, [r7, #0]
 8010b86:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	f000 81a4 	beq.w	8010ed8 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010b90:	683b      	ldr	r3, [r7, #0]
 8010b92:	3b01      	subs	r3, #1
 8010b94:	4619      	mov	r1, r3
 8010b96:	6878      	ldr	r0, [r7, #4]
 8010b98:	f7ff fa1b 	bl	800ffd2 <clmt_clust>
 8010b9c:	4602      	mov	r2, r0
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010ba2:	68ba      	ldr	r2, [r7, #8]
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	69db      	ldr	r3, [r3, #28]
 8010ba8:	4619      	mov	r1, r3
 8010baa:	4610      	mov	r0, r2
 8010bac:	f7fe ffc9 	bl	800fb42 <clust2sect>
 8010bb0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010bb2:	69bb      	ldr	r3, [r7, #24]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d109      	bne.n	8010bcc <f_lseek+0x180>
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	2202      	movs	r2, #2
 8010bbc:	755a      	strb	r2, [r3, #21]
 8010bbe:	68bb      	ldr	r3, [r7, #8]
 8010bc0:	2102      	movs	r1, #2
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f7fe ff0d 	bl	800f9e2 <unlock_fs>
 8010bc8:	2302      	movs	r3, #2
 8010bca:	e18e      	b.n	8010eea <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	3b01      	subs	r3, #1
 8010bd0:	0a5b      	lsrs	r3, r3, #9
 8010bd2:	68ba      	ldr	r2, [r7, #8]
 8010bd4:	8952      	ldrh	r2, [r2, #10]
 8010bd6:	3a01      	subs	r2, #1
 8010bd8:	4013      	ands	r3, r2
 8010bda:	69ba      	ldr	r2, [r7, #24]
 8010bdc:	4413      	add	r3, r2
 8010bde:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	699b      	ldr	r3, [r3, #24]
 8010be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	f000 8175 	beq.w	8010ed8 <f_lseek+0x48c>
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	6a1b      	ldr	r3, [r3, #32]
 8010bf2:	69ba      	ldr	r2, [r7, #24]
 8010bf4:	429a      	cmp	r2, r3
 8010bf6:	f000 816f 	beq.w	8010ed8 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	7d1b      	ldrb	r3, [r3, #20]
 8010bfe:	b25b      	sxtb	r3, r3
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	da1d      	bge.n	8010c40 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010c04:	68bb      	ldr	r3, [r7, #8]
 8010c06:	7858      	ldrb	r0, [r3, #1]
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	6a1a      	ldr	r2, [r3, #32]
 8010c12:	2301      	movs	r3, #1
 8010c14:	f7fe fe0c 	bl	800f830 <disk_write>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d009      	beq.n	8010c32 <f_lseek+0x1e6>
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2201      	movs	r2, #1
 8010c22:	755a      	strb	r2, [r3, #21]
 8010c24:	68bb      	ldr	r3, [r7, #8]
 8010c26:	2101      	movs	r1, #1
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f7fe feda 	bl	800f9e2 <unlock_fs>
 8010c2e:	2301      	movs	r3, #1
 8010c30:	e15b      	b.n	8010eea <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	7d1b      	ldrb	r3, [r3, #20]
 8010c36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010c3a:	b2da      	uxtb	r2, r3
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	7858      	ldrb	r0, [r3, #1]
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010c4a:	2301      	movs	r3, #1
 8010c4c:	69ba      	ldr	r2, [r7, #24]
 8010c4e:	f7fe fdcf 	bl	800f7f0 <disk_read>
 8010c52:	4603      	mov	r3, r0
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d009      	beq.n	8010c6c <f_lseek+0x220>
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	2201      	movs	r2, #1
 8010c5c:	755a      	strb	r2, [r3, #21]
 8010c5e:	68bb      	ldr	r3, [r7, #8]
 8010c60:	2101      	movs	r1, #1
 8010c62:	4618      	mov	r0, r3
 8010c64:	f7fe febd 	bl	800f9e2 <unlock_fs>
 8010c68:	2301      	movs	r3, #1
 8010c6a:	e13e      	b.n	8010eea <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	69ba      	ldr	r2, [r7, #24]
 8010c70:	621a      	str	r2, [r3, #32]
 8010c72:	e131      	b.n	8010ed8 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	68db      	ldr	r3, [r3, #12]
 8010c78:	683a      	ldr	r2, [r7, #0]
 8010c7a:	429a      	cmp	r2, r3
 8010c7c:	d908      	bls.n	8010c90 <f_lseek+0x244>
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	7d1b      	ldrb	r3, [r3, #20]
 8010c82:	f003 0302 	and.w	r3, r3, #2
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d102      	bne.n	8010c90 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	68db      	ldr	r3, [r3, #12]
 8010c8e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	699b      	ldr	r3, [r3, #24]
 8010c94:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010c96:	2300      	movs	r3, #0
 8010c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010c9e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010ca0:	683b      	ldr	r3, [r7, #0]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	f000 80c0 	beq.w	8010e28 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010ca8:	68bb      	ldr	r3, [r7, #8]
 8010caa:	895b      	ldrh	r3, [r3, #10]
 8010cac:	025b      	lsls	r3, r3, #9
 8010cae:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010cb0:	6a3b      	ldr	r3, [r7, #32]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d01b      	beq.n	8010cee <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	1e5a      	subs	r2, r3, #1
 8010cba:	69fb      	ldr	r3, [r7, #28]
 8010cbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8010cc0:	6a3b      	ldr	r3, [r7, #32]
 8010cc2:	1e59      	subs	r1, r3, #1
 8010cc4:	69fb      	ldr	r3, [r7, #28]
 8010cc6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010cca:	429a      	cmp	r2, r3
 8010ccc:	d30f      	bcc.n	8010cee <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010cce:	6a3b      	ldr	r3, [r7, #32]
 8010cd0:	1e5a      	subs	r2, r3, #1
 8010cd2:	69fb      	ldr	r3, [r7, #28]
 8010cd4:	425b      	negs	r3, r3
 8010cd6:	401a      	ands	r2, r3
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	699b      	ldr	r3, [r3, #24]
 8010ce0:	683a      	ldr	r2, [r7, #0]
 8010ce2:	1ad3      	subs	r3, r2, r3
 8010ce4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	69db      	ldr	r3, [r3, #28]
 8010cea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010cec:	e02c      	b.n	8010d48 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	689b      	ldr	r3, [r3, #8]
 8010cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d123      	bne.n	8010d42 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	2100      	movs	r1, #0
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f7ff f8cf 	bl	800fea2 <create_chain>
 8010d04:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d08:	2b01      	cmp	r3, #1
 8010d0a:	d109      	bne.n	8010d20 <f_lseek+0x2d4>
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	2202      	movs	r2, #2
 8010d10:	755a      	strb	r2, [r3, #21]
 8010d12:	68bb      	ldr	r3, [r7, #8]
 8010d14:	2102      	movs	r1, #2
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7fe fe63 	bl	800f9e2 <unlock_fs>
 8010d1c:	2302      	movs	r3, #2
 8010d1e:	e0e4      	b.n	8010eea <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010d26:	d109      	bne.n	8010d3c <f_lseek+0x2f0>
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2201      	movs	r2, #1
 8010d2c:	755a      	strb	r2, [r3, #21]
 8010d2e:	68bb      	ldr	r3, [r7, #8]
 8010d30:	2101      	movs	r1, #1
 8010d32:	4618      	mov	r0, r3
 8010d34:	f7fe fe55 	bl	800f9e2 <unlock_fs>
 8010d38:	2301      	movs	r3, #1
 8010d3a:	e0d6      	b.n	8010eea <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010d40:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010d46:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8010d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d06c      	beq.n	8010e28 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8010d4e:	e044      	b.n	8010dda <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8010d50:	683a      	ldr	r2, [r7, #0]
 8010d52:	69fb      	ldr	r3, [r7, #28]
 8010d54:	1ad3      	subs	r3, r2, r3
 8010d56:	603b      	str	r3, [r7, #0]
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	699a      	ldr	r2, [r3, #24]
 8010d5c:	69fb      	ldr	r3, [r7, #28]
 8010d5e:	441a      	add	r2, r3
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	7d1b      	ldrb	r3, [r3, #20]
 8010d68:	f003 0302 	and.w	r3, r3, #2
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d00b      	beq.n	8010d88 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010d74:	4618      	mov	r0, r3
 8010d76:	f7ff f894 	bl	800fea2 <create_chain>
 8010d7a:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d108      	bne.n	8010d94 <f_lseek+0x348>
							ofs = 0; break;
 8010d82:	2300      	movs	r3, #0
 8010d84:	603b      	str	r3, [r7, #0]
 8010d86:	e02c      	b.n	8010de2 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	f7fe fef7 	bl	800fb80 <get_fat>
 8010d92:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010d9a:	d109      	bne.n	8010db0 <f_lseek+0x364>
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	2201      	movs	r2, #1
 8010da0:	755a      	strb	r2, [r3, #21]
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	2101      	movs	r1, #1
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7fe fe1b 	bl	800f9e2 <unlock_fs>
 8010dac:	2301      	movs	r3, #1
 8010dae:	e09c      	b.n	8010eea <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010db2:	2b01      	cmp	r3, #1
 8010db4:	d904      	bls.n	8010dc0 <f_lseek+0x374>
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	699b      	ldr	r3, [r3, #24]
 8010dba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010dbc:	429a      	cmp	r2, r3
 8010dbe:	d309      	bcc.n	8010dd4 <f_lseek+0x388>
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	2202      	movs	r2, #2
 8010dc4:	755a      	strb	r2, [r3, #21]
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	2102      	movs	r1, #2
 8010dca:	4618      	mov	r0, r3
 8010dcc:	f7fe fe09 	bl	800f9e2 <unlock_fs>
 8010dd0:	2302      	movs	r3, #2
 8010dd2:	e08a      	b.n	8010eea <f_lseek+0x49e>
					fp->clust = clst;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010dd8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010dda:	683a      	ldr	r2, [r7, #0]
 8010ddc:	69fb      	ldr	r3, [r7, #28]
 8010dde:	429a      	cmp	r2, r3
 8010de0:	d8b6      	bhi.n	8010d50 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	699a      	ldr	r2, [r3, #24]
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	441a      	add	r2, r3
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010dee:	683b      	ldr	r3, [r7, #0]
 8010df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d017      	beq.n	8010e28 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010df8:	68bb      	ldr	r3, [r7, #8]
 8010dfa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f7fe fea0 	bl	800fb42 <clust2sect>
 8010e02:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d109      	bne.n	8010e1e <f_lseek+0x3d2>
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	2202      	movs	r2, #2
 8010e0e:	755a      	strb	r2, [r3, #21]
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	2102      	movs	r1, #2
 8010e14:	4618      	mov	r0, r3
 8010e16:	f7fe fde4 	bl	800f9e2 <unlock_fs>
 8010e1a:	2302      	movs	r3, #2
 8010e1c:	e065      	b.n	8010eea <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	0a5b      	lsrs	r3, r3, #9
 8010e22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010e24:	4413      	add	r3, r2
 8010e26:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	699a      	ldr	r2, [r3, #24]
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	68db      	ldr	r3, [r3, #12]
 8010e30:	429a      	cmp	r2, r3
 8010e32:	d90a      	bls.n	8010e4a <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	699a      	ldr	r2, [r3, #24]
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	7d1b      	ldrb	r3, [r3, #20]
 8010e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e44:	b2da      	uxtb	r2, r3
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	699b      	ldr	r3, [r3, #24]
 8010e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d040      	beq.n	8010ed8 <f_lseek+0x48c>
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	6a1b      	ldr	r3, [r3, #32]
 8010e5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	d03b      	beq.n	8010ed8 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	7d1b      	ldrb	r3, [r3, #20]
 8010e64:	b25b      	sxtb	r3, r3
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	da1d      	bge.n	8010ea6 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	7858      	ldrb	r0, [r3, #1]
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	6a1a      	ldr	r2, [r3, #32]
 8010e78:	2301      	movs	r3, #1
 8010e7a:	f7fe fcd9 	bl	800f830 <disk_write>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d009      	beq.n	8010e98 <f_lseek+0x44c>
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2201      	movs	r2, #1
 8010e88:	755a      	strb	r2, [r3, #21]
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	2101      	movs	r1, #1
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f7fe fda7 	bl	800f9e2 <unlock_fs>
 8010e94:	2301      	movs	r3, #1
 8010e96:	e028      	b.n	8010eea <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	7d1b      	ldrb	r3, [r3, #20]
 8010e9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010ea0:	b2da      	uxtb	r2, r3
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010ea6:	68bb      	ldr	r3, [r7, #8]
 8010ea8:	7858      	ldrb	r0, [r3, #1]
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010eb0:	2301      	movs	r3, #1
 8010eb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010eb4:	f7fe fc9c 	bl	800f7f0 <disk_read>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d009      	beq.n	8010ed2 <f_lseek+0x486>
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2201      	movs	r2, #1
 8010ec2:	755a      	strb	r2, [r3, #21]
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	2101      	movs	r1, #1
 8010ec8:	4618      	mov	r0, r3
 8010eca:	f7fe fd8a 	bl	800f9e2 <unlock_fs>
 8010ece:	2301      	movs	r3, #1
 8010ed0:	e00b      	b.n	8010eea <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010ed6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010ed8:	68bb      	ldr	r3, [r7, #8]
 8010eda:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8010ede:	4611      	mov	r1, r2
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7fe fd7e 	bl	800f9e2 <unlock_fs>
 8010ee6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8010eea:	4618      	mov	r0, r3
 8010eec:	3740      	adds	r7, #64	@ 0x40
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}
	...

08010ef4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010ef4:	b480      	push	{r7}
 8010ef6:	b087      	sub	sp, #28
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	60f8      	str	r0, [r7, #12]
 8010efc:	60b9      	str	r1, [r7, #8]
 8010efe:	4613      	mov	r3, r2
 8010f00:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010f02:	2301      	movs	r3, #1
 8010f04:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010f06:	2300      	movs	r3, #0
 8010f08:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8010f88 <FATFS_LinkDriverEx+0x94>)
 8010f0c:	7a5b      	ldrb	r3, [r3, #9]
 8010f0e:	b2db      	uxtb	r3, r3
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d131      	bne.n	8010f78 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010f14:	4b1c      	ldr	r3, [pc, #112]	@ (8010f88 <FATFS_LinkDriverEx+0x94>)
 8010f16:	7a5b      	ldrb	r3, [r3, #9]
 8010f18:	b2db      	uxtb	r3, r3
 8010f1a:	461a      	mov	r2, r3
 8010f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8010f88 <FATFS_LinkDriverEx+0x94>)
 8010f1e:	2100      	movs	r1, #0
 8010f20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010f22:	4b19      	ldr	r3, [pc, #100]	@ (8010f88 <FATFS_LinkDriverEx+0x94>)
 8010f24:	7a5b      	ldrb	r3, [r3, #9]
 8010f26:	b2db      	uxtb	r3, r3
 8010f28:	4a17      	ldr	r2, [pc, #92]	@ (8010f88 <FATFS_LinkDriverEx+0x94>)
 8010f2a:	009b      	lsls	r3, r3, #2
 8010f2c:	4413      	add	r3, r2
 8010f2e:	68fa      	ldr	r2, [r7, #12]
 8010f30:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010f32:	4b15      	ldr	r3, [pc, #84]	@ (8010f88 <FATFS_LinkDriverEx+0x94>)
 8010f34:	7a5b      	ldrb	r3, [r3, #9]
 8010f36:	b2db      	uxtb	r3, r3
 8010f38:	461a      	mov	r2, r3
 8010f3a:	4b13      	ldr	r3, [pc, #76]	@ (8010f88 <FATFS_LinkDriverEx+0x94>)
 8010f3c:	4413      	add	r3, r2
 8010f3e:	79fa      	ldrb	r2, [r7, #7]
 8010f40:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010f42:	4b11      	ldr	r3, [pc, #68]	@ (8010f88 <FATFS_LinkDriverEx+0x94>)
 8010f44:	7a5b      	ldrb	r3, [r3, #9]
 8010f46:	b2db      	uxtb	r3, r3
 8010f48:	1c5a      	adds	r2, r3, #1
 8010f4a:	b2d1      	uxtb	r1, r2
 8010f4c:	4a0e      	ldr	r2, [pc, #56]	@ (8010f88 <FATFS_LinkDriverEx+0x94>)
 8010f4e:	7251      	strb	r1, [r2, #9]
 8010f50:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010f52:	7dbb      	ldrb	r3, [r7, #22]
 8010f54:	3330      	adds	r3, #48	@ 0x30
 8010f56:	b2da      	uxtb	r2, r3
 8010f58:	68bb      	ldr	r3, [r7, #8]
 8010f5a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	3301      	adds	r3, #1
 8010f60:	223a      	movs	r2, #58	@ 0x3a
 8010f62:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	3302      	adds	r3, #2
 8010f68:	222f      	movs	r2, #47	@ 0x2f
 8010f6a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	3303      	adds	r3, #3
 8010f70:	2200      	movs	r2, #0
 8010f72:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010f74:	2300      	movs	r3, #0
 8010f76:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	371c      	adds	r7, #28
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f84:	4770      	bx	lr
 8010f86:	bf00      	nop
 8010f88:	2000148c 	.word	0x2000148c

08010f8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b082      	sub	sp, #8
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
 8010f94:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010f96:	2200      	movs	r2, #0
 8010f98:	6839      	ldr	r1, [r7, #0]
 8010f9a:	6878      	ldr	r0, [r7, #4]
 8010f9c:	f7ff ffaa 	bl	8010ef4 <FATFS_LinkDriverEx>
 8010fa0:	4603      	mov	r3, r0
}
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	3708      	adds	r7, #8
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	bd80      	pop	{r7, pc}

08010faa <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8010faa:	b580      	push	{r7, lr}
 8010fac:	b086      	sub	sp, #24
 8010fae:	af00      	add	r7, sp, #0
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	6039      	str	r1, [r7, #0]
 8010fb4:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	60fb      	str	r3, [r7, #12]
 8010fba:	2300      	movs	r3, #0
 8010fbc:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8010fbe:	f107 030c 	add.w	r3, r7, #12
 8010fc2:	2101      	movs	r1, #1
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f000 f901 	bl	80111cc <osSemaphoreCreate>
 8010fca:	4602      	mov	r2, r0
 8010fcc:	683b      	ldr	r3, [r7, #0]
 8010fce:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	bf14      	ite	ne
 8010fd8:	2301      	movne	r3, #1
 8010fda:	2300      	moveq	r3, #0
 8010fdc:	b2db      	uxtb	r3, r3
 8010fde:	617b      	str	r3, [r7, #20]

    return ret;
 8010fe0:	697b      	ldr	r3, [r7, #20]
}
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	3718      	adds	r7, #24
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bd80      	pop	{r7, pc}

08010fea <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8010fea:	b580      	push	{r7, lr}
 8010fec:	b082      	sub	sp, #8
 8010fee:	af00      	add	r7, sp, #0
 8010ff0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8010ff2:	6878      	ldr	r0, [r7, #4]
 8010ff4:	f000 f9a0 	bl	8011338 <osSemaphoreDelete>
#endif
    return 1;
 8010ff8:	2301      	movs	r3, #1
}
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	3708      	adds	r7, #8
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}

08011002 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8011002:	b580      	push	{r7, lr}
 8011004:	b084      	sub	sp, #16
 8011006:	af00      	add	r7, sp, #0
 8011008:	6078      	str	r0, [r7, #4]
  int ret = 0;
 801100a:	2300      	movs	r3, #0
 801100c:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 801100e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f000 f90c 	bl	8011230 <osSemaphoreWait>
 8011018:	4603      	mov	r3, r0
 801101a:	2b00      	cmp	r3, #0
 801101c:	d101      	bne.n	8011022 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 801101e:	2301      	movs	r3, #1
 8011020:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011022:	68fb      	ldr	r3, [r7, #12]
}
 8011024:	4618      	mov	r0, r3
 8011026:	3710      	adds	r7, #16
 8011028:	46bd      	mov	sp, r7
 801102a:	bd80      	pop	{r7, pc}

0801102c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b082      	sub	sp, #8
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	f000 f949 	bl	80112cc <osSemaphoreRelease>
#endif
}
 801103a:	bf00      	nop
 801103c:	3708      	adds	r7, #8
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}

08011042 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011042:	b480      	push	{r7}
 8011044:	b085      	sub	sp, #20
 8011046:	af00      	add	r7, sp, #0
 8011048:	4603      	mov	r3, r0
 801104a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801104c:	2300      	movs	r3, #0
 801104e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011050:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011054:	2b84      	cmp	r3, #132	@ 0x84
 8011056:	d005      	beq.n	8011064 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011058:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	4413      	add	r3, r2
 8011060:	3303      	adds	r3, #3
 8011062:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011064:	68fb      	ldr	r3, [r7, #12]
}
 8011066:	4618      	mov	r0, r3
 8011068:	3714      	adds	r7, #20
 801106a:	46bd      	mov	sp, r7
 801106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011070:	4770      	bx	lr

08011072 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011072:	b480      	push	{r7}
 8011074:	b083      	sub	sp, #12
 8011076:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011078:	f3ef 8305 	mrs	r3, IPSR
 801107c:	607b      	str	r3, [r7, #4]
  return(result);
 801107e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011080:	2b00      	cmp	r3, #0
 8011082:	bf14      	ite	ne
 8011084:	2301      	movne	r3, #1
 8011086:	2300      	moveq	r3, #0
 8011088:	b2db      	uxtb	r3, r3
}
 801108a:	4618      	mov	r0, r3
 801108c:	370c      	adds	r7, #12
 801108e:	46bd      	mov	sp, r7
 8011090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011094:	4770      	bx	lr

08011096 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011096:	b580      	push	{r7, lr}
 8011098:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801109a:	f001 fd4f 	bl	8012b3c <vTaskStartScheduler>
  
  return osOK;
 801109e:	2300      	movs	r3, #0
}
 80110a0:	4618      	mov	r0, r3
 80110a2:	bd80      	pop	{r7, pc}

080110a4 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80110a8:	f002 f99e 	bl	80133e8 <xTaskGetSchedulerState>
 80110ac:	4603      	mov	r3, r0
 80110ae:	2b01      	cmp	r3, #1
 80110b0:	d101      	bne.n	80110b6 <osKernelRunning+0x12>
    return 0;
 80110b2:	2300      	movs	r3, #0
 80110b4:	e000      	b.n	80110b8 <osKernelRunning+0x14>
  else
    return 1;
 80110b6:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80110b8:	4618      	mov	r0, r3
 80110ba:	bd80      	pop	{r7, pc}

080110bc <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80110c0:	f7ff ffd7 	bl	8011072 <inHandlerMode>
 80110c4:	4603      	mov	r3, r0
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d003      	beq.n	80110d2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80110ca:	f001 fe63 	bl	8012d94 <xTaskGetTickCountFromISR>
 80110ce:	4603      	mov	r3, r0
 80110d0:	e002      	b.n	80110d8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80110d2:	f001 fe4f 	bl	8012d74 <xTaskGetTickCount>
 80110d6:	4603      	mov	r3, r0
  }
}
 80110d8:	4618      	mov	r0, r3
 80110da:	bd80      	pop	{r7, pc}

080110dc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80110dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110de:	b089      	sub	sp, #36	@ 0x24
 80110e0:	af04      	add	r7, sp, #16
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	695b      	ldr	r3, [r3, #20]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d020      	beq.n	8011130 <osThreadCreate+0x54>
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	699b      	ldr	r3, [r3, #24]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d01c      	beq.n	8011130 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	685c      	ldr	r4, [r3, #4]
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	691e      	ldr	r6, [r3, #16]
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011108:	4618      	mov	r0, r3
 801110a:	f7ff ff9a 	bl	8011042 <makeFreeRtosPriority>
 801110e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	695b      	ldr	r3, [r3, #20]
 8011114:	687a      	ldr	r2, [r7, #4]
 8011116:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011118:	9202      	str	r2, [sp, #8]
 801111a:	9301      	str	r3, [sp, #4]
 801111c:	9100      	str	r1, [sp, #0]
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	4632      	mov	r2, r6
 8011122:	4629      	mov	r1, r5
 8011124:	4620      	mov	r0, r4
 8011126:	f001 fa93 	bl	8012650 <xTaskCreateStatic>
 801112a:	4603      	mov	r3, r0
 801112c:	60fb      	str	r3, [r7, #12]
 801112e:	e01c      	b.n	801116a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	685c      	ldr	r4, [r3, #4]
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801113c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011144:	4618      	mov	r0, r3
 8011146:	f7ff ff7c 	bl	8011042 <makeFreeRtosPriority>
 801114a:	4602      	mov	r2, r0
 801114c:	f107 030c 	add.w	r3, r7, #12
 8011150:	9301      	str	r3, [sp, #4]
 8011152:	9200      	str	r2, [sp, #0]
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	4632      	mov	r2, r6
 8011158:	4629      	mov	r1, r5
 801115a:	4620      	mov	r0, r4
 801115c:	f001 fade 	bl	801271c <xTaskCreate>
 8011160:	4603      	mov	r3, r0
 8011162:	2b01      	cmp	r3, #1
 8011164:	d001      	beq.n	801116a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011166:	2300      	movs	r3, #0
 8011168:	e000      	b.n	801116c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801116a:	68fb      	ldr	r3, [r7, #12]
}
 801116c:	4618      	mov	r0, r3
 801116e:	3714      	adds	r7, #20
 8011170:	46bd      	mov	sp, r7
 8011172:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011174 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b084      	sub	sp, #16
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d001      	beq.n	801118a <osDelay+0x16>
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	e000      	b.n	801118c <osDelay+0x18>
 801118a:	2301      	movs	r3, #1
 801118c:	4618      	mov	r0, r3
 801118e:	f001 fc9d 	bl	8012acc <vTaskDelay>
  
  return osOK;
 8011192:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011194:	4618      	mov	r0, r3
 8011196:	3710      	adds	r7, #16
 8011198:	46bd      	mov	sp, r7
 801119a:	bd80      	pop	{r7, pc}

0801119c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b082      	sub	sp, #8
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	685b      	ldr	r3, [r3, #4]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d007      	beq.n	80111bc <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	685b      	ldr	r3, [r3, #4]
 80111b0:	4619      	mov	r1, r3
 80111b2:	2001      	movs	r0, #1
 80111b4:	f000 fbeb 	bl	801198e <xQueueCreateMutexStatic>
 80111b8:	4603      	mov	r3, r0
 80111ba:	e003      	b.n	80111c4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80111bc:	2001      	movs	r0, #1
 80111be:	f000 fbce 	bl	801195e <xQueueCreateMutex>
 80111c2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80111c4:	4618      	mov	r0, r3
 80111c6:	3708      	adds	r7, #8
 80111c8:	46bd      	mov	sp, r7
 80111ca:	bd80      	pop	{r7, pc}

080111cc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b086      	sub	sp, #24
 80111d0:	af02      	add	r7, sp, #8
 80111d2:	6078      	str	r0, [r7, #4]
 80111d4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	685b      	ldr	r3, [r3, #4]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d00f      	beq.n	80111fe <osSemaphoreCreate+0x32>
    if (count == 1) {
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	2b01      	cmp	r3, #1
 80111e2:	d10a      	bne.n	80111fa <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	685b      	ldr	r3, [r3, #4]
 80111e8:	2203      	movs	r2, #3
 80111ea:	9200      	str	r2, [sp, #0]
 80111ec:	2200      	movs	r2, #0
 80111ee:	2100      	movs	r1, #0
 80111f0:	2001      	movs	r0, #1
 80111f2:	f000 fab1 	bl	8011758 <xQueueGenericCreateStatic>
 80111f6:	4603      	mov	r3, r0
 80111f8:	e016      	b.n	8011228 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80111fa:	2300      	movs	r3, #0
 80111fc:	e014      	b.n	8011228 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	2b01      	cmp	r3, #1
 8011202:	d110      	bne.n	8011226 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8011204:	2203      	movs	r2, #3
 8011206:	2100      	movs	r1, #0
 8011208:	2001      	movs	r0, #1
 801120a:	f000 fb2c 	bl	8011866 <xQueueGenericCreate>
 801120e:	60f8      	str	r0, [r7, #12]
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d005      	beq.n	8011222 <osSemaphoreCreate+0x56>
 8011216:	2300      	movs	r3, #0
 8011218:	2200      	movs	r2, #0
 801121a:	2100      	movs	r1, #0
 801121c:	68f8      	ldr	r0, [r7, #12]
 801121e:	f000 fbd1 	bl	80119c4 <xQueueGenericSend>
      return sema;
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	e000      	b.n	8011228 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8011226:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8011228:	4618      	mov	r0, r3
 801122a:	3710      	adds	r7, #16
 801122c:	46bd      	mov	sp, r7
 801122e:	bd80      	pop	{r7, pc}

08011230 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b084      	sub	sp, #16
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
 8011238:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801123a:	2300      	movs	r3, #0
 801123c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d101      	bne.n	8011248 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8011244:	2380      	movs	r3, #128	@ 0x80
 8011246:	e03a      	b.n	80112be <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8011248:	2300      	movs	r3, #0
 801124a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011252:	d103      	bne.n	801125c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8011254:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011258:	60fb      	str	r3, [r7, #12]
 801125a:	e009      	b.n	8011270 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d006      	beq.n	8011270 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d101      	bne.n	8011270 <osSemaphoreWait+0x40>
      ticks = 1;
 801126c:	2301      	movs	r3, #1
 801126e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011270:	f7ff feff 	bl	8011072 <inHandlerMode>
 8011274:	4603      	mov	r3, r0
 8011276:	2b00      	cmp	r3, #0
 8011278:	d017      	beq.n	80112aa <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801127a:	f107 0308 	add.w	r3, r7, #8
 801127e:	461a      	mov	r2, r3
 8011280:	2100      	movs	r1, #0
 8011282:	6878      	ldr	r0, [r7, #4]
 8011284:	f000 ffe4 	bl	8012250 <xQueueReceiveFromISR>
 8011288:	4603      	mov	r3, r0
 801128a:	2b01      	cmp	r3, #1
 801128c:	d001      	beq.n	8011292 <osSemaphoreWait+0x62>
      return osErrorOS;
 801128e:	23ff      	movs	r3, #255	@ 0xff
 8011290:	e015      	b.n	80112be <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011292:	68bb      	ldr	r3, [r7, #8]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d011      	beq.n	80112bc <osSemaphoreWait+0x8c>
 8011298:	4b0b      	ldr	r3, [pc, #44]	@ (80112c8 <osSemaphoreWait+0x98>)
 801129a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801129e:	601a      	str	r2, [r3, #0]
 80112a0:	f3bf 8f4f 	dsb	sy
 80112a4:	f3bf 8f6f 	isb	sy
 80112a8:	e008      	b.n	80112bc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80112aa:	68f9      	ldr	r1, [r7, #12]
 80112ac:	6878      	ldr	r0, [r7, #4]
 80112ae:	f000 feb7 	bl	8012020 <xQueueSemaphoreTake>
 80112b2:	4603      	mov	r3, r0
 80112b4:	2b01      	cmp	r3, #1
 80112b6:	d001      	beq.n	80112bc <osSemaphoreWait+0x8c>
    return osErrorOS;
 80112b8:	23ff      	movs	r3, #255	@ 0xff
 80112ba:	e000      	b.n	80112be <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80112bc:	2300      	movs	r3, #0
}
 80112be:	4618      	mov	r0, r3
 80112c0:	3710      	adds	r7, #16
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}
 80112c6:	bf00      	nop
 80112c8:	e000ed04 	.word	0xe000ed04

080112cc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b084      	sub	sp, #16
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80112d4:	2300      	movs	r3, #0
 80112d6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80112d8:	2300      	movs	r3, #0
 80112da:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80112dc:	f7ff fec9 	bl	8011072 <inHandlerMode>
 80112e0:	4603      	mov	r3, r0
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d016      	beq.n	8011314 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80112e6:	f107 0308 	add.w	r3, r7, #8
 80112ea:	4619      	mov	r1, r3
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f000 fd16 	bl	8011d1e <xQueueGiveFromISR>
 80112f2:	4603      	mov	r3, r0
 80112f4:	2b01      	cmp	r3, #1
 80112f6:	d001      	beq.n	80112fc <osSemaphoreRelease+0x30>
      return osErrorOS;
 80112f8:	23ff      	movs	r3, #255	@ 0xff
 80112fa:	e017      	b.n	801132c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d013      	beq.n	801132a <osSemaphoreRelease+0x5e>
 8011302:	4b0c      	ldr	r3, [pc, #48]	@ (8011334 <osSemaphoreRelease+0x68>)
 8011304:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011308:	601a      	str	r2, [r3, #0]
 801130a:	f3bf 8f4f 	dsb	sy
 801130e:	f3bf 8f6f 	isb	sy
 8011312:	e00a      	b.n	801132a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8011314:	2300      	movs	r3, #0
 8011316:	2200      	movs	r2, #0
 8011318:	2100      	movs	r1, #0
 801131a:	6878      	ldr	r0, [r7, #4]
 801131c:	f000 fb52 	bl	80119c4 <xQueueGenericSend>
 8011320:	4603      	mov	r3, r0
 8011322:	2b01      	cmp	r3, #1
 8011324:	d001      	beq.n	801132a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8011326:	23ff      	movs	r3, #255	@ 0xff
 8011328:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801132a:	68fb      	ldr	r3, [r7, #12]
}
 801132c:	4618      	mov	r0, r3
 801132e:	3710      	adds	r7, #16
 8011330:	46bd      	mov	sp, r7
 8011332:	bd80      	pop	{r7, pc}
 8011334:	e000ed04 	.word	0xe000ed04

08011338 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b082      	sub	sp, #8
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8011340:	f7ff fe97 	bl	8011072 <inHandlerMode>
 8011344:	4603      	mov	r3, r0
 8011346:	2b00      	cmp	r3, #0
 8011348:	d001      	beq.n	801134e <osSemaphoreDelete+0x16>
    return osErrorISR;
 801134a:	2382      	movs	r3, #130	@ 0x82
 801134c:	e003      	b.n	8011356 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f001 f806 	bl	8012360 <vQueueDelete>

  return osOK; 
 8011354:	2300      	movs	r3, #0
}
 8011356:	4618      	mov	r0, r3
 8011358:	3708      	adds	r7, #8
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}

0801135e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 801135e:	b590      	push	{r4, r7, lr}
 8011360:	b085      	sub	sp, #20
 8011362:	af02      	add	r7, sp, #8
 8011364:	6078      	str	r0, [r7, #4]
 8011366:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	689b      	ldr	r3, [r3, #8]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d011      	beq.n	8011394 <osMessageCreate+0x36>
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	68db      	ldr	r3, [r3, #12]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d00d      	beq.n	8011394 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	6818      	ldr	r0, [r3, #0]
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	6859      	ldr	r1, [r3, #4]
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	689a      	ldr	r2, [r3, #8]
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	68db      	ldr	r3, [r3, #12]
 8011388:	2400      	movs	r4, #0
 801138a:	9400      	str	r4, [sp, #0]
 801138c:	f000 f9e4 	bl	8011758 <xQueueGenericCreateStatic>
 8011390:	4603      	mov	r3, r0
 8011392:	e008      	b.n	80113a6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	6818      	ldr	r0, [r3, #0]
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	685b      	ldr	r3, [r3, #4]
 801139c:	2200      	movs	r2, #0
 801139e:	4619      	mov	r1, r3
 80113a0:	f000 fa61 	bl	8011866 <xQueueGenericCreate>
 80113a4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80113a6:	4618      	mov	r0, r3
 80113a8:	370c      	adds	r7, #12
 80113aa:	46bd      	mov	sp, r7
 80113ac:	bd90      	pop	{r4, r7, pc}
	...

080113b0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b086      	sub	sp, #24
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	60f8      	str	r0, [r7, #12]
 80113b8:	60b9      	str	r1, [r7, #8]
 80113ba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80113bc:	2300      	movs	r3, #0
 80113be:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d101      	bne.n	80113ce <osMessagePut+0x1e>
    ticks = 1;
 80113ca:	2301      	movs	r3, #1
 80113cc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80113ce:	f7ff fe50 	bl	8011072 <inHandlerMode>
 80113d2:	4603      	mov	r3, r0
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d018      	beq.n	801140a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80113d8:	f107 0210 	add.w	r2, r7, #16
 80113dc:	f107 0108 	add.w	r1, r7, #8
 80113e0:	2300      	movs	r3, #0
 80113e2:	68f8      	ldr	r0, [r7, #12]
 80113e4:	f000 fbf8 	bl	8011bd8 <xQueueGenericSendFromISR>
 80113e8:	4603      	mov	r3, r0
 80113ea:	2b01      	cmp	r3, #1
 80113ec:	d001      	beq.n	80113f2 <osMessagePut+0x42>
      return osErrorOS;
 80113ee:	23ff      	movs	r3, #255	@ 0xff
 80113f0:	e018      	b.n	8011424 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80113f2:	693b      	ldr	r3, [r7, #16]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d014      	beq.n	8011422 <osMessagePut+0x72>
 80113f8:	4b0c      	ldr	r3, [pc, #48]	@ (801142c <osMessagePut+0x7c>)
 80113fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80113fe:	601a      	str	r2, [r3, #0]
 8011400:	f3bf 8f4f 	dsb	sy
 8011404:	f3bf 8f6f 	isb	sy
 8011408:	e00b      	b.n	8011422 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801140a:	f107 0108 	add.w	r1, r7, #8
 801140e:	2300      	movs	r3, #0
 8011410:	697a      	ldr	r2, [r7, #20]
 8011412:	68f8      	ldr	r0, [r7, #12]
 8011414:	f000 fad6 	bl	80119c4 <xQueueGenericSend>
 8011418:	4603      	mov	r3, r0
 801141a:	2b01      	cmp	r3, #1
 801141c:	d001      	beq.n	8011422 <osMessagePut+0x72>
      return osErrorOS;
 801141e:	23ff      	movs	r3, #255	@ 0xff
 8011420:	e000      	b.n	8011424 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8011422:	2300      	movs	r3, #0
}
 8011424:	4618      	mov	r0, r3
 8011426:	3718      	adds	r7, #24
 8011428:	46bd      	mov	sp, r7
 801142a:	bd80      	pop	{r7, pc}
 801142c:	e000ed04 	.word	0xe000ed04

08011430 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8011430:	b590      	push	{r4, r7, lr}
 8011432:	b08b      	sub	sp, #44	@ 0x2c
 8011434:	af00      	add	r7, sp, #0
 8011436:	60f8      	str	r0, [r7, #12]
 8011438:	60b9      	str	r1, [r7, #8]
 801143a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 801143c:	68bb      	ldr	r3, [r7, #8]
 801143e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8011440:	2300      	movs	r3, #0
 8011442:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8011444:	68bb      	ldr	r3, [r7, #8]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d10a      	bne.n	8011460 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801144a:	2380      	movs	r3, #128	@ 0x80
 801144c:	617b      	str	r3, [r7, #20]
    return event;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	461c      	mov	r4, r3
 8011452:	f107 0314 	add.w	r3, r7, #20
 8011456:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801145a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801145e:	e054      	b.n	801150a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011460:	2300      	movs	r3, #0
 8011462:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8011464:	2300      	movs	r3, #0
 8011466:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801146e:	d103      	bne.n	8011478 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8011470:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011474:	627b      	str	r3, [r7, #36]	@ 0x24
 8011476:	e009      	b.n	801148c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d006      	beq.n	801148c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8011482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011484:	2b00      	cmp	r3, #0
 8011486:	d101      	bne.n	801148c <osMessageGet+0x5c>
      ticks = 1;
 8011488:	2301      	movs	r3, #1
 801148a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 801148c:	f7ff fdf1 	bl	8011072 <inHandlerMode>
 8011490:	4603      	mov	r3, r0
 8011492:	2b00      	cmp	r3, #0
 8011494:	d01c      	beq.n	80114d0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8011496:	f107 0220 	add.w	r2, r7, #32
 801149a:	f107 0314 	add.w	r3, r7, #20
 801149e:	3304      	adds	r3, #4
 80114a0:	4619      	mov	r1, r3
 80114a2:	68b8      	ldr	r0, [r7, #8]
 80114a4:	f000 fed4 	bl	8012250 <xQueueReceiveFromISR>
 80114a8:	4603      	mov	r3, r0
 80114aa:	2b01      	cmp	r3, #1
 80114ac:	d102      	bne.n	80114b4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80114ae:	2310      	movs	r3, #16
 80114b0:	617b      	str	r3, [r7, #20]
 80114b2:	e001      	b.n	80114b8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80114b4:	2300      	movs	r3, #0
 80114b6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80114b8:	6a3b      	ldr	r3, [r7, #32]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d01d      	beq.n	80114fa <osMessageGet+0xca>
 80114be:	4b15      	ldr	r3, [pc, #84]	@ (8011514 <osMessageGet+0xe4>)
 80114c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80114c4:	601a      	str	r2, [r3, #0]
 80114c6:	f3bf 8f4f 	dsb	sy
 80114ca:	f3bf 8f6f 	isb	sy
 80114ce:	e014      	b.n	80114fa <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80114d0:	f107 0314 	add.w	r3, r7, #20
 80114d4:	3304      	adds	r3, #4
 80114d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80114d8:	4619      	mov	r1, r3
 80114da:	68b8      	ldr	r0, [r7, #8]
 80114dc:	f000 fcb8 	bl	8011e50 <xQueueReceive>
 80114e0:	4603      	mov	r3, r0
 80114e2:	2b01      	cmp	r3, #1
 80114e4:	d102      	bne.n	80114ec <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80114e6:	2310      	movs	r3, #16
 80114e8:	617b      	str	r3, [r7, #20]
 80114ea:	e006      	b.n	80114fa <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80114ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d101      	bne.n	80114f6 <osMessageGet+0xc6>
 80114f2:	2300      	movs	r3, #0
 80114f4:	e000      	b.n	80114f8 <osMessageGet+0xc8>
 80114f6:	2340      	movs	r3, #64	@ 0x40
 80114f8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	461c      	mov	r4, r3
 80114fe:	f107 0314 	add.w	r3, r7, #20
 8011502:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011506:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801150a:	68f8      	ldr	r0, [r7, #12]
 801150c:	372c      	adds	r7, #44	@ 0x2c
 801150e:	46bd      	mov	sp, r7
 8011510:	bd90      	pop	{r4, r7, pc}
 8011512:	bf00      	nop
 8011514:	e000ed04 	.word	0xe000ed04

08011518 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011518:	b480      	push	{r7}
 801151a:	b083      	sub	sp, #12
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	f103 0208 	add.w	r2, r3, #8
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011530:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	f103 0208 	add.w	r2, r3, #8
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	f103 0208 	add.w	r2, r3, #8
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	2200      	movs	r2, #0
 801154a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801154c:	bf00      	nop
 801154e:	370c      	adds	r7, #12
 8011550:	46bd      	mov	sp, r7
 8011552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011556:	4770      	bx	lr

08011558 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011558:	b480      	push	{r7}
 801155a:	b083      	sub	sp, #12
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	2200      	movs	r2, #0
 8011564:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011566:	bf00      	nop
 8011568:	370c      	adds	r7, #12
 801156a:	46bd      	mov	sp, r7
 801156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011570:	4770      	bx	lr

08011572 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011572:	b480      	push	{r7}
 8011574:	b085      	sub	sp, #20
 8011576:	af00      	add	r7, sp, #0
 8011578:	6078      	str	r0, [r7, #4]
 801157a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	685b      	ldr	r3, [r3, #4]
 8011580:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011582:	683b      	ldr	r3, [r7, #0]
 8011584:	68fa      	ldr	r2, [r7, #12]
 8011586:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	689a      	ldr	r2, [r3, #8]
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	689b      	ldr	r3, [r3, #8]
 8011594:	683a      	ldr	r2, [r7, #0]
 8011596:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	683a      	ldr	r2, [r7, #0]
 801159c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	687a      	ldr	r2, [r7, #4]
 80115a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	1c5a      	adds	r2, r3, #1
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	601a      	str	r2, [r3, #0]
}
 80115ae:	bf00      	nop
 80115b0:	3714      	adds	r7, #20
 80115b2:	46bd      	mov	sp, r7
 80115b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b8:	4770      	bx	lr

080115ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80115ba:	b480      	push	{r7}
 80115bc:	b085      	sub	sp, #20
 80115be:	af00      	add	r7, sp, #0
 80115c0:	6078      	str	r0, [r7, #4]
 80115c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80115ca:	68bb      	ldr	r3, [r7, #8]
 80115cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80115d0:	d103      	bne.n	80115da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	691b      	ldr	r3, [r3, #16]
 80115d6:	60fb      	str	r3, [r7, #12]
 80115d8:	e00c      	b.n	80115f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	3308      	adds	r3, #8
 80115de:	60fb      	str	r3, [r7, #12]
 80115e0:	e002      	b.n	80115e8 <vListInsert+0x2e>
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	685b      	ldr	r3, [r3, #4]
 80115e6:	60fb      	str	r3, [r7, #12]
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	685b      	ldr	r3, [r3, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	68ba      	ldr	r2, [r7, #8]
 80115f0:	429a      	cmp	r2, r3
 80115f2:	d2f6      	bcs.n	80115e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	685a      	ldr	r2, [r3, #4]
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	685b      	ldr	r3, [r3, #4]
 8011600:	683a      	ldr	r2, [r7, #0]
 8011602:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011604:	683b      	ldr	r3, [r7, #0]
 8011606:	68fa      	ldr	r2, [r7, #12]
 8011608:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	683a      	ldr	r2, [r7, #0]
 801160e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	687a      	ldr	r2, [r7, #4]
 8011614:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	1c5a      	adds	r2, r3, #1
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	601a      	str	r2, [r3, #0]
}
 8011620:	bf00      	nop
 8011622:	3714      	adds	r7, #20
 8011624:	46bd      	mov	sp, r7
 8011626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162a:	4770      	bx	lr

0801162c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801162c:	b480      	push	{r7}
 801162e:	b085      	sub	sp, #20
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	691b      	ldr	r3, [r3, #16]
 8011638:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	685b      	ldr	r3, [r3, #4]
 801163e:	687a      	ldr	r2, [r7, #4]
 8011640:	6892      	ldr	r2, [r2, #8]
 8011642:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	689b      	ldr	r3, [r3, #8]
 8011648:	687a      	ldr	r2, [r7, #4]
 801164a:	6852      	ldr	r2, [r2, #4]
 801164c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	685b      	ldr	r3, [r3, #4]
 8011652:	687a      	ldr	r2, [r7, #4]
 8011654:	429a      	cmp	r2, r3
 8011656:	d103      	bne.n	8011660 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	689a      	ldr	r2, [r3, #8]
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2200      	movs	r2, #0
 8011664:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	1e5a      	subs	r2, r3, #1
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	681b      	ldr	r3, [r3, #0]
}
 8011674:	4618      	mov	r0, r3
 8011676:	3714      	adds	r7, #20
 8011678:	46bd      	mov	sp, r7
 801167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167e:	4770      	bx	lr

08011680 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b084      	sub	sp, #16
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
 8011688:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d10d      	bne.n	80116b0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011698:	b672      	cpsid	i
 801169a:	f383 8811 	msr	BASEPRI, r3
 801169e:	f3bf 8f6f 	isb	sy
 80116a2:	f3bf 8f4f 	dsb	sy
 80116a6:	b662      	cpsie	i
 80116a8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80116aa:	bf00      	nop
 80116ac:	bf00      	nop
 80116ae:	e7fd      	b.n	80116ac <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80116b0:	f002 f9ec 	bl	8013a8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	681a      	ldr	r2, [r3, #0]
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116bc:	68f9      	ldr	r1, [r7, #12]
 80116be:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80116c0:	fb01 f303 	mul.w	r3, r1, r3
 80116c4:	441a      	add	r2, r3
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	2200      	movs	r2, #0
 80116ce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	681a      	ldr	r2, [r3, #0]
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	681a      	ldr	r2, [r3, #0]
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116e0:	3b01      	subs	r3, #1
 80116e2:	68f9      	ldr	r1, [r7, #12]
 80116e4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80116e6:	fb01 f303 	mul.w	r3, r1, r3
 80116ea:	441a      	add	r2, r3
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	22ff      	movs	r2, #255	@ 0xff
 80116f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	22ff      	movs	r2, #255	@ 0xff
 80116fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d114      	bne.n	8011730 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	691b      	ldr	r3, [r3, #16]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d01a      	beq.n	8011744 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	3310      	adds	r3, #16
 8011712:	4618      	mov	r0, r3
 8011714:	f001 fc9a 	bl	801304c <xTaskRemoveFromEventList>
 8011718:	4603      	mov	r3, r0
 801171a:	2b00      	cmp	r3, #0
 801171c:	d012      	beq.n	8011744 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801171e:	4b0d      	ldr	r3, [pc, #52]	@ (8011754 <xQueueGenericReset+0xd4>)
 8011720:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011724:	601a      	str	r2, [r3, #0]
 8011726:	f3bf 8f4f 	dsb	sy
 801172a:	f3bf 8f6f 	isb	sy
 801172e:	e009      	b.n	8011744 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	3310      	adds	r3, #16
 8011734:	4618      	mov	r0, r3
 8011736:	f7ff feef 	bl	8011518 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	3324      	adds	r3, #36	@ 0x24
 801173e:	4618      	mov	r0, r3
 8011740:	f7ff feea 	bl	8011518 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011744:	f002 f9d8 	bl	8013af8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011748:	2301      	movs	r3, #1
}
 801174a:	4618      	mov	r0, r3
 801174c:	3710      	adds	r7, #16
 801174e:	46bd      	mov	sp, r7
 8011750:	bd80      	pop	{r7, pc}
 8011752:	bf00      	nop
 8011754:	e000ed04 	.word	0xe000ed04

08011758 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011758:	b580      	push	{r7, lr}
 801175a:	b08e      	sub	sp, #56	@ 0x38
 801175c:	af02      	add	r7, sp, #8
 801175e:	60f8      	str	r0, [r7, #12]
 8011760:	60b9      	str	r1, [r7, #8]
 8011762:	607a      	str	r2, [r7, #4]
 8011764:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d10d      	bne.n	8011788 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 801176c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011770:	b672      	cpsid	i
 8011772:	f383 8811 	msr	BASEPRI, r3
 8011776:	f3bf 8f6f 	isb	sy
 801177a:	f3bf 8f4f 	dsb	sy
 801177e:	b662      	cpsie	i
 8011780:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8011782:	bf00      	nop
 8011784:	bf00      	nop
 8011786:	e7fd      	b.n	8011784 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d10d      	bne.n	80117aa <xQueueGenericCreateStatic+0x52>
	__asm volatile
 801178e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011792:	b672      	cpsid	i
 8011794:	f383 8811 	msr	BASEPRI, r3
 8011798:	f3bf 8f6f 	isb	sy
 801179c:	f3bf 8f4f 	dsb	sy
 80117a0:	b662      	cpsie	i
 80117a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80117a4:	bf00      	nop
 80117a6:	bf00      	nop
 80117a8:	e7fd      	b.n	80117a6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d002      	beq.n	80117b6 <xQueueGenericCreateStatic+0x5e>
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d001      	beq.n	80117ba <xQueueGenericCreateStatic+0x62>
 80117b6:	2301      	movs	r3, #1
 80117b8:	e000      	b.n	80117bc <xQueueGenericCreateStatic+0x64>
 80117ba:	2300      	movs	r3, #0
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d10d      	bne.n	80117dc <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80117c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117c4:	b672      	cpsid	i
 80117c6:	f383 8811 	msr	BASEPRI, r3
 80117ca:	f3bf 8f6f 	isb	sy
 80117ce:	f3bf 8f4f 	dsb	sy
 80117d2:	b662      	cpsie	i
 80117d4:	623b      	str	r3, [r7, #32]
}
 80117d6:	bf00      	nop
 80117d8:	bf00      	nop
 80117da:	e7fd      	b.n	80117d8 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d102      	bne.n	80117e8 <xQueueGenericCreateStatic+0x90>
 80117e2:	68bb      	ldr	r3, [r7, #8]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d101      	bne.n	80117ec <xQueueGenericCreateStatic+0x94>
 80117e8:	2301      	movs	r3, #1
 80117ea:	e000      	b.n	80117ee <xQueueGenericCreateStatic+0x96>
 80117ec:	2300      	movs	r3, #0
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d10d      	bne.n	801180e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80117f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117f6:	b672      	cpsid	i
 80117f8:	f383 8811 	msr	BASEPRI, r3
 80117fc:	f3bf 8f6f 	isb	sy
 8011800:	f3bf 8f4f 	dsb	sy
 8011804:	b662      	cpsie	i
 8011806:	61fb      	str	r3, [r7, #28]
}
 8011808:	bf00      	nop
 801180a:	bf00      	nop
 801180c:	e7fd      	b.n	801180a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801180e:	2348      	movs	r3, #72	@ 0x48
 8011810:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	2b48      	cmp	r3, #72	@ 0x48
 8011816:	d00d      	beq.n	8011834 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8011818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801181c:	b672      	cpsid	i
 801181e:	f383 8811 	msr	BASEPRI, r3
 8011822:	f3bf 8f6f 	isb	sy
 8011826:	f3bf 8f4f 	dsb	sy
 801182a:	b662      	cpsie	i
 801182c:	61bb      	str	r3, [r7, #24]
}
 801182e:	bf00      	nop
 8011830:	bf00      	nop
 8011832:	e7fd      	b.n	8011830 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011834:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011836:	683b      	ldr	r3, [r7, #0]
 8011838:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801183a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801183c:	2b00      	cmp	r3, #0
 801183e:	d00d      	beq.n	801185c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011842:	2201      	movs	r2, #1
 8011844:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011848:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 801184c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801184e:	9300      	str	r3, [sp, #0]
 8011850:	4613      	mov	r3, r2
 8011852:	687a      	ldr	r2, [r7, #4]
 8011854:	68b9      	ldr	r1, [r7, #8]
 8011856:	68f8      	ldr	r0, [r7, #12]
 8011858:	f000 f848 	bl	80118ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801185c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 801185e:	4618      	mov	r0, r3
 8011860:	3730      	adds	r7, #48	@ 0x30
 8011862:	46bd      	mov	sp, r7
 8011864:	bd80      	pop	{r7, pc}

08011866 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011866:	b580      	push	{r7, lr}
 8011868:	b08a      	sub	sp, #40	@ 0x28
 801186a:	af02      	add	r7, sp, #8
 801186c:	60f8      	str	r0, [r7, #12]
 801186e:	60b9      	str	r1, [r7, #8]
 8011870:	4613      	mov	r3, r2
 8011872:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d10d      	bne.n	8011896 <xQueueGenericCreate+0x30>
	__asm volatile
 801187a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801187e:	b672      	cpsid	i
 8011880:	f383 8811 	msr	BASEPRI, r3
 8011884:	f3bf 8f6f 	isb	sy
 8011888:	f3bf 8f4f 	dsb	sy
 801188c:	b662      	cpsie	i
 801188e:	613b      	str	r3, [r7, #16]
}
 8011890:	bf00      	nop
 8011892:	bf00      	nop
 8011894:	e7fd      	b.n	8011892 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011896:	68bb      	ldr	r3, [r7, #8]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d102      	bne.n	80118a2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801189c:	2300      	movs	r3, #0
 801189e:	61fb      	str	r3, [r7, #28]
 80118a0:	e004      	b.n	80118ac <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	68ba      	ldr	r2, [r7, #8]
 80118a6:	fb02 f303 	mul.w	r3, r2, r3
 80118aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80118ac:	69fb      	ldr	r3, [r7, #28]
 80118ae:	3348      	adds	r3, #72	@ 0x48
 80118b0:	4618      	mov	r0, r3
 80118b2:	f002 fa19 	bl	8013ce8 <pvPortMalloc>
 80118b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80118b8:	69bb      	ldr	r3, [r7, #24]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d011      	beq.n	80118e2 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80118be:	69bb      	ldr	r3, [r7, #24]
 80118c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80118c2:	697b      	ldr	r3, [r7, #20]
 80118c4:	3348      	adds	r3, #72	@ 0x48
 80118c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80118c8:	69bb      	ldr	r3, [r7, #24]
 80118ca:	2200      	movs	r2, #0
 80118cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80118d0:	79fa      	ldrb	r2, [r7, #7]
 80118d2:	69bb      	ldr	r3, [r7, #24]
 80118d4:	9300      	str	r3, [sp, #0]
 80118d6:	4613      	mov	r3, r2
 80118d8:	697a      	ldr	r2, [r7, #20]
 80118da:	68b9      	ldr	r1, [r7, #8]
 80118dc:	68f8      	ldr	r0, [r7, #12]
 80118de:	f000 f805 	bl	80118ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80118e2:	69bb      	ldr	r3, [r7, #24]
	}
 80118e4:	4618      	mov	r0, r3
 80118e6:	3720      	adds	r7, #32
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}

080118ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b084      	sub	sp, #16
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	60f8      	str	r0, [r7, #12]
 80118f4:	60b9      	str	r1, [r7, #8]
 80118f6:	607a      	str	r2, [r7, #4]
 80118f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80118fa:	68bb      	ldr	r3, [r7, #8]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d103      	bne.n	8011908 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011900:	69bb      	ldr	r3, [r7, #24]
 8011902:	69ba      	ldr	r2, [r7, #24]
 8011904:	601a      	str	r2, [r3, #0]
 8011906:	e002      	b.n	801190e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011908:	69bb      	ldr	r3, [r7, #24]
 801190a:	687a      	ldr	r2, [r7, #4]
 801190c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801190e:	69bb      	ldr	r3, [r7, #24]
 8011910:	68fa      	ldr	r2, [r7, #12]
 8011912:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011914:	69bb      	ldr	r3, [r7, #24]
 8011916:	68ba      	ldr	r2, [r7, #8]
 8011918:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801191a:	2101      	movs	r1, #1
 801191c:	69b8      	ldr	r0, [r7, #24]
 801191e:	f7ff feaf 	bl	8011680 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011922:	bf00      	nop
 8011924:	3710      	adds	r7, #16
 8011926:	46bd      	mov	sp, r7
 8011928:	bd80      	pop	{r7, pc}

0801192a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801192a:	b580      	push	{r7, lr}
 801192c:	b082      	sub	sp, #8
 801192e:	af00      	add	r7, sp, #0
 8011930:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d00e      	beq.n	8011956 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2200      	movs	r2, #0
 801193c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2200      	movs	r2, #0
 8011942:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	2200      	movs	r2, #0
 8011948:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801194a:	2300      	movs	r3, #0
 801194c:	2200      	movs	r2, #0
 801194e:	2100      	movs	r1, #0
 8011950:	6878      	ldr	r0, [r7, #4]
 8011952:	f000 f837 	bl	80119c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8011956:	bf00      	nop
 8011958:	3708      	adds	r7, #8
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}

0801195e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801195e:	b580      	push	{r7, lr}
 8011960:	b086      	sub	sp, #24
 8011962:	af00      	add	r7, sp, #0
 8011964:	4603      	mov	r3, r0
 8011966:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011968:	2301      	movs	r3, #1
 801196a:	617b      	str	r3, [r7, #20]
 801196c:	2300      	movs	r3, #0
 801196e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011970:	79fb      	ldrb	r3, [r7, #7]
 8011972:	461a      	mov	r2, r3
 8011974:	6939      	ldr	r1, [r7, #16]
 8011976:	6978      	ldr	r0, [r7, #20]
 8011978:	f7ff ff75 	bl	8011866 <xQueueGenericCreate>
 801197c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801197e:	68f8      	ldr	r0, [r7, #12]
 8011980:	f7ff ffd3 	bl	801192a <prvInitialiseMutex>

		return xNewQueue;
 8011984:	68fb      	ldr	r3, [r7, #12]
	}
 8011986:	4618      	mov	r0, r3
 8011988:	3718      	adds	r7, #24
 801198a:	46bd      	mov	sp, r7
 801198c:	bd80      	pop	{r7, pc}

0801198e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801198e:	b580      	push	{r7, lr}
 8011990:	b088      	sub	sp, #32
 8011992:	af02      	add	r7, sp, #8
 8011994:	4603      	mov	r3, r0
 8011996:	6039      	str	r1, [r7, #0]
 8011998:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801199a:	2301      	movs	r3, #1
 801199c:	617b      	str	r3, [r7, #20]
 801199e:	2300      	movs	r3, #0
 80119a0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80119a2:	79fb      	ldrb	r3, [r7, #7]
 80119a4:	9300      	str	r3, [sp, #0]
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	2200      	movs	r2, #0
 80119aa:	6939      	ldr	r1, [r7, #16]
 80119ac:	6978      	ldr	r0, [r7, #20]
 80119ae:	f7ff fed3 	bl	8011758 <xQueueGenericCreateStatic>
 80119b2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80119b4:	68f8      	ldr	r0, [r7, #12]
 80119b6:	f7ff ffb8 	bl	801192a <prvInitialiseMutex>

		return xNewQueue;
 80119ba:	68fb      	ldr	r3, [r7, #12]
	}
 80119bc:	4618      	mov	r0, r3
 80119be:	3718      	adds	r7, #24
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bd80      	pop	{r7, pc}

080119c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b08e      	sub	sp, #56	@ 0x38
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	60f8      	str	r0, [r7, #12]
 80119cc:	60b9      	str	r1, [r7, #8]
 80119ce:	607a      	str	r2, [r7, #4]
 80119d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80119d2:	2300      	movs	r3, #0
 80119d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80119da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d10d      	bne.n	80119fc <xQueueGenericSend+0x38>
	__asm volatile
 80119e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119e4:	b672      	cpsid	i
 80119e6:	f383 8811 	msr	BASEPRI, r3
 80119ea:	f3bf 8f6f 	isb	sy
 80119ee:	f3bf 8f4f 	dsb	sy
 80119f2:	b662      	cpsie	i
 80119f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80119f6:	bf00      	nop
 80119f8:	bf00      	nop
 80119fa:	e7fd      	b.n	80119f8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80119fc:	68bb      	ldr	r3, [r7, #8]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d103      	bne.n	8011a0a <xQueueGenericSend+0x46>
 8011a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d101      	bne.n	8011a0e <xQueueGenericSend+0x4a>
 8011a0a:	2301      	movs	r3, #1
 8011a0c:	e000      	b.n	8011a10 <xQueueGenericSend+0x4c>
 8011a0e:	2300      	movs	r3, #0
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d10d      	bne.n	8011a30 <xQueueGenericSend+0x6c>
	__asm volatile
 8011a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a18:	b672      	cpsid	i
 8011a1a:	f383 8811 	msr	BASEPRI, r3
 8011a1e:	f3bf 8f6f 	isb	sy
 8011a22:	f3bf 8f4f 	dsb	sy
 8011a26:	b662      	cpsie	i
 8011a28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011a2a:	bf00      	nop
 8011a2c:	bf00      	nop
 8011a2e:	e7fd      	b.n	8011a2c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	2b02      	cmp	r3, #2
 8011a34:	d103      	bne.n	8011a3e <xQueueGenericSend+0x7a>
 8011a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011a3a:	2b01      	cmp	r3, #1
 8011a3c:	d101      	bne.n	8011a42 <xQueueGenericSend+0x7e>
 8011a3e:	2301      	movs	r3, #1
 8011a40:	e000      	b.n	8011a44 <xQueueGenericSend+0x80>
 8011a42:	2300      	movs	r3, #0
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d10d      	bne.n	8011a64 <xQueueGenericSend+0xa0>
	__asm volatile
 8011a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a4c:	b672      	cpsid	i
 8011a4e:	f383 8811 	msr	BASEPRI, r3
 8011a52:	f3bf 8f6f 	isb	sy
 8011a56:	f3bf 8f4f 	dsb	sy
 8011a5a:	b662      	cpsie	i
 8011a5c:	623b      	str	r3, [r7, #32]
}
 8011a5e:	bf00      	nop
 8011a60:	bf00      	nop
 8011a62:	e7fd      	b.n	8011a60 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011a64:	f001 fcc0 	bl	80133e8 <xTaskGetSchedulerState>
 8011a68:	4603      	mov	r3, r0
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d102      	bne.n	8011a74 <xQueueGenericSend+0xb0>
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d101      	bne.n	8011a78 <xQueueGenericSend+0xb4>
 8011a74:	2301      	movs	r3, #1
 8011a76:	e000      	b.n	8011a7a <xQueueGenericSend+0xb6>
 8011a78:	2300      	movs	r3, #0
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d10d      	bne.n	8011a9a <xQueueGenericSend+0xd6>
	__asm volatile
 8011a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a82:	b672      	cpsid	i
 8011a84:	f383 8811 	msr	BASEPRI, r3
 8011a88:	f3bf 8f6f 	isb	sy
 8011a8c:	f3bf 8f4f 	dsb	sy
 8011a90:	b662      	cpsie	i
 8011a92:	61fb      	str	r3, [r7, #28]
}
 8011a94:	bf00      	nop
 8011a96:	bf00      	nop
 8011a98:	e7fd      	b.n	8011a96 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011a9a:	f001 fff7 	bl	8013a8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011aa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011aa6:	429a      	cmp	r2, r3
 8011aa8:	d302      	bcc.n	8011ab0 <xQueueGenericSend+0xec>
 8011aaa:	683b      	ldr	r3, [r7, #0]
 8011aac:	2b02      	cmp	r3, #2
 8011aae:	d129      	bne.n	8011b04 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011ab0:	683a      	ldr	r2, [r7, #0]
 8011ab2:	68b9      	ldr	r1, [r7, #8]
 8011ab4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011ab6:	f000 fc91 	bl	80123dc <prvCopyDataToQueue>
 8011aba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d010      	beq.n	8011ae6 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ac6:	3324      	adds	r3, #36	@ 0x24
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f001 fabf 	bl	801304c <xTaskRemoveFromEventList>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d013      	beq.n	8011afc <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011ad4:	4b3f      	ldr	r3, [pc, #252]	@ (8011bd4 <xQueueGenericSend+0x210>)
 8011ad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011ada:	601a      	str	r2, [r3, #0]
 8011adc:	f3bf 8f4f 	dsb	sy
 8011ae0:	f3bf 8f6f 	isb	sy
 8011ae4:	e00a      	b.n	8011afc <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d007      	beq.n	8011afc <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011aec:	4b39      	ldr	r3, [pc, #228]	@ (8011bd4 <xQueueGenericSend+0x210>)
 8011aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011af2:	601a      	str	r2, [r3, #0]
 8011af4:	f3bf 8f4f 	dsb	sy
 8011af8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011afc:	f001 fffc 	bl	8013af8 <vPortExitCritical>
				return pdPASS;
 8011b00:	2301      	movs	r3, #1
 8011b02:	e063      	b.n	8011bcc <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d103      	bne.n	8011b12 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011b0a:	f001 fff5 	bl	8013af8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011b0e:	2300      	movs	r3, #0
 8011b10:	e05c      	b.n	8011bcc <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d106      	bne.n	8011b26 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011b18:	f107 0314 	add.w	r3, r7, #20
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f001 fafb 	bl	8013118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011b22:	2301      	movs	r3, #1
 8011b24:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011b26:	f001 ffe7 	bl	8013af8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011b2a:	f001 f875 	bl	8012c18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011b2e:	f001 ffad 	bl	8013a8c <vPortEnterCritical>
 8011b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011b38:	b25b      	sxtb	r3, r3
 8011b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011b3e:	d103      	bne.n	8011b48 <xQueueGenericSend+0x184>
 8011b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b42:	2200      	movs	r2, #0
 8011b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011b4e:	b25b      	sxtb	r3, r3
 8011b50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011b54:	d103      	bne.n	8011b5e <xQueueGenericSend+0x19a>
 8011b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b58:	2200      	movs	r2, #0
 8011b5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011b5e:	f001 ffcb 	bl	8013af8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011b62:	1d3a      	adds	r2, r7, #4
 8011b64:	f107 0314 	add.w	r3, r7, #20
 8011b68:	4611      	mov	r1, r2
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f001 faea 	bl	8013144 <xTaskCheckForTimeOut>
 8011b70:	4603      	mov	r3, r0
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d124      	bne.n	8011bc0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011b76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011b78:	f000 fd28 	bl	80125cc <prvIsQueueFull>
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d018      	beq.n	8011bb4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b84:	3310      	adds	r3, #16
 8011b86:	687a      	ldr	r2, [r7, #4]
 8011b88:	4611      	mov	r1, r2
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	f001 fa36 	bl	8012ffc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011b90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011b92:	f000 fcb3 	bl	80124fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011b96:	f001 f84d 	bl	8012c34 <xTaskResumeAll>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	f47f af7c 	bne.w	8011a9a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8011ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8011bd4 <xQueueGenericSend+0x210>)
 8011ba4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011ba8:	601a      	str	r2, [r3, #0]
 8011baa:	f3bf 8f4f 	dsb	sy
 8011bae:	f3bf 8f6f 	isb	sy
 8011bb2:	e772      	b.n	8011a9a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011bb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011bb6:	f000 fca1 	bl	80124fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011bba:	f001 f83b 	bl	8012c34 <xTaskResumeAll>
 8011bbe:	e76c      	b.n	8011a9a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011bc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011bc2:	f000 fc9b 	bl	80124fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011bc6:	f001 f835 	bl	8012c34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011bca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011bcc:	4618      	mov	r0, r3
 8011bce:	3738      	adds	r7, #56	@ 0x38
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}
 8011bd4:	e000ed04 	.word	0xe000ed04

08011bd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b08e      	sub	sp, #56	@ 0x38
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	60f8      	str	r0, [r7, #12]
 8011be0:	60b9      	str	r1, [r7, #8]
 8011be2:	607a      	str	r2, [r7, #4]
 8011be4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d10d      	bne.n	8011c0c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8011bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bf4:	b672      	cpsid	i
 8011bf6:	f383 8811 	msr	BASEPRI, r3
 8011bfa:	f3bf 8f6f 	isb	sy
 8011bfe:	f3bf 8f4f 	dsb	sy
 8011c02:	b662      	cpsie	i
 8011c04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011c06:	bf00      	nop
 8011c08:	bf00      	nop
 8011c0a:	e7fd      	b.n	8011c08 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011c0c:	68bb      	ldr	r3, [r7, #8]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d103      	bne.n	8011c1a <xQueueGenericSendFromISR+0x42>
 8011c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d101      	bne.n	8011c1e <xQueueGenericSendFromISR+0x46>
 8011c1a:	2301      	movs	r3, #1
 8011c1c:	e000      	b.n	8011c20 <xQueueGenericSendFromISR+0x48>
 8011c1e:	2300      	movs	r3, #0
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d10d      	bne.n	8011c40 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8011c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c28:	b672      	cpsid	i
 8011c2a:	f383 8811 	msr	BASEPRI, r3
 8011c2e:	f3bf 8f6f 	isb	sy
 8011c32:	f3bf 8f4f 	dsb	sy
 8011c36:	b662      	cpsie	i
 8011c38:	623b      	str	r3, [r7, #32]
}
 8011c3a:	bf00      	nop
 8011c3c:	bf00      	nop
 8011c3e:	e7fd      	b.n	8011c3c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	2b02      	cmp	r3, #2
 8011c44:	d103      	bne.n	8011c4e <xQueueGenericSendFromISR+0x76>
 8011c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011c4a:	2b01      	cmp	r3, #1
 8011c4c:	d101      	bne.n	8011c52 <xQueueGenericSendFromISR+0x7a>
 8011c4e:	2301      	movs	r3, #1
 8011c50:	e000      	b.n	8011c54 <xQueueGenericSendFromISR+0x7c>
 8011c52:	2300      	movs	r3, #0
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d10d      	bne.n	8011c74 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8011c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c5c:	b672      	cpsid	i
 8011c5e:	f383 8811 	msr	BASEPRI, r3
 8011c62:	f3bf 8f6f 	isb	sy
 8011c66:	f3bf 8f4f 	dsb	sy
 8011c6a:	b662      	cpsie	i
 8011c6c:	61fb      	str	r3, [r7, #28]
}
 8011c6e:	bf00      	nop
 8011c70:	bf00      	nop
 8011c72:	e7fd      	b.n	8011c70 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011c74:	f001 fff2 	bl	8013c5c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011c78:	f3ef 8211 	mrs	r2, BASEPRI
 8011c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c80:	b672      	cpsid	i
 8011c82:	f383 8811 	msr	BASEPRI, r3
 8011c86:	f3bf 8f6f 	isb	sy
 8011c8a:	f3bf 8f4f 	dsb	sy
 8011c8e:	b662      	cpsie	i
 8011c90:	61ba      	str	r2, [r7, #24]
 8011c92:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011c94:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	d302      	bcc.n	8011caa <xQueueGenericSendFromISR+0xd2>
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	2b02      	cmp	r3, #2
 8011ca8:	d12c      	bne.n	8011d04 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011cb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011cb4:	683a      	ldr	r2, [r7, #0]
 8011cb6:	68b9      	ldr	r1, [r7, #8]
 8011cb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011cba:	f000 fb8f 	bl	80123dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011cbe:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8011cc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011cc6:	d112      	bne.n	8011cee <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d016      	beq.n	8011cfe <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cd2:	3324      	adds	r3, #36	@ 0x24
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f001 f9b9 	bl	801304c <xTaskRemoveFromEventList>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d00e      	beq.n	8011cfe <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d00b      	beq.n	8011cfe <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	2201      	movs	r2, #1
 8011cea:	601a      	str	r2, [r3, #0]
 8011cec:	e007      	b.n	8011cfe <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011cee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011cf2:	3301      	adds	r3, #1
 8011cf4:	b2db      	uxtb	r3, r3
 8011cf6:	b25a      	sxtb	r2, r3
 8011cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8011cfe:	2301      	movs	r3, #1
 8011d00:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8011d02:	e001      	b.n	8011d08 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011d04:	2300      	movs	r3, #0
 8011d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8011d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d0a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011d0c:	693b      	ldr	r3, [r7, #16]
 8011d0e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011d12:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011d16:	4618      	mov	r0, r3
 8011d18:	3738      	adds	r7, #56	@ 0x38
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}

08011d1e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011d1e:	b580      	push	{r7, lr}
 8011d20:	b08e      	sub	sp, #56	@ 0x38
 8011d22:	af00      	add	r7, sp, #0
 8011d24:	6078      	str	r0, [r7, #4]
 8011d26:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d10d      	bne.n	8011d4e <xQueueGiveFromISR+0x30>
	__asm volatile
 8011d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d36:	b672      	cpsid	i
 8011d38:	f383 8811 	msr	BASEPRI, r3
 8011d3c:	f3bf 8f6f 	isb	sy
 8011d40:	f3bf 8f4f 	dsb	sy
 8011d44:	b662      	cpsie	i
 8011d46:	623b      	str	r3, [r7, #32]
}
 8011d48:	bf00      	nop
 8011d4a:	bf00      	nop
 8011d4c:	e7fd      	b.n	8011d4a <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d00d      	beq.n	8011d72 <xQueueGiveFromISR+0x54>
	__asm volatile
 8011d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d5a:	b672      	cpsid	i
 8011d5c:	f383 8811 	msr	BASEPRI, r3
 8011d60:	f3bf 8f6f 	isb	sy
 8011d64:	f3bf 8f4f 	dsb	sy
 8011d68:	b662      	cpsie	i
 8011d6a:	61fb      	str	r3, [r7, #28]
}
 8011d6c:	bf00      	nop
 8011d6e:	bf00      	nop
 8011d70:	e7fd      	b.n	8011d6e <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d103      	bne.n	8011d82 <xQueueGiveFromISR+0x64>
 8011d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d7c:	689b      	ldr	r3, [r3, #8]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d101      	bne.n	8011d86 <xQueueGiveFromISR+0x68>
 8011d82:	2301      	movs	r3, #1
 8011d84:	e000      	b.n	8011d88 <xQueueGiveFromISR+0x6a>
 8011d86:	2300      	movs	r3, #0
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d10d      	bne.n	8011da8 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8011d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d90:	b672      	cpsid	i
 8011d92:	f383 8811 	msr	BASEPRI, r3
 8011d96:	f3bf 8f6f 	isb	sy
 8011d9a:	f3bf 8f4f 	dsb	sy
 8011d9e:	b662      	cpsie	i
 8011da0:	61bb      	str	r3, [r7, #24]
}
 8011da2:	bf00      	nop
 8011da4:	bf00      	nop
 8011da6:	e7fd      	b.n	8011da4 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011da8:	f001 ff58 	bl	8013c5c <vPortValidateInterruptPriority>
	__asm volatile
 8011dac:	f3ef 8211 	mrs	r2, BASEPRI
 8011db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011db4:	b672      	cpsid	i
 8011db6:	f383 8811 	msr	BASEPRI, r3
 8011dba:	f3bf 8f6f 	isb	sy
 8011dbe:	f3bf 8f4f 	dsb	sy
 8011dc2:	b662      	cpsie	i
 8011dc4:	617a      	str	r2, [r7, #20]
 8011dc6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011dc8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011dd0:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011dd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011dd8:	429a      	cmp	r2, r3
 8011dda:	d22b      	bcs.n	8011e34 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011de2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011de8:	1c5a      	adds	r2, r3, #1
 8011dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dec:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011dee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8011df2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011df6:	d112      	bne.n	8011e1e <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d016      	beq.n	8011e2e <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e02:	3324      	adds	r3, #36	@ 0x24
 8011e04:	4618      	mov	r0, r3
 8011e06:	f001 f921 	bl	801304c <xTaskRemoveFromEventList>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d00e      	beq.n	8011e2e <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d00b      	beq.n	8011e2e <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011e16:	683b      	ldr	r3, [r7, #0]
 8011e18:	2201      	movs	r2, #1
 8011e1a:	601a      	str	r2, [r3, #0]
 8011e1c:	e007      	b.n	8011e2e <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011e22:	3301      	adds	r3, #1
 8011e24:	b2db      	uxtb	r3, r3
 8011e26:	b25a      	sxtb	r2, r3
 8011e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8011e2e:	2301      	movs	r3, #1
 8011e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e32:	e001      	b.n	8011e38 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011e34:	2300      	movs	r3, #0
 8011e36:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e3a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	f383 8811 	msr	BASEPRI, r3
}
 8011e42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011e46:	4618      	mov	r0, r3
 8011e48:	3738      	adds	r7, #56	@ 0x38
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	bd80      	pop	{r7, pc}
	...

08011e50 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b08c      	sub	sp, #48	@ 0x30
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	60f8      	str	r0, [r7, #12]
 8011e58:	60b9      	str	r1, [r7, #8]
 8011e5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d10d      	bne.n	8011e86 <xQueueReceive+0x36>
	__asm volatile
 8011e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e6e:	b672      	cpsid	i
 8011e70:	f383 8811 	msr	BASEPRI, r3
 8011e74:	f3bf 8f6f 	isb	sy
 8011e78:	f3bf 8f4f 	dsb	sy
 8011e7c:	b662      	cpsie	i
 8011e7e:	623b      	str	r3, [r7, #32]
}
 8011e80:	bf00      	nop
 8011e82:	bf00      	nop
 8011e84:	e7fd      	b.n	8011e82 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011e86:	68bb      	ldr	r3, [r7, #8]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d103      	bne.n	8011e94 <xQueueReceive+0x44>
 8011e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d101      	bne.n	8011e98 <xQueueReceive+0x48>
 8011e94:	2301      	movs	r3, #1
 8011e96:	e000      	b.n	8011e9a <xQueueReceive+0x4a>
 8011e98:	2300      	movs	r3, #0
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d10d      	bne.n	8011eba <xQueueReceive+0x6a>
	__asm volatile
 8011e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ea2:	b672      	cpsid	i
 8011ea4:	f383 8811 	msr	BASEPRI, r3
 8011ea8:	f3bf 8f6f 	isb	sy
 8011eac:	f3bf 8f4f 	dsb	sy
 8011eb0:	b662      	cpsie	i
 8011eb2:	61fb      	str	r3, [r7, #28]
}
 8011eb4:	bf00      	nop
 8011eb6:	bf00      	nop
 8011eb8:	e7fd      	b.n	8011eb6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011eba:	f001 fa95 	bl	80133e8 <xTaskGetSchedulerState>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d102      	bne.n	8011eca <xQueueReceive+0x7a>
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d101      	bne.n	8011ece <xQueueReceive+0x7e>
 8011eca:	2301      	movs	r3, #1
 8011ecc:	e000      	b.n	8011ed0 <xQueueReceive+0x80>
 8011ece:	2300      	movs	r3, #0
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d10d      	bne.n	8011ef0 <xQueueReceive+0xa0>
	__asm volatile
 8011ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ed8:	b672      	cpsid	i
 8011eda:	f383 8811 	msr	BASEPRI, r3
 8011ede:	f3bf 8f6f 	isb	sy
 8011ee2:	f3bf 8f4f 	dsb	sy
 8011ee6:	b662      	cpsie	i
 8011ee8:	61bb      	str	r3, [r7, #24]
}
 8011eea:	bf00      	nop
 8011eec:	bf00      	nop
 8011eee:	e7fd      	b.n	8011eec <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011ef0:	f001 fdcc 	bl	8013a8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ef8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d01f      	beq.n	8011f40 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011f00:	68b9      	ldr	r1, [r7, #8]
 8011f02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011f04:	f000 fad4 	bl	80124b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f0a:	1e5a      	subs	r2, r3, #1
 8011f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f0e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f12:	691b      	ldr	r3, [r3, #16]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d00f      	beq.n	8011f38 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f1a:	3310      	adds	r3, #16
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f001 f895 	bl	801304c <xTaskRemoveFromEventList>
 8011f22:	4603      	mov	r3, r0
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d007      	beq.n	8011f38 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011f28:	4b3c      	ldr	r3, [pc, #240]	@ (801201c <xQueueReceive+0x1cc>)
 8011f2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011f2e:	601a      	str	r2, [r3, #0]
 8011f30:	f3bf 8f4f 	dsb	sy
 8011f34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011f38:	f001 fdde 	bl	8013af8 <vPortExitCritical>
				return pdPASS;
 8011f3c:	2301      	movs	r3, #1
 8011f3e:	e069      	b.n	8012014 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d103      	bne.n	8011f4e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011f46:	f001 fdd7 	bl	8013af8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	e062      	b.n	8012014 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d106      	bne.n	8011f62 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011f54:	f107 0310 	add.w	r3, r7, #16
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f001 f8dd 	bl	8013118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011f5e:	2301      	movs	r3, #1
 8011f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011f62:	f001 fdc9 	bl	8013af8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011f66:	f000 fe57 	bl	8012c18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011f6a:	f001 fd8f 	bl	8013a8c <vPortEnterCritical>
 8011f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011f74:	b25b      	sxtb	r3, r3
 8011f76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011f7a:	d103      	bne.n	8011f84 <xQueueReceive+0x134>
 8011f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f7e:	2200      	movs	r2, #0
 8011f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011f8a:	b25b      	sxtb	r3, r3
 8011f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011f90:	d103      	bne.n	8011f9a <xQueueReceive+0x14a>
 8011f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f94:	2200      	movs	r2, #0
 8011f96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011f9a:	f001 fdad 	bl	8013af8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011f9e:	1d3a      	adds	r2, r7, #4
 8011fa0:	f107 0310 	add.w	r3, r7, #16
 8011fa4:	4611      	mov	r1, r2
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f001 f8cc 	bl	8013144 <xTaskCheckForTimeOut>
 8011fac:	4603      	mov	r3, r0
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d123      	bne.n	8011ffa <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011fb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011fb4:	f000 faf4 	bl	80125a0 <prvIsQueueEmpty>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d017      	beq.n	8011fee <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fc0:	3324      	adds	r3, #36	@ 0x24
 8011fc2:	687a      	ldr	r2, [r7, #4]
 8011fc4:	4611      	mov	r1, r2
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	f001 f818 	bl	8012ffc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011fcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011fce:	f000 fa95 	bl	80124fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011fd2:	f000 fe2f 	bl	8012c34 <xTaskResumeAll>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d189      	bne.n	8011ef0 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8011fdc:	4b0f      	ldr	r3, [pc, #60]	@ (801201c <xQueueReceive+0x1cc>)
 8011fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011fe2:	601a      	str	r2, [r3, #0]
 8011fe4:	f3bf 8f4f 	dsb	sy
 8011fe8:	f3bf 8f6f 	isb	sy
 8011fec:	e780      	b.n	8011ef0 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011fee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011ff0:	f000 fa84 	bl	80124fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011ff4:	f000 fe1e 	bl	8012c34 <xTaskResumeAll>
 8011ff8:	e77a      	b.n	8011ef0 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011ffa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011ffc:	f000 fa7e 	bl	80124fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012000:	f000 fe18 	bl	8012c34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012004:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012006:	f000 facb 	bl	80125a0 <prvIsQueueEmpty>
 801200a:	4603      	mov	r3, r0
 801200c:	2b00      	cmp	r3, #0
 801200e:	f43f af6f 	beq.w	8011ef0 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012012:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012014:	4618      	mov	r0, r3
 8012016:	3730      	adds	r7, #48	@ 0x30
 8012018:	46bd      	mov	sp, r7
 801201a:	bd80      	pop	{r7, pc}
 801201c:	e000ed04 	.word	0xe000ed04

08012020 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b08e      	sub	sp, #56	@ 0x38
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
 8012028:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801202a:	2300      	movs	r3, #0
 801202c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012032:	2300      	movs	r3, #0
 8012034:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012038:	2b00      	cmp	r3, #0
 801203a:	d10d      	bne.n	8012058 <xQueueSemaphoreTake+0x38>
	__asm volatile
 801203c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012040:	b672      	cpsid	i
 8012042:	f383 8811 	msr	BASEPRI, r3
 8012046:	f3bf 8f6f 	isb	sy
 801204a:	f3bf 8f4f 	dsb	sy
 801204e:	b662      	cpsie	i
 8012050:	623b      	str	r3, [r7, #32]
}
 8012052:	bf00      	nop
 8012054:	bf00      	nop
 8012056:	e7fd      	b.n	8012054 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801205a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801205c:	2b00      	cmp	r3, #0
 801205e:	d00d      	beq.n	801207c <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8012060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012064:	b672      	cpsid	i
 8012066:	f383 8811 	msr	BASEPRI, r3
 801206a:	f3bf 8f6f 	isb	sy
 801206e:	f3bf 8f4f 	dsb	sy
 8012072:	b662      	cpsie	i
 8012074:	61fb      	str	r3, [r7, #28]
}
 8012076:	bf00      	nop
 8012078:	bf00      	nop
 801207a:	e7fd      	b.n	8012078 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801207c:	f001 f9b4 	bl	80133e8 <xTaskGetSchedulerState>
 8012080:	4603      	mov	r3, r0
 8012082:	2b00      	cmp	r3, #0
 8012084:	d102      	bne.n	801208c <xQueueSemaphoreTake+0x6c>
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d101      	bne.n	8012090 <xQueueSemaphoreTake+0x70>
 801208c:	2301      	movs	r3, #1
 801208e:	e000      	b.n	8012092 <xQueueSemaphoreTake+0x72>
 8012090:	2300      	movs	r3, #0
 8012092:	2b00      	cmp	r3, #0
 8012094:	d10d      	bne.n	80120b2 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8012096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801209a:	b672      	cpsid	i
 801209c:	f383 8811 	msr	BASEPRI, r3
 80120a0:	f3bf 8f6f 	isb	sy
 80120a4:	f3bf 8f4f 	dsb	sy
 80120a8:	b662      	cpsie	i
 80120aa:	61bb      	str	r3, [r7, #24]
}
 80120ac:	bf00      	nop
 80120ae:	bf00      	nop
 80120b0:	e7fd      	b.n	80120ae <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80120b2:	f001 fceb 	bl	8013a8c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80120b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80120ba:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80120bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d024      	beq.n	801210c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80120c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120c4:	1e5a      	subs	r2, r3, #1
 80120c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120c8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80120ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d104      	bne.n	80120dc <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80120d2:	f001 fb53 	bl	801377c <pvTaskIncrementMutexHeldCount>
 80120d6:	4602      	mov	r2, r0
 80120d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120da:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80120dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120de:	691b      	ldr	r3, [r3, #16]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d00f      	beq.n	8012104 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80120e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120e6:	3310      	adds	r3, #16
 80120e8:	4618      	mov	r0, r3
 80120ea:	f000 ffaf 	bl	801304c <xTaskRemoveFromEventList>
 80120ee:	4603      	mov	r3, r0
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d007      	beq.n	8012104 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80120f4:	4b55      	ldr	r3, [pc, #340]	@ (801224c <xQueueSemaphoreTake+0x22c>)
 80120f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80120fa:	601a      	str	r2, [r3, #0]
 80120fc:	f3bf 8f4f 	dsb	sy
 8012100:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012104:	f001 fcf8 	bl	8013af8 <vPortExitCritical>
				return pdPASS;
 8012108:	2301      	movs	r3, #1
 801210a:	e09a      	b.n	8012242 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801210c:	683b      	ldr	r3, [r7, #0]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d114      	bne.n	801213c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012114:	2b00      	cmp	r3, #0
 8012116:	d00d      	beq.n	8012134 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8012118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801211c:	b672      	cpsid	i
 801211e:	f383 8811 	msr	BASEPRI, r3
 8012122:	f3bf 8f6f 	isb	sy
 8012126:	f3bf 8f4f 	dsb	sy
 801212a:	b662      	cpsie	i
 801212c:	617b      	str	r3, [r7, #20]
}
 801212e:	bf00      	nop
 8012130:	bf00      	nop
 8012132:	e7fd      	b.n	8012130 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012134:	f001 fce0 	bl	8013af8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012138:	2300      	movs	r3, #0
 801213a:	e082      	b.n	8012242 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 801213c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801213e:	2b00      	cmp	r3, #0
 8012140:	d106      	bne.n	8012150 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012142:	f107 030c 	add.w	r3, r7, #12
 8012146:	4618      	mov	r0, r3
 8012148:	f000 ffe6 	bl	8013118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801214c:	2301      	movs	r3, #1
 801214e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012150:	f001 fcd2 	bl	8013af8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012154:	f000 fd60 	bl	8012c18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012158:	f001 fc98 	bl	8013a8c <vPortEnterCritical>
 801215c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801215e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012162:	b25b      	sxtb	r3, r3
 8012164:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012168:	d103      	bne.n	8012172 <xQueueSemaphoreTake+0x152>
 801216a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801216c:	2200      	movs	r2, #0
 801216e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012174:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012178:	b25b      	sxtb	r3, r3
 801217a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801217e:	d103      	bne.n	8012188 <xQueueSemaphoreTake+0x168>
 8012180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012182:	2200      	movs	r2, #0
 8012184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012188:	f001 fcb6 	bl	8013af8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801218c:	463a      	mov	r2, r7
 801218e:	f107 030c 	add.w	r3, r7, #12
 8012192:	4611      	mov	r1, r2
 8012194:	4618      	mov	r0, r3
 8012196:	f000 ffd5 	bl	8013144 <xTaskCheckForTimeOut>
 801219a:	4603      	mov	r3, r0
 801219c:	2b00      	cmp	r3, #0
 801219e:	d132      	bne.n	8012206 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80121a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80121a2:	f000 f9fd 	bl	80125a0 <prvIsQueueEmpty>
 80121a6:	4603      	mov	r3, r0
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d026      	beq.n	80121fa <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80121ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d109      	bne.n	80121c8 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80121b4:	f001 fc6a 	bl	8013a8c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80121b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121ba:	689b      	ldr	r3, [r3, #8]
 80121bc:	4618      	mov	r0, r3
 80121be:	f001 f931 	bl	8013424 <xTaskPriorityInherit>
 80121c2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80121c4:	f001 fc98 	bl	8013af8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80121c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121ca:	3324      	adds	r3, #36	@ 0x24
 80121cc:	683a      	ldr	r2, [r7, #0]
 80121ce:	4611      	mov	r1, r2
 80121d0:	4618      	mov	r0, r3
 80121d2:	f000 ff13 	bl	8012ffc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80121d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80121d8:	f000 f990 	bl	80124fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80121dc:	f000 fd2a 	bl	8012c34 <xTaskResumeAll>
 80121e0:	4603      	mov	r3, r0
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	f47f af65 	bne.w	80120b2 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80121e8:	4b18      	ldr	r3, [pc, #96]	@ (801224c <xQueueSemaphoreTake+0x22c>)
 80121ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80121ee:	601a      	str	r2, [r3, #0]
 80121f0:	f3bf 8f4f 	dsb	sy
 80121f4:	f3bf 8f6f 	isb	sy
 80121f8:	e75b      	b.n	80120b2 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80121fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80121fc:	f000 f97e 	bl	80124fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012200:	f000 fd18 	bl	8012c34 <xTaskResumeAll>
 8012204:	e755      	b.n	80120b2 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012206:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012208:	f000 f978 	bl	80124fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801220c:	f000 fd12 	bl	8012c34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012210:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012212:	f000 f9c5 	bl	80125a0 <prvIsQueueEmpty>
 8012216:	4603      	mov	r3, r0
 8012218:	2b00      	cmp	r3, #0
 801221a:	f43f af4a 	beq.w	80120b2 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801221e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012220:	2b00      	cmp	r3, #0
 8012222:	d00d      	beq.n	8012240 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8012224:	f001 fc32 	bl	8013a8c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012228:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801222a:	f000 f8bf 	bl	80123ac <prvGetDisinheritPriorityAfterTimeout>
 801222e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012232:	689b      	ldr	r3, [r3, #8]
 8012234:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012236:	4618      	mov	r0, r3
 8012238:	f001 fa00 	bl	801363c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801223c:	f001 fc5c 	bl	8013af8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012240:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012242:	4618      	mov	r0, r3
 8012244:	3738      	adds	r7, #56	@ 0x38
 8012246:	46bd      	mov	sp, r7
 8012248:	bd80      	pop	{r7, pc}
 801224a:	bf00      	nop
 801224c:	e000ed04 	.word	0xe000ed04

08012250 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b08e      	sub	sp, #56	@ 0x38
 8012254:	af00      	add	r7, sp, #0
 8012256:	60f8      	str	r0, [r7, #12]
 8012258:	60b9      	str	r1, [r7, #8]
 801225a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8012260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012262:	2b00      	cmp	r3, #0
 8012264:	d10d      	bne.n	8012282 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8012266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801226a:	b672      	cpsid	i
 801226c:	f383 8811 	msr	BASEPRI, r3
 8012270:	f3bf 8f6f 	isb	sy
 8012274:	f3bf 8f4f 	dsb	sy
 8012278:	b662      	cpsie	i
 801227a:	623b      	str	r3, [r7, #32]
}
 801227c:	bf00      	nop
 801227e:	bf00      	nop
 8012280:	e7fd      	b.n	801227e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012282:	68bb      	ldr	r3, [r7, #8]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d103      	bne.n	8012290 <xQueueReceiveFromISR+0x40>
 8012288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801228a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801228c:	2b00      	cmp	r3, #0
 801228e:	d101      	bne.n	8012294 <xQueueReceiveFromISR+0x44>
 8012290:	2301      	movs	r3, #1
 8012292:	e000      	b.n	8012296 <xQueueReceiveFromISR+0x46>
 8012294:	2300      	movs	r3, #0
 8012296:	2b00      	cmp	r3, #0
 8012298:	d10d      	bne.n	80122b6 <xQueueReceiveFromISR+0x66>
	__asm volatile
 801229a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801229e:	b672      	cpsid	i
 80122a0:	f383 8811 	msr	BASEPRI, r3
 80122a4:	f3bf 8f6f 	isb	sy
 80122a8:	f3bf 8f4f 	dsb	sy
 80122ac:	b662      	cpsie	i
 80122ae:	61fb      	str	r3, [r7, #28]
}
 80122b0:	bf00      	nop
 80122b2:	bf00      	nop
 80122b4:	e7fd      	b.n	80122b2 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80122b6:	f001 fcd1 	bl	8013c5c <vPortValidateInterruptPriority>
	__asm volatile
 80122ba:	f3ef 8211 	mrs	r2, BASEPRI
 80122be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122c2:	b672      	cpsid	i
 80122c4:	f383 8811 	msr	BASEPRI, r3
 80122c8:	f3bf 8f6f 	isb	sy
 80122cc:	f3bf 8f4f 	dsb	sy
 80122d0:	b662      	cpsie	i
 80122d2:	61ba      	str	r2, [r7, #24]
 80122d4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80122d6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80122d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80122da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122de:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80122e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d02f      	beq.n	8012346 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80122e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80122ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80122f0:	68b9      	ldr	r1, [r7, #8]
 80122f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80122f4:	f000 f8dc 	bl	80124b0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80122f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122fa:	1e5a      	subs	r2, r3, #1
 80122fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122fe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012300:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012304:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012308:	d112      	bne.n	8012330 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801230a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801230c:	691b      	ldr	r3, [r3, #16]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d016      	beq.n	8012340 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012314:	3310      	adds	r3, #16
 8012316:	4618      	mov	r0, r3
 8012318:	f000 fe98 	bl	801304c <xTaskRemoveFromEventList>
 801231c:	4603      	mov	r3, r0
 801231e:	2b00      	cmp	r3, #0
 8012320:	d00e      	beq.n	8012340 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d00b      	beq.n	8012340 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2201      	movs	r2, #1
 801232c:	601a      	str	r2, [r3, #0]
 801232e:	e007      	b.n	8012340 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012330:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012334:	3301      	adds	r3, #1
 8012336:	b2db      	uxtb	r3, r3
 8012338:	b25a      	sxtb	r2, r3
 801233a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801233c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8012340:	2301      	movs	r3, #1
 8012342:	637b      	str	r3, [r7, #52]	@ 0x34
 8012344:	e001      	b.n	801234a <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8012346:	2300      	movs	r3, #0
 8012348:	637b      	str	r3, [r7, #52]	@ 0x34
 801234a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801234c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801234e:	693b      	ldr	r3, [r7, #16]
 8012350:	f383 8811 	msr	BASEPRI, r3
}
 8012354:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8012358:	4618      	mov	r0, r3
 801235a:	3738      	adds	r7, #56	@ 0x38
 801235c:	46bd      	mov	sp, r7
 801235e:	bd80      	pop	{r7, pc}

08012360 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8012360:	b580      	push	{r7, lr}
 8012362:	b084      	sub	sp, #16
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d10d      	bne.n	801238e <vQueueDelete+0x2e>
	__asm volatile
 8012372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012376:	b672      	cpsid	i
 8012378:	f383 8811 	msr	BASEPRI, r3
 801237c:	f3bf 8f6f 	isb	sy
 8012380:	f3bf 8f4f 	dsb	sy
 8012384:	b662      	cpsie	i
 8012386:	60bb      	str	r3, [r7, #8]
}
 8012388:	bf00      	nop
 801238a:	bf00      	nop
 801238c:	e7fd      	b.n	801238a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801238e:	68f8      	ldr	r0, [r7, #12]
 8012390:	f000 f934 	bl	80125fc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 801239a:	2b00      	cmp	r3, #0
 801239c:	d102      	bne.n	80123a4 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 801239e:	68f8      	ldr	r0, [r7, #12]
 80123a0:	f001 fd70 	bl	8013e84 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80123a4:	bf00      	nop
 80123a6:	3710      	adds	r7, #16
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bd80      	pop	{r7, pc}

080123ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80123ac:	b480      	push	{r7}
 80123ae:	b085      	sub	sp, #20
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d006      	beq.n	80123ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	f1c3 0307 	rsb	r3, r3, #7
 80123c6:	60fb      	str	r3, [r7, #12]
 80123c8:	e001      	b.n	80123ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80123ca:	2300      	movs	r3, #0
 80123cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80123ce:	68fb      	ldr	r3, [r7, #12]
	}
 80123d0:	4618      	mov	r0, r3
 80123d2:	3714      	adds	r7, #20
 80123d4:	46bd      	mov	sp, r7
 80123d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123da:	4770      	bx	lr

080123dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b086      	sub	sp, #24
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	60f8      	str	r0, [r7, #12]
 80123e4:	60b9      	str	r1, [r7, #8]
 80123e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80123e8:	2300      	movs	r3, #0
 80123ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80123f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d10d      	bne.n	8012416 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d14d      	bne.n	801249e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	689b      	ldr	r3, [r3, #8]
 8012406:	4618      	mov	r0, r3
 8012408:	f001 f88c 	bl	8013524 <xTaskPriorityDisinherit>
 801240c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	2200      	movs	r2, #0
 8012412:	609a      	str	r2, [r3, #8]
 8012414:	e043      	b.n	801249e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d119      	bne.n	8012450 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	6858      	ldr	r0, [r3, #4]
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012424:	461a      	mov	r2, r3
 8012426:	68b9      	ldr	r1, [r7, #8]
 8012428:	f002 f87d 	bl	8014526 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	685a      	ldr	r2, [r3, #4]
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012434:	441a      	add	r2, r3
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	685a      	ldr	r2, [r3, #4]
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	689b      	ldr	r3, [r3, #8]
 8012442:	429a      	cmp	r2, r3
 8012444:	d32b      	bcc.n	801249e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	681a      	ldr	r2, [r3, #0]
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	605a      	str	r2, [r3, #4]
 801244e:	e026      	b.n	801249e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	68d8      	ldr	r0, [r3, #12]
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012458:	461a      	mov	r2, r3
 801245a:	68b9      	ldr	r1, [r7, #8]
 801245c:	f002 f863 	bl	8014526 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	68da      	ldr	r2, [r3, #12]
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012468:	425b      	negs	r3, r3
 801246a:	441a      	add	r2, r3
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	68da      	ldr	r2, [r3, #12]
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	429a      	cmp	r2, r3
 801247a:	d207      	bcs.n	801248c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	689a      	ldr	r2, [r3, #8]
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012484:	425b      	negs	r3, r3
 8012486:	441a      	add	r2, r3
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2b02      	cmp	r3, #2
 8012490:	d105      	bne.n	801249e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012492:	693b      	ldr	r3, [r7, #16]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d002      	beq.n	801249e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012498:	693b      	ldr	r3, [r7, #16]
 801249a:	3b01      	subs	r3, #1
 801249c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801249e:	693b      	ldr	r3, [r7, #16]
 80124a0:	1c5a      	adds	r2, r3, #1
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80124a6:	697b      	ldr	r3, [r7, #20]
}
 80124a8:	4618      	mov	r0, r3
 80124aa:	3718      	adds	r7, #24
 80124ac:	46bd      	mov	sp, r7
 80124ae:	bd80      	pop	{r7, pc}

080124b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b082      	sub	sp, #8
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
 80124b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d018      	beq.n	80124f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	68da      	ldr	r2, [r3, #12]
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80124ca:	441a      	add	r2, r3
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	68da      	ldr	r2, [r3, #12]
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	689b      	ldr	r3, [r3, #8]
 80124d8:	429a      	cmp	r2, r3
 80124da:	d303      	bcc.n	80124e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681a      	ldr	r2, [r3, #0]
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	68d9      	ldr	r1, [r3, #12]
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80124ec:	461a      	mov	r2, r3
 80124ee:	6838      	ldr	r0, [r7, #0]
 80124f0:	f002 f819 	bl	8014526 <memcpy>
	}
}
 80124f4:	bf00      	nop
 80124f6:	3708      	adds	r7, #8
 80124f8:	46bd      	mov	sp, r7
 80124fa:	bd80      	pop	{r7, pc}

080124fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b084      	sub	sp, #16
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012504:	f001 fac2 	bl	8013a8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801250e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012510:	e011      	b.n	8012536 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012516:	2b00      	cmp	r3, #0
 8012518:	d012      	beq.n	8012540 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	3324      	adds	r3, #36	@ 0x24
 801251e:	4618      	mov	r0, r3
 8012520:	f000 fd94 	bl	801304c <xTaskRemoveFromEventList>
 8012524:	4603      	mov	r3, r0
 8012526:	2b00      	cmp	r3, #0
 8012528:	d001      	beq.n	801252e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801252a:	f000 fe73 	bl	8013214 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801252e:	7bfb      	ldrb	r3, [r7, #15]
 8012530:	3b01      	subs	r3, #1
 8012532:	b2db      	uxtb	r3, r3
 8012534:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801253a:	2b00      	cmp	r3, #0
 801253c:	dce9      	bgt.n	8012512 <prvUnlockQueue+0x16>
 801253e:	e000      	b.n	8012542 <prvUnlockQueue+0x46>
					break;
 8012540:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	22ff      	movs	r2, #255	@ 0xff
 8012546:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801254a:	f001 fad5 	bl	8013af8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801254e:	f001 fa9d 	bl	8013a8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012558:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801255a:	e011      	b.n	8012580 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	691b      	ldr	r3, [r3, #16]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d012      	beq.n	801258a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	3310      	adds	r3, #16
 8012568:	4618      	mov	r0, r3
 801256a:	f000 fd6f 	bl	801304c <xTaskRemoveFromEventList>
 801256e:	4603      	mov	r3, r0
 8012570:	2b00      	cmp	r3, #0
 8012572:	d001      	beq.n	8012578 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012574:	f000 fe4e 	bl	8013214 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012578:	7bbb      	ldrb	r3, [r7, #14]
 801257a:	3b01      	subs	r3, #1
 801257c:	b2db      	uxtb	r3, r3
 801257e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012580:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012584:	2b00      	cmp	r3, #0
 8012586:	dce9      	bgt.n	801255c <prvUnlockQueue+0x60>
 8012588:	e000      	b.n	801258c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801258a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	22ff      	movs	r2, #255	@ 0xff
 8012590:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8012594:	f001 fab0 	bl	8013af8 <vPortExitCritical>
}
 8012598:	bf00      	nop
 801259a:	3710      	adds	r7, #16
 801259c:	46bd      	mov	sp, r7
 801259e:	bd80      	pop	{r7, pc}

080125a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b084      	sub	sp, #16
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80125a8:	f001 fa70 	bl	8013a8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d102      	bne.n	80125ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80125b4:	2301      	movs	r3, #1
 80125b6:	60fb      	str	r3, [r7, #12]
 80125b8:	e001      	b.n	80125be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80125ba:	2300      	movs	r3, #0
 80125bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80125be:	f001 fa9b 	bl	8013af8 <vPortExitCritical>

	return xReturn;
 80125c2:	68fb      	ldr	r3, [r7, #12]
}
 80125c4:	4618      	mov	r0, r3
 80125c6:	3710      	adds	r7, #16
 80125c8:	46bd      	mov	sp, r7
 80125ca:	bd80      	pop	{r7, pc}

080125cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b084      	sub	sp, #16
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80125d4:	f001 fa5a 	bl	8013a8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80125e0:	429a      	cmp	r2, r3
 80125e2:	d102      	bne.n	80125ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80125e4:	2301      	movs	r3, #1
 80125e6:	60fb      	str	r3, [r7, #12]
 80125e8:	e001      	b.n	80125ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80125ea:	2300      	movs	r3, #0
 80125ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80125ee:	f001 fa83 	bl	8013af8 <vPortExitCritical>

	return xReturn;
 80125f2:	68fb      	ldr	r3, [r7, #12]
}
 80125f4:	4618      	mov	r0, r3
 80125f6:	3710      	adds	r7, #16
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}

080125fc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80125fc:	b480      	push	{r7}
 80125fe:	b085      	sub	sp, #20
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012604:	2300      	movs	r3, #0
 8012606:	60fb      	str	r3, [r7, #12]
 8012608:	e016      	b.n	8012638 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801260a:	4a10      	ldr	r2, [pc, #64]	@ (801264c <vQueueUnregisterQueue+0x50>)
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	00db      	lsls	r3, r3, #3
 8012610:	4413      	add	r3, r2
 8012612:	685b      	ldr	r3, [r3, #4]
 8012614:	687a      	ldr	r2, [r7, #4]
 8012616:	429a      	cmp	r2, r3
 8012618:	d10b      	bne.n	8012632 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801261a:	4a0c      	ldr	r2, [pc, #48]	@ (801264c <vQueueUnregisterQueue+0x50>)
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	2100      	movs	r1, #0
 8012620:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012624:	4a09      	ldr	r2, [pc, #36]	@ (801264c <vQueueUnregisterQueue+0x50>)
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	00db      	lsls	r3, r3, #3
 801262a:	4413      	add	r3, r2
 801262c:	2200      	movs	r2, #0
 801262e:	605a      	str	r2, [r3, #4]
				break;
 8012630:	e006      	b.n	8012640 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	3301      	adds	r3, #1
 8012636:	60fb      	str	r3, [r7, #12]
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	2b07      	cmp	r3, #7
 801263c:	d9e5      	bls.n	801260a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801263e:	bf00      	nop
 8012640:	bf00      	nop
 8012642:	3714      	adds	r7, #20
 8012644:	46bd      	mov	sp, r7
 8012646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264a:	4770      	bx	lr
 801264c:	20001498 	.word	0x20001498

08012650 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012650:	b580      	push	{r7, lr}
 8012652:	b08e      	sub	sp, #56	@ 0x38
 8012654:	af04      	add	r7, sp, #16
 8012656:	60f8      	str	r0, [r7, #12]
 8012658:	60b9      	str	r1, [r7, #8]
 801265a:	607a      	str	r2, [r7, #4]
 801265c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801265e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012660:	2b00      	cmp	r3, #0
 8012662:	d10d      	bne.n	8012680 <xTaskCreateStatic+0x30>
	__asm volatile
 8012664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012668:	b672      	cpsid	i
 801266a:	f383 8811 	msr	BASEPRI, r3
 801266e:	f3bf 8f6f 	isb	sy
 8012672:	f3bf 8f4f 	dsb	sy
 8012676:	b662      	cpsie	i
 8012678:	623b      	str	r3, [r7, #32]
}
 801267a:	bf00      	nop
 801267c:	bf00      	nop
 801267e:	e7fd      	b.n	801267c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8012680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012682:	2b00      	cmp	r3, #0
 8012684:	d10d      	bne.n	80126a2 <xTaskCreateStatic+0x52>
	__asm volatile
 8012686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801268a:	b672      	cpsid	i
 801268c:	f383 8811 	msr	BASEPRI, r3
 8012690:	f3bf 8f6f 	isb	sy
 8012694:	f3bf 8f4f 	dsb	sy
 8012698:	b662      	cpsie	i
 801269a:	61fb      	str	r3, [r7, #28]
}
 801269c:	bf00      	nop
 801269e:	bf00      	nop
 80126a0:	e7fd      	b.n	801269e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80126a2:	23a0      	movs	r3, #160	@ 0xa0
 80126a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80126a6:	693b      	ldr	r3, [r7, #16]
 80126a8:	2ba0      	cmp	r3, #160	@ 0xa0
 80126aa:	d00d      	beq.n	80126c8 <xTaskCreateStatic+0x78>
	__asm volatile
 80126ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126b0:	b672      	cpsid	i
 80126b2:	f383 8811 	msr	BASEPRI, r3
 80126b6:	f3bf 8f6f 	isb	sy
 80126ba:	f3bf 8f4f 	dsb	sy
 80126be:	b662      	cpsie	i
 80126c0:	61bb      	str	r3, [r7, #24]
}
 80126c2:	bf00      	nop
 80126c4:	bf00      	nop
 80126c6:	e7fd      	b.n	80126c4 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80126c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80126ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d01e      	beq.n	801270e <xTaskCreateStatic+0xbe>
 80126d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d01b      	beq.n	801270e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80126d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126d8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80126da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80126de:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80126e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126e2:	2202      	movs	r2, #2
 80126e4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80126e8:	2300      	movs	r3, #0
 80126ea:	9303      	str	r3, [sp, #12]
 80126ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126ee:	9302      	str	r3, [sp, #8]
 80126f0:	f107 0314 	add.w	r3, r7, #20
 80126f4:	9301      	str	r3, [sp, #4]
 80126f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126f8:	9300      	str	r3, [sp, #0]
 80126fa:	683b      	ldr	r3, [r7, #0]
 80126fc:	687a      	ldr	r2, [r7, #4]
 80126fe:	68b9      	ldr	r1, [r7, #8]
 8012700:	68f8      	ldr	r0, [r7, #12]
 8012702:	f000 f851 	bl	80127a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012706:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012708:	f000 f8f0 	bl	80128ec <prvAddNewTaskToReadyList>
 801270c:	e001      	b.n	8012712 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 801270e:	2300      	movs	r3, #0
 8012710:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012712:	697b      	ldr	r3, [r7, #20]
	}
 8012714:	4618      	mov	r0, r3
 8012716:	3728      	adds	r7, #40	@ 0x28
 8012718:	46bd      	mov	sp, r7
 801271a:	bd80      	pop	{r7, pc}

0801271c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801271c:	b580      	push	{r7, lr}
 801271e:	b08c      	sub	sp, #48	@ 0x30
 8012720:	af04      	add	r7, sp, #16
 8012722:	60f8      	str	r0, [r7, #12]
 8012724:	60b9      	str	r1, [r7, #8]
 8012726:	603b      	str	r3, [r7, #0]
 8012728:	4613      	mov	r3, r2
 801272a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801272c:	88fb      	ldrh	r3, [r7, #6]
 801272e:	009b      	lsls	r3, r3, #2
 8012730:	4618      	mov	r0, r3
 8012732:	f001 fad9 	bl	8013ce8 <pvPortMalloc>
 8012736:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012738:	697b      	ldr	r3, [r7, #20]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d00e      	beq.n	801275c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801273e:	20a0      	movs	r0, #160	@ 0xa0
 8012740:	f001 fad2 	bl	8013ce8 <pvPortMalloc>
 8012744:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012746:	69fb      	ldr	r3, [r7, #28]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d003      	beq.n	8012754 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801274c:	69fb      	ldr	r3, [r7, #28]
 801274e:	697a      	ldr	r2, [r7, #20]
 8012750:	631a      	str	r2, [r3, #48]	@ 0x30
 8012752:	e005      	b.n	8012760 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012754:	6978      	ldr	r0, [r7, #20]
 8012756:	f001 fb95 	bl	8013e84 <vPortFree>
 801275a:	e001      	b.n	8012760 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801275c:	2300      	movs	r3, #0
 801275e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012760:	69fb      	ldr	r3, [r7, #28]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d017      	beq.n	8012796 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012766:	69fb      	ldr	r3, [r7, #28]
 8012768:	2200      	movs	r2, #0
 801276a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801276e:	88fa      	ldrh	r2, [r7, #6]
 8012770:	2300      	movs	r3, #0
 8012772:	9303      	str	r3, [sp, #12]
 8012774:	69fb      	ldr	r3, [r7, #28]
 8012776:	9302      	str	r3, [sp, #8]
 8012778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801277a:	9301      	str	r3, [sp, #4]
 801277c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801277e:	9300      	str	r3, [sp, #0]
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	68b9      	ldr	r1, [r7, #8]
 8012784:	68f8      	ldr	r0, [r7, #12]
 8012786:	f000 f80f 	bl	80127a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801278a:	69f8      	ldr	r0, [r7, #28]
 801278c:	f000 f8ae 	bl	80128ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012790:	2301      	movs	r3, #1
 8012792:	61bb      	str	r3, [r7, #24]
 8012794:	e002      	b.n	801279c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012796:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801279a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801279c:	69bb      	ldr	r3, [r7, #24]
	}
 801279e:	4618      	mov	r0, r3
 80127a0:	3720      	adds	r7, #32
 80127a2:	46bd      	mov	sp, r7
 80127a4:	bd80      	pop	{r7, pc}
	...

080127a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b088      	sub	sp, #32
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	60f8      	str	r0, [r7, #12]
 80127b0:	60b9      	str	r1, [r7, #8]
 80127b2:	607a      	str	r2, [r7, #4]
 80127b4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80127b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80127ba:	6879      	ldr	r1, [r7, #4]
 80127bc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80127c0:	440b      	add	r3, r1
 80127c2:	009b      	lsls	r3, r3, #2
 80127c4:	4413      	add	r3, r2
 80127c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80127c8:	69bb      	ldr	r3, [r7, #24]
 80127ca:	f023 0307 	bic.w	r3, r3, #7
 80127ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80127d0:	69bb      	ldr	r3, [r7, #24]
 80127d2:	f003 0307 	and.w	r3, r3, #7
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d00d      	beq.n	80127f6 <prvInitialiseNewTask+0x4e>
	__asm volatile
 80127da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127de:	b672      	cpsid	i
 80127e0:	f383 8811 	msr	BASEPRI, r3
 80127e4:	f3bf 8f6f 	isb	sy
 80127e8:	f3bf 8f4f 	dsb	sy
 80127ec:	b662      	cpsie	i
 80127ee:	617b      	str	r3, [r7, #20]
}
 80127f0:	bf00      	nop
 80127f2:	bf00      	nop
 80127f4:	e7fd      	b.n	80127f2 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80127f6:	68bb      	ldr	r3, [r7, #8]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d01f      	beq.n	801283c <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80127fc:	2300      	movs	r3, #0
 80127fe:	61fb      	str	r3, [r7, #28]
 8012800:	e012      	b.n	8012828 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012802:	68ba      	ldr	r2, [r7, #8]
 8012804:	69fb      	ldr	r3, [r7, #28]
 8012806:	4413      	add	r3, r2
 8012808:	7819      	ldrb	r1, [r3, #0]
 801280a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801280c:	69fb      	ldr	r3, [r7, #28]
 801280e:	4413      	add	r3, r2
 8012810:	3334      	adds	r3, #52	@ 0x34
 8012812:	460a      	mov	r2, r1
 8012814:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012816:	68ba      	ldr	r2, [r7, #8]
 8012818:	69fb      	ldr	r3, [r7, #28]
 801281a:	4413      	add	r3, r2
 801281c:	781b      	ldrb	r3, [r3, #0]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d006      	beq.n	8012830 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012822:	69fb      	ldr	r3, [r7, #28]
 8012824:	3301      	adds	r3, #1
 8012826:	61fb      	str	r3, [r7, #28]
 8012828:	69fb      	ldr	r3, [r7, #28]
 801282a:	2b0f      	cmp	r3, #15
 801282c:	d9e9      	bls.n	8012802 <prvInitialiseNewTask+0x5a>
 801282e:	e000      	b.n	8012832 <prvInitialiseNewTask+0x8a>
			{
				break;
 8012830:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012834:	2200      	movs	r2, #0
 8012836:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801283a:	e003      	b.n	8012844 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801283c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801283e:	2200      	movs	r2, #0
 8012840:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012846:	2b06      	cmp	r3, #6
 8012848:	d901      	bls.n	801284e <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801284a:	2306      	movs	r3, #6
 801284c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801284e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012850:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012852:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012856:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012858:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801285a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801285c:	2200      	movs	r2, #0
 801285e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012862:	3304      	adds	r3, #4
 8012864:	4618      	mov	r0, r3
 8012866:	f7fe fe77 	bl	8011558 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801286a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801286c:	3318      	adds	r3, #24
 801286e:	4618      	mov	r0, r3
 8012870:	f7fe fe72 	bl	8011558 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012878:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801287a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801287c:	f1c3 0207 	rsb	r2, r3, #7
 8012880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012882:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012888:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801288a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801288c:	2200      	movs	r2, #0
 801288e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012894:	2200      	movs	r2, #0
 8012896:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801289a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801289c:	334c      	adds	r3, #76	@ 0x4c
 801289e:	224c      	movs	r2, #76	@ 0x4c
 80128a0:	2100      	movs	r1, #0
 80128a2:	4618      	mov	r0, r3
 80128a4:	f001 fd6d 	bl	8014382 <memset>
 80128a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128aa:	4a0d      	ldr	r2, [pc, #52]	@ (80128e0 <prvInitialiseNewTask+0x138>)
 80128ac:	651a      	str	r2, [r3, #80]	@ 0x50
 80128ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128b0:	4a0c      	ldr	r2, [pc, #48]	@ (80128e4 <prvInitialiseNewTask+0x13c>)
 80128b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80128b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128b6:	4a0c      	ldr	r2, [pc, #48]	@ (80128e8 <prvInitialiseNewTask+0x140>)
 80128b8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80128ba:	683a      	ldr	r2, [r7, #0]
 80128bc:	68f9      	ldr	r1, [r7, #12]
 80128be:	69b8      	ldr	r0, [r7, #24]
 80128c0:	f000 ffd6 	bl	8013870 <pxPortInitialiseStack>
 80128c4:	4602      	mov	r2, r0
 80128c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80128ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d002      	beq.n	80128d6 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80128d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80128d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80128d6:	bf00      	nop
 80128d8:	3720      	adds	r7, #32
 80128da:	46bd      	mov	sp, r7
 80128dc:	bd80      	pop	{r7, pc}
 80128de:	bf00      	nop
 80128e0:	20005224 	.word	0x20005224
 80128e4:	2000528c 	.word	0x2000528c
 80128e8:	200052f4 	.word	0x200052f4

080128ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b082      	sub	sp, #8
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80128f4:	f001 f8ca 	bl	8013a8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80128f8:	4b2a      	ldr	r3, [pc, #168]	@ (80129a4 <prvAddNewTaskToReadyList+0xb8>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	3301      	adds	r3, #1
 80128fe:	4a29      	ldr	r2, [pc, #164]	@ (80129a4 <prvAddNewTaskToReadyList+0xb8>)
 8012900:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012902:	4b29      	ldr	r3, [pc, #164]	@ (80129a8 <prvAddNewTaskToReadyList+0xbc>)
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d109      	bne.n	801291e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801290a:	4a27      	ldr	r2, [pc, #156]	@ (80129a8 <prvAddNewTaskToReadyList+0xbc>)
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012910:	4b24      	ldr	r3, [pc, #144]	@ (80129a4 <prvAddNewTaskToReadyList+0xb8>)
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	2b01      	cmp	r3, #1
 8012916:	d110      	bne.n	801293a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012918:	f000 fca0 	bl	801325c <prvInitialiseTaskLists>
 801291c:	e00d      	b.n	801293a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801291e:	4b23      	ldr	r3, [pc, #140]	@ (80129ac <prvAddNewTaskToReadyList+0xc0>)
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d109      	bne.n	801293a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012926:	4b20      	ldr	r3, [pc, #128]	@ (80129a8 <prvAddNewTaskToReadyList+0xbc>)
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012930:	429a      	cmp	r2, r3
 8012932:	d802      	bhi.n	801293a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012934:	4a1c      	ldr	r2, [pc, #112]	@ (80129a8 <prvAddNewTaskToReadyList+0xbc>)
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801293a:	4b1d      	ldr	r3, [pc, #116]	@ (80129b0 <prvAddNewTaskToReadyList+0xc4>)
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	3301      	adds	r3, #1
 8012940:	4a1b      	ldr	r2, [pc, #108]	@ (80129b0 <prvAddNewTaskToReadyList+0xc4>)
 8012942:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012948:	2201      	movs	r2, #1
 801294a:	409a      	lsls	r2, r3
 801294c:	4b19      	ldr	r3, [pc, #100]	@ (80129b4 <prvAddNewTaskToReadyList+0xc8>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	4313      	orrs	r3, r2
 8012952:	4a18      	ldr	r2, [pc, #96]	@ (80129b4 <prvAddNewTaskToReadyList+0xc8>)
 8012954:	6013      	str	r3, [r2, #0]
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801295a:	4613      	mov	r3, r2
 801295c:	009b      	lsls	r3, r3, #2
 801295e:	4413      	add	r3, r2
 8012960:	009b      	lsls	r3, r3, #2
 8012962:	4a15      	ldr	r2, [pc, #84]	@ (80129b8 <prvAddNewTaskToReadyList+0xcc>)
 8012964:	441a      	add	r2, r3
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	3304      	adds	r3, #4
 801296a:	4619      	mov	r1, r3
 801296c:	4610      	mov	r0, r2
 801296e:	f7fe fe00 	bl	8011572 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012972:	f001 f8c1 	bl	8013af8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012976:	4b0d      	ldr	r3, [pc, #52]	@ (80129ac <prvAddNewTaskToReadyList+0xc0>)
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d00e      	beq.n	801299c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801297e:	4b0a      	ldr	r3, [pc, #40]	@ (80129a8 <prvAddNewTaskToReadyList+0xbc>)
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012988:	429a      	cmp	r2, r3
 801298a:	d207      	bcs.n	801299c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801298c:	4b0b      	ldr	r3, [pc, #44]	@ (80129bc <prvAddNewTaskToReadyList+0xd0>)
 801298e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012992:	601a      	str	r2, [r3, #0]
 8012994:	f3bf 8f4f 	dsb	sy
 8012998:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801299c:	bf00      	nop
 801299e:	3708      	adds	r7, #8
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bd80      	pop	{r7, pc}
 80129a4:	200015d8 	.word	0x200015d8
 80129a8:	200014d8 	.word	0x200014d8
 80129ac:	200015e4 	.word	0x200015e4
 80129b0:	200015f4 	.word	0x200015f4
 80129b4:	200015e0 	.word	0x200015e0
 80129b8:	200014dc 	.word	0x200014dc
 80129bc:	e000ed04 	.word	0xe000ed04

080129c0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b08a      	sub	sp, #40	@ 0x28
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
 80129c8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80129ca:	2300      	movs	r3, #0
 80129cc:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d10d      	bne.n	80129f0 <vTaskDelayUntil+0x30>
	__asm volatile
 80129d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129d8:	b672      	cpsid	i
 80129da:	f383 8811 	msr	BASEPRI, r3
 80129de:	f3bf 8f6f 	isb	sy
 80129e2:	f3bf 8f4f 	dsb	sy
 80129e6:	b662      	cpsie	i
 80129e8:	617b      	str	r3, [r7, #20]
}
 80129ea:	bf00      	nop
 80129ec:	bf00      	nop
 80129ee:	e7fd      	b.n	80129ec <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 80129f0:	683b      	ldr	r3, [r7, #0]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d10d      	bne.n	8012a12 <vTaskDelayUntil+0x52>
	__asm volatile
 80129f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129fa:	b672      	cpsid	i
 80129fc:	f383 8811 	msr	BASEPRI, r3
 8012a00:	f3bf 8f6f 	isb	sy
 8012a04:	f3bf 8f4f 	dsb	sy
 8012a08:	b662      	cpsie	i
 8012a0a:	613b      	str	r3, [r7, #16]
}
 8012a0c:	bf00      	nop
 8012a0e:	bf00      	nop
 8012a10:	e7fd      	b.n	8012a0e <vTaskDelayUntil+0x4e>
		configASSERT( uxSchedulerSuspended == 0 );
 8012a12:	4b2b      	ldr	r3, [pc, #172]	@ (8012ac0 <vTaskDelayUntil+0x100>)
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d00d      	beq.n	8012a36 <vTaskDelayUntil+0x76>
	__asm volatile
 8012a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a1e:	b672      	cpsid	i
 8012a20:	f383 8811 	msr	BASEPRI, r3
 8012a24:	f3bf 8f6f 	isb	sy
 8012a28:	f3bf 8f4f 	dsb	sy
 8012a2c:	b662      	cpsie	i
 8012a2e:	60fb      	str	r3, [r7, #12]
}
 8012a30:	bf00      	nop
 8012a32:	bf00      	nop
 8012a34:	e7fd      	b.n	8012a32 <vTaskDelayUntil+0x72>

		vTaskSuspendAll();
 8012a36:	f000 f8ef 	bl	8012c18 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8012a3a:	4b22      	ldr	r3, [pc, #136]	@ (8012ac4 <vTaskDelayUntil+0x104>)
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	683a      	ldr	r2, [r7, #0]
 8012a46:	4413      	add	r3, r2
 8012a48:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	6a3a      	ldr	r2, [r7, #32]
 8012a50:	429a      	cmp	r2, r3
 8012a52:	d20b      	bcs.n	8012a6c <vTaskDelayUntil+0xac>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	69fa      	ldr	r2, [r7, #28]
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	d211      	bcs.n	8012a82 <vTaskDelayUntil+0xc2>
 8012a5e:	69fa      	ldr	r2, [r7, #28]
 8012a60:	6a3b      	ldr	r3, [r7, #32]
 8012a62:	429a      	cmp	r2, r3
 8012a64:	d90d      	bls.n	8012a82 <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 8012a66:	2301      	movs	r3, #1
 8012a68:	627b      	str	r3, [r7, #36]	@ 0x24
 8012a6a:	e00a      	b.n	8012a82 <vTaskDelayUntil+0xc2>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	69fa      	ldr	r2, [r7, #28]
 8012a72:	429a      	cmp	r2, r3
 8012a74:	d303      	bcc.n	8012a7e <vTaskDelayUntil+0xbe>
 8012a76:	69fa      	ldr	r2, [r7, #28]
 8012a78:	6a3b      	ldr	r3, [r7, #32]
 8012a7a:	429a      	cmp	r2, r3
 8012a7c:	d901      	bls.n	8012a82 <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 8012a7e:	2301      	movs	r3, #1
 8012a80:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	69fa      	ldr	r2, [r7, #28]
 8012a86:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8012a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d006      	beq.n	8012a9c <vTaskDelayUntil+0xdc>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8012a8e:	69fa      	ldr	r2, [r7, #28]
 8012a90:	6a3b      	ldr	r3, [r7, #32]
 8012a92:	1ad3      	subs	r3, r2, r3
 8012a94:	2100      	movs	r1, #0
 8012a96:	4618      	mov	r0, r3
 8012a98:	f000 fe84 	bl	80137a4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8012a9c:	f000 f8ca 	bl	8012c34 <xTaskResumeAll>
 8012aa0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012aa2:	69bb      	ldr	r3, [r7, #24]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d107      	bne.n	8012ab8 <vTaskDelayUntil+0xf8>
		{
			portYIELD_WITHIN_API();
 8012aa8:	4b07      	ldr	r3, [pc, #28]	@ (8012ac8 <vTaskDelayUntil+0x108>)
 8012aaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012aae:	601a      	str	r2, [r3, #0]
 8012ab0:	f3bf 8f4f 	dsb	sy
 8012ab4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012ab8:	bf00      	nop
 8012aba:	3728      	adds	r7, #40	@ 0x28
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}
 8012ac0:	20001600 	.word	0x20001600
 8012ac4:	200015dc 	.word	0x200015dc
 8012ac8:	e000ed04 	.word	0xe000ed04

08012acc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b084      	sub	sp, #16
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d01a      	beq.n	8012b14 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012ade:	4b15      	ldr	r3, [pc, #84]	@ (8012b34 <vTaskDelay+0x68>)
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d00d      	beq.n	8012b02 <vTaskDelay+0x36>
	__asm volatile
 8012ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012aea:	b672      	cpsid	i
 8012aec:	f383 8811 	msr	BASEPRI, r3
 8012af0:	f3bf 8f6f 	isb	sy
 8012af4:	f3bf 8f4f 	dsb	sy
 8012af8:	b662      	cpsie	i
 8012afa:	60bb      	str	r3, [r7, #8]
}
 8012afc:	bf00      	nop
 8012afe:	bf00      	nop
 8012b00:	e7fd      	b.n	8012afe <vTaskDelay+0x32>
			vTaskSuspendAll();
 8012b02:	f000 f889 	bl	8012c18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012b06:	2100      	movs	r1, #0
 8012b08:	6878      	ldr	r0, [r7, #4]
 8012b0a:	f000 fe4b 	bl	80137a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012b0e:	f000 f891 	bl	8012c34 <xTaskResumeAll>
 8012b12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d107      	bne.n	8012b2a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8012b1a:	4b07      	ldr	r3, [pc, #28]	@ (8012b38 <vTaskDelay+0x6c>)
 8012b1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012b20:	601a      	str	r2, [r3, #0]
 8012b22:	f3bf 8f4f 	dsb	sy
 8012b26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012b2a:	bf00      	nop
 8012b2c:	3710      	adds	r7, #16
 8012b2e:	46bd      	mov	sp, r7
 8012b30:	bd80      	pop	{r7, pc}
 8012b32:	bf00      	nop
 8012b34:	20001600 	.word	0x20001600
 8012b38:	e000ed04 	.word	0xe000ed04

08012b3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b08a      	sub	sp, #40	@ 0x28
 8012b40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012b42:	2300      	movs	r3, #0
 8012b44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012b46:	2300      	movs	r3, #0
 8012b48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012b4a:	463a      	mov	r2, r7
 8012b4c:	1d39      	adds	r1, r7, #4
 8012b4e:	f107 0308 	add.w	r3, r7, #8
 8012b52:	4618      	mov	r0, r3
 8012b54:	f7ee fb9c 	bl	8001290 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012b58:	6839      	ldr	r1, [r7, #0]
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	68ba      	ldr	r2, [r7, #8]
 8012b5e:	9202      	str	r2, [sp, #8]
 8012b60:	9301      	str	r3, [sp, #4]
 8012b62:	2300      	movs	r3, #0
 8012b64:	9300      	str	r3, [sp, #0]
 8012b66:	2300      	movs	r3, #0
 8012b68:	460a      	mov	r2, r1
 8012b6a:	4923      	ldr	r1, [pc, #140]	@ (8012bf8 <vTaskStartScheduler+0xbc>)
 8012b6c:	4823      	ldr	r0, [pc, #140]	@ (8012bfc <vTaskStartScheduler+0xc0>)
 8012b6e:	f7ff fd6f 	bl	8012650 <xTaskCreateStatic>
 8012b72:	4603      	mov	r3, r0
 8012b74:	4a22      	ldr	r2, [pc, #136]	@ (8012c00 <vTaskStartScheduler+0xc4>)
 8012b76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012b78:	4b21      	ldr	r3, [pc, #132]	@ (8012c00 <vTaskStartScheduler+0xc4>)
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d002      	beq.n	8012b86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012b80:	2301      	movs	r3, #1
 8012b82:	617b      	str	r3, [r7, #20]
 8012b84:	e001      	b.n	8012b8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012b86:	2300      	movs	r3, #0
 8012b88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012b8a:	697b      	ldr	r3, [r7, #20]
 8012b8c:	2b01      	cmp	r3, #1
 8012b8e:	d11d      	bne.n	8012bcc <vTaskStartScheduler+0x90>
	__asm volatile
 8012b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b94:	b672      	cpsid	i
 8012b96:	f383 8811 	msr	BASEPRI, r3
 8012b9a:	f3bf 8f6f 	isb	sy
 8012b9e:	f3bf 8f4f 	dsb	sy
 8012ba2:	b662      	cpsie	i
 8012ba4:	613b      	str	r3, [r7, #16]
}
 8012ba6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012ba8:	4b16      	ldr	r3, [pc, #88]	@ (8012c04 <vTaskStartScheduler+0xc8>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	334c      	adds	r3, #76	@ 0x4c
 8012bae:	4a16      	ldr	r2, [pc, #88]	@ (8012c08 <vTaskStartScheduler+0xcc>)
 8012bb0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012bb2:	4b16      	ldr	r3, [pc, #88]	@ (8012c0c <vTaskStartScheduler+0xd0>)
 8012bb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012bb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012bba:	4b15      	ldr	r3, [pc, #84]	@ (8012c10 <vTaskStartScheduler+0xd4>)
 8012bbc:	2201      	movs	r2, #1
 8012bbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012bc0:	4b14      	ldr	r3, [pc, #80]	@ (8012c14 <vTaskStartScheduler+0xd8>)
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012bc6:	f000 fee3 	bl	8013990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012bca:	e011      	b.n	8012bf0 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012bcc:	697b      	ldr	r3, [r7, #20]
 8012bce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012bd2:	d10d      	bne.n	8012bf0 <vTaskStartScheduler+0xb4>
	__asm volatile
 8012bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bd8:	b672      	cpsid	i
 8012bda:	f383 8811 	msr	BASEPRI, r3
 8012bde:	f3bf 8f6f 	isb	sy
 8012be2:	f3bf 8f4f 	dsb	sy
 8012be6:	b662      	cpsie	i
 8012be8:	60fb      	str	r3, [r7, #12]
}
 8012bea:	bf00      	nop
 8012bec:	bf00      	nop
 8012bee:	e7fd      	b.n	8012bec <vTaskStartScheduler+0xb0>
}
 8012bf0:	bf00      	nop
 8012bf2:	3718      	adds	r7, #24
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	bd80      	pop	{r7, pc}
 8012bf8:	080156cc 	.word	0x080156cc
 8012bfc:	0801322d 	.word	0x0801322d
 8012c00:	200015fc 	.word	0x200015fc
 8012c04:	200014d8 	.word	0x200014d8
 8012c08:	200000a4 	.word	0x200000a4
 8012c0c:	200015f8 	.word	0x200015f8
 8012c10:	200015e4 	.word	0x200015e4
 8012c14:	200015dc 	.word	0x200015dc

08012c18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012c18:	b480      	push	{r7}
 8012c1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012c1c:	4b04      	ldr	r3, [pc, #16]	@ (8012c30 <vTaskSuspendAll+0x18>)
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	3301      	adds	r3, #1
 8012c22:	4a03      	ldr	r2, [pc, #12]	@ (8012c30 <vTaskSuspendAll+0x18>)
 8012c24:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012c26:	bf00      	nop
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2e:	4770      	bx	lr
 8012c30:	20001600 	.word	0x20001600

08012c34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012c34:	b580      	push	{r7, lr}
 8012c36:	b084      	sub	sp, #16
 8012c38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012c3e:	2300      	movs	r3, #0
 8012c40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012c42:	4b43      	ldr	r3, [pc, #268]	@ (8012d50 <xTaskResumeAll+0x11c>)
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d10d      	bne.n	8012c66 <xTaskResumeAll+0x32>
	__asm volatile
 8012c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c4e:	b672      	cpsid	i
 8012c50:	f383 8811 	msr	BASEPRI, r3
 8012c54:	f3bf 8f6f 	isb	sy
 8012c58:	f3bf 8f4f 	dsb	sy
 8012c5c:	b662      	cpsie	i
 8012c5e:	603b      	str	r3, [r7, #0]
}
 8012c60:	bf00      	nop
 8012c62:	bf00      	nop
 8012c64:	e7fd      	b.n	8012c62 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012c66:	f000 ff11 	bl	8013a8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012c6a:	4b39      	ldr	r3, [pc, #228]	@ (8012d50 <xTaskResumeAll+0x11c>)
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	3b01      	subs	r3, #1
 8012c70:	4a37      	ldr	r2, [pc, #220]	@ (8012d50 <xTaskResumeAll+0x11c>)
 8012c72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012c74:	4b36      	ldr	r3, [pc, #216]	@ (8012d50 <xTaskResumeAll+0x11c>)
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d161      	bne.n	8012d40 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012c7c:	4b35      	ldr	r3, [pc, #212]	@ (8012d54 <xTaskResumeAll+0x120>)
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d05d      	beq.n	8012d40 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012c84:	e02e      	b.n	8012ce4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012c86:	4b34      	ldr	r3, [pc, #208]	@ (8012d58 <xTaskResumeAll+0x124>)
 8012c88:	68db      	ldr	r3, [r3, #12]
 8012c8a:	68db      	ldr	r3, [r3, #12]
 8012c8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	3318      	adds	r3, #24
 8012c92:	4618      	mov	r0, r3
 8012c94:	f7fe fcca 	bl	801162c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	3304      	adds	r3, #4
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	f7fe fcc5 	bl	801162c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ca6:	2201      	movs	r2, #1
 8012ca8:	409a      	lsls	r2, r3
 8012caa:	4b2c      	ldr	r3, [pc, #176]	@ (8012d5c <xTaskResumeAll+0x128>)
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	4313      	orrs	r3, r2
 8012cb0:	4a2a      	ldr	r2, [pc, #168]	@ (8012d5c <xTaskResumeAll+0x128>)
 8012cb2:	6013      	str	r3, [r2, #0]
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012cb8:	4613      	mov	r3, r2
 8012cba:	009b      	lsls	r3, r3, #2
 8012cbc:	4413      	add	r3, r2
 8012cbe:	009b      	lsls	r3, r3, #2
 8012cc0:	4a27      	ldr	r2, [pc, #156]	@ (8012d60 <xTaskResumeAll+0x12c>)
 8012cc2:	441a      	add	r2, r3
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	3304      	adds	r3, #4
 8012cc8:	4619      	mov	r1, r3
 8012cca:	4610      	mov	r0, r2
 8012ccc:	f7fe fc51 	bl	8011572 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012cd4:	4b23      	ldr	r3, [pc, #140]	@ (8012d64 <xTaskResumeAll+0x130>)
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012cda:	429a      	cmp	r2, r3
 8012cdc:	d302      	bcc.n	8012ce4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8012cde:	4b22      	ldr	r3, [pc, #136]	@ (8012d68 <xTaskResumeAll+0x134>)
 8012ce0:	2201      	movs	r2, #1
 8012ce2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8012d58 <xTaskResumeAll+0x124>)
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d1cc      	bne.n	8012c86 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d001      	beq.n	8012cf6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012cf2:	f000 fb59 	bl	80133a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8012d6c <xTaskResumeAll+0x138>)
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d010      	beq.n	8012d24 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012d02:	f000 f859 	bl	8012db8 <xTaskIncrementTick>
 8012d06:	4603      	mov	r3, r0
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d002      	beq.n	8012d12 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8012d0c:	4b16      	ldr	r3, [pc, #88]	@ (8012d68 <xTaskResumeAll+0x134>)
 8012d0e:	2201      	movs	r2, #1
 8012d10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	3b01      	subs	r3, #1
 8012d16:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d1f1      	bne.n	8012d02 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8012d1e:	4b13      	ldr	r3, [pc, #76]	@ (8012d6c <xTaskResumeAll+0x138>)
 8012d20:	2200      	movs	r2, #0
 8012d22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012d24:	4b10      	ldr	r3, [pc, #64]	@ (8012d68 <xTaskResumeAll+0x134>)
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d009      	beq.n	8012d40 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012d2c:	2301      	movs	r3, #1
 8012d2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012d30:	4b0f      	ldr	r3, [pc, #60]	@ (8012d70 <xTaskResumeAll+0x13c>)
 8012d32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012d36:	601a      	str	r2, [r3, #0]
 8012d38:	f3bf 8f4f 	dsb	sy
 8012d3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012d40:	f000 feda 	bl	8013af8 <vPortExitCritical>

	return xAlreadyYielded;
 8012d44:	68bb      	ldr	r3, [r7, #8]
}
 8012d46:	4618      	mov	r0, r3
 8012d48:	3710      	adds	r7, #16
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	bd80      	pop	{r7, pc}
 8012d4e:	bf00      	nop
 8012d50:	20001600 	.word	0x20001600
 8012d54:	200015d8 	.word	0x200015d8
 8012d58:	20001598 	.word	0x20001598
 8012d5c:	200015e0 	.word	0x200015e0
 8012d60:	200014dc 	.word	0x200014dc
 8012d64:	200014d8 	.word	0x200014d8
 8012d68:	200015ec 	.word	0x200015ec
 8012d6c:	200015e8 	.word	0x200015e8
 8012d70:	e000ed04 	.word	0xe000ed04

08012d74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012d74:	b480      	push	{r7}
 8012d76:	b083      	sub	sp, #12
 8012d78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012d7a:	4b05      	ldr	r3, [pc, #20]	@ (8012d90 <xTaskGetTickCount+0x1c>)
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012d80:	687b      	ldr	r3, [r7, #4]
}
 8012d82:	4618      	mov	r0, r3
 8012d84:	370c      	adds	r7, #12
 8012d86:	46bd      	mov	sp, r7
 8012d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8c:	4770      	bx	lr
 8012d8e:	bf00      	nop
 8012d90:	200015dc 	.word	0x200015dc

08012d94 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b082      	sub	sp, #8
 8012d98:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012d9a:	f000 ff5f 	bl	8013c5c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8012d9e:	2300      	movs	r3, #0
 8012da0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8012da2:	4b04      	ldr	r3, [pc, #16]	@ (8012db4 <xTaskGetTickCountFromISR+0x20>)
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012da8:	683b      	ldr	r3, [r7, #0]
}
 8012daa:	4618      	mov	r0, r3
 8012dac:	3708      	adds	r7, #8
 8012dae:	46bd      	mov	sp, r7
 8012db0:	bd80      	pop	{r7, pc}
 8012db2:	bf00      	nop
 8012db4:	200015dc 	.word	0x200015dc

08012db8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b086      	sub	sp, #24
 8012dbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012dc2:	4b50      	ldr	r3, [pc, #320]	@ (8012f04 <xTaskIncrementTick+0x14c>)
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	f040 808b 	bne.w	8012ee2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012dcc:	4b4e      	ldr	r3, [pc, #312]	@ (8012f08 <xTaskIncrementTick+0x150>)
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	3301      	adds	r3, #1
 8012dd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012dd4:	4a4c      	ldr	r2, [pc, #304]	@ (8012f08 <xTaskIncrementTick+0x150>)
 8012dd6:	693b      	ldr	r3, [r7, #16]
 8012dd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012dda:	693b      	ldr	r3, [r7, #16]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d123      	bne.n	8012e28 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8012de0:	4b4a      	ldr	r3, [pc, #296]	@ (8012f0c <xTaskIncrementTick+0x154>)
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d00d      	beq.n	8012e06 <xTaskIncrementTick+0x4e>
	__asm volatile
 8012dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012dee:	b672      	cpsid	i
 8012df0:	f383 8811 	msr	BASEPRI, r3
 8012df4:	f3bf 8f6f 	isb	sy
 8012df8:	f3bf 8f4f 	dsb	sy
 8012dfc:	b662      	cpsie	i
 8012dfe:	603b      	str	r3, [r7, #0]
}
 8012e00:	bf00      	nop
 8012e02:	bf00      	nop
 8012e04:	e7fd      	b.n	8012e02 <xTaskIncrementTick+0x4a>
 8012e06:	4b41      	ldr	r3, [pc, #260]	@ (8012f0c <xTaskIncrementTick+0x154>)
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	60fb      	str	r3, [r7, #12]
 8012e0c:	4b40      	ldr	r3, [pc, #256]	@ (8012f10 <xTaskIncrementTick+0x158>)
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	4a3e      	ldr	r2, [pc, #248]	@ (8012f0c <xTaskIncrementTick+0x154>)
 8012e12:	6013      	str	r3, [r2, #0]
 8012e14:	4a3e      	ldr	r2, [pc, #248]	@ (8012f10 <xTaskIncrementTick+0x158>)
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	6013      	str	r3, [r2, #0]
 8012e1a:	4b3e      	ldr	r3, [pc, #248]	@ (8012f14 <xTaskIncrementTick+0x15c>)
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	3301      	adds	r3, #1
 8012e20:	4a3c      	ldr	r2, [pc, #240]	@ (8012f14 <xTaskIncrementTick+0x15c>)
 8012e22:	6013      	str	r3, [r2, #0]
 8012e24:	f000 fac0 	bl	80133a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012e28:	4b3b      	ldr	r3, [pc, #236]	@ (8012f18 <xTaskIncrementTick+0x160>)
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	693a      	ldr	r2, [r7, #16]
 8012e2e:	429a      	cmp	r2, r3
 8012e30:	d348      	bcc.n	8012ec4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012e32:	4b36      	ldr	r3, [pc, #216]	@ (8012f0c <xTaskIncrementTick+0x154>)
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d104      	bne.n	8012e46 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012e3c:	4b36      	ldr	r3, [pc, #216]	@ (8012f18 <xTaskIncrementTick+0x160>)
 8012e3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012e42:	601a      	str	r2, [r3, #0]
					break;
 8012e44:	e03e      	b.n	8012ec4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e46:	4b31      	ldr	r3, [pc, #196]	@ (8012f0c <xTaskIncrementTick+0x154>)
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	68db      	ldr	r3, [r3, #12]
 8012e4c:	68db      	ldr	r3, [r3, #12]
 8012e4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012e50:	68bb      	ldr	r3, [r7, #8]
 8012e52:	685b      	ldr	r3, [r3, #4]
 8012e54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012e56:	693a      	ldr	r2, [r7, #16]
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	429a      	cmp	r2, r3
 8012e5c:	d203      	bcs.n	8012e66 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012e5e:	4a2e      	ldr	r2, [pc, #184]	@ (8012f18 <xTaskIncrementTick+0x160>)
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012e64:	e02e      	b.n	8012ec4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012e66:	68bb      	ldr	r3, [r7, #8]
 8012e68:	3304      	adds	r3, #4
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f7fe fbde 	bl	801162c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012e70:	68bb      	ldr	r3, [r7, #8]
 8012e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d004      	beq.n	8012e82 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012e78:	68bb      	ldr	r3, [r7, #8]
 8012e7a:	3318      	adds	r3, #24
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7fe fbd5 	bl	801162c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012e82:	68bb      	ldr	r3, [r7, #8]
 8012e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e86:	2201      	movs	r2, #1
 8012e88:	409a      	lsls	r2, r3
 8012e8a:	4b24      	ldr	r3, [pc, #144]	@ (8012f1c <xTaskIncrementTick+0x164>)
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	4313      	orrs	r3, r2
 8012e90:	4a22      	ldr	r2, [pc, #136]	@ (8012f1c <xTaskIncrementTick+0x164>)
 8012e92:	6013      	str	r3, [r2, #0]
 8012e94:	68bb      	ldr	r3, [r7, #8]
 8012e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e98:	4613      	mov	r3, r2
 8012e9a:	009b      	lsls	r3, r3, #2
 8012e9c:	4413      	add	r3, r2
 8012e9e:	009b      	lsls	r3, r3, #2
 8012ea0:	4a1f      	ldr	r2, [pc, #124]	@ (8012f20 <xTaskIncrementTick+0x168>)
 8012ea2:	441a      	add	r2, r3
 8012ea4:	68bb      	ldr	r3, [r7, #8]
 8012ea6:	3304      	adds	r3, #4
 8012ea8:	4619      	mov	r1, r3
 8012eaa:	4610      	mov	r0, r2
 8012eac:	f7fe fb61 	bl	8011572 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012eb0:	68bb      	ldr	r3, [r7, #8]
 8012eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8012f24 <xTaskIncrementTick+0x16c>)
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012eba:	429a      	cmp	r2, r3
 8012ebc:	d3b9      	bcc.n	8012e32 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8012ebe:	2301      	movs	r3, #1
 8012ec0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012ec2:	e7b6      	b.n	8012e32 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012ec4:	4b17      	ldr	r3, [pc, #92]	@ (8012f24 <xTaskIncrementTick+0x16c>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012eca:	4915      	ldr	r1, [pc, #84]	@ (8012f20 <xTaskIncrementTick+0x168>)
 8012ecc:	4613      	mov	r3, r2
 8012ece:	009b      	lsls	r3, r3, #2
 8012ed0:	4413      	add	r3, r2
 8012ed2:	009b      	lsls	r3, r3, #2
 8012ed4:	440b      	add	r3, r1
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	2b01      	cmp	r3, #1
 8012eda:	d907      	bls.n	8012eec <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8012edc:	2301      	movs	r3, #1
 8012ede:	617b      	str	r3, [r7, #20]
 8012ee0:	e004      	b.n	8012eec <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012ee2:	4b11      	ldr	r3, [pc, #68]	@ (8012f28 <xTaskIncrementTick+0x170>)
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	3301      	adds	r3, #1
 8012ee8:	4a0f      	ldr	r2, [pc, #60]	@ (8012f28 <xTaskIncrementTick+0x170>)
 8012eea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012eec:	4b0f      	ldr	r3, [pc, #60]	@ (8012f2c <xTaskIncrementTick+0x174>)
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d001      	beq.n	8012ef8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8012ef4:	2301      	movs	r3, #1
 8012ef6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012ef8:	697b      	ldr	r3, [r7, #20]
}
 8012efa:	4618      	mov	r0, r3
 8012efc:	3718      	adds	r7, #24
 8012efe:	46bd      	mov	sp, r7
 8012f00:	bd80      	pop	{r7, pc}
 8012f02:	bf00      	nop
 8012f04:	20001600 	.word	0x20001600
 8012f08:	200015dc 	.word	0x200015dc
 8012f0c:	20001590 	.word	0x20001590
 8012f10:	20001594 	.word	0x20001594
 8012f14:	200015f0 	.word	0x200015f0
 8012f18:	200015f8 	.word	0x200015f8
 8012f1c:	200015e0 	.word	0x200015e0
 8012f20:	200014dc 	.word	0x200014dc
 8012f24:	200014d8 	.word	0x200014d8
 8012f28:	200015e8 	.word	0x200015e8
 8012f2c:	200015ec 	.word	0x200015ec

08012f30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012f30:	b480      	push	{r7}
 8012f32:	b087      	sub	sp, #28
 8012f34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012f36:	4b2b      	ldr	r3, [pc, #172]	@ (8012fe4 <vTaskSwitchContext+0xb4>)
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d003      	beq.n	8012f46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8012fe8 <vTaskSwitchContext+0xb8>)
 8012f40:	2201      	movs	r2, #1
 8012f42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012f44:	e047      	b.n	8012fd6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8012f46:	4b28      	ldr	r3, [pc, #160]	@ (8012fe8 <vTaskSwitchContext+0xb8>)
 8012f48:	2200      	movs	r2, #0
 8012f4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f4c:	4b27      	ldr	r3, [pc, #156]	@ (8012fec <vTaskSwitchContext+0xbc>)
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	fab3 f383 	clz	r3, r3
 8012f58:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012f5a:	7afb      	ldrb	r3, [r7, #11]
 8012f5c:	f1c3 031f 	rsb	r3, r3, #31
 8012f60:	617b      	str	r3, [r7, #20]
 8012f62:	4923      	ldr	r1, [pc, #140]	@ (8012ff0 <vTaskSwitchContext+0xc0>)
 8012f64:	697a      	ldr	r2, [r7, #20]
 8012f66:	4613      	mov	r3, r2
 8012f68:	009b      	lsls	r3, r3, #2
 8012f6a:	4413      	add	r3, r2
 8012f6c:	009b      	lsls	r3, r3, #2
 8012f6e:	440b      	add	r3, r1
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d10d      	bne.n	8012f92 <vTaskSwitchContext+0x62>
	__asm volatile
 8012f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f7a:	b672      	cpsid	i
 8012f7c:	f383 8811 	msr	BASEPRI, r3
 8012f80:	f3bf 8f6f 	isb	sy
 8012f84:	f3bf 8f4f 	dsb	sy
 8012f88:	b662      	cpsie	i
 8012f8a:	607b      	str	r3, [r7, #4]
}
 8012f8c:	bf00      	nop
 8012f8e:	bf00      	nop
 8012f90:	e7fd      	b.n	8012f8e <vTaskSwitchContext+0x5e>
 8012f92:	697a      	ldr	r2, [r7, #20]
 8012f94:	4613      	mov	r3, r2
 8012f96:	009b      	lsls	r3, r3, #2
 8012f98:	4413      	add	r3, r2
 8012f9a:	009b      	lsls	r3, r3, #2
 8012f9c:	4a14      	ldr	r2, [pc, #80]	@ (8012ff0 <vTaskSwitchContext+0xc0>)
 8012f9e:	4413      	add	r3, r2
 8012fa0:	613b      	str	r3, [r7, #16]
 8012fa2:	693b      	ldr	r3, [r7, #16]
 8012fa4:	685b      	ldr	r3, [r3, #4]
 8012fa6:	685a      	ldr	r2, [r3, #4]
 8012fa8:	693b      	ldr	r3, [r7, #16]
 8012faa:	605a      	str	r2, [r3, #4]
 8012fac:	693b      	ldr	r3, [r7, #16]
 8012fae:	685a      	ldr	r2, [r3, #4]
 8012fb0:	693b      	ldr	r3, [r7, #16]
 8012fb2:	3308      	adds	r3, #8
 8012fb4:	429a      	cmp	r2, r3
 8012fb6:	d104      	bne.n	8012fc2 <vTaskSwitchContext+0x92>
 8012fb8:	693b      	ldr	r3, [r7, #16]
 8012fba:	685b      	ldr	r3, [r3, #4]
 8012fbc:	685a      	ldr	r2, [r3, #4]
 8012fbe:	693b      	ldr	r3, [r7, #16]
 8012fc0:	605a      	str	r2, [r3, #4]
 8012fc2:	693b      	ldr	r3, [r7, #16]
 8012fc4:	685b      	ldr	r3, [r3, #4]
 8012fc6:	68db      	ldr	r3, [r3, #12]
 8012fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8012ff4 <vTaskSwitchContext+0xc4>)
 8012fca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012fcc:	4b09      	ldr	r3, [pc, #36]	@ (8012ff4 <vTaskSwitchContext+0xc4>)
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	334c      	adds	r3, #76	@ 0x4c
 8012fd2:	4a09      	ldr	r2, [pc, #36]	@ (8012ff8 <vTaskSwitchContext+0xc8>)
 8012fd4:	6013      	str	r3, [r2, #0]
}
 8012fd6:	bf00      	nop
 8012fd8:	371c      	adds	r7, #28
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe0:	4770      	bx	lr
 8012fe2:	bf00      	nop
 8012fe4:	20001600 	.word	0x20001600
 8012fe8:	200015ec 	.word	0x200015ec
 8012fec:	200015e0 	.word	0x200015e0
 8012ff0:	200014dc 	.word	0x200014dc
 8012ff4:	200014d8 	.word	0x200014d8
 8012ff8:	200000a4 	.word	0x200000a4

08012ffc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b084      	sub	sp, #16
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
 8013004:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d10d      	bne.n	8013028 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 801300c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013010:	b672      	cpsid	i
 8013012:	f383 8811 	msr	BASEPRI, r3
 8013016:	f3bf 8f6f 	isb	sy
 801301a:	f3bf 8f4f 	dsb	sy
 801301e:	b662      	cpsie	i
 8013020:	60fb      	str	r3, [r7, #12]
}
 8013022:	bf00      	nop
 8013024:	bf00      	nop
 8013026:	e7fd      	b.n	8013024 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013028:	4b07      	ldr	r3, [pc, #28]	@ (8013048 <vTaskPlaceOnEventList+0x4c>)
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	3318      	adds	r3, #24
 801302e:	4619      	mov	r1, r3
 8013030:	6878      	ldr	r0, [r7, #4]
 8013032:	f7fe fac2 	bl	80115ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013036:	2101      	movs	r1, #1
 8013038:	6838      	ldr	r0, [r7, #0]
 801303a:	f000 fbb3 	bl	80137a4 <prvAddCurrentTaskToDelayedList>
}
 801303e:	bf00      	nop
 8013040:	3710      	adds	r7, #16
 8013042:	46bd      	mov	sp, r7
 8013044:	bd80      	pop	{r7, pc}
 8013046:	bf00      	nop
 8013048:	200014d8 	.word	0x200014d8

0801304c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b086      	sub	sp, #24
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	68db      	ldr	r3, [r3, #12]
 8013058:	68db      	ldr	r3, [r3, #12]
 801305a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801305c:	693b      	ldr	r3, [r7, #16]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d10d      	bne.n	801307e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8013062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013066:	b672      	cpsid	i
 8013068:	f383 8811 	msr	BASEPRI, r3
 801306c:	f3bf 8f6f 	isb	sy
 8013070:	f3bf 8f4f 	dsb	sy
 8013074:	b662      	cpsie	i
 8013076:	60fb      	str	r3, [r7, #12]
}
 8013078:	bf00      	nop
 801307a:	bf00      	nop
 801307c:	e7fd      	b.n	801307a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801307e:	693b      	ldr	r3, [r7, #16]
 8013080:	3318      	adds	r3, #24
 8013082:	4618      	mov	r0, r3
 8013084:	f7fe fad2 	bl	801162c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013088:	4b1d      	ldr	r3, [pc, #116]	@ (8013100 <xTaskRemoveFromEventList+0xb4>)
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d11c      	bne.n	80130ca <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013090:	693b      	ldr	r3, [r7, #16]
 8013092:	3304      	adds	r3, #4
 8013094:	4618      	mov	r0, r3
 8013096:	f7fe fac9 	bl	801162c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801309a:	693b      	ldr	r3, [r7, #16]
 801309c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801309e:	2201      	movs	r2, #1
 80130a0:	409a      	lsls	r2, r3
 80130a2:	4b18      	ldr	r3, [pc, #96]	@ (8013104 <xTaskRemoveFromEventList+0xb8>)
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	4313      	orrs	r3, r2
 80130a8:	4a16      	ldr	r2, [pc, #88]	@ (8013104 <xTaskRemoveFromEventList+0xb8>)
 80130aa:	6013      	str	r3, [r2, #0]
 80130ac:	693b      	ldr	r3, [r7, #16]
 80130ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80130b0:	4613      	mov	r3, r2
 80130b2:	009b      	lsls	r3, r3, #2
 80130b4:	4413      	add	r3, r2
 80130b6:	009b      	lsls	r3, r3, #2
 80130b8:	4a13      	ldr	r2, [pc, #76]	@ (8013108 <xTaskRemoveFromEventList+0xbc>)
 80130ba:	441a      	add	r2, r3
 80130bc:	693b      	ldr	r3, [r7, #16]
 80130be:	3304      	adds	r3, #4
 80130c0:	4619      	mov	r1, r3
 80130c2:	4610      	mov	r0, r2
 80130c4:	f7fe fa55 	bl	8011572 <vListInsertEnd>
 80130c8:	e005      	b.n	80130d6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80130ca:	693b      	ldr	r3, [r7, #16]
 80130cc:	3318      	adds	r3, #24
 80130ce:	4619      	mov	r1, r3
 80130d0:	480e      	ldr	r0, [pc, #56]	@ (801310c <xTaskRemoveFromEventList+0xc0>)
 80130d2:	f7fe fa4e 	bl	8011572 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80130d6:	693b      	ldr	r3, [r7, #16]
 80130d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80130da:	4b0d      	ldr	r3, [pc, #52]	@ (8013110 <xTaskRemoveFromEventList+0xc4>)
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130e0:	429a      	cmp	r2, r3
 80130e2:	d905      	bls.n	80130f0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80130e4:	2301      	movs	r3, #1
 80130e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80130e8:	4b0a      	ldr	r3, [pc, #40]	@ (8013114 <xTaskRemoveFromEventList+0xc8>)
 80130ea:	2201      	movs	r2, #1
 80130ec:	601a      	str	r2, [r3, #0]
 80130ee:	e001      	b.n	80130f4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80130f0:	2300      	movs	r3, #0
 80130f2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80130f4:	697b      	ldr	r3, [r7, #20]
}
 80130f6:	4618      	mov	r0, r3
 80130f8:	3718      	adds	r7, #24
 80130fa:	46bd      	mov	sp, r7
 80130fc:	bd80      	pop	{r7, pc}
 80130fe:	bf00      	nop
 8013100:	20001600 	.word	0x20001600
 8013104:	200015e0 	.word	0x200015e0
 8013108:	200014dc 	.word	0x200014dc
 801310c:	20001598 	.word	0x20001598
 8013110:	200014d8 	.word	0x200014d8
 8013114:	200015ec 	.word	0x200015ec

08013118 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013118:	b480      	push	{r7}
 801311a:	b083      	sub	sp, #12
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013120:	4b06      	ldr	r3, [pc, #24]	@ (801313c <vTaskInternalSetTimeOutState+0x24>)
 8013122:	681a      	ldr	r2, [r3, #0]
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013128:	4b05      	ldr	r3, [pc, #20]	@ (8013140 <vTaskInternalSetTimeOutState+0x28>)
 801312a:	681a      	ldr	r2, [r3, #0]
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	605a      	str	r2, [r3, #4]
}
 8013130:	bf00      	nop
 8013132:	370c      	adds	r7, #12
 8013134:	46bd      	mov	sp, r7
 8013136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801313a:	4770      	bx	lr
 801313c:	200015f0 	.word	0x200015f0
 8013140:	200015dc 	.word	0x200015dc

08013144 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013144:	b580      	push	{r7, lr}
 8013146:	b088      	sub	sp, #32
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
 801314c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d10d      	bne.n	8013170 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8013154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013158:	b672      	cpsid	i
 801315a:	f383 8811 	msr	BASEPRI, r3
 801315e:	f3bf 8f6f 	isb	sy
 8013162:	f3bf 8f4f 	dsb	sy
 8013166:	b662      	cpsie	i
 8013168:	613b      	str	r3, [r7, #16]
}
 801316a:	bf00      	nop
 801316c:	bf00      	nop
 801316e:	e7fd      	b.n	801316c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d10d      	bne.n	8013192 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8013176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801317a:	b672      	cpsid	i
 801317c:	f383 8811 	msr	BASEPRI, r3
 8013180:	f3bf 8f6f 	isb	sy
 8013184:	f3bf 8f4f 	dsb	sy
 8013188:	b662      	cpsie	i
 801318a:	60fb      	str	r3, [r7, #12]
}
 801318c:	bf00      	nop
 801318e:	bf00      	nop
 8013190:	e7fd      	b.n	801318e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8013192:	f000 fc7b 	bl	8013a8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013196:	4b1d      	ldr	r3, [pc, #116]	@ (801320c <xTaskCheckForTimeOut+0xc8>)
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	685b      	ldr	r3, [r3, #4]
 80131a0:	69ba      	ldr	r2, [r7, #24]
 80131a2:	1ad3      	subs	r3, r2, r3
 80131a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80131a6:	683b      	ldr	r3, [r7, #0]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80131ae:	d102      	bne.n	80131b6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80131b0:	2300      	movs	r3, #0
 80131b2:	61fb      	str	r3, [r7, #28]
 80131b4:	e023      	b.n	80131fe <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	681a      	ldr	r2, [r3, #0]
 80131ba:	4b15      	ldr	r3, [pc, #84]	@ (8013210 <xTaskCheckForTimeOut+0xcc>)
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	429a      	cmp	r2, r3
 80131c0:	d007      	beq.n	80131d2 <xTaskCheckForTimeOut+0x8e>
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	685b      	ldr	r3, [r3, #4]
 80131c6:	69ba      	ldr	r2, [r7, #24]
 80131c8:	429a      	cmp	r2, r3
 80131ca:	d302      	bcc.n	80131d2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80131cc:	2301      	movs	r3, #1
 80131ce:	61fb      	str	r3, [r7, #28]
 80131d0:	e015      	b.n	80131fe <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80131d2:	683b      	ldr	r3, [r7, #0]
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	697a      	ldr	r2, [r7, #20]
 80131d8:	429a      	cmp	r2, r3
 80131da:	d20b      	bcs.n	80131f4 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80131dc:	683b      	ldr	r3, [r7, #0]
 80131de:	681a      	ldr	r2, [r3, #0]
 80131e0:	697b      	ldr	r3, [r7, #20]
 80131e2:	1ad2      	subs	r2, r2, r3
 80131e4:	683b      	ldr	r3, [r7, #0]
 80131e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80131e8:	6878      	ldr	r0, [r7, #4]
 80131ea:	f7ff ff95 	bl	8013118 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80131ee:	2300      	movs	r3, #0
 80131f0:	61fb      	str	r3, [r7, #28]
 80131f2:	e004      	b.n	80131fe <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80131f4:	683b      	ldr	r3, [r7, #0]
 80131f6:	2200      	movs	r2, #0
 80131f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80131fa:	2301      	movs	r3, #1
 80131fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80131fe:	f000 fc7b 	bl	8013af8 <vPortExitCritical>

	return xReturn;
 8013202:	69fb      	ldr	r3, [r7, #28]
}
 8013204:	4618      	mov	r0, r3
 8013206:	3720      	adds	r7, #32
 8013208:	46bd      	mov	sp, r7
 801320a:	bd80      	pop	{r7, pc}
 801320c:	200015dc 	.word	0x200015dc
 8013210:	200015f0 	.word	0x200015f0

08013214 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013214:	b480      	push	{r7}
 8013216:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013218:	4b03      	ldr	r3, [pc, #12]	@ (8013228 <vTaskMissedYield+0x14>)
 801321a:	2201      	movs	r2, #1
 801321c:	601a      	str	r2, [r3, #0]
}
 801321e:	bf00      	nop
 8013220:	46bd      	mov	sp, r7
 8013222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013226:	4770      	bx	lr
 8013228:	200015ec 	.word	0x200015ec

0801322c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b082      	sub	sp, #8
 8013230:	af00      	add	r7, sp, #0
 8013232:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013234:	f000 f852 	bl	80132dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013238:	4b06      	ldr	r3, [pc, #24]	@ (8013254 <prvIdleTask+0x28>)
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	2b01      	cmp	r3, #1
 801323e:	d9f9      	bls.n	8013234 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013240:	4b05      	ldr	r3, [pc, #20]	@ (8013258 <prvIdleTask+0x2c>)
 8013242:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013246:	601a      	str	r2, [r3, #0]
 8013248:	f3bf 8f4f 	dsb	sy
 801324c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013250:	e7f0      	b.n	8013234 <prvIdleTask+0x8>
 8013252:	bf00      	nop
 8013254:	200014dc 	.word	0x200014dc
 8013258:	e000ed04 	.word	0xe000ed04

0801325c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b082      	sub	sp, #8
 8013260:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013262:	2300      	movs	r3, #0
 8013264:	607b      	str	r3, [r7, #4]
 8013266:	e00c      	b.n	8013282 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013268:	687a      	ldr	r2, [r7, #4]
 801326a:	4613      	mov	r3, r2
 801326c:	009b      	lsls	r3, r3, #2
 801326e:	4413      	add	r3, r2
 8013270:	009b      	lsls	r3, r3, #2
 8013272:	4a12      	ldr	r2, [pc, #72]	@ (80132bc <prvInitialiseTaskLists+0x60>)
 8013274:	4413      	add	r3, r2
 8013276:	4618      	mov	r0, r3
 8013278:	f7fe f94e 	bl	8011518 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	3301      	adds	r3, #1
 8013280:	607b      	str	r3, [r7, #4]
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	2b06      	cmp	r3, #6
 8013286:	d9ef      	bls.n	8013268 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013288:	480d      	ldr	r0, [pc, #52]	@ (80132c0 <prvInitialiseTaskLists+0x64>)
 801328a:	f7fe f945 	bl	8011518 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801328e:	480d      	ldr	r0, [pc, #52]	@ (80132c4 <prvInitialiseTaskLists+0x68>)
 8013290:	f7fe f942 	bl	8011518 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013294:	480c      	ldr	r0, [pc, #48]	@ (80132c8 <prvInitialiseTaskLists+0x6c>)
 8013296:	f7fe f93f 	bl	8011518 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801329a:	480c      	ldr	r0, [pc, #48]	@ (80132cc <prvInitialiseTaskLists+0x70>)
 801329c:	f7fe f93c 	bl	8011518 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80132a0:	480b      	ldr	r0, [pc, #44]	@ (80132d0 <prvInitialiseTaskLists+0x74>)
 80132a2:	f7fe f939 	bl	8011518 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80132a6:	4b0b      	ldr	r3, [pc, #44]	@ (80132d4 <prvInitialiseTaskLists+0x78>)
 80132a8:	4a05      	ldr	r2, [pc, #20]	@ (80132c0 <prvInitialiseTaskLists+0x64>)
 80132aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80132ac:	4b0a      	ldr	r3, [pc, #40]	@ (80132d8 <prvInitialiseTaskLists+0x7c>)
 80132ae:	4a05      	ldr	r2, [pc, #20]	@ (80132c4 <prvInitialiseTaskLists+0x68>)
 80132b0:	601a      	str	r2, [r3, #0]
}
 80132b2:	bf00      	nop
 80132b4:	3708      	adds	r7, #8
 80132b6:	46bd      	mov	sp, r7
 80132b8:	bd80      	pop	{r7, pc}
 80132ba:	bf00      	nop
 80132bc:	200014dc 	.word	0x200014dc
 80132c0:	20001568 	.word	0x20001568
 80132c4:	2000157c 	.word	0x2000157c
 80132c8:	20001598 	.word	0x20001598
 80132cc:	200015ac 	.word	0x200015ac
 80132d0:	200015c4 	.word	0x200015c4
 80132d4:	20001590 	.word	0x20001590
 80132d8:	20001594 	.word	0x20001594

080132dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b082      	sub	sp, #8
 80132e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80132e2:	e019      	b.n	8013318 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80132e4:	f000 fbd2 	bl	8013a8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80132e8:	4b10      	ldr	r3, [pc, #64]	@ (801332c <prvCheckTasksWaitingTermination+0x50>)
 80132ea:	68db      	ldr	r3, [r3, #12]
 80132ec:	68db      	ldr	r3, [r3, #12]
 80132ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	3304      	adds	r3, #4
 80132f4:	4618      	mov	r0, r3
 80132f6:	f7fe f999 	bl	801162c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80132fa:	4b0d      	ldr	r3, [pc, #52]	@ (8013330 <prvCheckTasksWaitingTermination+0x54>)
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	3b01      	subs	r3, #1
 8013300:	4a0b      	ldr	r2, [pc, #44]	@ (8013330 <prvCheckTasksWaitingTermination+0x54>)
 8013302:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013304:	4b0b      	ldr	r3, [pc, #44]	@ (8013334 <prvCheckTasksWaitingTermination+0x58>)
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	3b01      	subs	r3, #1
 801330a:	4a0a      	ldr	r2, [pc, #40]	@ (8013334 <prvCheckTasksWaitingTermination+0x58>)
 801330c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801330e:	f000 fbf3 	bl	8013af8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013312:	6878      	ldr	r0, [r7, #4]
 8013314:	f000 f810 	bl	8013338 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013318:	4b06      	ldr	r3, [pc, #24]	@ (8013334 <prvCheckTasksWaitingTermination+0x58>)
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d1e1      	bne.n	80132e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013320:	bf00      	nop
 8013322:	bf00      	nop
 8013324:	3708      	adds	r7, #8
 8013326:	46bd      	mov	sp, r7
 8013328:	bd80      	pop	{r7, pc}
 801332a:	bf00      	nop
 801332c:	200015ac 	.word	0x200015ac
 8013330:	200015d8 	.word	0x200015d8
 8013334:	200015c0 	.word	0x200015c0

08013338 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013338:	b580      	push	{r7, lr}
 801333a:	b084      	sub	sp, #16
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	334c      	adds	r3, #76	@ 0x4c
 8013344:	4618      	mov	r0, r3
 8013346:	f001 f835 	bl	80143b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8013350:	2b00      	cmp	r3, #0
 8013352:	d108      	bne.n	8013366 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013358:	4618      	mov	r0, r3
 801335a:	f000 fd93 	bl	8013e84 <vPortFree>
				vPortFree( pxTCB );
 801335e:	6878      	ldr	r0, [r7, #4]
 8013360:	f000 fd90 	bl	8013e84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013364:	e01b      	b.n	801339e <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 801336c:	2b01      	cmp	r3, #1
 801336e:	d103      	bne.n	8013378 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013370:	6878      	ldr	r0, [r7, #4]
 8013372:	f000 fd87 	bl	8013e84 <vPortFree>
	}
 8013376:	e012      	b.n	801339e <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 801337e:	2b02      	cmp	r3, #2
 8013380:	d00d      	beq.n	801339e <prvDeleteTCB+0x66>
	__asm volatile
 8013382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013386:	b672      	cpsid	i
 8013388:	f383 8811 	msr	BASEPRI, r3
 801338c:	f3bf 8f6f 	isb	sy
 8013390:	f3bf 8f4f 	dsb	sy
 8013394:	b662      	cpsie	i
 8013396:	60fb      	str	r3, [r7, #12]
}
 8013398:	bf00      	nop
 801339a:	bf00      	nop
 801339c:	e7fd      	b.n	801339a <prvDeleteTCB+0x62>
	}
 801339e:	bf00      	nop
 80133a0:	3710      	adds	r7, #16
 80133a2:	46bd      	mov	sp, r7
 80133a4:	bd80      	pop	{r7, pc}
	...

080133a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80133a8:	b480      	push	{r7}
 80133aa:	b083      	sub	sp, #12
 80133ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80133ae:	4b0c      	ldr	r3, [pc, #48]	@ (80133e0 <prvResetNextTaskUnblockTime+0x38>)
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d104      	bne.n	80133c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80133b8:	4b0a      	ldr	r3, [pc, #40]	@ (80133e4 <prvResetNextTaskUnblockTime+0x3c>)
 80133ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80133be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80133c0:	e008      	b.n	80133d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80133c2:	4b07      	ldr	r3, [pc, #28]	@ (80133e0 <prvResetNextTaskUnblockTime+0x38>)
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	68db      	ldr	r3, [r3, #12]
 80133c8:	68db      	ldr	r3, [r3, #12]
 80133ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	685b      	ldr	r3, [r3, #4]
 80133d0:	4a04      	ldr	r2, [pc, #16]	@ (80133e4 <prvResetNextTaskUnblockTime+0x3c>)
 80133d2:	6013      	str	r3, [r2, #0]
}
 80133d4:	bf00      	nop
 80133d6:	370c      	adds	r7, #12
 80133d8:	46bd      	mov	sp, r7
 80133da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133de:	4770      	bx	lr
 80133e0:	20001590 	.word	0x20001590
 80133e4:	200015f8 	.word	0x200015f8

080133e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80133e8:	b480      	push	{r7}
 80133ea:	b083      	sub	sp, #12
 80133ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80133ee:	4b0b      	ldr	r3, [pc, #44]	@ (801341c <xTaskGetSchedulerState+0x34>)
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d102      	bne.n	80133fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80133f6:	2301      	movs	r3, #1
 80133f8:	607b      	str	r3, [r7, #4]
 80133fa:	e008      	b.n	801340e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80133fc:	4b08      	ldr	r3, [pc, #32]	@ (8013420 <xTaskGetSchedulerState+0x38>)
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d102      	bne.n	801340a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013404:	2302      	movs	r3, #2
 8013406:	607b      	str	r3, [r7, #4]
 8013408:	e001      	b.n	801340e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801340a:	2300      	movs	r3, #0
 801340c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801340e:	687b      	ldr	r3, [r7, #4]
	}
 8013410:	4618      	mov	r0, r3
 8013412:	370c      	adds	r7, #12
 8013414:	46bd      	mov	sp, r7
 8013416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801341a:	4770      	bx	lr
 801341c:	200015e4 	.word	0x200015e4
 8013420:	20001600 	.word	0x20001600

08013424 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013424:	b580      	push	{r7, lr}
 8013426:	b084      	sub	sp, #16
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013430:	2300      	movs	r3, #0
 8013432:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d069      	beq.n	801350e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801343a:	68bb      	ldr	r3, [r7, #8]
 801343c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801343e:	4b36      	ldr	r3, [pc, #216]	@ (8013518 <xTaskPriorityInherit+0xf4>)
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013444:	429a      	cmp	r2, r3
 8013446:	d259      	bcs.n	80134fc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013448:	68bb      	ldr	r3, [r7, #8]
 801344a:	699b      	ldr	r3, [r3, #24]
 801344c:	2b00      	cmp	r3, #0
 801344e:	db06      	blt.n	801345e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013450:	4b31      	ldr	r3, [pc, #196]	@ (8013518 <xTaskPriorityInherit+0xf4>)
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013456:	f1c3 0207 	rsb	r2, r3, #7
 801345a:	68bb      	ldr	r3, [r7, #8]
 801345c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801345e:	68bb      	ldr	r3, [r7, #8]
 8013460:	6959      	ldr	r1, [r3, #20]
 8013462:	68bb      	ldr	r3, [r7, #8]
 8013464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013466:	4613      	mov	r3, r2
 8013468:	009b      	lsls	r3, r3, #2
 801346a:	4413      	add	r3, r2
 801346c:	009b      	lsls	r3, r3, #2
 801346e:	4a2b      	ldr	r2, [pc, #172]	@ (801351c <xTaskPriorityInherit+0xf8>)
 8013470:	4413      	add	r3, r2
 8013472:	4299      	cmp	r1, r3
 8013474:	d13a      	bne.n	80134ec <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013476:	68bb      	ldr	r3, [r7, #8]
 8013478:	3304      	adds	r3, #4
 801347a:	4618      	mov	r0, r3
 801347c:	f7fe f8d6 	bl	801162c <uxListRemove>
 8013480:	4603      	mov	r3, r0
 8013482:	2b00      	cmp	r3, #0
 8013484:	d115      	bne.n	80134b2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8013486:	68bb      	ldr	r3, [r7, #8]
 8013488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801348a:	4924      	ldr	r1, [pc, #144]	@ (801351c <xTaskPriorityInherit+0xf8>)
 801348c:	4613      	mov	r3, r2
 801348e:	009b      	lsls	r3, r3, #2
 8013490:	4413      	add	r3, r2
 8013492:	009b      	lsls	r3, r3, #2
 8013494:	440b      	add	r3, r1
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d10a      	bne.n	80134b2 <xTaskPriorityInherit+0x8e>
 801349c:	68bb      	ldr	r3, [r7, #8]
 801349e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134a0:	2201      	movs	r2, #1
 80134a2:	fa02 f303 	lsl.w	r3, r2, r3
 80134a6:	43da      	mvns	r2, r3
 80134a8:	4b1d      	ldr	r3, [pc, #116]	@ (8013520 <xTaskPriorityInherit+0xfc>)
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	4013      	ands	r3, r2
 80134ae:	4a1c      	ldr	r2, [pc, #112]	@ (8013520 <xTaskPriorityInherit+0xfc>)
 80134b0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80134b2:	4b19      	ldr	r3, [pc, #100]	@ (8013518 <xTaskPriorityInherit+0xf4>)
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80134b8:	68bb      	ldr	r3, [r7, #8]
 80134ba:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80134bc:	68bb      	ldr	r3, [r7, #8]
 80134be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134c0:	2201      	movs	r2, #1
 80134c2:	409a      	lsls	r2, r3
 80134c4:	4b16      	ldr	r3, [pc, #88]	@ (8013520 <xTaskPriorityInherit+0xfc>)
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	4313      	orrs	r3, r2
 80134ca:	4a15      	ldr	r2, [pc, #84]	@ (8013520 <xTaskPriorityInherit+0xfc>)
 80134cc:	6013      	str	r3, [r2, #0]
 80134ce:	68bb      	ldr	r3, [r7, #8]
 80134d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80134d2:	4613      	mov	r3, r2
 80134d4:	009b      	lsls	r3, r3, #2
 80134d6:	4413      	add	r3, r2
 80134d8:	009b      	lsls	r3, r3, #2
 80134da:	4a10      	ldr	r2, [pc, #64]	@ (801351c <xTaskPriorityInherit+0xf8>)
 80134dc:	441a      	add	r2, r3
 80134de:	68bb      	ldr	r3, [r7, #8]
 80134e0:	3304      	adds	r3, #4
 80134e2:	4619      	mov	r1, r3
 80134e4:	4610      	mov	r0, r2
 80134e6:	f7fe f844 	bl	8011572 <vListInsertEnd>
 80134ea:	e004      	b.n	80134f6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80134ec:	4b0a      	ldr	r3, [pc, #40]	@ (8013518 <xTaskPriorityInherit+0xf4>)
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80134f6:	2301      	movs	r3, #1
 80134f8:	60fb      	str	r3, [r7, #12]
 80134fa:	e008      	b.n	801350e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80134fc:	68bb      	ldr	r3, [r7, #8]
 80134fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013500:	4b05      	ldr	r3, [pc, #20]	@ (8013518 <xTaskPriorityInherit+0xf4>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013506:	429a      	cmp	r2, r3
 8013508:	d201      	bcs.n	801350e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801350a:	2301      	movs	r3, #1
 801350c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801350e:	68fb      	ldr	r3, [r7, #12]
	}
 8013510:	4618      	mov	r0, r3
 8013512:	3710      	adds	r7, #16
 8013514:	46bd      	mov	sp, r7
 8013516:	bd80      	pop	{r7, pc}
 8013518:	200014d8 	.word	0x200014d8
 801351c:	200014dc 	.word	0x200014dc
 8013520:	200015e0 	.word	0x200015e0

08013524 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013524:	b580      	push	{r7, lr}
 8013526:	b086      	sub	sp, #24
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013530:	2300      	movs	r3, #0
 8013532:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d074      	beq.n	8013624 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801353a:	4b3d      	ldr	r3, [pc, #244]	@ (8013630 <xTaskPriorityDisinherit+0x10c>)
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	693a      	ldr	r2, [r7, #16]
 8013540:	429a      	cmp	r2, r3
 8013542:	d00d      	beq.n	8013560 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8013544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013548:	b672      	cpsid	i
 801354a:	f383 8811 	msr	BASEPRI, r3
 801354e:	f3bf 8f6f 	isb	sy
 8013552:	f3bf 8f4f 	dsb	sy
 8013556:	b662      	cpsie	i
 8013558:	60fb      	str	r3, [r7, #12]
}
 801355a:	bf00      	nop
 801355c:	bf00      	nop
 801355e:	e7fd      	b.n	801355c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8013560:	693b      	ldr	r3, [r7, #16]
 8013562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013564:	2b00      	cmp	r3, #0
 8013566:	d10d      	bne.n	8013584 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8013568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801356c:	b672      	cpsid	i
 801356e:	f383 8811 	msr	BASEPRI, r3
 8013572:	f3bf 8f6f 	isb	sy
 8013576:	f3bf 8f4f 	dsb	sy
 801357a:	b662      	cpsie	i
 801357c:	60bb      	str	r3, [r7, #8]
}
 801357e:	bf00      	nop
 8013580:	bf00      	nop
 8013582:	e7fd      	b.n	8013580 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8013584:	693b      	ldr	r3, [r7, #16]
 8013586:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013588:	1e5a      	subs	r2, r3, #1
 801358a:	693b      	ldr	r3, [r7, #16]
 801358c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801358e:	693b      	ldr	r3, [r7, #16]
 8013590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013592:	693b      	ldr	r3, [r7, #16]
 8013594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013596:	429a      	cmp	r2, r3
 8013598:	d044      	beq.n	8013624 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801359a:	693b      	ldr	r3, [r7, #16]
 801359c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d140      	bne.n	8013624 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80135a2:	693b      	ldr	r3, [r7, #16]
 80135a4:	3304      	adds	r3, #4
 80135a6:	4618      	mov	r0, r3
 80135a8:	f7fe f840 	bl	801162c <uxListRemove>
 80135ac:	4603      	mov	r3, r0
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d115      	bne.n	80135de <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80135b2:	693b      	ldr	r3, [r7, #16]
 80135b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80135b6:	491f      	ldr	r1, [pc, #124]	@ (8013634 <xTaskPriorityDisinherit+0x110>)
 80135b8:	4613      	mov	r3, r2
 80135ba:	009b      	lsls	r3, r3, #2
 80135bc:	4413      	add	r3, r2
 80135be:	009b      	lsls	r3, r3, #2
 80135c0:	440b      	add	r3, r1
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d10a      	bne.n	80135de <xTaskPriorityDisinherit+0xba>
 80135c8:	693b      	ldr	r3, [r7, #16]
 80135ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135cc:	2201      	movs	r2, #1
 80135ce:	fa02 f303 	lsl.w	r3, r2, r3
 80135d2:	43da      	mvns	r2, r3
 80135d4:	4b18      	ldr	r3, [pc, #96]	@ (8013638 <xTaskPriorityDisinherit+0x114>)
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	4013      	ands	r3, r2
 80135da:	4a17      	ldr	r2, [pc, #92]	@ (8013638 <xTaskPriorityDisinherit+0x114>)
 80135dc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80135de:	693b      	ldr	r3, [r7, #16]
 80135e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80135e2:	693b      	ldr	r3, [r7, #16]
 80135e4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80135e6:	693b      	ldr	r3, [r7, #16]
 80135e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135ea:	f1c3 0207 	rsb	r2, r3, #7
 80135ee:	693b      	ldr	r3, [r7, #16]
 80135f0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80135f2:	693b      	ldr	r3, [r7, #16]
 80135f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135f6:	2201      	movs	r2, #1
 80135f8:	409a      	lsls	r2, r3
 80135fa:	4b0f      	ldr	r3, [pc, #60]	@ (8013638 <xTaskPriorityDisinherit+0x114>)
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	4313      	orrs	r3, r2
 8013600:	4a0d      	ldr	r2, [pc, #52]	@ (8013638 <xTaskPriorityDisinherit+0x114>)
 8013602:	6013      	str	r3, [r2, #0]
 8013604:	693b      	ldr	r3, [r7, #16]
 8013606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013608:	4613      	mov	r3, r2
 801360a:	009b      	lsls	r3, r3, #2
 801360c:	4413      	add	r3, r2
 801360e:	009b      	lsls	r3, r3, #2
 8013610:	4a08      	ldr	r2, [pc, #32]	@ (8013634 <xTaskPriorityDisinherit+0x110>)
 8013612:	441a      	add	r2, r3
 8013614:	693b      	ldr	r3, [r7, #16]
 8013616:	3304      	adds	r3, #4
 8013618:	4619      	mov	r1, r3
 801361a:	4610      	mov	r0, r2
 801361c:	f7fd ffa9 	bl	8011572 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013620:	2301      	movs	r3, #1
 8013622:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013624:	697b      	ldr	r3, [r7, #20]
	}
 8013626:	4618      	mov	r0, r3
 8013628:	3718      	adds	r7, #24
 801362a:	46bd      	mov	sp, r7
 801362c:	bd80      	pop	{r7, pc}
 801362e:	bf00      	nop
 8013630:	200014d8 	.word	0x200014d8
 8013634:	200014dc 	.word	0x200014dc
 8013638:	200015e0 	.word	0x200015e0

0801363c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801363c:	b580      	push	{r7, lr}
 801363e:	b088      	sub	sp, #32
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
 8013644:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801364a:	2301      	movs	r3, #1
 801364c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	2b00      	cmp	r3, #0
 8013652:	f000 8089 	beq.w	8013768 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013656:	69bb      	ldr	r3, [r7, #24]
 8013658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801365a:	2b00      	cmp	r3, #0
 801365c:	d10d      	bne.n	801367a <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 801365e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013662:	b672      	cpsid	i
 8013664:	f383 8811 	msr	BASEPRI, r3
 8013668:	f3bf 8f6f 	isb	sy
 801366c:	f3bf 8f4f 	dsb	sy
 8013670:	b662      	cpsie	i
 8013672:	60fb      	str	r3, [r7, #12]
}
 8013674:	bf00      	nop
 8013676:	bf00      	nop
 8013678:	e7fd      	b.n	8013676 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801367a:	69bb      	ldr	r3, [r7, #24]
 801367c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801367e:	683a      	ldr	r2, [r7, #0]
 8013680:	429a      	cmp	r2, r3
 8013682:	d902      	bls.n	801368a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013684:	683b      	ldr	r3, [r7, #0]
 8013686:	61fb      	str	r3, [r7, #28]
 8013688:	e002      	b.n	8013690 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801368a:	69bb      	ldr	r3, [r7, #24]
 801368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801368e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013690:	69bb      	ldr	r3, [r7, #24]
 8013692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013694:	69fa      	ldr	r2, [r7, #28]
 8013696:	429a      	cmp	r2, r3
 8013698:	d066      	beq.n	8013768 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801369a:	69bb      	ldr	r3, [r7, #24]
 801369c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801369e:	697a      	ldr	r2, [r7, #20]
 80136a0:	429a      	cmp	r2, r3
 80136a2:	d161      	bne.n	8013768 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80136a4:	4b32      	ldr	r3, [pc, #200]	@ (8013770 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	69ba      	ldr	r2, [r7, #24]
 80136aa:	429a      	cmp	r2, r3
 80136ac:	d10d      	bne.n	80136ca <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 80136ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136b2:	b672      	cpsid	i
 80136b4:	f383 8811 	msr	BASEPRI, r3
 80136b8:	f3bf 8f6f 	isb	sy
 80136bc:	f3bf 8f4f 	dsb	sy
 80136c0:	b662      	cpsie	i
 80136c2:	60bb      	str	r3, [r7, #8]
}
 80136c4:	bf00      	nop
 80136c6:	bf00      	nop
 80136c8:	e7fd      	b.n	80136c6 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80136ca:	69bb      	ldr	r3, [r7, #24]
 80136cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80136ce:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80136d0:	69bb      	ldr	r3, [r7, #24]
 80136d2:	69fa      	ldr	r2, [r7, #28]
 80136d4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80136d6:	69bb      	ldr	r3, [r7, #24]
 80136d8:	699b      	ldr	r3, [r3, #24]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	db04      	blt.n	80136e8 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80136de:	69fb      	ldr	r3, [r7, #28]
 80136e0:	f1c3 0207 	rsb	r2, r3, #7
 80136e4:	69bb      	ldr	r3, [r7, #24]
 80136e6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80136e8:	69bb      	ldr	r3, [r7, #24]
 80136ea:	6959      	ldr	r1, [r3, #20]
 80136ec:	693a      	ldr	r2, [r7, #16]
 80136ee:	4613      	mov	r3, r2
 80136f0:	009b      	lsls	r3, r3, #2
 80136f2:	4413      	add	r3, r2
 80136f4:	009b      	lsls	r3, r3, #2
 80136f6:	4a1f      	ldr	r2, [pc, #124]	@ (8013774 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80136f8:	4413      	add	r3, r2
 80136fa:	4299      	cmp	r1, r3
 80136fc:	d134      	bne.n	8013768 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80136fe:	69bb      	ldr	r3, [r7, #24]
 8013700:	3304      	adds	r3, #4
 8013702:	4618      	mov	r0, r3
 8013704:	f7fd ff92 	bl	801162c <uxListRemove>
 8013708:	4603      	mov	r3, r0
 801370a:	2b00      	cmp	r3, #0
 801370c:	d115      	bne.n	801373a <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801370e:	69bb      	ldr	r3, [r7, #24]
 8013710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013712:	4918      	ldr	r1, [pc, #96]	@ (8013774 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013714:	4613      	mov	r3, r2
 8013716:	009b      	lsls	r3, r3, #2
 8013718:	4413      	add	r3, r2
 801371a:	009b      	lsls	r3, r3, #2
 801371c:	440b      	add	r3, r1
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d10a      	bne.n	801373a <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8013724:	69bb      	ldr	r3, [r7, #24]
 8013726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013728:	2201      	movs	r2, #1
 801372a:	fa02 f303 	lsl.w	r3, r2, r3
 801372e:	43da      	mvns	r2, r3
 8013730:	4b11      	ldr	r3, [pc, #68]	@ (8013778 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	4013      	ands	r3, r2
 8013736:	4a10      	ldr	r2, [pc, #64]	@ (8013778 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8013738:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801373a:	69bb      	ldr	r3, [r7, #24]
 801373c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801373e:	2201      	movs	r2, #1
 8013740:	409a      	lsls	r2, r3
 8013742:	4b0d      	ldr	r3, [pc, #52]	@ (8013778 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	4313      	orrs	r3, r2
 8013748:	4a0b      	ldr	r2, [pc, #44]	@ (8013778 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801374a:	6013      	str	r3, [r2, #0]
 801374c:	69bb      	ldr	r3, [r7, #24]
 801374e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013750:	4613      	mov	r3, r2
 8013752:	009b      	lsls	r3, r3, #2
 8013754:	4413      	add	r3, r2
 8013756:	009b      	lsls	r3, r3, #2
 8013758:	4a06      	ldr	r2, [pc, #24]	@ (8013774 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801375a:	441a      	add	r2, r3
 801375c:	69bb      	ldr	r3, [r7, #24]
 801375e:	3304      	adds	r3, #4
 8013760:	4619      	mov	r1, r3
 8013762:	4610      	mov	r0, r2
 8013764:	f7fd ff05 	bl	8011572 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013768:	bf00      	nop
 801376a:	3720      	adds	r7, #32
 801376c:	46bd      	mov	sp, r7
 801376e:	bd80      	pop	{r7, pc}
 8013770:	200014d8 	.word	0x200014d8
 8013774:	200014dc 	.word	0x200014dc
 8013778:	200015e0 	.word	0x200015e0

0801377c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801377c:	b480      	push	{r7}
 801377e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013780:	4b07      	ldr	r3, [pc, #28]	@ (80137a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d004      	beq.n	8013792 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013788:	4b05      	ldr	r3, [pc, #20]	@ (80137a0 <pvTaskIncrementMutexHeldCount+0x24>)
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801378e:	3201      	adds	r2, #1
 8013790:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8013792:	4b03      	ldr	r3, [pc, #12]	@ (80137a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8013794:	681b      	ldr	r3, [r3, #0]
	}
 8013796:	4618      	mov	r0, r3
 8013798:	46bd      	mov	sp, r7
 801379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801379e:	4770      	bx	lr
 80137a0:	200014d8 	.word	0x200014d8

080137a4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b084      	sub	sp, #16
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
 80137ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80137ae:	4b29      	ldr	r3, [pc, #164]	@ (8013854 <prvAddCurrentTaskToDelayedList+0xb0>)
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80137b4:	4b28      	ldr	r3, [pc, #160]	@ (8013858 <prvAddCurrentTaskToDelayedList+0xb4>)
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	3304      	adds	r3, #4
 80137ba:	4618      	mov	r0, r3
 80137bc:	f7fd ff36 	bl	801162c <uxListRemove>
 80137c0:	4603      	mov	r3, r0
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d10b      	bne.n	80137de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80137c6:	4b24      	ldr	r3, [pc, #144]	@ (8013858 <prvAddCurrentTaskToDelayedList+0xb4>)
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80137cc:	2201      	movs	r2, #1
 80137ce:	fa02 f303 	lsl.w	r3, r2, r3
 80137d2:	43da      	mvns	r2, r3
 80137d4:	4b21      	ldr	r3, [pc, #132]	@ (801385c <prvAddCurrentTaskToDelayedList+0xb8>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	4013      	ands	r3, r2
 80137da:	4a20      	ldr	r2, [pc, #128]	@ (801385c <prvAddCurrentTaskToDelayedList+0xb8>)
 80137dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80137e4:	d10a      	bne.n	80137fc <prvAddCurrentTaskToDelayedList+0x58>
 80137e6:	683b      	ldr	r3, [r7, #0]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d007      	beq.n	80137fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80137ec:	4b1a      	ldr	r3, [pc, #104]	@ (8013858 <prvAddCurrentTaskToDelayedList+0xb4>)
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	3304      	adds	r3, #4
 80137f2:	4619      	mov	r1, r3
 80137f4:	481a      	ldr	r0, [pc, #104]	@ (8013860 <prvAddCurrentTaskToDelayedList+0xbc>)
 80137f6:	f7fd febc 	bl	8011572 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80137fa:	e026      	b.n	801384a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80137fc:	68fa      	ldr	r2, [r7, #12]
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	4413      	add	r3, r2
 8013802:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013804:	4b14      	ldr	r3, [pc, #80]	@ (8013858 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	68ba      	ldr	r2, [r7, #8]
 801380a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801380c:	68ba      	ldr	r2, [r7, #8]
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	429a      	cmp	r2, r3
 8013812:	d209      	bcs.n	8013828 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013814:	4b13      	ldr	r3, [pc, #76]	@ (8013864 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013816:	681a      	ldr	r2, [r3, #0]
 8013818:	4b0f      	ldr	r3, [pc, #60]	@ (8013858 <prvAddCurrentTaskToDelayedList+0xb4>)
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	3304      	adds	r3, #4
 801381e:	4619      	mov	r1, r3
 8013820:	4610      	mov	r0, r2
 8013822:	f7fd feca 	bl	80115ba <vListInsert>
}
 8013826:	e010      	b.n	801384a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013828:	4b0f      	ldr	r3, [pc, #60]	@ (8013868 <prvAddCurrentTaskToDelayedList+0xc4>)
 801382a:	681a      	ldr	r2, [r3, #0]
 801382c:	4b0a      	ldr	r3, [pc, #40]	@ (8013858 <prvAddCurrentTaskToDelayedList+0xb4>)
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	3304      	adds	r3, #4
 8013832:	4619      	mov	r1, r3
 8013834:	4610      	mov	r0, r2
 8013836:	f7fd fec0 	bl	80115ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801383a:	4b0c      	ldr	r3, [pc, #48]	@ (801386c <prvAddCurrentTaskToDelayedList+0xc8>)
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	68ba      	ldr	r2, [r7, #8]
 8013840:	429a      	cmp	r2, r3
 8013842:	d202      	bcs.n	801384a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013844:	4a09      	ldr	r2, [pc, #36]	@ (801386c <prvAddCurrentTaskToDelayedList+0xc8>)
 8013846:	68bb      	ldr	r3, [r7, #8]
 8013848:	6013      	str	r3, [r2, #0]
}
 801384a:	bf00      	nop
 801384c:	3710      	adds	r7, #16
 801384e:	46bd      	mov	sp, r7
 8013850:	bd80      	pop	{r7, pc}
 8013852:	bf00      	nop
 8013854:	200015dc 	.word	0x200015dc
 8013858:	200014d8 	.word	0x200014d8
 801385c:	200015e0 	.word	0x200015e0
 8013860:	200015c4 	.word	0x200015c4
 8013864:	20001594 	.word	0x20001594
 8013868:	20001590 	.word	0x20001590
 801386c:	200015f8 	.word	0x200015f8

08013870 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013870:	b480      	push	{r7}
 8013872:	b085      	sub	sp, #20
 8013874:	af00      	add	r7, sp, #0
 8013876:	60f8      	str	r0, [r7, #12]
 8013878:	60b9      	str	r1, [r7, #8]
 801387a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	3b04      	subs	r3, #4
 8013880:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8013888:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	3b04      	subs	r3, #4
 801388e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013890:	68bb      	ldr	r3, [r7, #8]
 8013892:	f023 0201 	bic.w	r2, r3, #1
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	3b04      	subs	r3, #4
 801389e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80138a0:	4a0c      	ldr	r2, [pc, #48]	@ (80138d4 <pxPortInitialiseStack+0x64>)
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	3b14      	subs	r3, #20
 80138aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80138ac:	687a      	ldr	r2, [r7, #4]
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	3b04      	subs	r3, #4
 80138b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	f06f 0202 	mvn.w	r2, #2
 80138be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	3b20      	subs	r3, #32
 80138c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80138c6:	68fb      	ldr	r3, [r7, #12]
}
 80138c8:	4618      	mov	r0, r3
 80138ca:	3714      	adds	r7, #20
 80138cc:	46bd      	mov	sp, r7
 80138ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d2:	4770      	bx	lr
 80138d4:	080138d9 	.word	0x080138d9

080138d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80138d8:	b480      	push	{r7}
 80138da:	b085      	sub	sp, #20
 80138dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80138de:	2300      	movs	r3, #0
 80138e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80138e2:	4b15      	ldr	r3, [pc, #84]	@ (8013938 <prvTaskExitError+0x60>)
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80138ea:	d00d      	beq.n	8013908 <prvTaskExitError+0x30>
	__asm volatile
 80138ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138f0:	b672      	cpsid	i
 80138f2:	f383 8811 	msr	BASEPRI, r3
 80138f6:	f3bf 8f6f 	isb	sy
 80138fa:	f3bf 8f4f 	dsb	sy
 80138fe:	b662      	cpsie	i
 8013900:	60fb      	str	r3, [r7, #12]
}
 8013902:	bf00      	nop
 8013904:	bf00      	nop
 8013906:	e7fd      	b.n	8013904 <prvTaskExitError+0x2c>
	__asm volatile
 8013908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801390c:	b672      	cpsid	i
 801390e:	f383 8811 	msr	BASEPRI, r3
 8013912:	f3bf 8f6f 	isb	sy
 8013916:	f3bf 8f4f 	dsb	sy
 801391a:	b662      	cpsie	i
 801391c:	60bb      	str	r3, [r7, #8]
}
 801391e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013920:	bf00      	nop
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d0fc      	beq.n	8013922 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013928:	bf00      	nop
 801392a:	bf00      	nop
 801392c:	3714      	adds	r7, #20
 801392e:	46bd      	mov	sp, r7
 8013930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013934:	4770      	bx	lr
 8013936:	bf00      	nop
 8013938:	20000094 	.word	0x20000094
 801393c:	00000000 	.word	0x00000000

08013940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013940:	4b07      	ldr	r3, [pc, #28]	@ (8013960 <pxCurrentTCBConst2>)
 8013942:	6819      	ldr	r1, [r3, #0]
 8013944:	6808      	ldr	r0, [r1, #0]
 8013946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801394a:	f380 8809 	msr	PSP, r0
 801394e:	f3bf 8f6f 	isb	sy
 8013952:	f04f 0000 	mov.w	r0, #0
 8013956:	f380 8811 	msr	BASEPRI, r0
 801395a:	4770      	bx	lr
 801395c:	f3af 8000 	nop.w

08013960 <pxCurrentTCBConst2>:
 8013960:	200014d8 	.word	0x200014d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013964:	bf00      	nop
 8013966:	bf00      	nop

08013968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013968:	4808      	ldr	r0, [pc, #32]	@ (801398c <prvPortStartFirstTask+0x24>)
 801396a:	6800      	ldr	r0, [r0, #0]
 801396c:	6800      	ldr	r0, [r0, #0]
 801396e:	f380 8808 	msr	MSP, r0
 8013972:	f04f 0000 	mov.w	r0, #0
 8013976:	f380 8814 	msr	CONTROL, r0
 801397a:	b662      	cpsie	i
 801397c:	b661      	cpsie	f
 801397e:	f3bf 8f4f 	dsb	sy
 8013982:	f3bf 8f6f 	isb	sy
 8013986:	df00      	svc	0
 8013988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801398a:	bf00      	nop
 801398c:	e000ed08 	.word	0xe000ed08

08013990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b084      	sub	sp, #16
 8013994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013996:	4b37      	ldr	r3, [pc, #220]	@ (8013a74 <xPortStartScheduler+0xe4>)
 8013998:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	781b      	ldrb	r3, [r3, #0]
 801399e:	b2db      	uxtb	r3, r3
 80139a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	22ff      	movs	r2, #255	@ 0xff
 80139a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	781b      	ldrb	r3, [r3, #0]
 80139ac:	b2db      	uxtb	r3, r3
 80139ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80139b0:	78fb      	ldrb	r3, [r7, #3]
 80139b2:	b2db      	uxtb	r3, r3
 80139b4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80139b8:	b2da      	uxtb	r2, r3
 80139ba:	4b2f      	ldr	r3, [pc, #188]	@ (8013a78 <xPortStartScheduler+0xe8>)
 80139bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80139be:	4b2f      	ldr	r3, [pc, #188]	@ (8013a7c <xPortStartScheduler+0xec>)
 80139c0:	2207      	movs	r2, #7
 80139c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80139c4:	e009      	b.n	80139da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80139c6:	4b2d      	ldr	r3, [pc, #180]	@ (8013a7c <xPortStartScheduler+0xec>)
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	3b01      	subs	r3, #1
 80139cc:	4a2b      	ldr	r2, [pc, #172]	@ (8013a7c <xPortStartScheduler+0xec>)
 80139ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80139d0:	78fb      	ldrb	r3, [r7, #3]
 80139d2:	b2db      	uxtb	r3, r3
 80139d4:	005b      	lsls	r3, r3, #1
 80139d6:	b2db      	uxtb	r3, r3
 80139d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80139da:	78fb      	ldrb	r3, [r7, #3]
 80139dc:	b2db      	uxtb	r3, r3
 80139de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80139e2:	2b80      	cmp	r3, #128	@ 0x80
 80139e4:	d0ef      	beq.n	80139c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80139e6:	4b25      	ldr	r3, [pc, #148]	@ (8013a7c <xPortStartScheduler+0xec>)
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	f1c3 0307 	rsb	r3, r3, #7
 80139ee:	2b04      	cmp	r3, #4
 80139f0:	d00d      	beq.n	8013a0e <xPortStartScheduler+0x7e>
	__asm volatile
 80139f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139f6:	b672      	cpsid	i
 80139f8:	f383 8811 	msr	BASEPRI, r3
 80139fc:	f3bf 8f6f 	isb	sy
 8013a00:	f3bf 8f4f 	dsb	sy
 8013a04:	b662      	cpsie	i
 8013a06:	60bb      	str	r3, [r7, #8]
}
 8013a08:	bf00      	nop
 8013a0a:	bf00      	nop
 8013a0c:	e7fd      	b.n	8013a0a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8013a7c <xPortStartScheduler+0xec>)
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	021b      	lsls	r3, r3, #8
 8013a14:	4a19      	ldr	r2, [pc, #100]	@ (8013a7c <xPortStartScheduler+0xec>)
 8013a16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013a18:	4b18      	ldr	r3, [pc, #96]	@ (8013a7c <xPortStartScheduler+0xec>)
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8013a20:	4a16      	ldr	r2, [pc, #88]	@ (8013a7c <xPortStartScheduler+0xec>)
 8013a22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	b2da      	uxtb	r2, r3
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013a2c:	4b14      	ldr	r3, [pc, #80]	@ (8013a80 <xPortStartScheduler+0xf0>)
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	4a13      	ldr	r2, [pc, #76]	@ (8013a80 <xPortStartScheduler+0xf0>)
 8013a32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8013a36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013a38:	4b11      	ldr	r3, [pc, #68]	@ (8013a80 <xPortStartScheduler+0xf0>)
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	4a10      	ldr	r2, [pc, #64]	@ (8013a80 <xPortStartScheduler+0xf0>)
 8013a3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8013a42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013a44:	f000 f8dc 	bl	8013c00 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013a48:	4b0e      	ldr	r3, [pc, #56]	@ (8013a84 <xPortStartScheduler+0xf4>)
 8013a4a:	2200      	movs	r2, #0
 8013a4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013a4e:	f000 f8fb 	bl	8013c48 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013a52:	4b0d      	ldr	r3, [pc, #52]	@ (8013a88 <xPortStartScheduler+0xf8>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	4a0c      	ldr	r2, [pc, #48]	@ (8013a88 <xPortStartScheduler+0xf8>)
 8013a58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8013a5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013a5e:	f7ff ff83 	bl	8013968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013a62:	f7ff fa65 	bl	8012f30 <vTaskSwitchContext>
	prvTaskExitError();
 8013a66:	f7ff ff37 	bl	80138d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013a6a:	2300      	movs	r3, #0
}
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	3710      	adds	r7, #16
 8013a70:	46bd      	mov	sp, r7
 8013a72:	bd80      	pop	{r7, pc}
 8013a74:	e000e400 	.word	0xe000e400
 8013a78:	20001604 	.word	0x20001604
 8013a7c:	20001608 	.word	0x20001608
 8013a80:	e000ed20 	.word	0xe000ed20
 8013a84:	20000094 	.word	0x20000094
 8013a88:	e000ef34 	.word	0xe000ef34

08013a8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013a8c:	b480      	push	{r7}
 8013a8e:	b083      	sub	sp, #12
 8013a90:	af00      	add	r7, sp, #0
	__asm volatile
 8013a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a96:	b672      	cpsid	i
 8013a98:	f383 8811 	msr	BASEPRI, r3
 8013a9c:	f3bf 8f6f 	isb	sy
 8013aa0:	f3bf 8f4f 	dsb	sy
 8013aa4:	b662      	cpsie	i
 8013aa6:	607b      	str	r3, [r7, #4]
}
 8013aa8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013aaa:	4b11      	ldr	r3, [pc, #68]	@ (8013af0 <vPortEnterCritical+0x64>)
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	3301      	adds	r3, #1
 8013ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8013af0 <vPortEnterCritical+0x64>)
 8013ab2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8013af0 <vPortEnterCritical+0x64>)
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	2b01      	cmp	r3, #1
 8013aba:	d112      	bne.n	8013ae2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013abc:	4b0d      	ldr	r3, [pc, #52]	@ (8013af4 <vPortEnterCritical+0x68>)
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	b2db      	uxtb	r3, r3
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d00d      	beq.n	8013ae2 <vPortEnterCritical+0x56>
	__asm volatile
 8013ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013aca:	b672      	cpsid	i
 8013acc:	f383 8811 	msr	BASEPRI, r3
 8013ad0:	f3bf 8f6f 	isb	sy
 8013ad4:	f3bf 8f4f 	dsb	sy
 8013ad8:	b662      	cpsie	i
 8013ada:	603b      	str	r3, [r7, #0]
}
 8013adc:	bf00      	nop
 8013ade:	bf00      	nop
 8013ae0:	e7fd      	b.n	8013ade <vPortEnterCritical+0x52>
	}
}
 8013ae2:	bf00      	nop
 8013ae4:	370c      	adds	r7, #12
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aec:	4770      	bx	lr
 8013aee:	bf00      	nop
 8013af0:	20000094 	.word	0x20000094
 8013af4:	e000ed04 	.word	0xe000ed04

08013af8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013af8:	b480      	push	{r7}
 8013afa:	b083      	sub	sp, #12
 8013afc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013afe:	4b13      	ldr	r3, [pc, #76]	@ (8013b4c <vPortExitCritical+0x54>)
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d10d      	bne.n	8013b22 <vPortExitCritical+0x2a>
	__asm volatile
 8013b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b0a:	b672      	cpsid	i
 8013b0c:	f383 8811 	msr	BASEPRI, r3
 8013b10:	f3bf 8f6f 	isb	sy
 8013b14:	f3bf 8f4f 	dsb	sy
 8013b18:	b662      	cpsie	i
 8013b1a:	607b      	str	r3, [r7, #4]
}
 8013b1c:	bf00      	nop
 8013b1e:	bf00      	nop
 8013b20:	e7fd      	b.n	8013b1e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8013b22:	4b0a      	ldr	r3, [pc, #40]	@ (8013b4c <vPortExitCritical+0x54>)
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	3b01      	subs	r3, #1
 8013b28:	4a08      	ldr	r2, [pc, #32]	@ (8013b4c <vPortExitCritical+0x54>)
 8013b2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013b2c:	4b07      	ldr	r3, [pc, #28]	@ (8013b4c <vPortExitCritical+0x54>)
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d105      	bne.n	8013b40 <vPortExitCritical+0x48>
 8013b34:	2300      	movs	r3, #0
 8013b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013b38:	683b      	ldr	r3, [r7, #0]
 8013b3a:	f383 8811 	msr	BASEPRI, r3
}
 8013b3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013b40:	bf00      	nop
 8013b42:	370c      	adds	r7, #12
 8013b44:	46bd      	mov	sp, r7
 8013b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4a:	4770      	bx	lr
 8013b4c:	20000094 	.word	0x20000094

08013b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013b50:	f3ef 8009 	mrs	r0, PSP
 8013b54:	f3bf 8f6f 	isb	sy
 8013b58:	4b15      	ldr	r3, [pc, #84]	@ (8013bb0 <pxCurrentTCBConst>)
 8013b5a:	681a      	ldr	r2, [r3, #0]
 8013b5c:	f01e 0f10 	tst.w	lr, #16
 8013b60:	bf08      	it	eq
 8013b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b6a:	6010      	str	r0, [r2, #0]
 8013b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013b70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8013b74:	b672      	cpsid	i
 8013b76:	f380 8811 	msr	BASEPRI, r0
 8013b7a:	f3bf 8f4f 	dsb	sy
 8013b7e:	f3bf 8f6f 	isb	sy
 8013b82:	b662      	cpsie	i
 8013b84:	f7ff f9d4 	bl	8012f30 <vTaskSwitchContext>
 8013b88:	f04f 0000 	mov.w	r0, #0
 8013b8c:	f380 8811 	msr	BASEPRI, r0
 8013b90:	bc09      	pop	{r0, r3}
 8013b92:	6819      	ldr	r1, [r3, #0]
 8013b94:	6808      	ldr	r0, [r1, #0]
 8013b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b9a:	f01e 0f10 	tst.w	lr, #16
 8013b9e:	bf08      	it	eq
 8013ba0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013ba4:	f380 8809 	msr	PSP, r0
 8013ba8:	f3bf 8f6f 	isb	sy
 8013bac:	4770      	bx	lr
 8013bae:	bf00      	nop

08013bb0 <pxCurrentTCBConst>:
 8013bb0:	200014d8 	.word	0x200014d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013bb4:	bf00      	nop
 8013bb6:	bf00      	nop

08013bb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b082      	sub	sp, #8
 8013bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8013bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bc2:	b672      	cpsid	i
 8013bc4:	f383 8811 	msr	BASEPRI, r3
 8013bc8:	f3bf 8f6f 	isb	sy
 8013bcc:	f3bf 8f4f 	dsb	sy
 8013bd0:	b662      	cpsie	i
 8013bd2:	607b      	str	r3, [r7, #4]
}
 8013bd4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013bd6:	f7ff f8ef 	bl	8012db8 <xTaskIncrementTick>
 8013bda:	4603      	mov	r3, r0
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d003      	beq.n	8013be8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013be0:	4b06      	ldr	r3, [pc, #24]	@ (8013bfc <SysTick_Handler+0x44>)
 8013be2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013be6:	601a      	str	r2, [r3, #0]
 8013be8:	2300      	movs	r3, #0
 8013bea:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013bec:	683b      	ldr	r3, [r7, #0]
 8013bee:	f383 8811 	msr	BASEPRI, r3
}
 8013bf2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013bf4:	bf00      	nop
 8013bf6:	3708      	adds	r7, #8
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	bd80      	pop	{r7, pc}
 8013bfc:	e000ed04 	.word	0xe000ed04

08013c00 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013c00:	b480      	push	{r7}
 8013c02:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013c04:	4b0b      	ldr	r3, [pc, #44]	@ (8013c34 <vPortSetupTimerInterrupt+0x34>)
 8013c06:	2200      	movs	r2, #0
 8013c08:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8013c38 <vPortSetupTimerInterrupt+0x38>)
 8013c0c:	2200      	movs	r2, #0
 8013c0e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013c10:	4b0a      	ldr	r3, [pc, #40]	@ (8013c3c <vPortSetupTimerInterrupt+0x3c>)
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	4a0a      	ldr	r2, [pc, #40]	@ (8013c40 <vPortSetupTimerInterrupt+0x40>)
 8013c16:	fba2 2303 	umull	r2, r3, r2, r3
 8013c1a:	099b      	lsrs	r3, r3, #6
 8013c1c:	4a09      	ldr	r2, [pc, #36]	@ (8013c44 <vPortSetupTimerInterrupt+0x44>)
 8013c1e:	3b01      	subs	r3, #1
 8013c20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013c22:	4b04      	ldr	r3, [pc, #16]	@ (8013c34 <vPortSetupTimerInterrupt+0x34>)
 8013c24:	2207      	movs	r2, #7
 8013c26:	601a      	str	r2, [r3, #0]
}
 8013c28:	bf00      	nop
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c30:	4770      	bx	lr
 8013c32:	bf00      	nop
 8013c34:	e000e010 	.word	0xe000e010
 8013c38:	e000e018 	.word	0xe000e018
 8013c3c:	2000004c 	.word	0x2000004c
 8013c40:	10624dd3 	.word	0x10624dd3
 8013c44:	e000e014 	.word	0xe000e014

08013c48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013c48:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8013c58 <vPortEnableVFP+0x10>
 8013c4c:	6801      	ldr	r1, [r0, #0]
 8013c4e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8013c52:	6001      	str	r1, [r0, #0]
 8013c54:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013c56:	bf00      	nop
 8013c58:	e000ed88 	.word	0xe000ed88

08013c5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013c5c:	b480      	push	{r7}
 8013c5e:	b085      	sub	sp, #20
 8013c60:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013c62:	f3ef 8305 	mrs	r3, IPSR
 8013c66:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	2b0f      	cmp	r3, #15
 8013c6c:	d917      	bls.n	8013c9e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013c6e:	4a1a      	ldr	r2, [pc, #104]	@ (8013cd8 <vPortValidateInterruptPriority+0x7c>)
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	4413      	add	r3, r2
 8013c74:	781b      	ldrb	r3, [r3, #0]
 8013c76:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013c78:	4b18      	ldr	r3, [pc, #96]	@ (8013cdc <vPortValidateInterruptPriority+0x80>)
 8013c7a:	781b      	ldrb	r3, [r3, #0]
 8013c7c:	7afa      	ldrb	r2, [r7, #11]
 8013c7e:	429a      	cmp	r2, r3
 8013c80:	d20d      	bcs.n	8013c9e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8013c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c86:	b672      	cpsid	i
 8013c88:	f383 8811 	msr	BASEPRI, r3
 8013c8c:	f3bf 8f6f 	isb	sy
 8013c90:	f3bf 8f4f 	dsb	sy
 8013c94:	b662      	cpsie	i
 8013c96:	607b      	str	r3, [r7, #4]
}
 8013c98:	bf00      	nop
 8013c9a:	bf00      	nop
 8013c9c:	e7fd      	b.n	8013c9a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013c9e:	4b10      	ldr	r3, [pc, #64]	@ (8013ce0 <vPortValidateInterruptPriority+0x84>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8013ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8013ce4 <vPortValidateInterruptPriority+0x88>)
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	429a      	cmp	r2, r3
 8013cac:	d90d      	bls.n	8013cca <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8013cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013cb2:	b672      	cpsid	i
 8013cb4:	f383 8811 	msr	BASEPRI, r3
 8013cb8:	f3bf 8f6f 	isb	sy
 8013cbc:	f3bf 8f4f 	dsb	sy
 8013cc0:	b662      	cpsie	i
 8013cc2:	603b      	str	r3, [r7, #0]
}
 8013cc4:	bf00      	nop
 8013cc6:	bf00      	nop
 8013cc8:	e7fd      	b.n	8013cc6 <vPortValidateInterruptPriority+0x6a>
	}
 8013cca:	bf00      	nop
 8013ccc:	3714      	adds	r7, #20
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd4:	4770      	bx	lr
 8013cd6:	bf00      	nop
 8013cd8:	e000e3f0 	.word	0xe000e3f0
 8013cdc:	20001604 	.word	0x20001604
 8013ce0:	e000ed0c 	.word	0xe000ed0c
 8013ce4:	20001608 	.word	0x20001608

08013ce8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b08a      	sub	sp, #40	@ 0x28
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013cf4:	f7fe ff90 	bl	8012c18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013cf8:	4b5d      	ldr	r3, [pc, #372]	@ (8013e70 <pvPortMalloc+0x188>)
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d101      	bne.n	8013d04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013d00:	f000 f920 	bl	8013f44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013d04:	4b5b      	ldr	r3, [pc, #364]	@ (8013e74 <pvPortMalloc+0x18c>)
 8013d06:	681a      	ldr	r2, [r3, #0]
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	4013      	ands	r3, r2
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	f040 8094 	bne.w	8013e3a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d020      	beq.n	8013d5a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8013d18:	2208      	movs	r2, #8
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	4413      	add	r3, r2
 8013d1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	f003 0307 	and.w	r3, r3, #7
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d017      	beq.n	8013d5a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	f023 0307 	bic.w	r3, r3, #7
 8013d30:	3308      	adds	r3, #8
 8013d32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	f003 0307 	and.w	r3, r3, #7
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d00d      	beq.n	8013d5a <pvPortMalloc+0x72>
	__asm volatile
 8013d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d42:	b672      	cpsid	i
 8013d44:	f383 8811 	msr	BASEPRI, r3
 8013d48:	f3bf 8f6f 	isb	sy
 8013d4c:	f3bf 8f4f 	dsb	sy
 8013d50:	b662      	cpsie	i
 8013d52:	617b      	str	r3, [r7, #20]
}
 8013d54:	bf00      	nop
 8013d56:	bf00      	nop
 8013d58:	e7fd      	b.n	8013d56 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d06c      	beq.n	8013e3a <pvPortMalloc+0x152>
 8013d60:	4b45      	ldr	r3, [pc, #276]	@ (8013e78 <pvPortMalloc+0x190>)
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	687a      	ldr	r2, [r7, #4]
 8013d66:	429a      	cmp	r2, r3
 8013d68:	d867      	bhi.n	8013e3a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013d6a:	4b44      	ldr	r3, [pc, #272]	@ (8013e7c <pvPortMalloc+0x194>)
 8013d6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013d6e:	4b43      	ldr	r3, [pc, #268]	@ (8013e7c <pvPortMalloc+0x194>)
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013d74:	e004      	b.n	8013d80 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8013d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d82:	685b      	ldr	r3, [r3, #4]
 8013d84:	687a      	ldr	r2, [r7, #4]
 8013d86:	429a      	cmp	r2, r3
 8013d88:	d903      	bls.n	8013d92 <pvPortMalloc+0xaa>
 8013d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d1f1      	bne.n	8013d76 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013d92:	4b37      	ldr	r3, [pc, #220]	@ (8013e70 <pvPortMalloc+0x188>)
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013d98:	429a      	cmp	r2, r3
 8013d9a:	d04e      	beq.n	8013e3a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013d9c:	6a3b      	ldr	r3, [r7, #32]
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	2208      	movs	r2, #8
 8013da2:	4413      	add	r3, r2
 8013da4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013da8:	681a      	ldr	r2, [r3, #0]
 8013daa:	6a3b      	ldr	r3, [r7, #32]
 8013dac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013db0:	685a      	ldr	r2, [r3, #4]
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	1ad2      	subs	r2, r2, r3
 8013db6:	2308      	movs	r3, #8
 8013db8:	005b      	lsls	r3, r3, #1
 8013dba:	429a      	cmp	r2, r3
 8013dbc:	d922      	bls.n	8013e04 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	4413      	add	r3, r2
 8013dc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013dc6:	69bb      	ldr	r3, [r7, #24]
 8013dc8:	f003 0307 	and.w	r3, r3, #7
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d00d      	beq.n	8013dec <pvPortMalloc+0x104>
	__asm volatile
 8013dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013dd4:	b672      	cpsid	i
 8013dd6:	f383 8811 	msr	BASEPRI, r3
 8013dda:	f3bf 8f6f 	isb	sy
 8013dde:	f3bf 8f4f 	dsb	sy
 8013de2:	b662      	cpsie	i
 8013de4:	613b      	str	r3, [r7, #16]
}
 8013de6:	bf00      	nop
 8013de8:	bf00      	nop
 8013dea:	e7fd      	b.n	8013de8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dee:	685a      	ldr	r2, [r3, #4]
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	1ad2      	subs	r2, r2, r3
 8013df4:	69bb      	ldr	r3, [r7, #24]
 8013df6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dfa:	687a      	ldr	r2, [r7, #4]
 8013dfc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013dfe:	69b8      	ldr	r0, [r7, #24]
 8013e00:	f000 f902 	bl	8014008 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013e04:	4b1c      	ldr	r3, [pc, #112]	@ (8013e78 <pvPortMalloc+0x190>)
 8013e06:	681a      	ldr	r2, [r3, #0]
 8013e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e0a:	685b      	ldr	r3, [r3, #4]
 8013e0c:	1ad3      	subs	r3, r2, r3
 8013e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8013e78 <pvPortMalloc+0x190>)
 8013e10:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013e12:	4b19      	ldr	r3, [pc, #100]	@ (8013e78 <pvPortMalloc+0x190>)
 8013e14:	681a      	ldr	r2, [r3, #0]
 8013e16:	4b1a      	ldr	r3, [pc, #104]	@ (8013e80 <pvPortMalloc+0x198>)
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	429a      	cmp	r2, r3
 8013e1c:	d203      	bcs.n	8013e26 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013e1e:	4b16      	ldr	r3, [pc, #88]	@ (8013e78 <pvPortMalloc+0x190>)
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	4a17      	ldr	r2, [pc, #92]	@ (8013e80 <pvPortMalloc+0x198>)
 8013e24:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e28:	685a      	ldr	r2, [r3, #4]
 8013e2a:	4b12      	ldr	r3, [pc, #72]	@ (8013e74 <pvPortMalloc+0x18c>)
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	431a      	orrs	r2, r3
 8013e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e32:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e36:	2200      	movs	r2, #0
 8013e38:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013e3a:	f7fe fefb 	bl	8012c34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013e3e:	69fb      	ldr	r3, [r7, #28]
 8013e40:	f003 0307 	and.w	r3, r3, #7
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d00d      	beq.n	8013e64 <pvPortMalloc+0x17c>
	__asm volatile
 8013e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e4c:	b672      	cpsid	i
 8013e4e:	f383 8811 	msr	BASEPRI, r3
 8013e52:	f3bf 8f6f 	isb	sy
 8013e56:	f3bf 8f4f 	dsb	sy
 8013e5a:	b662      	cpsie	i
 8013e5c:	60fb      	str	r3, [r7, #12]
}
 8013e5e:	bf00      	nop
 8013e60:	bf00      	nop
 8013e62:	e7fd      	b.n	8013e60 <pvPortMalloc+0x178>
	return pvReturn;
 8013e64:	69fb      	ldr	r3, [r7, #28]
}
 8013e66:	4618      	mov	r0, r3
 8013e68:	3728      	adds	r7, #40	@ 0x28
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	bd80      	pop	{r7, pc}
 8013e6e:	bf00      	nop
 8013e70:	20005214 	.word	0x20005214
 8013e74:	20005220 	.word	0x20005220
 8013e78:	20005218 	.word	0x20005218
 8013e7c:	2000520c 	.word	0x2000520c
 8013e80:	2000521c 	.word	0x2000521c

08013e84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b086      	sub	sp, #24
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d04e      	beq.n	8013f34 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013e96:	2308      	movs	r3, #8
 8013e98:	425b      	negs	r3, r3
 8013e9a:	697a      	ldr	r2, [r7, #20]
 8013e9c:	4413      	add	r3, r2
 8013e9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013ea0:	697b      	ldr	r3, [r7, #20]
 8013ea2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013ea4:	693b      	ldr	r3, [r7, #16]
 8013ea6:	685a      	ldr	r2, [r3, #4]
 8013ea8:	4b24      	ldr	r3, [pc, #144]	@ (8013f3c <vPortFree+0xb8>)
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	4013      	ands	r3, r2
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d10d      	bne.n	8013ece <vPortFree+0x4a>
	__asm volatile
 8013eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013eb6:	b672      	cpsid	i
 8013eb8:	f383 8811 	msr	BASEPRI, r3
 8013ebc:	f3bf 8f6f 	isb	sy
 8013ec0:	f3bf 8f4f 	dsb	sy
 8013ec4:	b662      	cpsie	i
 8013ec6:	60fb      	str	r3, [r7, #12]
}
 8013ec8:	bf00      	nop
 8013eca:	bf00      	nop
 8013ecc:	e7fd      	b.n	8013eca <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013ece:	693b      	ldr	r3, [r7, #16]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d00d      	beq.n	8013ef2 <vPortFree+0x6e>
	__asm volatile
 8013ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013eda:	b672      	cpsid	i
 8013edc:	f383 8811 	msr	BASEPRI, r3
 8013ee0:	f3bf 8f6f 	isb	sy
 8013ee4:	f3bf 8f4f 	dsb	sy
 8013ee8:	b662      	cpsie	i
 8013eea:	60bb      	str	r3, [r7, #8]
}
 8013eec:	bf00      	nop
 8013eee:	bf00      	nop
 8013ef0:	e7fd      	b.n	8013eee <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013ef2:	693b      	ldr	r3, [r7, #16]
 8013ef4:	685a      	ldr	r2, [r3, #4]
 8013ef6:	4b11      	ldr	r3, [pc, #68]	@ (8013f3c <vPortFree+0xb8>)
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	4013      	ands	r3, r2
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d019      	beq.n	8013f34 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013f00:	693b      	ldr	r3, [r7, #16]
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d115      	bne.n	8013f34 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013f08:	693b      	ldr	r3, [r7, #16]
 8013f0a:	685a      	ldr	r2, [r3, #4]
 8013f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8013f3c <vPortFree+0xb8>)
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	43db      	mvns	r3, r3
 8013f12:	401a      	ands	r2, r3
 8013f14:	693b      	ldr	r3, [r7, #16]
 8013f16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013f18:	f7fe fe7e 	bl	8012c18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013f1c:	693b      	ldr	r3, [r7, #16]
 8013f1e:	685a      	ldr	r2, [r3, #4]
 8013f20:	4b07      	ldr	r3, [pc, #28]	@ (8013f40 <vPortFree+0xbc>)
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	4413      	add	r3, r2
 8013f26:	4a06      	ldr	r2, [pc, #24]	@ (8013f40 <vPortFree+0xbc>)
 8013f28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013f2a:	6938      	ldr	r0, [r7, #16]
 8013f2c:	f000 f86c 	bl	8014008 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013f30:	f7fe fe80 	bl	8012c34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013f34:	bf00      	nop
 8013f36:	3718      	adds	r7, #24
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	bd80      	pop	{r7, pc}
 8013f3c:	20005220 	.word	0x20005220
 8013f40:	20005218 	.word	0x20005218

08013f44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013f44:	b480      	push	{r7}
 8013f46:	b085      	sub	sp, #20
 8013f48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013f4a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8013f4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013f50:	4b27      	ldr	r3, [pc, #156]	@ (8013ff0 <prvHeapInit+0xac>)
 8013f52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	f003 0307 	and.w	r3, r3, #7
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d00c      	beq.n	8013f78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	3307      	adds	r3, #7
 8013f62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	f023 0307 	bic.w	r3, r3, #7
 8013f6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013f6c:	68ba      	ldr	r2, [r7, #8]
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	1ad3      	subs	r3, r2, r3
 8013f72:	4a1f      	ldr	r2, [pc, #124]	@ (8013ff0 <prvHeapInit+0xac>)
 8013f74:	4413      	add	r3, r2
 8013f76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8013ff4 <prvHeapInit+0xb0>)
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013f82:	4b1c      	ldr	r3, [pc, #112]	@ (8013ff4 <prvHeapInit+0xb0>)
 8013f84:	2200      	movs	r2, #0
 8013f86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	68ba      	ldr	r2, [r7, #8]
 8013f8c:	4413      	add	r3, r2
 8013f8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013f90:	2208      	movs	r2, #8
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	1a9b      	subs	r3, r3, r2
 8013f96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	f023 0307 	bic.w	r3, r3, #7
 8013f9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	4a15      	ldr	r2, [pc, #84]	@ (8013ff8 <prvHeapInit+0xb4>)
 8013fa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013fa6:	4b14      	ldr	r3, [pc, #80]	@ (8013ff8 <prvHeapInit+0xb4>)
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	2200      	movs	r2, #0
 8013fac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013fae:	4b12      	ldr	r3, [pc, #72]	@ (8013ff8 <prvHeapInit+0xb4>)
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013fba:	683b      	ldr	r3, [r7, #0]
 8013fbc:	68fa      	ldr	r2, [r7, #12]
 8013fbe:	1ad2      	subs	r2, r2, r3
 8013fc0:	683b      	ldr	r3, [r7, #0]
 8013fc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8013ff8 <prvHeapInit+0xb4>)
 8013fc6:	681a      	ldr	r2, [r3, #0]
 8013fc8:	683b      	ldr	r3, [r7, #0]
 8013fca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013fcc:	683b      	ldr	r3, [r7, #0]
 8013fce:	685b      	ldr	r3, [r3, #4]
 8013fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8013ffc <prvHeapInit+0xb8>)
 8013fd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013fd4:	683b      	ldr	r3, [r7, #0]
 8013fd6:	685b      	ldr	r3, [r3, #4]
 8013fd8:	4a09      	ldr	r2, [pc, #36]	@ (8014000 <prvHeapInit+0xbc>)
 8013fda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013fdc:	4b09      	ldr	r3, [pc, #36]	@ (8014004 <prvHeapInit+0xc0>)
 8013fde:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8013fe2:	601a      	str	r2, [r3, #0]
}
 8013fe4:	bf00      	nop
 8013fe6:	3714      	adds	r7, #20
 8013fe8:	46bd      	mov	sp, r7
 8013fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fee:	4770      	bx	lr
 8013ff0:	2000160c 	.word	0x2000160c
 8013ff4:	2000520c 	.word	0x2000520c
 8013ff8:	20005214 	.word	0x20005214
 8013ffc:	2000521c 	.word	0x2000521c
 8014000:	20005218 	.word	0x20005218
 8014004:	20005220 	.word	0x20005220

08014008 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014008:	b480      	push	{r7}
 801400a:	b085      	sub	sp, #20
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014010:	4b28      	ldr	r3, [pc, #160]	@ (80140b4 <prvInsertBlockIntoFreeList+0xac>)
 8014012:	60fb      	str	r3, [r7, #12]
 8014014:	e002      	b.n	801401c <prvInsertBlockIntoFreeList+0x14>
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	60fb      	str	r3, [r7, #12]
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	687a      	ldr	r2, [r7, #4]
 8014022:	429a      	cmp	r2, r3
 8014024:	d8f7      	bhi.n	8014016 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	685b      	ldr	r3, [r3, #4]
 801402e:	68ba      	ldr	r2, [r7, #8]
 8014030:	4413      	add	r3, r2
 8014032:	687a      	ldr	r2, [r7, #4]
 8014034:	429a      	cmp	r2, r3
 8014036:	d108      	bne.n	801404a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	685a      	ldr	r2, [r3, #4]
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	685b      	ldr	r3, [r3, #4]
 8014040:	441a      	add	r2, r3
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	685b      	ldr	r3, [r3, #4]
 8014052:	68ba      	ldr	r2, [r7, #8]
 8014054:	441a      	add	r2, r3
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	429a      	cmp	r2, r3
 801405c:	d118      	bne.n	8014090 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	681a      	ldr	r2, [r3, #0]
 8014062:	4b15      	ldr	r3, [pc, #84]	@ (80140b8 <prvInsertBlockIntoFreeList+0xb0>)
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	429a      	cmp	r2, r3
 8014068:	d00d      	beq.n	8014086 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	685a      	ldr	r2, [r3, #4]
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	685b      	ldr	r3, [r3, #4]
 8014074:	441a      	add	r2, r3
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	681a      	ldr	r2, [r3, #0]
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	601a      	str	r2, [r3, #0]
 8014084:	e008      	b.n	8014098 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014086:	4b0c      	ldr	r3, [pc, #48]	@ (80140b8 <prvInsertBlockIntoFreeList+0xb0>)
 8014088:	681a      	ldr	r2, [r3, #0]
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	601a      	str	r2, [r3, #0]
 801408e:	e003      	b.n	8014098 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	681a      	ldr	r2, [r3, #0]
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014098:	68fa      	ldr	r2, [r7, #12]
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	429a      	cmp	r2, r3
 801409e:	d002      	beq.n	80140a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	687a      	ldr	r2, [r7, #4]
 80140a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80140a6:	bf00      	nop
 80140a8:	3714      	adds	r7, #20
 80140aa:	46bd      	mov	sp, r7
 80140ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b0:	4770      	bx	lr
 80140b2:	bf00      	nop
 80140b4:	2000520c 	.word	0x2000520c
 80140b8:	20005214 	.word	0x20005214

080140bc <rand>:
 80140bc:	4b16      	ldr	r3, [pc, #88]	@ (8014118 <rand+0x5c>)
 80140be:	b510      	push	{r4, lr}
 80140c0:	681c      	ldr	r4, [r3, #0]
 80140c2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80140c4:	b9b3      	cbnz	r3, 80140f4 <rand+0x38>
 80140c6:	2018      	movs	r0, #24
 80140c8:	f000 faa4 	bl	8014614 <malloc>
 80140cc:	4602      	mov	r2, r0
 80140ce:	6320      	str	r0, [r4, #48]	@ 0x30
 80140d0:	b920      	cbnz	r0, 80140dc <rand+0x20>
 80140d2:	4b12      	ldr	r3, [pc, #72]	@ (801411c <rand+0x60>)
 80140d4:	4812      	ldr	r0, [pc, #72]	@ (8014120 <rand+0x64>)
 80140d6:	2152      	movs	r1, #82	@ 0x52
 80140d8:	f000 fa34 	bl	8014544 <__assert_func>
 80140dc:	4911      	ldr	r1, [pc, #68]	@ (8014124 <rand+0x68>)
 80140de:	4b12      	ldr	r3, [pc, #72]	@ (8014128 <rand+0x6c>)
 80140e0:	e9c0 1300 	strd	r1, r3, [r0]
 80140e4:	4b11      	ldr	r3, [pc, #68]	@ (801412c <rand+0x70>)
 80140e6:	6083      	str	r3, [r0, #8]
 80140e8:	230b      	movs	r3, #11
 80140ea:	8183      	strh	r3, [r0, #12]
 80140ec:	2100      	movs	r1, #0
 80140ee:	2001      	movs	r0, #1
 80140f0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80140f4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80140f6:	480e      	ldr	r0, [pc, #56]	@ (8014130 <rand+0x74>)
 80140f8:	690b      	ldr	r3, [r1, #16]
 80140fa:	694c      	ldr	r4, [r1, #20]
 80140fc:	4a0d      	ldr	r2, [pc, #52]	@ (8014134 <rand+0x78>)
 80140fe:	4358      	muls	r0, r3
 8014100:	fb02 0004 	mla	r0, r2, r4, r0
 8014104:	fba3 3202 	umull	r3, r2, r3, r2
 8014108:	3301      	adds	r3, #1
 801410a:	eb40 0002 	adc.w	r0, r0, r2
 801410e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8014112:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8014116:	bd10      	pop	{r4, pc}
 8014118:	200000a4 	.word	0x200000a4
 801411c:	080239d4 	.word	0x080239d4
 8014120:	080239eb 	.word	0x080239eb
 8014124:	abcd330e 	.word	0xabcd330e
 8014128:	e66d1234 	.word	0xe66d1234
 801412c:	0005deec 	.word	0x0005deec
 8014130:	5851f42d 	.word	0x5851f42d
 8014134:	4c957f2d 	.word	0x4c957f2d

08014138 <std>:
 8014138:	2300      	movs	r3, #0
 801413a:	b510      	push	{r4, lr}
 801413c:	4604      	mov	r4, r0
 801413e:	e9c0 3300 	strd	r3, r3, [r0]
 8014142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014146:	6083      	str	r3, [r0, #8]
 8014148:	8181      	strh	r1, [r0, #12]
 801414a:	6643      	str	r3, [r0, #100]	@ 0x64
 801414c:	81c2      	strh	r2, [r0, #14]
 801414e:	6183      	str	r3, [r0, #24]
 8014150:	4619      	mov	r1, r3
 8014152:	2208      	movs	r2, #8
 8014154:	305c      	adds	r0, #92	@ 0x5c
 8014156:	f000 f914 	bl	8014382 <memset>
 801415a:	4b0d      	ldr	r3, [pc, #52]	@ (8014190 <std+0x58>)
 801415c:	6263      	str	r3, [r4, #36]	@ 0x24
 801415e:	4b0d      	ldr	r3, [pc, #52]	@ (8014194 <std+0x5c>)
 8014160:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014162:	4b0d      	ldr	r3, [pc, #52]	@ (8014198 <std+0x60>)
 8014164:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014166:	4b0d      	ldr	r3, [pc, #52]	@ (801419c <std+0x64>)
 8014168:	6323      	str	r3, [r4, #48]	@ 0x30
 801416a:	4b0d      	ldr	r3, [pc, #52]	@ (80141a0 <std+0x68>)
 801416c:	6224      	str	r4, [r4, #32]
 801416e:	429c      	cmp	r4, r3
 8014170:	d006      	beq.n	8014180 <std+0x48>
 8014172:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014176:	4294      	cmp	r4, r2
 8014178:	d002      	beq.n	8014180 <std+0x48>
 801417a:	33d0      	adds	r3, #208	@ 0xd0
 801417c:	429c      	cmp	r4, r3
 801417e:	d105      	bne.n	801418c <std+0x54>
 8014180:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014188:	f000 b9ca 	b.w	8014520 <__retarget_lock_init_recursive>
 801418c:	bd10      	pop	{r4, pc}
 801418e:	bf00      	nop
 8014190:	080142fd 	.word	0x080142fd
 8014194:	0801431f 	.word	0x0801431f
 8014198:	08014357 	.word	0x08014357
 801419c:	0801437b 	.word	0x0801437b
 80141a0:	20005224 	.word	0x20005224

080141a4 <stdio_exit_handler>:
 80141a4:	4a02      	ldr	r2, [pc, #8]	@ (80141b0 <stdio_exit_handler+0xc>)
 80141a6:	4903      	ldr	r1, [pc, #12]	@ (80141b4 <stdio_exit_handler+0x10>)
 80141a8:	4803      	ldr	r0, [pc, #12]	@ (80141b8 <stdio_exit_handler+0x14>)
 80141aa:	f000 b869 	b.w	8014280 <_fwalk_sglue>
 80141ae:	bf00      	nop
 80141b0:	20000098 	.word	0x20000098
 80141b4:	08014e55 	.word	0x08014e55
 80141b8:	200000a8 	.word	0x200000a8

080141bc <cleanup_stdio>:
 80141bc:	6841      	ldr	r1, [r0, #4]
 80141be:	4b0c      	ldr	r3, [pc, #48]	@ (80141f0 <cleanup_stdio+0x34>)
 80141c0:	4299      	cmp	r1, r3
 80141c2:	b510      	push	{r4, lr}
 80141c4:	4604      	mov	r4, r0
 80141c6:	d001      	beq.n	80141cc <cleanup_stdio+0x10>
 80141c8:	f000 fe44 	bl	8014e54 <_fflush_r>
 80141cc:	68a1      	ldr	r1, [r4, #8]
 80141ce:	4b09      	ldr	r3, [pc, #36]	@ (80141f4 <cleanup_stdio+0x38>)
 80141d0:	4299      	cmp	r1, r3
 80141d2:	d002      	beq.n	80141da <cleanup_stdio+0x1e>
 80141d4:	4620      	mov	r0, r4
 80141d6:	f000 fe3d 	bl	8014e54 <_fflush_r>
 80141da:	68e1      	ldr	r1, [r4, #12]
 80141dc:	4b06      	ldr	r3, [pc, #24]	@ (80141f8 <cleanup_stdio+0x3c>)
 80141de:	4299      	cmp	r1, r3
 80141e0:	d004      	beq.n	80141ec <cleanup_stdio+0x30>
 80141e2:	4620      	mov	r0, r4
 80141e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141e8:	f000 be34 	b.w	8014e54 <_fflush_r>
 80141ec:	bd10      	pop	{r4, pc}
 80141ee:	bf00      	nop
 80141f0:	20005224 	.word	0x20005224
 80141f4:	2000528c 	.word	0x2000528c
 80141f8:	200052f4 	.word	0x200052f4

080141fc <global_stdio_init.part.0>:
 80141fc:	b510      	push	{r4, lr}
 80141fe:	4b0b      	ldr	r3, [pc, #44]	@ (801422c <global_stdio_init.part.0+0x30>)
 8014200:	4c0b      	ldr	r4, [pc, #44]	@ (8014230 <global_stdio_init.part.0+0x34>)
 8014202:	4a0c      	ldr	r2, [pc, #48]	@ (8014234 <global_stdio_init.part.0+0x38>)
 8014204:	601a      	str	r2, [r3, #0]
 8014206:	4620      	mov	r0, r4
 8014208:	2200      	movs	r2, #0
 801420a:	2104      	movs	r1, #4
 801420c:	f7ff ff94 	bl	8014138 <std>
 8014210:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014214:	2201      	movs	r2, #1
 8014216:	2109      	movs	r1, #9
 8014218:	f7ff ff8e 	bl	8014138 <std>
 801421c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014220:	2202      	movs	r2, #2
 8014222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014226:	2112      	movs	r1, #18
 8014228:	f7ff bf86 	b.w	8014138 <std>
 801422c:	2000535c 	.word	0x2000535c
 8014230:	20005224 	.word	0x20005224
 8014234:	080141a5 	.word	0x080141a5

08014238 <__sfp_lock_acquire>:
 8014238:	4801      	ldr	r0, [pc, #4]	@ (8014240 <__sfp_lock_acquire+0x8>)
 801423a:	f000 b972 	b.w	8014522 <__retarget_lock_acquire_recursive>
 801423e:	bf00      	nop
 8014240:	20005365 	.word	0x20005365

08014244 <__sfp_lock_release>:
 8014244:	4801      	ldr	r0, [pc, #4]	@ (801424c <__sfp_lock_release+0x8>)
 8014246:	f000 b96d 	b.w	8014524 <__retarget_lock_release_recursive>
 801424a:	bf00      	nop
 801424c:	20005365 	.word	0x20005365

08014250 <__sinit>:
 8014250:	b510      	push	{r4, lr}
 8014252:	4604      	mov	r4, r0
 8014254:	f7ff fff0 	bl	8014238 <__sfp_lock_acquire>
 8014258:	6a23      	ldr	r3, [r4, #32]
 801425a:	b11b      	cbz	r3, 8014264 <__sinit+0x14>
 801425c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014260:	f7ff bff0 	b.w	8014244 <__sfp_lock_release>
 8014264:	4b04      	ldr	r3, [pc, #16]	@ (8014278 <__sinit+0x28>)
 8014266:	6223      	str	r3, [r4, #32]
 8014268:	4b04      	ldr	r3, [pc, #16]	@ (801427c <__sinit+0x2c>)
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d1f5      	bne.n	801425c <__sinit+0xc>
 8014270:	f7ff ffc4 	bl	80141fc <global_stdio_init.part.0>
 8014274:	e7f2      	b.n	801425c <__sinit+0xc>
 8014276:	bf00      	nop
 8014278:	080141bd 	.word	0x080141bd
 801427c:	2000535c 	.word	0x2000535c

08014280 <_fwalk_sglue>:
 8014280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014284:	4607      	mov	r7, r0
 8014286:	4688      	mov	r8, r1
 8014288:	4614      	mov	r4, r2
 801428a:	2600      	movs	r6, #0
 801428c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014290:	f1b9 0901 	subs.w	r9, r9, #1
 8014294:	d505      	bpl.n	80142a2 <_fwalk_sglue+0x22>
 8014296:	6824      	ldr	r4, [r4, #0]
 8014298:	2c00      	cmp	r4, #0
 801429a:	d1f7      	bne.n	801428c <_fwalk_sglue+0xc>
 801429c:	4630      	mov	r0, r6
 801429e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142a2:	89ab      	ldrh	r3, [r5, #12]
 80142a4:	2b01      	cmp	r3, #1
 80142a6:	d907      	bls.n	80142b8 <_fwalk_sglue+0x38>
 80142a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80142ac:	3301      	adds	r3, #1
 80142ae:	d003      	beq.n	80142b8 <_fwalk_sglue+0x38>
 80142b0:	4629      	mov	r1, r5
 80142b2:	4638      	mov	r0, r7
 80142b4:	47c0      	blx	r8
 80142b6:	4306      	orrs	r6, r0
 80142b8:	3568      	adds	r5, #104	@ 0x68
 80142ba:	e7e9      	b.n	8014290 <_fwalk_sglue+0x10>

080142bc <siprintf>:
 80142bc:	b40e      	push	{r1, r2, r3}
 80142be:	b500      	push	{lr}
 80142c0:	b09c      	sub	sp, #112	@ 0x70
 80142c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80142c4:	9002      	str	r0, [sp, #8]
 80142c6:	9006      	str	r0, [sp, #24]
 80142c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80142cc:	4809      	ldr	r0, [pc, #36]	@ (80142f4 <siprintf+0x38>)
 80142ce:	9107      	str	r1, [sp, #28]
 80142d0:	9104      	str	r1, [sp, #16]
 80142d2:	4909      	ldr	r1, [pc, #36]	@ (80142f8 <siprintf+0x3c>)
 80142d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80142d8:	9105      	str	r1, [sp, #20]
 80142da:	6800      	ldr	r0, [r0, #0]
 80142dc:	9301      	str	r3, [sp, #4]
 80142de:	a902      	add	r1, sp, #8
 80142e0:	f000 faaa 	bl	8014838 <_svfiprintf_r>
 80142e4:	9b02      	ldr	r3, [sp, #8]
 80142e6:	2200      	movs	r2, #0
 80142e8:	701a      	strb	r2, [r3, #0]
 80142ea:	b01c      	add	sp, #112	@ 0x70
 80142ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80142f0:	b003      	add	sp, #12
 80142f2:	4770      	bx	lr
 80142f4:	200000a4 	.word	0x200000a4
 80142f8:	ffff0208 	.word	0xffff0208

080142fc <__sread>:
 80142fc:	b510      	push	{r4, lr}
 80142fe:	460c      	mov	r4, r1
 8014300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014304:	f000 f8be 	bl	8014484 <_read_r>
 8014308:	2800      	cmp	r0, #0
 801430a:	bfab      	itete	ge
 801430c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801430e:	89a3      	ldrhlt	r3, [r4, #12]
 8014310:	181b      	addge	r3, r3, r0
 8014312:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014316:	bfac      	ite	ge
 8014318:	6563      	strge	r3, [r4, #84]	@ 0x54
 801431a:	81a3      	strhlt	r3, [r4, #12]
 801431c:	bd10      	pop	{r4, pc}

0801431e <__swrite>:
 801431e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014322:	461f      	mov	r7, r3
 8014324:	898b      	ldrh	r3, [r1, #12]
 8014326:	05db      	lsls	r3, r3, #23
 8014328:	4605      	mov	r5, r0
 801432a:	460c      	mov	r4, r1
 801432c:	4616      	mov	r6, r2
 801432e:	d505      	bpl.n	801433c <__swrite+0x1e>
 8014330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014334:	2302      	movs	r3, #2
 8014336:	2200      	movs	r2, #0
 8014338:	f000 f892 	bl	8014460 <_lseek_r>
 801433c:	89a3      	ldrh	r3, [r4, #12]
 801433e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014342:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014346:	81a3      	strh	r3, [r4, #12]
 8014348:	4632      	mov	r2, r6
 801434a:	463b      	mov	r3, r7
 801434c:	4628      	mov	r0, r5
 801434e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014352:	f000 b8a9 	b.w	80144a8 <_write_r>

08014356 <__sseek>:
 8014356:	b510      	push	{r4, lr}
 8014358:	460c      	mov	r4, r1
 801435a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801435e:	f000 f87f 	bl	8014460 <_lseek_r>
 8014362:	1c43      	adds	r3, r0, #1
 8014364:	89a3      	ldrh	r3, [r4, #12]
 8014366:	bf15      	itete	ne
 8014368:	6560      	strne	r0, [r4, #84]	@ 0x54
 801436a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801436e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014372:	81a3      	strheq	r3, [r4, #12]
 8014374:	bf18      	it	ne
 8014376:	81a3      	strhne	r3, [r4, #12]
 8014378:	bd10      	pop	{r4, pc}

0801437a <__sclose>:
 801437a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801437e:	f000 b809 	b.w	8014394 <_close_r>

08014382 <memset>:
 8014382:	4402      	add	r2, r0
 8014384:	4603      	mov	r3, r0
 8014386:	4293      	cmp	r3, r2
 8014388:	d100      	bne.n	801438c <memset+0xa>
 801438a:	4770      	bx	lr
 801438c:	f803 1b01 	strb.w	r1, [r3], #1
 8014390:	e7f9      	b.n	8014386 <memset+0x4>
	...

08014394 <_close_r>:
 8014394:	b538      	push	{r3, r4, r5, lr}
 8014396:	4d06      	ldr	r5, [pc, #24]	@ (80143b0 <_close_r+0x1c>)
 8014398:	2300      	movs	r3, #0
 801439a:	4604      	mov	r4, r0
 801439c:	4608      	mov	r0, r1
 801439e:	602b      	str	r3, [r5, #0]
 80143a0:	f7f1 fe0a 	bl	8005fb8 <_close>
 80143a4:	1c43      	adds	r3, r0, #1
 80143a6:	d102      	bne.n	80143ae <_close_r+0x1a>
 80143a8:	682b      	ldr	r3, [r5, #0]
 80143aa:	b103      	cbz	r3, 80143ae <_close_r+0x1a>
 80143ac:	6023      	str	r3, [r4, #0]
 80143ae:	bd38      	pop	{r3, r4, r5, pc}
 80143b0:	20005360 	.word	0x20005360

080143b4 <_reclaim_reent>:
 80143b4:	4b29      	ldr	r3, [pc, #164]	@ (801445c <_reclaim_reent+0xa8>)
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	4283      	cmp	r3, r0
 80143ba:	b570      	push	{r4, r5, r6, lr}
 80143bc:	4604      	mov	r4, r0
 80143be:	d04b      	beq.n	8014458 <_reclaim_reent+0xa4>
 80143c0:	69c3      	ldr	r3, [r0, #28]
 80143c2:	b1ab      	cbz	r3, 80143f0 <_reclaim_reent+0x3c>
 80143c4:	68db      	ldr	r3, [r3, #12]
 80143c6:	b16b      	cbz	r3, 80143e4 <_reclaim_reent+0x30>
 80143c8:	2500      	movs	r5, #0
 80143ca:	69e3      	ldr	r3, [r4, #28]
 80143cc:	68db      	ldr	r3, [r3, #12]
 80143ce:	5959      	ldr	r1, [r3, r5]
 80143d0:	2900      	cmp	r1, #0
 80143d2:	d13b      	bne.n	801444c <_reclaim_reent+0x98>
 80143d4:	3504      	adds	r5, #4
 80143d6:	2d80      	cmp	r5, #128	@ 0x80
 80143d8:	d1f7      	bne.n	80143ca <_reclaim_reent+0x16>
 80143da:	69e3      	ldr	r3, [r4, #28]
 80143dc:	4620      	mov	r0, r4
 80143de:	68d9      	ldr	r1, [r3, #12]
 80143e0:	f000 f8ce 	bl	8014580 <_free_r>
 80143e4:	69e3      	ldr	r3, [r4, #28]
 80143e6:	6819      	ldr	r1, [r3, #0]
 80143e8:	b111      	cbz	r1, 80143f0 <_reclaim_reent+0x3c>
 80143ea:	4620      	mov	r0, r4
 80143ec:	f000 f8c8 	bl	8014580 <_free_r>
 80143f0:	6961      	ldr	r1, [r4, #20]
 80143f2:	b111      	cbz	r1, 80143fa <_reclaim_reent+0x46>
 80143f4:	4620      	mov	r0, r4
 80143f6:	f000 f8c3 	bl	8014580 <_free_r>
 80143fa:	69e1      	ldr	r1, [r4, #28]
 80143fc:	b111      	cbz	r1, 8014404 <_reclaim_reent+0x50>
 80143fe:	4620      	mov	r0, r4
 8014400:	f000 f8be 	bl	8014580 <_free_r>
 8014404:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014406:	b111      	cbz	r1, 801440e <_reclaim_reent+0x5a>
 8014408:	4620      	mov	r0, r4
 801440a:	f000 f8b9 	bl	8014580 <_free_r>
 801440e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014410:	b111      	cbz	r1, 8014418 <_reclaim_reent+0x64>
 8014412:	4620      	mov	r0, r4
 8014414:	f000 f8b4 	bl	8014580 <_free_r>
 8014418:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801441a:	b111      	cbz	r1, 8014422 <_reclaim_reent+0x6e>
 801441c:	4620      	mov	r0, r4
 801441e:	f000 f8af 	bl	8014580 <_free_r>
 8014422:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8014424:	b111      	cbz	r1, 801442c <_reclaim_reent+0x78>
 8014426:	4620      	mov	r0, r4
 8014428:	f000 f8aa 	bl	8014580 <_free_r>
 801442c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801442e:	b111      	cbz	r1, 8014436 <_reclaim_reent+0x82>
 8014430:	4620      	mov	r0, r4
 8014432:	f000 f8a5 	bl	8014580 <_free_r>
 8014436:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014438:	b111      	cbz	r1, 8014440 <_reclaim_reent+0x8c>
 801443a:	4620      	mov	r0, r4
 801443c:	f000 f8a0 	bl	8014580 <_free_r>
 8014440:	6a23      	ldr	r3, [r4, #32]
 8014442:	b14b      	cbz	r3, 8014458 <_reclaim_reent+0xa4>
 8014444:	4620      	mov	r0, r4
 8014446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801444a:	4718      	bx	r3
 801444c:	680e      	ldr	r6, [r1, #0]
 801444e:	4620      	mov	r0, r4
 8014450:	f000 f896 	bl	8014580 <_free_r>
 8014454:	4631      	mov	r1, r6
 8014456:	e7bb      	b.n	80143d0 <_reclaim_reent+0x1c>
 8014458:	bd70      	pop	{r4, r5, r6, pc}
 801445a:	bf00      	nop
 801445c:	200000a4 	.word	0x200000a4

08014460 <_lseek_r>:
 8014460:	b538      	push	{r3, r4, r5, lr}
 8014462:	4d07      	ldr	r5, [pc, #28]	@ (8014480 <_lseek_r+0x20>)
 8014464:	4604      	mov	r4, r0
 8014466:	4608      	mov	r0, r1
 8014468:	4611      	mov	r1, r2
 801446a:	2200      	movs	r2, #0
 801446c:	602a      	str	r2, [r5, #0]
 801446e:	461a      	mov	r2, r3
 8014470:	f7f1 fdc9 	bl	8006006 <_lseek>
 8014474:	1c43      	adds	r3, r0, #1
 8014476:	d102      	bne.n	801447e <_lseek_r+0x1e>
 8014478:	682b      	ldr	r3, [r5, #0]
 801447a:	b103      	cbz	r3, 801447e <_lseek_r+0x1e>
 801447c:	6023      	str	r3, [r4, #0]
 801447e:	bd38      	pop	{r3, r4, r5, pc}
 8014480:	20005360 	.word	0x20005360

08014484 <_read_r>:
 8014484:	b538      	push	{r3, r4, r5, lr}
 8014486:	4d07      	ldr	r5, [pc, #28]	@ (80144a4 <_read_r+0x20>)
 8014488:	4604      	mov	r4, r0
 801448a:	4608      	mov	r0, r1
 801448c:	4611      	mov	r1, r2
 801448e:	2200      	movs	r2, #0
 8014490:	602a      	str	r2, [r5, #0]
 8014492:	461a      	mov	r2, r3
 8014494:	f7f1 fd57 	bl	8005f46 <_read>
 8014498:	1c43      	adds	r3, r0, #1
 801449a:	d102      	bne.n	80144a2 <_read_r+0x1e>
 801449c:	682b      	ldr	r3, [r5, #0]
 801449e:	b103      	cbz	r3, 80144a2 <_read_r+0x1e>
 80144a0:	6023      	str	r3, [r4, #0]
 80144a2:	bd38      	pop	{r3, r4, r5, pc}
 80144a4:	20005360 	.word	0x20005360

080144a8 <_write_r>:
 80144a8:	b538      	push	{r3, r4, r5, lr}
 80144aa:	4d07      	ldr	r5, [pc, #28]	@ (80144c8 <_write_r+0x20>)
 80144ac:	4604      	mov	r4, r0
 80144ae:	4608      	mov	r0, r1
 80144b0:	4611      	mov	r1, r2
 80144b2:	2200      	movs	r2, #0
 80144b4:	602a      	str	r2, [r5, #0]
 80144b6:	461a      	mov	r2, r3
 80144b8:	f7f1 fd62 	bl	8005f80 <_write>
 80144bc:	1c43      	adds	r3, r0, #1
 80144be:	d102      	bne.n	80144c6 <_write_r+0x1e>
 80144c0:	682b      	ldr	r3, [r5, #0]
 80144c2:	b103      	cbz	r3, 80144c6 <_write_r+0x1e>
 80144c4:	6023      	str	r3, [r4, #0]
 80144c6:	bd38      	pop	{r3, r4, r5, pc}
 80144c8:	20005360 	.word	0x20005360

080144cc <__errno>:
 80144cc:	4b01      	ldr	r3, [pc, #4]	@ (80144d4 <__errno+0x8>)
 80144ce:	6818      	ldr	r0, [r3, #0]
 80144d0:	4770      	bx	lr
 80144d2:	bf00      	nop
 80144d4:	200000a4 	.word	0x200000a4

080144d8 <__libc_init_array>:
 80144d8:	b570      	push	{r4, r5, r6, lr}
 80144da:	4d0d      	ldr	r5, [pc, #52]	@ (8014510 <__libc_init_array+0x38>)
 80144dc:	4c0d      	ldr	r4, [pc, #52]	@ (8014514 <__libc_init_array+0x3c>)
 80144de:	1b64      	subs	r4, r4, r5
 80144e0:	10a4      	asrs	r4, r4, #2
 80144e2:	2600      	movs	r6, #0
 80144e4:	42a6      	cmp	r6, r4
 80144e6:	d109      	bne.n	80144fc <__libc_init_array+0x24>
 80144e8:	4d0b      	ldr	r5, [pc, #44]	@ (8014518 <__libc_init_array+0x40>)
 80144ea:	4c0c      	ldr	r4, [pc, #48]	@ (801451c <__libc_init_array+0x44>)
 80144ec:	f000 fff0 	bl	80154d0 <_init>
 80144f0:	1b64      	subs	r4, r4, r5
 80144f2:	10a4      	asrs	r4, r4, #2
 80144f4:	2600      	movs	r6, #0
 80144f6:	42a6      	cmp	r6, r4
 80144f8:	d105      	bne.n	8014506 <__libc_init_array+0x2e>
 80144fa:	bd70      	pop	{r4, r5, r6, pc}
 80144fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8014500:	4798      	blx	r3
 8014502:	3601      	adds	r6, #1
 8014504:	e7ee      	b.n	80144e4 <__libc_init_array+0xc>
 8014506:	f855 3b04 	ldr.w	r3, [r5], #4
 801450a:	4798      	blx	r3
 801450c:	3601      	adds	r6, #1
 801450e:	e7f2      	b.n	80144f6 <__libc_init_array+0x1e>
 8014510:	08023abc 	.word	0x08023abc
 8014514:	08023abc 	.word	0x08023abc
 8014518:	08023abc 	.word	0x08023abc
 801451c:	08023ac0 	.word	0x08023ac0

08014520 <__retarget_lock_init_recursive>:
 8014520:	4770      	bx	lr

08014522 <__retarget_lock_acquire_recursive>:
 8014522:	4770      	bx	lr

08014524 <__retarget_lock_release_recursive>:
 8014524:	4770      	bx	lr

08014526 <memcpy>:
 8014526:	440a      	add	r2, r1
 8014528:	4291      	cmp	r1, r2
 801452a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801452e:	d100      	bne.n	8014532 <memcpy+0xc>
 8014530:	4770      	bx	lr
 8014532:	b510      	push	{r4, lr}
 8014534:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014538:	f803 4f01 	strb.w	r4, [r3, #1]!
 801453c:	4291      	cmp	r1, r2
 801453e:	d1f9      	bne.n	8014534 <memcpy+0xe>
 8014540:	bd10      	pop	{r4, pc}
	...

08014544 <__assert_func>:
 8014544:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014546:	4614      	mov	r4, r2
 8014548:	461a      	mov	r2, r3
 801454a:	4b09      	ldr	r3, [pc, #36]	@ (8014570 <__assert_func+0x2c>)
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	4605      	mov	r5, r0
 8014550:	68d8      	ldr	r0, [r3, #12]
 8014552:	b954      	cbnz	r4, 801456a <__assert_func+0x26>
 8014554:	4b07      	ldr	r3, [pc, #28]	@ (8014574 <__assert_func+0x30>)
 8014556:	461c      	mov	r4, r3
 8014558:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801455c:	9100      	str	r1, [sp, #0]
 801455e:	462b      	mov	r3, r5
 8014560:	4905      	ldr	r1, [pc, #20]	@ (8014578 <__assert_func+0x34>)
 8014562:	f000 fc9f 	bl	8014ea4 <fiprintf>
 8014566:	f000 fcd9 	bl	8014f1c <abort>
 801456a:	4b04      	ldr	r3, [pc, #16]	@ (801457c <__assert_func+0x38>)
 801456c:	e7f4      	b.n	8014558 <__assert_func+0x14>
 801456e:	bf00      	nop
 8014570:	200000a4 	.word	0x200000a4
 8014574:	08023a7e 	.word	0x08023a7e
 8014578:	08023a50 	.word	0x08023a50
 801457c:	08023a43 	.word	0x08023a43

08014580 <_free_r>:
 8014580:	b538      	push	{r3, r4, r5, lr}
 8014582:	4605      	mov	r5, r0
 8014584:	2900      	cmp	r1, #0
 8014586:	d041      	beq.n	801460c <_free_r+0x8c>
 8014588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801458c:	1f0c      	subs	r4, r1, #4
 801458e:	2b00      	cmp	r3, #0
 8014590:	bfb8      	it	lt
 8014592:	18e4      	addlt	r4, r4, r3
 8014594:	f000 f8e8 	bl	8014768 <__malloc_lock>
 8014598:	4a1d      	ldr	r2, [pc, #116]	@ (8014610 <_free_r+0x90>)
 801459a:	6813      	ldr	r3, [r2, #0]
 801459c:	b933      	cbnz	r3, 80145ac <_free_r+0x2c>
 801459e:	6063      	str	r3, [r4, #4]
 80145a0:	6014      	str	r4, [r2, #0]
 80145a2:	4628      	mov	r0, r5
 80145a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80145a8:	f000 b8e4 	b.w	8014774 <__malloc_unlock>
 80145ac:	42a3      	cmp	r3, r4
 80145ae:	d908      	bls.n	80145c2 <_free_r+0x42>
 80145b0:	6820      	ldr	r0, [r4, #0]
 80145b2:	1821      	adds	r1, r4, r0
 80145b4:	428b      	cmp	r3, r1
 80145b6:	bf01      	itttt	eq
 80145b8:	6819      	ldreq	r1, [r3, #0]
 80145ba:	685b      	ldreq	r3, [r3, #4]
 80145bc:	1809      	addeq	r1, r1, r0
 80145be:	6021      	streq	r1, [r4, #0]
 80145c0:	e7ed      	b.n	801459e <_free_r+0x1e>
 80145c2:	461a      	mov	r2, r3
 80145c4:	685b      	ldr	r3, [r3, #4]
 80145c6:	b10b      	cbz	r3, 80145cc <_free_r+0x4c>
 80145c8:	42a3      	cmp	r3, r4
 80145ca:	d9fa      	bls.n	80145c2 <_free_r+0x42>
 80145cc:	6811      	ldr	r1, [r2, #0]
 80145ce:	1850      	adds	r0, r2, r1
 80145d0:	42a0      	cmp	r0, r4
 80145d2:	d10b      	bne.n	80145ec <_free_r+0x6c>
 80145d4:	6820      	ldr	r0, [r4, #0]
 80145d6:	4401      	add	r1, r0
 80145d8:	1850      	adds	r0, r2, r1
 80145da:	4283      	cmp	r3, r0
 80145dc:	6011      	str	r1, [r2, #0]
 80145de:	d1e0      	bne.n	80145a2 <_free_r+0x22>
 80145e0:	6818      	ldr	r0, [r3, #0]
 80145e2:	685b      	ldr	r3, [r3, #4]
 80145e4:	6053      	str	r3, [r2, #4]
 80145e6:	4408      	add	r0, r1
 80145e8:	6010      	str	r0, [r2, #0]
 80145ea:	e7da      	b.n	80145a2 <_free_r+0x22>
 80145ec:	d902      	bls.n	80145f4 <_free_r+0x74>
 80145ee:	230c      	movs	r3, #12
 80145f0:	602b      	str	r3, [r5, #0]
 80145f2:	e7d6      	b.n	80145a2 <_free_r+0x22>
 80145f4:	6820      	ldr	r0, [r4, #0]
 80145f6:	1821      	adds	r1, r4, r0
 80145f8:	428b      	cmp	r3, r1
 80145fa:	bf04      	itt	eq
 80145fc:	6819      	ldreq	r1, [r3, #0]
 80145fe:	685b      	ldreq	r3, [r3, #4]
 8014600:	6063      	str	r3, [r4, #4]
 8014602:	bf04      	itt	eq
 8014604:	1809      	addeq	r1, r1, r0
 8014606:	6021      	streq	r1, [r4, #0]
 8014608:	6054      	str	r4, [r2, #4]
 801460a:	e7ca      	b.n	80145a2 <_free_r+0x22>
 801460c:	bd38      	pop	{r3, r4, r5, pc}
 801460e:	bf00      	nop
 8014610:	2000536c 	.word	0x2000536c

08014614 <malloc>:
 8014614:	4b02      	ldr	r3, [pc, #8]	@ (8014620 <malloc+0xc>)
 8014616:	4601      	mov	r1, r0
 8014618:	6818      	ldr	r0, [r3, #0]
 801461a:	f000 b825 	b.w	8014668 <_malloc_r>
 801461e:	bf00      	nop
 8014620:	200000a4 	.word	0x200000a4

08014624 <sbrk_aligned>:
 8014624:	b570      	push	{r4, r5, r6, lr}
 8014626:	4e0f      	ldr	r6, [pc, #60]	@ (8014664 <sbrk_aligned+0x40>)
 8014628:	460c      	mov	r4, r1
 801462a:	6831      	ldr	r1, [r6, #0]
 801462c:	4605      	mov	r5, r0
 801462e:	b911      	cbnz	r1, 8014636 <sbrk_aligned+0x12>
 8014630:	f000 fc64 	bl	8014efc <_sbrk_r>
 8014634:	6030      	str	r0, [r6, #0]
 8014636:	4621      	mov	r1, r4
 8014638:	4628      	mov	r0, r5
 801463a:	f000 fc5f 	bl	8014efc <_sbrk_r>
 801463e:	1c43      	adds	r3, r0, #1
 8014640:	d103      	bne.n	801464a <sbrk_aligned+0x26>
 8014642:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8014646:	4620      	mov	r0, r4
 8014648:	bd70      	pop	{r4, r5, r6, pc}
 801464a:	1cc4      	adds	r4, r0, #3
 801464c:	f024 0403 	bic.w	r4, r4, #3
 8014650:	42a0      	cmp	r0, r4
 8014652:	d0f8      	beq.n	8014646 <sbrk_aligned+0x22>
 8014654:	1a21      	subs	r1, r4, r0
 8014656:	4628      	mov	r0, r5
 8014658:	f000 fc50 	bl	8014efc <_sbrk_r>
 801465c:	3001      	adds	r0, #1
 801465e:	d1f2      	bne.n	8014646 <sbrk_aligned+0x22>
 8014660:	e7ef      	b.n	8014642 <sbrk_aligned+0x1e>
 8014662:	bf00      	nop
 8014664:	20005368 	.word	0x20005368

08014668 <_malloc_r>:
 8014668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801466c:	1ccd      	adds	r5, r1, #3
 801466e:	f025 0503 	bic.w	r5, r5, #3
 8014672:	3508      	adds	r5, #8
 8014674:	2d0c      	cmp	r5, #12
 8014676:	bf38      	it	cc
 8014678:	250c      	movcc	r5, #12
 801467a:	2d00      	cmp	r5, #0
 801467c:	4606      	mov	r6, r0
 801467e:	db01      	blt.n	8014684 <_malloc_r+0x1c>
 8014680:	42a9      	cmp	r1, r5
 8014682:	d904      	bls.n	801468e <_malloc_r+0x26>
 8014684:	230c      	movs	r3, #12
 8014686:	6033      	str	r3, [r6, #0]
 8014688:	2000      	movs	r0, #0
 801468a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801468e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014764 <_malloc_r+0xfc>
 8014692:	f000 f869 	bl	8014768 <__malloc_lock>
 8014696:	f8d8 3000 	ldr.w	r3, [r8]
 801469a:	461c      	mov	r4, r3
 801469c:	bb44      	cbnz	r4, 80146f0 <_malloc_r+0x88>
 801469e:	4629      	mov	r1, r5
 80146a0:	4630      	mov	r0, r6
 80146a2:	f7ff ffbf 	bl	8014624 <sbrk_aligned>
 80146a6:	1c43      	adds	r3, r0, #1
 80146a8:	4604      	mov	r4, r0
 80146aa:	d158      	bne.n	801475e <_malloc_r+0xf6>
 80146ac:	f8d8 4000 	ldr.w	r4, [r8]
 80146b0:	4627      	mov	r7, r4
 80146b2:	2f00      	cmp	r7, #0
 80146b4:	d143      	bne.n	801473e <_malloc_r+0xd6>
 80146b6:	2c00      	cmp	r4, #0
 80146b8:	d04b      	beq.n	8014752 <_malloc_r+0xea>
 80146ba:	6823      	ldr	r3, [r4, #0]
 80146bc:	4639      	mov	r1, r7
 80146be:	4630      	mov	r0, r6
 80146c0:	eb04 0903 	add.w	r9, r4, r3
 80146c4:	f000 fc1a 	bl	8014efc <_sbrk_r>
 80146c8:	4581      	cmp	r9, r0
 80146ca:	d142      	bne.n	8014752 <_malloc_r+0xea>
 80146cc:	6821      	ldr	r1, [r4, #0]
 80146ce:	1a6d      	subs	r5, r5, r1
 80146d0:	4629      	mov	r1, r5
 80146d2:	4630      	mov	r0, r6
 80146d4:	f7ff ffa6 	bl	8014624 <sbrk_aligned>
 80146d8:	3001      	adds	r0, #1
 80146da:	d03a      	beq.n	8014752 <_malloc_r+0xea>
 80146dc:	6823      	ldr	r3, [r4, #0]
 80146de:	442b      	add	r3, r5
 80146e0:	6023      	str	r3, [r4, #0]
 80146e2:	f8d8 3000 	ldr.w	r3, [r8]
 80146e6:	685a      	ldr	r2, [r3, #4]
 80146e8:	bb62      	cbnz	r2, 8014744 <_malloc_r+0xdc>
 80146ea:	f8c8 7000 	str.w	r7, [r8]
 80146ee:	e00f      	b.n	8014710 <_malloc_r+0xa8>
 80146f0:	6822      	ldr	r2, [r4, #0]
 80146f2:	1b52      	subs	r2, r2, r5
 80146f4:	d420      	bmi.n	8014738 <_malloc_r+0xd0>
 80146f6:	2a0b      	cmp	r2, #11
 80146f8:	d917      	bls.n	801472a <_malloc_r+0xc2>
 80146fa:	1961      	adds	r1, r4, r5
 80146fc:	42a3      	cmp	r3, r4
 80146fe:	6025      	str	r5, [r4, #0]
 8014700:	bf18      	it	ne
 8014702:	6059      	strne	r1, [r3, #4]
 8014704:	6863      	ldr	r3, [r4, #4]
 8014706:	bf08      	it	eq
 8014708:	f8c8 1000 	streq.w	r1, [r8]
 801470c:	5162      	str	r2, [r4, r5]
 801470e:	604b      	str	r3, [r1, #4]
 8014710:	4630      	mov	r0, r6
 8014712:	f000 f82f 	bl	8014774 <__malloc_unlock>
 8014716:	f104 000b 	add.w	r0, r4, #11
 801471a:	1d23      	adds	r3, r4, #4
 801471c:	f020 0007 	bic.w	r0, r0, #7
 8014720:	1ac2      	subs	r2, r0, r3
 8014722:	bf1c      	itt	ne
 8014724:	1a1b      	subne	r3, r3, r0
 8014726:	50a3      	strne	r3, [r4, r2]
 8014728:	e7af      	b.n	801468a <_malloc_r+0x22>
 801472a:	6862      	ldr	r2, [r4, #4]
 801472c:	42a3      	cmp	r3, r4
 801472e:	bf0c      	ite	eq
 8014730:	f8c8 2000 	streq.w	r2, [r8]
 8014734:	605a      	strne	r2, [r3, #4]
 8014736:	e7eb      	b.n	8014710 <_malloc_r+0xa8>
 8014738:	4623      	mov	r3, r4
 801473a:	6864      	ldr	r4, [r4, #4]
 801473c:	e7ae      	b.n	801469c <_malloc_r+0x34>
 801473e:	463c      	mov	r4, r7
 8014740:	687f      	ldr	r7, [r7, #4]
 8014742:	e7b6      	b.n	80146b2 <_malloc_r+0x4a>
 8014744:	461a      	mov	r2, r3
 8014746:	685b      	ldr	r3, [r3, #4]
 8014748:	42a3      	cmp	r3, r4
 801474a:	d1fb      	bne.n	8014744 <_malloc_r+0xdc>
 801474c:	2300      	movs	r3, #0
 801474e:	6053      	str	r3, [r2, #4]
 8014750:	e7de      	b.n	8014710 <_malloc_r+0xa8>
 8014752:	230c      	movs	r3, #12
 8014754:	6033      	str	r3, [r6, #0]
 8014756:	4630      	mov	r0, r6
 8014758:	f000 f80c 	bl	8014774 <__malloc_unlock>
 801475c:	e794      	b.n	8014688 <_malloc_r+0x20>
 801475e:	6005      	str	r5, [r0, #0]
 8014760:	e7d6      	b.n	8014710 <_malloc_r+0xa8>
 8014762:	bf00      	nop
 8014764:	2000536c 	.word	0x2000536c

08014768 <__malloc_lock>:
 8014768:	4801      	ldr	r0, [pc, #4]	@ (8014770 <__malloc_lock+0x8>)
 801476a:	f7ff beda 	b.w	8014522 <__retarget_lock_acquire_recursive>
 801476e:	bf00      	nop
 8014770:	20005364 	.word	0x20005364

08014774 <__malloc_unlock>:
 8014774:	4801      	ldr	r0, [pc, #4]	@ (801477c <__malloc_unlock+0x8>)
 8014776:	f7ff bed5 	b.w	8014524 <__retarget_lock_release_recursive>
 801477a:	bf00      	nop
 801477c:	20005364 	.word	0x20005364

08014780 <__ssputs_r>:
 8014780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014784:	688e      	ldr	r6, [r1, #8]
 8014786:	461f      	mov	r7, r3
 8014788:	42be      	cmp	r6, r7
 801478a:	680b      	ldr	r3, [r1, #0]
 801478c:	4682      	mov	sl, r0
 801478e:	460c      	mov	r4, r1
 8014790:	4690      	mov	r8, r2
 8014792:	d82d      	bhi.n	80147f0 <__ssputs_r+0x70>
 8014794:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014798:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801479c:	d026      	beq.n	80147ec <__ssputs_r+0x6c>
 801479e:	6965      	ldr	r5, [r4, #20]
 80147a0:	6909      	ldr	r1, [r1, #16]
 80147a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80147a6:	eba3 0901 	sub.w	r9, r3, r1
 80147aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80147ae:	1c7b      	adds	r3, r7, #1
 80147b0:	444b      	add	r3, r9
 80147b2:	106d      	asrs	r5, r5, #1
 80147b4:	429d      	cmp	r5, r3
 80147b6:	bf38      	it	cc
 80147b8:	461d      	movcc	r5, r3
 80147ba:	0553      	lsls	r3, r2, #21
 80147bc:	d527      	bpl.n	801480e <__ssputs_r+0x8e>
 80147be:	4629      	mov	r1, r5
 80147c0:	f7ff ff52 	bl	8014668 <_malloc_r>
 80147c4:	4606      	mov	r6, r0
 80147c6:	b360      	cbz	r0, 8014822 <__ssputs_r+0xa2>
 80147c8:	6921      	ldr	r1, [r4, #16]
 80147ca:	464a      	mov	r2, r9
 80147cc:	f7ff feab 	bl	8014526 <memcpy>
 80147d0:	89a3      	ldrh	r3, [r4, #12]
 80147d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80147d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80147da:	81a3      	strh	r3, [r4, #12]
 80147dc:	6126      	str	r6, [r4, #16]
 80147de:	6165      	str	r5, [r4, #20]
 80147e0:	444e      	add	r6, r9
 80147e2:	eba5 0509 	sub.w	r5, r5, r9
 80147e6:	6026      	str	r6, [r4, #0]
 80147e8:	60a5      	str	r5, [r4, #8]
 80147ea:	463e      	mov	r6, r7
 80147ec:	42be      	cmp	r6, r7
 80147ee:	d900      	bls.n	80147f2 <__ssputs_r+0x72>
 80147f0:	463e      	mov	r6, r7
 80147f2:	6820      	ldr	r0, [r4, #0]
 80147f4:	4632      	mov	r2, r6
 80147f6:	4641      	mov	r1, r8
 80147f8:	f000 fb66 	bl	8014ec8 <memmove>
 80147fc:	68a3      	ldr	r3, [r4, #8]
 80147fe:	1b9b      	subs	r3, r3, r6
 8014800:	60a3      	str	r3, [r4, #8]
 8014802:	6823      	ldr	r3, [r4, #0]
 8014804:	4433      	add	r3, r6
 8014806:	6023      	str	r3, [r4, #0]
 8014808:	2000      	movs	r0, #0
 801480a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801480e:	462a      	mov	r2, r5
 8014810:	f000 fb8b 	bl	8014f2a <_realloc_r>
 8014814:	4606      	mov	r6, r0
 8014816:	2800      	cmp	r0, #0
 8014818:	d1e0      	bne.n	80147dc <__ssputs_r+0x5c>
 801481a:	6921      	ldr	r1, [r4, #16]
 801481c:	4650      	mov	r0, sl
 801481e:	f7ff feaf 	bl	8014580 <_free_r>
 8014822:	230c      	movs	r3, #12
 8014824:	f8ca 3000 	str.w	r3, [sl]
 8014828:	89a3      	ldrh	r3, [r4, #12]
 801482a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801482e:	81a3      	strh	r3, [r4, #12]
 8014830:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014834:	e7e9      	b.n	801480a <__ssputs_r+0x8a>
	...

08014838 <_svfiprintf_r>:
 8014838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801483c:	4698      	mov	r8, r3
 801483e:	898b      	ldrh	r3, [r1, #12]
 8014840:	061b      	lsls	r3, r3, #24
 8014842:	b09d      	sub	sp, #116	@ 0x74
 8014844:	4607      	mov	r7, r0
 8014846:	460d      	mov	r5, r1
 8014848:	4614      	mov	r4, r2
 801484a:	d510      	bpl.n	801486e <_svfiprintf_r+0x36>
 801484c:	690b      	ldr	r3, [r1, #16]
 801484e:	b973      	cbnz	r3, 801486e <_svfiprintf_r+0x36>
 8014850:	2140      	movs	r1, #64	@ 0x40
 8014852:	f7ff ff09 	bl	8014668 <_malloc_r>
 8014856:	6028      	str	r0, [r5, #0]
 8014858:	6128      	str	r0, [r5, #16]
 801485a:	b930      	cbnz	r0, 801486a <_svfiprintf_r+0x32>
 801485c:	230c      	movs	r3, #12
 801485e:	603b      	str	r3, [r7, #0]
 8014860:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014864:	b01d      	add	sp, #116	@ 0x74
 8014866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801486a:	2340      	movs	r3, #64	@ 0x40
 801486c:	616b      	str	r3, [r5, #20]
 801486e:	2300      	movs	r3, #0
 8014870:	9309      	str	r3, [sp, #36]	@ 0x24
 8014872:	2320      	movs	r3, #32
 8014874:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014878:	f8cd 800c 	str.w	r8, [sp, #12]
 801487c:	2330      	movs	r3, #48	@ 0x30
 801487e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014a1c <_svfiprintf_r+0x1e4>
 8014882:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014886:	f04f 0901 	mov.w	r9, #1
 801488a:	4623      	mov	r3, r4
 801488c:	469a      	mov	sl, r3
 801488e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014892:	b10a      	cbz	r2, 8014898 <_svfiprintf_r+0x60>
 8014894:	2a25      	cmp	r2, #37	@ 0x25
 8014896:	d1f9      	bne.n	801488c <_svfiprintf_r+0x54>
 8014898:	ebba 0b04 	subs.w	fp, sl, r4
 801489c:	d00b      	beq.n	80148b6 <_svfiprintf_r+0x7e>
 801489e:	465b      	mov	r3, fp
 80148a0:	4622      	mov	r2, r4
 80148a2:	4629      	mov	r1, r5
 80148a4:	4638      	mov	r0, r7
 80148a6:	f7ff ff6b 	bl	8014780 <__ssputs_r>
 80148aa:	3001      	adds	r0, #1
 80148ac:	f000 80a7 	beq.w	80149fe <_svfiprintf_r+0x1c6>
 80148b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80148b2:	445a      	add	r2, fp
 80148b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80148b6:	f89a 3000 	ldrb.w	r3, [sl]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	f000 809f 	beq.w	80149fe <_svfiprintf_r+0x1c6>
 80148c0:	2300      	movs	r3, #0
 80148c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80148c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80148ca:	f10a 0a01 	add.w	sl, sl, #1
 80148ce:	9304      	str	r3, [sp, #16]
 80148d0:	9307      	str	r3, [sp, #28]
 80148d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80148d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80148d8:	4654      	mov	r4, sl
 80148da:	2205      	movs	r2, #5
 80148dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148e0:	484e      	ldr	r0, [pc, #312]	@ (8014a1c <_svfiprintf_r+0x1e4>)
 80148e2:	f7eb fc95 	bl	8000210 <memchr>
 80148e6:	9a04      	ldr	r2, [sp, #16]
 80148e8:	b9d8      	cbnz	r0, 8014922 <_svfiprintf_r+0xea>
 80148ea:	06d0      	lsls	r0, r2, #27
 80148ec:	bf44      	itt	mi
 80148ee:	2320      	movmi	r3, #32
 80148f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80148f4:	0711      	lsls	r1, r2, #28
 80148f6:	bf44      	itt	mi
 80148f8:	232b      	movmi	r3, #43	@ 0x2b
 80148fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80148fe:	f89a 3000 	ldrb.w	r3, [sl]
 8014902:	2b2a      	cmp	r3, #42	@ 0x2a
 8014904:	d015      	beq.n	8014932 <_svfiprintf_r+0xfa>
 8014906:	9a07      	ldr	r2, [sp, #28]
 8014908:	4654      	mov	r4, sl
 801490a:	2000      	movs	r0, #0
 801490c:	f04f 0c0a 	mov.w	ip, #10
 8014910:	4621      	mov	r1, r4
 8014912:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014916:	3b30      	subs	r3, #48	@ 0x30
 8014918:	2b09      	cmp	r3, #9
 801491a:	d94b      	bls.n	80149b4 <_svfiprintf_r+0x17c>
 801491c:	b1b0      	cbz	r0, 801494c <_svfiprintf_r+0x114>
 801491e:	9207      	str	r2, [sp, #28]
 8014920:	e014      	b.n	801494c <_svfiprintf_r+0x114>
 8014922:	eba0 0308 	sub.w	r3, r0, r8
 8014926:	fa09 f303 	lsl.w	r3, r9, r3
 801492a:	4313      	orrs	r3, r2
 801492c:	9304      	str	r3, [sp, #16]
 801492e:	46a2      	mov	sl, r4
 8014930:	e7d2      	b.n	80148d8 <_svfiprintf_r+0xa0>
 8014932:	9b03      	ldr	r3, [sp, #12]
 8014934:	1d19      	adds	r1, r3, #4
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	9103      	str	r1, [sp, #12]
 801493a:	2b00      	cmp	r3, #0
 801493c:	bfbb      	ittet	lt
 801493e:	425b      	neglt	r3, r3
 8014940:	f042 0202 	orrlt.w	r2, r2, #2
 8014944:	9307      	strge	r3, [sp, #28]
 8014946:	9307      	strlt	r3, [sp, #28]
 8014948:	bfb8      	it	lt
 801494a:	9204      	strlt	r2, [sp, #16]
 801494c:	7823      	ldrb	r3, [r4, #0]
 801494e:	2b2e      	cmp	r3, #46	@ 0x2e
 8014950:	d10a      	bne.n	8014968 <_svfiprintf_r+0x130>
 8014952:	7863      	ldrb	r3, [r4, #1]
 8014954:	2b2a      	cmp	r3, #42	@ 0x2a
 8014956:	d132      	bne.n	80149be <_svfiprintf_r+0x186>
 8014958:	9b03      	ldr	r3, [sp, #12]
 801495a:	1d1a      	adds	r2, r3, #4
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	9203      	str	r2, [sp, #12]
 8014960:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014964:	3402      	adds	r4, #2
 8014966:	9305      	str	r3, [sp, #20]
 8014968:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014a2c <_svfiprintf_r+0x1f4>
 801496c:	7821      	ldrb	r1, [r4, #0]
 801496e:	2203      	movs	r2, #3
 8014970:	4650      	mov	r0, sl
 8014972:	f7eb fc4d 	bl	8000210 <memchr>
 8014976:	b138      	cbz	r0, 8014988 <_svfiprintf_r+0x150>
 8014978:	9b04      	ldr	r3, [sp, #16]
 801497a:	eba0 000a 	sub.w	r0, r0, sl
 801497e:	2240      	movs	r2, #64	@ 0x40
 8014980:	4082      	lsls	r2, r0
 8014982:	4313      	orrs	r3, r2
 8014984:	3401      	adds	r4, #1
 8014986:	9304      	str	r3, [sp, #16]
 8014988:	f814 1b01 	ldrb.w	r1, [r4], #1
 801498c:	4824      	ldr	r0, [pc, #144]	@ (8014a20 <_svfiprintf_r+0x1e8>)
 801498e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014992:	2206      	movs	r2, #6
 8014994:	f7eb fc3c 	bl	8000210 <memchr>
 8014998:	2800      	cmp	r0, #0
 801499a:	d036      	beq.n	8014a0a <_svfiprintf_r+0x1d2>
 801499c:	4b21      	ldr	r3, [pc, #132]	@ (8014a24 <_svfiprintf_r+0x1ec>)
 801499e:	bb1b      	cbnz	r3, 80149e8 <_svfiprintf_r+0x1b0>
 80149a0:	9b03      	ldr	r3, [sp, #12]
 80149a2:	3307      	adds	r3, #7
 80149a4:	f023 0307 	bic.w	r3, r3, #7
 80149a8:	3308      	adds	r3, #8
 80149aa:	9303      	str	r3, [sp, #12]
 80149ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80149ae:	4433      	add	r3, r6
 80149b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80149b2:	e76a      	b.n	801488a <_svfiprintf_r+0x52>
 80149b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80149b8:	460c      	mov	r4, r1
 80149ba:	2001      	movs	r0, #1
 80149bc:	e7a8      	b.n	8014910 <_svfiprintf_r+0xd8>
 80149be:	2300      	movs	r3, #0
 80149c0:	3401      	adds	r4, #1
 80149c2:	9305      	str	r3, [sp, #20]
 80149c4:	4619      	mov	r1, r3
 80149c6:	f04f 0c0a 	mov.w	ip, #10
 80149ca:	4620      	mov	r0, r4
 80149cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80149d0:	3a30      	subs	r2, #48	@ 0x30
 80149d2:	2a09      	cmp	r2, #9
 80149d4:	d903      	bls.n	80149de <_svfiprintf_r+0x1a6>
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d0c6      	beq.n	8014968 <_svfiprintf_r+0x130>
 80149da:	9105      	str	r1, [sp, #20]
 80149dc:	e7c4      	b.n	8014968 <_svfiprintf_r+0x130>
 80149de:	fb0c 2101 	mla	r1, ip, r1, r2
 80149e2:	4604      	mov	r4, r0
 80149e4:	2301      	movs	r3, #1
 80149e6:	e7f0      	b.n	80149ca <_svfiprintf_r+0x192>
 80149e8:	ab03      	add	r3, sp, #12
 80149ea:	9300      	str	r3, [sp, #0]
 80149ec:	462a      	mov	r2, r5
 80149ee:	4b0e      	ldr	r3, [pc, #56]	@ (8014a28 <_svfiprintf_r+0x1f0>)
 80149f0:	a904      	add	r1, sp, #16
 80149f2:	4638      	mov	r0, r7
 80149f4:	f3af 8000 	nop.w
 80149f8:	1c42      	adds	r2, r0, #1
 80149fa:	4606      	mov	r6, r0
 80149fc:	d1d6      	bne.n	80149ac <_svfiprintf_r+0x174>
 80149fe:	89ab      	ldrh	r3, [r5, #12]
 8014a00:	065b      	lsls	r3, r3, #25
 8014a02:	f53f af2d 	bmi.w	8014860 <_svfiprintf_r+0x28>
 8014a06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014a08:	e72c      	b.n	8014864 <_svfiprintf_r+0x2c>
 8014a0a:	ab03      	add	r3, sp, #12
 8014a0c:	9300      	str	r3, [sp, #0]
 8014a0e:	462a      	mov	r2, r5
 8014a10:	4b05      	ldr	r3, [pc, #20]	@ (8014a28 <_svfiprintf_r+0x1f0>)
 8014a12:	a904      	add	r1, sp, #16
 8014a14:	4638      	mov	r0, r7
 8014a16:	f000 f879 	bl	8014b0c <_printf_i>
 8014a1a:	e7ed      	b.n	80149f8 <_svfiprintf_r+0x1c0>
 8014a1c:	08023a7f 	.word	0x08023a7f
 8014a20:	08023a89 	.word	0x08023a89
 8014a24:	00000000 	.word	0x00000000
 8014a28:	08014781 	.word	0x08014781
 8014a2c:	08023a85 	.word	0x08023a85

08014a30 <_printf_common>:
 8014a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a34:	4616      	mov	r6, r2
 8014a36:	4698      	mov	r8, r3
 8014a38:	688a      	ldr	r2, [r1, #8]
 8014a3a:	690b      	ldr	r3, [r1, #16]
 8014a3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014a40:	4293      	cmp	r3, r2
 8014a42:	bfb8      	it	lt
 8014a44:	4613      	movlt	r3, r2
 8014a46:	6033      	str	r3, [r6, #0]
 8014a48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014a4c:	4607      	mov	r7, r0
 8014a4e:	460c      	mov	r4, r1
 8014a50:	b10a      	cbz	r2, 8014a56 <_printf_common+0x26>
 8014a52:	3301      	adds	r3, #1
 8014a54:	6033      	str	r3, [r6, #0]
 8014a56:	6823      	ldr	r3, [r4, #0]
 8014a58:	0699      	lsls	r1, r3, #26
 8014a5a:	bf42      	ittt	mi
 8014a5c:	6833      	ldrmi	r3, [r6, #0]
 8014a5e:	3302      	addmi	r3, #2
 8014a60:	6033      	strmi	r3, [r6, #0]
 8014a62:	6825      	ldr	r5, [r4, #0]
 8014a64:	f015 0506 	ands.w	r5, r5, #6
 8014a68:	d106      	bne.n	8014a78 <_printf_common+0x48>
 8014a6a:	f104 0a19 	add.w	sl, r4, #25
 8014a6e:	68e3      	ldr	r3, [r4, #12]
 8014a70:	6832      	ldr	r2, [r6, #0]
 8014a72:	1a9b      	subs	r3, r3, r2
 8014a74:	42ab      	cmp	r3, r5
 8014a76:	dc26      	bgt.n	8014ac6 <_printf_common+0x96>
 8014a78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014a7c:	6822      	ldr	r2, [r4, #0]
 8014a7e:	3b00      	subs	r3, #0
 8014a80:	bf18      	it	ne
 8014a82:	2301      	movne	r3, #1
 8014a84:	0692      	lsls	r2, r2, #26
 8014a86:	d42b      	bmi.n	8014ae0 <_printf_common+0xb0>
 8014a88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014a8c:	4641      	mov	r1, r8
 8014a8e:	4638      	mov	r0, r7
 8014a90:	47c8      	blx	r9
 8014a92:	3001      	adds	r0, #1
 8014a94:	d01e      	beq.n	8014ad4 <_printf_common+0xa4>
 8014a96:	6823      	ldr	r3, [r4, #0]
 8014a98:	6922      	ldr	r2, [r4, #16]
 8014a9a:	f003 0306 	and.w	r3, r3, #6
 8014a9e:	2b04      	cmp	r3, #4
 8014aa0:	bf02      	ittt	eq
 8014aa2:	68e5      	ldreq	r5, [r4, #12]
 8014aa4:	6833      	ldreq	r3, [r6, #0]
 8014aa6:	1aed      	subeq	r5, r5, r3
 8014aa8:	68a3      	ldr	r3, [r4, #8]
 8014aaa:	bf0c      	ite	eq
 8014aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014ab0:	2500      	movne	r5, #0
 8014ab2:	4293      	cmp	r3, r2
 8014ab4:	bfc4      	itt	gt
 8014ab6:	1a9b      	subgt	r3, r3, r2
 8014ab8:	18ed      	addgt	r5, r5, r3
 8014aba:	2600      	movs	r6, #0
 8014abc:	341a      	adds	r4, #26
 8014abe:	42b5      	cmp	r5, r6
 8014ac0:	d11a      	bne.n	8014af8 <_printf_common+0xc8>
 8014ac2:	2000      	movs	r0, #0
 8014ac4:	e008      	b.n	8014ad8 <_printf_common+0xa8>
 8014ac6:	2301      	movs	r3, #1
 8014ac8:	4652      	mov	r2, sl
 8014aca:	4641      	mov	r1, r8
 8014acc:	4638      	mov	r0, r7
 8014ace:	47c8      	blx	r9
 8014ad0:	3001      	adds	r0, #1
 8014ad2:	d103      	bne.n	8014adc <_printf_common+0xac>
 8014ad4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014adc:	3501      	adds	r5, #1
 8014ade:	e7c6      	b.n	8014a6e <_printf_common+0x3e>
 8014ae0:	18e1      	adds	r1, r4, r3
 8014ae2:	1c5a      	adds	r2, r3, #1
 8014ae4:	2030      	movs	r0, #48	@ 0x30
 8014ae6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014aea:	4422      	add	r2, r4
 8014aec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014af0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014af4:	3302      	adds	r3, #2
 8014af6:	e7c7      	b.n	8014a88 <_printf_common+0x58>
 8014af8:	2301      	movs	r3, #1
 8014afa:	4622      	mov	r2, r4
 8014afc:	4641      	mov	r1, r8
 8014afe:	4638      	mov	r0, r7
 8014b00:	47c8      	blx	r9
 8014b02:	3001      	adds	r0, #1
 8014b04:	d0e6      	beq.n	8014ad4 <_printf_common+0xa4>
 8014b06:	3601      	adds	r6, #1
 8014b08:	e7d9      	b.n	8014abe <_printf_common+0x8e>
	...

08014b0c <_printf_i>:
 8014b0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014b10:	7e0f      	ldrb	r7, [r1, #24]
 8014b12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014b14:	2f78      	cmp	r7, #120	@ 0x78
 8014b16:	4691      	mov	r9, r2
 8014b18:	4680      	mov	r8, r0
 8014b1a:	460c      	mov	r4, r1
 8014b1c:	469a      	mov	sl, r3
 8014b1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014b22:	d807      	bhi.n	8014b34 <_printf_i+0x28>
 8014b24:	2f62      	cmp	r7, #98	@ 0x62
 8014b26:	d80a      	bhi.n	8014b3e <_printf_i+0x32>
 8014b28:	2f00      	cmp	r7, #0
 8014b2a:	f000 80d2 	beq.w	8014cd2 <_printf_i+0x1c6>
 8014b2e:	2f58      	cmp	r7, #88	@ 0x58
 8014b30:	f000 80b9 	beq.w	8014ca6 <_printf_i+0x19a>
 8014b34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014b38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014b3c:	e03a      	b.n	8014bb4 <_printf_i+0xa8>
 8014b3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014b42:	2b15      	cmp	r3, #21
 8014b44:	d8f6      	bhi.n	8014b34 <_printf_i+0x28>
 8014b46:	a101      	add	r1, pc, #4	@ (adr r1, 8014b4c <_printf_i+0x40>)
 8014b48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014b4c:	08014ba5 	.word	0x08014ba5
 8014b50:	08014bb9 	.word	0x08014bb9
 8014b54:	08014b35 	.word	0x08014b35
 8014b58:	08014b35 	.word	0x08014b35
 8014b5c:	08014b35 	.word	0x08014b35
 8014b60:	08014b35 	.word	0x08014b35
 8014b64:	08014bb9 	.word	0x08014bb9
 8014b68:	08014b35 	.word	0x08014b35
 8014b6c:	08014b35 	.word	0x08014b35
 8014b70:	08014b35 	.word	0x08014b35
 8014b74:	08014b35 	.word	0x08014b35
 8014b78:	08014cb9 	.word	0x08014cb9
 8014b7c:	08014be3 	.word	0x08014be3
 8014b80:	08014c73 	.word	0x08014c73
 8014b84:	08014b35 	.word	0x08014b35
 8014b88:	08014b35 	.word	0x08014b35
 8014b8c:	08014cdb 	.word	0x08014cdb
 8014b90:	08014b35 	.word	0x08014b35
 8014b94:	08014be3 	.word	0x08014be3
 8014b98:	08014b35 	.word	0x08014b35
 8014b9c:	08014b35 	.word	0x08014b35
 8014ba0:	08014c7b 	.word	0x08014c7b
 8014ba4:	6833      	ldr	r3, [r6, #0]
 8014ba6:	1d1a      	adds	r2, r3, #4
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	6032      	str	r2, [r6, #0]
 8014bac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014bb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014bb4:	2301      	movs	r3, #1
 8014bb6:	e09d      	b.n	8014cf4 <_printf_i+0x1e8>
 8014bb8:	6833      	ldr	r3, [r6, #0]
 8014bba:	6820      	ldr	r0, [r4, #0]
 8014bbc:	1d19      	adds	r1, r3, #4
 8014bbe:	6031      	str	r1, [r6, #0]
 8014bc0:	0606      	lsls	r6, r0, #24
 8014bc2:	d501      	bpl.n	8014bc8 <_printf_i+0xbc>
 8014bc4:	681d      	ldr	r5, [r3, #0]
 8014bc6:	e003      	b.n	8014bd0 <_printf_i+0xc4>
 8014bc8:	0645      	lsls	r5, r0, #25
 8014bca:	d5fb      	bpl.n	8014bc4 <_printf_i+0xb8>
 8014bcc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014bd0:	2d00      	cmp	r5, #0
 8014bd2:	da03      	bge.n	8014bdc <_printf_i+0xd0>
 8014bd4:	232d      	movs	r3, #45	@ 0x2d
 8014bd6:	426d      	negs	r5, r5
 8014bd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014bdc:	4859      	ldr	r0, [pc, #356]	@ (8014d44 <_printf_i+0x238>)
 8014bde:	230a      	movs	r3, #10
 8014be0:	e011      	b.n	8014c06 <_printf_i+0xfa>
 8014be2:	6821      	ldr	r1, [r4, #0]
 8014be4:	6833      	ldr	r3, [r6, #0]
 8014be6:	0608      	lsls	r0, r1, #24
 8014be8:	f853 5b04 	ldr.w	r5, [r3], #4
 8014bec:	d402      	bmi.n	8014bf4 <_printf_i+0xe8>
 8014bee:	0649      	lsls	r1, r1, #25
 8014bf0:	bf48      	it	mi
 8014bf2:	b2ad      	uxthmi	r5, r5
 8014bf4:	2f6f      	cmp	r7, #111	@ 0x6f
 8014bf6:	4853      	ldr	r0, [pc, #332]	@ (8014d44 <_printf_i+0x238>)
 8014bf8:	6033      	str	r3, [r6, #0]
 8014bfa:	bf14      	ite	ne
 8014bfc:	230a      	movne	r3, #10
 8014bfe:	2308      	moveq	r3, #8
 8014c00:	2100      	movs	r1, #0
 8014c02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014c06:	6866      	ldr	r6, [r4, #4]
 8014c08:	60a6      	str	r6, [r4, #8]
 8014c0a:	2e00      	cmp	r6, #0
 8014c0c:	bfa2      	ittt	ge
 8014c0e:	6821      	ldrge	r1, [r4, #0]
 8014c10:	f021 0104 	bicge.w	r1, r1, #4
 8014c14:	6021      	strge	r1, [r4, #0]
 8014c16:	b90d      	cbnz	r5, 8014c1c <_printf_i+0x110>
 8014c18:	2e00      	cmp	r6, #0
 8014c1a:	d04b      	beq.n	8014cb4 <_printf_i+0x1a8>
 8014c1c:	4616      	mov	r6, r2
 8014c1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8014c22:	fb03 5711 	mls	r7, r3, r1, r5
 8014c26:	5dc7      	ldrb	r7, [r0, r7]
 8014c28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014c2c:	462f      	mov	r7, r5
 8014c2e:	42bb      	cmp	r3, r7
 8014c30:	460d      	mov	r5, r1
 8014c32:	d9f4      	bls.n	8014c1e <_printf_i+0x112>
 8014c34:	2b08      	cmp	r3, #8
 8014c36:	d10b      	bne.n	8014c50 <_printf_i+0x144>
 8014c38:	6823      	ldr	r3, [r4, #0]
 8014c3a:	07df      	lsls	r7, r3, #31
 8014c3c:	d508      	bpl.n	8014c50 <_printf_i+0x144>
 8014c3e:	6923      	ldr	r3, [r4, #16]
 8014c40:	6861      	ldr	r1, [r4, #4]
 8014c42:	4299      	cmp	r1, r3
 8014c44:	bfde      	ittt	le
 8014c46:	2330      	movle	r3, #48	@ 0x30
 8014c48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014c4c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8014c50:	1b92      	subs	r2, r2, r6
 8014c52:	6122      	str	r2, [r4, #16]
 8014c54:	f8cd a000 	str.w	sl, [sp]
 8014c58:	464b      	mov	r3, r9
 8014c5a:	aa03      	add	r2, sp, #12
 8014c5c:	4621      	mov	r1, r4
 8014c5e:	4640      	mov	r0, r8
 8014c60:	f7ff fee6 	bl	8014a30 <_printf_common>
 8014c64:	3001      	adds	r0, #1
 8014c66:	d14a      	bne.n	8014cfe <_printf_i+0x1f2>
 8014c68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014c6c:	b004      	add	sp, #16
 8014c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c72:	6823      	ldr	r3, [r4, #0]
 8014c74:	f043 0320 	orr.w	r3, r3, #32
 8014c78:	6023      	str	r3, [r4, #0]
 8014c7a:	4833      	ldr	r0, [pc, #204]	@ (8014d48 <_printf_i+0x23c>)
 8014c7c:	2778      	movs	r7, #120	@ 0x78
 8014c7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014c82:	6823      	ldr	r3, [r4, #0]
 8014c84:	6831      	ldr	r1, [r6, #0]
 8014c86:	061f      	lsls	r7, r3, #24
 8014c88:	f851 5b04 	ldr.w	r5, [r1], #4
 8014c8c:	d402      	bmi.n	8014c94 <_printf_i+0x188>
 8014c8e:	065f      	lsls	r7, r3, #25
 8014c90:	bf48      	it	mi
 8014c92:	b2ad      	uxthmi	r5, r5
 8014c94:	6031      	str	r1, [r6, #0]
 8014c96:	07d9      	lsls	r1, r3, #31
 8014c98:	bf44      	itt	mi
 8014c9a:	f043 0320 	orrmi.w	r3, r3, #32
 8014c9e:	6023      	strmi	r3, [r4, #0]
 8014ca0:	b11d      	cbz	r5, 8014caa <_printf_i+0x19e>
 8014ca2:	2310      	movs	r3, #16
 8014ca4:	e7ac      	b.n	8014c00 <_printf_i+0xf4>
 8014ca6:	4827      	ldr	r0, [pc, #156]	@ (8014d44 <_printf_i+0x238>)
 8014ca8:	e7e9      	b.n	8014c7e <_printf_i+0x172>
 8014caa:	6823      	ldr	r3, [r4, #0]
 8014cac:	f023 0320 	bic.w	r3, r3, #32
 8014cb0:	6023      	str	r3, [r4, #0]
 8014cb2:	e7f6      	b.n	8014ca2 <_printf_i+0x196>
 8014cb4:	4616      	mov	r6, r2
 8014cb6:	e7bd      	b.n	8014c34 <_printf_i+0x128>
 8014cb8:	6833      	ldr	r3, [r6, #0]
 8014cba:	6825      	ldr	r5, [r4, #0]
 8014cbc:	6961      	ldr	r1, [r4, #20]
 8014cbe:	1d18      	adds	r0, r3, #4
 8014cc0:	6030      	str	r0, [r6, #0]
 8014cc2:	062e      	lsls	r6, r5, #24
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	d501      	bpl.n	8014ccc <_printf_i+0x1c0>
 8014cc8:	6019      	str	r1, [r3, #0]
 8014cca:	e002      	b.n	8014cd2 <_printf_i+0x1c6>
 8014ccc:	0668      	lsls	r0, r5, #25
 8014cce:	d5fb      	bpl.n	8014cc8 <_printf_i+0x1bc>
 8014cd0:	8019      	strh	r1, [r3, #0]
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	6123      	str	r3, [r4, #16]
 8014cd6:	4616      	mov	r6, r2
 8014cd8:	e7bc      	b.n	8014c54 <_printf_i+0x148>
 8014cda:	6833      	ldr	r3, [r6, #0]
 8014cdc:	1d1a      	adds	r2, r3, #4
 8014cde:	6032      	str	r2, [r6, #0]
 8014ce0:	681e      	ldr	r6, [r3, #0]
 8014ce2:	6862      	ldr	r2, [r4, #4]
 8014ce4:	2100      	movs	r1, #0
 8014ce6:	4630      	mov	r0, r6
 8014ce8:	f7eb fa92 	bl	8000210 <memchr>
 8014cec:	b108      	cbz	r0, 8014cf2 <_printf_i+0x1e6>
 8014cee:	1b80      	subs	r0, r0, r6
 8014cf0:	6060      	str	r0, [r4, #4]
 8014cf2:	6863      	ldr	r3, [r4, #4]
 8014cf4:	6123      	str	r3, [r4, #16]
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014cfc:	e7aa      	b.n	8014c54 <_printf_i+0x148>
 8014cfe:	6923      	ldr	r3, [r4, #16]
 8014d00:	4632      	mov	r2, r6
 8014d02:	4649      	mov	r1, r9
 8014d04:	4640      	mov	r0, r8
 8014d06:	47d0      	blx	sl
 8014d08:	3001      	adds	r0, #1
 8014d0a:	d0ad      	beq.n	8014c68 <_printf_i+0x15c>
 8014d0c:	6823      	ldr	r3, [r4, #0]
 8014d0e:	079b      	lsls	r3, r3, #30
 8014d10:	d413      	bmi.n	8014d3a <_printf_i+0x22e>
 8014d12:	68e0      	ldr	r0, [r4, #12]
 8014d14:	9b03      	ldr	r3, [sp, #12]
 8014d16:	4298      	cmp	r0, r3
 8014d18:	bfb8      	it	lt
 8014d1a:	4618      	movlt	r0, r3
 8014d1c:	e7a6      	b.n	8014c6c <_printf_i+0x160>
 8014d1e:	2301      	movs	r3, #1
 8014d20:	4632      	mov	r2, r6
 8014d22:	4649      	mov	r1, r9
 8014d24:	4640      	mov	r0, r8
 8014d26:	47d0      	blx	sl
 8014d28:	3001      	adds	r0, #1
 8014d2a:	d09d      	beq.n	8014c68 <_printf_i+0x15c>
 8014d2c:	3501      	adds	r5, #1
 8014d2e:	68e3      	ldr	r3, [r4, #12]
 8014d30:	9903      	ldr	r1, [sp, #12]
 8014d32:	1a5b      	subs	r3, r3, r1
 8014d34:	42ab      	cmp	r3, r5
 8014d36:	dcf2      	bgt.n	8014d1e <_printf_i+0x212>
 8014d38:	e7eb      	b.n	8014d12 <_printf_i+0x206>
 8014d3a:	2500      	movs	r5, #0
 8014d3c:	f104 0619 	add.w	r6, r4, #25
 8014d40:	e7f5      	b.n	8014d2e <_printf_i+0x222>
 8014d42:	bf00      	nop
 8014d44:	08023a90 	.word	0x08023a90
 8014d48:	08023aa1 	.word	0x08023aa1

08014d4c <__sflush_r>:
 8014d4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d54:	0716      	lsls	r6, r2, #28
 8014d56:	4605      	mov	r5, r0
 8014d58:	460c      	mov	r4, r1
 8014d5a:	d454      	bmi.n	8014e06 <__sflush_r+0xba>
 8014d5c:	684b      	ldr	r3, [r1, #4]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	dc02      	bgt.n	8014d68 <__sflush_r+0x1c>
 8014d62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	dd48      	ble.n	8014dfa <__sflush_r+0xae>
 8014d68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014d6a:	2e00      	cmp	r6, #0
 8014d6c:	d045      	beq.n	8014dfa <__sflush_r+0xae>
 8014d6e:	2300      	movs	r3, #0
 8014d70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014d74:	682f      	ldr	r7, [r5, #0]
 8014d76:	6a21      	ldr	r1, [r4, #32]
 8014d78:	602b      	str	r3, [r5, #0]
 8014d7a:	d030      	beq.n	8014dde <__sflush_r+0x92>
 8014d7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014d7e:	89a3      	ldrh	r3, [r4, #12]
 8014d80:	0759      	lsls	r1, r3, #29
 8014d82:	d505      	bpl.n	8014d90 <__sflush_r+0x44>
 8014d84:	6863      	ldr	r3, [r4, #4]
 8014d86:	1ad2      	subs	r2, r2, r3
 8014d88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014d8a:	b10b      	cbz	r3, 8014d90 <__sflush_r+0x44>
 8014d8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014d8e:	1ad2      	subs	r2, r2, r3
 8014d90:	2300      	movs	r3, #0
 8014d92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014d94:	6a21      	ldr	r1, [r4, #32]
 8014d96:	4628      	mov	r0, r5
 8014d98:	47b0      	blx	r6
 8014d9a:	1c43      	adds	r3, r0, #1
 8014d9c:	89a3      	ldrh	r3, [r4, #12]
 8014d9e:	d106      	bne.n	8014dae <__sflush_r+0x62>
 8014da0:	6829      	ldr	r1, [r5, #0]
 8014da2:	291d      	cmp	r1, #29
 8014da4:	d82b      	bhi.n	8014dfe <__sflush_r+0xb2>
 8014da6:	4a2a      	ldr	r2, [pc, #168]	@ (8014e50 <__sflush_r+0x104>)
 8014da8:	410a      	asrs	r2, r1
 8014daa:	07d6      	lsls	r6, r2, #31
 8014dac:	d427      	bmi.n	8014dfe <__sflush_r+0xb2>
 8014dae:	2200      	movs	r2, #0
 8014db0:	6062      	str	r2, [r4, #4]
 8014db2:	04d9      	lsls	r1, r3, #19
 8014db4:	6922      	ldr	r2, [r4, #16]
 8014db6:	6022      	str	r2, [r4, #0]
 8014db8:	d504      	bpl.n	8014dc4 <__sflush_r+0x78>
 8014dba:	1c42      	adds	r2, r0, #1
 8014dbc:	d101      	bne.n	8014dc2 <__sflush_r+0x76>
 8014dbe:	682b      	ldr	r3, [r5, #0]
 8014dc0:	b903      	cbnz	r3, 8014dc4 <__sflush_r+0x78>
 8014dc2:	6560      	str	r0, [r4, #84]	@ 0x54
 8014dc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014dc6:	602f      	str	r7, [r5, #0]
 8014dc8:	b1b9      	cbz	r1, 8014dfa <__sflush_r+0xae>
 8014dca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014dce:	4299      	cmp	r1, r3
 8014dd0:	d002      	beq.n	8014dd8 <__sflush_r+0x8c>
 8014dd2:	4628      	mov	r0, r5
 8014dd4:	f7ff fbd4 	bl	8014580 <_free_r>
 8014dd8:	2300      	movs	r3, #0
 8014dda:	6363      	str	r3, [r4, #52]	@ 0x34
 8014ddc:	e00d      	b.n	8014dfa <__sflush_r+0xae>
 8014dde:	2301      	movs	r3, #1
 8014de0:	4628      	mov	r0, r5
 8014de2:	47b0      	blx	r6
 8014de4:	4602      	mov	r2, r0
 8014de6:	1c50      	adds	r0, r2, #1
 8014de8:	d1c9      	bne.n	8014d7e <__sflush_r+0x32>
 8014dea:	682b      	ldr	r3, [r5, #0]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d0c6      	beq.n	8014d7e <__sflush_r+0x32>
 8014df0:	2b1d      	cmp	r3, #29
 8014df2:	d001      	beq.n	8014df8 <__sflush_r+0xac>
 8014df4:	2b16      	cmp	r3, #22
 8014df6:	d11e      	bne.n	8014e36 <__sflush_r+0xea>
 8014df8:	602f      	str	r7, [r5, #0]
 8014dfa:	2000      	movs	r0, #0
 8014dfc:	e022      	b.n	8014e44 <__sflush_r+0xf8>
 8014dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014e02:	b21b      	sxth	r3, r3
 8014e04:	e01b      	b.n	8014e3e <__sflush_r+0xf2>
 8014e06:	690f      	ldr	r7, [r1, #16]
 8014e08:	2f00      	cmp	r7, #0
 8014e0a:	d0f6      	beq.n	8014dfa <__sflush_r+0xae>
 8014e0c:	0793      	lsls	r3, r2, #30
 8014e0e:	680e      	ldr	r6, [r1, #0]
 8014e10:	bf08      	it	eq
 8014e12:	694b      	ldreq	r3, [r1, #20]
 8014e14:	600f      	str	r7, [r1, #0]
 8014e16:	bf18      	it	ne
 8014e18:	2300      	movne	r3, #0
 8014e1a:	eba6 0807 	sub.w	r8, r6, r7
 8014e1e:	608b      	str	r3, [r1, #8]
 8014e20:	f1b8 0f00 	cmp.w	r8, #0
 8014e24:	dde9      	ble.n	8014dfa <__sflush_r+0xae>
 8014e26:	6a21      	ldr	r1, [r4, #32]
 8014e28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014e2a:	4643      	mov	r3, r8
 8014e2c:	463a      	mov	r2, r7
 8014e2e:	4628      	mov	r0, r5
 8014e30:	47b0      	blx	r6
 8014e32:	2800      	cmp	r0, #0
 8014e34:	dc08      	bgt.n	8014e48 <__sflush_r+0xfc>
 8014e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014e3e:	81a3      	strh	r3, [r4, #12]
 8014e40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e48:	4407      	add	r7, r0
 8014e4a:	eba8 0800 	sub.w	r8, r8, r0
 8014e4e:	e7e7      	b.n	8014e20 <__sflush_r+0xd4>
 8014e50:	dfbffffe 	.word	0xdfbffffe

08014e54 <_fflush_r>:
 8014e54:	b538      	push	{r3, r4, r5, lr}
 8014e56:	690b      	ldr	r3, [r1, #16]
 8014e58:	4605      	mov	r5, r0
 8014e5a:	460c      	mov	r4, r1
 8014e5c:	b913      	cbnz	r3, 8014e64 <_fflush_r+0x10>
 8014e5e:	2500      	movs	r5, #0
 8014e60:	4628      	mov	r0, r5
 8014e62:	bd38      	pop	{r3, r4, r5, pc}
 8014e64:	b118      	cbz	r0, 8014e6e <_fflush_r+0x1a>
 8014e66:	6a03      	ldr	r3, [r0, #32]
 8014e68:	b90b      	cbnz	r3, 8014e6e <_fflush_r+0x1a>
 8014e6a:	f7ff f9f1 	bl	8014250 <__sinit>
 8014e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d0f3      	beq.n	8014e5e <_fflush_r+0xa>
 8014e76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014e78:	07d0      	lsls	r0, r2, #31
 8014e7a:	d404      	bmi.n	8014e86 <_fflush_r+0x32>
 8014e7c:	0599      	lsls	r1, r3, #22
 8014e7e:	d402      	bmi.n	8014e86 <_fflush_r+0x32>
 8014e80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014e82:	f7ff fb4e 	bl	8014522 <__retarget_lock_acquire_recursive>
 8014e86:	4628      	mov	r0, r5
 8014e88:	4621      	mov	r1, r4
 8014e8a:	f7ff ff5f 	bl	8014d4c <__sflush_r>
 8014e8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014e90:	07da      	lsls	r2, r3, #31
 8014e92:	4605      	mov	r5, r0
 8014e94:	d4e4      	bmi.n	8014e60 <_fflush_r+0xc>
 8014e96:	89a3      	ldrh	r3, [r4, #12]
 8014e98:	059b      	lsls	r3, r3, #22
 8014e9a:	d4e1      	bmi.n	8014e60 <_fflush_r+0xc>
 8014e9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014e9e:	f7ff fb41 	bl	8014524 <__retarget_lock_release_recursive>
 8014ea2:	e7dd      	b.n	8014e60 <_fflush_r+0xc>

08014ea4 <fiprintf>:
 8014ea4:	b40e      	push	{r1, r2, r3}
 8014ea6:	b503      	push	{r0, r1, lr}
 8014ea8:	4601      	mov	r1, r0
 8014eaa:	ab03      	add	r3, sp, #12
 8014eac:	4805      	ldr	r0, [pc, #20]	@ (8014ec4 <fiprintf+0x20>)
 8014eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8014eb2:	6800      	ldr	r0, [r0, #0]
 8014eb4:	9301      	str	r3, [sp, #4]
 8014eb6:	f000 f88f 	bl	8014fd8 <_vfiprintf_r>
 8014eba:	b002      	add	sp, #8
 8014ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014ec0:	b003      	add	sp, #12
 8014ec2:	4770      	bx	lr
 8014ec4:	200000a4 	.word	0x200000a4

08014ec8 <memmove>:
 8014ec8:	4288      	cmp	r0, r1
 8014eca:	b510      	push	{r4, lr}
 8014ecc:	eb01 0402 	add.w	r4, r1, r2
 8014ed0:	d902      	bls.n	8014ed8 <memmove+0x10>
 8014ed2:	4284      	cmp	r4, r0
 8014ed4:	4623      	mov	r3, r4
 8014ed6:	d807      	bhi.n	8014ee8 <memmove+0x20>
 8014ed8:	1e43      	subs	r3, r0, #1
 8014eda:	42a1      	cmp	r1, r4
 8014edc:	d008      	beq.n	8014ef0 <memmove+0x28>
 8014ede:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014ee2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014ee6:	e7f8      	b.n	8014eda <memmove+0x12>
 8014ee8:	4402      	add	r2, r0
 8014eea:	4601      	mov	r1, r0
 8014eec:	428a      	cmp	r2, r1
 8014eee:	d100      	bne.n	8014ef2 <memmove+0x2a>
 8014ef0:	bd10      	pop	{r4, pc}
 8014ef2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ef6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014efa:	e7f7      	b.n	8014eec <memmove+0x24>

08014efc <_sbrk_r>:
 8014efc:	b538      	push	{r3, r4, r5, lr}
 8014efe:	4d06      	ldr	r5, [pc, #24]	@ (8014f18 <_sbrk_r+0x1c>)
 8014f00:	2300      	movs	r3, #0
 8014f02:	4604      	mov	r4, r0
 8014f04:	4608      	mov	r0, r1
 8014f06:	602b      	str	r3, [r5, #0]
 8014f08:	f7f1 f88a 	bl	8006020 <_sbrk>
 8014f0c:	1c43      	adds	r3, r0, #1
 8014f0e:	d102      	bne.n	8014f16 <_sbrk_r+0x1a>
 8014f10:	682b      	ldr	r3, [r5, #0]
 8014f12:	b103      	cbz	r3, 8014f16 <_sbrk_r+0x1a>
 8014f14:	6023      	str	r3, [r4, #0]
 8014f16:	bd38      	pop	{r3, r4, r5, pc}
 8014f18:	20005360 	.word	0x20005360

08014f1c <abort>:
 8014f1c:	b508      	push	{r3, lr}
 8014f1e:	2006      	movs	r0, #6
 8014f20:	f000 fa2e 	bl	8015380 <raise>
 8014f24:	2001      	movs	r0, #1
 8014f26:	f7f1 f803 	bl	8005f30 <_exit>

08014f2a <_realloc_r>:
 8014f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f2e:	4680      	mov	r8, r0
 8014f30:	4615      	mov	r5, r2
 8014f32:	460c      	mov	r4, r1
 8014f34:	b921      	cbnz	r1, 8014f40 <_realloc_r+0x16>
 8014f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f3a:	4611      	mov	r1, r2
 8014f3c:	f7ff bb94 	b.w	8014668 <_malloc_r>
 8014f40:	b92a      	cbnz	r2, 8014f4e <_realloc_r+0x24>
 8014f42:	f7ff fb1d 	bl	8014580 <_free_r>
 8014f46:	2400      	movs	r4, #0
 8014f48:	4620      	mov	r0, r4
 8014f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f4e:	f000 fa33 	bl	80153b8 <_malloc_usable_size_r>
 8014f52:	4285      	cmp	r5, r0
 8014f54:	4606      	mov	r6, r0
 8014f56:	d802      	bhi.n	8014f5e <_realloc_r+0x34>
 8014f58:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014f5c:	d8f4      	bhi.n	8014f48 <_realloc_r+0x1e>
 8014f5e:	4629      	mov	r1, r5
 8014f60:	4640      	mov	r0, r8
 8014f62:	f7ff fb81 	bl	8014668 <_malloc_r>
 8014f66:	4607      	mov	r7, r0
 8014f68:	2800      	cmp	r0, #0
 8014f6a:	d0ec      	beq.n	8014f46 <_realloc_r+0x1c>
 8014f6c:	42b5      	cmp	r5, r6
 8014f6e:	462a      	mov	r2, r5
 8014f70:	4621      	mov	r1, r4
 8014f72:	bf28      	it	cs
 8014f74:	4632      	movcs	r2, r6
 8014f76:	f7ff fad6 	bl	8014526 <memcpy>
 8014f7a:	4621      	mov	r1, r4
 8014f7c:	4640      	mov	r0, r8
 8014f7e:	f7ff faff 	bl	8014580 <_free_r>
 8014f82:	463c      	mov	r4, r7
 8014f84:	e7e0      	b.n	8014f48 <_realloc_r+0x1e>

08014f86 <__sfputc_r>:
 8014f86:	6893      	ldr	r3, [r2, #8]
 8014f88:	3b01      	subs	r3, #1
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	b410      	push	{r4}
 8014f8e:	6093      	str	r3, [r2, #8]
 8014f90:	da08      	bge.n	8014fa4 <__sfputc_r+0x1e>
 8014f92:	6994      	ldr	r4, [r2, #24]
 8014f94:	42a3      	cmp	r3, r4
 8014f96:	db01      	blt.n	8014f9c <__sfputc_r+0x16>
 8014f98:	290a      	cmp	r1, #10
 8014f9a:	d103      	bne.n	8014fa4 <__sfputc_r+0x1e>
 8014f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014fa0:	f000 b932 	b.w	8015208 <__swbuf_r>
 8014fa4:	6813      	ldr	r3, [r2, #0]
 8014fa6:	1c58      	adds	r0, r3, #1
 8014fa8:	6010      	str	r0, [r2, #0]
 8014faa:	7019      	strb	r1, [r3, #0]
 8014fac:	4608      	mov	r0, r1
 8014fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014fb2:	4770      	bx	lr

08014fb4 <__sfputs_r>:
 8014fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fb6:	4606      	mov	r6, r0
 8014fb8:	460f      	mov	r7, r1
 8014fba:	4614      	mov	r4, r2
 8014fbc:	18d5      	adds	r5, r2, r3
 8014fbe:	42ac      	cmp	r4, r5
 8014fc0:	d101      	bne.n	8014fc6 <__sfputs_r+0x12>
 8014fc2:	2000      	movs	r0, #0
 8014fc4:	e007      	b.n	8014fd6 <__sfputs_r+0x22>
 8014fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014fca:	463a      	mov	r2, r7
 8014fcc:	4630      	mov	r0, r6
 8014fce:	f7ff ffda 	bl	8014f86 <__sfputc_r>
 8014fd2:	1c43      	adds	r3, r0, #1
 8014fd4:	d1f3      	bne.n	8014fbe <__sfputs_r+0xa>
 8014fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014fd8 <_vfiprintf_r>:
 8014fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fdc:	460d      	mov	r5, r1
 8014fde:	b09d      	sub	sp, #116	@ 0x74
 8014fe0:	4614      	mov	r4, r2
 8014fe2:	4698      	mov	r8, r3
 8014fe4:	4606      	mov	r6, r0
 8014fe6:	b118      	cbz	r0, 8014ff0 <_vfiprintf_r+0x18>
 8014fe8:	6a03      	ldr	r3, [r0, #32]
 8014fea:	b90b      	cbnz	r3, 8014ff0 <_vfiprintf_r+0x18>
 8014fec:	f7ff f930 	bl	8014250 <__sinit>
 8014ff0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014ff2:	07d9      	lsls	r1, r3, #31
 8014ff4:	d405      	bmi.n	8015002 <_vfiprintf_r+0x2a>
 8014ff6:	89ab      	ldrh	r3, [r5, #12]
 8014ff8:	059a      	lsls	r2, r3, #22
 8014ffa:	d402      	bmi.n	8015002 <_vfiprintf_r+0x2a>
 8014ffc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014ffe:	f7ff fa90 	bl	8014522 <__retarget_lock_acquire_recursive>
 8015002:	89ab      	ldrh	r3, [r5, #12]
 8015004:	071b      	lsls	r3, r3, #28
 8015006:	d501      	bpl.n	801500c <_vfiprintf_r+0x34>
 8015008:	692b      	ldr	r3, [r5, #16]
 801500a:	b99b      	cbnz	r3, 8015034 <_vfiprintf_r+0x5c>
 801500c:	4629      	mov	r1, r5
 801500e:	4630      	mov	r0, r6
 8015010:	f000 f938 	bl	8015284 <__swsetup_r>
 8015014:	b170      	cbz	r0, 8015034 <_vfiprintf_r+0x5c>
 8015016:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015018:	07dc      	lsls	r4, r3, #31
 801501a:	d504      	bpl.n	8015026 <_vfiprintf_r+0x4e>
 801501c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015020:	b01d      	add	sp, #116	@ 0x74
 8015022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015026:	89ab      	ldrh	r3, [r5, #12]
 8015028:	0598      	lsls	r0, r3, #22
 801502a:	d4f7      	bmi.n	801501c <_vfiprintf_r+0x44>
 801502c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801502e:	f7ff fa79 	bl	8014524 <__retarget_lock_release_recursive>
 8015032:	e7f3      	b.n	801501c <_vfiprintf_r+0x44>
 8015034:	2300      	movs	r3, #0
 8015036:	9309      	str	r3, [sp, #36]	@ 0x24
 8015038:	2320      	movs	r3, #32
 801503a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801503e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015042:	2330      	movs	r3, #48	@ 0x30
 8015044:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80151f4 <_vfiprintf_r+0x21c>
 8015048:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801504c:	f04f 0901 	mov.w	r9, #1
 8015050:	4623      	mov	r3, r4
 8015052:	469a      	mov	sl, r3
 8015054:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015058:	b10a      	cbz	r2, 801505e <_vfiprintf_r+0x86>
 801505a:	2a25      	cmp	r2, #37	@ 0x25
 801505c:	d1f9      	bne.n	8015052 <_vfiprintf_r+0x7a>
 801505e:	ebba 0b04 	subs.w	fp, sl, r4
 8015062:	d00b      	beq.n	801507c <_vfiprintf_r+0xa4>
 8015064:	465b      	mov	r3, fp
 8015066:	4622      	mov	r2, r4
 8015068:	4629      	mov	r1, r5
 801506a:	4630      	mov	r0, r6
 801506c:	f7ff ffa2 	bl	8014fb4 <__sfputs_r>
 8015070:	3001      	adds	r0, #1
 8015072:	f000 80a7 	beq.w	80151c4 <_vfiprintf_r+0x1ec>
 8015076:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015078:	445a      	add	r2, fp
 801507a:	9209      	str	r2, [sp, #36]	@ 0x24
 801507c:	f89a 3000 	ldrb.w	r3, [sl]
 8015080:	2b00      	cmp	r3, #0
 8015082:	f000 809f 	beq.w	80151c4 <_vfiprintf_r+0x1ec>
 8015086:	2300      	movs	r3, #0
 8015088:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801508c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015090:	f10a 0a01 	add.w	sl, sl, #1
 8015094:	9304      	str	r3, [sp, #16]
 8015096:	9307      	str	r3, [sp, #28]
 8015098:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801509c:	931a      	str	r3, [sp, #104]	@ 0x68
 801509e:	4654      	mov	r4, sl
 80150a0:	2205      	movs	r2, #5
 80150a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150a6:	4853      	ldr	r0, [pc, #332]	@ (80151f4 <_vfiprintf_r+0x21c>)
 80150a8:	f7eb f8b2 	bl	8000210 <memchr>
 80150ac:	9a04      	ldr	r2, [sp, #16]
 80150ae:	b9d8      	cbnz	r0, 80150e8 <_vfiprintf_r+0x110>
 80150b0:	06d1      	lsls	r1, r2, #27
 80150b2:	bf44      	itt	mi
 80150b4:	2320      	movmi	r3, #32
 80150b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80150ba:	0713      	lsls	r3, r2, #28
 80150bc:	bf44      	itt	mi
 80150be:	232b      	movmi	r3, #43	@ 0x2b
 80150c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80150c4:	f89a 3000 	ldrb.w	r3, [sl]
 80150c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80150ca:	d015      	beq.n	80150f8 <_vfiprintf_r+0x120>
 80150cc:	9a07      	ldr	r2, [sp, #28]
 80150ce:	4654      	mov	r4, sl
 80150d0:	2000      	movs	r0, #0
 80150d2:	f04f 0c0a 	mov.w	ip, #10
 80150d6:	4621      	mov	r1, r4
 80150d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80150dc:	3b30      	subs	r3, #48	@ 0x30
 80150de:	2b09      	cmp	r3, #9
 80150e0:	d94b      	bls.n	801517a <_vfiprintf_r+0x1a2>
 80150e2:	b1b0      	cbz	r0, 8015112 <_vfiprintf_r+0x13a>
 80150e4:	9207      	str	r2, [sp, #28]
 80150e6:	e014      	b.n	8015112 <_vfiprintf_r+0x13a>
 80150e8:	eba0 0308 	sub.w	r3, r0, r8
 80150ec:	fa09 f303 	lsl.w	r3, r9, r3
 80150f0:	4313      	orrs	r3, r2
 80150f2:	9304      	str	r3, [sp, #16]
 80150f4:	46a2      	mov	sl, r4
 80150f6:	e7d2      	b.n	801509e <_vfiprintf_r+0xc6>
 80150f8:	9b03      	ldr	r3, [sp, #12]
 80150fa:	1d19      	adds	r1, r3, #4
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	9103      	str	r1, [sp, #12]
 8015100:	2b00      	cmp	r3, #0
 8015102:	bfbb      	ittet	lt
 8015104:	425b      	neglt	r3, r3
 8015106:	f042 0202 	orrlt.w	r2, r2, #2
 801510a:	9307      	strge	r3, [sp, #28]
 801510c:	9307      	strlt	r3, [sp, #28]
 801510e:	bfb8      	it	lt
 8015110:	9204      	strlt	r2, [sp, #16]
 8015112:	7823      	ldrb	r3, [r4, #0]
 8015114:	2b2e      	cmp	r3, #46	@ 0x2e
 8015116:	d10a      	bne.n	801512e <_vfiprintf_r+0x156>
 8015118:	7863      	ldrb	r3, [r4, #1]
 801511a:	2b2a      	cmp	r3, #42	@ 0x2a
 801511c:	d132      	bne.n	8015184 <_vfiprintf_r+0x1ac>
 801511e:	9b03      	ldr	r3, [sp, #12]
 8015120:	1d1a      	adds	r2, r3, #4
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	9203      	str	r2, [sp, #12]
 8015126:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801512a:	3402      	adds	r4, #2
 801512c:	9305      	str	r3, [sp, #20]
 801512e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015204 <_vfiprintf_r+0x22c>
 8015132:	7821      	ldrb	r1, [r4, #0]
 8015134:	2203      	movs	r2, #3
 8015136:	4650      	mov	r0, sl
 8015138:	f7eb f86a 	bl	8000210 <memchr>
 801513c:	b138      	cbz	r0, 801514e <_vfiprintf_r+0x176>
 801513e:	9b04      	ldr	r3, [sp, #16]
 8015140:	eba0 000a 	sub.w	r0, r0, sl
 8015144:	2240      	movs	r2, #64	@ 0x40
 8015146:	4082      	lsls	r2, r0
 8015148:	4313      	orrs	r3, r2
 801514a:	3401      	adds	r4, #1
 801514c:	9304      	str	r3, [sp, #16]
 801514e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015152:	4829      	ldr	r0, [pc, #164]	@ (80151f8 <_vfiprintf_r+0x220>)
 8015154:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015158:	2206      	movs	r2, #6
 801515a:	f7eb f859 	bl	8000210 <memchr>
 801515e:	2800      	cmp	r0, #0
 8015160:	d03f      	beq.n	80151e2 <_vfiprintf_r+0x20a>
 8015162:	4b26      	ldr	r3, [pc, #152]	@ (80151fc <_vfiprintf_r+0x224>)
 8015164:	bb1b      	cbnz	r3, 80151ae <_vfiprintf_r+0x1d6>
 8015166:	9b03      	ldr	r3, [sp, #12]
 8015168:	3307      	adds	r3, #7
 801516a:	f023 0307 	bic.w	r3, r3, #7
 801516e:	3308      	adds	r3, #8
 8015170:	9303      	str	r3, [sp, #12]
 8015172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015174:	443b      	add	r3, r7
 8015176:	9309      	str	r3, [sp, #36]	@ 0x24
 8015178:	e76a      	b.n	8015050 <_vfiprintf_r+0x78>
 801517a:	fb0c 3202 	mla	r2, ip, r2, r3
 801517e:	460c      	mov	r4, r1
 8015180:	2001      	movs	r0, #1
 8015182:	e7a8      	b.n	80150d6 <_vfiprintf_r+0xfe>
 8015184:	2300      	movs	r3, #0
 8015186:	3401      	adds	r4, #1
 8015188:	9305      	str	r3, [sp, #20]
 801518a:	4619      	mov	r1, r3
 801518c:	f04f 0c0a 	mov.w	ip, #10
 8015190:	4620      	mov	r0, r4
 8015192:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015196:	3a30      	subs	r2, #48	@ 0x30
 8015198:	2a09      	cmp	r2, #9
 801519a:	d903      	bls.n	80151a4 <_vfiprintf_r+0x1cc>
 801519c:	2b00      	cmp	r3, #0
 801519e:	d0c6      	beq.n	801512e <_vfiprintf_r+0x156>
 80151a0:	9105      	str	r1, [sp, #20]
 80151a2:	e7c4      	b.n	801512e <_vfiprintf_r+0x156>
 80151a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80151a8:	4604      	mov	r4, r0
 80151aa:	2301      	movs	r3, #1
 80151ac:	e7f0      	b.n	8015190 <_vfiprintf_r+0x1b8>
 80151ae:	ab03      	add	r3, sp, #12
 80151b0:	9300      	str	r3, [sp, #0]
 80151b2:	462a      	mov	r2, r5
 80151b4:	4b12      	ldr	r3, [pc, #72]	@ (8015200 <_vfiprintf_r+0x228>)
 80151b6:	a904      	add	r1, sp, #16
 80151b8:	4630      	mov	r0, r6
 80151ba:	f3af 8000 	nop.w
 80151be:	4607      	mov	r7, r0
 80151c0:	1c78      	adds	r0, r7, #1
 80151c2:	d1d6      	bne.n	8015172 <_vfiprintf_r+0x19a>
 80151c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80151c6:	07d9      	lsls	r1, r3, #31
 80151c8:	d405      	bmi.n	80151d6 <_vfiprintf_r+0x1fe>
 80151ca:	89ab      	ldrh	r3, [r5, #12]
 80151cc:	059a      	lsls	r2, r3, #22
 80151ce:	d402      	bmi.n	80151d6 <_vfiprintf_r+0x1fe>
 80151d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80151d2:	f7ff f9a7 	bl	8014524 <__retarget_lock_release_recursive>
 80151d6:	89ab      	ldrh	r3, [r5, #12]
 80151d8:	065b      	lsls	r3, r3, #25
 80151da:	f53f af1f 	bmi.w	801501c <_vfiprintf_r+0x44>
 80151de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80151e0:	e71e      	b.n	8015020 <_vfiprintf_r+0x48>
 80151e2:	ab03      	add	r3, sp, #12
 80151e4:	9300      	str	r3, [sp, #0]
 80151e6:	462a      	mov	r2, r5
 80151e8:	4b05      	ldr	r3, [pc, #20]	@ (8015200 <_vfiprintf_r+0x228>)
 80151ea:	a904      	add	r1, sp, #16
 80151ec:	4630      	mov	r0, r6
 80151ee:	f7ff fc8d 	bl	8014b0c <_printf_i>
 80151f2:	e7e4      	b.n	80151be <_vfiprintf_r+0x1e6>
 80151f4:	08023a7f 	.word	0x08023a7f
 80151f8:	08023a89 	.word	0x08023a89
 80151fc:	00000000 	.word	0x00000000
 8015200:	08014fb5 	.word	0x08014fb5
 8015204:	08023a85 	.word	0x08023a85

08015208 <__swbuf_r>:
 8015208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801520a:	460e      	mov	r6, r1
 801520c:	4614      	mov	r4, r2
 801520e:	4605      	mov	r5, r0
 8015210:	b118      	cbz	r0, 801521a <__swbuf_r+0x12>
 8015212:	6a03      	ldr	r3, [r0, #32]
 8015214:	b90b      	cbnz	r3, 801521a <__swbuf_r+0x12>
 8015216:	f7ff f81b 	bl	8014250 <__sinit>
 801521a:	69a3      	ldr	r3, [r4, #24]
 801521c:	60a3      	str	r3, [r4, #8]
 801521e:	89a3      	ldrh	r3, [r4, #12]
 8015220:	071a      	lsls	r2, r3, #28
 8015222:	d501      	bpl.n	8015228 <__swbuf_r+0x20>
 8015224:	6923      	ldr	r3, [r4, #16]
 8015226:	b943      	cbnz	r3, 801523a <__swbuf_r+0x32>
 8015228:	4621      	mov	r1, r4
 801522a:	4628      	mov	r0, r5
 801522c:	f000 f82a 	bl	8015284 <__swsetup_r>
 8015230:	b118      	cbz	r0, 801523a <__swbuf_r+0x32>
 8015232:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8015236:	4638      	mov	r0, r7
 8015238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801523a:	6823      	ldr	r3, [r4, #0]
 801523c:	6922      	ldr	r2, [r4, #16]
 801523e:	1a98      	subs	r0, r3, r2
 8015240:	6963      	ldr	r3, [r4, #20]
 8015242:	b2f6      	uxtb	r6, r6
 8015244:	4283      	cmp	r3, r0
 8015246:	4637      	mov	r7, r6
 8015248:	dc05      	bgt.n	8015256 <__swbuf_r+0x4e>
 801524a:	4621      	mov	r1, r4
 801524c:	4628      	mov	r0, r5
 801524e:	f7ff fe01 	bl	8014e54 <_fflush_r>
 8015252:	2800      	cmp	r0, #0
 8015254:	d1ed      	bne.n	8015232 <__swbuf_r+0x2a>
 8015256:	68a3      	ldr	r3, [r4, #8]
 8015258:	3b01      	subs	r3, #1
 801525a:	60a3      	str	r3, [r4, #8]
 801525c:	6823      	ldr	r3, [r4, #0]
 801525e:	1c5a      	adds	r2, r3, #1
 8015260:	6022      	str	r2, [r4, #0]
 8015262:	701e      	strb	r6, [r3, #0]
 8015264:	6962      	ldr	r2, [r4, #20]
 8015266:	1c43      	adds	r3, r0, #1
 8015268:	429a      	cmp	r2, r3
 801526a:	d004      	beq.n	8015276 <__swbuf_r+0x6e>
 801526c:	89a3      	ldrh	r3, [r4, #12]
 801526e:	07db      	lsls	r3, r3, #31
 8015270:	d5e1      	bpl.n	8015236 <__swbuf_r+0x2e>
 8015272:	2e0a      	cmp	r6, #10
 8015274:	d1df      	bne.n	8015236 <__swbuf_r+0x2e>
 8015276:	4621      	mov	r1, r4
 8015278:	4628      	mov	r0, r5
 801527a:	f7ff fdeb 	bl	8014e54 <_fflush_r>
 801527e:	2800      	cmp	r0, #0
 8015280:	d0d9      	beq.n	8015236 <__swbuf_r+0x2e>
 8015282:	e7d6      	b.n	8015232 <__swbuf_r+0x2a>

08015284 <__swsetup_r>:
 8015284:	b538      	push	{r3, r4, r5, lr}
 8015286:	4b29      	ldr	r3, [pc, #164]	@ (801532c <__swsetup_r+0xa8>)
 8015288:	4605      	mov	r5, r0
 801528a:	6818      	ldr	r0, [r3, #0]
 801528c:	460c      	mov	r4, r1
 801528e:	b118      	cbz	r0, 8015298 <__swsetup_r+0x14>
 8015290:	6a03      	ldr	r3, [r0, #32]
 8015292:	b90b      	cbnz	r3, 8015298 <__swsetup_r+0x14>
 8015294:	f7fe ffdc 	bl	8014250 <__sinit>
 8015298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801529c:	0719      	lsls	r1, r3, #28
 801529e:	d422      	bmi.n	80152e6 <__swsetup_r+0x62>
 80152a0:	06da      	lsls	r2, r3, #27
 80152a2:	d407      	bmi.n	80152b4 <__swsetup_r+0x30>
 80152a4:	2209      	movs	r2, #9
 80152a6:	602a      	str	r2, [r5, #0]
 80152a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80152ac:	81a3      	strh	r3, [r4, #12]
 80152ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80152b2:	e033      	b.n	801531c <__swsetup_r+0x98>
 80152b4:	0758      	lsls	r0, r3, #29
 80152b6:	d512      	bpl.n	80152de <__swsetup_r+0x5a>
 80152b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80152ba:	b141      	cbz	r1, 80152ce <__swsetup_r+0x4a>
 80152bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80152c0:	4299      	cmp	r1, r3
 80152c2:	d002      	beq.n	80152ca <__swsetup_r+0x46>
 80152c4:	4628      	mov	r0, r5
 80152c6:	f7ff f95b 	bl	8014580 <_free_r>
 80152ca:	2300      	movs	r3, #0
 80152cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80152ce:	89a3      	ldrh	r3, [r4, #12]
 80152d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80152d4:	81a3      	strh	r3, [r4, #12]
 80152d6:	2300      	movs	r3, #0
 80152d8:	6063      	str	r3, [r4, #4]
 80152da:	6923      	ldr	r3, [r4, #16]
 80152dc:	6023      	str	r3, [r4, #0]
 80152de:	89a3      	ldrh	r3, [r4, #12]
 80152e0:	f043 0308 	orr.w	r3, r3, #8
 80152e4:	81a3      	strh	r3, [r4, #12]
 80152e6:	6923      	ldr	r3, [r4, #16]
 80152e8:	b94b      	cbnz	r3, 80152fe <__swsetup_r+0x7a>
 80152ea:	89a3      	ldrh	r3, [r4, #12]
 80152ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80152f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80152f4:	d003      	beq.n	80152fe <__swsetup_r+0x7a>
 80152f6:	4621      	mov	r1, r4
 80152f8:	4628      	mov	r0, r5
 80152fa:	f000 f88b 	bl	8015414 <__smakebuf_r>
 80152fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015302:	f013 0201 	ands.w	r2, r3, #1
 8015306:	d00a      	beq.n	801531e <__swsetup_r+0x9a>
 8015308:	2200      	movs	r2, #0
 801530a:	60a2      	str	r2, [r4, #8]
 801530c:	6962      	ldr	r2, [r4, #20]
 801530e:	4252      	negs	r2, r2
 8015310:	61a2      	str	r2, [r4, #24]
 8015312:	6922      	ldr	r2, [r4, #16]
 8015314:	b942      	cbnz	r2, 8015328 <__swsetup_r+0xa4>
 8015316:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801531a:	d1c5      	bne.n	80152a8 <__swsetup_r+0x24>
 801531c:	bd38      	pop	{r3, r4, r5, pc}
 801531e:	0799      	lsls	r1, r3, #30
 8015320:	bf58      	it	pl
 8015322:	6962      	ldrpl	r2, [r4, #20]
 8015324:	60a2      	str	r2, [r4, #8]
 8015326:	e7f4      	b.n	8015312 <__swsetup_r+0x8e>
 8015328:	2000      	movs	r0, #0
 801532a:	e7f7      	b.n	801531c <__swsetup_r+0x98>
 801532c:	200000a4 	.word	0x200000a4

08015330 <_raise_r>:
 8015330:	291f      	cmp	r1, #31
 8015332:	b538      	push	{r3, r4, r5, lr}
 8015334:	4605      	mov	r5, r0
 8015336:	460c      	mov	r4, r1
 8015338:	d904      	bls.n	8015344 <_raise_r+0x14>
 801533a:	2316      	movs	r3, #22
 801533c:	6003      	str	r3, [r0, #0]
 801533e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015342:	bd38      	pop	{r3, r4, r5, pc}
 8015344:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015346:	b112      	cbz	r2, 801534e <_raise_r+0x1e>
 8015348:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801534c:	b94b      	cbnz	r3, 8015362 <_raise_r+0x32>
 801534e:	4628      	mov	r0, r5
 8015350:	f000 f830 	bl	80153b4 <_getpid_r>
 8015354:	4622      	mov	r2, r4
 8015356:	4601      	mov	r1, r0
 8015358:	4628      	mov	r0, r5
 801535a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801535e:	f000 b817 	b.w	8015390 <_kill_r>
 8015362:	2b01      	cmp	r3, #1
 8015364:	d00a      	beq.n	801537c <_raise_r+0x4c>
 8015366:	1c59      	adds	r1, r3, #1
 8015368:	d103      	bne.n	8015372 <_raise_r+0x42>
 801536a:	2316      	movs	r3, #22
 801536c:	6003      	str	r3, [r0, #0]
 801536e:	2001      	movs	r0, #1
 8015370:	e7e7      	b.n	8015342 <_raise_r+0x12>
 8015372:	2100      	movs	r1, #0
 8015374:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015378:	4620      	mov	r0, r4
 801537a:	4798      	blx	r3
 801537c:	2000      	movs	r0, #0
 801537e:	e7e0      	b.n	8015342 <_raise_r+0x12>

08015380 <raise>:
 8015380:	4b02      	ldr	r3, [pc, #8]	@ (801538c <raise+0xc>)
 8015382:	4601      	mov	r1, r0
 8015384:	6818      	ldr	r0, [r3, #0]
 8015386:	f7ff bfd3 	b.w	8015330 <_raise_r>
 801538a:	bf00      	nop
 801538c:	200000a4 	.word	0x200000a4

08015390 <_kill_r>:
 8015390:	b538      	push	{r3, r4, r5, lr}
 8015392:	4d07      	ldr	r5, [pc, #28]	@ (80153b0 <_kill_r+0x20>)
 8015394:	2300      	movs	r3, #0
 8015396:	4604      	mov	r4, r0
 8015398:	4608      	mov	r0, r1
 801539a:	4611      	mov	r1, r2
 801539c:	602b      	str	r3, [r5, #0]
 801539e:	f7f0 fdb7 	bl	8005f10 <_kill>
 80153a2:	1c43      	adds	r3, r0, #1
 80153a4:	d102      	bne.n	80153ac <_kill_r+0x1c>
 80153a6:	682b      	ldr	r3, [r5, #0]
 80153a8:	b103      	cbz	r3, 80153ac <_kill_r+0x1c>
 80153aa:	6023      	str	r3, [r4, #0]
 80153ac:	bd38      	pop	{r3, r4, r5, pc}
 80153ae:	bf00      	nop
 80153b0:	20005360 	.word	0x20005360

080153b4 <_getpid_r>:
 80153b4:	f7f0 bda4 	b.w	8005f00 <_getpid>

080153b8 <_malloc_usable_size_r>:
 80153b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80153bc:	1f18      	subs	r0, r3, #4
 80153be:	2b00      	cmp	r3, #0
 80153c0:	bfbc      	itt	lt
 80153c2:	580b      	ldrlt	r3, [r1, r0]
 80153c4:	18c0      	addlt	r0, r0, r3
 80153c6:	4770      	bx	lr

080153c8 <__swhatbuf_r>:
 80153c8:	b570      	push	{r4, r5, r6, lr}
 80153ca:	460c      	mov	r4, r1
 80153cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153d0:	2900      	cmp	r1, #0
 80153d2:	b096      	sub	sp, #88	@ 0x58
 80153d4:	4615      	mov	r5, r2
 80153d6:	461e      	mov	r6, r3
 80153d8:	da0d      	bge.n	80153f6 <__swhatbuf_r+0x2e>
 80153da:	89a3      	ldrh	r3, [r4, #12]
 80153dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80153e0:	f04f 0100 	mov.w	r1, #0
 80153e4:	bf14      	ite	ne
 80153e6:	2340      	movne	r3, #64	@ 0x40
 80153e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80153ec:	2000      	movs	r0, #0
 80153ee:	6031      	str	r1, [r6, #0]
 80153f0:	602b      	str	r3, [r5, #0]
 80153f2:	b016      	add	sp, #88	@ 0x58
 80153f4:	bd70      	pop	{r4, r5, r6, pc}
 80153f6:	466a      	mov	r2, sp
 80153f8:	f000 f848 	bl	801548c <_fstat_r>
 80153fc:	2800      	cmp	r0, #0
 80153fe:	dbec      	blt.n	80153da <__swhatbuf_r+0x12>
 8015400:	9901      	ldr	r1, [sp, #4]
 8015402:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015406:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801540a:	4259      	negs	r1, r3
 801540c:	4159      	adcs	r1, r3
 801540e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015412:	e7eb      	b.n	80153ec <__swhatbuf_r+0x24>

08015414 <__smakebuf_r>:
 8015414:	898b      	ldrh	r3, [r1, #12]
 8015416:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015418:	079d      	lsls	r5, r3, #30
 801541a:	4606      	mov	r6, r0
 801541c:	460c      	mov	r4, r1
 801541e:	d507      	bpl.n	8015430 <__smakebuf_r+0x1c>
 8015420:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015424:	6023      	str	r3, [r4, #0]
 8015426:	6123      	str	r3, [r4, #16]
 8015428:	2301      	movs	r3, #1
 801542a:	6163      	str	r3, [r4, #20]
 801542c:	b003      	add	sp, #12
 801542e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015430:	ab01      	add	r3, sp, #4
 8015432:	466a      	mov	r2, sp
 8015434:	f7ff ffc8 	bl	80153c8 <__swhatbuf_r>
 8015438:	9f00      	ldr	r7, [sp, #0]
 801543a:	4605      	mov	r5, r0
 801543c:	4639      	mov	r1, r7
 801543e:	4630      	mov	r0, r6
 8015440:	f7ff f912 	bl	8014668 <_malloc_r>
 8015444:	b948      	cbnz	r0, 801545a <__smakebuf_r+0x46>
 8015446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801544a:	059a      	lsls	r2, r3, #22
 801544c:	d4ee      	bmi.n	801542c <__smakebuf_r+0x18>
 801544e:	f023 0303 	bic.w	r3, r3, #3
 8015452:	f043 0302 	orr.w	r3, r3, #2
 8015456:	81a3      	strh	r3, [r4, #12]
 8015458:	e7e2      	b.n	8015420 <__smakebuf_r+0xc>
 801545a:	89a3      	ldrh	r3, [r4, #12]
 801545c:	6020      	str	r0, [r4, #0]
 801545e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015462:	81a3      	strh	r3, [r4, #12]
 8015464:	9b01      	ldr	r3, [sp, #4]
 8015466:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801546a:	b15b      	cbz	r3, 8015484 <__smakebuf_r+0x70>
 801546c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015470:	4630      	mov	r0, r6
 8015472:	f000 f81d 	bl	80154b0 <_isatty_r>
 8015476:	b128      	cbz	r0, 8015484 <__smakebuf_r+0x70>
 8015478:	89a3      	ldrh	r3, [r4, #12]
 801547a:	f023 0303 	bic.w	r3, r3, #3
 801547e:	f043 0301 	orr.w	r3, r3, #1
 8015482:	81a3      	strh	r3, [r4, #12]
 8015484:	89a3      	ldrh	r3, [r4, #12]
 8015486:	431d      	orrs	r5, r3
 8015488:	81a5      	strh	r5, [r4, #12]
 801548a:	e7cf      	b.n	801542c <__smakebuf_r+0x18>

0801548c <_fstat_r>:
 801548c:	b538      	push	{r3, r4, r5, lr}
 801548e:	4d07      	ldr	r5, [pc, #28]	@ (80154ac <_fstat_r+0x20>)
 8015490:	2300      	movs	r3, #0
 8015492:	4604      	mov	r4, r0
 8015494:	4608      	mov	r0, r1
 8015496:	4611      	mov	r1, r2
 8015498:	602b      	str	r3, [r5, #0]
 801549a:	f7f0 fd99 	bl	8005fd0 <_fstat>
 801549e:	1c43      	adds	r3, r0, #1
 80154a0:	d102      	bne.n	80154a8 <_fstat_r+0x1c>
 80154a2:	682b      	ldr	r3, [r5, #0]
 80154a4:	b103      	cbz	r3, 80154a8 <_fstat_r+0x1c>
 80154a6:	6023      	str	r3, [r4, #0]
 80154a8:	bd38      	pop	{r3, r4, r5, pc}
 80154aa:	bf00      	nop
 80154ac:	20005360 	.word	0x20005360

080154b0 <_isatty_r>:
 80154b0:	b538      	push	{r3, r4, r5, lr}
 80154b2:	4d06      	ldr	r5, [pc, #24]	@ (80154cc <_isatty_r+0x1c>)
 80154b4:	2300      	movs	r3, #0
 80154b6:	4604      	mov	r4, r0
 80154b8:	4608      	mov	r0, r1
 80154ba:	602b      	str	r3, [r5, #0]
 80154bc:	f7f0 fd98 	bl	8005ff0 <_isatty>
 80154c0:	1c43      	adds	r3, r0, #1
 80154c2:	d102      	bne.n	80154ca <_isatty_r+0x1a>
 80154c4:	682b      	ldr	r3, [r5, #0]
 80154c6:	b103      	cbz	r3, 80154ca <_isatty_r+0x1a>
 80154c8:	6023      	str	r3, [r4, #0]
 80154ca:	bd38      	pop	{r3, r4, r5, pc}
 80154cc:	20005360 	.word	0x20005360

080154d0 <_init>:
 80154d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154d2:	bf00      	nop
 80154d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80154d6:	bc08      	pop	{r3}
 80154d8:	469e      	mov	lr, r3
 80154da:	4770      	bx	lr

080154dc <_fini>:
 80154dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154de:	bf00      	nop
 80154e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80154e2:	bc08      	pop	{r3}
 80154e4:	469e      	mov	lr, r3
 80154e6:	4770      	bx	lr
